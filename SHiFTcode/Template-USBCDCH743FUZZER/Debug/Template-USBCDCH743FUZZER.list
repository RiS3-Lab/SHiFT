
Template-USBCDCH743FUZZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000f4a4  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  080174a4  080174a4  00047404  2**0
                  CONTENTS
  3 .ARM          00000008  080174a4  080174a4  000274a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  080174ac  080174ac  00047404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000008  080174ac  080174ac  000274ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  080174b4  080174b4  000274b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .privileged_data 00008000  24000000  080174bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  24008000  0801f4bc  00038000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024b10  24010000  0801fa34  00040000  2**16
                  ALLOC
 10 ._user_heap_stack 00001400  24036000  24036000  00046000  2**13
                  ALLOC
 11 ._asan_var    00000004  24037400  24037400  00047400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00047404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030658  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000668c  00000000  00000000  00077a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026c0  00000000  00000000  0007e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023e8  00000000  00000000  000807d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040f80  00000000  00000000  00082bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cfd1  00000000  00000000  000c3b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001746ca  00000000  00000000  000f0b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  002651db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a970  00000000  00000000  00265224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 08 24 95 b1 00 08 8b a2 00 08 ad a2 00 08     ...$............
 8000010:	69 a2 00 08 cf a2 00 08 f1 a2 00 08 00 00 00 00     i...............
	...
 800002c:	a5 73 00 08 e9 ae 00 08 00 00 00 00 ad 72 00 08     .s...........r..
 800003c:	57 73 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     Ws..............
 800004c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800005c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800006c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800007c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800008c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800009c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80000ac:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80000bc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80000cc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80000dc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 00 00 00 00     ................
 80000ec:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80000fc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800010c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800011c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800012c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800013c:	e5 b1 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800014c:	00 00 00 00 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800015c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800016c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800017c:	00 00 00 00 f9 ae 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800018c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800019c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80001ac:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80001bc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80001cc:	e5 b1 00 08 e5 b1 00 08 0d af 00 08 e5 b1 00 08     ................
 80001dc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80001ec:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 80001fc:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800020c:	e5 b1 00 08 e5 b1 00 08 21 af 00 08 e5 b1 00 08     ........!.......
 800021c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800022c:	00 00 00 00 e5 b1 00 08 e5 b1 00 08 00 00 00 00     ................
 800023c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800024c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800025c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800026c:	e5 b1 00 08 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
 800027c:	00 00 00 00 e5 b1 00 08 e5 b1 00 08 e5 b1 00 08     ................
	...
 8000294:	e5 b1 00 08                                         ....

08000298 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800029e:	2020      	movs	r0, #32
 80002a0:	f007 f90c 	bl	80074bc <pvPortMalloc>
 80002a4:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00a      	beq.n	80002c2 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3304      	adds	r3, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fb70 	bl	800099c <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	771a      	strb	r2, [r3, #28]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80002c2:	687b      	ldr	r3, [r7, #4]
    }
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <xEventGroupCreateStatic>:
    {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
        configASSERT( pxEventGroupBuffer );
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10a      	bne.n	80002f0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	613b      	str	r3, [r7, #16]
        "	msr basepri, %0											\n"\
        "	isb														\n"\
        "	dsb														\n"\
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002ec:	bf00      	nop
 80002ee:	e7fe      	b.n	80002ee <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 80002f0:	2320      	movs	r3, #32
 80002f2:	60bb      	str	r3, [r7, #8]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	2b20      	cmp	r3, #32
 80002f8:	d00a      	beq.n	8000310 <xEventGroupCreateStatic+0x44>
    __asm volatile
 80002fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fe:	f383 8811 	msr	BASEPRI, r3
 8000302:	f3bf 8f6f 	isb	sy
 8000306:	f3bf 8f4f 	dsb	sy
 800030a:	60fb      	str	r3, [r7, #12]
}
 800030c:	bf00      	nop
 800030e:	e7fe      	b.n	800030e <xEventGroupCreateStatic+0x42>
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	617b      	str	r3, [r7, #20]
        if( pxEventBits != NULL )
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00a      	beq.n	8000330 <xEventGroupCreateStatic+0x64>
            pxEventBits->uxEventBits = 0;
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3304      	adds	r3, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb39 	bl	800099c <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2201      	movs	r2, #1
 800032e:	771a      	strb	r2, [r3, #28]
        return pxEventBits;
 8000330:	697b      	ldr	r3, [r7, #20]
    }
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b090      	sub	sp, #64	; 0x40
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
 8000346:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8000350:	2300      	movs	r3, #0
 8000352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10a      	bne.n	8000370 <xEventGroupWaitBits+0x36>
    __asm volatile
 800035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035e:	f383 8811 	msr	BASEPRI, r3
 8000362:	f3bf 8f6f 	isb	sy
 8000366:	f3bf 8f4f 	dsb	sy
 800036a:	623b      	str	r3, [r7, #32]
}
 800036c:	bf00      	nop
 800036e:	e7fe      	b.n	800036e <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00a      	beq.n	8000390 <xEventGroupWaitBits+0x56>
    __asm volatile
 800037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800037e:	f383 8811 	msr	BASEPRI, r3
 8000382:	f3bf 8f6f 	isb	sy
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	61fb      	str	r3, [r7, #28]
}
 800038c:	bf00      	nop
 800038e:	e7fe      	b.n	800038e <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <xEventGroupWaitBits+0x72>
    __asm volatile
 8000396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800039a:	f383 8811 	msr	BASEPRI, r3
 800039e:	f3bf 8f6f 	isb	sy
 80003a2:	f3bf 8f4f 	dsb	sy
 80003a6:	61bb      	str	r3, [r7, #24]
}
 80003a8:	bf00      	nop
 80003aa:	e7fe      	b.n	80003aa <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80003ac:	f005 fa06 	bl	80057bc <xTaskGetSchedulerState>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d102      	bne.n	80003bc <xEventGroupWaitBits+0x82>
 80003b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <xEventGroupWaitBits+0x86>
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <xEventGroupWaitBits+0x88>
 80003c0:	2300      	movs	r3, #0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10a      	bne.n	80003dc <xEventGroupWaitBits+0xa2>
    __asm volatile
 80003c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ca:	f383 8811 	msr	BASEPRI, r3
 80003ce:	f3bf 8f6f 	isb	sy
 80003d2:	f3bf 8f4f 	dsb	sy
 80003d6:	617b      	str	r3, [r7, #20]
}
 80003d8:	bf00      	nop
 80003da:	e7fe      	b.n	80003da <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 80003dc:	f003 fd58 	bl	8003e90 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80003e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80003e6:	683a      	ldr	r2, [r7, #0]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003ec:	f000 fab3 	bl	8000956 <prvTestWaitCondition>
 80003f0:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 80003f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00e      	beq.n	8000416 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d028      	beq.n	8000458 <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e020      	b.n	8000458 <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000418:	2b00      	cmp	r3, #0
 800041a:	d104      	bne.n	8000426 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 8000420:	2301      	movs	r3, #1
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
 8000424:	e018      	b.n	8000458 <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d003      	beq.n	8000442 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800043c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000444:	1d18      	adds	r0, r3, #4
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044a:	4313      	orrs	r3, r2
 800044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800044e:	4619      	mov	r1, r3
 8000450:	f004 fe88 	bl	8005164 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8000458:	f003 fd28 	bl	8003eac <xTaskResumeAll>
 800045c:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800045e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000460:	2b00      	cmp	r3, #0
 8000462:	d031      	beq.n	80004c8 <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8000464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000466:	2b00      	cmp	r3, #0
 8000468:	d107      	bne.n	800047a <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <xEventGroupWaitBits+0x19a>)
 800046c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	f3bf 8f4f 	dsb	sy
 8000476:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800047a:	f005 f967 	bl	800574c <uxTaskResetEventItemValue>
 800047e:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d11a      	bne.n	80004c0 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 800048a:	f009 fc5f 	bl	8009d4c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800049a:	f000 fa5c 	bl	8000956 <prvTestWaitCondition>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d009      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d006      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b6:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80004b8:	2301      	movs	r3, #1
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 80004bc:	f009 fc64 	bl	8009d88 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80004c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3740      	adds	r7, #64	; 0x40
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	e000ed04 	.word	0xe000ed04

080004d8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <xEventGroupClearBits+0x2a>
    __asm volatile
 80004ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f0:	f383 8811 	msr	BASEPRI, r3
 80004f4:	f3bf 8f6f 	isb	sy
 80004f8:	f3bf 8f4f 	dsb	sy
 80004fc:	60fb      	str	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	e7fe      	b.n	8000500 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <xEventGroupClearBits+0x4a>
    __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	60bb      	str	r3, [r7, #8]
}
 800051e:	bf00      	nop
 8000520:	e7fe      	b.n	8000520 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 8000522:	f009 fc13 	bl	8009d4c <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	43db      	mvns	r3, r3
 8000534:	401a      	ands	r2, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 800053a:	f009 fc25 	bl	8009d88 <vPortExitCritical>

    return uxReturn;
 800053e:	693b      	ldr	r3, [r7, #16]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <xEventGroupClearBitsFromISR>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
                                            const EventBits_t uxBitsToClear )
    {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000552:	2300      	movs	r3, #0
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <xEventGroupClearBitsFromISR+0x24>)
 800055a:	f005 ffff 	bl	800655c <xTimerPendFunctionCallFromISR>
 800055e:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8000560:	68fb      	ldr	r3, [r7, #12]
    }
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	080008f5 	.word	0x080008f5

08000570 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10a      	bne.n	80005a2 <xEventGroupSetBits+0x32>
    __asm volatile
 800058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000590:	f383 8811 	msr	BASEPRI, r3
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	613b      	str	r3, [r7, #16]
}
 800059e:	bf00      	nop
 80005a0:	e7fe      	b.n	80005a0 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00a      	beq.n	80005c2 <xEventGroupSetBits+0x52>
    __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60fb      	str	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	3304      	adds	r3, #4
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	3308      	adds	r3, #8
 80005cc:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 80005ce:	f003 fc5f 	bl	8003e90 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	431a      	orrs	r2, r3
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80005e4:	e03c      	b.n	8000660 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 80005e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80005ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005fc:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000604:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000620:	e008      	b.n	8000634 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	429a      	cmp	r2, r3
 800062e:	d101      	bne.n	8000634 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8000634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000636:	2b00      	cmp	r3, #0
 8000638:	d010      	beq.n	800065c <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8000644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	4313      	orrs	r3, r2
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000654:	4619      	mov	r1, r3
 8000656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000658:	f004 ff1a 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 8000660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	429a      	cmp	r2, r3
 8000666:	d1be      	bne.n	80005e6 <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	43db      	mvns	r3, r3
 8000670:	401a      	ands	r2, r3
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8000676:	f003 fc19 	bl	8003eac <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	681b      	ldr	r3, [r3, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <xEventGroupSetBitsFromISR+0x26>)
 800069a:	f005 ff5f 	bl	800655c <xTimerPendFunctionCallFromISR>
 800069e:	6178      	str	r0, [r7, #20]

        return xReturn;
 80006a0:	697b      	ldr	r3, [r7, #20]
    }
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	080008db 	.word	0x080008db

080006b0 <xEventGroupSync>:
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xTimeoutOccurred = pdFALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <xEventGroupSync+0x36>
    __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	61bb      	str	r3, [r7, #24]
}
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <xEventGroupSync+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <xEventGroupSync+0x52>
    __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	617b      	str	r3, [r7, #20]
}
 80006fe:	bf00      	nop
 8000700:	e7fe      	b.n	8000700 <xEventGroupSync+0x50>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000702:	f005 f85b 	bl	80057bc <xTaskGetSchedulerState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <xEventGroupSync+0x62>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <xEventGroupSync+0x66>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <xEventGroupSync+0x68>
 8000716:	2300      	movs	r3, #0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <xEventGroupSync+0x82>
    __asm volatile
 800071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000720:	f383 8811 	msr	BASEPRI, r3
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	613b      	str	r3, [r7, #16]
}
 800072e:	bf00      	nop
 8000730:	e7fe      	b.n	8000730 <xEventGroupSync+0x80>
    vTaskSuspendAll();
 8000732:	f003 fbad 	bl	8003e90 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	623b      	str	r3, [r7, #32]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff16 	bl	8000570 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000744:	6a3a      	ldr	r2, [r7, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4013      	ands	r3, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d10d      	bne.n	8000770 <xEventGroupSync+0xc0>
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000754:	6a3a      	ldr	r2, [r7, #32]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	601a      	str	r2, [r3, #0]
            xTicksToWait = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	e013      	b.n	8000798 <xEventGroupSync+0xe8>
            if( xTicksToWait != ( TickType_t ) 0 )
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00b      	beq.n	800078e <xEventGroupSync+0xde>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000778:	1d18      	adds	r0, r3, #4
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	f004 fcee 	bl	8005164 <vTaskPlaceOnUnorderedEventList>
                uxReturn = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078c:	e004      	b.n	8000798 <xEventGroupSync+0xe8>
                uxReturn = pxEventBits->uxEventBits;
 800078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
                xTimeoutOccurred = pdTRUE;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    xAlreadyYielded = xTaskResumeAll();
 8000798:	f003 fb88 	bl	8003eac <xTaskResumeAll>
 800079c:	61f8      	str	r0, [r7, #28]
    if( xTicksToWait != ( TickType_t ) 0 )
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d02c      	beq.n	80007fe <xEventGroupSync+0x14e>
        if( xAlreadyYielded == pdFALSE )
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d107      	bne.n	80007ba <xEventGroupSync+0x10a>
            portYIELD_WITHIN_API();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <xEventGroupSync+0x158>)
 80007ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80007ba:	f004 ffc7 	bl	800574c <uxTaskResetEventItemValue>
 80007be:	62f8      	str	r0, [r7, #44]	; 0x2c
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d115      	bne.n	80007f6 <xEventGroupSync+0x146>
            taskENTER_CRITICAL();
 80007ca:	f009 fabf 	bl	8009d4c <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80007ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80007d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d106      	bne.n	80007ee <xEventGroupSync+0x13e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	401a      	ands	r2, r3
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	601a      	str	r2, [r3, #0]
            taskEXIT_CRITICAL();
 80007ee:	f009 facb 	bl	8009d88 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return uxReturn;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000800:	4618      	mov	r0, r3
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	e000ed04 	.word	0xe000ed04

0800080c <xEventGroupGetBitsFromISR>:
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    EventGroup_t const * const pxEventBits = xEventGroup;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000818:	f3ef 8211 	mrs	r2, BASEPRI
 800081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	60fa      	str	r2, [r7, #12]
 800082e:	60bb      	str	r3, [r7, #8]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000830:	68fb      	ldr	r3, [r7, #12]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000832:	61bb      	str	r3, [r7, #24]
        uxReturn = pxEventBits->uxEventBits;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	f383 8811 	msr	BASEPRI, r3
    (
        "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000844:	bf00      	nop
    return uxReturn;
 8000846:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8000848:	4618      	mov	r0, r3
 800084a:	3724      	adds	r7, #36	; 0x24
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <vEventGroupDelete>:
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	617b      	str	r3, [r7, #20]
    configASSERT( pxEventBits );
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10a      	bne.n	800087c <vEventGroupDelete+0x28>
    __asm volatile
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	60fb      	str	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	e7fe      	b.n	800087a <vEventGroupDelete+0x26>
    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3304      	adds	r3, #4
 8000880:	613b      	str	r3, [r7, #16]
    vTaskSuspendAll();
 8000882:	f003 fb05 	bl	8003e90 <vTaskSuspendAll>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000886:	e017      	b.n	80008b8 <vEventGroupDelete+0x64>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3308      	adds	r3, #8
 8000890:	429a      	cmp	r2, r3
 8000892:	d10a      	bne.n	80008aa <vEventGroupDelete+0x56>
    __asm volatile
 8000894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vEventGroupDelete+0x54>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fdec 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e3      	bne.n	8000888 <vEventGroupDelete+0x34>
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	7f1b      	ldrb	r3, [r3, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <vEventGroupDelete+0x7a>
                    vPortFree( pxEventBits );
 80008c8:	6978      	ldr	r0, [r7, #20]
 80008ca:	f006 fedb 	bl	8007684 <vPortFree>
    ( void ) xTaskResumeAll();
 80008ce:	f003 faed 	bl	8003eac <xTaskResumeAll>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <vEventGroupSetBitsCallback>:
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe42 	bl	8000570 <xEventGroupSetBits>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <vEventGroupClearBitsCallback>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fde9 	bl	80004d8 <xEventGroupClearBits>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60bb      	str	r3, [r7, #8]

        if( xEventGroup == NULL )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <uxEventGroupGetNumber+0x18>
        {
            xReturn = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e002      	b.n	800092c <uxEventGroupGetNumber+0x1e>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800092c:	68fb      	ldr	r3, [r7, #12]
    }
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	619a      	str	r2, [r3, #24]
    }
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <prvTestWaitCondition>:
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
    if( xWaitForAllBits == pdFALSE )
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <prvTestWaitCondition+0x26>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4013      	ands	r3, r2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e007      	b.n	800098c <prvTestWaitCondition+0x36>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4013      	ands	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	429a      	cmp	r2, r3
 8000986:	d101      	bne.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
    return xWaitConditionMet;
 800098c:	697b      	ldr	r3, [r7, #20]
}
 800098e:	4618      	mov	r0, r3
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f103 0208 	add.w	r2, r3, #8
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f103 0208 	add.w	r2, r3, #8
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0208 	add.w	r2, r3, #8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a0c:	d103      	bne.n	8000a16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00c      	b.n	8000a30 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e002      	b.n	8000a24 <vListInsert+0x2e>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d2f6      	bcs.n	8000a1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <vListInsertEnd>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d103      	bne.n	8000ae4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <xQueueGenericSend+0x32>
    __asm volatile
 8000b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	f3bf 8f6f 	isb	sy
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b32:	bf00      	nop
 8000b34:	e7fe      	b.n	8000b34 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <xQueueGenericSend+0x40>
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <xQueueGenericSend+0x44>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <xQueueGenericSend+0x46>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10a      	bne.n	8000b64 <xQueueGenericSend+0x60>
    __asm volatile
 8000b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b52:	f383 8811 	msr	BASEPRI, r3
 8000b56:	f3bf 8f6f 	isb	sy
 8000b5a:	f3bf 8f4f 	dsb	sy
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b60:	bf00      	nop
 8000b62:	e7fe      	b.n	8000b62 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d103      	bne.n	8000b72 <xQueueGenericSend+0x6e>
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <xQueueGenericSend+0x72>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <xQueueGenericSend+0x74>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10a      	bne.n	8000b92 <xQueueGenericSend+0x8e>
    __asm volatile
 8000b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b80:	f383 8811 	msr	BASEPRI, r3
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	f3bf 8f4f 	dsb	sy
 8000b8c:	623b      	str	r3, [r7, #32]
}
 8000b8e:	bf00      	nop
 8000b90:	e7fe      	b.n	8000b90 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b92:	f004 fe13 	bl	80057bc <xTaskGetSchedulerState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <xQueueGenericSend+0x9e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <xQueueGenericSend+0xa2>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <xQueueGenericSend+0xa4>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10a      	bne.n	8000bc2 <xQueueGenericSend+0xbe>
    __asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	61fb      	str	r3, [r7, #28]
}
 8000bbe:	bf00      	nop
 8000bc0:	e7fe      	b.n	8000bc0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bc2:	f009 f8c3 	bl	8009d4c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <xQueueGenericSend+0xd4>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d129      	bne.n	8000c2c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f001 fa82 	bl	80020e6 <prvCopyDataToQueue>
 8000be2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d010      	beq.n	8000c0e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	3324      	adds	r3, #36	; 0x24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fb59 	bl	80052a8 <xTaskRemoveFromEventList>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d013      	beq.n	8000c24 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	e00a      	b.n	8000c24 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000c24:	f009 f8b0 	bl	8009d88 <vPortExitCritical>
                return pdPASS;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e063      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c32:	f009 f8a9 	bl	8009d88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e05c      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 f829 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c4e:	f009 f89b 	bl	8009d88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c52:	f003 f91d 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c56:	f009 f879 	bl	8009d4c <vPortEnterCritical>
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d103      	bne.n	8000c70 <xQueueGenericSend+0x16c>
 8000c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c7c:	d103      	bne.n	8000c86 <xQueueGenericSend+0x182>
 8000c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c86:	f009 f87f 	bl	8009d88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c8a:	1d3a      	adds	r2, r7, #4
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f880 	bl	8004d98 <xTaskCheckForTimeOut>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d124      	bne.n	8000ce8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ca0:	f001 fa09 	bl	80020b6 <prvIsQueueFull>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d018      	beq.n	8000cdc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	3310      	adds	r3, #16
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fa32 	bl	800511c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cba:	f001 f994 	bl	8001fe6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000cbe:	f003 f8f5 	bl	8003eac <xTaskResumeAll>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f af7c 	bne.w	8000bc2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	f3bf 8f6f 	isb	sy
 8000cda:	e772      	b.n	8000bc2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cde:	f001 f982 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ce2:	f003 f8e3 	bl	8003eac <xTaskResumeAll>
 8000ce6:	e76c      	b.n	8000bc2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cea:	f001 f97c 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cee:	f003 f8dd 	bl	8003eac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000cf2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed04 	.word	0xe000ed04

08000d00 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <xQueuePeek+0x30>
    __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <xQueuePeek+0x3e>
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <xQueuePeek+0x42>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <xQueuePeek+0x44>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <xQueuePeek+0x5e>
    __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	623b      	str	r3, [r7, #32]
}
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d5e:	f004 fd2d 	bl	80057bc <xTaskGetSchedulerState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <xQueuePeek+0x6e>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <xQueuePeek+0x72>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <xQueuePeek+0x74>
 8000d72:	2300      	movs	r3, #0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10a      	bne.n	8000d8e <xQueuePeek+0x8e>
    __asm volatile
 8000d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	61fb      	str	r3, [r7, #28]
}
 8000d8a:	bf00      	nop
 8000d8c:	e7fe      	b.n	8000d8c <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d8e:	f008 ffdd 	bl	8009d4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d021      	beq.n	8000de2 <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000da8:	f001 fa07 	bl	80021ba <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db0:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbc:	3324      	adds	r3, #36	; 0x24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fa72 	bl	80052a8 <xTaskRemoveFromEventList>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000dca:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000dda:	f008 ffd5 	bl	8009d88 <vPortExitCritical>
                return pdPASS;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e069      	b.n	8000eb6 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000de8:	f008 ffce 	bl	8009d88 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e062      	b.n	8000eb6 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d106      	bne.n	8000e04 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 ff4e 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e04:	f008 ffc0 	bl	8009d88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8000e08:	f003 f842 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e0c:	f008 ff9e 	bl	8009d4c <vPortEnterCritical>
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1c:	d103      	bne.n	8000e26 <xQueuePeek+0x126>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e32:	d103      	bne.n	8000e3c <xQueuePeek+0x13c>
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3c:	f008 ffa4 	bl	8009d88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e40:	1d3a      	adds	r2, r7, #4
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ffa5 	bl	8004d98 <xTaskCheckForTimeOut>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d123      	bne.n	8000e9c <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e56:	f001 f918 	bl	800208a <prvIsQueueEmpty>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d017      	beq.n	8000e90 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e62:	3324      	adds	r3, #36	; 0x24
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 f957 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e70:	f001 f8b9 	bl	8001fe6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e74:	f003 f81a 	bl	8003eac <xTaskResumeAll>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d187      	bne.n	8000d8e <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	e77e      	b.n	8000d8e <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8000e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e92:	f001 f8a8 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e96:	f003 f809 	bl	8003eac <xTaskResumeAll>
 8000e9a:	e778      	b.n	8000d8e <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8000e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e9e:	f001 f8a2 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ea2:	f003 f803 	bl	8003eac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ea8:	f001 f8ef 	bl	800208a <prvIsQueueEmpty>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f43f af6d 	beq.w	8000d8e <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000eb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed04 	.word	0xe000ed04

08000ec4 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <xQueuePeekFromISR+0x2a>
    __asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	61fb      	str	r3, [r7, #28]
}
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <xQueuePeekFromISR+0x38>
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <xQueuePeekFromISR+0x3c>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <xQueuePeekFromISR+0x3e>
 8000f00:	2300      	movs	r3, #0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <xQueuePeekFromISR+0x58>
    __asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	61bb      	str	r3, [r7, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	e7fe      	b.n	8000f1a <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10a      	bne.n	8000f3a <xQueuePeekFromISR+0x76>
    __asm volatile
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	617b      	str	r3, [r7, #20]
}
 8000f36:	bf00      	nop
 8000f38:	e7fe      	b.n	8000f38 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f3a:	f008 ff9b 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 8000f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8000f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f46:	f383 8811 	msr	BASEPRI, r3
 8000f4a:	f3bf 8f6f 	isb	sy
 8000f4e:	f3bf 8f4f 	dsb	sy
 8000f52:	613a      	str	r2, [r7, #16]
 8000f54:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8000f56:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f6c:	f001 f925 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	6a3a      	ldr	r2, [r7, #32]
 8000f74:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7a:	e001      	b.n	8000f80 <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	f383 8811 	msr	BASEPRI, r3
}
 8000f8a:	bf00      	nop
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <xQueueReceive>:
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b08c      	sub	sp, #48	; 0x30
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Queue_t * const pxQueue = xQueue;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    configASSERT( ( pxQueue ) );
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <xQueueReceive+0x30>
    __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	623b      	str	r3, [r7, #32]
}
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xQueueReceive+0x2e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <xQueueReceive+0x3e>
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <xQueueReceive+0x42>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <xQueueReceive+0x44>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <xQueueReceive+0x5e>
    __asm volatile
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	61fb      	str	r3, [r7, #28]
}
 8000ff0:	bf00      	nop
 8000ff2:	e7fe      	b.n	8000ff2 <xQueueReceive+0x5c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ff4:	f004 fbe2 	bl	80057bc <xTaskGetSchedulerState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <xQueueReceive+0x6e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <xQueueReceive+0x72>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <xQueueReceive+0x74>
 8001008:	2300      	movs	r3, #0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <xQueueReceive+0x8e>
    __asm volatile
 800100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001012:	f383 8811 	msr	BASEPRI, r3
 8001016:	f3bf 8f6f 	isb	sy
 800101a:	f3bf 8f4f 	dsb	sy
 800101e:	61bb      	str	r3, [r7, #24]
}
 8001020:	bf00      	nop
 8001022:	e7fe      	b.n	8001022 <xQueueReceive+0x8c>
        taskENTER_CRITICAL();
 8001024:	f008 fe92 	bl	8009d4c <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01f      	beq.n	8001074 <xQueueReceive+0xde>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001038:	f001 f8bf 	bl	80021ba <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <xQueueReceive+0xd6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	3310      	adds	r3, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f929 	bl	80052a8 <xTaskRemoveFromEventList>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <xQueueReceive+0x1ba>)
 800105e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800106c:	f008 fe8c 	bl	8009d88 <vPortExitCritical>
                return pdPASS;
 8001070:	2301      	movs	r3, #1
 8001072:	e069      	b.n	8001148 <xQueueReceive+0x1b2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <xQueueReceive+0xec>
                    taskEXIT_CRITICAL();
 800107a:	f008 fe85 	bl	8009d88 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800107e:	2300      	movs	r3, #0
 8001080:	e062      	b.n	8001148 <xQueueReceive+0x1b2>
                else if( xEntryTimeSet == pdFALSE )
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <xQueueReceive+0x100>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fe05 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001092:	2301      	movs	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
        taskEXIT_CRITICAL();
 8001096:	f008 fe77 	bl	8009d88 <vPortExitCritical>
        vTaskSuspendAll();
 800109a:	f002 fef9 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800109e:	f008 fe55 	bl	8009d4c <vPortEnterCritical>
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ae:	d103      	bne.n	80010b8 <xQueueReceive+0x122>
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c4:	d103      	bne.n	80010ce <xQueueReceive+0x138>
 80010c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010ce:	f008 fe5b 	bl	8009d88 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fe5c 	bl	8004d98 <xTaskCheckForTimeOut>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d123      	bne.n	800112e <xQueueReceive+0x198>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e8:	f000 ffcf 	bl	800208a <prvIsQueueEmpty>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d017      	beq.n	8001122 <xQueueReceive+0x18c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f80e 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001102:	f000 ff70 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001106:	f002 fed1 	bl	8003eac <xTaskResumeAll>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d189      	bne.n	8001024 <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <xQueueReceive+0x1ba>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	e780      	b.n	8001024 <xQueueReceive+0x8e>
                prvUnlockQueue( pxQueue );
 8001122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001124:	f000 ff5f 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001128:	f002 fec0 	bl	8003eac <xTaskResumeAll>
 800112c:	e77a      	b.n	8001024 <xQueueReceive+0x8e>
            prvUnlockQueue( pxQueue );
 800112e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001130:	f000 ff59 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001134:	f002 feba 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800113a:	f000 ffa6 	bl	800208a <prvIsQueueEmpty>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f43f af6f 	beq.w	8001024 <xQueueReceive+0x8e>
                return errQUEUE_EMPTY;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	e000ed04 	.word	0xe000ed04

08001154 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <uxQueueMessagesWaiting+0x24>
    __asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	60bb      	str	r3, [r7, #8]
}
 8001174:	bf00      	nop
 8001176:	e7fe      	b.n	8001176 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8001178:	f008 fde8 	bl	8009d4c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001182:	f008 fe01 	bl	8009d88 <vPortExitCritical>

    return uxReturn;
 8001186:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <uxQueueSpacesAvailable+0x28>
    __asm volatile
 80011a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	60fb      	str	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	e7fe      	b.n	80011b6 <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 80011b8:	f008 fdc8 	bl	8009d4c <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 80011c8:	f008 fdde 	bl	8009d88 <vPortExitCritical>

    return uxReturn;
 80011cc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <vQueueDelete+0x28>
    __asm volatile
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	60bb      	str	r3, [r7, #8]
}
 80011fa:	bf00      	nop
 80011fc:	e7fe      	b.n	80011fc <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fcea 	bl	8001bd8 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f006 fa38 	bl	8007684 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <xQueueGenericSendFromISR>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <xQueueGenericSendFromISR+0x2e>
    __asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001246:	bf00      	nop
 8001248:	e7fe      	b.n	8001248 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <xQueueGenericSendFromISR+0x3c>
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <xQueueGenericSendFromISR+0x40>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <xQueueGenericSendFromISR+0x42>
 800125c:	2300      	movs	r3, #0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <xQueueGenericSendFromISR+0x5c>
    __asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001274:	bf00      	nop
 8001276:	e7fe      	b.n	8001276 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d103      	bne.n	8001286 <xQueueGenericSendFromISR+0x6a>
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <xQueueGenericSendFromISR+0x6e>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <xQueueGenericSendFromISR+0x70>
 800128a:	2300      	movs	r3, #0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <xQueueGenericSendFromISR+0x8a>
    __asm volatile
 8001290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001294:	f383 8811 	msr	BASEPRI, r3
 8001298:	f3bf 8f6f 	isb	sy
 800129c:	f3bf 8f4f 	dsb	sy
 80012a0:	623b      	str	r3, [r7, #32]
}
 80012a2:	bf00      	nop
 80012a4:	e7fe      	b.n	80012a4 <xQueueGenericSendFromISR+0x88>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012a6:	f008 fde5 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 80012aa:	f3ef 8211 	mrs	r2, BASEPRI
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	61fa      	str	r2, [r7, #28]
 80012c0:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80012c2:	69fb      	ldr	r3, [r7, #28]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <xQueueGenericSendFromISR+0xbc>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d13e      	bne.n	8001356 <xQueueGenericSendFromISR+0x13a>
            const int8_t cTxLock = pxQueue->cTxLock;
 80012d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012ee:	f000 fefa 	bl	80020e6 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80012f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fa:	d112      	bne.n	8001322 <xQueueGenericSendFromISR+0x106>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	2b00      	cmp	r3, #0
 8001302:	d025      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001306:	3324      	adds	r3, #36	; 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f003 ffcd 	bl	80052a8 <xTaskRemoveFromEventList>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01d      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e016      	b.n	8001350 <xQueueGenericSendFromISR+0x134>
                configASSERT( cTxLock != queueINT8_MAX );
 8001322:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001326:	2b7f      	cmp	r3, #127	; 0x7f
 8001328:	d10a      	bne.n	8001340 <xQueueGenericSendFromISR+0x124>
    __asm volatile
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	617b      	str	r3, [r7, #20]
}
 800133c:	bf00      	nop
 800133e:	e7fe      	b.n	800133e <xQueueGenericSendFromISR+0x122>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001344:	3301      	adds	r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b25a      	sxtb	r2, r3
 800134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001350:	2301      	movs	r3, #1
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001354:	e001      	b.n	800135a <xQueueGenericSendFromISR+0x13e>
            xReturn = errQUEUE_FULL;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f383 8811 	msr	BASEPRI, r3
}
 8001364:	bf00      	nop
    return xReturn;
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001368:	4618      	mov	r0, r3
 800136a:	3740      	adds	r7, #64	; 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <xQueueGiveFromISR>:
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( pxQueue );
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <xQueueGiveFromISR+0x2a>
    __asm volatile
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	623b      	str	r3, [r7, #32]
}
 8001396:	bf00      	nop
 8001398:	e7fe      	b.n	8001398 <xQueueGiveFromISR+0x28>
    configASSERT( pxQueue->uxItemSize == 0 );
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <xQueueGiveFromISR+0x48>
    __asm volatile
 80013a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a6:	f383 8811 	msr	BASEPRI, r3
 80013aa:	f3bf 8f6f 	isb	sy
 80013ae:	f3bf 8f4f 	dsb	sy
 80013b2:	61fb      	str	r3, [r7, #28]
}
 80013b4:	bf00      	nop
 80013b6:	e7fe      	b.n	80013b6 <xQueueGiveFromISR+0x46>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <xQueueGiveFromISR+0x58>
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <xQueueGiveFromISR+0x5c>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <xQueueGiveFromISR+0x5e>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <xQueueGiveFromISR+0x78>
    __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	61bb      	str	r3, [r7, #24]
}
 80013e4:	bf00      	nop
 80013e6:	e7fe      	b.n	80013e6 <xQueueGiveFromISR+0x76>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013e8:	f008 fd44 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 80013ec:	f3ef 8211 	mrs	r2, BASEPRI
 80013f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	f3bf 8f6f 	isb	sy
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	617a      	str	r2, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8001404:	697b      	ldr	r3, [r7, #20]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
        if( uxMessagesWaiting < pxQueue->uxLength )
 800140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	429a      	cmp	r2, r3
 8001416:	d23a      	bcs.n	800148e <xQueueGiveFromISR+0x11e>
            const int8_t cTxLock = pxQueue->cTxLock;
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 800142a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800142e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001432:	d112      	bne.n	800145a <xQueueGiveFromISR+0xea>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	d025      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	3324      	adds	r3, #36	; 0x24
 8001440:	4618      	mov	r0, r3
 8001442:	f003 ff31 	bl	80052a8 <xTaskRemoveFromEventList>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01d      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                if( pxHigherPriorityTaskWoken != NULL )
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e016      	b.n	8001488 <xQueueGiveFromISR+0x118>
                configASSERT( cTxLock != queueINT8_MAX );
 800145a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800145e:	2b7f      	cmp	r3, #127	; 0x7f
 8001460:	d10a      	bne.n	8001478 <xQueueGiveFromISR+0x108>
    __asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	60fb      	str	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	e7fe      	b.n	8001476 <xQueueGiveFromISR+0x106>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001488:	2301      	movs	r3, #1
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
 800148c:	e001      	b.n	8001492 <xQueueGiveFromISR+0x122>
            xReturn = errQUEUE_FULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f383 8811 	msr	BASEPRI, r3
}
 800149c:	bf00      	nop
    return xReturn;
 800149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <xQueueReceiveFromISR>:
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <xQueueReceiveFromISR+0x2c>
    __asm volatile
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80014d0:	bf00      	nop
 80014d2:	e7fe      	b.n	80014d2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <xQueueReceiveFromISR+0x3a>
 80014da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <xQueueReceiveFromISR+0x3e>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <xQueueReceiveFromISR+0x40>
 80014e6:	2300      	movs	r3, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10a      	bne.n	8001502 <xQueueReceiveFromISR+0x5a>
    __asm volatile
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80014fe:	bf00      	nop
 8001500:	e7fe      	b.n	8001500 <xQueueReceiveFromISR+0x58>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001502:	f008 fcb7 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 8001506:	f3ef 8211 	mrs	r2, BASEPRI
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	623a      	str	r2, [r7, #32]
 800151c:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 800151e:	6a3b      	ldr	r3, [r7, #32]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <xQueueReceiveFromISR+0x104>
            const int8_t cRxLock = pxQueue->cRxLock;
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800153c:	f000 fe3d 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 8001548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001550:	d112      	bne.n	8001578 <xQueueReceiveFromISR+0xd0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	3310      	adds	r3, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fea2 	bl	80052a8 <xTaskRemoveFromEventList>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                        if( pxHigherPriorityTaskWoken != NULL )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01a      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e016      	b.n	80015a6 <xQueueReceiveFromISR+0xfe>
                configASSERT( cRxLock != queueINT8_MAX );
 8001578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800157c:	2b7f      	cmp	r3, #127	; 0x7f
 800157e:	d10a      	bne.n	8001596 <xQueueReceiveFromISR+0xee>
    __asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61bb      	str	r3, [r7, #24]
}
 8001592:	bf00      	nop
 8001594:	e7fe      	b.n	8001594 <xQueueReceiveFromISR+0xec>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800159a:	3301      	adds	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015aa:	e001      	b.n	80015b0 <xQueueReceiveFromISR+0x108>
            xReturn = pdFAIL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	617b      	str	r3, [r7, #20]
    __asm volatile
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f383 8811 	msr	BASEPRI, r3
}
 80015ba:	bf00      	nop
    return xReturn;
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	; 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <xQueueIsQueueEmptyFromISR+0x28>
    __asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	60fb      	str	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e001      	b.n	8001600 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001600:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <xQueueIsQueueFullFromISR+0x28>
    __asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	60fb      	str	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	e7fe      	b.n	8001634 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	429a      	cmp	r2, r3
 8001640:	d102      	bne.n	8001648 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e001      	b.n	800164c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800164c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <uxQueueMessagesWaitingFromISR>:
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	617b      	str	r3, [r7, #20]
    configASSERT( pxQueue );
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <uxQueueMessagesWaitingFromISR+0x28>
    __asm volatile
 800166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	60fb      	str	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	e7fe      	b.n	8001680 <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	613b      	str	r3, [r7, #16]
    return uxReturn;
 8001688:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <xQueueCreateMutex>:
    {
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	461a      	mov	r2, r3
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f000 fafe 	bl	8001cb0 <xQueueGenericCreate>
 80016b4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fdc8 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016bc:	68fb      	ldr	r3, [r7, #12]
    }
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <xQueueCreateMutexStatic>:
    {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	4603      	mov	r3, r0
 80016ce:	6039      	str	r1, [r7, #0]
 80016d0:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f000 fb35 	bl	8001d54 <xQueueGenericCreateStatic>
 80016ea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fdad 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016f2:	68fb      	ldr	r3, [r7, #12]
    }
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <xQueueCreateCountingSemaphore>:
    {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
        if( ( uxMaxCount != 0 ) &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d010      	beq.n	8001732 <xQueueCreateCountingSemaphore+0x36>
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	d80c      	bhi.n	8001732 <xQueueCreateCountingSemaphore+0x36>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001718:	2202      	movs	r2, #2
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fac7 	bl	8001cb0 <xQueueGenericCreate>
 8001722:	60f8      	str	r0, [r7, #12]
            if( xHandle != NULL )
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d011      	beq.n	800174e <xQueueCreateCountingSemaphore+0x52>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001730:	e00d      	b.n	800174e <xQueueCreateCountingSemaphore+0x52>
            configASSERT( xHandle );
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <xQueueCreateCountingSemaphore+0x52>
    __asm volatile
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	60bb      	str	r3, [r7, #8]
}
 800174a:	bf00      	nop
 800174c:	e7fe      	b.n	800174c <xQueueCreateCountingSemaphore+0x50>
        return xHandle;
 800174e:	68fb      	ldr	r3, [r7, #12]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <xQueueCreateCountingSemaphoreStatic>:
    {
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
        if( ( uxMaxCount != 0 ) &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d013      	beq.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d80f      	bhi.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001776:	2302      	movs	r3, #2
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fae7 	bl	8001d54 <xQueueGenericCreateStatic>
 8001786:	6178      	str	r0, [r7, #20]
            if( xHandle != NULL )
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d011      	beq.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001794:	e00d      	b.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
            configASSERT( xHandle );
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
    __asm volatile
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	f383 8811 	msr	BASEPRI, r3
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	613b      	str	r3, [r7, #16]
}
 80017ae:	bf00      	nop
 80017b0:	e7fe      	b.n	80017b0 <xQueueCreateCountingSemaphoreStatic+0x58>
        return xHandle;
 80017b2:	697b      	ldr	r3, [r7, #20]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <xQueueSemaphoreTake>:
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    Queue_t * const pxQueue = xQueue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( ( pxQueue ) );
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10a      	bne.n	80017ee <xQueueSemaphoreTake+0x32>
    __asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	623b      	str	r3, [r7, #32]
}
 80017ea:	bf00      	nop
 80017ec:	e7fe      	b.n	80017ec <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <xQueueSemaphoreTake+0x50>
    __asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	61fb      	str	r3, [r7, #28]
}
 8001808:	bf00      	nop
 800180a:	e7fe      	b.n	800180a <xQueueSemaphoreTake+0x4e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800180c:	f003 ffd6 	bl	80057bc <xTaskGetSchedulerState>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <xQueueSemaphoreTake+0x60>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <xQueueSemaphoreTake+0x64>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <xQueueSemaphoreTake+0x66>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <xQueueSemaphoreTake+0x80>
    __asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	61bb      	str	r3, [r7, #24]
}
 8001838:	bf00      	nop
 800183a:	e7fe      	b.n	800183a <xQueueSemaphoreTake+0x7e>
        taskENTER_CRITICAL();
 800183c:	f008 fa86 	bl	8009d4c <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d024      	beq.n	8001896 <xQueueSemaphoreTake+0xda>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <xQueueSemaphoreTake+0xaa>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800185c:	f004 fa07 	bl	8005c6e <pvTaskIncrementMutexHeldCount>
 8001860:	4602      	mov	r2, r0
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3310      	adds	r3, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fd18 	bl	80052a8 <xTaskRemoveFromEventList>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                        queueYIELD_IF_USING_PREEMPTION();
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 8001880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800188e:	f008 fa7b 	bl	8009d88 <vPortExitCritical>
                return pdPASS;
 8001892:	2301      	movs	r3, #1
 8001894:	e097      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <xQueueSemaphoreTake+0x104>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <xQueueSemaphoreTake+0xfc>
    __asm volatile
 80018a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	617b      	str	r3, [r7, #20]
}
 80018b4:	bf00      	nop
 80018b6:	e7fe      	b.n	80018b6 <xQueueSemaphoreTake+0xfa>
                    taskEXIT_CRITICAL();
 80018b8:	f008 fa66 	bl	8009d88 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80018bc:	2300      	movs	r3, #0
 80018be:	e082      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                else if( xEntryTimeSet == pdFALSE )
 80018c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <xQueueSemaphoreTake+0x118>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 f9e6 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
        taskEXIT_CRITICAL();
 80018d4:	f008 fa58 	bl	8009d88 <vPortExitCritical>
        vTaskSuspendAll();
 80018d8:	f002 fada 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018dc:	f008 fa36 	bl	8009d4c <vPortEnterCritical>
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d103      	bne.n	80018f6 <xQueueSemaphoreTake+0x13a>
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001902:	d103      	bne.n	800190c <xQueueSemaphoreTake+0x150>
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800190c:	f008 fa3c 	bl	8009d88 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001910:	463a      	mov	r2, r7
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fa3d 	bl	8004d98 <xTaskCheckForTimeOut>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d132      	bne.n	800198a <xQueueSemaphoreTake+0x1ce>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	f000 fbb0 	bl	800208a <prvIsQueueEmpty>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d026      	beq.n	800197e <xQueueSemaphoreTake+0x1c2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <xQueueSemaphoreTake+0x190>
                            taskENTER_CRITICAL();
 8001938:	f008 fa08 	bl	8009d4c <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 ff59 	bl	80057f8 <xTaskPriorityInherit>
 8001946:	6338      	str	r0, [r7, #48]	; 0x30
                            taskEXIT_CRITICAL();
 8001948:	f008 fa1e 	bl	8009d88 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	3324      	adds	r3, #36	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fbe1 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800195a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800195c:	f000 fb43 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001960:	f002 faa4 	bl	8003eac <xTaskResumeAll>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f af68 	bne.w	800183c <xQueueSemaphoreTake+0x80>
                    portYIELD_WITHIN_API();
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	e75e      	b.n	800183c <xQueueSemaphoreTake+0x80>
                prvUnlockQueue( pxQueue );
 800197e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001980:	f000 fb31 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001984:	f002 fa92 	bl	8003eac <xTaskResumeAll>
 8001988:	e758      	b.n	800183c <xQueueSemaphoreTake+0x80>
            prvUnlockQueue( pxQueue );
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f000 fb2b 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001990:	f002 fa8c 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001996:	f000 fb78 	bl	800208a <prvIsQueueEmpty>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f43f af4d 	beq.w	800183c <xQueueSemaphoreTake+0x80>
                        if( xInheritanceOccurred != pdFALSE )
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <xQueueSemaphoreTake+0x208>
                            taskENTER_CRITICAL();
 80019a8:	f008 f9d0 	bl	8009d4c <vPortEnterCritical>
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ae:	f000 fc67 	bl	8002280 <prvGetDisinheritPriorityAfterTimeout>
 80019b2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f86e 	bl	8005a9c <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 80019c0:	f008 f9e2 	bl	8009d88 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xQueueGetMutexHolder>:
    {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	613b      	str	r3, [r7, #16]
        configASSERT( xSemaphore );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <xQueueGetMutexHolder+0x28>
    __asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	60fb      	str	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <xQueueGetMutexHolder+0x26>
        taskENTER_CRITICAL();
 80019fc:	f008 f9a6 	bl	8009d4c <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <xQueueGetMutexHolder+0x3c>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <xQueueGetMutexHolder+0x40>
                pxReturn = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8001a14:	f008 f9b8 	bl	8009d88 <vPortExitCritical>
        return pxReturn;
 8001a18:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <xQueueGetMutexHolderFromISR>:
    {
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <xQueueGetMutexHolderFromISR+0x24>
    __asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	60bb      	str	r3, [r7, #8]
}
 8001a42:	bf00      	nop
 8001a44:	e7fe      	b.n	8001a44 <xQueueGetMutexHolderFromISR+0x22>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <xQueueGetMutexHolderFromISR+0x34>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e001      	b.n	8001a5a <xQueueGetMutexHolderFromISR+0x38>
            pxReturn = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <xQueueTakeMutexRecursive>:
    {
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <xQueueTakeMutexRecursive+0x2a>
    __asm volatile
 8001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	60fb      	str	r3, [r7, #12]
}
 8001a8e:	bf00      	nop
 8001a90:	e7fe      	b.n	8001a90 <xQueueTakeMutexRecursive+0x28>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	689c      	ldr	r4, [r3, #8]
 8001a96:	f003 fe75 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	d107      	bne.n	8001ab0 <xQueueTakeMutexRecursive+0x48>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e00c      	b.n	8001aca <xQueueTakeMutexRecursive+0x62>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f7ff fe82 	bl	80017bc <xQueueSemaphoreTake>
 8001ab8:	6178      	str	r0, [r7, #20]
            if( xReturn != pdFAIL )
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <xQueueTakeMutexRecursive+0x62>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]
        return xReturn;
 8001aca:	697b      	ldr	r3, [r7, #20]
    }
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <xQueueGiveMutexRecursive>:
    {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <xQueueGiveMutexRecursive+0x28>
    __asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	60fb      	str	r3, [r7, #12]
}
 8001af8:	bf00      	nop
 8001afa:	e7fe      	b.n	8001afa <xQueueGiveMutexRecursive+0x26>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	689c      	ldr	r4, [r3, #8]
 8001b00:	f003 fe40 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001b04:	4603      	mov	r3, r0
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d111      	bne.n	8001b2e <xQueueGiveMutexRecursive+0x5a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <xQueueGiveMutexRecursive+0x54>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f7fe ffee 	bl	8000b04 <xQueueGenericSend>
            xReturn = pdPASS;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e001      	b.n	8001b32 <xQueueGiveMutexRecursive+0x5e>
            xReturn = pdFAIL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
        return xReturn;
 8001b32:	697b      	ldr	r3, [r7, #20]
    }
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <vQueueAddToRegistry+0x26>
    __asm volatile
 8001b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	60fb      	str	r3, [r7, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	e7fe      	b.n	8001b60 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e01e      	b.n	8001bb0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d105      	bne.n	8001b8e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
                    break;
 8001b8c:	e013      	b.n	8001bb6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d9dd      	bls.n	8001b72 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	24000000 	.word	0x24000000

08001bd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <vQueueUnregisterQueue+0x24>
    __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	60bb      	str	r3, [r7, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	e7fe      	b.n	8001bfa <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e016      	b.n	8001c30 <vQueueUnregisterQueue+0x58>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10b      	bne.n	8001c2a <vQueueUnregisterQueue+0x52>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2100      	movs	r1, #0
 8001c18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
                break;
 8001c28:	e006      	b.n	8001c38 <vQueueUnregisterQueue+0x60>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d9e5      	bls.n	8001c02 <vQueueUnregisterQueue+0x2a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	24000000 	.word	0x24000000

08001c48 <pcQueueGetName>:
    {
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
        configASSERT( xQueue );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <pcQueueGetName+0x28>
    __asm volatile
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	60fb      	str	r3, [r7, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	e7fe      	b.n	8001c6e <pcQueueGetName+0x26>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e010      	b.n	8001c98 <pcQueueGetName+0x50>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <pcQueueGetName+0x64>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d105      	bne.n	8001c92 <pcQueueGetName+0x4a>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <pcQueueGetName+0x64>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c8e:	613b      	str	r3, [r7, #16]
                break;
 8001c90:	e005      	b.n	8001c9e <pcQueueGetName+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9eb      	bls.n	8001c76 <pcQueueGetName+0x2e>
        return pcReturn;
 8001c9e:	693b      	ldr	r3, [r7, #16]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	24000000 	.word	0x24000000

08001cb0 <xQueueGenericCreate>:
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc8:	2100      	movs	r1, #0
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <xQueueGenericCreate+0x28>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d127      	bne.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ce6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cea:	d820      	bhi.n	8001d2e <xQueueGenericCreate+0x7e>
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3350      	adds	r3, #80	; 0x50
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fbde 	bl	80074bc <pvPortMalloc>
 8001d00:	61f8      	str	r0, [r7, #28]
            if( pxNewQueue != NULL )
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <xQueueGenericCreate+0x9a>
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3350      	adds	r3, #80	; 0x50
 8001d10:	617b      	str	r3, [r7, #20]
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa6d 	bl	8002206 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001d2c:	e00d      	b.n	8001d4a <xQueueGenericCreate+0x9a>
            configASSERT( pxNewQueue );
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGenericCreate+0x9a>
    __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	613b      	str	r3, [r7, #16]
}
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGenericCreate+0x98>
        return pxNewQueue;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
    }
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <xQueueGenericCreateStatic>:
    {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxStaticQueue );
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <xQueueGenericCreateStatic+0x2e>
    __asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	623b      	str	r3, [r7, #32]
}
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <xQueueGenericCreateStatic+0x2c>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d030      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02d      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d027      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <xQueueGenericCreateStatic+0x96>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001da6:	2350      	movs	r3, #80	; 0x50
 8001da8:	617b      	str	r3, [r7, #20]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b50      	cmp	r3, #80	; 0x50
 8001dae:	d00a      	beq.n	8001dc6 <xQueueGenericCreateStatic+0x72>
    __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	61fb      	str	r3, [r7, #28]
}
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xQueueGenericCreateStatic+0x70>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001dc6:	697b      	ldr	r3, [r7, #20]
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dd4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa0f 	bl	8002206 <prvInitialiseNewQueue>
 8001de8:	e00d      	b.n	8001e06 <xQueueGenericCreateStatic+0xb2>
            configASSERT( pxNewQueue );
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericCreateStatic+0xb2>
    __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	61bb      	str	r3, [r7, #24]
}
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericCreateStatic+0xb0>
        return pxNewQueue;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001e20:	f007 ff94 	bl	8009d4c <vPortEnterCritical>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e30:	d103      	bne.n	8001e3a <vQueueWaitForMessageRestricted+0x2a>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e46:	d103      	bne.n	8001e50 <vQueueWaitForMessageRestricted+0x40>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e50:	f007 ff9a 	bl	8009d88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3324      	adds	r3, #36	; 0x24
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f9d7 	bl	8005218 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f000 f8bb 	bl	8001fe6 <prvUnlockQueue>
    }
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <xQueueGenericReset>:
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	613b      	str	r3, [r7, #16]
    configASSERT( pxQueue );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueGenericReset+0x2e>
    __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	60fb      	str	r3, [r7, #12]
}
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericReset+0x2c>
    if( ( pxQueue != NULL ) &&
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05d      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d059      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d000      	beq.n	8001ec8 <xQueueGenericReset+0x50>
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d14c      	bne.n	8001f68 <xQueueGenericReset+0xf0>
        taskENTER_CRITICAL();
 8001ece:	f007 ff3d 	bl	8009d4c <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	441a      	add	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2200      	movs	r2, #0
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	441a      	add	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <xQueueGenericReset+0xd6>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01a      	beq.n	8001f62 <xQueueGenericReset+0xea>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f9b9 	bl	80052a8 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d012      	beq.n	8001f62 <xQueueGenericReset+0xea>
                        queueYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <xQueueGenericReset+0x11c>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	e009      	b.n	8001f62 <xQueueGenericReset+0xea>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3310      	adds	r3, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fd22 	bl	800099c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3324      	adds	r3, #36	; 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fd1d 	bl	800099c <vListInitialise>
        taskEXIT_CRITICAL();
 8001f62:	f007 ff11 	bl	8009d88 <vPortExitCritical>
 8001f66:	e001      	b.n	8001f6c <xQueueGenericReset+0xf4>
        xReturn = pdFAIL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
    configASSERT( xReturn != pdFAIL );
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <xQueueGenericReset+0x110>
    __asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	60bb      	str	r3, [r7, #8]
}
 8001f84:	bf00      	nop
 8001f86:	e7fe      	b.n	8001f86 <xQueueGenericReset+0x10e>
    return xReturn;
 8001f88:	697b      	ldr	r3, [r7, #20]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <vQueueSetQueueNumber>:
    {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <uxQueueGetQueueNumber>:
    {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <ucQueueGetQueueType>:
    {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <prvUnlockQueue>:
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001fee:	f007 fead 	bl	8009d4c <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffa:	e011      	b.n	8002020 <prvUnlockQueue+0x3a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <prvUnlockQueue+0x44>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f94d 	bl	80052a8 <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <prvUnlockQueue+0x32>
                            vTaskMissedYield();
 8002014:	f003 fbc6 	bl	80057a4 <vTaskMissedYield>
            --cTxLock;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dce9      	bgt.n	8001ffc <prvUnlockQueue+0x16>
 8002028:	e000      	b.n	800202c <prvUnlockQueue+0x46>
                        break;
 800202a:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 8002034:	f007 fea8 	bl	8009d88 <vPortExitCritical>
    taskENTER_CRITICAL();
 8002038:	f007 fe88 	bl	8009d4c <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002042:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002044:	e011      	b.n	800206a <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <prvUnlockQueue+0x8e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3310      	adds	r3, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f003 f928 	bl	80052a8 <xTaskRemoveFromEventList>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800205e:	f003 fba1 	bl	80057a4 <vTaskMissedYield>
                --cRxLock;
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	3b01      	subs	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800206a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dce9      	bgt.n	8002046 <prvUnlockQueue+0x60>
 8002072:	e000      	b.n	8002076 <prvUnlockQueue+0x90>
                break;
 8002074:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 800207e:	f007 fe83 	bl	8009d88 <vPortExitCritical>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <prvIsQueueEmpty>:
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8002092:	f007 fe5b 	bl	8009d4c <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800209e:	2301      	movs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e001      	b.n	80020a8 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020a8:	f007 fe6e 	bl	8009d88 <vPortExitCritical>
    return xReturn;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <prvIsQueueFull>:
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 80020be:	f007 fe45 	bl	8009d4c <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d102      	bne.n	80020d4 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e001      	b.n	80020d8 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020d8:	f007 fe56 	bl	8009d88 <vPortExitCritical>
    return xReturn;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <prvCopyDataToQueue>:
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <prvCopyDataToQueue+0x3a>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14d      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fc19 	bl	8005948 <xTaskPriorityDisinherit>
 8002116:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	e043      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6858      	ldr	r0, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	f014 fa1f 	bl	8016574 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d32b      	bcc.n	80021a8 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	e026      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68d8      	ldr	r0, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	461a      	mov	r2, r3
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	f014 fa05 	bl	8016574 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	425b      	negs	r3, r3
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d207      	bcs.n	8002196 <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	425b      	negs	r3, r3
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d105      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 80021b0:	697b      	ldr	r3, [r7, #20]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <prvCopyDataFromQueue>:
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d018      	beq.n	80021fe <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	441a      	add	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d303      	bcc.n	80021ee <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	461a      	mov	r2, r3
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f014 f9bb 	bl	8016574 <memcpy>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <prvInitialiseNewQueue>:
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e002      	b.n	8002228 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002234:	2101      	movs	r1, #1
 8002236:	69b8      	ldr	r0, [r7, #24]
 8002238:	f7ff fe1e 	bl	8001e78 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <prvInitialiseMutex>:
    {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fc46 	bl	8000b04 <xQueueGenericSend>
    }
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvGetDisinheritPriorityAfterTimeout>:
    {
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80022a2:	68fb      	ldr	r3, [r7, #12]
    }
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b092      	sub	sp, #72	; 0x48
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    size_t xMaxReportedSpace = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xStreamBufferSend+0x3a>
    __asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xStreamBufferSend+0x38>
    configASSERT( pxStreamBuffer );
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <xStreamBufferSend+0x56>
    __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <xStreamBufferSend+0x54>

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	633b      	str	r3, [r7, #48]	; 0x30

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	7f1b      	ldrb	r3, [r3, #28]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d018      	beq.n	800234c <xStreamBufferSend+0x9c>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	3304      	adds	r3, #4
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d80a      	bhi.n	800233e <xStreamBufferSend+0x8e>
    __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	623b      	str	r3, [r7, #32]
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xStreamBufferSend+0x8c>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 800233e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	429a      	cmp	r2, r3
 8002344:	d908      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	e005      	b.n	8002358 <xStreamBufferSend+0xa8>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 800234c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	429a      	cmp	r2, r3
 8002352:	d901      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            xRequiredSpace = xMaxReportedSpace;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d041      	beq.n	80023e2 <xStreamBufferSend+0x132>
    {
        vTaskSetTimeOutState( &xTimeOut );
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fcf2 	bl	8004d4c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8002368:	f007 fcf0 	bl	8009d4c <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800236c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800236e:	f000 faa1 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8002372:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	429a      	cmp	r2, r3
 800237a:	d218      	bcs.n	80023ae <xStreamBufferSend+0xfe>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 800237c:	2100      	movs	r1, #0
 800237e:	2000      	movs	r0, #0
 8002380:	f002 fc78 	bl	8004c74 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <xStreamBufferSend+0xf2>
    __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	61fb      	str	r3, [r7, #28]
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xStreamBufferSend+0xf0>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80023a2:	f003 f9ef 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	e002      	b.n	80023b4 <xStreamBufferSend+0x104>
                }
                else
                {
                    taskEXIT_CRITICAL();
 80023ae:	f007 fceb 	bl	8009d88 <vPortExitCritical>
                    break;
 80023b2:	e016      	b.n	80023e2 <xStreamBufferSend+0x132>
                }
            }
            taskEXIT_CRITICAL();
 80023b4:	f007 fce8 	bl	8009d88 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f002 fa40 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80023ce:	463a      	mov	r2, r7
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fcde 	bl	8004d98 <xTaskCheckForTimeOut>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0c2      	beq.n	8002368 <xStreamBufferSend+0xb8>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <xStreamBufferSend+0x140>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80023e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023ea:	f000 fa63 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80023ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023fc:	f000 fd84 	bl	8002f08 <prvWriteMessageToBuffer>
 8002400:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <xStreamBufferSend+0x190>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800240a:	f000 fcb3 	bl	8002d74 <prvBytesInBuffer>
 800240e:	4602      	mov	r2, r0
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d313      	bcc.n	8002440 <xStreamBufferSend+0x190>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8002418:	f001 fd3a 	bl	8003e90 <vTaskSuspendAll>
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <xStreamBufferSend+0x18c>
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	6918      	ldr	r0, [r3, #16]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	f001 ff4d 	bl	80042d0 <xTaskGenericNotify>
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	f001 fd36 	bl	8003eac <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002442:	4618      	mov	r0, r3
 8002444:	3740      	adds	r7, #64	; 0x40
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b090      	sub	sp, #64	; 0x40
 800244e:	af02      	add	r7, sp, #8
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xStreamBufferSendFromISR+0x32>
    __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	623b      	str	r3, [r7, #32]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xStreamBufferSendFromISR+0x4e>
    __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61fb      	str	r3, [r7, #28]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	3304      	adds	r3, #4
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80024aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ac:	f000 fa02 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80024b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024be:	f000 fd23 	bl	8002f08 <prvWriteMessageToBuffer>
 80024c2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d02d      	beq.n	8002526 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f000 fc52 	bl	8002d74 <prvBytesInBuffer>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d325      	bcc.n	8002526 <xStreamBufferSendFromISR+0xdc>
    __asm volatile
 80024da:	f3ef 8211 	mrs	r2, BASEPRI
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	61ba      	str	r2, [r7, #24]
 80024f0:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 80024f2:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <xStreamBufferSendFromISR+0xd0>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6918      	ldr	r0, [r3, #16]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	f002 f81e 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f383 8811 	msr	BASEPRI, r3
}
 8002524:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xStreamBufferReceive+0x32>
    __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61fb      	str	r3, [r7, #28]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xStreamBufferReceive+0x4e>
    __asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800258a:	2304      	movs	r3, #4
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e001      	b.n	8002594 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d037      	beq.n	800260a <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 800259a:	f007 fbd7 	bl	8009d4c <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800259e:	6a38      	ldr	r0, [r7, #32]
 80025a0:	f000 fbe8 	bl	8002d74 <prvBytesInBuffer>
 80025a4:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d817      	bhi.n	80025de <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80025ae:	2100      	movs	r1, #0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f002 fb5f 	bl	8004c74 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <xStreamBufferReceive+0xa4>
    __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	617b      	str	r3, [r7, #20]
}
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80025d4:	f003 f8d6 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025de:	f007 fbd3 	bl	8009d88 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d813      	bhi.n	8002612 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2000      	movs	r0, #0
 80025f6:	f002 f927 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002600:	6a38      	ldr	r0, [r7, #32]
 8002602:	f000 fbb7 	bl	8002d74 <prvBytesInBuffer>
 8002606:	62b8      	str	r0, [r7, #40]	; 0x28
 8002608:	e003      	b.n	8002612 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800260a:	6a38      	ldr	r0, [r7, #32]
 800260c:	f000 fbb2 	bl	8002d74 <prvBytesInBuffer>
 8002610:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	429a      	cmp	r2, r3
 8002618:	d91d      	bls.n	8002656 <xStreamBufferReceive+0x126>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6a38      	ldr	r0, [r7, #32]
 8002622:	f000 fc34 	bl	8002e8e <prvReadMessageFromBuffer>
 8002626:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d013      	beq.n	8002656 <xStreamBufferReceive+0x126>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 800262e:	f001 fc2f 	bl	8003e90 <vTaskSuspendAll>
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <xStreamBufferReceive+0x122>
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	6958      	ldr	r0, [r3, #20]
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	f001 fe42 	bl	80042d0 <xTaskGenericNotify>
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	f001 fc2b 	bl	8003eac <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b090      	sub	sp, #64	; 0x40
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvRxData );
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xStreamBufferReceiveFromISR+0x32>
    __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	623b      	str	r3, [r7, #32]
}
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xStreamBufferReceiveFromISR+0x30>
    configASSERT( pxStreamBuffer );
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <xStreamBufferReceiveFromISR+0x4e>
    __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	61fb      	str	r3, [r7, #28]
}
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <xStreamBufferReceiveFromISR+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <xStreamBufferReceiveFromISR+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80026ba:	2304      	movs	r3, #4
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	e001      	b.n	80026c4 <xStreamBufferReceiveFromISR+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80026c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c6:	f000 fb55 	bl	8002d74 <prvBytesInBuffer>
 80026ca:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d92f      	bls.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026dc:	f000 fbd7 	bl	8002e8e <prvReadMessageFromBuffer>
 80026e0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    __asm volatile
 80026e8:	f3ef 8211 	mrs	r2, BASEPRI
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61ba      	str	r2, [r7, #24]
 80026fe:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8002700:	69bb      	ldr	r3, [r7, #24]
        {
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <xStreamBufferReceiveFromISR+0xc8>
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	6958      	ldr	r0, [r3, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	f001 ff17 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	613b      	str	r3, [r7, #16]
    __asm volatile
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f383 8811 	msr	BASEPRI, r3
}
 8002732:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002736:	4618      	mov	r0, r3
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <vStreamBufferDelete>:
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]
    configASSERT( pxStreamBuffer );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <vStreamBufferDelete+0x28>
    __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60bb      	str	r3, [r7, #8]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <vStreamBufferDelete+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <vStreamBufferDelete+0x3c>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f004 ff86 	bl	8007684 <vPortFree>
}
 8002778:	e004      	b.n	8002784 <vStreamBufferDelete+0x46>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f013 ff06 	bl	8016590 <memset>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <xStreamBufferIsFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60fb      	str	r3, [r7, #12]

    configASSERT( pxStreamBuffer );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <xStreamBufferIsFull+0x28>
    __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	60bb      	str	r3, [r7, #8]
}
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <xStreamBufferIsFull+0x26>

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	7f1b      	ldrb	r3, [r3, #28]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <xStreamBufferIsFull+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80027c0:	2304      	movs	r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e001      	b.n	80027ca <xStreamBufferIsFull+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f872 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d302      	bcc.n	80027de <xStreamBufferIsFull+0x52>
    {
        xReturn = pdTRUE;
 80027d8:	2301      	movs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e001      	b.n	80027e2 <xStreamBufferIsFull+0x56>
    }
    else
    {
        xReturn = pdFALSE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80027e2:	697b      	ldr	r3, [r7, #20]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xStreamBufferIsEmpty>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xStreamBufferIsEmpty+0x28>
    __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	60bb      	str	r3, [r7, #8]
}
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xStreamBufferIsEmpty+0x26>
    xTail = pxStreamBuffer->xTail;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
    if( pxStreamBuffer->xHead == xTail )
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d102      	bne.n	800282a <xStreamBufferIsEmpty+0x3e>
        xReturn = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e001      	b.n	800282e <xStreamBufferIsEmpty+0x42>
        xReturn = pdFALSE;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    return xReturn;
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <xStreamBufferReset>:
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFAIL;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <xStreamBufferReset+0x2c>
    __asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	60bb      	str	r3, [r7, #8]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <xStreamBufferReset+0x2a>
            uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]
    taskENTER_CRITICAL();
 800286e:	f007 fa6d 	bl	8009d4c <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <xStreamBufferReset+0x6a>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d111      	bne.n	80028a6 <xStreamBufferReset+0x6a>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	68d8      	ldr	r0, [r3, #12]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	7f1b      	ldrb	r3, [r3, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f000 fbd6 	bl	8003048 <prvInitialiseNewStreamBuffer>
                xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
                        pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
    taskEXIT_CRITICAL();
 80028a6:	f007 fa6f 	bl	8009d88 <vPortExitCritical>
    return xReturn;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <xStreamBufferSpacesAvailable>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60bb      	str	r3, [r7, #8]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xStreamBufferSpacesAvailable+0x26>
        xOriginalTail = pxStreamBuffer->xTail;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
        xSpace -= pxStreamBuffer->xHead;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d1ec      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    xSpace -= ( size_t ) 1;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3b01      	subs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
    if( xSpace >= pxStreamBuffer->xLength )
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	429a      	cmp	r2, r3
 8002910:	d304      	bcc.n	800291c <xStreamBufferSpacesAvailable+0x68>
        xSpace -= pxStreamBuffer->xLength;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
    return xSpace;
 800291c:	697b      	ldr	r3, [r7, #20]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <xStreamBufferBytesAvailable>:
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xStreamBufferBytesAvailable+0x28>
    __asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60fb      	str	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xStreamBufferBytesAvailable+0x26>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f000 fa0e 	bl	8002d74 <prvBytesInBuffer>
 8002958:	6138      	str	r0, [r7, #16]
    return xReturn;
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xStreamBufferSetTriggerLevel>:
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xStreamBufferSetTriggerLevel+0x2a>
    __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	60fb      	str	r3, [r7, #12]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xStreamBufferSetTriggerLevel+0x28>
    if( xTriggerLevel == ( size_t ) 0 )
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xStreamBufferSetTriggerLevel+0x34>
        xTriggerLevel = ( size_t ) 1;
 8002994:	2301      	movs	r3, #1
 8002996:	603b      	str	r3, [r7, #0]
    if( xTriggerLevel < pxStreamBuffer->xLength )
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d205      	bcs.n	80029ae <xStreamBufferSetTriggerLevel+0x4a>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	60da      	str	r2, [r3, #12]
        xReturn = pdPASS;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e001      	b.n	80029b2 <xStreamBufferSetTriggerLevel+0x4e>
        xReturn = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    return xReturn;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xStreamBufferSendCompletedFromISR+0x2a>
    __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xStreamBufferSendCompletedFromISR+0x28>
    __asm volatile
 80029ea:	f3ef 8211 	mrs	r2, BASEPRI
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a02:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a04:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xStreamBufferSendCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	6918      	ldr	r0, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f001 fd96 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
            xReturn = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e001      	b.n	8002a34 <xStreamBufferSendCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f383 8811 	msr	BASEPRI, r3
}
 8002a3e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xStreamBufferReceiveCompletedFromISR+0x2a>
    __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61bb      	str	r3, [r7, #24]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xStreamBufferReceiveCompletedFromISR+0x28>
    __asm volatile
 8002a74:	f3ef 8211 	mrs	r2, BASEPRI
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	617a      	str	r2, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a8c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a8e:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <xStreamBufferReceiveCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6958      	ldr	r0, [r3, #20]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f001 fd51 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
            xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	e001      	b.n	8002abe <xStreamBufferReceiveCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f383 8811 	msr	BASEPRI, r3
}
 8002ac8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xStreamBufferGenericCreate>:
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
        if( xIsMessageBuffer == pdTRUE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d110      	bne.n	8002b08 <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d81b      	bhi.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	61fb      	str	r3, [r7, #28]
}
 8002b04:	bf00      	nop
 8002b06:	e7fe      	b.n	8002b06 <xStreamBufferGenericCreate+0x32>
            ucFlags = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61bb      	str	r3, [r7, #24]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xStreamBufferGenericCreate+0x54>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90a      	bls.n	8002b48 <xStreamBufferGenericCreate+0x74>
    __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	617b      	str	r3, [r7, #20]
}
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <xStreamBufferGenericCreate+0x72>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xStreamBufferGenericCreate+0x7e>
            xTriggerLevelBytes = ( size_t ) 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8002b58:	d809      	bhi.n	8002b6e <xStreamBufferGenericCreate+0x9a>
            xBufferSizeBytes++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fca9 	bl	80074bc <pvPortMalloc>
 8002b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b6c:	e001      	b.n	8002b72 <xStreamBufferGenericCreate+0x9e>
            pucAllocatedMemory = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
        if( pucAllocatedMemory != NULL )
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <xStreamBufferGenericCreate+0xba>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b8a:	f000 fa5d 	bl	8003048 <prvInitialiseNewStreamBuffer>
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <xStreamBufferGenericCreateStatic>:
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( pucStreamBufferStorageArea );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xStreamBufferGenericCreateStatic+0x2e>
    __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xStreamBufferGenericCreateStatic+0x2c>
        configASSERT( pxStaticStreamBuffer );
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xStreamBufferGenericCreateStatic+0x4a>
    __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xStreamBufferGenericCreateStatic+0x48>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d90a      	bls.n	8002c00 <xStreamBufferGenericCreateStatic+0x68>
    __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	623b      	str	r3, [r7, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xStreamBufferGenericCreateStatic+0x66>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <xStreamBufferGenericCreateStatic+0x72>
            xTriggerLevelBytes = ( size_t ) 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
        if( xIsMessageBuffer != pdFALSE )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <xStreamBufferGenericCreateStatic+0x80>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002c16:	e002      	b.n	8002c1e <xStreamBufferGenericCreateStatic+0x86>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d80a      	bhi.n	8002c3a <xStreamBufferGenericCreateStatic+0xa2>
    __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xStreamBufferGenericCreateStatic+0xa0>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002c3a:	2324      	movs	r3, #36	; 0x24
 8002c3c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b24      	cmp	r3, #36	; 0x24
 8002c42:	d00a      	beq.n	8002c5a <xStreamBufferGenericCreateStatic+0xc2>
    __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61bb      	str	r3, [r7, #24]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xStreamBufferGenericCreateStatic+0xc0>
        if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c74:	f000 f9e8 	bl	8003048 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	771a      	strb	r2, [r3, #28]
            xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	e001      	b.n	8002c90 <xStreamBufferGenericCreateStatic+0xf8>
            xReturn = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        return xReturn;
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <xStreamBufferNextMessageLengthBytes>:
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
    configASSERT( pxStreamBuffer );
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xStreamBufferNextMessageLengthBytes+0x28>
    __asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xStreamBufferNextMessageLengthBytes+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d022      	beq.n	8002d14 <xStreamBufferNextMessageLengthBytes+0x7a>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002cce:	69b8      	ldr	r0, [r7, #24]
 8002cd0:	f000 f850 	bl	8002d74 <prvBytesInBuffer>
 8002cd4:	6178      	str	r0, [r7, #20]
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d90a      	bls.n	8002cf2 <xStreamBufferNextMessageLengthBytes+0x58>
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f107 0108 	add.w	r1, r7, #8
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f000 f944 	bl	8002f74 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e012      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
            configASSERT( xBytesAvailable == 0 );
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <xStreamBufferNextMessageLengthBytes+0x74>
    __asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	60fb      	str	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xStreamBufferNextMessageLengthBytes+0x72>
            xReturn = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e001      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
        xReturn = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    return xReturn;
 8002d18:	69fb      	ldr	r3, [r7, #28]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <vStreamBufferSetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,
                                             UBaseType_t uxStreamBufferNumber )
    {
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
        xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	621a      	str	r2, [r3, #32]
    }
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <uxStreamBufferGetStreamBufferNumber>:
    {
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
        return xStreamBuffer->uxStreamBufferNumber;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
    }
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <ucStreamBufferGetStreamBufferType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
    {
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
        return( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7f1b      	ldrb	r3, [r3, #28]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <prvBytesInBuffer>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]
    if( xCount >= pxStreamBuffer->xLength )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d304      	bcc.n	8002da6 <prvBytesInBuffer+0x32>
        xCount -= pxStreamBuffer->xLength;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	60fb      	str	r3, [r7, #12]
    return xCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <prvWriteBytesToBuffer>:
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
    configASSERT( xCount > ( size_t ) 0 );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <prvWriteBytesToBuffer+0x2a>
    __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61bb      	str	r3, [r7, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <prvWriteBytesToBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf28      	it	cs
 8002dec:	4613      	movcs	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d90a      	bls.n	8002e14 <prvWriteBytesToBuffer+0x60>
    __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	617b      	str	r3, [r7, #20]
}
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <prvWriteBytesToBuffer+0x5e>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f013 fba7 	bl	8016574 <memcpy>
    if( xCount > xFirstLength )
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d91c      	bls.n	8002e68 <prvWriteBytesToBuffer+0xb4>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d90a      	bls.n	8002e52 <prvWriteBytesToBuffer+0x9e>
    __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <prvWriteBytesToBuffer+0x9c>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	18d1      	adds	r1, r2, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	f013 fb86 	bl	8016574 <memcpy>
    xHead += xCount;
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	603b      	str	r3, [r7, #0]
    if( xHead >= pxStreamBuffer->xLength )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d304      	bcc.n	8002e84 <prvWriteBytesToBuffer+0xd0>
        xHead -= pxStreamBuffer->xLength;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	603b      	str	r3, [r7, #0]
    return xHead;
 8002e84:	683b      	ldr	r3, [r7, #0]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <prvReadMessageFromBuffer>:
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
    size_t xNextTail = pxStreamBuffer->xTail;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	7f1b      	ldrb	r3, [r3, #28]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <prvReadMessageFromBuffer+0x48>
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 8002eae:	f107 0110 	add.w	r1, r7, #16
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f85c 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ebc:	61b8      	str	r0, [r7, #24]
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	61fb      	str	r3, [r7, #28]
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	603b      	str	r3, [r7, #0]
        if( xNextMessageLength > xBufferLengthBytes )
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d904      	bls.n	8002eda <prvReadMessageFromBuffer+0x4c>
            xNextMessageLength = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e001      	b.n	8002eda <prvReadMessageFromBuffer+0x4c>
        xNextMessageLength = xBufferLengthBytes;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf28      	it	cs
 8002ee2:	4613      	movcs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    if( xCount != ( size_t ) 0 )
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <prvReadMessageFromBuffer+0x70>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f83e 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]
    return xCount;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvWriteMessageToBuffer>:
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
    size_t xNextHead = pxStreamBuffer->xHead;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	7f1b      	ldrb	r3, [r3, #28]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <prvWriteMessageToBuffer+0x3e>
        if( xSpace >= xRequiredSpace )
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d307      	bcc.n	8002f40 <prvWriteMessageToBuffer+0x38>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 8002f30:	1d39      	adds	r1, r7, #4
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2204      	movs	r2, #4
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff3c 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e008      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
            xDataLengthBytes = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e005      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	bf28      	it	cs
 8002f4e:	4613      	movcs	r3, r2
 8002f50:	607b      	str	r3, [r7, #4]
    if( xDataLengthBytes != ( size_t ) 0 )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <prvWriteMessageToBuffer+0x62>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff28 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
    return xDataLengthBytes;
 8002f6a:	687b      	ldr	r3, [r7, #4]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvReadBytesFromBuffer>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
    configASSERT( xCount != ( size_t ) 0 );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <prvReadBytesFromBuffer+0x2a>
    __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61bb      	str	r3, [r7, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <prvReadBytesFromBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf28      	it	cs
 8002fac:	4613      	movcs	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
    configASSERT( xFirstLength <= xCount );
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d90a      	bls.n	8002fce <prvReadBytesFromBuffer+0x5a>
    __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	617b      	str	r3, [r7, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <prvReadBytesFromBuffer+0x58>
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d90a      	bls.n	8002ff2 <prvReadBytesFromBuffer+0x7e>
    __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	613b      	str	r3, [r7, #16]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <prvReadBytesFromBuffer+0x7c>
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	f013 fab8 	bl	8016574 <memcpy>
    if( xCount > xFirstLength )
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	d90a      	bls.n	8003022 <prvReadBytesFromBuffer+0xae>
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	18d0      	adds	r0, r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	461a      	mov	r2, r3
 800301e:	f013 faa9 	bl	8016574 <memcpy>
    xTail += xCount;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	603b      	str	r3, [r7, #0]
    if( xTail >= pxStreamBuffer->xLength )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d304      	bcc.n	800303e <prvReadBytesFromBuffer+0xca>
        xTail -= pxStreamBuffer->xLength;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	603b      	str	r3, [r7, #0]
    return xTail;
 800303e:	683b      	ldr	r3, [r7, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvInitialiseNewStreamBuffer>:
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
            const BaseType_t xWriteValue = 0x55;
 8003056:	2355      	movs	r3, #85	; 0x55
 8003058:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	68b8      	ldr	r0, [r7, #8]
 8003060:	f013 fa96 	bl	8016590 <memset>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4293      	cmp	r3, r2
 800306a:	d00a      	beq.n	8003082 <prvInitialiseNewStreamBuffer+0x3a>
    __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	613b      	str	r3, [r7, #16]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <prvInitialiseNewStreamBuffer+0x38>
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f013 fa82 	bl	8016590 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030a4:	771a      	strb	r2, [r3, #28]
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 f9f9 	bl	80074bc <pvPortMalloc>
 80030ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <xTaskCreate+0x44>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030d2:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80030d6:	f004 f9f1 	bl	80074bc <pvPortMalloc>
 80030da:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <xTaskCreate+0x3c>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80030ea:	e005      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f004 fac9 	bl	8007684 <vPortFree>
 80030f2:	e001      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <xTaskCreate+0x7e>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	2300      	movs	r3, #0
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f002 ffb5 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003122:	69f8      	ldr	r0, [r7, #28]
 8003124:	f003 f890 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e002      	b.n	8003134 <xTaskCreate+0x84>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003132:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003134:	69bb      	ldr	r3, [r7, #24]
    }
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <xTaskCreateStatic>:
    {
 800313e:	b580      	push	{r7, lr}
 8003140:	b08e      	sub	sp, #56	; 0x38
 8003142:	af04      	add	r7, sp, #16
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
        configASSERT( puxStackBuffer != NULL );
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xTaskCreateStatic+0x2a>
    __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xTaskCreateStatic+0x46>
    __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	61fb      	str	r3, [r7, #28]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xTaskCreateStatic+0x44>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003184:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8003188:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003190:	d00a      	beq.n	80031a8 <xTaskCreateStatic+0x6a>
    __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61bb      	str	r3, [r7, #24]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskCreateStatic+0x68>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031a8:	693b      	ldr	r3, [r7, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01f      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031ca:	2300      	movs	r3, #0
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f002 ff52 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ea:	f003 f82d 	bl	8006248 <prvAddNewTaskToReadyList>
 80031ee:	e001      	b.n	80031f4 <xTaskCreateStatic+0xb6>
            xReturn = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
        return xReturn;
 80031f4:	697b      	ldr	r3, [r7, #20]
    }
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <xTaskCreateRestricted>:
    {
 80031fe:	b5b0      	push	{r4, r5, r7, lr}
 8003200:	b08a      	sub	sp, #40	; 0x28
 8003202:	af04      	add	r7, sp, #16
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320c:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xTaskCreateRestricted+0x2e>
    __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	60fb      	str	r3, [r7, #12]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xTaskCreateRestricted+0x2c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02c      	beq.n	800328e <xTaskCreateRestricted+0x90>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003234:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8003238:	f004 f940 	bl	80074bc <pvPortMalloc>
 800323c:	6138      	str	r0, [r7, #16]
            if( pxNewTCB != NULL )
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d024      	beq.n	800328e <xTaskCreateRestricted+0x90>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6859      	ldr	r1, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003262:	461d      	mov	r5, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68dc      	ldr	r4, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions );
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003270:	9203      	str	r2, [sp, #12]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4623      	mov	r3, r4
 800327e:	462a      	mov	r2, r5
 8003280:	f002 ff04 	bl	800608c <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 8003284:	6938      	ldr	r0, [r7, #16]
 8003286:	f002 ffdf 	bl	8006248 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
        return xReturn;
 800328e:	697b      	ldr	r3, [r7, #20]
    }
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <xTaskCreateRestrictedStatic>:
    {
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af04      	add	r7, sp, #16
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a6:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCreateRestrictedStatic+0x2e>
    __asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	60fb      	str	r3, [r7, #12]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateRestrictedStatic+0x2c>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xTaskCreateRestrictedStatic+0x4e>
    __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60bb      	str	r3, [r7, #8]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateRestrictedStatic+0x4c>
        if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02d      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d028      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fe:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
                                  ( uint32_t ) pxTaskDefinition->usStackDepth,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	891b      	ldrh	r3, [r3, #8]
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800331e:	461d      	mov	r5, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68dc      	ldr	r4, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
                                  pxTaskDefinition->xRegions );
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	3218      	adds	r2, #24
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4623      	mov	r3, r4
 800333a:	462a      	mov	r2, r5
 800333c:	f002 fea6 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003340:	6938      	ldr	r0, [r7, #16]
 8003342:	f002 ff81 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
        return xReturn;
 800334a:	697b      	ldr	r3, [r7, #20]
    }
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}

08003354 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <vTaskAllocateMPURegions+0x16>
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <vTaskAllocateMPURegions+0x30>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e000      	b.n	800336c <vTaskAllocateMPURegions+0x18>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1d18      	adds	r0, r3, #4
 8003372:	2300      	movs	r3, #0
 8003374:	2200      	movs	r2, #0
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	f003 fe36 	bl	8006fe8 <vPortStoreTaskMPUSettings>
    }
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	24000040 	.word	0x24000040

08003388 <vTaskDelete>:
    {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003390:	f006 fcdc 	bl	8009d4c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <vTaskDelete+0x18>
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <vTaskDelete+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e000      	b.n	80033a2 <vTaskDelete+0x1a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3384      	adds	r3, #132	; 0x84
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fb81 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <vTaskDelete+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3398      	adds	r3, #152	; 0x98
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fb77 	bl	8000ab0 <uxListRemove>
            uxTaskNumber++;
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <vTaskDelete+0xd4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <vTaskDelete+0xd4>)
 80033ca:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <vTaskDelete+0xd0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10b      	bne.n	80033ee <vTaskDelete+0x66>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3384      	adds	r3, #132	; 0x84
 80033da:	4619      	mov	r1, r3
 80033dc:	4820      	ldr	r0, [pc, #128]	; (8003460 <vTaskDelete+0xd8>)
 80033de:	f7fd fb43 	bl	8000a68 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <vTaskDelete+0xdc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <vTaskDelete+0xdc>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e006      	b.n	80033fc <vTaskDelete+0x74>
                --uxCurrentNumberOfTasks;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <vTaskDelete+0xe0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <vTaskDelete+0xe0>)
 80033f6:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 80033f8:	f002 fe2c 	bl	8006054 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80033fc:	f006 fcc4 	bl	8009d88 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <vTaskDelete+0xd0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d002      	beq.n	8003410 <vTaskDelete+0x88>
            prvDeleteTCB( pxTCB );
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f002 fcde 	bl	8005dcc <prvDeleteTCB>
        if( xSchedulerRunning != pdFALSE )
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <vTaskDelete+0xe4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <vTaskDelete+0xc8>
            if( pxTCB == pxCurrentTCB )
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <vTaskDelete+0xd0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d116      	bne.n	8003450 <vTaskDelete+0xc8>
                configASSERT( uxSchedulerSuspended == 0 );
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <vTaskDelete+0xe8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <vTaskDelete+0xb8>
    __asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60bb      	str	r3, [r7, #8]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vTaskDelete+0xb6>
                portYIELD_WITHIN_API();
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <vTaskDelete+0xec>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
    }
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	24000040 	.word	0x24000040
 800345c:	24000530 	.word	0x24000530
 8003460:	240004e8 	.word	0x240004e8
 8003464:	240004fc 	.word	0x240004fc
 8003468:	24000514 	.word	0x24000514
 800346c:	24000520 	.word	0x24000520
 8003470:	2400053c 	.word	0x2400053c
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vTaskDelay>:
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <vTaskDelay+0x42>
            configASSERT( uxSchedulerSuspended == 0 );
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <vTaskDelay+0x60>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <vTaskDelay+0x30>
    __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60bb      	str	r3, [r7, #8]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80034a8:	f000 fcf2 	bl	8003e90 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f002 fcee 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80034b4:	f000 fcfa 	bl	8003eac <xTaskResumeAll>
 80034b8:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <vTaskDelay+0x58>
            portYIELD_WITHIN_API();
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vTaskDelay+0x64>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
    }
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2400053c 	.word	0x2400053c
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xTaskDelayUntil>:
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxPreviousWakeTime );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskDelayUntil+0x2a>
    __asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	617b      	str	r3, [r7, #20]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xTaskDelayUntil+0x46>
    __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <xTaskDelayUntil+0xf0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <xTaskDelayUntil+0x64>
    __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 8003544:	f000 fca4 	bl	8003e90 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <xTaskDelayUntil+0xf4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	623b      	str	r3, [r7, #32]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4413      	add	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
            if( xConstTickCount < *pxPreviousWakeTime )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20b      	bcs.n	800357a <xTaskDelayUntil+0x9a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	429a      	cmp	r2, r3
 800356a:	d211      	bcs.n	8003590 <xTaskDelayUntil+0xb0>
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d90d      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e00a      	b.n	8003590 <xTaskDelayUntil+0xb0>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	d303      	bcc.n	800358c <xTaskDelayUntil+0xac>
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d901      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
            *pxPreviousWakeTime = xTimeToWake;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <xTaskDelayUntil+0xca>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fc73 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80035aa:	f000 fc7f 	bl	8003eac <xTaskResumeAll>
 80035ae:	61b8      	str	r0, [r7, #24]
        if( xAlreadyYielded == pdFALSE )
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <xTaskDelayUntil+0xe6>
            portYIELD_WITHIN_API();
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <xTaskDelayUntil+0xf8>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
        return xShouldDelay;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	2400053c 	.word	0x2400053c
 80035d4:	24000518 	.word	0x24000518
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <uxTaskPriorityGet>:
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80035e4:	f006 fbb2 	bl	8009d4c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <uxTaskPriorityGet+0x18>
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <uxTaskPriorityGet+0x34>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e000      	b.n	80035f6 <uxTaskPriorityGet+0x1a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 8003600:	f006 fbc2 	bl	8009d88 <vPortExitCritical>
        return uxReturn;
 8003604:	68bb      	ldr	r3, [r7, #8]
    }
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	24000040 	.word	0x24000040

08003614 <uxTaskPriorityGetFromISR>:
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800361c:	f006 fc2a 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 8003620:	f3ef 8211 	mrs	r2, BASEPRI
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613a      	str	r2, [r7, #16]
 8003636:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003638:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800363a:	61fb      	str	r3, [r7, #28]
            pxTCB = prvGetTCBFromHandle( xTask );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <uxTaskPriorityGetFromISR+0x34>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <uxTaskPriorityGetFromISR+0x58>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e000      	b.n	800364a <uxTaskPriorityGetFromISR+0x36>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	61bb      	str	r3, [r7, #24]
            uxReturn = pxTCB->uxPriority;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f383 8811 	msr	BASEPRI, r3
}
 800365e:	bf00      	nop
        return uxReturn;
 8003660:	697b      	ldr	r3, [r7, #20]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	24000040 	.word	0x24000040

08003670 <eTaskGetState>:
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB );
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <eTaskGetState+0x28>
    __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60fb      	str	r3, [r7, #12]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <eTaskGetState+0x26>
        if( pxTCB == pxCurrentTCB )
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <eTaskGetState+0xe4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d103      	bne.n	80036aa <eTaskGetState+0x3a>
            eReturn = eRunning;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036a8:	e04e      	b.n	8003748 <eTaskGetState+0xd8>
            taskENTER_CRITICAL();
 80036aa:	f006 fb4f 	bl	8009d4c <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <eTaskGetState+0xe8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <eTaskGetState+0xec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	613b      	str	r3, [r7, #16]
            taskEXIT_CRITICAL();
 80036c2:	f006 fb61 	bl	8009d88 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d003      	beq.n	80036d6 <eTaskGetState+0x66>
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d103      	bne.n	80036de <eTaskGetState+0x6e>
                eReturn = eBlocked;
 80036d6:	2302      	movs	r3, #2
 80036d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036dc:	e034      	b.n	8003748 <eTaskGetState+0xd8>
                else if( pxStateList == &xSuspendedTaskList )
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <eTaskGetState+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d122      	bne.n	800372c <eTaskGetState+0xbc>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <eTaskGetState+0xb4>
                                eReturn = eSuspended;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	e00f      	b.n	800371c <eTaskGetState+0xac>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4413      	add	r3, r2
 8003702:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d103      	bne.n	8003716 <eTaskGetState+0xa6>
                                        eReturn = eBlocked;
 800370e:	2302      	movs	r3, #2
 8003710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        break;
 8003714:	e018      	b.n	8003748 <eTaskGetState+0xd8>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2b02      	cmp	r3, #2
 8003720:	ddec      	ble.n	80036fc <eTaskGetState+0x8c>
 8003722:	e011      	b.n	8003748 <eTaskGetState+0xd8>
                        eReturn = eBlocked;
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800372a:	e00d      	b.n	8003748 <eTaskGetState+0xd8>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <eTaskGetState+0xf4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d002      	beq.n	800373a <eTaskGetState+0xca>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <eTaskGetState+0xd2>
                    eReturn = eDeleted;
 800373a:	2304      	movs	r3, #4
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003740:	e002      	b.n	8003748 <eTaskGetState+0xd8>
                eReturn = eReady;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return eReturn;
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	24000040 	.word	0x24000040
 8003758:	240004cc 	.word	0x240004cc
 800375c:	240004d0 	.word	0x240004d0
 8003760:	24000500 	.word	0x24000500
 8003764:	240004e8 	.word	0x240004e8

08003768 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <vTaskGetInfo+0x1a>
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <vTaskGetInfo+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e000      	b.n	8003784 <vTaskGetInfo+0x1c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d01b      	beq.n	8003802 <vTaskGetInfo+0x9a>
        {
            if( pxTCB == pxCurrentTCB )
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <vTaskGetInfo+0xd4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <vTaskGetInfo+0x74>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	731a      	strb	r2, [r3, #12]
 80037da:	e019      	b.n	8003810 <vTaskGetInfo+0xa8>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d113      	bne.n	8003810 <vTaskGetInfo+0xa8>
                        {
                            vTaskSuspendAll();
 80037e8:	f000 fb52 	bl	8003e90 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <vTaskGetInfo+0x94>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2202      	movs	r2, #2
 80037fa:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80037fc:	f000 fb56 	bl	8003eac <xTaskResumeAll>
 8003800:	e006      	b.n	8003810 <vTaskGetInfo+0xa8>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff34 	bl	8003670 <eTaskGetState>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <vTaskGetInfo+0xc4>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fbfd 	bl	800601c <prvTaskCheckFreeStackSpace>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 800382a:	e002      	b.n	8003832 <vTaskGetInfo+0xca>
            pxTaskStatus->usStackHighWaterMark = 0;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	841a      	strh	r2, [r3, #32]
    }
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24000040 	.word	0x24000040

08003840 <vTaskPrioritySet>:
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b37      	cmp	r3, #55	; 0x37
 8003852:	d90a      	bls.n	800386a <vTaskPrioritySet+0x2a>
    __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60bb      	str	r3, [r7, #8]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <vTaskPrioritySet+0x28>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b37      	cmp	r3, #55	; 0x37
 800386e:	d901      	bls.n	8003874 <vTaskPrioritySet+0x34>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003870:	2337      	movs	r3, #55	; 0x37
 8003872:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8003874:	f006 fa6a 	bl	8009d4c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <vTaskPrioritySet+0x44>
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	e000      	b.n	8003886 <vTaskPrioritySet+0x46>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	61bb      	str	r3, [r7, #24]
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800388e:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	f000 809e 	beq.w	80039d6 <vTaskPrioritySet+0x196>
                if( uxNewPriority > uxCurrentBasePriority )
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90e      	bls.n	80038c0 <vTaskPrioritySet+0x80>
                    if( pxTCB != pxCurrentTCB )
 80038a2:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d010      	beq.n	80038ce <vTaskPrioritySet+0x8e>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80038ac:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d309      	bcc.n	80038ce <vTaskPrioritySet+0x8e>
                            xYieldRequired = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e006      	b.n	80038ce <vTaskPrioritySet+0x8e>
                else if( pxTCB == pxCurrentTCB )
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d101      	bne.n	80038ce <vTaskPrioritySet+0x8e>
                    xYieldRequired = pdTRUE;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038d4:	613b      	str	r3, [r7, #16]
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d103      	bne.n	80038ee <vTaskPrioritySet+0xae>
                            pxTCB->uxPriority = uxNewPriority;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                        pxTCB->uxBasePriority = uxNewPriority;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db05      	blt.n	800390c <vTaskPrioritySet+0xcc>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800391e:	4413      	add	r3, r2
 8003920:	4299      	cmp	r1, r3
 8003922:	d14d      	bne.n	80039c0 <vTaskPrioritySet+0x180>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3384      	adds	r3, #132	; 0x84
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f8c1 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d904      	bls.n	8003946 <vTaskPrioritySet+0x106>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800394c:	4926      	ldr	r1, [pc, #152]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	3284      	adds	r2, #132	; 0x84
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 8003994:	441a      	add	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c59      	adds	r1, r3, #1
 80039b2:	480d      	ldr	r0, [pc, #52]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4403      	add	r3, r0
 80039be:	6019      	str	r1, [r3, #0]
                if( xYieldRequired != pdFALSE )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <vTaskPrioritySet+0x196>
                    taskYIELD_IF_USING_PREEMPTION();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <vTaskPrioritySet+0x1b0>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80039d6:	f006 f9d7 	bl	8009d88 <vPortExitCritical>
    }
 80039da:	bf00      	nop
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	24000040 	.word	0x24000040
 80039e8:	24000044 	.word	0x24000044
 80039ec:	2400051c 	.word	0x2400051c
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskSuspend>:
    {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80039fc:	f006 f9a6 	bl	8009d4c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <vTaskSuspend+0x18>
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <vTaskSuspend+0x1a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	613b      	str	r3, [r7, #16]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3384      	adds	r3, #132	; 0x84
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd f84b 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <vTaskSuspend+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3398      	adds	r3, #152	; 0x98
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd f841 	bl	8000ab0 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3384      	adds	r3, #132	; 0x84
 8003a32:	4619      	mov	r1, r3
 8003a34:	482d      	ldr	r0, [pc, #180]	; (8003aec <vTaskSuspend+0xf8>)
 8003a36:	f7fd f817 	bl	8000a68 <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e012      	b.n	8003a66 <vTaskSuspend+0x72>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <vTaskSuspend+0x6c>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	dde9      	ble.n	8003a40 <vTaskSuspend+0x4c>
        taskEXIT_CRITICAL();
 8003a6c:	f006 f98c 	bl	8009d88 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <vTaskSuspend+0x90>
            taskENTER_CRITICAL();
 8003a78:	f006 f968 	bl	8009d4c <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003a7c:	f002 faea 	bl	8006054 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8003a80:	f006 f982 	bl	8009d88 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d127      	bne.n	8003ade <vTaskSuspend+0xea>
            if( xSchedulerRunning != pdFALSE )
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <vTaskSuspend+0xd2>
                configASSERT( uxSchedulerSuspended == 0 );
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <vTaskSuspend+0x100>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <vTaskSuspend+0xc0>
    __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskSuspend+0xbe>
                portYIELD_WITHIN_API();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <vTaskSuspend+0x104>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
    }
 8003ac4:	e00b      	b.n	8003ade <vTaskSuspend+0xea>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <vTaskSuspend+0xf8>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <vTaskSuspend+0x108>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <vTaskSuspend+0xe6>
                    pxCurrentTCB = NULL;
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
    }
 8003ad8:	e001      	b.n	8003ade <vTaskSuspend+0xea>
                    vTaskSwitchContext();
 8003ada:	f001 fdad 	bl	8005638 <vTaskSwitchContext>
    }
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24000040 	.word	0x24000040
 8003aec:	24000500 	.word	0x24000500
 8003af0:	24000520 	.word	0x24000520
 8003af4:	2400053c 	.word	0x2400053c
 8003af8:	e000ed04 	.word	0xe000ed04
 8003afc:	24000514 	.word	0x24000514

08003b00 <vTaskResume>:
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
        configASSERT( xTaskToResume );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <vTaskResume+0x28>
    __asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vTaskResume+0x26>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <vTaskResume+0x114>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d06b      	beq.n	8003c0a <vTaskResume+0x10a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <vTaskResume+0x10a>
            taskENTER_CRITICAL();
 8003b38:	f006 f908 	bl	8009d4c <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f002 f8c3 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05e      	beq.n	8003c06 <vTaskResume+0x106>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3384      	adds	r3, #132	; 0x84
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc ffaf 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <vTaskResume+0x118>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d904      	bls.n	8003b6a <vTaskResume+0x6a>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <vTaskResume+0x118>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b70:	492a      	ldr	r1, [pc, #168]	; (8003c1c <vTaskResume+0x11c>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	3284      	adds	r2, #132	; 0x84
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <vTaskResume+0x11c>)
 8003bb8:	441a      	add	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bc6:	4915      	ldr	r1, [pc, #84]	; (8003c1c <vTaskResume+0x11c>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	4811      	ldr	r0, [pc, #68]	; (8003c1c <vTaskResume+0x11c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4403      	add	r3, r0
 8003be2:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <vTaskResume+0x114>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d307      	bcc.n	8003c06 <vTaskResume+0x106>
                        taskYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <vTaskResume+0x120>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
 8003c06:	f006 f8bf 	bl	8009d88 <vPortExitCritical>
    }
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000040 	.word	0x24000040
 8003c18:	2400051c 	.word	0x2400051c
 8003c1c:	24000044 	.word	0x24000044
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskResumeFromISR>:
    {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	623b      	str	r3, [r7, #32]
        configASSERT( xTaskToResume );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskResumeFromISR+0x2c>
    __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	617b      	str	r3, [r7, #20]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskResumeFromISR+0x2a>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c50:	f006 f910 	bl	8009e74 <vPortValidateInterruptPriority>
    __asm volatile
 8003c54:	f3ef 8211 	mrs	r2, BASEPRI
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	613a      	str	r2, [r7, #16]
 8003c6a:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003c6c:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6e:	61fb      	str	r3, [r7, #28]
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c70:	6a38      	ldr	r0, [r7, #32]
 8003c72:	f002 f829 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d066      	beq.n	8003d4a <xTaskResumeFromISR+0x126>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <xTaskResumeFromISR+0x13c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d15c      	bne.n	8003d3e <xTaskResumeFromISR+0x11a>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <xTaskResumeFromISR+0x140>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d304      	bcc.n	8003ca0 <xTaskResumeFromISR+0x7c>
                        xYieldRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
                        xYieldPending = pdTRUE;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <xTaskResumeFromISR+0x144>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3384      	adds	r3, #132	; 0x84
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc ff03 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d904      	bls.n	8003cc2 <xTaskResumeFromISR+0x9e>
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	3284      	adds	r2, #132	; 0x84
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d10:	441a      	add	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d1e:	4914      	ldr	r1, [pc, #80]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	4810      	ldr	r0, [pc, #64]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	e005      	b.n	8003d4a <xTaskResumeFromISR+0x126>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	3398      	adds	r3, #152	; 0x98
 8003d42:	4619      	mov	r1, r3
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <xTaskResumeFromISR+0x150>)
 8003d46:	f7fc fe8f 	bl	8000a68 <vListInsertEnd>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f383 8811 	msr	BASEPRI, r3
}
 8003d54:	bf00      	nop
        return xYieldRequired;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2400053c 	.word	0x2400053c
 8003d64:	24000040 	.word	0x24000040
 8003d68:	24000528 	.word	0x24000528
 8003d6c:	2400051c 	.word	0x2400051c
 8003d70:	24000044 	.word	0x24000044
 8003d74:	240004d4 	.word	0x240004d4

08003d78 <vTaskStartScheduler>:
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af04      	add	r7, sp, #16
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d86:	463a      	mov	r2, r7
 8003d88:	1d39      	adds	r1, r7, #4
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 f92a 	bl	8009fe8 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	460a      	mov	r2, r1
 8003da8:	4924      	ldr	r1, [pc, #144]	; (8003e3c <vTaskStartScheduler+0xc4>)
 8003daa:	4825      	ldr	r0, [pc, #148]	; (8003e40 <vTaskStartScheduler+0xc8>)
 8003dac:	f7ff f9c7 	bl	800313e <xTaskCreateStatic>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db4:	6013      	str	r3, [r2, #0]
            if( xIdleTaskHandle != NULL )
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <vTaskStartScheduler+0x4c>
                xReturn = pdPASS;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <vTaskStartScheduler+0x50>
                xReturn = pdFAIL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
            if( xReturn == pdPASS )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <vTaskStartScheduler+0x5c>
                xReturn = xTimerCreateTimerTask();
 8003dce:	f002 fcc7 	bl	8006760 <xTimerCreateTimerTask>
 8003dd2:	6178      	str	r0, [r7, #20]
    if( xReturn == pdPASS )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11b      	bne.n	8003e12 <vTaskStartScheduler+0x9a>
    __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	613b      	str	r3, [r7, #16]
}
 8003dec:	bf00      	nop
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <vTaskStartScheduler+0xd0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	33d4      	adds	r3, #212	; 0xd4
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <vTaskStartScheduler+0xd4>)
 8003df6:	6013      	str	r3, [r2, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <vTaskStartScheduler+0xd8>)
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <vTaskStartScheduler+0xdc>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <vTaskStartScheduler+0xe0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8003e0c:	f003 f845 	bl	8006e9a <xPortStartScheduler>
 8003e10:	e00e      	b.n	8003e30 <vTaskStartScheduler+0xb8>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e18:	d10a      	bne.n	8003e30 <vTaskStartScheduler+0xb8>
    __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vTaskStartScheduler+0xb6>
    ( void ) uxTopUsedPriority;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <vTaskStartScheduler+0xe4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	24008260 	.word	0x24008260
 8003e40:	08005db1 	.word	0x08005db1
 8003e44:	24000538 	.word	0x24000538
 8003e48:	24000040 	.word	0x24000040
 8003e4c:	240081fc 	.word	0x240081fc
 8003e50:	24000534 	.word	0x24000534
 8003e54:	24000520 	.word	0x24000520
 8003e58:	24000518 	.word	0x24000518
 8003e5c:	24008008 	.word	0x24008008

08003e60 <vTaskEndScheduler>:
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
    __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	607b      	str	r3, [r7, #4]
}
 8003e78:	bf00      	nop
    xSchedulerRunning = pdFALSE;
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <vTaskEndScheduler+0x2c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8003e80:	f003 f896 	bl	8006fb0 <vPortEndScheduler>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	24000520 	.word	0x24000520

08003e90 <vTaskSuspendAll>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	2400053c 	.word	0x2400053c

08003eac <xTaskResumeAll>:
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    configASSERT( uxSchedulerSuspended );
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xTaskResumeAll+0x2c>
    __asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <xTaskResumeAll+0x2a>
    taskENTER_CRITICAL();
 8003ed8:	f005 ff38 	bl	8009d4c <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee4:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80da 	bne.w	80040a4 <xTaskResumeAll+0x1f8>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ef0:	4b71      	ldr	r3, [pc, #452]	; (80040b8 <xTaskResumeAll+0x20c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80d5 	beq.w	80040a4 <xTaskResumeAll+0x1f8>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efa:	e0a4      	b.n	8004046 <xTaskResumeAll+0x19a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <xTaskResumeAll+0x210>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3398      	adds	r3, #152	; 0x98
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <xTaskResumeAll+0x92>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	601a      	str	r2, [r3, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3384      	adds	r3, #132	; 0x84
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <xTaskResumeAll+0xde>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d904      	bls.n	8003fb4 <xTaskResumeAll+0x108>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb0:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fba:	4942      	ldr	r1, [pc, #264]	; (80040c4 <xTaskResumeAll+0x218>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	3284      	adds	r2, #132	; 0x84
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <xTaskResumeAll+0x218>)
 8004002:	441a      	add	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004010:	492c      	ldr	r1, [pc, #176]	; (80040c4 <xTaskResumeAll+0x218>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	4828      	ldr	r0, [pc, #160]	; (80040c4 <xTaskResumeAll+0x218>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <xTaskResumeAll+0x21c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <xTaskResumeAll+0x19a>
                        xYieldPending = pdTRUE;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <xTaskResumeAll+0x220>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <xTaskResumeAll+0x210>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f47f af56 	bne.w	8003efc <xTaskResumeAll+0x50>
                if( pxTCB != NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <xTaskResumeAll+0x1ae>
                    prvResetNextTaskUnblockTime();
 8004056:	f001 fffd 	bl	8006054 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskResumeAll+0x224>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <xTaskResumeAll+0x1dc>
                            if( xTaskIncrementTick() != pdFALSE )
 8004066:	f000 ff25 	bl	8004eb4 <xTaskIncrementTick>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <xTaskResumeAll+0x1ca>
                                xYieldPending = pdTRUE;
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <xTaskResumeAll+0x220>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3b01      	subs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f1      	bne.n	8004066 <xTaskResumeAll+0x1ba>
                        xPendedTicks = 0;
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <xTaskResumeAll+0x224>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <xTaskResumeAll+0x220>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <xTaskResumeAll+0x1f8>
                            xAlreadyYielded = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
                    taskYIELD_IF_USING_PREEMPTION();
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <xTaskResumeAll+0x228>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
 80040a4:	f005 fe70 	bl	8009d88 <vPortExitCritical>
    return xAlreadyYielded;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2400053c 	.word	0x2400053c
 80040b8:	24000514 	.word	0x24000514
 80040bc:	240004d4 	.word	0x240004d4
 80040c0:	2400051c 	.word	0x2400051c
 80040c4:	24000044 	.word	0x24000044
 80040c8:	24000040 	.word	0x24000040
 80040cc:	24000528 	.word	0x24000528
 80040d0:	24000524 	.word	0x24000524
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <xTaskGetTickCount>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <xTaskGetTickCount+0x1c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	607b      	str	r3, [r7, #4]
    return xTicks;
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	24000518 	.word	0x24000518

080040f8 <xTaskGetTickCountFromISR>:
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040fe:	f005 feb9 	bl	8009e74 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <xTaskGetTickCountFromISR+0x20>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	603b      	str	r3, [r7, #0]
    return xReturn;
 800410c:	683b      	ldr	r3, [r7, #0]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000518 	.word	0x24000518

0800411c <uxTaskGetNumberOfTasks>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <uxTaskGetNumberOfTasks+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	24000514 	.word	0x24000514

08004134 <pcTaskGetName>:
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <pcTaskGetName+0x14>
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <pcTaskGetName+0x44>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	e000      	b.n	800414a <pcTaskGetName+0x16>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <pcTaskGetName+0x34>
    __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	33b4      	adds	r3, #180	; 0xb4
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	24000040 	.word	0x24000040

0800417c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <uxTaskGetStackHighWaterMark+0x14>
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <uxTaskGetStackHighWaterMark+0x34>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e000      	b.n	8004192 <uxTaskGetStackHighWaterMark+0x16>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419a:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800419c:	6938      	ldr	r0, [r7, #16]
 800419e:	f001 ff3d 	bl	800601c <prvTaskCheckFreeStackSpace>
 80041a2:	4603      	mov	r3, r0
 80041a4:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	24000040 	.word	0x24000040

080041b4 <uxTaskGetSystemState>:
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	2338      	movs	r3, #56	; 0x38
 80041c6:	613b      	str	r3, [r7, #16]
        vTaskSuspendAll();
 80041c8:	f7ff fe62 	bl	8003e90 <vTaskSuspendAll>
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <uxTaskGetSystemState+0x104>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d368      	bcc.n	80042a8 <uxTaskGetSystemState+0xf4>
                    uxQueue--;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1898      	adds	r0, r3, r2
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <uxTaskGetSystemState+0x108>)
 80041f8:	4413      	add	r3, r2
 80041fa:	2201      	movs	r2, #1
 80041fc:	4619      	mov	r1, r3
 80041fe:	f001 febb 	bl	8005f78 <prvListTasksWithinSingleList>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e2      	bne.n	80041d6 <uxTaskGetSystemState+0x22>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <uxTaskGetSystemState+0x10c>)
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	2202      	movs	r2, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fea6 	bl	8005f78 <prvListTasksWithinSingleList>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <uxTaskGetSystemState+0x110>)
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	2202      	movs	r2, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fe94 	bl	8005f78 <prvListTasksWithinSingleList>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	2204      	movs	r2, #4
 800426a:	4917      	ldr	r1, [pc, #92]	; (80042c8 <uxTaskGetSystemState+0x114>)
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fe83 	bl	8005f78 <prvListTasksWithinSingleList>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	2203      	movs	r2, #3
 800428c:	490f      	ldr	r1, [pc, #60]	; (80042cc <uxTaskGetSystemState+0x118>)
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fe72 	bl	8005f78 <prvListTasksWithinSingleList>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
                        if( pulTotalRunTime != NULL )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <uxTaskGetSystemState+0xf4>
                            *pulTotalRunTime = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
        ( void ) xTaskResumeAll();
 80042a8:	f7ff fe00 	bl	8003eac <xTaskResumeAll>
        return uxTask;
 80042ac:	697b      	ldr	r3, [r7, #20]
    }
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	24000514 	.word	0x24000514
 80042bc:	24000044 	.word	0x24000044
 80042c0:	240004cc 	.word	0x240004cc
 80042c4:	240004d0 	.word	0x240004d0
 80042c8:	240004e8 	.word	0x240004e8
 80042cc:	24000500 	.word	0x24000500

080042d0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08e      	sub	sp, #56	; 0x38
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042de:	2301      	movs	r3, #1
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d90a      	bls.n	80042fe <xTaskGenericNotify+0x2e>
    __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	623b      	str	r3, [r7, #32]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTaskGenericNotify+0x4a>
    __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800431e:	f005 fd15 	bl	8009d4c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d841      	bhi.n	80043e0 <xTaskGenericNotify+0x110>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <xTaskGenericNotify+0x94>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	080043ff 	.word	0x080043ff
 8004368:	08004379 	.word	0x08004379
 800436c:	08004397 	.word	0x08004397
 8004370:	080043b3 	.word	0x080043b3
 8004374:	080043c3 	.word	0x080043c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	334c      	adds	r3, #76	; 0x4c
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	334c      	adds	r3, #76	; 0x4c
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	605a      	str	r2, [r3, #4]
                    break;
 8004394:	e036      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	334c      	adds	r3, #76	; 0x4c
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	334c      	adds	r3, #76	; 0x4c
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	605a      	str	r2, [r3, #4]
                    break;
 80043b0:	e028      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	334c      	adds	r3, #76	; 0x4c
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
                    break;
 80043c0:	e020      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d007      	beq.n	80043da <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	334c      	adds	r3, #76	; 0x4c
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80043d8:	e014      	b.n	8004404 <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80043de:	e011      	b.n	8004404 <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80043e0:	4b56      	ldr	r3, [pc, #344]	; (800453c <xTaskGenericNotify+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <xTaskGenericNotify+0x132>
    __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xTaskGenericNotify+0x12c>
                    break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <xTaskGenericNotify+0x134>

                    break;
 8004402:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8090 	bne.w	800452e <xTaskGenericNotify+0x25e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	429a      	cmp	r2, r3
 800443c:	d104      	bne.n	8004448 <xTaskGenericNotify+0x178>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <xTaskGenericNotify+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d904      	bls.n	8004472 <xTaskGenericNotify+0x1a2>
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <xTaskGenericNotify+0x270>)
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004478:	4932      	ldr	r1, [pc, #200]	; (8004544 <xTaskGenericNotify+0x274>)
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	3284      	adds	r2, #132	; 0x84
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <xTaskGenericNotify+0x274>)
 80044c0:	441a      	add	r2, r3
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044ce:	491d      	ldr	r1, [pc, #116]	; (8004544 <xTaskGenericNotify+0x274>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	4819      	ldr	r0, [pc, #100]	; (8004544 <xTaskGenericNotify+0x274>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <xTaskGenericNotify+0x23c>
    __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	617b      	str	r3, [r7, #20]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskGenericNotify+0x23a>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <xTaskGenericNotify+0x278>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451a:	429a      	cmp	r2, r3
 800451c:	d907      	bls.n	800452e <xTaskGenericNotify+0x25e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <xTaskGenericNotify+0x27c>)
 8004520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800452e:	f005 fc2b 	bl	8009d88 <vPortExitCritical>

        return xReturn;
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004534:	4618      	mov	r0, r3
 8004536:	3738      	adds	r7, #56	; 0x38
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24000518 	.word	0x24000518
 8004540:	2400051c 	.word	0x2400051c
 8004544:	24000044 	.word	0x24000044
 8004548:	24000040 	.word	0x24000040
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b092      	sub	sp, #72	; 0x48
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800455e:	2301      	movs	r3, #1
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d90a      	bls.n	800459a <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459a:	f005 fc6b 	bl	8009e74 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile
 80045a2:	f3ef 8211 	mrs	r2, BASEPRI
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	623a      	str	r2, [r7, #32]
 80045b8:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 80045ba:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80045be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80045c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	334c      	adds	r3, #76	; 0x4c
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80045d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80045e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d841      	bhi.n	800467c <xTaskGenericNotifyFromISR+0x12c>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <xTaskGenericNotifyFromISR+0xb0>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	0800469b 	.word	0x0800469b
 8004604:	08004615 	.word	0x08004615
 8004608:	08004633 	.word	0x08004633
 800460c:	0800464f 	.word	0x0800464f
 8004610:	0800465f 	.word	0x0800465f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	334c      	adds	r3, #76	; 0x4c
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	334c      	adds	r3, #76	; 0x4c
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	605a      	str	r2, [r3, #4]
                    break;
 8004630:	e036      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	334c      	adds	r3, #76	; 0x4c
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	334c      	adds	r3, #76	; 0x4c
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	605a      	str	r2, [r3, #4]
                    break;
 800464c:	e028      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
                    break;
 800465c:	e020      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800465e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004662:	2b02      	cmp	r3, #2
 8004664:	d007      	beq.n	8004676 <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	334c      	adds	r3, #76	; 0x4c
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004674:	e014      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                        xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800467a:	e011      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800467c:	4b6b      	ldr	r3, [pc, #428]	; (800482c <xTaskGenericNotifyFromISR+0x2dc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <xTaskGenericNotifyFromISR+0x14e>
    __asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61bb      	str	r3, [r7, #24]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xTaskGenericNotifyFromISR+0x148>
                    break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                    break;
 800469e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 80b5 	bne.w	8004814 <xTaskGenericNotifyFromISR+0x2c4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <xTaskGenericNotifyFromISR+0x17a>
    __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	617b      	str	r3, [r7, #20]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ca:	4b59      	ldr	r3, [pc, #356]	; (8004830 <xTaskGenericNotifyFromISR+0x2e0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d16f      	bne.n	80047b2 <xTaskGenericNotifyFromISR+0x262>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	429a      	cmp	r2, r3
 8004700:	d104      	bne.n	800470c <xTaskGenericNotifyFromISR+0x1bc>
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d904      	bls.n	8004736 <xTaskGenericNotifyFromISR+0x1e6>
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004732:	4a40      	ldr	r2, [pc, #256]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800473c:	493e      	ldr	r1, [pc, #248]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3304      	adds	r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004766:	3284      	adds	r2, #132	; 0x84
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004776:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004784:	441a      	add	r2, r3
 8004786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004792:	4929      	ldr	r1, [pc, #164]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	4825      	ldr	r0, [pc, #148]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	e01e      	b.n	80047f0 <xTaskGenericNotifyFromISR+0x2a0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	3298      	adds	r2, #152	; 0x98
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047ee:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <xTaskGenericNotifyFromISR+0x2f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047fe:	429a      	cmp	r2, r3
 8004800:	d908      	bls.n	8004814 <xTaskGenericNotifyFromISR+0x2c4>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <xTaskGenericNotifyFromISR+0x2be>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <xTaskGenericNotifyFromISR+0x2f4>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f383 8811 	msr	BASEPRI, r3
}
 800481e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8004822:	4618      	mov	r0, r3
 8004824:	3748      	adds	r7, #72	; 0x48
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	24000518 	.word	0x24000518
 8004830:	2400053c 	.word	0x2400053c
 8004834:	2400051c 	.word	0x2400051c
 8004838:	24000044 	.word	0x24000044
 800483c:	240004d4 	.word	0x240004d4
 8004840:	24000040 	.word	0x24000040
 8004844:	24000528 	.word	0x24000528

08004848 <xTaskGenericNotifyWait>:
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d90a      	bls.n	8004872 <xTaskGenericNotifyWait+0x2a>
    __asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskGenericNotifyWait+0x28>
        taskENTER_CRITICAL();
 8004872:	f005 fa6b 	bl	8009d4c <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d025      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	334c      	adds	r3, #76	; 0x4c
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	43db      	mvns	r3, r3
 800489c:	4019      	ands	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	334c      	adds	r3, #76	; 0x4c
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	6059      	str	r1, [r3, #4]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048be:	2101      	movs	r1, #1
 80048c0:	6a38      	ldr	r0, [r7, #32]
 80048c2:	f001 fae5 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <xTaskGenericNotifyWait+0x10c>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80048d6:	f005 fa57 	bl	8009d88 <vPortExitCritical>
        taskENTER_CRITICAL();
 80048da:	f005 fa37 	bl	8009d4c <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <xTaskGenericNotifyWait+0xae>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	334c      	adds	r3, #76	; 0x4c
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <xTaskGenericNotifyWait+0xc8>
                xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e010      	b.n	8004932 <xTaskGenericNotifyWait+0xea>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	334c      	adds	r3, #76	; 0x4c
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	43db      	mvns	r3, r3
 8004922:	4019      	ands	r1, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	334c      	adds	r3, #76	; 0x4c
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004942:	f005 fa21 	bl	8009d88 <vPortExitCritical>
        return xReturn;
 8004946:	697b      	ldr	r3, [r7, #20]
    }
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	24000040 	.word	0x24000040
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b090      	sub	sp, #64	; 0x40
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <vTaskGenericNotifyGiveFromISR+0x28>
    __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d90a      	bls.n	800499c <vTaskGenericNotifyGiveFromISR+0x44>
    __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800499c:	f005 fa6a 	bl	8009e74 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile
 80049a4:	f3ef 8211 	mrs	r2, BASEPRI
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80049bc:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80049de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	334c      	adds	r3, #76	; 0x4c
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	334c      	adds	r3, #76	; 0x4c
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 80b5 	bne.w	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vTaskGenericNotifyGiveFromISR+0xca>
    __asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	617b      	str	r3, [r7, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vTaskGenericNotifyGiveFromISR+0xc8>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a22:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <vTaskGenericNotifyGiveFromISR+0x228>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d16f      	bne.n	8004b0a <vTaskGenericNotifyGiveFromISR+0x1b2>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	3384      	adds	r3, #132	; 0x84
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskGenericNotifyGiveFromISR+0x10c>
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a7c:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d904      	bls.n	8004a8e <vTaskGenericNotifyGiveFromISR+0x136>
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a8a:	4a3e      	ldr	r2, [pc, #248]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a94:	493c      	ldr	r1, [pc, #240]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004abe:	3284      	adds	r2, #132	; 0x84
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004adc:	441a      	add	r2, r3
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004aea:	4927      	ldr	r1, [pc, #156]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	4823      	ldr	r0, [pc, #140]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4403      	add	r3, r0
 8004b06:	6019      	str	r1, [r3, #0]
 8004b08:	e01e      	b.n	8004b48 <vTaskGenericNotifyGiveFromISR+0x1f0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b28:	3298      	adds	r2, #152	; 0x98
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b46:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <vTaskGenericNotifyGiveFromISR+0x238>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d908      	bls.n	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <vTaskGenericNotifyGiveFromISR+0x20e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vTaskGenericNotifyGiveFromISR+0x23c>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f383 8811 	msr	BASEPRI, r3
}
 8004b76:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8004b78:	bf00      	nop
 8004b7a:	3740      	adds	r7, #64	; 0x40
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2400053c 	.word	0x2400053c
 8004b84:	2400051c 	.word	0x2400051c
 8004b88:	24000044 	.word	0x24000044
 8004b8c:	240004d4 	.word	0x240004d4
 8004b90:	24000040 	.word	0x24000040
 8004b94:	24000528 	.word	0x24000528

08004b98 <ulTaskGenericNotifyTake>:
    {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d90a      	bls.n	8004bc0 <ulTaskGenericNotifyTake+0x28>
    __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <ulTaskGenericNotifyTake+0x26>
        taskENTER_CRITICAL();
 8004bc0:	f005 f8c4 	bl	8009d4c <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	334c      	adds	r3, #76	; 0x4c
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bec:	2101      	movs	r1, #1
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 f94e 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <ulTaskGenericNotifyTake+0xd8>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004c04:	f005 f8c0 	bl	8009d88 <vPortExitCritical>
        taskENTER_CRITICAL();
 8004c08:	f005 f8a0 	bl	8009d4c <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d014      	beq.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                if( xClearCountOnExit != pdFALSE )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <ulTaskGenericNotifyTake+0xa2>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	334c      	adds	r3, #76	; 0x4c
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	e008      	b.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	334c      	adds	r3, #76	; 0x4c
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	605a      	str	r2, [r3, #4]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004c5c:	f005 f894 	bl	8009d88 <vPortExitCritical>
        return ulReturn;
 8004c60:	697b      	ldr	r3, [r7, #20]
    }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	24000040 	.word	0x24000040
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d90a      	bls.n	8004c9a <xTaskGenericNotifyStateClear+0x26>
    __asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60fb      	str	r3, [r7, #12]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xTaskGenericNotifyStateClear+0x32>
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTaskGenericNotifyStateClear+0x74>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <xTaskGenericNotifyStateClear+0x34>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 8004caa:	f005 f84f 	bl	8009d4c <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d109      	bne.n	8004cd4 <xTaskGenericNotifyStateClear+0x60>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e001      	b.n	8004cd8 <xTaskGenericNotifyStateClear+0x64>
            }
            else
            {
                xReturn = pdFAIL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8004cd8:	f005 f856 	bl	8009d88 <vPortExitCritical>

        return xReturn;
 8004cdc:	697b      	ldr	r3, [r7, #20]
    }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	24000040 	.word	0x24000040

08004cec <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <ulTaskGenericNotifyValueClear+0x18>
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <ulTaskGenericNotifyValueClear+0x5c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e000      	b.n	8004d06 <ulTaskGenericNotifyValueClear+0x1a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	617b      	str	r3, [r7, #20]

        taskENTER_CRITICAL();
 8004d08:	f005 f820 	bl	8009d4c <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	334c      	adds	r3, #76	; 0x4c
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	334c      	adds	r3, #76	; 0x4c
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	605a      	str	r2, [r3, #4]
        }
        taskEXIT_CRITICAL();
 8004d38:	f005 f826 	bl	8009d88 <vPortExitCritical>

        return ulReturn;
 8004d3c:	693b      	ldr	r3, [r7, #16]
    }
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	24000040 	.word	0x24000040

08004d4c <vTaskSetTimeOutState>:
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <vTaskSetTimeOutState+0x24>
    __asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60fb      	str	r3, [r7, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8004d70:	f004 ffec 	bl	8009d4c <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <vTaskSetTimeOutState+0x44>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <vTaskSetTimeOutState+0x48>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8004d84:	f005 f800 	bl	8009d88 <vPortExitCritical>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	2400052c 	.word	0x2400052c
 8004d94:	24000518 	.word	0x24000518

08004d98 <xTaskCheckForTimeOut>:
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTaskCheckForTimeOut+0x26>
    __asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	613b      	str	r3, [r7, #16]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTaskCheckForTimeOut+0x42>
    __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCheckForTimeOut+0x40>
    taskENTER_CRITICAL();
 8004dda:	f004 ffb7 	bl	8009d4c <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <xTaskCheckForTimeOut+0xc4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
            if( *pxTicksToWait == portMAX_DELAY )
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d102      	bne.n	8004dfe <xTaskCheckForTimeOut+0x66>
                xReturn = pdFALSE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e026      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <xTaskCheckForTimeOut+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00a      	beq.n	8004e20 <xTaskCheckForTimeOut+0x88>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d305      	bcc.n	8004e20 <xTaskCheckForTimeOut+0x88>
            xReturn = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e015      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20b      	bcs.n	8004e42 <xTaskCheckForTimeOut+0xaa>
            *pxTicksToWait -= xElapsedTime;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 ff30 	bl	8005c9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e004      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
            *pxTicksToWait = ( TickType_t ) 0;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
    taskEXIT_CRITICAL();
 8004e4c:	f004 ff9c 	bl	8009d88 <vPortExitCritical>
    return xReturn;
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	24000518 	.word	0x24000518
 8004e60:	2400052c 	.word	0x2400052c

08004e64 <xTaskCatchUpTicks>:
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTaskCatchUpTicks+0x48>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <xTaskCatchUpTicks+0x26>
    __asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCatchUpTicks+0x24>
    vTaskSuspendAll();
 8004e8a:	f7ff f801 	bl	8003e90 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e98:	6013      	str	r3, [r2, #0]
    xYieldOccurred = xTaskResumeAll();
 8004e9a:	f7ff f807 	bl	8003eac <xTaskResumeAll>
 8004e9e:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400053c 	.word	0x2400053c
 8004eb0:	24000524 	.word	0x24000524

08004eb4 <xTaskIncrementTick>:
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b8c      	ldr	r3, [pc, #560]	; (80050f0 <xTaskIncrementTick+0x23c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8109 	bne.w	80050da <xTaskIncrementTick+0x226>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	623b      	str	r3, [r7, #32]
        xTickCount = xConstTickCount;
 8004ed0:	4a88      	ldr	r2, [pc, #544]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d120      	bne.n	8004f1e <xTaskIncrementTick+0x6a>
            taskSWITCH_DELAYED_LISTS();
 8004edc:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <xTaskIncrementTick+0x48>
    __asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	607b      	str	r3, [r7, #4]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskIncrementTick+0x46>
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7c      	ldr	r2, [pc, #496]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	f001 f89b 	bl	8006054 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f1e:	4b79      	ldr	r3, [pc, #484]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f0c0 80c2 	bcc.w	80050ae <xTaskIncrementTick+0x1fa>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <xTaskIncrementTick+0x8a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	4b73      	ldr	r3, [pc, #460]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3a:	601a      	str	r2, [r3, #0]
                    break;
 8004f3c:	e0b7      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b6e      	ldr	r3, [pc, #440]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	617b      	str	r3, [r7, #20]
                    if( xConstTickCount < xItemValue )
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d203      	bcs.n	8004f60 <xTaskIncrementTick+0xac>
                        xNextTaskUnblockTime = xItemValue;
 8004f58:	4a6a      	ldr	r2, [pc, #424]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004f5e:	e0a6      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3384      	adds	r3, #132	; 0x84
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <xTaskIncrementTick+0xe6>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	601a      	str	r2, [r3, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <xTaskIncrementTick+0x14e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3398      	adds	r3, #152	; 0x98
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d104      	bne.n	8004ff0 <xTaskIncrementTick+0x13c>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005008:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <xTaskIncrementTick+0x254>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d904      	bls.n	800501a <xTaskIncrementTick+0x166>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005016:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <xTaskIncrementTick+0x254>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005020:	493a      	ldr	r1, [pc, #232]	; (800510c <xTaskIncrementTick+0x258>)
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	3284      	adds	r2, #132	; 0x84
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <xTaskIncrementTick+0x258>)
 8005068:	441a      	add	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005076:	4925      	ldr	r1, [pc, #148]	; (800510c <xTaskIncrementTick+0x258>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	4821      	ldr	r0, [pc, #132]	; (800510c <xTaskIncrementTick+0x258>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <xTaskIncrementTick+0x25c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f4ff af41 	bcc.w	8004f2a <xTaskIncrementTick+0x76>
                                xSwitchRequired = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ac:	e73d      	b.n	8004f2a <xTaskIncrementTick+0x76>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <xTaskIncrementTick+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050b6:	4915      	ldr	r1, [pc, #84]	; (800510c <xTaskIncrementTick+0x258>)
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d901      	bls.n	80050cc <xTaskIncrementTick+0x218>
                    xSwitchRequired = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
                if( xYieldPending != pdFALSE )
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xTaskIncrementTick+0x260>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xTaskIncrementTick+0x230>
                    xSwitchRequired = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	e004      	b.n	80050e4 <xTaskIncrementTick+0x230>
        ++xPendedTicks;
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <xTaskIncrementTick+0x264>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <xTaskIncrementTick+0x264>)
 80050e2:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2400053c 	.word	0x2400053c
 80050f4:	24000518 	.word	0x24000518
 80050f8:	240004cc 	.word	0x240004cc
 80050fc:	240004d0 	.word	0x240004d0
 8005100:	2400052c 	.word	0x2400052c
 8005104:	24000534 	.word	0x24000534
 8005108:	2400051c 	.word	0x2400051c
 800510c:	24000044 	.word	0x24000044
 8005110:	24000040 	.word	0x24000040
 8005114:	24000528 	.word	0x24000528
 8005118:	24000524 	.word	0x24000524

0800511c <vTaskPlaceOnEventList>:
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <vTaskPlaceOnEventList+0x26>
    __asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vTaskPlaceOnEventList+0x24>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vTaskPlaceOnEventList+0x44>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3398      	adds	r3, #152	; 0x98
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fc53 	bl	80009f6 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005150:	2101      	movs	r1, #1
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 fe9c 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	24000040 	.word	0x24000040

08005164 <vTaskPlaceOnUnorderedEventList>:
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vTaskPlaceOnUnorderedEventList+0x28>
    __asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	61bb      	str	r3, [r7, #24]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vTaskPlaceOnUnorderedEventList+0x26>
    configASSERT( uxSchedulerSuspended != 0 );
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <vTaskPlaceOnUnorderedEventList+0xac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <vTaskPlaceOnUnorderedEventList+0x46>
    __asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	617b      	str	r3, [r7, #20]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vTaskPlaceOnUnorderedEventList+0x44>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	6892      	ldr	r2, [r2, #8]
 80051d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	3298      	adds	r2, #152	; 0x98
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fe44 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005208:	bf00      	nop
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2400053c 	.word	0x2400053c
 8005214:	24000040 	.word	0x24000040

08005218 <vTaskPlaceOnEventListRestricted>:
    {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <vTaskPlaceOnEventListRestricted+0x26>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	3298      	adds	r2, #152	; 0x98
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]
        if( xWaitIndefinitely != pdFALSE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <vTaskPlaceOnEventListRestricted+0x7c>
            xTicksToWait = portMAX_DELAY;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005292:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	68b8      	ldr	r0, [r7, #8]
 8005298:	f000 fdfa 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
    }
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	24000040 	.word	0x24000040

080052a8 <xTaskRemoveFromEventList>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b08b      	sub	sp, #44	; 0x2c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60fb      	str	r3, [r7, #12]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	3398      	adds	r3, #152	; 0x98
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <xTaskRemoveFromEventList+0x66>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1e5a      	subs	r2, r3, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <xTaskRemoveFromEventList+0x1d0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d16f      	bne.n	8005408 <xTaskRemoveFromEventList+0x160>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	3384      	adds	r3, #132	; 0x84
 8005354:	429a      	cmp	r2, r3
 8005356:	d104      	bne.n	8005362 <xTaskRemoveFromEventList+0xba>
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d904      	bls.n	800538c <xTaskRemoveFromEventList+0xe4>
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005388:	4a3c      	ldr	r2, [pc, #240]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005392:	493b      	ldr	r1, [pc, #236]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	3284      	adds	r2, #132	; 0x84
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053da:	441a      	add	r2, r3
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053e8:	4925      	ldr	r1, [pc, #148]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	4821      	ldr	r0, [pc, #132]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4403      	add	r3, r0
 8005404:	6019      	str	r1, [r3, #0]
 8005406:	e01e      	b.n	8005446 <xTaskRemoveFromEventList+0x19e>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	3298      	adds	r2, #152	; 0x98
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005438:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005444:	6013      	str	r3, [r2, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <xTaskRemoveFromEventList+0x1e0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005454:	429a      	cmp	r2, r3
 8005456:	d905      	bls.n	8005464 <xTaskRemoveFromEventList+0x1bc>
        xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
        xYieldPending = pdTRUE;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <xTaskRemoveFromEventList+0x1e4>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e001      	b.n	8005468 <xTaskRemoveFromEventList+0x1c0>
        xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
    return xReturn;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800546a:	4618      	mov	r0, r3
 800546c:	372c      	adds	r7, #44	; 0x2c
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2400053c 	.word	0x2400053c
 800547c:	2400051c 	.word	0x2400051c
 8005480:	24000044 	.word	0x24000044
 8005484:	240004d4 	.word	0x240004d4
 8005488:	24000040 	.word	0x24000040
 800548c:	24000528 	.word	0x24000528

08005490 <vTaskRemoveFromUnorderedEventList>:
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <vTaskRemoveFromUnorderedEventList+0x194>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vTaskRemoveFromUnorderedEventList+0x28>
    __asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskRemoveFromUnorderedEventList+0x26>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <vTaskRemoveFromUnorderedEventList+0x54>
    __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d103      	bne.n	8005510 <vTaskRemoveFromUnorderedEventList+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	601a      	str	r2, [r3, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3384      	adds	r3, #132	; 0x84
 800554c:	429a      	cmp	r2, r3
 800554e:	d104      	bne.n	800555a <vTaskRemoveFromUnorderedEventList+0xca>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1e5a      	subs	r2, r3, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005572:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d904      	bls.n	8005584 <vTaskRemoveFromUnorderedEventList+0xf4>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800558a:	4928      	ldr	r1, [pc, #160]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3304      	adds	r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	3284      	adds	r2, #132	; 0x84
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055d2:	441a      	add	r2, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055e0:	4912      	ldr	r1, [pc, #72]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	480e      	ldr	r0, [pc, #56]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4403      	add	r3, r0
 80055fc:	6019      	str	r1, [r3, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <vTaskRemoveFromUnorderedEventList+0x1a0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800560c:	429a      	cmp	r2, r3
 800560e:	d902      	bls.n	8005616 <vTaskRemoveFromUnorderedEventList+0x186>
        xYieldPending = pdTRUE;
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <vTaskRemoveFromUnorderedEventList+0x1a4>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2400053c 	.word	0x2400053c
 8005628:	2400051c 	.word	0x2400051c
 800562c:	24000044 	.word	0x24000044
 8005630:	24000040 	.word	0x24000040
 8005634:	24000528 	.word	0x24000528

08005638 <vTaskSwitchContext>:
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <vTaskSwitchContext+0xfc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <vTaskSwitchContext+0x100>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	e06e      	b.n	800572c <vTaskSwitchContext+0xf4>
        xYieldPending = pdFALSE;
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <vTaskSwitchContext+0x100>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <vTaskSwitchContext+0x104>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d111      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3304      	adds	r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d10b      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3308      	adds	r3, #8
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d105      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	330c      	adds	r3, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	429a      	cmp	r2, r3
 8005690:	d008      	beq.n	80056a4 <vTaskSwitchContext+0x6c>
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <vTaskSwitchContext+0x104>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <vTaskSwitchContext+0x104>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	33b4      	adds	r3, #180	; 0xb4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f004 fc99 	bl	8009fd6 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <vTaskSwitchContext+0x108>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e010      	b.n	80056ce <vTaskSwitchContext+0x96>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <vTaskSwitchContext+0x90>
    __asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	607b      	str	r3, [r7, #4]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vTaskSwitchContext+0x8e>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	491d      	ldr	r1, [pc, #116]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e4      	beq.n	80056ac <vTaskSwitchContext+0x74>
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056ee:	4413      	add	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3308      	adds	r3, #8
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <vTaskSwitchContext+0xda>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <vTaskSwitchContext+0x104>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <vTaskSwitchContext+0x108>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <vTaskSwitchContext+0x104>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	33d4      	adds	r3, #212	; 0xd4
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <vTaskSwitchContext+0x110>)
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2400053c 	.word	0x2400053c
 8005738:	24000528 	.word	0x24000528
 800573c:	24000040 	.word	0x24000040
 8005740:	2400051c 	.word	0x2400051c
 8005744:	24000044 	.word	0x24000044
 8005748:	240081fc 	.word	0x240081fc

0800574c <uxTaskResetEventItemValue>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800576c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    return uxReturn;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	24000040 	.word	0x24000040

08005784 <xTaskGetCurrentTaskHandle>:
    {
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	607b      	str	r3, [r7, #4]
        return xReturn;
 8005790:	687b      	ldr	r3, [r7, #4]
    }
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	24000040 	.word	0x24000040

080057a4 <vTaskMissedYield>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <vTaskMissedYield+0x14>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	24000528 	.word	0x24000528

080057bc <xTaskGetSchedulerState>:
    {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
        return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
    }
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	24000520 	.word	0x24000520
 80057f4:	2400053c 	.word	0x2400053c

080057f8 <xTaskPriorityInherit>:
    {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8090 	beq.w	8005930 <xTaskPriorityInherit+0x138>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <xTaskPriorityInherit+0x144>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800581e:	429a      	cmp	r2, r3
 8005820:	d27b      	bcs.n	800591a <xTaskPriorityInherit+0x122>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005828:	2b00      	cmp	r3, #0
 800582a:	db08      	blt.n	800583e <xTaskPriorityInherit+0x46>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582c:	4b43      	ldr	r3, [pc, #268]	; (800593c <xTaskPriorityInherit+0x144>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005854:	4413      	add	r3, r2
 8005856:	4299      	cmp	r1, r3
 8005858:	d155      	bne.n	8005906 <xTaskPriorityInherit+0x10e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3384      	adds	r3, #132	; 0x84
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb f926 	bl	8000ab0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <xTaskPriorityInherit+0x144>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <xTaskPriorityInherit+0x14c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d904      	bls.n	800588a <xTaskPriorityInherit+0x92>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005886:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <xTaskPriorityInherit+0x14c>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005890:	492b      	ldr	r1, [pc, #172]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	3284      	adds	r2, #132	; 0x84
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058d8:	441a      	add	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	4812      	ldr	r0, [pc, #72]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4403      	add	r3, r0
 8005902:	6019      	str	r1, [r3, #0]
 8005904:	e006      	b.n	8005914 <xTaskPriorityInherit+0x11c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <xTaskPriorityInherit+0x144>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e00a      	b.n	8005930 <xTaskPriorityInherit+0x138>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <xTaskPriorityInherit+0x144>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005928:	429a      	cmp	r2, r3
 800592a:	d201      	bcs.n	8005930 <xTaskPriorityInherit+0x138>
                    xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
    }
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	24000040 	.word	0x24000040
 8005940:	24000044 	.word	0x24000044
 8005944:	2400051c 	.word	0x2400051c

08005948 <xTaskPriorityDisinherit>:
    {
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8092 	beq.w	8005a84 <xTaskPriorityDisinherit+0x13c>
            configASSERT( pxTCB == pxCurrentTCB );
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <xTaskPriorityDisinherit+0x148>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d00a      	beq.n	8005980 <xTaskPriorityDisinherit+0x38>
    __asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	613b      	str	r3, [r7, #16]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskPriorityDisinherit+0x58>
    __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d062      	beq.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d15d      	bne.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3384      	adds	r3, #132	; 0x84
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fb f86f 	bl	8000ab0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    prvAddTaskToReadyList( pxTCB );
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d904      	bls.n	8005a06 <xTaskPriorityDisinherit+0xbe>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a02:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a0c:	4922      	ldr	r1, [pc, #136]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	3304      	adds	r3, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	3284      	adds	r2, #132	; 0x84
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a54:	441a      	add	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a62:	490d      	ldr	r1, [pc, #52]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	4809      	ldr	r0, [pc, #36]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4403      	add	r3, r0
 8005a7e:	6019      	str	r1, [r3, #0]
                    xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
        return xReturn;
 8005a84:	69fb      	ldr	r3, [r7, #28]
    }
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	24000040 	.word	0x24000040
 8005a94:	2400051c 	.word	0x2400051c
 8005a98:	24000044 	.word	0x24000044

08005a9c <vTaskPriorityDisinheritAfterTimeout>:
    {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	623b      	str	r3, [r7, #32]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a7 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
            configASSERT( pxTCB->uxMutexesHeld );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <vTaskPriorityDisinheritAfterTimeout+0x38>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d902      	bls.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	e003      	b.n	8005af0 <vTaskPriorityDisinheritAfterTimeout+0x54>
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	f000 8083 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d17c      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                    configASSERT( pxTCB != pxCurrentTCB );
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d10a      	bne.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0x8e>
    __asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <vTaskPriorityDisinheritAfterTimeout+0x8c>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b30:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db05      	blt.n	8005b50 <vTaskPriorityDisinheritAfterTimeout+0xb4>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b62:	4413      	add	r3, r2
 8005b64:	4299      	cmp	r1, r3
 8005b66:	d14d      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	3384      	adds	r3, #132	; 0x84
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa ff9f 	bl	8000ab0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b78:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d904      	bls.n	8005b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b90:	491f      	ldr	r1, [pc, #124]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	3284      	adds	r2, #132	; 0x84
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005be6:	490a      	ldr	r1, [pc, #40]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	4806      	ldr	r0, [pc, #24]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4403      	add	r3, r0
 8005c02:	6019      	str	r1, [r3, #0]
    }
 8005c04:	bf00      	nop
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	24000040 	.word	0x24000040
 8005c10:	24000044 	.word	0x24000044
 8005c14:	2400051c 	.word	0x2400051c

08005c18 <uxTaskGetTaskNumber>:
    {
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
        if( xTask != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <uxTaskGetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e001      	b.n	8005c38 <uxTaskGetTaskNumber+0x20>
            uxReturn = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
        return uxReturn;
 8005c38:	68fb      	ldr	r3, [r7, #12]
    }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <vTaskSetTaskNumber>:
    {
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
        if( xTask != NULL )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <vTaskSetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    }
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <pvTaskIncrementMutexHeldCount>:
    {
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <pvTaskIncrementMutexHeldCount+0x1a>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005c82:	3201      	adds	r2, #1
 8005c84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        return pxCurrentTCB;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
    }
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	24000040 	.word	0x24000040

08005c9c <vTaskInternalSetTimeOutState>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <vTaskInternalSetTimeOutState+0x24>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <vTaskInternalSetTimeOutState+0x28>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	2400052c 	.word	0x2400052c
 8005cc4:	24000518 	.word	0x24000518

08005cc8 <prvTaskIsTaskSuspended>:
    {
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
        configASSERT( xTask );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <prvTaskIsTaskSuspended+0x2a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <prvTaskIsTaskSuspended+0x60>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <prvTaskIsTaskSuspended+0x64>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d006      	beq.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                    xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005d1a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	24000500 	.word	0x24000500
 8005d2c:	240004d4 	.word	0x240004d4

08005d30 <prvInitialiseTaskLists>:
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	e00c      	b.n	8005d56 <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <prvInitialiseTaskLists+0x60>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fe26 	bl	800099c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3301      	adds	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b37      	cmp	r3, #55	; 0x37
 8005d5a:	d9ef      	bls.n	8005d3c <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d5e:	f7fa fe1d 	bl	800099c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005d62:	480d      	ldr	r0, [pc, #52]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d64:	f7fa fe1a 	bl	800099c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x6c>)
 8005d6a:	f7fa fe17 	bl	800099c <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8005d6e:	480c      	ldr	r0, [pc, #48]	; (8005da0 <prvInitialiseTaskLists+0x70>)
 8005d70:	f7fa fe14 	bl	800099c <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <prvInitialiseTaskLists+0x74>)
 8005d76:	f7fa fe11 	bl	800099c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <prvInitialiseTaskLists+0x78>)
 8005d7c:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvInitialiseTaskLists+0x7c>)
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	24000044 	.word	0x24000044
 8005d94:	240004a4 	.word	0x240004a4
 8005d98:	240004b8 	.word	0x240004b8
 8005d9c:	240004d4 	.word	0x240004d4
 8005da0:	240004e8 	.word	0x240004e8
 8005da4:	24000500 	.word	0x24000500
 8005da8:	240004cc 	.word	0x240004cc
 8005dac:	240004d0 	.word	0x240004d0

08005db0 <prvIdleTask>:
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 8005db8:	f000 f83d 	bl	8005e36 <prvCheckTasksWaitingTermination>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <prvIdleTask+0x18>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d9f9      	bls.n	8005db8 <prvIdleTask+0x8>
                    taskYIELD();
 8005dc4:	df01      	svc	1
        prvCheckTasksWaitingTermination();
 8005dc6:	e7f7      	b.n	8005db8 <prvIdleTask+0x8>
 8005dc8:	24000044 	.word	0x24000044

08005dcc <prvDeleteTCB>:
    {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	33d4      	adds	r3, #212	; 0xd4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f010 fd5d 	bl	8016898 <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <prvDeleteTCB+0x30>
                    vPortFreeStack( pxTCB->pxStack );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fc48 	bl	8007684 <vPortFree>
                    vPortFree( pxTCB );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fc45 	bl	8007684 <vPortFree>
    }
 8005dfa:	e018      	b.n	8005e2e <prvDeleteTCB+0x62>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d103      	bne.n	8005e0e <prvDeleteTCB+0x42>
                    vPortFree( pxTCB );
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc3c 	bl	8007684 <vPortFree>
    }
 8005e0c:	e00f      	b.n	8005e2e <prvDeleteTCB+0x62>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d00a      	beq.n	8005e2e <prvDeleteTCB+0x62>
    __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <prvDeleteTCB+0x60>
    }
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvCheckTasksWaitingTermination>:
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e3c:	e019      	b.n	8005e72 <prvCheckTasksWaitingTermination+0x3c>
                taskENTER_CRITICAL();
 8005e3e:	f003 ff85 	bl	8009d4c <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <prvCheckTasksWaitingTermination+0x4e>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3384      	adds	r3, #132	; 0x84
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fe2e 	bl	8000ab0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e5c:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e66:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 8005e68:	f003 ff8e 	bl	8009d88 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ffad 	bl	8005dcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <prvCheckTasksWaitingTermination+0x8>
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	240004e8 	.word	0x240004e8
 8005e88:	24000514 	.word	0x24000514
 8005e8c:	240004fc 	.word	0x240004fc

08005e90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3384      	adds	r3, #132	; 0x84
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fe02 	bl	8000ab0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb2:	d128      	bne.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d025      	beq.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005ed6:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	3284      	adds	r2, #132	; 0x84
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005f04:	e027      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d209      	bcs.n	8005f34 <prvAddCurrentTaskToDelayedList+0xa4>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fa fd62 	bl	80009f6 <vListInsert>
}
 8005f32:	e010      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fa fd58 	bl	80009f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d202      	bcs.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	24000518 	.word	0x24000518
 8005f64:	24000040 	.word	0x24000040
 8005f68:	24000500 	.word	0x24000500
 8005f6c:	240004d0 	.word	0x240004d0
 8005f70:	240004cc 	.word	0x240004cc
 8005f74:	24000534 	.word	0x24000534

08005f78 <prvListTasksWithinSingleList>:
    {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03f      	beq.n	8006012 <prvListTasksWithinSingleList+0x9a>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d104      	bne.n	8005fb6 <prvListTasksWithinSingleList+0x3e>
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	61fb      	str	r3, [r7, #28]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <prvListTasksWithinSingleList+0x6a>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1899      	adds	r1, r3, r2
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7fd fbb2 	bl	8003768 <vTaskGetInfo>
                uxTask++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
            } while( pxNextTCB != pxFirstTCB );
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d1d5      	bne.n	8005fbe <prvListTasksWithinSingleList+0x46>
        return uxTask;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvTaskCheckFreeStackSpace>:
    {
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006028:	e005      	b.n	8006036 <prvTaskCheckFreeStackSpace+0x1a>
            pucStackByte -= portSTACK_GROWTH;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3301      	adds	r3, #1
 800602e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2ba5      	cmp	r3, #165	; 0xa5
 800603c:	d0f5      	beq.n	800602a <prvTaskCheckFreeStackSpace+0xe>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	60fb      	str	r3, [r7, #12]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	b29b      	uxth	r3, r3
    }
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <prvResetNextTaskUnblockTime>:
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	e005      	b.n	8006078 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	240004cc 	.word	0x240004cc
 8006088:	24000534 	.word	0x24000534

0800608c <prvInitialiseNewTask>:
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2b00      	cmp	r3, #0
 800609e:	da02      	bge.n	80060a6 <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	e001      	b.n	80060aa <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
        uxPriority &= ~portPRIVILEGE_BIT;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	21a5      	movs	r1, #165	; 0xa5
 80060c0:	f010 fa66 	bl	8016590 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80060d0:	440b      	add	r3, r1
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	61fb      	str	r3, [r7, #28]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	61fb      	str	r3, [r7, #28]
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <prvInitialiseNewTask+0x74>
    __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61bb      	str	r3, [r7, #24]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <prvInitialiseNewTask+0x72>
    if( pcName != NULL )
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01f      	beq.n	8006146 <prvInitialiseNewTask+0xba>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e012      	b.n	8006132 <prvInitialiseNewTask+0xa6>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	4413      	add	r3, r2
 8006112:	7819      	ldrb	r1, [r3, #0]
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	4413      	add	r3, r2
 800611a:	33b4      	adds	r3, #180	; 0xb4
 800611c:	460a      	mov	r2, r1
 800611e:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <prvInitialiseNewTask+0xae>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d9e9      	bls.n	800610c <prvInitialiseNewTask+0x80>
 8006138:	e000      	b.n	800613c <prvInitialiseNewTask+0xb0>
                break;
 800613a:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	2200      	movs	r2, #0
 8006140:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8006144:	e003      	b.n	800614e <prvInitialiseNewTask+0xc2>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2200      	movs	r2, #0
 800614a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b37      	cmp	r3, #55	; 0x37
 8006152:	d90a      	bls.n	800616a <prvInitialiseNewTask+0xde>
    __asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	617b      	str	r3, [r7, #20]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <prvInitialiseNewTask+0xdc>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b37      	cmp	r3, #55	; 0x37
 800616e:	d901      	bls.n	8006174 <prvInitialiseNewTask+0xe8>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006170:	2337      	movs	r3, #55	; 0x37
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
    pxNewTCB->uxPriority = uxPriority;
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            pxNewTCB->uxBasePriority = uxPriority;
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            pxNewTCB->uxMutexesHeld = 0;
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	3384      	adds	r3, #132	; 0x84
 8006190:	4618      	mov	r0, r3
 8006192:	f7fa fc23 	bl	80009dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	3398      	adds	r3, #152	; 0x98
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fc1e 	bl	80009dc <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ca:	f000 ff0d 	bl	8006fe8 <vPortStoreTaskMPUSettings>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80061d4:	220c      	movs	r2, #12
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f010 f9d9 	bl	8016590 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061e4:	2203      	movs	r2, #3
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f010 f9d1 	bl	8016590 <memset>
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	33d4      	adds	r3, #212	; 0xd4
 80061f2:	2260      	movs	r2, #96	; 0x60
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f010 f9ca 	bl	8016590 <memset>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	4a0f      	ldr	r2, [pc, #60]	; (800623c <prvInitialiseNewTask+0x1b0>)
 8006200:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	4a0e      	ldr	r2, [pc, #56]	; (8006240 <prvInitialiseNewTask+0x1b4>)
 8006208:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <prvInitialiseNewTask+0x1b8>)
 8006210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	69f8      	ldr	r0, [r7, #28]
 800621c:	f000 fe00 	bl	8006e20 <pxPortInitialiseStack>
 8006220:	4602      	mov	r2, r0
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <prvInitialiseNewTask+0x1a6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006230:	601a      	str	r2, [r3, #0]
}
 8006232:	bf00      	nop
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	24008500 	.word	0x24008500
 8006240:	24008520 	.word	0x24008520
 8006244:	240084e0 	.word	0x240084e0

08006248 <prvAddNewTaskToReadyList>:
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8006250:	f003 fd7c 	bl	8009d4c <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8006254:	4b48      	ldr	r3, [pc, #288]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a47      	ldr	r2, [pc, #284]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800625c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8006266:	4a45      	ldr	r2, [pc, #276]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d112      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                prvInitialiseTaskLists();
 8006274:	f7ff fd5c 	bl	8005d30 <prvInitialiseTaskLists>
 8006278:	e00f      	b.n	800629a <prvAddNewTaskToReadyList+0x52>
            if( xSchedulerRunning == pdFALSE )
 800627a:	4b41      	ldr	r3, [pc, #260]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006290:	429a      	cmp	r2, r3
 8006292:	d802      	bhi.n	800629a <prvAddNewTaskToReadyList+0x52>
                    pxCurrentTCB = pxNewTCB;
 8006294:	4a39      	ldr	r2, [pc, #228]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 800629a:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	4a38      	ldr	r2, [pc, #224]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062a4:	4b37      	ldr	r3, [pc, #220]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        prvAddTaskToReadyList( pxNewTCB );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062b4:	4b34      	ldr	r3, [pc, #208]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d904      	bls.n	80062c6 <prvAddNewTaskToReadyList+0x7e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062c2:	4a31      	ldr	r2, [pc, #196]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062cc:	492f      	ldr	r1, [pc, #188]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3304      	adds	r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	3284      	adds	r2, #132	; 0x84
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006322:	491a      	ldr	r1, [pc, #104]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	4816      	ldr	r0, [pc, #88]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4403      	add	r3, r0
 800633e:	6019      	str	r1, [r3, #0]
    taskEXIT_CRITICAL();
 8006340:	f003 fd22 	bl	8009d88 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <prvAddNewTaskToReadyList+0x126>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800635a:	429a      	cmp	r2, r3
 800635c:	d207      	bcs.n	800636e <prvAddNewTaskToReadyList+0x126>
            taskYIELD_IF_USING_PREEMPTION();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <prvAddNewTaskToReadyList+0x148>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	24000514 	.word	0x24000514
 800637c:	24000040 	.word	0x24000040
 8006380:	24000520 	.word	0x24000520
 8006384:	24000530 	.word	0x24000530
 8006388:	2400051c 	.word	0x2400051c
 800638c:	24000044 	.word	0x24000044
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80063a2:	202c      	movs	r0, #44	; 0x2c
 80063a4:	f001 f88a 	bl	80074bc <pvPortMalloc>
 80063a8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fcf2 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80063cc:	697b      	ldr	r3, [r7, #20]
        }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08a      	sub	sp, #40	; 0x28
 80063da:	af02      	add	r7, sp, #8
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticTimer_t equals the size of the real timer
                     * structure. */
                    volatile size_t xSize = sizeof( StaticTimer_t );
 80063e4:	232c      	movs	r3, #44	; 0x2c
 80063e6:	613b      	str	r3, [r7, #16]
                    configASSERT( xSize == sizeof( Timer_t ) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b2c      	cmp	r3, #44	; 0x2c
 80063ec:	d00a      	beq.n	8006404 <xTimerCreateStatic+0x2e>
    __asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTimerCreateStatic+0x2c>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006404:	693b      	ldr	r3, [r7, #16]
                }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTimerCreateStatic+0x4c>
    __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTimerCreateStatic+0x4a>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fcb4 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006448:	69fb      	ldr	r3, [r7, #28]
        }
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <pvTimerGetTimerID+0x28>
    __asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800647a:	f003 fc67 	bl	8009d4c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006484:	f003 fc80 	bl	8009d88 <vPortExitCritical>

        return pvReturn;
 8006488:	693b      	ldr	r3, [r7, #16]
    }
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <vTimerSetTimerID+0x2a>
    __asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 80064bc:	f003 fc46 	bl	8009d4c <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 80064c6:	f003 fc5f 	bl	8009d88 <vPortExitCritical>
    }
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <xTimerIsTimerActive>:
    {
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xTimerIsTimerActive+0x28>
    __asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTimerIsTimerActive+0x26>
        taskENTER_CRITICAL();
 80064fa:	f003 fc27 	bl	8009d4c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTimerIsTimerActive+0x40>
                xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e001      	b.n	8006516 <xTimerIsTimerActive+0x44>
                xReturn = pdTRUE;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8006516:	f003 fc37 	bl	8009d88 <vPortExitCritical>
        return xReturn;
 800651a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTimerGetTimerDaemonTaskHandle>:
    {
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTimerGetTimerDaemonTaskHandle+0x24>
    __asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTimerGetTimerDaemonTaskHandle+0x22>
        return xTimerTaskHandle;
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800654a:	681b      	ldr	r3, [r3, #0]
    }
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	24000574 	.word	0x24000574

0800655c <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800656a:	f06f 0301 	mvn.w	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xTimerPendFunctionCallFromISR+0x3c>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f107 0114 	add.w	r1, r7, #20
 8006584:	2300      	movs	r3, #0
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	f7fa fe48 	bl	800121c <xQueueGenericSendFromISR>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	24000570 	.word	0x24000570

0800659c <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <xTimerPendFunctionCall+0x2c>
    __asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xTimerPendFunctionCall+0x2a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065cc:	613b      	str	r3, [r7, #16]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	61fb      	str	r3, [r7, #28]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f107 0110 	add.w	r1, r7, #16
 80065e2:	2300      	movs	r3, #0
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f7fa fa8d 	bl	8000b04 <xQueueGenericSend>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	24000570 	.word	0x24000570

080065fc <pcTimerGetName>:
    {
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <pcTimerGetName+0x28>
    __asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <pcTimerGetName+0x26>
        return pxTimer->pcTimerName;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
    }
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <vTimerSetReloadMode>:
    {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <vTimerSetReloadMode+0x2a>
    __asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60bb      	str	r3, [r7, #8]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 800665e:	f003 fb75 	bl	8009d4c <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <vTimerSetReloadMode+0x48>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800667a:	e008      	b.n	800668e <vTimerSetReloadMode+0x5a>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006682:	f023 0304 	bic.w	r3, r3, #4
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        taskEXIT_CRITICAL();
 800668e:	f003 fb7b 	bl	8009d88 <vPortExitCritical>
    }
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <uxTimerGetReloadMode>:
    {
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <uxTimerGetReloadMode+0x28>
    __asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	60fb      	str	r3, [r7, #12]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <uxTimerGetReloadMode+0x26>
        taskENTER_CRITICAL();
 80066c2:	f003 fb43 	bl	8009d4c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <uxTimerGetReloadMode+0x40>
                uxReturn = ( UBaseType_t ) pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e001      	b.n	80066de <uxTimerGetReloadMode+0x44>
                uxReturn = ( UBaseType_t ) pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 80066de:	f003 fb53 	bl	8009d88 <vPortExitCritical>
        return uxReturn;
 80066e2:	697b      	ldr	r3, [r7, #20]
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xTimerGetPeriod>:
    {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTimerGetPeriod+0x28>
    __asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTimerGetPeriod+0x26>
        return pxTimer->xTimerPeriodInTicks;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	699b      	ldr	r3, [r3, #24]
    }
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <xTimerGetExpiryTime>:
    {
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	617b      	str	r3, [r7, #20]
        configASSERT( xTimer );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <xTimerGetExpiryTime+0x28>
    __asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]
        return xReturn;
 8006752:	693b      	ldr	r3, [r7, #16]
    }
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <xTimerCreateTimerTask>:
    {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
        prvCheckForValidListAndQueue();
 800676a:	f000 f8ab 	bl	80068c4 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800676e:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <xTimerCreateTimerTask+0x80>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d021      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800677e:	1d3a      	adds	r2, r7, #4
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	f107 030c 	add.w	r3, r7, #12
 8006788:	4618      	mov	r0, r3
 800678a:	f003 fc47 	bl	800a01c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <xTimerCreateTimerTask+0x84>)
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	460a      	mov	r2, r1
 80067a0:	4911      	ldr	r1, [pc, #68]	; (80067e8 <xTimerCreateTimerTask+0x88>)
 80067a2:	4812      	ldr	r0, [pc, #72]	; (80067ec <xTimerCreateTimerTask+0x8c>)
 80067a4:	f7fc fccb 	bl	800313e <xTaskCreateStatic>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067ac:	6013      	str	r3, [r2, #0]
                    if( xTimerTaskHandle != NULL )
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                        xReturn = pdPASS;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
        configASSERT( xReturn );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xTimerCreateTimerTask+0x76>
    __asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80067d6:	697b      	ldr	r3, [r7, #20]
    }
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	24000570 	.word	0x24000570
 80067e4:	80000002 	.word	0x80000002
 80067e8:	24008268 	.word	0x24008268
 80067ec:	08006945 	.word	0x08006945
 80067f0:	24000574 	.word	0x24000574

080067f4 <xTimerGenericCommand>:
    {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xTimerGenericCommand+0x2e>
    __asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xTimerGenericCommand+0x2c>
        if( xTimerQueue != NULL )
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <xTimerGenericCommand+0x98>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02a      	beq.n	8006880 <xTimerGenericCommand+0x8c>
            xMessage.xMessageID = xCommandID;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	61bb      	str	r3, [r7, #24]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b05      	cmp	r3, #5
 800683a:	dc18      	bgt.n	800686e <xTimerGenericCommand+0x7a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800683c:	f7fe ffbe 	bl	80057bc <xTaskGetSchedulerState>
 8006840:	4603      	mov	r3, r0
 8006842:	2b02      	cmp	r3, #2
 8006844:	d109      	bne.n	800685a <xTimerGenericCommand+0x66>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTimerGenericCommand+0x98>)
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f107 0110 	add.w	r1, r7, #16
 800684e:	2300      	movs	r3, #0
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	f7fa f957 	bl	8000b04 <xQueueGenericSend>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24
 8006858:	e012      	b.n	8006880 <xTimerGenericCommand+0x8c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <xTimerGenericCommand+0x98>)
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f107 0110 	add.w	r1, r7, #16
 8006862:	2300      	movs	r3, #0
 8006864:	2200      	movs	r2, #0
 8006866:	f7fa f94d 	bl	8000b04 <xQueueGenericSend>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24
 800686c:	e008      	b.n	8006880 <xTimerGenericCommand+0x8c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <xTimerGenericCommand+0x98>)
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f107 0110 	add.w	r1, r7, #16
 8006876:	2300      	movs	r3, #0
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	f7fa fccf 	bl	800121c <xQueueGenericSendFromISR>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006882:	4618      	mov	r0, r3
 8006884:	3728      	adds	r7, #40	; 0x28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	24000570 	.word	0x24000570

08006890 <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
        }
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <uxTimerGetTimerNumber>:
        {
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <prvCheckForValidListAndQueue>:
    {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af02      	add	r7, sp, #8
        taskENTER_CRITICAL();
 80068ca:	f003 fa3f 	bl	8009d4c <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d120      	bne.n	8006918 <prvCheckForValidListAndQueue+0x54>
                vListInitialise( &xActiveTimerList1 );
 80068d6:	4814      	ldr	r0, [pc, #80]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068d8:	f7fa f860 	bl	800099c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80068dc:	4813      	ldr	r0, [pc, #76]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068de:	f7fa f85d 	bl	800099c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <prvCheckForValidListAndQueue+0x6c>)
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <prvCheckForValidListAndQueue+0x70>)
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068ec:	601a      	str	r2, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068ee:	2300      	movs	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <prvCheckForValidListAndQueue+0x74>)
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <prvCheckForValidListAndQueue+0x78>)
 80068f6:	2110      	movs	r1, #16
 80068f8:	200a      	movs	r0, #10
 80068fa:	f7fb fa2b 	bl	8001d54 <xQueueGenericCreateStatic>
 80068fe:	4603      	mov	r3, r0
 8006900:	4a08      	ldr	r2, [pc, #32]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006902:	6013      	str	r3, [r2, #0]
                        if( xTimerQueue != NULL )
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <prvCheckForValidListAndQueue+0x54>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	490b      	ldr	r1, [pc, #44]	; (8006940 <prvCheckForValidListAndQueue+0x7c>)
 8006912:	4618      	mov	r0, r3
 8006914:	f7fb f912 	bl	8001b3c <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 8006918:	f003 fa36 	bl	8009d88 <vPortExitCritical>
    }
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	24000570 	.word	0x24000570
 8006928:	24000540 	.word	0x24000540
 800692c:	24000554 	.word	0x24000554
 8006930:	24000568 	.word	0x24000568
 8006934:	2400056c 	.word	0x2400056c
 8006938:	2400057c 	.word	0x2400057c
 800693c:	240005cc 	.word	0x240005cc
 8006940:	24008270 	.word	0x24008270

08006944 <prvTimerTask>:
    {
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800694c:	f107 0308 	add.w	r3, r7, #8
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9bb 	bl	8006ccc <prvGetNextExpireTime>
 8006956:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f9d9 	bl	8006d14 <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 8006962:	f000 f801 	bl	8006968 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006966:	e7f1      	b.n	800694c <prvTimerTask+0x8>

08006968 <prvProcessReceivedCommands>:
    {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800696e:	e0c2      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da18      	bge.n	80069a8 <prvProcessReceivedCommands+0x40>
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	3304      	adds	r3, #4
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( pxCallback );
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <prvProcessReceivedCommands+0x30>
    __asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	61bb      	str	r3, [r7, #24]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <prvProcessReceivedCommands+0x2e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	6850      	ldr	r0, [r2, #4]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	6892      	ldr	r2, [r2, #8]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f2c0 80a2 	blt.w	8006af4 <prvProcessReceivedCommands+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	623b      	str	r3, [r7, #32]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <prvProcessReceivedCommands+0x5e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fa f875 	bl	8000ab0 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	463b      	mov	r3, r7
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f95f 	bl	8006c8c <prvSampleTimeNow>
 80069ce:	61f8      	str	r0, [r7, #28]
                switch( xMessage.xMessageID )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 808e 	bhi.w	8006af6 <prvProcessReceivedCommands+0x18e>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <prvProcessReceivedCommands+0x78>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a81 	.word	0x08006a81
 80069f0:	08006acb 	.word	0x08006acb
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a05 	.word	0x08006a05
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a81 	.word	0x08006a81
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	18d1      	adds	r1, r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	6a38      	ldr	r0, [r7, #32]
 8006a24:	f000 f87a 	bl	8006b1c <prvInsertTimerInActiveList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <prvProcessReceivedCommands+0x18e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <prvProcessReceivedCommands+0xe8>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4413      	add	r3, r2
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f000 f8a9 	bl	8006ba0 <prvReloadTimer>
 8006a4e:	e008      	b.n	8006a62 <prvProcessReceivedCommands+0xfa>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	6a38      	ldr	r0, [r7, #32]
 8006a68:	4798      	blx	r3
                        break;
 8006a6a:	e044      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a7e:	e03a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvProcessReceivedCommands+0x14e>
    __asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	617b      	str	r3, [r7, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvProcessReceivedCommands+0x14c>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6a38      	ldr	r0, [r7, #32]
 8006ac4:	f000 f82a 	bl	8006b1c <prvInsertTimerInActiveList>
                        break;
 8006ac8:	e015      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x178>
                                    vPortFree( pxTimer );
 8006ad8:	6a38      	ldr	r0, [r7, #32]
 8006ada:	f000 fdd3 	bl	8007684 <vPortFree>
 8006ade:	e00a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006af2:	e000      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
            }
 8006af4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <prvProcessReceivedCommands+0x1b0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	1d39      	adds	r1, r7, #4
 8006afc:	2200      	movs	r2, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fa fa49 	bl	8000f96 <xQueueReceive>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af32 	bne.w	8006970 <prvProcessReceivedCommands+0x8>
    }
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	24000570 	.word	0x24000570

08006b1c <prvInsertTimerInActiveList>:
    {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d812      	bhi.n	8006b68 <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e01b      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <prvInsertTimerInActiveList+0x7c>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7f9 ff48 	bl	80009f6 <vListInsert>
 8006b66:	e012      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d206      	bcs.n	8006b7e <prvInsertTimerInActiveList+0x62>
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e007      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvInsertTimerInActiveList+0x80>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7f9 ff34 	bl	80009f6 <vListInsert>
        return xProcessTimerNow;
 8006b8e:	697b      	ldr	r3, [r7, #20]
    }
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2400056c 	.word	0x2400056c
 8006b9c:	24000568 	.word	0x24000568

08006ba0 <prvReloadTimer>:
    {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bac:	e008      	b.n	8006bc0 <prvReloadTimer+0x20>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	18d1      	adds	r1, r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ffa5 	bl	8006b1c <prvInsertTimerInActiveList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ea      	bne.n	8006bae <prvReloadTimer+0xe>
    }
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <prvProcessExpiredTimer>:
    {
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <prvProcessExpiredTimer+0x5a>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60fb      	str	r3, [r7, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7f9 ff58 	bl	8000ab0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <prvProcessExpiredTimer+0x38>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ffc4 	bl	8006ba0 <prvReloadTimer>
 8006c18:	e008      	b.n	8006c2c <prvProcessExpiredTimer+0x4a>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	4798      	blx	r3
    }
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	24000568 	.word	0x24000568

08006c40 <prvSwitchTimerLists>:
    {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	e009      	b.n	8006c5c <prvSwitchTimerLists+0x1c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	603b      	str	r3, [r7, #0]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006c52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7ff ffc3 	bl	8006be2 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c72:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006c74:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
    }
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	24000568 	.word	0x24000568
 8006c88:	2400056c 	.word	0x2400056c

08006c8c <prvSampleTimeNow>:
    {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 8006c94:	f7fd fa20 	bl	80040d8 <xTaskGetTickCount>
 8006c98:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d205      	bcs.n	8006cb0 <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 8006ca4:	f7ff ffcc 	bl	8006c40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	24000578 	.word	0x24000578

08006ccc <prvGetNextExpireTime>:
    {
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <prvGetNextExpireTime+0x16>
 8006cde:	2201      	movs	r2, #1
 8006ce0:	e000      	b.n	8006ce4 <prvGetNextExpireTime+0x18>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e001      	b.n	8006d00 <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 8006d00:	68fb      	ldr	r3, [r7, #12]
    }
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	24000568 	.word	0x24000568

08006d14 <prvProcessTimerOrBlockTask>:
    {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8006d1e:	f7fd f8b7 	bl	8003e90 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff ffb0 	bl	8006c8c <prvSampleTimeNow>
 8006d2c:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d130      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d806      	bhi.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 8006d42:	f7fd f8b3 	bl	8003eac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff4a 	bl	8006be2 <prvProcessExpiredTimer>
    }
 8006d4e:	e024      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <prvProcessTimerOrBlockTask+0x90>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <prvProcessTimerOrBlockTask+0x50>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <prvProcessTimerOrBlockTask+0x52>
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <prvProcessTimerOrBlockTask+0x94>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	f7fb f84b 	bl	8001e10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006d7a:	f7fd f897 	bl	8003eac <xTaskResumeAll>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <prvProcessTimerOrBlockTask+0x98>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
    }
 8006d94:	e001      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006d96:	f7fd f889 	bl	8003eac <xTaskResumeAll>
    }
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2400056c 	.word	0x2400056c
 8006da8:	24000570 	.word	0x24000570
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <prvInitialiseNewTimer>:
    {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <prvInitialiseNewTimer+0x2a>
    __asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	617b      	str	r3, [r7, #20]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvInitialiseNewTimer+0x28>
        prvCheckForValidListAndQueue();
 8006dda:	f7ff fd73 	bl	80068c4 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7f9 fdee 	bl	80009dc <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <prvInitialiseNewTimer+0x68>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0c:	f043 0304 	orr.w	r3, r3, #4
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <pxPortInitialiseStack>:
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters,
                                     BaseType_t xRunPrivileged )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3b04      	subs	r3, #4
 8006e32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e3a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0201 	bic.w	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = 0;                                                   /* LR */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b14      	subs	r3, #20
 8006e5c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b04      	subs	r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f06f 0202 	mvn.w	r2, #2
 8006e70:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 9; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b24      	subs	r3, #36	; 0x24
 8006e76:	60fb      	str	r3, [r7, #12]

    if( xRunPrivileged == pdTRUE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d103      	bne.n	8006e86 <pxPortInitialiseStack+0x66>
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_PRIVILEGED;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e002      	b.n	8006e8c <pxPortInitialiseStack+0x6c>
    }
    else
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2203      	movs	r2, #3
 8006e8a:	601a      	str	r2, [r3, #0]
    }

    return pxTopOfStack;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
    configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <xPortStartScheduler+0xfe>)
 8006ea2:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <xPortStartScheduler+0x102>)
 8006ec6:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec8:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006eca:	2207      	movs	r2, #7
 8006ecc:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ece:	e009      	b.n	8006ee4 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8006ed0:	4b33      	ldr	r3, [pc, #204]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed8:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d0ef      	beq.n	8006ed0 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1c3 0307 	rsb	r3, r3, #7
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d00a      	beq.n	8006f12 <xPortStartScheduler+0x78>
    __asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f12:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	701a      	strb	r2, [r3, #0]
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the same priority as the kernel, and the SVC
     * handler higher priority so it can be used to exit a critical section (where
     * lower priorities are masked). */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f46:	6013      	str	r3, [r2, #0]

    /* Configure the regions in the MPU that are common to all tasks. */
    prvSetupMPU();
 8006f48:	f000 f90c 	bl	8007164 <prvSetupMPU>

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006f4c:	f002 ff4a 	bl	8009de4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <xPortStartScheduler+0x10e>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006f56:	f002 ff69 	bl	8009e2c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <xPortStartScheduler+0x112>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <xPortStartScheduler+0x112>)
 8006f60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f64:	6013      	str	r3, [r2, #0]

    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f66:	4808      	ldr	r0, [pc, #32]	; (8006f88 <xPortStartScheduler+0xee>)
 8006f68:	6800      	ldr	r0, [r0, #0]
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f380 8808 	msr	MSP, r0
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f380 8814 	msr	CONTROL, r0
 8006f78:	b662      	cpsie	i
 8006f7a:	b661      	cpsie	f
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	df00      	svc	0
 8006f86:	bf00      	nop
 8006f88:	e000ed08 	.word	0xe000ed08
        " nop					\n"
        " .ltorg				\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory" );

    /* Should not get here! */
    return 0;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000e400 	.word	0xe000e400
 8006f9c:	2401001d 	.word	0x2401001d
 8006fa0:	24010020 	.word	0x24010020
 8006fa4:	e000ed20 	.word	0xe000ed20
 8006fa8:	2400800c 	.word	0x2400800c
 8006fac:	e000ef34 	.word	0xe000ef34

08006fb0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <vPortEndScheduler+0x34>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbe:	d00a      	beq.n	8006fd6 <vPortEndScheduler+0x26>
    __asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	607b      	str	r3, [r7, #4]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <vPortEndScheduler+0x24>
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2400800c 	.word	0x2400800c

08006fe8 <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
    #endif /* if defined( __ARMCC_VERSION ) */

    int32_t lIndex;
    uint32_t ul;

    if( xRegions == NULL )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d137      	bne.n	800706c <vPortStoreTaskMPUSettings+0x84>
    {
        /* No MPU regions are specified so allow access to all RAM. */
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8006ffc:	4b53      	ldr	r3, [pc, #332]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
            ( portMPU_REGION_VALID ) |
 8006ffe:	f043 0214 	orr.w	r2, r3, #20
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
            ( portSTACK_REGION );

        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
            ( portMPU_REGION_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 8007006:	4a52      	ldr	r2, [pc, #328]	; (8007150 <vPortStoreTaskMPUSettings+0x168>)
 8007008:	4b50      	ldr	r3, [pc, #320]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f92d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007012:	4602      	mov	r2, r0
 8007014:	4b4f      	ldr	r3, [pc, #316]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 8007016:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	6053      	str	r3, [r2, #4]
            ( portMPU_REGION_ENABLE );

        /* Re-instate the privileged only RAM region as xRegion[ 0 ] will have
         * just removed the privileged only parameters. */
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
            ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800701c:	4b4e      	ldr	r3, [pc, #312]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
            ( portMPU_REGION_VALID ) |
 800701e:	f043 0215 	orr.w	r2, r3, #21
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	609a      	str	r2, [r3, #8]
            ( portSTACK_REGION + 1 );

        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
            ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8007026:	4a4d      	ldr	r2, [pc, #308]	; (800715c <vPortStoreTaskMPUSettings+0x174>)
 8007028:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f91d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007032:	4602      	mov	r2, r0
 8007034:	4b4a      	ldr	r3, [pc, #296]	; (8007160 <vPortStoreTaskMPUSettings+0x178>)
 8007036:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	60d3      	str	r3, [r2, #12]
            ( portMPU_REGION_ENABLE );

        /* Invalidate all other regions. */
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800703c:	2302      	movs	r3, #2
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e010      	b.n	8007064 <vPortStoreTaskMPUSettings+0x7c>
        {
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3304      	adds	r3, #4
 8007046:	f043 0110 	orr.w	r1, r3, #16
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b0b      	cmp	r3, #11
 8007068:	d9eb      	bls.n	8007042 <vPortStoreTaskMPUSettings+0x5a>
            }

            lIndex++;
        }
    }
}
 800706a:	e06a      	b.n	8007142 <vPortStoreTaskMPUSettings+0x15a>
        if( ulStackDepth > 0 )
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <vPortStoreTaskMPUSettings+0xa8>
                ( ( uint32_t ) pxBottomOfStack ) |
 8007072:	687b      	ldr	r3, [r7, #4]
                ( portMPU_REGION_VALID ) |
 8007074:	f043 0214 	orr.w	r2, r3, #20
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]
                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f8f3 	bl	800726c <prvGetMPURegionSizeSetting>
 8007086:	4602      	mov	r2, r0
                ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
 8007088:	4b32      	ldr	r3, [pc, #200]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 800708a:	4313      	orrs	r3, r2
            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6053      	str	r3, [r2, #4]
        lIndex = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007094:	2301      	movs	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e050      	b.n	800713c <vPortStoreTaskMPUSettings+0x154>
            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d031      	beq.n	8007114 <vPortStoreTaskMPUSettings+0x12c>
                    ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) |
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
                    ( portSTACK_REGION + ul ); /* Region number. */
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
                    ( portMPU_REGION_VALID ) |
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f043 0110 	orr.w	r1, r3, #16
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f8bf 	bl	800726c <prvGetMPURegionSizeSetting>
 80070ee:	4601      	mov	r1, r0
                    ( xRegions[ lIndex ].ulParameters ) |
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	689b      	ldr	r3, [r3, #8]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8007102:	430b      	orrs	r3, r1
                    ( xRegions[ lIndex ].ulParameters ) |
 8007104:	f043 0201 	orr.w	r2, r3, #1
                xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	440b      	add	r3, r1
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	e00d      	b.n	8007130 <vPortStoreTaskMPUSettings+0x148>
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3304      	adds	r3, #4
 8007118:	f043 0110 	orr.w	r1, r3, #16
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
            lIndex++;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3301      	adds	r3, #1
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d9ab      	bls.n	800709a <vPortStoreTaskMPUSettings+0xb2>
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	24000000 	.word	0x24000000
 8007150:	24080000 	.word	0x24080000
 8007154:	03030001 	.word	0x03030001
 8007158:	24000000 	.word	0x24000000
 800715c:	24008000 	.word	0x24008000
 8007160:	01030001 	.word	0x01030001

08007164 <prvSetupMPU>:
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
    configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 800716a:	4b30      	ldr	r3, [pc, #192]	; (800722c <prvSetupMPU+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d00a      	beq.n	800718a <prvSetupMPU+0x26>
    __asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	607b      	str	r3, [r7, #4]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <prvSetupMPU+0x24>
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <prvSetupMPU+0xc8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d147      	bne.n	8007224 <prvSetupMPU+0xc0>
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8007194:	4b26      	ldr	r3, [pc, #152]	; (8007230 <prvSetupMPU+0xcc>)
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 8007198:	f043 0310 	orr.w	r3, r3, #16
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 800719c:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 800719e:	4a26      	ldr	r2, [pc, #152]	; (8007238 <prvSetupMPU+0xd4>)
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <prvSetupMPU+0xcc>)
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f861 	bl	800726c <prvGetMPURegionSizeSetting>
 80071aa:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071ac:	4923      	ldr	r1, [pc, #140]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <prvSetupMPU+0xdc>)
 80071b0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071b2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071b4:	4b23      	ldr	r3, [pc, #140]	; (8007244 <prvSetupMPU+0xe0>)
 80071b6:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071b8:	f043 0311 	orr.w	r3, r3, #17
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071bc:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <prvSetupMPU+0xe4>)
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <prvSetupMPU+0xe0>)
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f851 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ca:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071cc:	491b      	ldr	r1, [pc, #108]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <prvSetupMPU+0xe8>)
 80071d0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071d2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071d4:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <prvSetupMPU+0xec>)
 80071d6:	4a17      	ldr	r2, [pc, #92]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071d8:	f043 0312 	orr.w	r3, r3, #18
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071dc:	6013      	str	r3, [r2, #0]
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071de:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <prvSetupMPU+0xf0>)
 80071e0:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <prvSetupMPU+0xec>)
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f841 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ea:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071ec:	4913      	ldr	r1, [pc, #76]	; (800723c <prvSetupMPU+0xd8>)
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <prvSetupMPU+0xf4>)
 80071f0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071f2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <prvSetupMPU+0xd0>)
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <prvSetupMPU+0xf8>)
 80071f8:	601a      	str	r2, [r3, #0]
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80071fa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80071fe:	f000 f835 	bl	800726c <prvGetMPURegionSizeSetting>
 8007202:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 8007204:	490d      	ldr	r1, [pc, #52]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <prvSetupMPU+0xfc>)
 8007208:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 800720a:	600b      	str	r3, [r1, #0]
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <prvSetupMPU+0x100>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a14      	ldr	r2, [pc, #80]	; (8007264 <prvSetupMPU+0x100>)
 8007212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007216:	6013      	str	r3, [r2, #0]
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <prvSetupMPU+0x104>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <prvSetupMPU+0x104>)
 800721e:	f043 0305 	orr.w	r3, r3, #5
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed90 	.word	0xe000ed90
 8007230:	08000000 	.word	0x08000000
 8007234:	e000ed9c 	.word	0xe000ed9c
 8007238:	08100000 	.word	0x08100000
 800723c:	e000eda0 	.word	0xe000eda0
 8007240:	06070001 	.word	0x06070001
 8007244:	08000000 	.word	0x08000000
 8007248:	08008000 	.word	0x08008000
 800724c:	05070001 	.word	0x05070001
 8007250:	24000000 	.word	0x24000000
 8007254:	24008000 	.word	0x24008000
 8007258:	01030001 	.word	0x01030001
 800725c:	40000013 	.word	0x40000013
 8007260:	13000001 	.word	0x13000001
 8007264:	e000ed24 	.word	0xe000ed24
 8007268:	e000ed94 	.word	0xe000ed94

0800726c <prvGetMPURegionSizeSetting>:
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    uint32_t ulRegionSize, ulReturnValue = 4;
 8007274:	2304      	movs	r3, #4
 8007276:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8007278:	2320      	movs	r3, #32
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e009      	b.n	8007292 <prvGetMPURegionSizeSetting+0x26>
        if( ulActualSizeInBytes <= ulRegionSize )
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	429a      	cmp	r2, r3
 8007284:	d909      	bls.n	800729a <prvGetMPURegionSizeSetting+0x2e>
            ulReturnValue++;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b1e      	cmp	r3, #30
 8007296:	d9f2      	bls.n	800727e <prvGetMPURegionSizeSetting+0x12>
 8007298:	e000      	b.n	800729c <prvGetMPURegionSizeSetting+0x30>
            break;
 800729a:	bf00      	nop
    return( ulReturnValue << 1UL );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	005b      	lsls	r3, r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <PendSV_Handler>:
    __asm volatile
 80072ac:	f3ef 8009 	mrs	r0, PSP
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	4b26      	ldr	r3, [pc, #152]	; (8007350 <pxCurrentTCBConst>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	f01e 0f10 	tst.w	lr, #16
 80072bc:	bf08      	it	eq
 80072be:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c2:	f3ef 8114 	mrs	r1, CONTROL
 80072c6:	e920 4ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe f9aa 	bl	8005638 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	f101 0104 	add.w	r1, r1, #4
 80072f6:	f3bf 8f5f 	dmb	sy
 80072fa:	4a6d      	ldr	r2, [pc, #436]	; (80074b0 <prvSVCHandler+0x8a>)
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4a6b      	ldr	r2, [pc, #428]	; (80074b4 <prvSVCHandler+0x8e>)
 8007306:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730e:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007312:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007316:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731e:	4a64      	ldr	r2, [pc, #400]	; (80074b0 <prvSVCHandler+0x8a>)
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	f383 8814 	msr	CONTROL, r3
 8007334:	f01e 0f10 	tst.w	lr, #16
 8007338:	bf08      	it	eq
 800733a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800733e:	f380 8809 	msr	PSP, r0
 8007342:	4770      	bx	lr
 8007344:	f3af 8000 	nop.w
 8007348:	f3af 8000 	nop.w
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	24000040 	.word	0x24000040
}
 8007354:	bf00      	nop

08007356 <SysTick_Handler>:
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
    __asm volatile
 800735c:	f3ef 8211 	mrs	r2, BASEPRI
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60ba      	str	r2, [r7, #8]
 8007372:	607b      	str	r3, [r7, #4]
    return ulOriginalBASEPRI;
 8007374:	68bb      	ldr	r3, [r7, #8]
    ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007376:	60fb      	str	r3, [r7, #12]
        if( xTaskIncrementTick() != pdFALSE )
 8007378:	f7fd fd9c 	bl	8004eb4 <xTaskIncrementTick>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <SysTick_Handler+0x34>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <SysTick_Handler+0x4a>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	603b      	str	r3, [r7, #0]
    __asm volatile
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f383 8811 	msr	BASEPRI, r3
}
 8007394:	bf00      	nop
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <SVC_Handler>:
    __asm volatile
 80073a4:	f01e 0f04 	tst.w	lr, #4
 80073a8:	bf0c      	ite	eq
 80073aa:	f3ef 8008 	mrseq	r0, MSP
 80073ae:	f3ef 8009 	mrsne	r0, PSP
 80073b2:	e038      	b.n	8007426 <prvSVCHandler>
}
 80073b4:	bf00      	nop

080073b6 <prvRestoreContextOfFirstTask>:
    __asm volatile
 80073b6:	4840      	ldr	r0, [pc, #256]	; (80074b8 <prvSVCHandler+0x92>)
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	f380 8808 	msr	MSP, r0
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	f101 0104 	add.w	r1, r1, #4
 80073ca:	f3bf 8f5f 	dmb	sy
 80073ce:	4a38      	ldr	r2, [pc, #224]	; (80074b0 <prvSVCHandler+0x8a>)
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <prvSVCHandler+0x8e>)
 80073da:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073de:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e2:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e6:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ea:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ee:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <prvSVCHandler+0x8a>)
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	f383 8814 	msr	CONTROL, r3
 8007408:	f380 8809 	msr	PSP, r0
 800740c:	f04f 0000 	mov.w	r0, #0
 8007410:	f380 8811 	msr	BASEPRI, r0
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	f3af 8000 	nop.w
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	24000040 	.word	0x24000040
}
 8007424:	bf00      	nop

08007426 <prvSVCHandler>:
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
    ulPC = pulParam[ portOFFSET_TO_PC ];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b02      	subs	r3, #2
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d018      	beq.n	8007474 <prvSVCHandler+0x4e>
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc25      	bgt.n	8007492 <prvSVCHandler+0x6c>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <prvSVCHandler+0x2a>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d009      	beq.n	8007462 <prvSVCHandler+0x3c>
                    break;
 800744e:	e020      	b.n	8007492 <prvSVCHandler+0x6c>
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 8007450:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvSVCHandler+0x7a>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <prvSVCHandler+0x7a>)
 8007456:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 800745a:	6013      	str	r3, [r2, #0]
            prvRestoreContextOfFirstTask();
 800745c:	f7ff ffab 	bl	80073b6 <prvRestoreContextOfFirstTask>
            break;
 8007460:	e01a      	b.n	8007498 <prvSVCHandler+0x72>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <prvSVCHandler+0x7e>)
 8007464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007468:	601a      	str	r2, [r3, #0]
            __asm volatile ( "dsb" ::: "memory" );
 800746a:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800746e:	f3bf 8f6f 	isb	sy
            break;
 8007472:	e011      	b.n	8007498 <prvSVCHandler+0x72>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8007474:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <prvSVCHandler+0x82>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4293      	cmp	r3, r2
 800747a:	d30c      	bcc.n	8007496 <prvSVCHandler+0x70>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <prvSVCHandler+0x86>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4293      	cmp	r3, r2
 8007482:	d808      	bhi.n	8007496 <prvSVCHandler+0x70>
                        __asm volatile
 8007484:	f3ef 8114 	mrs	r1, CONTROL
 8007488:	f021 0101 	bic.w	r1, r1, #1
 800748c:	f381 8814 	msr	CONTROL, r1
                    break;
 8007490:	e001      	b.n	8007496 <prvSVCHandler+0x70>
                    break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <prvSVCHandler+0x72>
                    break;
 8007496:	bf00      	nop
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000ed1c 	.word	0xe000ed1c
 80074a4:	e000ed04 	.word	0xe000ed04
 80074a8:	08008000 	.word	0x08008000
 80074ac:	08008e36 	.word	0x08008e36
 80074b0:	e000ed94 	.word	0xe000ed94
 80074b4:	e000ed9c 	.word	0xe000ed9c
 80074b8:	e000ed08 	.word	0xe000ed08

080074bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80074c8:	f7fc fce2 	bl	8003e90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074cc:	4b67      	ldr	r3, [pc, #412]	; (800766c <pvPortMalloc+0x1b0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074d4:	f000 f9b0 	bl	8007838 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <pvPortMalloc+0x1b4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 80a7 	bne.w	8007634 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02d      	beq.n	8007548 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80074ec:	2208      	movs	r2, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d227      	bcs.n	8007548 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d021      	beq.n	800754e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d214      	bcs.n	8007542 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	3308      	adds	r3, #8
 8007520:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <pvPortMalloc+0x92>
    __asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	617b      	str	r3, [r7, #20]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007546:	e002      	b.n	800754e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e000      	b.n	8007550 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800754e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d06e      	beq.n	8007634 <pvPortMalloc+0x178>
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <pvPortMalloc+0x1b8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d869      	bhi.n	8007634 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007560:	4b45      	ldr	r3, [pc, #276]	; (8007678 <pvPortMalloc+0x1bc>)
 8007562:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007564:	4b44      	ldr	r3, [pc, #272]	; (8007678 <pvPortMalloc+0x1bc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756a:	e004      	b.n	8007576 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <pvPortMalloc+0xcc>
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f1      	bne.n	800756c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007588:	4b38      	ldr	r3, [pc, #224]	; (800766c <pvPortMalloc+0x1b0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758e:	429a      	cmp	r2, r3
 8007590:	d050      	beq.n	8007634 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2208      	movs	r2, #8
 8007598:	4413      	add	r3, r2
 800759a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	2308      	movs	r3, #8
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d91f      	bls.n	80075f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <pvPortMalloc+0x120>
    __asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	613b      	str	r3, [r7, #16]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ee:	69b8      	ldr	r0, [r7, #24]
 80075f0:	f000 f8c8 	bl	8007784 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075f4:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <pvPortMalloc+0x1b8>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <pvPortMalloc+0x1b8>)
 8007600:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <pvPortMalloc+0x1b8>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <pvPortMalloc+0x1c0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d203      	bcs.n	8007616 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <pvPortMalloc+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <pvPortMalloc+0x1c0>)
 8007614:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <pvPortMalloc+0x1b4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	431a      	orrs	r2, r3
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <pvPortMalloc+0x1c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <pvPortMalloc+0x1c4>)
 8007632:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007634:	f7fc fc3a 	bl	8003eac <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800763e:	f002 fcd0 	bl	8009fe2 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <pvPortMalloc+0x1a6>
    __asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <pvPortMalloc+0x1a4>
    return pvReturn;
 8007662:	69fb      	ldr	r3, [r7, #28]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	24004274 	.word	0x24004274
 8007670:	24004288 	.word	0x24004288
 8007674:	24004278 	.word	0x24004278
 8007678:	2400426c 	.word	0x2400426c
 800767c:	2400427c 	.word	0x2400427c
 8007680:	24004280 	.word	0x24004280

08007684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04d      	beq.n	8007732 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007696:	2308      	movs	r3, #8
 8007698:	425b      	negs	r3, r3
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4b24      	ldr	r3, [pc, #144]	; (800773c <vPortFree+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortFree+0x44>
    __asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <vPortFree+0x62>
    __asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <vPortFree+0xb8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01e      	beq.n	8007732 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11a      	bne.n	8007732 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <vPortFree+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800770c:	f7fc fbc0 	bl	8003e90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <vPortFree+0xbc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4413      	add	r3, r2
 800771a:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortFree+0xbc>)
 800771c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800771e:	6938      	ldr	r0, [r7, #16]
 8007720:	f000 f830 	bl	8007784 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <vPortFree+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a06      	ldr	r2, [pc, #24]	; (8007744 <vPortFree+0xc0>)
 800772c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800772e:	f7fc fbbd 	bl	8003eac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	24004288 	.word	0x24004288
 8007740:	24004278 	.word	0x24004278
 8007744:	24004284 	.word	0x24004284

08007748 <vPortInitialiseBlocks>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
    /* This just exists to keep the linker quiet. */
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <xPortGetFreeHeapSize>:
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 800775a:	4b03      	ldr	r3, [pc, #12]	; (8007768 <xPortGetFreeHeapSize+0x12>)
 800775c:	681b      	ldr	r3, [r3, #0]
}
 800775e:	4618      	mov	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	24004278 	.word	0x24004278

0800776c <xPortGetMinimumEverFreeHeapSize>:
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	2400427c 	.word	0x2400427c

08007784 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800778c:	4b28      	ldr	r3, [pc, #160]	; (8007830 <prvInsertBlockIntoFreeList+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <prvInsertBlockIntoFreeList+0x14>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d8f7      	bhi.n	8007792 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4413      	add	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d108      	bne.n	80077c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d118      	bne.n	800780c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b15      	ldr	r3, [pc, #84]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d00d      	beq.n	8007802 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e008      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e003      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d002      	beq.n	8007822 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	2400426c 	.word	0x2400426c
 8007834:	24004274 	.word	0x24004274

08007838 <prvHeapInit>:
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800783e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007842:	60bb      	str	r3, [r7, #8]
    uxAddress = ( size_t ) ucHeap;
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <prvHeapInit+0xac>)
 8007846:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3307      	adds	r3, #7
 8007856:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <prvHeapInit+0xac>)
 8007868:	4413      	add	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <prvHeapInit+0xb0>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <prvHeapInit+0xb0>)
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007884:	2208      	movs	r2, #8
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <prvHeapInit+0xb4>)
 8007898:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <prvHeapInit+0xb4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvHeapInit+0xb4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvHeapInit+0xb4>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <prvHeapInit+0xb8>)
 80078c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <prvHeapInit+0xbc>)
 80078ce:	6013      	str	r3, [r2, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <prvHeapInit+0xc0>)
 80078d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d6:	601a      	str	r2, [r3, #0]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	2400066c 	.word	0x2400066c
 80078e8:	2400426c 	.word	0x2400426c
 80078ec:	24004274 	.word	0x24004274
 80078f0:	2400427c 	.word	0x2400427c
 80078f4:	24004278 	.word	0x24004278
 80078f8:	24004288 	.word	0x24004288
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_SytemCall_1>:
}



void MPU_SytemCall_1()
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008006:	f000 ff07 	bl	8008e18 <xPortRaisePrivilege>
 800800a:	6078      	str	r0, [r7, #4]

	SytemCall_1_code();
 800800c:	f001 f90a 	bl	8009224 <SytemCall_1_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fe8d 	bl	8009d30 <vPortResetPrivilege>

}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <MPU_SytemCall_2>:


void MPU_SytemCall_2()
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008024:	f000 fef8 	bl	8008e18 <xPortRaisePrivilege>
 8008028:	6078      	str	r0, [r7, #4]

	SytemCall_2_code();
 800802a:	f001 f902 	bl	8009232 <SytemCall_2_code>

	vPortResetPrivilege( xRunningPrivileged );
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fe7e 	bl	8009d30 <vPortResetPrivilege>

}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <MPU_SytemCall_3>:


void MPU_SytemCall_3()
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008042:	f000 fee9 	bl	8008e18 <xPortRaisePrivilege>
 8008046:	6078      	str	r0, [r7, #4]

	SytemCall_3_code();
 8008048:	f001 f8fa 	bl	8009240 <SytemCall_3_code>

	vPortResetPrivilege( xRunningPrivileged );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fe6f 	bl	8009d30 <vPortResetPrivilege>

}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <MPU_SytemCall_4>:



void MPU_SytemCall_4(void *val)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008062:	f000 fed9 	bl	8008e18 <xPortRaisePrivilege>
 8008066:	60f8      	str	r0, [r7, #12]

	SytemCall_4_code(val);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f8f0 	bl	800924e <SytemCall_4_code>

	vPortResetPrivilege( xRunningPrivileged );
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fe5e 	bl	8009d30 <vPortResetPrivilege>

}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <MPU_SytemCall_5>:

void MPU_SytemCall_5(void *val)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008084:	f000 fec8 	bl	8008e18 <xPortRaisePrivilege>
 8008088:	60f8      	str	r0, [r7, #12]

	SytemCall_5_code(val);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f8e9 	bl	8009262 <SytemCall_5_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f001 fe4d 	bl	8009d30 <vPortResetPrivilege>

}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080ae:	f000 feb3 	bl	8008e18 <xPortRaisePrivilege>
 80080b2:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7fa fff4 	bl	80030b0 <xTaskCreate>
 80080c8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f001 fe30 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80080d0:	693b      	ldr	r3, [r7, #16]
    }
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80080da:	b580      	push	{r7, lr}
 80080dc:	b08a      	sub	sp, #40	; 0x28
 80080de:	af04      	add	r7, sp, #16
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080e8:	f000 fe96 	bl	8008e18 <xPortRaisePrivilege>
 80080ec:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7fb f81c 	bl	800313e <xTaskCreateStatic>
 8008106:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f001 fe11 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 800810e:	693b      	ldr	r3, [r7, #16]
    }
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <MPU_vTaskDelete>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008120:	f000 fe7a 	bl	8008e18 <xPortRaisePrivilege>
 8008124:	60f8      	str	r0, [r7, #12]

        vTaskDelete( pxTaskToDelete );
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fb f92e 	bl	8003388 <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fdff 	bl	8009d30 <vPortResetPrivilege>
    }
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008142:	f000 fe69 	bl	8008e18 <xPortRaisePrivilege>
 8008146:	60f8      	str	r0, [r7, #12]

        vTaskDelay( xTicksToDelay );
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fb f995 	bl	8003478 <vTaskDelay>
        vPortResetPrivilege( xRunningPrivileged );
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fdee 	bl	8009d30 <vPortResetPrivilege>
    }
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <MPU_xTaskDelayUntil>:
    {
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008166:	f000 fe57 	bl	8008e18 <xPortRaisePrivilege>
 800816a:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fb f9b6 	bl	80034e0 <xTaskDelayUntil>
 8008174:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f001 fdda 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 800817c:	68bb      	ldr	r3, [r7, #8]
    }
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800818e:	f000 fe43 	bl	8008e18 <xPortRaisePrivilege>
 8008192:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskPriorityGet( pxTask );
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fb fa21 	bl	80035dc <uxTaskPriorityGet>
 800819a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fdc7 	bl	8009d30 <vPortResetPrivilege>
        return uxReturn;
 80081a2:	68bb      	ldr	r3, [r7, #8]
    }
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081b4:	f000 fe30 	bl	8008e18 <xPortRaisePrivilege>
 80081b8:	60f8      	str	r0, [r7, #12]
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fb fa58 	bl	8003670 <eTaskGetState>
 80081c0:	4603      	mov	r3, r0
 80081c2:	72fb      	strb	r3, [r7, #11]
        vPortResetPrivilege( xRunningPrivileged );
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f001 fdb3 	bl	8009d30 <vPortResetPrivilege>
        return eReturn;
 80081ca:	7afb      	ldrb	r3, [r7, #11]
    }
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <MPU_vTaskGetInfo>:
#if ( configUSE_TRACE_FACILITY == 1 )
    void MPU_vTaskGetInfo( TaskHandle_t xTask,
                           TaskStatus_t * pxTaskStatus,
                           BaseType_t xGetFreeStackSpace,
                           eTaskState eState ) /* FREERTOS_SYSTEM_CALL */
    {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	70fb      	strb	r3, [r7, #3]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081e2:	f000 fe19 	bl	8008e18 <xPortRaisePrivilege>
 80081e6:	6178      	str	r0, [r7, #20]

        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7fb faba 	bl	8003768 <vTaskGetInfo>
        vPortResetPrivilege( xRunningPrivileged );
 80081f4:	6978      	ldr	r0, [r7, #20]
 80081f6:	f001 fd9b 	bl	8009d30 <vPortResetPrivilege>
    }
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <MPU_vTaskPrioritySet>:
    {
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800820c:	f000 fe04 	bl	8008e18 <xPortRaisePrivilege>
 8008210:	60f8      	str	r0, [r7, #12]
        vTaskPrioritySet( pxTask, uxNewPriority );
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fb fb13 	bl	8003840 <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f001 fd88 	bl	8009d30 <vPortResetPrivilege>
    }
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008230:	f000 fdf2 	bl	8008e18 <xPortRaisePrivilege>
 8008234:	60f8      	str	r0, [r7, #12]

        vTaskSuspend( pxTaskToSuspend );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fb fbdc 	bl	80039f4 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 fd77 	bl	8009d30 <vPortResetPrivilege>
    }
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008252:	f000 fde1 	bl	8008e18 <xPortRaisePrivilege>
 8008256:	60f8      	str	r0, [r7, #12]

        vTaskResume( pxTaskToResume );
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fb fc51 	bl	8003b00 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f001 fd66 	bl	8009d30 <vPortResetPrivilege>
    }
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008272:	f000 fdd1 	bl	8008e18 <xPortRaisePrivilege>
 8008276:	6078      	str	r0, [r7, #4]

    vTaskSuspendAll();
 8008278:	f7fb fe0a 	bl	8003e90 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fd57 	bl	8009d30 <vPortResetPrivilege>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008290:	f000 fdc2 	bl	8008e18 <xPortRaisePrivilege>
 8008294:	6078      	str	r0, [r7, #4]

    xReturn = xTaskResumeAll();
 8008296:	f7fb fe09 	bl	8003eac <xTaskResumeAll>
 800829a:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 fd47 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 80082a2:	683b      	ldr	r3, [r7, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082b2:	f000 fdb1 	bl	8008e18 <xPortRaisePrivilege>
 80082b6:	6078      	str	r0, [r7, #4]

    xReturn = xTaskGetTickCount();
 80082b8:	f7fb ff0e 	bl	80040d8 <xTaskGetTickCount>
 80082bc:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fd36 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 80082c4:	683b      	ldr	r3, [r7, #0]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082d4:	f000 fda0 	bl	8008e18 <xPortRaisePrivilege>
 80082d8:	6078      	str	r0, [r7, #4]

    uxReturn = uxTaskGetNumberOfTasks();
 80082da:	f7fb ff1f 	bl	800411c <uxTaskGetNumberOfTasks>
 80082de:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fd25 	bl	8009d30 <vPortResetPrivilege>
    return uxReturn;
 80082e6:	683b      	ldr	r3, [r7, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082f8:	f000 fd8e 	bl	8008e18 <xPortRaisePrivilege>
 80082fc:	60f8      	str	r0, [r7, #12]

    pcReturn = pcTaskGetName( xTaskToQuery );
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fb ff18 	bl	8004134 <pcTaskGetName>
 8008304:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f001 fd12 	bl	8009d30 <vPortResetPrivilege>
    return pcReturn;
 800830c:	68bb      	ldr	r3, [r7, #8]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800831e:	f000 fd7b 	bl	8008e18 <xPortRaisePrivilege>
 8008322:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fb ff29 	bl	800417c <uxTaskGetStackHighWaterMark>
 800832a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fcff 	bl	8009d30 <vPortResetPrivilege>
        return uxReturn;
 8008332:	68bb      	ldr	r3, [r7, #8]
    }
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <MPU_uxTaskGetSystemState>:
    {
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008348:	f000 fd66 	bl	8008e18 <xPortRaisePrivilege>
 800834c:	6178      	str	r0, [r7, #20]
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fb ff2e 	bl	80041b4 <uxTaskGetSystemState>
 8008358:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f001 fce8 	bl	8009d30 <vPortResetPrivilege>
        return uxReturn;
 8008360:	693b      	ldr	r3, [r7, #16]
    }
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 800836a:	b580      	push	{r7, lr}
 800836c:	b088      	sub	sp, #32
 800836e:	af02      	add	r7, sp, #8
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008378:	f000 fd4e 	bl	8008e18 <xPortRaisePrivilege>
 800837c:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7fb ffa0 	bl	80042d0 <xTaskGenericNotify>
 8008390:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008392:	6978      	ldr	r0, [r7, #20]
 8008394:	f001 fccc 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008398:	693b      	ldr	r3, [r7, #16]
    }
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083b0:	f000 fd32 	bl	8008e18 <xPortRaisePrivilege>
 80083b4:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7fc fa41 	bl	8004848 <xTaskGenericNotifyWait>
 80083c6:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f001 fcb1 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80083ce:	693b      	ldr	r3, [r7, #16]
    }
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083e4:	f000 fd18 	bl	8008e18 <xPortRaisePrivilege>
 80083e8:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fc fbd2 	bl	8004b98 <ulTaskGenericNotifyTake>
 80083f4:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f001 fc9a 	bl	8009d30 <vPortResetPrivilege>
        return ulReturn;
 80083fc:	693b      	ldr	r3, [r7, #16]
    }
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008410:	f000 fd02 	bl	8008e18 <xPortRaisePrivilege>
 8008414:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fc fc2b 	bl	8004c74 <xTaskGenericNotifyStateClear>
 800841e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f001 fc85 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008426:	68bb      	ldr	r3, [r7, #8]
    }
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800843c:	f000 fcec 	bl	8008e18 <xPortRaisePrivilege>
 8008440:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fc fc50 	bl	8004cec <ulTaskGenericNotifyValueClear>
 800844c:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f001 fc6e 	bl	8009d30 <vPortResetPrivilege>
        return ulReturn;
 8008454:	693b      	ldr	r3, [r7, #16]
    }
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <MPU_xTaskGetCurrentTaskHandle>:
    {
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008464:	f000 fcd8 	bl	8008e18 <xPortRaisePrivilege>
 8008468:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetCurrentTaskHandle();
 800846a:	f7fd f98b 	bl	8005784 <xTaskGetCurrentTaskHandle>
 800846e:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fc5d 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008476:	683b      	ldr	r3, [r7, #0]
    }
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <MPU_vTaskSetTimeOutState>:
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008488:	f000 fcc6 	bl	8008e18 <xPortRaisePrivilege>
 800848c:	60f8      	str	r0, [r7, #12]
    vTaskSetTimeOutState( pxTimeOut );
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fc fc5c 	bl	8004d4c <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fc4b 	bl	8009d30 <vPortResetPrivilege>
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <MPU_xTaskCheckForTimeOut>:
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084ac:	f000 fcb4 	bl	8008e18 <xPortRaisePrivilege>
 80084b0:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fc fc6f 	bl	8004d98 <xTaskCheckForTimeOut>
 80084ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 fc37 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 80084c2:	68bb      	ldr	r3, [r7, #8]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <MPU_xTaskGetSchedulerState>:
    {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084d2:	f000 fca1 	bl	8008e18 <xPortRaisePrivilege>
 80084d6:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetSchedulerState();
 80084d8:	f7fd f970 	bl	80057bc <xTaskGetSchedulerState>
 80084dc:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fc26 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80084e4:	683b      	ldr	r3, [r7, #0]
    }
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <MPU_xTaskCatchUpTicks>:
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084f6:	f000 fc8f 	bl	8008e18 <xPortRaisePrivilege>
 80084fa:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fc fcb1 	bl	8004e64 <xTaskCatchUpTicks>
 8008502:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 fc13 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 800850a:	68bb      	ldr	r3, [r7, #8]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008522:	f000 fc79 	bl	8008e18 <xPortRaisePrivilege>
 8008526:	6178      	str	r0, [r7, #20]

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f8 fae8 	bl	8000b04 <xQueueGenericSend>
 8008534:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f001 fbfa 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 800853c:	693b      	ldr	r3, [r7, #16]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008552:	f000 fc61 	bl	8008e18 <xPortRaisePrivilege>
 8008556:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7f8 fd1a 	bl	8000f96 <xQueueReceive>
 8008562:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008564:	6978      	ldr	r0, [r7, #20]
 8008566:	f001 fbe3 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 800856a:	693b      	ldr	r3, [r7, #16]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008580:	f000 fc4a 	bl	8008e18 <xPortRaisePrivilege>
 8008584:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7f8 fbb8 	bl	8000d00 <xQueuePeek>
 8008590:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f001 fbcc 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 8008598:	693b      	ldr	r3, [r7, #16]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085ac:	f000 fc34 	bl	8008e18 <xPortRaisePrivilege>
 80085b0:	60f8      	str	r0, [r7, #12]
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 f901 	bl	80017bc <xQueueSemaphoreTake>
 80085ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fbb7 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 80085c2:	68bb      	ldr	r3, [r7, #8]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <MPU_uxQueueMessagesWaiting>:
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d4:	f000 fc20 	bl	8008e18 <xPortRaisePrivilege>
 80085d8:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fdba 	bl	8001154 <uxQueueMessagesWaiting>
 80085e0:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fba4 	bl	8009d30 <vPortResetPrivilege>
    return uxReturn;
 80085e8:	68bb      	ldr	r3, [r7, #8]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <MPU_uxQueueSpacesAvailable>:
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085fa:	f000 fc0d 	bl	8008e18 <xPortRaisePrivilege>
 80085fe:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueSpacesAvailable( xQueue );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7f8 fdc5 	bl	8001190 <uxQueueSpacesAvailable>
 8008606:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fb91 	bl	8009d30 <vPortResetPrivilege>
    return uxReturn;
 800860e:	68bb      	ldr	r3, [r7, #8]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008620:	f000 fbfa 	bl	8008e18 <xPortRaisePrivilege>
 8008624:	60f8      	str	r0, [r7, #12]

    vQueueDelete( xQueue );
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7f8 fdd5 	bl	80011d6 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 fb7f 	bl	8009d30 <vPortResetPrivilege>
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <MPU_xQueueCreateMutex>:
    {
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	4603      	mov	r3, r0
 8008642:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008644:	f000 fbe8 	bl	8008e18 <xPortRaisePrivilege>
 8008648:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutex( ucQueueType );
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 f822 	bl	8001696 <xQueueCreateMutex>
 8008652:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 fb6b 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 800865a:	68bb      	ldr	r3, [r7, #8]
    }
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <MPU_xQueueCreateMutexStatic>:
    {
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008670:	f000 fbd2 	bl	8008e18 <xPortRaisePrivilege>
 8008674:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7f9 f823 	bl	80016c6 <xQueueCreateMutexStatic>
 8008680:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 fb54 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008688:	68bb      	ldr	r3, [r7, #8]
    }
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <MPU_xQueueCreateCountingSemaphore>:
    {
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800869c:	f000 fbbc 	bl	8008e18 <xPortRaisePrivilege>
 80086a0:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f9 f829 	bl	80016fc <xQueueCreateCountingSemaphore>
 80086aa:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 fb3f 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80086b2:	68bb      	ldr	r3, [r7, #8]
    }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086c8:	f000 fba6 	bl	8008e18 <xPortRaisePrivilege>
 80086cc:	6178      	str	r0, [r7, #20]
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7f9 f840 	bl	8001758 <xQueueCreateCountingSemaphoreStatic>
 80086d8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f001 fb28 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80086e0:	693b      	ldr	r3, [r7, #16]
    }
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <MPU_xQueueGetMutexHolder>:
    {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086f2:	f000 fb91 	bl	8008e18 <xPortRaisePrivilege>
 80086f6:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f9 f96b 	bl	80019d4 <xQueueGetMutexHolder>
 80086fe:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fb15 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008706:	68bb      	ldr	r3, [r7, #8]
    }
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <MPU_xQueueTakeMutexRecursive>:
    {
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800871a:	f000 fb7d 	bl	8008e18 <xPortRaisePrivilege>
 800871e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7f9 f9a0 	bl	8001a68 <xQueueTakeMutexRecursive>
 8008728:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f001 fb00 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008730:	68bb      	ldr	r3, [r7, #8]
    }
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <MPU_xQueueGiveMutexRecursive>:
    {
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008742:	f000 fb69 	bl	8008e18 <xPortRaisePrivilege>
 8008746:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f9 f9c3 	bl	8001ad4 <xQueueGiveMutexRecursive>
 800874e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f001 faed 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 8008756:	68bb      	ldr	r3, [r7, #8]
    }
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <MPU_vQueueAddToRegistry>:
    {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800876a:	f000 fb55 	bl	8008e18 <xPortRaisePrivilege>
 800876e:	60f8      	str	r0, [r7, #12]
        vQueueAddToRegistry( xQueue, pcName );
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 f9e2 	bl	8001b3c <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 fad9 	bl	8009d30 <vPortResetPrivilege>
    }
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <MPU_vQueueUnregisterQueue>:
    {
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800878e:	f000 fb43 	bl	8008e18 <xPortRaisePrivilege>
 8008792:	60f8      	str	r0, [r7, #12]
        vQueueUnregisterQueue( xQueue );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 fa1f 	bl	8001bd8 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 fac8 	bl	8009d30 <vPortResetPrivilege>
    }
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <MPU_pcQueueGetName>:
    {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087b0:	f000 fb32 	bl	8008e18 <xPortRaisePrivilege>
 80087b4:	60f8      	str	r0, [r7, #12]
        pcReturn = pcQueueGetName( xQueue );
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f9 fa46 	bl	8001c48 <pcQueueGetName>
 80087bc:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 fab6 	bl	8009d30 <vPortResetPrivilege>
        return pcReturn;
 80087c4:	68bb      	ldr	r3, [r7, #8]
    }
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <MPU_xQueueGenericCreate>:
    {
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	4613      	mov	r3, r2
 80087da:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087dc:	f000 fb1c 	bl	8008e18 <xPortRaisePrivilege>
 80087e0:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7f9 fa61 	bl	8001cb0 <xQueueGenericCreate>
 80087ee:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f001 fa9d 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 80087f6:	693b      	ldr	r3, [r7, #16]
    }
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <MPU_xQueueGenericCreateStatic>:
    {
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800880e:	f000 fb03 	bl	8008e18 <xPortRaisePrivilege>
 8008812:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7f9 fa97 	bl	8001d54 <xQueueGenericCreateStatic>
 8008826:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008828:	6978      	ldr	r0, [r7, #20]
 800882a:	f001 fa81 	bl	8009d30 <vPortResetPrivilege>
        return xReturn;
 800882e:	693b      	ldr	r3, [r7, #16]
    }
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <MPU_xQueueGenericReset>:
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008842:	f000 fae9 	bl	8008e18 <xPortRaisePrivilege>
 8008846:	60f8      	str	r0, [r7, #12]
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7f9 fb14 	bl	8001e78 <xQueueGenericReset>
 8008850:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 fa6c 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 8008858:	68bb      	ldr	r3, [r7, #8]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008870:	f000 fad2 	bl	8008e18 <xPortRaisePrivilege>
 8008874:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fd fd87 	bl	8006394 <xTimerCreate>
 8008886:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f001 fa51 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 800888e:	693b      	ldr	r3, [r7, #16]
    }
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088a6:	f000 fab7 	bl	8008e18 <xPortRaisePrivilege>
 80088aa:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7fd fd8b 	bl	80063d6 <xTimerCreateStatic>
 80088c0:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f001 fa34 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 80088c8:	693b      	ldr	r3, [r7, #16]
    }
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088da:	f000 fa9d 	bl	8008e18 <xPortRaisePrivilege>
 80088de:	60f8      	str	r0, [r7, #12]

        pvReturn = pvTimerGetTimerID( xTimer );
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fd fdb6 	bl	8006452 <pvTimerGetTimerID>
 80088e6:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 fa21 	bl	8009d30 <vPortResetPrivilege>

        return pvReturn;
 80088ee:	68bb      	ldr	r3, [r7, #8]
    }
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008902:	f000 fa89 	bl	8008e18 <xPortRaisePrivilege>
 8008906:	60f8      	str	r0, [r7, #12]

        vTimerSetTimerID( xTimer, pvNewID );
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd fdc1 	bl	8006492 <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 fa0d 	bl	8009d30 <vPortResetPrivilege>
    }
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008926:	f000 fa77 	bl	8008e18 <xPortRaisePrivilege>
 800892a:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerIsTimerActive( xTimer );
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fd fdd0 	bl	80064d2 <xTimerIsTimerActive>
 8008932:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 f9fb 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 800893a:	68bb      	ldr	r3, [r7, #8]
    }
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800894a:	f000 fa65 	bl	8008e18 <xPortRaisePrivilege>
 800894e:	6078      	str	r0, [r7, #4]

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008950:	f7fd fde8 	bl	8006524 <xTimerGetTimerDaemonTaskHandle>
 8008954:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f9ea 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 800895c:	683b      	ldr	r3, [r7, #0]
    }
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <MPU_xTimerPendFunctionCall>:
#if ( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
    BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008974:	f000 fa50 	bl	8008e18 <xPortRaisePrivilege>
 8008978:	6178      	str	r0, [r7, #20]

        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7fd fe0b 	bl	800659c <xTimerPendFunctionCall>
 8008986:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	f001 f9d1 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 800898e:	693b      	ldr	r3, [r7, #16]
    }
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089a0:	f000 fa3a 	bl	8008e18 <xPortRaisePrivilege>
 80089a4:	60f8      	str	r0, [r7, #12]

        pcReturn = pcTimerGetName( xTimer );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fd fe28 	bl	80065fc <pcTimerGetName>
 80089ac:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f001 f9be 	bl	8009d30 <vPortResetPrivilege>

        return pcReturn;
 80089b4:	68bb      	ldr	r3, [r7, #8]
    }
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <MPU_vTimerSetReloadMode>:
    {
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089c8:	f000 fa26 	bl	8008e18 <xPortRaisePrivilege>
 80089cc:	60f8      	str	r0, [r7, #12]
        vTimerSetReloadMode( xTimer, uxAutoReload );
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fd fe2f 	bl	8006634 <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 f9aa 	bl	8009d30 <vPortResetPrivilege>
    }
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <MPU_uxTimerGetReloadMode>:
    {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ec:	f000 fa14 	bl	8008e18 <xPortRaisePrivilege>
 80089f0:	60f8      	str	r0, [r7, #12]
        uxReturn = uxTimerGetReloadMode( xTimer );
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fd fe51 	bl	800669a <uxTimerGetReloadMode>
 80089f8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 f998 	bl	8009d30 <vPortResetPrivilege>
        return uxReturn;
 8008a00:	68bb      	ldr	r3, [r7, #8]
    }
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a12:	f000 fa01 	bl	8008e18 <xPortRaisePrivilege>
 8008a16:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetPeriod( xTimer );
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fd fe67 	bl	80066ec <xTimerGetPeriod>
 8008a1e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f001 f985 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008a26:	68bb      	ldr	r3, [r7, #8]
    }
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a38:	f000 f9ee 	bl	8008e18 <xPortRaisePrivilege>
 8008a3c:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetExpiryTime( xTimer );
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fd fe70 	bl	8006724 <xTimerGetExpiryTime>
 8008a44:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 f972 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
    }
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a64:	f000 f9d8 	bl	8008e18 <xPortRaisePrivilege>
 8008a68:	6178      	str	r0, [r7, #20]

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7fd febd 	bl	80067f4 <xTimerGenericCommand>
 8008a7a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a7c:	6978      	ldr	r0, [r7, #20]
 8008a7e:	f001 f957 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008a82:	693b      	ldr	r3, [r7, #16]
    }
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a92:	f000 f9c1 	bl	8008e18 <xPortRaisePrivilege>
 8008a96:	6078      	str	r0, [r7, #4]

        xReturn = xEventGroupCreate();
 8008a98:	f7f7 fbfe 	bl	8000298 <xEventGroupCreate>
 8008a9c:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f946 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008aa4:	683b      	ldr	r3, [r7, #0]
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ab6:	f000 f9af 	bl	8008e18 <xPortRaisePrivilege>
 8008aba:	60f8      	str	r0, [r7, #12]

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7f7 fc05 	bl	80002cc <xEventGroupCreateStatic>
 8008ac2:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 f933 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008aca:	68bb      	ldr	r3, [r7, #8]
    }
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ae2:	f000 f999 	bl	8008e18 <xPortRaisePrivilege>
 8008ae6:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7f7 fc21 	bl	800033a <xEventGroupWaitBits>
 8008af8:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008afa:	6978      	ldr	r0, [r7, #20]
 8008afc:	f001 f918 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008b00:	693b      	ldr	r3, [r7, #16]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b14:	f000 f980 	bl	8008e18 <xPortRaisePrivilege>
 8008b18:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f7 fcdb 	bl	80004d8 <xEventGroupClearBits>
 8008b22:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f001 f903 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b3e:	f000 f96b 	bl	8008e18 <xPortRaisePrivilege>
 8008b42:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f7 fd12 	bl	8000570 <xEventGroupSetBits>
 8008b4c:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f8ee 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008b54:	68bb      	ldr	r3, [r7, #8]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b6c:	f000 f954 	bl	8008e18 <xPortRaisePrivilege>
 8008b70:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7f7 fd99 	bl	80006b0 <xEventGroupSync>
 8008b7e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	f001 f8d5 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008b86:	693b      	ldr	r3, [r7, #16]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b98:	f000 f93e 	bl	8008e18 <xPortRaisePrivilege>
 8008b9c:	60f8      	str	r0, [r7, #12]

    vEventGroupDelete( xEventGroup );
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7f7 fe58 	bl	8000854 <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f8c3 	bl	8009d30 <vPortResetPrivilege>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bc0:	f000 f92a 	bl	8008e18 <xPortRaisePrivilege>
 8008bc4:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7f9 fb6f 	bl	80022b0 <xStreamBufferSend>
 8008bd2:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008bd4:	6978      	ldr	r0, [r7, #20]
 8008bd6:	f001 f8ab 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008bda:	693b      	ldr	r3, [r7, #16]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bf2:	f000 f911 	bl	8008e18 <xPortRaisePrivilege>
 8008bf6:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7f9 fc96 	bl	8002530 <xStreamBufferReceive>
 8008c04:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f001 f892 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008c0c:	693b      	ldr	r3, [r7, #16]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c1e:	f000 f8fb 	bl	8008e18 <xPortRaisePrivilege>
 8008c22:	60f8      	str	r0, [r7, #12]
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7fa f838 	bl	8002c9a <xStreamBufferNextMessageLengthBytes>
 8008c2a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 f87f 	bl	8009d30 <vPortResetPrivilege>
    return xReturn;
 8008c32:	68bb      	ldr	r3, [r7, #8]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c44:	f000 f8e8 	bl	8008e18 <xPortRaisePrivilege>
 8008c48:	60f8      	str	r0, [r7, #12]

    vStreamBufferDelete( xStreamBuffer );
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 fd77 	bl	800273e <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 f86d 	bl	8009d30 <vPortResetPrivilege>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c66:	f000 f8d7 	bl	8008e18 <xPortRaisePrivilege>
 8008c6a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7f9 fd8d 	bl	800278c <xStreamBufferIsFull>
 8008c72:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f001 f85b 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c8c:	f000 f8c4 	bl	8008e18 <xPortRaisePrivilege>
 8008c90:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f9 fdaa 	bl	80027ec <xStreamBufferIsEmpty>
 8008c98:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 f848 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cb2:	f000 f8b1 	bl	8008e18 <xPortRaisePrivilege>
 8008cb6:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7f9 fdbf 	bl	800283c <xStreamBufferReset>
 8008cbe:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f001 f835 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cd8:	f000 f89e 	bl	8008e18 <xPortRaisePrivilege>
 8008cdc:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7f9 fde8 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8008ce4:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f001 f822 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008cec:	68bb      	ldr	r3, [r7, #8]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cfe:	f000 f88b 	bl	8008e18 <xPortRaisePrivilege>
 8008d02:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f9 fe10 	bl	800292a <xStreamBufferBytesAvailable>
 8008d0a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f001 f80f 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008d12:	68bb      	ldr	r3, [r7, #8]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d26:	f000 f877 	bl	8008e18 <xPortRaisePrivilege>
 8008d2a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7f9 fe18 	bl	8002964 <xStreamBufferSetTriggerLevel>
 8008d34:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fffa 	bl	8009d30 <vPortResetPrivilege>

    return xReturn;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d52:	f000 f861 	bl	8008e18 <xPortRaisePrivilege>
 8008d56:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7f9 feb9 	bl	8002ad4 <xStreamBufferGenericCreate>
 8008d62:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f000 ffe3 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008d6a:	693b      	ldr	r3, [r7, #16]
    }
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d82:	f000 f849 	bl	8008e18 <xPortRaisePrivilege>
 8008d86:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7f9 ff00 	bl	8002b98 <xStreamBufferGenericCreateStatic>
 8008d98:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f000 ffc8 	bl	8009d30 <vPortResetPrivilege>

        return xReturn;
 8008da0:	693b      	ldr	r3, [r7, #16]
    }
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <MPU_ASAN_malloc>:
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008db2:	f000 f831 	bl	8008e18 <xPortRaisePrivilege>
 8008db6:	60f8      	str	r0, [r7, #12]
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008db8:	2301      	movs	r3, #1
 8008dba:	2201      	movs	r2, #1
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fd20 	bl	8009804 <Allocate>
 8008dc4:	60b8      	str	r0, [r7, #8]
	vPortResetPrivilege( xRunningPrivileged );
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 ffb2 	bl	8009d30 <vPortResetPrivilege>
	return  (void *	)ptr;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <MPU_ASAN_free>:
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dde:	f000 f81b 	bl	8008e18 <xPortRaisePrivilege>
 8008de2:	60f8      	str	r0, [r7, #12]
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008de4:	2301      	movs	r3, #1
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 ff1c 	bl	8009c28 <Deallocate>
	vPortResetPrivilege( xRunningPrivileged );
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 ff9d 	bl	8009d30 <vPortResetPrivilege>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <MPU_ASAN_flush_alloc>:
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e04:	f000 f808 	bl	8008e18 <xPortRaisePrivilege>
 8008e08:	6078      	str	r0, [r7, #4]
	vPortResetPrivilege( xRunningPrivileged );
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 ff90 	bl	8009d30 <vPortResetPrivilege>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <xPortRaisePrivilege>:
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e1e:	f001 f817 	bl	8009e50 <xIsPrivileged>
 8008e22:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <xPortRaisePrivilege+0x14>
        portRAISE_PRIVILEGE();
 8008e2a:	df02      	svc	2
    return xRunningPrivileged;
 8008e2c:	687b      	ldr	r3, [r7, #4]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <__syscalls_flash_end__>:
	...

08008e38 <__do_global_dtors_aux>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4c05      	ldr	r4, [pc, #20]	; (8008e50 <__do_global_dtors_aux+0x18>)
 8008e3c:	7823      	ldrb	r3, [r4, #0]
 8008e3e:	b933      	cbnz	r3, 8008e4e <__do_global_dtors_aux+0x16>
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <__do_global_dtors_aux+0x1c>)
 8008e42:	b113      	cbz	r3, 8008e4a <__do_global_dtors_aux+0x12>
 8008e44:	4804      	ldr	r0, [pc, #16]	; (8008e58 <__do_global_dtors_aux+0x20>)
 8008e46:	f3af 8000 	nop.w
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	7023      	strb	r3, [r4, #0]
 8008e4e:	bd10      	pop	{r4, pc}
 8008e50:	24010000 	.word	0x24010000
 8008e54:	00000000 	.word	0x00000000
 8008e58:	0801748c 	.word	0x0801748c

08008e5c <frame_dummy>:
 8008e5c:	b508      	push	{r3, lr}
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <frame_dummy+0x10>)
 8008e60:	b11b      	cbz	r3, 8008e6a <frame_dummy+0xe>
 8008e62:	4903      	ldr	r1, [pc, #12]	; (8008e70 <frame_dummy+0x14>)
 8008e64:	4803      	ldr	r0, [pc, #12]	; (8008e74 <frame_dummy+0x18>)
 8008e66:	f3af 8000 	nop.w
 8008e6a:	bd08      	pop	{r3, pc}
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	24010004 	.word	0x24010004
 8008e74:	0801748c 	.word	0x0801748c
	...

08008e80 <memchr>:
 8008e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008e84:	2a10      	cmp	r2, #16
 8008e86:	db2b      	blt.n	8008ee0 <memchr+0x60>
 8008e88:	f010 0f07 	tst.w	r0, #7
 8008e8c:	d008      	beq.n	8008ea0 <memchr+0x20>
 8008e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e92:	3a01      	subs	r2, #1
 8008e94:	428b      	cmp	r3, r1
 8008e96:	d02d      	beq.n	8008ef4 <memchr+0x74>
 8008e98:	f010 0f07 	tst.w	r0, #7
 8008e9c:	b342      	cbz	r2, 8008ef0 <memchr+0x70>
 8008e9e:	d1f6      	bne.n	8008e8e <memchr+0xe>
 8008ea0:	b4f0      	push	{r4, r5, r6, r7}
 8008ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008eaa:	f022 0407 	bic.w	r4, r2, #7
 8008eae:	f07f 0700 	mvns.w	r7, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008eb8:	3c08      	subs	r4, #8
 8008eba:	ea85 0501 	eor.w	r5, r5, r1
 8008ebe:	ea86 0601 	eor.w	r6, r6, r1
 8008ec2:	fa85 f547 	uadd8	r5, r5, r7
 8008ec6:	faa3 f587 	sel	r5, r3, r7
 8008eca:	fa86 f647 	uadd8	r6, r6, r7
 8008ece:	faa5 f687 	sel	r6, r5, r7
 8008ed2:	b98e      	cbnz	r6, 8008ef8 <memchr+0x78>
 8008ed4:	d1ee      	bne.n	8008eb4 <memchr+0x34>
 8008ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8008ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008edc:	f002 0207 	and.w	r2, r2, #7
 8008ee0:	b132      	cbz	r2, 8008ef0 <memchr+0x70>
 8008ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	ea83 0301 	eor.w	r3, r3, r1
 8008eec:	b113      	cbz	r3, 8008ef4 <memchr+0x74>
 8008eee:	d1f8      	bne.n	8008ee2 <memchr+0x62>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4770      	bx	lr
 8008ef4:	3801      	subs	r0, #1
 8008ef6:	4770      	bx	lr
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	bf06      	itte	eq
 8008efc:	4635      	moveq	r5, r6
 8008efe:	3803      	subeq	r0, #3
 8008f00:	3807      	subne	r0, #7
 8008f02:	f015 0f01 	tst.w	r5, #1
 8008f06:	d107      	bne.n	8008f18 <memchr+0x98>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008f0e:	bf02      	ittt	eq
 8008f10:	3001      	addeq	r0, #1
 8008f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008f16:	3001      	addeq	r0, #1
 8008f18:	bcf0      	pop	{r4, r5, r6, r7}
 8008f1a:	3801      	subs	r0, #1
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <__aeabi_uldivmod>:
 8008f20:	b953      	cbnz	r3, 8008f38 <__aeabi_uldivmod+0x18>
 8008f22:	b94a      	cbnz	r2, 8008f38 <__aeabi_uldivmod+0x18>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	bf08      	it	eq
 8008f28:	2800      	cmpeq	r0, #0
 8008f2a:	bf1c      	itt	ne
 8008f2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008f30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008f34:	f000 b974 	b.w	8009220 <__aeabi_idiv0>
 8008f38:	f1ad 0c08 	sub.w	ip, sp, #8
 8008f3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008f40:	f000 f806 	bl	8008f50 <__udivmoddi4>
 8008f44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4c:	b004      	add	sp, #16
 8008f4e:	4770      	bx	lr

08008f50 <__udivmoddi4>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	9d08      	ldr	r5, [sp, #32]
 8008f56:	4604      	mov	r4, r0
 8008f58:	468e      	mov	lr, r1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d14d      	bne.n	8008ffa <__udivmoddi4+0xaa>
 8008f5e:	428a      	cmp	r2, r1
 8008f60:	4694      	mov	ip, r2
 8008f62:	d969      	bls.n	8009038 <__udivmoddi4+0xe8>
 8008f64:	fab2 f282 	clz	r2, r2
 8008f68:	b152      	cbz	r2, 8008f80 <__udivmoddi4+0x30>
 8008f6a:	fa01 f302 	lsl.w	r3, r1, r2
 8008f6e:	f1c2 0120 	rsb	r1, r2, #32
 8008f72:	fa20 f101 	lsr.w	r1, r0, r1
 8008f76:	fa0c fc02 	lsl.w	ip, ip, r2
 8008f7a:	ea41 0e03 	orr.w	lr, r1, r3
 8008f7e:	4094      	lsls	r4, r2
 8008f80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008f84:	0c21      	lsrs	r1, r4, #16
 8008f86:	fbbe f6f8 	udiv	r6, lr, r8
 8008f8a:	fa1f f78c 	uxth.w	r7, ip
 8008f8e:	fb08 e316 	mls	r3, r8, r6, lr
 8008f92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008f96:	fb06 f107 	mul.w	r1, r6, r7
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d90a      	bls.n	8008fb4 <__udivmoddi4+0x64>
 8008f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8008fa2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008fa6:	f080 811f 	bcs.w	80091e8 <__udivmoddi4+0x298>
 8008faa:	4299      	cmp	r1, r3
 8008fac:	f240 811c 	bls.w	80091e8 <__udivmoddi4+0x298>
 8008fb0:	3e02      	subs	r6, #2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	1a5b      	subs	r3, r3, r1
 8008fb6:	b2a4      	uxth	r4, r4
 8008fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008fbc:	fb08 3310 	mls	r3, r8, r0, r3
 8008fc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008fc4:	fb00 f707 	mul.w	r7, r0, r7
 8008fc8:	42a7      	cmp	r7, r4
 8008fca:	d90a      	bls.n	8008fe2 <__udivmoddi4+0x92>
 8008fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8008fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fd4:	f080 810a 	bcs.w	80091ec <__udivmoddi4+0x29c>
 8008fd8:	42a7      	cmp	r7, r4
 8008fda:	f240 8107 	bls.w	80091ec <__udivmoddi4+0x29c>
 8008fde:	4464      	add	r4, ip
 8008fe0:	3802      	subs	r0, #2
 8008fe2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008fe6:	1be4      	subs	r4, r4, r7
 8008fe8:	2600      	movs	r6, #0
 8008fea:	b11d      	cbz	r5, 8008ff4 <__udivmoddi4+0xa4>
 8008fec:	40d4      	lsrs	r4, r2
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e9c5 4300 	strd	r4, r3, [r5]
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	428b      	cmp	r3, r1
 8008ffc:	d909      	bls.n	8009012 <__udivmoddi4+0xc2>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	f000 80ef 	beq.w	80091e2 <__udivmoddi4+0x292>
 8009004:	2600      	movs	r6, #0
 8009006:	e9c5 0100 	strd	r0, r1, [r5]
 800900a:	4630      	mov	r0, r6
 800900c:	4631      	mov	r1, r6
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	fab3 f683 	clz	r6, r3
 8009016:	2e00      	cmp	r6, #0
 8009018:	d14a      	bne.n	80090b0 <__udivmoddi4+0x160>
 800901a:	428b      	cmp	r3, r1
 800901c:	d302      	bcc.n	8009024 <__udivmoddi4+0xd4>
 800901e:	4282      	cmp	r2, r0
 8009020:	f200 80f9 	bhi.w	8009216 <__udivmoddi4+0x2c6>
 8009024:	1a84      	subs	r4, r0, r2
 8009026:	eb61 0303 	sbc.w	r3, r1, r3
 800902a:	2001      	movs	r0, #1
 800902c:	469e      	mov	lr, r3
 800902e:	2d00      	cmp	r5, #0
 8009030:	d0e0      	beq.n	8008ff4 <__udivmoddi4+0xa4>
 8009032:	e9c5 4e00 	strd	r4, lr, [r5]
 8009036:	e7dd      	b.n	8008ff4 <__udivmoddi4+0xa4>
 8009038:	b902      	cbnz	r2, 800903c <__udivmoddi4+0xec>
 800903a:	deff      	udf	#255	; 0xff
 800903c:	fab2 f282 	clz	r2, r2
 8009040:	2a00      	cmp	r2, #0
 8009042:	f040 8092 	bne.w	800916a <__udivmoddi4+0x21a>
 8009046:	eba1 010c 	sub.w	r1, r1, ip
 800904a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800904e:	fa1f fe8c 	uxth.w	lr, ip
 8009052:	2601      	movs	r6, #1
 8009054:	0c20      	lsrs	r0, r4, #16
 8009056:	fbb1 f3f7 	udiv	r3, r1, r7
 800905a:	fb07 1113 	mls	r1, r7, r3, r1
 800905e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009062:	fb0e f003 	mul.w	r0, lr, r3
 8009066:	4288      	cmp	r0, r1
 8009068:	d908      	bls.n	800907c <__udivmoddi4+0x12c>
 800906a:	eb1c 0101 	adds.w	r1, ip, r1
 800906e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009072:	d202      	bcs.n	800907a <__udivmoddi4+0x12a>
 8009074:	4288      	cmp	r0, r1
 8009076:	f200 80cb 	bhi.w	8009210 <__udivmoddi4+0x2c0>
 800907a:	4643      	mov	r3, r8
 800907c:	1a09      	subs	r1, r1, r0
 800907e:	b2a4      	uxth	r4, r4
 8009080:	fbb1 f0f7 	udiv	r0, r1, r7
 8009084:	fb07 1110 	mls	r1, r7, r0, r1
 8009088:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800908c:	fb0e fe00 	mul.w	lr, lr, r0
 8009090:	45a6      	cmp	lr, r4
 8009092:	d908      	bls.n	80090a6 <__udivmoddi4+0x156>
 8009094:	eb1c 0404 	adds.w	r4, ip, r4
 8009098:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800909c:	d202      	bcs.n	80090a4 <__udivmoddi4+0x154>
 800909e:	45a6      	cmp	lr, r4
 80090a0:	f200 80bb 	bhi.w	800921a <__udivmoddi4+0x2ca>
 80090a4:	4608      	mov	r0, r1
 80090a6:	eba4 040e 	sub.w	r4, r4, lr
 80090aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80090ae:	e79c      	b.n	8008fea <__udivmoddi4+0x9a>
 80090b0:	f1c6 0720 	rsb	r7, r6, #32
 80090b4:	40b3      	lsls	r3, r6
 80090b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80090ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80090be:	fa20 f407 	lsr.w	r4, r0, r7
 80090c2:	fa01 f306 	lsl.w	r3, r1, r6
 80090c6:	431c      	orrs	r4, r3
 80090c8:	40f9      	lsrs	r1, r7
 80090ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80090ce:	fa00 f306 	lsl.w	r3, r0, r6
 80090d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80090d6:	0c20      	lsrs	r0, r4, #16
 80090d8:	fa1f fe8c 	uxth.w	lr, ip
 80090dc:	fb09 1118 	mls	r1, r9, r8, r1
 80090e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80090e4:	fb08 f00e 	mul.w	r0, r8, lr
 80090e8:	4288      	cmp	r0, r1
 80090ea:	fa02 f206 	lsl.w	r2, r2, r6
 80090ee:	d90b      	bls.n	8009108 <__udivmoddi4+0x1b8>
 80090f0:	eb1c 0101 	adds.w	r1, ip, r1
 80090f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80090f8:	f080 8088 	bcs.w	800920c <__udivmoddi4+0x2bc>
 80090fc:	4288      	cmp	r0, r1
 80090fe:	f240 8085 	bls.w	800920c <__udivmoddi4+0x2bc>
 8009102:	f1a8 0802 	sub.w	r8, r8, #2
 8009106:	4461      	add	r1, ip
 8009108:	1a09      	subs	r1, r1, r0
 800910a:	b2a4      	uxth	r4, r4
 800910c:	fbb1 f0f9 	udiv	r0, r1, r9
 8009110:	fb09 1110 	mls	r1, r9, r0, r1
 8009114:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8009118:	fb00 fe0e 	mul.w	lr, r0, lr
 800911c:	458e      	cmp	lr, r1
 800911e:	d908      	bls.n	8009132 <__udivmoddi4+0x1e2>
 8009120:	eb1c 0101 	adds.w	r1, ip, r1
 8009124:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8009128:	d26c      	bcs.n	8009204 <__udivmoddi4+0x2b4>
 800912a:	458e      	cmp	lr, r1
 800912c:	d96a      	bls.n	8009204 <__udivmoddi4+0x2b4>
 800912e:	3802      	subs	r0, #2
 8009130:	4461      	add	r1, ip
 8009132:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8009136:	fba0 9402 	umull	r9, r4, r0, r2
 800913a:	eba1 010e 	sub.w	r1, r1, lr
 800913e:	42a1      	cmp	r1, r4
 8009140:	46c8      	mov	r8, r9
 8009142:	46a6      	mov	lr, r4
 8009144:	d356      	bcc.n	80091f4 <__udivmoddi4+0x2a4>
 8009146:	d053      	beq.n	80091f0 <__udivmoddi4+0x2a0>
 8009148:	b15d      	cbz	r5, 8009162 <__udivmoddi4+0x212>
 800914a:	ebb3 0208 	subs.w	r2, r3, r8
 800914e:	eb61 010e 	sbc.w	r1, r1, lr
 8009152:	fa01 f707 	lsl.w	r7, r1, r7
 8009156:	fa22 f306 	lsr.w	r3, r2, r6
 800915a:	40f1      	lsrs	r1, r6
 800915c:	431f      	orrs	r7, r3
 800915e:	e9c5 7100 	strd	r7, r1, [r5]
 8009162:	2600      	movs	r6, #0
 8009164:	4631      	mov	r1, r6
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	f1c2 0320 	rsb	r3, r2, #32
 800916e:	40d8      	lsrs	r0, r3
 8009170:	fa0c fc02 	lsl.w	ip, ip, r2
 8009174:	fa21 f303 	lsr.w	r3, r1, r3
 8009178:	4091      	lsls	r1, r2
 800917a:	4301      	orrs	r1, r0
 800917c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009180:	fa1f fe8c 	uxth.w	lr, ip
 8009184:	fbb3 f0f7 	udiv	r0, r3, r7
 8009188:	fb07 3610 	mls	r6, r7, r0, r3
 800918c:	0c0b      	lsrs	r3, r1, #16
 800918e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009192:	fb00 f60e 	mul.w	r6, r0, lr
 8009196:	429e      	cmp	r6, r3
 8009198:	fa04 f402 	lsl.w	r4, r4, r2
 800919c:	d908      	bls.n	80091b0 <__udivmoddi4+0x260>
 800919e:	eb1c 0303 	adds.w	r3, ip, r3
 80091a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80091a6:	d22f      	bcs.n	8009208 <__udivmoddi4+0x2b8>
 80091a8:	429e      	cmp	r6, r3
 80091aa:	d92d      	bls.n	8009208 <__udivmoddi4+0x2b8>
 80091ac:	3802      	subs	r0, #2
 80091ae:	4463      	add	r3, ip
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	b289      	uxth	r1, r1
 80091b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80091b8:	fb07 3316 	mls	r3, r7, r6, r3
 80091bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80091c0:	fb06 f30e 	mul.w	r3, r6, lr
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d908      	bls.n	80091da <__udivmoddi4+0x28a>
 80091c8:	eb1c 0101 	adds.w	r1, ip, r1
 80091cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80091d0:	d216      	bcs.n	8009200 <__udivmoddi4+0x2b0>
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d914      	bls.n	8009200 <__udivmoddi4+0x2b0>
 80091d6:	3e02      	subs	r6, #2
 80091d8:	4461      	add	r1, ip
 80091da:	1ac9      	subs	r1, r1, r3
 80091dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80091e0:	e738      	b.n	8009054 <__udivmoddi4+0x104>
 80091e2:	462e      	mov	r6, r5
 80091e4:	4628      	mov	r0, r5
 80091e6:	e705      	b.n	8008ff4 <__udivmoddi4+0xa4>
 80091e8:	4606      	mov	r6, r0
 80091ea:	e6e3      	b.n	8008fb4 <__udivmoddi4+0x64>
 80091ec:	4618      	mov	r0, r3
 80091ee:	e6f8      	b.n	8008fe2 <__udivmoddi4+0x92>
 80091f0:	454b      	cmp	r3, r9
 80091f2:	d2a9      	bcs.n	8009148 <__udivmoddi4+0x1f8>
 80091f4:	ebb9 0802 	subs.w	r8, r9, r2
 80091f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80091fc:	3801      	subs	r0, #1
 80091fe:	e7a3      	b.n	8009148 <__udivmoddi4+0x1f8>
 8009200:	4646      	mov	r6, r8
 8009202:	e7ea      	b.n	80091da <__udivmoddi4+0x28a>
 8009204:	4620      	mov	r0, r4
 8009206:	e794      	b.n	8009132 <__udivmoddi4+0x1e2>
 8009208:	4640      	mov	r0, r8
 800920a:	e7d1      	b.n	80091b0 <__udivmoddi4+0x260>
 800920c:	46d0      	mov	r8, sl
 800920e:	e77b      	b.n	8009108 <__udivmoddi4+0x1b8>
 8009210:	3b02      	subs	r3, #2
 8009212:	4461      	add	r1, ip
 8009214:	e732      	b.n	800907c <__udivmoddi4+0x12c>
 8009216:	4630      	mov	r0, r6
 8009218:	e709      	b.n	800902e <__udivmoddi4+0xde>
 800921a:	4464      	add	r4, ip
 800921c:	3802      	subs	r0, #2
 800921e:	e742      	b.n	80090a6 <__udivmoddi4+0x156>

08009220 <__aeabi_idiv0>:
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <SytemCall_1_code>:


// helpers system calls prototypes must be implemented in user space

__weak void SytemCall_1_code()
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0

}
 8009228:	bf00      	nop
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <SytemCall_2_code>:

__weak void SytemCall_2_code()
{
 8009232:	b480      	push	{r7}
 8009234:	af00      	add	r7, sp, #0

}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <SytemCall_3_code>:

__weak  void SytemCall_3_code()
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0

}
 8009244:	bf00      	nop
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <SytemCall_4_code>:


__weak  void SytemCall_4_code(void *val)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]

}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <SytemCall_5_code>:

__weak  void SytemCall_5_code(void *val)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]

}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <RoundUpTo>:


#if McuASAN_CONFIG_ASAN


static inline uptr RoundUpTo(uptr size, uptr boundary) {
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  return (size + boundary - 1) & ~(boundary - 1);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	4413      	add	r3, r2
 8009286:	1e5a      	subs	r2, r3, #1
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	425b      	negs	r3, r3
 800928c:	4013      	ands	r3, r2
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <RoundDownTo>:


static inline uptr RoundDownTo(uptr x, uptr boundary) {
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  return x & ~(boundary - 1);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	425a      	negs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <IsAligned>:

static inline bool IsAligned(uptr a, uptr alignment) {
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  return (a & (alignment - 1)) == 0;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	1e5a      	subs	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4013      	ands	r3, r2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf0c      	ite	eq
 80092ce:	2301      	moveq	r3, #1
 80092d0:	2300      	movne	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <Log2>:

static inline bool IsPowerOfTwo(uptr x) {
  return (x & (x - 1)) == 0;
}

static inline uptr Log2(uptr x) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  //CHECK(IsPowerOfTwo(x));
  //return LeastSignificantSetBitIndex(x);
  return (uptr) ffs(x);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f00d f80a 	bl	8016304 <ffs>
 80092f0:	4603      	mov	r3, r0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <__asan_ReportGenericError>:

/* hooks if using -fsanitize=address */
/* -fasan-shadow-offset=number */
/* -fsanitize=kernel-address */
static void __asan_ReportGenericError(void)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	af00      	add	r7, sp, #0
#if 1
  //printf("ASAN generic failure\n");

#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 80092fe:	2004      	movs	r0, #4
 8009300:	f000 fcec 	bl	8009cdc <FreeRTOSReportFailure>

#else
  __asm volatile("bkpt #0"); /* stop application */
  for(;;){}
#endif
}
 8009304:	bf00      	nop
 8009306:	bd80      	pop	{r7, pc}

08009308 <__asan_report_store1>:

/* below are the required callbacks needed by ASAN */
void __asan_report_store1(void *address)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009310:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 8009312:	f7ff fff2 	bl	80092fa <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 8009316:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <__asan_report_store4>:
	__asm volatile("push {r0-r3}");
    __asan_ReportGenericError();
    __asm volatile("pop  {r0-r3}");
}
void __asan_report_store4(void *address)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 8009328:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 800932a:	f7ff ffe6 	bl	80092fa <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 800932e:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <__asan_report_load1>:
	__asm volatile("push {r0-r3}");
	__asan_ReportGenericError();
	__asm volatile("pop  {r0-r3}");
}
void __asan_report_load1(void *address)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
		// when the original code uses registers r0 to r3 as scratchpad.
	    // ASAN callbacks are inserted without taking care of current registers values,
	    // therefore, after returning from the callback the firmware may crash
	    // since the values on r0 and r3 may be different.
	    // Adding push and pop wrappers mitigate this issue saving the scratchpad values
	    __asm volatile("push {r0-r3}");
 8009340:	b40f      	push	{r0, r1, r2, r3}
		__asan_ReportGenericError();
 8009342:	f7ff ffda 	bl	80092fa <__asan_ReportGenericError>
		__asm volatile("pop  {r0-r3}");
 8009346:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <__asan_report_load2>:


void __asan_report_load2(void *address) {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009358:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 800935a:	f7ff ffce 	bl	80092fa <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 800935e:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <__asan_report_load4>:
void __asan_report_load4(void *address) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009370:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 8009372:	f7ff ffc2 	bl	80092fa <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 8009376:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <NYI>:

}
#endif


static void NYI(void) {
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  __asm volatile("bkpt #0"); /* stop application */
 8009384:	be00      	bkpt	0x0000
  for(;;){}
 8009386:	e7fe      	b.n	8009386 <NYI+0x6>

08009388 <__asan_init>:
}

void __asan_init(void) {
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0

	   if(!asan_inited)
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <__asan_init+0x30>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f083 0301 	eor.w	r3, r3, #1
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <__asan_init+0x2c>
	   {
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 800939a:	4b08      	ldr	r3, [pc, #32]	; (80093bc <__asan_init+0x34>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 80093a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80093a4:	2100      	movs	r1, #0
 80093a6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80093aa:	f00d f8f1 	bl	8016590 <memset>
				   0,
				   McuASAN_CONFIG_APP_MEM_SIZE>>3 );
		   asan_inited = true;
 80093ae:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <__asan_init+0x30>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	701a      	strb	r2, [r3, #0]

	   }

}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2401001c 	.word	0x2401001c
 80093bc:	24037400 	.word	0x24037400

080093c0 <__asan_stack_malloc_0>:

void __asan_stack_malloc_0(size_t size, void *addr) { NYI();}
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	f7ff ffd9 	bl	8009380 <NYI>
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <MEM_TO_SHADOW>:
void __asan_stack_free_4(uptr ptr, uptr size){ NYI();};
void __asan_stack_free_5(uptr ptr, uptr size){ NYI();};



uptr MEM_TO_SHADOW(uptr address) {
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	08db      	lsrs	r3, r3, #3
 80093e2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <FastPoisonShadow>:

void FastPoisonShadow(uptr aligned_beg, uptr aligned_size, uint8_t value)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b08a      	sub	sp, #40	; 0x28
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	4613      	mov	r3, r2
 80093fe:	71fb      	strb	r3, [r7, #7]

  uptr shadow_beg = MEM_TO_SHADOW(aligned_beg);
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff ffe8 	bl	80093d6 <MEM_TO_SHADOW>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24
  uptr shadow_end = MEM_TO_SHADOW(
      aligned_beg + aligned_size - SHADOW_GRANULARITY) + 1;
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4413      	add	r3, r2
  uptr shadow_end = MEM_TO_SHADOW(
 800940e:	3b08      	subs	r3, #8
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff ffe0 	bl	80093d6 <MEM_TO_SHADOW>
 8009416:	4603      	mov	r3, r0
 8009418:	3301      	adds	r3, #1
 800941a:	623b      	str	r3, [r7, #32]

    uptr page_size = 8; // we don't have paging so lets set to 8
 800941c:	2308      	movs	r3, #8
 800941e:	61fb      	str	r3, [r7, #28]
    uptr page_beg = RoundUpTo(shadow_beg, page_size);
 8009420:	69f9      	ldr	r1, [r7, #28]
 8009422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009424:	f7ff ff27 	bl	8009276 <RoundUpTo>
 8009428:	61b8      	str	r0, [r7, #24]
    uptr page_end = RoundDownTo(shadow_end, page_size);
 800942a:	69f9      	ldr	r1, [r7, #28]
 800942c:	6a38      	ldr	r0, [r7, #32]
 800942e:	f7ff ff34 	bl	800929a <RoundDownTo>
 8009432:	6178      	str	r0, [r7, #20]

    if (page_beg >= page_end) {
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	429a      	cmp	r2, r3
 800943a:	d308      	bcc.n	800944e <FastPoisonShadow+0x5c>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 800943c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800943e:	79f9      	ldrb	r1, [r7, #7]
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	461a      	mov	r2, r3
 8009448:	f00d f8a2 	bl	8016590 <memset>
        memset((void *)page_end, value, shadow_end - page_end);
      }
      //ReserveShadowMemoryRange(page_beg, page_end - 1, nullptr);
    }

}
 800944c:	e017      	b.n	800947e <FastPoisonShadow+0x8c>
      if (page_beg != shadow_beg) {
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	429a      	cmp	r2, r3
 8009454:	d007      	beq.n	8009466 <FastPoisonShadow+0x74>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009458:	79f9      	ldrb	r1, [r7, #7]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	461a      	mov	r2, r3
 8009462:	f00d f895 	bl	8016590 <memset>
      if (page_end != shadow_end) {
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	429a      	cmp	r2, r3
 800946c:	d007      	beq.n	800947e <FastPoisonShadow+0x8c>
        memset((void *)page_end, value, shadow_end - page_end);
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	79f9      	ldrb	r1, [r7, #7]
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	461a      	mov	r2, r3
 800947a:	f00d f889 	bl	8016590 <memset>
}
 800947e:	bf00      	nop
 8009480:	3728      	adds	r7, #40	; 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <FastPoisonShadowPartialRightRedzone>:


void FastPoisonShadowPartialRightRedzone(
    uptr aligned_addr, uptr size, uptr redzone_size, uint8_t value) {
 8009486:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	70fb      	strb	r3, [r7, #3]
  //DCHECK(CanPoisonMemory());
  bool poison_partial = McuASAN_FLAG_POISON_PARTIAL;
 8009496:	2301      	movs	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
  uint8_t *shadow = (uint8_t*)MEM_TO_SHADOW(aligned_addr);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff ff9b 	bl	80093d6 <MEM_TO_SHADOW>
 80094a0:	4603      	mov	r3, r0
 80094a2:	61fb      	str	r3, [r7, #28]
  for (uptr i = 0; i < redzone_size; i += SHADOW_GRANULARITY, shadow++) {
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	e02e      	b.n	8009508 <FastPoisonShadowPartialRightRedzone+0x82>
    if (i + SHADOW_GRANULARITY <= size) {
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2200      	movs	r2, #0
 80094ae:	4698      	mov	r8, r3
 80094b0:	4691      	mov	r9, r2
 80094b2:	f118 0408 	adds.w	r4, r8, #8
 80094b6:	f149 0500 	adc.w	r5, r9, #0
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	469a      	mov	sl, r3
 80094c0:	4693      	mov	fp, r2
 80094c2:	45a2      	cmp	sl, r4
 80094c4:	eb7b 0305 	sbcs.w	r3, fp, r5
 80094c8:	d303      	bcc.n	80094d2 <FastPoisonShadowPartialRightRedzone+0x4c>
      *shadow = 0;  // fully addressable
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
 80094d0:	e014      	b.n	80094fc <FastPoisonShadowPartialRightRedzone+0x76>
    } else if (i >= size) {
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d303      	bcc.n	80094e2 <FastPoisonShadowPartialRightRedzone+0x5c>
      *shadow = (SHADOW_GRANULARITY == 128) ? 0xff : value;  // unaddressable
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e00c      	b.n	80094fc <FastPoisonShadowPartialRightRedzone+0x76>
    } else {
      // first size-i bytes are addressable
      *shadow = poison_partial ?(uint8_t)(size - i) : 0;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d006      	beq.n	80094f6 <FastPoisonShadowPartialRightRedzone+0x70>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	e000      	b.n	80094f8 <FastPoisonShadowPartialRightRedzone+0x72>
 80094f6:	2200      	movs	r2, #0
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	701a      	strb	r2, [r3, #0]
  for (uptr i = 0; i < redzone_size; i += SHADOW_GRANULARITY, shadow++) {
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	3308      	adds	r3, #8
 8009500:	61bb      	str	r3, [r7, #24]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	3301      	adds	r3, #1
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d3cc      	bcc.n	80094aa <FastPoisonShadowPartialRightRedzone+0x24>
    }
  }
}
 8009510:	bf00      	nop
 8009512:	bf00      	nop
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800951c <PoisonRedZones>:

void PoisonRedZones(global_t g)
{
 800951c:	b084      	sub	sp, #16
 800951e:	b590      	push	{r4, r7, lr}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	f107 0418 	add.w	r4, r7, #24
 8009528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

uptr aligned_size = RoundUpTo(g.size, SHADOW_GRANULARITY);
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	2108      	movs	r1, #8
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fea0 	bl	8009276 <RoundUpTo>
 8009536:	6078      	str	r0, [r7, #4]


  FastPoisonShadow(g.beg + aligned_size, g.size_with_redzone - aligned_size,
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	18d0      	adds	r0, r2, r3
 800953e:	6a3a      	ldr	r2, [r7, #32]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	22f9      	movs	r2, #249	; 0xf9
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	4619      	mov	r1, r3
 800954a:	f7ff ff52 	bl	80093f2 <FastPoisonShadow>
                   kAsanGlobalRedzoneMagic);
  if (g.size != aligned_size) {
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d00f      	beq.n	8009576 <PoisonRedZones+0x5a>
    FastPoisonShadowPartialRightRedzone(
        g.beg + RoundDownTo(g.size, SHADOW_GRANULARITY),
 8009556:	69bc      	ldr	r4, [r7, #24]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2108      	movs	r1, #8
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fe9c 	bl	800929a <RoundDownTo>
 8009562:	4603      	mov	r3, r0
    FastPoisonShadowPartialRightRedzone(
 8009564:	18e0      	adds	r0, r4, r3
        g.size % SHADOW_GRANULARITY,
 8009566:	69fb      	ldr	r3, [r7, #28]
    FastPoisonShadowPartialRightRedzone(
 8009568:	f003 0107 	and.w	r1, r3, #7
 800956c:	23f9      	movs	r3, #249	; 0xf9
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2208      	movs	r2, #8
 8009572:	f7ff ff88 	bl	8009486 <FastPoisonShadowPartialRightRedzone>
   }

*/


}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009580:	b004      	add	sp, #16
 8009582:	4770      	bx	lr

08009584 <__asan_version_mismatch_check_v8>:

void __asan_version_mismatch_check_v8(void) {  }
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <__asan_unregister_globals>:

void __asan_unregister_globals(void) {  }
 8009592:	b480      	push	{r7}
 8009594:	af00      	add	r7, sp, #0
 8009596:	bf00      	nop
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <__asan_register_globals>:

void __asan_register_globals( global_t *globals, uptr n)
{
 80095a0:	b5b0      	push	{r4, r5, r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af04      	add	r7, sp, #16
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
   int i;
  // global_t *aux;

   for(i=0; i<n ; i++)
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	e020      	b.n	80095f2 <__asan_register_globals+0x52>
   {

	   // Check if the global is a valid address in RAM
	   if( (globals[i].beg >= McuASAN_CONFIG_APP_MEM_START) &&
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	015b      	lsls	r3, r3, #5
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	4413      	add	r3, r2
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80095be:	d315      	bcc.n	80095ec <__asan_register_globals+0x4c>
		   (globals[i].beg <  (McuASAN_CONFIG_APP_MEM_START + McuASAN_CONFIG_APP_MEM_SIZE ) ))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	015b      	lsls	r3, r3, #5
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	4413      	add	r3, r2
 80095c8:	681b      	ldr	r3, [r3, #0]
	   if( (globals[i].beg >= McuASAN_CONFIG_APP_MEM_START) &&
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <__asan_register_globals+0x64>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d80d      	bhi.n	80095ec <__asan_register_globals+0x4c>
	   {

		   //aux=&globals[i];
		   PoisonRedZones(globals[i]);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	015b      	lsls	r3, r3, #5
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	18d4      	adds	r4, r2, r3
 80095d8:	466d      	mov	r5, sp
 80095da:	f104 0310 	add.w	r3, r4, #16
 80095de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80095e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80095e8:	f7ff ff98 	bl	800951c <PoisonRedZones>
   for(i=0; i<n ; i++)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3301      	adds	r3, #1
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d8da      	bhi.n	80095b0 <__asan_register_globals+0x10>
	   }

   }

}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bdb0      	pop	{r4, r5, r7, pc}
 8009604:	2407ffff 	.word	0x2407ffff

08009608 <RZSize2Log>:
}




static uint32_t RZSize2Log(uint32_t rz_size) {
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t res = Log2(rz_size) - 4;
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fe65 	bl	80092e0 <Log2>
 8009616:	4603      	mov	r3, r0
 8009618:	3b04      	subs	r3, #4
 800961a:	60fb      	str	r3, [r7, #12]
  return res;
 800961c:	68fb      	ldr	r3, [r7, #12]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <ComputeRZLog>:

uptr ComputeRZLog(uptr user_requested_size) {
 8009626:	b580      	push	{r7, lr}
 8009628:	b08a      	sub	sp, #40	; 0x28
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
    uint32_t rz_log =
    user_requested_size <= 64        - 16   ? 0 :
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b30      	cmp	r3, #48	; 0x30
 8009632:	d924      	bls.n	800967e <ComputeRZLog+0x58>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b60      	cmp	r3, #96	; 0x60
 8009638:	d91f      	bls.n	800967a <ComputeRZLog+0x54>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8009640:	d919      	bls.n	8009676 <ComputeRZLog+0x50>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8009648:	d913      	bls.n	8009672 <ComputeRZLog+0x4c>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8009650:	d90d      	bls.n	800966e <ComputeRZLog+0x48>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8009658:	d907      	bls.n	800966a <ComputeRZLog+0x44>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
 8009660:	d801      	bhi.n	8009666 <ComputeRZLog+0x40>
 8009662:	2306      	movs	r3, #6
 8009664:	e00c      	b.n	8009680 <ComputeRZLog+0x5a>
 8009666:	2307      	movs	r3, #7
 8009668:	e00a      	b.n	8009680 <ComputeRZLog+0x5a>
 800966a:	2305      	movs	r3, #5
 800966c:	e008      	b.n	8009680 <ComputeRZLog+0x5a>
 800966e:	2304      	movs	r3, #4
 8009670:	e006      	b.n	8009680 <ComputeRZLog+0x5a>
 8009672:	2303      	movs	r3, #3
 8009674:	e004      	b.n	8009680 <ComputeRZLog+0x5a>
 8009676:	2302      	movs	r3, #2
 8009678:	e002      	b.n	8009680 <ComputeRZLog+0x5a>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <ComputeRZLog+0x5a>
 800967e:	2300      	movs	r3, #0
    uint32_t rz_log =
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
    user_requested_size <= 512       - 64   ? 2 :
    user_requested_size <= 4096      - 128  ? 3 :
    user_requested_size <= (1 << 14) - 256  ? 4 :
    user_requested_size <= (1 << 15) - 512  ? 5 :
    user_requested_size <= (1 << 16) - 1024 ? 6 : 7;
    uint32_t min_rz =  McuASAN_FLAG_REDZONE;  //atomic_load(&min_redzone, memory_order_acquire);
 8009682:	2310      	movs	r3, #16
 8009684:	623b      	str	r3, [r7, #32]
    uint32_t max_rz =  McuASAN_FLAG_MAX_REDZONE;  //atomic_load(&max_redzone, memory_order_acquire);
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	61fb      	str	r3, [r7, #28]
  return Min(Max(rz_log, RZSize2Log(min_rz)), RZSize2Log(max_rz));
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	61bb      	str	r3, [r7, #24]
 800968e:	6a38      	ldr	r0, [r7, #32]
 8009690:	f7ff ffba 	bl	8009608 <RZSize2Log>
 8009694:	6178      	str	r0, [r7, #20]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	4293      	cmp	r3, r2
 800969c:	bf38      	it	cc
 800969e:	4613      	movcc	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	69f8      	ldr	r0, [r7, #28]
 80096a4:	f7ff ffb0 	bl	8009608 <RZSize2Log>
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4293      	cmp	r3, r2
 80096b0:	bf28      	it	cs
 80096b2:	4613      	movcs	r3, r2
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3728      	adds	r7, #40	; 0x28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <PoisonShadow>:





void PoisonShadow(uptr addr, uptr size, uint8_t value) {
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  //CHECK(AddrIsAlignedByGranularity(addr));
  //CHECK(AddrIsInMem(addr));
  //CHECK(AddrIsAlignedByGranularity(addr + size));
  //CHECK(AddrIsInMem(addr + size - SHADOW_GRANULARITY));
  //CHECK(REAL(memset));
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80096d0:	d30a      	bcc.n	80096e8 <PoisonShadow+0x2c>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4a08      	ldr	r2, [pc, #32]	; (80096f8 <PoisonShadow+0x3c>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d806      	bhi.n	80096e8 <PoisonShadow+0x2c>
			   (addr <  (McuASAN_CONFIG_APP_MEM_START + McuASAN_CONFIG_APP_MEM_SIZE ) ))
   {
	   FastPoisonShadow(addr, size, value);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	461a      	mov	r2, r3
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7ff fe86 	bl	80093f2 <FastPoisonShadow>
 80096e6:	e003      	b.n	80096f0 <PoisonShadow+0x34>
   }
   else
   {
	   //printf("\n AddressSanitizer failed to poison memory, it is not allocated in RAM");
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 80096e8:	2007      	movs	r0, #7
 80096ea:	f000 faf7 	bl	8009cdc <FreeRTOSReportFailure>
#endif

   }

}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	2407ffff 	.word	0x2407ffff

080096fc <ComputeUserRequestedAlignmentLog>:

static uptr ComputeUserRequestedAlignmentLog(uptr user_requested_alignment) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
    if (user_requested_alignment < 8)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b07      	cmp	r3, #7
 8009708:	d801      	bhi.n	800970e <ComputeUserRequestedAlignmentLog+0x12>
      return 0;
 800970a:	2300      	movs	r3, #0
 800970c:	e00b      	b.n	8009726 <ComputeUserRequestedAlignmentLog+0x2a>
    if (user_requested_alignment > 512)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009714:	d902      	bls.n	800971c <ComputeUserRequestedAlignmentLog+0x20>
      user_requested_alignment = 512;
 8009716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971a:	607b      	str	r3, [r7, #4]
    return Log2(user_requested_alignment) - 2;
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fddf 	bl	80092e0 <Log2>
 8009722:	4603      	mov	r3, r0
 8009724:	3b02      	subs	r3, #2
  }
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <RZLog2Size>:


static uint32_t RZLog2Size(uint32_t rz_log) {
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  //CHECK_LT(rz_log, 8);
  return 16 << rz_log;
 8009736:	2210      	movs	r2, #16
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800973e:	4618      	mov	r0, r3
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
	...

0800974c <addAlloc>:
#endif



 static void addAlloc(uint32_t *ptr)
 {
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <addAlloc+0x58>)
 8009756:	60bb      	str	r3, [r7, #8]

	int i=0;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d019      	beq.n	8009796 <addAlloc+0x4a>
  	{
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8009762:	e015      	b.n	8009790 <addAlloc+0x44>
  	   {
  		    if(pAFLfuzzer->allocs[i]==0)
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800976c:	440b      	add	r3, r1
 800976e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <addAlloc+0x3e>
  		    {
  		    	pAFLfuzzer->allocs[i] = ptr;
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	68f9      	ldr	r1, [r7, #12]
 800977a:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800977e:	440b      	add	r3, r1
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 8009786:	bf00      	nop
  		    }
  		    i++;
  	    }
  	 }
 }
 8009788:	e005      	b.n	8009796 <addAlloc+0x4a>
  		    i++;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b09      	cmp	r3, #9
 8009794:	dde6      	ble.n	8009764 <addAlloc+0x18>
 }
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	24020000 	.word	0x24020000

080097a8 <delAlloc>:

 static void delAlloc(uint32_t *ptr)
 {
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 80097b0:	4b13      	ldr	r3, [pc, #76]	; (8009800 <delAlloc+0x58>)
 80097b2:	60bb      	str	r3, [r7, #8]
	int i=0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01a      	beq.n	80097f4 <delAlloc+0x4c>
  	{
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 80097be:	e016      	b.n	80097ee <delAlloc+0x46>
  	    {
  		    if(pAFLfuzzer->allocs[i]==ptr)
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	f641 230c 	movw	r3, #6668	; 0x1a0c
 80097c8:	440b      	add	r3, r1
 80097ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d109      	bne.n	80097e8 <delAlloc+0x40>
  		    {
  		    	pAFLfuzzer->allocs[i]= NULL;
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f641 230c 	movw	r3, #6668	; 0x1a0c
 80097dc:	440b      	add	r3, r1
 80097de:	2100      	movs	r1, #0
 80097e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 80097e4:	bf00      	nop
  		    }
  		    i++;
  	    }
  	}
 }
 80097e6:	e005      	b.n	80097f4 <delAlloc+0x4c>
  		    i++;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	dde5      	ble.n	80097c0 <delAlloc+0x18>
 }
 80097f4:	bf00      	nop
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	24020000 	.word	0x24020000

08009804 <Allocate>:
  	}
  }
*/

void *Allocate(uptr size, uptr alignment,
                 AllocType alloc_type, bool can_fill) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b09c      	sub	sp, #112	; 0x70
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4611      	mov	r1, r2
 8009810:	461a      	mov	r2, r3
 8009812:	460b      	mov	r3, r1
 8009814:	71fb      	strb	r3, [r7, #7]
 8009816:	4613      	mov	r3, r2
 8009818:	71bb      	strb	r3, [r7, #6]
        return nullptr;
      ReportRssLimitExceeded(stack);
    }*/

    //CHECK(stack);
    const uptr min_alignment = SHADOW_GRANULARITY;
 800981a:	2308      	movs	r3, #8
 800981c:	667b      	str	r3, [r7, #100]	; 0x64

    const uptr user_requested_alignment_log =
        ComputeUserRequestedAlignmentLog(alignment);
 800981e:	68b8      	ldr	r0, [r7, #8]
 8009820:	f7ff ff6c 	bl	80096fc <ComputeUserRequestedAlignmentLog>
 8009824:	6638      	str	r0, [r7, #96]	; 0x60


    if (alignment < min_alignment)
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800982a:	429a      	cmp	r2, r3
 800982c:	d201      	bcs.n	8009832 <Allocate+0x2e>
      alignment = min_alignment;
 800982e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009830:	60bb      	str	r3, [r7, #8]
    if (size == 0) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <Allocate+0x38>
      // some programs/tests depend on this behavior and assume that malloc
      // would not return NULL even for zero-size allocations. Moreover, it
      // looks like operator new should never return NULL, and results of
      // consecutive "new" calls must be different even if the allocated size
      // is zero.
      size = 1;
 8009838:	2301      	movs	r3, #1
 800983a:	60fb      	str	r3, [r7, #12]
    }
    //CHECK(IsPowerOfTwo(alignment));
    uptr rz_log = ComputeRZLog(size);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fef2 	bl	8009626 <ComputeRZLog>
 8009842:	65f8      	str	r0, [r7, #92]	; 0x5c
    uptr rz_size = RZLog2Size(rz_log);
 8009844:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009846:	f7ff ff72 	bl	800972e <RZLog2Size>
 800984a:	65b8      	str	r0, [r7, #88]	; 0x58
    uptr rounded_size = RoundUpTo(Max(size, kChunkHeader2Size), alignment);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	657b      	str	r3, [r7, #84]	; 0x54
 8009850:	2304      	movs	r3, #4
 8009852:	653b      	str	r3, [r7, #80]	; 0x50
 8009854:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009858:	4293      	cmp	r3, r2
 800985a:	bf38      	it	cc
 800985c:	4613      	movcc	r3, r2
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fd08 	bl	8009276 <RoundUpTo>
 8009866:	64f8      	str	r0, [r7, #76]	; 0x4c
    uptr needed_size = rounded_size + rz_size;
 8009868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800986a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800986c:	4413      	add	r3, r2
 800986e:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (alignment > min_alignment)
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009874:	429a      	cmp	r2, r3
 8009876:	d903      	bls.n	8009880 <Allocate+0x7c>
      needed_size += alignment;
 8009878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	66fb      	str	r3, [r7, #108]	; 0x6c
    // the primary allocator is only available with Fuchsia and in Adroid 11
    // since we don't have it, we will use standard libc allocator
    bool using_primary_allocator = false;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    // If we are allocating from the secondary allocator, there will be no
    // automatic right redzone, so add the right redzone manually.

    //if (!PrimaryAllocator::CanAllocate(needed_size, alignment)) {
    needed_size += rz_size; // manually adding the right red zone
 8009886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800988a:	4413      	add	r3, r2
 800988c:	66fb      	str	r3, [r7, #108]	; 0x6c
    // }


    //CHECK(IsAligned(needed_size, min_alignment));

    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 800988e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4293      	cmp	r3, r2
 8009896:	d809      	bhi.n	80098ac <Allocate+0xa8>
 8009898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800989c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989e:	4293      	cmp	r3, r2
 80098a0:	d804      	bhi.n	80098ac <Allocate+0xa8>
        size > max_user_defined_malloc_size) {
 80098a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d901      	bls.n	80098b0 <Allocate+0xac>
        //printf("AddressSanitizer failed to allocate %d bytes\n", (size_t)size);

        return NULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e0c6      	b.n	8009a3e <Allocate+0x23a>
     }

    //AsanThread *t = GetCurrentThread();
    void *allocated;
    allocated = malloc(needed_size);
 80098b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098b2:	f00c fe4f 	bl	8016554 <malloc>
 80098b6:	4603      	mov	r3, r0
 80098b8:	647b      	str	r3, [r7, #68]	; 0x44
    addAlloc(allocated);
 80098ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80098bc:	f7ff ff46 	bl	800974c <addAlloc>

    if(!allocated)
 80098c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <Allocate+0xc6>
    {
    	//printf("AddressSanitizer malloc run out of memory\n");
        return NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e0b9      	b.n	8009a3e <Allocate+0x23a>
      // Heap poisoning is enabled, but the allocator provides an unpoisoned
      // chunk. This is possible if CanPoisonMemory() was false for some
      // time, for example, due to flags()->start_disabled.
      // Anyway, poison the block before using it for anything else.
      //uptr allocated_size = allocator.GetActuallyAllocatedSize(allocated);
      uptr allocated_size = needed_size;
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	643b      	str	r3, [r7, #64]	; 0x40
      PoisonShadow((uptr)allocated, allocated_size, kAsanHeapLeftRedzoneMagic);
 80098ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d0:	22fa      	movs	r2, #250	; 0xfa
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fef0 	bl	80096bc <PoisonShadow>
    //}

    uptr alloc_beg = (uint32_t)(allocated);
 80098dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
    //uptr alloc_end = alloc_beg + needed_size;
    uptr beg_plus_redzone = alloc_beg + rz_size;
 80098e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098e4:	4413      	add	r3, r2
 80098e6:	63bb      	str	r3, [r7, #56]	; 0x38
    uptr user_beg = beg_plus_redzone;
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	66bb      	str	r3, [r7, #104]	; 0x68

    if (!IsAligned(user_beg, alignment))
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80098f0:	f7ff fce2 	bl	80092b8 <IsAligned>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f083 0301 	eor.w	r3, r3, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <Allocate+0x106>
      user_beg = RoundUpTo(user_beg, alignment);
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009904:	f7ff fcb7 	bl	8009276 <RoundUpTo>
 8009908:	66b8      	str	r0, [r7, #104]	; 0x68
    //uptr user_end = user_beg + size;
    //CHECK_LE(user_end, alloc_end);

    uptr chunk_beg = user_beg - kChunkHeaderSize;
 800990a:	2210      	movs	r2, #16
 800990c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 8009912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009914:	633b      	str	r3, [r7, #48]	; 0x30
    m->alloc_type = alloc_type;
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	b2d9      	uxtb	r1, r3
 800991e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009920:	79d3      	ldrb	r3, [r2, #7]
 8009922:	f361 0342 	bfi	r3, r1, #1, #2
 8009926:	71d3      	strb	r3, [r2, #7]
    m->rz_log = rz_log;
 8009928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	b2d9      	uxtb	r1, r3
 8009930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009932:	79d3      	ldrb	r3, [r2, #7]
 8009934:	f361 03c5 	bfi	r3, r1, #3, #3
 8009938:	71d3      	strb	r3, [r2, #7]
    uint32_t alloc_tid = 0; // we are not supporting threads
 800993a:	2300      	movs	r3, #0
 800993c:	62fb      	str	r3, [r7, #44]	; 0x2c
    m->alloc_tid = alloc_tid;
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	f361 231f 	bfi	r3, r1, #8, #24
 800994c:	6013      	str	r3, [r2, #0]
    //CHECK_EQ(alloc_tid, m->alloc_tid);  // Does alloc_tid fit into the bitfield?
    m->free_tid = kInvalidTid;
 800994e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009952:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009958:	6853      	ldr	r3, [r2, #4]
 800995a:	f361 0317 	bfi	r3, r1, #0, #24
 800995e:	6053      	str	r3, [r2, #4]
    m->from_memalign = user_beg != beg_plus_redzone;
 8009960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	429a      	cmp	r2, r3
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	b2d9      	uxtb	r1, r3
 800996e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009970:	79d3      	ldrb	r3, [r2, #7]
 8009972:	f361 0300 	bfi	r3, r1, #0, #1
 8009976:	71d3      	strb	r3, [r2, #7]
    if (alloc_beg != chunk_beg) {
 8009978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800997a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997c:	429a      	cmp	r2, r3
 800997e:	d007      	beq.n	8009990 <Allocate+0x18c>
      //CHECK_LE(alloc_beg+ 2 * sizeof(uptr), chunk_beg);
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	4a31      	ldr	r2, [pc, #196]	; (8009a48 <Allocate+0x244>)
 8009984:	601a      	str	r2, [r3, #0]
      ((uptr *)alloc_beg)[1] = chunk_beg;
 8009986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009988:	3304      	adds	r3, #4
 800998a:	461a      	mov	r2, r3
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	6013      	str	r3, [r2, #0]
    }
    if (using_primary_allocator) {
 8009990:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <Allocate+0x1a6>
      //CHECK(size);
      m->user_requested_size = size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800999e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a0:	6893      	ldr	r3, [r2, #8]
 80099a2:	f361 031c 	bfi	r3, r1, #0, #29
 80099a6:	6093      	str	r3, [r2, #8]
 80099a8:	e007      	b.n	80099ba <Allocate+0x1b6>
    }
    else {

     // we assume the behavior of the secondary allocator will be the same as pthe primary allocator
     //CHECK(!allocator.FromPrimary(allocated));
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b2:	6893      	ldr	r3, [r2, #8]
 80099b4:	f361 031c 	bfi	r3, r1, #0, #29
 80099b8:	6093      	str	r3, [r2, #8]
      //uptr *meta = reinterpret_cast<uptr *>(allocator.GetMetaData(allocated));
      //meta[0] = size;
      //meta[1] = chunk_beg;
    }
    m->user_requested_alignment_log = user_requested_alignment_log;
 80099ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099bc:	f003 0307 	and.w	r3, r3, #7
 80099c0:	b2d9      	uxtb	r1, r3
 80099c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c4:	7ad3      	ldrb	r3, [r2, #11]
 80099c6:	f361 1347 	bfi	r3, r1, #5, #3
 80099ca:	72d3      	strb	r3, [r2, #11]

    //m->alloc_context_id = StackDepotPut(*stack);

    uptr size_rounded_down_to_granularity =
        RoundDownTo(size, SHADOW_GRANULARITY);
 80099cc:	2108      	movs	r1, #8
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fc63 	bl	800929a <RoundDownTo>
 80099d4:	62b8      	str	r0, [r7, #40]	; 0x28
    // Unpoison the bulk of the memory region.
    if (size_rounded_down_to_granularity)
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <Allocate+0x1e2>
      PoisonShadow(user_beg, size_rounded_down_to_granularity, 0);
 80099dc:	2200      	movs	r2, #0
 80099de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80099e2:	f7ff fe6b 	bl	80096bc <PoisonShadow>
    // Deal with the end of the region if size is not aligned to granularity.
    if (size != size_rounded_down_to_granularity ) {
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d00e      	beq.n	8009a0c <Allocate+0x208>
      uint8_t *shadow =
          (uint8_t *)MEM_TO_SHADOW(user_beg + size_rounded_down_to_granularity);
 80099ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	4413      	add	r3, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff fcee 	bl	80093d6 <MEM_TO_SHADOW>
 80099fa:	4603      	mov	r3, r0
      uint8_t *shadow =
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	701a      	strb	r2, [r3, #0]
    else
      thread_stats.malloced_by_size[SizeClassMap::ClassID(needed_size)]++;

    */

    void *res = (void *)(user_beg);
 8009a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a0e:	623b      	str	r3, [r7, #32]
    if (can_fill && McuASAN_FLAG_MAX_MALLOC_FILL_SIZE) {
 8009a10:	79bb      	ldrb	r3, [r7, #6]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00f      	beq.n	8009a36 <Allocate+0x232>
      uptr fill_size = Min(size, McuASAN_FLAG_MAX_MALLOC_FILL_SIZE);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	bf28      	it	cs
 8009a28:	4613      	movcs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]
      memset(res, McuASAN_FLAG_MALLOC_FILL_BYTE, fill_size);
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	21be      	movs	r1, #190	; 0xbe
 8009a30:	6a38      	ldr	r0, [r7, #32]
 8009a32:	f00c fdad 	bl	8016590 <memset>
    }

    // Must be the last mutation of metadata in this function.
    //atomic_store((uint8_t *)m, CHUNK_ALLOCATED, memory_order_release);
    *(uint8_t *)m = CHUNK_ALLOCATED;
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2202      	movs	r2, #2
 8009a3a:	701a      	strb	r2, [r3, #0]
    //ASAN_MALLOC_HOOK(res, size); //no malloc hooks
    return res;
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
  }
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3770      	adds	r7, #112	; 0x70
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	cc6e96b9 	.word	0xcc6e96b9

08009a4c <ReportDoubleFree>:



void ReportDoubleFree(uptr addr) {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 8009a54:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error buffer double free address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_DOUBLE_FREE);
 8009a56:	2001      	movs	r0, #1
 8009a58:	f000 f940 	bl	8009cdc <FreeRTOSReportFailure>
#endif
 __asm volatile("pop  {r0-r3}");
 8009a5c:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <ReportFreeNotMalloced>:

void ReportFreeNotMalloced(uptr addr) {
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009a6e:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error invalid free  address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_INVALID_FREE);
 8009a70:	2003      	movs	r0, #3
 8009a72:	f000 f933 	bl	8009cdc <FreeRTOSReportFailure>
#endif
	__asm volatile("pop  {r0-r3}");
 8009a76:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <ReportInvalidFree>:


void ReportInvalidFree(void *ptr, uint8_t chunk_state) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
    if (chunk_state == CHUNK_QUARANTINE)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d104      	bne.n	8009a9c <ReportInvalidFree+0x1c>
      ReportDoubleFree((uptr)ptr);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff ffd9 	bl	8009a4c <ReportDoubleFree>
    else
      ReportFreeNotMalloced((uptr)ptr);
  }
 8009a9a:	e003      	b.n	8009aa4 <ReportInvalidFree+0x24>
      ReportFreeNotMalloced((uptr)ptr);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff ffe1 	bl	8009a66 <ReportFreeNotMalloced>
  }
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <AtomicallySetQuarantineFlagIfAllocated>:

bool AtomicallySetQuarantineFlagIfAllocated(AsanChunk *m, void *ptr) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
                                      memory_order_acquire)) {
    ReportInvalidFree(ptr, old_chunk_state, stack);
    // It's not safe to push a chunk in quarantine on invalid free.
    return false;
  }*/
  uint8_t *state = (uint8_t *)m;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]
  if(*state == CHUNK_ALLOCATED)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d104      	bne.n	8009acc <AtomicallySetQuarantineFlagIfAllocated+0x20>
  {
	  *state = CHUNK_QUARANTINE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	701a      	strb	r2, [r3, #0]
	  return true;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e006      	b.n	8009ada <AtomicallySetQuarantineFlagIfAllocated+0x2e>
  }
  else
  {
	  ReportInvalidFree(ptr, *state);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6838      	ldr	r0, [r7, #0]
 8009ad4:	f7ff ffd4 	bl	8009a80 <ReportInvalidFree>
	  return false;
 8009ad8:	2300      	movs	r3, #0
  }


  //CHECK_EQ(CHUNK_ALLOCATED, old_chunk_state);
  return true;
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <ReportAllocTypeMismatch>:


void ReportAllocTypeMismatch(uptr addr,
                             AllocType alloc_type,
                             AllocType dealloc_type) {
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
 8009aee:	4613      	mov	r3, r2
 8009af0:	70bb      	strb	r3, [r7, #2]
/*
  const char *s[] = {
		  "Malloc",
		  "New",
		  "New BR" };*/
  __asm volatile("push {r0-r3}");
 8009af2:	b40f      	push	{r0, r1, r2, r3}
  //printf("Error type mismatch alloc:%s, dealloc:%s \n", s[alloc_type], s[dealloc_type]);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_REALLOC_MISMATCH);
 8009af4:	2006      	movs	r0, #6
 8009af6:	f000 f8f1 	bl	8009cdc <FreeRTOSReportFailure>
#endif
  __asm volatile("pop  {r0-r3}");
 8009afa:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <Beg>:
	__asm volatile("pop  {r0-r3}");

}

uptr Beg(AsanChunk *m)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	return (uptr)(m) + kChunkHeaderSize;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2210      	movs	r2, #16
 8009b10:	4413      	add	r3, r2
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <AllocBeg>:

uptr AllocBeg(AsanChunk *m)
{
 8009b1e:	b590      	push	{r4, r7, lr}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]

	if (m->from_memalign)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	79db      	ldrb	r3, [r3, #7]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d000      	beq.n	8009b36 <AllocBeg+0x18>
	{
	     //return get_allocator().GetBlockBegin(reinterpret_cast<void *>(this));
		while(1); // this is a special case that we do not support since we do not control the allocator, the code should not reach this point
 8009b34:	e7fe      	b.n	8009b34 <AllocBeg+0x16>
				  // unless the allocation of malloc is unnaligned TODO check what happens during testing
	}
	return (Beg(m) - RZLog2Size(m->rz_log));
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff ffe4 	bl	8009b04 <Beg>
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	79db      	ldrb	r3, [r3, #7]
 8009b42:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff fdf0 	bl	800972e <RZLog2Size>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	1ae3      	subs	r3, r4, r3
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}

08009b5a <Recycle>:



void Recycle(AsanChunk *m) {
 8009b5a:	b590      	push	{r4, r7, lr}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  //CHECK_EQ(m->chunk_state, CHUNK_QUARANTINE);
  //atomic_store((atomic_uint8_t*)m, CHUNK_AVAILABLE, memory_order_relaxed);

  *(uint8_t*)m = CHUNK_AVAILABLE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	701a      	strb	r2, [r3, #0]

  //CHECK_NE(m->alloc_tid, kInvalidTid);
  //CHECK_NE(m->free_tid, kInvalidTid);

  PoisonShadow(Beg(m),
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ffcb 	bl	8009b04 <Beg>
 8009b6e:	4604      	mov	r4, r0
               RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f3c3 031c 	ubfx	r3, r3, #0, #29
  PoisonShadow(Beg(m),
 8009b78:	2108      	movs	r1, #8
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fb7b 	bl	8009276 <RoundUpTo>
 8009b80:	4601      	mov	r1, r0
 8009b82:	23fa      	movs	r3, #250	; 0xfa
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7ff fd97 	bl	80096bc <PoisonShadow>
               kAsanHeapLeftRedzoneMagic);

  void *p = (void *)(AllocBeg(m));
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff ffc5 	bl	8009b1e <AllocBeg>
 8009b94:	4603      	mov	r3, r0
 8009b96:	60fb      	str	r3, [r7, #12]

  if (p != m) {
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d004      	beq.n	8009baa <Recycle+0x50>
    uptr *alloc_magic = (uptr *)(p);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	60bb      	str	r3, [r7, #8]
    //CHECK_EQ(alloc_magic[0], kAllocBegMagic);
    // Clear the magic value, as allocator internals may overwrite the
    // contents of deallocated chunk, confusing GetAsanChunk lookup.
    alloc_magic[0] = 0;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
  // Statistics.
  //AsanStats &thread_stats = GetCurrentThreadStats();
  //thread_stats.real_frees++;
  //thread_stats.really_freed += m->UsedSize();

  delAlloc(p);
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7ff fdfc 	bl	80097a8 <delAlloc>
  free(p);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f00c fcd7 	bl	8016564 <free>


}
 8009bb6:	bf00      	nop
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd90      	pop	{r4, r7, pc}
	...

08009bc0 <QuarantineChunk>:



// Expects the chunk to already be marked as quarantined by using
  // AtomicallySetQuarantineFlagIfAllocated.
void QuarantineChunk(AsanChunk *m, void *ptr) {
 8009bc0:	b590      	push	{r4, r7, lr}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
      //  uptr size_to_fill = m->UsedSize() - kChunkHeader2Size;
      //  size_to_fill = Min(size_to_fill, (uptr)fl.max_free_fill_size);
      //  REAL(memset)((void *)scribble_start, fl.free_fill_byte, size_to_fill);
      // }

      uptr size_to_fill = m->user_requested_size;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8009bd2:	617b      	str	r3, [r7, #20]
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <QuarantineChunk+0x64>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4293      	cmp	r3, r2
 8009be4:	bf28      	it	cs
 8009be6:	4613      	movcs	r3, r2
 8009be8:	617b      	str	r3, [r7, #20]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	2155      	movs	r1, #85	; 0x55
 8009bee:	6838      	ldr	r0, [r7, #0]
 8009bf0:	f00c fcce 	bl	8016590 <memset>
    }

    // Poison the region.
    PoisonShadow((uptr)ptr ,
 8009bf4:	683c      	ldr	r4, [r7, #0]
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f3c3 031c 	ubfx	r3, r3, #0, #29
    PoisonShadow((uptr)ptr ,
 8009bfe:	2108      	movs	r1, #8
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fb38 	bl	8009276 <RoundUpTo>
 8009c06:	4601      	mov	r1, r0
 8009c08:	23fd      	movs	r3, #253	; 0xfd
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff fd54 	bl	80096bc <PoisonShadow>
      quarantine.Put(&fallback_quarantine_cache, QuarantineCallback(ac, stack),
                     m, m->UsedSize());
    }
    */

    Recycle(m);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff ffa0 	bl	8009b5a <Recycle>
}
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd90      	pop	{r4, r7, pc}
 8009c22:	bf00      	nop
 8009c24:	24008004 	.word	0x24008004

08009c28 <Deallocate>:


void Deallocate(void *ptr, uptr delete_size, uptr delete_alignment, AllocType alloc_type)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	70fb      	strb	r3, [r7, #3]

	uptr p = (uptr)(ptr);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	61fb      	str	r3, [r7, #28]
    if (p == 0) return;
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d02c      	beq.n	8009c9a <Deallocate+0x72>

    uptr chunk_beg = p - kChunkHeaderSize;
 8009c40:	2210      	movs	r2, #16
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	617b      	str	r3, [r7, #20]

    //ASAN_FREE_HOOK(ptr); we do not support hooks

    // Must mark the chunk as quarantined before any changes to its metadata.
    // Do not quarantine given chunk if we failed to set CHUNK_QUARANTINE flag.
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009c4c:	68f9      	ldr	r1, [r7, #12]
 8009c4e:	6978      	ldr	r0, [r7, #20]
 8009c50:	f7ff ff2c 	bl	8009aac <AtomicallySetQuarantineFlagIfAllocated>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f083 0301 	eor.w	r3, r3, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11e      	bne.n	8009c9e <Deallocate+0x76>

    if (m->alloc_type != alloc_type) {
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	79db      	ldrb	r3, [r3, #7]
 8009c64:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d00e      	beq.n	8009c90 <Deallocate+0x68>
      if (alloc_dealloc_mismatch) {
 8009c72:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <Deallocate+0x80>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <Deallocate+0x68>
        ReportAllocTypeMismatch((uptr)ptr, (AllocType)m->alloc_type,
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	79db      	ldrb	r3, [r3, #7]
 8009c80:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	4619      	mov	r1, r3
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f7ff ff29 	bl	8009ae2 <ReportAllocTypeMismatch>
        ReportNewDeleteTypeMismatch(p, delete_size, delete_alignment);
      }
    }
    */

    QuarantineChunk(m, ptr);
 8009c90:	68f9      	ldr	r1, [r7, #12]
 8009c92:	6978      	ldr	r0, [r7, #20]
 8009c94:	f7ff ff94 	bl	8009bc0 <QuarantineChunk>
 8009c98:	e002      	b.n	8009ca0 <Deallocate+0x78>
    if (p == 0) return;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <Deallocate+0x78>
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009c9e:	bf00      	nop
 }
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	24008000 	.word	0x24008000

08009cac <asan_malloc>:
 * size
 * memory returned
 * rrrrrrrr  red zone boarder
 */

void *asan_malloc(size_t size) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
#if McuASAN_CONFIG_FreeRTOs
	return (void *) ASAN_malloc(size);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff f878 	bl	8008daa <MPU_ASAN_malloc>
 8009cba:	4603      	mov	r3, r0
#else
	return Allocate(size, 8, FROM_MALLOC, true);
#endif
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <asan_free>:

void asan_free(void *ptr) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
#if McuASAN_CONFIG_FreeRTOs
	ASAN_free(ptr);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff f882 	bl	8008dd6 <MPU_ASAN_free>
#else
	 Deallocate(ptr, 0, 0, FROM_MALLOC);
#endif
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <FreeRTOSReportFailure>:
}


#endif
static void FreeRTOSReportFailure(type_exception_t  tEX)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]


	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009ce6:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <FreeRTOSReportFailure+0x50>)
 8009ce8:	60fb      	str	r3, [r7, #12]


	  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009cea:	f7fe fbb8 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009cf6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d114      	bne.n	8009d28 <FreeRTOSReportFailure+0x4c>
	  {

		  //MPU_ASAN_flush_alloc(); //this must be executed as a system call
		  //xTaskNotifyGiveIndexed(AFLfuzzer.xTaskFuzzer,FAULT_ASAN,eSetValueWithOverwrite);
		  AFLfuzzer.xTypeEx = tEX;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009d04:	461a      	mov	r2, r3
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	f882 3874 	strb.w	r3, [r2, #2164]	; 0x874


#if DUALCOREFUZZ == 0

		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009d12:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8009d16:	2300      	movs	r3, #0
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	2209      	movs	r2, #9
 8009d1e:	2100      	movs	r1, #0
 8009d20:	f7fe fb23 	bl	800836a <MPU_xTaskGenericNotify>
		  taskYIELD();
 8009d24:	df01      	svc	1
		  while(1);
 8009d26:	e7fe      	b.n	8009d26 <FreeRTOSReportFailure+0x4a>
		  // port yield should be called and nothing else should be executed
	  }
	  else
	  {
		  //printf("Fuzzer crashed");
		  for( ; ; )
 8009d28:	e7fe      	b.n	8009d28 <FreeRTOSReportFailure+0x4c>
 8009d2a:	bf00      	nop
 8009d2c:	24020000 	.word	0x24020000

08009d30 <vPortResetPrivilege>:
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <vPortResetPrivilege+0x12>
        portRESET_PRIVILEGE();
 8009d3e:	f000 f891 	bl	8009e64 <vResetPrivilege>
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <vPortEnterCritical>:
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009d52:	f7ff f861 	bl	8008e18 <xPortRaisePrivilege>
 8009d56:	6078      	str	r0, [r7, #4]
    __asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	603b      	str	r3, [r7, #0]
}
 8009d6a:	bf00      	nop
    uxCriticalNesting++;
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <vPortEnterCritical+0x38>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3301      	adds	r3, #1
 8009d72:	4a04      	ldr	r2, [pc, #16]	; (8009d84 <vPortEnterCritical+0x38>)
 8009d74:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff ffda 	bl	8009d30 <vPortResetPrivilege>
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	2400800c 	.word	0x2400800c

08009d88 <vPortExitCritical>:
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009d8e:	f7ff f843 	bl	8008e18 <xPortRaisePrivilege>
 8009d92:	60f8      	str	r0, [r7, #12]
    configASSERT( uxCriticalNesting );
 8009d94:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <vPortExitCritical+0x58>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <vPortExitCritical+0x2a>
    __asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60bb      	str	r3, [r7, #8]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <vPortExitCritical+0x28>
    uxCriticalNesting--;
 8009db2:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <vPortExitCritical+0x58>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <vPortExitCritical+0x58>)
 8009dba:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009dbc:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <vPortExitCritical+0x58>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <vPortExitCritical+0x48>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	607b      	str	r3, [r7, #4]
    __asm volatile
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f383 8811 	msr	BASEPRI, r3
}
 8009dce:	bf00      	nop
    vPortResetPrivilege( xRunningPrivileged );
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff ffad 	bl	8009d30 <vPortResetPrivilege>
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	2400800c 	.word	0x2400800c

08009de4 <vPortSetupTimerInterrupt>:
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009de8:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <vPortSetupTimerInterrupt+0x34>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <vPortSetupTimerInterrupt+0x38>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <vPortSetupTimerInterrupt+0x3c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a0a      	ldr	r2, [pc, #40]	; (8009e24 <vPortSetupTimerInterrupt+0x40>)
 8009dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfe:	099b      	lsrs	r3, r3, #6
 8009e00:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <vPortSetupTimerInterrupt+0x44>)
 8009e02:	3b01      	subs	r3, #1
 8009e04:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 8009e06:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <vPortSetupTimerInterrupt+0x34>)
 8009e08:	2207      	movs	r2, #7
 8009e0a:	601a      	str	r2, [r3, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	e000e010 	.word	0xe000e010
 8009e1c:	e000e018 	.word	0xe000e018
 8009e20:	24008010 	.word	0x24008010
 8009e24:	10624dd3 	.word	0x10624dd3
 8009e28:	e000e014 	.word	0xe000e014

08009e2c <vPortEnableVFP>:
    __asm volatile
 8009e2c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e3c <vPortEnableVFP+0x10>
 8009e30:	6801      	ldr	r1, [r0, #0]
 8009e32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e36:	6001      	str	r1, [r0, #0]
 8009e38:	4770      	bx	lr
 8009e3a:	0000      	.short	0x0000
 8009e3c:	e000ed88 	.word	0xe000ed88
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
	...

08009e50 <xIsPrivileged>:
    __asm volatile
 8009e50:	f3ef 8014 	mrs	r0, CONTROL
 8009e54:	f010 0f01 	tst.w	r0, #1
 8009e58:	bf14      	ite	ne
 8009e5a:	2000      	movne	r0, #0
 8009e5c:	2001      	moveq	r0, #1
 8009e5e:	4770      	bx	lr
}
 8009e60:	bf00      	nop
 8009e62:	4618      	mov	r0, r3

08009e64 <vResetPrivilege>:
    __asm volatile
 8009e64:	f3ef 8014 	mrs	r0, CONTROL
 8009e68:	f040 0001 	orr.w	r0, r0, #1
 8009e6c:	f380 8814 	msr	CONTROL, r0
 8009e70:	4770      	bx	lr
}
 8009e72:	bf00      	nop

08009e74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009e7a:	f3ef 8305 	mrs	r3, IPSR
 8009e7e:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b0f      	cmp	r3, #15
 8009e84:	d914      	bls.n	8009eb0 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e86:	4a17      	ldr	r2, [pc, #92]	; (8009ee4 <vPortValidateInterruptPriority+0x70>)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e90:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <vPortValidateInterruptPriority+0x74>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	7afa      	ldrb	r2, [r7, #11]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d20a      	bcs.n	8009eb0 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009eb0:	4b0e      	ldr	r3, [pc, #56]	; (8009eec <vPortValidateInterruptPriority+0x78>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <vPortValidateInterruptPriority+0x7c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d90a      	bls.n	8009ed6 <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	603b      	str	r3, [r7, #0]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <vPortValidateInterruptPriority+0x60>
    }
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	e000e3f0 	.word	0xe000e3f0
 8009ee8:	2401001d 	.word	0x2401001d
 8009eec:	e000ed0c 	.word	0xe000ed0c
 8009ef0:	24010020 	.word	0x24010020

08009ef4 <__sanitizer_cov_trace_pc>:
#include "fuzzing.h"
#include "stdint.h"


void __sanitizer_cov_trace_pc(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0

#if DUALCOREFUZZ
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
#else
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009efa:	4b32      	ldr	r3, [pc, #200]	; (8009fc4 <__sanitizer_cov_trace_pc+0xd0>)
 8009efc:	60fb      	str	r3, [r7, #12]
	 //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	60bb      	str	r3, [r7, #8]

	register uint32_t R14 asm("r14");

	uint16_t guard;

	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);
 8009f02:	4673      	mov	r3, lr
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f0a:	80fb      	strh	r3, [r7, #6]

	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f12:	f8b3 2858 	ldrh.w	r2, [r3, #2136]	; 0x858
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	4053      	eors	r3, r2
 8009f1a:	80bb      	strh	r3, [r7, #4]
	bitmapindex &=AFL_BITMAP_MASK;
 8009f1c:	88bb      	ldrh	r3, [r7, #4]
 8009f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f22:	80bb      	strh	r3, [r7, #4]

	if(!paflbitmap[bitmapindex])
 8009f24:	88bb      	ldrh	r3, [r7, #4]
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d121      	bne.n	8009f76 <__sanitizer_cov_trace_pc+0x82>
	{
		  AFLfuzzer.indexdif++; // since we need to start the index in 1 the first tuple is empty,
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f38:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f46:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
		              // we will correct the pointer
		  	  	  	  // when sending the data to the PC
		  paflbitmap[bitmapindex] =  AFLfuzzer.indexdif;
 8009f4a:	88bb      	ldrh	r3, [r7, #4]
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4413      	add	r3, r2
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8009f58:	f8b2 2862 	ldrh.w	r2, [r2, #2146]	; 0x862
 8009f5c:	801a      	strh	r2, [r3, #0]
		  AFLfuzzer.afldiff[AFLfuzzer.indexdif].index = bitmapindex;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f64:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009f68:	461a      	mov	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f70:	88b9      	ldrh	r1, [r7, #4]
 8009f72:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

	 }
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009f76:	88bb      	ldrh	r3, [r7, #4]
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b299      	uxth	r1, r3
 8009f90:	88bb      	ldrh	r3, [r7, #4]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	4413      	add	r3, r2
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b2ca      	uxtb	r2, r1
 8009f9c:	b291      	uxth	r1, r2
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	460a      	mov	r2, r1
 8009faa:	805a      	strh	r2, [r3, #2]

	 AFLfuzzer.previousGuard = guard>>1;
 8009fac:	88fb      	ldrh	r3, [r7, #6]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009fb8:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858



}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	24020000 	.word	0x24020000

08009fc8 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
	/* Start the MPU demo. */
	vStartMPUDemo();
 8009fcc:	f009 ff60 	bl	8013e90 <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 8009fd0:	f7f9 fed2 	bl	8003d78 <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009fd4:	e7fe      	b.n	8009fd4 <app_main+0xc>

08009fd6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009fe0:	e7fe      	b.n	8009fe0 <vApplicationStackOverflowHook+0xa>

08009fe2 <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009fe6:	e7fe      	b.n	8009fe6 <vApplicationMallocFailedHook+0x4>

08009fe8 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4a07      	ldr	r2, [pc, #28]	; (800a014 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ff8:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4a06      	ldr	r2, [pc, #24]	; (800a018 <vApplicationGetIdleTaskMemory+0x30>)
 8009ffe:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a006:	601a      	str	r2, [r3, #0]
}
 800a008:	bf00      	nop
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	24010024 	.word	0x24010024
 800a018:	24010168 	.word	0x24010168

0800a01c <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4a07      	ldr	r2, [pc, #28]	; (800a048 <vApplicationGetTimerTaskMemory+0x2c>)
 800a02c:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4a06      	ldr	r2, [pc, #24]	; (800a04c <vApplicationGetTimerTaskMemory+0x30>)
 800a032:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a03a:	601a      	str	r2, [r3, #0]
}
 800a03c:	bf00      	nop
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	24011168 	.word	0x24011168
 800a04c:	240112ac 	.word	0x240112ac

0800a050 <deleteTask>:
extern uint8_t AFLfuzzerRegion[AFLINPUTREGION_SIZE ] __attribute__( ( aligned( AFLINPUTREGION_SIZE ) ) );
#endif


void deleteTask()
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af02      	add	r7, sp, #8

	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a056:	4b11      	ldr	r3, [pc, #68]	; (800a09c <deleteTask+0x4c>)
 800a058:	607b      	str	r3, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	603b      	str	r3, [r7, #0]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a064:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a068:	463b      	mov	r3, r7
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	2300      	movs	r3, #0
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2303      	movs	r3, #3
 800a072:	2202      	movs	r2, #2
 800a074:	2100      	movs	r1, #0
 800a076:	f7fa fa6b 	bl	8004550 <xTaskGenericNotifyFromISR>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800a07a:	2200      	movs	r2, #0
 800a07c:	2101      	movs	r1, #1
 800a07e:	4808      	ldr	r0, [pc, #32]	; (800a0a0 <deleteTask+0x50>)
 800a080:	f001 fe10 	bl	800bca4 <HAL_GPIO_WritePin>
	vTaskDelete(AFLfuzzer.xTaskTarget);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a08a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe f842 	bl	8008118 <MPU_vTaskDelete>

}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	24020000 	.word	0x24020000
 800a0a0:	58020400 	.word	0x58020400

0800a0a4 <vHandleMemoryFault>:


portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <vHandleMemoryFault+0x48>)
 800a0ae:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a0b0:	f7fe f9d5 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0bc:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d10f      	bne.n	800a0e4 <vHandleMemoryFault+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a0ce:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0d8:	2208      	movs	r2, #8
 800a0da:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a0de:	f7ff ffb7 	bl	800a050 <deleteTask>
	  }

  }


}
 800a0e2:	e000      	b.n	800a0e6 <vHandleMemoryFault+0x42>
	  for( ; ; )
 800a0e4:	e7fe      	b.n	800a0e4 <vHandleMemoryFault+0x40>
}
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	24020000 	.word	0x24020000

0800a0f0 <vNMI_Handler>:



portDONT_DISCARD void vNMI_Handler( uint32_t * pulFaultStackAddress )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a0f8:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <vNMI_Handler+0x48>)
 800a0fa:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a0fc:	f7fe f9af 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a100:	4602      	mov	r2, r0
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a108:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d10f      	bne.n	800a130 <vNMI_Handler+0x40>
  {
	  //Get the PC where the crash happened
		  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a11a:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
		  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a124:	2208      	movs	r2, #8
 800a126:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  deleteTask();
 800a12a:	f7ff ff91 	bl	800a050 <deleteTask>
	  }

  }


}
 800a12e:	e000      	b.n	800a132 <vNMI_Handler+0x42>
	  for( ; ; )
 800a130:	e7fe      	b.n	800a130 <vNMI_Handler+0x40>
}
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	24020000 	.word	0x24020000

0800a13c <vHardFault_Handler>:


portDONT_DISCARD void vHardFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a144:	4b08      	ldr	r3, [pc, #32]	; (800a168 <vHardFault_Handler+0x2c>)
 800a146:	60fb      	str	r3, [r7, #12]

  //this exception is not recoverable
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a148:	f7fe f989 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a14c:	4602      	mov	r2, r0
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a154:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a158:	429a      	cmp	r2, r3
 800a15a:	d100      	bne.n	800a15e <vHardFault_Handler+0x22>
  {

 	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 800a15c:	e7fe      	b.n	800a15c <vHardFault_Handler+0x20>
	  }

  }


}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	24020000 	.word	0x24020000

0800a16c <vBusFault_Handler>:


portDONT_DISCARD void vBusFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a174:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <vBusFault_Handler+0x48>)
 800a176:	60fb      	str	r3, [r7, #12]



  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a178:	f7fe f971 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a17c:	4602      	mov	r2, r0
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a184:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a188:	429a      	cmp	r2, r3
 800a18a:	d10f      	bne.n	800a1ac <vBusFault_Handler+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a196:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1a0:	220b      	movs	r2, #11
 800a1a2:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a1a6:	f7ff ff53 	bl	800a050 <deleteTask>
	  }

  }


}
 800a1aa:	e000      	b.n	800a1ae <vBusFault_Handler+0x42>
	  for( ; ; )
 800a1ac:	e7fe      	b.n	800a1ac <vBusFault_Handler+0x40>
}
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	24020000 	.word	0x24020000

0800a1b8 <vUsageFault_Handler>:

portDONT_DISCARD void vUsageFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a1c0:	4b27      	ldr	r3, [pc, #156]	; (800a260 <vUsageFault_Handler+0xa8>)
 800a1c2:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a1c4:	f7fe f94b 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1d0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d13f      	bne.n	800a258 <vUsageFault_Handler+0xa0>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a1e2:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 800a1e6:	4b1f      	ldr	r3, [pc, #124]	; (800a264 <vUsageFault_Handler+0xac>)
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00b      	beq.n	800a20a <vUsageFault_Handler+0x52>
	  {
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1f8:	2209      	movs	r2, #9
 800a1fa:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 800a1fe:	4b19      	ldr	r3, [pc, #100]	; (800a264 <vUsageFault_Handler+0xac>)
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	4a18      	ldr	r2, [pc, #96]	; (800a264 <vUsageFault_Handler+0xac>)
 800a204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a208:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk)
 800a20a:	4b16      	ldr	r3, [pc, #88]	; (800a264 <vUsageFault_Handler+0xac>)
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <vUsageFault_Handler+0x76>
	  {
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a21c:	220a      	movs	r2, #10
 800a21e:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 800a222:	4b10      	ldr	r3, [pc, #64]	; (800a264 <vUsageFault_Handler+0xac>)
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	4a0f      	ldr	r2, [pc, #60]	; (800a264 <vUsageFault_Handler+0xac>)
 800a228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a22c:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk)
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <vUsageFault_Handler+0xac>)
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <vUsageFault_Handler+0x9a>
	  {
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a240:	220c      	movs	r2, #12
 800a242:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <vUsageFault_Handler+0xac>)
 800a248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24a:	4a06      	ldr	r2, [pc, #24]	; (800a264 <vUsageFault_Handler+0xac>)
 800a24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a250:	6293      	str	r3, [r2, #40]	; 0x28

	  }
	  deleteTask();
 800a252:	f7ff fefd 	bl	800a050 <deleteTask>
	  }

  }


}
 800a256:	e000      	b.n	800a25a <vUsageFault_Handler+0xa2>
	  for( ; ; )
 800a258:	e7fe      	b.n	800a258 <vUsageFault_Handler+0xa0>
}
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	24020000 	.word	0x24020000
 800a264:	e000ed00 	.word	0xe000ed00

0800a268 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 800a268:	f01e 0f04 	tst.w	lr, #4
 800a26c:	bf0c      	ite	eq
 800a26e:	f3ef 8008 	mrseq	r0, MSP
 800a272:	f3ef 8009 	mrsne	r0, PSP
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	f382 8814 	msr	CONTROL, r2
 800a27e:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a284 <handler_address_const>
 800a282:	4708      	bx	r1

0800a284 <handler_address_const>:
 800a284:	0800a0a5 	.word	0x0800a0a5
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 800a288:	bf00      	nop

0800a28a <NMI_Handler>:
  */
void NMI_Handler( void ) __attribute__ (( naked ));
void NMI_Handler(void)
{

		__asm volatile
 800a28a:	f01e 0f04 	tst.w	lr, #4
 800a28e:	bf0c      	ite	eq
 800a290:	f3ef 8008 	mrseq	r0, MSP
 800a294:	f3ef 8009 	mrsne	r0, PSP
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f382 8814 	msr	CONTROL, r2
 800a2a0:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2a8 <handler_address_const1+0x2>
 800a2a4:	4708      	bx	r1

0800a2a6 <handler_address_const1>:
 800a2a6:	a0f1      	.short	0xa0f1
 800a2a8:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const1: .word vNMI_Handler	\n"
		);

}
 800a2aa:	bf00      	nop

0800a2ac <HardFault_Handler>:
  */
void HardFault_Handler( void ) __attribute__ (( naked ));
void HardFault_Handler(void)
{

		__asm volatile
 800a2ac:	f01e 0f04 	tst.w	lr, #4
 800a2b0:	bf0c      	ite	eq
 800a2b2:	f3ef 8008 	mrseq	r0, MSP
 800a2b6:	f3ef 8009 	mrsne	r0, PSP
 800a2ba:	f04f 0200 	mov.w	r2, #0
 800a2be:	f382 8814 	msr	CONTROL, r2
 800a2c2:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2c8 <handler_address_const2>
 800a2c6:	4708      	bx	r1

0800a2c8 <handler_address_const2>:
 800a2c8:	0800a13d 	.word	0x0800a13d
			" bx r1												\n"
			"													\n"
			" handler_address_const2: .word vHardFault_Handler	\n"
		);

}
 800a2cc:	bf00      	nop

0800a2ce <BusFault_Handler>:
  */
void BusFault_Handler( void ) __attribute__ (( naked ));
void BusFault_Handler(void)
{

		__asm volatile
 800a2ce:	f01e 0f04 	tst.w	lr, #4
 800a2d2:	bf0c      	ite	eq
 800a2d4:	f3ef 8008 	mrseq	r0, MSP
 800a2d8:	f3ef 8009 	mrsne	r0, PSP
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f382 8814 	msr	CONTROL, r2
 800a2e4:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2ec <handler_address_const3+0x2>
 800a2e8:	4708      	bx	r1

0800a2ea <handler_address_const3>:
 800a2ea:	a16d      	.short	0xa16d
 800a2ec:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const3: .word vBusFault_Handler	\n"
		);

}
 800a2ee:	bf00      	nop

0800a2f0 <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void ) __attribute__ (( naked ));
void UsageFault_Handler(void)
{
		__asm volatile
 800a2f0:	f01e 0f04 	tst.w	lr, #4
 800a2f4:	bf0c      	ite	eq
 800a2f6:	f3ef 8008 	mrseq	r0, MSP
 800a2fa:	f3ef 8009 	mrsne	r0, PSP
 800a2fe:	f04f 0200 	mov.w	r2, #0
 800a302:	f382 8814 	msr	CONTROL, r2
 800a306:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a30c <handler_address_const5>
 800a30a:	4708      	bx	r1

0800a30c <handler_address_const5>:
 800a30c:	0800a1b9 	.word	0x0800a1b9
			" bx r1												\n"
			"													\n"
			" handler_address_const5: .word vUsageFault_Handler	\n"
		);

}
 800a310:	bf00      	nop
	...

0800a314 <checkCRC>:
//extern UART_HandleTypeDef huart3;



bool checkCRC(RingBuffer_t *input)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	uint32_t numberwords;
	uint32_t *crcreceived;

	numberwords = (input->u32available-4)/4;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a322:	3b04      	subs	r3, #4
 800a324:	089b      	lsrs	r3, r3, #2
 800a326:	617b      	str	r3, [r7, #20]

	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	4619      	mov	r1, r3
 800a32e:	480c      	ldr	r0, [pc, #48]	; (800a360 <checkCRC+0x4c>)
 800a330:	f001 f96e 	bl	800b610 <HAL_CRC_Calculate>
 800a334:	6138      	str	r0, [r7, #16]

	uwCRCValue = ~uwCRCValue;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	43db      	mvns	r3, r3
 800a33a:	613b      	str	r3, [r7, #16]
	crcreceived = (uint32_t *)(input->uxBuffer);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60fb      	str	r3, [r7, #12]

	if (crcreceived[numberwords] == uwCRCValue)
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d101      	bne.n	800a354 <checkCRC+0x40>
	{
		return true;
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <checkCRC+0x42>
	}
	return false;
 800a354:	2300      	movs	r3, #0

}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	240116ac 	.word	0x240116ac

0800a364 <SendBackFault>:

extern uint8_t  bufferDMA[550];
void SendBackFault(uint32_t faultcode)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]

//#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a36c:	4b2c      	ldr	r3, [pc, #176]	; (800a420 <SendBackFault+0xbc>)
 800a36e:	60fb      	str	r3, [r7, #12]
//#endif


	RingClear(&AFLfuzzer.inputAFL);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f9b9 	bl	800a6ee <RingClear>
	AFLfuzzer.inputLength = 0;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a382:	461a      	mov	r2, r3
 800a384:	2300      	movs	r3, #0
 800a386:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.inputLengthpadded = 0;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a390:	461a      	mov	r2, r3
 800a392:	2300      	movs	r3, #0
 800a394:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828


	AFLfuzzer.aflheader[0] = faultcode;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	2304      	movs	r3, #4
 800a3b0:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	f646 0314 	movw	r3, #26644	; 0x6814
 800a3ba:	4413      	add	r3, r2
 800a3bc:	2202      	movs	r2, #2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4818      	ldr	r0, [pc, #96]	; (800a424 <SendBackFault+0xc0>)
 800a3c2:	f001 f925 	bl	800b610 <HAL_CRC_Calculate>
 800a3c6:	60b8      	str	r0, [r7, #8]
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	43db      	mvns	r3, r3
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a3d2:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c


	AFLfuzzer.bRXcomplete = false;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	AFLfuzzer.inputLength = 0;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.previousGuard = 0;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
	RingZeroes(&AFLfuzzer.inputAFL);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f991 	bl	800a72a <RingZeroes>

#if USARTHW == 0
    CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 12);
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	f646 0314 	movw	r3, #26644	; 0x6814
 800a40e:	4413      	add	r3, r2
 800a410:	210c      	movs	r1, #12
 800a412:	4618      	mov	r0, r3
 800a414:	f00b fac0 	bl	8015998 <CDC_Transmit_FS>

#endif



}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	24020000 	.word	0x24020000
 800a424:	240116ac 	.word	0x240116ac

0800a428 <FuzzingInputHandler>:



void FuzzingInputHandler(uint8_t* Buf, uint32_t *Len)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	; 0x28
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]

	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a432:	4b79      	ldr	r3, [pc, #484]	; (800a618 <FuzzingInputHandler+0x1f0>)
 800a434:	617b      	str	r3, [r7, #20]
	  BaseType_t xHigherPriorityTaskWoken;

	  xHigherPriorityTaskWoken = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
	  union ubytes_t auxbytes;
	  uint32_t u32Tocopy;
	  uint8_t error;


	  error = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	76fb      	strb	r3, [r7, #27]

	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a444:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <FuzzingInputHandler+0x32>
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a452:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00f      	beq.n	800a47a <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a460:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a468:	d807      	bhi.n	800a47a <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a470:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a478:	d904      	bls.n	800a484 <FuzzingInputHandler+0x5c>
	  {
	    	  //this is a wrong condition that should never happens,
	    	  //however fuzzing is stressing the whole system so we should clean the whole thing here
	    	  SendBackFault(FAULT_INLEGTH);
 800a47a:	2007      	movs	r0, #7
 800a47c:	f7ff ff72 	bl	800a364 <SendBackFault>
	    	  error = 1;
 800a480:	2301      	movs	r3, #1
 800a482:	76fb      	strb	r3, [r7, #27]
	  }

	  if( AFLfuzzer.inputLength == 0 && error == 0 )
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a48a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d144      	bne.n	800a51c <FuzzingInputHandler+0xf4>
 800a492:	7efb      	ldrb	r3, [r7, #27]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d141      	bne.n	800a51c <FuzzingInputHandler+0xf4>
	  {
	      auxbytes.vbytes[0]=Buf[0];
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	733b      	strb	r3, [r7, #12]
	      auxbytes.vbytes[1]=Buf[1];
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	737b      	strb	r3, [r7, #13]
	      auxbytes.vbytes[2]=Buf[2];
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	789b      	ldrb	r3, [r3, #2]
 800a4a8:	73bb      	strb	r3, [r7, #14]
	      auxbytes.vbytes[3]=Buf[3];
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	78db      	ldrb	r3, [r3, #3]
 800a4ae:	73fb      	strb	r3, [r7, #15]
	      AFLfuzzer.inputLength = auxbytes.vint32;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4ba:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
	      //offset = 4;
	      if(AFLfuzzer.inputLength % 4)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4c4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4c8:	f003 0303 	and.w	r3, r3, #3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00d      	beq.n	800a4ec <FuzzingInputHandler+0xc4>
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength + 4 - AFLfuzzer.inputLength % 4;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4d6:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	3304      	adds	r3, #4
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a4e6:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
 800a4ea:	e009      	b.n	800a500 <FuzzingInputHandler+0xd8>
	      }
	      else
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4f2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a4fc:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
	      }

	      if((AFLfuzzer.inputLengthpadded + 4 )> MAX_BUFFER_INPUT)
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a506:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a50a:	3304      	adds	r3, #4
 800a50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a510:	d904      	bls.n	800a51c <FuzzingInputHandler+0xf4>
	      {
        	  //u32copied = 0;
        	  SendBackFault(FAULT_INLEGTH);
 800a512:	2007      	movs	r0, #7
 800a514:	f7ff ff26 	bl	800a364 <SendBackFault>
        	  error = 1;
 800a518:	2301      	movs	r3, #1
 800a51a:	76fb      	strb	r3, [r7, #27]

          }

      }

      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a522:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a526:	2b00      	cmp	r3, #0
 800a528:	d06a      	beq.n	800a600 <FuzzingInputHandler+0x1d8>
 800a52a:	7efb      	ldrb	r3, [r7, #27]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d167      	bne.n	800a600 <FuzzingInputHandler+0x1d8>
      {


	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a536:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a540:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	3304      	adds	r3, #4
 800a548:	61fb      	str	r3, [r7, #28]
	    	 if (u32Tocopy > *Len)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	429a      	cmp	r2, r3
 800a552:	d902      	bls.n	800a55a <FuzzingInputHandler+0x132>
	    	 {
	    		 u32Tocopy = *Len;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	61fb      	str	r3, [r7, #28]

	    	 }
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a560:	69fa      	ldr	r2, [r7, #28]
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f873 	bl	800a650 <RingCopy>


	  	     if( (AFLfuzzer.inputLengthpadded + 4) == AFLfuzzer.inputAFL.u32available)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a570:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a574:	1d1a      	adds	r2, r3, #4
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a57c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a580:	429a      	cmp	r2, r3
 800a582:	d13d      	bne.n	800a600 <FuzzingInputHandler+0x1d8>
	  	     {

	  	    	if( checkCRC(&AFLfuzzer.inputAFL) )
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7ff fec2 	bl	800a314 <checkCRC>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d031      	beq.n	800a5fa <FuzzingInputHandler+0x1d2>
	  	    	{

	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a59c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a5a6:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
	  	    		AFLfuzzer.bRXcomplete = 1;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	  	    		AFLfuzzer.timespan = HAL_GetTick();
 800a5b6:	f000 fe67 	bl	800b288 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5c2:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
	  	    		if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5cc:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <FuzzingInputHandler+0x1b2>
 800a5d4:	4811      	ldr	r0, [pc, #68]	; (800a61c <FuzzingInputHandler+0x1f4>)
 800a5d6:	f00c f949 	bl	801686c <puts>

	  	    		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5e0:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	f7f9 ffac 	bl	8004550 <xTaskGenericNotifyFromISR>
 800a5f8:	e002      	b.n	800a600 <FuzzingInputHandler+0x1d8>
	  	    	}
	  	    	else
	  	    	{
	  	    		// wrong CRC
	  	    		//u32copied = 0;
	  	    		SendBackFault(FAULT_COMM);
 800a5fa:	2006      	movs	r0, #6
 800a5fc:	f7ff feb2 	bl	800a364 <SendBackFault>

	  	     }


      }
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <FuzzingInputHandler+0x1e6>
 800a606:	4b06      	ldr	r3, [pc, #24]	; (800a620 <FuzzingInputHandler+0x1f8>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]

}
 800a60e:	bf00      	nop
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	24020000 	.word	0x24020000
 800a61c:	24008278 	.word	0x24008278
 800a620:	e000ed04 	.word	0xe000ed04

0800a624 <activateCortexMtrapsUNA>:
			   //SCB_CCR_UNALIGN_TRP_Msk;    // enable unaligned access trap

}

void activateCortexMtrapsUNA()
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
	 SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 800a628:	4b08      	ldr	r3, [pc, #32]	; (800a64c <activateCortexMtrapsUNA+0x28>)
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	4a07      	ldr	r2, [pc, #28]	; (800a64c <activateCortexMtrapsUNA+0x28>)
 800a62e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a632:	6253      	str	r3, [r2, #36]	; 0x24
	  | SCB_SHCSR_BUSFAULTENA_Msk
	  | SCB_SHCSR_MEMFAULTENA_Msk; // enable Usage-/Bus-/MPU Fault

	  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk | // enable div by zero trap
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <activateCortexMtrapsUNA+0x28>)
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	4a04      	ldr	r2, [pc, #16]	; (800a64c <activateCortexMtrapsUNA+0x28>)
 800a63a:	f043 0318 	orr.w	r3, r3, #24
 800a63e:	6153      	str	r3, [r2, #20]
			   SCB_CCR_UNALIGN_TRP_Msk;    // enable unaligned access trap

}
 800a640:	bf00      	nop
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	e000ed00 	.word	0xe000ed00

0800a650 <RingCopy>:


/* Ring Buffer functions */

void RingCopy(RingBuffer_t *xRingBuffer, uint8_t* u8Buff, uint32_t len)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
	uint32_t u32Free=0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]


	u32Free = MAX_BUFFER_INPUT - xRingBuffer->u32end;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a666:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800a66a:	617b      	str	r3, [r7, #20]

	if(u32Free > len)
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d91a      	bls.n	800a6aa <RingCopy+0x5a>
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, len );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4413      	add	r3, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	4618      	mov	r0, r3
 800a684:	f00b ff76 	bl	8016574 <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	441a      	add	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += len;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	441a      	add	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800a6a8:	e019      	b.n	800a6de <RingCopy+0x8e>

	}
	else
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f00b ff5b 	bl	8016574 <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	441a      	add	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += u32Free;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	441a      	add	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	}

	xRingBuffer->overflow = false;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810

}
 800a6e6:	bf00      	nop
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <RingClear>:
{
return xRingBuffer->u32available;
}

void RingClear(RingBuffer_t *xRingBuffer)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
xRingBuffer->u32start = 0;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
xRingBuffer->u32end = 0;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
xRingBuffer->u32available = 0;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
xRingBuffer->u32availablenopad = 0;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
xRingBuffer->overflow = false;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <RingZeroes>:


void RingZeroes(RingBuffer_t *xRingBuffer)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
	RingClear(xRingBuffer);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff ffdb 	bl	800a6ee <RingClear>
	{
		xRingBuffer->uxBuffer[i]=0;
	}
*/

}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_RNG_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch) {
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a74a:	1df9      	adds	r1, r7, #7
 800a74c:	2301      	movs	r3, #1
 800a74e:	2201      	movs	r2, #1
 800a750:	4803      	ldr	r0, [pc, #12]	; (800a760 <__io_putchar+0x20>)
 800a752:	f005 fc29 	bl	800ffa8 <HAL_UART_Transmit>
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	240116e4 	.word	0x240116e4

0800a764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a768:	4b19      	ldr	r3, [pc, #100]	; (800a7d0 <main+0x6c>)
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11b      	bne.n	800a7ac <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a774:	f3bf 8f4f 	dsb	sy
}
 800a778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a77a:	f3bf 8f6f 	isb	sy
}
 800a77e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a780:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <main+0x6c>)
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a788:	f3bf 8f4f 	dsb	sy
}
 800a78c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a78e:	f3bf 8f6f 	isb	sy
}
 800a792:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <main+0x6c>)
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	4a0d      	ldr	r2, [pc, #52]	; (800a7d0 <main+0x6c>)
 800a79a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a79e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a7a0:	f3bf 8f4f 	dsb	sy
}
 800a7a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a7a6:	f3bf 8f6f 	isb	sy
}
 800a7aa:	e000      	b.n	800a7ae <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a7ac:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a7ae:	f000 fd1b 	bl	800b1e8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a7b2:	f000 f80f 	bl	800a7d4 <SystemClock_Config>
  //bRXcomplete = false;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a7b6:	f000 f90f 	bl	800a9d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800a7ba:	f000 f8bf 	bl	800a93c <MX_USART3_UART_Init>
  MX_RNG_Init();
 800a7be:	f000 f8a7 	bl	800a910 <MX_RNG_Init>
  MX_CRC_Init();
 800a7c2:	f000 f883 	bl	800a8cc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  activateCortexMtrapsUNA();
 800a7c6:	f7ff ff2d 	bl	800a624 <activateCortexMtrapsUNA>
  // call RTOS initialization routines
  app_main();
 800a7ca:	f7ff fbfd 	bl	8009fc8 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
 800a7ce:	e7fe      	b.n	800a7ce <main+0x6a>
 800a7d0:	e000ed00 	.word	0xe000ed00

0800a7d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b09c      	sub	sp, #112	; 0x70
 800a7d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7de:	224c      	movs	r2, #76	; 0x4c
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f00b fed4 	bl	8016590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7e8:	1d3b      	adds	r3, r7, #4
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f00b fece 	bl	8016590 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a7f4:	2002      	movs	r0, #2
 800a7f6:	f002 fc49 	bl	800d08c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	603b      	str	r3, [r7, #0]
 800a7fe:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <SystemClock_Config+0xf0>)
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	4a30      	ldr	r2, [pc, #192]	; (800a8c4 <SystemClock_Config+0xf0>)
 800a804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a808:	6193      	str	r3, [r2, #24]
 800a80a:	4b2e      	ldr	r3, [pc, #184]	; (800a8c4 <SystemClock_Config+0xf0>)
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	4b2c      	ldr	r3, [pc, #176]	; (800a8c8 <SystemClock_Config+0xf4>)
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	4a2b      	ldr	r2, [pc, #172]	; (800a8c8 <SystemClock_Config+0xf4>)
 800a81a:	f043 0301 	orr.w	r3, r3, #1
 800a81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a820:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <SystemClock_Config+0xf4>)
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	603b      	str	r3, [r7, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a82c:	bf00      	nop
 800a82e:	4b25      	ldr	r3, [pc, #148]	; (800a8c4 <SystemClock_Config+0xf0>)
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a83a:	d1f8      	bne.n	800a82e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a83c:	2321      	movs	r3, #33	; 0x21
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a844:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a846:	2301      	movs	r3, #1
 800a848:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a84a:	2302      	movs	r3, #2
 800a84c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a84e:	2302      	movs	r3, #2
 800a850:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a852:	2301      	movs	r3, #1
 800a854:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800a856:	2378      	movs	r3, #120	; 0x78
 800a858:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a85a:	2302      	movs	r3, #2
 800a85c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a85e:	2302      	movs	r3, #2
 800a860:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a862:	2302      	movs	r3, #2
 800a864:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a866:	230c      	movs	r3, #12
 800a868:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a876:	4618      	mov	r0, r3
 800a878:	f002 fc52 	bl	800d120 <HAL_RCC_OscConfig>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800a882:	f000 f9e7 	bl	800ac54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a886:	233f      	movs	r3, #63	; 0x3f
 800a888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a88a:	2303      	movs	r3, #3
 800a88c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a892:	2308      	movs	r3, #8
 800a894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a896:	2340      	movs	r3, #64	; 0x40
 800a898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a89a:	2340      	movs	r3, #64	; 0x40
 800a89c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a89e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a8a4:	2340      	movs	r3, #64	; 0x40
 800a8a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a8a8:	1d3b      	adds	r3, r7, #4
 800a8aa:	2104      	movs	r1, #4
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f003 f845 	bl	800d93c <HAL_RCC_ClockConfig>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800a8b8:	f000 f9cc 	bl	800ac54 <Error_Handler>
  }
}
 800a8bc:	bf00      	nop
 800a8be:	3770      	adds	r7, #112	; 0x70
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	58024800 	.word	0x58024800
 800a8c8:	58000400 	.word	0x58000400

0800a8cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a8d0:	4b0d      	ldr	r3, [pc, #52]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8d2:	4a0e      	ldr	r2, [pc, #56]	; (800a90c <MX_CRC_Init+0x40>)
 800a8d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 800a8e2:	4b09      	ldr	r3, [pc, #36]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8e4:	2260      	movs	r2, #96	; 0x60
 800a8e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800a8e8:	4b07      	ldr	r3, [pc, #28]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8ea:	2280      	movs	r2, #128	; 0x80
 800a8ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a8ee:	4b06      	ldr	r3, [pc, #24]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8f0:	2203      	movs	r2, #3
 800a8f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a8f4:	4804      	ldr	r0, [pc, #16]	; (800a908 <MX_CRC_Init+0x3c>)
 800a8f6:	f000 fde3 	bl	800b4c0 <HAL_CRC_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800a900:	f000 f9a8 	bl	800ac54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a904:	bf00      	nop
 800a906:	bd80      	pop	{r7, pc}
 800a908:	240116ac 	.word	0x240116ac
 800a90c:	58024c00 	.word	0x58024c00

0800a910 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <MX_RNG_Init+0x24>)
 800a916:	4a08      	ldr	r2, [pc, #32]	; (800a938 <MX_RNG_Init+0x28>)
 800a918:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a91a:	4b06      	ldr	r3, [pc, #24]	; (800a934 <MX_RNG_Init+0x24>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a920:	4804      	ldr	r0, [pc, #16]	; (800a934 <MX_RNG_Init+0x24>)
 800a922:	f004 ff41 	bl	800f7a8 <HAL_RNG_Init>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a92c:	f000 f992 	bl	800ac54 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a930:	bf00      	nop
 800a932:	bd80      	pop	{r7, pc}
 800a934:	240116d0 	.word	0x240116d0
 800a938:	48021800 	.word	0x48021800

0800a93c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a940:	4b22      	ldr	r3, [pc, #136]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a942:	4a23      	ldr	r2, [pc, #140]	; (800a9d0 <MX_USART3_UART_Init+0x94>)
 800a944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 7500000;
 800a946:	4b21      	ldr	r3, [pc, #132]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a948:	4a22      	ldr	r2, [pc, #136]	; (800a9d4 <MX_USART3_UART_Init+0x98>)
 800a94a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a94c:	4b1f      	ldr	r3, [pc, #124]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a94e:	2200      	movs	r2, #0
 800a950:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a952:	4b1e      	ldr	r3, [pc, #120]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a954:	2200      	movs	r2, #0
 800a956:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a958:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a95e:	4b1b      	ldr	r3, [pc, #108]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a960:	220c      	movs	r2, #12
 800a962:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a964:	4b19      	ldr	r3, [pc, #100]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a966:	2200      	movs	r2, #0
 800a968:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a96a:	4b18      	ldr	r3, [pc, #96]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a972:	2200      	movs	r2, #0
 800a974:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a976:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a978:	2200      	movs	r2, #0
 800a97a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a97c:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a97e:	2200      	movs	r2, #0
 800a980:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a982:	4812      	ldr	r0, [pc, #72]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a984:	f005 fac0 	bl	800ff08 <HAL_UART_Init>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800a98e:	f000 f961 	bl	800ac54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a992:	2100      	movs	r1, #0
 800a994:	480d      	ldr	r0, [pc, #52]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a996:	f006 faad 	bl	8010ef4 <HAL_UARTEx_SetTxFifoThreshold>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800a9a0:	f000 f958 	bl	800ac54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4809      	ldr	r0, [pc, #36]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a9a8:	f006 fae2 	bl	8010f70 <HAL_UARTEx_SetRxFifoThreshold>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800a9b2:	f000 f94f 	bl	800ac54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <MX_USART3_UART_Init+0x90>)
 800a9b8:	f006 fa63 	bl	8010e82 <HAL_UARTEx_DisableFifoMode>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800a9c2:	f000 f947 	bl	800ac54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a9c6:	bf00      	nop
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	240116e4 	.word	0x240116e4
 800a9d0:	40004800 	.word	0x40004800
 800a9d4:	007270e0 	.word	0x007270e0

0800a9d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08c      	sub	sp, #48	; 0x30
 800a9dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9de:	f107 031c 	add.w	r3, r7, #28
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	605a      	str	r2, [r3, #4]
 800a9e8:	609a      	str	r2, [r3, #8]
 800a9ea:	60da      	str	r2, [r3, #12]
 800a9ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9ee:	4b88      	ldr	r3, [pc, #544]	; (800ac10 <MX_GPIO_Init+0x238>)
 800a9f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9f4:	4a86      	ldr	r2, [pc, #536]	; (800ac10 <MX_GPIO_Init+0x238>)
 800a9f6:	f043 0304 	orr.w	r3, r3, #4
 800a9fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9fe:	4b84      	ldr	r3, [pc, #528]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa0c:	4b80      	ldr	r3, [pc, #512]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa12:	4a7f      	ldr	r2, [pc, #508]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa1c:	4b7c      	ldr	r3, [pc, #496]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa2a:	4b79      	ldr	r3, [pc, #484]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa30:	4a77      	ldr	r2, [pc, #476]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa3a:	4b75      	ldr	r3, [pc, #468]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	613b      	str	r3, [r7, #16]
 800aa46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa48:	4b71      	ldr	r3, [pc, #452]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa4e:	4a70      	ldr	r2, [pc, #448]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa50:	f043 0302 	orr.w	r3, r3, #2
 800aa54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa58:	4b6d      	ldr	r3, [pc, #436]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa66:	4b6a      	ldr	r3, [pc, #424]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa6c:	4a68      	ldr	r2, [pc, #416]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa6e:	f043 0308 	orr.w	r3, r3, #8
 800aa72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa76:	4b66      	ldr	r3, [pc, #408]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa7c:	f003 0308 	and.w	r3, r3, #8
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa84:	4b62      	ldr	r3, [pc, #392]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa8a:	4a61      	ldr	r2, [pc, #388]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa94:	4b5e      	ldr	r3, [pc, #376]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aa96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9e:	607b      	str	r3, [r7, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aaa2:	4b5b      	ldr	r3, [pc, #364]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aaa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaa8:	4a59      	ldr	r2, [pc, #356]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aaaa:	f043 0310 	orr.w	r3, r3, #16
 800aaae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aab2:	4b57      	ldr	r3, [pc, #348]	; (800ac10 <MX_GPIO_Init+0x238>)
 800aab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800aac0:	2200      	movs	r2, #0
 800aac2:	f244 0101 	movw	r1, #16385	; 0x4001
 800aac6:	4853      	ldr	r0, [pc, #332]	; (800ac14 <MX_GPIO_Init+0x23c>)
 800aac8:	f001 f8ec 	bl	800bca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800aacc:	2200      	movs	r2, #0
 800aace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aad2:	4851      	ldr	r0, [pc, #324]	; (800ac18 <MX_GPIO_Init+0x240>)
 800aad4:	f001 f8e6 	bl	800bca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800aad8:	2200      	movs	r2, #0
 800aada:	2102      	movs	r1, #2
 800aadc:	484f      	ldr	r0, [pc, #316]	; (800ac1c <MX_GPIO_Init+0x244>)
 800aade:	f001 f8e1 	bl	800bca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800aae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aae8:	2300      	movs	r3, #0
 800aaea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800aaf0:	f107 031c 	add.w	r3, r7, #28
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	484a      	ldr	r0, [pc, #296]	; (800ac20 <MX_GPIO_Init+0x248>)
 800aaf8:	f000 ff24 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800aafc:	2332      	movs	r3, #50	; 0x32
 800aafe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab00:	2302      	movs	r3, #2
 800ab02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab0c:	230b      	movs	r3, #11
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab10:	f107 031c 	add.w	r3, r7, #28
 800ab14:	4619      	mov	r1, r3
 800ab16:	4842      	ldr	r0, [pc, #264]	; (800ac20 <MX_GPIO_Init+0x248>)
 800ab18:	f000 ff14 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ab1c:	2386      	movs	r3, #134	; 0x86
 800ab1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab20:	2302      	movs	r3, #2
 800ab22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab2c:	230b      	movs	r3, #11
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab30:	f107 031c 	add.w	r3, r7, #28
 800ab34:	4619      	mov	r1, r3
 800ab36:	483b      	ldr	r0, [pc, #236]	; (800ac24 <MX_GPIO_Init+0x24c>)
 800ab38:	f000 ff04 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab40:	2300      	movs	r3, #0
 800ab42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab48:	f107 031c 	add.w	r3, r7, #28
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4835      	ldr	r0, [pc, #212]	; (800ac24 <MX_GPIO_Init+0x24c>)
 800ab50:	f000 fef8 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800ab54:	f244 0301 	movw	r3, #16385	; 0x4001
 800ab58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab62:	2300      	movs	r3, #0
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab66:	f107 031c 	add.w	r3, r7, #28
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4829      	ldr	r0, [pc, #164]	; (800ac14 <MX_GPIO_Init+0x23c>)
 800ab6e:	f000 fee9 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ab72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab80:	2300      	movs	r3, #0
 800ab82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab84:	230b      	movs	r3, #11
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab88:	f107 031c 	add.w	r3, r7, #28
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4821      	ldr	r0, [pc, #132]	; (800ac14 <MX_GPIO_Init+0x23c>)
 800ab90:	f000 fed8 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800ab94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aba2:	2300      	movs	r3, #0
 800aba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800aba6:	f107 031c 	add.w	r3, r7, #28
 800abaa:	4619      	mov	r1, r3
 800abac:	481a      	ldr	r0, [pc, #104]	; (800ac18 <MX_GPIO_Init+0x240>)
 800abae:	f000 fec9 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800abb2:	2380      	movs	r3, #128	; 0x80
 800abb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800abb6:	4b1c      	ldr	r3, [pc, #112]	; (800ac28 <MX_GPIO_Init+0x250>)
 800abb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800abbe:	f107 031c 	add.w	r3, r7, #28
 800abc2:	4619      	mov	r1, r3
 800abc4:	4819      	ldr	r0, [pc, #100]	; (800ac2c <MX_GPIO_Init+0x254>)
 800abc6:	f000 febd 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800abca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd0:	2302      	movs	r3, #2
 800abd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abd8:	2300      	movs	r3, #0
 800abda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abdc:	230b      	movs	r3, #11
 800abde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800abe0:	f107 031c 	add.w	r3, r7, #28
 800abe4:	4619      	mov	r1, r3
 800abe6:	4811      	ldr	r0, [pc, #68]	; (800ac2c <MX_GPIO_Init+0x254>)
 800abe8:	f000 feac 	bl	800b944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800abec:	2302      	movs	r3, #2
 800abee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abf0:	2301      	movs	r3, #1
 800abf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf4:	2300      	movs	r3, #0
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf8:	2300      	movs	r3, #0
 800abfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800abfc:	f107 031c 	add.w	r3, r7, #28
 800ac00:	4619      	mov	r1, r3
 800ac02:	4806      	ldr	r0, [pc, #24]	; (800ac1c <MX_GPIO_Init+0x244>)
 800ac04:	f000 fe9e 	bl	800b944 <HAL_GPIO_Init>

}
 800ac08:	bf00      	nop
 800ac0a:	3730      	adds	r7, #48	; 0x30
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	58024400 	.word	0x58024400
 800ac14:	58020400 	.word	0x58020400
 800ac18:	58020c00 	.word	0x58020c00
 800ac1c:	58021000 	.word	0x58021000
 800ac20:	58020800 	.word	0x58020800
 800ac24:	58020000 	.word	0x58020000
 800ac28:	11110000 	.word	0x11110000
 800ac2c:	58021800 	.word	0x58021800

0800ac30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d101      	bne.n	800ac46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ac42:	f000 fb0d 	bl	800b260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40014400 	.word	0x40014400

0800ac54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ac58:	b672      	cpsid	i
}
 800ac5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ac5c:	e7fe      	b.n	800ac5c <Error_Handler+0x8>
	...

0800ac60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <HAL_MspInit+0x30>)
 800ac68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac6c:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <HAL_MspInit+0x30>)
 800ac6e:	f043 0302 	orr.w	r3, r3, #2
 800ac72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <HAL_MspInit+0x30>)
 800ac78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	58024400 	.word	0x58024400

0800ac94 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a0b      	ldr	r2, [pc, #44]	; (800acd0 <HAL_CRC_MspInit+0x3c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d10e      	bne.n	800acc4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800aca6:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <HAL_CRC_MspInit+0x40>)
 800aca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acac:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <HAL_CRC_MspInit+0x40>)
 800acae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <HAL_CRC_MspInit+0x40>)
 800acb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	58024c00 	.word	0x58024c00
 800acd4:	58024400 	.word	0x58024400

0800acd8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b0b2      	sub	sp, #200	; 0xc8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	22bc      	movs	r2, #188	; 0xbc
 800ace6:	2100      	movs	r1, #0
 800ace8:	4618      	mov	r0, r3
 800acea:	f00b fc51 	bl	8016590 <memset>
  if(hrng->Instance==RNG)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a17      	ldr	r2, [pc, #92]	; (800ad50 <HAL_RNG_MspInit+0x78>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d126      	bne.n	800ad46 <HAL_RNG_MspInit+0x6e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800acf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800acfc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800acfe:	2300      	movs	r3, #0
 800ad00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad04:	f107 030c 	add.w	r3, r7, #12
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f003 f9e5 	bl	800e0d8 <HAL_RCCEx_PeriphCLKConfig>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800ad14:	f7ff ff9e 	bl	800ac54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ad18:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <HAL_RNG_MspInit+0x7c>)
 800ad1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ad1e:	4a0d      	ldr	r2, [pc, #52]	; (800ad54 <HAL_RNG_MspInit+0x7c>)
 800ad20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad24:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <HAL_RNG_MspInit+0x7c>)
 800ad2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ad2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad32:	60bb      	str	r3, [r7, #8]
 800ad34:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	2050      	movs	r0, #80	; 0x50
 800ad3c:	f000 fb98 	bl	800b470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800ad40:	2050      	movs	r0, #80	; 0x50
 800ad42:	f000 fbaf 	bl	800b4a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800ad46:	bf00      	nop
 800ad48:	37c8      	adds	r7, #200	; 0xc8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	48021800 	.word	0x48021800
 800ad54:	58024400 	.word	0x58024400

0800ad58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b0b8      	sub	sp, #224	; 0xe0
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	609a      	str	r2, [r3, #8]
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad70:	f107 0310 	add.w	r3, r7, #16
 800ad74:	22bc      	movs	r2, #188	; 0xbc
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f00b fc09 	bl	8016590 <memset>
  if(huart->Instance==USART3)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a25      	ldr	r2, [pc, #148]	; (800ae18 <HAL_UART_MspInit+0xc0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d142      	bne.n	800ae0e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad92:	f107 0310 	add.w	r3, r7, #16
 800ad96:	4618      	mov	r0, r3
 800ad98:	f003 f99e 	bl	800e0d8 <HAL_RCCEx_PeriphCLKConfig>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800ada2:	f7ff ff57 	bl	800ac54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800ada8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adac:	4a1b      	ldr	r2, [pc, #108]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800adae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800adb6:	4b19      	ldr	r3, [pc, #100]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800adb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800adc4:	4b15      	ldr	r3, [pc, #84]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800adc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adca:	4a14      	ldr	r2, [pc, #80]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800adcc:	f043 0308 	orr.w	r3, r3, #8
 800add0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_UART_MspInit+0xc4>)
 800add6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adda:	f003 0308 	and.w	r3, r3, #8
 800adde:	60bb      	str	r3, [r7, #8]
 800ade0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800ade2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ade6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adea:	2302      	movs	r3, #2
 800adec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adf6:	2300      	movs	r3, #0
 800adf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800adfc:	2307      	movs	r3, #7
 800adfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ae06:	4619      	mov	r1, r3
 800ae08:	4805      	ldr	r0, [pc, #20]	; (800ae20 <HAL_UART_MspInit+0xc8>)
 800ae0a:	f000 fd9b 	bl	800b944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ae0e:	bf00      	nop
 800ae10:	37e0      	adds	r7, #224	; 0xe0
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40004800 	.word	0x40004800
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	58020c00 	.word	0x58020c00

0800ae24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	; 0x38
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b0f      	cmp	r3, #15
 800ae30:	d844      	bhi.n	800aebc <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800ae32:	2200      	movs	r2, #0
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	2075      	movs	r0, #117	; 0x75
 800ae38:	f000 fb1a 	bl	800b470 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800ae3c:	2075      	movs	r0, #117	; 0x75
 800ae3e:	f000 fb31 	bl	800b4a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800ae42:	4a24      	ldr	r2, [pc, #144]	; (800aed4 <HAL_InitTick+0xb0>)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800ae48:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <HAL_InitTick+0xb4>)
 800ae4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae4e:	4a22      	ldr	r2, [pc, #136]	; (800aed8 <HAL_InitTick+0xb4>)
 800ae50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ae58:	4b1f      	ldr	r3, [pc, #124]	; (800aed8 <HAL_InitTick+0xb4>)
 800ae5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae62:	60bb      	str	r3, [r7, #8]
 800ae64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ae66:	f107 020c 	add.w	r2, r7, #12
 800ae6a:	f107 0310 	add.w	r3, r7, #16
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f003 f8ef 	bl	800e054 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800ae76:	f003 f8d7 	bl	800e028 <HAL_RCC_GetPCLK2Freq>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ae80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae82:	4a16      	ldr	r2, [pc, #88]	; (800aedc <HAL_InitTick+0xb8>)
 800ae84:	fba2 2303 	umull	r2, r3, r2, r3
 800ae88:	0c9b      	lsrs	r3, r3, #18
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800ae8e:	4b14      	ldr	r3, [pc, #80]	; (800aee0 <HAL_InitTick+0xbc>)
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <HAL_InitTick+0xc0>)
 800ae92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800ae94:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <HAL_InitTick+0xbc>)
 800ae96:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae9a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800ae9c:	4a10      	ldr	r2, [pc, #64]	; (800aee0 <HAL_InitTick+0xbc>)
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800aea2:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <HAL_InitTick+0xbc>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aea8:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <HAL_InitTick+0xbc>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800aeae:	480c      	ldr	r0, [pc, #48]	; (800aee0 <HAL_InitTick+0xbc>)
 800aeb0:	f004 fd58 	bl	800f964 <HAL_TIM_Base_Init>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d107      	bne.n	800aeca <HAL_InitTick+0xa6>
 800aeba:	e001      	b.n	800aec0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e005      	b.n	800aecc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800aec0:	4807      	ldr	r0, [pc, #28]	; (800aee0 <HAL_InitTick+0xbc>)
 800aec2:	f004 fdb1 	bl	800fa28 <HAL_TIM_Base_Start_IT>
 800aec6:	4603      	mov	r3, r0
 800aec8:	e000      	b.n	800aecc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	; 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	24008018 	.word	0x24008018
 800aed8:	58024400 	.word	0x58024400
 800aedc:	431bde83 	.word	0x431bde83
 800aee0:	24011774 	.word	0x24011774
 800aee4:	40014400 	.word	0x40014400

0800aee8 <DebugMon_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aeec:	bf00      	nop
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
	...

0800aef8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800aefc:	4802      	ldr	r0, [pc, #8]	; (800af08 <RNG_IRQHandler+0x10>)
 800aefe:	f004 fcae 	bl	800f85e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800af02:	bf00      	nop
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	240116d0 	.word	0x240116d0

0800af0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800af10:	4802      	ldr	r0, [pc, #8]	; (800af1c <OTG_FS_IRQHandler+0x10>)
 800af12:	f001 f837 	bl	800bf84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800af16:	bf00      	nop
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	240344d8 	.word	0x240344d8

0800af20 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800af24:	4802      	ldr	r0, [pc, #8]	; (800af30 <TIM16_IRQHandler+0x10>)
 800af26:	f004 fdef 	bl	800fb08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	24011774 	.word	0x24011774

0800af34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e00a      	b.n	800af5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800af46:	f3af 8000 	nop.w
 800af4a:	4601      	mov	r1, r0
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	60ba      	str	r2, [r7, #8]
 800af52:	b2ca      	uxtb	r2, r1
 800af54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	3301      	adds	r3, #1
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	dbf0      	blt.n	800af46 <_read+0x12>
	}

return len;
 800af64:	687b      	ldr	r3, [r7, #4]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b086      	sub	sp, #24
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af7a:	2300      	movs	r3, #0
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	e009      	b.n	800af94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	60ba      	str	r2, [r7, #8]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fbd9 	bl	800a740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	3301      	adds	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	429a      	cmp	r2, r3
 800af9a:	dbf1      	blt.n	800af80 <_write+0x12>
	}
	return len;
 800af9c:	687b      	ldr	r3, [r7, #4]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <_close>:

int _close(int file)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
	return -1;
 800afae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afce:	605a      	str	r2, [r3, #4]
	return 0;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <_isatty>:

int _isatty(int file)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
	return 1;
 800afe6:	2301      	movs	r3, #1
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
	return 0;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
	...

0800b010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b018:	4a14      	ldr	r2, [pc, #80]	; (800b06c <_sbrk+0x5c>)
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <_sbrk+0x60>)
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <_sbrk+0x64>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b02c:	4b11      	ldr	r3, [pc, #68]	; (800b074 <_sbrk+0x64>)
 800b02e:	4a12      	ldr	r2, [pc, #72]	; (800b078 <_sbrk+0x68>)
 800b030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <_sbrk+0x64>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4413      	add	r3, r2
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d207      	bcs.n	800b050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b040:	f00b f95a 	bl	80162f8 <__errno>
 800b044:	4603      	mov	r3, r0
 800b046:	220c      	movs	r2, #12
 800b048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b04e:	e009      	b.n	800b064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b050:	4b08      	ldr	r3, [pc, #32]	; (800b074 <_sbrk+0x64>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b056:	4b07      	ldr	r3, [pc, #28]	; (800b074 <_sbrk+0x64>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	4a05      	ldr	r2, [pc, #20]	; (800b074 <_sbrk+0x64>)
 800b060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b062:	68fb      	ldr	r3, [r7, #12]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	24080000 	.word	0x24080000
 800b070:	00000400 	.word	0x00000400
 800b074:	240117c0 	.word	0x240117c0
 800b078:	24036000 	.word	0x24036000

0800b07c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b080:	4b39      	ldr	r3, [pc, #228]	; (800b168 <SystemInit+0xec>)
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	4a38      	ldr	r2, [pc, #224]	; (800b168 <SystemInit+0xec>)
 800b088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b08c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b090:	4b36      	ldr	r3, [pc, #216]	; (800b16c <SystemInit+0xf0>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 030f 	and.w	r3, r3, #15
 800b098:	2b06      	cmp	r3, #6
 800b09a:	d807      	bhi.n	800b0ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b09c:	4b33      	ldr	r3, [pc, #204]	; (800b16c <SystemInit+0xf0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f023 030f 	bic.w	r3, r3, #15
 800b0a4:	4a31      	ldr	r2, [pc, #196]	; (800b16c <SystemInit+0xf0>)
 800b0a6:	f043 0307 	orr.w	r3, r3, #7
 800b0aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b0ac:	4b30      	ldr	r3, [pc, #192]	; (800b170 <SystemInit+0xf4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a2f      	ldr	r2, [pc, #188]	; (800b170 <SystemInit+0xf4>)
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b0b8:	4b2d      	ldr	r3, [pc, #180]	; (800b170 <SystemInit+0xf4>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b0be:	4b2c      	ldr	r3, [pc, #176]	; (800b170 <SystemInit+0xf4>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	492b      	ldr	r1, [pc, #172]	; (800b170 <SystemInit+0xf4>)
 800b0c4:	4b2b      	ldr	r3, [pc, #172]	; (800b174 <SystemInit+0xf8>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b0ca:	4b28      	ldr	r3, [pc, #160]	; (800b16c <SystemInit+0xf0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0308 	and.w	r3, r3, #8
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b0d6:	4b25      	ldr	r3, [pc, #148]	; (800b16c <SystemInit+0xf0>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f023 030f 	bic.w	r3, r3, #15
 800b0de:	4a23      	ldr	r2, [pc, #140]	; (800b16c <SystemInit+0xf0>)
 800b0e0:	f043 0307 	orr.w	r3, r3, #7
 800b0e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b0e6:	4b22      	ldr	r3, [pc, #136]	; (800b170 <SystemInit+0xf4>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b0ec:	4b20      	ldr	r3, [pc, #128]	; (800b170 <SystemInit+0xf4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b0f2:	4b1f      	ldr	r3, [pc, #124]	; (800b170 <SystemInit+0xf4>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b0f8:	4b1d      	ldr	r3, [pc, #116]	; (800b170 <SystemInit+0xf4>)
 800b0fa:	4a1f      	ldr	r2, [pc, #124]	; (800b178 <SystemInit+0xfc>)
 800b0fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b0fe:	4b1c      	ldr	r3, [pc, #112]	; (800b170 <SystemInit+0xf4>)
 800b100:	4a1e      	ldr	r2, [pc, #120]	; (800b17c <SystemInit+0x100>)
 800b102:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b104:	4b1a      	ldr	r3, [pc, #104]	; (800b170 <SystemInit+0xf4>)
 800b106:	4a1e      	ldr	r2, [pc, #120]	; (800b180 <SystemInit+0x104>)
 800b108:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b10a:	4b19      	ldr	r3, [pc, #100]	; (800b170 <SystemInit+0xf4>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b110:	4b17      	ldr	r3, [pc, #92]	; (800b170 <SystemInit+0xf4>)
 800b112:	4a1b      	ldr	r2, [pc, #108]	; (800b180 <SystemInit+0x104>)
 800b114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b116:	4b16      	ldr	r3, [pc, #88]	; (800b170 <SystemInit+0xf4>)
 800b118:	2200      	movs	r2, #0
 800b11a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b11c:	4b14      	ldr	r3, [pc, #80]	; (800b170 <SystemInit+0xf4>)
 800b11e:	4a18      	ldr	r2, [pc, #96]	; (800b180 <SystemInit+0x104>)
 800b120:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b122:	4b13      	ldr	r3, [pc, #76]	; (800b170 <SystemInit+0xf4>)
 800b124:	2200      	movs	r2, #0
 800b126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b128:	4b11      	ldr	r3, [pc, #68]	; (800b170 <SystemInit+0xf4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a10      	ldr	r2, [pc, #64]	; (800b170 <SystemInit+0xf4>)
 800b12e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b134:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <SystemInit+0xf4>)
 800b136:	2200      	movs	r2, #0
 800b138:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <SystemInit+0x108>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b12      	ldr	r3, [pc, #72]	; (800b188 <SystemInit+0x10c>)
 800b140:	4013      	ands	r3, r2
 800b142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b146:	d202      	bcs.n	800b14e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b148:	4b10      	ldr	r3, [pc, #64]	; (800b18c <SystemInit+0x110>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b14e:	4b10      	ldr	r3, [pc, #64]	; (800b190 <SystemInit+0x114>)
 800b150:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b154:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b156:	4b04      	ldr	r3, [pc, #16]	; (800b168 <SystemInit+0xec>)
 800b158:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b15c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b15e:	bf00      	nop
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	e000ed00 	.word	0xe000ed00
 800b16c:	52002000 	.word	0x52002000
 800b170:	58024400 	.word	0x58024400
 800b174:	eaf6ed7f 	.word	0xeaf6ed7f
 800b178:	02020200 	.word	0x02020200
 800b17c:	01ff0000 	.word	0x01ff0000
 800b180:	01010280 	.word	0x01010280
 800b184:	5c001000 	.word	0x5c001000
 800b188:	ffff0000 	.word	0xffff0000
 800b18c:	51008108 	.word	0x51008108
 800b190:	52004000 	.word	0x52004000

0800b194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b194:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b1cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b198:	f7ff ff70 	bl	800b07c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b19c:	480c      	ldr	r0, [pc, #48]	; (800b1d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b19e:	490d      	ldr	r1, [pc, #52]	; (800b1d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b1a0:	4a0d      	ldr	r2, [pc, #52]	; (800b1d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b1a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b1a4:	e002      	b.n	800b1ac <LoopCopyDataInit>

0800b1a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b1a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b1a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b1aa:	3304      	adds	r3, #4

0800b1ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b1ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b1ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b1b0:	d3f9      	bcc.n	800b1a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b1b2:	4a0a      	ldr	r2, [pc, #40]	; (800b1dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b1b4:	4c0a      	ldr	r4, [pc, #40]	; (800b1e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b1b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b1b8:	e001      	b.n	800b1be <LoopFillZerobss>

0800b1ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b1ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b1bc:	3204      	adds	r2, #4

0800b1be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b1be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b1c0:	d3fb      	bcc.n	800b1ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b1c2:	f00b f99f 	bl	8016504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b1c6:	f7ff facd 	bl	800a764 <main>
  bx  lr
 800b1ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b1cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800b1d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b1d4:	24008578 	.word	0x24008578
  ldr r2, =_sidata
 800b1d8:	080174bc 	.word	0x080174bc
  ldr r2, =_sbss
 800b1dc:	24010000 	.word	0x24010000
  ldr r4, =_ebss
 800b1e0:	24034b10 	.word	0x24034b10

0800b1e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b1e4:	e7fe      	b.n	800b1e4 <ADC3_IRQHandler>
	...

0800b1e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1ee:	2003      	movs	r0, #3
 800b1f0:	f000 f933 	bl	800b45a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b1f4:	f002 fd58 	bl	800dca8 <HAL_RCC_GetSysClockFreq>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	4b15      	ldr	r3, [pc, #84]	; (800b250 <HAL_Init+0x68>)
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	f003 030f 	and.w	r3, r3, #15
 800b204:	4913      	ldr	r1, [pc, #76]	; (800b254 <HAL_Init+0x6c>)
 800b206:	5ccb      	ldrb	r3, [r1, r3]
 800b208:	f003 031f 	and.w	r3, r3, #31
 800b20c:	fa22 f303 	lsr.w	r3, r2, r3
 800b210:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b212:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <HAL_Init+0x68>)
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	4a0e      	ldr	r2, [pc, #56]	; (800b254 <HAL_Init+0x6c>)
 800b21c:	5cd3      	ldrb	r3, [r2, r3]
 800b21e:	f003 031f 	and.w	r3, r3, #31
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
 800b228:	4a0b      	ldr	r2, [pc, #44]	; (800b258 <HAL_Init+0x70>)
 800b22a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b22c:	4a0b      	ldr	r2, [pc, #44]	; (800b25c <HAL_Init+0x74>)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b232:	200f      	movs	r0, #15
 800b234:	f7ff fdf6 	bl	800ae24 <HAL_InitTick>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e002      	b.n	800b248 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b242:	f7ff fd0d 	bl	800ac60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	58024400 	.word	0x58024400
 800b254:	240084a8 	.word	0x240084a8
 800b258:	24008014 	.word	0x24008014
 800b25c:	24008010 	.word	0x24008010

0800b260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <HAL_IncTick+0x20>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <HAL_IncTick+0x24>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4413      	add	r3, r2
 800b270:	4a04      	ldr	r2, [pc, #16]	; (800b284 <HAL_IncTick+0x24>)
 800b272:	6013      	str	r3, [r2, #0]
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	2400801c 	.word	0x2400801c
 800b284:	240117c4 	.word	0x240117c4

0800b288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  return uwTick;
 800b28c:	4b03      	ldr	r3, [pc, #12]	; (800b29c <HAL_GetTick+0x14>)
 800b28e:	681b      	ldr	r3, [r3, #0]
}
 800b290:	4618      	mov	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	240117c4 	.word	0x240117c4

0800b2a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b2a8:	f7ff ffee 	bl	800b288 <HAL_GetTick>
 800b2ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2b8:	d005      	beq.n	800b2c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b2ba:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <HAL_Delay+0x44>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b2c6:	bf00      	nop
 800b2c8:	f7ff ffde 	bl	800b288 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d8f7      	bhi.n	800b2c8 <HAL_Delay+0x28>
  {
  }
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	2400801c 	.word	0x2400801c

0800b2e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800b2ec:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <HAL_GetREVID+0x14>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	0c1b      	lsrs	r3, r3, #16
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	5c001000 	.word	0x5c001000

0800b300 <__NVIC_SetPriorityGrouping>:
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <__NVIC_SetPriorityGrouping+0x40>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b31c:	4013      	ands	r3, r2
 800b31e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b328:	4b06      	ldr	r3, [pc, #24]	; (800b344 <__NVIC_SetPriorityGrouping+0x44>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b32e:	4a04      	ldr	r2, [pc, #16]	; (800b340 <__NVIC_SetPriorityGrouping+0x40>)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	60d3      	str	r3, [r2, #12]
}
 800b334:	bf00      	nop
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	e000ed00 	.word	0xe000ed00
 800b344:	05fa0000 	.word	0x05fa0000

0800b348 <__NVIC_GetPriorityGrouping>:
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <__NVIC_GetPriorityGrouping+0x18>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	0a1b      	lsrs	r3, r3, #8
 800b352:	f003 0307 	and.w	r3, r3, #7
}
 800b356:	4618      	mov	r0, r3
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	e000ed00 	.word	0xe000ed00

0800b364 <__NVIC_EnableIRQ>:
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b36e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b372:	2b00      	cmp	r3, #0
 800b374:	db0b      	blt.n	800b38e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	f003 021f 	and.w	r2, r3, #31
 800b37c:	4907      	ldr	r1, [pc, #28]	; (800b39c <__NVIC_EnableIRQ+0x38>)
 800b37e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2001      	movs	r0, #1
 800b386:	fa00 f202 	lsl.w	r2, r0, r2
 800b38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	e000e100 	.word	0xe000e100

0800b3a0 <__NVIC_SetPriority>:
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b3ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	db0a      	blt.n	800b3ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	490c      	ldr	r1, [pc, #48]	; (800b3ec <__NVIC_SetPriority+0x4c>)
 800b3ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3be:	0112      	lsls	r2, r2, #4
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b3c8:	e00a      	b.n	800b3e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	4908      	ldr	r1, [pc, #32]	; (800b3f0 <__NVIC_SetPriority+0x50>)
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	0112      	lsls	r2, r2, #4
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	440b      	add	r3, r1
 800b3de:	761a      	strb	r2, [r3, #24]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	e000e100 	.word	0xe000e100
 800b3f0:	e000ed00 	.word	0xe000ed00

0800b3f4 <NVIC_EncodePriority>:
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b089      	sub	sp, #36	; 0x24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f1c3 0307 	rsb	r3, r3, #7
 800b40e:	2b04      	cmp	r3, #4
 800b410:	bf28      	it	cs
 800b412:	2304      	movcs	r3, #4
 800b414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3304      	adds	r3, #4
 800b41a:	2b06      	cmp	r3, #6
 800b41c:	d902      	bls.n	800b424 <NVIC_EncodePriority+0x30>
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	3b03      	subs	r3, #3
 800b422:	e000      	b.n	800b426 <NVIC_EncodePriority+0x32>
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	43da      	mvns	r2, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	401a      	ands	r2, r3
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b43c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	fa01 f303 	lsl.w	r3, r1, r3
 800b446:	43d9      	mvns	r1, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b44c:	4313      	orrs	r3, r2
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3724      	adds	r7, #36	; 0x24
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ff4c 	bl	800b300 <__NVIC_SetPriorityGrouping>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b47e:	f7ff ff63 	bl	800b348 <__NVIC_GetPriorityGrouping>
 800b482:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	68b9      	ldr	r1, [r7, #8]
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	f7ff ffb3 	bl	800b3f4 <NVIC_EncodePriority>
 800b48e:	4602      	mov	r2, r0
 800b490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ff82 	bl	800b3a0 <__NVIC_SetPriority>
}
 800b49c:	bf00      	nop
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b4ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff ff56 	bl	800b364 <__NVIC_EnableIRQ>
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e054      	b.n	800b57c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7f5b      	ldrb	r3, [r3, #29]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d105      	bne.n	800b4e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fbd6 	bl	800ac94 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10c      	bne.n	800b510 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a22      	ldr	r2, [pc, #136]	; (800b584 <HAL_CRC_Init+0xc4>)
 800b4fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 0218 	bic.w	r2, r2, #24
 800b50c:	609a      	str	r2, [r3, #8]
 800b50e:	e00c      	b.n	800b52a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6899      	ldr	r1, [r3, #8]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	461a      	mov	r2, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f98c 	bl	800b838 <HAL_CRCEx_Polynomial_Set>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e028      	b.n	800b57c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	795b      	ldrb	r3, [r3, #5]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d105      	bne.n	800b53e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b53a:	611a      	str	r2, [r3, #16]
 800b53c:	e004      	b.n	800b548 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	6912      	ldr	r2, [r2, #16]
 800b546:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	695a      	ldr	r2, [r3, #20]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	04c11db7 	.word	0x04c11db7

0800b588 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2202      	movs	r2, #2
 800b59c:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d006      	beq.n	800b5b4 <HAL_CRC_Accumulate+0x2c>
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d829      	bhi.n	800b5fe <HAL_CRC_Accumulate+0x76>
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d019      	beq.n	800b5e2 <HAL_CRC_Accumulate+0x5a>
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d01e      	beq.n	800b5f0 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800b5b2:	e024      	b.n	800b5fe <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	e00a      	b.n	800b5d0 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	441a      	add	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d3f0      	bcc.n	800b5ba <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	613b      	str	r3, [r7, #16]
      break;
 800b5e0:	e00e      	b.n	800b600 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	68b9      	ldr	r1, [r7, #8]
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 f85e 	bl	800b6a8 <CRC_Handle_8>
 800b5ec:	6138      	str	r0, [r7, #16]
      break;
 800b5ee:	e007      	b.n	800b600 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f8e5 	bl	800b7c4 <CRC_Handle_16>
 800b5fa:	6138      	str	r0, [r7, #16]
      break;
 800b5fc:	e000      	b.n	800b600 <HAL_CRC_Accumulate+0x78>
      break;
 800b5fe:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800b606:	693b      	ldr	r3, [r7, #16]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800b61c:	2300      	movs	r3, #0
 800b61e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2202      	movs	r2, #2
 800b624:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689a      	ldr	r2, [r3, #8]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f042 0201 	orr.w	r2, r2, #1
 800b634:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d006      	beq.n	800b64c <HAL_CRC_Calculate+0x3c>
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d829      	bhi.n	800b696 <HAL_CRC_Calculate+0x86>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d019      	beq.n	800b67a <HAL_CRC_Calculate+0x6a>
 800b646:	2b02      	cmp	r3, #2
 800b648:	d01e      	beq.n	800b688 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800b64a:	e024      	b.n	800b696 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e00a      	b.n	800b668 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	441a      	add	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	3301      	adds	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d3f0      	bcc.n	800b652 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	613b      	str	r3, [r7, #16]
      break;
 800b678:	e00e      	b.n	800b698 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 f812 	bl	800b6a8 <CRC_Handle_8>
 800b684:	6138      	str	r0, [r7, #16]
      break;
 800b686:	e007      	b.n	800b698 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 f899 	bl	800b7c4 <CRC_Handle_16>
 800b692:	6138      	str	r0, [r7, #16]
      break;
 800b694:	e000      	b.n	800b698 <HAL_CRC_Calculate+0x88>
      break;
 800b696:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800b69e:	693b      	ldr	r3, [r7, #16]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b089      	sub	sp, #36	; 0x24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	61fb      	str	r3, [r7, #28]
 800b6b8:	e023      	b.n	800b702 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	440b      	add	r3, r1
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b6d4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	3302      	adds	r3, #2
 800b6dc:	68b9      	ldr	r1, [r7, #8]
 800b6de:	440b      	add	r3, r1
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b6e4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	68b9      	ldr	r1, [r7, #8]
 800b6ee:	440b      	add	r3, r1
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b6f8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b6fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	3301      	adds	r3, #1
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	089b      	lsrs	r3, r3, #2
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d3d6      	bcc.n	800b6ba <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d04d      	beq.n	800b7b2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f003 0303 	and.w	r3, r3, #3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d107      	bne.n	800b730 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	4413      	add	r3, r2
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	6812      	ldr	r2, [r2, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	2b02      	cmp	r3, #2
 800b738:	d116      	bne.n	800b768 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	b21a      	sxth	r2, r3
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	3301      	adds	r3, #1
 800b74e:	68b9      	ldr	r1, [r7, #8]
 800b750:	440b      	add	r3, r1
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	b21b      	sxth	r3, r3
 800b756:	4313      	orrs	r3, r2
 800b758:	b21b      	sxth	r3, r3
 800b75a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	8b7a      	ldrh	r2, [r7, #26]
 800b766:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d11f      	bne.n	800b7b2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	4413      	add	r3, r2
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	b21a      	sxth	r2, r3
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	3301      	adds	r3, #1
 800b786:	68b9      	ldr	r1, [r7, #8]
 800b788:	440b      	add	r3, r1
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	b21b      	sxth	r3, r3
 800b78e:	4313      	orrs	r3, r2
 800b790:	b21b      	sxth	r3, r3
 800b792:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	8b7a      	ldrh	r2, [r7, #26]
 800b79e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	3302      	adds	r3, #2
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3724      	adds	r7, #36	; 0x24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	e013      	b.n	800b7fe <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	4413      	add	r3, r2
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	041a      	lsls	r2, r3, #16
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	3302      	adds	r3, #2
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	440b      	add	r3, r1
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3e6      	bcc.n	800b7d6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	4413      	add	r3, r2
 800b820:	881a      	ldrh	r2, [r3, #0]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b848:	231f      	movs	r3, #31
 800b84a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b84c:	bf00      	nop
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	1e5a      	subs	r2, r3, #1
 800b852:	613a      	str	r2, [r7, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d009      	beq.n	800b86c <HAL_CRCEx_Polynomial_Set+0x34>
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	f003 031f 	and.w	r3, r3, #31
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	fa22 f303 	lsr.w	r3, r2, r3
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d0f0      	beq.n	800b84e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b18      	cmp	r3, #24
 800b870:	d846      	bhi.n	800b900 <HAL_CRCEx_Polynomial_Set+0xc8>
 800b872:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <HAL_CRCEx_Polynomial_Set+0x40>)
 800b874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b878:	0800b907 	.word	0x0800b907
 800b87c:	0800b901 	.word	0x0800b901
 800b880:	0800b901 	.word	0x0800b901
 800b884:	0800b901 	.word	0x0800b901
 800b888:	0800b901 	.word	0x0800b901
 800b88c:	0800b901 	.word	0x0800b901
 800b890:	0800b901 	.word	0x0800b901
 800b894:	0800b901 	.word	0x0800b901
 800b898:	0800b8f5 	.word	0x0800b8f5
 800b89c:	0800b901 	.word	0x0800b901
 800b8a0:	0800b901 	.word	0x0800b901
 800b8a4:	0800b901 	.word	0x0800b901
 800b8a8:	0800b901 	.word	0x0800b901
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b901 	.word	0x0800b901
 800b8b4:	0800b901 	.word	0x0800b901
 800b8b8:	0800b8e9 	.word	0x0800b8e9
 800b8bc:	0800b901 	.word	0x0800b901
 800b8c0:	0800b901 	.word	0x0800b901
 800b8c4:	0800b901 	.word	0x0800b901
 800b8c8:	0800b901 	.word	0x0800b901
 800b8cc:	0800b901 	.word	0x0800b901
 800b8d0:	0800b901 	.word	0x0800b901
 800b8d4:	0800b901 	.word	0x0800b901
 800b8d8:	0800b8dd 	.word	0x0800b8dd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b06      	cmp	r3, #6
 800b8e0:	d913      	bls.n	800b90a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b8e6:	e010      	b.n	800b90a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b07      	cmp	r3, #7
 800b8ec:	d90f      	bls.n	800b90e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b8f2:	e00c      	b.n	800b90e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b0f      	cmp	r3, #15
 800b8f8:	d90b      	bls.n	800b912 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b8fe:	e008      	b.n	800b912 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
      break;
 800b904:	e006      	b.n	800b914 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b906:	bf00      	nop
 800b908:	e004      	b.n	800b914 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b90a:	bf00      	nop
 800b90c:	e002      	b.n	800b914 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b912:	bf00      	nop
  }
  if (status == HAL_OK)
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10d      	bne.n	800b936 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f023 0118 	bic.w	r1, r3, #24
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	430a      	orrs	r2, r1
 800b934:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b944:	b480      	push	{r7}
 800b946:	b089      	sub	sp, #36	; 0x24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b952:	4b89      	ldr	r3, [pc, #548]	; (800bb78 <HAL_GPIO_Init+0x234>)
 800b954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b956:	e194      	b.n	800bc82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	2101      	movs	r1, #1
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	fa01 f303 	lsl.w	r3, r1, r3
 800b964:	4013      	ands	r3, r2
 800b966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 8186 	beq.w	800bc7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d00b      	beq.n	800b990 <HAL_GPIO_Init+0x4c>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d007      	beq.n	800b990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b984:	2b11      	cmp	r3, #17
 800b986:	d003      	beq.n	800b990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	2b12      	cmp	r3, #18
 800b98e:	d130      	bne.n	800b9f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	2203      	movs	r2, #3
 800b99c:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a0:	43db      	mvns	r3, r3
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	68da      	ldr	r2, [r3, #12]
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	69ba      	ldr	r2, [r7, #24]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ce:	43db      	mvns	r3, r3
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	091b      	lsrs	r3, r3, #4
 800b9dc:	f003 0201 	and.w	r2, r3, #1
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ba02:	43db      	mvns	r3, r3
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	4013      	ands	r3, r2
 800ba08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	fa02 f303 	lsl.w	r3, r2, r3
 800ba16:	69ba      	ldr	r2, [r7, #24]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d003      	beq.n	800ba32 <HAL_GPIO_Init+0xee>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2b12      	cmp	r3, #18
 800ba30:	d123      	bne.n	800ba7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	08da      	lsrs	r2, r3, #3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3208      	adds	r2, #8
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	f003 0307 	and.w	r3, r3, #7
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	220f      	movs	r2, #15
 800ba4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4e:	43db      	mvns	r3, r3
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	4013      	ands	r3, r2
 800ba54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	691a      	ldr	r2, [r3, #16]
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	f003 0307 	and.w	r3, r3, #7
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	fa02 f303 	lsl.w	r3, r2, r3
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	08da      	lsrs	r2, r3, #3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3208      	adds	r2, #8
 800ba74:	69b9      	ldr	r1, [r7, #24]
 800ba76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	2203      	movs	r2, #3
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	43db      	mvns	r3, r3
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f003 0203 	and.w	r2, r3, #3
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	fa02 f303 	lsl.w	r3, r2, r3
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80e0 	beq.w	800bc7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800babc:	4b2f      	ldr	r3, [pc, #188]	; (800bb7c <HAL_GPIO_Init+0x238>)
 800babe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bac2:	4a2e      	ldr	r2, [pc, #184]	; (800bb7c <HAL_GPIO_Init+0x238>)
 800bac4:	f043 0302 	orr.w	r3, r3, #2
 800bac8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bacc:	4b2b      	ldr	r3, [pc, #172]	; (800bb7c <HAL_GPIO_Init+0x238>)
 800bace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bada:	4a29      	ldr	r2, [pc, #164]	; (800bb80 <HAL_GPIO_Init+0x23c>)
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	089b      	lsrs	r3, r3, #2
 800bae0:	3302      	adds	r3, #2
 800bae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	220f      	movs	r2, #15
 800baf2:	fa02 f303 	lsl.w	r3, r2, r3
 800baf6:	43db      	mvns	r3, r3
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	4013      	ands	r3, r2
 800bafc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a20      	ldr	r2, [pc, #128]	; (800bb84 <HAL_GPIO_Init+0x240>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d052      	beq.n	800bbac <HAL_GPIO_Init+0x268>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1f      	ldr	r2, [pc, #124]	; (800bb88 <HAL_GPIO_Init+0x244>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d031      	beq.n	800bb72 <HAL_GPIO_Init+0x22e>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a1e      	ldr	r2, [pc, #120]	; (800bb8c <HAL_GPIO_Init+0x248>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d02b      	beq.n	800bb6e <HAL_GPIO_Init+0x22a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a1d      	ldr	r2, [pc, #116]	; (800bb90 <HAL_GPIO_Init+0x24c>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d025      	beq.n	800bb6a <HAL_GPIO_Init+0x226>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a1c      	ldr	r2, [pc, #112]	; (800bb94 <HAL_GPIO_Init+0x250>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d01f      	beq.n	800bb66 <HAL_GPIO_Init+0x222>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a1b      	ldr	r2, [pc, #108]	; (800bb98 <HAL_GPIO_Init+0x254>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d019      	beq.n	800bb62 <HAL_GPIO_Init+0x21e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a1a      	ldr	r2, [pc, #104]	; (800bb9c <HAL_GPIO_Init+0x258>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d013      	beq.n	800bb5e <HAL_GPIO_Init+0x21a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a19      	ldr	r2, [pc, #100]	; (800bba0 <HAL_GPIO_Init+0x25c>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00d      	beq.n	800bb5a <HAL_GPIO_Init+0x216>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a18      	ldr	r2, [pc, #96]	; (800bba4 <HAL_GPIO_Init+0x260>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d007      	beq.n	800bb56 <HAL_GPIO_Init+0x212>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a17      	ldr	r2, [pc, #92]	; (800bba8 <HAL_GPIO_Init+0x264>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d101      	bne.n	800bb52 <HAL_GPIO_Init+0x20e>
 800bb4e:	2309      	movs	r3, #9
 800bb50:	e02d      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb52:	230a      	movs	r3, #10
 800bb54:	e02b      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb56:	2308      	movs	r3, #8
 800bb58:	e029      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb5a:	2307      	movs	r3, #7
 800bb5c:	e027      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb5e:	2306      	movs	r3, #6
 800bb60:	e025      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb62:	2305      	movs	r3, #5
 800bb64:	e023      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb66:	2304      	movs	r3, #4
 800bb68:	e021      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	e01f      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e01d      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e01b      	b.n	800bbae <HAL_GPIO_Init+0x26a>
 800bb76:	bf00      	nop
 800bb78:	58000080 	.word	0x58000080
 800bb7c:	58024400 	.word	0x58024400
 800bb80:	58000400 	.word	0x58000400
 800bb84:	58020000 	.word	0x58020000
 800bb88:	58020400 	.word	0x58020400
 800bb8c:	58020800 	.word	0x58020800
 800bb90:	58020c00 	.word	0x58020c00
 800bb94:	58021000 	.word	0x58021000
 800bb98:	58021400 	.word	0x58021400
 800bb9c:	58021800 	.word	0x58021800
 800bba0:	58021c00 	.word	0x58021c00
 800bba4:	58022000 	.word	0x58022000
 800bba8:	58022400 	.word	0x58022400
 800bbac:	2300      	movs	r3, #0
 800bbae:	69fa      	ldr	r2, [r7, #28]
 800bbb0:	f002 0203 	and.w	r2, r2, #3
 800bbb4:	0092      	lsls	r2, r2, #2
 800bbb6:	4093      	lsls	r3, r2
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bbbe:	4938      	ldr	r1, [pc, #224]	; (800bca0 <HAL_GPIO_Init+0x35c>)
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	089b      	lsrs	r3, r3, #2
 800bbc4:	3302      	adds	r3, #2
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	43db      	mvns	r3, r3
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	43db      	mvns	r3, r3
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	4013      	ands	r3, r2
 800bc04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bc12:	69ba      	ldr	r2, [r7, #24]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bc20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	43db      	mvns	r3, r3
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	4013      	ands	r3, r2
 800bc30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bc46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bc4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	43db      	mvns	r3, r3
 800bc5a:	69ba      	ldr	r2, [r7, #24]
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bc74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f47f ae63 	bne.w	800b958 <HAL_GPIO_Init+0x14>
  }
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	3724      	adds	r7, #36	; 0x24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	58000400 	.word	0x58000400

0800bca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	807b      	strh	r3, [r7, #2]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bcb4:	787b      	ldrb	r3, [r7, #1]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bcba:	887a      	ldrh	r2, [r7, #2]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bcc0:	e003      	b.n	800bcca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bcc2:	887b      	ldrh	r3, [r7, #2]
 800bcc4:	041a      	lsls	r2, r3, #16
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	619a      	str	r2, [r3, #24]
}
 800bcca:	bf00      	nop
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bcd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd8:	b08f      	sub	sp, #60	; 0x3c
 800bcda:	af0a      	add	r7, sp, #40	; 0x28
 800bcdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e116      	b.n	800bf16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d106      	bne.n	800bd08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f009 ffb2 	bl	8015c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2203      	movs	r2, #3
 800bd0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f005 facf 	bl	80112ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	603b      	str	r3, [r7, #0]
 800bd32:	687e      	ldr	r6, [r7, #4]
 800bd34:	466d      	mov	r5, sp
 800bd36:	f106 0410 	add.w	r4, r6, #16
 800bd3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd42:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bd46:	e885 0003 	stmia.w	r5, {r0, r1}
 800bd4a:	1d33      	adds	r3, r6, #4
 800bd4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd4e:	6838      	ldr	r0, [r7, #0]
 800bd50:	f005 f99a 	bl	8011088 <USB_CoreInit>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e0d7      	b.n	800bf16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f005 fabd 	bl	80112ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
 800bd76:	e04a      	b.n	800be0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bd78:	7bfa      	ldrb	r2, [r7, #15]
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	1a9b      	subs	r3, r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	440b      	add	r3, r1
 800bd86:	333d      	adds	r3, #61	; 0x3d
 800bd88:	2201      	movs	r2, #1
 800bd8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bd8c:	7bfa      	ldrb	r2, [r7, #15]
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	4613      	mov	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	333c      	adds	r3, #60	; 0x3c
 800bd9c:	7bfa      	ldrb	r2, [r7, #15]
 800bd9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bda0:	7bfa      	ldrb	r2, [r7, #15]
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
 800bda4:	b298      	uxth	r0, r3
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	1a9b      	subs	r3, r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3342      	adds	r3, #66	; 0x42
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bdb8:	7bfa      	ldrb	r2, [r7, #15]
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	333f      	adds	r3, #63	; 0x3f
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bdcc:	7bfa      	ldrb	r2, [r7, #15]
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	1a9b      	subs	r3, r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	3344      	adds	r3, #68	; 0x44
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bde0:	7bfa      	ldrb	r2, [r7, #15]
 800bde2:	6879      	ldr	r1, [r7, #4]
 800bde4:	4613      	mov	r3, r2
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	1a9b      	subs	r3, r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	3348      	adds	r3, #72	; 0x48
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bdf4:	7bfa      	ldrb	r2, [r7, #15]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	440b      	add	r3, r1
 800be02:	3350      	adds	r3, #80	; 0x50
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	3301      	adds	r3, #1
 800be0c:	73fb      	strb	r3, [r7, #15]
 800be0e:	7bfa      	ldrb	r2, [r7, #15]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	429a      	cmp	r2, r3
 800be16:	d3af      	bcc.n	800bd78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
 800be1c:	e044      	b.n	800bea8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800be1e:	7bfa      	ldrb	r2, [r7, #15]
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800be30:	2200      	movs	r2, #0
 800be32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800be34:	7bfa      	ldrb	r2, [r7, #15]
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	4613      	mov	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800be46:	7bfa      	ldrb	r2, [r7, #15]
 800be48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800be4a:	7bfa      	ldrb	r2, [r7, #15]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800be60:	7bfa      	ldrb	r2, [r7, #15]
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800be76:	7bfa      	ldrb	r2, [r7, #15]
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800be8c:	7bfa      	ldrb	r2, [r7, #15]
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	1a9b      	subs	r3, r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	440b      	add	r3, r1
 800be9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	3301      	adds	r3, #1
 800bea6:	73fb      	strb	r3, [r7, #15]
 800bea8:	7bfa      	ldrb	r2, [r7, #15]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d3b5      	bcc.n	800be1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	687e      	ldr	r6, [r7, #4]
 800beba:	466d      	mov	r5, sp
 800bebc:	f106 0410 	add.w	r4, r6, #16
 800bec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800becc:	e885 0003 	stmia.w	r5, {r0, r1}
 800bed0:	1d33      	adds	r3, r6, #4
 800bed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bed4:	6838      	ldr	r0, [r7, #0]
 800bed6:	f005 fa33 	bl	8011340 <USB_DevInit>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2202      	movs	r2, #2
 800bee4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e014      	b.n	800bf16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d102      	bne.n	800bf0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 f891 	bl	800d02c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f006 fab3 	bl	801247a <USB_DevDisconnect>

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_PCD_Start+0x1c>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e020      	b.n	800bf7c <HAL_PCD_Start+0x5e>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d109      	bne.n	800bf5e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d005      	beq.n	800bf5e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f005 f9a0 	bl	80112a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f006 fa63 	bl	8012438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b08d      	sub	sp, #52	; 0x34
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f006 fb21 	bl	80125e2 <USB_GetMode>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f040 83ca 	bne.w	800c73c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f006 fa85 	bl	80124bc <USB_ReadInterrupts>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 83c0 	beq.w	800c73a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f006 fa7c 	bl	80124bc <USB_ReadInterrupts>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f003 0302 	and.w	r3, r3, #2
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d107      	bne.n	800bfde <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	695a      	ldr	r2, [r3, #20]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f002 0202 	and.w	r2, r2, #2
 800bfdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f006 fa6a 	bl	80124bc <USB_ReadInterrupts>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f003 0310 	and.w	r3, r3, #16
 800bfee:	2b10      	cmp	r3, #16
 800bff0:	d161      	bne.n	800c0b6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	699a      	ldr	r2, [r3, #24]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 0210 	bic.w	r2, r2, #16
 800c000:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	f003 020f 	and.w	r2, r3, #15
 800c00e:	4613      	mov	r3, r2
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	3304      	adds	r3, #4
 800c020:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	0c5b      	lsrs	r3, r3, #17
 800c026:	f003 030f 	and.w	r3, r3, #15
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d124      	bne.n	800c078 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c034:	4013      	ands	r3, r2
 800c036:	2b00      	cmp	r3, #0
 800c038:	d035      	beq.n	800c0a6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	091b      	lsrs	r3, r3, #4
 800c042:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c048:	b29b      	uxth	r3, r3
 800c04a:	461a      	mov	r2, r3
 800c04c:	6a38      	ldr	r0, [r7, #32]
 800c04e:	f006 f8a1 	bl	8012194 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	68da      	ldr	r2, [r3, #12]
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	091b      	lsrs	r3, r3, #4
 800c05a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c05e:	441a      	add	r2, r3
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	091b      	lsrs	r3, r3, #4
 800c06c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c070:	441a      	add	r2, r3
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	619a      	str	r2, [r3, #24]
 800c076:	e016      	b.n	800c0a6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	0c5b      	lsrs	r3, r3, #17
 800c07c:	f003 030f 	and.w	r3, r3, #15
 800c080:	2b06      	cmp	r3, #6
 800c082:	d110      	bne.n	800c0a6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c08a:	2208      	movs	r2, #8
 800c08c:	4619      	mov	r1, r3
 800c08e:	6a38      	ldr	r0, [r7, #32]
 800c090:	f006 f880 	bl	8012194 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	699a      	ldr	r2, [r3, #24]
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	091b      	lsrs	r3, r3, #4
 800c09c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c0a0:	441a      	add	r2, r3
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699a      	ldr	r2, [r3, #24]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f042 0210 	orr.w	r2, r2, #16
 800c0b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f006 f9fe 	bl	80124bc <USB_ReadInterrupts>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c0ca:	d16e      	bne.n	800c1aa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f006 fa04 	bl	80124e2 <USB_ReadDevAllOutEpInterrupt>
 800c0da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c0dc:	e062      	b.n	800c1a4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d057      	beq.n	800c198 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ee:	b2d2      	uxtb	r2, r2
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f006 fa29 	bl	801254a <USB_ReadDevOutEPInterrupt>
 800c0f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00c      	beq.n	800c11e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c110:	461a      	mov	r2, r3
 800c112:	2301      	movs	r3, #1
 800c114:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fddd 	bl	800ccd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	f003 0308 	and.w	r3, r3, #8
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00c      	beq.n	800c142 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c134:	461a      	mov	r2, r3
 800c136:	2308      	movs	r3, #8
 800c138:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c13a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fed7 	bl	800cef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f003 0310 	and.w	r3, r3, #16
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d008      	beq.n	800c15e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c158:	461a      	mov	r2, r3
 800c15a:	2310      	movs	r3, #16
 800c15c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b00      	cmp	r3, #0
 800c166:	d008      	beq.n	800c17a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c174:	461a      	mov	r2, r3
 800c176:	2320      	movs	r3, #32
 800c178:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d009      	beq.n	800c198 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	461a      	mov	r2, r3
 800c192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c196:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	3301      	adds	r3, #1
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	085b      	lsrs	r3, r3, #1
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d199      	bne.n	800c0de <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f006 f984 	bl	80124bc <USB_ReadInterrupts>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1be:	f040 80c0 	bne.w	800c342 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f006 f9a5 	bl	8012516 <USB_ReadDevAllInEpInterrupt>
 800c1cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c1d2:	e0b2      	b.n	800c33a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 80a7 	beq.w	800c32e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e6:	b2d2      	uxtb	r2, r2
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f006 f9cb 	bl	8012586 <USB_ReadDevInEPInterrupt>
 800c1f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d057      	beq.n	800c2ac <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	f003 030f 	and.w	r3, r3, #15
 800c202:	2201      	movs	r2, #1
 800c204:	fa02 f303 	lsl.w	r3, r2, r3
 800c208:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	43db      	mvns	r3, r3
 800c216:	69f9      	ldr	r1, [r7, #28]
 800c218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c21c:	4013      	ands	r3, r2
 800c21e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	461a      	mov	r2, r3
 800c22e:	2301      	movs	r3, #1
 800c230:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d132      	bne.n	800c2a0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c23e:	4613      	mov	r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	440b      	add	r3, r1
 800c248:	3348      	adds	r3, #72	; 0x48
 800c24a:	6819      	ldr	r1, [r3, #0]
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c250:	4613      	mov	r3, r2
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4403      	add	r3, r0
 800c25a:	3344      	adds	r3, #68	; 0x44
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4419      	add	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c264:	4613      	mov	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4403      	add	r3, r0
 800c26e:	3348      	adds	r3, #72	; 0x48
 800c270:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	2b00      	cmp	r3, #0
 800c276:	d113      	bne.n	800c2a0 <HAL_PCD_IRQHandler+0x31c>
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27c:	4613      	mov	r3, r2
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	1a9b      	subs	r3, r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	440b      	add	r3, r1
 800c286:	3350      	adds	r3, #80	; 0x50
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d108      	bne.n	800c2a0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c298:	461a      	mov	r2, r3
 800c29a:	2101      	movs	r1, #1
 800c29c:	f006 f9d4 	bl	8012648 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f009 fd8f 	bl	8015dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f003 0308 	and.w	r3, r3, #8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d008      	beq.n	800c2c8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	015a      	lsls	r2, r3, #5
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	4413      	add	r3, r2
 800c2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f003 0310 	and.w	r3, r3, #16
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d008      	beq.n	800c2e4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2de:	461a      	mov	r2, r3
 800c2e0:	2310      	movs	r3, #16
 800c2e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	015a      	lsls	r2, r3, #5
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	2340      	movs	r3, #64	; 0x40
 800c2fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d008      	beq.n	800c31c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	015a      	lsls	r2, r3, #5
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	4413      	add	r3, r2
 800c312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c316:	461a      	mov	r2, r3
 800c318:	2302      	movs	r3, #2
 800c31a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fc48 	bl	800cbbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	3301      	adds	r3, #1
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f47f af49 	bne.w	800c1d4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f006 f8b8 	bl	80124bc <USB_ReadInterrupts>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c356:	d122      	bne.n	800c39e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c372:	2b01      	cmp	r3, #1
 800c374:	d108      	bne.n	800c388 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c37e:	2100      	movs	r1, #0
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fe77 	bl	800d074 <HAL_PCDEx_LPM_Callback>
 800c386:	e002      	b.n	800c38e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f009 fd95 	bl	8015eb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	695a      	ldr	r2, [r3, #20]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c39c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f006 f88a 	bl	80124bc <USB_ReadInterrupts>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3b2:	d112      	bne.n	800c3da <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d102      	bne.n	800c3ca <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f009 fd51 	bl	8015e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	695a      	ldr	r2, [r3, #20]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c3d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f006 f86c 	bl	80124bc <USB_ReadInterrupts>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ee:	d121      	bne.n	800c434 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695a      	ldr	r2, [r3, #20]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800c3fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c406:	2b00      	cmp	r3, #0
 800c408:	d111      	bne.n	800c42e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c418:	089b      	lsrs	r3, r3, #2
 800c41a:	f003 020f 	and.w	r2, r3, #15
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c424:	2101      	movs	r1, #1
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fe24 	bl	800d074 <HAL_PCDEx_LPM_Callback>
 800c42c:	e002      	b.n	800c434 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f009 fd1c 	bl	8015e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f006 f83f 	bl	80124bc <USB_ReadInterrupts>
 800c43e:	4603      	mov	r3, r0
 800c440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c448:	f040 80c7 	bne.w	800c5da <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c45a:	f023 0301 	bic.w	r3, r3, #1
 800c45e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2110      	movs	r1, #16
 800c466:	4618      	mov	r0, r3
 800c468:	f005 f8c8 	bl	80115fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c470:	e056      	b.n	800c520 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47e:	461a      	mov	r2, r3
 800c480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c484:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c496:	0151      	lsls	r1, r2, #5
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	440a      	add	r2, r1
 800c49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4b6:	0151      	lsls	r1, r2, #5
 800c4b8:	69fa      	ldr	r2, [r7, #28]
 800c4ba:	440a      	add	r2, r1
 800c4bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ea:	0151      	lsls	r1, r2, #5
 800c4ec:	69fa      	ldr	r2, [r7, #28]
 800c4ee:	440a      	add	r2, r1
 800c4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c50a:	0151      	lsls	r1, r2, #5
 800c50c:	69fa      	ldr	r2, [r7, #28]
 800c50e:	440a      	add	r2, r1
 800c510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c518:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	3301      	adds	r3, #1
 800c51e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c526:	429a      	cmp	r2, r3
 800c528:	d3a3      	bcc.n	800c472 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c538:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c53c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c542:	2b00      	cmp	r3, #0
 800c544:	d016      	beq.n	800c574 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c556:	f043 030b 	orr.w	r3, r3, #11
 800c55a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c566:	69fa      	ldr	r2, [r7, #28]
 800c568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c56c:	f043 030b 	orr.w	r3, r3, #11
 800c570:	6453      	str	r3, [r2, #68]	; 0x44
 800c572:	e015      	b.n	800c5a0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57a:	695a      	ldr	r2, [r3, #20]
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	4619      	mov	r1, r3
 800c584:	f242 032b 	movw	r3, #8235	; 0x202b
 800c588:	4313      	orrs	r3, r2
 800c58a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	69fa      	ldr	r2, [r7, #28]
 800c596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c59a:	f043 030b 	orr.w	r3, r3, #11
 800c59e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	f006 f83f 	bl	8012648 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	695a      	ldr	r2, [r3, #20]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c5d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f005 ff6c 	bl	80124bc <USB_ReadInterrupts>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ee:	d124      	bne.n	800c63a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f006 f803 	bl	8012600 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f005 f85d 	bl	80116be <USB_GetDevSpeed>
 800c604:	4603      	mov	r3, r0
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681c      	ldr	r4, [r3, #0]
 800c610:	f001 fcc4 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800c614:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	461a      	mov	r2, r3
 800c61e:	4620      	mov	r0, r4
 800c620:	f004 fda0 	bl	8011164 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f009 fbf8 	bl	8015e1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	695a      	ldr	r2, [r3, #20]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c638:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	f005 ff3c 	bl	80124bc <USB_ReadInterrupts>
 800c644:	4603      	mov	r3, r0
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	2b08      	cmp	r3, #8
 800c64c:	d10a      	bne.n	800c664 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f009 fbd5 	bl	8015dfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695a      	ldr	r2, [r3, #20]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f002 0208 	and.w	r2, r2, #8
 800c662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f005 ff27 	bl	80124bc <USB_ReadInterrupts>
 800c66e:	4603      	mov	r3, r0
 800c670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c678:	d10f      	bne.n	800c69a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c67a:	2300      	movs	r3, #0
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	b2db      	uxtb	r3, r3
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f009 fc37 	bl	8015ef8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	695a      	ldr	r2, [r3, #20]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f005 ff0c 	bl	80124bc <USB_ReadInterrupts>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6ae:	d10f      	bne.n	800c6d0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f009 fc0a 	bl	8015ed4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	695a      	ldr	r2, [r3, #20]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c6ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f005 fef1 	bl	80124bc <USB_ReadInterrupts>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e4:	d10a      	bne.n	800c6fc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f009 fc18 	bl	8015f1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	695a      	ldr	r2, [r3, #20]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c6fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	f005 fedb 	bl	80124bc <USB_ReadInterrupts>
 800c706:	4603      	mov	r3, r0
 800c708:	f003 0304 	and.w	r3, r3, #4
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d115      	bne.n	800c73c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f009 fc08 	bl	8015f38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6859      	ldr	r1, [r3, #4]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	430a      	orrs	r2, r1
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	e000      	b.n	800c73c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800c73a:	bf00      	nop
    }
  }
}
 800c73c:	3734      	adds	r7, #52	; 0x34
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd90      	pop	{r4, r7, pc}

0800c742 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c754:	2b01      	cmp	r3, #1
 800c756:	d101      	bne.n	800c75c <HAL_PCD_SetAddress+0x1a>
 800c758:	2302      	movs	r3, #2
 800c75a:	e013      	b.n	800c784 <HAL_PCD_SetAddress+0x42>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f005 fe39 	bl	80123ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	4608      	mov	r0, r1
 800c796:	4611      	mov	r1, r2
 800c798:	461a      	mov	r2, r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	70fb      	strb	r3, [r7, #3]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	803b      	strh	r3, [r7, #0]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c7aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	da0f      	bge.n	800c7d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7b2:	78fb      	ldrb	r3, [r7, #3]
 800c7b4:	f003 020f 	and.w	r2, r3, #15
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	3338      	adds	r3, #56	; 0x38
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	705a      	strb	r2, [r3, #1]
 800c7d0:	e00f      	b.n	800c7f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	4613      	mov	r3, r2
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	1a9b      	subs	r3, r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	f003 030f 	and.w	r3, r3, #15
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c7fe:	883a      	ldrh	r2, [r7, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	78ba      	ldrb	r2, [r7, #2]
 800c808:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d004      	beq.n	800c81c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c81c:	78bb      	ldrb	r3, [r7, #2]
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d102      	bne.n	800c828 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d101      	bne.n	800c836 <HAL_PCD_EP_Open+0xaa>
 800c832:	2302      	movs	r3, #2
 800c834:	e00e      	b.n	800c854 <HAL_PCD_EP_Open+0xc8>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	4618      	mov	r0, r3
 800c846:	f004 ff5f 	bl	8011708 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c852:	7afb      	ldrb	r3, [r7, #11]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da0f      	bge.n	800c890 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	f003 020f 	and.w	r2, r3, #15
 800c876:	4613      	mov	r3, r2
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	3338      	adds	r3, #56	; 0x38
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	3304      	adds	r3, #4
 800c886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2201      	movs	r2, #1
 800c88c:	705a      	strb	r2, [r3, #1]
 800c88e:	e00f      	b.n	800c8b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	f003 020f 	and.w	r2, r3, #15
 800c896:	4613      	mov	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d101      	bne.n	800c8ca <HAL_PCD_EP_Close+0x6e>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e00e      	b.n	800c8e8 <HAL_PCD_EP_Close+0x8c>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68f9      	ldr	r1, [r7, #12]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f004 ff9d 	bl	8011818 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c900:	7afb      	ldrb	r3, [r7, #11]
 800c902:	f003 020f 	and.w	r2, r3, #15
 800c906:	4613      	mov	r3, r2
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	3304      	adds	r3, #4
 800c918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	2200      	movs	r2, #0
 800c92a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2200      	movs	r2, #0
 800c930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d102      	bne.n	800c94c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	f003 030f 	and.w	r3, r3, #15
 800c952:	2b00      	cmp	r3, #0
 800c954:	d109      	bne.n	800c96a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	461a      	mov	r2, r3
 800c962:	6979      	ldr	r1, [r7, #20]
 800c964:	f005 fa80 	bl	8011e68 <USB_EP0StartXfer>
 800c968:	e008      	b.n	800c97c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	461a      	mov	r2, r3
 800c976:	6979      	ldr	r1, [r7, #20]
 800c978:	f005 f82a 	bl	80119d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	460b      	mov	r3, r1
 800c990:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c992:	78fb      	ldrb	r3, [r7, #3]
 800c994:	f003 020f 	and.w	r2, r3, #15
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	4613      	mov	r3, r2
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	1a9b      	subs	r3, r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	440b      	add	r3, r1
 800c9a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c9a8:	681b      	ldr	r3, [r3, #0]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b086      	sub	sp, #24
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	60f8      	str	r0, [r7, #12]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	603b      	str	r3, [r7, #0]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9c6:	7afb      	ldrb	r3, [r7, #11]
 800c9c8:	f003 020f 	and.w	r2, r3, #15
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	1a9b      	subs	r3, r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	3338      	adds	r3, #56	; 0x38
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	4413      	add	r3, r2
 800c9da:	3304      	adds	r3, #4
 800c9dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9f6:	7afb      	ldrb	r3, [r7, #11]
 800c9f8:	f003 030f 	and.w	r3, r3, #15
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d102      	bne.n	800ca10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca10:	7afb      	ldrb	r3, [r7, #11]
 800ca12:	f003 030f 	and.w	r3, r3, #15
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d109      	bne.n	800ca2e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	6979      	ldr	r1, [r7, #20]
 800ca28:	f005 fa1e 	bl	8011e68 <USB_EP0StartXfer>
 800ca2c:	e008      	b.n	800ca40 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6979      	ldr	r1, [r7, #20]
 800ca3c:	f004 ffc8 	bl	80119d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	f003 020f 	and.w	r2, r3, #15
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d901      	bls.n	800ca68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	e050      	b.n	800cb0a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	da0f      	bge.n	800ca90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	f003 020f 	and.w	r2, r3, #15
 800ca76:	4613      	mov	r3, r2
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	1a9b      	subs	r3, r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	3338      	adds	r3, #56	; 0x38
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	4413      	add	r3, r2
 800ca84:	3304      	adds	r3, #4
 800ca86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	705a      	strb	r2, [r3, #1]
 800ca8e:	e00d      	b.n	800caac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	4613      	mov	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	1a9b      	subs	r3, r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	4413      	add	r3, r2
 800caa2:	3304      	adds	r3, #4
 800caa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2201      	movs	r2, #1
 800cab0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	f003 030f 	and.w	r3, r3, #15
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d101      	bne.n	800cacc <HAL_PCD_EP_SetStall+0x82>
 800cac8:	2302      	movs	r3, #2
 800caca:	e01e      	b.n	800cb0a <HAL_PCD_EP_SetStall+0xc0>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68f9      	ldr	r1, [r7, #12]
 800cada:	4618      	mov	r0, r3
 800cadc:	f005 fbb2 	bl	8012244 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	f003 030f 	and.w	r3, r3, #15
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10a      	bne.n	800cb00 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	b2d9      	uxtb	r1, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cafa:	461a      	mov	r2, r3
 800cafc:	f005 fda4 	bl	8012648 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb1e:	78fb      	ldrb	r3, [r7, #3]
 800cb20:	f003 020f 	and.w	r2, r3, #15
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d901      	bls.n	800cb30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e042      	b.n	800cbb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da0f      	bge.n	800cb58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	f003 020f 	and.w	r2, r3, #15
 800cb3e:	4613      	mov	r3, r2
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	3338      	adds	r3, #56	; 0x38
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2201      	movs	r2, #1
 800cb54:	705a      	strb	r2, [r3, #1]
 800cb56:	e00f      	b.n	800cb78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	f003 020f 	and.w	r2, r3, #15
 800cb5e:	4613      	mov	r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	1a9b      	subs	r3, r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	3304      	adds	r3, #4
 800cb70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb7e:	78fb      	ldrb	r3, [r7, #3]
 800cb80:	f003 030f 	and.w	r3, r3, #15
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_PCD_EP_ClrStall+0x86>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e00e      	b.n	800cbb6 <HAL_PCD_EP_ClrStall+0xa4>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f005 fbba 	bl	8012320 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b08a      	sub	sp, #40	; 0x28
 800cbc2:	af02      	add	r7, sp, #8
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	3338      	adds	r3, #56	; 0x38
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d901      	bls.n	800cbf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e06c      	b.n	800ccd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	695a      	ldr	r2, [r3, #20]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d902      	bls.n	800cc12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	3303      	adds	r3, #3
 800cc16:	089b      	lsrs	r3, r3, #2
 800cc18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc1a:	e02b      	b.n	800cc74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	695a      	ldr	r2, [r3, #20]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	69fa      	ldr	r2, [r7, #28]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d902      	bls.n	800cc38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	3303      	adds	r3, #3
 800cc3c:	089b      	lsrs	r3, r3, #2
 800cc3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	68d9      	ldr	r1, [r3, #12]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4603      	mov	r3, r0
 800cc56:	6978      	ldr	r0, [r7, #20]
 800cc58:	f005 fa5e 	bl	8012118 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	441a      	add	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	699a      	ldr	r2, [r3, #24]
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	441a      	add	r2, r3
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	69ba      	ldr	r2, [r7, #24]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d809      	bhi.n	800cc9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	699a      	ldr	r2, [r3, #24]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d203      	bcs.n	800cc9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1be      	bne.n	800cc1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	695a      	ldr	r2, [r3, #20]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d811      	bhi.n	800ccce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	f003 030f 	and.w	r3, r3, #15
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	43db      	mvns	r3, r3
 800ccc4:	6939      	ldr	r1, [r7, #16]
 800ccc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccca:	4013      	ands	r3, r2
 800cccc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3720      	adds	r7, #32
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	333c      	adds	r3, #60	; 0x3c
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	015a      	lsls	r2, r3, #5
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	f040 80a0 	bne.w	800ce50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	f003 0308 	and.w	r3, r3, #8
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d015      	beq.n	800cd46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4a72      	ldr	r2, [pc, #456]	; (800cee8 <PCD_EP_OutXfrComplete_int+0x210>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	f240 80dd 	bls.w	800cede <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80d7 	beq.w	800cede <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	015a      	lsls	r2, r3, #5
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	4413      	add	r3, r2
 800cd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd42:	6093      	str	r3, [r2, #8]
 800cd44:	e0cb      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f003 0320 	and.w	r3, r3, #32
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d009      	beq.n	800cd64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	015a      	lsls	r2, r3, #5
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	4413      	add	r3, r2
 800cd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	2320      	movs	r3, #32
 800cd60:	6093      	str	r3, [r2, #8]
 800cd62:	e0bc      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 80b7 	bne.w	800cede <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a5d      	ldr	r2, [pc, #372]	; (800cee8 <PCD_EP_OutXfrComplete_int+0x210>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d90f      	bls.n	800cd98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00a      	beq.n	800cd98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	461a      	mov	r2, r3
 800cd90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd94:	6093      	str	r3, [r2, #8]
 800cd96:	e0a2      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cdaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	0159      	lsls	r1, r3, #5
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	440b      	add	r3, r1
 800cdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800cdbe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4403      	add	r3, r0
 800cdce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cdd2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	1a9b      	subs	r3, r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cde6:	6819      	ldr	r1, [r3, #0]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	4613      	mov	r3, r2
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	1a9b      	subs	r3, r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4403      	add	r3, r0
 800cdf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4419      	add	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	4613      	mov	r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	1a9b      	subs	r3, r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4403      	add	r3, r0
 800ce0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d114      	bne.n	800ce42 <PCD_EP_OutXfrComplete_int+0x16a>
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	440b      	add	r3, r1
 800ce26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d108      	bne.n	800ce42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	f005 fc03 	bl	8012648 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f008 ffa3 	bl	8015d94 <HAL_PCD_DataOutStageCallback>
 800ce4e:	e046      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4a26      	ldr	r2, [pc, #152]	; (800ceec <PCD_EP_OutXfrComplete_int+0x214>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d124      	bne.n	800cea2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce74:	6093      	str	r3, [r2, #8]
 800ce76:	e032      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d008      	beq.n	800ce94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce8e:	461a      	mov	r2, r3
 800ce90:	2320      	movs	r3, #32
 800ce92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	4619      	mov	r1, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f008 ff7a 	bl	8015d94 <HAL_PCD_DataOutStageCallback>
 800cea0:	e01d      	b.n	800cede <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d114      	bne.n	800ced2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	4613      	mov	r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	1a9b      	subs	r3, r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	440b      	add	r3, r1
 800ceb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d108      	bne.n	800ced2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6818      	ldr	r0, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ceca:	461a      	mov	r2, r3
 800cecc:	2100      	movs	r1, #0
 800cece:	f005 fbbb 	bl	8012648 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f008 ff5b 	bl	8015d94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	4f54300a 	.word	0x4f54300a
 800ceec:	4f54310a 	.word	0x4f54310a

0800cef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	333c      	adds	r3, #60	; 0x3c
 800cf08:	3304      	adds	r3, #4
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4a15      	ldr	r2, [pc, #84]	; (800cf78 <PCD_EP_OutSetupPacket_int+0x88>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d90e      	bls.n	800cf44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d009      	beq.n	800cf44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f008 ff13 	bl	8015d70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	4a0a      	ldr	r2, [pc, #40]	; (800cf78 <PCD_EP_OutSetupPacket_int+0x88>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d90c      	bls.n	800cf6c <PCD_EP_OutSetupPacket_int+0x7c>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d108      	bne.n	800cf6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6818      	ldr	r0, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf64:	461a      	mov	r2, r3
 800cf66:	2101      	movs	r1, #1
 800cf68:	f005 fb6e 	bl	8012648 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3718      	adds	r7, #24
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	4f54300a 	.word	0x4f54300a

0800cf7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	70fb      	strb	r3, [r7, #3]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d107      	bne.n	800cfaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cf9a:	883b      	ldrh	r3, [r7, #0]
 800cf9c:	0419      	lsls	r1, r3, #16
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	629a      	str	r2, [r3, #40]	; 0x28
 800cfa8:	e028      	b.n	800cffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb0:	0c1b      	lsrs	r3, r3, #16
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
 800cfbc:	e00d      	b.n	800cfda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3340      	adds	r3, #64	; 0x40
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	0c1b      	lsrs	r3, r3, #16
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	73fb      	strb	r3, [r7, #15]
 800cfda:	7bfa      	ldrb	r2, [r7, #15]
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d3ec      	bcc.n	800cfbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cfe4:	883b      	ldrh	r3, [r7, #0]
 800cfe6:	0418      	lsls	r0, r3, #16
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6819      	ldr	r1, [r3, #0]
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	4302      	orrs	r2, r0
 800cff4:	3340      	adds	r3, #64	; 0x40
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	440b      	add	r3, r1
 800cffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b083      	sub	sp, #12
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	460b      	mov	r3, r1
 800d014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	887a      	ldrh	r2, [r7, #2]
 800d01c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d05a:	4b05      	ldr	r3, [pc, #20]	; (800d070 <HAL_PCDEx_ActivateLPM+0x44>)
 800d05c:	4313      	orrs	r3, r2
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	10000003 	.word	0x10000003

0800d074 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d094:	4b19      	ldr	r3, [pc, #100]	; (800d0fc <HAL_PWREx_ConfigSupply+0x70>)
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	f003 0304 	and.w	r3, r3, #4
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d00a      	beq.n	800d0b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d0a0:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <HAL_PWREx_ConfigSupply+0x70>)
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	f003 0307 	and.w	r3, r3, #7
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d001      	beq.n	800d0b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e01f      	b.n	800d0f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e01d      	b.n	800d0f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d0b6:	4b11      	ldr	r3, [pc, #68]	; (800d0fc <HAL_PWREx_ConfigSupply+0x70>)
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	f023 0207 	bic.w	r2, r3, #7
 800d0be:	490f      	ldr	r1, [pc, #60]	; (800d0fc <HAL_PWREx_ConfigSupply+0x70>)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d0c6:	f7fe f8df 	bl	800b288 <HAL_GetTick>
 800d0ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d0cc:	e009      	b.n	800d0e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d0ce:	f7fe f8db 	bl	800b288 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0dc:	d901      	bls.n	800d0e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e007      	b.n	800d0f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d0e2:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <HAL_PWREx_ConfigSupply+0x70>)
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ee:	d1ee      	bne.n	800d0ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	58024800 	.word	0x58024800

0800d100 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d104:	4b05      	ldr	r3, [pc, #20]	; (800d11c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	4a04      	ldr	r2, [pc, #16]	; (800d11c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d10a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d10e:	60d3      	str	r3, [r2, #12]
}
 800d110:	bf00      	nop
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	58024800 	.word	0x58024800

0800d120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e3fd      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 8087 	beq.w	800d24e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d140:	4b99      	ldr	r3, [pc, #612]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d148:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d14a:	4b97      	ldr	r3, [pc, #604]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d14e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	2b10      	cmp	r3, #16
 800d154:	d007      	beq.n	800d166 <HAL_RCC_OscConfig+0x46>
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2b18      	cmp	r3, #24
 800d15a:	d110      	bne.n	800d17e <HAL_RCC_OscConfig+0x5e>
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15e:	f003 0303 	and.w	r3, r3, #3
 800d162:	2b02      	cmp	r3, #2
 800d164:	d10b      	bne.n	800d17e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d166:	4b90      	ldr	r3, [pc, #576]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d06c      	beq.n	800d24c <HAL_RCC_OscConfig+0x12c>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d168      	bne.n	800d24c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e3d7      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d186:	d106      	bne.n	800d196 <HAL_RCC_OscConfig+0x76>
 800d188:	4b87      	ldr	r3, [pc, #540]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a86      	ldr	r2, [pc, #536]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d18e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	e02e      	b.n	800d1f4 <HAL_RCC_OscConfig+0xd4>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10c      	bne.n	800d1b8 <HAL_RCC_OscConfig+0x98>
 800d19e:	4b82      	ldr	r3, [pc, #520]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a81      	ldr	r2, [pc, #516]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	4b7f      	ldr	r3, [pc, #508]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a7e      	ldr	r2, [pc, #504]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	e01d      	b.n	800d1f4 <HAL_RCC_OscConfig+0xd4>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1c0:	d10c      	bne.n	800d1dc <HAL_RCC_OscConfig+0xbc>
 800d1c2:	4b79      	ldr	r3, [pc, #484]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a78      	ldr	r2, [pc, #480]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	4b76      	ldr	r3, [pc, #472]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a75      	ldr	r2, [pc, #468]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	e00b      	b.n	800d1f4 <HAL_RCC_OscConfig+0xd4>
 800d1dc:	4b72      	ldr	r3, [pc, #456]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a71      	ldr	r2, [pc, #452]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	4b6f      	ldr	r3, [pc, #444]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a6e      	ldr	r2, [pc, #440]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d1ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d013      	beq.n	800d224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1fc:	f7fe f844 	bl	800b288 <HAL_GetTick>
 800d200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d202:	e008      	b.n	800d216 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d204:	f7fe f840 	bl	800b288 <HAL_GetTick>
 800d208:	4602      	mov	r2, r0
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	2b64      	cmp	r3, #100	; 0x64
 800d210:	d901      	bls.n	800d216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e38b      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d216:	4b64      	ldr	r3, [pc, #400]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0f0      	beq.n	800d204 <HAL_RCC_OscConfig+0xe4>
 800d222:	e014      	b.n	800d24e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d224:	f7fe f830 	bl	800b288 <HAL_GetTick>
 800d228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d22a:	e008      	b.n	800d23e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d22c:	f7fe f82c 	bl	800b288 <HAL_GetTick>
 800d230:	4602      	mov	r2, r0
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	2b64      	cmp	r3, #100	; 0x64
 800d238:	d901      	bls.n	800d23e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d23a:	2303      	movs	r3, #3
 800d23c:	e377      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d23e:	4b5a      	ldr	r3, [pc, #360]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1f0      	bne.n	800d22c <HAL_RCC_OscConfig+0x10c>
 800d24a:	e000      	b.n	800d24e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d24c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 80ae 	beq.w	800d3b8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d25c:	4b52      	ldr	r3, [pc, #328]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d264:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d266:	4b50      	ldr	r3, [pc, #320]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d007      	beq.n	800d282 <HAL_RCC_OscConfig+0x162>
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	2b18      	cmp	r3, #24
 800d276:	d13a      	bne.n	800d2ee <HAL_RCC_OscConfig+0x1ce>
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	f003 0303 	and.w	r3, r3, #3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d135      	bne.n	800d2ee <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d282:	4b49      	ldr	r3, [pc, #292]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0304 	and.w	r3, r3, #4
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d005      	beq.n	800d29a <HAL_RCC_OscConfig+0x17a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e349      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d29a:	f7fe f825 	bl	800b2e8 <HAL_GetREVID>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d817      	bhi.n	800d2d8 <HAL_RCC_OscConfig+0x1b8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	2b40      	cmp	r3, #64	; 0x40
 800d2ae:	d108      	bne.n	800d2c2 <HAL_RCC_OscConfig+0x1a2>
 800d2b0:	4b3d      	ldr	r3, [pc, #244]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d2b8:	4a3b      	ldr	r2, [pc, #236]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2be:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2c0:	e07a      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2c2:	4b39      	ldr	r3, [pc, #228]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	031b      	lsls	r3, r3, #12
 800d2d0:	4935      	ldr	r1, [pc, #212]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2d6:	e06f      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2d8:	4b33      	ldr	r3, [pc, #204]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	061b      	lsls	r3, r3, #24
 800d2e6:	4930      	ldr	r1, [pc, #192]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2ec:	e064      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d045      	beq.n	800d382 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d2f6:	4b2c      	ldr	r3, [pc, #176]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f023 0219 	bic.w	r2, r3, #25
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	4929      	ldr	r1, [pc, #164]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d304:	4313      	orrs	r3, r2
 800d306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d308:	f7fd ffbe 	bl	800b288 <HAL_GetTick>
 800d30c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d30e:	e008      	b.n	800d322 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d310:	f7fd ffba 	bl	800b288 <HAL_GetTick>
 800d314:	4602      	mov	r2, r0
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d901      	bls.n	800d322 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e305      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d322:	4b21      	ldr	r3, [pc, #132]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d0f0      	beq.n	800d310 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d32e:	f7fd ffdb 	bl	800b2e8 <HAL_GetREVID>
 800d332:	4603      	mov	r3, r0
 800d334:	f241 0203 	movw	r2, #4099	; 0x1003
 800d338:	4293      	cmp	r3, r2
 800d33a:	d817      	bhi.n	800d36c <HAL_RCC_OscConfig+0x24c>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	2b40      	cmp	r3, #64	; 0x40
 800d342:	d108      	bne.n	800d356 <HAL_RCC_OscConfig+0x236>
 800d344:	4b18      	ldr	r3, [pc, #96]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d34c:	4a16      	ldr	r2, [pc, #88]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d352:	6053      	str	r3, [r2, #4]
 800d354:	e030      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
 800d356:	4b14      	ldr	r3, [pc, #80]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	031b      	lsls	r3, r3, #12
 800d364:	4910      	ldr	r1, [pc, #64]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d366:	4313      	orrs	r3, r2
 800d368:	604b      	str	r3, [r1, #4]
 800d36a:	e025      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
 800d36c:	4b0e      	ldr	r3, [pc, #56]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	061b      	lsls	r3, r3, #24
 800d37a:	490b      	ldr	r1, [pc, #44]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d37c:	4313      	orrs	r3, r2
 800d37e:	604b      	str	r3, [r1, #4]
 800d380:	e01a      	b.n	800d3b8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d382:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a08      	ldr	r2, [pc, #32]	; (800d3a8 <HAL_RCC_OscConfig+0x288>)
 800d388:	f023 0301 	bic.w	r3, r3, #1
 800d38c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d38e:	f7fd ff7b 	bl	800b288 <HAL_GetTick>
 800d392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d394:	e00a      	b.n	800d3ac <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d396:	f7fd ff77 	bl	800b288 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d903      	bls.n	800d3ac <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e2c2      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
 800d3a8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3ac:	4b94      	ldr	r3, [pc, #592]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1ee      	bne.n	800d396 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 0310 	and.w	r3, r3, #16
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 80a9 	beq.w	800d518 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3c6:	4b8e      	ldr	r3, [pc, #568]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d3d0:	4b8b      	ldr	r3, [pc, #556]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b08      	cmp	r3, #8
 800d3da:	d007      	beq.n	800d3ec <HAL_RCC_OscConfig+0x2cc>
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	2b18      	cmp	r3, #24
 800d3e0:	d13a      	bne.n	800d458 <HAL_RCC_OscConfig+0x338>
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f003 0303 	and.w	r3, r3, #3
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d135      	bne.n	800d458 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d3ec:	4b84      	ldr	r3, [pc, #528]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d005      	beq.n	800d404 <HAL_RCC_OscConfig+0x2e4>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	69db      	ldr	r3, [r3, #28]
 800d3fc:	2b80      	cmp	r3, #128	; 0x80
 800d3fe:	d001      	beq.n	800d404 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e294      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d404:	f7fd ff70 	bl	800b2e8 <HAL_GetREVID>
 800d408:	4603      	mov	r3, r0
 800d40a:	f241 0203 	movw	r2, #4099	; 0x1003
 800d40e:	4293      	cmp	r3, r2
 800d410:	d817      	bhi.n	800d442 <HAL_RCC_OscConfig+0x322>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a1b      	ldr	r3, [r3, #32]
 800d416:	2b20      	cmp	r3, #32
 800d418:	d108      	bne.n	800d42c <HAL_RCC_OscConfig+0x30c>
 800d41a:	4b79      	ldr	r3, [pc, #484]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d422:	4a77      	ldr	r2, [pc, #476]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d428:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d42a:	e075      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d42c:	4b74      	ldr	r3, [pc, #464]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	069b      	lsls	r3, r3, #26
 800d43a:	4971      	ldr	r1, [pc, #452]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d43c:	4313      	orrs	r3, r2
 800d43e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d440:	e06a      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d442:	4b6f      	ldr	r3, [pc, #444]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	061b      	lsls	r3, r3, #24
 800d450:	496b      	ldr	r1, [pc, #428]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d452:	4313      	orrs	r3, r2
 800d454:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d456:	e05f      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d042      	beq.n	800d4e6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d460:	4b67      	ldr	r3, [pc, #412]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a66      	ldr	r2, [pc, #408]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d46c:	f7fd ff0c 	bl	800b288 <HAL_GetTick>
 800d470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d472:	e008      	b.n	800d486 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d474:	f7fd ff08 	bl	800b288 <HAL_GetTick>
 800d478:	4602      	mov	r2, r0
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d901      	bls.n	800d486 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e253      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d486:	4b5e      	ldr	r3, [pc, #376]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d0f0      	beq.n	800d474 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d492:	f7fd ff29 	bl	800b2e8 <HAL_GetREVID>
 800d496:	4603      	mov	r3, r0
 800d498:	f241 0203 	movw	r2, #4099	; 0x1003
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d817      	bhi.n	800d4d0 <HAL_RCC_OscConfig+0x3b0>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a1b      	ldr	r3, [r3, #32]
 800d4a4:	2b20      	cmp	r3, #32
 800d4a6:	d108      	bne.n	800d4ba <HAL_RCC_OscConfig+0x39a>
 800d4a8:	4b55      	ldr	r3, [pc, #340]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d4b0:	4a53      	ldr	r2, [pc, #332]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4b6:	6053      	str	r3, [r2, #4]
 800d4b8:	e02e      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
 800d4ba:	4b51      	ldr	r3, [pc, #324]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	069b      	lsls	r3, r3, #26
 800d4c8:	494d      	ldr	r1, [pc, #308]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	604b      	str	r3, [r1, #4]
 800d4ce:	e023      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
 800d4d0:	4b4b      	ldr	r3, [pc, #300]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a1b      	ldr	r3, [r3, #32]
 800d4dc:	061b      	lsls	r3, r3, #24
 800d4de:	4948      	ldr	r1, [pc, #288]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	60cb      	str	r3, [r1, #12]
 800d4e4:	e018      	b.n	800d518 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d4e6:	4b46      	ldr	r3, [pc, #280]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a45      	ldr	r2, [pc, #276]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d4ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4f2:	f7fd fec9 	bl	800b288 <HAL_GetTick>
 800d4f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d4f8:	e008      	b.n	800d50c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d4fa:	f7fd fec5 	bl	800b288 <HAL_GetTick>
 800d4fe:	4602      	mov	r2, r0
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	2b02      	cmp	r3, #2
 800d506:	d901      	bls.n	800d50c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e210      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d50c:	4b3c      	ldr	r3, [pc, #240]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1f0      	bne.n	800d4fa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 0308 	and.w	r3, r3, #8
 800d520:	2b00      	cmp	r3, #0
 800d522:	d036      	beq.n	800d592 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d019      	beq.n	800d560 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d52c:	4b34      	ldr	r3, [pc, #208]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d52e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d530:	4a33      	ldr	r2, [pc, #204]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d532:	f043 0301 	orr.w	r3, r3, #1
 800d536:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d538:	f7fd fea6 	bl	800b288 <HAL_GetTick>
 800d53c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d53e:	e008      	b.n	800d552 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d540:	f7fd fea2 	bl	800b288 <HAL_GetTick>
 800d544:	4602      	mov	r2, r0
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d901      	bls.n	800d552 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800d54e:	2303      	movs	r3, #3
 800d550:	e1ed      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d552:	4b2b      	ldr	r3, [pc, #172]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d556:	f003 0302 	and.w	r3, r3, #2
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d0f0      	beq.n	800d540 <HAL_RCC_OscConfig+0x420>
 800d55e:	e018      	b.n	800d592 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d560:	4b27      	ldr	r3, [pc, #156]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d564:	4a26      	ldr	r2, [pc, #152]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d566:	f023 0301 	bic.w	r3, r3, #1
 800d56a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d56c:	f7fd fe8c 	bl	800b288 <HAL_GetTick>
 800d570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d572:	e008      	b.n	800d586 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d574:	f7fd fe88 	bl	800b288 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d901      	bls.n	800d586 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800d582:	2303      	movs	r3, #3
 800d584:	e1d3      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d586:	4b1e      	ldr	r3, [pc, #120]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f0      	bne.n	800d574 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f003 0320 	and.w	r3, r3, #32
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d038      	beq.n	800d610 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	699b      	ldr	r3, [r3, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d019      	beq.n	800d5da <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d5a6:	4b16      	ldr	r3, [pc, #88]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a15      	ldr	r2, [pc, #84]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d5ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d5b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d5b2:	f7fd fe69 	bl	800b288 <HAL_GetTick>
 800d5b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5b8:	e008      	b.n	800d5cc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d5ba:	f7fd fe65 	bl	800b288 <HAL_GetTick>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d901      	bls.n	800d5cc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e1b0      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d0f0      	beq.n	800d5ba <HAL_RCC_OscConfig+0x49a>
 800d5d8:	e01a      	b.n	800d610 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a08      	ldr	r2, [pc, #32]	; (800d600 <HAL_RCC_OscConfig+0x4e0>)
 800d5e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d5e6:	f7fd fe4f 	bl	800b288 <HAL_GetTick>
 800d5ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d5ec:	e00a      	b.n	800d604 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d5ee:	f7fd fe4b 	bl	800b288 <HAL_GetTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d903      	bls.n	800d604 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e196      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
 800d600:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d604:	4b99      	ldr	r3, [pc, #612]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1ee      	bne.n	800d5ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f003 0304 	and.w	r3, r3, #4
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f000 8081 	beq.w	800d720 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d61e:	4b94      	ldr	r3, [pc, #592]	; (800d870 <HAL_RCC_OscConfig+0x750>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a93      	ldr	r2, [pc, #588]	; (800d870 <HAL_RCC_OscConfig+0x750>)
 800d624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d62a:	f7fd fe2d 	bl	800b288 <HAL_GetTick>
 800d62e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d630:	e008      	b.n	800d644 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d632:	f7fd fe29 	bl	800b288 <HAL_GetTick>
 800d636:	4602      	mov	r2, r0
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	2b64      	cmp	r3, #100	; 0x64
 800d63e:	d901      	bls.n	800d644 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800d640:	2303      	movs	r3, #3
 800d642:	e174      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d644:	4b8a      	ldr	r3, [pc, #552]	; (800d870 <HAL_RCC_OscConfig+0x750>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d0f0      	beq.n	800d632 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d106      	bne.n	800d666 <HAL_RCC_OscConfig+0x546>
 800d658:	4b84      	ldr	r3, [pc, #528]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65c:	4a83      	ldr	r2, [pc, #524]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d65e:	f043 0301 	orr.w	r3, r3, #1
 800d662:	6713      	str	r3, [r2, #112]	; 0x70
 800d664:	e02d      	b.n	800d6c2 <HAL_RCC_OscConfig+0x5a2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10c      	bne.n	800d688 <HAL_RCC_OscConfig+0x568>
 800d66e:	4b7f      	ldr	r3, [pc, #508]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d672:	4a7e      	ldr	r2, [pc, #504]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	6713      	str	r3, [r2, #112]	; 0x70
 800d67a:	4b7c      	ldr	r3, [pc, #496]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	4a7b      	ldr	r2, [pc, #492]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d680:	f023 0304 	bic.w	r3, r3, #4
 800d684:	6713      	str	r3, [r2, #112]	; 0x70
 800d686:	e01c      	b.n	800d6c2 <HAL_RCC_OscConfig+0x5a2>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	2b05      	cmp	r3, #5
 800d68e:	d10c      	bne.n	800d6aa <HAL_RCC_OscConfig+0x58a>
 800d690:	4b76      	ldr	r3, [pc, #472]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d694:	4a75      	ldr	r2, [pc, #468]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d696:	f043 0304 	orr.w	r3, r3, #4
 800d69a:	6713      	str	r3, [r2, #112]	; 0x70
 800d69c:	4b73      	ldr	r3, [pc, #460]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a0:	4a72      	ldr	r2, [pc, #456]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6a2:	f043 0301 	orr.w	r3, r3, #1
 800d6a6:	6713      	str	r3, [r2, #112]	; 0x70
 800d6a8:	e00b      	b.n	800d6c2 <HAL_RCC_OscConfig+0x5a2>
 800d6aa:	4b70      	ldr	r3, [pc, #448]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	4a6f      	ldr	r2, [pc, #444]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6b0:	f023 0301 	bic.w	r3, r3, #1
 800d6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800d6b6:	4b6d      	ldr	r3, [pc, #436]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ba:	4a6c      	ldr	r2, [pc, #432]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6bc:	f023 0304 	bic.w	r3, r3, #4
 800d6c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d015      	beq.n	800d6f6 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6ca:	f7fd fddd 	bl	800b288 <HAL_GetTick>
 800d6ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d6d0:	e00a      	b.n	800d6e8 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d6d2:	f7fd fdd9 	bl	800b288 <HAL_GetTick>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d901      	bls.n	800d6e8 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	e122      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d6e8:	4b60      	ldr	r3, [pc, #384]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0ee      	beq.n	800d6d2 <HAL_RCC_OscConfig+0x5b2>
 800d6f4:	e014      	b.n	800d720 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6f6:	f7fd fdc7 	bl	800b288 <HAL_GetTick>
 800d6fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d6fc:	e00a      	b.n	800d714 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d6fe:	f7fd fdc3 	bl	800b288 <HAL_GetTick>
 800d702:	4602      	mov	r2, r0
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	f241 3288 	movw	r2, #5000	; 0x1388
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d901      	bls.n	800d714 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 800d710:	2303      	movs	r3, #3
 800d712:	e10c      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d714:	4b55      	ldr	r3, [pc, #340]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1ee      	bne.n	800d6fe <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 8101 	beq.w	800d92c <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d72a:	4b50      	ldr	r3, [pc, #320]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d732:	2b18      	cmp	r3, #24
 800d734:	f000 80bc 	beq.w	800d8b0 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	f040 809d 	bne.w	800d87c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d742:	4b4a      	ldr	r3, [pc, #296]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a49      	ldr	r2, [pc, #292]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d74c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d74e:	f7fd fd9b 	bl	800b288 <HAL_GetTick>
 800d752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d754:	e008      	b.n	800d768 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d756:	f7fd fd97 	bl	800b288 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d901      	bls.n	800d768 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e0e2      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d768:	4b40      	ldr	r3, [pc, #256]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1f0      	bne.n	800d756 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d774:	4b3d      	ldr	r3, [pc, #244]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d778:	4b3e      	ldr	r3, [pc, #248]	; (800d874 <HAL_RCC_OscConfig+0x754>)
 800d77a:	4013      	ands	r3, r2
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d784:	0112      	lsls	r2, r2, #4
 800d786:	430a      	orrs	r2, r1
 800d788:	4938      	ldr	r1, [pc, #224]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d78a:	4313      	orrs	r3, r2
 800d78c:	628b      	str	r3, [r1, #40]	; 0x28
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	3b01      	subs	r3, #1
 800d794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79c:	3b01      	subs	r3, #1
 800d79e:	025b      	lsls	r3, r3, #9
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	041b      	lsls	r3, r3, #16
 800d7ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	061b      	lsls	r3, r3, #24
 800d7ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7be:	492b      	ldr	r1, [pc, #172]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800d7c4:	4b29      	ldr	r3, [pc, #164]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	4a28      	ldr	r2, [pc, #160]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7ca:	f023 0301 	bic.w	r3, r3, #1
 800d7ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d7d0:	4b26      	ldr	r3, [pc, #152]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7d4:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HAL_RCC_OscConfig+0x758>)
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d7dc:	00d2      	lsls	r2, r2, #3
 800d7de:	4923      	ldr	r1, [pc, #140]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d7e4:	4b21      	ldr	r3, [pc, #132]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	f023 020c 	bic.w	r2, r3, #12
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f0:	491e      	ldr	r1, [pc, #120]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d7f6:	4b1d      	ldr	r3, [pc, #116]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fa:	f023 0202 	bic.w	r2, r3, #2
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d802:	491a      	ldr	r1, [pc, #104]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d804:	4313      	orrs	r3, r2
 800d806:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d808:	4b18      	ldr	r3, [pc, #96]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4a17      	ldr	r2, [pc, #92]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d80e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d814:	4b15      	ldr	r3, [pc, #84]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	4a14      	ldr	r2, [pc, #80]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d820:	4b12      	ldr	r3, [pc, #72]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	4a11      	ldr	r2, [pc, #68]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d82a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d82c:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d830:	4a0e      	ldr	r2, [pc, #56]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d838:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a0b      	ldr	r2, [pc, #44]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d83e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d844:	f7fd fd20 	bl	800b288 <HAL_GetTick>
 800d848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d84a:	e008      	b.n	800d85e <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d84c:	f7fd fd1c 	bl	800b288 <HAL_GetTick>
 800d850:	4602      	mov	r2, r0
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	2b02      	cmp	r3, #2
 800d858:	d901      	bls.n	800d85e <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e067      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d85e:	4b03      	ldr	r3, [pc, #12]	; (800d86c <HAL_RCC_OscConfig+0x74c>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0f0      	beq.n	800d84c <HAL_RCC_OscConfig+0x72c>
 800d86a:	e05f      	b.n	800d92c <HAL_RCC_OscConfig+0x80c>
 800d86c:	58024400 	.word	0x58024400
 800d870:	58024800 	.word	0x58024800
 800d874:	fffffc0c 	.word	0xfffffc0c
 800d878:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d87c:	4b2e      	ldr	r3, [pc, #184]	; (800d938 <HAL_RCC_OscConfig+0x818>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a2d      	ldr	r2, [pc, #180]	; (800d938 <HAL_RCC_OscConfig+0x818>)
 800d882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d888:	f7fd fcfe 	bl	800b288 <HAL_GetTick>
 800d88c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d88e:	e008      	b.n	800d8a2 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d890:	f7fd fcfa 	bl	800b288 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d901      	bls.n	800d8a2 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	e045      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8a2:	4b25      	ldr	r3, [pc, #148]	; (800d938 <HAL_RCC_OscConfig+0x818>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f0      	bne.n	800d890 <HAL_RCC_OscConfig+0x770>
 800d8ae:	e03d      	b.n	800d92c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d8b0:	4b21      	ldr	r3, [pc, #132]	; (800d938 <HAL_RCC_OscConfig+0x818>)
 800d8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d8b6:	4b20      	ldr	r3, [pc, #128]	; (800d938 <HAL_RCC_OscConfig+0x818>)
 800d8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d031      	beq.n	800d928 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f003 0203 	and.w	r2, r3, #3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d12a      	bne.n	800d928 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	091b      	lsrs	r3, r3, #4
 800d8d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d122      	bne.n	800d928 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d11a      	bne.n	800d928 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	0a5b      	lsrs	r3, r3, #9
 800d8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d900:	429a      	cmp	r2, r3
 800d902:	d111      	bne.n	800d928 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	0c1b      	lsrs	r3, r3, #16
 800d908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d910:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d912:	429a      	cmp	r2, r3
 800d914:	d108      	bne.n	800d928 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	0e1b      	lsrs	r3, r3, #24
 800d91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d922:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d924:	429a      	cmp	r2, r3
 800d926:	d001      	beq.n	800d92c <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e000      	b.n	800d92e <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3730      	adds	r7, #48	; 0x30
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	58024400 	.word	0x58024400

0800d93c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e19c      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d950:	4b8a      	ldr	r3, [pc, #552]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f003 030f 	and.w	r3, r3, #15
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d910      	bls.n	800d980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d95e:	4b87      	ldr	r3, [pc, #540]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f023 020f 	bic.w	r2, r3, #15
 800d966:	4985      	ldr	r1, [pc, #532]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d96e:	4b83      	ldr	r3, [pc, #524]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 030f 	and.w	r3, r3, #15
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d001      	beq.n	800d980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	e184      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d010      	beq.n	800d9ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	691a      	ldr	r2, [r3, #16]
 800d990:	4b7b      	ldr	r3, [pc, #492]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d998:	429a      	cmp	r2, r3
 800d99a:	d908      	bls.n	800d9ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d99c:	4b78      	ldr	r3, [pc, #480]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	4975      	ldr	r1, [pc, #468]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d010      	beq.n	800d9dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	695a      	ldr	r2, [r3, #20]
 800d9be:	4b70      	ldr	r3, [pc, #448]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d908      	bls.n	800d9dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d9ca:	4b6d      	ldr	r3, [pc, #436]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	496a      	ldr	r1, [pc, #424]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 0310 	and.w	r3, r3, #16
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d010      	beq.n	800da0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	4b64      	ldr	r3, [pc, #400]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9ee:	69db      	ldr	r3, [r3, #28]
 800d9f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d908      	bls.n	800da0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d9f8:	4b61      	ldr	r3, [pc, #388]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	699b      	ldr	r3, [r3, #24]
 800da04:	495e      	ldr	r1, [pc, #376]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da06:	4313      	orrs	r3, r2
 800da08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0320 	and.w	r3, r3, #32
 800da12:	2b00      	cmp	r3, #0
 800da14:	d010      	beq.n	800da38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	69da      	ldr	r2, [r3, #28]
 800da1a:	4b59      	ldr	r3, [pc, #356]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da22:	429a      	cmp	r2, r3
 800da24:	d908      	bls.n	800da38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800da26:	4b56      	ldr	r3, [pc, #344]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	4953      	ldr	r1, [pc, #332]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da34:	4313      	orrs	r3, r2
 800da36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d010      	beq.n	800da66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	4b4d      	ldr	r3, [pc, #308]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	429a      	cmp	r2, r3
 800da52:	d908      	bls.n	800da66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da54:	4b4a      	ldr	r3, [pc, #296]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	f023 020f 	bic.w	r2, r3, #15
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	4947      	ldr	r1, [pc, #284]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da62:	4313      	orrs	r3, r2
 800da64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f003 0301 	and.w	r3, r3, #1
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d055      	beq.n	800db1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800da72:	4b43      	ldr	r3, [pc, #268]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	4940      	ldr	r1, [pc, #256]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da80:	4313      	orrs	r3, r2
 800da82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d107      	bne.n	800da9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da8c:	4b3c      	ldr	r3, [pc, #240]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d121      	bne.n	800dadc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	e0f6      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d107      	bne.n	800dab4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800daa4:	4b36      	ldr	r3, [pc, #216]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d115      	bne.n	800dadc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	e0ea      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d107      	bne.n	800dacc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dabc:	4b30      	ldr	r3, [pc, #192]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d109      	bne.n	800dadc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800dac8:	2301      	movs	r3, #1
 800daca:	e0de      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dacc:	4b2c      	ldr	r3, [pc, #176]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e0d6      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dadc:	4b28      	ldr	r3, [pc, #160]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	f023 0207 	bic.w	r2, r3, #7
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4925      	ldr	r1, [pc, #148]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800daea:	4313      	orrs	r3, r2
 800daec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daee:	f7fd fbcb 	bl	800b288 <HAL_GetTick>
 800daf2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daf4:	e00a      	b.n	800db0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800daf6:	f7fd fbc7 	bl	800b288 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	f241 3288 	movw	r2, #5000	; 0x1388
 800db04:	4293      	cmp	r3, r2
 800db06:	d901      	bls.n	800db0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800db08:	2303      	movs	r3, #3
 800db0a:	e0be      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db0c:	4b1c      	ldr	r3, [pc, #112]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d1eb      	bne.n	800daf6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b00      	cmp	r3, #0
 800db28:	d010      	beq.n	800db4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	4b14      	ldr	r3, [pc, #80]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800db30:	699b      	ldr	r3, [r3, #24]
 800db32:	f003 030f 	and.w	r3, r3, #15
 800db36:	429a      	cmp	r2, r3
 800db38:	d208      	bcs.n	800db4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db3a:	4b11      	ldr	r3, [pc, #68]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	f023 020f 	bic.w	r2, r3, #15
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	490e      	ldr	r1, [pc, #56]	; (800db80 <HAL_RCC_ClockConfig+0x244>)
 800db48:	4313      	orrs	r3, r2
 800db4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db4c:	4b0b      	ldr	r3, [pc, #44]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f003 030f 	and.w	r3, r3, #15
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d214      	bcs.n	800db84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db5a:	4b08      	ldr	r3, [pc, #32]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f023 020f 	bic.w	r2, r3, #15
 800db62:	4906      	ldr	r1, [pc, #24]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	4313      	orrs	r3, r2
 800db68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db6a:	4b04      	ldr	r3, [pc, #16]	; (800db7c <HAL_RCC_ClockConfig+0x240>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 030f 	and.w	r3, r3, #15
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	429a      	cmp	r2, r3
 800db76:	d005      	beq.n	800db84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	e086      	b.n	800dc8a <HAL_RCC_ClockConfig+0x34e>
 800db7c:	52002000 	.word	0x52002000
 800db80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d010      	beq.n	800dbb2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691a      	ldr	r2, [r3, #16]
 800db94:	4b3f      	ldr	r3, [pc, #252]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d208      	bcs.n	800dbb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dba0:	4b3c      	ldr	r3, [pc, #240]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	4939      	ldr	r1, [pc, #228]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d010      	beq.n	800dbe0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	695a      	ldr	r2, [r3, #20]
 800dbc2:	4b34      	ldr	r3, [pc, #208]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbc4:	69db      	ldr	r3, [r3, #28]
 800dbc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d208      	bcs.n	800dbe0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dbce:	4b31      	ldr	r3, [pc, #196]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbd0:	69db      	ldr	r3, [r3, #28]
 800dbd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	492e      	ldr	r1, [pc, #184]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 0310 	and.w	r3, r3, #16
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d010      	beq.n	800dc0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	699a      	ldr	r2, [r3, #24]
 800dbf0:	4b28      	ldr	r3, [pc, #160]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d208      	bcs.n	800dc0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dbfc:	4b25      	ldr	r3, [pc, #148]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dbfe:	69db      	ldr	r3, [r3, #28]
 800dc00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	699b      	ldr	r3, [r3, #24]
 800dc08:	4922      	ldr	r1, [pc, #136]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f003 0320 	and.w	r3, r3, #32
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d010      	beq.n	800dc3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	69da      	ldr	r2, [r3, #28]
 800dc1e:	4b1d      	ldr	r3, [pc, #116]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d208      	bcs.n	800dc3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	4917      	ldr	r1, [pc, #92]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dc3c:	f000 f834 	bl	800dca8 <HAL_RCC_GetSysClockFreq>
 800dc40:	4602      	mov	r2, r0
 800dc42:	4b14      	ldr	r3, [pc, #80]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	0a1b      	lsrs	r3, r3, #8
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	4912      	ldr	r1, [pc, #72]	; (800dc98 <HAL_RCC_ClockConfig+0x35c>)
 800dc4e:	5ccb      	ldrb	r3, [r1, r3]
 800dc50:	f003 031f 	and.w	r3, r3, #31
 800dc54:	fa22 f303 	lsr.w	r3, r2, r3
 800dc58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	; (800dc94 <HAL_RCC_ClockConfig+0x358>)
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	f003 030f 	and.w	r3, r3, #15
 800dc62:	4a0d      	ldr	r2, [pc, #52]	; (800dc98 <HAL_RCC_ClockConfig+0x35c>)
 800dc64:	5cd3      	ldrb	r3, [r2, r3]
 800dc66:	f003 031f 	and.w	r3, r3, #31
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc70:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <HAL_RCC_ClockConfig+0x360>)
 800dc72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dc74:	4a0a      	ldr	r2, [pc, #40]	; (800dca0 <HAL_RCC_ClockConfig+0x364>)
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <HAL_RCC_ClockConfig+0x368>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fd f8d0 	bl	800ae24 <HAL_InitTick>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	58024400 	.word	0x58024400
 800dc98:	240084a8 	.word	0x240084a8
 800dc9c:	24008014 	.word	0x24008014
 800dca0:	24008010 	.word	0x24008010
 800dca4:	24008018 	.word	0x24008018

0800dca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b089      	sub	sp, #36	; 0x24
 800dcac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dcae:	4bb3      	ldr	r3, [pc, #716]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcb6:	2b18      	cmp	r3, #24
 800dcb8:	f200 8155 	bhi.w	800df66 <HAL_RCC_GetSysClockFreq+0x2be>
 800dcbc:	a201      	add	r2, pc, #4	; (adr r2, 800dcc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800dcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc2:	bf00      	nop
 800dcc4:	0800dd29 	.word	0x0800dd29
 800dcc8:	0800df67 	.word	0x0800df67
 800dccc:	0800df67 	.word	0x0800df67
 800dcd0:	0800df67 	.word	0x0800df67
 800dcd4:	0800df67 	.word	0x0800df67
 800dcd8:	0800df67 	.word	0x0800df67
 800dcdc:	0800df67 	.word	0x0800df67
 800dce0:	0800df67 	.word	0x0800df67
 800dce4:	0800dd4f 	.word	0x0800dd4f
 800dce8:	0800df67 	.word	0x0800df67
 800dcec:	0800df67 	.word	0x0800df67
 800dcf0:	0800df67 	.word	0x0800df67
 800dcf4:	0800df67 	.word	0x0800df67
 800dcf8:	0800df67 	.word	0x0800df67
 800dcfc:	0800df67 	.word	0x0800df67
 800dd00:	0800df67 	.word	0x0800df67
 800dd04:	0800dd55 	.word	0x0800dd55
 800dd08:	0800df67 	.word	0x0800df67
 800dd0c:	0800df67 	.word	0x0800df67
 800dd10:	0800df67 	.word	0x0800df67
 800dd14:	0800df67 	.word	0x0800df67
 800dd18:	0800df67 	.word	0x0800df67
 800dd1c:	0800df67 	.word	0x0800df67
 800dd20:	0800df67 	.word	0x0800df67
 800dd24:	0800dd5b 	.word	0x0800dd5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd28:	4b94      	ldr	r3, [pc, #592]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0320 	and.w	r3, r3, #32
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d009      	beq.n	800dd48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd34:	4b91      	ldr	r3, [pc, #580]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	08db      	lsrs	r3, r3, #3
 800dd3a:	f003 0303 	and.w	r3, r3, #3
 800dd3e:	4a90      	ldr	r2, [pc, #576]	; (800df80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dd40:	fa22 f303 	lsr.w	r3, r2, r3
 800dd44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800dd46:	e111      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dd48:	4b8d      	ldr	r3, [pc, #564]	; (800df80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dd4a:	61bb      	str	r3, [r7, #24]
    break;
 800dd4c:	e10e      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800dd4e:	4b8d      	ldr	r3, [pc, #564]	; (800df84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dd50:	61bb      	str	r3, [r7, #24]
    break;
 800dd52:	e10b      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800dd54:	4b8c      	ldr	r3, [pc, #560]	; (800df88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800dd56:	61bb      	str	r3, [r7, #24]
    break;
 800dd58:	e108      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd5a:	4b88      	ldr	r3, [pc, #544]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5e:	f003 0303 	and.w	r3, r3, #3
 800dd62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800dd64:	4b85      	ldr	r3, [pc, #532]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd68:	091b      	lsrs	r3, r3, #4
 800dd6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dd70:	4b82      	ldr	r3, [pc, #520]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dd7a:	4b80      	ldr	r3, [pc, #512]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7e:	08db      	lsrs	r3, r3, #3
 800dd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	fb02 f303 	mul.w	r3, r2, r3
 800dd8a:	ee07 3a90 	vmov	s15, r3
 800dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 80e1 	beq.w	800df60 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	f000 8083 	beq.w	800deac <HAL_RCC_GetSysClockFreq+0x204>
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	f200 80a1 	bhi.w	800def0 <HAL_RCC_GetSysClockFreq+0x248>
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d003      	beq.n	800ddbc <HAL_RCC_GetSysClockFreq+0x114>
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d056      	beq.n	800de68 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ddba:	e099      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddbc:	4b6f      	ldr	r3, [pc, #444]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f003 0320 	and.w	r3, r3, #32
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d02d      	beq.n	800de24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ddc8:	4b6c      	ldr	r3, [pc, #432]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	08db      	lsrs	r3, r3, #3
 800ddce:	f003 0303 	and.w	r3, r3, #3
 800ddd2:	4a6b      	ldr	r2, [pc, #428]	; (800df80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	ee07 3a90 	vmov	s15, r3
 800dde0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddf2:	4b62      	ldr	r3, [pc, #392]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfa:	ee07 3a90 	vmov	s15, r3
 800ddfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de02:	ed97 6a02 	vldr	s12, [r7, #8]
 800de06:	eddf 5a61 	vldr	s11, [pc, #388]	; 800df8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800de0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800de22:	e087      	b.n	800df34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	ee07 3a90 	vmov	s15, r3
 800de2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800df90 <HAL_RCC_GetSysClockFreq+0x2e8>
 800de32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de36:	4b51      	ldr	r3, [pc, #324]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3e:	ee07 3a90 	vmov	s15, r3
 800de42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de46:	ed97 6a02 	vldr	s12, [r7, #8]
 800de4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800df8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800de4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de66:	e065      	b.n	800df34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	ee07 3a90 	vmov	s15, r3
 800de6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de72:	eddf 6a48 	vldr	s13, [pc, #288]	; 800df94 <HAL_RCC_GetSysClockFreq+0x2ec>
 800de76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de7a:	4b40      	ldr	r3, [pc, #256]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de82:	ee07 3a90 	vmov	s15, r3
 800de86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800de8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800df8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800de92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deaa:	e043      	b.n	800df34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	ee07 3a90 	vmov	s15, r3
 800deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800df98 <HAL_RCC_GetSysClockFreq+0x2f0>
 800deba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debe:	4b2f      	ldr	r3, [pc, #188]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dece:	ed97 6a02 	vldr	s12, [r7, #8]
 800ded2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800df8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ded6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deee:	e021      	b.n	800df34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800df94 <HAL_RCC_GetSysClockFreq+0x2ec>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b1e      	ldr	r3, [pc, #120]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a02 	vldr	s12, [r7, #8]
 800df16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800df8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800df34:	4b11      	ldr	r3, [pc, #68]	; (800df7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df38:	0a5b      	lsrs	r3, r3, #9
 800df3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df3e:	3301      	adds	r3, #1
 800df40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	ee07 3a90 	vmov	s15, r3
 800df48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800df4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800df50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df58:	ee17 3a90 	vmov	r3, s15
 800df5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800df5e:	e005      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800df60:	2300      	movs	r3, #0
 800df62:	61bb      	str	r3, [r7, #24]
    break;
 800df64:	e002      	b.n	800df6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800df66:	4b07      	ldr	r3, [pc, #28]	; (800df84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800df68:	61bb      	str	r3, [r7, #24]
    break;
 800df6a:	bf00      	nop
  }

  return sysclockfreq;
 800df6c:	69bb      	ldr	r3, [r7, #24]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3724      	adds	r7, #36	; 0x24
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	58024400 	.word	0x58024400
 800df80:	03d09000 	.word	0x03d09000
 800df84:	003d0900 	.word	0x003d0900
 800df88:	007a1200 	.word	0x007a1200
 800df8c:	46000000 	.word	0x46000000
 800df90:	4c742400 	.word	0x4c742400
 800df94:	4a742400 	.word	0x4a742400
 800df98:	4af42400 	.word	0x4af42400

0800df9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dfa2:	f7ff fe81 	bl	800dca8 <HAL_RCC_GetSysClockFreq>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	4b10      	ldr	r3, [pc, #64]	; (800dfec <HAL_RCC_GetHCLKFreq+0x50>)
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	0a1b      	lsrs	r3, r3, #8
 800dfae:	f003 030f 	and.w	r3, r3, #15
 800dfb2:	490f      	ldr	r1, [pc, #60]	; (800dff0 <HAL_RCC_GetHCLKFreq+0x54>)
 800dfb4:	5ccb      	ldrb	r3, [r1, r3]
 800dfb6:	f003 031f 	and.w	r3, r3, #31
 800dfba:	fa22 f303 	lsr.w	r3, r2, r3
 800dfbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfc0:	4b0a      	ldr	r3, [pc, #40]	; (800dfec <HAL_RCC_GetHCLKFreq+0x50>)
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	f003 030f 	and.w	r3, r3, #15
 800dfc8:	4a09      	ldr	r2, [pc, #36]	; (800dff0 <HAL_RCC_GetHCLKFreq+0x54>)
 800dfca:	5cd3      	ldrb	r3, [r2, r3]
 800dfcc:	f003 031f 	and.w	r3, r3, #31
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd6:	4a07      	ldr	r2, [pc, #28]	; (800dff4 <HAL_RCC_GetHCLKFreq+0x58>)
 800dfd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dfda:	4a07      	ldr	r2, [pc, #28]	; (800dff8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dfe0:	4b04      	ldr	r3, [pc, #16]	; (800dff4 <HAL_RCC_GetHCLKFreq+0x58>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	58024400 	.word	0x58024400
 800dff0:	240084a8 	.word	0x240084a8
 800dff4:	24008014 	.word	0x24008014
 800dff8:	24008010 	.word	0x24008010

0800dffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e000:	f7ff ffcc 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800e004:	4602      	mov	r2, r0
 800e006:	4b06      	ldr	r3, [pc, #24]	; (800e020 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	091b      	lsrs	r3, r3, #4
 800e00c:	f003 0307 	and.w	r3, r3, #7
 800e010:	4904      	ldr	r1, [pc, #16]	; (800e024 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e012:	5ccb      	ldrb	r3, [r1, r3]
 800e014:	f003 031f 	and.w	r3, r3, #31
 800e018:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	58024400 	.word	0x58024400
 800e024:	240084a8 	.word	0x240084a8

0800e028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e02c:	f7ff ffb6 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800e030:	4602      	mov	r2, r0
 800e032:	4b06      	ldr	r3, [pc, #24]	; (800e04c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	0a1b      	lsrs	r3, r3, #8
 800e038:	f003 0307 	and.w	r3, r3, #7
 800e03c:	4904      	ldr	r1, [pc, #16]	; (800e050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e03e:	5ccb      	ldrb	r3, [r1, r3]
 800e040:	f003 031f 	and.w	r3, r3, #31
 800e044:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e048:	4618      	mov	r0, r3
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	58024400 	.word	0x58024400
 800e050:	240084a8 	.word	0x240084a8

0800e054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	223f      	movs	r2, #63	; 0x3f
 800e062:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e064:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	f003 0207 	and.w	r2, r3, #7
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e070:	4b17      	ldr	r3, [pc, #92]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e07c:	4b14      	ldr	r3, [pc, #80]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	f003 020f 	and.w	r2, r3, #15
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e088:	4b11      	ldr	r3, [pc, #68]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e094:	4b0e      	ldr	r3, [pc, #56]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e0ac:	4b08      	ldr	r3, [pc, #32]	; (800e0d0 <HAL_RCC_GetClockConfig+0x7c>)
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e0b8:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <HAL_RCC_GetClockConfig+0x80>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 020f 	and.w	r2, r3, #15
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	601a      	str	r2, [r3, #0]
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	58024400 	.word	0x58024400
 800e0d4:	52002000 	.word	0x52002000

0800e0d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d03f      	beq.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e0fc:	d02a      	beq.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e0fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e102:	d824      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e108:	d018      	beq.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e10a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e10e:	d81e      	bhi.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e118:	d007      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e11a:	e018      	b.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e11c:	4ba3      	ldr	r3, [pc, #652]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	4aa2      	ldr	r2, [pc, #648]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e128:	e015      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3304      	adds	r3, #4
 800e12e:	2102      	movs	r1, #2
 800e130:	4618      	mov	r0, r3
 800e132:	f001 f9d5 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e136:	4603      	mov	r3, r0
 800e138:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e13a:	e00c      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3324      	adds	r3, #36	; 0x24
 800e140:	2102      	movs	r1, #2
 800e142:	4618      	mov	r0, r3
 800e144:	f001 fa7e 	bl	800f644 <RCCEx_PLL3_Config>
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e14c:	e003      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	75fb      	strb	r3, [r7, #23]
      break;
 800e152:	e000      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e154:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d109      	bne.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e15c:	4b93      	ldr	r3, [pc, #588]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e168:	4990      	ldr	r1, [pc, #576]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e16a:	4313      	orrs	r3, r2
 800e16c:	650b      	str	r3, [r1, #80]	; 0x50
 800e16e:	e001      	b.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e170:	7dfb      	ldrb	r3, [r7, #23]
 800e172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d03d      	beq.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e184:	2b04      	cmp	r3, #4
 800e186:	d826      	bhi.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e188:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e1a5 	.word	0x0800e1a5
 800e194:	0800e1b3 	.word	0x0800e1b3
 800e198:	0800e1c5 	.word	0x0800e1c5
 800e19c:	0800e1dd 	.word	0x0800e1dd
 800e1a0:	0800e1dd 	.word	0x0800e1dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1a4:	4b81      	ldr	r3, [pc, #516]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	4a80      	ldr	r2, [pc, #512]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e1aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e1b0:	e015      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f001 f991 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e1c2:	e00c      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3324      	adds	r3, #36	; 0x24
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f001 fa3a 	bl	800f644 <RCCEx_PLL3_Config>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e1d4:	e003      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e1da:	e000      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e1dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d109      	bne.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e1e4:	4b71      	ldr	r3, [pc, #452]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e8:	f023 0207 	bic.w	r2, r3, #7
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1f0:	496e      	ldr	r1, [pc, #440]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	650b      	str	r3, [r1, #80]	; 0x50
 800e1f6:	e001      	b.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f8:	7dfb      	ldrb	r3, [r7, #23]
 800e1fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e204:	2b00      	cmp	r3, #0
 800e206:	d042      	beq.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e210:	d02b      	beq.n	800e26a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e216:	d825      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800e218:	2bc0      	cmp	r3, #192	; 0xc0
 800e21a:	d028      	beq.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800e21c:	2bc0      	cmp	r3, #192	; 0xc0
 800e21e:	d821      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800e220:	2b80      	cmp	r3, #128	; 0x80
 800e222:	d016      	beq.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800e224:	2b80      	cmp	r3, #128	; 0x80
 800e226:	d81d      	bhi.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800e22c:	2b40      	cmp	r3, #64	; 0x40
 800e22e:	d007      	beq.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800e230:	e018      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e232:	4b5e      	ldr	r3, [pc, #376]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	4a5d      	ldr	r2, [pc, #372]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e23c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800e23e:	e017      	b.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3304      	adds	r3, #4
 800e244:	2100      	movs	r1, #0
 800e246:	4618      	mov	r0, r3
 800e248:	f001 f94a 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e24c:	4603      	mov	r3, r0
 800e24e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800e250:	e00e      	b.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3324      	adds	r3, #36	; 0x24
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f001 f9f3 	bl	800f644 <RCCEx_PLL3_Config>
 800e25e:	4603      	mov	r3, r0
 800e260:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800e262:	e005      	b.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	75fb      	strb	r3, [r7, #23]
      break;
 800e268:	e002      	b.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800e26a:	bf00      	nop
 800e26c:	e000      	b.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800e26e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d109      	bne.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e276:	4b4d      	ldr	r3, [pc, #308]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e27a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e282:	494a      	ldr	r1, [pc, #296]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e284:	4313      	orrs	r3, r2
 800e286:	650b      	str	r3, [r1, #80]	; 0x50
 800e288:	e001      	b.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e296:	2b00      	cmp	r3, #0
 800e298:	d049      	beq.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e2a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2a4:	d030      	beq.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e2a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2aa:	d82a      	bhi.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e2ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e2b0:	d02c      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800e2b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e2b6:	d824      	bhi.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e2b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2bc:	d018      	beq.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800e2be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2c2:	d81e      	bhi.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d003      	beq.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800e2c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e2cc:	d007      	beq.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e2ce:	e018      	b.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2d0:	4b36      	ldr	r3, [pc, #216]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	4a35      	ldr	r2, [pc, #212]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e2dc:	e017      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f001 f8fb 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e2ee:	e00e      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3324      	adds	r3, #36	; 0x24
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f001 f9a4 	bl	800f644 <RCCEx_PLL3_Config>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e300:	e005      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	75fb      	strb	r3, [r7, #23]
      break;
 800e306:	e002      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800e308:	bf00      	nop
 800e30a:	e000      	b.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800e30c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e30e:	7dfb      	ldrb	r3, [r7, #23]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10a      	bne.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e314:	4b25      	ldr	r3, [pc, #148]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e318:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e322:	4922      	ldr	r1, [pc, #136]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e324:	4313      	orrs	r3, r2
 800e326:	658b      	str	r3, [r1, #88]	; 0x58
 800e328:	e001      	b.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e336:	2b00      	cmp	r3, #0
 800e338:	d04b      	beq.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e344:	d030      	beq.n	800e3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800e346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e34a:	d82a      	bhi.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800e34c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e350:	d02e      	beq.n	800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800e352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e356:	d824      	bhi.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800e358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e35c:	d018      	beq.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800e35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e362:	d81e      	bhi.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800e364:	2b00      	cmp	r3, #0
 800e366:	d003      	beq.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e36c:	d007      	beq.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e36e:	e018      	b.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e370:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e374:	4a0d      	ldr	r2, [pc, #52]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800e376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e37a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e37c:	e019      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3304      	adds	r3, #4
 800e382:	2100      	movs	r1, #0
 800e384:	4618      	mov	r0, r3
 800e386:	f001 f8ab 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e38a:	4603      	mov	r3, r0
 800e38c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e38e:	e010      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3324      	adds	r3, #36	; 0x24
 800e394:	2100      	movs	r1, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f001 f954 	bl	800f644 <RCCEx_PLL3_Config>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e3a0:	e007      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e3a6:	e004      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800e3a8:	bf00      	nop
 800e3aa:	e002      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e3ac:	58024400 	.word	0x58024400
      break;
 800e3b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e3b8:	4b99      	ldr	r3, [pc, #612]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e3c6:	4996      	ldr	r1, [pc, #600]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	658b      	str	r3, [r1, #88]	; 0x58
 800e3cc:	e001      	b.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
 800e3d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d032      	beq.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3e2:	2b30      	cmp	r3, #48	; 0x30
 800e3e4:	d01c      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800e3e6:	2b30      	cmp	r3, #48	; 0x30
 800e3e8:	d817      	bhi.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800e3ea:	2b20      	cmp	r3, #32
 800e3ec:	d00c      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800e3ee:	2b20      	cmp	r3, #32
 800e3f0:	d813      	bhi.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d016      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800e3f6:	2b10      	cmp	r3, #16
 800e3f8:	d10f      	bne.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3fa:	4b89      	ldr	r3, [pc, #548]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fe:	4a88      	ldr	r2, [pc, #544]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e404:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800e406:	e00e      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3304      	adds	r3, #4
 800e40c:	2102      	movs	r1, #2
 800e40e:	4618      	mov	r0, r3
 800e410:	f001 f866 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e414:	4603      	mov	r3, r0
 800e416:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800e418:	e005      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	75fb      	strb	r3, [r7, #23]
      break;
 800e41e:	e002      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800e420:	bf00      	nop
 800e422:	e000      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800e424:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d109      	bne.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e42c:	4b7c      	ldr	r3, [pc, #496]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e438:	4979      	ldr	r1, [pc, #484]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e43a:	4313      	orrs	r3, r2
 800e43c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e43e:	e001      	b.n	800e444 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d047      	beq.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e458:	d030      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e45e:	d82a      	bhi.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800e460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e464:	d02c      	beq.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800e466:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e46a:	d824      	bhi.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800e46c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e470:	d018      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800e472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e476:	d81e      	bhi.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d003      	beq.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800e47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e480:	d007      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800e482:	e018      	b.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e484:	4b66      	ldr	r3, [pc, #408]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e488:	4a65      	ldr	r2, [pc, #404]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e48a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e48e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e490:	e017      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3304      	adds	r3, #4
 800e496:	2100      	movs	r1, #0
 800e498:	4618      	mov	r0, r3
 800e49a:	f001 f821 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e4a2:	e00e      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3324      	adds	r3, #36	; 0x24
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f001 f8ca 	bl	800f644 <RCCEx_PLL3_Config>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e4b4:	e005      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ba:	e002      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800e4bc:	bf00      	nop
 800e4be:	e000      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800e4c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d109      	bne.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e4c8:	4b55      	ldr	r3, [pc, #340]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4d4:	4952      	ldr	r1, [pc, #328]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	650b      	str	r3, [r1, #80]	; 0x50
 800e4da:	e001      	b.n	800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d049      	beq.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4f4:	d02e      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e4f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4fa:	d828      	bhi.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800e4fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e500:	d02a      	beq.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800e502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e506:	d822      	bhi.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800e508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e50c:	d026      	beq.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800e50e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e512:	d81c      	bhi.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800e514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e518:	d010      	beq.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800e51a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e51e:	d816      	bhi.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800e520:	2b00      	cmp	r3, #0
 800e522:	d01d      	beq.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800e524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e528:	d111      	bne.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3304      	adds	r3, #4
 800e52e:	2101      	movs	r1, #1
 800e530:	4618      	mov	r0, r3
 800e532:	f000 ffd5 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e536:	4603      	mov	r3, r0
 800e538:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e53a:	e012      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3324      	adds	r3, #36	; 0x24
 800e540:	2101      	movs	r1, #1
 800e542:	4618      	mov	r0, r3
 800e544:	f001 f87e 	bl	800f644 <RCCEx_PLL3_Config>
 800e548:	4603      	mov	r3, r0
 800e54a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e54c:	e009      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	75fb      	strb	r3, [r7, #23]
      break;
 800e552:	e006      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800e554:	bf00      	nop
 800e556:	e004      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800e558:	bf00      	nop
 800e55a:	e002      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800e55c:	bf00      	nop
 800e55e:	e000      	b.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800e560:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d109      	bne.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e568:	4b2d      	ldr	r3, [pc, #180]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e56c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e574:	492a      	ldr	r1, [pc, #168]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e576:	4313      	orrs	r3, r2
 800e578:	650b      	str	r3, [r1, #80]	; 0x50
 800e57a:	e001      	b.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e57c:	7dfb      	ldrb	r3, [r7, #23]
 800e57e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d04d      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e596:	d02e      	beq.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800e598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e59c:	d828      	bhi.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800e59e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5a2:	d02a      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e5a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5a8:	d822      	bhi.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800e5aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e5ae:	d026      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 800e5b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e5b4:	d81c      	bhi.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800e5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ba:	d010      	beq.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5c0:	d816      	bhi.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d01d      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800e5c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5ca:	d111      	bne.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 ff84 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e5dc:	e012      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3324      	adds	r3, #36	; 0x24
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f001 f82d 	bl	800f644 <RCCEx_PLL3_Config>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e5ee:	e009      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	75fb      	strb	r3, [r7, #23]
      break;
 800e5f4:	e006      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800e5f6:	bf00      	nop
 800e5f8:	e004      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800e5fa:	bf00      	nop
 800e5fc:	e002      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800e5fe:	bf00      	nop
 800e600:	e000      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800e602:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10c      	bne.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e60a:	4b05      	ldr	r3, [pc, #20]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e60e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e618:	4901      	ldr	r1, [pc, #4]	; (800e620 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800e61a:	4313      	orrs	r3, r2
 800e61c:	658b      	str	r3, [r1, #88]	; 0x58
 800e61e:	e003      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800e620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e624:	7dfb      	ldrb	r3, [r7, #23]
 800e626:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d02f      	beq.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e63c:	d00e      	beq.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800e63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e642:	d814      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d015      	beq.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800e648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e64c:	d10f      	bne.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e64e:	4baf      	ldr	r3, [pc, #700]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e652:	4aae      	ldr	r2, [pc, #696]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e65a:	e00c      	b.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	3304      	adds	r3, #4
 800e660:	2101      	movs	r1, #1
 800e662:	4618      	mov	r0, r3
 800e664:	f000 ff3c 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e668:	4603      	mov	r3, r0
 800e66a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e66c:	e003      	b.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	75fb      	strb	r3, [r7, #23]
      break;
 800e672:	e000      	b.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800e674:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e676:	7dfb      	ldrb	r3, [r7, #23]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d109      	bne.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e67c:	4ba3      	ldr	r3, [pc, #652]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e688:	49a0      	ldr	r1, [pc, #640]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e68a:	4313      	orrs	r3, r2
 800e68c:	650b      	str	r3, [r1, #80]	; 0x50
 800e68e:	e001      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d032      	beq.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d81b      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800e6a8:	a201      	add	r2, pc, #4	; (adr r2, 800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800e6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ae:	bf00      	nop
 800e6b0:	0800e6e7 	.word	0x0800e6e7
 800e6b4:	0800e6c1 	.word	0x0800e6c1
 800e6b8:	0800e6cf 	.word	0x0800e6cf
 800e6bc:	0800e6e7 	.word	0x0800e6e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6c0:	4b92      	ldr	r3, [pc, #584]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	4a91      	ldr	r2, [pc, #580]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e6c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e6cc:	e00c      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	2102      	movs	r1, #2
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f000 ff03 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e6de:	e003      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e6e4:	e000      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800e6e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d109      	bne.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e6ee:	4b87      	ldr	r3, [pc, #540]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6f2:	f023 0203 	bic.w	r2, r3, #3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fa:	4984      	ldr	r1, [pc, #528]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e700:	e001      	b.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e702:	7dfb      	ldrb	r3, [r7, #23]
 800e704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8086 	beq.w	800e820 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e714:	4b7e      	ldr	r3, [pc, #504]	; (800e910 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a7d      	ldr	r2, [pc, #500]	; (800e910 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800e71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e71e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e720:	f7fc fdb2 	bl	800b288 <HAL_GetTick>
 800e724:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e726:	e009      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e728:	f7fc fdae 	bl	800b288 <HAL_GetTick>
 800e72c:	4602      	mov	r2, r0
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	2b64      	cmp	r3, #100	; 0x64
 800e734:	d902      	bls.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	75fb      	strb	r3, [r7, #23]
        break;
 800e73a:	e005      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e73c:	4b74      	ldr	r3, [pc, #464]	; (800e910 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e744:	2b00      	cmp	r3, #0
 800e746:	d0ef      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d166      	bne.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e74e:	4b6f      	ldr	r3, [pc, #444]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e758:	4053      	eors	r3, r2
 800e75a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d013      	beq.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e762:	4b6a      	ldr	r3, [pc, #424]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e76a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e76c:	4b67      	ldr	r3, [pc, #412]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e770:	4a66      	ldr	r2, [pc, #408]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e776:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e778:	4b64      	ldr	r3, [pc, #400]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77c:	4a63      	ldr	r2, [pc, #396]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e77e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e782:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e784:	4a61      	ldr	r2, [pc, #388]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e794:	d115      	bne.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e796:	f7fc fd77 	bl	800b288 <HAL_GetTick>
 800e79a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e79c:	e00b      	b.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e79e:	f7fc fd73 	bl	800b288 <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d902      	bls.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	75fb      	strb	r3, [r7, #23]
            break;
 800e7b4:	e005      	b.n	800e7c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7b6:	4b55      	ldr	r3, [pc, #340]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ba:	f003 0302 	and.w	r3, r3, #2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0ed      	beq.n	800e79e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d126      	bne.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e7ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7d6:	d10d      	bne.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800e7d8:	4b4c      	ldr	r3, [pc, #304]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e7e6:	0919      	lsrs	r1, r3, #4
 800e7e8:	4b4a      	ldr	r3, [pc, #296]	; (800e914 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800e7ea:	400b      	ands	r3, r1
 800e7ec:	4947      	ldr	r1, [pc, #284]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	610b      	str	r3, [r1, #16]
 800e7f2:	e005      	b.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800e7f4:	4b45      	ldr	r3, [pc, #276]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	4a44      	ldr	r2, [pc, #272]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e7fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7fe:	6113      	str	r3, [r2, #16]
 800e800:	4b42      	ldr	r3, [pc, #264]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e80a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e80e:	493f      	ldr	r1, [pc, #252]	; (800e90c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800e810:	4313      	orrs	r3, r2
 800e812:	670b      	str	r3, [r1, #112]	; 0x70
 800e814:	e004      	b.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e816:	7dfb      	ldrb	r3, [r7, #23]
 800e818:	75bb      	strb	r3, [r7, #22]
 800e81a:	e001      	b.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f000 8085 	beq.w	800e938 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e832:	2b28      	cmp	r3, #40	; 0x28
 800e834:	d866      	bhi.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800e836:	a201      	add	r2, pc, #4	; (adr r2, 800e83c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800e838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83c:	0800e919 	.word	0x0800e919
 800e840:	0800e905 	.word	0x0800e905
 800e844:	0800e905 	.word	0x0800e905
 800e848:	0800e905 	.word	0x0800e905
 800e84c:	0800e905 	.word	0x0800e905
 800e850:	0800e905 	.word	0x0800e905
 800e854:	0800e905 	.word	0x0800e905
 800e858:	0800e905 	.word	0x0800e905
 800e85c:	0800e8e1 	.word	0x0800e8e1
 800e860:	0800e905 	.word	0x0800e905
 800e864:	0800e905 	.word	0x0800e905
 800e868:	0800e905 	.word	0x0800e905
 800e86c:	0800e905 	.word	0x0800e905
 800e870:	0800e905 	.word	0x0800e905
 800e874:	0800e905 	.word	0x0800e905
 800e878:	0800e905 	.word	0x0800e905
 800e87c:	0800e8f3 	.word	0x0800e8f3
 800e880:	0800e905 	.word	0x0800e905
 800e884:	0800e905 	.word	0x0800e905
 800e888:	0800e905 	.word	0x0800e905
 800e88c:	0800e905 	.word	0x0800e905
 800e890:	0800e905 	.word	0x0800e905
 800e894:	0800e905 	.word	0x0800e905
 800e898:	0800e905 	.word	0x0800e905
 800e89c:	0800e919 	.word	0x0800e919
 800e8a0:	0800e905 	.word	0x0800e905
 800e8a4:	0800e905 	.word	0x0800e905
 800e8a8:	0800e905 	.word	0x0800e905
 800e8ac:	0800e905 	.word	0x0800e905
 800e8b0:	0800e905 	.word	0x0800e905
 800e8b4:	0800e905 	.word	0x0800e905
 800e8b8:	0800e905 	.word	0x0800e905
 800e8bc:	0800e919 	.word	0x0800e919
 800e8c0:	0800e905 	.word	0x0800e905
 800e8c4:	0800e905 	.word	0x0800e905
 800e8c8:	0800e905 	.word	0x0800e905
 800e8cc:	0800e905 	.word	0x0800e905
 800e8d0:	0800e905 	.word	0x0800e905
 800e8d4:	0800e905 	.word	0x0800e905
 800e8d8:	0800e905 	.word	0x0800e905
 800e8dc:	0800e919 	.word	0x0800e919
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f000 fdfa 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e8f0:	e013      	b.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	3324      	adds	r3, #36	; 0x24
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 fea3 	bl	800f644 <RCCEx_PLL3_Config>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e902:	e00a      	b.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	75fb      	strb	r3, [r7, #23]
      break;
 800e908:	e007      	b.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e90a:	bf00      	nop
 800e90c:	58024400 	.word	0x58024400
 800e910:	58024800 	.word	0x58024800
 800e914:	00ffffcf 	.word	0x00ffffcf
      break;
 800e918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d109      	bne.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e920:	4b96      	ldr	r3, [pc, #600]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800e922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e924:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e92c:	4993      	ldr	r1, [pc, #588]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800e92e:	4313      	orrs	r3, r2
 800e930:	654b      	str	r3, [r1, #84]	; 0x54
 800e932:	e001      	b.n	800e938 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f003 0302 	and.w	r3, r3, #2
 800e940:	2b00      	cmp	r3, #0
 800e942:	d038      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e948:	2b05      	cmp	r3, #5
 800e94a:	d821      	bhi.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800e94c:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800e94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e952:	bf00      	nop
 800e954:	0800e997 	.word	0x0800e997
 800e958:	0800e96d 	.word	0x0800e96d
 800e95c:	0800e97f 	.word	0x0800e97f
 800e960:	0800e997 	.word	0x0800e997
 800e964:	0800e997 	.word	0x0800e997
 800e968:	0800e997 	.word	0x0800e997
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3304      	adds	r3, #4
 800e970:	2101      	movs	r1, #1
 800e972:	4618      	mov	r0, r3
 800e974:	f000 fdb4 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e978:	4603      	mov	r3, r0
 800e97a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e97c:	e00c      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	3324      	adds	r3, #36	; 0x24
 800e982:	2101      	movs	r1, #1
 800e984:	4618      	mov	r0, r3
 800e986:	f000 fe5d 	bl	800f644 <RCCEx_PLL3_Config>
 800e98a:	4603      	mov	r3, r0
 800e98c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e98e:	e003      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	75fb      	strb	r3, [r7, #23]
      break;
 800e994:	e000      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800e996:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e99e:	4b77      	ldr	r3, [pc, #476]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800e9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a2:	f023 0207 	bic.w	r2, r3, #7
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9aa:	4974      	ldr	r1, [pc, #464]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	654b      	str	r3, [r1, #84]	; 0x54
 800e9b0:	e001      	b.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
 800e9b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f003 0304 	and.w	r3, r3, #4
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d03a      	beq.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9c8:	2b05      	cmp	r3, #5
 800e9ca:	d821      	bhi.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800e9cc:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800e9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d2:	bf00      	nop
 800e9d4:	0800ea17 	.word	0x0800ea17
 800e9d8:	0800e9ed 	.word	0x0800e9ed
 800e9dc:	0800e9ff 	.word	0x0800e9ff
 800e9e0:	0800ea17 	.word	0x0800ea17
 800e9e4:	0800ea17 	.word	0x0800ea17
 800e9e8:	0800ea17 	.word	0x0800ea17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 fd74 	bl	800f4e0 <RCCEx_PLL2_Config>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e9fc:	e00c      	b.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3324      	adds	r3, #36	; 0x24
 800ea02:	2101      	movs	r1, #1
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 fe1d 	bl	800f644 <RCCEx_PLL3_Config>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ea0e:	e003      	b.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	75fb      	strb	r3, [r7, #23]
      break;
 800ea14:	e000      	b.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800ea16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea18:	7dfb      	ldrb	r3, [r7, #23]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ea1e:	4b57      	ldr	r3, [pc, #348]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ea20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea22:	f023 0207 	bic.w	r2, r3, #7
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea2c:	4953      	ldr	r1, [pc, #332]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	658b      	str	r3, [r1, #88]	; 0x58
 800ea32:	e001      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea34:	7dfb      	ldrb	r3, [r7, #23]
 800ea36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f003 0320 	and.w	r3, r3, #32
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d04b      	beq.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea4e:	d02e      	beq.n	800eaae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ea50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea54:	d828      	bhi.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ea56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea5a:	d02a      	beq.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ea5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea60:	d822      	bhi.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ea62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea66:	d026      	beq.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ea68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea6c:	d81c      	bhi.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ea6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea72:	d010      	beq.n	800ea96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800ea74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea78:	d816      	bhi.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d01d      	beq.n	800eaba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800ea7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea82:	d111      	bne.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	3304      	adds	r3, #4
 800ea88:	2100      	movs	r1, #0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 fd28 	bl	800f4e0 <RCCEx_PLL2_Config>
 800ea90:	4603      	mov	r3, r0
 800ea92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ea94:	e012      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3324      	adds	r3, #36	; 0x24
 800ea9a:	2102      	movs	r1, #2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 fdd1 	bl	800f644 <RCCEx_PLL3_Config>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800eaa6:	e009      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	75fb      	strb	r3, [r7, #23]
      break;
 800eaac:	e006      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800eaae:	bf00      	nop
 800eab0:	e004      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800eab2:	bf00      	nop
 800eab4:	e002      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800eab6:	bf00      	nop
 800eab8:	e000      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800eaba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10a      	bne.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800eac2:	4b2e      	ldr	r3, [pc, #184]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800eac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eac6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ead0:	492a      	ldr	r1, [pc, #168]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ead2:	4313      	orrs	r3, r2
 800ead4:	654b      	str	r3, [r1, #84]	; 0x54
 800ead6:	e001      	b.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
 800eada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d04d      	beq.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eaee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eaf2:	d02e      	beq.n	800eb52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800eaf4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eaf8:	d828      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800eafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eafe:	d02a      	beq.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800eb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb04:	d822      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800eb06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb0a:	d026      	beq.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800eb0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb10:	d81c      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800eb12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb16:	d010      	beq.n	800eb3a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800eb18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb1c:	d816      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d01d      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800eb22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb26:	d111      	bne.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fcd6 	bl	800f4e0 <RCCEx_PLL2_Config>
 800eb34:	4603      	mov	r3, r0
 800eb36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800eb38:	e012      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3324      	adds	r3, #36	; 0x24
 800eb3e:	2102      	movs	r1, #2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 fd7f 	bl	800f644 <RCCEx_PLL3_Config>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800eb4a:	e009      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	75fb      	strb	r3, [r7, #23]
      break;
 800eb50:	e006      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800eb52:	bf00      	nop
 800eb54:	e004      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800eb56:	bf00      	nop
 800eb58:	e002      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800eb5a:	bf00      	nop
 800eb5c:	e000      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800eb5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eb60:	7dfb      	ldrb	r3, [r7, #23]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10c      	bne.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800eb66:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800eb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb74:	4901      	ldr	r1, [pc, #4]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800eb76:	4313      	orrs	r3, r2
 800eb78:	658b      	str	r3, [r1, #88]	; 0x58
 800eb7a:	e003      	b.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800eb7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d04b      	beq.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eb9a:	d02e      	beq.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800eb9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eba0:	d828      	bhi.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800eba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eba6:	d02a      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800eba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebac:	d822      	bhi.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ebae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ebb2:	d026      	beq.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800ebb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ebb8:	d81c      	bhi.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ebba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebbe:	d010      	beq.n	800ebe2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ebc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebc4:	d816      	bhi.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d01d      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800ebca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebce:	d111      	bne.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 fc82 	bl	800f4e0 <RCCEx_PLL2_Config>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ebe0:	e012      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	3324      	adds	r3, #36	; 0x24
 800ebe6:	2102      	movs	r1, #2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 fd2b 	bl	800f644 <RCCEx_PLL3_Config>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ebf2:	e009      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	75fb      	strb	r3, [r7, #23]
      break;
 800ebf8:	e006      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ebfa:	bf00      	nop
 800ebfc:	e004      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ebfe:	bf00      	nop
 800ec00:	e002      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ec02:	bf00      	nop
 800ec04:	e000      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ec06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10a      	bne.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ec0e:	4b9d      	ldr	r3, [pc, #628]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ec10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ec1c:	4999      	ldr	r1, [pc, #612]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	658b      	str	r3, [r1, #88]	; 0x58
 800ec22:	e001      	b.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f003 0308 	and.w	r3, r3, #8
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d01a      	beq.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec3e:	d10a      	bne.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3324      	adds	r3, #36	; 0x24
 800ec44:	2102      	movs	r1, #2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 fcfc 	bl	800f644 <RCCEx_PLL3_Config>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d001      	beq.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800ec52:	2301      	movs	r3, #1
 800ec54:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ec56:	4b8b      	ldr	r3, [pc, #556]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ec58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec64:	4987      	ldr	r1, [pc, #540]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ec66:	4313      	orrs	r3, r2
 800ec68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f003 0310 	and.w	r3, r3, #16
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d01a      	beq.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec80:	d10a      	bne.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3324      	adds	r3, #36	; 0x24
 800ec86:	2102      	movs	r1, #2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f000 fcdb 	bl	800f644 <RCCEx_PLL3_Config>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d001      	beq.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ec98:	4b7a      	ldr	r3, [pc, #488]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ec9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eca6:	4977      	ldr	r1, [pc, #476]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d034      	beq.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ecbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecc2:	d01d      	beq.n	800ed00 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ecc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecc8:	d817      	bhi.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ecce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd2:	d009      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ecd4:	e011      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	2100      	movs	r1, #0
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f000 fbff 	bl	800f4e0 <RCCEx_PLL2_Config>
 800ece2:	4603      	mov	r3, r0
 800ece4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ece6:	e00c      	b.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3324      	adds	r3, #36	; 0x24
 800ecec:	2102      	movs	r1, #2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 fca8 	bl	800f644 <RCCEx_PLL3_Config>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ecf8:	e003      	b.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	75fb      	strb	r3, [r7, #23]
      break;
 800ecfe:	e000      	b.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ed00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10a      	bne.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ed08:	4b5e      	ldr	r3, [pc, #376]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ed16:	495b      	ldr	r1, [pc, #364]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	658b      	str	r3, [r1, #88]	; 0x58
 800ed1c:	e001      	b.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
 800ed20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d033      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed38:	d01c      	beq.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800ed3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed3e:	d816      	bhi.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800ed40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed44:	d003      	beq.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ed46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed4a:	d007      	beq.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800ed4c:	e00f      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed4e:	4b4d      	ldr	r3, [pc, #308]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed52:	4a4c      	ldr	r2, [pc, #304]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ed5a:	e00c      	b.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3324      	adds	r3, #36	; 0x24
 800ed60:	2101      	movs	r1, #1
 800ed62:	4618      	mov	r0, r3
 800ed64:	f000 fc6e 	bl	800f644 <RCCEx_PLL3_Config>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ed6c:	e003      	b.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]
      break;
 800ed72:	e000      	b.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800ed74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ed76:	7dfb      	ldrb	r3, [r7, #23]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ed7c:	4b41      	ldr	r3, [pc, #260]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed8a:	493e      	ldr	r1, [pc, #248]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	654b      	str	r3, [r1, #84]	; 0x54
 800ed90:	e001      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
 800ed94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d029      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800edaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edae:	d007      	beq.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800edb0:	e00f      	b.n	800edd2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edb2:	4b34      	ldr	r3, [pc, #208]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800edb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb6:	4a33      	ldr	r2, [pc, #204]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800edb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800edbe:	e00b      	b.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3304      	adds	r3, #4
 800edc4:	2102      	movs	r1, #2
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fb8a 	bl	800f4e0 <RCCEx_PLL2_Config>
 800edcc:	4603      	mov	r3, r0
 800edce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800edd0:	e002      	b.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	75fb      	strb	r3, [r7, #23]
      break;
 800edd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d109      	bne.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800edde:	4b29      	ldr	r3, [pc, #164]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ede0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ede2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edea:	4926      	ldr	r1, [pc, #152]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800edec:	4313      	orrs	r3, r2
 800edee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800edf0:	e001      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00a      	beq.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3324      	adds	r3, #36	; 0x24
 800ee06:	2102      	movs	r1, #2
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 fc1b 	bl	800f644 <RCCEx_PLL3_Config>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d001      	beq.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d033      	beq.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee2c:	d017      	beq.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ee2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee32:	d811      	bhi.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ee34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee38:	d013      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ee3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee3e:	d80b      	bhi.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d010      	beq.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800ee44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee48:	d106      	bne.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee4a:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ee4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4e:	4a0d      	ldr	r2, [pc, #52]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ee50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ee56:	e007      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ee5c:	e004      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ee5e:	bf00      	nop
 800ee60:	e002      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ee62:	bf00      	nop
 800ee64:	e000      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ee66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d10c      	bne.n	800ee88 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee6e:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ee70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee7a:	4902      	ldr	r1, [pc, #8]	; (800ee84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	654b      	str	r3, [r1, #84]	; 0x54
 800ee80:	e004      	b.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800ee82:	bf00      	nop
 800ee84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d008      	beq.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ee98:	4b31      	ldr	r3, [pc, #196]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ee9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea4:	492e      	ldr	r1, [pc, #184]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eea6:	4313      	orrs	r3, r2
 800eea8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d009      	beq.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800eeb6:	4b2a      	ldr	r3, [pc, #168]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800eec4:	4926      	ldr	r1, [pc, #152]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eec6:	4313      	orrs	r3, r2
 800eec8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d008      	beq.n	800eee8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eed6:	4b22      	ldr	r3, [pc, #136]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eee2:	491f      	ldr	r1, [pc, #124]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eee4:	4313      	orrs	r3, r2
 800eee6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00d      	beq.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eef4:	4b1a      	ldr	r3, [pc, #104]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	4a19      	ldr	r2, [pc, #100]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800eefa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eefe:	6113      	str	r3, [r2, #16]
 800ef00:	4b17      	ldr	r3, [pc, #92]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef02:	691a      	ldr	r2, [r3, #16]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ef0a:	4915      	ldr	r1, [pc, #84]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	da08      	bge.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ef18:	4b11      	ldr	r3, [pc, #68]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef24:	490e      	ldr	r1, [pc, #56]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef26:	4313      	orrs	r3, r2
 800ef28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ef36:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef44:	4906      	ldr	r1, [pc, #24]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ef46:	4313      	orrs	r3, r2
 800ef48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ef4a:	7dbb      	ldrb	r3, [r7, #22]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	e000      	b.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	58024400 	.word	0x58024400

0800ef64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ef68:	f7ff f818 	bl	800df9c <HAL_RCC_GetHCLKFreq>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	091b      	lsrs	r3, r3, #4
 800ef74:	f003 0307 	and.w	r3, r3, #7
 800ef78:	4904      	ldr	r1, [pc, #16]	; (800ef8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ef7a:	5ccb      	ldrb	r3, [r1, r3]
 800ef7c:	f003 031f 	and.w	r3, r3, #31
 800ef80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	58024400 	.word	0x58024400
 800ef8c:	240084a8 	.word	0x240084a8

0800ef90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b089      	sub	sp, #36	; 0x24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef98:	4ba1      	ldr	r3, [pc, #644]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9c:	f003 0303 	and.w	r3, r3, #3
 800efa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800efa2:	4b9f      	ldr	r3, [pc, #636]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa6:	0b1b      	lsrs	r3, r3, #12
 800efa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800efae:	4b9c      	ldr	r3, [pc, #624]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb2:	091b      	lsrs	r3, r3, #4
 800efb4:	f003 0301 	and.w	r3, r3, #1
 800efb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800efba:	4b99      	ldr	r3, [pc, #612]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efbe:	08db      	lsrs	r3, r3, #3
 800efc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	fb02 f303 	mul.w	r3, r2, r3
 800efca:	ee07 3a90 	vmov	s15, r3
 800efce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 8111 	beq.w	800f200 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	f000 8083 	beq.w	800f0ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	f200 80a1 	bhi.w	800f130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d003      	beq.n	800effc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d056      	beq.n	800f0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800effa:	e099      	b.n	800f130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800effc:	4b88      	ldr	r3, [pc, #544]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 0320 	and.w	r3, r3, #32
 800f004:	2b00      	cmp	r3, #0
 800f006:	d02d      	beq.n	800f064 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f008:	4b85      	ldr	r3, [pc, #532]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	08db      	lsrs	r3, r3, #3
 800f00e:	f003 0303 	and.w	r3, r3, #3
 800f012:	4a84      	ldr	r2, [pc, #528]	; (800f224 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f014:	fa22 f303 	lsr.w	r3, r2, r3
 800f018:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	ee07 3a90 	vmov	s15, r3
 800f020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	ee07 3a90 	vmov	s15, r3
 800f02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f032:	4b7b      	ldr	r3, [pc, #492]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f03a:	ee07 3a90 	vmov	s15, r3
 800f03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f042:	ed97 6a03 	vldr	s12, [r7, #12]
 800f046:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f05e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f062:	e087      	b.n	800f174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	ee07 3a90 	vmov	s15, r3
 800f06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f06e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f22c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f076:	4b6a      	ldr	r3, [pc, #424]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f07e:	ee07 3a90 	vmov	s15, r3
 800f082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f086:	ed97 6a03 	vldr	s12, [r7, #12]
 800f08a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f0a6:	e065      	b.n	800f174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	ee07 3a90 	vmov	s15, r3
 800f0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0ba:	4b59      	ldr	r3, [pc, #356]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c2:	ee07 3a90 	vmov	s15, r3
 800f0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f0ea:	e043      	b.n	800f174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	ee07 3a90 	vmov	s15, r3
 800f0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0fe:	4b48      	ldr	r3, [pc, #288]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f106:	ee07 3a90 	vmov	s15, r3
 800f10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f112:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f12a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f12e:	e021      	b.n	800f174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	ee07 3a90 	vmov	s15, r3
 800f136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f13a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f142:	4b37      	ldr	r3, [pc, #220]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f14a:	ee07 3a90 	vmov	s15, r3
 800f14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f152:	ed97 6a03 	vldr	s12, [r7, #12]
 800f156:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f172:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f174:	4b2a      	ldr	r3, [pc, #168]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f178:	0a5b      	lsrs	r3, r3, #9
 800f17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f17e:	ee07 3a90 	vmov	s15, r3
 800f182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f19a:	ee17 2a90 	vmov	r2, s15
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f1a2:	4b1f      	ldr	r3, [pc, #124]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1a6:	0c1b      	lsrs	r3, r3, #16
 800f1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f1c8:	ee17 2a90 	vmov	r2, s15
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f1d0:	4b13      	ldr	r3, [pc, #76]	; (800f220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	0e1b      	lsrs	r3, r3, #24
 800f1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1da:	ee07 3a90 	vmov	s15, r3
 800f1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800f1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f1f6:	ee17 2a90 	vmov	r2, s15
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f1fe:	e008      	b.n	800f212 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	609a      	str	r2, [r3, #8]
}
 800f212:	bf00      	nop
 800f214:	3724      	adds	r7, #36	; 0x24
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	58024400 	.word	0x58024400
 800f224:	03d09000 	.word	0x03d09000
 800f228:	46000000 	.word	0x46000000
 800f22c:	4c742400 	.word	0x4c742400
 800f230:	4a742400 	.word	0x4a742400
 800f234:	4af42400 	.word	0x4af42400

0800f238 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f238:	b480      	push	{r7}
 800f23a:	b089      	sub	sp, #36	; 0x24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f240:	4ba1      	ldr	r3, [pc, #644]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f244:	f003 0303 	and.w	r3, r3, #3
 800f248:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f24a:	4b9f      	ldr	r3, [pc, #636]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24e:	0d1b      	lsrs	r3, r3, #20
 800f250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f254:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f256:	4b9c      	ldr	r3, [pc, #624]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25a:	0a1b      	lsrs	r3, r3, #8
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f262:	4b99      	ldr	r3, [pc, #612]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f266:	08db      	lsrs	r3, r3, #3
 800f268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	fb02 f303 	mul.w	r3, r2, r3
 800f272:	ee07 3a90 	vmov	s15, r3
 800f276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f27a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 8111 	beq.w	800f4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	f000 8083 	beq.w	800f394 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2b02      	cmp	r3, #2
 800f292:	f200 80a1 	bhi.w	800f3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d003      	beq.n	800f2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d056      	beq.n	800f350 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f2a2:	e099      	b.n	800f3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2a4:	4b88      	ldr	r3, [pc, #544]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0320 	and.w	r3, r3, #32
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d02d      	beq.n	800f30c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f2b0:	4b85      	ldr	r3, [pc, #532]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	08db      	lsrs	r3, r3, #3
 800f2b6:	f003 0303 	and.w	r3, r3, #3
 800f2ba:	4a84      	ldr	r2, [pc, #528]	; (800f4cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	ee07 3a90 	vmov	s15, r3
 800f2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	ee07 3a90 	vmov	s15, r3
 800f2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2da:	4b7b      	ldr	r3, [pc, #492]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e2:	ee07 3a90 	vmov	s15, r3
 800f2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f306:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f30a:	e087      	b.n	800f41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	ee07 3a90 	vmov	s15, r3
 800f312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f316:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f31e:	4b6a      	ldr	r3, [pc, #424]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f326:	ee07 3a90 	vmov	s15, r3
 800f32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f332:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f34a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f34e:	e065      	b.n	800f41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	ee07 3a90 	vmov	s15, r3
 800f356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f35a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f362:	4b59      	ldr	r3, [pc, #356]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f36a:	ee07 3a90 	vmov	s15, r3
 800f36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f372:	ed97 6a03 	vldr	s12, [r7, #12]
 800f376:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f38e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f392:	e043      	b.n	800f41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	ee07 3a90 	vmov	s15, r3
 800f39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f39e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f4dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3a6:	4b48      	ldr	r3, [pc, #288]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ae:	ee07 3a90 	vmov	s15, r3
 800f3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f3d6:	e021      	b.n	800f41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	ee07 3a90 	vmov	s15, r3
 800f3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ea:	4b37      	ldr	r3, [pc, #220]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3f2:	ee07 3a90 	vmov	s15, r3
 800f3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f41a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f41c:	4b2a      	ldr	r3, [pc, #168]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f420:	0a5b      	lsrs	r3, r3, #9
 800f422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f42e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f432:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f436:	edd7 6a07 	vldr	s13, [r7, #28]
 800f43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f43e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f442:	ee17 2a90 	vmov	r2, s15
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f44a:	4b1f      	ldr	r3, [pc, #124]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44e:	0c1b      	lsrs	r3, r3, #16
 800f450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f454:	ee07 3a90 	vmov	s15, r3
 800f458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f45c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f460:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f464:	edd7 6a07 	vldr	s13, [r7, #28]
 800f468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f470:	ee17 2a90 	vmov	r2, s15
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f478:	4b13      	ldr	r3, [pc, #76]	; (800f4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47c:	0e1b      	lsrs	r3, r3, #24
 800f47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f482:	ee07 3a90 	vmov	s15, r3
 800f486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f48a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f492:	edd7 6a07 	vldr	s13, [r7, #28]
 800f496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f49e:	ee17 2a90 	vmov	r2, s15
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f4a6:	e008      	b.n	800f4ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	609a      	str	r2, [r3, #8]
}
 800f4ba:	bf00      	nop
 800f4bc:	3724      	adds	r7, #36	; 0x24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	58024400 	.word	0x58024400
 800f4cc:	03d09000 	.word	0x03d09000
 800f4d0:	46000000 	.word	0x46000000
 800f4d4:	4c742400 	.word	0x4c742400
 800f4d8:	4a742400 	.word	0x4a742400
 800f4dc:	4af42400 	.word	0x4af42400

0800f4e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f4ee:	4b53      	ldr	r3, [pc, #332]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4f2:	f003 0303 	and.w	r3, r3, #3
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d101      	bne.n	800f4fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e099      	b.n	800f632 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f4fe:	4b4f      	ldr	r3, [pc, #316]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a4e      	ldr	r2, [pc, #312]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f504:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f50a:	f7fb febd 	bl	800b288 <HAL_GetTick>
 800f50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f510:	e008      	b.n	800f524 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f512:	f7fb feb9 	bl	800b288 <HAL_GetTick>
 800f516:	4602      	mov	r2, r0
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d901      	bls.n	800f524 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f520:	2303      	movs	r3, #3
 800f522:	e086      	b.n	800f632 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f524:	4b45      	ldr	r3, [pc, #276]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1f0      	bne.n	800f512 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f530:	4b42      	ldr	r3, [pc, #264]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f534:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	031b      	lsls	r3, r3, #12
 800f53e:	493f      	ldr	r1, [pc, #252]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f540:	4313      	orrs	r3, r2
 800f542:	628b      	str	r3, [r1, #40]	; 0x28
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	3b01      	subs	r3, #1
 800f54a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	3b01      	subs	r3, #1
 800f554:	025b      	lsls	r3, r3, #9
 800f556:	b29b      	uxth	r3, r3
 800f558:	431a      	orrs	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	3b01      	subs	r3, #1
 800f560:	041b      	lsls	r3, r3, #16
 800f562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f566:	431a      	orrs	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	061b      	lsls	r3, r3, #24
 800f570:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f574:	4931      	ldr	r1, [pc, #196]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f576:	4313      	orrs	r3, r2
 800f578:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f57a:	4b30      	ldr	r3, [pc, #192]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f57e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	695b      	ldr	r3, [r3, #20]
 800f586:	492d      	ldr	r1, [pc, #180]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f588:	4313      	orrs	r3, r2
 800f58a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f58c:	4b2b      	ldr	r3, [pc, #172]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f590:	f023 0220 	bic.w	r2, r3, #32
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	4928      	ldr	r1, [pc, #160]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f59a:	4313      	orrs	r3, r2
 800f59c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f59e:	4b27      	ldr	r3, [pc, #156]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a2:	4a26      	ldr	r2, [pc, #152]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5a4:	f023 0310 	bic.w	r3, r3, #16
 800f5a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f5aa:	4b24      	ldr	r3, [pc, #144]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5ae:	4b24      	ldr	r3, [pc, #144]	; (800f640 <RCCEx_PLL2_Config+0x160>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	69d2      	ldr	r2, [r2, #28]
 800f5b6:	00d2      	lsls	r2, r2, #3
 800f5b8:	4920      	ldr	r1, [pc, #128]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f5be:	4b1f      	ldr	r3, [pc, #124]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c2:	4a1e      	ldr	r2, [pc, #120]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5c4:	f043 0310 	orr.w	r3, r3, #16
 800f5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d106      	bne.n	800f5de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f5d0:	4b1a      	ldr	r3, [pc, #104]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d4:	4a19      	ldr	r2, [pc, #100]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5dc:	e00f      	b.n	800f5fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d106      	bne.n	800f5f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f5e4:	4b15      	ldr	r3, [pc, #84]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e8:	4a14      	ldr	r2, [pc, #80]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5f0:	e005      	b.n	800f5fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f5f2:	4b12      	ldr	r3, [pc, #72]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f6:	4a11      	ldr	r2, [pc, #68]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f5f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f5fe:	4b0f      	ldr	r3, [pc, #60]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a0e      	ldr	r2, [pc, #56]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f60a:	f7fb fe3d 	bl	800b288 <HAL_GetTick>
 800f60e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f610:	e008      	b.n	800f624 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f612:	f7fb fe39 	bl	800b288 <HAL_GetTick>
 800f616:	4602      	mov	r2, r0
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	1ad3      	subs	r3, r2, r3
 800f61c:	2b02      	cmp	r3, #2
 800f61e:	d901      	bls.n	800f624 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f620:	2303      	movs	r3, #3
 800f622:	e006      	b.n	800f632 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <RCCEx_PLL2_Config+0x15c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d0f0      	beq.n	800f612 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f630:	7bfb      	ldrb	r3, [r7, #15]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	58024400 	.word	0x58024400
 800f640:	ffff0007 	.word	0xffff0007

0800f644 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f652:	4b53      	ldr	r3, [pc, #332]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f656:	f003 0303 	and.w	r3, r3, #3
 800f65a:	2b03      	cmp	r3, #3
 800f65c:	d101      	bne.n	800f662 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	e099      	b.n	800f796 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f662:	4b4f      	ldr	r3, [pc, #316]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a4e      	ldr	r2, [pc, #312]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f66c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f66e:	f7fb fe0b 	bl	800b288 <HAL_GetTick>
 800f672:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f674:	e008      	b.n	800f688 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f676:	f7fb fe07 	bl	800b288 <HAL_GetTick>
 800f67a:	4602      	mov	r2, r0
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	2b02      	cmp	r3, #2
 800f682:	d901      	bls.n	800f688 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f684:	2303      	movs	r3, #3
 800f686:	e086      	b.n	800f796 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f688:	4b45      	ldr	r3, [pc, #276]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1f0      	bne.n	800f676 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f694:	4b42      	ldr	r3, [pc, #264]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	051b      	lsls	r3, r3, #20
 800f6a2:	493f      	ldr	r1, [pc, #252]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	628b      	str	r3, [r1, #40]	; 0x28
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	025b      	lsls	r3, r3, #9
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	431a      	orrs	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	3b01      	subs	r3, #1
 800f6c4:	041b      	lsls	r3, r3, #16
 800f6c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	061b      	lsls	r3, r3, #24
 800f6d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f6d8:	4931      	ldr	r1, [pc, #196]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f6de:	4b30      	ldr	r3, [pc, #192]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	492d      	ldr	r1, [pc, #180]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f6f0:	4b2b      	ldr	r3, [pc, #172]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	699b      	ldr	r3, [r3, #24]
 800f6fc:	4928      	ldr	r1, [pc, #160]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f6fe:	4313      	orrs	r3, r2
 800f700:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f702:	4b27      	ldr	r3, [pc, #156]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f706:	4a26      	ldr	r2, [pc, #152]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f70c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f70e:	4b24      	ldr	r3, [pc, #144]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f712:	4b24      	ldr	r3, [pc, #144]	; (800f7a4 <RCCEx_PLL3_Config+0x160>)
 800f714:	4013      	ands	r3, r2
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	69d2      	ldr	r2, [r2, #28]
 800f71a:	00d2      	lsls	r2, r2, #3
 800f71c:	4920      	ldr	r1, [pc, #128]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f71e:	4313      	orrs	r3, r2
 800f720:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f722:	4b1f      	ldr	r3, [pc, #124]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f726:	4a1e      	ldr	r2, [pc, #120]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f72c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d106      	bne.n	800f742 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f734:	4b1a      	ldr	r3, [pc, #104]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f738:	4a19      	ldr	r2, [pc, #100]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f73a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f73e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f740:	e00f      	b.n	800f762 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d106      	bne.n	800f756 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f748:	4b15      	ldr	r3, [pc, #84]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	4a14      	ldr	r2, [pc, #80]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f74e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f752:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f754:	e005      	b.n	800f762 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f756:	4b12      	ldr	r3, [pc, #72]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75a:	4a11      	ldr	r2, [pc, #68]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f75c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f760:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f762:	4b0f      	ldr	r3, [pc, #60]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a0e      	ldr	r2, [pc, #56]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f76c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f76e:	f7fb fd8b 	bl	800b288 <HAL_GetTick>
 800f772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f774:	e008      	b.n	800f788 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f776:	f7fb fd87 	bl	800b288 <HAL_GetTick>
 800f77a:	4602      	mov	r2, r0
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	2b02      	cmp	r3, #2
 800f782:	d901      	bls.n	800f788 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f784:	2303      	movs	r3, #3
 800f786:	e006      	b.n	800f796 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f788:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <RCCEx_PLL3_Config+0x15c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f790:	2b00      	cmp	r3, #0
 800f792:	d0f0      	beq.n	800f776 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f794:	7bfb      	ldrb	r3, [r7, #15]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	58024400 	.word	0x58024400
 800f7a4:	ffff0007 	.word	0xffff0007

0800f7a8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d101      	bne.n	800f7ba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e04d      	b.n	800f856 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	7a5b      	ldrb	r3, [r3, #9]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d105      	bne.n	800f7d0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7fb fa84 	bl	800acd8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f023 0120 	bic.w	r1, r3, #32
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685a      	ldr	r2, [r3, #4]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f042 0204 	orr.w	r2, r2, #4
 800f7fa:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f806:	2b40      	cmp	r3, #64	; 0x40
 800f808:	d104      	bne.n	800f814 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2204      	movs	r2, #4
 800f80e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f810:	2301      	movs	r3, #1
 800f812:	e020      	b.n	800f856 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f814:	f7fb fd38 	bl	800b288 <HAL_GetTick>
 800f818:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f81a:	e00e      	b.n	800f83a <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f81c:	f7fb fd34 	bl	800b288 <HAL_GetTick>
 800f820:	4602      	mov	r2, r0
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	2b02      	cmp	r3, #2
 800f828:	d907      	bls.n	800f83a <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2204      	movs	r2, #4
 800f82e:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	e00d      	b.n	800f856 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	f003 0304 	and.w	r3, r3, #4
 800f844:	2b04      	cmp	r3, #4
 800f846:	d0e9      	beq.n	800f81c <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b084      	sub	sp, #16
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	f003 0320 	and.w	r3, r3, #32
 800f874:	2b20      	cmp	r3, #32
 800f876:	d105      	bne.n	800f884 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2210      	movs	r2, #16
 800f87c:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 800f87e:	2301      	movs	r3, #1
 800f880:	60fb      	str	r3, [r7, #12]
 800f882:	e023      	b.n	800f8cc <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f88e:	2b40      	cmp	r3, #64	; 0x40
 800f890:	d11c      	bne.n	800f8cc <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b04      	cmp	r3, #4
 800f89e:	d008      	beq.n	800f8b2 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8ae:	605a      	str	r2, [r3, #4]
 800f8b0:	e00c      	b.n	800f8cc <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2208      	movs	r2, #8
 800f8b6:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f022 0208 	bic.w	r2, r2, #8
 800f8ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d10b      	bne.n	800f8ea <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2204      	movs	r2, #4
 800f8d6:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f839 	bl	800f950 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800f8e6:	605a      	str	r2, [r3, #4]

    return;
 800f8e8:	e024      	b.n	800f934 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	f003 0301 	and.w	r3, r3, #1
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d11d      	bne.n	800f934 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f022 0208 	bic.w	r2, r2, #8
 800f906:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	689a      	ldr	r2, [r3, #8]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	7a5b      	ldrb	r3, [r3, #9]
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b04      	cmp	r3, #4
 800f91a:	d00b      	beq.n	800f934 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	4619      	mov	r1, r3
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f803 	bl	800f93a <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d101      	bne.n	800f976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	e049      	b.n	800fa0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f841 	bl	800fa12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2202      	movs	r2, #2
 800f994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3304      	adds	r3, #4
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	f000 f9f8 	bl	800fd98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fa12:	b480      	push	{r7}
 800fa14:	b083      	sub	sp, #12
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fa1a:	bf00      	nop
 800fa1c:	370c      	adds	r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d001      	beq.n	800fa40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e04f      	b.n	800fae0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68da      	ldr	r2, [r3, #12]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f042 0201 	orr.w	r2, r2, #1
 800fa56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a23      	ldr	r2, [pc, #140]	; (800faec <HAL_TIM_Base_Start_IT+0xc4>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d01d      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa6a:	d018      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a1f      	ldr	r2, [pc, #124]	; (800faf0 <HAL_TIM_Base_Start_IT+0xc8>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d013      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a1e      	ldr	r2, [pc, #120]	; (800faf4 <HAL_TIM_Base_Start_IT+0xcc>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d00e      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a1c      	ldr	r2, [pc, #112]	; (800faf8 <HAL_TIM_Base_Start_IT+0xd0>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d009      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a1b      	ldr	r2, [pc, #108]	; (800fafc <HAL_TIM_Base_Start_IT+0xd4>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d004      	beq.n	800fa9e <HAL_TIM_Base_Start_IT+0x76>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a19      	ldr	r2, [pc, #100]	; (800fb00 <HAL_TIM_Base_Start_IT+0xd8>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d115      	bne.n	800faca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	689a      	ldr	r2, [r3, #8]
 800faa4:	4b17      	ldr	r3, [pc, #92]	; (800fb04 <HAL_TIM_Base_Start_IT+0xdc>)
 800faa6:	4013      	ands	r3, r2
 800faa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b06      	cmp	r3, #6
 800faae:	d015      	beq.n	800fadc <HAL_TIM_Base_Start_IT+0xb4>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fab6:	d011      	beq.n	800fadc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f042 0201 	orr.w	r2, r2, #1
 800fac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fac8:	e008      	b.n	800fadc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f042 0201 	orr.w	r2, r2, #1
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	e000      	b.n	800fade <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fadc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	40010000 	.word	0x40010000
 800faf0:	40000400 	.word	0x40000400
 800faf4:	40000800 	.word	0x40000800
 800faf8:	40000c00 	.word	0x40000c00
 800fafc:	40010400 	.word	0x40010400
 800fb00:	40001800 	.word	0x40001800
 800fb04:	00010007 	.word	0x00010007

0800fb08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	f003 0302 	and.w	r3, r3, #2
 800fb1a:	2b02      	cmp	r3, #2
 800fb1c:	d122      	bne.n	800fb64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d11b      	bne.n	800fb64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f06f 0202 	mvn.w	r2, #2
 800fb34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	f003 0303 	and.w	r3, r3, #3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f905 	bl	800fd5a <HAL_TIM_IC_CaptureCallback>
 800fb50:	e005      	b.n	800fb5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f8f7 	bl	800fd46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f908 	bl	800fd6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	f003 0304 	and.w	r3, r3, #4
 800fb6e:	2b04      	cmp	r3, #4
 800fb70:	d122      	bne.n	800fbb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	f003 0304 	and.w	r3, r3, #4
 800fb7c:	2b04      	cmp	r3, #4
 800fb7e:	d11b      	bne.n	800fbb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f06f 0204 	mvn.w	r2, #4
 800fb88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d003      	beq.n	800fba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 f8db 	bl	800fd5a <HAL_TIM_IC_CaptureCallback>
 800fba4:	e005      	b.n	800fbb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 f8cd 	bl	800fd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 f8de 	bl	800fd6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	f003 0308 	and.w	r3, r3, #8
 800fbc2:	2b08      	cmp	r3, #8
 800fbc4:	d122      	bne.n	800fc0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	f003 0308 	and.w	r3, r3, #8
 800fbd0:	2b08      	cmp	r3, #8
 800fbd2:	d11b      	bne.n	800fc0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f06f 0208 	mvn.w	r2, #8
 800fbdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2204      	movs	r2, #4
 800fbe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	f003 0303 	and.w	r3, r3, #3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f8b1 	bl	800fd5a <HAL_TIM_IC_CaptureCallback>
 800fbf8:	e005      	b.n	800fc06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f8a3 	bl	800fd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 f8b4 	bl	800fd6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	f003 0310 	and.w	r3, r3, #16
 800fc16:	2b10      	cmp	r3, #16
 800fc18:	d122      	bne.n	800fc60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	f003 0310 	and.w	r3, r3, #16
 800fc24:	2b10      	cmp	r3, #16
 800fc26:	d11b      	bne.n	800fc60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f06f 0210 	mvn.w	r2, #16
 800fc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2208      	movs	r2, #8
 800fc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d003      	beq.n	800fc4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f887 	bl	800fd5a <HAL_TIM_IC_CaptureCallback>
 800fc4c:	e005      	b.n	800fc5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f879 	bl	800fd46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f88a 	bl	800fd6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d10e      	bne.n	800fc8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	f003 0301 	and.w	r3, r3, #1
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d107      	bne.n	800fc8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f06f 0201 	mvn.w	r2, #1
 800fc84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7fa ffd2 	bl	800ac30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc96:	2b80      	cmp	r3, #128	; 0x80
 800fc98:	d10e      	bne.n	800fcb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fca4:	2b80      	cmp	r3, #128	; 0x80
 800fca6:	d107      	bne.n	800fcb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f914 	bl	800fee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcc6:	d10e      	bne.n	800fce6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcd2:	2b80      	cmp	r3, #128	; 0x80
 800fcd4:	d107      	bne.n	800fce6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fcde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f907 	bl	800fef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcf0:	2b40      	cmp	r3, #64	; 0x40
 800fcf2:	d10e      	bne.n	800fd12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcfe:	2b40      	cmp	r3, #64	; 0x40
 800fd00:	d107      	bne.n	800fd12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f838 	bl	800fd82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	691b      	ldr	r3, [r3, #16]
 800fd18:	f003 0320 	and.w	r3, r3, #32
 800fd1c:	2b20      	cmp	r3, #32
 800fd1e:	d10e      	bne.n	800fd3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	f003 0320 	and.w	r3, r3, #32
 800fd2a:	2b20      	cmp	r3, #32
 800fd2c:	d107      	bne.n	800fd3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f06f 0220 	mvn.w	r2, #32
 800fd36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f8c7 	bl	800fecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fd3e:	bf00      	nop
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd46:	b480      	push	{r7}
 800fd48:	b083      	sub	sp, #12
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd4e:	bf00      	nop
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd5a:	b480      	push	{r7}
 800fd5c:	b083      	sub	sp, #12
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd62:	bf00      	nop
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd6e:	b480      	push	{r7}
 800fd70:	b083      	sub	sp, #12
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd82:	b480      	push	{r7}
 800fd84:	b083      	sub	sp, #12
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd8a:	bf00      	nop
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
	...

0800fd98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4a40      	ldr	r2, [pc, #256]	; (800feac <TIM_Base_SetConfig+0x114>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d013      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdb6:	d00f      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a3d      	ldr	r2, [pc, #244]	; (800feb0 <TIM_Base_SetConfig+0x118>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00b      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a3c      	ldr	r2, [pc, #240]	; (800feb4 <TIM_Base_SetConfig+0x11c>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d007      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a3b      	ldr	r2, [pc, #236]	; (800feb8 <TIM_Base_SetConfig+0x120>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d003      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a3a      	ldr	r2, [pc, #232]	; (800febc <TIM_Base_SetConfig+0x124>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d108      	bne.n	800fdea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a2f      	ldr	r2, [pc, #188]	; (800feac <TIM_Base_SetConfig+0x114>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d01f      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdf8:	d01b      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a2c      	ldr	r2, [pc, #176]	; (800feb0 <TIM_Base_SetConfig+0x118>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d017      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a2b      	ldr	r2, [pc, #172]	; (800feb4 <TIM_Base_SetConfig+0x11c>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d013      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a2a      	ldr	r2, [pc, #168]	; (800feb8 <TIM_Base_SetConfig+0x120>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d00f      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a29      	ldr	r2, [pc, #164]	; (800febc <TIM_Base_SetConfig+0x124>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d00b      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a28      	ldr	r2, [pc, #160]	; (800fec0 <TIM_Base_SetConfig+0x128>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d007      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a27      	ldr	r2, [pc, #156]	; (800fec4 <TIM_Base_SetConfig+0x12c>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d003      	beq.n	800fe32 <TIM_Base_SetConfig+0x9a>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4a26      	ldr	r2, [pc, #152]	; (800fec8 <TIM_Base_SetConfig+0x130>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d108      	bne.n	800fe44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	4313      	orrs	r3, r2
 800fe42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	689a      	ldr	r2, [r3, #8]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a10      	ldr	r2, [pc, #64]	; (800feac <TIM_Base_SetConfig+0x114>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d00f      	beq.n	800fe90 <TIM_Base_SetConfig+0xf8>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a12      	ldr	r2, [pc, #72]	; (800febc <TIM_Base_SetConfig+0x124>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d00b      	beq.n	800fe90 <TIM_Base_SetConfig+0xf8>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4a11      	ldr	r2, [pc, #68]	; (800fec0 <TIM_Base_SetConfig+0x128>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d007      	beq.n	800fe90 <TIM_Base_SetConfig+0xf8>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a10      	ldr	r2, [pc, #64]	; (800fec4 <TIM_Base_SetConfig+0x12c>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d003      	beq.n	800fe90 <TIM_Base_SetConfig+0xf8>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a0f      	ldr	r2, [pc, #60]	; (800fec8 <TIM_Base_SetConfig+0x130>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d103      	bne.n	800fe98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	691a      	ldr	r2, [r3, #16]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	615a      	str	r2, [r3, #20]
}
 800fe9e:	bf00      	nop
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	40010000 	.word	0x40010000
 800feb0:	40000400 	.word	0x40000400
 800feb4:	40000800 	.word	0x40000800
 800feb8:	40000c00 	.word	0x40000c00
 800febc:	40010400 	.word	0x40010400
 800fec0:	40014000 	.word	0x40014000
 800fec4:	40014400 	.word	0x40014400
 800fec8:	40014800 	.word	0x40014800

0800fecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fee8:	bf00      	nop
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff16:	2301      	movs	r3, #1
 800ff18:	e042      	b.n	800ffa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d106      	bne.n	800ff32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7fa ff13 	bl	800ad58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2224      	movs	r2, #36	; 0x24
 800ff36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f022 0201 	bic.w	r2, r2, #1
 800ff48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f8c2 	bl	80100d4 <UART_SetConfig>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d101      	bne.n	800ff5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e022      	b.n	800ffa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 fe20 	bl	8010ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	689a      	ldr	r2, [r3, #8]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f042 0201 	orr.w	r2, r2, #1
 800ff96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fea7 	bl	8010cec <UART_CheckIdleState>
 800ff9e:	4603      	mov	r3, r0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af02      	add	r7, sp, #8
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	603b      	str	r3, [r7, #0]
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffbe:	2b20      	cmp	r3, #32
 800ffc0:	f040 8083 	bne.w	80100ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <HAL_UART_Transmit+0x28>
 800ffca:	88fb      	ldrh	r3, [r7, #6]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e07b      	b.n	80100cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d101      	bne.n	800ffe2 <HAL_UART_Transmit+0x3a>
 800ffde:	2302      	movs	r3, #2
 800ffe0:	e074      	b.n	80100cc <HAL_UART_Transmit+0x124>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2221      	movs	r2, #33	; 0x21
 800fff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fffa:	f7fb f945 	bl	800b288 <HAL_GetTick>
 800fffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	88fa      	ldrh	r2, [r7, #6]
 8010004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	88fa      	ldrh	r2, [r7, #6]
 801000c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010018:	d108      	bne.n	801002c <HAL_UART_Transmit+0x84>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d104      	bne.n	801002c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010022:	2300      	movs	r3, #0
 8010024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	61bb      	str	r3, [r7, #24]
 801002a:	e003      	b.n	8010034 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010030:	2300      	movs	r3, #0
 8010032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801003c:	e02c      	b.n	8010098 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2200      	movs	r2, #0
 8010046:	2180      	movs	r1, #128	; 0x80
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 fe9a 	bl	8010d82 <UART_WaitOnFlagUntilTimeout>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010054:	2303      	movs	r3, #3
 8010056:	e039      	b.n	80100cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d10b      	bne.n	8010076 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801006c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	3302      	adds	r3, #2
 8010072:	61bb      	str	r3, [r7, #24]
 8010074:	e007      	b.n	8010086 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	781a      	ldrb	r2, [r3, #0]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	3301      	adds	r3, #1
 8010084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801008c:	b29b      	uxth	r3, r3
 801008e:	3b01      	subs	r3, #1
 8010090:	b29a      	uxth	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801009e:	b29b      	uxth	r3, r3
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1cc      	bne.n	801003e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	2200      	movs	r2, #0
 80100ac:	2140      	movs	r1, #64	; 0x40
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f000 fe67 	bl	8010d82 <UART_WaitOnFlagUntilTimeout>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80100ba:	2303      	movs	r3, #3
 80100bc:	e006      	b.n	80100cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2220      	movs	r2, #32
 80100c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	e000      	b.n	80100cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80100ca:	2302      	movs	r3, #2
  }
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3720      	adds	r7, #32
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80100d8:	b092      	sub	sp, #72	; 0x48
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	689a      	ldr	r2, [r3, #8]
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	691b      	ldr	r3, [r3, #16]
 80100ec:	431a      	orrs	r2, r3
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	695b      	ldr	r3, [r3, #20]
 80100f2:	431a      	orrs	r2, r3
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	69db      	ldr	r3, [r3, #28]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	4bbe      	ldr	r3, [pc, #760]	; (80103fc <UART_SetConfig+0x328>)
 8010104:	4013      	ands	r3, r2
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	6812      	ldr	r2, [r2, #0]
 801010a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801010c:	430b      	orrs	r3, r1
 801010e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	68da      	ldr	r2, [r3, #12]
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	430a      	orrs	r2, r1
 8010124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	699b      	ldr	r3, [r3, #24]
 801012a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4ab3      	ldr	r2, [pc, #716]	; (8010400 <UART_SetConfig+0x32c>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d004      	beq.n	8010140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	6a1b      	ldr	r3, [r3, #32]
 801013a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801013c:	4313      	orrs	r3, r2
 801013e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	689a      	ldr	r2, [r3, #8]
 8010146:	4baf      	ldr	r3, [pc, #700]	; (8010404 <UART_SetConfig+0x330>)
 8010148:	4013      	ands	r3, r2
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	6812      	ldr	r2, [r2, #0]
 801014e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010150:	430b      	orrs	r3, r1
 8010152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015a:	f023 010f 	bic.w	r1, r3, #15
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	430a      	orrs	r2, r1
 8010168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4aa6      	ldr	r2, [pc, #664]	; (8010408 <UART_SetConfig+0x334>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d177      	bne.n	8010264 <UART_SetConfig+0x190>
 8010174:	4ba5      	ldr	r3, [pc, #660]	; (801040c <UART_SetConfig+0x338>)
 8010176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801017c:	2b28      	cmp	r3, #40	; 0x28
 801017e:	d86d      	bhi.n	801025c <UART_SetConfig+0x188>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <UART_SetConfig+0xb4>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	0801022d 	.word	0x0801022d
 801018c:	0801025d 	.word	0x0801025d
 8010190:	0801025d 	.word	0x0801025d
 8010194:	0801025d 	.word	0x0801025d
 8010198:	0801025d 	.word	0x0801025d
 801019c:	0801025d 	.word	0x0801025d
 80101a0:	0801025d 	.word	0x0801025d
 80101a4:	0801025d 	.word	0x0801025d
 80101a8:	08010235 	.word	0x08010235
 80101ac:	0801025d 	.word	0x0801025d
 80101b0:	0801025d 	.word	0x0801025d
 80101b4:	0801025d 	.word	0x0801025d
 80101b8:	0801025d 	.word	0x0801025d
 80101bc:	0801025d 	.word	0x0801025d
 80101c0:	0801025d 	.word	0x0801025d
 80101c4:	0801025d 	.word	0x0801025d
 80101c8:	0801023d 	.word	0x0801023d
 80101cc:	0801025d 	.word	0x0801025d
 80101d0:	0801025d 	.word	0x0801025d
 80101d4:	0801025d 	.word	0x0801025d
 80101d8:	0801025d 	.word	0x0801025d
 80101dc:	0801025d 	.word	0x0801025d
 80101e0:	0801025d 	.word	0x0801025d
 80101e4:	0801025d 	.word	0x0801025d
 80101e8:	08010245 	.word	0x08010245
 80101ec:	0801025d 	.word	0x0801025d
 80101f0:	0801025d 	.word	0x0801025d
 80101f4:	0801025d 	.word	0x0801025d
 80101f8:	0801025d 	.word	0x0801025d
 80101fc:	0801025d 	.word	0x0801025d
 8010200:	0801025d 	.word	0x0801025d
 8010204:	0801025d 	.word	0x0801025d
 8010208:	0801024d 	.word	0x0801024d
 801020c:	0801025d 	.word	0x0801025d
 8010210:	0801025d 	.word	0x0801025d
 8010214:	0801025d 	.word	0x0801025d
 8010218:	0801025d 	.word	0x0801025d
 801021c:	0801025d 	.word	0x0801025d
 8010220:	0801025d 	.word	0x0801025d
 8010224:	0801025d 	.word	0x0801025d
 8010228:	08010255 	.word	0x08010255
 801022c:	2301      	movs	r3, #1
 801022e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010232:	e222      	b.n	801067a <UART_SetConfig+0x5a6>
 8010234:	2304      	movs	r3, #4
 8010236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801023a:	e21e      	b.n	801067a <UART_SetConfig+0x5a6>
 801023c:	2308      	movs	r3, #8
 801023e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010242:	e21a      	b.n	801067a <UART_SetConfig+0x5a6>
 8010244:	2310      	movs	r3, #16
 8010246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801024a:	e216      	b.n	801067a <UART_SetConfig+0x5a6>
 801024c:	2320      	movs	r3, #32
 801024e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010252:	e212      	b.n	801067a <UART_SetConfig+0x5a6>
 8010254:	2340      	movs	r3, #64	; 0x40
 8010256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801025a:	e20e      	b.n	801067a <UART_SetConfig+0x5a6>
 801025c:	2380      	movs	r3, #128	; 0x80
 801025e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010262:	e20a      	b.n	801067a <UART_SetConfig+0x5a6>
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a69      	ldr	r2, [pc, #420]	; (8010410 <UART_SetConfig+0x33c>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d130      	bne.n	80102d0 <UART_SetConfig+0x1fc>
 801026e:	4b67      	ldr	r3, [pc, #412]	; (801040c <UART_SetConfig+0x338>)
 8010270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010272:	f003 0307 	and.w	r3, r3, #7
 8010276:	2b05      	cmp	r3, #5
 8010278:	d826      	bhi.n	80102c8 <UART_SetConfig+0x1f4>
 801027a:	a201      	add	r2, pc, #4	; (adr r2, 8010280 <UART_SetConfig+0x1ac>)
 801027c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010280:	08010299 	.word	0x08010299
 8010284:	080102a1 	.word	0x080102a1
 8010288:	080102a9 	.word	0x080102a9
 801028c:	080102b1 	.word	0x080102b1
 8010290:	080102b9 	.word	0x080102b9
 8010294:	080102c1 	.word	0x080102c1
 8010298:	2300      	movs	r3, #0
 801029a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801029e:	e1ec      	b.n	801067a <UART_SetConfig+0x5a6>
 80102a0:	2304      	movs	r3, #4
 80102a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102a6:	e1e8      	b.n	801067a <UART_SetConfig+0x5a6>
 80102a8:	2308      	movs	r3, #8
 80102aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102ae:	e1e4      	b.n	801067a <UART_SetConfig+0x5a6>
 80102b0:	2310      	movs	r3, #16
 80102b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102b6:	e1e0      	b.n	801067a <UART_SetConfig+0x5a6>
 80102b8:	2320      	movs	r3, #32
 80102ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102be:	e1dc      	b.n	801067a <UART_SetConfig+0x5a6>
 80102c0:	2340      	movs	r3, #64	; 0x40
 80102c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102c6:	e1d8      	b.n	801067a <UART_SetConfig+0x5a6>
 80102c8:	2380      	movs	r3, #128	; 0x80
 80102ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102ce:	e1d4      	b.n	801067a <UART_SetConfig+0x5a6>
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a4f      	ldr	r2, [pc, #316]	; (8010414 <UART_SetConfig+0x340>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d130      	bne.n	801033c <UART_SetConfig+0x268>
 80102da:	4b4c      	ldr	r3, [pc, #304]	; (801040c <UART_SetConfig+0x338>)
 80102dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102de:	f003 0307 	and.w	r3, r3, #7
 80102e2:	2b05      	cmp	r3, #5
 80102e4:	d826      	bhi.n	8010334 <UART_SetConfig+0x260>
 80102e6:	a201      	add	r2, pc, #4	; (adr r2, 80102ec <UART_SetConfig+0x218>)
 80102e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ec:	08010305 	.word	0x08010305
 80102f0:	0801030d 	.word	0x0801030d
 80102f4:	08010315 	.word	0x08010315
 80102f8:	0801031d 	.word	0x0801031d
 80102fc:	08010325 	.word	0x08010325
 8010300:	0801032d 	.word	0x0801032d
 8010304:	2300      	movs	r3, #0
 8010306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801030a:	e1b6      	b.n	801067a <UART_SetConfig+0x5a6>
 801030c:	2304      	movs	r3, #4
 801030e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010312:	e1b2      	b.n	801067a <UART_SetConfig+0x5a6>
 8010314:	2308      	movs	r3, #8
 8010316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801031a:	e1ae      	b.n	801067a <UART_SetConfig+0x5a6>
 801031c:	2310      	movs	r3, #16
 801031e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010322:	e1aa      	b.n	801067a <UART_SetConfig+0x5a6>
 8010324:	2320      	movs	r3, #32
 8010326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801032a:	e1a6      	b.n	801067a <UART_SetConfig+0x5a6>
 801032c:	2340      	movs	r3, #64	; 0x40
 801032e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010332:	e1a2      	b.n	801067a <UART_SetConfig+0x5a6>
 8010334:	2380      	movs	r3, #128	; 0x80
 8010336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801033a:	e19e      	b.n	801067a <UART_SetConfig+0x5a6>
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4a35      	ldr	r2, [pc, #212]	; (8010418 <UART_SetConfig+0x344>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d130      	bne.n	80103a8 <UART_SetConfig+0x2d4>
 8010346:	4b31      	ldr	r3, [pc, #196]	; (801040c <UART_SetConfig+0x338>)
 8010348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801034a:	f003 0307 	and.w	r3, r3, #7
 801034e:	2b05      	cmp	r3, #5
 8010350:	d826      	bhi.n	80103a0 <UART_SetConfig+0x2cc>
 8010352:	a201      	add	r2, pc, #4	; (adr r2, 8010358 <UART_SetConfig+0x284>)
 8010354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010358:	08010371 	.word	0x08010371
 801035c:	08010379 	.word	0x08010379
 8010360:	08010381 	.word	0x08010381
 8010364:	08010389 	.word	0x08010389
 8010368:	08010391 	.word	0x08010391
 801036c:	08010399 	.word	0x08010399
 8010370:	2300      	movs	r3, #0
 8010372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010376:	e180      	b.n	801067a <UART_SetConfig+0x5a6>
 8010378:	2304      	movs	r3, #4
 801037a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801037e:	e17c      	b.n	801067a <UART_SetConfig+0x5a6>
 8010380:	2308      	movs	r3, #8
 8010382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010386:	e178      	b.n	801067a <UART_SetConfig+0x5a6>
 8010388:	2310      	movs	r3, #16
 801038a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801038e:	e174      	b.n	801067a <UART_SetConfig+0x5a6>
 8010390:	2320      	movs	r3, #32
 8010392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010396:	e170      	b.n	801067a <UART_SetConfig+0x5a6>
 8010398:	2340      	movs	r3, #64	; 0x40
 801039a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801039e:	e16c      	b.n	801067a <UART_SetConfig+0x5a6>
 80103a0:	2380      	movs	r3, #128	; 0x80
 80103a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103a6:	e168      	b.n	801067a <UART_SetConfig+0x5a6>
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a1b      	ldr	r2, [pc, #108]	; (801041c <UART_SetConfig+0x348>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d142      	bne.n	8010438 <UART_SetConfig+0x364>
 80103b2:	4b16      	ldr	r3, [pc, #88]	; (801040c <UART_SetConfig+0x338>)
 80103b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103b6:	f003 0307 	and.w	r3, r3, #7
 80103ba:	2b05      	cmp	r3, #5
 80103bc:	d838      	bhi.n	8010430 <UART_SetConfig+0x35c>
 80103be:	a201      	add	r2, pc, #4	; (adr r2, 80103c4 <UART_SetConfig+0x2f0>)
 80103c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c4:	080103dd 	.word	0x080103dd
 80103c8:	080103e5 	.word	0x080103e5
 80103cc:	080103ed 	.word	0x080103ed
 80103d0:	080103f5 	.word	0x080103f5
 80103d4:	08010421 	.word	0x08010421
 80103d8:	08010429 	.word	0x08010429
 80103dc:	2300      	movs	r3, #0
 80103de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103e2:	e14a      	b.n	801067a <UART_SetConfig+0x5a6>
 80103e4:	2304      	movs	r3, #4
 80103e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103ea:	e146      	b.n	801067a <UART_SetConfig+0x5a6>
 80103ec:	2308      	movs	r3, #8
 80103ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103f2:	e142      	b.n	801067a <UART_SetConfig+0x5a6>
 80103f4:	2310      	movs	r3, #16
 80103f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103fa:	e13e      	b.n	801067a <UART_SetConfig+0x5a6>
 80103fc:	cfff69f3 	.word	0xcfff69f3
 8010400:	58000c00 	.word	0x58000c00
 8010404:	11fff4ff 	.word	0x11fff4ff
 8010408:	40011000 	.word	0x40011000
 801040c:	58024400 	.word	0x58024400
 8010410:	40004400 	.word	0x40004400
 8010414:	40004800 	.word	0x40004800
 8010418:	40004c00 	.word	0x40004c00
 801041c:	40005000 	.word	0x40005000
 8010420:	2320      	movs	r3, #32
 8010422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010426:	e128      	b.n	801067a <UART_SetConfig+0x5a6>
 8010428:	2340      	movs	r3, #64	; 0x40
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801042e:	e124      	b.n	801067a <UART_SetConfig+0x5a6>
 8010430:	2380      	movs	r3, #128	; 0x80
 8010432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010436:	e120      	b.n	801067a <UART_SetConfig+0x5a6>
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4acb      	ldr	r2, [pc, #812]	; (801076c <UART_SetConfig+0x698>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d176      	bne.n	8010530 <UART_SetConfig+0x45c>
 8010442:	4bcb      	ldr	r3, [pc, #812]	; (8010770 <UART_SetConfig+0x69c>)
 8010444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801044a:	2b28      	cmp	r3, #40	; 0x28
 801044c:	d86c      	bhi.n	8010528 <UART_SetConfig+0x454>
 801044e:	a201      	add	r2, pc, #4	; (adr r2, 8010454 <UART_SetConfig+0x380>)
 8010450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010454:	080104f9 	.word	0x080104f9
 8010458:	08010529 	.word	0x08010529
 801045c:	08010529 	.word	0x08010529
 8010460:	08010529 	.word	0x08010529
 8010464:	08010529 	.word	0x08010529
 8010468:	08010529 	.word	0x08010529
 801046c:	08010529 	.word	0x08010529
 8010470:	08010529 	.word	0x08010529
 8010474:	08010501 	.word	0x08010501
 8010478:	08010529 	.word	0x08010529
 801047c:	08010529 	.word	0x08010529
 8010480:	08010529 	.word	0x08010529
 8010484:	08010529 	.word	0x08010529
 8010488:	08010529 	.word	0x08010529
 801048c:	08010529 	.word	0x08010529
 8010490:	08010529 	.word	0x08010529
 8010494:	08010509 	.word	0x08010509
 8010498:	08010529 	.word	0x08010529
 801049c:	08010529 	.word	0x08010529
 80104a0:	08010529 	.word	0x08010529
 80104a4:	08010529 	.word	0x08010529
 80104a8:	08010529 	.word	0x08010529
 80104ac:	08010529 	.word	0x08010529
 80104b0:	08010529 	.word	0x08010529
 80104b4:	08010511 	.word	0x08010511
 80104b8:	08010529 	.word	0x08010529
 80104bc:	08010529 	.word	0x08010529
 80104c0:	08010529 	.word	0x08010529
 80104c4:	08010529 	.word	0x08010529
 80104c8:	08010529 	.word	0x08010529
 80104cc:	08010529 	.word	0x08010529
 80104d0:	08010529 	.word	0x08010529
 80104d4:	08010519 	.word	0x08010519
 80104d8:	08010529 	.word	0x08010529
 80104dc:	08010529 	.word	0x08010529
 80104e0:	08010529 	.word	0x08010529
 80104e4:	08010529 	.word	0x08010529
 80104e8:	08010529 	.word	0x08010529
 80104ec:	08010529 	.word	0x08010529
 80104f0:	08010529 	.word	0x08010529
 80104f4:	08010521 	.word	0x08010521
 80104f8:	2301      	movs	r3, #1
 80104fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104fe:	e0bc      	b.n	801067a <UART_SetConfig+0x5a6>
 8010500:	2304      	movs	r3, #4
 8010502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010506:	e0b8      	b.n	801067a <UART_SetConfig+0x5a6>
 8010508:	2308      	movs	r3, #8
 801050a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801050e:	e0b4      	b.n	801067a <UART_SetConfig+0x5a6>
 8010510:	2310      	movs	r3, #16
 8010512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010516:	e0b0      	b.n	801067a <UART_SetConfig+0x5a6>
 8010518:	2320      	movs	r3, #32
 801051a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801051e:	e0ac      	b.n	801067a <UART_SetConfig+0x5a6>
 8010520:	2340      	movs	r3, #64	; 0x40
 8010522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010526:	e0a8      	b.n	801067a <UART_SetConfig+0x5a6>
 8010528:	2380      	movs	r3, #128	; 0x80
 801052a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801052e:	e0a4      	b.n	801067a <UART_SetConfig+0x5a6>
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a8f      	ldr	r2, [pc, #572]	; (8010774 <UART_SetConfig+0x6a0>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d130      	bne.n	801059c <UART_SetConfig+0x4c8>
 801053a:	4b8d      	ldr	r3, [pc, #564]	; (8010770 <UART_SetConfig+0x69c>)
 801053c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801053e:	f003 0307 	and.w	r3, r3, #7
 8010542:	2b05      	cmp	r3, #5
 8010544:	d826      	bhi.n	8010594 <UART_SetConfig+0x4c0>
 8010546:	a201      	add	r2, pc, #4	; (adr r2, 801054c <UART_SetConfig+0x478>)
 8010548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054c:	08010565 	.word	0x08010565
 8010550:	0801056d 	.word	0x0801056d
 8010554:	08010575 	.word	0x08010575
 8010558:	0801057d 	.word	0x0801057d
 801055c:	08010585 	.word	0x08010585
 8010560:	0801058d 	.word	0x0801058d
 8010564:	2300      	movs	r3, #0
 8010566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801056a:	e086      	b.n	801067a <UART_SetConfig+0x5a6>
 801056c:	2304      	movs	r3, #4
 801056e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010572:	e082      	b.n	801067a <UART_SetConfig+0x5a6>
 8010574:	2308      	movs	r3, #8
 8010576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801057a:	e07e      	b.n	801067a <UART_SetConfig+0x5a6>
 801057c:	2310      	movs	r3, #16
 801057e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010582:	e07a      	b.n	801067a <UART_SetConfig+0x5a6>
 8010584:	2320      	movs	r3, #32
 8010586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058a:	e076      	b.n	801067a <UART_SetConfig+0x5a6>
 801058c:	2340      	movs	r3, #64	; 0x40
 801058e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010592:	e072      	b.n	801067a <UART_SetConfig+0x5a6>
 8010594:	2380      	movs	r3, #128	; 0x80
 8010596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801059a:	e06e      	b.n	801067a <UART_SetConfig+0x5a6>
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a75      	ldr	r2, [pc, #468]	; (8010778 <UART_SetConfig+0x6a4>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d130      	bne.n	8010608 <UART_SetConfig+0x534>
 80105a6:	4b72      	ldr	r3, [pc, #456]	; (8010770 <UART_SetConfig+0x69c>)
 80105a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105aa:	f003 0307 	and.w	r3, r3, #7
 80105ae:	2b05      	cmp	r3, #5
 80105b0:	d826      	bhi.n	8010600 <UART_SetConfig+0x52c>
 80105b2:	a201      	add	r2, pc, #4	; (adr r2, 80105b8 <UART_SetConfig+0x4e4>)
 80105b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b8:	080105d1 	.word	0x080105d1
 80105bc:	080105d9 	.word	0x080105d9
 80105c0:	080105e1 	.word	0x080105e1
 80105c4:	080105e9 	.word	0x080105e9
 80105c8:	080105f1 	.word	0x080105f1
 80105cc:	080105f9 	.word	0x080105f9
 80105d0:	2300      	movs	r3, #0
 80105d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105d6:	e050      	b.n	801067a <UART_SetConfig+0x5a6>
 80105d8:	2304      	movs	r3, #4
 80105da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105de:	e04c      	b.n	801067a <UART_SetConfig+0x5a6>
 80105e0:	2308      	movs	r3, #8
 80105e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105e6:	e048      	b.n	801067a <UART_SetConfig+0x5a6>
 80105e8:	2310      	movs	r3, #16
 80105ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ee:	e044      	b.n	801067a <UART_SetConfig+0x5a6>
 80105f0:	2320      	movs	r3, #32
 80105f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105f6:	e040      	b.n	801067a <UART_SetConfig+0x5a6>
 80105f8:	2340      	movs	r3, #64	; 0x40
 80105fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105fe:	e03c      	b.n	801067a <UART_SetConfig+0x5a6>
 8010600:	2380      	movs	r3, #128	; 0x80
 8010602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010606:	e038      	b.n	801067a <UART_SetConfig+0x5a6>
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a5b      	ldr	r2, [pc, #364]	; (801077c <UART_SetConfig+0x6a8>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d130      	bne.n	8010674 <UART_SetConfig+0x5a0>
 8010612:	4b57      	ldr	r3, [pc, #348]	; (8010770 <UART_SetConfig+0x69c>)
 8010614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010616:	f003 0307 	and.w	r3, r3, #7
 801061a:	2b05      	cmp	r3, #5
 801061c:	d826      	bhi.n	801066c <UART_SetConfig+0x598>
 801061e:	a201      	add	r2, pc, #4	; (adr r2, 8010624 <UART_SetConfig+0x550>)
 8010620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010624:	0801063d 	.word	0x0801063d
 8010628:	08010645 	.word	0x08010645
 801062c:	0801064d 	.word	0x0801064d
 8010630:	08010655 	.word	0x08010655
 8010634:	0801065d 	.word	0x0801065d
 8010638:	08010665 	.word	0x08010665
 801063c:	2302      	movs	r3, #2
 801063e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010642:	e01a      	b.n	801067a <UART_SetConfig+0x5a6>
 8010644:	2304      	movs	r3, #4
 8010646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801064a:	e016      	b.n	801067a <UART_SetConfig+0x5a6>
 801064c:	2308      	movs	r3, #8
 801064e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010652:	e012      	b.n	801067a <UART_SetConfig+0x5a6>
 8010654:	2310      	movs	r3, #16
 8010656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801065a:	e00e      	b.n	801067a <UART_SetConfig+0x5a6>
 801065c:	2320      	movs	r3, #32
 801065e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010662:	e00a      	b.n	801067a <UART_SetConfig+0x5a6>
 8010664:	2340      	movs	r3, #64	; 0x40
 8010666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066a:	e006      	b.n	801067a <UART_SetConfig+0x5a6>
 801066c:	2380      	movs	r3, #128	; 0x80
 801066e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010672:	e002      	b.n	801067a <UART_SetConfig+0x5a6>
 8010674:	2380      	movs	r3, #128	; 0x80
 8010676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a3f      	ldr	r2, [pc, #252]	; (801077c <UART_SetConfig+0x6a8>)
 8010680:	4293      	cmp	r3, r2
 8010682:	f040 80f8 	bne.w	8010876 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010686:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801068a:	2b20      	cmp	r3, #32
 801068c:	dc46      	bgt.n	801071c <UART_SetConfig+0x648>
 801068e:	2b02      	cmp	r3, #2
 8010690:	f2c0 8082 	blt.w	8010798 <UART_SetConfig+0x6c4>
 8010694:	3b02      	subs	r3, #2
 8010696:	2b1e      	cmp	r3, #30
 8010698:	d87e      	bhi.n	8010798 <UART_SetConfig+0x6c4>
 801069a:	a201      	add	r2, pc, #4	; (adr r2, 80106a0 <UART_SetConfig+0x5cc>)
 801069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a0:	08010723 	.word	0x08010723
 80106a4:	08010799 	.word	0x08010799
 80106a8:	0801072b 	.word	0x0801072b
 80106ac:	08010799 	.word	0x08010799
 80106b0:	08010799 	.word	0x08010799
 80106b4:	08010799 	.word	0x08010799
 80106b8:	0801073b 	.word	0x0801073b
 80106bc:	08010799 	.word	0x08010799
 80106c0:	08010799 	.word	0x08010799
 80106c4:	08010799 	.word	0x08010799
 80106c8:	08010799 	.word	0x08010799
 80106cc:	08010799 	.word	0x08010799
 80106d0:	08010799 	.word	0x08010799
 80106d4:	08010799 	.word	0x08010799
 80106d8:	0801074b 	.word	0x0801074b
 80106dc:	08010799 	.word	0x08010799
 80106e0:	08010799 	.word	0x08010799
 80106e4:	08010799 	.word	0x08010799
 80106e8:	08010799 	.word	0x08010799
 80106ec:	08010799 	.word	0x08010799
 80106f0:	08010799 	.word	0x08010799
 80106f4:	08010799 	.word	0x08010799
 80106f8:	08010799 	.word	0x08010799
 80106fc:	08010799 	.word	0x08010799
 8010700:	08010799 	.word	0x08010799
 8010704:	08010799 	.word	0x08010799
 8010708:	08010799 	.word	0x08010799
 801070c:	08010799 	.word	0x08010799
 8010710:	08010799 	.word	0x08010799
 8010714:	08010799 	.word	0x08010799
 8010718:	0801078b 	.word	0x0801078b
 801071c:	2b40      	cmp	r3, #64	; 0x40
 801071e:	d037      	beq.n	8010790 <UART_SetConfig+0x6bc>
 8010720:	e03a      	b.n	8010798 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010722:	f7fe fc1f 	bl	800ef64 <HAL_RCCEx_GetD3PCLK1Freq>
 8010726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010728:	e03c      	b.n	80107a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801072e:	4618      	mov	r0, r3
 8010730:	f7fe fc2e 	bl	800ef90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010738:	e034      	b.n	80107a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801073a:	f107 0318 	add.w	r3, r7, #24
 801073e:	4618      	mov	r0, r3
 8010740:	f7fe fd7a 	bl	800f238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010748:	e02c      	b.n	80107a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801074a:	4b09      	ldr	r3, [pc, #36]	; (8010770 <UART_SetConfig+0x69c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f003 0320 	and.w	r3, r3, #32
 8010752:	2b00      	cmp	r3, #0
 8010754:	d016      	beq.n	8010784 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010756:	4b06      	ldr	r3, [pc, #24]	; (8010770 <UART_SetConfig+0x69c>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	08db      	lsrs	r3, r3, #3
 801075c:	f003 0303 	and.w	r3, r3, #3
 8010760:	4a07      	ldr	r2, [pc, #28]	; (8010780 <UART_SetConfig+0x6ac>)
 8010762:	fa22 f303 	lsr.w	r3, r2, r3
 8010766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010768:	e01c      	b.n	80107a4 <UART_SetConfig+0x6d0>
 801076a:	bf00      	nop
 801076c:	40011400 	.word	0x40011400
 8010770:	58024400 	.word	0x58024400
 8010774:	40007800 	.word	0x40007800
 8010778:	40007c00 	.word	0x40007c00
 801077c:	58000c00 	.word	0x58000c00
 8010780:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010784:	4b9e      	ldr	r3, [pc, #632]	; (8010a00 <UART_SetConfig+0x92c>)
 8010786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010788:	e00c      	b.n	80107a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801078a:	4b9e      	ldr	r3, [pc, #632]	; (8010a04 <UART_SetConfig+0x930>)
 801078c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801078e:	e009      	b.n	80107a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010796:	e005      	b.n	80107a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010798:	2300      	movs	r3, #0
 801079a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80107a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80107a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f000 81e0 	beq.w	8010b6c <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	4a95      	ldr	r2, [pc, #596]	; (8010a08 <UART_SetConfig+0x934>)
 80107b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107b6:	461a      	mov	r2, r3
 80107b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80107be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	685a      	ldr	r2, [r3, #4]
 80107c4:	4613      	mov	r3, r2
 80107c6:	005b      	lsls	r3, r3, #1
 80107c8:	4413      	add	r3, r2
 80107ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d305      	bcc.n	80107dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80107d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107d8:	429a      	cmp	r2, r3
 80107da:	d903      	bls.n	80107e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80107e2:	e1c3      	b.n	8010b6c <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107e6:	2200      	movs	r2, #0
 80107e8:	60bb      	str	r3, [r7, #8]
 80107ea:	60fa      	str	r2, [r7, #12]
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f0:	4a85      	ldr	r2, [pc, #532]	; (8010a08 <UART_SetConfig+0x934>)
 80107f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	2200      	movs	r2, #0
 80107fa:	603b      	str	r3, [r7, #0]
 80107fc:	607a      	str	r2, [r7, #4]
 80107fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010806:	f7f8 fb8b 	bl	8008f20 <__aeabi_uldivmod>
 801080a:	4602      	mov	r2, r0
 801080c:	460b      	mov	r3, r1
 801080e:	4610      	mov	r0, r2
 8010810:	4619      	mov	r1, r3
 8010812:	f04f 0200 	mov.w	r2, #0
 8010816:	f04f 0300 	mov.w	r3, #0
 801081a:	020b      	lsls	r3, r1, #8
 801081c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010820:	0202      	lsls	r2, r0, #8
 8010822:	6979      	ldr	r1, [r7, #20]
 8010824:	6849      	ldr	r1, [r1, #4]
 8010826:	0849      	lsrs	r1, r1, #1
 8010828:	2000      	movs	r0, #0
 801082a:	460c      	mov	r4, r1
 801082c:	4605      	mov	r5, r0
 801082e:	eb12 0804 	adds.w	r8, r2, r4
 8010832:	eb43 0905 	adc.w	r9, r3, r5
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	469a      	mov	sl, r3
 801083e:	4693      	mov	fp, r2
 8010840:	4652      	mov	r2, sl
 8010842:	465b      	mov	r3, fp
 8010844:	4640      	mov	r0, r8
 8010846:	4649      	mov	r1, r9
 8010848:	f7f8 fb6a 	bl	8008f20 <__aeabi_uldivmod>
 801084c:	4602      	mov	r2, r0
 801084e:	460b      	mov	r3, r1
 8010850:	4613      	mov	r3, r2
 8010852:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801085a:	d308      	bcc.n	801086e <UART_SetConfig+0x79a>
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010862:	d204      	bcs.n	801086e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801086a:	60da      	str	r2, [r3, #12]
 801086c:	e17e      	b.n	8010b6c <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 801086e:	2301      	movs	r3, #1
 8010870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010874:	e17a      	b.n	8010b6c <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801087e:	f040 80c7 	bne.w	8010a10 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8010882:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010886:	2b20      	cmp	r3, #32
 8010888:	dc48      	bgt.n	801091c <UART_SetConfig+0x848>
 801088a:	2b00      	cmp	r3, #0
 801088c:	db7b      	blt.n	8010986 <UART_SetConfig+0x8b2>
 801088e:	2b20      	cmp	r3, #32
 8010890:	d879      	bhi.n	8010986 <UART_SetConfig+0x8b2>
 8010892:	a201      	add	r2, pc, #4	; (adr r2, 8010898 <UART_SetConfig+0x7c4>)
 8010894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010898:	08010923 	.word	0x08010923
 801089c:	0801092b 	.word	0x0801092b
 80108a0:	08010987 	.word	0x08010987
 80108a4:	08010987 	.word	0x08010987
 80108a8:	08010933 	.word	0x08010933
 80108ac:	08010987 	.word	0x08010987
 80108b0:	08010987 	.word	0x08010987
 80108b4:	08010987 	.word	0x08010987
 80108b8:	08010943 	.word	0x08010943
 80108bc:	08010987 	.word	0x08010987
 80108c0:	08010987 	.word	0x08010987
 80108c4:	08010987 	.word	0x08010987
 80108c8:	08010987 	.word	0x08010987
 80108cc:	08010987 	.word	0x08010987
 80108d0:	08010987 	.word	0x08010987
 80108d4:	08010987 	.word	0x08010987
 80108d8:	08010953 	.word	0x08010953
 80108dc:	08010987 	.word	0x08010987
 80108e0:	08010987 	.word	0x08010987
 80108e4:	08010987 	.word	0x08010987
 80108e8:	08010987 	.word	0x08010987
 80108ec:	08010987 	.word	0x08010987
 80108f0:	08010987 	.word	0x08010987
 80108f4:	08010987 	.word	0x08010987
 80108f8:	08010987 	.word	0x08010987
 80108fc:	08010987 	.word	0x08010987
 8010900:	08010987 	.word	0x08010987
 8010904:	08010987 	.word	0x08010987
 8010908:	08010987 	.word	0x08010987
 801090c:	08010987 	.word	0x08010987
 8010910:	08010987 	.word	0x08010987
 8010914:	08010987 	.word	0x08010987
 8010918:	08010979 	.word	0x08010979
 801091c:	2b40      	cmp	r3, #64	; 0x40
 801091e:	d02e      	beq.n	801097e <UART_SetConfig+0x8aa>
 8010920:	e031      	b.n	8010986 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010922:	f7fd fb6b 	bl	800dffc <HAL_RCC_GetPCLK1Freq>
 8010926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010928:	e033      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801092a:	f7fd fb7d 	bl	800e028 <HAL_RCC_GetPCLK2Freq>
 801092e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010930:	e02f      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fb2a 	bl	800ef90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010940:	e027      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010942:	f107 0318 	add.w	r3, r7, #24
 8010946:	4618      	mov	r0, r3
 8010948:	f7fe fc76 	bl	800f238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010950:	e01f      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010952:	4b2e      	ldr	r3, [pc, #184]	; (8010a0c <UART_SetConfig+0x938>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f003 0320 	and.w	r3, r3, #32
 801095a:	2b00      	cmp	r3, #0
 801095c:	d009      	beq.n	8010972 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801095e:	4b2b      	ldr	r3, [pc, #172]	; (8010a0c <UART_SetConfig+0x938>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	08db      	lsrs	r3, r3, #3
 8010964:	f003 0303 	and.w	r3, r3, #3
 8010968:	4a25      	ldr	r2, [pc, #148]	; (8010a00 <UART_SetConfig+0x92c>)
 801096a:	fa22 f303 	lsr.w	r3, r2, r3
 801096e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010970:	e00f      	b.n	8010992 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010972:	4b23      	ldr	r3, [pc, #140]	; (8010a00 <UART_SetConfig+0x92c>)
 8010974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010976:	e00c      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010978:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <UART_SetConfig+0x930>)
 801097a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801097c:	e009      	b.n	8010992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801097e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010984:	e005      	b.n	8010992 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010986:	2300      	movs	r3, #0
 8010988:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 80e9 	beq.w	8010b6c <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801099e:	4a1a      	ldr	r2, [pc, #104]	; (8010a08 <UART_SetConfig+0x934>)
 80109a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109a4:	461a      	mov	r2, r3
 80109a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80109ac:	005a      	lsls	r2, r3, #1
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	085b      	lsrs	r3, r3, #1
 80109b4:	441a      	add	r2, r3
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80109be:	b29b      	uxth	r3, r3
 80109c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80109c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c4:	2b0f      	cmp	r3, #15
 80109c6:	d916      	bls.n	80109f6 <UART_SetConfig+0x922>
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109ce:	d212      	bcs.n	80109f6 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	f023 030f 	bic.w	r3, r3, #15
 80109d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	085b      	lsrs	r3, r3, #1
 80109de:	b29b      	uxth	r3, r3
 80109e0:	f003 0307 	and.w	r3, r3, #7
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109e8:	4313      	orrs	r3, r2
 80109ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80109f2:	60da      	str	r2, [r3, #12]
 80109f4:	e0ba      	b.n	8010b6c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80109fc:	e0b6      	b.n	8010b6c <UART_SetConfig+0xa98>
 80109fe:	bf00      	nop
 8010a00:	03d09000 	.word	0x03d09000
 8010a04:	003d0900 	.word	0x003d0900
 8010a08:	240084b8 	.word	0x240084b8
 8010a0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010a10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010a14:	2b20      	cmp	r3, #32
 8010a16:	dc49      	bgt.n	8010aac <UART_SetConfig+0x9d8>
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	db7c      	blt.n	8010b16 <UART_SetConfig+0xa42>
 8010a1c:	2b20      	cmp	r3, #32
 8010a1e:	d87a      	bhi.n	8010b16 <UART_SetConfig+0xa42>
 8010a20:	a201      	add	r2, pc, #4	; (adr r2, 8010a28 <UART_SetConfig+0x954>)
 8010a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a26:	bf00      	nop
 8010a28:	08010ab3 	.word	0x08010ab3
 8010a2c:	08010abb 	.word	0x08010abb
 8010a30:	08010b17 	.word	0x08010b17
 8010a34:	08010b17 	.word	0x08010b17
 8010a38:	08010ac3 	.word	0x08010ac3
 8010a3c:	08010b17 	.word	0x08010b17
 8010a40:	08010b17 	.word	0x08010b17
 8010a44:	08010b17 	.word	0x08010b17
 8010a48:	08010ad3 	.word	0x08010ad3
 8010a4c:	08010b17 	.word	0x08010b17
 8010a50:	08010b17 	.word	0x08010b17
 8010a54:	08010b17 	.word	0x08010b17
 8010a58:	08010b17 	.word	0x08010b17
 8010a5c:	08010b17 	.word	0x08010b17
 8010a60:	08010b17 	.word	0x08010b17
 8010a64:	08010b17 	.word	0x08010b17
 8010a68:	08010ae3 	.word	0x08010ae3
 8010a6c:	08010b17 	.word	0x08010b17
 8010a70:	08010b17 	.word	0x08010b17
 8010a74:	08010b17 	.word	0x08010b17
 8010a78:	08010b17 	.word	0x08010b17
 8010a7c:	08010b17 	.word	0x08010b17
 8010a80:	08010b17 	.word	0x08010b17
 8010a84:	08010b17 	.word	0x08010b17
 8010a88:	08010b17 	.word	0x08010b17
 8010a8c:	08010b17 	.word	0x08010b17
 8010a90:	08010b17 	.word	0x08010b17
 8010a94:	08010b17 	.word	0x08010b17
 8010a98:	08010b17 	.word	0x08010b17
 8010a9c:	08010b17 	.word	0x08010b17
 8010aa0:	08010b17 	.word	0x08010b17
 8010aa4:	08010b17 	.word	0x08010b17
 8010aa8:	08010b09 	.word	0x08010b09
 8010aac:	2b40      	cmp	r3, #64	; 0x40
 8010aae:	d02e      	beq.n	8010b0e <UART_SetConfig+0xa3a>
 8010ab0:	e031      	b.n	8010b16 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ab2:	f7fd faa3 	bl	800dffc <HAL_RCC_GetPCLK1Freq>
 8010ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ab8:	e033      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010aba:	f7fd fab5 	bl	800e028 <HAL_RCC_GetPCLK2Freq>
 8010abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ac0:	e02f      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fe fa62 	bl	800ef90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ad0:	e027      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ad2:	f107 0318 	add.w	r3, r7, #24
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fe fbae 	bl	800f238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ae0:	e01f      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ae2:	4b2d      	ldr	r3, [pc, #180]	; (8010b98 <UART_SetConfig+0xac4>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f003 0320 	and.w	r3, r3, #32
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d009      	beq.n	8010b02 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010aee:	4b2a      	ldr	r3, [pc, #168]	; (8010b98 <UART_SetConfig+0xac4>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	08db      	lsrs	r3, r3, #3
 8010af4:	f003 0303 	and.w	r3, r3, #3
 8010af8:	4a28      	ldr	r2, [pc, #160]	; (8010b9c <UART_SetConfig+0xac8>)
 8010afa:	fa22 f303 	lsr.w	r3, r2, r3
 8010afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b00:	e00f      	b.n	8010b22 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 8010b02:	4b26      	ldr	r3, [pc, #152]	; (8010b9c <UART_SetConfig+0xac8>)
 8010b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b06:	e00c      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b08:	4b25      	ldr	r3, [pc, #148]	; (8010ba0 <UART_SetConfig+0xacc>)
 8010b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b0c:	e009      	b.n	8010b22 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b14:	e005      	b.n	8010b22 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8010b16:	2300      	movs	r3, #0
 8010b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010b20:	bf00      	nop
    }

    if (pclk != 0U)
 8010b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d021      	beq.n	8010b6c <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2c:	4a1d      	ldr	r2, [pc, #116]	; (8010ba4 <UART_SetConfig+0xad0>)
 8010b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b32:	461a      	mov	r2, r3
 8010b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	085b      	lsrs	r3, r3, #1
 8010b40:	441a      	add	r2, r3
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b50:	2b0f      	cmp	r3, #15
 8010b52:	d908      	bls.n	8010b66 <UART_SetConfig+0xa92>
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b5a:	d204      	bcs.n	8010b66 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b62:	60da      	str	r2, [r3, #12]
 8010b64:	e002      	b.n	8010b6c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2200      	movs	r2, #0
 8010b86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010b88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3748      	adds	r7, #72	; 0x48
 8010b90:	46bd      	mov	sp, r7
 8010b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010b96:	bf00      	nop
 8010b98:	58024400 	.word	0x58024400
 8010b9c:	03d09000 	.word	0x03d09000
 8010ba0:	003d0900 	.word	0x003d0900
 8010ba4:	240084b8 	.word	0x240084b8

08010ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb4:	f003 0301 	and.w	r3, r3, #1
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00a      	beq.n	8010bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	430a      	orrs	r2, r1
 8010bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd6:	f003 0302 	and.w	r3, r3, #2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00a      	beq.n	8010bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	430a      	orrs	r2, r1
 8010bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00a      	beq.n	8010c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	430a      	orrs	r2, r1
 8010c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c1a:	f003 0308 	and.w	r3, r3, #8
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00a      	beq.n	8010c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	430a      	orrs	r2, r1
 8010c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3c:	f003 0310 	and.w	r3, r3, #16
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00a      	beq.n	8010c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c5e:	f003 0320 	and.w	r3, r3, #32
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00a      	beq.n	8010c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d01a      	beq.n	8010cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	430a      	orrs	r2, r1
 8010c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ca6:	d10a      	bne.n	8010cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	430a      	orrs	r2, r1
 8010cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00a      	beq.n	8010ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	605a      	str	r2, [r3, #4]
  }
}
 8010ce0:	bf00      	nop
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af02      	add	r7, sp, #8
 8010cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010cfc:	f7fa fac4 	bl	800b288 <HAL_GetTick>
 8010d00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f003 0308 	and.w	r3, r3, #8
 8010d0c:	2b08      	cmp	r3, #8
 8010d0e:	d10e      	bne.n	8010d2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f82f 	bl	8010d82 <UART_WaitOnFlagUntilTimeout>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d001      	beq.n	8010d2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	e025      	b.n	8010d7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f003 0304 	and.w	r3, r3, #4
 8010d38:	2b04      	cmp	r3, #4
 8010d3a:	d10e      	bne.n	8010d5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2200      	movs	r2, #0
 8010d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f819 	bl	8010d82 <UART_WaitOnFlagUntilTimeout>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d56:	2303      	movs	r3, #3
 8010d58:	e00f      	b.n	8010d7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2220      	movs	r2, #32
 8010d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2220      	movs	r2, #32
 8010d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b084      	sub	sp, #16
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	60f8      	str	r0, [r7, #12]
 8010d8a:	60b9      	str	r1, [r7, #8]
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d92:	e062      	b.n	8010e5a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d9a:	d05e      	beq.n	8010e5a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d9c:	f7fa fa74 	bl	800b288 <HAL_GetTick>
 8010da0:	4602      	mov	r2, r0
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	1ad3      	subs	r3, r2, r3
 8010da6:	69ba      	ldr	r2, [r7, #24]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d302      	bcc.n	8010db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d11d      	bne.n	8010dee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010dc0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	689a      	ldr	r2, [r3, #8]
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f022 0201 	bic.w	r2, r2, #1
 8010dd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2220      	movs	r2, #32
 8010dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2220      	movs	r2, #32
 8010dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010dea:	2303      	movs	r3, #3
 8010dec:	e045      	b.n	8010e7a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d02e      	beq.n	8010e5a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	69db      	ldr	r3, [r3, #28]
 8010e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e0a:	d126      	bne.n	8010e5a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010e24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689a      	ldr	r2, [r3, #8]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f022 0201 	bic.w	r2, r2, #1
 8010e34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2220      	movs	r2, #32
 8010e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2220      	movs	r2, #32
 8010e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2220      	movs	r2, #32
 8010e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010e56:	2303      	movs	r3, #3
 8010e58:	e00f      	b.n	8010e7a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	69da      	ldr	r2, [r3, #28]
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	4013      	ands	r3, r2
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	bf0c      	ite	eq
 8010e6a:	2301      	moveq	r3, #1
 8010e6c:	2300      	movne	r3, #0
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	461a      	mov	r2, r3
 8010e72:	79fb      	ldrb	r3, [r7, #7]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d08d      	beq.n	8010d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e78:	2300      	movs	r3, #0
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e82:	b480      	push	{r7}
 8010e84:	b085      	sub	sp, #20
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d101      	bne.n	8010e98 <HAL_UARTEx_DisableFifoMode+0x16>
 8010e94:	2302      	movs	r3, #2
 8010e96:	e027      	b.n	8010ee8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2224      	movs	r2, #36	; 0x24
 8010ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f022 0201 	bic.w	r2, r2, #1
 8010ebe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010ec6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2220      	movs	r2, #32
 8010eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3714      	adds	r7, #20
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d101      	bne.n	8010f0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f08:	2302      	movs	r3, #2
 8010f0a:	e02d      	b.n	8010f68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2224      	movs	r2, #36	; 0x24
 8010f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f022 0201 	bic.w	r2, r2, #1
 8010f32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	683a      	ldr	r2, [r7, #0]
 8010f44:	430a      	orrs	r2, r1
 8010f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f84f 	bl	8010fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2220      	movs	r2, #32
 8010f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3710      	adds	r7, #16
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d101      	bne.n	8010f88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f84:	2302      	movs	r3, #2
 8010f86:	e02d      	b.n	8010fe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2224      	movs	r2, #36	; 0x24
 8010f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f022 0201 	bic.w	r2, r2, #1
 8010fae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 f811 	bl	8010fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2220      	movs	r2, #32
 8010fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d108      	bne.n	801100e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2201      	movs	r2, #1
 8011008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801100c:	e031      	b.n	8011072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801100e:	2310      	movs	r3, #16
 8011010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011012:	2310      	movs	r3, #16
 8011014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	0e5b      	lsrs	r3, r3, #25
 801101e:	b2db      	uxtb	r3, r3
 8011020:	f003 0307 	and.w	r3, r3, #7
 8011024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	0f5b      	lsrs	r3, r3, #29
 801102e:	b2db      	uxtb	r3, r3
 8011030:	f003 0307 	and.w	r3, r3, #7
 8011034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011036:	7bbb      	ldrb	r3, [r7, #14]
 8011038:	7b3a      	ldrb	r2, [r7, #12]
 801103a:	4911      	ldr	r1, [pc, #68]	; (8011080 <UARTEx_SetNbDataToProcess+0x94>)
 801103c:	5c8a      	ldrb	r2, [r1, r2]
 801103e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011042:	7b3a      	ldrb	r2, [r7, #12]
 8011044:	490f      	ldr	r1, [pc, #60]	; (8011084 <UARTEx_SetNbDataToProcess+0x98>)
 8011046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011048:	fb93 f3f2 	sdiv	r3, r3, r2
 801104c:	b29a      	uxth	r2, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011054:	7bfb      	ldrb	r3, [r7, #15]
 8011056:	7b7a      	ldrb	r2, [r7, #13]
 8011058:	4909      	ldr	r1, [pc, #36]	; (8011080 <UARTEx_SetNbDataToProcess+0x94>)
 801105a:	5c8a      	ldrb	r2, [r1, r2]
 801105c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011060:	7b7a      	ldrb	r2, [r7, #13]
 8011062:	4908      	ldr	r1, [pc, #32]	; (8011084 <UARTEx_SetNbDataToProcess+0x98>)
 8011064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011066:	fb93 f3f2 	sdiv	r3, r3, r2
 801106a:	b29a      	uxth	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011072:	bf00      	nop
 8011074:	3714      	adds	r7, #20
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	240084d0 	.word	0x240084d0
 8011084:	240084d8 	.word	0x240084d8

08011088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011088:	b084      	sub	sp, #16
 801108a:	b580      	push	{r7, lr}
 801108c:	b084      	sub	sp, #16
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	f107 001c 	add.w	r0, r7, #28
 8011096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	2b01      	cmp	r3, #1
 801109e:	d120      	bne.n	80110e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	68da      	ldr	r2, [r3, #12]
 80110b0:	4b2a      	ldr	r3, [pc, #168]	; (801115c <USB_CoreInit+0xd4>)
 80110b2:	4013      	ands	r3, r2
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80110c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d105      	bne.n	80110d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f001 fb14 	bl	8012704 <USB_CoreReset>
 80110dc:	4603      	mov	r3, r0
 80110de:	73fb      	strb	r3, [r7, #15]
 80110e0:	e01a      	b.n	8011118 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f001 fb08 	bl	8012704 <USB_CoreReset>
 80110f4:	4603      	mov	r3, r0
 80110f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80110f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	639a      	str	r2, [r3, #56]	; 0x38
 801110a:	e005      	b.n	8011118 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111a:	2b01      	cmp	r3, #1
 801111c:	d116      	bne.n	801114c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011122:	b29a      	uxth	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801112c:	4b0c      	ldr	r3, [pc, #48]	; (8011160 <USB_CoreInit+0xd8>)
 801112e:	4313      	orrs	r3, r2
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	f043 0206 	orr.w	r2, r3, #6
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	f043 0220 	orr.w	r2, r3, #32
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801114c:	7bfb      	ldrb	r3, [r7, #15]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011158:	b004      	add	sp, #16
 801115a:	4770      	bx	lr
 801115c:	ffbdffbf 	.word	0xffbdffbf
 8011160:	03ee0000 	.word	0x03ee0000

08011164 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011164:	b480      	push	{r7}
 8011166:	b087      	sub	sp, #28
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	4613      	mov	r3, r2
 8011170:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011172:	79fb      	ldrb	r3, [r7, #7]
 8011174:	2b02      	cmp	r3, #2
 8011176:	d165      	bne.n	8011244 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	4a41      	ldr	r2, [pc, #260]	; (8011280 <USB_SetTurnaroundTime+0x11c>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d906      	bls.n	801118e <USB_SetTurnaroundTime+0x2a>
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	4a40      	ldr	r2, [pc, #256]	; (8011284 <USB_SetTurnaroundTime+0x120>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d202      	bcs.n	801118e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011188:	230f      	movs	r3, #15
 801118a:	617b      	str	r3, [r7, #20]
 801118c:	e062      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	4a3c      	ldr	r2, [pc, #240]	; (8011284 <USB_SetTurnaroundTime+0x120>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d306      	bcc.n	80111a4 <USB_SetTurnaroundTime+0x40>
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	4a3b      	ldr	r2, [pc, #236]	; (8011288 <USB_SetTurnaroundTime+0x124>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d202      	bcs.n	80111a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801119e:	230e      	movs	r3, #14
 80111a0:	617b      	str	r3, [r7, #20]
 80111a2:	e057      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	4a38      	ldr	r2, [pc, #224]	; (8011288 <USB_SetTurnaroundTime+0x124>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d306      	bcc.n	80111ba <USB_SetTurnaroundTime+0x56>
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	4a37      	ldr	r2, [pc, #220]	; (801128c <USB_SetTurnaroundTime+0x128>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d202      	bcs.n	80111ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80111b4:	230d      	movs	r3, #13
 80111b6:	617b      	str	r3, [r7, #20]
 80111b8:	e04c      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	4a33      	ldr	r2, [pc, #204]	; (801128c <USB_SetTurnaroundTime+0x128>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d306      	bcc.n	80111d0 <USB_SetTurnaroundTime+0x6c>
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	4a32      	ldr	r2, [pc, #200]	; (8011290 <USB_SetTurnaroundTime+0x12c>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d802      	bhi.n	80111d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80111ca:	230c      	movs	r3, #12
 80111cc:	617b      	str	r3, [r7, #20]
 80111ce:	e041      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	4a2f      	ldr	r2, [pc, #188]	; (8011290 <USB_SetTurnaroundTime+0x12c>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d906      	bls.n	80111e6 <USB_SetTurnaroundTime+0x82>
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	4a2e      	ldr	r2, [pc, #184]	; (8011294 <USB_SetTurnaroundTime+0x130>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d802      	bhi.n	80111e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80111e0:	230b      	movs	r3, #11
 80111e2:	617b      	str	r3, [r7, #20]
 80111e4:	e036      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	4a2a      	ldr	r2, [pc, #168]	; (8011294 <USB_SetTurnaroundTime+0x130>)
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d906      	bls.n	80111fc <USB_SetTurnaroundTime+0x98>
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	4a29      	ldr	r2, [pc, #164]	; (8011298 <USB_SetTurnaroundTime+0x134>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d802      	bhi.n	80111fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80111f6:	230a      	movs	r3, #10
 80111f8:	617b      	str	r3, [r7, #20]
 80111fa:	e02b      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	4a26      	ldr	r2, [pc, #152]	; (8011298 <USB_SetTurnaroundTime+0x134>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d906      	bls.n	8011212 <USB_SetTurnaroundTime+0xae>
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	4a25      	ldr	r2, [pc, #148]	; (801129c <USB_SetTurnaroundTime+0x138>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d202      	bcs.n	8011212 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801120c:	2309      	movs	r3, #9
 801120e:	617b      	str	r3, [r7, #20]
 8011210:	e020      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	4a21      	ldr	r2, [pc, #132]	; (801129c <USB_SetTurnaroundTime+0x138>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d306      	bcc.n	8011228 <USB_SetTurnaroundTime+0xc4>
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	4a20      	ldr	r2, [pc, #128]	; (80112a0 <USB_SetTurnaroundTime+0x13c>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d802      	bhi.n	8011228 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011222:	2308      	movs	r3, #8
 8011224:	617b      	str	r3, [r7, #20]
 8011226:	e015      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	4a1d      	ldr	r2, [pc, #116]	; (80112a0 <USB_SetTurnaroundTime+0x13c>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d906      	bls.n	801123e <USB_SetTurnaroundTime+0xda>
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	4a1c      	ldr	r2, [pc, #112]	; (80112a4 <USB_SetTurnaroundTime+0x140>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d202      	bcs.n	801123e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011238:	2307      	movs	r3, #7
 801123a:	617b      	str	r3, [r7, #20]
 801123c:	e00a      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801123e:	2306      	movs	r3, #6
 8011240:	617b      	str	r3, [r7, #20]
 8011242:	e007      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011244:	79fb      	ldrb	r3, [r7, #7]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801124a:	2309      	movs	r3, #9
 801124c:	617b      	str	r3, [r7, #20]
 801124e:	e001      	b.n	8011254 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011250:	2309      	movs	r3, #9
 8011252:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	68da      	ldr	r2, [r3, #12]
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	029b      	lsls	r3, r3, #10
 8011268:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801126c:	431a      	orrs	r2, r3
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	371c      	adds	r7, #28
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr
 8011280:	00d8acbf 	.word	0x00d8acbf
 8011284:	00e4e1c0 	.word	0x00e4e1c0
 8011288:	00f42400 	.word	0x00f42400
 801128c:	01067380 	.word	0x01067380
 8011290:	011a499f 	.word	0x011a499f
 8011294:	01312cff 	.word	0x01312cff
 8011298:	014ca43f 	.word	0x014ca43f
 801129c:	016e3600 	.word	0x016e3600
 80112a0:	01a6ab1f 	.word	0x01a6ab1f
 80112a4:	01e84800 	.word	0x01e84800

080112a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	f043 0201 	orr.w	r2, r3, #1
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	370c      	adds	r7, #12
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112ca:	b480      	push	{r7}
 80112cc:	b083      	sub	sp, #12
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	f023 0201 	bic.w	r2, r3, #1
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d106      	bne.n	8011318 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	60da      	str	r2, [r3, #12]
 8011316:	e00b      	b.n	8011330 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011318:	78fb      	ldrb	r3, [r7, #3]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d106      	bne.n	801132c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	60da      	str	r2, [r3, #12]
 801132a:	e001      	b.n	8011330 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801132c:	2301      	movs	r3, #1
 801132e:	e003      	b.n	8011338 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011330:	2032      	movs	r0, #50	; 0x32
 8011332:	f7f9 ffb5 	bl	800b2a0 <HAL_Delay>

  return HAL_OK;
 8011336:	2300      	movs	r3, #0
}
 8011338:	4618      	mov	r0, r3
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011340:	b084      	sub	sp, #16
 8011342:	b580      	push	{r7, lr}
 8011344:	b086      	sub	sp, #24
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801134e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801135a:	2300      	movs	r3, #0
 801135c:	613b      	str	r3, [r7, #16]
 801135e:	e009      	b.n	8011374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	3340      	adds	r3, #64	; 0x40
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	2200      	movs	r2, #0
 801136c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	3301      	adds	r3, #1
 8011372:	613b      	str	r3, [r7, #16]
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	2b0e      	cmp	r3, #14
 8011378:	d9f2      	bls.n	8011360 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137c:	2b00      	cmp	r3, #0
 801137e:	d11c      	bne.n	80113ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	68fa      	ldr	r2, [r7, #12]
 801138a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801138e:	f043 0302 	orr.w	r3, r3, #2
 8011392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	601a      	str	r2, [r3, #0]
 80113b8:	e005      	b.n	80113c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113cc:	461a      	mov	r2, r3
 80113ce:	2300      	movs	r3, #0
 80113d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113d8:	4619      	mov	r1, r3
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113e0:	461a      	mov	r2, r3
 80113e2:	680b      	ldr	r3, [r1, #0]
 80113e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d10c      	bne.n	8011406 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d104      	bne.n	80113fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80113f2:	2100      	movs	r1, #0
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 f949 	bl	801168c <USB_SetDevSpeed>
 80113fa:	e008      	b.n	801140e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80113fc:	2101      	movs	r1, #1
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 f944 	bl	801168c <USB_SetDevSpeed>
 8011404:	e003      	b.n	801140e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011406:	2103      	movs	r1, #3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 f93f 	bl	801168c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801140e:	2110      	movs	r1, #16
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 f8f3 	bl	80115fc <USB_FlushTxFifo>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d001      	beq.n	8011420 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801141c:	2301      	movs	r3, #1
 801141e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 f911 	bl	8011648 <USB_FlushRxFifo>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801142c:	2301      	movs	r3, #1
 801142e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011436:	461a      	mov	r2, r3
 8011438:	2300      	movs	r3, #0
 801143a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011442:	461a      	mov	r2, r3
 8011444:	2300      	movs	r3, #0
 8011446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801144e:	461a      	mov	r2, r3
 8011450:	2300      	movs	r3, #0
 8011452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011454:	2300      	movs	r3, #0
 8011456:	613b      	str	r3, [r7, #16]
 8011458:	e043      	b.n	80114e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	015a      	lsls	r2, r3, #5
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	4413      	add	r3, r2
 8011462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801146c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011470:	d118      	bne.n	80114a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10a      	bne.n	801148e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	015a      	lsls	r2, r3, #5
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	4413      	add	r3, r2
 8011480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011484:	461a      	mov	r2, r3
 8011486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	e013      	b.n	80114b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	015a      	lsls	r2, r3, #5
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	4413      	add	r3, r2
 8011496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801149a:	461a      	mov	r2, r3
 801149c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80114a0:	6013      	str	r3, [r2, #0]
 80114a2:	e008      	b.n	80114b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	015a      	lsls	r2, r3, #5
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	4413      	add	r3, r2
 80114ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114b0:	461a      	mov	r2, r3
 80114b2:	2300      	movs	r3, #0
 80114b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	015a      	lsls	r2, r3, #5
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	4413      	add	r3, r2
 80114be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114c2:	461a      	mov	r2, r3
 80114c4:	2300      	movs	r3, #0
 80114c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	015a      	lsls	r2, r3, #5
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	4413      	add	r3, r2
 80114d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d4:	461a      	mov	r2, r3
 80114d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80114da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	3301      	adds	r3, #1
 80114e0:	613b      	str	r3, [r7, #16]
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	693a      	ldr	r2, [r7, #16]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d3b7      	bcc.n	801145a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114ea:	2300      	movs	r3, #0
 80114ec:	613b      	str	r3, [r7, #16]
 80114ee:	e043      	b.n	8011578 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	015a      	lsls	r2, r3, #5
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4413      	add	r3, r2
 80114f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011506:	d118      	bne.n	801153a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d10a      	bne.n	8011524 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4413      	add	r3, r2
 8011516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801151a:	461a      	mov	r2, r3
 801151c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011520:	6013      	str	r3, [r2, #0]
 8011522:	e013      	b.n	801154c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	015a      	lsls	r2, r3, #5
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	4413      	add	r3, r2
 801152c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011530:	461a      	mov	r2, r3
 8011532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	e008      	b.n	801154c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	015a      	lsls	r2, r3, #5
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	4413      	add	r3, r2
 8011542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011546:	461a      	mov	r2, r3
 8011548:	2300      	movs	r3, #0
 801154a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	015a      	lsls	r2, r3, #5
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	4413      	add	r3, r2
 8011554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011558:	461a      	mov	r2, r3
 801155a:	2300      	movs	r3, #0
 801155c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	015a      	lsls	r2, r3, #5
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	4413      	add	r3, r2
 8011566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801156a:	461a      	mov	r2, r3
 801156c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	3301      	adds	r3, #1
 8011576:	613b      	str	r3, [r7, #16]
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	693a      	ldr	r2, [r7, #16]
 801157c:	429a      	cmp	r2, r3
 801157e:	d3b7      	bcc.n	80114f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801158e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80115a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80115a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d105      	bne.n	80115b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	f043 0210 	orr.w	r2, r3, #16
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	699a      	ldr	r2, [r3, #24]
 80115b8:	4b0e      	ldr	r3, [pc, #56]	; (80115f4 <USB_DevInit+0x2b4>)
 80115ba:	4313      	orrs	r3, r2
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80115c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d005      	beq.n	80115d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	699b      	ldr	r3, [r3, #24]
 80115ca:	f043 0208 	orr.w	r2, r3, #8
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80115d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d105      	bne.n	80115e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	699a      	ldr	r2, [r3, #24]
 80115dc:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <USB_DevInit+0x2b8>)
 80115de:	4313      	orrs	r3, r2
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115f0:	b004      	add	sp, #16
 80115f2:	4770      	bx	lr
 80115f4:	803c3800 	.word	0x803c3800
 80115f8:	40000004 	.word	0x40000004

080115fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b085      	sub	sp, #20
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011606:	2300      	movs	r3, #0
 8011608:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	019b      	lsls	r3, r3, #6
 801160e:	f043 0220 	orr.w	r2, r3, #32
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	3301      	adds	r3, #1
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	4a09      	ldr	r2, [pc, #36]	; (8011644 <USB_FlushTxFifo+0x48>)
 8011620:	4293      	cmp	r3, r2
 8011622:	d901      	bls.n	8011628 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011624:	2303      	movs	r3, #3
 8011626:	e006      	b.n	8011636 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	f003 0320 	and.w	r3, r3, #32
 8011630:	2b20      	cmp	r3, #32
 8011632:	d0f0      	beq.n	8011616 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3714      	adds	r7, #20
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	00030d40 	.word	0x00030d40

08011648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011648:	b480      	push	{r7}
 801164a:	b085      	sub	sp, #20
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2210      	movs	r2, #16
 8011658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3301      	adds	r3, #1
 801165e:	60fb      	str	r3, [r7, #12]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	4a09      	ldr	r2, [pc, #36]	; (8011688 <USB_FlushRxFifo+0x40>)
 8011664:	4293      	cmp	r3, r2
 8011666:	d901      	bls.n	801166c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011668:	2303      	movs	r3, #3
 801166a:	e006      	b.n	801167a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	f003 0310 	and.w	r3, r3, #16
 8011674:	2b10      	cmp	r3, #16
 8011676:	d0f0      	beq.n	801165a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011678:	2300      	movs	r3, #0
}
 801167a:	4618      	mov	r0, r3
 801167c:	3714      	adds	r7, #20
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	00030d40 	.word	0x00030d40

0801168c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	460b      	mov	r3, r1
 8011696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	68f9      	ldr	r1, [r7, #12]
 80116a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116ac:	4313      	orrs	r3, r2
 80116ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3714      	adds	r7, #20
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr

080116be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80116be:	b480      	push	{r7}
 80116c0:	b087      	sub	sp, #28
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	f003 0306 	and.w	r3, r3, #6
 80116d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80116de:	2300      	movs	r3, #0
 80116e0:	75fb      	strb	r3, [r7, #23]
 80116e2:	e00a      	b.n	80116fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2b02      	cmp	r3, #2
 80116e8:	d002      	beq.n	80116f0 <USB_GetDevSpeed+0x32>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2b06      	cmp	r3, #6
 80116ee:	d102      	bne.n	80116f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80116f0:	2302      	movs	r3, #2
 80116f2:	75fb      	strb	r3, [r7, #23]
 80116f4:	e001      	b.n	80116fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80116f6:	230f      	movs	r3, #15
 80116f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80116fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	371c      	adds	r7, #28
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	785b      	ldrb	r3, [r3, #1]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d139      	bne.n	8011798 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801172a:	69da      	ldr	r2, [r3, #28]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	f003 030f 	and.w	r3, r3, #15
 8011734:	2101      	movs	r1, #1
 8011736:	fa01 f303 	lsl.w	r3, r1, r3
 801173a:	b29b      	uxth	r3, r3
 801173c:	68f9      	ldr	r1, [r7, #12]
 801173e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011742:	4313      	orrs	r3, r2
 8011744:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	015a      	lsls	r2, r3, #5
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	4413      	add	r3, r2
 801174e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011758:	2b00      	cmp	r3, #0
 801175a:	d153      	bne.n	8011804 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	015a      	lsls	r2, r3, #5
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	4413      	add	r3, r2
 8011764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	78db      	ldrb	r3, [r3, #3]
 8011776:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011778:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	059b      	lsls	r3, r3, #22
 801177e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011780:	431a      	orrs	r2, r3
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	0159      	lsls	r1, r3, #5
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	440b      	add	r3, r1
 801178a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801178e:	4619      	mov	r1, r3
 8011790:	4b20      	ldr	r3, [pc, #128]	; (8011814 <USB_ActivateEndpoint+0x10c>)
 8011792:	4313      	orrs	r3, r2
 8011794:	600b      	str	r3, [r1, #0]
 8011796:	e035      	b.n	8011804 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801179e:	69da      	ldr	r2, [r3, #28]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	f003 030f 	and.w	r3, r3, #15
 80117a8:	2101      	movs	r1, #1
 80117aa:	fa01 f303 	lsl.w	r3, r1, r3
 80117ae:	041b      	lsls	r3, r3, #16
 80117b0:	68f9      	ldr	r1, [r7, #12]
 80117b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80117b6:	4313      	orrs	r3, r2
 80117b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	015a      	lsls	r2, r3, #5
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	4413      	add	r3, r2
 80117c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d119      	bne.n	8011804 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	015a      	lsls	r2, r3, #5
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	4413      	add	r3, r2
 80117d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	78db      	ldrb	r3, [r3, #3]
 80117ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80117ec:	430b      	orrs	r3, r1
 80117ee:	431a      	orrs	r2, r3
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	0159      	lsls	r1, r3, #5
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	440b      	add	r3, r1
 80117f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117fc:	4619      	mov	r1, r3
 80117fe:	4b05      	ldr	r3, [pc, #20]	; (8011814 <USB_ActivateEndpoint+0x10c>)
 8011800:	4313      	orrs	r3, r2
 8011802:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3714      	adds	r7, #20
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	10008000 	.word	0x10008000

08011818 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	785b      	ldrb	r3, [r3, #1]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d161      	bne.n	80118f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	015a      	lsls	r2, r3, #5
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	4413      	add	r3, r2
 801183c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801184a:	d11f      	bne.n	801188c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	0151      	lsls	r1, r2, #5
 801185e:	68fa      	ldr	r2, [r7, #12]
 8011860:	440a      	add	r2, r1
 8011862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801186a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	0151      	lsls	r1, r2, #5
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	440a      	add	r2, r1
 8011882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801188a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	f003 030f 	and.w	r3, r3, #15
 801189c:	2101      	movs	r1, #1
 801189e:	fa01 f303 	lsl.w	r3, r1, r3
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	43db      	mvns	r3, r3
 80118a6:	68f9      	ldr	r1, [r7, #12]
 80118a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118ac:	4013      	ands	r3, r2
 80118ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118b6:	69da      	ldr	r2, [r3, #28]
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	f003 030f 	and.w	r3, r3, #15
 80118c0:	2101      	movs	r1, #1
 80118c2:	fa01 f303 	lsl.w	r3, r1, r3
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	43db      	mvns	r3, r3
 80118ca:	68f9      	ldr	r1, [r7, #12]
 80118cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118d0:	4013      	ands	r3, r2
 80118d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	015a      	lsls	r2, r3, #5
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	4413      	add	r3, r2
 80118dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118e0:	681a      	ldr	r2, [r3, #0]
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	0159      	lsls	r1, r3, #5
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	440b      	add	r3, r1
 80118ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ee:	4619      	mov	r1, r3
 80118f0:	4b35      	ldr	r3, [pc, #212]	; (80119c8 <USB_DeactivateEndpoint+0x1b0>)
 80118f2:	4013      	ands	r3, r2
 80118f4:	600b      	str	r3, [r1, #0]
 80118f6:	e060      	b.n	80119ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	015a      	lsls	r2, r3, #5
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	4413      	add	r3, r2
 8011900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801190a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801190e:	d11f      	bne.n	8011950 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	015a      	lsls	r2, r3, #5
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	4413      	add	r3, r2
 8011918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	0151      	lsls	r1, r2, #5
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	440a      	add	r2, r1
 8011926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801192a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801192e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	0151      	lsls	r1, r2, #5
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	440a      	add	r2, r1
 8011946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801194a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801194e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	f003 030f 	and.w	r3, r3, #15
 8011960:	2101      	movs	r1, #1
 8011962:	fa01 f303 	lsl.w	r3, r1, r3
 8011966:	041b      	lsls	r3, r3, #16
 8011968:	43db      	mvns	r3, r3
 801196a:	68f9      	ldr	r1, [r7, #12]
 801196c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011970:	4013      	ands	r3, r2
 8011972:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801197a:	69da      	ldr	r2, [r3, #28]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	f003 030f 	and.w	r3, r3, #15
 8011984:	2101      	movs	r1, #1
 8011986:	fa01 f303 	lsl.w	r3, r1, r3
 801198a:	041b      	lsls	r3, r3, #16
 801198c:	43db      	mvns	r3, r3
 801198e:	68f9      	ldr	r1, [r7, #12]
 8011990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011994:	4013      	ands	r3, r2
 8011996:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	015a      	lsls	r2, r3, #5
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	4413      	add	r3, r2
 80119a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	0159      	lsls	r1, r3, #5
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	440b      	add	r3, r1
 80119ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119b2:	4619      	mov	r1, r3
 80119b4:	4b05      	ldr	r3, [pc, #20]	; (80119cc <USB_DeactivateEndpoint+0x1b4>)
 80119b6:	4013      	ands	r3, r2
 80119b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80119ba:	2300      	movs	r3, #0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3714      	adds	r7, #20
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr
 80119c8:	ec337800 	.word	0xec337800
 80119cc:	eff37800 	.word	0xeff37800

080119d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08a      	sub	sp, #40	; 0x28
 80119d4:	af02      	add	r7, sp, #8
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	4613      	mov	r3, r2
 80119dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	785b      	ldrb	r3, [r3, #1]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	f040 8163 	bne.w	8011cb8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	695b      	ldr	r3, [r3, #20]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d132      	bne.n	8011a60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	015a      	lsls	r2, r3, #5
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	4413      	add	r3, r2
 8011a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a06:	691a      	ldr	r2, [r3, #16]
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	0159      	lsls	r1, r3, #5
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	440b      	add	r3, r1
 8011a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a14:	4619      	mov	r1, r3
 8011a16:	4ba5      	ldr	r3, [pc, #660]	; (8011cac <USB_EPStartXfer+0x2dc>)
 8011a18:	4013      	ands	r3, r2
 8011a1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	015a      	lsls	r2, r3, #5
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	4413      	add	r3, r2
 8011a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	69ba      	ldr	r2, [r7, #24]
 8011a2c:	0151      	lsls	r1, r2, #5
 8011a2e:	69fa      	ldr	r2, [r7, #28]
 8011a30:	440a      	add	r2, r1
 8011a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a3c:	69bb      	ldr	r3, [r7, #24]
 8011a3e:	015a      	lsls	r2, r3, #5
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	4413      	add	r3, r2
 8011a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a48:	691a      	ldr	r2, [r3, #16]
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	0159      	lsls	r1, r3, #5
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	440b      	add	r3, r1
 8011a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a56:	4619      	mov	r1, r3
 8011a58:	4b95      	ldr	r3, [pc, #596]	; (8011cb0 <USB_EPStartXfer+0x2e0>)
 8011a5a:	4013      	ands	r3, r2
 8011a5c:	610b      	str	r3, [r1, #16]
 8011a5e:	e074      	b.n	8011b4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	015a      	lsls	r2, r3, #5
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	4413      	add	r3, r2
 8011a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a6c:	691a      	ldr	r2, [r3, #16]
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	0159      	lsls	r1, r3, #5
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	440b      	add	r3, r1
 8011a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4b8c      	ldr	r3, [pc, #560]	; (8011cb0 <USB_EPStartXfer+0x2e0>)
 8011a7e:	4013      	ands	r3, r2
 8011a80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	015a      	lsls	r2, r3, #5
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	4413      	add	r3, r2
 8011a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a8e:	691a      	ldr	r2, [r3, #16]
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	0159      	lsls	r1, r3, #5
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	440b      	add	r3, r1
 8011a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4b83      	ldr	r3, [pc, #524]	; (8011cac <USB_EPStartXfer+0x2dc>)
 8011aa0:	4013      	ands	r3, r2
 8011aa2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	015a      	lsls	r2, r3, #5
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	4413      	add	r3, r2
 8011aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ab0:	691a      	ldr	r2, [r3, #16]
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	6959      	ldr	r1, [r3, #20]
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	689b      	ldr	r3, [r3, #8]
 8011aba:	440b      	add	r3, r1
 8011abc:	1e59      	subs	r1, r3, #1
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8011ac6:	04d9      	lsls	r1, r3, #19
 8011ac8:	4b7a      	ldr	r3, [pc, #488]	; (8011cb4 <USB_EPStartXfer+0x2e4>)
 8011aca:	400b      	ands	r3, r1
 8011acc:	69b9      	ldr	r1, [r7, #24]
 8011ace:	0148      	lsls	r0, r1, #5
 8011ad0:	69f9      	ldr	r1, [r7, #28]
 8011ad2:	4401      	add	r1, r0
 8011ad4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	015a      	lsls	r2, r3, #5
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ae8:	691a      	ldr	r2, [r3, #16]
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	695b      	ldr	r3, [r3, #20]
 8011aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011af2:	69b9      	ldr	r1, [r7, #24]
 8011af4:	0148      	lsls	r0, r1, #5
 8011af6:	69f9      	ldr	r1, [r7, #28]
 8011af8:	4401      	add	r1, r0
 8011afa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011afe:	4313      	orrs	r3, r2
 8011b00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	78db      	ldrb	r3, [r3, #3]
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d11f      	bne.n	8011b4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	015a      	lsls	r2, r3, #5
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	4413      	add	r3, r2
 8011b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b16:	691b      	ldr	r3, [r3, #16]
 8011b18:	69ba      	ldr	r2, [r7, #24]
 8011b1a:	0151      	lsls	r1, r2, #5
 8011b1c:	69fa      	ldr	r2, [r7, #28]
 8011b1e:	440a      	add	r2, r1
 8011b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011b28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	015a      	lsls	r2, r3, #5
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	4413      	add	r3, r2
 8011b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b36:	691b      	ldr	r3, [r3, #16]
 8011b38:	69ba      	ldr	r2, [r7, #24]
 8011b3a:	0151      	lsls	r1, r2, #5
 8011b3c:	69fa      	ldr	r2, [r7, #28]
 8011b3e:	440a      	add	r2, r1
 8011b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d14b      	bne.n	8011be8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d009      	beq.n	8011b6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b64:	461a      	mov	r2, r3
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	78db      	ldrb	r3, [r3, #3]
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d128      	bne.n	8011bc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d110      	bne.n	8011ba6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	015a      	lsls	r2, r3, #5
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	69ba      	ldr	r2, [r7, #24]
 8011b94:	0151      	lsls	r1, r2, #5
 8011b96:	69fa      	ldr	r2, [r7, #28]
 8011b98:	440a      	add	r2, r1
 8011b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ba2:	6013      	str	r3, [r2, #0]
 8011ba4:	e00f      	b.n	8011bc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	015a      	lsls	r2, r3, #5
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	4413      	add	r3, r2
 8011bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	69ba      	ldr	r2, [r7, #24]
 8011bb6:	0151      	lsls	r1, r2, #5
 8011bb8:	69fa      	ldr	r2, [r7, #28]
 8011bba:	440a      	add	r2, r1
 8011bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	015a      	lsls	r2, r3, #5
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	0151      	lsls	r1, r2, #5
 8011bd8:	69fa      	ldr	r2, [r7, #28]
 8011bda:	440a      	add	r2, r1
 8011bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011be4:	6013      	str	r3, [r2, #0]
 8011be6:	e133      	b.n	8011e50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011be8:	69bb      	ldr	r3, [r7, #24]
 8011bea:	015a      	lsls	r2, r3, #5
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	4413      	add	r3, r2
 8011bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	69ba      	ldr	r2, [r7, #24]
 8011bf8:	0151      	lsls	r1, r2, #5
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	440a      	add	r2, r1
 8011bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	78db      	ldrb	r3, [r3, #3]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d015      	beq.n	8011c3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	695b      	ldr	r3, [r3, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f000 811b 	beq.w	8011e50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 030f 	and.w	r3, r3, #15
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c30:	69f9      	ldr	r1, [r7, #28]
 8011c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c36:	4313      	orrs	r3, r2
 8011c38:	634b      	str	r3, [r1, #52]	; 0x34
 8011c3a:	e109      	b.n	8011e50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d110      	bne.n	8011c6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	015a      	lsls	r2, r3, #5
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	4413      	add	r3, r2
 8011c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	69ba      	ldr	r2, [r7, #24]
 8011c5c:	0151      	lsls	r1, r2, #5
 8011c5e:	69fa      	ldr	r2, [r7, #28]
 8011c60:	440a      	add	r2, r1
 8011c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c6a:	6013      	str	r3, [r2, #0]
 8011c6c:	e00f      	b.n	8011c8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	015a      	lsls	r2, r3, #5
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	4413      	add	r3, r2
 8011c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	69ba      	ldr	r2, [r7, #24]
 8011c7e:	0151      	lsls	r1, r2, #5
 8011c80:	69fa      	ldr	r2, [r7, #28]
 8011c82:	440a      	add	r2, r1
 8011c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	68d9      	ldr	r1, [r3, #12]
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	781a      	ldrb	r2, [r3, #0]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	b298      	uxth	r0, r3
 8011c9c:	79fb      	ldrb	r3, [r7, #7]
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f000 fa38 	bl	8012118 <USB_WritePacket>
 8011ca8:	e0d2      	b.n	8011e50 <USB_EPStartXfer+0x480>
 8011caa:	bf00      	nop
 8011cac:	e007ffff 	.word	0xe007ffff
 8011cb0:	fff80000 	.word	0xfff80000
 8011cb4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	015a      	lsls	r2, r3, #5
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cc4:	691a      	ldr	r2, [r3, #16]
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	0159      	lsls	r1, r3, #5
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	440b      	add	r3, r1
 8011cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4b61      	ldr	r3, [pc, #388]	; (8011e5c <USB_EPStartXfer+0x48c>)
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	015a      	lsls	r2, r3, #5
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ce6:	691a      	ldr	r2, [r3, #16]
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	0159      	lsls	r1, r3, #5
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	440b      	add	r3, r1
 8011cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	4b5a      	ldr	r3, [pc, #360]	; (8011e60 <USB_EPStartXfer+0x490>)
 8011cf8:	4013      	ands	r3, r2
 8011cfa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d123      	bne.n	8011d4c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	015a      	lsls	r2, r3, #5
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d10:	691a      	ldr	r2, [r3, #16]
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d1a:	69b9      	ldr	r1, [r7, #24]
 8011d1c:	0148      	lsls	r0, r1, #5
 8011d1e:	69f9      	ldr	r1, [r7, #28]
 8011d20:	4401      	add	r1, r0
 8011d22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d26:	4313      	orrs	r3, r2
 8011d28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	015a      	lsls	r2, r3, #5
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	4413      	add	r3, r2
 8011d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d36:	691b      	ldr	r3, [r3, #16]
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	0151      	lsls	r1, r2, #5
 8011d3c:	69fa      	ldr	r2, [r7, #28]
 8011d3e:	440a      	add	r2, r1
 8011d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d48:	6113      	str	r3, [r2, #16]
 8011d4a:	e033      	b.n	8011db4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	695a      	ldr	r2, [r3, #20]
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	4413      	add	r3, r2
 8011d56:	1e5a      	subs	r2, r3, #1
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	015a      	lsls	r2, r3, #5
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	4413      	add	r3, r2
 8011d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d6e:	691a      	ldr	r2, [r3, #16]
 8011d70:	8afb      	ldrh	r3, [r7, #22]
 8011d72:	04d9      	lsls	r1, r3, #19
 8011d74:	4b3b      	ldr	r3, [pc, #236]	; (8011e64 <USB_EPStartXfer+0x494>)
 8011d76:	400b      	ands	r3, r1
 8011d78:	69b9      	ldr	r1, [r7, #24]
 8011d7a:	0148      	lsls	r0, r1, #5
 8011d7c:	69f9      	ldr	r1, [r7, #28]
 8011d7e:	4401      	add	r1, r0
 8011d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d84:	4313      	orrs	r3, r2
 8011d86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	015a      	lsls	r2, r3, #5
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	4413      	add	r3, r2
 8011d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d94:	691a      	ldr	r2, [r3, #16]
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	8af9      	ldrh	r1, [r7, #22]
 8011d9c:	fb01 f303 	mul.w	r3, r1, r3
 8011da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011da4:	69b9      	ldr	r1, [r7, #24]
 8011da6:	0148      	lsls	r0, r1, #5
 8011da8:	69f9      	ldr	r1, [r7, #28]
 8011daa:	4401      	add	r1, r0
 8011dac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011db0:	4313      	orrs	r3, r2
 8011db2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d10d      	bne.n	8011dd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d009      	beq.n	8011dd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	68d9      	ldr	r1, [r3, #12]
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	015a      	lsls	r2, r3, #5
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	4413      	add	r3, r2
 8011dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dd2:	460a      	mov	r2, r1
 8011dd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	78db      	ldrb	r3, [r3, #3]
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d128      	bne.n	8011e30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d110      	bne.n	8011e10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	015a      	lsls	r2, r3, #5
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	4413      	add	r3, r2
 8011df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	0151      	lsls	r1, r2, #5
 8011e00:	69fa      	ldr	r2, [r7, #28]
 8011e02:	440a      	add	r2, r1
 8011e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e0c:	6013      	str	r3, [r2, #0]
 8011e0e:	e00f      	b.n	8011e30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	015a      	lsls	r2, r3, #5
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	4413      	add	r3, r2
 8011e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	69ba      	ldr	r2, [r7, #24]
 8011e20:	0151      	lsls	r1, r2, #5
 8011e22:	69fa      	ldr	r2, [r7, #28]
 8011e24:	440a      	add	r2, r1
 8011e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	015a      	lsls	r2, r3, #5
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	4413      	add	r3, r2
 8011e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	69ba      	ldr	r2, [r7, #24]
 8011e40:	0151      	lsls	r1, r2, #5
 8011e42:	69fa      	ldr	r2, [r7, #28]
 8011e44:	440a      	add	r2, r1
 8011e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011e50:	2300      	movs	r3, #0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3720      	adds	r7, #32
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	fff80000 	.word	0xfff80000
 8011e60:	e007ffff 	.word	0xe007ffff
 8011e64:	1ff80000 	.word	0x1ff80000

08011e68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b087      	sub	sp, #28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	4613      	mov	r3, r2
 8011e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	785b      	ldrb	r3, [r3, #1]
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	f040 80cd 	bne.w	8012024 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	695b      	ldr	r3, [r3, #20]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d132      	bne.n	8011ef8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	015a      	lsls	r2, r3, #5
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	4413      	add	r3, r2
 8011e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e9e:	691a      	ldr	r2, [r3, #16]
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	0159      	lsls	r1, r3, #5
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	440b      	add	r3, r1
 8011ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eac:	4619      	mov	r1, r3
 8011eae:	4b98      	ldr	r3, [pc, #608]	; (8012110 <USB_EP0StartXfer+0x2a8>)
 8011eb0:	4013      	ands	r3, r2
 8011eb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	015a      	lsls	r2, r3, #5
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	4413      	add	r3, r2
 8011ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	693a      	ldr	r2, [r7, #16]
 8011ec4:	0151      	lsls	r1, r2, #5
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	440a      	add	r2, r1
 8011eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	015a      	lsls	r2, r3, #5
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	4413      	add	r3, r2
 8011edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ee0:	691a      	ldr	r2, [r3, #16]
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	0159      	lsls	r1, r3, #5
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	440b      	add	r3, r1
 8011eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eee:	4619      	mov	r1, r3
 8011ef0:	4b88      	ldr	r3, [pc, #544]	; (8012114 <USB_EP0StartXfer+0x2ac>)
 8011ef2:	4013      	ands	r3, r2
 8011ef4:	610b      	str	r3, [r1, #16]
 8011ef6:	e04e      	b.n	8011f96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	015a      	lsls	r2, r3, #5
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	4413      	add	r3, r2
 8011f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f04:	691a      	ldr	r2, [r3, #16]
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	0159      	lsls	r1, r3, #5
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	440b      	add	r3, r1
 8011f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f12:	4619      	mov	r1, r3
 8011f14:	4b7f      	ldr	r3, [pc, #508]	; (8012114 <USB_EP0StartXfer+0x2ac>)
 8011f16:	4013      	ands	r3, r2
 8011f18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	015a      	lsls	r2, r3, #5
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	4413      	add	r3, r2
 8011f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f26:	691a      	ldr	r2, [r3, #16]
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	0159      	lsls	r1, r3, #5
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	440b      	add	r3, r1
 8011f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f34:	4619      	mov	r1, r3
 8011f36:	4b76      	ldr	r3, [pc, #472]	; (8012110 <USB_EP0StartXfer+0x2a8>)
 8011f38:	4013      	ands	r3, r2
 8011f3a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	695a      	ldr	r2, [r3, #20]
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d903      	bls.n	8011f50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	689a      	ldr	r2, [r3, #8]
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	015a      	lsls	r2, r3, #5
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	4413      	add	r3, r2
 8011f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	693a      	ldr	r2, [r7, #16]
 8011f60:	0151      	lsls	r1, r2, #5
 8011f62:	697a      	ldr	r2, [r7, #20]
 8011f64:	440a      	add	r2, r1
 8011f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	015a      	lsls	r2, r3, #5
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	4413      	add	r3, r2
 8011f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f7c:	691a      	ldr	r2, [r3, #16]
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	695b      	ldr	r3, [r3, #20]
 8011f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f86:	6939      	ldr	r1, [r7, #16]
 8011f88:	0148      	lsls	r0, r1, #5
 8011f8a:	6979      	ldr	r1, [r7, #20]
 8011f8c:	4401      	add	r1, r0
 8011f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011f92:	4313      	orrs	r3, r2
 8011f94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d11e      	bne.n	8011fda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	691b      	ldr	r3, [r3, #16]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d009      	beq.n	8011fb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	015a      	lsls	r2, r3, #5
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	4413      	add	r3, r2
 8011fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	015a      	lsls	r2, r3, #5
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	693a      	ldr	r2, [r7, #16]
 8011fc8:	0151      	lsls	r1, r2, #5
 8011fca:	697a      	ldr	r2, [r7, #20]
 8011fcc:	440a      	add	r2, r1
 8011fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	e092      	b.n	8012100 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	015a      	lsls	r2, r3, #5
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	693a      	ldr	r2, [r7, #16]
 8011fea:	0151      	lsls	r1, r2, #5
 8011fec:	697a      	ldr	r2, [r7, #20]
 8011fee:	440a      	add	r2, r1
 8011ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ff8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	695b      	ldr	r3, [r3, #20]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d07e      	beq.n	8012100 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	f003 030f 	and.w	r3, r3, #15
 8012012:	2101      	movs	r1, #1
 8012014:	fa01 f303 	lsl.w	r3, r1, r3
 8012018:	6979      	ldr	r1, [r7, #20]
 801201a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801201e:	4313      	orrs	r3, r2
 8012020:	634b      	str	r3, [r1, #52]	; 0x34
 8012022:	e06d      	b.n	8012100 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	015a      	lsls	r2, r3, #5
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	4413      	add	r3, r2
 801202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012030:	691a      	ldr	r2, [r3, #16]
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	0159      	lsls	r1, r3, #5
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	440b      	add	r3, r1
 801203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801203e:	4619      	mov	r1, r3
 8012040:	4b34      	ldr	r3, [pc, #208]	; (8012114 <USB_EP0StartXfer+0x2ac>)
 8012042:	4013      	ands	r3, r2
 8012044:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	015a      	lsls	r2, r3, #5
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	4413      	add	r3, r2
 801204e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012052:	691a      	ldr	r2, [r3, #16]
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	0159      	lsls	r1, r3, #5
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	440b      	add	r3, r1
 801205c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012060:	4619      	mov	r1, r3
 8012062:	4b2b      	ldr	r3, [pc, #172]	; (8012110 <USB_EP0StartXfer+0x2a8>)
 8012064:	4013      	ands	r3, r2
 8012066:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	695b      	ldr	r3, [r3, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d003      	beq.n	8012078 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	689a      	ldr	r2, [r3, #8]
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	015a      	lsls	r2, r3, #5
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	4413      	add	r3, r2
 8012080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012084:	691b      	ldr	r3, [r3, #16]
 8012086:	693a      	ldr	r2, [r7, #16]
 8012088:	0151      	lsls	r1, r2, #5
 801208a:	697a      	ldr	r2, [r7, #20]
 801208c:	440a      	add	r2, r1
 801208e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	015a      	lsls	r2, r3, #5
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	4413      	add	r3, r2
 80120a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120a4:	691a      	ldr	r2, [r3, #16]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120ae:	6939      	ldr	r1, [r7, #16]
 80120b0:	0148      	lsls	r0, r1, #5
 80120b2:	6979      	ldr	r1, [r7, #20]
 80120b4:	4401      	add	r1, r0
 80120b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80120ba:	4313      	orrs	r3, r2
 80120bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80120be:	79fb      	ldrb	r3, [r7, #7]
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d10d      	bne.n	80120e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d009      	beq.n	80120e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	68d9      	ldr	r1, [r3, #12]
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	015a      	lsls	r2, r3, #5
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	4413      	add	r3, r2
 80120d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120dc:	460a      	mov	r2, r1
 80120de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	015a      	lsls	r2, r3, #5
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	4413      	add	r3, r2
 80120e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	0151      	lsls	r1, r2, #5
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	440a      	add	r2, r1
 80120f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80120fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	371c      	adds	r7, #28
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	e007ffff 	.word	0xe007ffff
 8012114:	fff80000 	.word	0xfff80000

08012118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012118:	b480      	push	{r7}
 801211a:	b089      	sub	sp, #36	; 0x24
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	4611      	mov	r1, r2
 8012124:	461a      	mov	r2, r3
 8012126:	460b      	mov	r3, r1
 8012128:	71fb      	strb	r3, [r7, #7]
 801212a:	4613      	mov	r3, r2
 801212c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801213a:	2b00      	cmp	r3, #0
 801213c:	d123      	bne.n	8012186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801213e:	88bb      	ldrh	r3, [r7, #4]
 8012140:	3303      	adds	r3, #3
 8012142:	089b      	lsrs	r3, r3, #2
 8012144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012146:	2300      	movs	r3, #0
 8012148:	61bb      	str	r3, [r7, #24]
 801214a:	e018      	b.n	801217e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801214c:	79fb      	ldrb	r3, [r7, #7]
 801214e:	031a      	lsls	r2, r3, #12
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	4413      	add	r3, r2
 8012154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012158:	461a      	mov	r2, r3
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	3301      	adds	r3, #1
 8012164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	3301      	adds	r3, #1
 801216a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	3301      	adds	r3, #1
 8012170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	3301      	adds	r3, #1
 8012176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	3301      	adds	r3, #1
 801217c:	61bb      	str	r3, [r7, #24]
 801217e:	69ba      	ldr	r2, [r7, #24]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	429a      	cmp	r2, r3
 8012184:	d3e2      	bcc.n	801214c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3724      	adds	r7, #36	; 0x24
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012194:	b480      	push	{r7}
 8012196:	b08b      	sub	sp, #44	; 0x2c
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	4613      	mov	r3, r2
 80121a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80121aa:	88fb      	ldrh	r3, [r7, #6]
 80121ac:	089b      	lsrs	r3, r3, #2
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80121b2:	88fb      	ldrh	r3, [r7, #6]
 80121b4:	f003 0303 	and.w	r3, r3, #3
 80121b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80121ba:	2300      	movs	r3, #0
 80121bc:	623b      	str	r3, [r7, #32]
 80121be:	e014      	b.n	80121ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	3301      	adds	r3, #1
 80121d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80121d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d4:	3301      	adds	r3, #1
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	3301      	adds	r3, #1
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80121de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e0:	3301      	adds	r3, #1
 80121e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80121e4:	6a3b      	ldr	r3, [r7, #32]
 80121e6:	3301      	adds	r3, #1
 80121e8:	623b      	str	r3, [r7, #32]
 80121ea:	6a3a      	ldr	r2, [r7, #32]
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d3e6      	bcc.n	80121c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80121f2:	8bfb      	ldrh	r3, [r7, #30]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d01e      	beq.n	8012236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80121f8:	2300      	movs	r3, #0
 80121fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012202:	461a      	mov	r2, r3
 8012204:	f107 0310 	add.w	r3, r7, #16
 8012208:	6812      	ldr	r2, [r2, #0]
 801220a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801220c:	693a      	ldr	r2, [r7, #16]
 801220e:	6a3b      	ldr	r3, [r7, #32]
 8012210:	b2db      	uxtb	r3, r3
 8012212:	00db      	lsls	r3, r3, #3
 8012214:	fa22 f303 	lsr.w	r3, r2, r3
 8012218:	b2da      	uxtb	r2, r3
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	701a      	strb	r2, [r3, #0]
      i++;
 801221e:	6a3b      	ldr	r3, [r7, #32]
 8012220:	3301      	adds	r3, #1
 8012222:	623b      	str	r3, [r7, #32]
      pDest++;
 8012224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012226:	3301      	adds	r3, #1
 8012228:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801222a:	8bfb      	ldrh	r3, [r7, #30]
 801222c:	3b01      	subs	r3, #1
 801222e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012230:	8bfb      	ldrh	r3, [r7, #30]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1ea      	bne.n	801220c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012238:	4618      	mov	r0, r3
 801223a:	372c      	adds	r7, #44	; 0x2c
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	785b      	ldrb	r3, [r3, #1]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d12c      	bne.n	80122ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	015a      	lsls	r2, r3, #5
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	4413      	add	r3, r2
 8012268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	db12      	blt.n	8012298 <USB_EPSetStall+0x54>
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00f      	beq.n	8012298 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	015a      	lsls	r2, r3, #5
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	4413      	add	r3, r2
 8012280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	68ba      	ldr	r2, [r7, #8]
 8012288:	0151      	lsls	r1, r2, #5
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	440a      	add	r2, r1
 801228e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012296:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	0151      	lsls	r1, r2, #5
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	440a      	add	r2, r1
 80122ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80122b6:	6013      	str	r3, [r2, #0]
 80122b8:	e02b      	b.n	8012312 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	015a      	lsls	r2, r3, #5
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	4413      	add	r3, r2
 80122c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	db12      	blt.n	80122f2 <USB_EPSetStall+0xae>
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00f      	beq.n	80122f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	68ba      	ldr	r2, [r7, #8]
 80122e2:	0151      	lsls	r1, r2, #5
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	440a      	add	r2, r1
 80122e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80122f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	68ba      	ldr	r2, [r7, #8]
 8012302:	0151      	lsls	r1, r2, #5
 8012304:	68fa      	ldr	r2, [r7, #12]
 8012306:	440a      	add	r2, r1
 8012308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801230c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3714      	adds	r7, #20
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	785b      	ldrb	r3, [r3, #1]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d128      	bne.n	801238e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	68ba      	ldr	r2, [r7, #8]
 801234c:	0151      	lsls	r1, r2, #5
 801234e:	68fa      	ldr	r2, [r7, #12]
 8012350:	440a      	add	r2, r1
 8012352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801235a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	78db      	ldrb	r3, [r3, #3]
 8012360:	2b03      	cmp	r3, #3
 8012362:	d003      	beq.n	801236c <USB_EPClearStall+0x4c>
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	78db      	ldrb	r3, [r3, #3]
 8012368:	2b02      	cmp	r3, #2
 801236a:	d138      	bne.n	80123de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	015a      	lsls	r2, r3, #5
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	4413      	add	r3, r2
 8012374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	0151      	lsls	r1, r2, #5
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	440a      	add	r2, r1
 8012382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801238a:	6013      	str	r3, [r2, #0]
 801238c:	e027      	b.n	80123de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	015a      	lsls	r2, r3, #5
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	4413      	add	r3, r2
 8012396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	0151      	lsls	r1, r2, #5
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	440a      	add	r2, r1
 80123a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80123ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	78db      	ldrb	r3, [r3, #3]
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d003      	beq.n	80123be <USB_EPClearStall+0x9e>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	78db      	ldrb	r3, [r3, #3]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	d10f      	bne.n	80123de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	015a      	lsls	r2, r3, #5
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	4413      	add	r3, r2
 80123c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	68ba      	ldr	r2, [r7, #8]
 80123ce:	0151      	lsls	r1, r2, #5
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	440a      	add	r2, r1
 80123d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80123dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	460b      	mov	r3, r1
 80123f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801240a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801240e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	78fb      	ldrb	r3, [r7, #3]
 801241a:	011b      	lsls	r3, r3, #4
 801241c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012420:	68f9      	ldr	r1, [r7, #12]
 8012422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012426:	4313      	orrs	r3, r2
 8012428:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801242a:	2300      	movs	r3, #0
}
 801242c:	4618      	mov	r0, r3
 801242e:	3714      	adds	r7, #20
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012452:	f023 0303 	bic.w	r3, r3, #3
 8012456:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012466:	f023 0302 	bic.w	r3, r3, #2
 801246a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801246c:	2300      	movs	r3, #0
}
 801246e:	4618      	mov	r0, r3
 8012470:	3714      	adds	r7, #20
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr

0801247a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801247a:	b480      	push	{r7}
 801247c:	b085      	sub	sp, #20
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012494:	f023 0303 	bic.w	r3, r3, #3
 8012498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	68fa      	ldr	r2, [r7, #12]
 80124a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80124a8:	f043 0302 	orr.w	r3, r3, #2
 80124ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3714      	adds	r7, #20
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	699b      	ldr	r3, [r3, #24]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	4013      	ands	r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80124d4:	68fb      	ldr	r3, [r7, #12]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80124e2:	b480      	push	{r7}
 80124e4:	b085      	sub	sp, #20
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124fe:	69db      	ldr	r3, [r3, #28]
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	4013      	ands	r3, r2
 8012504:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	0c1b      	lsrs	r3, r3, #16
}
 801250a:	4618      	mov	r0, r3
 801250c:	3714      	adds	r7, #20
 801250e:	46bd      	mov	sp, r7
 8012510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012514:	4770      	bx	lr

08012516 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012516:	b480      	push	{r7}
 8012518:	b085      	sub	sp, #20
 801251a:	af00      	add	r7, sp, #0
 801251c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012528:	699b      	ldr	r3, [r3, #24]
 801252a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012532:	69db      	ldr	r3, [r3, #28]
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	4013      	ands	r3, r2
 8012538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	b29b      	uxth	r3, r3
}
 801253e:	4618      	mov	r0, r3
 8012540:	3714      	adds	r7, #20
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801254a:	b480      	push	{r7}
 801254c:	b085      	sub	sp, #20
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	460b      	mov	r3, r1
 8012554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801255a:	78fb      	ldrb	r3, [r7, #3]
 801255c:	015a      	lsls	r2, r3, #5
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	4413      	add	r3, r2
 8012562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	68ba      	ldr	r2, [r7, #8]
 8012574:	4013      	ands	r3, r2
 8012576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012578:	68bb      	ldr	r3, [r7, #8]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3714      	adds	r7, #20
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr

08012586 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012586:	b480      	push	{r7}
 8012588:	b087      	sub	sp, #28
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
 801258e:	460b      	mov	r3, r1
 8012590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80125aa:	78fb      	ldrb	r3, [r7, #3]
 80125ac:	f003 030f 	and.w	r3, r3, #15
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	fa22 f303 	lsr.w	r3, r2, r3
 80125b6:	01db      	lsls	r3, r3, #7
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	693a      	ldr	r2, [r7, #16]
 80125bc:	4313      	orrs	r3, r2
 80125be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80125c0:	78fb      	ldrb	r3, [r7, #3]
 80125c2:	015a      	lsls	r2, r3, #5
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	4413      	add	r3, r2
 80125c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125cc:	689b      	ldr	r3, [r3, #8]
 80125ce:	693a      	ldr	r2, [r7, #16]
 80125d0:	4013      	ands	r3, r2
 80125d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80125d4:	68bb      	ldr	r3, [r7, #8]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	371c      	adds	r7, #28
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr

080125e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80125e2:	b480      	push	{r7}
 80125e4:	b083      	sub	sp, #12
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	695b      	ldr	r3, [r3, #20]
 80125ee:	f003 0301 	and.w	r3, r3, #1
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
	...

08012600 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801261a:	4619      	mov	r1, r3
 801261c:	4b09      	ldr	r3, [pc, #36]	; (8012644 <USB_ActivateSetup+0x44>)
 801261e:	4013      	ands	r3, r2
 8012620:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	68fa      	ldr	r2, [r7, #12]
 801262c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	fffff800 	.word	0xfffff800

08012648 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012648:	b480      	push	{r7}
 801264a:	b087      	sub	sp, #28
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	460b      	mov	r3, r1
 8012652:	607a      	str	r2, [r7, #4]
 8012654:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	333c      	adds	r3, #60	; 0x3c
 801265e:	3304      	adds	r3, #4
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	4a26      	ldr	r2, [pc, #152]	; (8012700 <USB_EP0_OutStart+0xb8>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d90a      	bls.n	8012682 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801267c:	d101      	bne.n	8012682 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801267e:	2300      	movs	r3, #0
 8012680:	e037      	b.n	80126f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012688:	461a      	mov	r2, r3
 801268a:	2300      	movs	r3, #0
 801268c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012694:	691b      	ldr	r3, [r3, #16]
 8012696:	697a      	ldr	r2, [r7, #20]
 8012698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801269c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80126a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126a8:	691b      	ldr	r3, [r3, #16]
 80126aa:	697a      	ldr	r2, [r7, #20]
 80126ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126b0:	f043 0318 	orr.w	r3, r3, #24
 80126b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126bc:	691b      	ldr	r3, [r3, #16]
 80126be:	697a      	ldr	r2, [r7, #20]
 80126c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80126c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80126ca:	7afb      	ldrb	r3, [r7, #11]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d10f      	bne.n	80126f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126d6:	461a      	mov	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	697a      	ldr	r2, [r7, #20]
 80126e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80126ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80126f0:	2300      	movs	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	371c      	adds	r7, #28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	4f54300a 	.word	0x4f54300a

08012704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801270c:	2300      	movs	r3, #0
 801270e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	3301      	adds	r3, #1
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	4a13      	ldr	r2, [pc, #76]	; (8012768 <USB_CoreReset+0x64>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d901      	bls.n	8012722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801271e:	2303      	movs	r3, #3
 8012720:	e01b      	b.n	801275a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	691b      	ldr	r3, [r3, #16]
 8012726:	2b00      	cmp	r3, #0
 8012728:	daf2      	bge.n	8012710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801272a:	2300      	movs	r3, #0
 801272c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	691b      	ldr	r3, [r3, #16]
 8012732:	f043 0201 	orr.w	r2, r3, #1
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	3301      	adds	r3, #1
 801273e:	60fb      	str	r3, [r7, #12]
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	4a09      	ldr	r2, [pc, #36]	; (8012768 <USB_CoreReset+0x64>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d901      	bls.n	801274c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012748:	2303      	movs	r3, #3
 801274a:	e006      	b.n	801275a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	691b      	ldr	r3, [r3, #16]
 8012750:	f003 0301 	and.w	r3, r3, #1
 8012754:	2b01      	cmp	r3, #1
 8012756:	d0f0      	beq.n	801273a <USB_CoreReset+0x36>

  return HAL_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	00030d40 	.word	0x00030d40

0801276c <test>:


uint32_t bufferGlobal[10]; // accessing this buffer should trigger a memfault since there is no MPU region for it

int test(uint8_t *buf, uint32_t size)
{
 801276c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012770:	b09f      	sub	sp, #124	; 0x7c
 8012772:	af00      	add	r7, sp, #0
 8012774:	60f8      	str	r0, [r7, #12]
 8012776:	60b9      	str	r1, [r7, #8]
 8012778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801277c:	f023 031f 	bic.w	r3, r3, #31
 8012780:	f1a3 0540 	sub.w	r5, r3, #64	; 0x40
 8012784:	46a8      	mov	r8, r5
 8012786:	4bac      	ldr	r3, [pc, #688]	; (8012a38 <test+0x2cc>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d005      	beq.n	801279a <test+0x2e>
 801278e:	2040      	movs	r0, #64	; 0x40
 8012790:	f7f6 fe16 	bl	80093c0 <__asan_stack_malloc_0>
 8012794:	2800      	cmp	r0, #0
 8012796:	d000      	beq.n	801279a <test+0x2e>
 8012798:	4605      	mov	r5, r0
 801279a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801279e:	461c      	mov	r4, r3
 80127a0:	4ba6      	ldr	r3, [pc, #664]	; (8012a3c <test+0x2d0>)
 80127a2:	602b      	str	r3, [r5, #0]
 80127a4:	4ba6      	ldr	r3, [pc, #664]	; (8012a40 <test+0x2d4>)
 80127a6:	606b      	str	r3, [r5, #4]
 80127a8:	4ba6      	ldr	r3, [pc, #664]	; (8012a44 <test+0x2d8>)
 80127aa:	60ab      	str	r3, [r5, #8]
 80127ac:	08ee      	lsrs	r6, r5, #3
 80127ae:	f106 53dc 	add.w	r3, r6, #461373440	; 0x1b800000
 80127b2:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	4aa3      	ldr	r2, [pc, #652]	; (8012a48 <test+0x2dc>)
 80127ba:	605a      	str	r2, [r3, #4]

	uint8_t *localbuff;
    uint32_t arr32[4];
 80127bc:	f7f7 fb9a 	bl	8009ef4 <__sanitizer_cov_trace_pc>
	uint16_t *ptr16;



	if(size<7)
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	2b06      	cmp	r3, #6
 80127c4:	d805      	bhi.n	80127d2 <test+0x66>
	{
		return FAULT_NONE_RTOS; //normal execution does not trigger any bug
 80127c6:	f7f7 fb95 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80127ca:	f04f 0908 	mov.w	r9, #8
 80127ce:	f001 b884 	b.w	80138da <test+0x116e>
	}

	if(buf[0] == 'H' && buf[1] == 'A' && buf[2] == 'N' && buf[3] == 'G' )
 80127d2:	f7f7 fb8f 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	08da      	lsrs	r2, r3, #3
 80127da:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80127de:	f992 2000 	ldrsb.w	r2, [r2]
 80127e2:	2a00      	cmp	r2, #0
 80127e4:	bf14      	ite	ne
 80127e6:	2101      	movne	r1, #1
 80127e8:	2100      	moveq	r1, #0
 80127ea:	b2c9      	uxtb	r1, r1
 80127ec:	f003 0007 	and.w	r0, r3, #7
 80127f0:	b240      	sxtb	r0, r0
 80127f2:	4290      	cmp	r0, r2
 80127f4:	bfac      	ite	ge
 80127f6:	2201      	movge	r2, #1
 80127f8:	2200      	movlt	r2, #0
 80127fa:	b2d2      	uxtb	r2, r2
 80127fc:	400a      	ands	r2, r1
 80127fe:	b2d2      	uxtb	r2, r2
 8012800:	2a00      	cmp	r2, #0
 8012802:	d002      	beq.n	801280a <test+0x9e>
 8012804:	4618      	mov	r0, r3
 8012806:	f7f6 fd97 	bl	8009338 <__asan_report_load1>
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2b48      	cmp	r3, #72	; 0x48
 8012810:	f040 8088 	bne.w	8012924 <test+0x1b8>
 8012814:	f7f7 fb6e 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	1c59      	adds	r1, r3, #1
 801281c:	460b      	mov	r3, r1
 801281e:	08da      	lsrs	r2, r3, #3
 8012820:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012824:	f992 2000 	ldrsb.w	r2, [r2]
 8012828:	2a00      	cmp	r2, #0
 801282a:	bf14      	ite	ne
 801282c:	2001      	movne	r0, #1
 801282e:	2000      	moveq	r0, #0
 8012830:	b2c0      	uxtb	r0, r0
 8012832:	f003 0c07 	and.w	ip, r3, #7
 8012836:	fa4f fc8c 	sxtb.w	ip, ip
 801283a:	4594      	cmp	ip, r2
 801283c:	bfac      	ite	ge
 801283e:	2201      	movge	r2, #1
 8012840:	2200      	movlt	r2, #0
 8012842:	b2d2      	uxtb	r2, r2
 8012844:	4002      	ands	r2, r0
 8012846:	b2d2      	uxtb	r2, r2
 8012848:	2a00      	cmp	r2, #0
 801284a:	d002      	beq.n	8012852 <test+0xe6>
 801284c:	4618      	mov	r0, r3
 801284e:	f7f6 fd73 	bl	8009338 <__asan_report_load1>
 8012852:	780b      	ldrb	r3, [r1, #0]
 8012854:	2b41      	cmp	r3, #65	; 0x41
 8012856:	d165      	bne.n	8012924 <test+0x1b8>
 8012858:	f7f7 fb4c 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	1c99      	adds	r1, r3, #2
 8012860:	460b      	mov	r3, r1
 8012862:	08da      	lsrs	r2, r3, #3
 8012864:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012868:	f992 2000 	ldrsb.w	r2, [r2]
 801286c:	2a00      	cmp	r2, #0
 801286e:	bf14      	ite	ne
 8012870:	2001      	movne	r0, #1
 8012872:	2000      	moveq	r0, #0
 8012874:	b2c0      	uxtb	r0, r0
 8012876:	f003 0c07 	and.w	ip, r3, #7
 801287a:	fa4f fc8c 	sxtb.w	ip, ip
 801287e:	4594      	cmp	ip, r2
 8012880:	bfac      	ite	ge
 8012882:	2201      	movge	r2, #1
 8012884:	2200      	movlt	r2, #0
 8012886:	b2d2      	uxtb	r2, r2
 8012888:	4002      	ands	r2, r0
 801288a:	b2d2      	uxtb	r2, r2
 801288c:	2a00      	cmp	r2, #0
 801288e:	d002      	beq.n	8012896 <test+0x12a>
 8012890:	4618      	mov	r0, r3
 8012892:	f7f6 fd51 	bl	8009338 <__asan_report_load1>
 8012896:	780b      	ldrb	r3, [r1, #0]
 8012898:	2b4e      	cmp	r3, #78	; 0x4e
 801289a:	d143      	bne.n	8012924 <test+0x1b8>
 801289c:	f7f7 fb2a 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	1cd9      	adds	r1, r3, #3
 80128a4:	460b      	mov	r3, r1
 80128a6:	08da      	lsrs	r2, r3, #3
 80128a8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80128ac:	f992 2000 	ldrsb.w	r2, [r2]
 80128b0:	2a00      	cmp	r2, #0
 80128b2:	bf14      	ite	ne
 80128b4:	2001      	movne	r0, #1
 80128b6:	2000      	moveq	r0, #0
 80128b8:	b2c0      	uxtb	r0, r0
 80128ba:	f003 0c07 	and.w	ip, r3, #7
 80128be:	fa4f fc8c 	sxtb.w	ip, ip
 80128c2:	4594      	cmp	ip, r2
 80128c4:	bfac      	ite	ge
 80128c6:	2201      	movge	r2, #1
 80128c8:	2200      	movlt	r2, #0
 80128ca:	b2d2      	uxtb	r2, r2
 80128cc:	4002      	ands	r2, r0
 80128ce:	b2d2      	uxtb	r2, r2
 80128d0:	2a00      	cmp	r2, #0
 80128d2:	d002      	beq.n	80128da <test+0x16e>
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7f6 fd2f 	bl	8009338 <__asan_report_load1>
 80128da:	780b      	ldrb	r3, [r1, #0]
 80128dc:	2b47      	cmp	r3, #71	; 0x47
 80128de:	d121      	bne.n	8012924 <test+0x1b8>
	{

		buf[100]='T';
 80128e0:	f7f7 fb08 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80128ea:	460b      	mov	r3, r1
 80128ec:	08da      	lsrs	r2, r3, #3
 80128ee:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80128f2:	f992 2000 	ldrsb.w	r2, [r2]
 80128f6:	2a00      	cmp	r2, #0
 80128f8:	bf14      	ite	ne
 80128fa:	2001      	movne	r0, #1
 80128fc:	2000      	moveq	r0, #0
 80128fe:	b2c0      	uxtb	r0, r0
 8012900:	f003 0407 	and.w	r4, r3, #7
 8012904:	b264      	sxtb	r4, r4
 8012906:	4294      	cmp	r4, r2
 8012908:	bfac      	ite	ge
 801290a:	2201      	movge	r2, #1
 801290c:	2200      	movlt	r2, #0
 801290e:	b2d2      	uxtb	r2, r2
 8012910:	4002      	ands	r2, r0
 8012912:	b2d2      	uxtb	r2, r2
 8012914:	2a00      	cmp	r2, #0
 8012916:	d002      	beq.n	801291e <test+0x1b2>
 8012918:	4618      	mov	r0, r3
 801291a:	f7f6 fcf5 	bl	8009308 <__asan_report_store1>
 801291e:	2354      	movs	r3, #84	; 0x54
 8012920:	700b      	strb	r3, [r1, #0]
		while(1);  //Hang the task will be killed  by FreeRTOS
 8012922:	e7fe      	b.n	8012922 <test+0x1b6>
	}

	/***** MPU specific *******/
	else if(buf[0] == 'S' && buf[1] == 'E' && buf[2] == 'G' )
 8012924:	f7f7 fae6 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	08da      	lsrs	r2, r3, #3
 801292c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012930:	f992 2000 	ldrsb.w	r2, [r2]
 8012934:	2a00      	cmp	r2, #0
 8012936:	bf14      	ite	ne
 8012938:	2101      	movne	r1, #1
 801293a:	2100      	moveq	r1, #0
 801293c:	b2c9      	uxtb	r1, r1
 801293e:	f003 0007 	and.w	r0, r3, #7
 8012942:	b240      	sxtb	r0, r0
 8012944:	4290      	cmp	r0, r2
 8012946:	bfac      	ite	ge
 8012948:	2201      	movge	r2, #1
 801294a:	2200      	movlt	r2, #0
 801294c:	b2d2      	uxtb	r2, r2
 801294e:	400a      	ands	r2, r1
 8012950:	b2d2      	uxtb	r2, r2
 8012952:	2a00      	cmp	r2, #0
 8012954:	d002      	beq.n	801295c <test+0x1f0>
 8012956:	4618      	mov	r0, r3
 8012958:	f7f6 fcee 	bl	8009338 <__asan_report_load1>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	2b53      	cmp	r3, #83	; 0x53
 8012962:	d14c      	bne.n	80129fe <test+0x292>
 8012964:	f7f7 fac6 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	1c59      	adds	r1, r3, #1
 801296c:	460b      	mov	r3, r1
 801296e:	08da      	lsrs	r2, r3, #3
 8012970:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012974:	f992 2000 	ldrsb.w	r2, [r2]
 8012978:	2a00      	cmp	r2, #0
 801297a:	bf14      	ite	ne
 801297c:	2001      	movne	r0, #1
 801297e:	2000      	moveq	r0, #0
 8012980:	b2c0      	uxtb	r0, r0
 8012982:	f003 0c07 	and.w	ip, r3, #7
 8012986:	fa4f fc8c 	sxtb.w	ip, ip
 801298a:	4594      	cmp	ip, r2
 801298c:	bfac      	ite	ge
 801298e:	2201      	movge	r2, #1
 8012990:	2200      	movlt	r2, #0
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	4002      	ands	r2, r0
 8012996:	b2d2      	uxtb	r2, r2
 8012998:	2a00      	cmp	r2, #0
 801299a:	d002      	beq.n	80129a2 <test+0x236>
 801299c:	4618      	mov	r0, r3
 801299e:	f7f6 fccb 	bl	8009338 <__asan_report_load1>
 80129a2:	780b      	ldrb	r3, [r1, #0]
 80129a4:	2b45      	cmp	r3, #69	; 0x45
 80129a6:	d12a      	bne.n	80129fe <test+0x292>
 80129a8:	f7f7 faa4 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	1c99      	adds	r1, r3, #2
 80129b0:	460b      	mov	r3, r1
 80129b2:	08da      	lsrs	r2, r3, #3
 80129b4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80129b8:	f992 2000 	ldrsb.w	r2, [r2]
 80129bc:	2a00      	cmp	r2, #0
 80129be:	bf14      	ite	ne
 80129c0:	2001      	movne	r0, #1
 80129c2:	2000      	moveq	r0, #0
 80129c4:	b2c0      	uxtb	r0, r0
 80129c6:	f003 0c07 	and.w	ip, r3, #7
 80129ca:	fa4f fc8c 	sxtb.w	ip, ip
 80129ce:	4594      	cmp	ip, r2
 80129d0:	bfac      	ite	ge
 80129d2:	2201      	movge	r2, #1
 80129d4:	2200      	movlt	r2, #0
 80129d6:	b2d2      	uxtb	r2, r2
 80129d8:	4002      	ands	r2, r0
 80129da:	b2d2      	uxtb	r2, r2
 80129dc:	2a00      	cmp	r2, #0
 80129de:	d002      	beq.n	80129e6 <test+0x27a>
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7f6 fca9 	bl	8009338 <__asan_report_load1>
 80129e6:	780b      	ldrb	r3, [r1, #0]
 80129e8:	2b47      	cmp	r3, #71	; 0x47
 80129ea:	d108      	bne.n	80129fe <test+0x292>
	{
		bufferGlobal[0]++; // Segmentation fault accessing a global variable outside the scope of the current task
 80129ec:	f7f7 fa82 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80129f0:	4b16      	ldr	r3, [pc, #88]	; (8012a4c <test+0x2e0>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	3301      	adds	r3, #1
 80129f6:	4a15      	ldr	r2, [pc, #84]	; (8012a4c <test+0x2e0>)
 80129f8:	6013      	str	r3, [r2, #0]
 80129fa:	f000 bf6a 	b.w	80138d2 <test+0x1166>
		//return FAULT_CRASH; //this  line is not executed
	}

	else if(buf[0] == 'N' && buf[1] == 'U' && buf[2] == 'L' && buf[2] == 'L') //Null dereference
 80129fe:	f7f7 fa79 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	08da      	lsrs	r2, r3, #3
 8012a06:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012a0a:	f992 2000 	ldrsb.w	r2, [r2]
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	bf14      	ite	ne
 8012a12:	2101      	movne	r1, #1
 8012a14:	2100      	moveq	r1, #0
 8012a16:	b2c9      	uxtb	r1, r1
 8012a18:	f003 0007 	and.w	r0, r3, #7
 8012a1c:	b240      	sxtb	r0, r0
 8012a1e:	4290      	cmp	r0, r2
 8012a20:	bfac      	ite	ge
 8012a22:	2201      	movge	r2, #1
 8012a24:	2200      	movlt	r2, #0
 8012a26:	b2d2      	uxtb	r2, r2
 8012a28:	400a      	ands	r2, r1
 8012a2a:	b2d2      	uxtb	r2, r2
 8012a2c:	2a00      	cmp	r2, #0
 8012a2e:	d00f      	beq.n	8012a50 <test+0x2e4>
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7f6 fc81 	bl	8009338 <__asan_report_load1>
 8012a36:	bf00      	nop
 8012a38:	24037400 	.word	0x24037400
 8012a3c:	41b58ab3 	.word	0x41b58ab3
 8012a40:	24008284 	.word	0x24008284
 8012a44:	0801276c 	.word	0x0801276c
 8012a48:	f3f30000 	.word	0xf3f30000
 8012a4c:	24030000 	.word	0x24030000
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2b4e      	cmp	r3, #78	; 0x4e
 8012a56:	f040 808a 	bne.w	8012b6e <test+0x402>
 8012a5a:	f7f7 fa4b 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	1c59      	adds	r1, r3, #1
 8012a62:	460b      	mov	r3, r1
 8012a64:	08da      	lsrs	r2, r3, #3
 8012a66:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012a6a:	f992 2000 	ldrsb.w	r2, [r2]
 8012a6e:	2a00      	cmp	r2, #0
 8012a70:	bf14      	ite	ne
 8012a72:	2001      	movne	r0, #1
 8012a74:	2000      	moveq	r0, #0
 8012a76:	b2c0      	uxtb	r0, r0
 8012a78:	f003 0c07 	and.w	ip, r3, #7
 8012a7c:	fa4f fc8c 	sxtb.w	ip, ip
 8012a80:	4594      	cmp	ip, r2
 8012a82:	bfac      	ite	ge
 8012a84:	2201      	movge	r2, #1
 8012a86:	2200      	movlt	r2, #0
 8012a88:	b2d2      	uxtb	r2, r2
 8012a8a:	4002      	ands	r2, r0
 8012a8c:	b2d2      	uxtb	r2, r2
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	d002      	beq.n	8012a98 <test+0x32c>
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7f6 fc50 	bl	8009338 <__asan_report_load1>
 8012a98:	780b      	ldrb	r3, [r1, #0]
 8012a9a:	2b55      	cmp	r3, #85	; 0x55
 8012a9c:	d167      	bne.n	8012b6e <test+0x402>
 8012a9e:	f7f7 fa29 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	1c99      	adds	r1, r3, #2
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	08da      	lsrs	r2, r3, #3
 8012aaa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012aae:	f992 2000 	ldrsb.w	r2, [r2]
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	bf14      	ite	ne
 8012ab6:	2001      	movne	r0, #1
 8012ab8:	2000      	moveq	r0, #0
 8012aba:	b2c0      	uxtb	r0, r0
 8012abc:	f003 0c07 	and.w	ip, r3, #7
 8012ac0:	fa4f fc8c 	sxtb.w	ip, ip
 8012ac4:	4594      	cmp	ip, r2
 8012ac6:	bfac      	ite	ge
 8012ac8:	2201      	movge	r2, #1
 8012aca:	2200      	movlt	r2, #0
 8012acc:	b2d2      	uxtb	r2, r2
 8012ace:	4002      	ands	r2, r0
 8012ad0:	b2d2      	uxtb	r2, r2
 8012ad2:	2a00      	cmp	r2, #0
 8012ad4:	d002      	beq.n	8012adc <test+0x370>
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7f6 fc2e 	bl	8009338 <__asan_report_load1>
 8012adc:	780b      	ldrb	r3, [r1, #0]
 8012ade:	2b4c      	cmp	r3, #76	; 0x4c
 8012ae0:	d145      	bne.n	8012b6e <test+0x402>
 8012ae2:	f7f7 fa07 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	1c99      	adds	r1, r3, #2
 8012aea:	460b      	mov	r3, r1
 8012aec:	08da      	lsrs	r2, r3, #3
 8012aee:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012af2:	f992 2000 	ldrsb.w	r2, [r2]
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	bf14      	ite	ne
 8012afa:	2001      	movne	r0, #1
 8012afc:	2000      	moveq	r0, #0
 8012afe:	b2c0      	uxtb	r0, r0
 8012b00:	f003 0c07 	and.w	ip, r3, #7
 8012b04:	fa4f fc8c 	sxtb.w	ip, ip
 8012b08:	4594      	cmp	ip, r2
 8012b0a:	bfac      	ite	ge
 8012b0c:	2201      	movge	r2, #1
 8012b0e:	2200      	movlt	r2, #0
 8012b10:	b2d2      	uxtb	r2, r2
 8012b12:	4002      	ands	r2, r0
 8012b14:	b2d2      	uxtb	r2, r2
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	d002      	beq.n	8012b20 <test+0x3b4>
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7f6 fc0c 	bl	8009338 <__asan_report_load1>
 8012b20:	780b      	ldrb	r3, [r1, #0]
 8012b22:	2b4c      	cmp	r3, #76	; 0x4c
 8012b24:	d123      	bne.n	8012b6e <test+0x402>
	{
			localbuff = 0x00;
 8012b26:	f7f7 f9e5 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	613b      	str	r3, [r7, #16]
			buf[0] = *localbuff;
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	08da      	lsrs	r2, r3, #3
 8012b32:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012b36:	f992 2000 	ldrsb.w	r2, [r2]
 8012b3a:	2a00      	cmp	r2, #0
 8012b3c:	bf14      	ite	ne
 8012b3e:	2101      	movne	r1, #1
 8012b40:	2100      	moveq	r1, #0
 8012b42:	b2c9      	uxtb	r1, r1
 8012b44:	f003 0007 	and.w	r0, r3, #7
 8012b48:	b240      	sxtb	r0, r0
 8012b4a:	4290      	cmp	r0, r2
 8012b4c:	bfac      	ite	ge
 8012b4e:	2201      	movge	r2, #1
 8012b50:	2200      	movlt	r2, #0
 8012b52:	b2d2      	uxtb	r2, r2
 8012b54:	400a      	ands	r2, r1
 8012b56:	b2d2      	uxtb	r2, r2
 8012b58:	2a00      	cmp	r2, #0
 8012b5a:	d002      	beq.n	8012b62 <test+0x3f6>
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7f6 fbeb 	bl	8009338 <__asan_report_load1>
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	781a      	ldrb	r2, [r3, #0]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	701a      	strb	r2, [r3, #0]
 8012b6a:	f000 beb2 	b.w	80138d2 <test+0x1166>

	}

	/**** Cortex M specific *********/
	else if(buf[0] == 'Z' && buf[1] == 'E' && buf[2] == 'R' && buf[3] == '0')
 8012b6e:	f7f7 f9c1 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	08da      	lsrs	r2, r3, #3
 8012b76:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012b7a:	f992 2000 	ldrsb.w	r2, [r2]
 8012b7e:	2a00      	cmp	r2, #0
 8012b80:	bf14      	ite	ne
 8012b82:	2101      	movne	r1, #1
 8012b84:	2100      	moveq	r1, #0
 8012b86:	b2c9      	uxtb	r1, r1
 8012b88:	f003 0007 	and.w	r0, r3, #7
 8012b8c:	b240      	sxtb	r0, r0
 8012b8e:	4290      	cmp	r0, r2
 8012b90:	bfac      	ite	ge
 8012b92:	2201      	movge	r2, #1
 8012b94:	2200      	movlt	r2, #0
 8012b96:	b2d2      	uxtb	r2, r2
 8012b98:	400a      	ands	r2, r1
 8012b9a:	b2d2      	uxtb	r2, r2
 8012b9c:	2a00      	cmp	r2, #0
 8012b9e:	d002      	beq.n	8012ba6 <test+0x43a>
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7f6 fbc9 	bl	8009338 <__asan_report_load1>
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	2b5a      	cmp	r3, #90	; 0x5a
 8012bac:	f040 80ae 	bne.w	8012d0c <test+0x5a0>
 8012bb0:	f7f7 f9a0 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	1c59      	adds	r1, r3, #1
 8012bb8:	460b      	mov	r3, r1
 8012bba:	08da      	lsrs	r2, r3, #3
 8012bbc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012bc0:	f992 2000 	ldrsb.w	r2, [r2]
 8012bc4:	2a00      	cmp	r2, #0
 8012bc6:	bf14      	ite	ne
 8012bc8:	2001      	movne	r0, #1
 8012bca:	2000      	moveq	r0, #0
 8012bcc:	b2c0      	uxtb	r0, r0
 8012bce:	f003 0c07 	and.w	ip, r3, #7
 8012bd2:	fa4f fc8c 	sxtb.w	ip, ip
 8012bd6:	4594      	cmp	ip, r2
 8012bd8:	bfac      	ite	ge
 8012bda:	2201      	movge	r2, #1
 8012bdc:	2200      	movlt	r2, #0
 8012bde:	b2d2      	uxtb	r2, r2
 8012be0:	4002      	ands	r2, r0
 8012be2:	b2d2      	uxtb	r2, r2
 8012be4:	2a00      	cmp	r2, #0
 8012be6:	d002      	beq.n	8012bee <test+0x482>
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7f6 fba5 	bl	8009338 <__asan_report_load1>
 8012bee:	780b      	ldrb	r3, [r1, #0]
 8012bf0:	2b45      	cmp	r3, #69	; 0x45
 8012bf2:	f040 808b 	bne.w	8012d0c <test+0x5a0>
 8012bf6:	f7f7 f97d 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	1c99      	adds	r1, r3, #2
 8012bfe:	460b      	mov	r3, r1
 8012c00:	08da      	lsrs	r2, r3, #3
 8012c02:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012c06:	f992 2000 	ldrsb.w	r2, [r2]
 8012c0a:	2a00      	cmp	r2, #0
 8012c0c:	bf14      	ite	ne
 8012c0e:	2001      	movne	r0, #1
 8012c10:	2000      	moveq	r0, #0
 8012c12:	b2c0      	uxtb	r0, r0
 8012c14:	f003 0c07 	and.w	ip, r3, #7
 8012c18:	fa4f fc8c 	sxtb.w	ip, ip
 8012c1c:	4594      	cmp	ip, r2
 8012c1e:	bfac      	ite	ge
 8012c20:	2201      	movge	r2, #1
 8012c22:	2200      	movlt	r2, #0
 8012c24:	b2d2      	uxtb	r2, r2
 8012c26:	4002      	ands	r2, r0
 8012c28:	b2d2      	uxtb	r2, r2
 8012c2a:	2a00      	cmp	r2, #0
 8012c2c:	d002      	beq.n	8012c34 <test+0x4c8>
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7f6 fb82 	bl	8009338 <__asan_report_load1>
 8012c34:	780b      	ldrb	r3, [r1, #0]
 8012c36:	2b52      	cmp	r3, #82	; 0x52
 8012c38:	d168      	bne.n	8012d0c <test+0x5a0>
 8012c3a:	f7f7 f95b 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	1cd9      	adds	r1, r3, #3
 8012c42:	460b      	mov	r3, r1
 8012c44:	08da      	lsrs	r2, r3, #3
 8012c46:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012c4a:	f992 2000 	ldrsb.w	r2, [r2]
 8012c4e:	2a00      	cmp	r2, #0
 8012c50:	bf14      	ite	ne
 8012c52:	2001      	movne	r0, #1
 8012c54:	2000      	moveq	r0, #0
 8012c56:	b2c0      	uxtb	r0, r0
 8012c58:	f003 0c07 	and.w	ip, r3, #7
 8012c5c:	fa4f fc8c 	sxtb.w	ip, ip
 8012c60:	4594      	cmp	ip, r2
 8012c62:	bfac      	ite	ge
 8012c64:	2201      	movge	r2, #1
 8012c66:	2200      	movlt	r2, #0
 8012c68:	b2d2      	uxtb	r2, r2
 8012c6a:	4002      	ands	r2, r0
 8012c6c:	b2d2      	uxtb	r2, r2
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	d002      	beq.n	8012c78 <test+0x50c>
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7f6 fb60 	bl	8009338 <__asan_report_load1>
 8012c78:	780b      	ldrb	r3, [r1, #0]
 8012c7a:	2b30      	cmp	r3, #48	; 0x30
 8012c7c:	d146      	bne.n	8012d0c <test+0x5a0>
	{
		arr32[0]= buf[0] / (buf[5]); //this should trigger a division by zero
 8012c7e:	f7f7 f939 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	7818      	ldrb	r0, [r3, #0]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	1d59      	adds	r1, r3, #5
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	08da      	lsrs	r2, r3, #3
 8012c8e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012c92:	f992 2000 	ldrsb.w	r2, [r2]
 8012c96:	2a00      	cmp	r2, #0
 8012c98:	bf14      	ite	ne
 8012c9a:	f04f 0c01 	movne.w	ip, #1
 8012c9e:	f04f 0c00 	moveq.w	ip, #0
 8012ca2:	fa5f fc8c 	uxtb.w	ip, ip
 8012ca6:	f003 0e07 	and.w	lr, r3, #7
 8012caa:	fa4f fe8e 	sxtb.w	lr, lr
 8012cae:	4596      	cmp	lr, r2
 8012cb0:	bfac      	ite	ge
 8012cb2:	2201      	movge	r2, #1
 8012cb4:	2200      	movlt	r2, #0
 8012cb6:	b2d2      	uxtb	r2, r2
 8012cb8:	ea0c 0202 	and.w	r2, ip, r2
 8012cbc:	b2d2      	uxtb	r2, r2
 8012cbe:	2a00      	cmp	r2, #0
 8012cc0:	d002      	beq.n	8012cc8 <test+0x55c>
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7f6 fb38 	bl	8009338 <__asan_report_load1>
 8012cc8:	780b      	ldrb	r3, [r1, #0]
 8012cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f1a4 0320 	sub.w	r3, r4, #32
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	08cb      	lsrs	r3, r1, #3
 8012cda:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012cde:	f993 3000 	ldrsb.w	r3, [r3]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	bf14      	ite	ne
 8012ce6:	2201      	movne	r2, #1
 8012ce8:	2200      	moveq	r2, #0
 8012cea:	b2d2      	uxtb	r2, r2
 8012cec:	2b03      	cmp	r3, #3
 8012cee:	bfd4      	ite	le
 8012cf0:	2301      	movle	r3, #1
 8012cf2:	2300      	movgt	r3, #0
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	4013      	ands	r3, r2
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d002      	beq.n	8012d04 <test+0x598>
 8012cfe:	4608      	mov	r0, r1
 8012d00:	f7f6 fb0e 	bl	8009320 <__asan_report_store4>
 8012d04:	f844 0c20 	str.w	r0, [r4, #-32]
 8012d08:	f000 bde3 	b.w	80138d2 <test+0x1166>
	}
	else if(buf[0] == 'U' && buf[1] == 'D' && buf[2] == 'F')
 8012d0c:	f7f7 f8f2 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	08da      	lsrs	r2, r3, #3
 8012d14:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012d18:	f992 2000 	ldrsb.w	r2, [r2]
 8012d1c:	2a00      	cmp	r2, #0
 8012d1e:	bf14      	ite	ne
 8012d20:	2101      	movne	r1, #1
 8012d22:	2100      	moveq	r1, #0
 8012d24:	b2c9      	uxtb	r1, r1
 8012d26:	f003 0007 	and.w	r0, r3, #7
 8012d2a:	b240      	sxtb	r0, r0
 8012d2c:	4290      	cmp	r0, r2
 8012d2e:	bfac      	ite	ge
 8012d30:	2201      	movge	r2, #1
 8012d32:	2200      	movlt	r2, #0
 8012d34:	b2d2      	uxtb	r2, r2
 8012d36:	400a      	ands	r2, r1
 8012d38:	b2d2      	uxtb	r2, r2
 8012d3a:	2a00      	cmp	r2, #0
 8012d3c:	d002      	beq.n	8012d44 <test+0x5d8>
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7f6 fafa 	bl	8009338 <__asan_report_load1>
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	2b55      	cmp	r3, #85	; 0x55
 8012d4a:	d148      	bne.n	8012dde <test+0x672>
 8012d4c:	f7f7 f8d2 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	1c59      	adds	r1, r3, #1
 8012d54:	460b      	mov	r3, r1
 8012d56:	08da      	lsrs	r2, r3, #3
 8012d58:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012d5c:	f992 2000 	ldrsb.w	r2, [r2]
 8012d60:	2a00      	cmp	r2, #0
 8012d62:	bf14      	ite	ne
 8012d64:	2001      	movne	r0, #1
 8012d66:	2000      	moveq	r0, #0
 8012d68:	b2c0      	uxtb	r0, r0
 8012d6a:	f003 0c07 	and.w	ip, r3, #7
 8012d6e:	fa4f fc8c 	sxtb.w	ip, ip
 8012d72:	4594      	cmp	ip, r2
 8012d74:	bfac      	ite	ge
 8012d76:	2201      	movge	r2, #1
 8012d78:	2200      	movlt	r2, #0
 8012d7a:	b2d2      	uxtb	r2, r2
 8012d7c:	4002      	ands	r2, r0
 8012d7e:	b2d2      	uxtb	r2, r2
 8012d80:	2a00      	cmp	r2, #0
 8012d82:	d002      	beq.n	8012d8a <test+0x61e>
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f6 fad7 	bl	8009338 <__asan_report_load1>
 8012d8a:	780b      	ldrb	r3, [r1, #0]
 8012d8c:	2b44      	cmp	r3, #68	; 0x44
 8012d8e:	d126      	bne.n	8012dde <test+0x672>
 8012d90:	f7f7 f8b0 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	1c99      	adds	r1, r3, #2
 8012d98:	460b      	mov	r3, r1
 8012d9a:	08da      	lsrs	r2, r3, #3
 8012d9c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012da0:	f992 2000 	ldrsb.w	r2, [r2]
 8012da4:	2a00      	cmp	r2, #0
 8012da6:	bf14      	ite	ne
 8012da8:	2001      	movne	r0, #1
 8012daa:	2000      	moveq	r0, #0
 8012dac:	b2c0      	uxtb	r0, r0
 8012dae:	f003 0c07 	and.w	ip, r3, #7
 8012db2:	fa4f fc8c 	sxtb.w	ip, ip
 8012db6:	4594      	cmp	ip, r2
 8012db8:	bfac      	ite	ge
 8012dba:	2201      	movge	r2, #1
 8012dbc:	2200      	movlt	r2, #0
 8012dbe:	b2d2      	uxtb	r2, r2
 8012dc0:	4002      	ands	r2, r0
 8012dc2:	b2d2      	uxtb	r2, r2
 8012dc4:	2a00      	cmp	r2, #0
 8012dc6:	d002      	beq.n	8012dce <test+0x662>
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7f6 fab5 	bl	8009338 <__asan_report_load1>
 8012dce:	780b      	ldrb	r3, [r1, #0]
 8012dd0:	2b46      	cmp	r3, #70	; 0x46
 8012dd2:	d104      	bne.n	8012dde <test+0x672>
	{
		__asm volatile("udf"); //this should trigger an undefined instruction exception
 8012dd4:	f7f7 f88e 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012dd8:	de00      	udf	#0
 8012dda:	f000 bd7a 	b.w	80138d2 <test+0x1166>
	}

	else if(buf[0] == 'U' && buf[1] == 'N' && buf[2] == 'A' )
 8012dde:	f7f7 f889 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	08da      	lsrs	r2, r3, #3
 8012de6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012dea:	f992 2000 	ldrsb.w	r2, [r2]
 8012dee:	2a00      	cmp	r2, #0
 8012df0:	bf14      	ite	ne
 8012df2:	2101      	movne	r1, #1
 8012df4:	2100      	moveq	r1, #0
 8012df6:	b2c9      	uxtb	r1, r1
 8012df8:	f003 0007 	and.w	r0, r3, #7
 8012dfc:	b240      	sxtb	r0, r0
 8012dfe:	4290      	cmp	r0, r2
 8012e00:	bfac      	ite	ge
 8012e02:	2201      	movge	r2, #1
 8012e04:	2200      	movlt	r2, #0
 8012e06:	b2d2      	uxtb	r2, r2
 8012e08:	400a      	ands	r2, r1
 8012e0a:	b2d2      	uxtb	r2, r2
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	d002      	beq.n	8012e16 <test+0x6aa>
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f6 fa91 	bl	8009338 <__asan_report_load1>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b55      	cmp	r3, #85	; 0x55
 8012e1c:	f040 80ed 	bne.w	8012ffa <test+0x88e>
 8012e20:	f7f7 f868 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	1c59      	adds	r1, r3, #1
 8012e28:	460b      	mov	r3, r1
 8012e2a:	08da      	lsrs	r2, r3, #3
 8012e2c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012e30:	f992 2000 	ldrsb.w	r2, [r2]
 8012e34:	2a00      	cmp	r2, #0
 8012e36:	bf14      	ite	ne
 8012e38:	2001      	movne	r0, #1
 8012e3a:	2000      	moveq	r0, #0
 8012e3c:	b2c0      	uxtb	r0, r0
 8012e3e:	f003 0c07 	and.w	ip, r3, #7
 8012e42:	fa4f fc8c 	sxtb.w	ip, ip
 8012e46:	4594      	cmp	ip, r2
 8012e48:	bfac      	ite	ge
 8012e4a:	2201      	movge	r2, #1
 8012e4c:	2200      	movlt	r2, #0
 8012e4e:	b2d2      	uxtb	r2, r2
 8012e50:	4002      	ands	r2, r0
 8012e52:	b2d2      	uxtb	r2, r2
 8012e54:	2a00      	cmp	r2, #0
 8012e56:	d002      	beq.n	8012e5e <test+0x6f2>
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f6 fa6d 	bl	8009338 <__asan_report_load1>
 8012e5e:	780b      	ldrb	r3, [r1, #0]
 8012e60:	2b4e      	cmp	r3, #78	; 0x4e
 8012e62:	f040 80ca 	bne.w	8012ffa <test+0x88e>
 8012e66:	f7f7 f845 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	1c99      	adds	r1, r3, #2
 8012e6e:	460b      	mov	r3, r1
 8012e70:	08da      	lsrs	r2, r3, #3
 8012e72:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012e76:	f992 2000 	ldrsb.w	r2, [r2]
 8012e7a:	2a00      	cmp	r2, #0
 8012e7c:	bf14      	ite	ne
 8012e7e:	2001      	movne	r0, #1
 8012e80:	2000      	moveq	r0, #0
 8012e82:	b2c0      	uxtb	r0, r0
 8012e84:	f003 0c07 	and.w	ip, r3, #7
 8012e88:	fa4f fc8c 	sxtb.w	ip, ip
 8012e8c:	4594      	cmp	ip, r2
 8012e8e:	bfac      	ite	ge
 8012e90:	2201      	movge	r2, #1
 8012e92:	2200      	movlt	r2, #0
 8012e94:	b2d2      	uxtb	r2, r2
 8012e96:	4002      	ands	r2, r0
 8012e98:	b2d2      	uxtb	r2, r2
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	d002      	beq.n	8012ea4 <test+0x738>
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7f6 fa4a 	bl	8009338 <__asan_report_load1>
 8012ea4:	780b      	ldrb	r3, [r1, #0]
 8012ea6:	2b41      	cmp	r3, #65	; 0x41
 8012ea8:	f040 80a7 	bne.w	8012ffa <test+0x88e>
	{
		arr32[0]= (uint32_t)buf[3];
 8012eac:	f7f7 f822 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	1cd9      	adds	r1, r3, #3
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	08da      	lsrs	r2, r3, #3
 8012eb8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012ebc:	f992 2000 	ldrsb.w	r2, [r2]
 8012ec0:	2a00      	cmp	r2, #0
 8012ec2:	bf14      	ite	ne
 8012ec4:	2001      	movne	r0, #1
 8012ec6:	2000      	moveq	r0, #0
 8012ec8:	b2c0      	uxtb	r0, r0
 8012eca:	f003 0c07 	and.w	ip, r3, #7
 8012ece:	fa4f fc8c 	sxtb.w	ip, ip
 8012ed2:	4594      	cmp	ip, r2
 8012ed4:	bfac      	ite	ge
 8012ed6:	2201      	movge	r2, #1
 8012ed8:	2200      	movlt	r2, #0
 8012eda:	b2d2      	uxtb	r2, r2
 8012edc:	4002      	ands	r2, r0
 8012ede:	b2d2      	uxtb	r2, r2
 8012ee0:	2a00      	cmp	r2, #0
 8012ee2:	d002      	beq.n	8012eea <test+0x77e>
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7f6 fa27 	bl	8009338 <__asan_report_load1>
 8012eea:	780b      	ldrb	r3, [r1, #0]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f1a4 0320 	sub.w	r3, r4, #32
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	08cb      	lsrs	r3, r1, #3
 8012ef6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012efa:	f993 3000 	ldrsb.w	r3, [r3]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	bf14      	ite	ne
 8012f02:	2201      	movne	r2, #1
 8012f04:	2200      	moveq	r2, #0
 8012f06:	b2d2      	uxtb	r2, r2
 8012f08:	2b03      	cmp	r3, #3
 8012f0a:	bfd4      	ite	le
 8012f0c:	2301      	movle	r3, #1
 8012f0e:	2300      	movgt	r3, #0
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	4013      	ands	r3, r2
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <test+0x7b4>
 8012f1a:	4608      	mov	r0, r1
 8012f1c:	f7f6 fa00 	bl	8009320 <__asan_report_store4>
 8012f20:	f844 0c20 	str.w	r0, [r4, #-32]
		arr32[1]= (uint32_t)buf[4];
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	1d19      	adds	r1, r3, #4
 8012f28:	460b      	mov	r3, r1
 8012f2a:	08da      	lsrs	r2, r3, #3
 8012f2c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012f30:	f992 2000 	ldrsb.w	r2, [r2]
 8012f34:	2a00      	cmp	r2, #0
 8012f36:	bf14      	ite	ne
 8012f38:	2001      	movne	r0, #1
 8012f3a:	2000      	moveq	r0, #0
 8012f3c:	b2c0      	uxtb	r0, r0
 8012f3e:	f003 0c07 	and.w	ip, r3, #7
 8012f42:	fa4f fc8c 	sxtb.w	ip, ip
 8012f46:	4594      	cmp	ip, r2
 8012f48:	bfac      	ite	ge
 8012f4a:	2201      	movge	r2, #1
 8012f4c:	2200      	movlt	r2, #0
 8012f4e:	b2d2      	uxtb	r2, r2
 8012f50:	4002      	ands	r2, r0
 8012f52:	b2d2      	uxtb	r2, r2
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	d002      	beq.n	8012f5e <test+0x7f2>
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7f6 f9ed 	bl	8009338 <__asan_report_load1>
 8012f5e:	780b      	ldrb	r3, [r1, #0]
 8012f60:	607b      	str	r3, [r7, #4]
 8012f62:	f1a4 0320 	sub.w	r3, r4, #32
 8012f66:	3304      	adds	r3, #4
 8012f68:	08da      	lsrs	r2, r3, #3
 8012f6a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012f6e:	f992 2000 	ldrsb.w	r2, [r2]
 8012f72:	2a00      	cmp	r2, #0
 8012f74:	bf14      	ite	ne
 8012f76:	2101      	movne	r1, #1
 8012f78:	2100      	moveq	r1, #0
 8012f7a:	b2c9      	uxtb	r1, r1
 8012f7c:	f003 0007 	and.w	r0, r3, #7
 8012f80:	b240      	sxtb	r0, r0
 8012f82:	3003      	adds	r0, #3
 8012f84:	b240      	sxtb	r0, r0
 8012f86:	4290      	cmp	r0, r2
 8012f88:	bfac      	ite	ge
 8012f8a:	2201      	movge	r2, #1
 8012f8c:	2200      	movlt	r2, #0
 8012f8e:	b2d2      	uxtb	r2, r2
 8012f90:	400a      	ands	r2, r1
 8012f92:	b2d2      	uxtb	r2, r2
 8012f94:	2a00      	cmp	r2, #0
 8012f96:	d002      	beq.n	8012f9e <test+0x832>
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f6 f9c1 	bl	8009320 <__asan_report_store4>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f844 3c1c 	str.w	r3, [r4, #-28]
		localbuff = (uint8_t*)&arr32[0];
 8012fa4:	f1a4 0320 	sub.w	r3, r4, #32
 8012fa8:	613b      	str	r3, [r7, #16]
		localbuff += 3;
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	3303      	adds	r3, #3
 8012fae:	613b      	str	r3, [r7, #16]
		ptr16 = (uint16_t *)localbuff;
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	617b      	str	r3, [r7, #20]
		buf[0]= *ptr16; // unaligned access
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	08da      	lsrs	r2, r3, #3
 8012fb8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012fbc:	f992 2000 	ldrsb.w	r2, [r2]
 8012fc0:	2a00      	cmp	r2, #0
 8012fc2:	bf14      	ite	ne
 8012fc4:	2101      	movne	r1, #1
 8012fc6:	2100      	moveq	r1, #0
 8012fc8:	b2c9      	uxtb	r1, r1
 8012fca:	f003 0007 	and.w	r0, r3, #7
 8012fce:	b240      	sxtb	r0, r0
 8012fd0:	3001      	adds	r0, #1
 8012fd2:	b240      	sxtb	r0, r0
 8012fd4:	4290      	cmp	r0, r2
 8012fd6:	bfac      	ite	ge
 8012fd8:	2201      	movge	r2, #1
 8012fda:	2200      	movlt	r2, #0
 8012fdc:	b2d2      	uxtb	r2, r2
 8012fde:	400a      	ands	r2, r1
 8012fe0:	b2d2      	uxtb	r2, r2
 8012fe2:	2a00      	cmp	r2, #0
 8012fe4:	d002      	beq.n	8012fec <test+0x880>
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7f6 f9b2 	bl	8009350 <__asan_report_load2>
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	881b      	ldrh	r3, [r3, #0]
 8012ff0:	b2da      	uxtb	r2, r3
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	701a      	strb	r2, [r3, #0]
 8012ff6:	f000 bc6c 	b.w	80138d2 <test+0x1166>
	}


	 /**** ASAN specific ********/

    else if(buf[0] == 'U' && buf[1] == 'A' && buf[2] == 'F')
 8012ffa:	f7f6 ff7b 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	08da      	lsrs	r2, r3, #3
 8013002:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013006:	f992 2000 	ldrsb.w	r2, [r2]
 801300a:	2a00      	cmp	r2, #0
 801300c:	bf14      	ite	ne
 801300e:	2101      	movne	r1, #1
 8013010:	2100      	moveq	r1, #0
 8013012:	b2c9      	uxtb	r1, r1
 8013014:	f003 0007 	and.w	r0, r3, #7
 8013018:	b240      	sxtb	r0, r0
 801301a:	4290      	cmp	r0, r2
 801301c:	bfac      	ite	ge
 801301e:	2201      	movge	r2, #1
 8013020:	2200      	movlt	r2, #0
 8013022:	b2d2      	uxtb	r2, r2
 8013024:	400a      	ands	r2, r1
 8013026:	b2d2      	uxtb	r2, r2
 8013028:	2a00      	cmp	r2, #0
 801302a:	d002      	beq.n	8013032 <test+0x8c6>
 801302c:	4618      	mov	r0, r3
 801302e:	f7f6 f983 	bl	8009338 <__asan_report_load1>
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	2b55      	cmp	r3, #85	; 0x55
 8013038:	f040 8111 	bne.w	801325e <test+0xaf2>
 801303c:	f7f6 ff5a 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	1c59      	adds	r1, r3, #1
 8013044:	460b      	mov	r3, r1
 8013046:	08da      	lsrs	r2, r3, #3
 8013048:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801304c:	f992 2000 	ldrsb.w	r2, [r2]
 8013050:	2a00      	cmp	r2, #0
 8013052:	bf14      	ite	ne
 8013054:	2001      	movne	r0, #1
 8013056:	2000      	moveq	r0, #0
 8013058:	b2c0      	uxtb	r0, r0
 801305a:	f003 0c07 	and.w	ip, r3, #7
 801305e:	fa4f fc8c 	sxtb.w	ip, ip
 8013062:	4594      	cmp	ip, r2
 8013064:	bfac      	ite	ge
 8013066:	2201      	movge	r2, #1
 8013068:	2200      	movlt	r2, #0
 801306a:	b2d2      	uxtb	r2, r2
 801306c:	4002      	ands	r2, r0
 801306e:	b2d2      	uxtb	r2, r2
 8013070:	2a00      	cmp	r2, #0
 8013072:	d002      	beq.n	801307a <test+0x90e>
 8013074:	4618      	mov	r0, r3
 8013076:	f7f6 f95f 	bl	8009338 <__asan_report_load1>
 801307a:	780b      	ldrb	r3, [r1, #0]
 801307c:	2b41      	cmp	r3, #65	; 0x41
 801307e:	f040 80ee 	bne.w	801325e <test+0xaf2>
 8013082:	f7f6 ff37 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	1c99      	adds	r1, r3, #2
 801308a:	460b      	mov	r3, r1
 801308c:	08da      	lsrs	r2, r3, #3
 801308e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013092:	f992 2000 	ldrsb.w	r2, [r2]
 8013096:	2a00      	cmp	r2, #0
 8013098:	bf14      	ite	ne
 801309a:	2001      	movne	r0, #1
 801309c:	2000      	moveq	r0, #0
 801309e:	b2c0      	uxtb	r0, r0
 80130a0:	f003 0c07 	and.w	ip, r3, #7
 80130a4:	fa4f fc8c 	sxtb.w	ip, ip
 80130a8:	4594      	cmp	ip, r2
 80130aa:	bfac      	ite	ge
 80130ac:	2201      	movge	r2, #1
 80130ae:	2200      	movlt	r2, #0
 80130b0:	b2d2      	uxtb	r2, r2
 80130b2:	4002      	ands	r2, r0
 80130b4:	b2d2      	uxtb	r2, r2
 80130b6:	2a00      	cmp	r2, #0
 80130b8:	d002      	beq.n	80130c0 <test+0x954>
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f6 f93c 	bl	8009338 <__asan_report_load1>
 80130c0:	780b      	ldrb	r3, [r1, #0]
 80130c2:	2b46      	cmp	r3, #70	; 0x46
 80130c4:	f040 80cb 	bne.w	801325e <test+0xaf2>
    {
    	localbuff =  malloc(32);
 80130c8:	f7f6 ff14 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80130cc:	2020      	movs	r0, #32
 80130ce:	f7f6 fded 	bl	8009cac <asan_malloc>
 80130d2:	6138      	str	r0, [r7, #16]
    	if(localbuff)
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f000 83fb 	beq.w	80138d2 <test+0x1166>
    	{
    		localbuff[0] = buf[0];
 80130dc:	f7f6 ff0a 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	08da      	lsrs	r2, r3, #3
 80130e4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80130e8:	f992 2000 	ldrsb.w	r2, [r2]
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	bf14      	ite	ne
 80130f0:	2101      	movne	r1, #1
 80130f2:	2100      	moveq	r1, #0
 80130f4:	b2c9      	uxtb	r1, r1
 80130f6:	f003 0007 	and.w	r0, r3, #7
 80130fa:	b240      	sxtb	r0, r0
 80130fc:	4290      	cmp	r0, r2
 80130fe:	bfac      	ite	ge
 8013100:	2201      	movge	r2, #1
 8013102:	2200      	movlt	r2, #0
 8013104:	b2d2      	uxtb	r2, r2
 8013106:	400a      	ands	r2, r1
 8013108:	b2d2      	uxtb	r2, r2
 801310a:	2a00      	cmp	r2, #0
 801310c:	d002      	beq.n	8013114 <test+0x9a8>
 801310e:	4618      	mov	r0, r3
 8013110:	f7f6 f912 	bl	8009338 <__asan_report_load1>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f893 c000 	ldrb.w	ip, [r3]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	08da      	lsrs	r2, r3, #3
 801311e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013122:	f992 2000 	ldrsb.w	r2, [r2]
 8013126:	2a00      	cmp	r2, #0
 8013128:	bf14      	ite	ne
 801312a:	2101      	movne	r1, #1
 801312c:	2100      	moveq	r1, #0
 801312e:	b2c9      	uxtb	r1, r1
 8013130:	f003 0007 	and.w	r0, r3, #7
 8013134:	b240      	sxtb	r0, r0
 8013136:	4290      	cmp	r0, r2
 8013138:	bfac      	ite	ge
 801313a:	2201      	movge	r2, #1
 801313c:	2200      	movlt	r2, #0
 801313e:	b2d2      	uxtb	r2, r2
 8013140:	400a      	ands	r2, r1
 8013142:	b2d2      	uxtb	r2, r2
 8013144:	2a00      	cmp	r2, #0
 8013146:	d002      	beq.n	801314e <test+0x9e2>
 8013148:	4618      	mov	r0, r3
 801314a:	f7f6 f8dd 	bl	8009308 <__asan_report_store1>
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	4662      	mov	r2, ip
 8013152:	701a      	strb	r2, [r3, #0]
    		localbuff[1] = buf[0] + buf[2];
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	7818      	ldrb	r0, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	1c99      	adds	r1, r3, #2
 801315c:	460b      	mov	r3, r1
 801315e:	08da      	lsrs	r2, r3, #3
 8013160:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013164:	f992 2000 	ldrsb.w	r2, [r2]
 8013168:	2a00      	cmp	r2, #0
 801316a:	bf14      	ite	ne
 801316c:	f04f 0c01 	movne.w	ip, #1
 8013170:	f04f 0c00 	moveq.w	ip, #0
 8013174:	fa5f fc8c 	uxtb.w	ip, ip
 8013178:	f003 0e07 	and.w	lr, r3, #7
 801317c:	fa4f fe8e 	sxtb.w	lr, lr
 8013180:	4596      	cmp	lr, r2
 8013182:	bfac      	ite	ge
 8013184:	2201      	movge	r2, #1
 8013186:	2200      	movlt	r2, #0
 8013188:	b2d2      	uxtb	r2, r2
 801318a:	ea0c 0202 	and.w	r2, ip, r2
 801318e:	b2d2      	uxtb	r2, r2
 8013190:	2a00      	cmp	r2, #0
 8013192:	d002      	beq.n	801319a <test+0xa2e>
 8013194:	4618      	mov	r0, r3
 8013196:	f7f6 f8cf 	bl	8009338 <__asan_report_load1>
 801319a:	780b      	ldrb	r3, [r1, #0]
 801319c:	693a      	ldr	r2, [r7, #16]
 801319e:	1c51      	adds	r1, r2, #1
 80131a0:	4403      	add	r3, r0
 80131a2:	fa5f fe83 	uxtb.w	lr, r3
 80131a6:	460b      	mov	r3, r1
 80131a8:	08da      	lsrs	r2, r3, #3
 80131aa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80131ae:	f992 2000 	ldrsb.w	r2, [r2]
 80131b2:	2a00      	cmp	r2, #0
 80131b4:	bf14      	ite	ne
 80131b6:	2001      	movne	r0, #1
 80131b8:	2000      	moveq	r0, #0
 80131ba:	b2c0      	uxtb	r0, r0
 80131bc:	f003 0c07 	and.w	ip, r3, #7
 80131c0:	fa4f fc8c 	sxtb.w	ip, ip
 80131c4:	4594      	cmp	ip, r2
 80131c6:	bfac      	ite	ge
 80131c8:	2201      	movge	r2, #1
 80131ca:	2200      	movlt	r2, #0
 80131cc:	b2d2      	uxtb	r2, r2
 80131ce:	4002      	ands	r2, r0
 80131d0:	b2d2      	uxtb	r2, r2
 80131d2:	2a00      	cmp	r2, #0
 80131d4:	d002      	beq.n	80131dc <test+0xa70>
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f6 f896 	bl	8009308 <__asan_report_store1>
 80131dc:	4673      	mov	r3, lr
 80131de:	700b      	strb	r3, [r1, #0]
    		free(localbuff);
 80131e0:	6938      	ldr	r0, [r7, #16]
 80131e2:	f7f6 fd6f 	bl	8009cc4 <asan_free>
    		buf[0]=localbuff[1]; // use after free
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	3301      	adds	r3, #1
 80131ea:	08da      	lsrs	r2, r3, #3
 80131ec:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80131f0:	f992 2000 	ldrsb.w	r2, [r2]
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	bf14      	ite	ne
 80131f8:	2101      	movne	r1, #1
 80131fa:	2100      	moveq	r1, #0
 80131fc:	b2c9      	uxtb	r1, r1
 80131fe:	f003 0007 	and.w	r0, r3, #7
 8013202:	b240      	sxtb	r0, r0
 8013204:	4290      	cmp	r0, r2
 8013206:	bfac      	ite	ge
 8013208:	2201      	movge	r2, #1
 801320a:	2200      	movlt	r2, #0
 801320c:	b2d2      	uxtb	r2, r2
 801320e:	400a      	ands	r2, r1
 8013210:	b2d2      	uxtb	r2, r2
 8013212:	2a00      	cmp	r2, #0
 8013214:	d002      	beq.n	801321c <test+0xab0>
 8013216:	4618      	mov	r0, r3
 8013218:	f7f6 f88e 	bl	8009338 <__asan_report_load1>
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	08da      	lsrs	r2, r3, #3
 8013226:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801322a:	f992 2000 	ldrsb.w	r2, [r2]
 801322e:	2a00      	cmp	r2, #0
 8013230:	bf14      	ite	ne
 8013232:	2101      	movne	r1, #1
 8013234:	2100      	moveq	r1, #0
 8013236:	b2c9      	uxtb	r1, r1
 8013238:	f003 0007 	and.w	r0, r3, #7
 801323c:	b240      	sxtb	r0, r0
 801323e:	4290      	cmp	r0, r2
 8013240:	bfac      	ite	ge
 8013242:	2201      	movge	r2, #1
 8013244:	2200      	movlt	r2, #0
 8013246:	b2d2      	uxtb	r2, r2
 8013248:	400a      	ands	r2, r1
 801324a:	b2d2      	uxtb	r2, r2
 801324c:	2a00      	cmp	r2, #0
 801324e:	d002      	beq.n	8013256 <test+0xaea>
 8013250:	4618      	mov	r0, r3
 8013252:	f7f6 f859 	bl	8009308 <__asan_report_store1>
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4662      	mov	r2, ip
 801325a:	701a      	strb	r2, [r3, #0]
    	if(localbuff)
 801325c:	e339      	b.n	80138d2 <test+0x1166>
    	}

    }
    else if(buf[0] == '2' && buf[1] == 'F' && buf[2] == 'R')
 801325e:	f7f6 fe49 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	08da      	lsrs	r2, r3, #3
 8013266:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801326a:	f992 2000 	ldrsb.w	r2, [r2]
 801326e:	2a00      	cmp	r2, #0
 8013270:	bf14      	ite	ne
 8013272:	2101      	movne	r1, #1
 8013274:	2100      	moveq	r1, #0
 8013276:	b2c9      	uxtb	r1, r1
 8013278:	f003 0007 	and.w	r0, r3, #7
 801327c:	b240      	sxtb	r0, r0
 801327e:	4290      	cmp	r0, r2
 8013280:	bfac      	ite	ge
 8013282:	2201      	movge	r2, #1
 8013284:	2200      	movlt	r2, #0
 8013286:	b2d2      	uxtb	r2, r2
 8013288:	400a      	ands	r2, r1
 801328a:	b2d2      	uxtb	r2, r2
 801328c:	2a00      	cmp	r2, #0
 801328e:	d002      	beq.n	8013296 <test+0xb2a>
 8013290:	4618      	mov	r0, r3
 8013292:	f7f6 f851 	bl	8009338 <__asan_report_load1>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b32      	cmp	r3, #50	; 0x32
 801329c:	f040 80db 	bne.w	8013456 <test+0xcea>
 80132a0:	f7f6 fe28 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	1c59      	adds	r1, r3, #1
 80132a8:	460b      	mov	r3, r1
 80132aa:	08da      	lsrs	r2, r3, #3
 80132ac:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80132b0:	f992 2000 	ldrsb.w	r2, [r2]
 80132b4:	2a00      	cmp	r2, #0
 80132b6:	bf14      	ite	ne
 80132b8:	2001      	movne	r0, #1
 80132ba:	2000      	moveq	r0, #0
 80132bc:	b2c0      	uxtb	r0, r0
 80132be:	f003 0c07 	and.w	ip, r3, #7
 80132c2:	fa4f fc8c 	sxtb.w	ip, ip
 80132c6:	4594      	cmp	ip, r2
 80132c8:	bfac      	ite	ge
 80132ca:	2201      	movge	r2, #1
 80132cc:	2200      	movlt	r2, #0
 80132ce:	b2d2      	uxtb	r2, r2
 80132d0:	4002      	ands	r2, r0
 80132d2:	b2d2      	uxtb	r2, r2
 80132d4:	2a00      	cmp	r2, #0
 80132d6:	d002      	beq.n	80132de <test+0xb72>
 80132d8:	4618      	mov	r0, r3
 80132da:	f7f6 f82d 	bl	8009338 <__asan_report_load1>
 80132de:	780b      	ldrb	r3, [r1, #0]
 80132e0:	2b46      	cmp	r3, #70	; 0x46
 80132e2:	f040 80b8 	bne.w	8013456 <test+0xcea>
 80132e6:	f7f6 fe05 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	1c99      	adds	r1, r3, #2
 80132ee:	460b      	mov	r3, r1
 80132f0:	08da      	lsrs	r2, r3, #3
 80132f2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80132f6:	f992 2000 	ldrsb.w	r2, [r2]
 80132fa:	2a00      	cmp	r2, #0
 80132fc:	bf14      	ite	ne
 80132fe:	2001      	movne	r0, #1
 8013300:	2000      	moveq	r0, #0
 8013302:	b2c0      	uxtb	r0, r0
 8013304:	f003 0c07 	and.w	ip, r3, #7
 8013308:	fa4f fc8c 	sxtb.w	ip, ip
 801330c:	4594      	cmp	ip, r2
 801330e:	bfac      	ite	ge
 8013310:	2201      	movge	r2, #1
 8013312:	2200      	movlt	r2, #0
 8013314:	b2d2      	uxtb	r2, r2
 8013316:	4002      	ands	r2, r0
 8013318:	b2d2      	uxtb	r2, r2
 801331a:	2a00      	cmp	r2, #0
 801331c:	d002      	beq.n	8013324 <test+0xbb8>
 801331e:	4618      	mov	r0, r3
 8013320:	f7f6 f80a 	bl	8009338 <__asan_report_load1>
 8013324:	780b      	ldrb	r3, [r1, #0]
 8013326:	2b52      	cmp	r3, #82	; 0x52
 8013328:	f040 8095 	bne.w	8013456 <test+0xcea>
    {

    		localbuff =  malloc(32);
 801332c:	f7f6 fde2 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013330:	2020      	movs	r0, #32
 8013332:	f7f6 fcbb 	bl	8009cac <asan_malloc>
 8013336:	6138      	str	r0, [r7, #16]
    		if(localbuff)
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f000 8085 	beq.w	801344a <test+0xcde>
    		{
    			localbuff[0] = buf[0];
 8013340:	f7f6 fdd8 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	08da      	lsrs	r2, r3, #3
 8013348:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801334c:	f992 2000 	ldrsb.w	r2, [r2]
 8013350:	2a00      	cmp	r2, #0
 8013352:	bf14      	ite	ne
 8013354:	2101      	movne	r1, #1
 8013356:	2100      	moveq	r1, #0
 8013358:	b2c9      	uxtb	r1, r1
 801335a:	f003 0007 	and.w	r0, r3, #7
 801335e:	b240      	sxtb	r0, r0
 8013360:	4290      	cmp	r0, r2
 8013362:	bfac      	ite	ge
 8013364:	2201      	movge	r2, #1
 8013366:	2200      	movlt	r2, #0
 8013368:	b2d2      	uxtb	r2, r2
 801336a:	400a      	ands	r2, r1
 801336c:	b2d2      	uxtb	r2, r2
 801336e:	2a00      	cmp	r2, #0
 8013370:	d002      	beq.n	8013378 <test+0xc0c>
 8013372:	4618      	mov	r0, r3
 8013374:	f7f5 ffe0 	bl	8009338 <__asan_report_load1>
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f893 c000 	ldrb.w	ip, [r3]
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	08da      	lsrs	r2, r3, #3
 8013382:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013386:	f992 2000 	ldrsb.w	r2, [r2]
 801338a:	2a00      	cmp	r2, #0
 801338c:	bf14      	ite	ne
 801338e:	2101      	movne	r1, #1
 8013390:	2100      	moveq	r1, #0
 8013392:	b2c9      	uxtb	r1, r1
 8013394:	f003 0007 	and.w	r0, r3, #7
 8013398:	b240      	sxtb	r0, r0
 801339a:	4290      	cmp	r0, r2
 801339c:	bfac      	ite	ge
 801339e:	2201      	movge	r2, #1
 80133a0:	2200      	movlt	r2, #0
 80133a2:	b2d2      	uxtb	r2, r2
 80133a4:	400a      	ands	r2, r1
 80133a6:	b2d2      	uxtb	r2, r2
 80133a8:	2a00      	cmp	r2, #0
 80133aa:	d002      	beq.n	80133b2 <test+0xc46>
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f5 ffab 	bl	8009308 <__asan_report_store1>
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	4662      	mov	r2, ip
 80133b6:	701a      	strb	r2, [r3, #0]
    			localbuff[1] = buf[0] + buf[2];
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	7818      	ldrb	r0, [r3, #0]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	1c99      	adds	r1, r3, #2
 80133c0:	460b      	mov	r3, r1
 80133c2:	08da      	lsrs	r2, r3, #3
 80133c4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80133c8:	f992 2000 	ldrsb.w	r2, [r2]
 80133cc:	2a00      	cmp	r2, #0
 80133ce:	bf14      	ite	ne
 80133d0:	f04f 0c01 	movne.w	ip, #1
 80133d4:	f04f 0c00 	moveq.w	ip, #0
 80133d8:	fa5f fc8c 	uxtb.w	ip, ip
 80133dc:	f003 0e07 	and.w	lr, r3, #7
 80133e0:	fa4f fe8e 	sxtb.w	lr, lr
 80133e4:	4596      	cmp	lr, r2
 80133e6:	bfac      	ite	ge
 80133e8:	2201      	movge	r2, #1
 80133ea:	2200      	movlt	r2, #0
 80133ec:	b2d2      	uxtb	r2, r2
 80133ee:	ea0c 0202 	and.w	r2, ip, r2
 80133f2:	b2d2      	uxtb	r2, r2
 80133f4:	2a00      	cmp	r2, #0
 80133f6:	d002      	beq.n	80133fe <test+0xc92>
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7f5 ff9d 	bl	8009338 <__asan_report_load1>
 80133fe:	780b      	ldrb	r3, [r1, #0]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	1c51      	adds	r1, r2, #1
 8013404:	4403      	add	r3, r0
 8013406:	fa5f fe83 	uxtb.w	lr, r3
 801340a:	460b      	mov	r3, r1
 801340c:	08da      	lsrs	r2, r3, #3
 801340e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013412:	f992 2000 	ldrsb.w	r2, [r2]
 8013416:	2a00      	cmp	r2, #0
 8013418:	bf14      	ite	ne
 801341a:	2001      	movne	r0, #1
 801341c:	2000      	moveq	r0, #0
 801341e:	b2c0      	uxtb	r0, r0
 8013420:	f003 0c07 	and.w	ip, r3, #7
 8013424:	fa4f fc8c 	sxtb.w	ip, ip
 8013428:	4594      	cmp	ip, r2
 801342a:	bfac      	ite	ge
 801342c:	2201      	movge	r2, #1
 801342e:	2200      	movlt	r2, #0
 8013430:	b2d2      	uxtb	r2, r2
 8013432:	4002      	ands	r2, r0
 8013434:	b2d2      	uxtb	r2, r2
 8013436:	2a00      	cmp	r2, #0
 8013438:	d002      	beq.n	8013440 <test+0xcd4>
 801343a:	4618      	mov	r0, r3
 801343c:	f7f5 ff64 	bl	8009308 <__asan_report_store1>
 8013440:	4673      	mov	r3, lr
 8013442:	700b      	strb	r3, [r1, #0]
    			free(localbuff);
 8013444:	6938      	ldr	r0, [r7, #16]
 8013446:	f7f6 fc3d 	bl	8009cc4 <asan_free>
    		}
    		free(localbuff); //double free
 801344a:	f7f6 fd53 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801344e:	6938      	ldr	r0, [r7, #16]
 8013450:	f7f6 fc38 	bl	8009cc4 <asan_free>
 8013454:	e23d      	b.n	80138d2 <test+0x1166>

    }

    else if(buf[0] == 'I' && buf[1] == 'F' && buf[2] == 'R')
 8013456:	f7f6 fd4d 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	08da      	lsrs	r2, r3, #3
 801345e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013462:	f992 2000 	ldrsb.w	r2, [r2]
 8013466:	2a00      	cmp	r2, #0
 8013468:	bf14      	ite	ne
 801346a:	2101      	movne	r1, #1
 801346c:	2100      	moveq	r1, #0
 801346e:	b2c9      	uxtb	r1, r1
 8013470:	f003 0007 	and.w	r0, r3, #7
 8013474:	b240      	sxtb	r0, r0
 8013476:	4290      	cmp	r0, r2
 8013478:	bfac      	ite	ge
 801347a:	2201      	movge	r2, #1
 801347c:	2200      	movlt	r2, #0
 801347e:	b2d2      	uxtb	r2, r2
 8013480:	400a      	ands	r2, r1
 8013482:	b2d2      	uxtb	r2, r2
 8013484:	2a00      	cmp	r2, #0
 8013486:	d002      	beq.n	801348e <test+0xd22>
 8013488:	4618      	mov	r0, r3
 801348a:	f7f5 ff55 	bl	8009338 <__asan_report_load1>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	2b49      	cmp	r3, #73	; 0x49
 8013494:	f040 80db 	bne.w	801364e <test+0xee2>
 8013498:	f7f6 fd2c 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	1c59      	adds	r1, r3, #1
 80134a0:	460b      	mov	r3, r1
 80134a2:	08da      	lsrs	r2, r3, #3
 80134a4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80134a8:	f992 2000 	ldrsb.w	r2, [r2]
 80134ac:	2a00      	cmp	r2, #0
 80134ae:	bf14      	ite	ne
 80134b0:	2001      	movne	r0, #1
 80134b2:	2000      	moveq	r0, #0
 80134b4:	b2c0      	uxtb	r0, r0
 80134b6:	f003 0c07 	and.w	ip, r3, #7
 80134ba:	fa4f fc8c 	sxtb.w	ip, ip
 80134be:	4594      	cmp	ip, r2
 80134c0:	bfac      	ite	ge
 80134c2:	2201      	movge	r2, #1
 80134c4:	2200      	movlt	r2, #0
 80134c6:	b2d2      	uxtb	r2, r2
 80134c8:	4002      	ands	r2, r0
 80134ca:	b2d2      	uxtb	r2, r2
 80134cc:	2a00      	cmp	r2, #0
 80134ce:	d002      	beq.n	80134d6 <test+0xd6a>
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f5 ff31 	bl	8009338 <__asan_report_load1>
 80134d6:	780b      	ldrb	r3, [r1, #0]
 80134d8:	2b46      	cmp	r3, #70	; 0x46
 80134da:	f040 80b8 	bne.w	801364e <test+0xee2>
 80134de:	f7f6 fd09 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	1c99      	adds	r1, r3, #2
 80134e6:	460b      	mov	r3, r1
 80134e8:	08da      	lsrs	r2, r3, #3
 80134ea:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80134ee:	f992 2000 	ldrsb.w	r2, [r2]
 80134f2:	2a00      	cmp	r2, #0
 80134f4:	bf14      	ite	ne
 80134f6:	2001      	movne	r0, #1
 80134f8:	2000      	moveq	r0, #0
 80134fa:	b2c0      	uxtb	r0, r0
 80134fc:	f003 0c07 	and.w	ip, r3, #7
 8013500:	fa4f fc8c 	sxtb.w	ip, ip
 8013504:	4594      	cmp	ip, r2
 8013506:	bfac      	ite	ge
 8013508:	2201      	movge	r2, #1
 801350a:	2200      	movlt	r2, #0
 801350c:	b2d2      	uxtb	r2, r2
 801350e:	4002      	ands	r2, r0
 8013510:	b2d2      	uxtb	r2, r2
 8013512:	2a00      	cmp	r2, #0
 8013514:	d002      	beq.n	801351c <test+0xdb0>
 8013516:	4618      	mov	r0, r3
 8013518:	f7f5 ff0e 	bl	8009338 <__asan_report_load1>
 801351c:	780b      	ldrb	r3, [r1, #0]
 801351e:	2b52      	cmp	r3, #82	; 0x52
 8013520:	f040 8095 	bne.w	801364e <test+0xee2>
    {

    	localbuff =  malloc(32);
 8013524:	f7f6 fce6 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013528:	2020      	movs	r0, #32
 801352a:	f7f6 fbbf 	bl	8009cac <asan_malloc>
 801352e:	6138      	str	r0, [r7, #16]
    	if(localbuff)
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	f000 8082 	beq.w	801363c <test+0xed0>
    	{
    		localbuff[0] = buf[0];
 8013538:	f7f6 fcdc 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	08da      	lsrs	r2, r3, #3
 8013540:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013544:	f992 2000 	ldrsb.w	r2, [r2]
 8013548:	2a00      	cmp	r2, #0
 801354a:	bf14      	ite	ne
 801354c:	2101      	movne	r1, #1
 801354e:	2100      	moveq	r1, #0
 8013550:	b2c9      	uxtb	r1, r1
 8013552:	f003 0007 	and.w	r0, r3, #7
 8013556:	b240      	sxtb	r0, r0
 8013558:	4290      	cmp	r0, r2
 801355a:	bfac      	ite	ge
 801355c:	2201      	movge	r2, #1
 801355e:	2200      	movlt	r2, #0
 8013560:	b2d2      	uxtb	r2, r2
 8013562:	400a      	ands	r2, r1
 8013564:	b2d2      	uxtb	r2, r2
 8013566:	2a00      	cmp	r2, #0
 8013568:	d002      	beq.n	8013570 <test+0xe04>
 801356a:	4618      	mov	r0, r3
 801356c:	f7f5 fee4 	bl	8009338 <__asan_report_load1>
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f893 c000 	ldrb.w	ip, [r3]
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	08da      	lsrs	r2, r3, #3
 801357a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801357e:	f992 2000 	ldrsb.w	r2, [r2]
 8013582:	2a00      	cmp	r2, #0
 8013584:	bf14      	ite	ne
 8013586:	2101      	movne	r1, #1
 8013588:	2100      	moveq	r1, #0
 801358a:	b2c9      	uxtb	r1, r1
 801358c:	f003 0007 	and.w	r0, r3, #7
 8013590:	b240      	sxtb	r0, r0
 8013592:	4290      	cmp	r0, r2
 8013594:	bfac      	ite	ge
 8013596:	2201      	movge	r2, #1
 8013598:	2200      	movlt	r2, #0
 801359a:	b2d2      	uxtb	r2, r2
 801359c:	400a      	ands	r2, r1
 801359e:	b2d2      	uxtb	r2, r2
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	d002      	beq.n	80135aa <test+0xe3e>
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f5 feaf 	bl	8009308 <__asan_report_store1>
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	4662      	mov	r2, ip
 80135ae:	701a      	strb	r2, [r3, #0]
    		localbuff[1] = buf[0] + buf[2];
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	7818      	ldrb	r0, [r3, #0]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	1c99      	adds	r1, r3, #2
 80135b8:	460b      	mov	r3, r1
 80135ba:	08da      	lsrs	r2, r3, #3
 80135bc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80135c0:	f992 2000 	ldrsb.w	r2, [r2]
 80135c4:	2a00      	cmp	r2, #0
 80135c6:	bf14      	ite	ne
 80135c8:	f04f 0c01 	movne.w	ip, #1
 80135cc:	f04f 0c00 	moveq.w	ip, #0
 80135d0:	fa5f fc8c 	uxtb.w	ip, ip
 80135d4:	f003 0e07 	and.w	lr, r3, #7
 80135d8:	fa4f fe8e 	sxtb.w	lr, lr
 80135dc:	4596      	cmp	lr, r2
 80135de:	bfac      	ite	ge
 80135e0:	2201      	movge	r2, #1
 80135e2:	2200      	movlt	r2, #0
 80135e4:	b2d2      	uxtb	r2, r2
 80135e6:	ea0c 0202 	and.w	r2, ip, r2
 80135ea:	b2d2      	uxtb	r2, r2
 80135ec:	2a00      	cmp	r2, #0
 80135ee:	d002      	beq.n	80135f6 <test+0xe8a>
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f5 fea1 	bl	8009338 <__asan_report_load1>
 80135f6:	780b      	ldrb	r3, [r1, #0]
 80135f8:	693a      	ldr	r2, [r7, #16]
 80135fa:	1c51      	adds	r1, r2, #1
 80135fc:	4403      	add	r3, r0
 80135fe:	fa5f fe83 	uxtb.w	lr, r3
 8013602:	460b      	mov	r3, r1
 8013604:	08da      	lsrs	r2, r3, #3
 8013606:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801360a:	f992 2000 	ldrsb.w	r2, [r2]
 801360e:	2a00      	cmp	r2, #0
 8013610:	bf14      	ite	ne
 8013612:	2001      	movne	r0, #1
 8013614:	2000      	moveq	r0, #0
 8013616:	b2c0      	uxtb	r0, r0
 8013618:	f003 0c07 	and.w	ip, r3, #7
 801361c:	fa4f fc8c 	sxtb.w	ip, ip
 8013620:	4594      	cmp	ip, r2
 8013622:	bfac      	ite	ge
 8013624:	2201      	movge	r2, #1
 8013626:	2200      	movlt	r2, #0
 8013628:	b2d2      	uxtb	r2, r2
 801362a:	4002      	ands	r2, r0
 801362c:	b2d2      	uxtb	r2, r2
 801362e:	2a00      	cmp	r2, #0
 8013630:	d002      	beq.n	8013638 <test+0xecc>
 8013632:	4618      	mov	r0, r3
 8013634:	f7f5 fe68 	bl	8009308 <__asan_report_store1>
 8013638:	4673      	mov	r3, lr
 801363a:	700b      	strb	r3, [r1, #0]
    	}
    	localbuff+=10;
 801363c:	f7f6 fc5a 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	330a      	adds	r3, #10
 8013644:	613b      	str	r3, [r7, #16]
    	free(localbuff); //invalid free
 8013646:	6938      	ldr	r0, [r7, #16]
 8013648:	f7f6 fb3c 	bl	8009cc4 <asan_free>
 801364c:	e141      	b.n	80138d2 <test+0x1166>

    }

    else if(buf[0] == 'O' && buf[1] == 'F' && buf[2] == 'S') //overflow in stack
 801364e:	f7f6 fc51 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	08da      	lsrs	r2, r3, #3
 8013656:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801365a:	f992 2000 	ldrsb.w	r2, [r2]
 801365e:	2a00      	cmp	r2, #0
 8013660:	bf14      	ite	ne
 8013662:	2101      	movne	r1, #1
 8013664:	2100      	moveq	r1, #0
 8013666:	b2c9      	uxtb	r1, r1
 8013668:	f003 0007 	and.w	r0, r3, #7
 801366c:	b240      	sxtb	r0, r0
 801366e:	4290      	cmp	r0, r2
 8013670:	bfac      	ite	ge
 8013672:	2201      	movge	r2, #1
 8013674:	2200      	movlt	r2, #0
 8013676:	b2d2      	uxtb	r2, r2
 8013678:	400a      	ands	r2, r1
 801367a:	b2d2      	uxtb	r2, r2
 801367c:	2a00      	cmp	r2, #0
 801367e:	d002      	beq.n	8013686 <test+0xf1a>
 8013680:	4618      	mov	r0, r3
 8013682:	f7f5 fe59 	bl	8009338 <__asan_report_load1>
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b4f      	cmp	r3, #79	; 0x4f
 801368c:	f040 808f 	bne.w	80137ae <test+0x1042>
 8013690:	f7f6 fc30 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	1c59      	adds	r1, r3, #1
 8013698:	460b      	mov	r3, r1
 801369a:	08da      	lsrs	r2, r3, #3
 801369c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80136a0:	f992 2000 	ldrsb.w	r2, [r2]
 80136a4:	2a00      	cmp	r2, #0
 80136a6:	bf14      	ite	ne
 80136a8:	2001      	movne	r0, #1
 80136aa:	2000      	moveq	r0, #0
 80136ac:	b2c0      	uxtb	r0, r0
 80136ae:	f003 0c07 	and.w	ip, r3, #7
 80136b2:	fa4f fc8c 	sxtb.w	ip, ip
 80136b6:	4594      	cmp	ip, r2
 80136b8:	bfac      	ite	ge
 80136ba:	2201      	movge	r2, #1
 80136bc:	2200      	movlt	r2, #0
 80136be:	b2d2      	uxtb	r2, r2
 80136c0:	4002      	ands	r2, r0
 80136c2:	b2d2      	uxtb	r2, r2
 80136c4:	2a00      	cmp	r2, #0
 80136c6:	d002      	beq.n	80136ce <test+0xf62>
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7f5 fe35 	bl	8009338 <__asan_report_load1>
 80136ce:	780b      	ldrb	r3, [r1, #0]
 80136d0:	2b46      	cmp	r3, #70	; 0x46
 80136d2:	d16c      	bne.n	80137ae <test+0x1042>
 80136d4:	f7f6 fc0e 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	1c99      	adds	r1, r3, #2
 80136dc:	460b      	mov	r3, r1
 80136de:	08da      	lsrs	r2, r3, #3
 80136e0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80136e4:	f992 2000 	ldrsb.w	r2, [r2]
 80136e8:	2a00      	cmp	r2, #0
 80136ea:	bf14      	ite	ne
 80136ec:	2001      	movne	r0, #1
 80136ee:	2000      	moveq	r0, #0
 80136f0:	b2c0      	uxtb	r0, r0
 80136f2:	f003 0c07 	and.w	ip, r3, #7
 80136f6:	fa4f fc8c 	sxtb.w	ip, ip
 80136fa:	4594      	cmp	ip, r2
 80136fc:	bfac      	ite	ge
 80136fe:	2201      	movge	r2, #1
 8013700:	2200      	movlt	r2, #0
 8013702:	b2d2      	uxtb	r2, r2
 8013704:	4002      	ands	r2, r0
 8013706:	b2d2      	uxtb	r2, r2
 8013708:	2a00      	cmp	r2, #0
 801370a:	d002      	beq.n	8013712 <test+0xfa6>
 801370c:	4618      	mov	r0, r3
 801370e:	f7f5 fe13 	bl	8009338 <__asan_report_load1>
 8013712:	780b      	ldrb	r3, [r1, #0]
 8013714:	2b53      	cmp	r3, #83	; 0x53
 8013716:	d14a      	bne.n	80137ae <test+0x1042>
    {

    	buf[0] = arr32[buf[4]];
 8013718:	f7f6 fbec 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	1d19      	adds	r1, r3, #4
 8013720:	460b      	mov	r3, r1
 8013722:	08da      	lsrs	r2, r3, #3
 8013724:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013728:	f992 2000 	ldrsb.w	r2, [r2]
 801372c:	2a00      	cmp	r2, #0
 801372e:	bf14      	ite	ne
 8013730:	2001      	movne	r0, #1
 8013732:	2000      	moveq	r0, #0
 8013734:	b2c0      	uxtb	r0, r0
 8013736:	f003 0c07 	and.w	ip, r3, #7
 801373a:	fa4f fc8c 	sxtb.w	ip, ip
 801373e:	4594      	cmp	ip, r2
 8013740:	bfac      	ite	ge
 8013742:	2201      	movge	r2, #1
 8013744:	2200      	movlt	r2, #0
 8013746:	b2d2      	uxtb	r2, r2
 8013748:	4002      	ands	r2, r0
 801374a:	b2d2      	uxtb	r2, r2
 801374c:	2a00      	cmp	r2, #0
 801374e:	d002      	beq.n	8013756 <test+0xfea>
 8013750:	4618      	mov	r0, r3
 8013752:	f7f5 fdf1 	bl	8009338 <__asan_report_load1>
 8013756:	780b      	ldrb	r3, [r1, #0]
 8013758:	4619      	mov	r1, r3
 801375a:	f1a4 0220 	sub.w	r2, r4, #32
 801375e:	008b      	lsls	r3, r1, #2
 8013760:	4413      	add	r3, r2
 8013762:	08da      	lsrs	r2, r3, #3
 8013764:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013768:	f992 2000 	ldrsb.w	r2, [r2]
 801376c:	2a00      	cmp	r2, #0
 801376e:	bf14      	ite	ne
 8013770:	2001      	movne	r0, #1
 8013772:	2000      	moveq	r0, #0
 8013774:	b2c0      	uxtb	r0, r0
 8013776:	f003 0c07 	and.w	ip, r3, #7
 801377a:	fa4f fc8c 	sxtb.w	ip, ip
 801377e:	f10c 0c03 	add.w	ip, ip, #3
 8013782:	fa4f fc8c 	sxtb.w	ip, ip
 8013786:	4594      	cmp	ip, r2
 8013788:	bfac      	ite	ge
 801378a:	2201      	movge	r2, #1
 801378c:	2200      	movlt	r2, #0
 801378e:	b2d2      	uxtb	r2, r2
 8013790:	4002      	ands	r2, r0
 8013792:	b2d2      	uxtb	r2, r2
 8013794:	2a00      	cmp	r2, #0
 8013796:	d002      	beq.n	801379e <test+0x1032>
 8013798:	4618      	mov	r0, r3
 801379a:	f7f5 fde5 	bl	8009368 <__asan_report_load4>
 801379e:	008b      	lsls	r3, r1, #2
 80137a0:	4423      	add	r3, r4
 80137a2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80137a6:	b2da      	uxtb	r2, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	701a      	strb	r2, [r3, #0]
 80137ac:	e091      	b.n	80138d2 <test+0x1166>

    }
    else if(buf[0] == 'O' && buf[1] == 'F' && buf[2] == 'H') //overflow in heap
 80137ae:	f7f6 fba1 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	08da      	lsrs	r2, r3, #3
 80137b6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80137ba:	f992 2000 	ldrsb.w	r2, [r2]
 80137be:	2a00      	cmp	r2, #0
 80137c0:	bf14      	ite	ne
 80137c2:	2101      	movne	r1, #1
 80137c4:	2100      	moveq	r1, #0
 80137c6:	b2c9      	uxtb	r1, r1
 80137c8:	f003 0007 	and.w	r0, r3, #7
 80137cc:	b240      	sxtb	r0, r0
 80137ce:	4290      	cmp	r0, r2
 80137d0:	bfac      	ite	ge
 80137d2:	2201      	movge	r2, #1
 80137d4:	2200      	movlt	r2, #0
 80137d6:	b2d2      	uxtb	r2, r2
 80137d8:	400a      	ands	r2, r1
 80137da:	b2d2      	uxtb	r2, r2
 80137dc:	2a00      	cmp	r2, #0
 80137de:	d002      	beq.n	80137e6 <test+0x107a>
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f5 fda9 	bl	8009338 <__asan_report_load1>
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	2b4f      	cmp	r3, #79	; 0x4f
 80137ec:	d171      	bne.n	80138d2 <test+0x1166>
 80137ee:	f7f6 fb81 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	1c59      	adds	r1, r3, #1
 80137f6:	460b      	mov	r3, r1
 80137f8:	08da      	lsrs	r2, r3, #3
 80137fa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80137fe:	f992 2000 	ldrsb.w	r2, [r2]
 8013802:	2a00      	cmp	r2, #0
 8013804:	bf14      	ite	ne
 8013806:	2001      	movne	r0, #1
 8013808:	2000      	moveq	r0, #0
 801380a:	b2c0      	uxtb	r0, r0
 801380c:	f003 0c07 	and.w	ip, r3, #7
 8013810:	fa4f fc8c 	sxtb.w	ip, ip
 8013814:	4594      	cmp	ip, r2
 8013816:	bfac      	ite	ge
 8013818:	2201      	movge	r2, #1
 801381a:	2200      	movlt	r2, #0
 801381c:	b2d2      	uxtb	r2, r2
 801381e:	4002      	ands	r2, r0
 8013820:	b2d2      	uxtb	r2, r2
 8013822:	2a00      	cmp	r2, #0
 8013824:	d002      	beq.n	801382c <test+0x10c0>
 8013826:	4618      	mov	r0, r3
 8013828:	f7f5 fd86 	bl	8009338 <__asan_report_load1>
 801382c:	780b      	ldrb	r3, [r1, #0]
 801382e:	2b46      	cmp	r3, #70	; 0x46
 8013830:	d14f      	bne.n	80138d2 <test+0x1166>
 8013832:	f7f6 fb5f 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	1c99      	adds	r1, r3, #2
 801383a:	460b      	mov	r3, r1
 801383c:	08da      	lsrs	r2, r3, #3
 801383e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013842:	f992 2000 	ldrsb.w	r2, [r2]
 8013846:	2a00      	cmp	r2, #0
 8013848:	bf14      	ite	ne
 801384a:	2001      	movne	r0, #1
 801384c:	2000      	moveq	r0, #0
 801384e:	b2c0      	uxtb	r0, r0
 8013850:	f003 0c07 	and.w	ip, r3, #7
 8013854:	fa4f fc8c 	sxtb.w	ip, ip
 8013858:	4594      	cmp	ip, r2
 801385a:	bfac      	ite	ge
 801385c:	2201      	movge	r2, #1
 801385e:	2200      	movlt	r2, #0
 8013860:	b2d2      	uxtb	r2, r2
 8013862:	4002      	ands	r2, r0
 8013864:	b2d2      	uxtb	r2, r2
 8013866:	2a00      	cmp	r2, #0
 8013868:	d002      	beq.n	8013870 <test+0x1104>
 801386a:	4618      	mov	r0, r3
 801386c:	f7f5 fd64 	bl	8009338 <__asan_report_load1>
 8013870:	780b      	ldrb	r3, [r1, #0]
 8013872:	2b48      	cmp	r3, #72	; 0x48
 8013874:	d12d      	bne.n	80138d2 <test+0x1166>
    {
    	localbuff =  malloc(8);
 8013876:	f7f6 fb3d 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801387a:	2008      	movs	r0, #8
 801387c:	f7f6 fa16 	bl	8009cac <asan_malloc>
 8013880:	6138      	str	r0, [r7, #16]
    	if(localbuff)
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d024      	beq.n	80138d2 <test+0x1166>
    	{
    		localbuff[9]=10;//overflow in heap
 8013888:	f7f6 fb34 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	f103 0109 	add.w	r1, r3, #9
 8013892:	460b      	mov	r3, r1
 8013894:	08da      	lsrs	r2, r3, #3
 8013896:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801389a:	f992 2000 	ldrsb.w	r2, [r2]
 801389e:	2a00      	cmp	r2, #0
 80138a0:	bf14      	ite	ne
 80138a2:	2001      	movne	r0, #1
 80138a4:	2000      	moveq	r0, #0
 80138a6:	b2c0      	uxtb	r0, r0
 80138a8:	f003 0c07 	and.w	ip, r3, #7
 80138ac:	fa4f fc8c 	sxtb.w	ip, ip
 80138b0:	4594      	cmp	ip, r2
 80138b2:	bfac      	ite	ge
 80138b4:	2201      	movge	r2, #1
 80138b6:	2200      	movlt	r2, #0
 80138b8:	b2d2      	uxtb	r2, r2
 80138ba:	4002      	ands	r2, r0
 80138bc:	b2d2      	uxtb	r2, r2
 80138be:	2a00      	cmp	r2, #0
 80138c0:	d002      	beq.n	80138c8 <test+0x115c>
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f5 fd20 	bl	8009308 <__asan_report_store1>
 80138c8:	230a      	movs	r3, #10
 80138ca:	700b      	strb	r3, [r1, #0]
    		free(localbuff);
 80138cc:	6938      	ldr	r0, [r7, #16]
 80138ce:	f7f6 f9f9 	bl	8009cc4 <asan_free>
    	}

    }

	return FAULT_NONE_RTOS; //normal execution does not trigger any bug
 80138d2:	f7f6 fb0f 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80138d6:	f04f 0908 	mov.w	r9, #8
 80138da:	f7f6 fb0b 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 80138de:	f1a4 0320 	sub.w	r3, r4, #32
 80138e2:	08db      	lsrs	r3, r3, #3
 80138e4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80138e8:	22f8      	movs	r2, #248	; 0xf8
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	22f8      	movs	r2, #248	; 0xf8
 80138ee:	705a      	strb	r2, [r3, #1]
 80138f0:	f7f6 fb00 	bl	8009ef4 <__sanitizer_cov_trace_pc>


}
 80138f4:	4649      	mov	r1, r9
{
 80138f6:	45a8      	cmp	r8, r5
 80138f8:	d009      	beq.n	801390e <test+0x11a2>
 80138fa:	4b0a      	ldr	r3, [pc, #40]	; (8013924 <test+0x11b8>)
 80138fc:	602b      	str	r3, [r5, #0]
 80138fe:	f106 53dc 	add.w	r3, r6, #461373440	; 0x1b800000
 8013902:	461a      	mov	r2, r3
 8013904:	f04f 33f5 	mov.w	r3, #4126537205	; 0xf5f5f5f5
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	6053      	str	r3, [r2, #4]
 801390c:	e005      	b.n	801391a <test+0x11ae>
 801390e:	f106 53dc 	add.w	r3, r6, #461373440	; 0x1b800000
 8013912:	461a      	mov	r2, r3
 8013914:	2300      	movs	r3, #0
 8013916:	6013      	str	r3, [r2, #0]
 8013918:	6053      	str	r3, [r2, #4]
}
 801391a:	4608      	mov	r0, r1
 801391c:	377c      	adds	r7, #124	; 0x7c
 801391e:	46bd      	mov	sp, r7
 8013920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013924:	45e0360e 	.word	0x45e0360e

08013928 <_sub_D_00099_0>:
 8013928:	b580      	push	{r7, lr}
 801392a:	af00      	add	r7, sp, #0
 801392c:	f7f6 fae2 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013930:	2101      	movs	r1, #1
 8013932:	4802      	ldr	r0, [pc, #8]	; (801393c <_sub_D_00099_0+0x14>)
 8013934:	f7f5 fe2d 	bl	8009592 <__asan_unregister_globals>
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	24008030 	.word	0x24008030

08013940 <_sub_I_00099_1>:
 8013940:	b580      	push	{r7, lr}
 8013942:	af00      	add	r7, sp, #0
 8013944:	f7f6 fad6 	bl	8009ef4 <__sanitizer_cov_trace_pc>
 8013948:	f7f5 fd1e 	bl	8009388 <__asan_init>
 801394c:	f7f5 fe1a 	bl	8009584 <__asan_version_mismatch_check_v8>
 8013950:	2101      	movs	r1, #1
 8013952:	4802      	ldr	r0, [pc, #8]	; (801395c <_sub_I_00099_1+0x1c>)
 8013954:	f7f5 fe24 	bl	80095a0 <__asan_register_globals>
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	24008030 	.word	0x24008030

08013960 <targetTask>:
}
#endif


static void targetTask( void * pvParameters )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af02      	add	r7, sp, #8
 8013966:	6078      	str	r0, [r7, #4]
	/* Unused parameters. */
	//( void ) pvParameters;

   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8013968:	4b33      	ldr	r3, [pc, #204]	; (8013a38 <targetTask+0xd8>)
 801396a:	60bb      	str	r3, [r7, #8]

    pointer = mallocMPU(32);

    */

    AFLfuzzer.xTypeEx = EX_NO_EX;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013972:	2200      	movs	r2, #0
 8013974:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8013978:	2201      	movs	r2, #1
 801397a:	2101      	movs	r1, #1
 801397c:	482f      	ldr	r0, [pc, #188]	; (8013a3c <targetTask+0xdc>)
 801397e:	f7f8 f991 	bl	800bca4 <HAL_GPIO_WritePin>
    uint8_t firstRun=1;
 8013982:	2301      	movs	r3, #1
 8013984:	73fb      	strb	r3, [r7, #15]

   	xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite); //notify the fuzzer task the target is ready
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801398c:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8013990:	2300      	movs	r3, #0
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	2303      	movs	r3, #3
 8013996:	2201      	movs	r2, #1
 8013998:	2102      	movs	r1, #2
 801399a:	f7f4 fce6 	bl	800836a <MPU_xTaskGenericNotify>
    for( ; ; )
	{

    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 801399e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139a2:	2101      	movs	r1, #1
 80139a4:	2000      	movs	r0, #0
 80139a6:	f7f4 fd17 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

    	if(firstRun)
 80139aa:	7bfb      	ldrb	r3, [r7, #15]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d01d      	beq.n	80139ec <targetTask+0x8c>
    	{
    		//AFLfuzzer.bRXcomplete = false;
    		//AFLfuzzer.inputLength = 0;
    		AFLfuzzer.previousGuard = 0;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80139b6:	2200      	movs	r2, #0
 80139b8:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
    		//RingZeroes(&AFLfuzzer.inputAFL);
    		memset(AFLfuzzer.aflbmp,0,AFL_BITMAP_SIZE*sizeof(uint16_t));
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80139c2:	2100      	movs	r1, #0
 80139c4:	4618      	mov	r0, r3
 80139c6:	f002 fde3 	bl	8016590 <memset>
    		memset(AFLfuzzer.afldiff,0, AFL_BITMAP_SIZE/4 *sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80139d4:	2100      	movs	r1, #0
 80139d6:	4618      	mov	r0, r3
 80139d8:	f002 fdda 	bl	8016590 <memset>
    		AFLfuzzer.indexdif = 0;
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80139e2:	2200      	movs	r2, #0
 80139e4:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
    		firstRun=0;
 80139e8:	2300      	movs	r3, #0
 80139ea:	73fb      	strb	r3, [r7, #15]
    	}

		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80139ec:	2200      	movs	r2, #0
 80139ee:	2101      	movs	r1, #1
 80139f0:	4812      	ldr	r0, [pc, #72]	; (8013a3c <targetTask+0xdc>)
 80139f2:	f7f8 f957 	bl	800bca4 <HAL_GPIO_WritePin>
		{
			printf("\\x\%02x",AFLfuzzer.inputAFL.uxBuffer[i+4]);
		}
		printf("\n");
		*/
		test(&AFLfuzzer.inputAFL.uxBuffer[4], AFLfuzzer.inputAFL.u32availablenopad-4 );
 80139f6:	68ba      	ldr	r2, [r7, #8]
 80139f8:	f246 0304 	movw	r3, #24580	; 0x6004
 80139fc:	4413      	add	r3, r2
 80139fe:	68ba      	ldr	r2, [r7, #8]
 8013a00:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8013a04:	f8d2 280c 	ldr.w	r2, [r2, #2060]	; 0x80c
 8013a08:	3a04      	subs	r2, #4
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fe fead 	bl	801276c <test>
		xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite);//notify that the test finished
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013a18:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	9300      	str	r3, [sp, #0]
 8013a20:	2303      	movs	r3, #3
 8013a22:	2208      	movs	r2, #8
 8013a24:	2100      	movs	r1, #0
 8013a26:	f7f4 fca0 	bl	800836a <MPU_xTaskGenericNotify>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	2101      	movs	r1, #1
 8013a2e:	4803      	ldr	r0, [pc, #12]	; (8013a3c <targetTask+0xdc>)
 8013a30:	f7f8 f938 	bl	800bca4 <HAL_GPIO_WritePin>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 8013a34:	e7b3      	b.n	801399e <targetTask+0x3e>
 8013a36:	bf00      	nop
 8013a38:	24020000 	.word	0x24020000
 8013a3c:	58020400 	.word	0x58020400

08013a40 <spawnNewTarget>:
}



static void spawnNewTarget( )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b0aa      	sub	sp, #168	; 0xa8
 8013a44:	af00      	add	r7, sp, #0
   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8013a46:	4b1d      	ldr	r3, [pc, #116]	; (8013abc <spawnNewTarget+0x7c>)
 8013a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   #endif

   TaskParameters_t targetTaskParameters =
 8013a4c:	1d3b      	adds	r3, r7, #4
 8013a4e:	22a0      	movs	r2, #160	; 0xa0
 8013a50:	2100      	movs	r1, #0
 8013a52:	4618      	mov	r0, r3
 8013a54:	f002 fd9c 	bl	8016590 <memset>
 8013a58:	4b19      	ldr	r3, [pc, #100]	; (8013ac0 <spawnNewTarget+0x80>)
 8013a5a:	607b      	str	r3, [r7, #4]
 8013a5c:	4b19      	ldr	r3, [pc, #100]	; (8013ac4 <spawnNewTarget+0x84>)
 8013a5e:	60bb      	str	r3, [r7, #8]
 8013a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a64:	81bb      	strh	r3, [r7, #12]
 8013a66:	2314      	movs	r3, #20
 8013a68:	617b      	str	r3, [r7, #20]
 8013a6a:	4b17      	ldr	r3, [pc, #92]	; (8013ac8 <spawnNewTarget+0x88>)
 8013a6c:	61bb      	str	r3, [r7, #24]
 8013a6e:	4b13      	ldr	r3, [pc, #76]	; (8013abc <spawnNewTarget+0x7c>)
 8013a70:	61fb      	str	r3, [r7, #28]
 8013a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013a76:	623b      	str	r3, [r7, #32]
 8013a78:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8013a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8013a7e:	4b13      	ldr	r3, [pc, #76]	; (8013acc <spawnNewTarget+0x8c>)
 8013a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a88:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8013a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8013a8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8013a92:	637b      	str	r3, [r7, #52]	; 0x34
 8013a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a9a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8013a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        						 }
   };


   //create a new task
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8013aa0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013aa4:	f646 0370 	movw	r3, #26736	; 0x6870
 8013aa8:	4413      	add	r3, r2
 8013aaa:	1d3a      	adds	r2, r7, #4
 8013aac:	4619      	mov	r1, r3
 8013aae:	4610      	mov	r0, r2
 8013ab0:	f7ef fba5 	bl	80031fe <xTaskCreateRestricted>



}
 8013ab4:	bf00      	nop
 8013ab6:	37a8      	adds	r7, #168	; 0xa8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	24020000 	.word	0x24020000
 8013ac0:	08013961 	.word	0x08013961
 8013ac4:	240083f0 	.word	0x240083f0
 8013ac8:	24031000 	.word	0x24031000
 8013acc:	24036000 	.word	0x24036000

08013ad0 <fuzzerTask>:

uint16_t *indexdifP;
uint8_t  bufferDMA[550];
static void fuzzerTask( void * pvParameters )
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b090      	sub	sp, #64	; 0x40
 8013ad4:	af02      	add	r7, sp, #8
 8013ad6:	6078      	str	r0, [r7, #4]
	int i;


    #if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8013ad8:	4b78      	ldr	r3, [pc, #480]	; (8013cbc <fuzzerTask+0x1ec>)
 8013ada:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8013adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24
    #endif

    indexdifP = &AFLfuzzer.indexdif;
 8013ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ae2:	f646 0362 	movw	r3, #26722	; 0x6862
 8013ae6:	4413      	add	r3, r2
 8013ae8:	4a75      	ldr	r2, [pc, #468]	; (8013cc0 <fuzzerTask+0x1f0>)
 8013aea:	6013      	str	r3, [r2, #0]

    		   AFLfuzzer.receiving = false;
	           HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
	           //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
    #endif
	MX_USB_DEVICE_Init();
 8013aec:	f001 fe90 	bl	8015810 <MX_USB_DEVICE_Init>
	error_cnt = 0;
 8013af0:	4b74      	ldr	r3, [pc, #464]	; (8013cc4 <fuzzerTask+0x1f4>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	601a      	str	r2, [r3, #0]
	 * 1: Notification from USB USART driver to the fuzzer task when data has arrived
	 * 2: Notification from target to fuzzer to signal readiness to execute the test
	 * ********/

	/**Lets poison the AFLfuzzer structure**/
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 8013af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af8:	08db      	lsrs	r3, r3, #3
 8013afa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013afe:	623b      	str	r3, [r7, #32]
	uint32_t HelperShadowSize = AFLINPUTREGION_SIZE>>3;
 8013b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b04:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 8013b06:	69fa      	ldr	r2, [r7, #28]
 8013b08:	21ff      	movs	r1, #255	; 0xff
 8013b0a:	6a38      	ldr	r0, [r7, #32]
 8013b0c:	f002 fd40 	bl	8016590 <memset>
	// the only section that should be accessible by the target is the input buffer, so lets un-poison it
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013b16:	08db      	lsrs	r3, r3, #3
 8013b18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013b1c:	623b      	str	r3, [r7, #32]
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
 8013b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b22:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 8013b24:	69fa      	ldr	r2, [r7, #28]
 8013b26:	2100      	movs	r1, #0
 8013b28:	6a38      	ldr	r0, [r7, #32]
 8013b2a:	f002 fd31 	bl	8016590 <memset>


	numberofcycles = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	637b      	str	r3, [r7, #52]	; 0x34
	spawnNewTarget();
 8013b32:	f7ff ff85 	bl	8013a40 <spawnNewTarget>
	// wait for the target task notification when ready
	ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8013b36:	220a      	movs	r2, #10
 8013b38:	2101      	movs	r1, #1
 8013b3a:	2002      	movs	r0, #2
 8013b3c:	f7f4 fc4c 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

	for( ; ; )
	{

		// we will wait for a notification on index 1 when fuzzing data has arrived
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8013b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b44:	2101      	movs	r1, #1
 8013b46:	2001      	movs	r0, #1
 8013b48:	f7f4 fc46 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
		{

			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 8013b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013b52:	f8d3 0870 	ldr.w	r0, [r3, #2160]	; 0x870
 8013b56:	2300      	movs	r3, #0
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	2303      	movs	r3, #3
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	2100      	movs	r1, #0
 8013b60:	f7f4 fc03 	bl	800836a <MPU_xTaskGenericNotify>

			 //we will wait on Index 0 for notification from target task when testing finished
			 notificationvalue = ulTaskNotifyTakeIndexed(0,pdTRUE, TARGET_TIMEOUT);
 8013b64:	2214      	movs	r2, #20
 8013b66:	2101      	movs	r1, #1
 8013b68:	2000      	movs	r0, #0
 8013b6a:	f7f4 fc35 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8013b6e:	61b8      	str	r0, [r7, #24]

			 if (notificationvalue == 0) // TIMEOUT
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d11c      	bne.n	8013bb0 <fuzzerTask+0xe0>
			 {
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	2301      	movs	r3, #1
 8013b80:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("Target timeout, starting a new target process...\n");
 8013b84:	4850      	ldr	r0, [pc, #320]	; (8013cc8 <fuzzerTask+0x1f8>)
 8013b86:	f002 fe71 	bl	801686c <puts>
			     //We need to kill the target task and spawn a new target
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 8013b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013b90:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f4 fabf 	bl	8008118 <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 8013b9a:	df01      	svc	1
				 numberofcycles = 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 8013ba0:	f7ff ff4e 	bl	8013a40 <spawnNewTarget>
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8013ba4:	220a      	movs	r2, #10
 8013ba6:	2101      	movs	r1, #1
 8013ba8:	2002      	movs	r0, #2
 8013baa:	f7f4 fc15 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8013bae:	e0bc      	b.n	8013d2a <fuzzerTask+0x25a>


			 }
			 else if(notificationvalue == FAULT_ASAN)
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	2b09      	cmp	r3, #9
 8013bb4:	d142      	bne.n	8013c3c <fuzzerTask+0x16c>
			 {

				 i= 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 8013bba:	e015      	b.n	8013be8 <fuzzerTask+0x118>
				 {
					 if(AFLfuzzer.allocs[i])
 8013bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013bc0:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8013bc4:	440b      	add	r3, r1
 8013bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d009      	beq.n	8013be2 <fuzzerTask+0x112>
				     {
						 free(AFLfuzzer.allocs[i]);
 8013bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013bd2:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8013bd6:	440b      	add	r3, r1
 8013bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f002 fcc1 	bl	8016564 <free>
					 }
					 i++;
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	3301      	adds	r3, #1
 8013be6:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 8013be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bea:	2b09      	cmp	r3, #9
 8013bec:	dde6      	ble.n	8013bbc <fuzzerTask+0xec>
				  }
				  notificationvalue = FAULT_CRASH;
 8013bee:	2302      	movs	r3, #2
 8013bf0:	61bb      	str	r3, [r7, #24]
				  AFLfuzzer.aflheader[0] = notificationvalue;
 8013bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 8013c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c06:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	4b2f      	ldr	r3, [pc, #188]	; (8013ccc <fuzzerTask+0x1fc>)
 8013c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c12:	4619      	mov	r1, r3
 8013c14:	482e      	ldr	r0, [pc, #184]	; (8013cd0 <fuzzerTask+0x200>)
 8013c16:	f002 fda3 	bl	8016760 <iprintf>
				  vTaskDelete(AFLfuzzer.xTaskTarget);
 8013c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c20:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f4 fa77 	bl	8008118 <MPU_vTaskDelete>
				  taskYIELD();
 8013c2a:	df01      	svc	1
 				  spawnNewTarget();
 8013c2c:	f7ff ff08 	bl	8013a40 <spawnNewTarget>
 				  ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8013c30:	220a      	movs	r2, #10
 8013c32:	2101      	movs	r1, #1
 8013c34:	2002      	movs	r0, #2
 8013c36:	f7f4 fbcf 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8013c3a:	e076      	b.n	8013d2a <fuzzerTask+0x25a>
			 }
			 else if(notificationvalue == FAULT_CRASH)
 8013c3c:	69bb      	ldr	r3, [r7, #24]
 8013c3e:	2b02      	cmp	r3, #2
 8013c40:	d123      	bne.n	8013c8a <fuzzerTask+0x1ba>
			 {
				 AFLfuzzer.aflheader[0] = notificationvalue;
 8013c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c44:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c48:	461a      	mov	r2, r3
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 8013c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c56:	f8d3 1868 	ldr.w	r1, [r3, #2152]	; 0x868
 8013c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c60:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 8013c64:	461a      	mov	r2, r3
 8013c66:	4b19      	ldr	r3, [pc, #100]	; (8013ccc <fuzzerTask+0x1fc>)
 8013c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	4819      	ldr	r0, [pc, #100]	; (8013cd4 <fuzzerTask+0x204>)
 8013c70:	f002 fd76 	bl	8016760 <iprintf>
				 //The target process was already killed in the Fault Handler ISR,
				 //We need to spawn a new target task
				 numberofcycles = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 8013c78:	f7ff fee2 	bl	8013a40 <spawnNewTarget>
				 taskYIELD(); // let's the kernel clean the TCB
 8013c7c:	df01      	svc	1
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8013c7e:	220a      	movs	r2, #10
 8013c80:	2101      	movs	r1, #1
 8013c82:	2002      	movs	r0, #2
 8013c84:	f7f4 fba8 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8013c88:	e04f      	b.n	8013d2a <fuzzerTask+0x25a>

			 }
			 else if (notificationvalue == FAULT_NONE_RTOS)
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	2b08      	cmp	r3, #8
 8013c8e:	d14c      	bne.n	8013d2a <fuzzerTask+0x25a>
			 {
				 // we need this because 0 means timeout for the RTOS notification system
				notificationvalue = FAULT_NONE;
 8013c90:	2300      	movs	r3, #0
 8013c92:	61bb      	str	r3, [r7, #24]
				AFLfuzzer.aflheader[0] = notificationvalue;
 8013c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814

#if PERSISTENT_MODE
				numberofcycles++;
 8013ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	637b      	str	r3, [r7, #52]	; 0x34
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS)
 8013ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013cae:	d33c      	bcc.n	8013d2a <fuzzerTask+0x25a>
				{
					numberofcycles=0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
					i = 0;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	633b      	str	r3, [r7, #48]	; 0x30

					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8013cb8:	e024      	b.n	8013d04 <fuzzerTask+0x234>
 8013cba:	bf00      	nop
 8013cbc:	24020000 	.word	0x24020000
 8013cc0:	24033000 	.word	0x24033000
 8013cc4:	24030064 	.word	0x24030064
 8013cc8:	240083f8 	.word	0x240083f8
 8013ccc:	24008050 	.word	0x24008050
 8013cd0:	2400842c 	.word	0x2400842c
 8013cd4:	24008440 	.word	0x24008440
					{
						 if(AFLfuzzer.allocs[i])
 8013cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013cdc:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8013ce0:	440b      	add	r3, r1
 8013ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d009      	beq.n	8013cfe <fuzzerTask+0x22e>
						 {
							 free(AFLfuzzer.allocs[i]);
 8013cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013cee:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8013cf2:	440b      	add	r3, r1
 8013cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f002 fc33 	bl	8016564 <free>
						 }
							 i++;
 8013cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d00:	3301      	adds	r3, #1
 8013d02:	633b      	str	r3, [r7, #48]	; 0x30
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8013d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d06:	2b09      	cmp	r3, #9
 8013d08:	dde6      	ble.n	8013cd8 <fuzzerTask+0x208>
					}
					vTaskDelete(AFLfuzzer.xTaskTarget);
 8013d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013d10:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7f4 f9ff 	bl	8008118 <MPU_vTaskDelete>
				    taskYIELD();
 8013d1a:	df01      	svc	1
					spawnNewTarget();
 8013d1c:	f7ff fe90 	bl	8013a40 <spawnNewTarget>
					ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8013d20:	220a      	movs	r2, #10
 8013d22:	2101      	movs	r1, #1
 8013d24:	2002      	movs	r0, #2
 8013d26:	f7f4 fb57 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
				}
#endif

			 }

			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 8013d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013d30:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8013d34:	3301      	adds	r3, #1
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8013d3e:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818

			 tuple_t *auxdiff = AFLfuzzer.afldiff + 1; // the first tuple is empty so we can skip it
 8013d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d48:	3304      	adds	r3, #4
 8013d4a:	617b      	str	r3, [r7, #20]
			 union ubytes_t *crcbytes;
			 crcbytes = (union ubytes_t *)(auxdiff + AFLfuzzer.indexdif); //set CRC bytes * at the end of the tuple array
 8013d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013d52:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	697a      	ldr	r2, [r7, #20]
 8013d5a:	4413      	add	r3, r2
 8013d5c:	613b      	str	r3, [r7, #16]

			 //calculate the CRC of the return value and payload size
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 8013d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d60:	f646 0314 	movw	r3, #26644	; 0x6814
 8013d64:	4413      	add	r3, r2
 8013d66:	2202      	movs	r2, #2
 8013d68:	4619      	mov	r1, r3
 8013d6a:	4848      	ldr	r0, [pc, #288]	; (8013e8c <fuzzerTask+0x3bc>)
 8013d6c:	f7f7 fc50 	bl	800b610 <HAL_CRC_Calculate>
 8013d70:	60f8      	str	r0, [r7, #12]
			 //calculate the CRC of the tuples (payload)
			 uwCRCValue = HAL_CRC_Accumulate(&hcrc, (uint32_t *)auxdiff, AFLfuzzer.indexdif);
 8013d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d74:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013d78:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	6979      	ldr	r1, [r7, #20]
 8013d80:	4842      	ldr	r0, [pc, #264]	; (8013e8c <fuzzerTask+0x3bc>)
 8013d82:	f7f7 fc01 	bl	800b588 <HAL_CRC_Accumulate>
 8013d86:	60f8      	str	r0, [r7, #12]

			 // invert the CRC to match the zlib method
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	43da      	mvns	r2, r3
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	601a      	str	r2, [r3, #0]

			 AFLfuzzer.bTXcomplete = false;
 8013d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013d96:	2200      	movs	r2, #0
 8013d98:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865

			 #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 8013d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d9e:	f646 0314 	movw	r3, #26644	; 0x6814
 8013da2:	4413      	add	r3, r2
 8013da4:	2108      	movs	r1, #8
 8013da6:	4618      	mov	r0, r3
 8013da8:	f001 fdf6 	bl	8015998 <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)AFLfuzzer.aflheader, 8);
			 //HAL_UART_Transmit_DMA(&huart3,(uint8_t *)AFLfuzzer.aflheader, 8);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8013dac:	220a      	movs	r2, #10
 8013dae:	2101      	movs	r1, #1
 8013db0:	2001      	movs	r0, #1
 8013db2:	f7f4 fb11 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

			 AFLfuzzer.bTXcomplete = false;
 8013db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
             #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 8013dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013dc8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	4619      	mov	r1, r3
 8013dd0:	6978      	ldr	r0, [r7, #20]
 8013dd2:	f001 fde1 	bl	8015998 <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
			 //HAL_UART_Transmit_DMA(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8013dd6:	220a      	movs	r2, #10
 8013dd8:	2101      	movs	r1, #1
 8013dda:	2001      	movs	r0, #1
 8013ddc:	f7f4 fafc 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bRXcomplete = false;
 8013de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013de6:	2200      	movs	r2, #0
 8013de8:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 8013dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013df2:	461a      	mov	r2, r3
 8013df4:	2300      	movs	r3, #0
 8013df6:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
			 AFLfuzzer.previousGuard = 0;
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e00:	2200      	movs	r2, #0
 8013e02:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
			 RingZeroes(&AFLfuzzer.inputAFL);
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f6 fc8c 	bl	800a72a <RingZeroes>

			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8013e12:	2300      	movs	r3, #0
 8013e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e16:	e00c      	b.n	8013e32 <fuzzerTask+0x362>
			 {
				 paflbitmap[auxdiff[i].index]=0;
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	009b      	lsls	r3, r3, #2
 8013e1c:	697a      	ldr	r2, [r7, #20]
 8013e1e:	4413      	add	r3, r2
 8013e20:	881b      	ldrh	r3, [r3, #0]
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e26:	4413      	add	r3, r2
 8013e28:	2200      	movs	r2, #0
 8013e2a:	801a      	strh	r2, [r3, #0]
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8013e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2e:	3301      	adds	r3, #1
 8013e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e38:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d3e9      	bcc.n	8013e18 <fuzzerTask+0x348>
			 }
			 memset(AFLfuzzer.afldiff,0,(AFLfuzzer.indexdif+2)*sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 8013e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e46:	f503 4080 	add.w	r0, r3, #16384	; 0x4000
 8013e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e50:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8013e54:	3302      	adds	r3, #2
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	461a      	mov	r2, r3
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	f002 fb98 	bl	8016590 <memset>
			 AFLfuzzer.indexdif = 0;
 8013e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e66:	2200      	movs	r2, #0
 8013e68:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
			 AFLfuzzer.timespan = HAL_GetTick() - AFLfuzzer.timespan;
 8013e6c:	f7f7 fa0c 	bl	800b288 <HAL_GetTick>
 8013e70:	4602      	mov	r2, r0
 8013e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e74:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8013e78:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
 8013e7c:	1ad3      	subs	r3, r2, r3
 8013e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e80:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8013e84:	f8c2 382c 	str.w	r3, [r2, #2092]	; 0x82c
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8013e88:	e65a      	b.n	8013b40 <fuzzerTask+0x70>
 8013e8a:	bf00      	nop
 8013e8c:	240116ac 	.word	0x240116ac

08013e90 <vStartMPUDemo>:
}



void vStartMPUDemo( void )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b0aa      	sub	sp, #168	; 0xa8
 8013e94:	af00      	add	r7, sp, #0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8013e96:	4b11      	ldr	r3, [pc, #68]	; (8013edc <vStartMPUDemo+0x4c>)
 8013e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

TaskParameters_t fuzzerTaskParameters =
 8013e9c:	1d3b      	adds	r3, r7, #4
 8013e9e:	22a0      	movs	r2, #160	; 0xa0
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f002 fb74 	bl	8016590 <memset>
 8013ea8:	4b0d      	ldr	r3, [pc, #52]	; (8013ee0 <vStartMPUDemo+0x50>)
 8013eaa:	607b      	str	r3, [r7, #4]
 8013eac:	4b0d      	ldr	r3, [pc, #52]	; (8013ee4 <vStartMPUDemo+0x54>)
 8013eae:	60bb      	str	r3, [r7, #8]
 8013eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eb4:	81bb      	strh	r3, [r7, #12]
 8013eb6:	4b0c      	ldr	r3, [pc, #48]	; (8013ee8 <vStartMPUDemo+0x58>)
 8013eb8:	617b      	str	r3, [r7, #20]
 8013eba:	4b0c      	ldr	r3, [pc, #48]	; (8013eec <vStartMPUDemo+0x5c>)
 8013ebc:	61bb      	str	r3, [r7, #24]
							{ 0, 0, 0 },
					}
};

	/* Create the fuzzer task */
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 8013ebe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ec2:	f646 036c 	movw	r3, #26732	; 0x686c
 8013ec6:	4413      	add	r3, r2
 8013ec8:	1d3a      	adds	r2, r7, #4
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4610      	mov	r0, r2
 8013ece:	f7ef f996 	bl	80031fe <xTaskCreateRestricted>
	//spawnNewTarget();

}
 8013ed2:	bf00      	nop
 8013ed4:	37a8      	adds	r7, #168	; 0xa8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	24020000 	.word	0x24020000
 8013ee0:	08013ad1 	.word	0x08013ad1
 8013ee4:	24008458 	.word	0x24008458
 8013ee8:	80000014 	.word	0x80000014
 8013eec:	24032000 	.word	0x24032000

08013ef0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013efc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013f00:	f002 f9b6 	bl	8016270 <USBD_static_malloc>
 8013f04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d105      	bne.n	8013f18 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013f14:	2302      	movs	r3, #2
 8013f16:	e066      	b.n	8013fe6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	68fa      	ldr	r2, [r7, #12]
 8013f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	7c1b      	ldrb	r3, [r3, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d119      	bne.n	8013f5c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f2c:	2202      	movs	r2, #2
 8013f2e:	2181      	movs	r1, #129	; 0x81
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f002 f87a 	bl	801602a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f40:	2202      	movs	r2, #2
 8013f42:	2101      	movs	r1, #1
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f002 f870 	bl	801602a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2210      	movs	r2, #16
 8013f56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013f5a:	e016      	b.n	8013f8a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013f5c:	2340      	movs	r3, #64	; 0x40
 8013f5e:	2202      	movs	r2, #2
 8013f60:	2181      	movs	r1, #129	; 0x81
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f002 f861 	bl	801602a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013f6e:	2340      	movs	r3, #64	; 0x40
 8013f70:	2202      	movs	r2, #2
 8013f72:	2101      	movs	r1, #1
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f002 f858 	bl	801602a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2210      	movs	r2, #16
 8013f86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013f8a:	2308      	movs	r3, #8
 8013f8c:	2203      	movs	r2, #3
 8013f8e:	2182      	movs	r1, #130	; 0x82
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f002 f84a 	bl	801602a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	7c1b      	ldrb	r3, [r3, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d109      	bne.n	8013fd4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fca:	2101      	movs	r1, #1
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f002 f91b 	bl	8016208 <USBD_LL_PrepareReceive>
 8013fd2:	e007      	b.n	8013fe4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013fda:	2340      	movs	r3, #64	; 0x40
 8013fdc:	2101      	movs	r1, #1
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f002 f912 	bl	8016208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3710      	adds	r7, #16
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}

08013fee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013ffa:	2181      	movs	r1, #129	; 0x81
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f002 f83a 	bl	8016076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014008:	2101      	movs	r1, #1
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f002 f833 	bl	8016076 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2200      	movs	r2, #0
 8014014:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014018:	2182      	movs	r1, #130	; 0x82
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f002 f82b 	bl	8016076 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2200      	movs	r2, #0
 8014024:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2200      	movs	r2, #0
 801402c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00e      	beq.n	8014058 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801404a:	4618      	mov	r0, r3
 801404c:	f002 f91e 	bl	801628c <USBD_static_free>
    pdev->pClassData = NULL;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2200      	movs	r2, #0
 8014054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
	...

08014064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b086      	sub	sp, #24
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014074:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014076:	2300      	movs	r3, #0
 8014078:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801407a:	2300      	movs	r3, #0
 801407c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801407e:	2300      	movs	r3, #0
 8014080:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d101      	bne.n	801408c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014088:	2303      	movs	r3, #3
 801408a:	e0af      	b.n	80141ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014094:	2b00      	cmp	r3, #0
 8014096:	d03f      	beq.n	8014118 <USBD_CDC_Setup+0xb4>
 8014098:	2b20      	cmp	r3, #32
 801409a:	f040 809f 	bne.w	80141dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	88db      	ldrh	r3, [r3, #6]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d02e      	beq.n	8014104 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	b25b      	sxtb	r3, r3
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	da16      	bge.n	80140de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80140bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	88d2      	ldrh	r2, [r2, #6]
 80140c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	88db      	ldrh	r3, [r3, #6]
 80140c8:	2b07      	cmp	r3, #7
 80140ca:	bf28      	it	cs
 80140cc:	2307      	movcs	r3, #7
 80140ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	89fa      	ldrh	r2, [r7, #14]
 80140d4:	4619      	mov	r1, r3
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f001 fb19 	bl	801570e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80140dc:	e085      	b.n	80141ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	785a      	ldrb	r2, [r3, #1]
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	88db      	ldrh	r3, [r3, #6]
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80140f4:	6939      	ldr	r1, [r7, #16]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	88db      	ldrh	r3, [r3, #6]
 80140fa:	461a      	mov	r2, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f001 fb32 	bl	8015766 <USBD_CtlPrepareRx>
      break;
 8014102:	e072      	b.n	80141ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801410a:	689b      	ldr	r3, [r3, #8]
 801410c:	683a      	ldr	r2, [r7, #0]
 801410e:	7850      	ldrb	r0, [r2, #1]
 8014110:	2200      	movs	r2, #0
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	4798      	blx	r3
      break;
 8014116:	e068      	b.n	80141ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	785b      	ldrb	r3, [r3, #1]
 801411c:	2b0b      	cmp	r3, #11
 801411e:	d852      	bhi.n	80141c6 <USBD_CDC_Setup+0x162>
 8014120:	a201      	add	r2, pc, #4	; (adr r2, 8014128 <USBD_CDC_Setup+0xc4>)
 8014122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014126:	bf00      	nop
 8014128:	08014159 	.word	0x08014159
 801412c:	080141d5 	.word	0x080141d5
 8014130:	080141c7 	.word	0x080141c7
 8014134:	080141c7 	.word	0x080141c7
 8014138:	080141c7 	.word	0x080141c7
 801413c:	080141c7 	.word	0x080141c7
 8014140:	080141c7 	.word	0x080141c7
 8014144:	080141c7 	.word	0x080141c7
 8014148:	080141c7 	.word	0x080141c7
 801414c:	080141c7 	.word	0x080141c7
 8014150:	08014183 	.word	0x08014183
 8014154:	080141ad 	.word	0x080141ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801415e:	b2db      	uxtb	r3, r3
 8014160:	2b03      	cmp	r3, #3
 8014162:	d107      	bne.n	8014174 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014164:	f107 030a 	add.w	r3, r7, #10
 8014168:	2202      	movs	r2, #2
 801416a:	4619      	mov	r1, r3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f001 face 	bl	801570e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014172:	e032      	b.n	80141da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014174:	6839      	ldr	r1, [r7, #0]
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f001 fa58 	bl	801562c <USBD_CtlError>
            ret = USBD_FAIL;
 801417c:	2303      	movs	r3, #3
 801417e:	75fb      	strb	r3, [r7, #23]
          break;
 8014180:	e02b      	b.n	80141da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014188:	b2db      	uxtb	r3, r3
 801418a:	2b03      	cmp	r3, #3
 801418c:	d107      	bne.n	801419e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801418e:	f107 030d 	add.w	r3, r7, #13
 8014192:	2201      	movs	r2, #1
 8014194:	4619      	mov	r1, r3
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f001 fab9 	bl	801570e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801419c:	e01d      	b.n	80141da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801419e:	6839      	ldr	r1, [r7, #0]
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f001 fa43 	bl	801562c <USBD_CtlError>
            ret = USBD_FAIL;
 80141a6:	2303      	movs	r3, #3
 80141a8:	75fb      	strb	r3, [r7, #23]
          break;
 80141aa:	e016      	b.n	80141da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	2b03      	cmp	r3, #3
 80141b6:	d00f      	beq.n	80141d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80141b8:	6839      	ldr	r1, [r7, #0]
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f001 fa36 	bl	801562c <USBD_CtlError>
            ret = USBD_FAIL;
 80141c0:	2303      	movs	r3, #3
 80141c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80141c4:	e008      	b.n	80141d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80141c6:	6839      	ldr	r1, [r7, #0]
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f001 fa2f 	bl	801562c <USBD_CtlError>
          ret = USBD_FAIL;
 80141ce:	2303      	movs	r3, #3
 80141d0:	75fb      	strb	r3, [r7, #23]
          break;
 80141d2:	e002      	b.n	80141da <USBD_CDC_Setup+0x176>
          break;
 80141d4:	bf00      	nop
 80141d6:	e008      	b.n	80141ea <USBD_CDC_Setup+0x186>
          break;
 80141d8:	bf00      	nop
      }
      break;
 80141da:	e006      	b.n	80141ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80141dc:	6839      	ldr	r1, [r7, #0]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f001 fa24 	bl	801562c <USBD_CtlError>
      ret = USBD_FAIL;
 80141e4:	2303      	movs	r3, #3
 80141e6:	75fb      	strb	r3, [r7, #23]
      break;
 80141e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80141ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3718      	adds	r7, #24
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	460b      	mov	r3, r1
 80141fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801420e:	2b00      	cmp	r3, #0
 8014210:	d101      	bne.n	8014216 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014212:	2303      	movs	r3, #3
 8014214:	e04f      	b.n	80142b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801421c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801421e:	78fa      	ldrb	r2, [r7, #3]
 8014220:	6879      	ldr	r1, [r7, #4]
 8014222:	4613      	mov	r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	4413      	add	r3, r2
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	440b      	add	r3, r1
 801422c:	3318      	adds	r3, #24
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d029      	beq.n	8014288 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014234:	78fa      	ldrb	r2, [r7, #3]
 8014236:	6879      	ldr	r1, [r7, #4]
 8014238:	4613      	mov	r3, r2
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4413      	add	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	440b      	add	r3, r1
 8014242:	3318      	adds	r3, #24
 8014244:	681a      	ldr	r2, [r3, #0]
 8014246:	78f9      	ldrb	r1, [r7, #3]
 8014248:	68f8      	ldr	r0, [r7, #12]
 801424a:	460b      	mov	r3, r1
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	1a5b      	subs	r3, r3, r1
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	4403      	add	r3, r0
 8014254:	3344      	adds	r3, #68	; 0x44
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	fbb2 f1f3 	udiv	r1, r2, r3
 801425c:	fb01 f303 	mul.w	r3, r1, r3
 8014260:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014262:	2b00      	cmp	r3, #0
 8014264:	d110      	bne.n	8014288 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014266:	78fa      	ldrb	r2, [r7, #3]
 8014268:	6879      	ldr	r1, [r7, #4]
 801426a:	4613      	mov	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	4413      	add	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	440b      	add	r3, r1
 8014274:	3318      	adds	r3, #24
 8014276:	2200      	movs	r2, #0
 8014278:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801427a:	78f9      	ldrb	r1, [r7, #3]
 801427c:	2300      	movs	r3, #0
 801427e:	2200      	movs	r2, #0
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f001 ffa0 	bl	80161c6 <USBD_LL_Transmit>
 8014286:	e015      	b.n	80142b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	2200      	movs	r2, #0
 801428c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014296:	691b      	ldr	r3, [r3, #16]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00b      	beq.n	80142b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142a2:	691b      	ldr	r3, [r3, #16]
 80142a4:	68ba      	ldr	r2, [r7, #8]
 80142a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80142aa:	68ba      	ldr	r2, [r7, #8]
 80142ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80142b0:	78fa      	ldrb	r2, [r7, #3]
 80142b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3710      	adds	r7, #16
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b084      	sub	sp, #16
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	460b      	mov	r3, r1
 80142c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d101      	bne.n	80142e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80142dc:	2303      	movs	r3, #3
 80142de:	e015      	b.n	801430c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80142e0:	78fb      	ldrb	r3, [r7, #3]
 80142e2:	4619      	mov	r1, r3
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f001 ffb0 	bl	801624a <USBD_LL_GetRxDataSize>
 80142ea:	4602      	mov	r2, r0
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	68fa      	ldr	r2, [r7, #12]
 80142fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014300:	68fa      	ldr	r2, [r7, #12]
 8014302:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014306:	4611      	mov	r1, r2
 8014308:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801430a:	2300      	movs	r3, #0
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014322:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d101      	bne.n	801432e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801432a:	2303      	movs	r3, #3
 801432c:	e01b      	b.n	8014366 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d015      	beq.n	8014364 <USBD_CDC_EP0_RxReady+0x50>
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801433e:	2bff      	cmp	r3, #255	; 0xff
 8014340:	d010      	beq.n	8014364 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	68fa      	ldr	r2, [r7, #12]
 801434c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014350:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014352:	68fa      	ldr	r2, [r7, #12]
 8014354:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014358:	b292      	uxth	r2, r2
 801435a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	22ff      	movs	r2, #255	; 0xff
 8014360:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014364:	2300      	movs	r3, #0
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
	...

08014370 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2243      	movs	r2, #67	; 0x43
 801437c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801437e:	4b03      	ldr	r3, [pc, #12]	; (801438c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014380:	4618      	mov	r0, r3
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	24008110 	.word	0x24008110

08014390 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2243      	movs	r2, #67	; 0x43
 801439c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801439e:	4b03      	ldr	r3, [pc, #12]	; (80143ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr
 80143ac:	240080cc 	.word	0x240080cc

080143b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2243      	movs	r2, #67	; 0x43
 80143bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80143be:	4b03      	ldr	r3, [pc, #12]	; (80143cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	370c      	adds	r7, #12
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr
 80143cc:	24008154 	.word	0x24008154

080143d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	220a      	movs	r2, #10
 80143dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80143de:	4b03      	ldr	r3, [pc, #12]	; (80143ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr
 80143ec:	24008088 	.word	0x24008088

080143f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d101      	bne.n	8014404 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014400:	2303      	movs	r3, #3
 8014402:	e004      	b.n	801440e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801440c:	2300      	movs	r3, #0
}
 801440e:	4618      	mov	r0, r3
 8014410:	370c      	adds	r7, #12
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr

0801441a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801441a:	b480      	push	{r7}
 801441c:	b087      	sub	sp, #28
 801441e:	af00      	add	r7, sp, #0
 8014420:	60f8      	str	r0, [r7, #12]
 8014422:	60b9      	str	r1, [r7, #8]
 8014424:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801442c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d101      	bne.n	8014438 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014434:	2303      	movs	r3, #3
 8014436:	e008      	b.n	801444a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	68ba      	ldr	r2, [r7, #8]
 801443c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014448:	2300      	movs	r3, #0
}
 801444a:	4618      	mov	r0, r3
 801444c:	371c      	adds	r7, #28
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014456:	b480      	push	{r7}
 8014458:	b085      	sub	sp, #20
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
 801445e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014466:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d101      	bne.n	8014472 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801446e:	2303      	movs	r3, #3
 8014470:	e004      	b.n	801447c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801447a:	2300      	movs	r3, #0
}
 801447c:	4618      	mov	r0, r3
 801447e:	3714      	adds	r7, #20
 8014480:	46bd      	mov	sp, r7
 8014482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014486:	4770      	bx	lr

08014488 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014496:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014498:	2301      	movs	r3, #1
 801449a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d101      	bne.n	80144aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80144a6:	2303      	movs	r3, #3
 80144a8:	e01a      	b.n	80144e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d114      	bne.n	80144de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	2201      	movs	r2, #1
 80144b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80144d2:	2181      	movs	r1, #129	; 0x81
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f001 fe76 	bl	80161c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80144da:	2300      	movs	r3, #0
 80144dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80144de:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d101      	bne.n	8014506 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014502:	2303      	movs	r3, #3
 8014504:	e016      	b.n	8014534 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	7c1b      	ldrb	r3, [r3, #16]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d109      	bne.n	8014522 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014518:	2101      	movs	r1, #1
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f001 fe74 	bl	8016208 <USBD_LL_PrepareReceive>
 8014520:	e007      	b.n	8014532 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014528:	2340      	movs	r3, #64	; 0x40
 801452a:	2101      	movs	r1, #1
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f001 fe6b 	bl	8016208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014532:	2300      	movs	r3, #0
}
 8014534:	4618      	mov	r0, r3
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b086      	sub	sp, #24
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	4613      	mov	r3, r2
 8014548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d101      	bne.n	8014554 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014550:	2303      	movs	r3, #3
 8014552:	e01f      	b.n	8014594 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2200      	movs	r2, #0
 8014558:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2200      	movs	r2, #0
 8014560:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2200      	movs	r2, #0
 8014568:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	68ba      	ldr	r2, [r7, #8]
 8014576:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2201      	movs	r2, #1
 801457e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	79fa      	ldrb	r2, [r7, #7]
 8014586:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f001 fce3 	bl	8015f54 <USBD_LL_Init>
 801458e:	4603      	mov	r3, r0
 8014590:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014592:	7dfb      	ldrb	r3, [r7, #23]
}
 8014594:	4618      	mov	r0, r3
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80145a6:	2300      	movs	r3, #0
 80145a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d101      	bne.n	80145b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80145b0:	2303      	movs	r3, #3
 80145b2:	e016      	b.n	80145e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	683a      	ldr	r2, [r7, #0]
 80145b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d00b      	beq.n	80145e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d0:	f107 020e 	add.w	r2, r7, #14
 80145d4:	4610      	mov	r0, r2
 80145d6:	4798      	blx	r3
 80145d8:	4602      	mov	r2, r0
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80145e0:	2300      	movs	r3, #0
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b082      	sub	sp, #8
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f001 fcfe 	bl	8015ff4 <USBD_LL_Start>
 80145f8:	4603      	mov	r3, r0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014602:	b480      	push	{r7}
 8014604:	b083      	sub	sp, #12
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	460b      	mov	r3, r1
 8014622:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014624:	2303      	movs	r3, #3
 8014626:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801462e:	2b00      	cmp	r3, #0
 8014630:	d009      	beq.n	8014646 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	78fa      	ldrb	r2, [r7, #3]
 801463c:	4611      	mov	r1, r2
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	4798      	blx	r3
 8014642:	4603      	mov	r3, r0
 8014644:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014646:	7bfb      	ldrb	r3, [r7, #15]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014662:	2b00      	cmp	r3, #0
 8014664:	d007      	beq.n	8014676 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	78fa      	ldrb	r2, [r7, #3]
 8014670:	4611      	mov	r1, r2
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	4798      	blx	r3
  }

  return USBD_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014690:	6839      	ldr	r1, [r7, #0]
 8014692:	4618      	mov	r0, r3
 8014694:	f000 ff90 	bl	80155b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2201      	movs	r2, #1
 801469c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80146a6:	461a      	mov	r2, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80146b4:	f003 031f 	and.w	r3, r3, #31
 80146b8:	2b02      	cmp	r3, #2
 80146ba:	d01a      	beq.n	80146f2 <USBD_LL_SetupStage+0x72>
 80146bc:	2b02      	cmp	r3, #2
 80146be:	d822      	bhi.n	8014706 <USBD_LL_SetupStage+0x86>
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d002      	beq.n	80146ca <USBD_LL_SetupStage+0x4a>
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d00a      	beq.n	80146de <USBD_LL_SetupStage+0x5e>
 80146c8:	e01d      	b.n	8014706 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80146d0:	4619      	mov	r1, r3
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f000 fa62 	bl	8014b9c <USBD_StdDevReq>
 80146d8:	4603      	mov	r3, r0
 80146da:	73fb      	strb	r3, [r7, #15]
      break;
 80146dc:	e020      	b.n	8014720 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80146e4:	4619      	mov	r1, r3
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fac6 	bl	8014c78 <USBD_StdItfReq>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73fb      	strb	r3, [r7, #15]
      break;
 80146f0:	e016      	b.n	8014720 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80146f8:	4619      	mov	r1, r3
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 fb05 	bl	8014d0a <USBD_StdEPReq>
 8014700:	4603      	mov	r3, r0
 8014702:	73fb      	strb	r3, [r7, #15]
      break;
 8014704:	e00c      	b.n	8014720 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801470c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014710:	b2db      	uxtb	r3, r3
 8014712:	4619      	mov	r1, r3
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f001 fccd 	bl	80160b4 <USBD_LL_StallEP>
 801471a:	4603      	mov	r3, r0
 801471c:	73fb      	strb	r3, [r7, #15]
      break;
 801471e:	bf00      	nop
  }

  return ret;
 8014720:	7bfb      	ldrb	r3, [r7, #15]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3710      	adds	r7, #16
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801472a:	b580      	push	{r7, lr}
 801472c:	b086      	sub	sp, #24
 801472e:	af00      	add	r7, sp, #0
 8014730:	60f8      	str	r0, [r7, #12]
 8014732:	460b      	mov	r3, r1
 8014734:	607a      	str	r2, [r7, #4]
 8014736:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014738:	7afb      	ldrb	r3, [r7, #11]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d138      	bne.n	80147b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014744:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801474c:	2b03      	cmp	r3, #3
 801474e:	d14a      	bne.n	80147e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	689a      	ldr	r2, [r3, #8]
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	429a      	cmp	r2, r3
 801475a:	d913      	bls.n	8014784 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	689a      	ldr	r2, [r3, #8]
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	1ad2      	subs	r2, r2, r3
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	68da      	ldr	r2, [r3, #12]
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	4293      	cmp	r3, r2
 8014774:	bf28      	it	cs
 8014776:	4613      	movcs	r3, r2
 8014778:	461a      	mov	r2, r3
 801477a:	6879      	ldr	r1, [r7, #4]
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	f001 f80f 	bl	80157a0 <USBD_CtlContinueRx>
 8014782:	e030      	b.n	80147e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801478a:	b2db      	uxtb	r3, r3
 801478c:	2b03      	cmp	r3, #3
 801478e:	d10b      	bne.n	80147a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014796:	691b      	ldr	r3, [r3, #16]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d005      	beq.n	80147a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	68f8      	ldr	r0, [r7, #12]
 80147a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80147a8:	68f8      	ldr	r0, [r7, #12]
 80147aa:	f001 f80a 	bl	80157c2 <USBD_CtlSendStatus>
 80147ae:	e01a      	b.n	80147e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	2b03      	cmp	r3, #3
 80147ba:	d114      	bne.n	80147e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147c2:	699b      	ldr	r3, [r3, #24]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d00e      	beq.n	80147e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	7afa      	ldrb	r2, [r7, #11]
 80147d2:	4611      	mov	r1, r2
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	4798      	blx	r3
 80147d8:	4603      	mov	r3, r0
 80147da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80147dc:	7dfb      	ldrb	r3, [r7, #23]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80147e2:	7dfb      	ldrb	r3, [r7, #23]
 80147e4:	e000      	b.n	80147e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80147e6:	2300      	movs	r3, #0
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3718      	adds	r7, #24
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	460b      	mov	r3, r1
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80147fe:	7afb      	ldrb	r3, [r7, #11]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d16b      	bne.n	80148dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	3314      	adds	r3, #20
 8014808:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014810:	2b02      	cmp	r3, #2
 8014812:	d156      	bne.n	80148c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	689a      	ldr	r2, [r3, #8]
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	429a      	cmp	r2, r3
 801481e:	d914      	bls.n	801484a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	689a      	ldr	r2, [r3, #8]
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	1ad2      	subs	r2, r2, r3
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	689b      	ldr	r3, [r3, #8]
 8014832:	461a      	mov	r2, r3
 8014834:	6879      	ldr	r1, [r7, #4]
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f000 ff84 	bl	8015744 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801483c:	2300      	movs	r3, #0
 801483e:	2200      	movs	r2, #0
 8014840:	2100      	movs	r1, #0
 8014842:	68f8      	ldr	r0, [r7, #12]
 8014844:	f001 fce0 	bl	8016208 <USBD_LL_PrepareReceive>
 8014848:	e03b      	b.n	80148c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	68da      	ldr	r2, [r3, #12]
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	429a      	cmp	r2, r3
 8014854:	d11c      	bne.n	8014890 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	685a      	ldr	r2, [r3, #4]
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801485e:	429a      	cmp	r2, r3
 8014860:	d316      	bcc.n	8014890 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	685a      	ldr	r2, [r3, #4]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801486c:	429a      	cmp	r2, r3
 801486e:	d20f      	bcs.n	8014890 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014870:	2200      	movs	r2, #0
 8014872:	2100      	movs	r1, #0
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f000 ff65 	bl	8015744 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2200      	movs	r2, #0
 801487e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014882:	2300      	movs	r3, #0
 8014884:	2200      	movs	r2, #0
 8014886:	2100      	movs	r1, #0
 8014888:	68f8      	ldr	r0, [r7, #12]
 801488a:	f001 fcbd 	bl	8016208 <USBD_LL_PrepareReceive>
 801488e:	e018      	b.n	80148c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014896:	b2db      	uxtb	r3, r3
 8014898:	2b03      	cmp	r3, #3
 801489a:	d10b      	bne.n	80148b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d005      	beq.n	80148b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80148b4:	2180      	movs	r1, #128	; 0x80
 80148b6:	68f8      	ldr	r0, [r7, #12]
 80148b8:	f001 fbfc 	bl	80160b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80148bc:	68f8      	ldr	r0, [r7, #12]
 80148be:	f000 ff93 	bl	80157e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d122      	bne.n	8014912 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f7ff fe98 	bl	8014602 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2200      	movs	r2, #0
 80148d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80148da:	e01a      	b.n	8014912 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2b03      	cmp	r3, #3
 80148e6:	d114      	bne.n	8014912 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ee:	695b      	ldr	r3, [r3, #20]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00e      	beq.n	8014912 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fa:	695b      	ldr	r3, [r3, #20]
 80148fc:	7afa      	ldrb	r2, [r7, #11]
 80148fe:	4611      	mov	r1, r2
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	4798      	blx	r3
 8014904:	4603      	mov	r3, r0
 8014906:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014908:	7dfb      	ldrb	r3, [r7, #23]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d001      	beq.n	8014912 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801490e:	7dfb      	ldrb	r3, [r7, #23]
 8014910:	e000      	b.n	8014914 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8014912:	2300      	movs	r3, #0
}
 8014914:	4618      	mov	r0, r3
 8014916:	3718      	adds	r7, #24
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2201      	movs	r2, #1
 8014928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2200      	movs	r2, #0
 8014930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2200      	movs	r2, #0
 8014938:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2200      	movs	r2, #0
 801493e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014948:	2b00      	cmp	r3, #0
 801494a:	d101      	bne.n	8014950 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801494c:	2303      	movs	r3, #3
 801494e:	e02f      	b.n	80149b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014956:	2b00      	cmp	r3, #0
 8014958:	d00f      	beq.n	801497a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d009      	beq.n	801497a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	6852      	ldr	r2, [r2, #4]
 8014972:	b2d2      	uxtb	r2, r2
 8014974:	4611      	mov	r1, r2
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801497a:	2340      	movs	r3, #64	; 0x40
 801497c:	2200      	movs	r2, #0
 801497e:	2100      	movs	r1, #0
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f001 fb52 	bl	801602a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2201      	movs	r2, #1
 801498a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2240      	movs	r2, #64	; 0x40
 8014992:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014996:	2340      	movs	r3, #64	; 0x40
 8014998:	2200      	movs	r2, #0
 801499a:	2180      	movs	r1, #128	; 0x80
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f001 fb44 	bl	801602a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2201      	movs	r2, #1
 80149a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2240      	movs	r2, #64	; 0x40
 80149ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	460b      	mov	r3, r1
 80149c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	78fa      	ldrb	r2, [r7, #3]
 80149c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80149ca:	2300      	movs	r3, #0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2204      	movs	r2, #4
 80149f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80149f6:	2300      	movs	r3, #0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	370c      	adds	r7, #12
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b083      	sub	sp, #12
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	2b04      	cmp	r3, #4
 8014a16:	d106      	bne.n	8014a26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014a1e:	b2da      	uxtb	r2, r3
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014a26:	2300      	movs	r3, #0
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014a46:	2303      	movs	r3, #3
 8014a48:	e012      	b.n	8014a70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b03      	cmp	r3, #3
 8014a54:	d10b      	bne.n	8014a6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a5c:	69db      	ldr	r3, [r3, #28]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d005      	beq.n	8014a6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a68:	69db      	ldr	r3, [r3, #28]
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014a6e:	2300      	movs	r3, #0
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3708      	adds	r7, #8
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b082      	sub	sp, #8
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	460b      	mov	r3, r1
 8014a82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d101      	bne.n	8014a92 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014a8e:	2303      	movs	r3, #3
 8014a90:	e014      	b.n	8014abc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	2b03      	cmp	r3, #3
 8014a9c:	d10d      	bne.n	8014aba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014aa4:	6a1b      	ldr	r3, [r3, #32]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d007      	beq.n	8014aba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ab0:	6a1b      	ldr	r3, [r3, #32]
 8014ab2:	78fa      	ldrb	r2, [r7, #3]
 8014ab4:	4611      	mov	r1, r2
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3708      	adds	r7, #8
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	460b      	mov	r3, r1
 8014ace:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d101      	bne.n	8014ade <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014ada:	2303      	movs	r3, #3
 8014adc:	e014      	b.n	8014b08 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d10d      	bne.n	8014b06 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d007      	beq.n	8014b06 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014afe:	78fa      	ldrb	r2, [r7, #3]
 8014b00:	4611      	mov	r1, r2
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014b06:	2300      	movs	r3, #0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014b18:	2300      	movs	r3, #0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	370c      	adds	r7, #12
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b24:	4770      	bx	lr

08014b26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b082      	sub	sp, #8
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2201      	movs	r2, #1
 8014b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d009      	beq.n	8014b54 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	6852      	ldr	r2, [r2, #4]
 8014b4c:	b2d2      	uxtb	r2, r2
 8014b4e:	4611      	mov	r1, r2
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	4798      	blx	r3
  }

  return USBD_OK;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3708      	adds	r7, #8
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014b5e:	b480      	push	{r7}
 8014b60:	b087      	sub	sp, #28
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	3301      	adds	r3, #1
 8014b74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014b7c:	8a3b      	ldrh	r3, [r7, #16]
 8014b7e:	021b      	lsls	r3, r3, #8
 8014b80:	b21a      	sxth	r2, r3
 8014b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b86:	4313      	orrs	r3, r2
 8014b88:	b21b      	sxth	r3, r3
 8014b8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	371c      	adds	r7, #28
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr
	...

08014b9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bb2:	2b40      	cmp	r3, #64	; 0x40
 8014bb4:	d005      	beq.n	8014bc2 <USBD_StdDevReq+0x26>
 8014bb6:	2b40      	cmp	r3, #64	; 0x40
 8014bb8:	d853      	bhi.n	8014c62 <USBD_StdDevReq+0xc6>
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d00b      	beq.n	8014bd6 <USBD_StdDevReq+0x3a>
 8014bbe:	2b20      	cmp	r3, #32
 8014bc0:	d14f      	bne.n	8014c62 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	4798      	blx	r3
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8014bd4:	e04a      	b.n	8014c6c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	785b      	ldrb	r3, [r3, #1]
 8014bda:	2b09      	cmp	r3, #9
 8014bdc:	d83b      	bhi.n	8014c56 <USBD_StdDevReq+0xba>
 8014bde:	a201      	add	r2, pc, #4	; (adr r2, 8014be4 <USBD_StdDevReq+0x48>)
 8014be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014be4:	08014c39 	.word	0x08014c39
 8014be8:	08014c4d 	.word	0x08014c4d
 8014bec:	08014c57 	.word	0x08014c57
 8014bf0:	08014c43 	.word	0x08014c43
 8014bf4:	08014c57 	.word	0x08014c57
 8014bf8:	08014c17 	.word	0x08014c17
 8014bfc:	08014c0d 	.word	0x08014c0d
 8014c00:	08014c57 	.word	0x08014c57
 8014c04:	08014c2f 	.word	0x08014c2f
 8014c08:	08014c21 	.word	0x08014c21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014c0c:	6839      	ldr	r1, [r7, #0]
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 f9de 	bl	8014fd0 <USBD_GetDescriptor>
          break;
 8014c14:	e024      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014c16:	6839      	ldr	r1, [r7, #0]
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 fb43 	bl	80152a4 <USBD_SetAddress>
          break;
 8014c1e:	e01f      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014c20:	6839      	ldr	r1, [r7, #0]
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 fb82 	bl	801532c <USBD_SetConfig>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8014c2c:	e018      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f000 fc21 	bl	8015478 <USBD_GetConfig>
          break;
 8014c36:	e013      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014c38:	6839      	ldr	r1, [r7, #0]
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f000 fc52 	bl	80154e4 <USBD_GetStatus>
          break;
 8014c40:	e00e      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014c42:	6839      	ldr	r1, [r7, #0]
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f000 fc81 	bl	801554c <USBD_SetFeature>
          break;
 8014c4a:	e009      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014c4c:	6839      	ldr	r1, [r7, #0]
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 fc90 	bl	8015574 <USBD_ClrFeature>
          break;
 8014c54:	e004      	b.n	8014c60 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014c56:	6839      	ldr	r1, [r7, #0]
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 fce7 	bl	801562c <USBD_CtlError>
          break;
 8014c5e:	bf00      	nop
      }
      break;
 8014c60:	e004      	b.n	8014c6c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014c62:	6839      	ldr	r1, [r7, #0]
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fce1 	bl	801562c <USBD_CtlError>
      break;
 8014c6a:	bf00      	nop
  }

  return ret;
 8014c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop

08014c78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c8e:	2b40      	cmp	r3, #64	; 0x40
 8014c90:	d005      	beq.n	8014c9e <USBD_StdItfReq+0x26>
 8014c92:	2b40      	cmp	r3, #64	; 0x40
 8014c94:	d82f      	bhi.n	8014cf6 <USBD_StdItfReq+0x7e>
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d001      	beq.n	8014c9e <USBD_StdItfReq+0x26>
 8014c9a:	2b20      	cmp	r3, #32
 8014c9c:	d12b      	bne.n	8014cf6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	3b01      	subs	r3, #1
 8014ca8:	2b02      	cmp	r3, #2
 8014caa:	d81d      	bhi.n	8014ce8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	889b      	ldrh	r3, [r3, #4]
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d813      	bhi.n	8014cde <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014cbc:	689b      	ldr	r3, [r3, #8]
 8014cbe:	6839      	ldr	r1, [r7, #0]
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	4798      	blx	r3
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	88db      	ldrh	r3, [r3, #6]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d110      	bne.n	8014cf2 <USBD_StdItfReq+0x7a>
 8014cd0:	7bfb      	ldrb	r3, [r7, #15]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10d      	bne.n	8014cf2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f000 fd73 	bl	80157c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014cdc:	e009      	b.n	8014cf2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014cde:	6839      	ldr	r1, [r7, #0]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fca3 	bl	801562c <USBD_CtlError>
          break;
 8014ce6:	e004      	b.n	8014cf2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014ce8:	6839      	ldr	r1, [r7, #0]
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f000 fc9e 	bl	801562c <USBD_CtlError>
          break;
 8014cf0:	e000      	b.n	8014cf4 <USBD_StdItfReq+0x7c>
          break;
 8014cf2:	bf00      	nop
      }
      break;
 8014cf4:	e004      	b.n	8014d00 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014cf6:	6839      	ldr	r1, [r7, #0]
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 fc97 	bl	801562c <USBD_CtlError>
      break;
 8014cfe:	bf00      	nop
  }

  return ret;
 8014d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3710      	adds	r7, #16
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}

08014d0a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d0a:	b580      	push	{r7, lr}
 8014d0c:	b084      	sub	sp, #16
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
 8014d12:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014d14:	2300      	movs	r3, #0
 8014d16:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	889b      	ldrh	r3, [r3, #4]
 8014d1c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d26:	2b40      	cmp	r3, #64	; 0x40
 8014d28:	d007      	beq.n	8014d3a <USBD_StdEPReq+0x30>
 8014d2a:	2b40      	cmp	r3, #64	; 0x40
 8014d2c:	f200 8145 	bhi.w	8014fba <USBD_StdEPReq+0x2b0>
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d00c      	beq.n	8014d4e <USBD_StdEPReq+0x44>
 8014d34:	2b20      	cmp	r3, #32
 8014d36:	f040 8140 	bne.w	8014fba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d40:	689b      	ldr	r3, [r3, #8]
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	4798      	blx	r3
 8014d48:	4603      	mov	r3, r0
 8014d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8014d4c:	e13a      	b.n	8014fc4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	785b      	ldrb	r3, [r3, #1]
 8014d52:	2b03      	cmp	r3, #3
 8014d54:	d007      	beq.n	8014d66 <USBD_StdEPReq+0x5c>
 8014d56:	2b03      	cmp	r3, #3
 8014d58:	f300 8129 	bgt.w	8014fae <USBD_StdEPReq+0x2a4>
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d07f      	beq.n	8014e60 <USBD_StdEPReq+0x156>
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d03c      	beq.n	8014dde <USBD_StdEPReq+0xd4>
 8014d64:	e123      	b.n	8014fae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d002      	beq.n	8014d78 <USBD_StdEPReq+0x6e>
 8014d72:	2b03      	cmp	r3, #3
 8014d74:	d016      	beq.n	8014da4 <USBD_StdEPReq+0x9a>
 8014d76:	e02c      	b.n	8014dd2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d78:	7bbb      	ldrb	r3, [r7, #14]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d00d      	beq.n	8014d9a <USBD_StdEPReq+0x90>
 8014d7e:	7bbb      	ldrb	r3, [r7, #14]
 8014d80:	2b80      	cmp	r3, #128	; 0x80
 8014d82:	d00a      	beq.n	8014d9a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014d84:	7bbb      	ldrb	r3, [r7, #14]
 8014d86:	4619      	mov	r1, r3
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f001 f993 	bl	80160b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d8e:	2180      	movs	r1, #128	; 0x80
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f001 f98f 	bl	80160b4 <USBD_LL_StallEP>
 8014d96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014d98:	e020      	b.n	8014ddc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f000 fc45 	bl	801562c <USBD_CtlError>
              break;
 8014da2:	e01b      	b.n	8014ddc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	885b      	ldrh	r3, [r3, #2]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10e      	bne.n	8014dca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014dac:	7bbb      	ldrb	r3, [r7, #14]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d00b      	beq.n	8014dca <USBD_StdEPReq+0xc0>
 8014db2:	7bbb      	ldrb	r3, [r7, #14]
 8014db4:	2b80      	cmp	r3, #128	; 0x80
 8014db6:	d008      	beq.n	8014dca <USBD_StdEPReq+0xc0>
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	88db      	ldrh	r3, [r3, #6]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d104      	bne.n	8014dca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014dc0:	7bbb      	ldrb	r3, [r7, #14]
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f001 f975 	bl	80160b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f000 fcf9 	bl	80157c2 <USBD_CtlSendStatus>

              break;
 8014dd0:	e004      	b.n	8014ddc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014dd2:	6839      	ldr	r1, [r7, #0]
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f000 fc29 	bl	801562c <USBD_CtlError>
              break;
 8014dda:	bf00      	nop
          }
          break;
 8014ddc:	e0ec      	b.n	8014fb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d002      	beq.n	8014df0 <USBD_StdEPReq+0xe6>
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	d016      	beq.n	8014e1c <USBD_StdEPReq+0x112>
 8014dee:	e030      	b.n	8014e52 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014df0:	7bbb      	ldrb	r3, [r7, #14]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d00d      	beq.n	8014e12 <USBD_StdEPReq+0x108>
 8014df6:	7bbb      	ldrb	r3, [r7, #14]
 8014df8:	2b80      	cmp	r3, #128	; 0x80
 8014dfa:	d00a      	beq.n	8014e12 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	4619      	mov	r1, r3
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f001 f957 	bl	80160b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e06:	2180      	movs	r1, #128	; 0x80
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f001 f953 	bl	80160b4 <USBD_LL_StallEP>
 8014e0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014e10:	e025      	b.n	8014e5e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014e12:	6839      	ldr	r1, [r7, #0]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 fc09 	bl	801562c <USBD_CtlError>
              break;
 8014e1a:	e020      	b.n	8014e5e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	885b      	ldrh	r3, [r3, #2]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d11b      	bne.n	8014e5c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014e24:	7bbb      	ldrb	r3, [r7, #14]
 8014e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d004      	beq.n	8014e38 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014e2e:	7bbb      	ldrb	r3, [r7, #14]
 8014e30:	4619      	mov	r1, r3
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f001 f95d 	bl	80160f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 fcc2 	bl	80157c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e44:	689b      	ldr	r3, [r3, #8]
 8014e46:	6839      	ldr	r1, [r7, #0]
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	4798      	blx	r3
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014e50:	e004      	b.n	8014e5c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014e52:	6839      	ldr	r1, [r7, #0]
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f000 fbe9 	bl	801562c <USBD_CtlError>
              break;
 8014e5a:	e000      	b.n	8014e5e <USBD_StdEPReq+0x154>
              break;
 8014e5c:	bf00      	nop
          }
          break;
 8014e5e:	e0ab      	b.n	8014fb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	2b02      	cmp	r3, #2
 8014e6a:	d002      	beq.n	8014e72 <USBD_StdEPReq+0x168>
 8014e6c:	2b03      	cmp	r3, #3
 8014e6e:	d032      	beq.n	8014ed6 <USBD_StdEPReq+0x1cc>
 8014e70:	e097      	b.n	8014fa2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014e72:	7bbb      	ldrb	r3, [r7, #14]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d007      	beq.n	8014e88 <USBD_StdEPReq+0x17e>
 8014e78:	7bbb      	ldrb	r3, [r7, #14]
 8014e7a:	2b80      	cmp	r3, #128	; 0x80
 8014e7c:	d004      	beq.n	8014e88 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014e7e:	6839      	ldr	r1, [r7, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 fbd3 	bl	801562c <USBD_CtlError>
                break;
 8014e86:	e091      	b.n	8014fac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	da0b      	bge.n	8014ea8 <USBD_StdEPReq+0x19e>
 8014e90:	7bbb      	ldrb	r3, [r7, #14]
 8014e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e96:	4613      	mov	r3, r2
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	4413      	add	r3, r2
 8014e9c:	009b      	lsls	r3, r3, #2
 8014e9e:	3310      	adds	r3, #16
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	3304      	adds	r3, #4
 8014ea6:	e00b      	b.n	8014ec0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ea8:	7bbb      	ldrb	r3, [r7, #14]
 8014eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014eae:	4613      	mov	r3, r2
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	4413      	add	r3, r2
 8014eb4:	009b      	lsls	r3, r3, #2
 8014eb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	3304      	adds	r3, #4
 8014ec0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	2202      	movs	r2, #2
 8014ecc:	4619      	mov	r1, r3
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f000 fc1d 	bl	801570e <USBD_CtlSendData>
              break;
 8014ed4:	e06a      	b.n	8014fac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	da11      	bge.n	8014f02 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014ede:	7bbb      	ldrb	r3, [r7, #14]
 8014ee0:	f003 020f 	and.w	r2, r3, #15
 8014ee4:	6879      	ldr	r1, [r7, #4]
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	009b      	lsls	r3, r3, #2
 8014eea:	4413      	add	r3, r2
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	440b      	add	r3, r1
 8014ef0:	3324      	adds	r3, #36	; 0x24
 8014ef2:	881b      	ldrh	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d117      	bne.n	8014f28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014ef8:	6839      	ldr	r1, [r7, #0]
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f000 fb96 	bl	801562c <USBD_CtlError>
                  break;
 8014f00:	e054      	b.n	8014fac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014f02:	7bbb      	ldrb	r3, [r7, #14]
 8014f04:	f003 020f 	and.w	r2, r3, #15
 8014f08:	6879      	ldr	r1, [r7, #4]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	4413      	add	r3, r2
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	440b      	add	r3, r1
 8014f14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014f18:	881b      	ldrh	r3, [r3, #0]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d104      	bne.n	8014f28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014f1e:	6839      	ldr	r1, [r7, #0]
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 fb83 	bl	801562c <USBD_CtlError>
                  break;
 8014f26:	e041      	b.n	8014fac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	da0b      	bge.n	8014f48 <USBD_StdEPReq+0x23e>
 8014f30:	7bbb      	ldrb	r3, [r7, #14]
 8014f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f36:	4613      	mov	r3, r2
 8014f38:	009b      	lsls	r3, r3, #2
 8014f3a:	4413      	add	r3, r2
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	3310      	adds	r3, #16
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	4413      	add	r3, r2
 8014f44:	3304      	adds	r3, #4
 8014f46:	e00b      	b.n	8014f60 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014f48:	7bbb      	ldrb	r3, [r7, #14]
 8014f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f4e:	4613      	mov	r3, r2
 8014f50:	009b      	lsls	r3, r3, #2
 8014f52:	4413      	add	r3, r2
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	3304      	adds	r3, #4
 8014f60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014f62:	7bbb      	ldrb	r3, [r7, #14]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d002      	beq.n	8014f6e <USBD_StdEPReq+0x264>
 8014f68:	7bbb      	ldrb	r3, [r7, #14]
 8014f6a:	2b80      	cmp	r3, #128	; 0x80
 8014f6c:	d103      	bne.n	8014f76 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	2200      	movs	r2, #0
 8014f72:	601a      	str	r2, [r3, #0]
 8014f74:	e00e      	b.n	8014f94 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014f76:	7bbb      	ldrb	r3, [r7, #14]
 8014f78:	4619      	mov	r1, r3
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f001 f8d8 	bl	8016130 <USBD_LL_IsStallEP>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d003      	beq.n	8014f8e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	2201      	movs	r2, #1
 8014f8a:	601a      	str	r2, [r3, #0]
 8014f8c:	e002      	b.n	8014f94 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	2200      	movs	r2, #0
 8014f92:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2202      	movs	r2, #2
 8014f98:	4619      	mov	r1, r3
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 fbb7 	bl	801570e <USBD_CtlSendData>
              break;
 8014fa0:	e004      	b.n	8014fac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f000 fb41 	bl	801562c <USBD_CtlError>
              break;
 8014faa:	bf00      	nop
          }
          break;
 8014fac:	e004      	b.n	8014fb8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014fae:	6839      	ldr	r1, [r7, #0]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f000 fb3b 	bl	801562c <USBD_CtlError>
          break;
 8014fb6:	bf00      	nop
      }
      break;
 8014fb8:	e004      	b.n	8014fc4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014fba:	6839      	ldr	r1, [r7, #0]
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f000 fb35 	bl	801562c <USBD_CtlError>
      break;
 8014fc2:	bf00      	nop
  }

  return ret;
 8014fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
	...

08014fd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b084      	sub	sp, #16
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	885b      	ldrh	r3, [r3, #2]
 8014fea:	0a1b      	lsrs	r3, r3, #8
 8014fec:	b29b      	uxth	r3, r3
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	2b06      	cmp	r3, #6
 8014ff2:	f200 8128 	bhi.w	8015246 <USBD_GetDescriptor+0x276>
 8014ff6:	a201      	add	r2, pc, #4	; (adr r2, 8014ffc <USBD_GetDescriptor+0x2c>)
 8014ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffc:	08015019 	.word	0x08015019
 8015000:	08015031 	.word	0x08015031
 8015004:	08015071 	.word	0x08015071
 8015008:	08015247 	.word	0x08015247
 801500c:	08015247 	.word	0x08015247
 8015010:	080151e7 	.word	0x080151e7
 8015014:	08015213 	.word	0x08015213
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	687a      	ldr	r2, [r7, #4]
 8015022:	7c12      	ldrb	r2, [r2, #16]
 8015024:	f107 0108 	add.w	r1, r7, #8
 8015028:	4610      	mov	r0, r2
 801502a:	4798      	blx	r3
 801502c:	60f8      	str	r0, [r7, #12]
      break;
 801502e:	e112      	b.n	8015256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	7c1b      	ldrb	r3, [r3, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d10d      	bne.n	8015054 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015040:	f107 0208 	add.w	r2, r7, #8
 8015044:	4610      	mov	r0, r2
 8015046:	4798      	blx	r3
 8015048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	3301      	adds	r3, #1
 801504e:	2202      	movs	r2, #2
 8015050:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015052:	e100      	b.n	8015256 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801505c:	f107 0208 	add.w	r2, r7, #8
 8015060:	4610      	mov	r0, r2
 8015062:	4798      	blx	r3
 8015064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	3301      	adds	r3, #1
 801506a:	2202      	movs	r2, #2
 801506c:	701a      	strb	r2, [r3, #0]
      break;
 801506e:	e0f2      	b.n	8015256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	885b      	ldrh	r3, [r3, #2]
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b05      	cmp	r3, #5
 8015078:	f200 80ac 	bhi.w	80151d4 <USBD_GetDescriptor+0x204>
 801507c:	a201      	add	r2, pc, #4	; (adr r2, 8015084 <USBD_GetDescriptor+0xb4>)
 801507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015082:	bf00      	nop
 8015084:	0801509d 	.word	0x0801509d
 8015088:	080150d1 	.word	0x080150d1
 801508c:	08015105 	.word	0x08015105
 8015090:	08015139 	.word	0x08015139
 8015094:	0801516d 	.word	0x0801516d
 8015098:	080151a1 	.word	0x080151a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d00b      	beq.n	80150c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	7c12      	ldrb	r2, [r2, #16]
 80150b4:	f107 0108 	add.w	r1, r7, #8
 80150b8:	4610      	mov	r0, r2
 80150ba:	4798      	blx	r3
 80150bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150be:	e091      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80150c0:	6839      	ldr	r1, [r7, #0]
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f000 fab2 	bl	801562c <USBD_CtlError>
            err++;
 80150c8:	7afb      	ldrb	r3, [r7, #11]
 80150ca:	3301      	adds	r3, #1
 80150cc:	72fb      	strb	r3, [r7, #11]
          break;
 80150ce:	e089      	b.n	80151e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150d6:	689b      	ldr	r3, [r3, #8]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00b      	beq.n	80150f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150e2:	689b      	ldr	r3, [r3, #8]
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	7c12      	ldrb	r2, [r2, #16]
 80150e8:	f107 0108 	add.w	r1, r7, #8
 80150ec:	4610      	mov	r0, r2
 80150ee:	4798      	blx	r3
 80150f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150f2:	e077      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80150f4:	6839      	ldr	r1, [r7, #0]
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f000 fa98 	bl	801562c <USBD_CtlError>
            err++;
 80150fc:	7afb      	ldrb	r3, [r7, #11]
 80150fe:	3301      	adds	r3, #1
 8015100:	72fb      	strb	r3, [r7, #11]
          break;
 8015102:	e06f      	b.n	80151e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d00b      	beq.n	8015128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	7c12      	ldrb	r2, [r2, #16]
 801511c:	f107 0108 	add.w	r1, r7, #8
 8015120:	4610      	mov	r0, r2
 8015122:	4798      	blx	r3
 8015124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015126:	e05d      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015128:	6839      	ldr	r1, [r7, #0]
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 fa7e 	bl	801562c <USBD_CtlError>
            err++;
 8015130:	7afb      	ldrb	r3, [r7, #11]
 8015132:	3301      	adds	r3, #1
 8015134:	72fb      	strb	r3, [r7, #11]
          break;
 8015136:	e055      	b.n	80151e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801513e:	691b      	ldr	r3, [r3, #16]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d00b      	beq.n	801515c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801514a:	691b      	ldr	r3, [r3, #16]
 801514c:	687a      	ldr	r2, [r7, #4]
 801514e:	7c12      	ldrb	r2, [r2, #16]
 8015150:	f107 0108 	add.w	r1, r7, #8
 8015154:	4610      	mov	r0, r2
 8015156:	4798      	blx	r3
 8015158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801515a:	e043      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801515c:	6839      	ldr	r1, [r7, #0]
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 fa64 	bl	801562c <USBD_CtlError>
            err++;
 8015164:	7afb      	ldrb	r3, [r7, #11]
 8015166:	3301      	adds	r3, #1
 8015168:	72fb      	strb	r3, [r7, #11]
          break;
 801516a:	e03b      	b.n	80151e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015172:	695b      	ldr	r3, [r3, #20]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d00b      	beq.n	8015190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801517e:	695b      	ldr	r3, [r3, #20]
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	7c12      	ldrb	r2, [r2, #16]
 8015184:	f107 0108 	add.w	r1, r7, #8
 8015188:	4610      	mov	r0, r2
 801518a:	4798      	blx	r3
 801518c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801518e:	e029      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015190:	6839      	ldr	r1, [r7, #0]
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f000 fa4a 	bl	801562c <USBD_CtlError>
            err++;
 8015198:	7afb      	ldrb	r3, [r7, #11]
 801519a:	3301      	adds	r3, #1
 801519c:	72fb      	strb	r3, [r7, #11]
          break;
 801519e:	e021      	b.n	80151e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151a6:	699b      	ldr	r3, [r3, #24]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d00b      	beq.n	80151c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151b2:	699b      	ldr	r3, [r3, #24]
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	7c12      	ldrb	r2, [r2, #16]
 80151b8:	f107 0108 	add.w	r1, r7, #8
 80151bc:	4610      	mov	r0, r2
 80151be:	4798      	blx	r3
 80151c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151c2:	e00f      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80151c4:	6839      	ldr	r1, [r7, #0]
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 fa30 	bl	801562c <USBD_CtlError>
            err++;
 80151cc:	7afb      	ldrb	r3, [r7, #11]
 80151ce:	3301      	adds	r3, #1
 80151d0:	72fb      	strb	r3, [r7, #11]
          break;
 80151d2:	e007      	b.n	80151e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80151d4:	6839      	ldr	r1, [r7, #0]
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f000 fa28 	bl	801562c <USBD_CtlError>
          err++;
 80151dc:	7afb      	ldrb	r3, [r7, #11]
 80151de:	3301      	adds	r3, #1
 80151e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80151e2:	bf00      	nop
      }
      break;
 80151e4:	e037      	b.n	8015256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	7c1b      	ldrb	r3, [r3, #16]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d109      	bne.n	8015202 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151f6:	f107 0208 	add.w	r2, r7, #8
 80151fa:	4610      	mov	r0, r2
 80151fc:	4798      	blx	r3
 80151fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015200:	e029      	b.n	8015256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f000 fa11 	bl	801562c <USBD_CtlError>
        err++;
 801520a:	7afb      	ldrb	r3, [r7, #11]
 801520c:	3301      	adds	r3, #1
 801520e:	72fb      	strb	r3, [r7, #11]
      break;
 8015210:	e021      	b.n	8015256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	7c1b      	ldrb	r3, [r3, #16]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d10d      	bne.n	8015236 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015222:	f107 0208 	add.w	r2, r7, #8
 8015226:	4610      	mov	r0, r2
 8015228:	4798      	blx	r3
 801522a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	3301      	adds	r3, #1
 8015230:	2207      	movs	r2, #7
 8015232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015234:	e00f      	b.n	8015256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015236:	6839      	ldr	r1, [r7, #0]
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f000 f9f7 	bl	801562c <USBD_CtlError>
        err++;
 801523e:	7afb      	ldrb	r3, [r7, #11]
 8015240:	3301      	adds	r3, #1
 8015242:	72fb      	strb	r3, [r7, #11]
      break;
 8015244:	e007      	b.n	8015256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015246:	6839      	ldr	r1, [r7, #0]
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f000 f9ef 	bl	801562c <USBD_CtlError>
      err++;
 801524e:	7afb      	ldrb	r3, [r7, #11]
 8015250:	3301      	adds	r3, #1
 8015252:	72fb      	strb	r3, [r7, #11]
      break;
 8015254:	bf00      	nop
  }

  if (err != 0U)
 8015256:	7afb      	ldrb	r3, [r7, #11]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d11e      	bne.n	801529a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	88db      	ldrh	r3, [r3, #6]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d016      	beq.n	8015292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015264:	893b      	ldrh	r3, [r7, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00e      	beq.n	8015288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	88da      	ldrh	r2, [r3, #6]
 801526e:	893b      	ldrh	r3, [r7, #8]
 8015270:	4293      	cmp	r3, r2
 8015272:	bf28      	it	cs
 8015274:	4613      	movcs	r3, r2
 8015276:	b29b      	uxth	r3, r3
 8015278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801527a:	893b      	ldrh	r3, [r7, #8]
 801527c:	461a      	mov	r2, r3
 801527e:	68f9      	ldr	r1, [r7, #12]
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f000 fa44 	bl	801570e <USBD_CtlSendData>
 8015286:	e009      	b.n	801529c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015288:	6839      	ldr	r1, [r7, #0]
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f000 f9ce 	bl	801562c <USBD_CtlError>
 8015290:	e004      	b.n	801529c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f000 fa95 	bl	80157c2 <USBD_CtlSendStatus>
 8015298:	e000      	b.n	801529c <USBD_GetDescriptor+0x2cc>
    return;
 801529a:	bf00      	nop
  }
}
 801529c:	3710      	adds	r7, #16
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop

080152a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	889b      	ldrh	r3, [r3, #4]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d131      	bne.n	801531a <USBD_SetAddress+0x76>
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	88db      	ldrh	r3, [r3, #6]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d12d      	bne.n	801531a <USBD_SetAddress+0x76>
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	885b      	ldrh	r3, [r3, #2]
 80152c2:	2b7f      	cmp	r3, #127	; 0x7f
 80152c4:	d829      	bhi.n	801531a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	885b      	ldrh	r3, [r3, #2]
 80152ca:	b2db      	uxtb	r3, r3
 80152cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d104      	bne.n	80152e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80152de:	6839      	ldr	r1, [r7, #0]
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f000 f9a3 	bl	801562c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152e6:	e01d      	b.n	8015324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	7bfa      	ldrb	r2, [r7, #15]
 80152ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80152f0:	7bfb      	ldrb	r3, [r7, #15]
 80152f2:	4619      	mov	r1, r3
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 ff47 	bl	8016188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 fa61 	bl	80157c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015300:	7bfb      	ldrb	r3, [r7, #15]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d004      	beq.n	8015310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2202      	movs	r2, #2
 801530a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801530e:	e009      	b.n	8015324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2201      	movs	r2, #1
 8015314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015318:	e004      	b.n	8015324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801531a:	6839      	ldr	r1, [r7, #0]
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f000 f985 	bl	801562c <USBD_CtlError>
  }
}
 8015322:	bf00      	nop
 8015324:	bf00      	nop
 8015326:	3710      	adds	r7, #16
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	885b      	ldrh	r3, [r3, #2]
 801533e:	b2da      	uxtb	r2, r3
 8015340:	4b4c      	ldr	r3, [pc, #304]	; (8015474 <USBD_SetConfig+0x148>)
 8015342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015344:	4b4b      	ldr	r3, [pc, #300]	; (8015474 <USBD_SetConfig+0x148>)
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	2b01      	cmp	r3, #1
 801534a:	d905      	bls.n	8015358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801534c:	6839      	ldr	r1, [r7, #0]
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 f96c 	bl	801562c <USBD_CtlError>
    return USBD_FAIL;
 8015354:	2303      	movs	r3, #3
 8015356:	e088      	b.n	801546a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801535e:	b2db      	uxtb	r3, r3
 8015360:	2b02      	cmp	r3, #2
 8015362:	d002      	beq.n	801536a <USBD_SetConfig+0x3e>
 8015364:	2b03      	cmp	r3, #3
 8015366:	d025      	beq.n	80153b4 <USBD_SetConfig+0x88>
 8015368:	e071      	b.n	801544e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801536a:	4b42      	ldr	r3, [pc, #264]	; (8015474 <USBD_SetConfig+0x148>)
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d01c      	beq.n	80153ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015372:	4b40      	ldr	r3, [pc, #256]	; (8015474 <USBD_SetConfig+0x148>)
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	461a      	mov	r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801537c:	4b3d      	ldr	r3, [pc, #244]	; (8015474 <USBD_SetConfig+0x148>)
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	4619      	mov	r1, r3
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f7ff f948 	bl	8014618 <USBD_SetClassConfig>
 8015388:	4603      	mov	r3, r0
 801538a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801538c:	7bfb      	ldrb	r3, [r7, #15]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d004      	beq.n	801539c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 f949 	bl	801562c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801539a:	e065      	b.n	8015468 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f000 fa10 	bl	80157c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2203      	movs	r2, #3
 80153a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80153aa:	e05d      	b.n	8015468 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fa08 	bl	80157c2 <USBD_CtlSendStatus>
      break;
 80153b2:	e059      	b.n	8015468 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80153b4:	4b2f      	ldr	r3, [pc, #188]	; (8015474 <USBD_SetConfig+0x148>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d112      	bne.n	80153e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2202      	movs	r2, #2
 80153c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80153c4:	4b2b      	ldr	r3, [pc, #172]	; (8015474 <USBD_SetConfig+0x148>)
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	461a      	mov	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80153ce:	4b29      	ldr	r3, [pc, #164]	; (8015474 <USBD_SetConfig+0x148>)
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7ff f93b 	bl	8014650 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 f9f1 	bl	80157c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80153e0:	e042      	b.n	8015468 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80153e2:	4b24      	ldr	r3, [pc, #144]	; (8015474 <USBD_SetConfig+0x148>)
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	461a      	mov	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d02a      	beq.n	8015446 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	4619      	mov	r1, r3
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f7ff f929 	bl	8014650 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80153fe:	4b1d      	ldr	r3, [pc, #116]	; (8015474 <USBD_SetConfig+0x148>)
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	461a      	mov	r2, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015408:	4b1a      	ldr	r3, [pc, #104]	; (8015474 <USBD_SetConfig+0x148>)
 801540a:	781b      	ldrb	r3, [r3, #0]
 801540c:	4619      	mov	r1, r3
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7ff f902 	bl	8014618 <USBD_SetClassConfig>
 8015414:	4603      	mov	r3, r0
 8015416:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015418:	7bfb      	ldrb	r3, [r7, #15]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d00f      	beq.n	801543e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801541e:	6839      	ldr	r1, [r7, #0]
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 f903 	bl	801562c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	b2db      	uxtb	r3, r3
 801542c:	4619      	mov	r1, r3
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f7ff f90e 	bl	8014650 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2202      	movs	r2, #2
 8015438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801543c:	e014      	b.n	8015468 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 f9bf 	bl	80157c2 <USBD_CtlSendStatus>
      break;
 8015444:	e010      	b.n	8015468 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f000 f9bb 	bl	80157c2 <USBD_CtlSendStatus>
      break;
 801544c:	e00c      	b.n	8015468 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801544e:	6839      	ldr	r1, [r7, #0]
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 f8eb 	bl	801562c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015456:	4b07      	ldr	r3, [pc, #28]	; (8015474 <USBD_SetConfig+0x148>)
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	4619      	mov	r1, r3
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f7ff f8f7 	bl	8014650 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015462:	2303      	movs	r3, #3
 8015464:	73fb      	strb	r3, [r7, #15]
      break;
 8015466:	bf00      	nop
  }

  return ret;
 8015468:	7bfb      	ldrb	r3, [r7, #15]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	24033004 	.word	0x24033004

08015478 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	88db      	ldrh	r3, [r3, #6]
 8015486:	2b01      	cmp	r3, #1
 8015488:	d004      	beq.n	8015494 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801548a:	6839      	ldr	r1, [r7, #0]
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f000 f8cd 	bl	801562c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015492:	e023      	b.n	80154dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b02      	cmp	r3, #2
 801549e:	dc02      	bgt.n	80154a6 <USBD_GetConfig+0x2e>
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	dc03      	bgt.n	80154ac <USBD_GetConfig+0x34>
 80154a4:	e015      	b.n	80154d2 <USBD_GetConfig+0x5a>
 80154a6:	2b03      	cmp	r3, #3
 80154a8:	d00b      	beq.n	80154c2 <USBD_GetConfig+0x4a>
 80154aa:	e012      	b.n	80154d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2200      	movs	r2, #0
 80154b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	3308      	adds	r3, #8
 80154b6:	2201      	movs	r2, #1
 80154b8:	4619      	mov	r1, r3
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 f927 	bl	801570e <USBD_CtlSendData>
        break;
 80154c0:	e00c      	b.n	80154dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	3304      	adds	r3, #4
 80154c6:	2201      	movs	r2, #1
 80154c8:	4619      	mov	r1, r3
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 f91f 	bl	801570e <USBD_CtlSendData>
        break;
 80154d0:	e004      	b.n	80154dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80154d2:	6839      	ldr	r1, [r7, #0]
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f000 f8a9 	bl	801562c <USBD_CtlError>
        break;
 80154da:	bf00      	nop
}
 80154dc:	bf00      	nop
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	3b01      	subs	r3, #1
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d81e      	bhi.n	801553a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	88db      	ldrh	r3, [r3, #6]
 8015500:	2b02      	cmp	r3, #2
 8015502:	d004      	beq.n	801550e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015504:	6839      	ldr	r1, [r7, #0]
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 f890 	bl	801562c <USBD_CtlError>
        break;
 801550c:	e01a      	b.n	8015544 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2201      	movs	r2, #1
 8015512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801551a:	2b00      	cmp	r3, #0
 801551c:	d005      	beq.n	801552a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	f043 0202 	orr.w	r2, r3, #2
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	330c      	adds	r3, #12
 801552e:	2202      	movs	r2, #2
 8015530:	4619      	mov	r1, r3
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f000 f8eb 	bl	801570e <USBD_CtlSendData>
      break;
 8015538:	e004      	b.n	8015544 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f000 f875 	bl	801562c <USBD_CtlError>
      break;
 8015542:	bf00      	nop
  }
}
 8015544:	bf00      	nop
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	885b      	ldrh	r3, [r3, #2]
 801555a:	2b01      	cmp	r3, #1
 801555c:	d106      	bne.n	801556c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2201      	movs	r2, #1
 8015562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f000 f92b 	bl	80157c2 <USBD_CtlSendStatus>
  }
}
 801556c:	bf00      	nop
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015584:	b2db      	uxtb	r3, r3
 8015586:	3b01      	subs	r3, #1
 8015588:	2b02      	cmp	r3, #2
 801558a:	d80b      	bhi.n	80155a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	885b      	ldrh	r3, [r3, #2]
 8015590:	2b01      	cmp	r3, #1
 8015592:	d10c      	bne.n	80155ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2200      	movs	r2, #0
 8015598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f000 f910 	bl	80157c2 <USBD_CtlSendStatus>
      }
      break;
 80155a2:	e004      	b.n	80155ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80155a4:	6839      	ldr	r1, [r7, #0]
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f000 f840 	bl	801562c <USBD_CtlError>
      break;
 80155ac:	e000      	b.n	80155b0 <USBD_ClrFeature+0x3c>
      break;
 80155ae:	bf00      	nop
  }
}
 80155b0:	bf00      	nop
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	781a      	ldrb	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	3301      	adds	r3, #1
 80155d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	781a      	ldrb	r2, [r3, #0]
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	3301      	adds	r3, #1
 80155e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f7ff fabb 	bl	8014b5e <SWAPBYTE>
 80155e8:	4603      	mov	r3, r0
 80155ea:	461a      	mov	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	3301      	adds	r3, #1
 80155f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	3301      	adds	r3, #1
 80155fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80155fc:	68f8      	ldr	r0, [r7, #12]
 80155fe:	f7ff faae 	bl	8014b5e <SWAPBYTE>
 8015602:	4603      	mov	r3, r0
 8015604:	461a      	mov	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	3301      	adds	r3, #1
 801560e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	3301      	adds	r3, #1
 8015614:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f7ff faa1 	bl	8014b5e <SWAPBYTE>
 801561c:	4603      	mov	r3, r0
 801561e:	461a      	mov	r2, r3
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	80da      	strh	r2, [r3, #6]
}
 8015624:	bf00      	nop
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015636:	2180      	movs	r1, #128	; 0x80
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f000 fd3b 	bl	80160b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801563e:	2100      	movs	r1, #0
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 fd37 	bl	80160b4 <USBD_LL_StallEP>
}
 8015646:	bf00      	nop
 8015648:	3708      	adds	r7, #8
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b086      	sub	sp, #24
 8015652:	af00      	add	r7, sp, #0
 8015654:	60f8      	str	r0, [r7, #12]
 8015656:	60b9      	str	r1, [r7, #8]
 8015658:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801565a:	2300      	movs	r3, #0
 801565c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d036      	beq.n	80156d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015668:	6938      	ldr	r0, [r7, #16]
 801566a:	f000 f836 	bl	80156da <USBD_GetLen>
 801566e:	4603      	mov	r3, r0
 8015670:	3301      	adds	r3, #1
 8015672:	b29b      	uxth	r3, r3
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	b29a      	uxth	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801567c:	7dfb      	ldrb	r3, [r7, #23]
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	4413      	add	r3, r2
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	7812      	ldrb	r2, [r2, #0]
 8015686:	701a      	strb	r2, [r3, #0]
  idx++;
 8015688:	7dfb      	ldrb	r3, [r7, #23]
 801568a:	3301      	adds	r3, #1
 801568c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801568e:	7dfb      	ldrb	r3, [r7, #23]
 8015690:	68ba      	ldr	r2, [r7, #8]
 8015692:	4413      	add	r3, r2
 8015694:	2203      	movs	r2, #3
 8015696:	701a      	strb	r2, [r3, #0]
  idx++;
 8015698:	7dfb      	ldrb	r3, [r7, #23]
 801569a:	3301      	adds	r3, #1
 801569c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801569e:	e013      	b.n	80156c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80156a0:	7dfb      	ldrb	r3, [r7, #23]
 80156a2:	68ba      	ldr	r2, [r7, #8]
 80156a4:	4413      	add	r3, r2
 80156a6:	693a      	ldr	r2, [r7, #16]
 80156a8:	7812      	ldrb	r2, [r2, #0]
 80156aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	3301      	adds	r3, #1
 80156b0:	613b      	str	r3, [r7, #16]
    idx++;
 80156b2:	7dfb      	ldrb	r3, [r7, #23]
 80156b4:	3301      	adds	r3, #1
 80156b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80156b8:	7dfb      	ldrb	r3, [r7, #23]
 80156ba:	68ba      	ldr	r2, [r7, #8]
 80156bc:	4413      	add	r3, r2
 80156be:	2200      	movs	r2, #0
 80156c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80156c2:	7dfb      	ldrb	r3, [r7, #23]
 80156c4:	3301      	adds	r3, #1
 80156c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80156c8:	693b      	ldr	r3, [r7, #16]
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d1e7      	bne.n	80156a0 <USBD_GetString+0x52>
 80156d0:	e000      	b.n	80156d4 <USBD_GetString+0x86>
    return;
 80156d2:	bf00      	nop
  }
}
 80156d4:	3718      	adds	r7, #24
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80156da:	b480      	push	{r7}
 80156dc:	b085      	sub	sp, #20
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80156e2:	2300      	movs	r3, #0
 80156e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80156ea:	e005      	b.n	80156f8 <USBD_GetLen+0x1e>
  {
    len++;
 80156ec:	7bfb      	ldrb	r3, [r7, #15]
 80156ee:	3301      	adds	r3, #1
 80156f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	3301      	adds	r3, #1
 80156f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d1f5      	bne.n	80156ec <USBD_GetLen+0x12>
  }

  return len;
 8015700:	7bfb      	ldrb	r3, [r7, #15]
}
 8015702:	4618      	mov	r0, r3
 8015704:	3714      	adds	r7, #20
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr

0801570e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801570e:	b580      	push	{r7, lr}
 8015710:	b084      	sub	sp, #16
 8015712:	af00      	add	r7, sp, #0
 8015714:	60f8      	str	r0, [r7, #12]
 8015716:	60b9      	str	r1, [r7, #8]
 8015718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2202      	movs	r2, #2
 801571e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	68ba      	ldr	r2, [r7, #8]
 8015732:	2100      	movs	r1, #0
 8015734:	68f8      	ldr	r0, [r7, #12]
 8015736:	f000 fd46 	bl	80161c6 <USBD_LL_Transmit>

  return USBD_OK;
 801573a:	2300      	movs	r3, #0
}
 801573c:	4618      	mov	r0, r3
 801573e:	3710      	adds	r7, #16
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	68ba      	ldr	r2, [r7, #8]
 8015754:	2100      	movs	r1, #0
 8015756:	68f8      	ldr	r0, [r7, #12]
 8015758:	f000 fd35 	bl	80161c6 <USBD_LL_Transmit>

  return USBD_OK;
 801575c:	2300      	movs	r3, #0
}
 801575e:	4618      	mov	r0, r3
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}

08015766 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015766:	b580      	push	{r7, lr}
 8015768:	b084      	sub	sp, #16
 801576a:	af00      	add	r7, sp, #0
 801576c:	60f8      	str	r0, [r7, #12]
 801576e:	60b9      	str	r1, [r7, #8]
 8015770:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2203      	movs	r2, #3
 8015776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	687a      	ldr	r2, [r7, #4]
 801577e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	68ba      	ldr	r2, [r7, #8]
 801578e:	2100      	movs	r1, #0
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f000 fd39 	bl	8016208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b084      	sub	sp, #16
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	2100      	movs	r1, #0
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	f000 fd28 	bl	8016208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b082      	sub	sp, #8
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2204      	movs	r2, #4
 80157ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80157d2:	2300      	movs	r3, #0
 80157d4:	2200      	movs	r2, #0
 80157d6:	2100      	movs	r1, #0
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fcf4 	bl	80161c6 <USBD_LL_Transmit>

  return USBD_OK;
 80157de:	2300      	movs	r3, #0
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b082      	sub	sp, #8
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2205      	movs	r2, #5
 80157f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80157f8:	2300      	movs	r3, #0
 80157fa:	2200      	movs	r2, #0
 80157fc:	2100      	movs	r1, #0
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f000 fd02 	bl	8016208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015804:	2300      	movs	r3, #0
}
 8015806:	4618      	mov	r0, r3
 8015808:	3708      	adds	r7, #8
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
	...

08015810 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015814:	2200      	movs	r2, #0
 8015816:	4913      	ldr	r1, [pc, #76]	; (8015864 <MX_USB_DEVICE_Init+0x54>)
 8015818:	4813      	ldr	r0, [pc, #76]	; (8015868 <MX_USB_DEVICE_Init+0x58>)
 801581a:	f7fe fe8f 	bl	801453c <USBD_Init>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015824:	f7f5 fa16 	bl	800ac54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015828:	4910      	ldr	r1, [pc, #64]	; (801586c <MX_USB_DEVICE_Init+0x5c>)
 801582a:	480f      	ldr	r0, [pc, #60]	; (8015868 <MX_USB_DEVICE_Init+0x58>)
 801582c:	f7fe feb6 	bl	801459c <USBD_RegisterClass>
 8015830:	4603      	mov	r3, r0
 8015832:	2b00      	cmp	r3, #0
 8015834:	d001      	beq.n	801583a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015836:	f7f5 fa0d 	bl	800ac54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801583a:	490d      	ldr	r1, [pc, #52]	; (8015870 <MX_USB_DEVICE_Init+0x60>)
 801583c:	480a      	ldr	r0, [pc, #40]	; (8015868 <MX_USB_DEVICE_Init+0x58>)
 801583e:	f7fe fdd7 	bl	80143f0 <USBD_CDC_RegisterInterface>
 8015842:	4603      	mov	r3, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	d001      	beq.n	801584c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015848:	f7f5 fa04 	bl	800ac54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801584c:	4806      	ldr	r0, [pc, #24]	; (8015868 <MX_USB_DEVICE_Init+0x58>)
 801584e:	f7fe fecc 	bl	80145ea <USBD_Start>
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	d001      	beq.n	801585c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015858:	f7f5 f9fc 	bl	800ac54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801585c:	f7f7 fc50 	bl	800d100 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015860:	bf00      	nop
 8015862:	bd80      	pop	{r7, pc}
 8015864:	240081ac 	.word	0x240081ac
 8015868:	24033008 	.word	0x24033008
 801586c:	24008094 	.word	0x24008094
 8015870:	24008198 	.word	0x24008198

08015874 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015878:	2200      	movs	r2, #0
 801587a:	4905      	ldr	r1, [pc, #20]	; (8015890 <CDC_Init_FS+0x1c>)
 801587c:	4805      	ldr	r0, [pc, #20]	; (8015894 <CDC_Init_FS+0x20>)
 801587e:	f7fe fdcc 	bl	801441a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015882:	4905      	ldr	r1, [pc, #20]	; (8015898 <CDC_Init_FS+0x24>)
 8015884:	4803      	ldr	r0, [pc, #12]	; (8015894 <CDC_Init_FS+0x20>)
 8015886:	f7fe fde6 	bl	8014456 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801588a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801588c:	4618      	mov	r0, r3
 801588e:	bd80      	pop	{r7, pc}
 8015890:	24033ad8 	.word	0x24033ad8
 8015894:	24033008 	.word	0x24033008
 8015898:	240332d8 	.word	0x240332d8

0801589c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801589c:	b480      	push	{r7}
 801589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80158a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	4603      	mov	r3, r0
 80158b4:	6039      	str	r1, [r7, #0]
 80158b6:	71fb      	strb	r3, [r7, #7]
 80158b8:	4613      	mov	r3, r2
 80158ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80158bc:	79fb      	ldrb	r3, [r7, #7]
 80158be:	2b23      	cmp	r3, #35	; 0x23
 80158c0:	d84a      	bhi.n	8015958 <CDC_Control_FS+0xac>
 80158c2:	a201      	add	r2, pc, #4	; (adr r2, 80158c8 <CDC_Control_FS+0x1c>)
 80158c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158c8:	08015959 	.word	0x08015959
 80158cc:	08015959 	.word	0x08015959
 80158d0:	08015959 	.word	0x08015959
 80158d4:	08015959 	.word	0x08015959
 80158d8:	08015959 	.word	0x08015959
 80158dc:	08015959 	.word	0x08015959
 80158e0:	08015959 	.word	0x08015959
 80158e4:	08015959 	.word	0x08015959
 80158e8:	08015959 	.word	0x08015959
 80158ec:	08015959 	.word	0x08015959
 80158f0:	08015959 	.word	0x08015959
 80158f4:	08015959 	.word	0x08015959
 80158f8:	08015959 	.word	0x08015959
 80158fc:	08015959 	.word	0x08015959
 8015900:	08015959 	.word	0x08015959
 8015904:	08015959 	.word	0x08015959
 8015908:	08015959 	.word	0x08015959
 801590c:	08015959 	.word	0x08015959
 8015910:	08015959 	.word	0x08015959
 8015914:	08015959 	.word	0x08015959
 8015918:	08015959 	.word	0x08015959
 801591c:	08015959 	.word	0x08015959
 8015920:	08015959 	.word	0x08015959
 8015924:	08015959 	.word	0x08015959
 8015928:	08015959 	.word	0x08015959
 801592c:	08015959 	.word	0x08015959
 8015930:	08015959 	.word	0x08015959
 8015934:	08015959 	.word	0x08015959
 8015938:	08015959 	.word	0x08015959
 801593c:	08015959 	.word	0x08015959
 8015940:	08015959 	.word	0x08015959
 8015944:	08015959 	.word	0x08015959
 8015948:	08015959 	.word	0x08015959
 801594c:	08015959 	.word	0x08015959
 8015950:	08015959 	.word	0x08015959
 8015954:	08015959 	.word	0x08015959
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015958:	bf00      	nop
  }

  return (USBD_OK);
 801595a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	  FuzzingInputHandler(Buf, Len);
 8015972:	6839      	ldr	r1, [r7, #0]
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f7f4 fd57 	bl	800a428 <FuzzingInputHandler>


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801597a:	6879      	ldr	r1, [r7, #4]
 801597c:	4805      	ldr	r0, [pc, #20]	; (8015994 <CDC_Receive_FS+0x2c>)
 801597e:	f7fe fd6a 	bl	8014456 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015982:	4804      	ldr	r0, [pc, #16]	; (8015994 <CDC_Receive_FS+0x2c>)
 8015984:	f7fe fdb0 	bl	80144e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015988:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801598a:	4618      	mov	r0, r3
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	24033008 	.word	0x24033008

08015998 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	460b      	mov	r3, r1
 80159a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80159a4:	2300      	movs	r3, #0
 80159a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80159a8:	4b0d      	ldr	r3, [pc, #52]	; (80159e0 <CDC_Transmit_FS+0x48>)
 80159aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80159ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d001      	beq.n	80159be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80159ba:	2301      	movs	r3, #1
 80159bc:	e00b      	b.n	80159d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80159be:	887b      	ldrh	r3, [r7, #2]
 80159c0:	461a      	mov	r2, r3
 80159c2:	6879      	ldr	r1, [r7, #4]
 80159c4:	4806      	ldr	r0, [pc, #24]	; (80159e0 <CDC_Transmit_FS+0x48>)
 80159c6:	f7fe fd28 	bl	801441a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80159ca:	4805      	ldr	r0, [pc, #20]	; (80159e0 <CDC_Transmit_FS+0x48>)
 80159cc:	f7fe fd5c 	bl	8014488 <USBD_CDC_TransmitPacket>
 80159d0:	4603      	mov	r3, r0
 80159d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80159d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	24033008 	.word	0x24033008

080159e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b08a      	sub	sp, #40	; 0x28
 80159e8:	af02      	add	r7, sp, #8
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	4613      	mov	r3, r2
 80159f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	77fb      	strb	r3, [r7, #31]
  UNUSED(Len);
  UNUSED(epnum);


  BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
 80159f6:	2300      	movs	r3, #0
 80159f8:	617b      	str	r3, [r7, #20]

    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 80159fa:	4b12      	ldr	r3, [pc, #72]	; (8015a44 <CDC_TransmitCplt_FS+0x60>)
 80159fc:	61bb      	str	r3, [r7, #24]

    AFLfuzzer.bTXcomplete = true;
 80159fe:	69bb      	ldr	r3, [r7, #24]
 8015a00:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a04:	2201      	movs	r2, #1
 8015a06:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
    xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a10:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8015a14:	f107 0314 	add.w	r3, r7, #20
 8015a18:	9301      	str	r3, [sp, #4]
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	9300      	str	r3, [sp, #0]
 8015a1e:	2301      	movs	r3, #1
 8015a20:	2202      	movs	r2, #2
 8015a22:	2101      	movs	r1, #1
 8015a24:	f7ee fd94 	bl	8004550 <xTaskGenericNotifyFromISR>
  	  	    				1, //index
  							2, //value = 2 data TX complete
  							eSetBits,
  							&xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d003      	beq.n	8015a36 <CDC_TransmitCplt_FS+0x52>
 8015a2e:	4b06      	ldr	r3, [pc, #24]	; (8015a48 <CDC_TransmitCplt_FS+0x64>)
 8015a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a34:	601a      	str	r2, [r3, #0]


  /* USER CODE END 13 */
  return result;
 8015a36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3720      	adds	r7, #32
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	24020000 	.word	0x24020000
 8015a48:	e000ed04 	.word	0xe000ed04

08015a4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	4603      	mov	r3, r0
 8015a54:	6039      	str	r1, [r7, #0]
 8015a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	2212      	movs	r2, #18
 8015a5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015a5e:	4b03      	ldr	r3, [pc, #12]	; (8015a6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	370c      	adds	r7, #12
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr
 8015a6c:	240081c8 	.word	0x240081c8

08015a70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	6039      	str	r1, [r7, #0]
 8015a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	2204      	movs	r2, #4
 8015a80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015a82:	4b03      	ldr	r3, [pc, #12]	; (8015a90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	370c      	adds	r7, #12
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr
 8015a90:	240081dc 	.word	0x240081dc

08015a94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	6039      	str	r1, [r7, #0]
 8015a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015aa0:	79fb      	ldrb	r3, [r7, #7]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d105      	bne.n	8015ab2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	4907      	ldr	r1, [pc, #28]	; (8015ac8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015aaa:	4808      	ldr	r0, [pc, #32]	; (8015acc <USBD_FS_ProductStrDescriptor+0x38>)
 8015aac:	f7ff fdcf 	bl	801564e <USBD_GetString>
 8015ab0:	e004      	b.n	8015abc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015ab2:	683a      	ldr	r2, [r7, #0]
 8015ab4:	4904      	ldr	r1, [pc, #16]	; (8015ac8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015ab6:	4805      	ldr	r0, [pc, #20]	; (8015acc <USBD_FS_ProductStrDescriptor+0x38>)
 8015ab8:	f7ff fdc9 	bl	801564e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015abc:	4b02      	ldr	r3, [pc, #8]	; (8015ac8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	240342d8 	.word	0x240342d8
 8015acc:	24008460 	.word	0x24008460

08015ad0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	6039      	str	r1, [r7, #0]
 8015ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015adc:	683a      	ldr	r2, [r7, #0]
 8015ade:	4904      	ldr	r1, [pc, #16]	; (8015af0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015ae0:	4804      	ldr	r0, [pc, #16]	; (8015af4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015ae2:	f7ff fdb4 	bl	801564e <USBD_GetString>
  return USBD_StrDesc;
 8015ae6:	4b02      	ldr	r3, [pc, #8]	; (8015af0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3708      	adds	r7, #8
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	240342d8 	.word	0x240342d8
 8015af4:	24008478 	.word	0x24008478

08015af8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	4603      	mov	r3, r0
 8015b00:	6039      	str	r1, [r7, #0]
 8015b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	221a      	movs	r2, #26
 8015b08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015b0a:	f000 f843 	bl	8015b94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015b0e:	4b02      	ldr	r3, [pc, #8]	; (8015b18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	240081e0 	.word	0x240081e0

08015b1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	4603      	mov	r3, r0
 8015b24:	6039      	str	r1, [r7, #0]
 8015b26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015b28:	79fb      	ldrb	r3, [r7, #7]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d105      	bne.n	8015b3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015b2e:	683a      	ldr	r2, [r7, #0]
 8015b30:	4907      	ldr	r1, [pc, #28]	; (8015b50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015b32:	4808      	ldr	r0, [pc, #32]	; (8015b54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015b34:	f7ff fd8b 	bl	801564e <USBD_GetString>
 8015b38:	e004      	b.n	8015b44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	4904      	ldr	r1, [pc, #16]	; (8015b50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015b3e:	4805      	ldr	r0, [pc, #20]	; (8015b54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015b40:	f7ff fd85 	bl	801564e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b44:	4b02      	ldr	r3, [pc, #8]	; (8015b50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	240342d8 	.word	0x240342d8
 8015b54:	2400848c 	.word	0x2400848c

08015b58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	4603      	mov	r3, r0
 8015b60:	6039      	str	r1, [r7, #0]
 8015b62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b64:	79fb      	ldrb	r3, [r7, #7]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d105      	bne.n	8015b76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015b6a:	683a      	ldr	r2, [r7, #0]
 8015b6c:	4907      	ldr	r1, [pc, #28]	; (8015b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015b6e:	4808      	ldr	r0, [pc, #32]	; (8015b90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015b70:	f7ff fd6d 	bl	801564e <USBD_GetString>
 8015b74:	e004      	b.n	8015b80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015b76:	683a      	ldr	r2, [r7, #0]
 8015b78:	4904      	ldr	r1, [pc, #16]	; (8015b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015b7a:	4805      	ldr	r0, [pc, #20]	; (8015b90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015b7c:	f7ff fd67 	bl	801564e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b80:	4b02      	ldr	r3, [pc, #8]	; (8015b8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3708      	adds	r7, #8
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	240342d8 	.word	0x240342d8
 8015b90:	24008498 	.word	0x24008498

08015b94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015b9a:	4b0f      	ldr	r3, [pc, #60]	; (8015bd8 <Get_SerialNum+0x44>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015ba0:	4b0e      	ldr	r3, [pc, #56]	; (8015bdc <Get_SerialNum+0x48>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015ba6:	4b0e      	ldr	r3, [pc, #56]	; (8015be0 <Get_SerialNum+0x4c>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015bac:	68fa      	ldr	r2, [r7, #12]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d009      	beq.n	8015bce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015bba:	2208      	movs	r2, #8
 8015bbc:	4909      	ldr	r1, [pc, #36]	; (8015be4 <Get_SerialNum+0x50>)
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f000 f814 	bl	8015bec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015bc4:	2204      	movs	r2, #4
 8015bc6:	4908      	ldr	r1, [pc, #32]	; (8015be8 <Get_SerialNum+0x54>)
 8015bc8:	68b8      	ldr	r0, [r7, #8]
 8015bca:	f000 f80f 	bl	8015bec <IntToUnicode>
  }
}
 8015bce:	bf00      	nop
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	1ff1e800 	.word	0x1ff1e800
 8015bdc:	1ff1e804 	.word	0x1ff1e804
 8015be0:	1ff1e808 	.word	0x1ff1e808
 8015be4:	240081e2 	.word	0x240081e2
 8015be8:	240081f2 	.word	0x240081f2

08015bec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b087      	sub	sp, #28
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015bfe:	2300      	movs	r3, #0
 8015c00:	75fb      	strb	r3, [r7, #23]
 8015c02:	e027      	b.n	8015c54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	0f1b      	lsrs	r3, r3, #28
 8015c08:	2b09      	cmp	r3, #9
 8015c0a:	d80b      	bhi.n	8015c24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	0f1b      	lsrs	r3, r3, #28
 8015c10:	b2da      	uxtb	r2, r3
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
 8015c14:	005b      	lsls	r3, r3, #1
 8015c16:	4619      	mov	r1, r3
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	440b      	add	r3, r1
 8015c1c:	3230      	adds	r2, #48	; 0x30
 8015c1e:	b2d2      	uxtb	r2, r2
 8015c20:	701a      	strb	r2, [r3, #0]
 8015c22:	e00a      	b.n	8015c3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	0f1b      	lsrs	r3, r3, #28
 8015c28:	b2da      	uxtb	r2, r3
 8015c2a:	7dfb      	ldrb	r3, [r7, #23]
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	4619      	mov	r1, r3
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	440b      	add	r3, r1
 8015c34:	3237      	adds	r2, #55	; 0x37
 8015c36:	b2d2      	uxtb	r2, r2
 8015c38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	011b      	lsls	r3, r3, #4
 8015c3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015c40:	7dfb      	ldrb	r3, [r7, #23]
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	3301      	adds	r3, #1
 8015c46:	68ba      	ldr	r2, [r7, #8]
 8015c48:	4413      	add	r3, r2
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015c4e:	7dfb      	ldrb	r3, [r7, #23]
 8015c50:	3301      	adds	r3, #1
 8015c52:	75fb      	strb	r3, [r7, #23]
 8015c54:	7dfa      	ldrb	r2, [r7, #23]
 8015c56:	79fb      	ldrb	r3, [r7, #7]
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d3d3      	bcc.n	8015c04 <IntToUnicode+0x18>
  }
}
 8015c5c:	bf00      	nop
 8015c5e:	bf00      	nop
 8015c60:	371c      	adds	r7, #28
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr
	...

08015c6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b0b8      	sub	sp, #224	; 0xe0
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015c78:	2200      	movs	r2, #0
 8015c7a:	601a      	str	r2, [r3, #0]
 8015c7c:	605a      	str	r2, [r3, #4]
 8015c7e:	609a      	str	r2, [r3, #8]
 8015c80:	60da      	str	r2, [r3, #12]
 8015c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015c84:	f107 0310 	add.w	r3, r7, #16
 8015c88:	22bc      	movs	r2, #188	; 0xbc
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f000 fc7f 	bl	8016590 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4a33      	ldr	r2, [pc, #204]	; (8015d64 <HAL_PCD_MspInit+0xf8>)
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d15e      	bne.n	8015d5a <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015c9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015ca2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8015ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015caa:	f107 0310 	add.w	r3, r7, #16
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7f8 fa12 	bl	800e0d8 <HAL_RCCEx_PeriphCLKConfig>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d001      	beq.n	8015cbe <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8015cba:	f7f4 ffcb 	bl	800ac54 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015cbe:	f7f7 fa1f 	bl	800d100 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015cc2:	4b29      	ldr	r3, [pc, #164]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015cc8:	4a27      	ldr	r2, [pc, #156]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015cca:	f043 0301 	orr.w	r3, r3, #1
 8015cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015cd2:	4b25      	ldr	r3, [pc, #148]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015cd8:	f003 0301 	and.w	r3, r3, #1
 8015cdc:	60fb      	str	r3, [r7, #12]
 8015cde:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8015ce0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8015ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ce8:	2302      	movs	r3, #2
 8015cea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015cfa:	230a      	movs	r3, #10
 8015cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015d04:	4619      	mov	r1, r3
 8015d06:	4819      	ldr	r0, [pc, #100]	; (8015d6c <HAL_PCD_MspInit+0x100>)
 8015d08:	f7f5 fe1c 	bl	800b944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015d14:	2300      	movs	r3, #0
 8015d16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015d24:	4619      	mov	r1, r3
 8015d26:	4811      	ldr	r0, [pc, #68]	; (8015d6c <HAL_PCD_MspInit+0x100>)
 8015d28:	f7f5 fe0c 	bl	800b944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015d2c:	4b0e      	ldr	r3, [pc, #56]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015d32:	4a0d      	ldr	r2, [pc, #52]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015d38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015d3c:	4b0a      	ldr	r3, [pc, #40]	; (8015d68 <HAL_PCD_MspInit+0xfc>)
 8015d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015d46:	60bb      	str	r3, [r7, #8]
 8015d48:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	2105      	movs	r1, #5
 8015d4e:	2065      	movs	r0, #101	; 0x65
 8015d50:	f7f5 fb8e 	bl	800b470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015d54:	2065      	movs	r0, #101	; 0x65
 8015d56:	f7f5 fba5 	bl	800b4a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015d5a:	bf00      	nop
 8015d5c:	37e0      	adds	r7, #224	; 0xe0
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}
 8015d62:	bf00      	nop
 8015d64:	40080000 	.word	0x40080000
 8015d68:	58024400 	.word	0x58024400
 8015d6c:	58020000 	.word	0x58020000

08015d70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015d84:	4619      	mov	r1, r3
 8015d86:	4610      	mov	r0, r2
 8015d88:	f7fe fc7a 	bl	8014680 <USBD_LL_SetupStage>
}
 8015d8c:	bf00      	nop
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015da6:	78fa      	ldrb	r2, [r7, #3]
 8015da8:	6879      	ldr	r1, [r7, #4]
 8015daa:	4613      	mov	r3, r2
 8015dac:	00db      	lsls	r3, r3, #3
 8015dae:	1a9b      	subs	r3, r3, r2
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	440b      	add	r3, r1
 8015db4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015db8:	681a      	ldr	r2, [r3, #0]
 8015dba:	78fb      	ldrb	r3, [r7, #3]
 8015dbc:	4619      	mov	r1, r3
 8015dbe:	f7fe fcb4 	bl	801472a <USBD_LL_DataOutStage>
}
 8015dc2:	bf00      	nop
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b082      	sub	sp, #8
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015ddc:	78fa      	ldrb	r2, [r7, #3]
 8015dde:	6879      	ldr	r1, [r7, #4]
 8015de0:	4613      	mov	r3, r2
 8015de2:	00db      	lsls	r3, r3, #3
 8015de4:	1a9b      	subs	r3, r3, r2
 8015de6:	009b      	lsls	r3, r3, #2
 8015de8:	440b      	add	r3, r1
 8015dea:	3348      	adds	r3, #72	; 0x48
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	78fb      	ldrb	r3, [r7, #3]
 8015df0:	4619      	mov	r1, r3
 8015df2:	f7fe fcfd 	bl	80147f0 <USBD_LL_DataInStage>
}
 8015df6:	bf00      	nop
 8015df8:	3708      	adds	r7, #8
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dfe:	b580      	push	{r7, lr}
 8015e00:	b082      	sub	sp, #8
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7fe fe11 	bl	8014a34 <USBD_LL_SOF>
}
 8015e12:	bf00      	nop
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}

08015e1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e1a:	b580      	push	{r7, lr}
 8015e1c:	b084      	sub	sp, #16
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015e22:	2301      	movs	r3, #1
 8015e24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d102      	bne.n	8015e34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	73fb      	strb	r3, [r7, #15]
 8015e32:	e008      	b.n	8015e46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	2b02      	cmp	r3, #2
 8015e3a:	d102      	bne.n	8015e42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	73fb      	strb	r3, [r7, #15]
 8015e40:	e001      	b.n	8015e46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015e42:	f7f4 ff07 	bl	800ac54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e4c:	7bfa      	ldrb	r2, [r7, #15]
 8015e4e:	4611      	mov	r1, r2
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7fe fdb1 	bl	80149b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7fe fd5d 	bl	801491c <USBD_LL_Reset>
}
 8015e62:	bf00      	nop
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
	...

08015e6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fe fdac 	bl	80149d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	6812      	ldr	r2, [r2, #0]
 8015e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015e92:	f043 0301 	orr.w	r3, r3, #1
 8015e96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	6a1b      	ldr	r3, [r3, #32]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d005      	beq.n	8015eac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ea0:	4b04      	ldr	r3, [pc, #16]	; (8015eb4 <HAL_PCD_SuspendCallback+0x48>)
 8015ea2:	691b      	ldr	r3, [r3, #16]
 8015ea4:	4a03      	ldr	r2, [pc, #12]	; (8015eb4 <HAL_PCD_SuspendCallback+0x48>)
 8015ea6:	f043 0306 	orr.w	r3, r3, #6
 8015eaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	e000ed00 	.word	0xe000ed00

08015eb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fe fd9c 	bl	8014a04 <USBD_LL_Resume>
}
 8015ecc:	bf00      	nop
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	460b      	mov	r3, r1
 8015ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ee6:	78fa      	ldrb	r2, [r7, #3]
 8015ee8:	4611      	mov	r1, r2
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7fe fdea 	bl	8014ac4 <USBD_LL_IsoOUTIncomplete>
}
 8015ef0:	bf00      	nop
 8015ef2:	3708      	adds	r7, #8
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	460b      	mov	r3, r1
 8015f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f0a:	78fa      	ldrb	r2, [r7, #3]
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fe fdb2 	bl	8014a78 <USBD_LL_IsoINIncomplete>
}
 8015f14:	bf00      	nop
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7fe fdf0 	bl	8014b10 <USBD_LL_DevConnected>
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}

08015f38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fe fded 	bl	8014b26 <USBD_LL_DevDisconnected>
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b082      	sub	sp, #8
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d13e      	bne.n	8015fe2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015f64:	4a21      	ldr	r2, [pc, #132]	; (8015fec <USBD_LL_Init+0x98>)
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	4a1f      	ldr	r2, [pc, #124]	; (8015fec <USBD_LL_Init+0x98>)
 8015f70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015f74:	4b1d      	ldr	r3, [pc, #116]	; (8015fec <USBD_LL_Init+0x98>)
 8015f76:	4a1e      	ldr	r2, [pc, #120]	; (8015ff0 <USBD_LL_Init+0x9c>)
 8015f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015f7a:	4b1c      	ldr	r3, [pc, #112]	; (8015fec <USBD_LL_Init+0x98>)
 8015f7c:	2209      	movs	r2, #9
 8015f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015f80:	4b1a      	ldr	r3, [pc, #104]	; (8015fec <USBD_LL_Init+0x98>)
 8015f82:	2202      	movs	r2, #2
 8015f84:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015f86:	4b19      	ldr	r3, [pc, #100]	; (8015fec <USBD_LL_Init+0x98>)
 8015f88:	2200      	movs	r2, #0
 8015f8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015f8c:	4b17      	ldr	r3, [pc, #92]	; (8015fec <USBD_LL_Init+0x98>)
 8015f8e:	2202      	movs	r2, #2
 8015f90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8015f92:	4b16      	ldr	r3, [pc, #88]	; (8015fec <USBD_LL_Init+0x98>)
 8015f94:	2201      	movs	r2, #1
 8015f96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015f98:	4b14      	ldr	r3, [pc, #80]	; (8015fec <USBD_LL_Init+0x98>)
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015f9e:	4b13      	ldr	r3, [pc, #76]	; (8015fec <USBD_LL_Init+0x98>)
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8015fa4:	4b11      	ldr	r3, [pc, #68]	; (8015fec <USBD_LL_Init+0x98>)
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8015faa:	4b10      	ldr	r3, [pc, #64]	; (8015fec <USBD_LL_Init+0x98>)
 8015fac:	2201      	movs	r2, #1
 8015fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015fb0:	4b0e      	ldr	r3, [pc, #56]	; (8015fec <USBD_LL_Init+0x98>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015fb6:	480d      	ldr	r0, [pc, #52]	; (8015fec <USBD_LL_Init+0x98>)
 8015fb8:	f7f5 fe8d 	bl	800bcd6 <HAL_PCD_Init>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d001      	beq.n	8015fc6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015fc2:	f7f4 fe47 	bl	800ac54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015fc6:	2180      	movs	r1, #128	; 0x80
 8015fc8:	4808      	ldr	r0, [pc, #32]	; (8015fec <USBD_LL_Init+0x98>)
 8015fca:	f7f7 f81e 	bl	800d00a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015fce:	2240      	movs	r2, #64	; 0x40
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	4806      	ldr	r0, [pc, #24]	; (8015fec <USBD_LL_Init+0x98>)
 8015fd4:	f7f6 ffd2 	bl	800cf7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015fd8:	2280      	movs	r2, #128	; 0x80
 8015fda:	2101      	movs	r1, #1
 8015fdc:	4803      	ldr	r0, [pc, #12]	; (8015fec <USBD_LL_Init+0x98>)
 8015fde:	f7f6 ffcd 	bl	800cf7c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015fe2:	2300      	movs	r3, #0
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3708      	adds	r7, #8
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	240344d8 	.word	0x240344d8
 8015ff0:	40080000 	.word	0x40080000

08015ff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016000:	2300      	movs	r3, #0
 8016002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801600a:	4618      	mov	r0, r3
 801600c:	f7f5 ff87 	bl	800bf1e <HAL_PCD_Start>
 8016010:	4603      	mov	r3, r0
 8016012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016014:	7bfb      	ldrb	r3, [r7, #15]
 8016016:	4618      	mov	r0, r3
 8016018:	f000 f942 	bl	80162a0 <USBD_Get_USB_Status>
 801601c:	4603      	mov	r3, r0
 801601e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016020:	7bbb      	ldrb	r3, [r7, #14]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}

0801602a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801602a:	b580      	push	{r7, lr}
 801602c:	b084      	sub	sp, #16
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]
 8016032:	4608      	mov	r0, r1
 8016034:	4611      	mov	r1, r2
 8016036:	461a      	mov	r2, r3
 8016038:	4603      	mov	r3, r0
 801603a:	70fb      	strb	r3, [r7, #3]
 801603c:	460b      	mov	r3, r1
 801603e:	70bb      	strb	r3, [r7, #2]
 8016040:	4613      	mov	r3, r2
 8016042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016044:	2300      	movs	r3, #0
 8016046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016048:	2300      	movs	r3, #0
 801604a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016052:	78bb      	ldrb	r3, [r7, #2]
 8016054:	883a      	ldrh	r2, [r7, #0]
 8016056:	78f9      	ldrb	r1, [r7, #3]
 8016058:	f7f6 fb98 	bl	800c78c <HAL_PCD_EP_Open>
 801605c:	4603      	mov	r3, r0
 801605e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016060:	7bfb      	ldrb	r3, [r7, #15]
 8016062:	4618      	mov	r0, r3
 8016064:	f000 f91c 	bl	80162a0 <USBD_Get_USB_Status>
 8016068:	4603      	mov	r3, r0
 801606a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801606c:	7bbb      	ldrb	r3, [r7, #14]
}
 801606e:	4618      	mov	r0, r3
 8016070:	3710      	adds	r7, #16
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}

08016076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016076:	b580      	push	{r7, lr}
 8016078:	b084      	sub	sp, #16
 801607a:	af00      	add	r7, sp, #0
 801607c:	6078      	str	r0, [r7, #4]
 801607e:	460b      	mov	r3, r1
 8016080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016082:	2300      	movs	r3, #0
 8016084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016086:	2300      	movs	r3, #0
 8016088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016090:	78fa      	ldrb	r2, [r7, #3]
 8016092:	4611      	mov	r1, r2
 8016094:	4618      	mov	r0, r3
 8016096:	f7f6 fbe1 	bl	800c85c <HAL_PCD_EP_Close>
 801609a:	4603      	mov	r3, r0
 801609c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801609e:	7bfb      	ldrb	r3, [r7, #15]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f000 f8fd 	bl	80162a0 <USBD_Get_USB_Status>
 80160a6:	4603      	mov	r3, r0
 80160a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	3710      	adds	r7, #16
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	460b      	mov	r3, r1
 80160be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160c0:	2300      	movs	r3, #0
 80160c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160c4:	2300      	movs	r3, #0
 80160c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80160ce:	78fa      	ldrb	r2, [r7, #3]
 80160d0:	4611      	mov	r1, r2
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7f6 fcb9 	bl	800ca4a <HAL_PCD_EP_SetStall>
 80160d8:	4603      	mov	r3, r0
 80160da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160dc:	7bfb      	ldrb	r3, [r7, #15]
 80160de:	4618      	mov	r0, r3
 80160e0:	f000 f8de 	bl	80162a0 <USBD_Get_USB_Status>
 80160e4:	4603      	mov	r3, r0
 80160e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b084      	sub	sp, #16
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
 80160fa:	460b      	mov	r3, r1
 80160fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160fe:	2300      	movs	r3, #0
 8016100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016102:	2300      	movs	r3, #0
 8016104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801610c:	78fa      	ldrb	r2, [r7, #3]
 801610e:	4611      	mov	r1, r2
 8016110:	4618      	mov	r0, r3
 8016112:	f7f6 fcfe 	bl	800cb12 <HAL_PCD_EP_ClrStall>
 8016116:	4603      	mov	r3, r0
 8016118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801611a:	7bfb      	ldrb	r3, [r7, #15]
 801611c:	4618      	mov	r0, r3
 801611e:	f000 f8bf 	bl	80162a0 <USBD_Get_USB_Status>
 8016122:	4603      	mov	r3, r0
 8016124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016126:	7bbb      	ldrb	r3, [r7, #14]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3710      	adds	r7, #16
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016130:	b480      	push	{r7}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	460b      	mov	r3, r1
 801613a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016148:	2b00      	cmp	r3, #0
 801614a:	da0b      	bge.n	8016164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801614c:	78fb      	ldrb	r3, [r7, #3]
 801614e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016152:	68f9      	ldr	r1, [r7, #12]
 8016154:	4613      	mov	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	1a9b      	subs	r3, r3, r2
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	440b      	add	r3, r1
 801615e:	333e      	adds	r3, #62	; 0x3e
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	e00b      	b.n	801617c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016164:	78fb      	ldrb	r3, [r7, #3]
 8016166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801616a:	68f9      	ldr	r1, [r7, #12]
 801616c:	4613      	mov	r3, r2
 801616e:	00db      	lsls	r3, r3, #3
 8016170:	1a9b      	subs	r3, r3, r2
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	440b      	add	r3, r1
 8016176:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801617a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801617c:	4618      	mov	r0, r3
 801617e:	3714      	adds	r7, #20
 8016180:	46bd      	mov	sp, r7
 8016182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016186:	4770      	bx	lr

08016188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	460b      	mov	r3, r1
 8016192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016194:	2300      	movs	r3, #0
 8016196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016198:	2300      	movs	r3, #0
 801619a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161a2:	78fa      	ldrb	r2, [r7, #3]
 80161a4:	4611      	mov	r1, r2
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7f6 facb 	bl	800c742 <HAL_PCD_SetAddress>
 80161ac:	4603      	mov	r3, r0
 80161ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161b0:	7bfb      	ldrb	r3, [r7, #15]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f000 f874 	bl	80162a0 <USBD_Get_USB_Status>
 80161b8:	4603      	mov	r3, r0
 80161ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}

080161c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b086      	sub	sp, #24
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	60f8      	str	r0, [r7, #12]
 80161ce:	607a      	str	r2, [r7, #4]
 80161d0:	603b      	str	r3, [r7, #0]
 80161d2:	460b      	mov	r3, r1
 80161d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161d6:	2300      	movs	r3, #0
 80161d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161da:	2300      	movs	r3, #0
 80161dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161e4:	7af9      	ldrb	r1, [r7, #11]
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	f7f6 fbe4 	bl	800c9b6 <HAL_PCD_EP_Transmit>
 80161ee:	4603      	mov	r3, r0
 80161f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161f2:	7dfb      	ldrb	r3, [r7, #23]
 80161f4:	4618      	mov	r0, r3
 80161f6:	f000 f853 	bl	80162a0 <USBD_Get_USB_Status>
 80161fa:	4603      	mov	r3, r0
 80161fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80161fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016200:	4618      	mov	r0, r3
 8016202:	3718      	adds	r7, #24
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b086      	sub	sp, #24
 801620c:	af00      	add	r7, sp, #0
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	607a      	str	r2, [r7, #4]
 8016212:	603b      	str	r3, [r7, #0]
 8016214:	460b      	mov	r3, r1
 8016216:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016218:	2300      	movs	r3, #0
 801621a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801621c:	2300      	movs	r3, #0
 801621e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016226:	7af9      	ldrb	r1, [r7, #11]
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	f7f6 fb60 	bl	800c8f0 <HAL_PCD_EP_Receive>
 8016230:	4603      	mov	r3, r0
 8016232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016234:	7dfb      	ldrb	r3, [r7, #23]
 8016236:	4618      	mov	r0, r3
 8016238:	f000 f832 	bl	80162a0 <USBD_Get_USB_Status>
 801623c:	4603      	mov	r3, r0
 801623e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016240:	7dbb      	ldrb	r3, [r7, #22]
}
 8016242:	4618      	mov	r0, r3
 8016244:	3718      	adds	r7, #24
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}

0801624a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801624a:	b580      	push	{r7, lr}
 801624c:	b082      	sub	sp, #8
 801624e:	af00      	add	r7, sp, #0
 8016250:	6078      	str	r0, [r7, #4]
 8016252:	460b      	mov	r3, r1
 8016254:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801625c:	78fa      	ldrb	r2, [r7, #3]
 801625e:	4611      	mov	r1, r2
 8016260:	4618      	mov	r0, r3
 8016262:	f7f6 fb90 	bl	800c986 <HAL_PCD_EP_GetRxCount>
 8016266:	4603      	mov	r3, r0
}
 8016268:	4618      	mov	r0, r3
 801626a:	3708      	adds	r7, #8
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016278:	4b03      	ldr	r3, [pc, #12]	; (8016288 <USBD_static_malloc+0x18>)
}
 801627a:	4618      	mov	r0, r3
 801627c:	370c      	adds	r7, #12
 801627e:	46bd      	mov	sp, r7
 8016280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop
 8016288:	240348e0 	.word	0x240348e0

0801628c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801628c:	b480      	push	{r7}
 801628e:	b083      	sub	sp, #12
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]

}
 8016294:	bf00      	nop
 8016296:	370c      	adds	r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr

080162a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b085      	sub	sp, #20
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	4603      	mov	r3, r0
 80162a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162aa:	2300      	movs	r3, #0
 80162ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80162ae:	79fb      	ldrb	r3, [r7, #7]
 80162b0:	2b03      	cmp	r3, #3
 80162b2:	d817      	bhi.n	80162e4 <USBD_Get_USB_Status+0x44>
 80162b4:	a201      	add	r2, pc, #4	; (adr r2, 80162bc <USBD_Get_USB_Status+0x1c>)
 80162b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162ba:	bf00      	nop
 80162bc:	080162cd 	.word	0x080162cd
 80162c0:	080162d3 	.word	0x080162d3
 80162c4:	080162d9 	.word	0x080162d9
 80162c8:	080162df 	.word	0x080162df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80162cc:	2300      	movs	r3, #0
 80162ce:	73fb      	strb	r3, [r7, #15]
    break;
 80162d0:	e00b      	b.n	80162ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80162d2:	2303      	movs	r3, #3
 80162d4:	73fb      	strb	r3, [r7, #15]
    break;
 80162d6:	e008      	b.n	80162ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80162d8:	2301      	movs	r3, #1
 80162da:	73fb      	strb	r3, [r7, #15]
    break;
 80162dc:	e005      	b.n	80162ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80162de:	2303      	movs	r3, #3
 80162e0:	73fb      	strb	r3, [r7, #15]
    break;
 80162e2:	e002      	b.n	80162ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80162e4:	2303      	movs	r3, #3
 80162e6:	73fb      	strb	r3, [r7, #15]
    break;
 80162e8:	bf00      	nop
  }
  return usb_status;
 80162ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3714      	adds	r7, #20
 80162f0:	46bd      	mov	sp, r7
 80162f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f6:	4770      	bx	lr

080162f8 <__errno>:
 80162f8:	4b01      	ldr	r3, [pc, #4]	; (8016300 <__errno+0x8>)
 80162fa:	6818      	ldr	r0, [r3, #0]
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	240081fc 	.word	0x240081fc

08016304 <ffs>:
 8016304:	2800      	cmp	r0, #0
 8016306:	fa90 f3a0 	rbit	r3, r0
 801630a:	fab3 f383 	clz	r3, r3
 801630e:	bf08      	it	eq
 8016310:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8016314:	1c58      	adds	r0, r3, #1
 8016316:	4770      	bx	lr

08016318 <std>:
 8016318:	2300      	movs	r3, #0
 801631a:	b510      	push	{r4, lr}
 801631c:	4604      	mov	r4, r0
 801631e:	e9c0 3300 	strd	r3, r3, [r0]
 8016322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016326:	6083      	str	r3, [r0, #8]
 8016328:	8181      	strh	r1, [r0, #12]
 801632a:	6643      	str	r3, [r0, #100]	; 0x64
 801632c:	81c2      	strh	r2, [r0, #14]
 801632e:	6183      	str	r3, [r0, #24]
 8016330:	4619      	mov	r1, r3
 8016332:	2208      	movs	r2, #8
 8016334:	305c      	adds	r0, #92	; 0x5c
 8016336:	f000 f92b 	bl	8016590 <memset>
 801633a:	4b05      	ldr	r3, [pc, #20]	; (8016350 <std+0x38>)
 801633c:	6263      	str	r3, [r4, #36]	; 0x24
 801633e:	4b05      	ldr	r3, [pc, #20]	; (8016354 <std+0x3c>)
 8016340:	62a3      	str	r3, [r4, #40]	; 0x28
 8016342:	4b05      	ldr	r3, [pc, #20]	; (8016358 <std+0x40>)
 8016344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016346:	4b05      	ldr	r3, [pc, #20]	; (801635c <std+0x44>)
 8016348:	6224      	str	r4, [r4, #32]
 801634a:	6323      	str	r3, [r4, #48]	; 0x30
 801634c:	bd10      	pop	{r4, pc}
 801634e:	bf00      	nop
 8016350:	08016971 	.word	0x08016971
 8016354:	08016993 	.word	0x08016993
 8016358:	080169cb 	.word	0x080169cb
 801635c:	080169ef 	.word	0x080169ef

08016360 <_cleanup_r>:
 8016360:	4901      	ldr	r1, [pc, #4]	; (8016368 <_cleanup_r+0x8>)
 8016362:	f000 b8af 	b.w	80164c4 <_fwalk_reent>
 8016366:	bf00      	nop
 8016368:	08016cc9 	.word	0x08016cc9

0801636c <__sfmoreglue>:
 801636c:	b570      	push	{r4, r5, r6, lr}
 801636e:	2268      	movs	r2, #104	; 0x68
 8016370:	1e4d      	subs	r5, r1, #1
 8016372:	4355      	muls	r5, r2
 8016374:	460e      	mov	r6, r1
 8016376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801637a:	f000 f97d 	bl	8016678 <_malloc_r>
 801637e:	4604      	mov	r4, r0
 8016380:	b140      	cbz	r0, 8016394 <__sfmoreglue+0x28>
 8016382:	2100      	movs	r1, #0
 8016384:	e9c0 1600 	strd	r1, r6, [r0]
 8016388:	300c      	adds	r0, #12
 801638a:	60a0      	str	r0, [r4, #8]
 801638c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016390:	f000 f8fe 	bl	8016590 <memset>
 8016394:	4620      	mov	r0, r4
 8016396:	bd70      	pop	{r4, r5, r6, pc}

08016398 <__sfp_lock_acquire>:
 8016398:	4801      	ldr	r0, [pc, #4]	; (80163a0 <__sfp_lock_acquire+0x8>)
 801639a:	f000 b8d8 	b.w	801654e <__retarget_lock_acquire_recursive>
 801639e:	bf00      	nop
 80163a0:	24034b01 	.word	0x24034b01

080163a4 <__sfp_lock_release>:
 80163a4:	4801      	ldr	r0, [pc, #4]	; (80163ac <__sfp_lock_release+0x8>)
 80163a6:	f000 b8d3 	b.w	8016550 <__retarget_lock_release_recursive>
 80163aa:	bf00      	nop
 80163ac:	24034b01 	.word	0x24034b01

080163b0 <__sinit_lock_acquire>:
 80163b0:	4801      	ldr	r0, [pc, #4]	; (80163b8 <__sinit_lock_acquire+0x8>)
 80163b2:	f000 b8cc 	b.w	801654e <__retarget_lock_acquire_recursive>
 80163b6:	bf00      	nop
 80163b8:	24034b02 	.word	0x24034b02

080163bc <__sinit_lock_release>:
 80163bc:	4801      	ldr	r0, [pc, #4]	; (80163c4 <__sinit_lock_release+0x8>)
 80163be:	f000 b8c7 	b.w	8016550 <__retarget_lock_release_recursive>
 80163c2:	bf00      	nop
 80163c4:	24034b02 	.word	0x24034b02

080163c8 <__sinit>:
 80163c8:	b510      	push	{r4, lr}
 80163ca:	4604      	mov	r4, r0
 80163cc:	f7ff fff0 	bl	80163b0 <__sinit_lock_acquire>
 80163d0:	69a3      	ldr	r3, [r4, #24]
 80163d2:	b11b      	cbz	r3, 80163dc <__sinit+0x14>
 80163d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163d8:	f7ff bff0 	b.w	80163bc <__sinit_lock_release>
 80163dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80163e0:	6523      	str	r3, [r4, #80]	; 0x50
 80163e2:	4b13      	ldr	r3, [pc, #76]	; (8016430 <__sinit+0x68>)
 80163e4:	4a13      	ldr	r2, [pc, #76]	; (8016434 <__sinit+0x6c>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80163ea:	42a3      	cmp	r3, r4
 80163ec:	bf04      	itt	eq
 80163ee:	2301      	moveq	r3, #1
 80163f0:	61a3      	streq	r3, [r4, #24]
 80163f2:	4620      	mov	r0, r4
 80163f4:	f000 f820 	bl	8016438 <__sfp>
 80163f8:	6060      	str	r0, [r4, #4]
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 f81c 	bl	8016438 <__sfp>
 8016400:	60a0      	str	r0, [r4, #8]
 8016402:	4620      	mov	r0, r4
 8016404:	f000 f818 	bl	8016438 <__sfp>
 8016408:	2200      	movs	r2, #0
 801640a:	60e0      	str	r0, [r4, #12]
 801640c:	2104      	movs	r1, #4
 801640e:	6860      	ldr	r0, [r4, #4]
 8016410:	f7ff ff82 	bl	8016318 <std>
 8016414:	68a0      	ldr	r0, [r4, #8]
 8016416:	2201      	movs	r2, #1
 8016418:	2109      	movs	r1, #9
 801641a:	f7ff ff7d 	bl	8016318 <std>
 801641e:	68e0      	ldr	r0, [r4, #12]
 8016420:	2202      	movs	r2, #2
 8016422:	2112      	movs	r1, #18
 8016424:	f7ff ff78 	bl	8016318 <std>
 8016428:	2301      	movs	r3, #1
 801642a:	61a3      	str	r3, [r4, #24]
 801642c:	e7d2      	b.n	80163d4 <__sinit+0xc>
 801642e:	bf00      	nop
 8016430:	24008540 	.word	0x24008540
 8016434:	08016361 	.word	0x08016361

08016438 <__sfp>:
 8016438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801643a:	4607      	mov	r7, r0
 801643c:	f7ff ffac 	bl	8016398 <__sfp_lock_acquire>
 8016440:	4b1e      	ldr	r3, [pc, #120]	; (80164bc <__sfp+0x84>)
 8016442:	681e      	ldr	r6, [r3, #0]
 8016444:	69b3      	ldr	r3, [r6, #24]
 8016446:	b913      	cbnz	r3, 801644e <__sfp+0x16>
 8016448:	4630      	mov	r0, r6
 801644a:	f7ff ffbd 	bl	80163c8 <__sinit>
 801644e:	3648      	adds	r6, #72	; 0x48
 8016450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016454:	3b01      	subs	r3, #1
 8016456:	d503      	bpl.n	8016460 <__sfp+0x28>
 8016458:	6833      	ldr	r3, [r6, #0]
 801645a:	b30b      	cbz	r3, 80164a0 <__sfp+0x68>
 801645c:	6836      	ldr	r6, [r6, #0]
 801645e:	e7f7      	b.n	8016450 <__sfp+0x18>
 8016460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016464:	b9d5      	cbnz	r5, 801649c <__sfp+0x64>
 8016466:	4b16      	ldr	r3, [pc, #88]	; (80164c0 <__sfp+0x88>)
 8016468:	60e3      	str	r3, [r4, #12]
 801646a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801646e:	6665      	str	r5, [r4, #100]	; 0x64
 8016470:	f000 f86c 	bl	801654c <__retarget_lock_init_recursive>
 8016474:	f7ff ff96 	bl	80163a4 <__sfp_lock_release>
 8016478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801647c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016480:	6025      	str	r5, [r4, #0]
 8016482:	61a5      	str	r5, [r4, #24]
 8016484:	2208      	movs	r2, #8
 8016486:	4629      	mov	r1, r5
 8016488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801648c:	f000 f880 	bl	8016590 <memset>
 8016490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016498:	4620      	mov	r0, r4
 801649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801649c:	3468      	adds	r4, #104	; 0x68
 801649e:	e7d9      	b.n	8016454 <__sfp+0x1c>
 80164a0:	2104      	movs	r1, #4
 80164a2:	4638      	mov	r0, r7
 80164a4:	f7ff ff62 	bl	801636c <__sfmoreglue>
 80164a8:	4604      	mov	r4, r0
 80164aa:	6030      	str	r0, [r6, #0]
 80164ac:	2800      	cmp	r0, #0
 80164ae:	d1d5      	bne.n	801645c <__sfp+0x24>
 80164b0:	f7ff ff78 	bl	80163a4 <__sfp_lock_release>
 80164b4:	230c      	movs	r3, #12
 80164b6:	603b      	str	r3, [r7, #0]
 80164b8:	e7ee      	b.n	8016498 <__sfp+0x60>
 80164ba:	bf00      	nop
 80164bc:	24008540 	.word	0x24008540
 80164c0:	ffff0001 	.word	0xffff0001

080164c4 <_fwalk_reent>:
 80164c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164c8:	4606      	mov	r6, r0
 80164ca:	4688      	mov	r8, r1
 80164cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80164d0:	2700      	movs	r7, #0
 80164d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164d6:	f1b9 0901 	subs.w	r9, r9, #1
 80164da:	d505      	bpl.n	80164e8 <_fwalk_reent+0x24>
 80164dc:	6824      	ldr	r4, [r4, #0]
 80164de:	2c00      	cmp	r4, #0
 80164e0:	d1f7      	bne.n	80164d2 <_fwalk_reent+0xe>
 80164e2:	4638      	mov	r0, r7
 80164e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164e8:	89ab      	ldrh	r3, [r5, #12]
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	d907      	bls.n	80164fe <_fwalk_reent+0x3a>
 80164ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164f2:	3301      	adds	r3, #1
 80164f4:	d003      	beq.n	80164fe <_fwalk_reent+0x3a>
 80164f6:	4629      	mov	r1, r5
 80164f8:	4630      	mov	r0, r6
 80164fa:	47c0      	blx	r8
 80164fc:	4307      	orrs	r7, r0
 80164fe:	3568      	adds	r5, #104	; 0x68
 8016500:	e7e9      	b.n	80164d6 <_fwalk_reent+0x12>
	...

08016504 <__libc_init_array>:
 8016504:	b570      	push	{r4, r5, r6, lr}
 8016506:	4d0d      	ldr	r5, [pc, #52]	; (801653c <__libc_init_array+0x38>)
 8016508:	4c0d      	ldr	r4, [pc, #52]	; (8016540 <__libc_init_array+0x3c>)
 801650a:	1b64      	subs	r4, r4, r5
 801650c:	10a4      	asrs	r4, r4, #2
 801650e:	2600      	movs	r6, #0
 8016510:	42a6      	cmp	r6, r4
 8016512:	d109      	bne.n	8016528 <__libc_init_array+0x24>
 8016514:	4d0b      	ldr	r5, [pc, #44]	; (8016544 <__libc_init_array+0x40>)
 8016516:	4c0c      	ldr	r4, [pc, #48]	; (8016548 <__libc_init_array+0x44>)
 8016518:	f000 ffb8 	bl	801748c <_init>
 801651c:	1b64      	subs	r4, r4, r5
 801651e:	10a4      	asrs	r4, r4, #2
 8016520:	2600      	movs	r6, #0
 8016522:	42a6      	cmp	r6, r4
 8016524:	d105      	bne.n	8016532 <__libc_init_array+0x2e>
 8016526:	bd70      	pop	{r4, r5, r6, pc}
 8016528:	f855 3b04 	ldr.w	r3, [r5], #4
 801652c:	4798      	blx	r3
 801652e:	3601      	adds	r6, #1
 8016530:	e7ee      	b.n	8016510 <__libc_init_array+0xc>
 8016532:	f855 3b04 	ldr.w	r3, [r5], #4
 8016536:	4798      	blx	r3
 8016538:	3601      	adds	r6, #1
 801653a:	e7f2      	b.n	8016522 <__libc_init_array+0x1e>
 801653c:	080174ac 	.word	0x080174ac
 8016540:	080174ac 	.word	0x080174ac
 8016544:	080174ac 	.word	0x080174ac
 8016548:	080174b4 	.word	0x080174b4

0801654c <__retarget_lock_init_recursive>:
 801654c:	4770      	bx	lr

0801654e <__retarget_lock_acquire_recursive>:
 801654e:	4770      	bx	lr

08016550 <__retarget_lock_release_recursive>:
 8016550:	4770      	bx	lr
	...

08016554 <malloc>:
 8016554:	4b02      	ldr	r3, [pc, #8]	; (8016560 <malloc+0xc>)
 8016556:	4601      	mov	r1, r0
 8016558:	6818      	ldr	r0, [r3, #0]
 801655a:	f000 b88d 	b.w	8016678 <_malloc_r>
 801655e:	bf00      	nop
 8016560:	240081fc 	.word	0x240081fc

08016564 <free>:
 8016564:	4b02      	ldr	r3, [pc, #8]	; (8016570 <free+0xc>)
 8016566:	4601      	mov	r1, r0
 8016568:	6818      	ldr	r0, [r3, #0]
 801656a:	f000 b819 	b.w	80165a0 <_free_r>
 801656e:	bf00      	nop
 8016570:	240081fc 	.word	0x240081fc

08016574 <memcpy>:
 8016574:	440a      	add	r2, r1
 8016576:	4291      	cmp	r1, r2
 8016578:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801657c:	d100      	bne.n	8016580 <memcpy+0xc>
 801657e:	4770      	bx	lr
 8016580:	b510      	push	{r4, lr}
 8016582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016586:	f803 4f01 	strb.w	r4, [r3, #1]!
 801658a:	4291      	cmp	r1, r2
 801658c:	d1f9      	bne.n	8016582 <memcpy+0xe>
 801658e:	bd10      	pop	{r4, pc}

08016590 <memset>:
 8016590:	4402      	add	r2, r0
 8016592:	4603      	mov	r3, r0
 8016594:	4293      	cmp	r3, r2
 8016596:	d100      	bne.n	801659a <memset+0xa>
 8016598:	4770      	bx	lr
 801659a:	f803 1b01 	strb.w	r1, [r3], #1
 801659e:	e7f9      	b.n	8016594 <memset+0x4>

080165a0 <_free_r>:
 80165a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165a2:	2900      	cmp	r1, #0
 80165a4:	d044      	beq.n	8016630 <_free_r+0x90>
 80165a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165aa:	9001      	str	r0, [sp, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	f1a1 0404 	sub.w	r4, r1, #4
 80165b2:	bfb8      	it	lt
 80165b4:	18e4      	addlt	r4, r4, r3
 80165b6:	f000 fc3b 	bl	8016e30 <__malloc_lock>
 80165ba:	4a1e      	ldr	r2, [pc, #120]	; (8016634 <_free_r+0x94>)
 80165bc:	9801      	ldr	r0, [sp, #4]
 80165be:	6813      	ldr	r3, [r2, #0]
 80165c0:	b933      	cbnz	r3, 80165d0 <_free_r+0x30>
 80165c2:	6063      	str	r3, [r4, #4]
 80165c4:	6014      	str	r4, [r2, #0]
 80165c6:	b003      	add	sp, #12
 80165c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165cc:	f000 bc36 	b.w	8016e3c <__malloc_unlock>
 80165d0:	42a3      	cmp	r3, r4
 80165d2:	d908      	bls.n	80165e6 <_free_r+0x46>
 80165d4:	6825      	ldr	r5, [r4, #0]
 80165d6:	1961      	adds	r1, r4, r5
 80165d8:	428b      	cmp	r3, r1
 80165da:	bf01      	itttt	eq
 80165dc:	6819      	ldreq	r1, [r3, #0]
 80165de:	685b      	ldreq	r3, [r3, #4]
 80165e0:	1949      	addeq	r1, r1, r5
 80165e2:	6021      	streq	r1, [r4, #0]
 80165e4:	e7ed      	b.n	80165c2 <_free_r+0x22>
 80165e6:	461a      	mov	r2, r3
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	b10b      	cbz	r3, 80165f0 <_free_r+0x50>
 80165ec:	42a3      	cmp	r3, r4
 80165ee:	d9fa      	bls.n	80165e6 <_free_r+0x46>
 80165f0:	6811      	ldr	r1, [r2, #0]
 80165f2:	1855      	adds	r5, r2, r1
 80165f4:	42a5      	cmp	r5, r4
 80165f6:	d10b      	bne.n	8016610 <_free_r+0x70>
 80165f8:	6824      	ldr	r4, [r4, #0]
 80165fa:	4421      	add	r1, r4
 80165fc:	1854      	adds	r4, r2, r1
 80165fe:	42a3      	cmp	r3, r4
 8016600:	6011      	str	r1, [r2, #0]
 8016602:	d1e0      	bne.n	80165c6 <_free_r+0x26>
 8016604:	681c      	ldr	r4, [r3, #0]
 8016606:	685b      	ldr	r3, [r3, #4]
 8016608:	6053      	str	r3, [r2, #4]
 801660a:	4421      	add	r1, r4
 801660c:	6011      	str	r1, [r2, #0]
 801660e:	e7da      	b.n	80165c6 <_free_r+0x26>
 8016610:	d902      	bls.n	8016618 <_free_r+0x78>
 8016612:	230c      	movs	r3, #12
 8016614:	6003      	str	r3, [r0, #0]
 8016616:	e7d6      	b.n	80165c6 <_free_r+0x26>
 8016618:	6825      	ldr	r5, [r4, #0]
 801661a:	1961      	adds	r1, r4, r5
 801661c:	428b      	cmp	r3, r1
 801661e:	bf04      	itt	eq
 8016620:	6819      	ldreq	r1, [r3, #0]
 8016622:	685b      	ldreq	r3, [r3, #4]
 8016624:	6063      	str	r3, [r4, #4]
 8016626:	bf04      	itt	eq
 8016628:	1949      	addeq	r1, r1, r5
 801662a:	6021      	streq	r1, [r4, #0]
 801662c:	6054      	str	r4, [r2, #4]
 801662e:	e7ca      	b.n	80165c6 <_free_r+0x26>
 8016630:	b003      	add	sp, #12
 8016632:	bd30      	pop	{r4, r5, pc}
 8016634:	24034b04 	.word	0x24034b04

08016638 <sbrk_aligned>:
 8016638:	b570      	push	{r4, r5, r6, lr}
 801663a:	4e0e      	ldr	r6, [pc, #56]	; (8016674 <sbrk_aligned+0x3c>)
 801663c:	460c      	mov	r4, r1
 801663e:	6831      	ldr	r1, [r6, #0]
 8016640:	4605      	mov	r5, r0
 8016642:	b911      	cbnz	r1, 801664a <sbrk_aligned+0x12>
 8016644:	f000 f984 	bl	8016950 <_sbrk_r>
 8016648:	6030      	str	r0, [r6, #0]
 801664a:	4621      	mov	r1, r4
 801664c:	4628      	mov	r0, r5
 801664e:	f000 f97f 	bl	8016950 <_sbrk_r>
 8016652:	1c43      	adds	r3, r0, #1
 8016654:	d00a      	beq.n	801666c <sbrk_aligned+0x34>
 8016656:	1cc4      	adds	r4, r0, #3
 8016658:	f024 0403 	bic.w	r4, r4, #3
 801665c:	42a0      	cmp	r0, r4
 801665e:	d007      	beq.n	8016670 <sbrk_aligned+0x38>
 8016660:	1a21      	subs	r1, r4, r0
 8016662:	4628      	mov	r0, r5
 8016664:	f000 f974 	bl	8016950 <_sbrk_r>
 8016668:	3001      	adds	r0, #1
 801666a:	d101      	bne.n	8016670 <sbrk_aligned+0x38>
 801666c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016670:	4620      	mov	r0, r4
 8016672:	bd70      	pop	{r4, r5, r6, pc}
 8016674:	24034b08 	.word	0x24034b08

08016678 <_malloc_r>:
 8016678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801667c:	1ccd      	adds	r5, r1, #3
 801667e:	f025 0503 	bic.w	r5, r5, #3
 8016682:	3508      	adds	r5, #8
 8016684:	2d0c      	cmp	r5, #12
 8016686:	bf38      	it	cc
 8016688:	250c      	movcc	r5, #12
 801668a:	2d00      	cmp	r5, #0
 801668c:	4607      	mov	r7, r0
 801668e:	db01      	blt.n	8016694 <_malloc_r+0x1c>
 8016690:	42a9      	cmp	r1, r5
 8016692:	d905      	bls.n	80166a0 <_malloc_r+0x28>
 8016694:	230c      	movs	r3, #12
 8016696:	603b      	str	r3, [r7, #0]
 8016698:	2600      	movs	r6, #0
 801669a:	4630      	mov	r0, r6
 801669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a0:	4e2e      	ldr	r6, [pc, #184]	; (801675c <_malloc_r+0xe4>)
 80166a2:	f000 fbc5 	bl	8016e30 <__malloc_lock>
 80166a6:	6833      	ldr	r3, [r6, #0]
 80166a8:	461c      	mov	r4, r3
 80166aa:	bb34      	cbnz	r4, 80166fa <_malloc_r+0x82>
 80166ac:	4629      	mov	r1, r5
 80166ae:	4638      	mov	r0, r7
 80166b0:	f7ff ffc2 	bl	8016638 <sbrk_aligned>
 80166b4:	1c43      	adds	r3, r0, #1
 80166b6:	4604      	mov	r4, r0
 80166b8:	d14d      	bne.n	8016756 <_malloc_r+0xde>
 80166ba:	6834      	ldr	r4, [r6, #0]
 80166bc:	4626      	mov	r6, r4
 80166be:	2e00      	cmp	r6, #0
 80166c0:	d140      	bne.n	8016744 <_malloc_r+0xcc>
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	4631      	mov	r1, r6
 80166c6:	4638      	mov	r0, r7
 80166c8:	eb04 0803 	add.w	r8, r4, r3
 80166cc:	f000 f940 	bl	8016950 <_sbrk_r>
 80166d0:	4580      	cmp	r8, r0
 80166d2:	d13a      	bne.n	801674a <_malloc_r+0xd2>
 80166d4:	6821      	ldr	r1, [r4, #0]
 80166d6:	3503      	adds	r5, #3
 80166d8:	1a6d      	subs	r5, r5, r1
 80166da:	f025 0503 	bic.w	r5, r5, #3
 80166de:	3508      	adds	r5, #8
 80166e0:	2d0c      	cmp	r5, #12
 80166e2:	bf38      	it	cc
 80166e4:	250c      	movcc	r5, #12
 80166e6:	4629      	mov	r1, r5
 80166e8:	4638      	mov	r0, r7
 80166ea:	f7ff ffa5 	bl	8016638 <sbrk_aligned>
 80166ee:	3001      	adds	r0, #1
 80166f0:	d02b      	beq.n	801674a <_malloc_r+0xd2>
 80166f2:	6823      	ldr	r3, [r4, #0]
 80166f4:	442b      	add	r3, r5
 80166f6:	6023      	str	r3, [r4, #0]
 80166f8:	e00e      	b.n	8016718 <_malloc_r+0xa0>
 80166fa:	6822      	ldr	r2, [r4, #0]
 80166fc:	1b52      	subs	r2, r2, r5
 80166fe:	d41e      	bmi.n	801673e <_malloc_r+0xc6>
 8016700:	2a0b      	cmp	r2, #11
 8016702:	d916      	bls.n	8016732 <_malloc_r+0xba>
 8016704:	1961      	adds	r1, r4, r5
 8016706:	42a3      	cmp	r3, r4
 8016708:	6025      	str	r5, [r4, #0]
 801670a:	bf18      	it	ne
 801670c:	6059      	strne	r1, [r3, #4]
 801670e:	6863      	ldr	r3, [r4, #4]
 8016710:	bf08      	it	eq
 8016712:	6031      	streq	r1, [r6, #0]
 8016714:	5162      	str	r2, [r4, r5]
 8016716:	604b      	str	r3, [r1, #4]
 8016718:	4638      	mov	r0, r7
 801671a:	f104 060b 	add.w	r6, r4, #11
 801671e:	f000 fb8d 	bl	8016e3c <__malloc_unlock>
 8016722:	f026 0607 	bic.w	r6, r6, #7
 8016726:	1d23      	adds	r3, r4, #4
 8016728:	1af2      	subs	r2, r6, r3
 801672a:	d0b6      	beq.n	801669a <_malloc_r+0x22>
 801672c:	1b9b      	subs	r3, r3, r6
 801672e:	50a3      	str	r3, [r4, r2]
 8016730:	e7b3      	b.n	801669a <_malloc_r+0x22>
 8016732:	6862      	ldr	r2, [r4, #4]
 8016734:	42a3      	cmp	r3, r4
 8016736:	bf0c      	ite	eq
 8016738:	6032      	streq	r2, [r6, #0]
 801673a:	605a      	strne	r2, [r3, #4]
 801673c:	e7ec      	b.n	8016718 <_malloc_r+0xa0>
 801673e:	4623      	mov	r3, r4
 8016740:	6864      	ldr	r4, [r4, #4]
 8016742:	e7b2      	b.n	80166aa <_malloc_r+0x32>
 8016744:	4634      	mov	r4, r6
 8016746:	6876      	ldr	r6, [r6, #4]
 8016748:	e7b9      	b.n	80166be <_malloc_r+0x46>
 801674a:	230c      	movs	r3, #12
 801674c:	603b      	str	r3, [r7, #0]
 801674e:	4638      	mov	r0, r7
 8016750:	f000 fb74 	bl	8016e3c <__malloc_unlock>
 8016754:	e7a1      	b.n	801669a <_malloc_r+0x22>
 8016756:	6025      	str	r5, [r4, #0]
 8016758:	e7de      	b.n	8016718 <_malloc_r+0xa0>
 801675a:	bf00      	nop
 801675c:	24034b04 	.word	0x24034b04

08016760 <iprintf>:
 8016760:	b40f      	push	{r0, r1, r2, r3}
 8016762:	4b0a      	ldr	r3, [pc, #40]	; (801678c <iprintf+0x2c>)
 8016764:	b513      	push	{r0, r1, r4, lr}
 8016766:	681c      	ldr	r4, [r3, #0]
 8016768:	b124      	cbz	r4, 8016774 <iprintf+0x14>
 801676a:	69a3      	ldr	r3, [r4, #24]
 801676c:	b913      	cbnz	r3, 8016774 <iprintf+0x14>
 801676e:	4620      	mov	r0, r4
 8016770:	f7ff fe2a 	bl	80163c8 <__sinit>
 8016774:	ab05      	add	r3, sp, #20
 8016776:	9a04      	ldr	r2, [sp, #16]
 8016778:	68a1      	ldr	r1, [r4, #8]
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	4620      	mov	r0, r4
 801677e:	f000 fb8d 	bl	8016e9c <_vfiprintf_r>
 8016782:	b002      	add	sp, #8
 8016784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016788:	b004      	add	sp, #16
 801678a:	4770      	bx	lr
 801678c:	240081fc 	.word	0x240081fc

08016790 <_puts_r>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	460e      	mov	r6, r1
 8016794:	4605      	mov	r5, r0
 8016796:	b118      	cbz	r0, 80167a0 <_puts_r+0x10>
 8016798:	6983      	ldr	r3, [r0, #24]
 801679a:	b90b      	cbnz	r3, 80167a0 <_puts_r+0x10>
 801679c:	f7ff fe14 	bl	80163c8 <__sinit>
 80167a0:	69ab      	ldr	r3, [r5, #24]
 80167a2:	68ac      	ldr	r4, [r5, #8]
 80167a4:	b913      	cbnz	r3, 80167ac <_puts_r+0x1c>
 80167a6:	4628      	mov	r0, r5
 80167a8:	f7ff fe0e 	bl	80163c8 <__sinit>
 80167ac:	4b2c      	ldr	r3, [pc, #176]	; (8016860 <_puts_r+0xd0>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d120      	bne.n	80167f4 <_puts_r+0x64>
 80167b2:	686c      	ldr	r4, [r5, #4]
 80167b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167b6:	07db      	lsls	r3, r3, #31
 80167b8:	d405      	bmi.n	80167c6 <_puts_r+0x36>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	0598      	lsls	r0, r3, #22
 80167be:	d402      	bmi.n	80167c6 <_puts_r+0x36>
 80167c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167c2:	f7ff fec4 	bl	801654e <__retarget_lock_acquire_recursive>
 80167c6:	89a3      	ldrh	r3, [r4, #12]
 80167c8:	0719      	lsls	r1, r3, #28
 80167ca:	d51d      	bpl.n	8016808 <_puts_r+0x78>
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	b1db      	cbz	r3, 8016808 <_puts_r+0x78>
 80167d0:	3e01      	subs	r6, #1
 80167d2:	68a3      	ldr	r3, [r4, #8]
 80167d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80167d8:	3b01      	subs	r3, #1
 80167da:	60a3      	str	r3, [r4, #8]
 80167dc:	bb39      	cbnz	r1, 801682e <_puts_r+0x9e>
 80167de:	2b00      	cmp	r3, #0
 80167e0:	da38      	bge.n	8016854 <_puts_r+0xc4>
 80167e2:	4622      	mov	r2, r4
 80167e4:	210a      	movs	r1, #10
 80167e6:	4628      	mov	r0, r5
 80167e8:	f000 f906 	bl	80169f8 <__swbuf_r>
 80167ec:	3001      	adds	r0, #1
 80167ee:	d011      	beq.n	8016814 <_puts_r+0x84>
 80167f0:	250a      	movs	r5, #10
 80167f2:	e011      	b.n	8016818 <_puts_r+0x88>
 80167f4:	4b1b      	ldr	r3, [pc, #108]	; (8016864 <_puts_r+0xd4>)
 80167f6:	429c      	cmp	r4, r3
 80167f8:	d101      	bne.n	80167fe <_puts_r+0x6e>
 80167fa:	68ac      	ldr	r4, [r5, #8]
 80167fc:	e7da      	b.n	80167b4 <_puts_r+0x24>
 80167fe:	4b1a      	ldr	r3, [pc, #104]	; (8016868 <_puts_r+0xd8>)
 8016800:	429c      	cmp	r4, r3
 8016802:	bf08      	it	eq
 8016804:	68ec      	ldreq	r4, [r5, #12]
 8016806:	e7d5      	b.n	80167b4 <_puts_r+0x24>
 8016808:	4621      	mov	r1, r4
 801680a:	4628      	mov	r0, r5
 801680c:	f000 f958 	bl	8016ac0 <__swsetup_r>
 8016810:	2800      	cmp	r0, #0
 8016812:	d0dd      	beq.n	80167d0 <_puts_r+0x40>
 8016814:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801681a:	07da      	lsls	r2, r3, #31
 801681c:	d405      	bmi.n	801682a <_puts_r+0x9a>
 801681e:	89a3      	ldrh	r3, [r4, #12]
 8016820:	059b      	lsls	r3, r3, #22
 8016822:	d402      	bmi.n	801682a <_puts_r+0x9a>
 8016824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016826:	f7ff fe93 	bl	8016550 <__retarget_lock_release_recursive>
 801682a:	4628      	mov	r0, r5
 801682c:	bd70      	pop	{r4, r5, r6, pc}
 801682e:	2b00      	cmp	r3, #0
 8016830:	da04      	bge.n	801683c <_puts_r+0xac>
 8016832:	69a2      	ldr	r2, [r4, #24]
 8016834:	429a      	cmp	r2, r3
 8016836:	dc06      	bgt.n	8016846 <_puts_r+0xb6>
 8016838:	290a      	cmp	r1, #10
 801683a:	d004      	beq.n	8016846 <_puts_r+0xb6>
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	6022      	str	r2, [r4, #0]
 8016842:	7019      	strb	r1, [r3, #0]
 8016844:	e7c5      	b.n	80167d2 <_puts_r+0x42>
 8016846:	4622      	mov	r2, r4
 8016848:	4628      	mov	r0, r5
 801684a:	f000 f8d5 	bl	80169f8 <__swbuf_r>
 801684e:	3001      	adds	r0, #1
 8016850:	d1bf      	bne.n	80167d2 <_puts_r+0x42>
 8016852:	e7df      	b.n	8016814 <_puts_r+0x84>
 8016854:	6823      	ldr	r3, [r4, #0]
 8016856:	250a      	movs	r5, #10
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	6022      	str	r2, [r4, #0]
 801685c:	701d      	strb	r5, [r3, #0]
 801685e:	e7db      	b.n	8016818 <_puts_r+0x88>
 8016860:	24008500 	.word	0x24008500
 8016864:	24008520 	.word	0x24008520
 8016868:	240084e0 	.word	0x240084e0

0801686c <puts>:
 801686c:	4b02      	ldr	r3, [pc, #8]	; (8016878 <puts+0xc>)
 801686e:	4601      	mov	r1, r0
 8016870:	6818      	ldr	r0, [r3, #0]
 8016872:	f7ff bf8d 	b.w	8016790 <_puts_r>
 8016876:	bf00      	nop
 8016878:	240081fc 	.word	0x240081fc

0801687c <cleanup_glue>:
 801687c:	b538      	push	{r3, r4, r5, lr}
 801687e:	460c      	mov	r4, r1
 8016880:	6809      	ldr	r1, [r1, #0]
 8016882:	4605      	mov	r5, r0
 8016884:	b109      	cbz	r1, 801688a <cleanup_glue+0xe>
 8016886:	f7ff fff9 	bl	801687c <cleanup_glue>
 801688a:	4621      	mov	r1, r4
 801688c:	4628      	mov	r0, r5
 801688e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016892:	f7ff be85 	b.w	80165a0 <_free_r>
	...

08016898 <_reclaim_reent>:
 8016898:	4b2c      	ldr	r3, [pc, #176]	; (801694c <_reclaim_reent+0xb4>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4283      	cmp	r3, r0
 801689e:	b570      	push	{r4, r5, r6, lr}
 80168a0:	4604      	mov	r4, r0
 80168a2:	d051      	beq.n	8016948 <_reclaim_reent+0xb0>
 80168a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80168a6:	b143      	cbz	r3, 80168ba <_reclaim_reent+0x22>
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d14a      	bne.n	8016944 <_reclaim_reent+0xac>
 80168ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168b0:	6819      	ldr	r1, [r3, #0]
 80168b2:	b111      	cbz	r1, 80168ba <_reclaim_reent+0x22>
 80168b4:	4620      	mov	r0, r4
 80168b6:	f7ff fe73 	bl	80165a0 <_free_r>
 80168ba:	6961      	ldr	r1, [r4, #20]
 80168bc:	b111      	cbz	r1, 80168c4 <_reclaim_reent+0x2c>
 80168be:	4620      	mov	r0, r4
 80168c0:	f7ff fe6e 	bl	80165a0 <_free_r>
 80168c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80168c6:	b111      	cbz	r1, 80168ce <_reclaim_reent+0x36>
 80168c8:	4620      	mov	r0, r4
 80168ca:	f7ff fe69 	bl	80165a0 <_free_r>
 80168ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80168d0:	b111      	cbz	r1, 80168d8 <_reclaim_reent+0x40>
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7ff fe64 	bl	80165a0 <_free_r>
 80168d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80168da:	b111      	cbz	r1, 80168e2 <_reclaim_reent+0x4a>
 80168dc:	4620      	mov	r0, r4
 80168de:	f7ff fe5f 	bl	80165a0 <_free_r>
 80168e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80168e4:	b111      	cbz	r1, 80168ec <_reclaim_reent+0x54>
 80168e6:	4620      	mov	r0, r4
 80168e8:	f7ff fe5a 	bl	80165a0 <_free_r>
 80168ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80168ee:	b111      	cbz	r1, 80168f6 <_reclaim_reent+0x5e>
 80168f0:	4620      	mov	r0, r4
 80168f2:	f7ff fe55 	bl	80165a0 <_free_r>
 80168f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80168f8:	b111      	cbz	r1, 8016900 <_reclaim_reent+0x68>
 80168fa:	4620      	mov	r0, r4
 80168fc:	f7ff fe50 	bl	80165a0 <_free_r>
 8016900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016902:	b111      	cbz	r1, 801690a <_reclaim_reent+0x72>
 8016904:	4620      	mov	r0, r4
 8016906:	f7ff fe4b 	bl	80165a0 <_free_r>
 801690a:	69a3      	ldr	r3, [r4, #24]
 801690c:	b1e3      	cbz	r3, 8016948 <_reclaim_reent+0xb0>
 801690e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016910:	4620      	mov	r0, r4
 8016912:	4798      	blx	r3
 8016914:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016916:	b1b9      	cbz	r1, 8016948 <_reclaim_reent+0xb0>
 8016918:	4620      	mov	r0, r4
 801691a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801691e:	f7ff bfad 	b.w	801687c <cleanup_glue>
 8016922:	5949      	ldr	r1, [r1, r5]
 8016924:	b941      	cbnz	r1, 8016938 <_reclaim_reent+0xa0>
 8016926:	3504      	adds	r5, #4
 8016928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801692a:	2d80      	cmp	r5, #128	; 0x80
 801692c:	68d9      	ldr	r1, [r3, #12]
 801692e:	d1f8      	bne.n	8016922 <_reclaim_reent+0x8a>
 8016930:	4620      	mov	r0, r4
 8016932:	f7ff fe35 	bl	80165a0 <_free_r>
 8016936:	e7ba      	b.n	80168ae <_reclaim_reent+0x16>
 8016938:	680e      	ldr	r6, [r1, #0]
 801693a:	4620      	mov	r0, r4
 801693c:	f7ff fe30 	bl	80165a0 <_free_r>
 8016940:	4631      	mov	r1, r6
 8016942:	e7ef      	b.n	8016924 <_reclaim_reent+0x8c>
 8016944:	2500      	movs	r5, #0
 8016946:	e7ef      	b.n	8016928 <_reclaim_reent+0x90>
 8016948:	bd70      	pop	{r4, r5, r6, pc}
 801694a:	bf00      	nop
 801694c:	240081fc 	.word	0x240081fc

08016950 <_sbrk_r>:
 8016950:	b538      	push	{r3, r4, r5, lr}
 8016952:	4d06      	ldr	r5, [pc, #24]	; (801696c <_sbrk_r+0x1c>)
 8016954:	2300      	movs	r3, #0
 8016956:	4604      	mov	r4, r0
 8016958:	4608      	mov	r0, r1
 801695a:	602b      	str	r3, [r5, #0]
 801695c:	f7f4 fb58 	bl	800b010 <_sbrk>
 8016960:	1c43      	adds	r3, r0, #1
 8016962:	d102      	bne.n	801696a <_sbrk_r+0x1a>
 8016964:	682b      	ldr	r3, [r5, #0]
 8016966:	b103      	cbz	r3, 801696a <_sbrk_r+0x1a>
 8016968:	6023      	str	r3, [r4, #0]
 801696a:	bd38      	pop	{r3, r4, r5, pc}
 801696c:	24034b0c 	.word	0x24034b0c

08016970 <__sread>:
 8016970:	b510      	push	{r4, lr}
 8016972:	460c      	mov	r4, r1
 8016974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016978:	f000 fd54 	bl	8017424 <_read_r>
 801697c:	2800      	cmp	r0, #0
 801697e:	bfab      	itete	ge
 8016980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016982:	89a3      	ldrhlt	r3, [r4, #12]
 8016984:	181b      	addge	r3, r3, r0
 8016986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801698a:	bfac      	ite	ge
 801698c:	6563      	strge	r3, [r4, #84]	; 0x54
 801698e:	81a3      	strhlt	r3, [r4, #12]
 8016990:	bd10      	pop	{r4, pc}

08016992 <__swrite>:
 8016992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016996:	461f      	mov	r7, r3
 8016998:	898b      	ldrh	r3, [r1, #12]
 801699a:	05db      	lsls	r3, r3, #23
 801699c:	4605      	mov	r5, r0
 801699e:	460c      	mov	r4, r1
 80169a0:	4616      	mov	r6, r2
 80169a2:	d505      	bpl.n	80169b0 <__swrite+0x1e>
 80169a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a8:	2302      	movs	r3, #2
 80169aa:	2200      	movs	r2, #0
 80169ac:	f000 f9c8 	bl	8016d40 <_lseek_r>
 80169b0:	89a3      	ldrh	r3, [r4, #12]
 80169b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169ba:	81a3      	strh	r3, [r4, #12]
 80169bc:	4632      	mov	r2, r6
 80169be:	463b      	mov	r3, r7
 80169c0:	4628      	mov	r0, r5
 80169c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169c6:	f000 b869 	b.w	8016a9c <_write_r>

080169ca <__sseek>:
 80169ca:	b510      	push	{r4, lr}
 80169cc:	460c      	mov	r4, r1
 80169ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169d2:	f000 f9b5 	bl	8016d40 <_lseek_r>
 80169d6:	1c43      	adds	r3, r0, #1
 80169d8:	89a3      	ldrh	r3, [r4, #12]
 80169da:	bf15      	itete	ne
 80169dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80169de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80169e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80169e6:	81a3      	strheq	r3, [r4, #12]
 80169e8:	bf18      	it	ne
 80169ea:	81a3      	strhne	r3, [r4, #12]
 80169ec:	bd10      	pop	{r4, pc}

080169ee <__sclose>:
 80169ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169f2:	f000 b8d3 	b.w	8016b9c <_close_r>
	...

080169f8 <__swbuf_r>:
 80169f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fa:	460e      	mov	r6, r1
 80169fc:	4614      	mov	r4, r2
 80169fe:	4605      	mov	r5, r0
 8016a00:	b118      	cbz	r0, 8016a0a <__swbuf_r+0x12>
 8016a02:	6983      	ldr	r3, [r0, #24]
 8016a04:	b90b      	cbnz	r3, 8016a0a <__swbuf_r+0x12>
 8016a06:	f7ff fcdf 	bl	80163c8 <__sinit>
 8016a0a:	4b21      	ldr	r3, [pc, #132]	; (8016a90 <__swbuf_r+0x98>)
 8016a0c:	429c      	cmp	r4, r3
 8016a0e:	d12b      	bne.n	8016a68 <__swbuf_r+0x70>
 8016a10:	686c      	ldr	r4, [r5, #4]
 8016a12:	69a3      	ldr	r3, [r4, #24]
 8016a14:	60a3      	str	r3, [r4, #8]
 8016a16:	89a3      	ldrh	r3, [r4, #12]
 8016a18:	071a      	lsls	r2, r3, #28
 8016a1a:	d52f      	bpl.n	8016a7c <__swbuf_r+0x84>
 8016a1c:	6923      	ldr	r3, [r4, #16]
 8016a1e:	b36b      	cbz	r3, 8016a7c <__swbuf_r+0x84>
 8016a20:	6923      	ldr	r3, [r4, #16]
 8016a22:	6820      	ldr	r0, [r4, #0]
 8016a24:	1ac0      	subs	r0, r0, r3
 8016a26:	6963      	ldr	r3, [r4, #20]
 8016a28:	b2f6      	uxtb	r6, r6
 8016a2a:	4283      	cmp	r3, r0
 8016a2c:	4637      	mov	r7, r6
 8016a2e:	dc04      	bgt.n	8016a3a <__swbuf_r+0x42>
 8016a30:	4621      	mov	r1, r4
 8016a32:	4628      	mov	r0, r5
 8016a34:	f000 f948 	bl	8016cc8 <_fflush_r>
 8016a38:	bb30      	cbnz	r0, 8016a88 <__swbuf_r+0x90>
 8016a3a:	68a3      	ldr	r3, [r4, #8]
 8016a3c:	3b01      	subs	r3, #1
 8016a3e:	60a3      	str	r3, [r4, #8]
 8016a40:	6823      	ldr	r3, [r4, #0]
 8016a42:	1c5a      	adds	r2, r3, #1
 8016a44:	6022      	str	r2, [r4, #0]
 8016a46:	701e      	strb	r6, [r3, #0]
 8016a48:	6963      	ldr	r3, [r4, #20]
 8016a4a:	3001      	adds	r0, #1
 8016a4c:	4283      	cmp	r3, r0
 8016a4e:	d004      	beq.n	8016a5a <__swbuf_r+0x62>
 8016a50:	89a3      	ldrh	r3, [r4, #12]
 8016a52:	07db      	lsls	r3, r3, #31
 8016a54:	d506      	bpl.n	8016a64 <__swbuf_r+0x6c>
 8016a56:	2e0a      	cmp	r6, #10
 8016a58:	d104      	bne.n	8016a64 <__swbuf_r+0x6c>
 8016a5a:	4621      	mov	r1, r4
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	f000 f933 	bl	8016cc8 <_fflush_r>
 8016a62:	b988      	cbnz	r0, 8016a88 <__swbuf_r+0x90>
 8016a64:	4638      	mov	r0, r7
 8016a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a68:	4b0a      	ldr	r3, [pc, #40]	; (8016a94 <__swbuf_r+0x9c>)
 8016a6a:	429c      	cmp	r4, r3
 8016a6c:	d101      	bne.n	8016a72 <__swbuf_r+0x7a>
 8016a6e:	68ac      	ldr	r4, [r5, #8]
 8016a70:	e7cf      	b.n	8016a12 <__swbuf_r+0x1a>
 8016a72:	4b09      	ldr	r3, [pc, #36]	; (8016a98 <__swbuf_r+0xa0>)
 8016a74:	429c      	cmp	r4, r3
 8016a76:	bf08      	it	eq
 8016a78:	68ec      	ldreq	r4, [r5, #12]
 8016a7a:	e7ca      	b.n	8016a12 <__swbuf_r+0x1a>
 8016a7c:	4621      	mov	r1, r4
 8016a7e:	4628      	mov	r0, r5
 8016a80:	f000 f81e 	bl	8016ac0 <__swsetup_r>
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d0cb      	beq.n	8016a20 <__swbuf_r+0x28>
 8016a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016a8c:	e7ea      	b.n	8016a64 <__swbuf_r+0x6c>
 8016a8e:	bf00      	nop
 8016a90:	24008500 	.word	0x24008500
 8016a94:	24008520 	.word	0x24008520
 8016a98:	240084e0 	.word	0x240084e0

08016a9c <_write_r>:
 8016a9c:	b538      	push	{r3, r4, r5, lr}
 8016a9e:	4d07      	ldr	r5, [pc, #28]	; (8016abc <_write_r+0x20>)
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	4608      	mov	r0, r1
 8016aa4:	4611      	mov	r1, r2
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	602a      	str	r2, [r5, #0]
 8016aaa:	461a      	mov	r2, r3
 8016aac:	f7f4 fa5f 	bl	800af6e <_write>
 8016ab0:	1c43      	adds	r3, r0, #1
 8016ab2:	d102      	bne.n	8016aba <_write_r+0x1e>
 8016ab4:	682b      	ldr	r3, [r5, #0]
 8016ab6:	b103      	cbz	r3, 8016aba <_write_r+0x1e>
 8016ab8:	6023      	str	r3, [r4, #0]
 8016aba:	bd38      	pop	{r3, r4, r5, pc}
 8016abc:	24034b0c 	.word	0x24034b0c

08016ac0 <__swsetup_r>:
 8016ac0:	4b32      	ldr	r3, [pc, #200]	; (8016b8c <__swsetup_r+0xcc>)
 8016ac2:	b570      	push	{r4, r5, r6, lr}
 8016ac4:	681d      	ldr	r5, [r3, #0]
 8016ac6:	4606      	mov	r6, r0
 8016ac8:	460c      	mov	r4, r1
 8016aca:	b125      	cbz	r5, 8016ad6 <__swsetup_r+0x16>
 8016acc:	69ab      	ldr	r3, [r5, #24]
 8016ace:	b913      	cbnz	r3, 8016ad6 <__swsetup_r+0x16>
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	f7ff fc79 	bl	80163c8 <__sinit>
 8016ad6:	4b2e      	ldr	r3, [pc, #184]	; (8016b90 <__swsetup_r+0xd0>)
 8016ad8:	429c      	cmp	r4, r3
 8016ada:	d10f      	bne.n	8016afc <__swsetup_r+0x3c>
 8016adc:	686c      	ldr	r4, [r5, #4]
 8016ade:	89a3      	ldrh	r3, [r4, #12]
 8016ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ae4:	0719      	lsls	r1, r3, #28
 8016ae6:	d42c      	bmi.n	8016b42 <__swsetup_r+0x82>
 8016ae8:	06dd      	lsls	r5, r3, #27
 8016aea:	d411      	bmi.n	8016b10 <__swsetup_r+0x50>
 8016aec:	2309      	movs	r3, #9
 8016aee:	6033      	str	r3, [r6, #0]
 8016af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016af4:	81a3      	strh	r3, [r4, #12]
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016afa:	e03e      	b.n	8016b7a <__swsetup_r+0xba>
 8016afc:	4b25      	ldr	r3, [pc, #148]	; (8016b94 <__swsetup_r+0xd4>)
 8016afe:	429c      	cmp	r4, r3
 8016b00:	d101      	bne.n	8016b06 <__swsetup_r+0x46>
 8016b02:	68ac      	ldr	r4, [r5, #8]
 8016b04:	e7eb      	b.n	8016ade <__swsetup_r+0x1e>
 8016b06:	4b24      	ldr	r3, [pc, #144]	; (8016b98 <__swsetup_r+0xd8>)
 8016b08:	429c      	cmp	r4, r3
 8016b0a:	bf08      	it	eq
 8016b0c:	68ec      	ldreq	r4, [r5, #12]
 8016b0e:	e7e6      	b.n	8016ade <__swsetup_r+0x1e>
 8016b10:	0758      	lsls	r0, r3, #29
 8016b12:	d512      	bpl.n	8016b3a <__swsetup_r+0x7a>
 8016b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b16:	b141      	cbz	r1, 8016b2a <__swsetup_r+0x6a>
 8016b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b1c:	4299      	cmp	r1, r3
 8016b1e:	d002      	beq.n	8016b26 <__swsetup_r+0x66>
 8016b20:	4630      	mov	r0, r6
 8016b22:	f7ff fd3d 	bl	80165a0 <_free_r>
 8016b26:	2300      	movs	r3, #0
 8016b28:	6363      	str	r3, [r4, #52]	; 0x34
 8016b2a:	89a3      	ldrh	r3, [r4, #12]
 8016b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b30:	81a3      	strh	r3, [r4, #12]
 8016b32:	2300      	movs	r3, #0
 8016b34:	6063      	str	r3, [r4, #4]
 8016b36:	6923      	ldr	r3, [r4, #16]
 8016b38:	6023      	str	r3, [r4, #0]
 8016b3a:	89a3      	ldrh	r3, [r4, #12]
 8016b3c:	f043 0308 	orr.w	r3, r3, #8
 8016b40:	81a3      	strh	r3, [r4, #12]
 8016b42:	6923      	ldr	r3, [r4, #16]
 8016b44:	b94b      	cbnz	r3, 8016b5a <__swsetup_r+0x9a>
 8016b46:	89a3      	ldrh	r3, [r4, #12]
 8016b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b50:	d003      	beq.n	8016b5a <__swsetup_r+0x9a>
 8016b52:	4621      	mov	r1, r4
 8016b54:	4630      	mov	r0, r6
 8016b56:	f000 f92b 	bl	8016db0 <__smakebuf_r>
 8016b5a:	89a0      	ldrh	r0, [r4, #12]
 8016b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b60:	f010 0301 	ands.w	r3, r0, #1
 8016b64:	d00a      	beq.n	8016b7c <__swsetup_r+0xbc>
 8016b66:	2300      	movs	r3, #0
 8016b68:	60a3      	str	r3, [r4, #8]
 8016b6a:	6963      	ldr	r3, [r4, #20]
 8016b6c:	425b      	negs	r3, r3
 8016b6e:	61a3      	str	r3, [r4, #24]
 8016b70:	6923      	ldr	r3, [r4, #16]
 8016b72:	b943      	cbnz	r3, 8016b86 <__swsetup_r+0xc6>
 8016b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b78:	d1ba      	bne.n	8016af0 <__swsetup_r+0x30>
 8016b7a:	bd70      	pop	{r4, r5, r6, pc}
 8016b7c:	0781      	lsls	r1, r0, #30
 8016b7e:	bf58      	it	pl
 8016b80:	6963      	ldrpl	r3, [r4, #20]
 8016b82:	60a3      	str	r3, [r4, #8]
 8016b84:	e7f4      	b.n	8016b70 <__swsetup_r+0xb0>
 8016b86:	2000      	movs	r0, #0
 8016b88:	e7f7      	b.n	8016b7a <__swsetup_r+0xba>
 8016b8a:	bf00      	nop
 8016b8c:	240081fc 	.word	0x240081fc
 8016b90:	24008500 	.word	0x24008500
 8016b94:	24008520 	.word	0x24008520
 8016b98:	240084e0 	.word	0x240084e0

08016b9c <_close_r>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4d06      	ldr	r5, [pc, #24]	; (8016bb8 <_close_r+0x1c>)
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	4608      	mov	r0, r1
 8016ba6:	602b      	str	r3, [r5, #0]
 8016ba8:	f7f4 f9fd 	bl	800afa6 <_close>
 8016bac:	1c43      	adds	r3, r0, #1
 8016bae:	d102      	bne.n	8016bb6 <_close_r+0x1a>
 8016bb0:	682b      	ldr	r3, [r5, #0]
 8016bb2:	b103      	cbz	r3, 8016bb6 <_close_r+0x1a>
 8016bb4:	6023      	str	r3, [r4, #0]
 8016bb6:	bd38      	pop	{r3, r4, r5, pc}
 8016bb8:	24034b0c 	.word	0x24034b0c

08016bbc <__sflush_r>:
 8016bbc:	898a      	ldrh	r2, [r1, #12]
 8016bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc2:	4605      	mov	r5, r0
 8016bc4:	0710      	lsls	r0, r2, #28
 8016bc6:	460c      	mov	r4, r1
 8016bc8:	d458      	bmi.n	8016c7c <__sflush_r+0xc0>
 8016bca:	684b      	ldr	r3, [r1, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	dc05      	bgt.n	8016bdc <__sflush_r+0x20>
 8016bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	dc02      	bgt.n	8016bdc <__sflush_r+0x20>
 8016bd6:	2000      	movs	r0, #0
 8016bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bde:	2e00      	cmp	r6, #0
 8016be0:	d0f9      	beq.n	8016bd6 <__sflush_r+0x1a>
 8016be2:	2300      	movs	r3, #0
 8016be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016be8:	682f      	ldr	r7, [r5, #0]
 8016bea:	602b      	str	r3, [r5, #0]
 8016bec:	d032      	beq.n	8016c54 <__sflush_r+0x98>
 8016bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bf0:	89a3      	ldrh	r3, [r4, #12]
 8016bf2:	075a      	lsls	r2, r3, #29
 8016bf4:	d505      	bpl.n	8016c02 <__sflush_r+0x46>
 8016bf6:	6863      	ldr	r3, [r4, #4]
 8016bf8:	1ac0      	subs	r0, r0, r3
 8016bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bfc:	b10b      	cbz	r3, 8016c02 <__sflush_r+0x46>
 8016bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c00:	1ac0      	subs	r0, r0, r3
 8016c02:	2300      	movs	r3, #0
 8016c04:	4602      	mov	r2, r0
 8016c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c08:	6a21      	ldr	r1, [r4, #32]
 8016c0a:	4628      	mov	r0, r5
 8016c0c:	47b0      	blx	r6
 8016c0e:	1c43      	adds	r3, r0, #1
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	d106      	bne.n	8016c22 <__sflush_r+0x66>
 8016c14:	6829      	ldr	r1, [r5, #0]
 8016c16:	291d      	cmp	r1, #29
 8016c18:	d82c      	bhi.n	8016c74 <__sflush_r+0xb8>
 8016c1a:	4a2a      	ldr	r2, [pc, #168]	; (8016cc4 <__sflush_r+0x108>)
 8016c1c:	40ca      	lsrs	r2, r1
 8016c1e:	07d6      	lsls	r6, r2, #31
 8016c20:	d528      	bpl.n	8016c74 <__sflush_r+0xb8>
 8016c22:	2200      	movs	r2, #0
 8016c24:	6062      	str	r2, [r4, #4]
 8016c26:	04d9      	lsls	r1, r3, #19
 8016c28:	6922      	ldr	r2, [r4, #16]
 8016c2a:	6022      	str	r2, [r4, #0]
 8016c2c:	d504      	bpl.n	8016c38 <__sflush_r+0x7c>
 8016c2e:	1c42      	adds	r2, r0, #1
 8016c30:	d101      	bne.n	8016c36 <__sflush_r+0x7a>
 8016c32:	682b      	ldr	r3, [r5, #0]
 8016c34:	b903      	cbnz	r3, 8016c38 <__sflush_r+0x7c>
 8016c36:	6560      	str	r0, [r4, #84]	; 0x54
 8016c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c3a:	602f      	str	r7, [r5, #0]
 8016c3c:	2900      	cmp	r1, #0
 8016c3e:	d0ca      	beq.n	8016bd6 <__sflush_r+0x1a>
 8016c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c44:	4299      	cmp	r1, r3
 8016c46:	d002      	beq.n	8016c4e <__sflush_r+0x92>
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f7ff fca9 	bl	80165a0 <_free_r>
 8016c4e:	2000      	movs	r0, #0
 8016c50:	6360      	str	r0, [r4, #52]	; 0x34
 8016c52:	e7c1      	b.n	8016bd8 <__sflush_r+0x1c>
 8016c54:	6a21      	ldr	r1, [r4, #32]
 8016c56:	2301      	movs	r3, #1
 8016c58:	4628      	mov	r0, r5
 8016c5a:	47b0      	blx	r6
 8016c5c:	1c41      	adds	r1, r0, #1
 8016c5e:	d1c7      	bne.n	8016bf0 <__sflush_r+0x34>
 8016c60:	682b      	ldr	r3, [r5, #0]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d0c4      	beq.n	8016bf0 <__sflush_r+0x34>
 8016c66:	2b1d      	cmp	r3, #29
 8016c68:	d001      	beq.n	8016c6e <__sflush_r+0xb2>
 8016c6a:	2b16      	cmp	r3, #22
 8016c6c:	d101      	bne.n	8016c72 <__sflush_r+0xb6>
 8016c6e:	602f      	str	r7, [r5, #0]
 8016c70:	e7b1      	b.n	8016bd6 <__sflush_r+0x1a>
 8016c72:	89a3      	ldrh	r3, [r4, #12]
 8016c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c78:	81a3      	strh	r3, [r4, #12]
 8016c7a:	e7ad      	b.n	8016bd8 <__sflush_r+0x1c>
 8016c7c:	690f      	ldr	r7, [r1, #16]
 8016c7e:	2f00      	cmp	r7, #0
 8016c80:	d0a9      	beq.n	8016bd6 <__sflush_r+0x1a>
 8016c82:	0793      	lsls	r3, r2, #30
 8016c84:	680e      	ldr	r6, [r1, #0]
 8016c86:	bf08      	it	eq
 8016c88:	694b      	ldreq	r3, [r1, #20]
 8016c8a:	600f      	str	r7, [r1, #0]
 8016c8c:	bf18      	it	ne
 8016c8e:	2300      	movne	r3, #0
 8016c90:	eba6 0807 	sub.w	r8, r6, r7
 8016c94:	608b      	str	r3, [r1, #8]
 8016c96:	f1b8 0f00 	cmp.w	r8, #0
 8016c9a:	dd9c      	ble.n	8016bd6 <__sflush_r+0x1a>
 8016c9c:	6a21      	ldr	r1, [r4, #32]
 8016c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ca0:	4643      	mov	r3, r8
 8016ca2:	463a      	mov	r2, r7
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	47b0      	blx	r6
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	dc06      	bgt.n	8016cba <__sflush_r+0xfe>
 8016cac:	89a3      	ldrh	r3, [r4, #12]
 8016cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cb2:	81a3      	strh	r3, [r4, #12]
 8016cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cb8:	e78e      	b.n	8016bd8 <__sflush_r+0x1c>
 8016cba:	4407      	add	r7, r0
 8016cbc:	eba8 0800 	sub.w	r8, r8, r0
 8016cc0:	e7e9      	b.n	8016c96 <__sflush_r+0xda>
 8016cc2:	bf00      	nop
 8016cc4:	20400001 	.word	0x20400001

08016cc8 <_fflush_r>:
 8016cc8:	b538      	push	{r3, r4, r5, lr}
 8016cca:	690b      	ldr	r3, [r1, #16]
 8016ccc:	4605      	mov	r5, r0
 8016cce:	460c      	mov	r4, r1
 8016cd0:	b913      	cbnz	r3, 8016cd8 <_fflush_r+0x10>
 8016cd2:	2500      	movs	r5, #0
 8016cd4:	4628      	mov	r0, r5
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	b118      	cbz	r0, 8016ce2 <_fflush_r+0x1a>
 8016cda:	6983      	ldr	r3, [r0, #24]
 8016cdc:	b90b      	cbnz	r3, 8016ce2 <_fflush_r+0x1a>
 8016cde:	f7ff fb73 	bl	80163c8 <__sinit>
 8016ce2:	4b14      	ldr	r3, [pc, #80]	; (8016d34 <_fflush_r+0x6c>)
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	d11b      	bne.n	8016d20 <_fflush_r+0x58>
 8016ce8:	686c      	ldr	r4, [r5, #4]
 8016cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d0ef      	beq.n	8016cd2 <_fflush_r+0xa>
 8016cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016cf4:	07d0      	lsls	r0, r2, #31
 8016cf6:	d404      	bmi.n	8016d02 <_fflush_r+0x3a>
 8016cf8:	0599      	lsls	r1, r3, #22
 8016cfa:	d402      	bmi.n	8016d02 <_fflush_r+0x3a>
 8016cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cfe:	f7ff fc26 	bl	801654e <__retarget_lock_acquire_recursive>
 8016d02:	4628      	mov	r0, r5
 8016d04:	4621      	mov	r1, r4
 8016d06:	f7ff ff59 	bl	8016bbc <__sflush_r>
 8016d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d0c:	07da      	lsls	r2, r3, #31
 8016d0e:	4605      	mov	r5, r0
 8016d10:	d4e0      	bmi.n	8016cd4 <_fflush_r+0xc>
 8016d12:	89a3      	ldrh	r3, [r4, #12]
 8016d14:	059b      	lsls	r3, r3, #22
 8016d16:	d4dd      	bmi.n	8016cd4 <_fflush_r+0xc>
 8016d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d1a:	f7ff fc19 	bl	8016550 <__retarget_lock_release_recursive>
 8016d1e:	e7d9      	b.n	8016cd4 <_fflush_r+0xc>
 8016d20:	4b05      	ldr	r3, [pc, #20]	; (8016d38 <_fflush_r+0x70>)
 8016d22:	429c      	cmp	r4, r3
 8016d24:	d101      	bne.n	8016d2a <_fflush_r+0x62>
 8016d26:	68ac      	ldr	r4, [r5, #8]
 8016d28:	e7df      	b.n	8016cea <_fflush_r+0x22>
 8016d2a:	4b04      	ldr	r3, [pc, #16]	; (8016d3c <_fflush_r+0x74>)
 8016d2c:	429c      	cmp	r4, r3
 8016d2e:	bf08      	it	eq
 8016d30:	68ec      	ldreq	r4, [r5, #12]
 8016d32:	e7da      	b.n	8016cea <_fflush_r+0x22>
 8016d34:	24008500 	.word	0x24008500
 8016d38:	24008520 	.word	0x24008520
 8016d3c:	240084e0 	.word	0x240084e0

08016d40 <_lseek_r>:
 8016d40:	b538      	push	{r3, r4, r5, lr}
 8016d42:	4d07      	ldr	r5, [pc, #28]	; (8016d60 <_lseek_r+0x20>)
 8016d44:	4604      	mov	r4, r0
 8016d46:	4608      	mov	r0, r1
 8016d48:	4611      	mov	r1, r2
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	602a      	str	r2, [r5, #0]
 8016d4e:	461a      	mov	r2, r3
 8016d50:	f7f4 f950 	bl	800aff4 <_lseek>
 8016d54:	1c43      	adds	r3, r0, #1
 8016d56:	d102      	bne.n	8016d5e <_lseek_r+0x1e>
 8016d58:	682b      	ldr	r3, [r5, #0]
 8016d5a:	b103      	cbz	r3, 8016d5e <_lseek_r+0x1e>
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	bd38      	pop	{r3, r4, r5, pc}
 8016d60:	24034b0c 	.word	0x24034b0c

08016d64 <__swhatbuf_r>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	460e      	mov	r6, r1
 8016d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d6c:	2900      	cmp	r1, #0
 8016d6e:	b096      	sub	sp, #88	; 0x58
 8016d70:	4614      	mov	r4, r2
 8016d72:	461d      	mov	r5, r3
 8016d74:	da08      	bge.n	8016d88 <__swhatbuf_r+0x24>
 8016d76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	602a      	str	r2, [r5, #0]
 8016d7e:	061a      	lsls	r2, r3, #24
 8016d80:	d410      	bmi.n	8016da4 <__swhatbuf_r+0x40>
 8016d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d86:	e00e      	b.n	8016da6 <__swhatbuf_r+0x42>
 8016d88:	466a      	mov	r2, sp
 8016d8a:	f000 fb5d 	bl	8017448 <_fstat_r>
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	dbf1      	blt.n	8016d76 <__swhatbuf_r+0x12>
 8016d92:	9a01      	ldr	r2, [sp, #4]
 8016d94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d9c:	425a      	negs	r2, r3
 8016d9e:	415a      	adcs	r2, r3
 8016da0:	602a      	str	r2, [r5, #0]
 8016da2:	e7ee      	b.n	8016d82 <__swhatbuf_r+0x1e>
 8016da4:	2340      	movs	r3, #64	; 0x40
 8016da6:	2000      	movs	r0, #0
 8016da8:	6023      	str	r3, [r4, #0]
 8016daa:	b016      	add	sp, #88	; 0x58
 8016dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08016db0 <__smakebuf_r>:
 8016db0:	898b      	ldrh	r3, [r1, #12]
 8016db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016db4:	079d      	lsls	r5, r3, #30
 8016db6:	4606      	mov	r6, r0
 8016db8:	460c      	mov	r4, r1
 8016dba:	d507      	bpl.n	8016dcc <__smakebuf_r+0x1c>
 8016dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	6123      	str	r3, [r4, #16]
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	6163      	str	r3, [r4, #20]
 8016dc8:	b002      	add	sp, #8
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	ab01      	add	r3, sp, #4
 8016dce:	466a      	mov	r2, sp
 8016dd0:	f7ff ffc8 	bl	8016d64 <__swhatbuf_r>
 8016dd4:	9900      	ldr	r1, [sp, #0]
 8016dd6:	4605      	mov	r5, r0
 8016dd8:	4630      	mov	r0, r6
 8016dda:	f7ff fc4d 	bl	8016678 <_malloc_r>
 8016dde:	b948      	cbnz	r0, 8016df4 <__smakebuf_r+0x44>
 8016de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016de4:	059a      	lsls	r2, r3, #22
 8016de6:	d4ef      	bmi.n	8016dc8 <__smakebuf_r+0x18>
 8016de8:	f023 0303 	bic.w	r3, r3, #3
 8016dec:	f043 0302 	orr.w	r3, r3, #2
 8016df0:	81a3      	strh	r3, [r4, #12]
 8016df2:	e7e3      	b.n	8016dbc <__smakebuf_r+0xc>
 8016df4:	4b0d      	ldr	r3, [pc, #52]	; (8016e2c <__smakebuf_r+0x7c>)
 8016df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016df8:	89a3      	ldrh	r3, [r4, #12]
 8016dfa:	6020      	str	r0, [r4, #0]
 8016dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e00:	81a3      	strh	r3, [r4, #12]
 8016e02:	9b00      	ldr	r3, [sp, #0]
 8016e04:	6163      	str	r3, [r4, #20]
 8016e06:	9b01      	ldr	r3, [sp, #4]
 8016e08:	6120      	str	r0, [r4, #16]
 8016e0a:	b15b      	cbz	r3, 8016e24 <__smakebuf_r+0x74>
 8016e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e10:	4630      	mov	r0, r6
 8016e12:	f000 fb2b 	bl	801746c <_isatty_r>
 8016e16:	b128      	cbz	r0, 8016e24 <__smakebuf_r+0x74>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	f023 0303 	bic.w	r3, r3, #3
 8016e1e:	f043 0301 	orr.w	r3, r3, #1
 8016e22:	81a3      	strh	r3, [r4, #12]
 8016e24:	89a0      	ldrh	r0, [r4, #12]
 8016e26:	4305      	orrs	r5, r0
 8016e28:	81a5      	strh	r5, [r4, #12]
 8016e2a:	e7cd      	b.n	8016dc8 <__smakebuf_r+0x18>
 8016e2c:	08016361 	.word	0x08016361

08016e30 <__malloc_lock>:
 8016e30:	4801      	ldr	r0, [pc, #4]	; (8016e38 <__malloc_lock+0x8>)
 8016e32:	f7ff bb8c 	b.w	801654e <__retarget_lock_acquire_recursive>
 8016e36:	bf00      	nop
 8016e38:	24034b00 	.word	0x24034b00

08016e3c <__malloc_unlock>:
 8016e3c:	4801      	ldr	r0, [pc, #4]	; (8016e44 <__malloc_unlock+0x8>)
 8016e3e:	f7ff bb87 	b.w	8016550 <__retarget_lock_release_recursive>
 8016e42:	bf00      	nop
 8016e44:	24034b00 	.word	0x24034b00

08016e48 <__sfputc_r>:
 8016e48:	6893      	ldr	r3, [r2, #8]
 8016e4a:	3b01      	subs	r3, #1
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	b410      	push	{r4}
 8016e50:	6093      	str	r3, [r2, #8]
 8016e52:	da08      	bge.n	8016e66 <__sfputc_r+0x1e>
 8016e54:	6994      	ldr	r4, [r2, #24]
 8016e56:	42a3      	cmp	r3, r4
 8016e58:	db01      	blt.n	8016e5e <__sfputc_r+0x16>
 8016e5a:	290a      	cmp	r1, #10
 8016e5c:	d103      	bne.n	8016e66 <__sfputc_r+0x1e>
 8016e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e62:	f7ff bdc9 	b.w	80169f8 <__swbuf_r>
 8016e66:	6813      	ldr	r3, [r2, #0]
 8016e68:	1c58      	adds	r0, r3, #1
 8016e6a:	6010      	str	r0, [r2, #0]
 8016e6c:	7019      	strb	r1, [r3, #0]
 8016e6e:	4608      	mov	r0, r1
 8016e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e74:	4770      	bx	lr

08016e76 <__sfputs_r>:
 8016e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e78:	4606      	mov	r6, r0
 8016e7a:	460f      	mov	r7, r1
 8016e7c:	4614      	mov	r4, r2
 8016e7e:	18d5      	adds	r5, r2, r3
 8016e80:	42ac      	cmp	r4, r5
 8016e82:	d101      	bne.n	8016e88 <__sfputs_r+0x12>
 8016e84:	2000      	movs	r0, #0
 8016e86:	e007      	b.n	8016e98 <__sfputs_r+0x22>
 8016e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e8c:	463a      	mov	r2, r7
 8016e8e:	4630      	mov	r0, r6
 8016e90:	f7ff ffda 	bl	8016e48 <__sfputc_r>
 8016e94:	1c43      	adds	r3, r0, #1
 8016e96:	d1f3      	bne.n	8016e80 <__sfputs_r+0xa>
 8016e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e9c <_vfiprintf_r>:
 8016e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea0:	460d      	mov	r5, r1
 8016ea2:	b09d      	sub	sp, #116	; 0x74
 8016ea4:	4614      	mov	r4, r2
 8016ea6:	4698      	mov	r8, r3
 8016ea8:	4606      	mov	r6, r0
 8016eaa:	b118      	cbz	r0, 8016eb4 <_vfiprintf_r+0x18>
 8016eac:	6983      	ldr	r3, [r0, #24]
 8016eae:	b90b      	cbnz	r3, 8016eb4 <_vfiprintf_r+0x18>
 8016eb0:	f7ff fa8a 	bl	80163c8 <__sinit>
 8016eb4:	4b89      	ldr	r3, [pc, #548]	; (80170dc <_vfiprintf_r+0x240>)
 8016eb6:	429d      	cmp	r5, r3
 8016eb8:	d11b      	bne.n	8016ef2 <_vfiprintf_r+0x56>
 8016eba:	6875      	ldr	r5, [r6, #4]
 8016ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ebe:	07d9      	lsls	r1, r3, #31
 8016ec0:	d405      	bmi.n	8016ece <_vfiprintf_r+0x32>
 8016ec2:	89ab      	ldrh	r3, [r5, #12]
 8016ec4:	059a      	lsls	r2, r3, #22
 8016ec6:	d402      	bmi.n	8016ece <_vfiprintf_r+0x32>
 8016ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016eca:	f7ff fb40 	bl	801654e <__retarget_lock_acquire_recursive>
 8016ece:	89ab      	ldrh	r3, [r5, #12]
 8016ed0:	071b      	lsls	r3, r3, #28
 8016ed2:	d501      	bpl.n	8016ed8 <_vfiprintf_r+0x3c>
 8016ed4:	692b      	ldr	r3, [r5, #16]
 8016ed6:	b9eb      	cbnz	r3, 8016f14 <_vfiprintf_r+0x78>
 8016ed8:	4629      	mov	r1, r5
 8016eda:	4630      	mov	r0, r6
 8016edc:	f7ff fdf0 	bl	8016ac0 <__swsetup_r>
 8016ee0:	b1c0      	cbz	r0, 8016f14 <_vfiprintf_r+0x78>
 8016ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ee4:	07dc      	lsls	r4, r3, #31
 8016ee6:	d50e      	bpl.n	8016f06 <_vfiprintf_r+0x6a>
 8016ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016eec:	b01d      	add	sp, #116	; 0x74
 8016eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef2:	4b7b      	ldr	r3, [pc, #492]	; (80170e0 <_vfiprintf_r+0x244>)
 8016ef4:	429d      	cmp	r5, r3
 8016ef6:	d101      	bne.n	8016efc <_vfiprintf_r+0x60>
 8016ef8:	68b5      	ldr	r5, [r6, #8]
 8016efa:	e7df      	b.n	8016ebc <_vfiprintf_r+0x20>
 8016efc:	4b79      	ldr	r3, [pc, #484]	; (80170e4 <_vfiprintf_r+0x248>)
 8016efe:	429d      	cmp	r5, r3
 8016f00:	bf08      	it	eq
 8016f02:	68f5      	ldreq	r5, [r6, #12]
 8016f04:	e7da      	b.n	8016ebc <_vfiprintf_r+0x20>
 8016f06:	89ab      	ldrh	r3, [r5, #12]
 8016f08:	0598      	lsls	r0, r3, #22
 8016f0a:	d4ed      	bmi.n	8016ee8 <_vfiprintf_r+0x4c>
 8016f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f0e:	f7ff fb1f 	bl	8016550 <__retarget_lock_release_recursive>
 8016f12:	e7e9      	b.n	8016ee8 <_vfiprintf_r+0x4c>
 8016f14:	2300      	movs	r3, #0
 8016f16:	9309      	str	r3, [sp, #36]	; 0x24
 8016f18:	2320      	movs	r3, #32
 8016f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f22:	2330      	movs	r3, #48	; 0x30
 8016f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80170e8 <_vfiprintf_r+0x24c>
 8016f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f2c:	f04f 0901 	mov.w	r9, #1
 8016f30:	4623      	mov	r3, r4
 8016f32:	469a      	mov	sl, r3
 8016f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f38:	b10a      	cbz	r2, 8016f3e <_vfiprintf_r+0xa2>
 8016f3a:	2a25      	cmp	r2, #37	; 0x25
 8016f3c:	d1f9      	bne.n	8016f32 <_vfiprintf_r+0x96>
 8016f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8016f42:	d00b      	beq.n	8016f5c <_vfiprintf_r+0xc0>
 8016f44:	465b      	mov	r3, fp
 8016f46:	4622      	mov	r2, r4
 8016f48:	4629      	mov	r1, r5
 8016f4a:	4630      	mov	r0, r6
 8016f4c:	f7ff ff93 	bl	8016e76 <__sfputs_r>
 8016f50:	3001      	adds	r0, #1
 8016f52:	f000 80aa 	beq.w	80170aa <_vfiprintf_r+0x20e>
 8016f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f58:	445a      	add	r2, fp
 8016f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8016f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	f000 80a2 	beq.w	80170aa <_vfiprintf_r+0x20e>
 8016f66:	2300      	movs	r3, #0
 8016f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f70:	f10a 0a01 	add.w	sl, sl, #1
 8016f74:	9304      	str	r3, [sp, #16]
 8016f76:	9307      	str	r3, [sp, #28]
 8016f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8016f7e:	4654      	mov	r4, sl
 8016f80:	2205      	movs	r2, #5
 8016f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f86:	4858      	ldr	r0, [pc, #352]	; (80170e8 <_vfiprintf_r+0x24c>)
 8016f88:	f7f1 ff7a 	bl	8008e80 <memchr>
 8016f8c:	9a04      	ldr	r2, [sp, #16]
 8016f8e:	b9d8      	cbnz	r0, 8016fc8 <_vfiprintf_r+0x12c>
 8016f90:	06d1      	lsls	r1, r2, #27
 8016f92:	bf44      	itt	mi
 8016f94:	2320      	movmi	r3, #32
 8016f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f9a:	0713      	lsls	r3, r2, #28
 8016f9c:	bf44      	itt	mi
 8016f9e:	232b      	movmi	r3, #43	; 0x2b
 8016fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8016fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8016faa:	d015      	beq.n	8016fd8 <_vfiprintf_r+0x13c>
 8016fac:	9a07      	ldr	r2, [sp, #28]
 8016fae:	4654      	mov	r4, sl
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	f04f 0c0a 	mov.w	ip, #10
 8016fb6:	4621      	mov	r1, r4
 8016fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fbc:	3b30      	subs	r3, #48	; 0x30
 8016fbe:	2b09      	cmp	r3, #9
 8016fc0:	d94e      	bls.n	8017060 <_vfiprintf_r+0x1c4>
 8016fc2:	b1b0      	cbz	r0, 8016ff2 <_vfiprintf_r+0x156>
 8016fc4:	9207      	str	r2, [sp, #28]
 8016fc6:	e014      	b.n	8016ff2 <_vfiprintf_r+0x156>
 8016fc8:	eba0 0308 	sub.w	r3, r0, r8
 8016fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8016fd0:	4313      	orrs	r3, r2
 8016fd2:	9304      	str	r3, [sp, #16]
 8016fd4:	46a2      	mov	sl, r4
 8016fd6:	e7d2      	b.n	8016f7e <_vfiprintf_r+0xe2>
 8016fd8:	9b03      	ldr	r3, [sp, #12]
 8016fda:	1d19      	adds	r1, r3, #4
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	9103      	str	r1, [sp, #12]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	bfbb      	ittet	lt
 8016fe4:	425b      	neglt	r3, r3
 8016fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8016fea:	9307      	strge	r3, [sp, #28]
 8016fec:	9307      	strlt	r3, [sp, #28]
 8016fee:	bfb8      	it	lt
 8016ff0:	9204      	strlt	r2, [sp, #16]
 8016ff2:	7823      	ldrb	r3, [r4, #0]
 8016ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8016ff6:	d10c      	bne.n	8017012 <_vfiprintf_r+0x176>
 8016ff8:	7863      	ldrb	r3, [r4, #1]
 8016ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8016ffc:	d135      	bne.n	801706a <_vfiprintf_r+0x1ce>
 8016ffe:	9b03      	ldr	r3, [sp, #12]
 8017000:	1d1a      	adds	r2, r3, #4
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	9203      	str	r2, [sp, #12]
 8017006:	2b00      	cmp	r3, #0
 8017008:	bfb8      	it	lt
 801700a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801700e:	3402      	adds	r4, #2
 8017010:	9305      	str	r3, [sp, #20]
 8017012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80170f8 <_vfiprintf_r+0x25c>
 8017016:	7821      	ldrb	r1, [r4, #0]
 8017018:	2203      	movs	r2, #3
 801701a:	4650      	mov	r0, sl
 801701c:	f7f1 ff30 	bl	8008e80 <memchr>
 8017020:	b140      	cbz	r0, 8017034 <_vfiprintf_r+0x198>
 8017022:	2340      	movs	r3, #64	; 0x40
 8017024:	eba0 000a 	sub.w	r0, r0, sl
 8017028:	fa03 f000 	lsl.w	r0, r3, r0
 801702c:	9b04      	ldr	r3, [sp, #16]
 801702e:	4303      	orrs	r3, r0
 8017030:	3401      	adds	r4, #1
 8017032:	9304      	str	r3, [sp, #16]
 8017034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017038:	482c      	ldr	r0, [pc, #176]	; (80170ec <_vfiprintf_r+0x250>)
 801703a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801703e:	2206      	movs	r2, #6
 8017040:	f7f1 ff1e 	bl	8008e80 <memchr>
 8017044:	2800      	cmp	r0, #0
 8017046:	d03f      	beq.n	80170c8 <_vfiprintf_r+0x22c>
 8017048:	4b29      	ldr	r3, [pc, #164]	; (80170f0 <_vfiprintf_r+0x254>)
 801704a:	bb1b      	cbnz	r3, 8017094 <_vfiprintf_r+0x1f8>
 801704c:	9b03      	ldr	r3, [sp, #12]
 801704e:	3307      	adds	r3, #7
 8017050:	f023 0307 	bic.w	r3, r3, #7
 8017054:	3308      	adds	r3, #8
 8017056:	9303      	str	r3, [sp, #12]
 8017058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801705a:	443b      	add	r3, r7
 801705c:	9309      	str	r3, [sp, #36]	; 0x24
 801705e:	e767      	b.n	8016f30 <_vfiprintf_r+0x94>
 8017060:	fb0c 3202 	mla	r2, ip, r2, r3
 8017064:	460c      	mov	r4, r1
 8017066:	2001      	movs	r0, #1
 8017068:	e7a5      	b.n	8016fb6 <_vfiprintf_r+0x11a>
 801706a:	2300      	movs	r3, #0
 801706c:	3401      	adds	r4, #1
 801706e:	9305      	str	r3, [sp, #20]
 8017070:	4619      	mov	r1, r3
 8017072:	f04f 0c0a 	mov.w	ip, #10
 8017076:	4620      	mov	r0, r4
 8017078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801707c:	3a30      	subs	r2, #48	; 0x30
 801707e:	2a09      	cmp	r2, #9
 8017080:	d903      	bls.n	801708a <_vfiprintf_r+0x1ee>
 8017082:	2b00      	cmp	r3, #0
 8017084:	d0c5      	beq.n	8017012 <_vfiprintf_r+0x176>
 8017086:	9105      	str	r1, [sp, #20]
 8017088:	e7c3      	b.n	8017012 <_vfiprintf_r+0x176>
 801708a:	fb0c 2101 	mla	r1, ip, r1, r2
 801708e:	4604      	mov	r4, r0
 8017090:	2301      	movs	r3, #1
 8017092:	e7f0      	b.n	8017076 <_vfiprintf_r+0x1da>
 8017094:	ab03      	add	r3, sp, #12
 8017096:	9300      	str	r3, [sp, #0]
 8017098:	462a      	mov	r2, r5
 801709a:	4b16      	ldr	r3, [pc, #88]	; (80170f4 <_vfiprintf_r+0x258>)
 801709c:	a904      	add	r1, sp, #16
 801709e:	4630      	mov	r0, r6
 80170a0:	f3af 8000 	nop.w
 80170a4:	4607      	mov	r7, r0
 80170a6:	1c78      	adds	r0, r7, #1
 80170a8:	d1d6      	bne.n	8017058 <_vfiprintf_r+0x1bc>
 80170aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170ac:	07d9      	lsls	r1, r3, #31
 80170ae:	d405      	bmi.n	80170bc <_vfiprintf_r+0x220>
 80170b0:	89ab      	ldrh	r3, [r5, #12]
 80170b2:	059a      	lsls	r2, r3, #22
 80170b4:	d402      	bmi.n	80170bc <_vfiprintf_r+0x220>
 80170b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170b8:	f7ff fa4a 	bl	8016550 <__retarget_lock_release_recursive>
 80170bc:	89ab      	ldrh	r3, [r5, #12]
 80170be:	065b      	lsls	r3, r3, #25
 80170c0:	f53f af12 	bmi.w	8016ee8 <_vfiprintf_r+0x4c>
 80170c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170c6:	e711      	b.n	8016eec <_vfiprintf_r+0x50>
 80170c8:	ab03      	add	r3, sp, #12
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	462a      	mov	r2, r5
 80170ce:	4b09      	ldr	r3, [pc, #36]	; (80170f4 <_vfiprintf_r+0x258>)
 80170d0:	a904      	add	r1, sp, #16
 80170d2:	4630      	mov	r0, r6
 80170d4:	f000 f880 	bl	80171d8 <_printf_i>
 80170d8:	e7e4      	b.n	80170a4 <_vfiprintf_r+0x208>
 80170da:	bf00      	nop
 80170dc:	24008500 	.word	0x24008500
 80170e0:	24008520 	.word	0x24008520
 80170e4:	240084e0 	.word	0x240084e0
 80170e8:	24008544 	.word	0x24008544
 80170ec:	2400854e 	.word	0x2400854e
 80170f0:	00000000 	.word	0x00000000
 80170f4:	08016e77 	.word	0x08016e77
 80170f8:	2400854a 	.word	0x2400854a

080170fc <_printf_common>:
 80170fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017100:	4616      	mov	r6, r2
 8017102:	4699      	mov	r9, r3
 8017104:	688a      	ldr	r2, [r1, #8]
 8017106:	690b      	ldr	r3, [r1, #16]
 8017108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801710c:	4293      	cmp	r3, r2
 801710e:	bfb8      	it	lt
 8017110:	4613      	movlt	r3, r2
 8017112:	6033      	str	r3, [r6, #0]
 8017114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017118:	4607      	mov	r7, r0
 801711a:	460c      	mov	r4, r1
 801711c:	b10a      	cbz	r2, 8017122 <_printf_common+0x26>
 801711e:	3301      	adds	r3, #1
 8017120:	6033      	str	r3, [r6, #0]
 8017122:	6823      	ldr	r3, [r4, #0]
 8017124:	0699      	lsls	r1, r3, #26
 8017126:	bf42      	ittt	mi
 8017128:	6833      	ldrmi	r3, [r6, #0]
 801712a:	3302      	addmi	r3, #2
 801712c:	6033      	strmi	r3, [r6, #0]
 801712e:	6825      	ldr	r5, [r4, #0]
 8017130:	f015 0506 	ands.w	r5, r5, #6
 8017134:	d106      	bne.n	8017144 <_printf_common+0x48>
 8017136:	f104 0a19 	add.w	sl, r4, #25
 801713a:	68e3      	ldr	r3, [r4, #12]
 801713c:	6832      	ldr	r2, [r6, #0]
 801713e:	1a9b      	subs	r3, r3, r2
 8017140:	42ab      	cmp	r3, r5
 8017142:	dc26      	bgt.n	8017192 <_printf_common+0x96>
 8017144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017148:	1e13      	subs	r3, r2, #0
 801714a:	6822      	ldr	r2, [r4, #0]
 801714c:	bf18      	it	ne
 801714e:	2301      	movne	r3, #1
 8017150:	0692      	lsls	r2, r2, #26
 8017152:	d42b      	bmi.n	80171ac <_printf_common+0xb0>
 8017154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017158:	4649      	mov	r1, r9
 801715a:	4638      	mov	r0, r7
 801715c:	47c0      	blx	r8
 801715e:	3001      	adds	r0, #1
 8017160:	d01e      	beq.n	80171a0 <_printf_common+0xa4>
 8017162:	6823      	ldr	r3, [r4, #0]
 8017164:	68e5      	ldr	r5, [r4, #12]
 8017166:	6832      	ldr	r2, [r6, #0]
 8017168:	f003 0306 	and.w	r3, r3, #6
 801716c:	2b04      	cmp	r3, #4
 801716e:	bf08      	it	eq
 8017170:	1aad      	subeq	r5, r5, r2
 8017172:	68a3      	ldr	r3, [r4, #8]
 8017174:	6922      	ldr	r2, [r4, #16]
 8017176:	bf0c      	ite	eq
 8017178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801717c:	2500      	movne	r5, #0
 801717e:	4293      	cmp	r3, r2
 8017180:	bfc4      	itt	gt
 8017182:	1a9b      	subgt	r3, r3, r2
 8017184:	18ed      	addgt	r5, r5, r3
 8017186:	2600      	movs	r6, #0
 8017188:	341a      	adds	r4, #26
 801718a:	42b5      	cmp	r5, r6
 801718c:	d11a      	bne.n	80171c4 <_printf_common+0xc8>
 801718e:	2000      	movs	r0, #0
 8017190:	e008      	b.n	80171a4 <_printf_common+0xa8>
 8017192:	2301      	movs	r3, #1
 8017194:	4652      	mov	r2, sl
 8017196:	4649      	mov	r1, r9
 8017198:	4638      	mov	r0, r7
 801719a:	47c0      	blx	r8
 801719c:	3001      	adds	r0, #1
 801719e:	d103      	bne.n	80171a8 <_printf_common+0xac>
 80171a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171a8:	3501      	adds	r5, #1
 80171aa:	e7c6      	b.n	801713a <_printf_common+0x3e>
 80171ac:	18e1      	adds	r1, r4, r3
 80171ae:	1c5a      	adds	r2, r3, #1
 80171b0:	2030      	movs	r0, #48	; 0x30
 80171b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80171b6:	4422      	add	r2, r4
 80171b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80171bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80171c0:	3302      	adds	r3, #2
 80171c2:	e7c7      	b.n	8017154 <_printf_common+0x58>
 80171c4:	2301      	movs	r3, #1
 80171c6:	4622      	mov	r2, r4
 80171c8:	4649      	mov	r1, r9
 80171ca:	4638      	mov	r0, r7
 80171cc:	47c0      	blx	r8
 80171ce:	3001      	adds	r0, #1
 80171d0:	d0e6      	beq.n	80171a0 <_printf_common+0xa4>
 80171d2:	3601      	adds	r6, #1
 80171d4:	e7d9      	b.n	801718a <_printf_common+0x8e>
	...

080171d8 <_printf_i>:
 80171d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80171dc:	7e0f      	ldrb	r7, [r1, #24]
 80171de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80171e0:	2f78      	cmp	r7, #120	; 0x78
 80171e2:	4691      	mov	r9, r2
 80171e4:	4680      	mov	r8, r0
 80171e6:	460c      	mov	r4, r1
 80171e8:	469a      	mov	sl, r3
 80171ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80171ee:	d807      	bhi.n	8017200 <_printf_i+0x28>
 80171f0:	2f62      	cmp	r7, #98	; 0x62
 80171f2:	d80a      	bhi.n	801720a <_printf_i+0x32>
 80171f4:	2f00      	cmp	r7, #0
 80171f6:	f000 80d8 	beq.w	80173aa <_printf_i+0x1d2>
 80171fa:	2f58      	cmp	r7, #88	; 0x58
 80171fc:	f000 80a3 	beq.w	8017346 <_printf_i+0x16e>
 8017200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017208:	e03a      	b.n	8017280 <_printf_i+0xa8>
 801720a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801720e:	2b15      	cmp	r3, #21
 8017210:	d8f6      	bhi.n	8017200 <_printf_i+0x28>
 8017212:	a101      	add	r1, pc, #4	; (adr r1, 8017218 <_printf_i+0x40>)
 8017214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017218:	08017271 	.word	0x08017271
 801721c:	08017285 	.word	0x08017285
 8017220:	08017201 	.word	0x08017201
 8017224:	08017201 	.word	0x08017201
 8017228:	08017201 	.word	0x08017201
 801722c:	08017201 	.word	0x08017201
 8017230:	08017285 	.word	0x08017285
 8017234:	08017201 	.word	0x08017201
 8017238:	08017201 	.word	0x08017201
 801723c:	08017201 	.word	0x08017201
 8017240:	08017201 	.word	0x08017201
 8017244:	08017391 	.word	0x08017391
 8017248:	080172b5 	.word	0x080172b5
 801724c:	08017373 	.word	0x08017373
 8017250:	08017201 	.word	0x08017201
 8017254:	08017201 	.word	0x08017201
 8017258:	080173b3 	.word	0x080173b3
 801725c:	08017201 	.word	0x08017201
 8017260:	080172b5 	.word	0x080172b5
 8017264:	08017201 	.word	0x08017201
 8017268:	08017201 	.word	0x08017201
 801726c:	0801737b 	.word	0x0801737b
 8017270:	682b      	ldr	r3, [r5, #0]
 8017272:	1d1a      	adds	r2, r3, #4
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	602a      	str	r2, [r5, #0]
 8017278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801727c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017280:	2301      	movs	r3, #1
 8017282:	e0a3      	b.n	80173cc <_printf_i+0x1f4>
 8017284:	6820      	ldr	r0, [r4, #0]
 8017286:	6829      	ldr	r1, [r5, #0]
 8017288:	0606      	lsls	r6, r0, #24
 801728a:	f101 0304 	add.w	r3, r1, #4
 801728e:	d50a      	bpl.n	80172a6 <_printf_i+0xce>
 8017290:	680e      	ldr	r6, [r1, #0]
 8017292:	602b      	str	r3, [r5, #0]
 8017294:	2e00      	cmp	r6, #0
 8017296:	da03      	bge.n	80172a0 <_printf_i+0xc8>
 8017298:	232d      	movs	r3, #45	; 0x2d
 801729a:	4276      	negs	r6, r6
 801729c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172a0:	485e      	ldr	r0, [pc, #376]	; (801741c <_printf_i+0x244>)
 80172a2:	230a      	movs	r3, #10
 80172a4:	e019      	b.n	80172da <_printf_i+0x102>
 80172a6:	680e      	ldr	r6, [r1, #0]
 80172a8:	602b      	str	r3, [r5, #0]
 80172aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80172ae:	bf18      	it	ne
 80172b0:	b236      	sxthne	r6, r6
 80172b2:	e7ef      	b.n	8017294 <_printf_i+0xbc>
 80172b4:	682b      	ldr	r3, [r5, #0]
 80172b6:	6820      	ldr	r0, [r4, #0]
 80172b8:	1d19      	adds	r1, r3, #4
 80172ba:	6029      	str	r1, [r5, #0]
 80172bc:	0601      	lsls	r1, r0, #24
 80172be:	d501      	bpl.n	80172c4 <_printf_i+0xec>
 80172c0:	681e      	ldr	r6, [r3, #0]
 80172c2:	e002      	b.n	80172ca <_printf_i+0xf2>
 80172c4:	0646      	lsls	r6, r0, #25
 80172c6:	d5fb      	bpl.n	80172c0 <_printf_i+0xe8>
 80172c8:	881e      	ldrh	r6, [r3, #0]
 80172ca:	4854      	ldr	r0, [pc, #336]	; (801741c <_printf_i+0x244>)
 80172cc:	2f6f      	cmp	r7, #111	; 0x6f
 80172ce:	bf0c      	ite	eq
 80172d0:	2308      	moveq	r3, #8
 80172d2:	230a      	movne	r3, #10
 80172d4:	2100      	movs	r1, #0
 80172d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80172da:	6865      	ldr	r5, [r4, #4]
 80172dc:	60a5      	str	r5, [r4, #8]
 80172de:	2d00      	cmp	r5, #0
 80172e0:	bfa2      	ittt	ge
 80172e2:	6821      	ldrge	r1, [r4, #0]
 80172e4:	f021 0104 	bicge.w	r1, r1, #4
 80172e8:	6021      	strge	r1, [r4, #0]
 80172ea:	b90e      	cbnz	r6, 80172f0 <_printf_i+0x118>
 80172ec:	2d00      	cmp	r5, #0
 80172ee:	d04d      	beq.n	801738c <_printf_i+0x1b4>
 80172f0:	4615      	mov	r5, r2
 80172f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80172f6:	fb03 6711 	mls	r7, r3, r1, r6
 80172fa:	5dc7      	ldrb	r7, [r0, r7]
 80172fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017300:	4637      	mov	r7, r6
 8017302:	42bb      	cmp	r3, r7
 8017304:	460e      	mov	r6, r1
 8017306:	d9f4      	bls.n	80172f2 <_printf_i+0x11a>
 8017308:	2b08      	cmp	r3, #8
 801730a:	d10b      	bne.n	8017324 <_printf_i+0x14c>
 801730c:	6823      	ldr	r3, [r4, #0]
 801730e:	07de      	lsls	r6, r3, #31
 8017310:	d508      	bpl.n	8017324 <_printf_i+0x14c>
 8017312:	6923      	ldr	r3, [r4, #16]
 8017314:	6861      	ldr	r1, [r4, #4]
 8017316:	4299      	cmp	r1, r3
 8017318:	bfde      	ittt	le
 801731a:	2330      	movle	r3, #48	; 0x30
 801731c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017320:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017324:	1b52      	subs	r2, r2, r5
 8017326:	6122      	str	r2, [r4, #16]
 8017328:	f8cd a000 	str.w	sl, [sp]
 801732c:	464b      	mov	r3, r9
 801732e:	aa03      	add	r2, sp, #12
 8017330:	4621      	mov	r1, r4
 8017332:	4640      	mov	r0, r8
 8017334:	f7ff fee2 	bl	80170fc <_printf_common>
 8017338:	3001      	adds	r0, #1
 801733a:	d14c      	bne.n	80173d6 <_printf_i+0x1fe>
 801733c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017340:	b004      	add	sp, #16
 8017342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017346:	4835      	ldr	r0, [pc, #212]	; (801741c <_printf_i+0x244>)
 8017348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801734c:	6829      	ldr	r1, [r5, #0]
 801734e:	6823      	ldr	r3, [r4, #0]
 8017350:	f851 6b04 	ldr.w	r6, [r1], #4
 8017354:	6029      	str	r1, [r5, #0]
 8017356:	061d      	lsls	r5, r3, #24
 8017358:	d514      	bpl.n	8017384 <_printf_i+0x1ac>
 801735a:	07df      	lsls	r7, r3, #31
 801735c:	bf44      	itt	mi
 801735e:	f043 0320 	orrmi.w	r3, r3, #32
 8017362:	6023      	strmi	r3, [r4, #0]
 8017364:	b91e      	cbnz	r6, 801736e <_printf_i+0x196>
 8017366:	6823      	ldr	r3, [r4, #0]
 8017368:	f023 0320 	bic.w	r3, r3, #32
 801736c:	6023      	str	r3, [r4, #0]
 801736e:	2310      	movs	r3, #16
 8017370:	e7b0      	b.n	80172d4 <_printf_i+0xfc>
 8017372:	6823      	ldr	r3, [r4, #0]
 8017374:	f043 0320 	orr.w	r3, r3, #32
 8017378:	6023      	str	r3, [r4, #0]
 801737a:	2378      	movs	r3, #120	; 0x78
 801737c:	4828      	ldr	r0, [pc, #160]	; (8017420 <_printf_i+0x248>)
 801737e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017382:	e7e3      	b.n	801734c <_printf_i+0x174>
 8017384:	0659      	lsls	r1, r3, #25
 8017386:	bf48      	it	mi
 8017388:	b2b6      	uxthmi	r6, r6
 801738a:	e7e6      	b.n	801735a <_printf_i+0x182>
 801738c:	4615      	mov	r5, r2
 801738e:	e7bb      	b.n	8017308 <_printf_i+0x130>
 8017390:	682b      	ldr	r3, [r5, #0]
 8017392:	6826      	ldr	r6, [r4, #0]
 8017394:	6961      	ldr	r1, [r4, #20]
 8017396:	1d18      	adds	r0, r3, #4
 8017398:	6028      	str	r0, [r5, #0]
 801739a:	0635      	lsls	r5, r6, #24
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	d501      	bpl.n	80173a4 <_printf_i+0x1cc>
 80173a0:	6019      	str	r1, [r3, #0]
 80173a2:	e002      	b.n	80173aa <_printf_i+0x1d2>
 80173a4:	0670      	lsls	r0, r6, #25
 80173a6:	d5fb      	bpl.n	80173a0 <_printf_i+0x1c8>
 80173a8:	8019      	strh	r1, [r3, #0]
 80173aa:	2300      	movs	r3, #0
 80173ac:	6123      	str	r3, [r4, #16]
 80173ae:	4615      	mov	r5, r2
 80173b0:	e7ba      	b.n	8017328 <_printf_i+0x150>
 80173b2:	682b      	ldr	r3, [r5, #0]
 80173b4:	1d1a      	adds	r2, r3, #4
 80173b6:	602a      	str	r2, [r5, #0]
 80173b8:	681d      	ldr	r5, [r3, #0]
 80173ba:	6862      	ldr	r2, [r4, #4]
 80173bc:	2100      	movs	r1, #0
 80173be:	4628      	mov	r0, r5
 80173c0:	f7f1 fd5e 	bl	8008e80 <memchr>
 80173c4:	b108      	cbz	r0, 80173ca <_printf_i+0x1f2>
 80173c6:	1b40      	subs	r0, r0, r5
 80173c8:	6060      	str	r0, [r4, #4]
 80173ca:	6863      	ldr	r3, [r4, #4]
 80173cc:	6123      	str	r3, [r4, #16]
 80173ce:	2300      	movs	r3, #0
 80173d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173d4:	e7a8      	b.n	8017328 <_printf_i+0x150>
 80173d6:	6923      	ldr	r3, [r4, #16]
 80173d8:	462a      	mov	r2, r5
 80173da:	4649      	mov	r1, r9
 80173dc:	4640      	mov	r0, r8
 80173de:	47d0      	blx	sl
 80173e0:	3001      	adds	r0, #1
 80173e2:	d0ab      	beq.n	801733c <_printf_i+0x164>
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	079b      	lsls	r3, r3, #30
 80173e8:	d413      	bmi.n	8017412 <_printf_i+0x23a>
 80173ea:	68e0      	ldr	r0, [r4, #12]
 80173ec:	9b03      	ldr	r3, [sp, #12]
 80173ee:	4298      	cmp	r0, r3
 80173f0:	bfb8      	it	lt
 80173f2:	4618      	movlt	r0, r3
 80173f4:	e7a4      	b.n	8017340 <_printf_i+0x168>
 80173f6:	2301      	movs	r3, #1
 80173f8:	4632      	mov	r2, r6
 80173fa:	4649      	mov	r1, r9
 80173fc:	4640      	mov	r0, r8
 80173fe:	47d0      	blx	sl
 8017400:	3001      	adds	r0, #1
 8017402:	d09b      	beq.n	801733c <_printf_i+0x164>
 8017404:	3501      	adds	r5, #1
 8017406:	68e3      	ldr	r3, [r4, #12]
 8017408:	9903      	ldr	r1, [sp, #12]
 801740a:	1a5b      	subs	r3, r3, r1
 801740c:	42ab      	cmp	r3, r5
 801740e:	dcf2      	bgt.n	80173f6 <_printf_i+0x21e>
 8017410:	e7eb      	b.n	80173ea <_printf_i+0x212>
 8017412:	2500      	movs	r5, #0
 8017414:	f104 0619 	add.w	r6, r4, #25
 8017418:	e7f5      	b.n	8017406 <_printf_i+0x22e>
 801741a:	bf00      	nop
 801741c:	24008555 	.word	0x24008555
 8017420:	24008566 	.word	0x24008566

08017424 <_read_r>:
 8017424:	b538      	push	{r3, r4, r5, lr}
 8017426:	4d07      	ldr	r5, [pc, #28]	; (8017444 <_read_r+0x20>)
 8017428:	4604      	mov	r4, r0
 801742a:	4608      	mov	r0, r1
 801742c:	4611      	mov	r1, r2
 801742e:	2200      	movs	r2, #0
 8017430:	602a      	str	r2, [r5, #0]
 8017432:	461a      	mov	r2, r3
 8017434:	f7f3 fd7e 	bl	800af34 <_read>
 8017438:	1c43      	adds	r3, r0, #1
 801743a:	d102      	bne.n	8017442 <_read_r+0x1e>
 801743c:	682b      	ldr	r3, [r5, #0]
 801743e:	b103      	cbz	r3, 8017442 <_read_r+0x1e>
 8017440:	6023      	str	r3, [r4, #0]
 8017442:	bd38      	pop	{r3, r4, r5, pc}
 8017444:	24034b0c 	.word	0x24034b0c

08017448 <_fstat_r>:
 8017448:	b538      	push	{r3, r4, r5, lr}
 801744a:	4d07      	ldr	r5, [pc, #28]	; (8017468 <_fstat_r+0x20>)
 801744c:	2300      	movs	r3, #0
 801744e:	4604      	mov	r4, r0
 8017450:	4608      	mov	r0, r1
 8017452:	4611      	mov	r1, r2
 8017454:	602b      	str	r3, [r5, #0]
 8017456:	f7f3 fdb2 	bl	800afbe <_fstat>
 801745a:	1c43      	adds	r3, r0, #1
 801745c:	d102      	bne.n	8017464 <_fstat_r+0x1c>
 801745e:	682b      	ldr	r3, [r5, #0]
 8017460:	b103      	cbz	r3, 8017464 <_fstat_r+0x1c>
 8017462:	6023      	str	r3, [r4, #0]
 8017464:	bd38      	pop	{r3, r4, r5, pc}
 8017466:	bf00      	nop
 8017468:	24034b0c 	.word	0x24034b0c

0801746c <_isatty_r>:
 801746c:	b538      	push	{r3, r4, r5, lr}
 801746e:	4d06      	ldr	r5, [pc, #24]	; (8017488 <_isatty_r+0x1c>)
 8017470:	2300      	movs	r3, #0
 8017472:	4604      	mov	r4, r0
 8017474:	4608      	mov	r0, r1
 8017476:	602b      	str	r3, [r5, #0]
 8017478:	f7f3 fdb1 	bl	800afde <_isatty>
 801747c:	1c43      	adds	r3, r0, #1
 801747e:	d102      	bne.n	8017486 <_isatty_r+0x1a>
 8017480:	682b      	ldr	r3, [r5, #0]
 8017482:	b103      	cbz	r3, 8017486 <_isatty_r+0x1a>
 8017484:	6023      	str	r3, [r4, #0]
 8017486:	bd38      	pop	{r3, r4, r5, pc}
 8017488:	24034b0c 	.word	0x24034b0c

0801748c <_init>:
 801748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801748e:	bf00      	nop
 8017490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017492:	bc08      	pop	{r3}
 8017494:	469e      	mov	lr, r3
 8017496:	4770      	bx	lr

08017498 <_fini>:
 8017498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749a:	bf00      	nop
 801749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801749e:	bc08      	pop	{r3}
 80174a0:	469e      	mov	lr, r3
 80174a2:	4770      	bx	lr
