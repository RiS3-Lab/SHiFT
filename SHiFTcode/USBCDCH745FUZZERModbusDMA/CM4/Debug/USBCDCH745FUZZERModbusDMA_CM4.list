
USBCDCH745FUZZERModbusDMA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  08108000  08108000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08109570  08109570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08109580  08109580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08109584  08109584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .privileged_data 00008000  10000000  08109588  00020000  2**0
                  ALLOC
  6 .data         00000010  10008000  08109588  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a4  10008020  08109598  00028020  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  100080c4  08109598  000280c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00028010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ed2f  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f3a  00000000  00000000  00036d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce8  00000000  00000000  00038cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bf0  00000000  00000000  00039998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039342  00000000  00000000  0003a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ed13  00000000  00000000  000738ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001873af  00000000  00000000  000825dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020998c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034bc  00000000  00000000  002099dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08108000 <__do_global_dtors_aux>:
 8108000:	b510      	push	{r4, lr}
 8108002:	4c05      	ldr	r4, [pc, #20]	; (8108018 <__do_global_dtors_aux+0x18>)
 8108004:	7823      	ldrb	r3, [r4, #0]
 8108006:	b933      	cbnz	r3, 8108016 <__do_global_dtors_aux+0x16>
 8108008:	4b04      	ldr	r3, [pc, #16]	; (810801c <__do_global_dtors_aux+0x1c>)
 810800a:	b113      	cbz	r3, 8108012 <__do_global_dtors_aux+0x12>
 810800c:	4804      	ldr	r0, [pc, #16]	; (8108020 <__do_global_dtors_aux+0x20>)
 810800e:	f3af 8000 	nop.w
 8108012:	2301      	movs	r3, #1
 8108014:	7023      	strb	r3, [r4, #0]
 8108016:	bd10      	pop	{r4, pc}
 8108018:	10008020 	.word	0x10008020
 810801c:	00000000 	.word	0x00000000
 8108020:	08109558 	.word	0x08109558

08108024 <frame_dummy>:
 8108024:	b508      	push	{r3, lr}
 8108026:	4b03      	ldr	r3, [pc, #12]	; (8108034 <frame_dummy+0x10>)
 8108028:	b11b      	cbz	r3, 8108032 <frame_dummy+0xe>
 810802a:	4903      	ldr	r1, [pc, #12]	; (8108038 <frame_dummy+0x14>)
 810802c:	4803      	ldr	r0, [pc, #12]	; (810803c <frame_dummy+0x18>)
 810802e:	f3af 8000 	nop.w
 8108032:	bd08      	pop	{r3, pc}
 8108034:	00000000 	.word	0x00000000
 8108038:	10008024 	.word	0x10008024
 810803c:	08109558 	.word	0x08109558

08108040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8108040:	b480      	push	{r7}
 8108042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8108044:	4b0b      	ldr	r3, [pc, #44]	; (8108074 <SystemInit+0x34>)
 8108046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810804a:	4a0a      	ldr	r2, [pc, #40]	; (8108074 <SystemInit+0x34>)
 810804c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8108050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8108054:	4b07      	ldr	r3, [pc, #28]	; (8108074 <SystemInit+0x34>)
 8108056:	691b      	ldr	r3, [r3, #16]
 8108058:	4a06      	ldr	r2, [pc, #24]	; (8108074 <SystemInit+0x34>)
 810805a:	f043 0310 	orr.w	r3, r3, #16
 810805e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8108060:	4b04      	ldr	r3, [pc, #16]	; (8108074 <SystemInit+0x34>)
 8108062:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8108066:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8108068:	bf00      	nop
 810806a:	46bd      	mov	sp, r7
 810806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108070:	4770      	bx	lr
 8108072:	bf00      	nop
 8108074:	e000ed00 	.word	0xe000ed00

08108078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8108078:	b580      	push	{r7, lr}
 810807a:	b082      	sub	sp, #8
 810807c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810807e:	4b1c      	ldr	r3, [pc, #112]	; (81080f0 <main+0x78>)
 8108080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108084:	4a1a      	ldr	r2, [pc, #104]	; (81080f0 <main+0x78>)
 8108086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810808a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810808e:	4b18      	ldr	r3, [pc, #96]	; (81080f0 <main+0x78>)
 8108090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108098:	607b      	str	r3, [r7, #4]
 810809a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810809c:	2001      	movs	r0, #1
 810809e:	f000 fcbf 	bl	8108a20 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81080a2:	f000 fd49 	bl	8108b38 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81080a6:	2201      	movs	r2, #1
 81080a8:	2102      	movs	r1, #2
 81080aa:	2000      	movs	r0, #0
 81080ac:	f000 fcca 	bl	8108a44 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81080b0:	4b10      	ldr	r3, [pc, #64]	; (81080f4 <main+0x7c>)
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	091b      	lsrs	r3, r3, #4
 81080b6:	f003 030f 	and.w	r3, r3, #15
 81080ba:	2b07      	cmp	r3, #7
 81080bc:	d108      	bne.n	81080d0 <main+0x58>
 81080be:	4b0e      	ldr	r3, [pc, #56]	; (81080f8 <main+0x80>)
 81080c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81080c4:	4a0c      	ldr	r2, [pc, #48]	; (81080f8 <main+0x80>)
 81080c6:	f043 0301 	orr.w	r3, r3, #1
 81080ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81080ce:	e007      	b.n	81080e0 <main+0x68>
 81080d0:	4b09      	ldr	r3, [pc, #36]	; (81080f8 <main+0x80>)
 81080d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81080d6:	4a08      	ldr	r2, [pc, #32]	; (81080f8 <main+0x80>)
 81080d8:	f043 0301 	orr.w	r3, r3, #1
 81080dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81080e0:	f000 f988 	bl	81083f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_USER_Init();
 81080e4:	f000 f824 	bl	8108130 <GPIO_USER_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 81080e8:	f000 f808 	bl	81080fc <MX_DMA_Init>
  //app_main();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81080ec:	e7fe      	b.n	81080ec <main+0x74>
 81080ee:	bf00      	nop
 81080f0:	58024400 	.word	0x58024400
 81080f4:	e000ed00 	.word	0xe000ed00
 81080f8:	58026400 	.word	0x58026400

081080fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81080fc:	b480      	push	{r7}
 81080fe:	b083      	sub	sp, #12
 8108100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8108102:	4b0a      	ldr	r3, [pc, #40]	; (810812c <MX_DMA_Init+0x30>)
 8108104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8108108:	4a08      	ldr	r2, [pc, #32]	; (810812c <MX_DMA_Init+0x30>)
 810810a:	f043 0301 	orr.w	r3, r3, #1
 810810e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8108112:	4b06      	ldr	r3, [pc, #24]	; (810812c <MX_DMA_Init+0x30>)
 8108114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8108118:	f003 0301 	and.w	r3, r3, #1
 810811c:	607b      	str	r3, [r7, #4]
 810811e:	687b      	ldr	r3, [r7, #4]

}
 8108120:	bf00      	nop
 8108122:	370c      	adds	r7, #12
 8108124:	46bd      	mov	sp, r7
 8108126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810812a:	4770      	bx	lr
 810812c:	58024400 	.word	0x58024400

08108130 <GPIO_USER_Init>:

/* USER CODE BEGIN 4 */
void   GPIO_USER_Init(void)
{
 8108130:	b580      	push	{r7, lr}
 8108132:	b088      	sub	sp, #32
 8108134:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8108136:	4b1f      	ldr	r3, [pc, #124]	; (81081b4 <GPIO_USER_Init+0x84>)
 8108138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810813c:	4a1d      	ldr	r2, [pc, #116]	; (81081b4 <GPIO_USER_Init+0x84>)
 810813e:	f043 0302 	orr.w	r3, r3, #2
 8108142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8108146:	4b1b      	ldr	r3, [pc, #108]	; (81081b4 <GPIO_USER_Init+0x84>)
 8108148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810814c:	f003 0302 	and.w	r3, r3, #2
 8108150:	60bb      	str	r3, [r7, #8]
 8108152:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8108154:	4b17      	ldr	r3, [pc, #92]	; (81081b4 <GPIO_USER_Init+0x84>)
 8108156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810815a:	4a16      	ldr	r2, [pc, #88]	; (81081b4 <GPIO_USER_Init+0x84>)
 810815c:	f043 0310 	orr.w	r3, r3, #16
 8108160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8108164:	4b13      	ldr	r3, [pc, #76]	; (81081b4 <GPIO_USER_Init+0x84>)
 8108166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810816a:	f003 0310 	and.w	r3, r3, #16
 810816e:	607b      	str	r3, [r7, #4]
 8108170:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef   GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8108172:	2301      	movs	r3, #1
 8108174:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8108176:	2300      	movs	r3, #0
 8108178:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pin = LD1_PIN;
 810817a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810817e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStructure);
 8108180:	f107 030c 	add.w	r3, r7, #12
 8108184:	4619      	mov	r1, r3
 8108186:	480c      	ldr	r0, [pc, #48]	; (81081b8 <GPIO_USER_Init+0x88>)
 8108188:	f000 fa9a 	bl	81086c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = LD2_PIN;
 810818c:	2302      	movs	r3, #2
 810818e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LD2_GPIO_PORT, &GPIO_InitStructure);
 8108190:	f107 030c 	add.w	r3, r7, #12
 8108194:	4619      	mov	r1, r3
 8108196:	4809      	ldr	r0, [pc, #36]	; (81081bc <GPIO_USER_Init+0x8c>)
 8108198:	f000 fa92 	bl	81086c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = LD3_PIN;
 810819c:	2301      	movs	r3, #1
 810819e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LD3_GPIO_PORT, &GPIO_InitStructure);
 81081a0:	f107 030c 	add.w	r3, r7, #12
 81081a4:	4619      	mov	r1, r3
 81081a6:	4804      	ldr	r0, [pc, #16]	; (81081b8 <GPIO_USER_Init+0x88>)
 81081a8:	f000 fa8a 	bl	81086c0 <HAL_GPIO_Init>
}
 81081ac:	bf00      	nop
 81081ae:	3720      	adds	r7, #32
 81081b0:	46bd      	mov	sp, r7
 81081b2:	bd80      	pop	{r7, pc}
 81081b4:	58024400 	.word	0x58024400
 81081b8:	58020400 	.word	0x58020400
 81081bc:	58021000 	.word	0x58021000

081081c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81081c0:	b580      	push	{r7, lr}
 81081c2:	b082      	sub	sp, #8
 81081c4:	af00      	add	r7, sp, #0
 81081c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	4a04      	ldr	r2, [pc, #16]	; (81081e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81081ce:	4293      	cmp	r3, r2
 81081d0:	d101      	bne.n	81081d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81081d2:	f000 f96d 	bl	81084b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81081d6:	bf00      	nop
 81081d8:	3708      	adds	r7, #8
 81081da:	46bd      	mov	sp, r7
 81081dc:	bd80      	pop	{r7, pc}
 81081de:	bf00      	nop
 81081e0:	40014800 	.word	0x40014800

081081e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81081e4:	b480      	push	{r7}
 81081e6:	b083      	sub	sp, #12
 81081e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81081ea:	4b0a      	ldr	r3, [pc, #40]	; (8108214 <HAL_MspInit+0x30>)
 81081ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81081f0:	4a08      	ldr	r2, [pc, #32]	; (8108214 <HAL_MspInit+0x30>)
 81081f2:	f043 0302 	orr.w	r3, r3, #2
 81081f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81081fa:	4b06      	ldr	r3, [pc, #24]	; (8108214 <HAL_MspInit+0x30>)
 81081fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8108200:	f003 0302 	and.w	r3, r3, #2
 8108204:	607b      	str	r3, [r7, #4]
 8108206:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8108208:	bf00      	nop
 810820a:	370c      	adds	r7, #12
 810820c:	46bd      	mov	sp, r7
 810820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108212:	4770      	bx	lr
 8108214:	58024400 	.word	0x58024400

08108218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8108218:	b580      	push	{r7, lr}
 810821a:	b08e      	sub	sp, #56	; 0x38
 810821c:	af00      	add	r7, sp, #0
 810821e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	2b0f      	cmp	r3, #15
 8108224:	d844      	bhi.n	81082b0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8108226:	2200      	movs	r2, #0
 8108228:	6879      	ldr	r1, [r7, #4]
 810822a:	2076      	movs	r0, #118	; 0x76
 810822c:	f000 fa0c 	bl	8108648 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8108230:	2076      	movs	r0, #118	; 0x76
 8108232:	f000 fa23 	bl	810867c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8108236:	4a24      	ldr	r2, [pc, #144]	; (81082c8 <HAL_InitTick+0xb0>)
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 810823c:	4b23      	ldr	r3, [pc, #140]	; (81082cc <HAL_InitTick+0xb4>)
 810823e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8108242:	4a22      	ldr	r2, [pc, #136]	; (81082cc <HAL_InitTick+0xb4>)
 8108244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8108248:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810824c:	4b1f      	ldr	r3, [pc, #124]	; (81082cc <HAL_InitTick+0xb4>)
 810824e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8108252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8108256:	60bb      	str	r3, [r7, #8]
 8108258:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810825a:	f107 020c 	add.w	r2, r7, #12
 810825e:	f107 0310 	add.w	r3, r7, #16
 8108262:	4611      	mov	r1, r2
 8108264:	4618      	mov	r0, r3
 8108266:	f000 fe37 	bl	8108ed8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 810826a:	f000 fe1f 	bl	8108eac <HAL_RCC_GetPCLK2Freq>
 810826e:	4603      	mov	r3, r0
 8108270:	005b      	lsls	r3, r3, #1
 8108272:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8108274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108276:	4a16      	ldr	r2, [pc, #88]	; (81082d0 <HAL_InitTick+0xb8>)
 8108278:	fba2 2303 	umull	r2, r3, r2, r3
 810827c:	0c9b      	lsrs	r3, r3, #18
 810827e:	3b01      	subs	r3, #1
 8108280:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8108282:	4b14      	ldr	r3, [pc, #80]	; (81082d4 <HAL_InitTick+0xbc>)
 8108284:	4a14      	ldr	r2, [pc, #80]	; (81082d8 <HAL_InitTick+0xc0>)
 8108286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8108288:	4b12      	ldr	r3, [pc, #72]	; (81082d4 <HAL_InitTick+0xbc>)
 810828a:	f240 32e7 	movw	r2, #999	; 0x3e7
 810828e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8108290:	4a10      	ldr	r2, [pc, #64]	; (81082d4 <HAL_InitTick+0xbc>)
 8108292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108294:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8108296:	4b0f      	ldr	r3, [pc, #60]	; (81082d4 <HAL_InitTick+0xbc>)
 8108298:	2200      	movs	r2, #0
 810829a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 810829c:	4b0d      	ldr	r3, [pc, #52]	; (81082d4 <HAL_InitTick+0xbc>)
 810829e:	2200      	movs	r2, #0
 81082a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 81082a2:	480c      	ldr	r0, [pc, #48]	; (81082d4 <HAL_InitTick+0xbc>)
 81082a4:	f000 fe5a 	bl	8108f5c <HAL_TIM_Base_Init>
 81082a8:	4603      	mov	r3, r0
 81082aa:	2b00      	cmp	r3, #0
 81082ac:	d107      	bne.n	81082be <HAL_InitTick+0xa6>
 81082ae:	e001      	b.n	81082b4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 81082b0:	2301      	movs	r3, #1
 81082b2:	e005      	b.n	81082c0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 81082b4:	4807      	ldr	r0, [pc, #28]	; (81082d4 <HAL_InitTick+0xbc>)
 81082b6:	f000 feb3 	bl	8109020 <HAL_TIM_Base_Start_IT>
 81082ba:	4603      	mov	r3, r0
 81082bc:	e000      	b.n	81082c0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 81082be:	2301      	movs	r3, #1
}
 81082c0:	4618      	mov	r0, r3
 81082c2:	3738      	adds	r7, #56	; 0x38
 81082c4:	46bd      	mov	sp, r7
 81082c6:	bd80      	pop	{r7, pc}
 81082c8:	10008008 	.word	0x10008008
 81082cc:	58024400 	.word	0x58024400
 81082d0:	431bde83 	.word	0x431bde83
 81082d4:	1000803c 	.word	0x1000803c
 81082d8:	40014800 	.word	0x40014800

081082dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81082dc:	b480      	push	{r7}
 81082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81082e0:	e7fe      	b.n	81082e0 <NMI_Handler+0x4>

081082e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81082e2:	b480      	push	{r7}
 81082e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81082e6:	e7fe      	b.n	81082e6 <HardFault_Handler+0x4>

081082e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81082e8:	b480      	push	{r7}
 81082ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81082ec:	e7fe      	b.n	81082ec <BusFault_Handler+0x4>

081082ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81082ee:	b480      	push	{r7}
 81082f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81082f2:	e7fe      	b.n	81082f2 <UsageFault_Handler+0x4>

081082f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81082f4:	b480      	push	{r7}
 81082f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81082f8:	bf00      	nop
 81082fa:	46bd      	mov	sp, r7
 81082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108300:	4770      	bx	lr
	...

08108304 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8108304:	b580      	push	{r7, lr}
 8108306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8108308:	4802      	ldr	r0, [pc, #8]	; (8108314 <TIM17_IRQHandler+0x10>)
 810830a:	f000 ff01 	bl	8109110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810830e:	bf00      	nop
 8108310:	bd80      	pop	{r7, pc}
 8108312:	bf00      	nop
 8108314:	1000803c 	.word	0x1000803c

08108318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8108318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8108350 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810831c:	f7ff fe90 	bl	8108040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8108320:	480c      	ldr	r0, [pc, #48]	; (8108354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8108322:	490d      	ldr	r1, [pc, #52]	; (8108358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8108324:	4a0d      	ldr	r2, [pc, #52]	; (810835c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8108326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8108328:	e002      	b.n	8108330 <LoopCopyDataInit>

0810832a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810832a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810832c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810832e:	3304      	adds	r3, #4

08108330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8108330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8108332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8108334:	d3f9      	bcc.n	810832a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8108336:	4a0a      	ldr	r2, [pc, #40]	; (8108360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8108338:	4c0a      	ldr	r4, [pc, #40]	; (8108364 <LoopFillZerobss+0x22>)
  movs r3, #0
 810833a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810833c:	e001      	b.n	8108342 <LoopFillZerobss>

0810833e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810833e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8108340:	3204      	adds	r2, #4

08108342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8108342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8108344:	d3fb      	bcc.n	810833e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8108346:	f001 f8e3 	bl	8109510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810834a:	f7ff fe95 	bl	8108078 <main>
  bx  lr
 810834e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8108350:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8108354:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8108358:	10008010 	.word	0x10008010
  ldr r2, =_sidata
 810835c:	08109588 	.word	0x08109588
  ldr r2, =_sbss
 8108360:	10008020 	.word	0x10008020
  ldr r4, =_ebss
 8108364:	100080c4 	.word	0x100080c4

08108368 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8108368:	e7fe      	b.n	8108368 <ADC3_IRQHandler>

0810836a <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 810836a:	f01e 0f04 	tst.w	lr, #4
 810836e:	bf0c      	ite	eq
 8108370:	f3ef 8008 	mrseq	r0, MSP
 8108374:	f3ef 8009 	mrsne	r0, PSP
 8108378:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8108380 <handler_address_const+0x2>
 810837c:	4708      	bx	r1

0810837e <handler_address_const>:
 810837e:	8385      	.short	0x8385
 8108380:	0810      	.short	0x0810
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 8108382:	bf00      	nop

08108384 <vHandleMemoryFault>:

}
/*-----------------------------------------------------------*/

portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 8108384:	b480      	push	{r7}
 8108386:	b085      	sub	sp, #20
 8108388:	af00      	add	r7, sp, #0
 810838a:	6078      	str	r0, [r7, #4]
uint32_t ulPC;
uint16_t usOffendingInstruction;

	/* Is this an expected fault? */
	if( ucROTaskFaultTracker[ 0 ] == 1 )
 810838c:	4b18      	ldr	r3, [pc, #96]	; (81083f0 <vHandleMemoryFault+0x6c>)
 810838e:	781b      	ldrb	r3, [r3, #0]
 8108390:	b2db      	uxtb	r3, r3
 8108392:	2b01      	cmp	r3, #1
 8108394:	d126      	bne.n	81083e4 <vHandleMemoryFault+0x60>
	{
		/* Read program counter. */
		ulPC = pulFaultStackAddress[ 6 ];
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	699b      	ldr	r3, [r3, #24]
 810839a:	60fb      	str	r3, [r7, #12]

		/* Read the offending instruction. */
		usOffendingInstruction = *( uint16_t * )ulPC;
 810839c:	68fb      	ldr	r3, [r7, #12]
 810839e:	881b      	ldrh	r3, [r3, #0]
 81083a0:	817b      	strh	r3, [r7, #10]
		 * - 0b11111.
		 * Otherwise, the halfword is a 16-bit instruction.
		 */

		/* Extract bits[15:11] of the offending instruction. */
		usOffendingInstruction = usOffendingInstruction & 0xF800;
 81083a2:	897b      	ldrh	r3, [r7, #10]
 81083a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 81083a8:	f023 0307 	bic.w	r3, r3, #7
 81083ac:	817b      	strh	r3, [r7, #10]
		usOffendingInstruction = ( usOffendingInstruction >> 11 );
 81083ae:	897b      	ldrh	r3, [r7, #10]
 81083b0:	0adb      	lsrs	r3, r3, #11
 81083b2:	817b      	strh	r3, [r7, #10]

		/* Determine if the offending instruction is a 32-bit instruction or
		 * a 16-bit instruction. */
		if( usOffendingInstruction == 0x001F ||
 81083b4:	897b      	ldrh	r3, [r7, #10]
 81083b6:	2b1f      	cmp	r3, #31
 81083b8:	d005      	beq.n	81083c6 <vHandleMemoryFault+0x42>
 81083ba:	897b      	ldrh	r3, [r7, #10]
 81083bc:	2b1e      	cmp	r3, #30
 81083be:	d002      	beq.n	81083c6 <vHandleMemoryFault+0x42>
			usOffendingInstruction == 0x001E ||
 81083c0:	897b      	ldrh	r3, [r7, #10]
 81083c2:	2b1d      	cmp	r3, #29
 81083c4:	d103      	bne.n	81083ce <vHandleMemoryFault+0x4a>
			usOffendingInstruction == 0x001D )
		{
			/* Since the offending instruction is a 32-bit instruction,
			 * increment the program counter by 4 to move to the next
			 * instruction. */
			ulPC += 4;
 81083c6:	68fb      	ldr	r3, [r7, #12]
 81083c8:	3304      	adds	r3, #4
 81083ca:	60fb      	str	r3, [r7, #12]
 81083cc:	e002      	b.n	81083d4 <vHandleMemoryFault+0x50>
		else
		{
			/* Since the offending instruction is a 16-bit instruction,
			 * increment the program counter by 2 to move to the next
			 * instruction. */
			ulPC += 2;
 81083ce:	68fb      	ldr	r3, [r7, #12]
 81083d0:	3302      	adds	r3, #2
 81083d2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the new program counter on the stack. */
		pulFaultStackAddress[ 6 ] = ulPC;
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	3318      	adds	r3, #24
 81083d8:	68fa      	ldr	r2, [r7, #12]
 81083da:	601a      	str	r2, [r3, #0]

		/* Mark the fault as handled. */
		ucROTaskFaultTracker[ 0 ] = 0;
 81083dc:	4b04      	ldr	r3, [pc, #16]	; (81083f0 <vHandleMemoryFault+0x6c>)
 81083de:	2200      	movs	r2, #0
 81083e0:	701a      	strb	r2, [r3, #0]
		/* This is an unexpected fault - loop forever. */
		for( ; ; )
		{
		}
	}
}
 81083e2:	e000      	b.n	81083e6 <vHandleMemoryFault+0x62>
		for( ; ; )
 81083e4:	e7fe      	b.n	81083e4 <vHandleMemoryFault+0x60>
}
 81083e6:	3714      	adds	r7, #20
 81083e8:	46bd      	mov	sp, r7
 81083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083ee:	4770      	bx	lr
 81083f0:	100080a0 	.word	0x100080a0

081083f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81083f4:	b580      	push	{r7, lr}
 81083f6:	b082      	sub	sp, #8
 81083f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81083fa:	4b28      	ldr	r3, [pc, #160]	; (810849c <HAL_Init+0xa8>)
 81083fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8108400:	4a26      	ldr	r2, [pc, #152]	; (810849c <HAL_Init+0xa8>)
 8108402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8108406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810840a:	4b24      	ldr	r3, [pc, #144]	; (810849c <HAL_Init+0xa8>)
 810840c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8108410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108414:	603b      	str	r3, [r7, #0]
 8108416:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8108418:	4b21      	ldr	r3, [pc, #132]	; (81084a0 <HAL_Init+0xac>)
 810841a:	681b      	ldr	r3, [r3, #0]
 810841c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8108420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8108424:	4a1e      	ldr	r2, [pc, #120]	; (81084a0 <HAL_Init+0xac>)
 8108426:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810842a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810842c:	4b1c      	ldr	r3, [pc, #112]	; (81084a0 <HAL_Init+0xac>)
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	4a1b      	ldr	r2, [pc, #108]	; (81084a0 <HAL_Init+0xac>)
 8108432:	f043 0301 	orr.w	r3, r3, #1
 8108436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8108438:	2003      	movs	r0, #3
 810843a:	f000 f8fa 	bl	8108632 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810843e:	f000 fb89 	bl	8108b54 <HAL_RCC_GetSysClockFreq>
 8108442:	4602      	mov	r2, r0
 8108444:	4b15      	ldr	r3, [pc, #84]	; (810849c <HAL_Init+0xa8>)
 8108446:	699b      	ldr	r3, [r3, #24]
 8108448:	0a1b      	lsrs	r3, r3, #8
 810844a:	f003 030f 	and.w	r3, r3, #15
 810844e:	4915      	ldr	r1, [pc, #84]	; (81084a4 <HAL_Init+0xb0>)
 8108450:	5ccb      	ldrb	r3, [r1, r3]
 8108452:	f003 031f 	and.w	r3, r3, #31
 8108456:	fa22 f303 	lsr.w	r3, r2, r3
 810845a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810845c:	4b0f      	ldr	r3, [pc, #60]	; (810849c <HAL_Init+0xa8>)
 810845e:	699b      	ldr	r3, [r3, #24]
 8108460:	f003 030f 	and.w	r3, r3, #15
 8108464:	4a0f      	ldr	r2, [pc, #60]	; (81084a4 <HAL_Init+0xb0>)
 8108466:	5cd3      	ldrb	r3, [r2, r3]
 8108468:	f003 031f 	and.w	r3, r3, #31
 810846c:	687a      	ldr	r2, [r7, #4]
 810846e:	fa22 f303 	lsr.w	r3, r2, r3
 8108472:	4a0d      	ldr	r2, [pc, #52]	; (81084a8 <HAL_Init+0xb4>)
 8108474:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8108476:	4b0c      	ldr	r3, [pc, #48]	; (81084a8 <HAL_Init+0xb4>)
 8108478:	681b      	ldr	r3, [r3, #0]
 810847a:	4a0c      	ldr	r2, [pc, #48]	; (81084ac <HAL_Init+0xb8>)
 810847c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810847e:	200f      	movs	r0, #15
 8108480:	f7ff feca 	bl	8108218 <HAL_InitTick>
 8108484:	4603      	mov	r3, r0
 8108486:	2b00      	cmp	r3, #0
 8108488:	d001      	beq.n	810848e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810848a:	2301      	movs	r3, #1
 810848c:	e002      	b.n	8108494 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810848e:	f7ff fea9 	bl	81081e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8108492:	2300      	movs	r3, #0
}
 8108494:	4618      	mov	r0, r3
 8108496:	3708      	adds	r7, #8
 8108498:	46bd      	mov	sp, r7
 810849a:	bd80      	pop	{r7, pc}
 810849c:	58024400 	.word	0x58024400
 81084a0:	40024400 	.word	0x40024400
 81084a4:	08109570 	.word	0x08109570
 81084a8:	10008004 	.word	0x10008004
 81084ac:	10008000 	.word	0x10008000

081084b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81084b0:	b480      	push	{r7}
 81084b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81084b4:	4b06      	ldr	r3, [pc, #24]	; (81084d0 <HAL_IncTick+0x20>)
 81084b6:	781b      	ldrb	r3, [r3, #0]
 81084b8:	461a      	mov	r2, r3
 81084ba:	4b06      	ldr	r3, [pc, #24]	; (81084d4 <HAL_IncTick+0x24>)
 81084bc:	681b      	ldr	r3, [r3, #0]
 81084be:	4413      	add	r3, r2
 81084c0:	4a04      	ldr	r2, [pc, #16]	; (81084d4 <HAL_IncTick+0x24>)
 81084c2:	6013      	str	r3, [r2, #0]
}
 81084c4:	bf00      	nop
 81084c6:	46bd      	mov	sp, r7
 81084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084cc:	4770      	bx	lr
 81084ce:	bf00      	nop
 81084d0:	1000800c 	.word	0x1000800c
 81084d4:	100080c0 	.word	0x100080c0

081084d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81084d8:	b480      	push	{r7}
 81084da:	b085      	sub	sp, #20
 81084dc:	af00      	add	r7, sp, #0
 81084de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	f003 0307 	and.w	r3, r3, #7
 81084e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81084e8:	4b0c      	ldr	r3, [pc, #48]	; (810851c <__NVIC_SetPriorityGrouping+0x44>)
 81084ea:	68db      	ldr	r3, [r3, #12]
 81084ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81084ee:	68ba      	ldr	r2, [r7, #8]
 81084f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81084f4:	4013      	ands	r3, r2
 81084f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81084f8:	68fb      	ldr	r3, [r7, #12]
 81084fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81084fc:	68bb      	ldr	r3, [r7, #8]
 81084fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8108500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8108504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810850a:	4a04      	ldr	r2, [pc, #16]	; (810851c <__NVIC_SetPriorityGrouping+0x44>)
 810850c:	68bb      	ldr	r3, [r7, #8]
 810850e:	60d3      	str	r3, [r2, #12]
}
 8108510:	bf00      	nop
 8108512:	3714      	adds	r7, #20
 8108514:	46bd      	mov	sp, r7
 8108516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810851a:	4770      	bx	lr
 810851c:	e000ed00 	.word	0xe000ed00

08108520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8108520:	b480      	push	{r7}
 8108522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8108524:	4b04      	ldr	r3, [pc, #16]	; (8108538 <__NVIC_GetPriorityGrouping+0x18>)
 8108526:	68db      	ldr	r3, [r3, #12]
 8108528:	0a1b      	lsrs	r3, r3, #8
 810852a:	f003 0307 	and.w	r3, r3, #7
}
 810852e:	4618      	mov	r0, r3
 8108530:	46bd      	mov	sp, r7
 8108532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108536:	4770      	bx	lr
 8108538:	e000ed00 	.word	0xe000ed00

0810853c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810853c:	b480      	push	{r7}
 810853e:	b083      	sub	sp, #12
 8108540:	af00      	add	r7, sp, #0
 8108542:	4603      	mov	r3, r0
 8108544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810854a:	2b00      	cmp	r3, #0
 810854c:	db0b      	blt.n	8108566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810854e:	88fb      	ldrh	r3, [r7, #6]
 8108550:	f003 021f 	and.w	r2, r3, #31
 8108554:	4907      	ldr	r1, [pc, #28]	; (8108574 <__NVIC_EnableIRQ+0x38>)
 8108556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810855a:	095b      	lsrs	r3, r3, #5
 810855c:	2001      	movs	r0, #1
 810855e:	fa00 f202 	lsl.w	r2, r0, r2
 8108562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8108566:	bf00      	nop
 8108568:	370c      	adds	r7, #12
 810856a:	46bd      	mov	sp, r7
 810856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108570:	4770      	bx	lr
 8108572:	bf00      	nop
 8108574:	e000e100 	.word	0xe000e100

08108578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8108578:	b480      	push	{r7}
 810857a:	b083      	sub	sp, #12
 810857c:	af00      	add	r7, sp, #0
 810857e:	4603      	mov	r3, r0
 8108580:	6039      	str	r1, [r7, #0]
 8108582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108588:	2b00      	cmp	r3, #0
 810858a:	db0a      	blt.n	81085a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810858c:	683b      	ldr	r3, [r7, #0]
 810858e:	b2da      	uxtb	r2, r3
 8108590:	490c      	ldr	r1, [pc, #48]	; (81085c4 <__NVIC_SetPriority+0x4c>)
 8108592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108596:	0112      	lsls	r2, r2, #4
 8108598:	b2d2      	uxtb	r2, r2
 810859a:	440b      	add	r3, r1
 810859c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81085a0:	e00a      	b.n	81085b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81085a2:	683b      	ldr	r3, [r7, #0]
 81085a4:	b2da      	uxtb	r2, r3
 81085a6:	4908      	ldr	r1, [pc, #32]	; (81085c8 <__NVIC_SetPriority+0x50>)
 81085a8:	88fb      	ldrh	r3, [r7, #6]
 81085aa:	f003 030f 	and.w	r3, r3, #15
 81085ae:	3b04      	subs	r3, #4
 81085b0:	0112      	lsls	r2, r2, #4
 81085b2:	b2d2      	uxtb	r2, r2
 81085b4:	440b      	add	r3, r1
 81085b6:	761a      	strb	r2, [r3, #24]
}
 81085b8:	bf00      	nop
 81085ba:	370c      	adds	r7, #12
 81085bc:	46bd      	mov	sp, r7
 81085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085c2:	4770      	bx	lr
 81085c4:	e000e100 	.word	0xe000e100
 81085c8:	e000ed00 	.word	0xe000ed00

081085cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81085cc:	b480      	push	{r7}
 81085ce:	b089      	sub	sp, #36	; 0x24
 81085d0:	af00      	add	r7, sp, #0
 81085d2:	60f8      	str	r0, [r7, #12]
 81085d4:	60b9      	str	r1, [r7, #8]
 81085d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81085d8:	68fb      	ldr	r3, [r7, #12]
 81085da:	f003 0307 	and.w	r3, r3, #7
 81085de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81085e0:	69fb      	ldr	r3, [r7, #28]
 81085e2:	f1c3 0307 	rsb	r3, r3, #7
 81085e6:	2b04      	cmp	r3, #4
 81085e8:	bf28      	it	cs
 81085ea:	2304      	movcs	r3, #4
 81085ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81085ee:	69fb      	ldr	r3, [r7, #28]
 81085f0:	3304      	adds	r3, #4
 81085f2:	2b06      	cmp	r3, #6
 81085f4:	d902      	bls.n	81085fc <NVIC_EncodePriority+0x30>
 81085f6:	69fb      	ldr	r3, [r7, #28]
 81085f8:	3b03      	subs	r3, #3
 81085fa:	e000      	b.n	81085fe <NVIC_EncodePriority+0x32>
 81085fc:	2300      	movs	r3, #0
 81085fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8108600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108604:	69bb      	ldr	r3, [r7, #24]
 8108606:	fa02 f303 	lsl.w	r3, r2, r3
 810860a:	43da      	mvns	r2, r3
 810860c:	68bb      	ldr	r3, [r7, #8]
 810860e:	401a      	ands	r2, r3
 8108610:	697b      	ldr	r3, [r7, #20]
 8108612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8108614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8108618:	697b      	ldr	r3, [r7, #20]
 810861a:	fa01 f303 	lsl.w	r3, r1, r3
 810861e:	43d9      	mvns	r1, r3
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8108624:	4313      	orrs	r3, r2
         );
}
 8108626:	4618      	mov	r0, r3
 8108628:	3724      	adds	r7, #36	; 0x24
 810862a:	46bd      	mov	sp, r7
 810862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108630:	4770      	bx	lr

08108632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8108632:	b580      	push	{r7, lr}
 8108634:	b082      	sub	sp, #8
 8108636:	af00      	add	r7, sp, #0
 8108638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810863a:	6878      	ldr	r0, [r7, #4]
 810863c:	f7ff ff4c 	bl	81084d8 <__NVIC_SetPriorityGrouping>
}
 8108640:	bf00      	nop
 8108642:	3708      	adds	r7, #8
 8108644:	46bd      	mov	sp, r7
 8108646:	bd80      	pop	{r7, pc}

08108648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8108648:	b580      	push	{r7, lr}
 810864a:	b086      	sub	sp, #24
 810864c:	af00      	add	r7, sp, #0
 810864e:	4603      	mov	r3, r0
 8108650:	60b9      	str	r1, [r7, #8]
 8108652:	607a      	str	r2, [r7, #4]
 8108654:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8108656:	f7ff ff63 	bl	8108520 <__NVIC_GetPriorityGrouping>
 810865a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810865c:	687a      	ldr	r2, [r7, #4]
 810865e:	68b9      	ldr	r1, [r7, #8]
 8108660:	6978      	ldr	r0, [r7, #20]
 8108662:	f7ff ffb3 	bl	81085cc <NVIC_EncodePriority>
 8108666:	4602      	mov	r2, r0
 8108668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810866c:	4611      	mov	r1, r2
 810866e:	4618      	mov	r0, r3
 8108670:	f7ff ff82 	bl	8108578 <__NVIC_SetPriority>
}
 8108674:	bf00      	nop
 8108676:	3718      	adds	r7, #24
 8108678:	46bd      	mov	sp, r7
 810867a:	bd80      	pop	{r7, pc}

0810867c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810867c:	b580      	push	{r7, lr}
 810867e:	b082      	sub	sp, #8
 8108680:	af00      	add	r7, sp, #0
 8108682:	4603      	mov	r3, r0
 8108684:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8108686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810868a:	4618      	mov	r0, r3
 810868c:	f7ff ff56 	bl	810853c <__NVIC_EnableIRQ>
}
 8108690:	bf00      	nop
 8108692:	3708      	adds	r7, #8
 8108694:	46bd      	mov	sp, r7
 8108696:	bd80      	pop	{r7, pc}

08108698 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8108698:	b480      	push	{r7}
 810869a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810869c:	4b07      	ldr	r3, [pc, #28]	; (81086bc <HAL_GetCurrentCPUID+0x24>)
 810869e:	681b      	ldr	r3, [r3, #0]
 81086a0:	091b      	lsrs	r3, r3, #4
 81086a2:	f003 030f 	and.w	r3, r3, #15
 81086a6:	2b07      	cmp	r3, #7
 81086a8:	d101      	bne.n	81086ae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81086aa:	2303      	movs	r3, #3
 81086ac:	e000      	b.n	81086b0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81086ae:	2301      	movs	r3, #1
  }
}
 81086b0:	4618      	mov	r0, r3
 81086b2:	46bd      	mov	sp, r7
 81086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086b8:	4770      	bx	lr
 81086ba:	bf00      	nop
 81086bc:	e000ed00 	.word	0xe000ed00

081086c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81086c0:	b480      	push	{r7}
 81086c2:	b089      	sub	sp, #36	; 0x24
 81086c4:	af00      	add	r7, sp, #0
 81086c6:	6078      	str	r0, [r7, #4]
 81086c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81086ca:	2300      	movs	r3, #0
 81086cc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81086ce:	4b89      	ldr	r3, [pc, #548]	; (81088f4 <HAL_GPIO_Init+0x234>)
 81086d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81086d2:	e194      	b.n	81089fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81086d4:	683b      	ldr	r3, [r7, #0]
 81086d6:	681a      	ldr	r2, [r3, #0]
 81086d8:	2101      	movs	r1, #1
 81086da:	69fb      	ldr	r3, [r7, #28]
 81086dc:	fa01 f303 	lsl.w	r3, r1, r3
 81086e0:	4013      	ands	r3, r2
 81086e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81086e4:	693b      	ldr	r3, [r7, #16]
 81086e6:	2b00      	cmp	r3, #0
 81086e8:	f000 8186 	beq.w	81089f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81086ec:	683b      	ldr	r3, [r7, #0]
 81086ee:	685b      	ldr	r3, [r3, #4]
 81086f0:	f003 0303 	and.w	r3, r3, #3
 81086f4:	2b01      	cmp	r3, #1
 81086f6:	d005      	beq.n	8108704 <HAL_GPIO_Init+0x44>
 81086f8:	683b      	ldr	r3, [r7, #0]
 81086fa:	685b      	ldr	r3, [r3, #4]
 81086fc:	f003 0303 	and.w	r3, r3, #3
 8108700:	2b02      	cmp	r3, #2
 8108702:	d130      	bne.n	8108766 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108704:	687b      	ldr	r3, [r7, #4]
 8108706:	689b      	ldr	r3, [r3, #8]
 8108708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810870a:	69fb      	ldr	r3, [r7, #28]
 810870c:	005b      	lsls	r3, r3, #1
 810870e:	2203      	movs	r2, #3
 8108710:	fa02 f303 	lsl.w	r3, r2, r3
 8108714:	43db      	mvns	r3, r3
 8108716:	69ba      	ldr	r2, [r7, #24]
 8108718:	4013      	ands	r3, r2
 810871a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810871c:	683b      	ldr	r3, [r7, #0]
 810871e:	68da      	ldr	r2, [r3, #12]
 8108720:	69fb      	ldr	r3, [r7, #28]
 8108722:	005b      	lsls	r3, r3, #1
 8108724:	fa02 f303 	lsl.w	r3, r2, r3
 8108728:	69ba      	ldr	r2, [r7, #24]
 810872a:	4313      	orrs	r3, r2
 810872c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	69ba      	ldr	r2, [r7, #24]
 8108732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	685b      	ldr	r3, [r3, #4]
 8108738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810873a:	2201      	movs	r2, #1
 810873c:	69fb      	ldr	r3, [r7, #28]
 810873e:	fa02 f303 	lsl.w	r3, r2, r3
 8108742:	43db      	mvns	r3, r3
 8108744:	69ba      	ldr	r2, [r7, #24]
 8108746:	4013      	ands	r3, r2
 8108748:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810874a:	683b      	ldr	r3, [r7, #0]
 810874c:	685b      	ldr	r3, [r3, #4]
 810874e:	091b      	lsrs	r3, r3, #4
 8108750:	f003 0201 	and.w	r2, r3, #1
 8108754:	69fb      	ldr	r3, [r7, #28]
 8108756:	fa02 f303 	lsl.w	r3, r2, r3
 810875a:	69ba      	ldr	r2, [r7, #24]
 810875c:	4313      	orrs	r3, r2
 810875e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	69ba      	ldr	r2, [r7, #24]
 8108764:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8108766:	683b      	ldr	r3, [r7, #0]
 8108768:	685b      	ldr	r3, [r3, #4]
 810876a:	f003 0303 	and.w	r3, r3, #3
 810876e:	2b03      	cmp	r3, #3
 8108770:	d017      	beq.n	81087a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	68db      	ldr	r3, [r3, #12]
 8108776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8108778:	69fb      	ldr	r3, [r7, #28]
 810877a:	005b      	lsls	r3, r3, #1
 810877c:	2203      	movs	r2, #3
 810877e:	fa02 f303 	lsl.w	r3, r2, r3
 8108782:	43db      	mvns	r3, r3
 8108784:	69ba      	ldr	r2, [r7, #24]
 8108786:	4013      	ands	r3, r2
 8108788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810878a:	683b      	ldr	r3, [r7, #0]
 810878c:	689a      	ldr	r2, [r3, #8]
 810878e:	69fb      	ldr	r3, [r7, #28]
 8108790:	005b      	lsls	r3, r3, #1
 8108792:	fa02 f303 	lsl.w	r3, r2, r3
 8108796:	69ba      	ldr	r2, [r7, #24]
 8108798:	4313      	orrs	r3, r2
 810879a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810879c:	687b      	ldr	r3, [r7, #4]
 810879e:	69ba      	ldr	r2, [r7, #24]
 81087a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81087a2:	683b      	ldr	r3, [r7, #0]
 81087a4:	685b      	ldr	r3, [r3, #4]
 81087a6:	f003 0303 	and.w	r3, r3, #3
 81087aa:	2b02      	cmp	r3, #2
 81087ac:	d123      	bne.n	81087f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81087ae:	69fb      	ldr	r3, [r7, #28]
 81087b0:	08da      	lsrs	r2, r3, #3
 81087b2:	687b      	ldr	r3, [r7, #4]
 81087b4:	3208      	adds	r2, #8
 81087b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81087ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81087bc:	69fb      	ldr	r3, [r7, #28]
 81087be:	f003 0307 	and.w	r3, r3, #7
 81087c2:	009b      	lsls	r3, r3, #2
 81087c4:	220f      	movs	r2, #15
 81087c6:	fa02 f303 	lsl.w	r3, r2, r3
 81087ca:	43db      	mvns	r3, r3
 81087cc:	69ba      	ldr	r2, [r7, #24]
 81087ce:	4013      	ands	r3, r2
 81087d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81087d2:	683b      	ldr	r3, [r7, #0]
 81087d4:	691a      	ldr	r2, [r3, #16]
 81087d6:	69fb      	ldr	r3, [r7, #28]
 81087d8:	f003 0307 	and.w	r3, r3, #7
 81087dc:	009b      	lsls	r3, r3, #2
 81087de:	fa02 f303 	lsl.w	r3, r2, r3
 81087e2:	69ba      	ldr	r2, [r7, #24]
 81087e4:	4313      	orrs	r3, r2
 81087e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81087e8:	69fb      	ldr	r3, [r7, #28]
 81087ea:	08da      	lsrs	r2, r3, #3
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	3208      	adds	r2, #8
 81087f0:	69b9      	ldr	r1, [r7, #24]
 81087f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81087f6:	687b      	ldr	r3, [r7, #4]
 81087f8:	681b      	ldr	r3, [r3, #0]
 81087fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81087fc:	69fb      	ldr	r3, [r7, #28]
 81087fe:	005b      	lsls	r3, r3, #1
 8108800:	2203      	movs	r2, #3
 8108802:	fa02 f303 	lsl.w	r3, r2, r3
 8108806:	43db      	mvns	r3, r3
 8108808:	69ba      	ldr	r2, [r7, #24]
 810880a:	4013      	ands	r3, r2
 810880c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810880e:	683b      	ldr	r3, [r7, #0]
 8108810:	685b      	ldr	r3, [r3, #4]
 8108812:	f003 0203 	and.w	r2, r3, #3
 8108816:	69fb      	ldr	r3, [r7, #28]
 8108818:	005b      	lsls	r3, r3, #1
 810881a:	fa02 f303 	lsl.w	r3, r2, r3
 810881e:	69ba      	ldr	r2, [r7, #24]
 8108820:	4313      	orrs	r3, r2
 8108822:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	69ba      	ldr	r2, [r7, #24]
 8108828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810882a:	683b      	ldr	r3, [r7, #0]
 810882c:	685b      	ldr	r3, [r3, #4]
 810882e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8108832:	2b00      	cmp	r3, #0
 8108834:	f000 80e0 	beq.w	81089f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108838:	4b2f      	ldr	r3, [pc, #188]	; (81088f8 <HAL_GPIO_Init+0x238>)
 810883a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810883e:	4a2e      	ldr	r2, [pc, #184]	; (81088f8 <HAL_GPIO_Init+0x238>)
 8108840:	f043 0302 	orr.w	r3, r3, #2
 8108844:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8108848:	4b2b      	ldr	r3, [pc, #172]	; (81088f8 <HAL_GPIO_Init+0x238>)
 810884a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810884e:	f003 0302 	and.w	r3, r3, #2
 8108852:	60fb      	str	r3, [r7, #12]
 8108854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8108856:	4a29      	ldr	r2, [pc, #164]	; (81088fc <HAL_GPIO_Init+0x23c>)
 8108858:	69fb      	ldr	r3, [r7, #28]
 810885a:	089b      	lsrs	r3, r3, #2
 810885c:	3302      	adds	r3, #2
 810885e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8108862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8108864:	69fb      	ldr	r3, [r7, #28]
 8108866:	f003 0303 	and.w	r3, r3, #3
 810886a:	009b      	lsls	r3, r3, #2
 810886c:	220f      	movs	r2, #15
 810886e:	fa02 f303 	lsl.w	r3, r2, r3
 8108872:	43db      	mvns	r3, r3
 8108874:	69ba      	ldr	r2, [r7, #24]
 8108876:	4013      	ands	r3, r2
 8108878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	4a20      	ldr	r2, [pc, #128]	; (8108900 <HAL_GPIO_Init+0x240>)
 810887e:	4293      	cmp	r3, r2
 8108880:	d052      	beq.n	8108928 <HAL_GPIO_Init+0x268>
 8108882:	687b      	ldr	r3, [r7, #4]
 8108884:	4a1f      	ldr	r2, [pc, #124]	; (8108904 <HAL_GPIO_Init+0x244>)
 8108886:	4293      	cmp	r3, r2
 8108888:	d031      	beq.n	81088ee <HAL_GPIO_Init+0x22e>
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	4a1e      	ldr	r2, [pc, #120]	; (8108908 <HAL_GPIO_Init+0x248>)
 810888e:	4293      	cmp	r3, r2
 8108890:	d02b      	beq.n	81088ea <HAL_GPIO_Init+0x22a>
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	4a1d      	ldr	r2, [pc, #116]	; (810890c <HAL_GPIO_Init+0x24c>)
 8108896:	4293      	cmp	r3, r2
 8108898:	d025      	beq.n	81088e6 <HAL_GPIO_Init+0x226>
 810889a:	687b      	ldr	r3, [r7, #4]
 810889c:	4a1c      	ldr	r2, [pc, #112]	; (8108910 <HAL_GPIO_Init+0x250>)
 810889e:	4293      	cmp	r3, r2
 81088a0:	d01f      	beq.n	81088e2 <HAL_GPIO_Init+0x222>
 81088a2:	687b      	ldr	r3, [r7, #4]
 81088a4:	4a1b      	ldr	r2, [pc, #108]	; (8108914 <HAL_GPIO_Init+0x254>)
 81088a6:	4293      	cmp	r3, r2
 81088a8:	d019      	beq.n	81088de <HAL_GPIO_Init+0x21e>
 81088aa:	687b      	ldr	r3, [r7, #4]
 81088ac:	4a1a      	ldr	r2, [pc, #104]	; (8108918 <HAL_GPIO_Init+0x258>)
 81088ae:	4293      	cmp	r3, r2
 81088b0:	d013      	beq.n	81088da <HAL_GPIO_Init+0x21a>
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	4a19      	ldr	r2, [pc, #100]	; (810891c <HAL_GPIO_Init+0x25c>)
 81088b6:	4293      	cmp	r3, r2
 81088b8:	d00d      	beq.n	81088d6 <HAL_GPIO_Init+0x216>
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	4a18      	ldr	r2, [pc, #96]	; (8108920 <HAL_GPIO_Init+0x260>)
 81088be:	4293      	cmp	r3, r2
 81088c0:	d007      	beq.n	81088d2 <HAL_GPIO_Init+0x212>
 81088c2:	687b      	ldr	r3, [r7, #4]
 81088c4:	4a17      	ldr	r2, [pc, #92]	; (8108924 <HAL_GPIO_Init+0x264>)
 81088c6:	4293      	cmp	r3, r2
 81088c8:	d101      	bne.n	81088ce <HAL_GPIO_Init+0x20e>
 81088ca:	2309      	movs	r3, #9
 81088cc:	e02d      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088ce:	230a      	movs	r3, #10
 81088d0:	e02b      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088d2:	2308      	movs	r3, #8
 81088d4:	e029      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088d6:	2307      	movs	r3, #7
 81088d8:	e027      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088da:	2306      	movs	r3, #6
 81088dc:	e025      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088de:	2305      	movs	r3, #5
 81088e0:	e023      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088e2:	2304      	movs	r3, #4
 81088e4:	e021      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088e6:	2303      	movs	r3, #3
 81088e8:	e01f      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088ea:	2302      	movs	r3, #2
 81088ec:	e01d      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088ee:	2301      	movs	r3, #1
 81088f0:	e01b      	b.n	810892a <HAL_GPIO_Init+0x26a>
 81088f2:	bf00      	nop
 81088f4:	580000c0 	.word	0x580000c0
 81088f8:	58024400 	.word	0x58024400
 81088fc:	58000400 	.word	0x58000400
 8108900:	58020000 	.word	0x58020000
 8108904:	58020400 	.word	0x58020400
 8108908:	58020800 	.word	0x58020800
 810890c:	58020c00 	.word	0x58020c00
 8108910:	58021000 	.word	0x58021000
 8108914:	58021400 	.word	0x58021400
 8108918:	58021800 	.word	0x58021800
 810891c:	58021c00 	.word	0x58021c00
 8108920:	58022000 	.word	0x58022000
 8108924:	58022400 	.word	0x58022400
 8108928:	2300      	movs	r3, #0
 810892a:	69fa      	ldr	r2, [r7, #28]
 810892c:	f002 0203 	and.w	r2, r2, #3
 8108930:	0092      	lsls	r2, r2, #2
 8108932:	4093      	lsls	r3, r2
 8108934:	69ba      	ldr	r2, [r7, #24]
 8108936:	4313      	orrs	r3, r2
 8108938:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810893a:	4938      	ldr	r1, [pc, #224]	; (8108a1c <HAL_GPIO_Init+0x35c>)
 810893c:	69fb      	ldr	r3, [r7, #28]
 810893e:	089b      	lsrs	r3, r3, #2
 8108940:	3302      	adds	r3, #2
 8108942:	69ba      	ldr	r2, [r7, #24]
 8108944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8108948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108950:	693b      	ldr	r3, [r7, #16]
 8108952:	43db      	mvns	r3, r3
 8108954:	69ba      	ldr	r2, [r7, #24]
 8108956:	4013      	ands	r3, r2
 8108958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810895a:	683b      	ldr	r3, [r7, #0]
 810895c:	685b      	ldr	r3, [r3, #4]
 810895e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108962:	2b00      	cmp	r3, #0
 8108964:	d003      	beq.n	810896e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8108966:	69ba      	ldr	r2, [r7, #24]
 8108968:	693b      	ldr	r3, [r7, #16]
 810896a:	4313      	orrs	r3, r2
 810896c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810896e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8108972:	69bb      	ldr	r3, [r7, #24]
 8108974:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8108976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810897a:	685b      	ldr	r3, [r3, #4]
 810897c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810897e:	693b      	ldr	r3, [r7, #16]
 8108980:	43db      	mvns	r3, r3
 8108982:	69ba      	ldr	r2, [r7, #24]
 8108984:	4013      	ands	r3, r2
 8108986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8108988:	683b      	ldr	r3, [r7, #0]
 810898a:	685b      	ldr	r3, [r3, #4]
 810898c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108990:	2b00      	cmp	r3, #0
 8108992:	d003      	beq.n	810899c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8108994:	69ba      	ldr	r2, [r7, #24]
 8108996:	693b      	ldr	r3, [r7, #16]
 8108998:	4313      	orrs	r3, r2
 810899a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810899c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81089a0:	69bb      	ldr	r3, [r7, #24]
 81089a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81089a4:	697b      	ldr	r3, [r7, #20]
 81089a6:	685b      	ldr	r3, [r3, #4]
 81089a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81089aa:	693b      	ldr	r3, [r7, #16]
 81089ac:	43db      	mvns	r3, r3
 81089ae:	69ba      	ldr	r2, [r7, #24]
 81089b0:	4013      	ands	r3, r2
 81089b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81089b4:	683b      	ldr	r3, [r7, #0]
 81089b6:	685b      	ldr	r3, [r3, #4]
 81089b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81089bc:	2b00      	cmp	r3, #0
 81089be:	d003      	beq.n	81089c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81089c0:	69ba      	ldr	r2, [r7, #24]
 81089c2:	693b      	ldr	r3, [r7, #16]
 81089c4:	4313      	orrs	r3, r2
 81089c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81089c8:	697b      	ldr	r3, [r7, #20]
 81089ca:	69ba      	ldr	r2, [r7, #24]
 81089cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81089ce:	697b      	ldr	r3, [r7, #20]
 81089d0:	681b      	ldr	r3, [r3, #0]
 81089d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81089d4:	693b      	ldr	r3, [r7, #16]
 81089d6:	43db      	mvns	r3, r3
 81089d8:	69ba      	ldr	r2, [r7, #24]
 81089da:	4013      	ands	r3, r2
 81089dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81089de:	683b      	ldr	r3, [r7, #0]
 81089e0:	685b      	ldr	r3, [r3, #4]
 81089e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d003      	beq.n	81089f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81089ea:	69ba      	ldr	r2, [r7, #24]
 81089ec:	693b      	ldr	r3, [r7, #16]
 81089ee:	4313      	orrs	r3, r2
 81089f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81089f2:	697b      	ldr	r3, [r7, #20]
 81089f4:	69ba      	ldr	r2, [r7, #24]
 81089f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81089f8:	69fb      	ldr	r3, [r7, #28]
 81089fa:	3301      	adds	r3, #1
 81089fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81089fe:	683b      	ldr	r3, [r7, #0]
 8108a00:	681a      	ldr	r2, [r3, #0]
 8108a02:	69fb      	ldr	r3, [r7, #28]
 8108a04:	fa22 f303 	lsr.w	r3, r2, r3
 8108a08:	2b00      	cmp	r3, #0
 8108a0a:	f47f ae63 	bne.w	81086d4 <HAL_GPIO_Init+0x14>
  }
}
 8108a0e:	bf00      	nop
 8108a10:	bf00      	nop
 8108a12:	3724      	adds	r7, #36	; 0x24
 8108a14:	46bd      	mov	sp, r7
 8108a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a1a:	4770      	bx	lr
 8108a1c:	58000400 	.word	0x58000400

08108a20 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8108a20:	b480      	push	{r7}
 8108a22:	b083      	sub	sp, #12
 8108a24:	af00      	add	r7, sp, #0
 8108a26:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8108a28:	4b05      	ldr	r3, [pc, #20]	; (8108a40 <HAL_HSEM_ActivateNotification+0x20>)
 8108a2a:	681a      	ldr	r2, [r3, #0]
 8108a2c:	4904      	ldr	r1, [pc, #16]	; (8108a40 <HAL_HSEM_ActivateNotification+0x20>)
 8108a2e:	687b      	ldr	r3, [r7, #4]
 8108a30:	4313      	orrs	r3, r2
 8108a32:	600b      	str	r3, [r1, #0]
#endif
}
 8108a34:	bf00      	nop
 8108a36:	370c      	adds	r7, #12
 8108a38:	46bd      	mov	sp, r7
 8108a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a3e:	4770      	bx	lr
 8108a40:	58026510 	.word	0x58026510

08108a44 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108a44:	b580      	push	{r7, lr}
 8108a46:	b084      	sub	sp, #16
 8108a48:	af00      	add	r7, sp, #0
 8108a4a:	60f8      	str	r0, [r7, #12]
 8108a4c:	460b      	mov	r3, r1
 8108a4e:	607a      	str	r2, [r7, #4]
 8108a50:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108a52:	4b37      	ldr	r3, [pc, #220]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f023 0201 	bic.w	r2, r3, #1
 8108a5a:	4935      	ldr	r1, [pc, #212]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a5c:	68fb      	ldr	r3, [r7, #12]
 8108a5e:	4313      	orrs	r3, r2
 8108a60:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	2b00      	cmp	r3, #0
 8108a66:	d123      	bne.n	8108ab0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108a68:	f7ff fe16 	bl	8108698 <HAL_GetCurrentCPUID>
 8108a6c:	4603      	mov	r3, r0
 8108a6e:	2b03      	cmp	r3, #3
 8108a70:	d158      	bne.n	8108b24 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108a72:	4b2f      	ldr	r3, [pc, #188]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a74:	691b      	ldr	r3, [r3, #16]
 8108a76:	4a2e      	ldr	r2, [pc, #184]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a78:	f023 0301 	bic.w	r3, r3, #1
 8108a7c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108a7e:	4b2d      	ldr	r3, [pc, #180]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108a80:	691b      	ldr	r3, [r3, #16]
 8108a82:	4a2c      	ldr	r2, [pc, #176]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108a84:	f043 0304 	orr.w	r3, r3, #4
 8108a88:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8108a8a:	f3bf 8f4f 	dsb	sy
}
 8108a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108a90:	f3bf 8f6f 	isb	sy
}
 8108a94:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108a96:	7afb      	ldrb	r3, [r7, #11]
 8108a98:	2b01      	cmp	r3, #1
 8108a9a:	d101      	bne.n	8108aa0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108a9c:	bf30      	wfi
 8108a9e:	e000      	b.n	8108aa2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108aa0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108aa2:	4b24      	ldr	r3, [pc, #144]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108aa4:	691b      	ldr	r3, [r3, #16]
 8108aa6:	4a23      	ldr	r2, [pc, #140]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108aa8:	f023 0304 	bic.w	r3, r3, #4
 8108aac:	6113      	str	r3, [r2, #16]
 8108aae:	e03c      	b.n	8108b2a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	2b01      	cmp	r3, #1
 8108ab4:	d123      	bne.n	8108afe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108ab6:	f7ff fdef 	bl	8108698 <HAL_GetCurrentCPUID>
 8108aba:	4603      	mov	r3, r0
 8108abc:	2b01      	cmp	r3, #1
 8108abe:	d133      	bne.n	8108b28 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108ac0:	4b1b      	ldr	r3, [pc, #108]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108ac2:	695b      	ldr	r3, [r3, #20]
 8108ac4:	4a1a      	ldr	r2, [pc, #104]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108ac6:	f023 0302 	bic.w	r3, r3, #2
 8108aca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108acc:	4b19      	ldr	r3, [pc, #100]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ace:	691b      	ldr	r3, [r3, #16]
 8108ad0:	4a18      	ldr	r2, [pc, #96]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ad2:	f043 0304 	orr.w	r3, r3, #4
 8108ad6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108ad8:	f3bf 8f4f 	dsb	sy
}
 8108adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108ade:	f3bf 8f6f 	isb	sy
}
 8108ae2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108ae4:	7afb      	ldrb	r3, [r7, #11]
 8108ae6:	2b01      	cmp	r3, #1
 8108ae8:	d101      	bne.n	8108aee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108aea:	bf30      	wfi
 8108aec:	e000      	b.n	8108af0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108aee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108af0:	4b10      	ldr	r3, [pc, #64]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108af2:	691b      	ldr	r3, [r3, #16]
 8108af4:	4a0f      	ldr	r2, [pc, #60]	; (8108b34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108af6:	f023 0304 	bic.w	r3, r3, #4
 8108afa:	6113      	str	r3, [r2, #16]
 8108afc:	e015      	b.n	8108b2a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108afe:	f7ff fdcb 	bl	8108698 <HAL_GetCurrentCPUID>
 8108b02:	4603      	mov	r3, r0
 8108b04:	2b03      	cmp	r3, #3
 8108b06:	d106      	bne.n	8108b16 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108b08:	4b09      	ldr	r3, [pc, #36]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108b0a:	691b      	ldr	r3, [r3, #16]
 8108b0c:	4a08      	ldr	r2, [pc, #32]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108b0e:	f023 0304 	bic.w	r3, r3, #4
 8108b12:	6113      	str	r3, [r2, #16]
 8108b14:	e009      	b.n	8108b2a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108b16:	4b06      	ldr	r3, [pc, #24]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108b18:	695b      	ldr	r3, [r3, #20]
 8108b1a:	4a05      	ldr	r2, [pc, #20]	; (8108b30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108b1c:	f023 0304 	bic.w	r3, r3, #4
 8108b20:	6153      	str	r3, [r2, #20]
 8108b22:	e002      	b.n	8108b2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108b24:	bf00      	nop
 8108b26:	e000      	b.n	8108b2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108b28:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108b2a:	3710      	adds	r7, #16
 8108b2c:	46bd      	mov	sp, r7
 8108b2e:	bd80      	pop	{r7, pc}
 8108b30:	58024800 	.word	0x58024800
 8108b34:	e000ed00 	.word	0xe000ed00

08108b38 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108b38:	b580      	push	{r7, lr}
 8108b3a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108b3c:	f7ff fdac 	bl	8108698 <HAL_GetCurrentCPUID>
 8108b40:	4603      	mov	r3, r0
 8108b42:	2b03      	cmp	r3, #3
 8108b44:	d101      	bne.n	8108b4a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108b46:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108b48:	e001      	b.n	8108b4e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108b4a:	bf40      	sev
    __WFE ();
 8108b4c:	bf20      	wfe
}
 8108b4e:	bf00      	nop
 8108b50:	bd80      	pop	{r7, pc}
	...

08108b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108b54:	b480      	push	{r7}
 8108b56:	b089      	sub	sp, #36	; 0x24
 8108b58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108b5a:	4bb3      	ldr	r3, [pc, #716]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b5c:	691b      	ldr	r3, [r3, #16]
 8108b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108b62:	2b18      	cmp	r3, #24
 8108b64:	f200 8155 	bhi.w	8108e12 <HAL_RCC_GetSysClockFreq+0x2be>
 8108b68:	a201      	add	r2, pc, #4	; (adr r2, 8108b70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8108b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b6e:	bf00      	nop
 8108b70:	08108bd5 	.word	0x08108bd5
 8108b74:	08108e13 	.word	0x08108e13
 8108b78:	08108e13 	.word	0x08108e13
 8108b7c:	08108e13 	.word	0x08108e13
 8108b80:	08108e13 	.word	0x08108e13
 8108b84:	08108e13 	.word	0x08108e13
 8108b88:	08108e13 	.word	0x08108e13
 8108b8c:	08108e13 	.word	0x08108e13
 8108b90:	08108bfb 	.word	0x08108bfb
 8108b94:	08108e13 	.word	0x08108e13
 8108b98:	08108e13 	.word	0x08108e13
 8108b9c:	08108e13 	.word	0x08108e13
 8108ba0:	08108e13 	.word	0x08108e13
 8108ba4:	08108e13 	.word	0x08108e13
 8108ba8:	08108e13 	.word	0x08108e13
 8108bac:	08108e13 	.word	0x08108e13
 8108bb0:	08108c01 	.word	0x08108c01
 8108bb4:	08108e13 	.word	0x08108e13
 8108bb8:	08108e13 	.word	0x08108e13
 8108bbc:	08108e13 	.word	0x08108e13
 8108bc0:	08108e13 	.word	0x08108e13
 8108bc4:	08108e13 	.word	0x08108e13
 8108bc8:	08108e13 	.word	0x08108e13
 8108bcc:	08108e13 	.word	0x08108e13
 8108bd0:	08108c07 	.word	0x08108c07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108bd4:	4b94      	ldr	r3, [pc, #592]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	f003 0320 	and.w	r3, r3, #32
 8108bdc:	2b00      	cmp	r3, #0
 8108bde:	d009      	beq.n	8108bf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108be0:	4b91      	ldr	r3, [pc, #580]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	08db      	lsrs	r3, r3, #3
 8108be6:	f003 0303 	and.w	r3, r3, #3
 8108bea:	4a90      	ldr	r2, [pc, #576]	; (8108e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108bec:	fa22 f303 	lsr.w	r3, r2, r3
 8108bf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108bf2:	e111      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108bf4:	4b8d      	ldr	r3, [pc, #564]	; (8108e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108bf6:	61bb      	str	r3, [r7, #24]
    break;
 8108bf8:	e10e      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8108bfa:	4b8d      	ldr	r3, [pc, #564]	; (8108e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108bfc:	61bb      	str	r3, [r7, #24]
    break;
 8108bfe:	e10b      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108c00:	4b8c      	ldr	r3, [pc, #560]	; (8108e34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108c02:	61bb      	str	r3, [r7, #24]
    break;
 8108c04:	e108      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108c06:	4b88      	ldr	r3, [pc, #544]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c0a:	f003 0303 	and.w	r3, r3, #3
 8108c0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108c10:	4b85      	ldr	r3, [pc, #532]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c14:	091b      	lsrs	r3, r3, #4
 8108c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108c1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108c1c:	4b82      	ldr	r3, [pc, #520]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c20:	f003 0301 	and.w	r3, r3, #1
 8108c24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108c26:	4b80      	ldr	r3, [pc, #512]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108c2a:	08db      	lsrs	r3, r3, #3
 8108c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108c30:	68fa      	ldr	r2, [r7, #12]
 8108c32:	fb02 f303 	mul.w	r3, r2, r3
 8108c36:	ee07 3a90 	vmov	s15, r3
 8108c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8108c42:	693b      	ldr	r3, [r7, #16]
 8108c44:	2b00      	cmp	r3, #0
 8108c46:	f000 80e1 	beq.w	8108e0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8108c4a:	697b      	ldr	r3, [r7, #20]
 8108c4c:	2b02      	cmp	r3, #2
 8108c4e:	f000 8083 	beq.w	8108d58 <HAL_RCC_GetSysClockFreq+0x204>
 8108c52:	697b      	ldr	r3, [r7, #20]
 8108c54:	2b02      	cmp	r3, #2
 8108c56:	f200 80a1 	bhi.w	8108d9c <HAL_RCC_GetSysClockFreq+0x248>
 8108c5a:	697b      	ldr	r3, [r7, #20]
 8108c5c:	2b00      	cmp	r3, #0
 8108c5e:	d003      	beq.n	8108c68 <HAL_RCC_GetSysClockFreq+0x114>
 8108c60:	697b      	ldr	r3, [r7, #20]
 8108c62:	2b01      	cmp	r3, #1
 8108c64:	d056      	beq.n	8108d14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8108c66:	e099      	b.n	8108d9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108c68:	4b6f      	ldr	r3, [pc, #444]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c6a:	681b      	ldr	r3, [r3, #0]
 8108c6c:	f003 0320 	and.w	r3, r3, #32
 8108c70:	2b00      	cmp	r3, #0
 8108c72:	d02d      	beq.n	8108cd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108c74:	4b6c      	ldr	r3, [pc, #432]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c76:	681b      	ldr	r3, [r3, #0]
 8108c78:	08db      	lsrs	r3, r3, #3
 8108c7a:	f003 0303 	and.w	r3, r3, #3
 8108c7e:	4a6b      	ldr	r2, [pc, #428]	; (8108e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108c80:	fa22 f303 	lsr.w	r3, r2, r3
 8108c84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	ee07 3a90 	vmov	s15, r3
 8108c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c90:	693b      	ldr	r3, [r7, #16]
 8108c92:	ee07 3a90 	vmov	s15, r3
 8108c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c9e:	4b62      	ldr	r3, [pc, #392]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ca6:	ee07 3a90 	vmov	s15, r3
 8108caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8108cb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8108cce:	e087      	b.n	8108de0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108cd0:	693b      	ldr	r3, [r7, #16]
 8108cd2:	ee07 3a90 	vmov	s15, r3
 8108cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108cda:	eddf 6a58 	vldr	s13, [pc, #352]	; 8108e3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8108cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ce2:	4b51      	ldr	r3, [pc, #324]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108cea:	ee07 3a90 	vmov	s15, r3
 8108cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8108cf6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d12:	e065      	b.n	8108de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d14:	693b      	ldr	r3, [r7, #16]
 8108d16:	ee07 3a90 	vmov	s15, r3
 8108d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8108e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d26:	4b40      	ldr	r3, [pc, #256]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d2e:	ee07 3a90 	vmov	s15, r3
 8108d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8108d3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d56:	e043      	b.n	8108de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d58:	693b      	ldr	r3, [r7, #16]
 8108d5a:	ee07 3a90 	vmov	s15, r3
 8108d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8108e44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8108d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d6a:	4b2f      	ldr	r3, [pc, #188]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d72:	ee07 3a90 	vmov	s15, r3
 8108d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8108d7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d9a:	e021      	b.n	8108de0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d9c:	693b      	ldr	r3, [r7, #16]
 8108d9e:	ee07 3a90 	vmov	s15, r3
 8108da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108da6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8108e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108dae:	4b1e      	ldr	r3, [pc, #120]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108db6:	ee07 3a90 	vmov	s15, r3
 8108dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8108dc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108dde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108de0:	4b11      	ldr	r3, [pc, #68]	; (8108e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108de4:	0a5b      	lsrs	r3, r3, #9
 8108de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108dea:	3301      	adds	r3, #1
 8108dec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8108dee:	683b      	ldr	r3, [r7, #0]
 8108df0:	ee07 3a90 	vmov	s15, r3
 8108df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8108dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108e04:	ee17 3a90 	vmov	r3, s15
 8108e08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8108e0a:	e005      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8108e0c:	2300      	movs	r3, #0
 8108e0e:	61bb      	str	r3, [r7, #24]
    break;
 8108e10:	e002      	b.n	8108e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108e12:	4b07      	ldr	r3, [pc, #28]	; (8108e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108e14:	61bb      	str	r3, [r7, #24]
    break;
 8108e16:	bf00      	nop
  }

  return sysclockfreq;
 8108e18:	69bb      	ldr	r3, [r7, #24]
}
 8108e1a:	4618      	mov	r0, r3
 8108e1c:	3724      	adds	r7, #36	; 0x24
 8108e1e:	46bd      	mov	sp, r7
 8108e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e24:	4770      	bx	lr
 8108e26:	bf00      	nop
 8108e28:	58024400 	.word	0x58024400
 8108e2c:	03d09000 	.word	0x03d09000
 8108e30:	003d0900 	.word	0x003d0900
 8108e34:	007a1200 	.word	0x007a1200
 8108e38:	46000000 	.word	0x46000000
 8108e3c:	4c742400 	.word	0x4c742400
 8108e40:	4a742400 	.word	0x4a742400
 8108e44:	4af42400 	.word	0x4af42400

08108e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108e48:	b580      	push	{r7, lr}
 8108e4a:	b082      	sub	sp, #8
 8108e4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108e4e:	f7ff fe81 	bl	8108b54 <HAL_RCC_GetSysClockFreq>
 8108e52:	4602      	mov	r2, r0
 8108e54:	4b11      	ldr	r3, [pc, #68]	; (8108e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8108e56:	699b      	ldr	r3, [r3, #24]
 8108e58:	0a1b      	lsrs	r3, r3, #8
 8108e5a:	f003 030f 	and.w	r3, r3, #15
 8108e5e:	4910      	ldr	r1, [pc, #64]	; (8108ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8108e60:	5ccb      	ldrb	r3, [r1, r3]
 8108e62:	f003 031f 	and.w	r3, r3, #31
 8108e66:	fa22 f303 	lsr.w	r3, r2, r3
 8108e6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108e6c:	4b0b      	ldr	r3, [pc, #44]	; (8108e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8108e6e:	699b      	ldr	r3, [r3, #24]
 8108e70:	f003 030f 	and.w	r3, r3, #15
 8108e74:	4a0a      	ldr	r2, [pc, #40]	; (8108ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8108e76:	5cd3      	ldrb	r3, [r2, r3]
 8108e78:	f003 031f 	and.w	r3, r3, #31
 8108e7c:	687a      	ldr	r2, [r7, #4]
 8108e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8108e82:	4a08      	ldr	r2, [pc, #32]	; (8108ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108e84:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8108e86:	4b07      	ldr	r3, [pc, #28]	; (8108ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108e88:	681b      	ldr	r3, [r3, #0]
 8108e8a:	4a07      	ldr	r2, [pc, #28]	; (8108ea8 <HAL_RCC_GetHCLKFreq+0x60>)
 8108e8c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108e8e:	4b05      	ldr	r3, [pc, #20]	; (8108ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108e90:	681b      	ldr	r3, [r3, #0]
}
 8108e92:	4618      	mov	r0, r3
 8108e94:	3708      	adds	r7, #8
 8108e96:	46bd      	mov	sp, r7
 8108e98:	bd80      	pop	{r7, pc}
 8108e9a:	bf00      	nop
 8108e9c:	58024400 	.word	0x58024400
 8108ea0:	08109570 	.word	0x08109570
 8108ea4:	10008004 	.word	0x10008004
 8108ea8:	10008000 	.word	0x10008000

08108eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108eac:	b580      	push	{r7, lr}
 8108eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108eb0:	f7ff ffca 	bl	8108e48 <HAL_RCC_GetHCLKFreq>
 8108eb4:	4602      	mov	r2, r0
 8108eb6:	4b06      	ldr	r3, [pc, #24]	; (8108ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8108eb8:	69db      	ldr	r3, [r3, #28]
 8108eba:	0a1b      	lsrs	r3, r3, #8
 8108ebc:	f003 0307 	and.w	r3, r3, #7
 8108ec0:	4904      	ldr	r1, [pc, #16]	; (8108ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8108ec2:	5ccb      	ldrb	r3, [r1, r3]
 8108ec4:	f003 031f 	and.w	r3, r3, #31
 8108ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108ecc:	4618      	mov	r0, r3
 8108ece:	bd80      	pop	{r7, pc}
 8108ed0:	58024400 	.word	0x58024400
 8108ed4:	08109570 	.word	0x08109570

08108ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8108ed8:	b480      	push	{r7}
 8108eda:	b083      	sub	sp, #12
 8108edc:	af00      	add	r7, sp, #0
 8108ede:	6078      	str	r0, [r7, #4]
 8108ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	223f      	movs	r2, #63	; 0x3f
 8108ee6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8108ee8:	4b1a      	ldr	r3, [pc, #104]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108eea:	691b      	ldr	r3, [r3, #16]
 8108eec:	f003 0207 	and.w	r2, r3, #7
 8108ef0:	687b      	ldr	r3, [r7, #4]
 8108ef2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8108ef4:	4b17      	ldr	r3, [pc, #92]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108ef6:	699b      	ldr	r3, [r3, #24]
 8108ef8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8108efc:	687b      	ldr	r3, [r7, #4]
 8108efe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8108f00:	4b14      	ldr	r3, [pc, #80]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108f02:	699b      	ldr	r3, [r3, #24]
 8108f04:	f003 020f 	and.w	r2, r3, #15
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8108f0c:	4b11      	ldr	r3, [pc, #68]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108f0e:	699b      	ldr	r3, [r3, #24]
 8108f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8108f18:	4b0e      	ldr	r3, [pc, #56]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108f1a:	69db      	ldr	r3, [r3, #28]
 8108f1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8108f20:	687b      	ldr	r3, [r7, #4]
 8108f22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8108f24:	4b0b      	ldr	r3, [pc, #44]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108f26:	69db      	ldr	r3, [r3, #28]
 8108f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8108f30:	4b08      	ldr	r3, [pc, #32]	; (8108f54 <HAL_RCC_GetClockConfig+0x7c>)
 8108f32:	6a1b      	ldr	r3, [r3, #32]
 8108f34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8108f3c:	4b06      	ldr	r3, [pc, #24]	; (8108f58 <HAL_RCC_GetClockConfig+0x80>)
 8108f3e:	681b      	ldr	r3, [r3, #0]
 8108f40:	f003 020f 	and.w	r2, r3, #15
 8108f44:	683b      	ldr	r3, [r7, #0]
 8108f46:	601a      	str	r2, [r3, #0]
}
 8108f48:	bf00      	nop
 8108f4a:	370c      	adds	r7, #12
 8108f4c:	46bd      	mov	sp, r7
 8108f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f52:	4770      	bx	lr
 8108f54:	58024400 	.word	0x58024400
 8108f58:	52002000 	.word	0x52002000

08108f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108f5c:	b580      	push	{r7, lr}
 8108f5e:	b082      	sub	sp, #8
 8108f60:	af00      	add	r7, sp, #0
 8108f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	2b00      	cmp	r3, #0
 8108f68:	d101      	bne.n	8108f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108f6a:	2301      	movs	r3, #1
 8108f6c:	e049      	b.n	8109002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108f74:	b2db      	uxtb	r3, r3
 8108f76:	2b00      	cmp	r3, #0
 8108f78:	d106      	bne.n	8108f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108f7a:	687b      	ldr	r3, [r7, #4]
 8108f7c:	2200      	movs	r2, #0
 8108f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108f82:	6878      	ldr	r0, [r7, #4]
 8108f84:	f000 f841 	bl	810900a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	2202      	movs	r2, #2
 8108f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	681a      	ldr	r2, [r3, #0]
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	3304      	adds	r3, #4
 8108f98:	4619      	mov	r1, r3
 8108f9a:	4610      	mov	r0, r2
 8108f9c:	f000 fa00 	bl	81093a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	2201      	movs	r2, #1
 8108fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108fa8:	687b      	ldr	r3, [r7, #4]
 8108faa:	2201      	movs	r2, #1
 8108fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	2201      	movs	r2, #1
 8108fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	2201      	movs	r2, #1
 8108fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	2201      	movs	r2, #1
 8108fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	2201      	movs	r2, #1
 8108fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	2201      	movs	r2, #1
 8108fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	2201      	movs	r2, #1
 8108fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	2201      	movs	r2, #1
 8108fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	2201      	movs	r2, #1
 8108fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8108ff0:	687b      	ldr	r3, [r7, #4]
 8108ff2:	2201      	movs	r2, #1
 8108ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108ff8:	687b      	ldr	r3, [r7, #4]
 8108ffa:	2201      	movs	r2, #1
 8108ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109000:	2300      	movs	r3, #0
}
 8109002:	4618      	mov	r0, r3
 8109004:	3708      	adds	r7, #8
 8109006:	46bd      	mov	sp, r7
 8109008:	bd80      	pop	{r7, pc}

0810900a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810900a:	b480      	push	{r7}
 810900c:	b083      	sub	sp, #12
 810900e:	af00      	add	r7, sp, #0
 8109010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8109012:	bf00      	nop
 8109014:	370c      	adds	r7, #12
 8109016:	46bd      	mov	sp, r7
 8109018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810901c:	4770      	bx	lr
	...

08109020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109020:	b480      	push	{r7}
 8109022:	b085      	sub	sp, #20
 8109024:	af00      	add	r7, sp, #0
 8109026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109028:	687b      	ldr	r3, [r7, #4]
 810902a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810902e:	b2db      	uxtb	r3, r3
 8109030:	2b01      	cmp	r3, #1
 8109032:	d001      	beq.n	8109038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109034:	2301      	movs	r3, #1
 8109036:	e054      	b.n	81090e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	2202      	movs	r2, #2
 810903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	681b      	ldr	r3, [r3, #0]
 8109044:	68da      	ldr	r2, [r3, #12]
 8109046:	687b      	ldr	r3, [r7, #4]
 8109048:	681b      	ldr	r3, [r3, #0]
 810904a:	f042 0201 	orr.w	r2, r2, #1
 810904e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	681b      	ldr	r3, [r3, #0]
 8109054:	4a26      	ldr	r2, [pc, #152]	; (81090f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8109056:	4293      	cmp	r3, r2
 8109058:	d022      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 810905a:	687b      	ldr	r3, [r7, #4]
 810905c:	681b      	ldr	r3, [r3, #0]
 810905e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109062:	d01d      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 8109064:	687b      	ldr	r3, [r7, #4]
 8109066:	681b      	ldr	r3, [r3, #0]
 8109068:	4a22      	ldr	r2, [pc, #136]	; (81090f4 <HAL_TIM_Base_Start_IT+0xd4>)
 810906a:	4293      	cmp	r3, r2
 810906c:	d018      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	681b      	ldr	r3, [r3, #0]
 8109072:	4a21      	ldr	r2, [pc, #132]	; (81090f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8109074:	4293      	cmp	r3, r2
 8109076:	d013      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 8109078:	687b      	ldr	r3, [r7, #4]
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	4a1f      	ldr	r2, [pc, #124]	; (81090fc <HAL_TIM_Base_Start_IT+0xdc>)
 810907e:	4293      	cmp	r3, r2
 8109080:	d00e      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	681b      	ldr	r3, [r3, #0]
 8109086:	4a1e      	ldr	r2, [pc, #120]	; (8109100 <HAL_TIM_Base_Start_IT+0xe0>)
 8109088:	4293      	cmp	r3, r2
 810908a:	d009      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	681b      	ldr	r3, [r3, #0]
 8109090:	4a1c      	ldr	r2, [pc, #112]	; (8109104 <HAL_TIM_Base_Start_IT+0xe4>)
 8109092:	4293      	cmp	r3, r2
 8109094:	d004      	beq.n	81090a0 <HAL_TIM_Base_Start_IT+0x80>
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	4a1b      	ldr	r2, [pc, #108]	; (8109108 <HAL_TIM_Base_Start_IT+0xe8>)
 810909c:	4293      	cmp	r3, r2
 810909e:	d115      	bne.n	81090cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	681b      	ldr	r3, [r3, #0]
 81090a4:	689a      	ldr	r2, [r3, #8]
 81090a6:	4b19      	ldr	r3, [pc, #100]	; (810910c <HAL_TIM_Base_Start_IT+0xec>)
 81090a8:	4013      	ands	r3, r2
 81090aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090ac:	68fb      	ldr	r3, [r7, #12]
 81090ae:	2b06      	cmp	r3, #6
 81090b0:	d015      	beq.n	81090de <HAL_TIM_Base_Start_IT+0xbe>
 81090b2:	68fb      	ldr	r3, [r7, #12]
 81090b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81090b8:	d011      	beq.n	81090de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	681a      	ldr	r2, [r3, #0]
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	681b      	ldr	r3, [r3, #0]
 81090c4:	f042 0201 	orr.w	r2, r2, #1
 81090c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090ca:	e008      	b.n	81090de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81090cc:	687b      	ldr	r3, [r7, #4]
 81090ce:	681b      	ldr	r3, [r3, #0]
 81090d0:	681a      	ldr	r2, [r3, #0]
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	681b      	ldr	r3, [r3, #0]
 81090d6:	f042 0201 	orr.w	r2, r2, #1
 81090da:	601a      	str	r2, [r3, #0]
 81090dc:	e000      	b.n	81090e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81090de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81090e0:	2300      	movs	r3, #0
}
 81090e2:	4618      	mov	r0, r3
 81090e4:	3714      	adds	r7, #20
 81090e6:	46bd      	mov	sp, r7
 81090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090ec:	4770      	bx	lr
 81090ee:	bf00      	nop
 81090f0:	40010000 	.word	0x40010000
 81090f4:	40000400 	.word	0x40000400
 81090f8:	40000800 	.word	0x40000800
 81090fc:	40000c00 	.word	0x40000c00
 8109100:	40010400 	.word	0x40010400
 8109104:	40001800 	.word	0x40001800
 8109108:	40014000 	.word	0x40014000
 810910c:	00010007 	.word	0x00010007

08109110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109110:	b580      	push	{r7, lr}
 8109112:	b082      	sub	sp, #8
 8109114:	af00      	add	r7, sp, #0
 8109116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8109118:	687b      	ldr	r3, [r7, #4]
 810911a:	681b      	ldr	r3, [r3, #0]
 810911c:	691b      	ldr	r3, [r3, #16]
 810911e:	f003 0302 	and.w	r3, r3, #2
 8109122:	2b02      	cmp	r3, #2
 8109124:	d122      	bne.n	810916c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	681b      	ldr	r3, [r3, #0]
 810912a:	68db      	ldr	r3, [r3, #12]
 810912c:	f003 0302 	and.w	r3, r3, #2
 8109130:	2b02      	cmp	r3, #2
 8109132:	d11b      	bne.n	810916c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	681b      	ldr	r3, [r3, #0]
 8109138:	f06f 0202 	mvn.w	r2, #2
 810913c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	2201      	movs	r2, #1
 8109142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	681b      	ldr	r3, [r3, #0]
 8109148:	699b      	ldr	r3, [r3, #24]
 810914a:	f003 0303 	and.w	r3, r3, #3
 810914e:	2b00      	cmp	r3, #0
 8109150:	d003      	beq.n	810915a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109152:	6878      	ldr	r0, [r7, #4]
 8109154:	f000 f905 	bl	8109362 <HAL_TIM_IC_CaptureCallback>
 8109158:	e005      	b.n	8109166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810915a:	6878      	ldr	r0, [r7, #4]
 810915c:	f000 f8f7 	bl	810934e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109160:	6878      	ldr	r0, [r7, #4]
 8109162:	f000 f908 	bl	8109376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	2200      	movs	r2, #0
 810916a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	681b      	ldr	r3, [r3, #0]
 8109170:	691b      	ldr	r3, [r3, #16]
 8109172:	f003 0304 	and.w	r3, r3, #4
 8109176:	2b04      	cmp	r3, #4
 8109178:	d122      	bne.n	81091c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810917a:	687b      	ldr	r3, [r7, #4]
 810917c:	681b      	ldr	r3, [r3, #0]
 810917e:	68db      	ldr	r3, [r3, #12]
 8109180:	f003 0304 	and.w	r3, r3, #4
 8109184:	2b04      	cmp	r3, #4
 8109186:	d11b      	bne.n	81091c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8109188:	687b      	ldr	r3, [r7, #4]
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	f06f 0204 	mvn.w	r2, #4
 8109190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109192:	687b      	ldr	r3, [r7, #4]
 8109194:	2202      	movs	r2, #2
 8109196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109198:	687b      	ldr	r3, [r7, #4]
 810919a:	681b      	ldr	r3, [r3, #0]
 810919c:	699b      	ldr	r3, [r3, #24]
 810919e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81091a2:	2b00      	cmp	r3, #0
 81091a4:	d003      	beq.n	81091ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81091a6:	6878      	ldr	r0, [r7, #4]
 81091a8:	f000 f8db 	bl	8109362 <HAL_TIM_IC_CaptureCallback>
 81091ac:	e005      	b.n	81091ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81091ae:	6878      	ldr	r0, [r7, #4]
 81091b0:	f000 f8cd 	bl	810934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81091b4:	6878      	ldr	r0, [r7, #4]
 81091b6:	f000 f8de 	bl	8109376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81091ba:	687b      	ldr	r3, [r7, #4]
 81091bc:	2200      	movs	r2, #0
 81091be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	681b      	ldr	r3, [r3, #0]
 81091c4:	691b      	ldr	r3, [r3, #16]
 81091c6:	f003 0308 	and.w	r3, r3, #8
 81091ca:	2b08      	cmp	r3, #8
 81091cc:	d122      	bne.n	8109214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	68db      	ldr	r3, [r3, #12]
 81091d4:	f003 0308 	and.w	r3, r3, #8
 81091d8:	2b08      	cmp	r3, #8
 81091da:	d11b      	bne.n	8109214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	f06f 0208 	mvn.w	r2, #8
 81091e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	2204      	movs	r2, #4
 81091ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	681b      	ldr	r3, [r3, #0]
 81091f0:	69db      	ldr	r3, [r3, #28]
 81091f2:	f003 0303 	and.w	r3, r3, #3
 81091f6:	2b00      	cmp	r3, #0
 81091f8:	d003      	beq.n	8109202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81091fa:	6878      	ldr	r0, [r7, #4]
 81091fc:	f000 f8b1 	bl	8109362 <HAL_TIM_IC_CaptureCallback>
 8109200:	e005      	b.n	810920e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109202:	6878      	ldr	r0, [r7, #4]
 8109204:	f000 f8a3 	bl	810934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109208:	6878      	ldr	r0, [r7, #4]
 810920a:	f000 f8b4 	bl	8109376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	2200      	movs	r2, #0
 8109212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	691b      	ldr	r3, [r3, #16]
 810921a:	f003 0310 	and.w	r3, r3, #16
 810921e:	2b10      	cmp	r3, #16
 8109220:	d122      	bne.n	8109268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	681b      	ldr	r3, [r3, #0]
 8109226:	68db      	ldr	r3, [r3, #12]
 8109228:	f003 0310 	and.w	r3, r3, #16
 810922c:	2b10      	cmp	r3, #16
 810922e:	d11b      	bne.n	8109268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	681b      	ldr	r3, [r3, #0]
 8109234:	f06f 0210 	mvn.w	r2, #16
 8109238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	2208      	movs	r2, #8
 810923e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	681b      	ldr	r3, [r3, #0]
 8109244:	69db      	ldr	r3, [r3, #28]
 8109246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810924a:	2b00      	cmp	r3, #0
 810924c:	d003      	beq.n	8109256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810924e:	6878      	ldr	r0, [r7, #4]
 8109250:	f000 f887 	bl	8109362 <HAL_TIM_IC_CaptureCallback>
 8109254:	e005      	b.n	8109262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109256:	6878      	ldr	r0, [r7, #4]
 8109258:	f000 f879 	bl	810934e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810925c:	6878      	ldr	r0, [r7, #4]
 810925e:	f000 f88a 	bl	8109376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	2200      	movs	r2, #0
 8109266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	691b      	ldr	r3, [r3, #16]
 810926e:	f003 0301 	and.w	r3, r3, #1
 8109272:	2b01      	cmp	r3, #1
 8109274:	d10e      	bne.n	8109294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	681b      	ldr	r3, [r3, #0]
 810927a:	68db      	ldr	r3, [r3, #12]
 810927c:	f003 0301 	and.w	r3, r3, #1
 8109280:	2b01      	cmp	r3, #1
 8109282:	d107      	bne.n	8109294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	681b      	ldr	r3, [r3, #0]
 8109288:	f06f 0201 	mvn.w	r2, #1
 810928c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810928e:	6878      	ldr	r0, [r7, #4]
 8109290:	f7fe ff96 	bl	81081c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	691b      	ldr	r3, [r3, #16]
 810929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810929e:	2b80      	cmp	r3, #128	; 0x80
 81092a0:	d10e      	bne.n	81092c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	68db      	ldr	r3, [r3, #12]
 81092a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81092ac:	2b80      	cmp	r3, #128	; 0x80
 81092ae:	d107      	bne.n	81092c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	681b      	ldr	r3, [r3, #0]
 81092b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81092b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81092ba:	6878      	ldr	r0, [r7, #4]
 81092bc:	f000 f914 	bl	81094e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	681b      	ldr	r3, [r3, #0]
 81092c4:	691b      	ldr	r3, [r3, #16]
 81092c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81092ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81092ce:	d10e      	bne.n	81092ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	681b      	ldr	r3, [r3, #0]
 81092d4:	68db      	ldr	r3, [r3, #12]
 81092d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81092da:	2b80      	cmp	r3, #128	; 0x80
 81092dc:	d107      	bne.n	81092ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81092de:	687b      	ldr	r3, [r7, #4]
 81092e0:	681b      	ldr	r3, [r3, #0]
 81092e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81092e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81092e8:	6878      	ldr	r0, [r7, #4]
 81092ea:	f000 f907 	bl	81094fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	681b      	ldr	r3, [r3, #0]
 81092f2:	691b      	ldr	r3, [r3, #16]
 81092f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81092f8:	2b40      	cmp	r3, #64	; 0x40
 81092fa:	d10e      	bne.n	810931a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	681b      	ldr	r3, [r3, #0]
 8109300:	68db      	ldr	r3, [r3, #12]
 8109302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109306:	2b40      	cmp	r3, #64	; 0x40
 8109308:	d107      	bne.n	810931a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8109312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109314:	6878      	ldr	r0, [r7, #4]
 8109316:	f000 f838 	bl	810938a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	691b      	ldr	r3, [r3, #16]
 8109320:	f003 0320 	and.w	r3, r3, #32
 8109324:	2b20      	cmp	r3, #32
 8109326:	d10e      	bne.n	8109346 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	68db      	ldr	r3, [r3, #12]
 810932e:	f003 0320 	and.w	r3, r3, #32
 8109332:	2b20      	cmp	r3, #32
 8109334:	d107      	bne.n	8109346 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8109336:	687b      	ldr	r3, [r7, #4]
 8109338:	681b      	ldr	r3, [r3, #0]
 810933a:	f06f 0220 	mvn.w	r2, #32
 810933e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109340:	6878      	ldr	r0, [r7, #4]
 8109342:	f000 f8c7 	bl	81094d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8109346:	bf00      	nop
 8109348:	3708      	adds	r7, #8
 810934a:	46bd      	mov	sp, r7
 810934c:	bd80      	pop	{r7, pc}

0810934e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810934e:	b480      	push	{r7}
 8109350:	b083      	sub	sp, #12
 8109352:	af00      	add	r7, sp, #0
 8109354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109356:	bf00      	nop
 8109358:	370c      	adds	r7, #12
 810935a:	46bd      	mov	sp, r7
 810935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109360:	4770      	bx	lr

08109362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109362:	b480      	push	{r7}
 8109364:	b083      	sub	sp, #12
 8109366:	af00      	add	r7, sp, #0
 8109368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810936a:	bf00      	nop
 810936c:	370c      	adds	r7, #12
 810936e:	46bd      	mov	sp, r7
 8109370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109374:	4770      	bx	lr

08109376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109376:	b480      	push	{r7}
 8109378:	b083      	sub	sp, #12
 810937a:	af00      	add	r7, sp, #0
 810937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810937e:	bf00      	nop
 8109380:	370c      	adds	r7, #12
 8109382:	46bd      	mov	sp, r7
 8109384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109388:	4770      	bx	lr

0810938a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810938a:	b480      	push	{r7}
 810938c:	b083      	sub	sp, #12
 810938e:	af00      	add	r7, sp, #0
 8109390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109392:	bf00      	nop
 8109394:	370c      	adds	r7, #12
 8109396:	46bd      	mov	sp, r7
 8109398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810939c:	4770      	bx	lr
	...

081093a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81093a0:	b480      	push	{r7}
 81093a2:	b085      	sub	sp, #20
 81093a4:	af00      	add	r7, sp, #0
 81093a6:	6078      	str	r0, [r7, #4]
 81093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	681b      	ldr	r3, [r3, #0]
 81093ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	4a40      	ldr	r2, [pc, #256]	; (81094b4 <TIM_Base_SetConfig+0x114>)
 81093b4:	4293      	cmp	r3, r2
 81093b6:	d013      	beq.n	81093e0 <TIM_Base_SetConfig+0x40>
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81093be:	d00f      	beq.n	81093e0 <TIM_Base_SetConfig+0x40>
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	4a3d      	ldr	r2, [pc, #244]	; (81094b8 <TIM_Base_SetConfig+0x118>)
 81093c4:	4293      	cmp	r3, r2
 81093c6:	d00b      	beq.n	81093e0 <TIM_Base_SetConfig+0x40>
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	4a3c      	ldr	r2, [pc, #240]	; (81094bc <TIM_Base_SetConfig+0x11c>)
 81093cc:	4293      	cmp	r3, r2
 81093ce:	d007      	beq.n	81093e0 <TIM_Base_SetConfig+0x40>
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	4a3b      	ldr	r2, [pc, #236]	; (81094c0 <TIM_Base_SetConfig+0x120>)
 81093d4:	4293      	cmp	r3, r2
 81093d6:	d003      	beq.n	81093e0 <TIM_Base_SetConfig+0x40>
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	4a3a      	ldr	r2, [pc, #232]	; (81094c4 <TIM_Base_SetConfig+0x124>)
 81093dc:	4293      	cmp	r3, r2
 81093de:	d108      	bne.n	81093f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81093e0:	68fb      	ldr	r3, [r7, #12]
 81093e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81093e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81093e8:	683b      	ldr	r3, [r7, #0]
 81093ea:	685b      	ldr	r3, [r3, #4]
 81093ec:	68fa      	ldr	r2, [r7, #12]
 81093ee:	4313      	orrs	r3, r2
 81093f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	4a2f      	ldr	r2, [pc, #188]	; (81094b4 <TIM_Base_SetConfig+0x114>)
 81093f6:	4293      	cmp	r3, r2
 81093f8:	d01f      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109400:	d01b      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	4a2c      	ldr	r2, [pc, #176]	; (81094b8 <TIM_Base_SetConfig+0x118>)
 8109406:	4293      	cmp	r3, r2
 8109408:	d017      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	4a2b      	ldr	r2, [pc, #172]	; (81094bc <TIM_Base_SetConfig+0x11c>)
 810940e:	4293      	cmp	r3, r2
 8109410:	d013      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	4a2a      	ldr	r2, [pc, #168]	; (81094c0 <TIM_Base_SetConfig+0x120>)
 8109416:	4293      	cmp	r3, r2
 8109418:	d00f      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	4a29      	ldr	r2, [pc, #164]	; (81094c4 <TIM_Base_SetConfig+0x124>)
 810941e:	4293      	cmp	r3, r2
 8109420:	d00b      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 8109422:	687b      	ldr	r3, [r7, #4]
 8109424:	4a28      	ldr	r2, [pc, #160]	; (81094c8 <TIM_Base_SetConfig+0x128>)
 8109426:	4293      	cmp	r3, r2
 8109428:	d007      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	4a27      	ldr	r2, [pc, #156]	; (81094cc <TIM_Base_SetConfig+0x12c>)
 810942e:	4293      	cmp	r3, r2
 8109430:	d003      	beq.n	810943a <TIM_Base_SetConfig+0x9a>
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	4a26      	ldr	r2, [pc, #152]	; (81094d0 <TIM_Base_SetConfig+0x130>)
 8109436:	4293      	cmp	r3, r2
 8109438:	d108      	bne.n	810944c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810943a:	68fb      	ldr	r3, [r7, #12]
 810943c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109442:	683b      	ldr	r3, [r7, #0]
 8109444:	68db      	ldr	r3, [r3, #12]
 8109446:	68fa      	ldr	r2, [r7, #12]
 8109448:	4313      	orrs	r3, r2
 810944a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810944c:	68fb      	ldr	r3, [r7, #12]
 810944e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109452:	683b      	ldr	r3, [r7, #0]
 8109454:	695b      	ldr	r3, [r3, #20]
 8109456:	4313      	orrs	r3, r2
 8109458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	68fa      	ldr	r2, [r7, #12]
 810945e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109460:	683b      	ldr	r3, [r7, #0]
 8109462:	689a      	ldr	r2, [r3, #8]
 8109464:	687b      	ldr	r3, [r7, #4]
 8109466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109468:	683b      	ldr	r3, [r7, #0]
 810946a:	681a      	ldr	r2, [r3, #0]
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	4a10      	ldr	r2, [pc, #64]	; (81094b4 <TIM_Base_SetConfig+0x114>)
 8109474:	4293      	cmp	r3, r2
 8109476:	d00f      	beq.n	8109498 <TIM_Base_SetConfig+0xf8>
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	4a12      	ldr	r2, [pc, #72]	; (81094c4 <TIM_Base_SetConfig+0x124>)
 810947c:	4293      	cmp	r3, r2
 810947e:	d00b      	beq.n	8109498 <TIM_Base_SetConfig+0xf8>
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	4a11      	ldr	r2, [pc, #68]	; (81094c8 <TIM_Base_SetConfig+0x128>)
 8109484:	4293      	cmp	r3, r2
 8109486:	d007      	beq.n	8109498 <TIM_Base_SetConfig+0xf8>
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	4a10      	ldr	r2, [pc, #64]	; (81094cc <TIM_Base_SetConfig+0x12c>)
 810948c:	4293      	cmp	r3, r2
 810948e:	d003      	beq.n	8109498 <TIM_Base_SetConfig+0xf8>
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	4a0f      	ldr	r2, [pc, #60]	; (81094d0 <TIM_Base_SetConfig+0x130>)
 8109494:	4293      	cmp	r3, r2
 8109496:	d103      	bne.n	81094a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109498:	683b      	ldr	r3, [r7, #0]
 810949a:	691a      	ldr	r2, [r3, #16]
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81094a0:	687b      	ldr	r3, [r7, #4]
 81094a2:	2201      	movs	r2, #1
 81094a4:	615a      	str	r2, [r3, #20]
}
 81094a6:	bf00      	nop
 81094a8:	3714      	adds	r7, #20
 81094aa:	46bd      	mov	sp, r7
 81094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094b0:	4770      	bx	lr
 81094b2:	bf00      	nop
 81094b4:	40010000 	.word	0x40010000
 81094b8:	40000400 	.word	0x40000400
 81094bc:	40000800 	.word	0x40000800
 81094c0:	40000c00 	.word	0x40000c00
 81094c4:	40010400 	.word	0x40010400
 81094c8:	40014000 	.word	0x40014000
 81094cc:	40014400 	.word	0x40014400
 81094d0:	40014800 	.word	0x40014800

081094d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81094d4:	b480      	push	{r7}
 81094d6:	b083      	sub	sp, #12
 81094d8:	af00      	add	r7, sp, #0
 81094da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81094dc:	bf00      	nop
 81094de:	370c      	adds	r7, #12
 81094e0:	46bd      	mov	sp, r7
 81094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094e6:	4770      	bx	lr

081094e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81094e8:	b480      	push	{r7}
 81094ea:	b083      	sub	sp, #12
 81094ec:	af00      	add	r7, sp, #0
 81094ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81094f0:	bf00      	nop
 81094f2:	370c      	adds	r7, #12
 81094f4:	46bd      	mov	sp, r7
 81094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094fa:	4770      	bx	lr

081094fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81094fc:	b480      	push	{r7}
 81094fe:	b083      	sub	sp, #12
 8109500:	af00      	add	r7, sp, #0
 8109502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109504:	bf00      	nop
 8109506:	370c      	adds	r7, #12
 8109508:	46bd      	mov	sp, r7
 810950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810950e:	4770      	bx	lr

08109510 <__libc_init_array>:
 8109510:	b570      	push	{r4, r5, r6, lr}
 8109512:	4d0d      	ldr	r5, [pc, #52]	; (8109548 <__libc_init_array+0x38>)
 8109514:	4c0d      	ldr	r4, [pc, #52]	; (810954c <__libc_init_array+0x3c>)
 8109516:	1b64      	subs	r4, r4, r5
 8109518:	10a4      	asrs	r4, r4, #2
 810951a:	2600      	movs	r6, #0
 810951c:	42a6      	cmp	r6, r4
 810951e:	d109      	bne.n	8109534 <__libc_init_array+0x24>
 8109520:	4d0b      	ldr	r5, [pc, #44]	; (8109550 <__libc_init_array+0x40>)
 8109522:	4c0c      	ldr	r4, [pc, #48]	; (8109554 <__libc_init_array+0x44>)
 8109524:	f000 f818 	bl	8109558 <_init>
 8109528:	1b64      	subs	r4, r4, r5
 810952a:	10a4      	asrs	r4, r4, #2
 810952c:	2600      	movs	r6, #0
 810952e:	42a6      	cmp	r6, r4
 8109530:	d105      	bne.n	810953e <__libc_init_array+0x2e>
 8109532:	bd70      	pop	{r4, r5, r6, pc}
 8109534:	f855 3b04 	ldr.w	r3, [r5], #4
 8109538:	4798      	blx	r3
 810953a:	3601      	adds	r6, #1
 810953c:	e7ee      	b.n	810951c <__libc_init_array+0xc>
 810953e:	f855 3b04 	ldr.w	r3, [r5], #4
 8109542:	4798      	blx	r3
 8109544:	3601      	adds	r6, #1
 8109546:	e7f2      	b.n	810952e <__libc_init_array+0x1e>
 8109548:	08109580 	.word	0x08109580
 810954c:	08109580 	.word	0x08109580
 8109550:	08109580 	.word	0x08109580
 8109554:	08109584 	.word	0x08109584

08109558 <_init>:
 8109558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810955a:	bf00      	nop
 810955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810955e:	bc08      	pop	{r3}
 8109560:	469e      	mov	lr, r3
 8109562:	4770      	bx	lr

08109564 <_fini>:
 8109564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109566:	bf00      	nop
 8109568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810956a:	bc08      	pop	{r3}
 810956c:	469e      	mov	lr, r3
 810956e:	4770      	bx	lr
