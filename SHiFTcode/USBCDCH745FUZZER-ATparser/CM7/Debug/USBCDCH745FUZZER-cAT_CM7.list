
USBCDCH745FUZZER-ATparser_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0001b2bc  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  080232bc  080232bc  00057404  2**0
                  CONTENTS
  3 .ARM          00000008  080232bc  080232bc  000332bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  080232c4  080232c4  00057404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000008  080232c4  080232c4  000332c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  080232cc  080232cc  000332cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .privileged_data 00008000  24000000  080232d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002fbc  24008000  0802b2d4  00048000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024b10  24010000  0802e290  00050000  2**16
                  ALLOC
 10 ._user_heap_stack 00001400  24036000  24036000  00056000  2**13
                  ALLOC
 11 ._asan_var    00000004  24037400  24037400  00057400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00057404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00059ac0  00000000  00000000  00057432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000092ba  00000000  00000000  000b0ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00043641  00000000  00000000  000ba1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023b8  00000000  00000000  000fd7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000c870  00000000  00000000  000ffba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004492d  00000000  00000000  0010c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f1d3  00000000  00000000  00150d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001989e3  00000000  00000000  0019ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000049  00000000  00000000  003388fb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000876c  00000000  00000000  00338944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 08 24 21 aa 00 08 b5 9f 00 08 d5 9f 00 08     ...$!...........
 8000010:	95 9f 00 08 f5 9f 00 08 15 a0 00 08 00 00 00 00     ................
	...
 800002c:	15 57 00 08 15 a9 00 08 00 00 00 00 41 56 00 08     .W..........AV..
 800003c:	e5 56 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     .V..q...q...q...
 800004c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800005c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800006c:	19 a9 00 08 25 a9 00 08 71 aa 00 08 71 aa 00 08     ....%...q...q...
 800007c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800008c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800009c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80000ac:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80000bc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80000cc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80000dc:	31 a9 00 08 71 aa 00 08 71 aa 00 08 00 00 00 00     1...q...q.......
 80000ec:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80000fc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800010c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800011c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800012c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800013c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 00 00 00 00     q...q...q.......
 800014c:	00 00 00 00 71 aa 00 08 71 aa 00 08 71 aa 00 08     ....q...q...q...
 800015c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800016c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800017c:	00 00 00 00 3d a9 00 08 71 aa 00 08 71 aa 00 08     ....=...q...q...
 800018c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800019c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80001ac:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80001bc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80001cc:	71 aa 00 08 71 aa 00 08 49 a9 00 08 71 aa 00 08     q...q...I...q...
 80001dc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80001ec:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 80001fc:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800020c:	71 aa 00 08 71 aa 00 08 55 a9 00 08 71 aa 00 08     q...q...U...q...
 800021c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800022c:	00 00 00 00 71 aa 00 08 71 aa 00 08 71 aa 00 08     ....q...q...q...
 800023c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800024c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800025c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800026c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800027c:	71 aa 00 08 71 aa 00 08 71 aa 00 08 71 aa 00 08     q...q...q...q...
 800028c:	00 00 00 00 71 aa 00 08 71 aa 00 08                 ....q...q...

08000298 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
 8000298:	b538      	push	{r3, r4, r5, lr}
    configASSERT( xEventGroup );
 800029a:	b1b8      	cbz	r0, 80002cc <vEventGroupClearBitsCallback+0x34>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800029c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80002a0:	460c      	mov	r4, r1
 80002a2:	d008      	beq.n	80002b6 <vEventGroupClearBitsCallback+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002a8:	f383 8811 	msr	BASEPRI, r3
 80002ac:	f3bf 8f6f 	isb	sy
 80002b0:	f3bf 8f4f 	dsb	sy
 80002b4:	e7fe      	b.n	80002b4 <vEventGroupClearBitsCallback+0x1c>
    taskENTER_CRITICAL();
 80002b6:	4605      	mov	r5, r0
 80002b8:	f009 fcb4 	bl	8009c24 <vPortEnterCritical>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80002bc:	682b      	ldr	r3, [r5, #0]
 80002be:	ea23 0304 	bic.w	r3, r3, r4
 80002c2:	602b      	str	r3, [r5, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
 80002c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    taskEXIT_CRITICAL();
 80002c8:	f009 bcc2 	b.w	8009c50 <vPortExitCritical>
 80002cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002d0:	f383 8811 	msr	BASEPRI, r3
 80002d4:	f3bf 8f6f 	isb	sy
 80002d8:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 80002dc:	e7fe      	b.n	80002dc <vEventGroupClearBitsCallback+0x44>
 80002de:	bf00      	nop

080002e0 <vEventGroupSetBitsCallback>:
    configASSERT( xEventGroup );
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d03d      	beq.n	8000360 <vEventGroupSetBitsCallback+0x80>
{
 80002e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80002e8:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 80002ec:	4688      	mov	r8, r1
 80002ee:	d008      	beq.n	8000302 <vEventGroupSetBitsCallback+0x22>
 80002f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002f4:	f383 8811 	msr	BASEPRI, r3
 80002f8:	f3bf 8f6f 	isb	sy
 80002fc:	f3bf 8f4f 	dsb	sy
 8000300:	e7fe      	b.n	8000300 <vEventGroupSetBitsCallback+0x20>
 8000302:	4605      	mov	r5, r0
    vTaskSuspendAll();
 8000304:	f003 f92c 	bl	8003560 <vTaskSuspendAll>
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000308:	f105 070c 	add.w	r7, r5, #12
        pxEventBits->uxEventBits |= uxBitsToSet;
 800030c:	682b      	ldr	r3, [r5, #0]
        pxListItem = listGET_HEAD_ENTRY( pxList );
 800030e:	692c      	ldr	r4, [r5, #16]
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000310:	ea48 0303 	orr.w	r3, r8, r3
        while( pxListItem != pxListEnd )
 8000314:	42a7      	cmp	r7, r4
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000316:	602b      	str	r3, [r5, #0]
        while( pxListItem != pxListEnd )
 8000318:	d10c      	bne.n	8000334 <vEventGroupSetBitsCallback+0x54>
 800031a:	e01c      	b.n	8000356 <vEventGroupSetBitsCallback+0x76>
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800031c:	ea1c 0f03 	tst.w	ip, r3
 8000320:	d006      	beq.n	8000330 <vEventGroupSetBitsCallback+0x50>
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000322:	01d3      	lsls	r3, r2, #7
                    uxBitsToClear |= uxBitsWaitedFor;
 8000324:	bf48      	it	mi
 8000326:	ea46 060c 	orrmi.w	r6, r6, ip
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800032a:	f004 f9e1 	bl	80046f0 <vTaskRemoveFromUnorderedEventList>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800032e:	682b      	ldr	r3, [r5, #0]
        while( pxListItem != pxListEnd )
 8000330:	42a7      	cmp	r7, r4
 8000332:	d00e      	beq.n	8000352 <vEventGroupSetBitsCallback+0x72>
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000334:	4620      	mov	r0, r4
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000336:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
            pxNext = listGET_NEXT( pxListItem );
 800033a:	6864      	ldr	r4, [r4, #4]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800033c:	6802      	ldr	r2, [r0, #0]
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800033e:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000342:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000346:	d0e9      	beq.n	800031c <vEventGroupSetBitsCallback+0x3c>
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000348:	ea3c 0e03 	bics.w	lr, ip, r3
 800034c:	d0e9      	beq.n	8000322 <vEventGroupSetBitsCallback+0x42>
        while( pxListItem != pxListEnd )
 800034e:	42a7      	cmp	r7, r4
 8000350:	d1f0      	bne.n	8000334 <vEventGroupSetBitsCallback+0x54>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000352:	ea23 0306 	bic.w	r3, r3, r6
 8000356:	602b      	str	r3, [r5, #0]
}
 8000358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ( void ) xTaskResumeAll();
 800035c:	f003 bd9e 	b.w	8003e9c <xTaskResumeAll>
 8000360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000364:	f383 8811 	msr	BASEPRI, r3
 8000368:	f3bf 8f6f 	isb	sy
 800036c:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 8000370:	e7fe      	b.n	8000370 <vEventGroupSetBitsCallback+0x90>
 8000372:	bf00      	nop

08000374 <xEventGroupCreate>:
    {
 8000374:	b538      	push	{r3, r4, r5, lr}
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000376:	2020      	movs	r0, #32
 8000378:	f005 faf2 	bl	8005960 <pvPortMalloc>
        if( pxEventBits != NULL )
 800037c:	4604      	mov	r4, r0
 800037e:	b128      	cbz	r0, 800038c <xEventGroupCreate+0x18>
            pxEventBits->uxEventBits = 0;
 8000380:	2500      	movs	r5, #0
 8000382:	f840 5b04 	str.w	r5, [r0], #4
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000386:	f000 f9ef 	bl	8000768 <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 800038a:	7725      	strb	r5, [r4, #28]
    }
 800038c:	4620      	mov	r0, r4
 800038e:	bd38      	pop	{r3, r4, r5, pc}

08000390 <xEventGroupCreateStatic>:
        configASSERT( pxEventGroupBuffer );
 8000390:	b178      	cbz	r0, 80003b2 <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 8000392:	2320      	movs	r3, #32
    {
 8000394:	b510      	push	{r4, lr}
 8000396:	b082      	sub	sp, #8
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 8000398:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 800039a:	9b01      	ldr	r3, [sp, #4]
 800039c:	2b20      	cmp	r3, #32
 800039e:	d011      	beq.n	80003c4 <xEventGroupCreateStatic+0x34>
 80003a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003a4:	f383 8811 	msr	BASEPRI, r3
 80003a8:	f3bf 8f6f 	isb	sy
 80003ac:	f3bf 8f4f 	dsb	sy
 80003b0:	e7fe      	b.n	80003b0 <xEventGroupCreateStatic+0x20>
 80003b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b6:	f383 8811 	msr	BASEPRI, r3
 80003ba:	f3bf 8f6f 	isb	sy
 80003be:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventGroupBuffer );
 80003c2:	e7fe      	b.n	80003c2 <xEventGroupCreateStatic+0x32>
            pxEventBits->uxEventBits = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	4604      	mov	r4, r0
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80003cc:	f000 f9cc 	bl	8000768 <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 80003d0:	2301      	movs	r3, #1
    }
 80003d2:	4620      	mov	r0, r4
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 80003d4:	7723      	strb	r3, [r4, #28]
    }
 80003d6:	b002      	add	sp, #8
 80003d8:	bd10      	pop	{r4, pc}
 80003da:	bf00      	nop

080003dc <xEventGroupWaitBits>:
{
 80003dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( xEventGroup );
 80003e0:	b1b0      	cbz	r0, 8000410 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80003e2:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80003e6:	460c      	mov	r4, r1
 80003e8:	d109      	bne.n	80003fe <xEventGroupWaitBits+0x22>
    configASSERT( uxBitsToWaitFor != 0 );
 80003ea:	b9d1      	cbnz	r1, 8000422 <xEventGroupWaitBits+0x46>
 80003ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003f0:	f383 8811 	msr	BASEPRI, r3
 80003f4:	f3bf 8f6f 	isb	sy
 80003f8:	f3bf 8f4f 	dsb	sy
 80003fc:	e7fe      	b.n	80003fc <xEventGroupWaitBits+0x20>
 80003fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000402:	f383 8811 	msr	BASEPRI, r3
 8000406:	f3bf 8f6f 	isb	sy
 800040a:	f3bf 8f4f 	dsb	sy
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800040e:	e7fe      	b.n	800040e <xEventGroupWaitBits+0x32>
 8000410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000414:	f383 8811 	msr	BASEPRI, r3
 8000418:	f3bf 8f6f 	isb	sy
 800041c:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 8000420:	e7fe      	b.n	8000420 <xEventGroupWaitBits+0x44>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000422:	4617      	mov	r7, r2
 8000424:	461e      	mov	r6, r3
 8000426:	4605      	mov	r5, r0
 8000428:	f004 fab8 	bl	800499c <xTaskGetSchedulerState>
 800042c:	b950      	cbnz	r0, 8000444 <xEventGroupWaitBits+0x68>
 800042e:	9b08      	ldr	r3, [sp, #32]
 8000430:	b143      	cbz	r3, 8000444 <xEventGroupWaitBits+0x68>
 8000432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000436:	f383 8811 	msr	BASEPRI, r3
 800043a:	f3bf 8f6f 	isb	sy
 800043e:	f3bf 8f4f 	dsb	sy
 8000442:	e7fe      	b.n	8000442 <xEventGroupWaitBits+0x66>
    vTaskSuspendAll();
 8000444:	f003 f88c 	bl	8003560 <vTaskSuspendAll>
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8000448:	f8d5 9000 	ldr.w	r9, [r5]
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
    BaseType_t xWaitConditionMet = pdFALSE;

    if( xWaitForAllBits == pdFALSE )
 800044c:	b36e      	cbz	r6, 80004aa <xEventGroupWaitBits+0xce>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800044e:	ea34 0309 	bics.w	r3, r4, r9
 8000452:	d02d      	beq.n	80004b0 <xEventGroupWaitBits+0xd4>
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000454:	9b08      	ldr	r3, [sp, #32]
 8000456:	b393      	cbz	r3, 80004be <xEventGroupWaitBits+0xe2>
            if( xClearOnExit != pdFALSE )
 8000458:	2f00      	cmp	r7, #0
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800045a:	461a      	mov	r2, r3
 800045c:	f105 0004 	add.w	r0, r5, #4
            if( xClearOnExit != pdFALSE )
 8000460:	bf16      	itet	ne
 8000462:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
 8000466:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 800046a:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
            if( xWaitForAllBits != pdFALSE )
 800046e:	2e00      	cmp	r6, #0
 8000470:	bf08      	it	eq
 8000472:	4641      	moveq	r1, r8
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000474:	4321      	orrs	r1, r4
 8000476:	f004 f81f 	bl	80044b8 <vTaskPlaceOnUnorderedEventList>
    xAlreadyYielded = xTaskResumeAll();
 800047a:	f003 fd0f 	bl	8003e9c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 800047e:	b948      	cbnz	r0, 8000494 <xEventGroupWaitBits+0xb8>
            portYIELD_WITHIN_API();
 8000480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000488:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800048c:	f3bf 8f4f 	dsb	sy
 8000490:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 8000494:	f004 fa64 	bl	8004960 <uxTaskResetEventItemValue>
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000498:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
        uxReturn = uxTaskResetEventItemValue();
 800049c:	4681      	mov	r9, r0
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800049e:	d011      	beq.n	80004c4 <xEventGroupWaitBits+0xe8>
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004a0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80004a4:	4648      	mov	r0, r9
 80004a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80004aa:	ea14 0f09 	tst.w	r4, r9
 80004ae:	d0d1      	beq.n	8000454 <xEventGroupWaitBits+0x78>
            if( xClearOnExit != pdFALSE )
 80004b0:	b12f      	cbz	r7, 80004be <xEventGroupWaitBits+0xe2>
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004b2:	ea29 0404 	bic.w	r4, r9, r4
 80004b6:	602c      	str	r4, [r5, #0]
    xAlreadyYielded = xTaskResumeAll();
 80004b8:	f003 fcf0 	bl	8003e9c <xTaskResumeAll>
    if( xTicksToWait != ( TickType_t ) 0 )
 80004bc:	e7f2      	b.n	80004a4 <xEventGroupWaitBits+0xc8>
    xAlreadyYielded = xTaskResumeAll();
 80004be:	f003 fced 	bl	8003e9c <xTaskResumeAll>
    if( xTicksToWait != ( TickType_t ) 0 )
 80004c2:	e7ef      	b.n	80004a4 <xEventGroupWaitBits+0xc8>
            taskENTER_CRITICAL();
 80004c4:	f009 fbae 	bl	8009c24 <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80004c8:	f8d5 9000 	ldr.w	r9, [r5]
    if( xWaitForAllBits == pdFALSE )
 80004cc:	b94e      	cbnz	r6, 80004e2 <xEventGroupWaitBits+0x106>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80004ce:	ea14 0f09 	tst.w	r4, r9
 80004d2:	d003      	beq.n	80004dc <xEventGroupWaitBits+0x100>
                    if( xClearOnExit != pdFALSE )
 80004d4:	b117      	cbz	r7, 80004dc <xEventGroupWaitBits+0x100>
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004d6:	ea29 0404 	bic.w	r4, r9, r4
 80004da:	602c      	str	r4, [r5, #0]
            taskEXIT_CRITICAL();
 80004dc:	f009 fbb8 	bl	8009c50 <vPortExitCritical>
 80004e0:	e7de      	b.n	80004a0 <xEventGroupWaitBits+0xc4>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80004e2:	ea34 0309 	bics.w	r3, r4, r9
 80004e6:	d1f9      	bne.n	80004dc <xEventGroupWaitBits+0x100>
 80004e8:	e7f4      	b.n	80004d4 <xEventGroupWaitBits+0xf8>
 80004ea:	bf00      	nop

080004ec <xEventGroupClearBits>:
    configASSERT( xEventGroup );
 80004ec:	b1c0      	cbz	r0, 8000520 <xEventGroupClearBits+0x34>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80004ee:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
{
 80004f2:	b570      	push	{r4, r5, r6, lr}
 80004f4:	460c      	mov	r4, r1
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80004f6:	d008      	beq.n	800050a <xEventGroupClearBits+0x1e>
 80004f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	e7fe      	b.n	8000508 <xEventGroupClearBits+0x1c>
    taskENTER_CRITICAL();
 800050a:	4606      	mov	r6, r0
 800050c:	f009 fb8a 	bl	8009c24 <vPortEnterCritical>
        uxReturn = pxEventBits->uxEventBits;
 8000510:	6835      	ldr	r5, [r6, #0]
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000512:	ea25 0404 	bic.w	r4, r5, r4
 8000516:	6034      	str	r4, [r6, #0]
    taskEXIT_CRITICAL();
 8000518:	f009 fb9a 	bl	8009c50 <vPortExitCritical>
}
 800051c:	4628      	mov	r0, r5
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000524:	f383 8811 	msr	BASEPRI, r3
 8000528:	f3bf 8f6f 	isb	sy
 800052c:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 8000530:	e7fe      	b.n	8000530 <xEventGroupClearBits+0x44>
 8000532:	bf00      	nop

08000534 <xEventGroupClearBitsFromISR>:
    {
 8000534:	4684      	mov	ip, r0
 8000536:	460a      	mov	r2, r1
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000538:	2300      	movs	r3, #0
 800053a:	4802      	ldr	r0, [pc, #8]	; (8000544 <xEventGroupClearBitsFromISR+0x10>)
 800053c:	4661      	mov	r1, ip
 800053e:	f004 be23 	b.w	8005188 <xTimerPendFunctionCallFromISR>
 8000542:	bf00      	nop
 8000544:	08000299 	.word	0x08000299

08000548 <xEventGroupSetBits>:
    configASSERT( xEventGroup );
 8000548:	2800      	cmp	r0, #0
 800054a:	d03e      	beq.n	80005ca <xEventGroupSetBits+0x82>
{
 800054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000550:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 8000554:	4688      	mov	r8, r1
 8000556:	d008      	beq.n	800056a <xEventGroupSetBits+0x22>
 8000558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055c:	f383 8811 	msr	BASEPRI, r3
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	e7fe      	b.n	8000568 <xEventGroupSetBits+0x20>
 800056a:	4605      	mov	r5, r0
    vTaskSuspendAll();
 800056c:	f002 fff8 	bl	8003560 <vTaskSuspendAll>
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000570:	f105 070c 	add.w	r7, r5, #12
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000574:	682b      	ldr	r3, [r5, #0]
        pxListItem = listGET_HEAD_ENTRY( pxList );
 8000576:	692c      	ldr	r4, [r5, #16]
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000578:	ea48 0303 	orr.w	r3, r8, r3
        while( pxListItem != pxListEnd )
 800057c:	42a7      	cmp	r7, r4
        pxEventBits->uxEventBits |= uxBitsToSet;
 800057e:	602b      	str	r3, [r5, #0]
        while( pxListItem != pxListEnd )
 8000580:	d10c      	bne.n	800059c <xEventGroupSetBits+0x54>
 8000582:	e01c      	b.n	80005be <xEventGroupSetBits+0x76>
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000584:	ea1c 0f03 	tst.w	ip, r3
 8000588:	d006      	beq.n	8000598 <xEventGroupSetBits+0x50>
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800058a:	01d3      	lsls	r3, r2, #7
                    uxBitsToClear |= uxBitsWaitedFor;
 800058c:	bf48      	it	mi
 800058e:	ea46 060c 	orrmi.w	r6, r6, ip
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000592:	f004 f8ad 	bl	80046f0 <vTaskRemoveFromUnorderedEventList>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000596:	682b      	ldr	r3, [r5, #0]
        while( pxListItem != pxListEnd )
 8000598:	42a7      	cmp	r7, r4
 800059a:	d00e      	beq.n	80005ba <xEventGroupSetBits+0x72>
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800059c:	4620      	mov	r0, r4
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800059e:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
            pxNext = listGET_NEXT( pxListItem );
 80005a2:	6864      	ldr	r4, [r4, #4]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80005a4:	6802      	ldr	r2, [r0, #0]
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80005a6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80005aa:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80005ae:	d0e9      	beq.n	8000584 <xEventGroupSetBits+0x3c>
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80005b0:	ea3c 0e03 	bics.w	lr, ip, r3
 80005b4:	d0e9      	beq.n	800058a <xEventGroupSetBits+0x42>
        while( pxListItem != pxListEnd )
 80005b6:	42a7      	cmp	r7, r4
 80005b8:	d1f0      	bne.n	800059c <xEventGroupSetBits+0x54>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80005ba:	ea23 0306 	bic.w	r3, r3, r6
 80005be:	602b      	str	r3, [r5, #0]
    ( void ) xTaskResumeAll();
 80005c0:	f003 fc6c 	bl	8003e9c <xTaskResumeAll>
}
 80005c4:	6828      	ldr	r0, [r5, #0]
 80005c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 80005da:	e7fe      	b.n	80005da <xEventGroupSetBits+0x92>

080005dc <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80005dc:	4684      	mov	ip, r0
 80005de:	4613      	mov	r3, r2
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <xEventGroupSetBitsFromISR+0x10>)
 80005e2:	460a      	mov	r2, r1
 80005e4:	4661      	mov	r1, ip
 80005e6:	f004 bdcf 	b.w	8005188 <xTimerPendFunctionCallFromISR>
 80005ea:	bf00      	nop
 80005ec:	080002e1 	.word	0x080002e1

080005f0 <xEventGroupSync>:
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005f0:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005f4:	d008      	beq.n	8000608 <xEventGroupSync+0x18>
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	e7fe      	b.n	8000606 <xEventGroupSync+0x16>
{
 8000608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800060c:	4614      	mov	r4, r2
    configASSERT( uxBitsToWaitFor != 0 );
 800060e:	b942      	cbnz	r2, 8000622 <xEventGroupSync+0x32>
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	e7fe      	b.n	8000620 <xEventGroupSync+0x30>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000622:	4607      	mov	r7, r0
 8000624:	460e      	mov	r6, r1
 8000626:	461d      	mov	r5, r3
 8000628:	f004 f9b8 	bl	800499c <xTaskGetSchedulerState>
 800062c:	b9e0      	cbnz	r0, 8000668 <xEventGroupSync+0x78>
 800062e:	b145      	cbz	r5, 8000642 <xEventGroupSync+0x52>
 8000630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000634:	f383 8811 	msr	BASEPRI, r3
 8000638:	f3bf 8f6f 	isb	sy
 800063c:	f3bf 8f4f 	dsb	sy
 8000640:	e7fe      	b.n	8000640 <xEventGroupSync+0x50>
    vTaskSuspendAll();
 8000642:	f002 ff8d 	bl	8003560 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000646:	683b      	ldr	r3, [r7, #0]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000648:	4631      	mov	r1, r6
 800064a:	4638      	mov	r0, r7
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800064c:	ea46 0803 	orr.w	r8, r6, r3
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000650:	f7ff ff7a 	bl	8000548 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000654:	ea34 0308 	bics.w	r3, r4, r8
 8000658:	d02f      	beq.n	80006ba <xEventGroupSync+0xca>
                uxReturn = pxEventBits->uxEventBits;
 800065a:	f8d7 8000 	ldr.w	r8, [r7]
    xAlreadyYielded = xTaskResumeAll();
 800065e:	f003 fc1d 	bl	8003e9c <xTaskResumeAll>
}
 8000662:	4640      	mov	r0, r8
 8000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    vTaskSuspendAll();
 8000668:	f002 ff7a 	bl	8003560 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 800066c:	683b      	ldr	r3, [r7, #0]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800066e:	4631      	mov	r1, r6
 8000670:	4638      	mov	r0, r7
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000672:	ea43 0806 	orr.w	r8, r3, r6
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000676:	f7ff ff67 	bl	8000548 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800067a:	ea34 0308 	bics.w	r3, r4, r8
 800067e:	d01c      	beq.n	80006ba <xEventGroupSync+0xca>
            if( xTicksToWait != ( TickType_t ) 0 )
 8000680:	2d00      	cmp	r5, #0
 8000682:	d0ea      	beq.n	800065a <xEventGroupSync+0x6a>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000684:	462a      	mov	r2, r5
 8000686:	f044 61a0 	orr.w	r1, r4, #83886080	; 0x5000000
 800068a:	1d38      	adds	r0, r7, #4
 800068c:	f003 ff14 	bl	80044b8 <vTaskPlaceOnUnorderedEventList>
    xAlreadyYielded = xTaskResumeAll();
 8000690:	f003 fc04 	bl	8003e9c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8000694:	b948      	cbnz	r0, 80006aa <xEventGroupSync+0xba>
            portYIELD_WITHIN_API();
 8000696:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800069e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80006aa:	f004 f959 	bl	8004960 <uxTaskResetEventItemValue>
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80006ae:	0183      	lsls	r3, r0, #6
        uxReturn = uxTaskResetEventItemValue();
 80006b0:	4605      	mov	r5, r0
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80006b2:	d509      	bpl.n	80006c8 <xEventGroupSync+0xd8>
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80006b4:	f025 487f 	bic.w	r8, r5, #4278190080	; 0xff000000
    return uxReturn;
 80006b8:	e7d3      	b.n	8000662 <xEventGroupSync+0x72>
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	ea23 0304 	bic.w	r3, r3, r4
 80006c0:	603b      	str	r3, [r7, #0]
    xAlreadyYielded = xTaskResumeAll();
 80006c2:	f003 fbeb 	bl	8003e9c <xTaskResumeAll>
    if( xTicksToWait != ( TickType_t ) 0 )
 80006c6:	e7cc      	b.n	8000662 <xEventGroupSync+0x72>
            taskENTER_CRITICAL();
 80006c8:	f009 faac 	bl	8009c24 <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80006cc:	683d      	ldr	r5, [r7, #0]
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80006ce:	ea34 0305 	bics.w	r3, r4, r5
 80006d2:	d102      	bne.n	80006da <xEventGroupSync+0xea>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80006d4:	ea25 0404 	bic.w	r4, r5, r4
 80006d8:	603c      	str	r4, [r7, #0]
            taskEXIT_CRITICAL();
 80006da:	f009 fab9 	bl	8009c50 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 80006de:	e7e9      	b.n	80006b4 <xEventGroupSync+0xc4>

080006e0 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80006e0:	f3ef 8311 	mrs	r3, BASEPRI
 80006e4:	f04f 0250 	mov.w	r2, #80	; 0x50
 80006e8:	f382 8811 	msr	BASEPRI, r2
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
        uxReturn = pxEventBits->uxEventBits;
 80006f4:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80006f6:	f383 8811 	msr	BASEPRI, r3
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80006fa:	4770      	bx	lr

080006fc <vEventGroupDelete>:
{
 80006fc:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxEventBits );
 80006fe:	b1c8      	cbz	r0, 8000734 <vEventGroupDelete+0x38>
    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8000700:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8000702:	f002 ff2d 	bl	8003560 <vTaskSuspendAll>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000706:	6863      	ldr	r3, [r4, #4]
 8000708:	b1eb      	cbz	r3, 8000746 <vEventGroupDelete+0x4a>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800070a:	f104 050c 	add.w	r5, r4, #12
 800070e:	e003      	b.n	8000718 <vEventGroupDelete+0x1c>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000710:	f003 ffee 	bl	80046f0 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000714:	6863      	ldr	r3, [r4, #4]
 8000716:	b1b3      	cbz	r3, 8000746 <vEventGroupDelete+0x4a>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000718:	6920      	ldr	r0, [r4, #16]
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800071a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800071e:	42a8      	cmp	r0, r5
 8000720:	d1f6      	bne.n	8000710 <vEventGroupDelete+0x14>
    __asm volatile
 8000722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000726:	f383 8811 	msr	BASEPRI, r3
 800072a:	f3bf 8f6f 	isb	sy
 800072e:	f3bf 8f4f 	dsb	sy
 8000732:	e7fe      	b.n	8000732 <vEventGroupDelete+0x36>
 8000734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000738:	f383 8811 	msr	BASEPRI, r3
 800073c:	f3bf 8f6f 	isb	sy
 8000740:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventBits );
 8000744:	e7fe      	b.n	8000744 <vEventGroupDelete+0x48>
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8000746:	7f23      	ldrb	r3, [r4, #28]
 8000748:	b11b      	cbz	r3, 8000752 <vEventGroupDelete+0x56>
}
 800074a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ( void ) xTaskResumeAll();
 800074e:	f003 bba5 	b.w	8003e9c <xTaskResumeAll>
                    vPortFree( pxEventBits );
 8000752:	4620      	mov	r0, r4
 8000754:	f005 f9b4 	bl	8005ac0 <vPortFree>
 8000758:	e7f7      	b.n	800074a <vEventGroupDelete+0x4e>
 800075a:	bf00      	nop

0800075c <uxEventGroupGetNumber>:
    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */

        if( xEventGroup == NULL )
 800075c:	b100      	cbz	r0, 8000760 <uxEventGroupGetNumber+0x4>
        {
            xReturn = 0;
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 800075e:	6980      	ldr	r0, [r0, #24]
        }

        return xReturn;
    }
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <vEventGroupSetNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000764:	6181      	str	r1, [r0, #24]
    }
 8000766:	4770      	bx	lr

08000768 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000768:	f100 0308 	add.w	r3, r0, #8

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000770:	2200      	movs	r2, #0
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000772:	6081      	str	r1, [r0, #8]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000774:	6002      	str	r2, [r0, #0]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000776:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000778:	e9c0 3303 	strd	r3, r3, [r0, #12]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000780:	2300      	movs	r3, #0
 8000782:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000788:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800078a:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800078c:	1c6b      	adds	r3, r5, #1
 800078e:	d010      	beq.n	80007b2 <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000790:	f100 0308 	add.w	r3, r0, #8
 8000794:	461c      	mov	r4, r3
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	42aa      	cmp	r2, r5
 800079c:	d9fa      	bls.n	8000794 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800079e:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80007a0:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems )++;
 80007a2:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007a4:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80007a6:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80007a8:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 80007aa:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80007ac:	6002      	str	r2, [r0, #0]
}
 80007ae:	bc30      	pop	{r4, r5}
 80007b0:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80007b2:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80007b4:	6863      	ldr	r3, [r4, #4]
 80007b6:	e7f2      	b.n	800079e <vListInsert+0x16>

080007b8 <vListInsertEnd>:
    ListItem_t * const pxIndex = pxList->pxIndex;
 80007b8:	6843      	ldr	r3, [r0, #4]
    ( pxList->uxNumberOfItems )++;
 80007ba:	6802      	ldr	r2, [r0, #0]
{
 80007bc:	b410      	push	{r4}
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007be:	689c      	ldr	r4, [r3, #8]
    ( pxList->uxNumberOfItems )++;
 80007c0:	3201      	adds	r2, #1
    pxNewListItem->pxNext = pxIndex;
 80007c2:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007c4:	608c      	str	r4, [r1, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80007c6:	689c      	ldr	r4, [r3, #8]
 80007c8:	6061      	str	r1, [r4, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80007ca:	6099      	str	r1, [r3, #8]
}
 80007cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    pxNewListItem->pxContainer = pxList;
 80007d0:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80007d2:	6002      	str	r2, [r0, #0]
}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80007d8:	6903      	ldr	r3, [r0, #16]
{
 80007da:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80007dc:	685c      	ldr	r4, [r3, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007de:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    if( pxList->pxIndex == pxItemToRemove )
 80007e2:	4284      	cmp	r4, r0

    pxItemToRemove->pxContainer = NULL;
    ( pxList->uxNumberOfItems )--;

    return pxList->uxNumberOfItems;
}
 80007e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007e8:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007ea:	6051      	str	r1, [r2, #4]
    pxItemToRemove->pxContainer = NULL;
 80007ec:	f04f 0100 	mov.w	r1, #0
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007f0:	bf08      	it	eq
 80007f2:	605a      	streq	r2, [r3, #4]
    ( pxList->uxNumberOfItems )--;
 80007f4:	681a      	ldr	r2, [r3, #0]
    pxItemToRemove->pxContainer = NULL;
 80007f6:	6101      	str	r1, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80007f8:	3a01      	subs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
    return pxList->uxNumberOfItems;
 80007fc:	6818      	ldr	r0, [r3, #0]
}
 80007fe:	4770      	bx	lr

08000800 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4615      	mov	r5, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000804:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8000806:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000808:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800080a:	b92a      	cbnz	r2, 8000818 <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800080c:	6805      	ldr	r5, [r0, #0]
 800080e:	b365      	cbz	r5, 800086a <prvCopyDataToQueue+0x6a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000810:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000812:	4610      	mov	r0, r2
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000814:	63a6      	str	r6, [r4, #56]	; 0x38

    return xReturn;
}
 8000816:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8000818:	b97d      	cbnz	r5, 800083a <prvCopyDataToQueue+0x3a>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800081a:	6840      	ldr	r0, [r0, #4]
 800081c:	f021 fb12 	bl	8021e44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000820:	6863      	ldr	r3, [r4, #4]
 8000822:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000824:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000826:	68a2      	ldr	r2, [r4, #8]
 8000828:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800082a:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800082c:	d319      	bcc.n	8000862 <prvCopyDataToQueue+0x62>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800082e:	6822      	ldr	r2, [r4, #0]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000830:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000832:	4628      	mov	r0, r5
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000834:	6062      	str	r2, [r4, #4]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000836:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8000838:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800083a:	68c0      	ldr	r0, [r0, #12]
 800083c:	f021 fb02 	bl	8021e44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000840:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000842:	68e3      	ldr	r3, [r4, #12]
 8000844:	4251      	negs	r1, r2
 8000846:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000848:	6822      	ldr	r2, [r4, #0]
 800084a:	4293      	cmp	r3, r2
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800084c:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800084e:	d202      	bcs.n	8000856 <prvCopyDataToQueue+0x56>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000850:	68a3      	ldr	r3, [r4, #8]
 8000852:	440b      	add	r3, r1
 8000854:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8000856:	2d02      	cmp	r5, #2
 8000858:	d00d      	beq.n	8000876 <prvCopyDataToQueue+0x76>
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800085a:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 800085c:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800085e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8000860:	bd70      	pop	{r4, r5, r6, pc}
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000862:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000864:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000866:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8000868:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800086a:	6880      	ldr	r0, [r0, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800086c:	3601      	adds	r6, #1
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800086e:	f004 f8ff 	bl	8004a70 <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000872:	60a5      	str	r5, [r4, #8]
 8000874:	e7ce      	b.n	8000814 <prvCopyDataToQueue+0x14>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000876:	2e01      	cmp	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bf38      	it	cc
 800087e:	2601      	movcc	r6, #1
 8000880:	e7c8      	b.n	8000814 <prvCopyDataToQueue+0x14>
 8000882:	bf00      	nop

08000884 <xQueueGenericSend>:
{
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 800088c:	2800      	cmp	r0, #0
 800088e:	f000 8103 	beq.w	8000a98 <xQueueGenericSend+0x214>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000892:	4688      	mov	r8, r1
 8000894:	4604      	mov	r4, r0
 8000896:	461f      	mov	r7, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	f000 8097 	beq.w	80009cc <xQueueGenericSend+0x148>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800089e:	2f02      	cmp	r7, #2
 80008a0:	d10b      	bne.n	80008ba <xQueueGenericSend+0x36>
 80008a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d008      	beq.n	80008ba <xQueueGenericSend+0x36>
 80008a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ac:	f383 8811 	msr	BASEPRI, r3
 80008b0:	f3bf 8f6f 	isb	sy
 80008b4:	f3bf 8f4f 	dsb	sy
 80008b8:	e7fe      	b.n	80008b8 <xQueueGenericSend+0x34>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008ba:	f004 f86f 	bl	800499c <xTaskGetSchedulerState>
 80008be:	2800      	cmp	r0, #0
 80008c0:	f000 80f3 	beq.w	8000aaa <xQueueGenericSend+0x226>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008c4:	f1a7 0902 	sub.w	r9, r7, #2
 80008c8:	2500      	movs	r5, #0
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008ce:	fab9 f989 	clz	r9, r9
 80008d2:	ea4f 1959 	mov.w	r9, r9, lsr #5
        taskENTER_CRITICAL();
 80008d6:	f009 f9a5 	bl	8009c24 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80008dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008de:	429a      	cmp	r2, r3
 80008e0:	f0c0 80f0 	bcc.w	8000ac4 <xQueueGenericSend+0x240>
 80008e4:	f1b9 0f00 	cmp.w	r9, #0
 80008e8:	f040 80ec 	bne.w	8000ac4 <xQueueGenericSend+0x240>
                if( xTicksToWait == ( TickType_t ) 0 )
 80008ec:	9b01      	ldr	r3, [sp, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 8101 	beq.w	8000af6 <xQueueGenericSend+0x272>
                else if( xEntryTimeSet == pdFALSE )
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	f000 80cb 	beq.w	8000a90 <xQueueGenericSend+0x20c>
        taskEXIT_CRITICAL();
 80008fa:	f009 f9a9 	bl	8009c50 <vPortExitCritical>
        vTaskSuspendAll();
 80008fe:	f002 fe2f 	bl	8003560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000902:	f009 f98f 	bl	8009c24 <vPortEnterCritical>
 8000906:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800090a:	2bff      	cmp	r3, #255	; 0xff
 800090c:	d102      	bne.n	8000914 <xQueueGenericSend+0x90>
 800090e:	2300      	movs	r3, #0
 8000910:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000914:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000918:	2bff      	cmp	r3, #255	; 0xff
 800091a:	d102      	bne.n	8000922 <xQueueGenericSend+0x9e>
 800091c:	2300      	movs	r3, #0
 800091e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000922:	f009 f995 	bl	8009c50 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000926:	a901      	add	r1, sp, #4
 8000928:	a802      	add	r0, sp, #8
 800092a:	f003 f9b7 	bl	8003c9c <xTaskCheckForTimeOut>
 800092e:	2800      	cmp	r0, #0
 8000930:	f040 80e5 	bne.w	8000afe <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000934:	f009 f976 	bl	8009c24 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000938:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800093a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800093c:	429a      	cmp	r2, r3
 800093e:	d052      	beq.n	80009e6 <xQueueGenericSend+0x162>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8000940:	f009 f986 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000944:	f009 f96e 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000948:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800094c:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800094e:	2d00      	cmp	r5, #0
 8000950:	dc04      	bgt.n	800095c <xQueueGenericSend+0xd8>
 8000952:	e011      	b.n	8000978 <xQueueGenericSend+0xf4>
            --cTxLock;
 8000954:	1e6a      	subs	r2, r5, #1
 8000956:	b2d3      	uxtb	r3, r2
 8000958:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800095a:	b16b      	cbz	r3, 8000978 <xQueueGenericSend+0xf4>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800095c:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800095e:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000960:	b153      	cbz	r3, 8000978 <xQueueGenericSend+0xf4>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000962:	f003 fe45 	bl	80045f0 <xTaskRemoveFromEventList>
 8000966:	2800      	cmp	r0, #0
 8000968:	d0f4      	beq.n	8000954 <xQueueGenericSend+0xd0>
                            vTaskMissedYield();
 800096a:	f004 f80f 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 800096e:	1e6a      	subs	r2, r5, #1
 8000970:	b2d3      	uxtb	r3, r2
 8000972:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f1      	bne.n	800095c <xQueueGenericSend+0xd8>
        pxQueue->cTxLock = queueUNLOCKED;
 8000978:	23ff      	movs	r3, #255	; 0xff
 800097a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 800097e:	f009 f967 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000982:	f009 f94f 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000986:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800098a:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800098c:	2d00      	cmp	r5, #0
 800098e:	dd14      	ble.n	80009ba <xQueueGenericSend+0x136>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000990:	f104 0a10 	add.w	sl, r4, #16
 8000994:	e003      	b.n	800099e <xQueueGenericSend+0x11a>
                --cRxLock;
 8000996:	1e6a      	subs	r2, r5, #1
 8000998:	b2d3      	uxtb	r3, r2
 800099a:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800099c:	b16b      	cbz	r3, 80009ba <xQueueGenericSend+0x136>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800099e:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009a0:	4650      	mov	r0, sl
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009a2:	b153      	cbz	r3, 80009ba <xQueueGenericSend+0x136>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009a4:	f003 fe24 	bl	80045f0 <xTaskRemoveFromEventList>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d0f4      	beq.n	8000996 <xQueueGenericSend+0x112>
                    vTaskMissedYield();
 80009ac:	f003 ffee 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 80009b0:	1e6a      	subs	r2, r5, #1
 80009b2:	b2d3      	uxtb	r3, r2
 80009b4:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f1      	bne.n	800099e <xQueueGenericSend+0x11a>
        pxQueue->cRxLock = queueUNLOCKED;
 80009ba:	23ff      	movs	r3, #255	; 0xff
 80009bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 80009c0:	f009 f946 	bl	8009c50 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 80009c4:	f003 fa6a 	bl	8003e9c <xTaskResumeAll>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009c8:	2501      	movs	r5, #1
 80009ca:	e784      	b.n	80008d6 <xQueueGenericSend+0x52>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f43f af65 	beq.w	800089e <xQueueGenericSend+0x1a>
 80009d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d8:	f383 8811 	msr	BASEPRI, r3
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	e7fe      	b.n	80009e4 <xQueueGenericSend+0x160>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009e6:	f104 0a10 	add.w	sl, r4, #16
    taskEXIT_CRITICAL();
 80009ea:	f009 f931 	bl	8009c50 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009ee:	9901      	ldr	r1, [sp, #4]
 80009f0:	4650      	mov	r0, sl
 80009f2:	f003 fd17 	bl	8004424 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 80009f6:	f009 f915 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80009fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80009fe:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	dc04      	bgt.n	8000a0e <xQueueGenericSend+0x18a>
 8000a04:	e011      	b.n	8000a2a <xQueueGenericSend+0x1a6>
            --cTxLock;
 8000a06:	1e6b      	subs	r3, r5, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a0c:	b16a      	cbz	r2, 8000a2a <xQueueGenericSend+0x1a6>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a10:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a12:	b153      	cbz	r3, 8000a2a <xQueueGenericSend+0x1a6>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a14:	f003 fdec 	bl	80045f0 <xTaskRemoveFromEventList>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d0f4      	beq.n	8000a06 <xQueueGenericSend+0x182>
                            vTaskMissedYield();
 8000a1c:	f003 ffb6 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d1f1      	bne.n	8000a0e <xQueueGenericSend+0x18a>
        pxQueue->cTxLock = queueUNLOCKED;
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000a30:	f009 f90e 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000a34:	f009 f8f6 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000a38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000a3c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	dc04      	bgt.n	8000a4c <xQueueGenericSend+0x1c8>
 8000a42:	e011      	b.n	8000a68 <xQueueGenericSend+0x1e4>
                --cRxLock;
 8000a44:	1e6b      	subs	r3, r5, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a4a:	b16a      	cbz	r2, 8000a68 <xQueueGenericSend+0x1e4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a4c:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a4e:	4650      	mov	r0, sl
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a50:	b153      	cbz	r3, 8000a68 <xQueueGenericSend+0x1e4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a52:	f003 fdcd 	bl	80045f0 <xTaskRemoveFromEventList>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d0f4      	beq.n	8000a44 <xQueueGenericSend+0x1c0>
                    vTaskMissedYield();
 8000a5a:	f003 ff97 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8000a5e:	1e6b      	subs	r3, r5, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d1f1      	bne.n	8000a4c <xQueueGenericSend+0x1c8>
        pxQueue->cRxLock = queueUNLOCKED;
 8000a68:	23ff      	movs	r3, #255	; 0xff
 8000a6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000a6e:	f009 f8ef 	bl	8009c50 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8000a72:	f003 fa13 	bl	8003e9c <xTaskResumeAll>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d1a6      	bne.n	80009c8 <xQueueGenericSend+0x144>
                    portYIELD_WITHIN_API();
 8000a7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	f3bf 8f6f 	isb	sy
 8000a8e:	e79b      	b.n	80009c8 <xQueueGenericSend+0x144>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a90:	a802      	add	r0, sp, #8
 8000a92:	f004 f8bf 	bl	8004c14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a96:	e730      	b.n	80008fa <xQueueGenericSend+0x76>
 8000a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000aa8:	e7fe      	b.n	8000aa8 <xQueueGenericSend+0x224>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aaa:	9b01      	ldr	r3, [sp, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f43f af09 	beq.w	80008c4 <xQueueGenericSend+0x40>
 8000ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	e7fe      	b.n	8000ac2 <xQueueGenericSend+0x23e>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ac4:	463a      	mov	r2, r7
 8000ac6:	4641      	mov	r1, r8
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff fe99 	bl	8000800 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d152      	bne.n	8000b7a <xQueueGenericSend+0x2f6>
                        else if( xYieldRequired != pdFALSE )
 8000ad4:	b148      	cbz	r0, 8000aea <xQueueGenericSend+0x266>
                            queueYIELD_IF_USING_PREEMPTION();
 8000ad6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ade:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000ae2:	f3bf 8f4f 	dsb	sy
 8000ae6:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8000aea:	f009 f8b1 	bl	8009c50 <vPortExitCritical>
                return pdPASS;
 8000aee:	2001      	movs	r0, #1
}
 8000af0:	b004      	add	sp, #16
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    taskEXIT_CRITICAL();
 8000af6:	f009 f8ab 	bl	8009c50 <vPortExitCritical>
                    return errQUEUE_FULL;
 8000afa:	4648      	mov	r0, r9
 8000afc:	e7f8      	b.n	8000af0 <xQueueGenericSend+0x26c>
    taskENTER_CRITICAL();
 8000afe:	f009 f891 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000b02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000b06:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	dd10      	ble.n	8000b2e <xQueueGenericSend+0x2aa>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b0c:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8000b10:	e003      	b.n	8000b1a <xQueueGenericSend+0x296>
            --cTxLock;
 8000b12:	1e6b      	subs	r3, r5, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b18:	b14a      	cbz	r2, 8000b2e <xQueueGenericSend+0x2aa>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b1c:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b1e:	b133      	cbz	r3, 8000b2e <xQueueGenericSend+0x2aa>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b20:	f003 fd66 	bl	80045f0 <xTaskRemoveFromEventList>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0f4      	beq.n	8000b12 <xQueueGenericSend+0x28e>
                            vTaskMissedYield();
 8000b28:	f003 ff30 	bl	800498c <vTaskMissedYield>
 8000b2c:	e7f1      	b.n	8000b12 <xQueueGenericSend+0x28e>
        pxQueue->cTxLock = queueUNLOCKED;
 8000b2e:	23ff      	movs	r3, #255	; 0xff
 8000b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000b34:	f009 f88c 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000b38:	f009 f874 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000b3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000b40:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	dd10      	ble.n	8000b68 <xQueueGenericSend+0x2e4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b46:	f104 0610 	add.w	r6, r4, #16
 8000b4a:	e003      	b.n	8000b54 <xQueueGenericSend+0x2d0>
                --cRxLock;
 8000b4c:	1e6b      	subs	r3, r5, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b52:	b14a      	cbz	r2, 8000b68 <xQueueGenericSend+0x2e4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b54:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b56:	4630      	mov	r0, r6
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b58:	b133      	cbz	r3, 8000b68 <xQueueGenericSend+0x2e4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b5a:	f003 fd49 	bl	80045f0 <xTaskRemoveFromEventList>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0f4      	beq.n	8000b4c <xQueueGenericSend+0x2c8>
                    vTaskMissedYield();
 8000b62:	f003 ff13 	bl	800498c <vTaskMissedYield>
 8000b66:	e7f1      	b.n	8000b4c <xQueueGenericSend+0x2c8>
        pxQueue->cRxLock = queueUNLOCKED;
 8000b68:	23ff      	movs	r3, #255	; 0xff
 8000b6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000b6e:	f009 f86f 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8000b72:	f003 f993 	bl	8003e9c <xTaskResumeAll>
            return errQUEUE_FULL;
 8000b76:	2000      	movs	r0, #0
 8000b78:	e7ba      	b.n	8000af0 <xQueueGenericSend+0x26c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000b7e:	f003 fd37 	bl	80045f0 <xTaskRemoveFromEventList>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d0b1      	beq.n	8000aea <xQueueGenericSend+0x266>
 8000b86:	e7a6      	b.n	8000ad6 <xQueueGenericSend+0x252>

08000b88 <xQueuePeek>:
{
 8000b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	b085      	sub	sp, #20
 8000b8e:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8000b90:	2800      	cmp	r0, #0
 8000b92:	f000 8144 	beq.w	8000e1e <xQueuePeek+0x296>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b96:	460f      	mov	r7, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d07a      	beq.n	8000c94 <xQueuePeek+0x10c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b9e:	f003 fefd 	bl	800499c <xTaskGetSchedulerState>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	f000 8082 	beq.w	8000cac <xQueuePeek+0x124>
        taskENTER_CRITICAL();
 8000ba8:	f009 f83c 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bac:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bb0:	f1b8 0f00 	cmp.w	r8, #0
 8000bb4:	f040 813c 	bne.w	8000e30 <xQueuePeek+0x2a8>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bb8:	9b01      	ldr	r3, [sp, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80d4 	beq.w	8000d68 <xQueuePeek+0x1e0>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bc0:	f104 0624 	add.w	r6, r4, #36	; 0x24
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc4:	a802      	add	r0, sp, #8
 8000bc6:	f004 f825 	bl	8004c14 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8000bca:	f009 f841 	bl	8009c50 <vPortExitCritical>
        vTaskSuspendAll();
 8000bce:	f002 fcc7 	bl	8003560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bd2:	f009 f827 	bl	8009c24 <vPortEnterCritical>
 8000bd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d101      	bne.n	8000be2 <xQueuePeek+0x5a>
 8000bde:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8000be2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d101      	bne.n	8000bee <xQueuePeek+0x66>
 8000bea:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8000bee:	f009 f82f 	bl	8009c50 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000bf2:	a901      	add	r1, sp, #4
 8000bf4:	a802      	add	r0, sp, #8
 8000bf6:	f003 f851 	bl	8003c9c <xTaskCheckForTimeOut>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d163      	bne.n	8000cc6 <xQueuePeek+0x13e>
    taskENTER_CRITICAL();
 8000bfe:	f009 f811 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 80b5 	beq.w	8000d74 <xQueuePeek+0x1ec>
    taskEXIT_CRITICAL();
 8000c0a:	f009 f821 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000c0e:	f009 f809 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000c12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000c16:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	dc04      	bgt.n	8000c26 <xQueuePeek+0x9e>
 8000c1c:	e011      	b.n	8000c42 <xQueuePeek+0xba>
            --cTxLock;
 8000c1e:	1e6b      	subs	r3, r5, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c24:	b16a      	cbz	r2, 8000c42 <xQueuePeek+0xba>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c28:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c2a:	b153      	cbz	r3, 8000c42 <xQueuePeek+0xba>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c2c:	f003 fce0 	bl	80045f0 <xTaskRemoveFromEventList>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d0f4      	beq.n	8000c1e <xQueuePeek+0x96>
                            vTaskMissedYield();
 8000c34:	f003 feaa 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8000c38:	1e6b      	subs	r3, r5, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d1f1      	bne.n	8000c26 <xQueuePeek+0x9e>
        pxQueue->cTxLock = queueUNLOCKED;
 8000c42:	23ff      	movs	r3, #255	; 0xff
 8000c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000c48:	f009 f802 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000c4c:	f008 ffea 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000c50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000c54:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	dd14      	ble.n	8000c84 <xQueuePeek+0xfc>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c5a:	f104 0910 	add.w	r9, r4, #16
 8000c5e:	e003      	b.n	8000c68 <xQueuePeek+0xe0>
                --cRxLock;
 8000c60:	1e6b      	subs	r3, r5, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c66:	b16a      	cbz	r2, 8000c84 <xQueuePeek+0xfc>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c68:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c6a:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c6c:	b153      	cbz	r3, 8000c84 <xQueuePeek+0xfc>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c6e:	f003 fcbf 	bl	80045f0 <xTaskRemoveFromEventList>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d0f4      	beq.n	8000c60 <xQueuePeek+0xd8>
                    vTaskMissedYield();
 8000c76:	f003 fe89 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8000c7a:	1e6b      	subs	r3, r5, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d1f1      	bne.n	8000c68 <xQueuePeek+0xe0>
        pxQueue->cRxLock = queueUNLOCKED;
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000c8a:	f008 ffe1 	bl	8009c50 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8000c8e:	f003 f905 	bl	8003e9c <xTaskResumeAll>
        taskENTER_CRITICAL();
 8000c92:	e060      	b.n	8000d56 <xQueuePeek+0x1ce>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d081      	beq.n	8000b9e <xQueuePeek+0x16>
 8000c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	e7fe      	b.n	8000caa <xQueuePeek+0x122>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cac:	9b01      	ldr	r3, [sp, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f43f af7a 	beq.w	8000ba8 <xQueuePeek+0x20>
 8000cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb8:	f383 8811 	msr	BASEPRI, r3
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	f3bf 8f4f 	dsb	sy
 8000cc4:	e7fe      	b.n	8000cc4 <xQueuePeek+0x13c>
    taskENTER_CRITICAL();
 8000cc6:	f008 ffad 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000cca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000cce:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	dc04      	bgt.n	8000cde <xQueuePeek+0x156>
 8000cd4:	e011      	b.n	8000cfa <xQueuePeek+0x172>
            --cTxLock;
 8000cd6:	1e6b      	subs	r3, r5, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cdc:	b16a      	cbz	r2, 8000cfa <xQueuePeek+0x172>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ce0:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ce2:	b153      	cbz	r3, 8000cfa <xQueuePeek+0x172>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ce4:	f003 fc84 	bl	80045f0 <xTaskRemoveFromEventList>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d0f4      	beq.n	8000cd6 <xQueuePeek+0x14e>
                            vTaskMissedYield();
 8000cec:	f003 fe4e 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8000cf0:	1e6b      	subs	r3, r5, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d1f1      	bne.n	8000cde <xQueuePeek+0x156>
        pxQueue->cTxLock = queueUNLOCKED;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000d00:	f008 ffa6 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000d04:	f008 ff8e 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000d08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000d0c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	dd14      	ble.n	8000d3c <xQueuePeek+0x1b4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d12:	f104 0910 	add.w	r9, r4, #16
 8000d16:	e003      	b.n	8000d20 <xQueuePeek+0x198>
                --cRxLock;
 8000d18:	1e6b      	subs	r3, r5, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d1e:	b16a      	cbz	r2, 8000d3c <xQueuePeek+0x1b4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d20:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d22:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d24:	b153      	cbz	r3, 8000d3c <xQueuePeek+0x1b4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d26:	f003 fc63 	bl	80045f0 <xTaskRemoveFromEventList>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d0f4      	beq.n	8000d18 <xQueuePeek+0x190>
                    vTaskMissedYield();
 8000d2e:	f003 fe2d 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8000d32:	1e6b      	subs	r3, r5, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1f1      	bne.n	8000d20 <xQueuePeek+0x198>
        pxQueue->cRxLock = queueUNLOCKED;
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000d42:	f008 ff85 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8000d46:	f003 f8a9 	bl	8003e9c <xTaskResumeAll>
    taskENTER_CRITICAL();
 8000d4a:	f008 ff6b 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d50:	b153      	cbz	r3, 8000d68 <xQueuePeek+0x1e0>
    taskEXIT_CRITICAL();
 8000d52:	f008 ff7d 	bl	8009c50 <vPortExitCritical>
        taskENTER_CRITICAL();
 8000d56:	f008 ff65 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d167      	bne.n	8000e30 <xQueuePeek+0x2a8>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d60:	9b01      	ldr	r3, [sp, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f47f af31 	bne.w	8000bca <xQueuePeek+0x42>
                    taskEXIT_CRITICAL();
 8000d68:	f008 ff72 	bl	8009c50 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000d6c:	2000      	movs	r0, #0
}
 8000d6e:	b005      	add	sp, #20
 8000d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskEXIT_CRITICAL();
 8000d74:	f008 ff6c 	bl	8009c50 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d78:	9901      	ldr	r1, [sp, #4]
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f003 fb52 	bl	8004424 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8000d80:	f008 ff50 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000d84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000d88:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	dc04      	bgt.n	8000d98 <xQueuePeek+0x210>
 8000d8e:	e011      	b.n	8000db4 <xQueuePeek+0x22c>
            --cTxLock;
 8000d90:	1e6b      	subs	r3, r5, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d96:	b16a      	cbz	r2, 8000db4 <xQueuePeek+0x22c>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d9a:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d9c:	b153      	cbz	r3, 8000db4 <xQueuePeek+0x22c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d9e:	f003 fc27 	bl	80045f0 <xTaskRemoveFromEventList>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d0f4      	beq.n	8000d90 <xQueuePeek+0x208>
                            vTaskMissedYield();
 8000da6:	f003 fdf1 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8000daa:	1e6b      	subs	r3, r5, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000db0:	2a00      	cmp	r2, #0
 8000db2:	d1f1      	bne.n	8000d98 <xQueuePeek+0x210>
        pxQueue->cTxLock = queueUNLOCKED;
 8000db4:	23ff      	movs	r3, #255	; 0xff
 8000db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000dba:	f008 ff49 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000dbe:	f008 ff31 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000dc2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000dc6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	dd14      	ble.n	8000df6 <xQueuePeek+0x26e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dcc:	f104 0910 	add.w	r9, r4, #16
 8000dd0:	e003      	b.n	8000dda <xQueuePeek+0x252>
                --cRxLock;
 8000dd2:	1e6b      	subs	r3, r5, #1
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dd8:	b16a      	cbz	r2, 8000df6 <xQueuePeek+0x26e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dda:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ddc:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dde:	b153      	cbz	r3, 8000df6 <xQueuePeek+0x26e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000de0:	f003 fc06 	bl	80045f0 <xTaskRemoveFromEventList>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d0f4      	beq.n	8000dd2 <xQueuePeek+0x24a>
                    vTaskMissedYield();
 8000de8:	f003 fdd0 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8000dec:	1e6b      	subs	r3, r5, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d1f1      	bne.n	8000dda <xQueuePeek+0x252>
        pxQueue->cRxLock = queueUNLOCKED;
 8000df6:	23ff      	movs	r3, #255	; 0xff
 8000df8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8000dfc:	f008 ff28 	bl	8009c50 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8000e00:	f003 f84c 	bl	8003e9c <xTaskResumeAll>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d1a6      	bne.n	8000d56 <xQueuePeek+0x1ce>
                    portYIELD_WITHIN_API();
 8000e08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000e14:	f3bf 8f4f 	dsb	sy
 8000e18:	f3bf 8f6f 	isb	sy
        taskENTER_CRITICAL();
 8000e1c:	e79b      	b.n	8000d56 <xQueuePeek+0x1ce>
 8000e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 8000e2e:	e7fe      	b.n	8000e2e <xQueuePeek+0x2a6>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e30:	6c22      	ldr	r2, [r4, #64]	; 0x40
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000e32:	68e5      	ldr	r5, [r4, #12]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e34:	b14a      	cbz	r2, 8000e4a <xQueuePeek+0x2c2>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e36:	18a9      	adds	r1, r5, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e38:	68a3      	ldr	r3, [r4, #8]
 8000e3a:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e3c:	60e1      	str	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e3e:	d301      	bcc.n	8000e44 <xQueuePeek+0x2bc>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e40:	6821      	ldr	r1, [r4, #0]
 8000e42:	60e1      	str	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e44:	4638      	mov	r0, r7
 8000e46:	f020 fffd 	bl	8021e44 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000e4c:	60e5      	str	r5, [r4, #12]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e4e:	b91b      	cbnz	r3, 8000e58 <xQueuePeek+0x2d0>
                taskEXIT_CRITICAL();
 8000e50:	f008 fefe 	bl	8009c50 <vPortExitCritical>
                return pdPASS;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e78a      	b.n	8000d6e <xQueuePeek+0x1e6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e5c:	f003 fbc8 	bl	80045f0 <xTaskRemoveFromEventList>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0f5      	beq.n	8000e50 <xQueuePeek+0x2c8>
                        queueYIELD_IF_USING_PREEMPTION();
 8000e64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	f3bf 8f6f 	isb	sy
 8000e78:	e7ea      	b.n	8000e50 <xQueuePeek+0x2c8>
 8000e7a:	bf00      	nop

08000e7c <xQueuePeekFromISR>:
{
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxQueue );
 8000e7e:	b1c0      	cbz	r0, 8000eb2 <xQueuePeekFromISR+0x36>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e80:	4604      	mov	r4, r0
 8000e82:	460d      	mov	r5, r1
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000e84:	6c03      	ldr	r3, [r0, #64]	; 0x40
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e86:	b149      	cbz	r1, 8000e9c <xQueuePeekFromISR+0x20>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000e88:	b9e3      	cbnz	r3, 8000ec4 <xQueuePeekFromISR+0x48>
 8000e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	e7fe      	b.n	8000e9a <xQueuePeekFromISR+0x1e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f4      	beq.n	8000e8a <xQueuePeekFromISR+0xe>
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	e7fe      	b.n	8000eb0 <xQueuePeekFromISR+0x34>
 8000eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb6:	f383 8811 	msr	BASEPRI, r3
 8000eba:	f3bf 8f6f 	isb	sy
 8000ebe:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000ec2:	e7fe      	b.n	8000ec2 <xQueuePeekFromISR+0x46>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ec4:	f008 ff04 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 8000ec8:	f3ef 8611 	mrs	r6, BASEPRI
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ede:	b910      	cbnz	r0, 8000ee6 <xQueuePeekFromISR+0x6a>
    __asm volatile
 8000ee0:	f386 8811 	msr	BASEPRI, r6
}
 8000ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000ee8:	68e7      	ldr	r7, [r4, #12]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000eea:	b14a      	cbz	r2, 8000f00 <xQueuePeekFromISR+0x84>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000eec:	18b9      	adds	r1, r7, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000eee:	68a3      	ldr	r3, [r4, #8]
 8000ef0:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ef2:	60e1      	str	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ef4:	d301      	bcc.n	8000efa <xQueuePeekFromISR+0x7e>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000ef6:	6821      	ldr	r1, [r4, #0]
 8000ef8:	60e1      	str	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000efa:	4628      	mov	r0, r5
 8000efc:	f020 ffa2 	bl	8021e44 <memcpy>
            xReturn = pdPASS;
 8000f00:	2001      	movs	r0, #1
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000f02:	60e7      	str	r7, [r4, #12]
            xReturn = pdPASS;
 8000f04:	e7ec      	b.n	8000ee0 <xQueuePeekFromISR+0x64>
 8000f06:	bf00      	nop

08000f08 <xQueueReceive>:
{
 8000f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f000 815f 	beq.w	80011d4 <xQueueReceive+0x2cc>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f16:	460f      	mov	r7, r1
 8000f18:	4604      	mov	r4, r0
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	f000 8094 	beq.w	8001048 <xQueueReceive+0x140>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f20:	f003 fd3c 	bl	800499c <xTaskGetSchedulerState>
 8000f24:	2800      	cmp	r0, #0
 8000f26:	f000 809c 	beq.w	8001062 <xQueueReceive+0x15a>
        taskENTER_CRITICAL();
 8000f2a:	f008 fe7b 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f2e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d172      	bne.n	800101a <xQueueReceive+0x112>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80f1 	beq.w	800111e <xQueueReceive+0x216>
        prvLockQueue( pxQueue );
 8000f3c:	46a8      	mov	r8, r5
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f3e:	f104 0624 	add.w	r6, r4, #36	; 0x24
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000f42:	a802      	add	r0, sp, #8
 8000f44:	f003 fe66 	bl	8004c14 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8000f48:	f008 fe82 	bl	8009c50 <vPortExitCritical>
        vTaskSuspendAll();
 8000f4c:	f002 fb08 	bl	8003560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000f50:	f008 fe68 	bl	8009c24 <vPortEnterCritical>
 8000f54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000f58:	2bff      	cmp	r3, #255	; 0xff
 8000f5a:	d101      	bne.n	8000f60 <xQueueReceive+0x58>
 8000f5c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8000f60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000f64:	2bff      	cmp	r3, #255	; 0xff
 8000f66:	d101      	bne.n	8000f6c <xQueueReceive+0x64>
 8000f68:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8000f6c:	f008 fe70 	bl	8009c50 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f70:	a901      	add	r1, sp, #4
 8000f72:	a802      	add	r0, sp, #8
 8000f74:	f002 fe92 	bl	8003c9c <xTaskCheckForTimeOut>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d17f      	bne.n	800107c <xQueueReceive+0x174>
    taskENTER_CRITICAL();
 8000f7c:	f008 fe52 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80d1 	beq.w	800112a <xQueueReceive+0x222>
    taskEXIT_CRITICAL();
 8000f88:	f008 fe62 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000f8c:	f008 fe4a 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000f90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000f94:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	dc04      	bgt.n	8000fa4 <xQueueReceive+0x9c>
 8000f9a:	e011      	b.n	8000fc0 <xQueueReceive+0xb8>
            --cTxLock;
 8000f9c:	1e6b      	subs	r3, r5, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fa2:	b16a      	cbz	r2, 8000fc0 <xQueueReceive+0xb8>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fa6:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa8:	b153      	cbz	r3, 8000fc0 <xQueueReceive+0xb8>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000faa:	f003 fb21 	bl	80045f0 <xTaskRemoveFromEventList>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d0f4      	beq.n	8000f9c <xQueueReceive+0x94>
                            vTaskMissedYield();
 8000fb2:	f003 fceb 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8000fb6:	1e6b      	subs	r3, r5, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d1f1      	bne.n	8000fa4 <xQueueReceive+0x9c>
        pxQueue->cTxLock = queueUNLOCKED;
 8000fc0:	23ff      	movs	r3, #255	; 0xff
 8000fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000fc6:	f008 fe43 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000fca:	f008 fe2b 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000fce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000fd2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	dd14      	ble.n	8001002 <xQueueReceive+0xfa>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fd8:	f104 0910 	add.w	r9, r4, #16
 8000fdc:	e003      	b.n	8000fe6 <xQueueReceive+0xde>
                --cRxLock;
 8000fde:	1e6b      	subs	r3, r5, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fe4:	b16a      	cbz	r2, 8001002 <xQueueReceive+0xfa>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fe6:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fe8:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fea:	b153      	cbz	r3, 8001002 <xQueueReceive+0xfa>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fec:	f003 fb00 	bl	80045f0 <xTaskRemoveFromEventList>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d0f4      	beq.n	8000fde <xQueueReceive+0xd6>
                    vTaskMissedYield();
 8000ff4:	f003 fcca 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8000ff8:	1e6b      	subs	r3, r5, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d1f1      	bne.n	8000fe6 <xQueueReceive+0xde>
        pxQueue->cRxLock = queueUNLOCKED;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8001008:	f008 fe22 	bl	8009c50 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 800100c:	f002 ff46 	bl	8003e9c <xTaskResumeAll>
        taskENTER_CRITICAL();
 8001010:	f008 fe08 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001014:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001016:	2d00      	cmp	r5, #0
 8001018:	d07d      	beq.n	8001116 <xQueueReceive+0x20e>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800101a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800101c:	b152      	cbz	r2, 8001034 <xQueueReceive+0x12c>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800101e:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001020:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001022:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001024:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001026:	60e1      	str	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001028:	d301      	bcc.n	800102e <xQueueReceive+0x126>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800102a:	6821      	ldr	r1, [r4, #0]
 800102c:	60e1      	str	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800102e:	4638      	mov	r0, r7
 8001030:	f020 ff08 	bl	8021e44 <memcpy>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001034:	3d01      	subs	r5, #1
 8001036:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001038:	6923      	ldr	r3, [r4, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80d3 	bne.w	80011e6 <xQueueReceive+0x2de>
                taskEXIT_CRITICAL();
 8001040:	f008 fe06 	bl	8009c50 <vPortExitCritical>
                return pdPASS;
 8001044:	2001      	movs	r0, #1
 8001046:	e06d      	b.n	8001124 <xQueueReceive+0x21c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001048:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	f43f af68 	beq.w	8000f20 <xQueueReceive+0x18>
    __asm volatile
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	e7fe      	b.n	8001060 <xQueueReceive+0x158>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	f43f af60 	beq.w	8000f2a <xQueueReceive+0x22>
 800106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	e7fe      	b.n	800107a <xQueueReceive+0x172>
    taskENTER_CRITICAL();
 800107c:	f008 fdd2 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001080:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001084:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001086:	2d00      	cmp	r5, #0
 8001088:	dc04      	bgt.n	8001094 <xQueueReceive+0x18c>
 800108a:	e011      	b.n	80010b0 <xQueueReceive+0x1a8>
            --cTxLock;
 800108c:	1e6b      	subs	r3, r5, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001092:	b16a      	cbz	r2, 80010b0 <xQueueReceive+0x1a8>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001094:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001096:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001098:	b153      	cbz	r3, 80010b0 <xQueueReceive+0x1a8>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800109a:	f003 faa9 	bl	80045f0 <xTaskRemoveFromEventList>
 800109e:	2800      	cmp	r0, #0
 80010a0:	d0f4      	beq.n	800108c <xQueueReceive+0x184>
                            vTaskMissedYield();
 80010a2:	f003 fc73 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 80010a6:	1e6b      	subs	r3, r5, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d1f1      	bne.n	8001094 <xQueueReceive+0x18c>
        pxQueue->cTxLock = queueUNLOCKED;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 80010b6:	f008 fdcb 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 80010ba:	f008 fdb3 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80010be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80010c2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	dd14      	ble.n	80010f2 <xQueueReceive+0x1ea>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010c8:	f104 0910 	add.w	r9, r4, #16
 80010cc:	e003      	b.n	80010d6 <xQueueReceive+0x1ce>
                --cRxLock;
 80010ce:	1e6b      	subs	r3, r5, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010d4:	b16a      	cbz	r2, 80010f2 <xQueueReceive+0x1ea>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010d6:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010d8:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010da:	b153      	cbz	r3, 80010f2 <xQueueReceive+0x1ea>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010dc:	f003 fa88 	bl	80045f0 <xTaskRemoveFromEventList>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d0f4      	beq.n	80010ce <xQueueReceive+0x1c6>
                    vTaskMissedYield();
 80010e4:	f003 fc52 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 80010e8:	1e6b      	subs	r3, r5, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d1f1      	bne.n	80010d6 <xQueueReceive+0x1ce>
        pxQueue->cRxLock = queueUNLOCKED;
 80010f2:	23ff      	movs	r3, #255	; 0xff
 80010f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 80010f8:	f008 fdaa 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 80010fc:	f002 fece 	bl	8003e9c <xTaskResumeAll>
    taskENTER_CRITICAL();
 8001100:	f008 fd90 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001106:	b153      	cbz	r3, 800111e <xQueueReceive+0x216>
    taskEXIT_CRITICAL();
 8001108:	f008 fda2 	bl	8009c50 <vPortExitCritical>
        taskENTER_CRITICAL();
 800110c:	f008 fd8a 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001110:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001112:	2d00      	cmp	r5, #0
 8001114:	d181      	bne.n	800101a <xQueueReceive+0x112>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001116:	9b01      	ldr	r3, [sp, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f af15 	bne.w	8000f48 <xQueueReceive+0x40>
                    taskEXIT_CRITICAL();
 800111e:	f008 fd97 	bl	8009c50 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8001122:	2000      	movs	r0, #0
}
 8001124:	b005      	add	sp, #20
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskEXIT_CRITICAL();
 800112a:	f008 fd91 	bl	8009c50 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800112e:	9901      	ldr	r1, [sp, #4]
 8001130:	4630      	mov	r0, r6
 8001132:	f003 f977 	bl	8004424 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8001136:	f008 fd75 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800113a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800113e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001140:	2d00      	cmp	r5, #0
 8001142:	dc04      	bgt.n	800114e <xQueueReceive+0x246>
 8001144:	e011      	b.n	800116a <xQueueReceive+0x262>
            --cTxLock;
 8001146:	1e6b      	subs	r3, r5, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800114c:	b16a      	cbz	r2, 800116a <xQueueReceive+0x262>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800114e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001150:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001152:	b153      	cbz	r3, 800116a <xQueueReceive+0x262>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001154:	f003 fa4c 	bl	80045f0 <xTaskRemoveFromEventList>
 8001158:	2800      	cmp	r0, #0
 800115a:	d0f4      	beq.n	8001146 <xQueueReceive+0x23e>
                            vTaskMissedYield();
 800115c:	f003 fc16 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8001160:	1e6b      	subs	r3, r5, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001166:	2a00      	cmp	r2, #0
 8001168:	d1f1      	bne.n	800114e <xQueueReceive+0x246>
        pxQueue->cTxLock = queueUNLOCKED;
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001170:	f008 fd6e 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001174:	f008 fd56 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001178:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800117c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800117e:	2d00      	cmp	r5, #0
 8001180:	dd14      	ble.n	80011ac <xQueueReceive+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001182:	f104 0910 	add.w	r9, r4, #16
 8001186:	e003      	b.n	8001190 <xQueueReceive+0x288>
                --cRxLock;
 8001188:	1e6b      	subs	r3, r5, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800118e:	b16a      	cbz	r2, 80011ac <xQueueReceive+0x2a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001190:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001192:	4648      	mov	r0, r9
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001194:	b153      	cbz	r3, 80011ac <xQueueReceive+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001196:	f003 fa2b 	bl	80045f0 <xTaskRemoveFromEventList>
 800119a:	2800      	cmp	r0, #0
 800119c:	d0f4      	beq.n	8001188 <xQueueReceive+0x280>
                    vTaskMissedYield();
 800119e:	f003 fbf5 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 80011a2:	1e6b      	subs	r3, r5, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d1f1      	bne.n	8001190 <xQueueReceive+0x288>
        pxQueue->cRxLock = queueUNLOCKED;
 80011ac:	23ff      	movs	r3, #255	; 0xff
 80011ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 80011b2:	f008 fd4d 	bl	8009c50 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 80011b6:	f002 fe71 	bl	8003e9c <xTaskResumeAll>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1a6      	bne.n	800110c <xQueueReceive+0x204>
                    portYIELD_WITHIN_API();
 80011be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	f3bf 8f6f 	isb	sy
        taskENTER_CRITICAL();
 80011d2:	e79b      	b.n	800110c <xQueueReceive+0x204>
 80011d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d8:	f383 8811 	msr	BASEPRI, r3
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 80011e4:	e7fe      	b.n	80011e4 <xQueueReceive+0x2dc>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011e6:	f104 0010 	add.w	r0, r4, #16
 80011ea:	f003 fa01 	bl	80045f0 <xTaskRemoveFromEventList>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	f43f af26 	beq.w	8001040 <xQueueReceive+0x138>
                        queueYIELD_IF_USING_PREEMPTION();
 80011f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001200:	f3bf 8f4f 	dsb	sy
 8001204:	f3bf 8f6f 	isb	sy
 8001208:	e71a      	b.n	8001040 <xQueueReceive+0x138>
 800120a:	bf00      	nop

0800120c <uxQueueMessagesWaiting>:
    configASSERT( xQueue );
 800120c:	b158      	cbz	r0, 8001226 <uxQueueMessagesWaiting+0x1a>
{
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
 8001212:	b082      	sub	sp, #8
    taskENTER_CRITICAL();
 8001214:	f008 fd06 	bl	8009c24 <vPortEnterCritical>
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001218:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800121a:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 800121c:	f008 fd18 	bl	8009c50 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001220:	9801      	ldr	r0, [sp, #4]
 8001222:	b002      	add	sp, #8
 8001224:	bd10      	pop	{r4, pc}
 8001226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122a:	f383 8811 	msr	BASEPRI, r3
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f3bf 8f4f 	dsb	sy
    configASSERT( xQueue );
 8001236:	e7fe      	b.n	8001236 <uxQueueMessagesWaiting+0x2a>

08001238 <uxQueueSpacesAvailable>:
    configASSERT( pxQueue );
 8001238:	b168      	cbz	r0, 8001256 <uxQueueSpacesAvailable+0x1e>
{
 800123a:	b510      	push	{r4, lr}
 800123c:	4604      	mov	r4, r0
 800123e:	b082      	sub	sp, #8
    taskENTER_CRITICAL();
 8001240:	f008 fcf0 	bl	8009c24 <vPortEnterCritical>
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8001244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001246:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001248:	1ac0      	subs	r0, r0, r3
 800124a:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 800124c:	f008 fd00 	bl	8009c50 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001250:	9801      	ldr	r0, [sp, #4]
 8001252:	b002      	add	sp, #8
 8001254:	bd10      	pop	{r4, pc}
 8001256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125a:	f383 8811 	msr	BASEPRI, r3
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001266:	e7fe      	b.n	8001266 <uxQueueSpacesAvailable+0x2e>

08001268 <vQueueDelete>:
    configASSERT( pxQueue );
 8001268:	b1e0      	cbz	r0, 80012a4 <vQueueDelete+0x3c>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <vQueueDelete+0x80>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4290      	cmp	r0, r2
 8001270:	d02c      	beq.n	80012cc <vQueueDelete+0x64>
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	4290      	cmp	r0, r2
 8001276:	d020      	beq.n	80012ba <vQueueDelete+0x52>
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	4290      	cmp	r0, r2
 800127c:	d028      	beq.n	80012d0 <vQueueDelete+0x68>
 800127e:	69da      	ldr	r2, [r3, #28]
 8001280:	4290      	cmp	r0, r2
 8001282:	d027      	beq.n	80012d4 <vQueueDelete+0x6c>
 8001284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001286:	4290      	cmp	r0, r2
 8001288:	d026      	beq.n	80012d8 <vQueueDelete+0x70>
 800128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128c:	4290      	cmp	r0, r2
 800128e:	d025      	beq.n	80012dc <vQueueDelete+0x74>
 8001290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001292:	4290      	cmp	r0, r2
 8001294:	d024      	beq.n	80012e0 <vQueueDelete+0x78>
 8001296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001298:	4290      	cmp	r0, r2
 800129a:	d023      	beq.n	80012e4 <vQueueDelete+0x7c>
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800129c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80012a0:	b14b      	cbz	r3, 80012b6 <vQueueDelete+0x4e>
}
 80012a2:	4770      	bx	lr
 80012a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a8:	f383 8811 	msr	BASEPRI, r3
 80012ac:	f3bf 8f6f 	isb	sy
 80012b0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80012b4:	e7fe      	b.n	80012b4 <vQueueDelete+0x4c>
                vPortFree( pxQueue );
 80012b6:	f004 bc03 	b.w	8005ac0 <vPortFree>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012ba:	2201      	movs	r2, #1
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80012bc:	2100      	movs	r1, #0

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80012be:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80012c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80012c6:	f8cc 1004 	str.w	r1, [ip, #4]
                break;
 80012ca:	e7e7      	b.n	800129c <vQueueDelete+0x34>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012cc:	2200      	movs	r2, #0
 80012ce:	e7f5      	b.n	80012bc <vQueueDelete+0x54>
 80012d0:	2202      	movs	r2, #2
 80012d2:	e7f3      	b.n	80012bc <vQueueDelete+0x54>
 80012d4:	2203      	movs	r2, #3
 80012d6:	e7f1      	b.n	80012bc <vQueueDelete+0x54>
 80012d8:	2204      	movs	r2, #4
 80012da:	e7ef      	b.n	80012bc <vQueueDelete+0x54>
 80012dc:	2205      	movs	r2, #5
 80012de:	e7ed      	b.n	80012bc <vQueueDelete+0x54>
 80012e0:	2206      	movs	r2, #6
 80012e2:	e7eb      	b.n	80012bc <vQueueDelete+0x54>
 80012e4:	2207      	movs	r2, #7
 80012e6:	e7e9      	b.n	80012bc <vQueueDelete+0x54>
 80012e8:	24000000 	.word	0x24000000

080012ec <xQueueGenericSendFromISR>:
    configASSERT( pxQueue );
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d04d      	beq.n	800138c <xQueueGenericSendFromISR+0xa0>
{
 80012f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f4:	460e      	mov	r6, r1
 80012f6:	4604      	mov	r4, r0
 80012f8:	4617      	mov	r7, r2
 80012fa:	461d      	mov	r5, r3
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012fc:	b339      	cbz	r1, 800134e <xQueueGenericSendFromISR+0x62>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012fe:	2d02      	cmp	r5, #2
 8001300:	d10b      	bne.n	800131a <xQueueGenericSendFromISR+0x2e>
 8001302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001304:	2b01      	cmp	r3, #1
 8001306:	d008      	beq.n	800131a <xQueueGenericSendFromISR+0x2e>
 8001308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130c:	f383 8811 	msr	BASEPRI, r3
 8001310:	f3bf 8f6f 	isb	sy
 8001314:	f3bf 8f4f 	dsb	sy
 8001318:	e7fe      	b.n	8001318 <xQueueGenericSendFromISR+0x2c>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800131a:	f008 fcd9 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 800131e:	f3ef 8811 	mrs	r8, BASEPRI
 8001322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001326:	f383 8811 	msr	BASEPRI, r3
 800132a:	f3bf 8f6f 	isb	sy
 800132e:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001332:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001336:	429a      	cmp	r2, r3
 8001338:	d315      	bcc.n	8001366 <xQueueGenericSendFromISR+0x7a>
 800133a:	f1a5 0002 	sub.w	r0, r5, #2
 800133e:	fab0 f080 	clz	r0, r0
 8001342:	0940      	lsrs	r0, r0, #5
 8001344:	b978      	cbnz	r0, 8001366 <xQueueGenericSendFromISR+0x7a>
    __asm volatile
 8001346:	f388 8811 	msr	BASEPRI, r8
}
 800134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800134e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0d4      	beq.n	80012fe <xQueueGenericSendFromISR+0x12>
    __asm volatile
 8001354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001358:	f383 8811 	msr	BASEPRI, r3
 800135c:	f3bf 8f6f 	isb	sy
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	e7fe      	b.n	8001364 <xQueueGenericSendFromISR+0x78>
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001366:	462a      	mov	r2, r5
            const int8_t cTxLock = pxQueue->cTxLock;
 8001368:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800136c:	4631      	mov	r1, r6
 800136e:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8001370:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001374:	f7ff fa44 	bl	8000800 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8001378:	1c6b      	adds	r3, r5, #1
 800137a:	d010      	beq.n	800139e <xQueueGenericSendFromISR+0xb2>
                configASSERT( cTxLock != queueINT8_MAX );
 800137c:	2d7f      	cmp	r5, #127	; 0x7f
 800137e:	d012      	beq.n	80013a6 <xQueueGenericSendFromISR+0xba>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001380:	1c6b      	adds	r3, r5, #1
            xReturn = pdPASS;
 8001382:	2001      	movs	r0, #1
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001384:	b25b      	sxtb	r3, r3
 8001386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800138a:	e7dc      	b.n	8001346 <xQueueGenericSendFromISR+0x5a>
 800138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001390:	f383 8811 	msr	BASEPRI, r3
 8001394:	f3bf 8f6f 	isb	sy
 8001398:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 800139c:	e7fe      	b.n	800139c <xQueueGenericSendFromISR+0xb0>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800139e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a0:	b953      	cbnz	r3, 80013b8 <xQueueGenericSendFromISR+0xcc>
            xReturn = pdPASS;
 80013a2:	2001      	movs	r0, #1
 80013a4:	e7cf      	b.n	8001346 <xQueueGenericSendFromISR+0x5a>
 80013a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013aa:	f383 8811 	msr	BASEPRI, r3
 80013ae:	f3bf 8f6f 	isb	sy
 80013b2:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 80013b6:	e7fe      	b.n	80013b6 <xQueueGenericSendFromISR+0xca>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80013bc:	f003 f918 	bl	80045f0 <xTaskRemoveFromEventList>
                                if( pxHigherPriorityTaskWoken != NULL )
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d0ee      	beq.n	80013a2 <xQueueGenericSendFromISR+0xb6>
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	d0ec      	beq.n	80013a2 <xQueueGenericSendFromISR+0xb6>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80013c8:	2301      	movs	r3, #1
            xReturn = pdPASS;
 80013ca:	4618      	mov	r0, r3
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	e7ba      	b.n	8001346 <xQueueGenericSendFromISR+0x5a>

080013d0 <xQueueGiveFromISR>:
    configASSERT( pxQueue );
 80013d0:	b370      	cbz	r0, 8001430 <xQueueGiveFromISR+0x60>
    configASSERT( pxQueue->uxItemSize == 0 );
 80013d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	4606      	mov	r6, r0
    configASSERT( pxQueue->uxItemSize == 0 );
 80013d8:	b143      	cbz	r3, 80013ec <xQueueGiveFromISR+0x1c>
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	f383 8811 	msr	BASEPRI, r3
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	e7fe      	b.n	80013ea <xQueueGiveFromISR+0x1a>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80013ec:	6803      	ldr	r3, [r0, #0]
 80013ee:	460c      	mov	r4, r1
 80013f0:	b33b      	cbz	r3, 8001442 <xQueueGiveFromISR+0x72>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013f2:	f008 fc6d 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 80013f6:	f3ef 8511 	mrs	r5, BASEPRI
 80013fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800140a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 800140c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800140e:	429a      	cmp	r2, r3
 8001410:	d923      	bls.n	800145a <xQueueGiveFromISR+0x8a>
            const int8_t cTxLock = pxQueue->cTxLock;
 8001412:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001416:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 8001418:	2aff      	cmp	r2, #255	; 0xff
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800141a:	63b3      	str	r3, [r6, #56]	; 0x38
            const int8_t cTxLock = pxQueue->cTxLock;
 800141c:	b253      	sxtb	r3, r2
            if( cTxLock == queueUNLOCKED )
 800141e:	d021      	beq.n	8001464 <xQueueGiveFromISR+0x94>
                configASSERT( cTxLock != queueINT8_MAX );
 8001420:	2b7f      	cmp	r3, #127	; 0x7f
 8001422:	d023      	beq.n	800146c <xQueueGiveFromISR+0x9c>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001424:	1c5a      	adds	r2, r3, #1
            xReturn = pdPASS;
 8001426:	2301      	movs	r3, #1
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001428:	b252      	sxtb	r2, r2
 800142a:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
 800142e:	e015      	b.n	800145c <xQueueGiveFromISR+0x8c>
    __asm volatile
 8001430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001434:	f383 8811 	msr	BASEPRI, r3
 8001438:	f3bf 8f6f 	isb	sy
 800143c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001440:	e7fe      	b.n	8001440 <xQueueGiveFromISR+0x70>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001442:	6883      	ldr	r3, [r0, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0d4      	beq.n	80013f2 <xQueueGiveFromISR+0x22>
 8001448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144c:	f383 8811 	msr	BASEPRI, r3
 8001450:	f3bf 8f6f 	isb	sy
 8001454:	f3bf 8f4f 	dsb	sy
 8001458:	e7fe      	b.n	8001458 <xQueueGiveFromISR+0x88>
            xReturn = errQUEUE_FULL;
 800145a:	2300      	movs	r3, #0
    __asm volatile
 800145c:	f385 8811 	msr	BASEPRI, r5
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd70      	pop	{r4, r5, r6, pc}
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001464:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001466:	b953      	cbnz	r3, 800147e <xQueueGiveFromISR+0xae>
            xReturn = pdPASS;
 8001468:	2301      	movs	r3, #1
 800146a:	e7f7      	b.n	800145c <xQueueGiveFromISR+0x8c>
    __asm volatile
 800146c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001470:	f383 8811 	msr	BASEPRI, r3
 8001474:	f3bf 8f6f 	isb	sy
 8001478:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 800147c:	e7fe      	b.n	800147c <xQueueGiveFromISR+0xac>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800147e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001482:	f003 f8b5 	bl	80045f0 <xTaskRemoveFromEventList>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001486:	2800      	cmp	r0, #0
 8001488:	d0ee      	beq.n	8001468 <xQueueGiveFromISR+0x98>
 800148a:	2c00      	cmp	r4, #0
 800148c:	d0ec      	beq.n	8001468 <xQueueGiveFromISR+0x98>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800148e:	2201      	movs	r2, #1
            xReturn = pdPASS;
 8001490:	4613      	mov	r3, r2
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001492:	6022      	str	r2, [r4, #0]
 8001494:	e7e2      	b.n	800145c <xQueueGiveFromISR+0x8c>
 8001496:	bf00      	nop

08001498 <xQueueReceiveFromISR>:
{
 8001498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( pxQueue );
 800149c:	b310      	cbz	r0, 80014e4 <xQueueReceiveFromISR+0x4c>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800149e:	460e      	mov	r6, r1
 80014a0:	4604      	mov	r4, r0
 80014a2:	4617      	mov	r7, r2
 80014a4:	b191      	cbz	r1, 80014cc <xQueueReceiveFromISR+0x34>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014a6:	f008 fc13 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 80014aa:	f3ef 8811 	mrs	r8, BASEPRI
 80014ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014be:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014c0:	b9cd      	cbnz	r5, 80014f6 <xQueueReceiveFromISR+0x5e>
            xReturn = pdFAIL;
 80014c2:	4628      	mov	r0, r5
    __asm volatile
 80014c4:	f388 8811 	msr	BASEPRI, r8
}
 80014c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0e9      	beq.n	80014a6 <xQueueReceiveFromISR+0xe>
    __asm volatile
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	e7fe      	b.n	80014e2 <xQueueReceiveFromISR+0x4a>
 80014e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e8:	f383 8811 	msr	BASEPRI, r3
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80014f4:	e7fe      	b.n	80014f4 <xQueueReceiveFromISR+0x5c>
            const int8_t cRxLock = pxQueue->cRxLock;
 80014f6:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80014fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
            const int8_t cRxLock = pxQueue->cRxLock;
 80014fc:	fa4f f989 	sxtb.w	r9, r9
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001500:	b142      	cbz	r2, 8001514 <xQueueReceiveFromISR+0x7c>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001502:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001504:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001506:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001508:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800150a:	60e1      	str	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800150c:	d215      	bcs.n	800153a <xQueueReceiveFromISR+0xa2>
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800150e:	4630      	mov	r0, r6
 8001510:	f020 fc98 	bl	8021e44 <memcpy>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001514:	3d01      	subs	r5, #1
            if( cRxLock == queueUNLOCKED )
 8001516:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800151a:	63a5      	str	r5, [r4, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 800151c:	d009      	beq.n	8001532 <xQueueReceiveFromISR+0x9a>
                configASSERT( cRxLock != queueINT8_MAX );
 800151e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8001522:	d019      	beq.n	8001558 <xQueueReceiveFromISR+0xc0>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001524:	f109 0301 	add.w	r3, r9, #1
            xReturn = pdPASS;
 8001528:	2001      	movs	r0, #1
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800152a:	b25b      	sxtb	r3, r3
 800152c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001530:	e7c8      	b.n	80014c4 <xQueueReceiveFromISR+0x2c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	b923      	cbnz	r3, 8001540 <xQueueReceiveFromISR+0xa8>
            xReturn = pdPASS;
 8001536:	2001      	movs	r0, #1
 8001538:	e7c4      	b.n	80014c4 <xQueueReceiveFromISR+0x2c>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800153a:	6821      	ldr	r1, [r4, #0]
 800153c:	60e1      	str	r1, [r4, #12]
 800153e:	e7e6      	b.n	800150e <xQueueReceiveFromISR+0x76>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001540:	f104 0010 	add.w	r0, r4, #16
 8001544:	f003 f854 	bl	80045f0 <xTaskRemoveFromEventList>
                        if( pxHigherPriorityTaskWoken != NULL )
 8001548:	2800      	cmp	r0, #0
 800154a:	d0f4      	beq.n	8001536 <xQueueReceiveFromISR+0x9e>
 800154c:	2f00      	cmp	r7, #0
 800154e:	d0f2      	beq.n	8001536 <xQueueReceiveFromISR+0x9e>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001550:	2301      	movs	r3, #1
            xReturn = pdPASS;
 8001552:	4618      	mov	r0, r3
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	e7b5      	b.n	80014c4 <xQueueReceiveFromISR+0x2c>
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
                configASSERT( cRxLock != queueINT8_MAX );
 8001568:	e7fe      	b.n	8001568 <xQueueReceiveFromISR+0xd0>
 800156a:	bf00      	nop

0800156c <xQueueIsQueueEmptyFromISR>:
    configASSERT( pxQueue );
 800156c:	b120      	cbz	r0, 8001578 <xQueueIsQueueEmptyFromISR+0xc>
    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800156e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001570:	fab0 f080 	clz	r0, r0
 8001574:	0940      	lsrs	r0, r0, #5
 8001576:	4770      	bx	lr
 8001578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001588:	e7fe      	b.n	8001588 <xQueueIsQueueEmptyFromISR+0x1c>
 800158a:	bf00      	nop

0800158c <xQueueIsQueueFullFromISR>:
    configASSERT( pxQueue );
 800158c:	b130      	cbz	r0, 800159c <xQueueIsQueueFullFromISR+0x10>
    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800158e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001590:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001592:	1ac0      	subs	r0, r0, r3
 8001594:	fab0 f080 	clz	r0, r0
 8001598:	0940      	lsrs	r0, r0, #5
 800159a:	4770      	bx	lr
 800159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a0:	f383 8811 	msr	BASEPRI, r3
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80015ac:	e7fe      	b.n	80015ac <xQueueIsQueueFullFromISR+0x20>
 80015ae:	bf00      	nop

080015b0 <uxQueueMessagesWaitingFromISR>:
    configASSERT( pxQueue );
 80015b0:	b108      	cbz	r0, 80015b6 <uxQueueMessagesWaitingFromISR+0x6>
    uxReturn = pxQueue->uxMessagesWaiting;
 80015b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80015b4:	4770      	bx	lr
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 80015c6:	e7fe      	b.n	80015c6 <uxQueueMessagesWaitingFromISR+0x16>

080015c8 <xQueueCreateMutex>:
    {
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80015cc:	2050      	movs	r0, #80	; 0x50
 80015ce:	f004 f9c7 	bl	8005960 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80015d2:	4604      	mov	r4, r0
 80015d4:	b370      	cbz	r0, 8001634 <xQueueCreateMutex+0x6c>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80015d6:	2600      	movs	r6, #0
    pxNewQueue->uxLength = uxQueueLength;
 80015d8:	2301      	movs	r3, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80015da:	6020      	str	r0, [r4, #0]
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80015dc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 80015e0:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
        taskENTER_CRITICAL();
 80015e4:	f008 fb1e 	bl	8009c24 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015e8:	6821      	ldr	r1, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015ea:	63a6      	str	r6, [r4, #56]	; 0x38
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80015ec:	f104 0010 	add.w	r0, r4, #16
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80015f0:	6061      	str	r1, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015f2:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 80015f6:	fb03 f202 	mul.w	r2, r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015fa:	1ad3      	subs	r3, r2, r3
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015fc:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015fe:	4419      	add	r1, r3
            pxQueue->cRxLock = queueUNLOCKED;
 8001600:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001602:	e9c4 2102 	strd	r2, r1, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001606:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800160a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800160e:	f7ff f8ab 	bl	8000768 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001616:	f7ff f8a7 	bl	8000768 <vListInitialise>
        taskEXIT_CRITICAL();
 800161a:	f008 fb19 	bl	8009c50 <vPortExitCritical>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800161e:	4633      	mov	r3, r6
 8001620:	4632      	mov	r2, r6
 8001622:	4631      	mov	r1, r6
 8001624:	4620      	mov	r0, r4
            pxNewQueue->ucQueueType = ucQueueType;
 8001626:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800162a:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800162c:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800162e:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001630:	f7ff f928 	bl	8000884 <xQueueGenericSend>
    }
 8001634:	4620      	mov	r0, r4
 8001636:	bd70      	pop	{r4, r5, r6, pc}

08001638 <xQueueCreateMutexStatic>:
        configASSERT( pxStaticQueue );
 8001638:	b179      	cbz	r1, 800165a <xQueueCreateMutexStatic+0x22>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 800163a:	2350      	movs	r3, #80	; 0x50
    {
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	b082      	sub	sp, #8
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001640:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001642:	9b01      	ldr	r3, [sp, #4]
 8001644:	2b50      	cmp	r3, #80	; 0x50
 8001646:	d011      	beq.n	800166c <xQueueCreateMutexStatic+0x34>
 8001648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800164c:	f383 8811 	msr	BASEPRI, r3
 8001650:	f3bf 8f6f 	isb	sy
 8001654:	f3bf 8f4f 	dsb	sy
 8001658:	e7fe      	b.n	8001658 <xQueueCreateMutexStatic+0x20>
 800165a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 800166a:	e7fe      	b.n	800166a <xQueueCreateMutexStatic+0x32>
    pxNewQueue->uxItemSize = uxItemSize;
 800166c:	2600      	movs	r6, #0
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800166e:	2301      	movs	r3, #1
 8001670:	460c      	mov	r4, r1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001672:	6009      	str	r1, [r1, #0]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001674:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
 8001678:	4605      	mov	r5, r0
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800167a:	9a01      	ldr	r2, [sp, #4]
    pxNewQueue->uxItemSize = uxItemSize;
 800167c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
        taskENTER_CRITICAL();
 8001680:	f008 fad0 	bl	8009c24 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001684:	6821      	ldr	r1, [r4, #0]
            pxQueue->cRxLock = queueUNLOCKED;
 8001686:	23ff      	movs	r3, #255	; 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001688:	63a6      	str	r6, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800168a:	6061      	str	r1, [r4, #4]
            pxQueue->cRxLock = queueUNLOCKED;
 800168c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001694:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
 8001698:	fb00 f202 	mul.w	r2, r0, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800169c:	1a10      	subs	r0, r2, r0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800169e:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016a0:	4401      	add	r1, r0
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016a2:	f104 0010 	add.w	r0, r4, #16
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016a6:	e9c4 2102 	strd	r2, r1, [r4, #8]
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016aa:	f7ff f85d 	bl	8000768 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80016b2:	f7ff f859 	bl	8000768 <vListInitialise>
        taskEXIT_CRITICAL();
 80016b6:	f008 facb 	bl	8009c50 <vPortExitCritical>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80016ba:	4633      	mov	r3, r6
 80016bc:	4632      	mov	r2, r6
 80016be:	4631      	mov	r1, r6
 80016c0:	4620      	mov	r0, r4
            pxNewQueue->ucQueueType = ucQueueType;
 80016c2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80016c6:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80016c8:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80016ca:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80016cc:	f7ff f8da 	bl	8000884 <xQueueGenericSend>
    }
 80016d0:	4620      	mov	r0, r4
 80016d2:	b002      	add	sp, #8
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
 80016d6:	bf00      	nop

080016d8 <xQueueCreateCountingSemaphore>:
    {
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxMaxCount != 0 ) &&
 80016da:	b118      	cbz	r0, 80016e4 <xQueueCreateCountingSemaphore+0xc>
 80016dc:	4288      	cmp	r0, r1
 80016de:	4604      	mov	r4, r0
 80016e0:	460f      	mov	r7, r1
 80016e2:	d208      	bcs.n	80016f6 <xQueueCreateCountingSemaphore+0x1e>
 80016e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e8:	f383 8811 	msr	BASEPRI, r3
 80016ec:	f3bf 8f6f 	isb	sy
 80016f0:	f3bf 8f4f 	dsb	sy
            configASSERT( xHandle );
 80016f4:	e7fe      	b.n	80016f4 <xQueueCreateCountingSemaphore+0x1c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80016f6:	2050      	movs	r0, #80	; 0x50
 80016f8:	f004 f932 	bl	8005960 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80016fc:	4605      	mov	r5, r0
 80016fe:	b330      	cbz	r0, 800174e <xQueueCreateCountingSemaphore+0x76>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001700:	2600      	movs	r6, #0
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001702:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8001704:	63c4      	str	r4, [r0, #60]	; 0x3c
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001706:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 800170a:	6406      	str	r6, [r0, #64]	; 0x40
        taskENTER_CRITICAL();
 800170c:	f008 fa8a 	bl	8009c24 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001710:	682a      	ldr	r2, [r5, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001712:	63ae      	str	r6, [r5, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001714:	606a      	str	r2, [r5, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001716:	e9d5 300f 	ldrd	r3, r0, [r5, #60]	; 0x3c
 800171a:	fb00 f303 	mul.w	r3, r0, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800171e:	1a18      	subs	r0, r3, r0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001720:	4413      	add	r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001722:	4402      	add	r2, r0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001724:	60ab      	str	r3, [r5, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001726:	23ff      	movs	r3, #255	; 0xff
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001728:	f105 0010 	add.w	r0, r5, #16
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800172c:	60ea      	str	r2, [r5, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800172e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001732:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001736:	f7ff f817 	bl	8000768 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800173a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800173e:	f7ff f813 	bl	8000768 <vListInitialise>
        taskEXIT_CRITICAL();
 8001742:	f008 fa85 	bl	8009c50 <vPortExitCritical>
            pxNewQueue->ucQueueType = ucQueueType;
 8001746:	2302      	movs	r3, #2
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001748:	63af      	str	r7, [r5, #56]	; 0x38
            pxNewQueue->ucQueueType = ucQueueType;
 800174a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    }
 800174e:	4628      	mov	r0, r5
 8001750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001752:	bf00      	nop

08001754 <xQueueCreateCountingSemaphoreStatic>:
        if( ( uxMaxCount != 0 ) &&
 8001754:	b108      	cbz	r0, 800175a <xQueueCreateCountingSemaphoreStatic+0x6>
 8001756:	4288      	cmp	r0, r1
 8001758:	d208      	bcs.n	800176c <xQueueCreateCountingSemaphoreStatic+0x18>
 800175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
            configASSERT( xHandle );
 800176a:	e7fe      	b.n	800176a <xQueueCreateCountingSemaphoreStatic+0x16>
    {
 800176c:	b530      	push	{r4, r5, lr}
 800176e:	4615      	mov	r5, r2
 8001770:	b085      	sub	sp, #20
        configASSERT( pxStaticQueue );
 8001772:	b16a      	cbz	r2, 8001790 <xQueueCreateCountingSemaphoreStatic+0x3c>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001774:	2350      	movs	r3, #80	; 0x50
 8001776:	9303      	str	r3, [sp, #12]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	2b50      	cmp	r3, #80	; 0x50
 800177c:	d011      	beq.n	80017a2 <xQueueCreateCountingSemaphoreStatic+0x4e>
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	e7fe      	b.n	800178e <xQueueCreateCountingSemaphoreStatic+0x3a>
 8001790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 80017a0:	e7fe      	b.n	80017a0 <xQueueCreateCountingSemaphoreStatic+0x4c>
    pxNewQueue->uxItemSize = uxItemSize;
 80017a2:	2400      	movs	r4, #0
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017a4:	2301      	movs	r3, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017a6:	602a      	str	r2, [r5, #0]
    pxNewQueue->uxLength = uxQueueLength;
 80017a8:	63d0      	str	r0, [r2, #60]	; 0x3c
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017aa:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 80017ae:	6414      	str	r4, [r2, #64]	; 0x40
 80017b0:	9101      	str	r1, [sp, #4]
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80017b2:	9b03      	ldr	r3, [sp, #12]
        taskENTER_CRITICAL();
 80017b4:	f008 fa36 	bl	8009c24 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017b8:	6828      	ldr	r0, [r5, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017ba:	63ac      	str	r4, [r5, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80017bc:	6068      	str	r0, [r5, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017be:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
 80017c2:	fb03 f30c 	mul.w	r3, r3, ip
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017c6:	eba3 0c0c 	sub.w	ip, r3, ip
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ca:	4403      	add	r3, r0
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017cc:	4484      	add	ip, r0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ce:	60ab      	str	r3, [r5, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 80017d0:	23ff      	movs	r3, #255	; 0xff
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017d2:	f105 0010 	add.w	r0, r5, #16
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017d6:	f8c5 c00c 	str.w	ip, [r5, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80017da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80017de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017e2:	f7fe ffc1 	bl	8000768 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017e6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80017ea:	f7fe ffbd 	bl	8000768 <vListInitialise>
        taskEXIT_CRITICAL();
 80017ee:	f008 fa2f 	bl	8009c50 <vPortExitCritical>
            pxNewQueue->ucQueueType = ucQueueType;
 80017f2:	2302      	movs	r3, #2
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80017f4:	9901      	ldr	r1, [sp, #4]
    }
 80017f6:	4628      	mov	r0, r5
            pxNewQueue->ucQueueType = ucQueueType;
 80017f8:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80017fc:	63a9      	str	r1, [r5, #56]	; 0x38
    }
 80017fe:	b005      	add	sp, #20
 8001800:	bd30      	pop	{r4, r5, pc}
 8001802:	bf00      	nop

08001804 <xQueueSemaphoreTake>:
{
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 800180c:	2800      	cmp	r0, #0
 800180e:	d05c      	beq.n	80018ca <xQueueSemaphoreTake+0xc6>
    configASSERT( pxQueue->uxItemSize == 0 );
 8001810:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8001812:	4604      	mov	r4, r0
 8001814:	b147      	cbz	r7, 8001828 <xQueueSemaphoreTake+0x24>
 8001816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	e7fe      	b.n	8001826 <xQueueSemaphoreTake+0x22>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001828:	f003 f8b8 	bl	800499c <xTaskGetSchedulerState>
 800182c:	4605      	mov	r5, r0
 800182e:	2800      	cmp	r0, #0
 8001830:	d054      	beq.n	80018dc <xQueueSemaphoreTake+0xd8>
 8001832:	463d      	mov	r5, r7
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001834:	f104 0624 	add.w	r6, r4, #36	; 0x24
        taskENTER_CRITICAL();
 8001838:	f008 f9f4 	bl	8009c24 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800183c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8149 	bne.w	8001ad6 <xQueueSemaphoreTake+0x2d2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001844:	9b01      	ldr	r3, [sp, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 813a 	beq.w	8001ac0 <xQueueSemaphoreTake+0x2bc>
                else if( xEntryTimeSet == pdFALSE )
 800184c:	2d00      	cmp	r5, #0
 800184e:	f000 809d 	beq.w	800198c <xQueueSemaphoreTake+0x188>
        taskEXIT_CRITICAL();
 8001852:	f008 f9fd 	bl	8009c50 <vPortExitCritical>
        vTaskSuspendAll();
 8001856:	f001 fe83 	bl	8003560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800185a:	f008 f9e3 	bl	8009c24 <vPortEnterCritical>
 800185e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d102      	bne.n	800186c <xQueueSemaphoreTake+0x68>
 8001866:	2300      	movs	r3, #0
 8001868:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800186c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	d102      	bne.n	800187a <xQueueSemaphoreTake+0x76>
 8001874:	2300      	movs	r3, #0
 8001876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800187a:	f008 f9e9 	bl	8009c50 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800187e:	a901      	add	r1, sp, #4
 8001880:	a802      	add	r0, sp, #8
 8001882:	f002 fa0b 	bl	8003c9c <xTaskCheckForTimeOut>
 8001886:	2800      	cmp	r0, #0
 8001888:	d135      	bne.n	80018f6 <xQueueSemaphoreTake+0xf2>
    taskENTER_CRITICAL();
 800188a:	f008 f9cb 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800188e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a4 	beq.w	80019de <xQueueSemaphoreTake+0x1da>
    taskEXIT_CRITICAL();
 8001896:	f008 f9db 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 800189a:	f008 f9c3 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800189e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018a2:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018a4:	2d00      	cmp	r5, #0
 80018a6:	dc05      	bgt.n	80018b4 <xQueueSemaphoreTake+0xb0>
 80018a8:	e074      	b.n	8001994 <xQueueSemaphoreTake+0x190>
            --cTxLock;
 80018aa:	1e6b      	subs	r3, r5, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d06f      	beq.n	8001994 <xQueueSemaphoreTake+0x190>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018b6:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d06b      	beq.n	8001994 <xQueueSemaphoreTake+0x190>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018bc:	f002 fe98 	bl	80045f0 <xTaskRemoveFromEventList>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0f2      	beq.n	80018aa <xQueueSemaphoreTake+0xa6>
                            vTaskMissedYield();
 80018c4:	f003 f862 	bl	800498c <vTaskMissedYield>
 80018c8:	e7ef      	b.n	80018aa <xQueueSemaphoreTake+0xa6>
 80018ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 80018da:	e7fe      	b.n	80018da <xQueueSemaphoreTake+0xd6>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018dc:	9b01      	ldr	r3, [sp, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80d4 	beq.w	8001a8c <xQueueSemaphoreTake+0x288>
 80018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	e7fe      	b.n	80018f4 <xQueueSemaphoreTake+0xf0>
    taskENTER_CRITICAL();
 80018f6:	f008 f995 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80018fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018fe:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001900:	2d00      	cmp	r5, #0
 8001902:	dc04      	bgt.n	800190e <xQueueSemaphoreTake+0x10a>
 8001904:	e011      	b.n	800192a <xQueueSemaphoreTake+0x126>
            --cTxLock;
 8001906:	1e6b      	subs	r3, r5, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800190c:	b16a      	cbz	r2, 800192a <xQueueSemaphoreTake+0x126>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800190e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001910:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001912:	b153      	cbz	r3, 800192a <xQueueSemaphoreTake+0x126>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001914:	f002 fe6c 	bl	80045f0 <xTaskRemoveFromEventList>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0f4      	beq.n	8001906 <xQueueSemaphoreTake+0x102>
                            vTaskMissedYield();
 800191c:	f003 f836 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8001920:	1e6b      	subs	r3, r5, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001926:	2a00      	cmp	r2, #0
 8001928:	d1f1      	bne.n	800190e <xQueueSemaphoreTake+0x10a>
        pxQueue->cTxLock = queueUNLOCKED;
 800192a:	23ff      	movs	r3, #255	; 0xff
 800192c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001930:	f008 f98e 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001934:	f008 f976 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001938:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800193c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800193e:	2d00      	cmp	r5, #0
 8001940:	dd14      	ble.n	800196c <xQueueSemaphoreTake+0x168>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001942:	f104 0810 	add.w	r8, r4, #16
 8001946:	e003      	b.n	8001950 <xQueueSemaphoreTake+0x14c>
                --cRxLock;
 8001948:	1e6b      	subs	r3, r5, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800194e:	b16a      	cbz	r2, 800196c <xQueueSemaphoreTake+0x168>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001950:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001952:	4640      	mov	r0, r8
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001954:	b153      	cbz	r3, 800196c <xQueueSemaphoreTake+0x168>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001956:	f002 fe4b 	bl	80045f0 <xTaskRemoveFromEventList>
 800195a:	2800      	cmp	r0, #0
 800195c:	d0f4      	beq.n	8001948 <xQueueSemaphoreTake+0x144>
                    vTaskMissedYield();
 800195e:	f003 f815 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8001962:	1e6b      	subs	r3, r5, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001968:	2a00      	cmp	r2, #0
 800196a:	d1f1      	bne.n	8001950 <xQueueSemaphoreTake+0x14c>
        pxQueue->cRxLock = queueUNLOCKED;
 800196c:	23ff      	movs	r3, #255	; 0xff
 800196e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8001972:	f008 f96d 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8001976:	f002 fa91 	bl	8003e9c <xTaskResumeAll>
    taskENTER_CRITICAL();
 800197a:	f008 f953 	bl	8009c24 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800197e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001980:	2b00      	cmp	r3, #0
 8001982:	d07c      	beq.n	8001a7e <xQueueSemaphoreTake+0x27a>
    taskEXIT_CRITICAL();
 8001984:	f008 f964 	bl	8009c50 <vPortExitCritical>
    return xReturn;
 8001988:	2501      	movs	r5, #1
 800198a:	e755      	b.n	8001838 <xQueueSemaphoreTake+0x34>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800198c:	a802      	add	r0, sp, #8
 800198e:	f003 f941 	bl	8004c14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001992:	e75e      	b.n	8001852 <xQueueSemaphoreTake+0x4e>
        pxQueue->cTxLock = queueUNLOCKED;
 8001994:	23ff      	movs	r3, #255	; 0xff
 8001996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 800199a:	f008 f959 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 800199e:	f008 f941 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80019a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80019a6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019a8:	2d00      	cmp	r5, #0
 80019aa:	dd10      	ble.n	80019ce <xQueueSemaphoreTake+0x1ca>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019ac:	f104 0810 	add.w	r8, r4, #16
 80019b0:	e003      	b.n	80019ba <xQueueSemaphoreTake+0x1b6>
                --cRxLock;
 80019b2:	1e6b      	subs	r3, r5, #1
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80019b8:	b14a      	cbz	r2, 80019ce <xQueueSemaphoreTake+0x1ca>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019ba:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019bc:	4640      	mov	r0, r8
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019be:	b133      	cbz	r3, 80019ce <xQueueSemaphoreTake+0x1ca>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019c0:	f002 fe16 	bl	80045f0 <xTaskRemoveFromEventList>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d0f4      	beq.n	80019b2 <xQueueSemaphoreTake+0x1ae>
                    vTaskMissedYield();
 80019c8:	f002 ffe0 	bl	800498c <vTaskMissedYield>
 80019cc:	e7f1      	b.n	80019b2 <xQueueSemaphoreTake+0x1ae>
        pxQueue->cRxLock = queueUNLOCKED;
 80019ce:	23ff      	movs	r3, #255	; 0xff
 80019d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 80019d4:	f008 f93c 	bl	8009c50 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 80019d8:	f002 fa60 	bl	8003e9c <xTaskResumeAll>
 80019dc:	e7d4      	b.n	8001988 <xQueueSemaphoreTake+0x184>
    taskEXIT_CRITICAL();
 80019de:	f008 f937 	bl	8009c50 <vPortExitCritical>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d062      	beq.n	8001aae <xQueueSemaphoreTake+0x2aa>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4630      	mov	r0, r6
 80019ec:	f002 fd1a 	bl	8004424 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 80019f0:	f008 f918 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80019f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80019f8:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	dc04      	bgt.n	8001a08 <xQueueSemaphoreTake+0x204>
 80019fe:	e00d      	b.n	8001a1c <xQueueSemaphoreTake+0x218>
            --cTxLock;
 8001a00:	1e6b      	subs	r3, r5, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a06:	b14a      	cbz	r2, 8001a1c <xQueueSemaphoreTake+0x218>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a0a:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a0c:	b133      	cbz	r3, 8001a1c <xQueueSemaphoreTake+0x218>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a0e:	f002 fdef 	bl	80045f0 <xTaskRemoveFromEventList>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d0f4      	beq.n	8001a00 <xQueueSemaphoreTake+0x1fc>
                            vTaskMissedYield();
 8001a16:	f002 ffb9 	bl	800498c <vTaskMissedYield>
 8001a1a:	e7f1      	b.n	8001a00 <xQueueSemaphoreTake+0x1fc>
        pxQueue->cTxLock = queueUNLOCKED;
 8001a1c:	23ff      	movs	r3, #255	; 0xff
 8001a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001a22:	f008 f915 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001a26:	f008 f8fd 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001a2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a2e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a30:	2d00      	cmp	r5, #0
 8001a32:	dd10      	ble.n	8001a56 <xQueueSemaphoreTake+0x252>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a34:	f104 0810 	add.w	r8, r4, #16
 8001a38:	e003      	b.n	8001a42 <xQueueSemaphoreTake+0x23e>
                --cRxLock;
 8001a3a:	1e6b      	subs	r3, r5, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a40:	b14a      	cbz	r2, 8001a56 <xQueueSemaphoreTake+0x252>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a42:	6923      	ldr	r3, [r4, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a44:	4640      	mov	r0, r8
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a46:	b133      	cbz	r3, 8001a56 <xQueueSemaphoreTake+0x252>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a48:	f002 fdd2 	bl	80045f0 <xTaskRemoveFromEventList>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d0f4      	beq.n	8001a3a <xQueueSemaphoreTake+0x236>
                    vTaskMissedYield();
 8001a50:	f002 ff9c 	bl	800498c <vTaskMissedYield>
 8001a54:	e7f1      	b.n	8001a3a <xQueueSemaphoreTake+0x236>
        pxQueue->cRxLock = queueUNLOCKED;
 8001a56:	23ff      	movs	r3, #255	; 0xff
 8001a58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    taskEXIT_CRITICAL();
 8001a5c:	f008 f8f8 	bl	8009c50 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8001a60:	f002 fa1c 	bl	8003e9c <xTaskResumeAll>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d18f      	bne.n	8001988 <xQueueSemaphoreTake+0x184>
                    portYIELD_WITHIN_API();
 8001a68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	f3bf 8f6f 	isb	sy
 8001a7c:	e784      	b.n	8001988 <xQueueSemaphoreTake+0x184>
    taskEXIT_CRITICAL();
 8001a7e:	f008 f8e7 	bl	8009c50 <vPortExitCritical>
                        if( xInheritanceOccurred != pdFALSE )
 8001a82:	b92f      	cbnz	r7, 8001a90 <xQueueSemaphoreTake+0x28c>
}
 8001a84:	4638      	mov	r0, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a8c:	4607      	mov	r7, r0
 8001a8e:	e6d1      	b.n	8001834 <xQueueSemaphoreTake+0x30>
                            taskENTER_CRITICAL();
 8001a90:	f008 f8c8 	bl	8009c24 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a96:	b119      	cbz	r1, 8001aa0 <xQueueSemaphoreTake+0x29c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001aa0:	68a0      	ldr	r0, [r4, #8]
                return errQUEUE_EMPTY;
 8001aa2:	2700      	movs	r7, #0
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001aa4:	f003 f83c 	bl	8004b20 <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 8001aa8:	f008 f8d2 	bl	8009c50 <vPortExitCritical>
 8001aac:	e7ea      	b.n	8001a84 <xQueueSemaphoreTake+0x280>
                            taskENTER_CRITICAL();
 8001aae:	f008 f8b9 	bl	8009c24 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ab2:	68a0      	ldr	r0, [r4, #8]
 8001ab4:	f002 ff82 	bl	80049bc <xTaskPriorityInherit>
 8001ab8:	4607      	mov	r7, r0
                            taskEXIT_CRITICAL();
 8001aba:	f008 f8c9 	bl	8009c50 <vPortExitCritical>
 8001abe:	e793      	b.n	80019e8 <xQueueSemaphoreTake+0x1e4>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001ac0:	2f00      	cmp	r7, #0
 8001ac2:	d0f1      	beq.n	8001aa8 <xQueueSemaphoreTake+0x2a4>
 8001ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	e7fe      	b.n	8001ad4 <xQueueSemaphoreTake+0x2d0>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001ad6:	3b01      	subs	r3, #1
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ad8:	6822      	ldr	r2, [r4, #0]
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001ada:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001adc:	b12a      	cbz	r2, 8001aea <xQueueSemaphoreTake+0x2e6>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ade:	6923      	ldr	r3, [r4, #16]
 8001ae0:	b93b      	cbnz	r3, 8001af2 <xQueueSemaphoreTake+0x2ee>
                return pdPASS;
 8001ae2:	2701      	movs	r7, #1
                taskEXIT_CRITICAL();
 8001ae4:	f008 f8b4 	bl	8009c50 <vPortExitCritical>
                return pdPASS;
 8001ae8:	e7cc      	b.n	8001a84 <xQueueSemaphoreTake+0x280>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001aea:	f003 f885 	bl	8004bf8 <pvTaskIncrementMutexHeldCount>
 8001aee:	60a0      	str	r0, [r4, #8]
 8001af0:	e7f5      	b.n	8001ade <xQueueSemaphoreTake+0x2da>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001af2:	f104 0010 	add.w	r0, r4, #16
 8001af6:	f002 fd7b 	bl	80045f0 <xTaskRemoveFromEventList>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0f1      	beq.n	8001ae2 <xQueueSemaphoreTake+0x2de>
                        queueYIELD_IF_USING_PREEMPTION();
 8001afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	e7e6      	b.n	8001ae2 <xQueueSemaphoreTake+0x2de>

08001b14 <xQueueGetMutexHolder>:
        configASSERT( xSemaphore );
 8001b14:	b178      	cbz	r0, 8001b36 <xQueueGetMutexHolder+0x22>
    {
 8001b16:	b510      	push	{r4, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	b082      	sub	sp, #8
        taskENTER_CRITICAL();
 8001b1c:	f008 f882 	bl	8009c24 <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	b933      	cbnz	r3, 8001b32 <xQueueGetMutexHolder+0x1e>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001b24:	68a0      	ldr	r0, [r4, #8]
 8001b26:	9001      	str	r0, [sp, #4]
        taskEXIT_CRITICAL();
 8001b28:	f008 f892 	bl	8009c50 <vPortExitCritical>
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001b2c:	9801      	ldr	r0, [sp, #4]
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd10      	pop	{r4, pc}
                pxReturn = NULL;
 8001b32:	2000      	movs	r0, #0
 8001b34:	e7f7      	b.n	8001b26 <xQueueGetMutexHolder+0x12>
 8001b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3a:	f383 8811 	msr	BASEPRI, r3
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f3bf 8f4f 	dsb	sy
        configASSERT( xSemaphore );
 8001b46:	e7fe      	b.n	8001b46 <xQueueGetMutexHolder+0x32>

08001b48 <xQueueGetMutexHolderFromISR>:
        configASSERT( xSemaphore );
 8001b48:	b128      	cbz	r0, 8001b56 <xQueueGetMutexHolderFromISR+0xe>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b4a:	6803      	ldr	r3, [r0, #0]
 8001b4c:	b90b      	cbnz	r3, 8001b52 <xQueueGetMutexHolderFromISR+0xa>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001b4e:	6880      	ldr	r0, [r0, #8]
 8001b50:	4770      	bx	lr
            pxReturn = NULL;
 8001b52:	2000      	movs	r0, #0
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001b54:	4770      	bx	lr
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
        configASSERT( xSemaphore );
 8001b66:	e7fe      	b.n	8001b66 <xQueueGetMutexHolderFromISR+0x1e>

08001b68 <xQueueTakeMutexRecursive>:
        configASSERT( pxMutex );
 8001b68:	b1a8      	cbz	r0, 8001b96 <xQueueTakeMutexRecursive+0x2e>
    {
 8001b6a:	b570      	push	{r4, r5, r6, lr}
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001b6c:	6886      	ldr	r6, [r0, #8]
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	f002 ff05 	bl	8004980 <xTaskGetCurrentTaskHandle>
 8001b76:	4286      	cmp	r6, r0
 8001b78:	d008      	beq.n	8001b8c <xQueueTakeMutexRecursive+0x24>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff fe41 	bl	8001804 <xQueueSemaphoreTake>
            if( xReturn != pdFAIL )
 8001b82:	b110      	cbz	r0, 8001b8a <xQueueTakeMutexRecursive+0x22>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001b84:	68e3      	ldr	r3, [r4, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60e3      	str	r3, [r4, #12]
    }
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001b8c:	68e3      	ldr	r3, [r4, #12]
            xReturn = pdPASS;
 8001b8e:	2001      	movs	r0, #1
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001b90:	4403      	add	r3, r0
 8001b92:	60e3      	str	r3, [r4, #12]
    }
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
        configASSERT( pxMutex );
 8001ba6:	e7fe      	b.n	8001ba6 <xQueueTakeMutexRecursive+0x3e>

08001ba8 <xQueueGiveMutexRecursive>:
    {
 8001ba8:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxMutex );
 8001baa:	b138      	cbz	r0, 8001bbc <xQueueGiveMutexRecursive+0x14>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001bac:	6885      	ldr	r5, [r0, #8]
 8001bae:	4604      	mov	r4, r0
 8001bb0:	f002 fee6 	bl	8004980 <xTaskGetCurrentTaskHandle>
 8001bb4:	4285      	cmp	r5, r0
 8001bb6:	d00a      	beq.n	8001bce <xQueueGiveMutexRecursive+0x26>
            xReturn = pdFAIL;
 8001bb8:	2000      	movs	r0, #0
    }
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
        configASSERT( pxMutex );
 8001bcc:	e7fe      	b.n	8001bcc <xQueueGiveMutexRecursive+0x24>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60e3      	str	r3, [r4, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001bd4:	b10b      	cbz	r3, 8001bda <xQueueGiveMutexRecursive+0x32>
            xReturn = pdPASS;
 8001bd6:	2001      	movs	r0, #1
    }
 8001bd8:	bd38      	pop	{r3, r4, r5, pc}
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7fe fe50 	bl	8000884 <xQueueGenericSend>
            xReturn = pdPASS;
 8001be4:	2001      	movs	r0, #1
    }
 8001be6:	bd38      	pop	{r3, r4, r5, pc}

08001be8 <vQueueAddToRegistry>:
        configASSERT( xQueue );
 8001be8:	b1a0      	cbz	r0, 8001c14 <vQueueAddToRegistry+0x2c>
        if( pcQueueName != NULL )
 8001bea:	b191      	cbz	r1, 8001c12 <vQueueAddToRegistry+0x2a>
    {
 8001bec:	b430      	push	{r4, r5}
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001bee:	2400      	movs	r4, #0
 8001bf0:	4d47      	ldr	r5, [pc, #284]	; (8001d10 <vQueueAddToRegistry+0x128>)
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bf2:	4623      	mov	r3, r4
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001bf4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8001bf8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8001bfc:	6852      	ldr	r2, [r2, #4]
 8001bfe:	4282      	cmp	r2, r0
 8001c00:	d07a      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c02:	b184      	cbz	r4, 8001c26 <vQueueAddToRegistry+0x3e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c04:	3301      	adds	r3, #1
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d1f4      	bne.n	8001bf4 <vQueueAddToRegistry+0xc>
            pxEntryToWrite->xHandle = xQueue;
 8001c0a:	e9c4 1000 	strd	r1, r0, [r4]
    }
 8001c0e:	bc30      	pop	{r4, r5}
 8001c10:	4770      	bx	lr
 8001c12:	4770      	bx	lr
 8001c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8001c24:	e7fe      	b.n	8001c24 <vQueueAddToRegistry+0x3c>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c26:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d05f      	beq.n	8001cee <vQueueAddToRegistry+0x106>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	f103 0201 	add.w	r2, r3, #1
 8001c34:	d0eb      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001c36:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8001c3a:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001c3e:	6864      	ldr	r4, [r4, #4]
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	d059      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c44:	f855 4032 	ldr.w	r4, [r5, r2, lsl #3]
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d058      	beq.n	8001cfe <vQueueAddToRegistry+0x116>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	f103 0202 	add.w	r2, r3, #2
 8001c52:	d0dc      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001c54:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8001c58:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001c5c:	6864      	ldr	r4, [r4, #4]
 8001c5e:	42a0      	cmp	r0, r4
 8001c60:	d04a      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c62:	f855 4032 	ldr.w	r4, [r5, r2, lsl #3]
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	d049      	beq.n	8001cfe <vQueueAddToRegistry+0x116>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	f103 0203 	add.w	r2, r3, #3
 8001c70:	d0cd      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001c72:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8001c76:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001c7a:	6864      	ldr	r4, [r4, #4]
 8001c7c:	42a0      	cmp	r0, r4
 8001c7e:	d03b      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c80:	f855 4032 	ldr.w	r4, [r5, r2, lsl #3]
 8001c84:	2c00      	cmp	r4, #0
 8001c86:	d03a      	beq.n	8001cfe <vQueueAddToRegistry+0x116>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	f103 0204 	add.w	r2, r3, #4
 8001c8e:	d0be      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001c90:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8001c94:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001c98:	6864      	ldr	r4, [r4, #4]
 8001c9a:	42a0      	cmp	r0, r4
 8001c9c:	d02c      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c9e:	f855 4032 	ldr.w	r4, [r5, r2, lsl #3]
 8001ca2:	b364      	cbz	r4, 8001cfe <vQueueAddToRegistry+0x116>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	f103 0205 	add.w	r2, r3, #5
 8001caa:	d0b0      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001cac:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 8001cb0:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8001cb4:	6864      	ldr	r4, [r4, #4]
 8001cb6:	42a0      	cmp	r0, r4
 8001cb8:	d01e      	beq.n	8001cf8 <vQueueAddToRegistry+0x110>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001cba:	f855 4032 	ldr.w	r4, [r5, r2, lsl #3]
 8001cbe:	b1f4      	cbz	r4, 8001cfe <vQueueAddToRegistry+0x116>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	f103 0c06 	add.w	ip, r3, #6
 8001cc6:	d0a2      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001cc8:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 8001ccc:	6852      	ldr	r2, [r2, #4]
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d010      	beq.n	8001cf4 <vQueueAddToRegistry+0x10c>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001cd2:	f855 203c 	ldr.w	r2, [r5, ip, lsl #3]
 8001cd6:	b1a2      	cbz	r2, 8001d02 <vQueueAddToRegistry+0x11a>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d098      	beq.n	8001c0e <vQueueAddToRegistry+0x26>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001cdc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001cde:	4298      	cmp	r0, r3
 8001ce0:	d013      	beq.n	8001d0a <vQueueAddToRegistry+0x122>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001ce2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d192      	bne.n	8001c0e <vQueueAddToRegistry+0x26>
 8001ce8:	2307      	movs	r3, #7
 8001cea:	f04f 0c38 	mov.w	ip, #56	; 0x38
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001cee:	eb05 040c 	add.w	r4, r5, ip
 8001cf2:	e787      	b.n	8001c04 <vQueueAddToRegistry+0x1c>
 8001cf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001cf8:	eb05 040c 	add.w	r4, r5, ip
        if( pxEntryToWrite != NULL )
 8001cfc:	e785      	b.n	8001c0a <vQueueAddToRegistry+0x22>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001cfe:	4613      	mov	r3, r2
 8001d00:	e7f5      	b.n	8001cee <vQueueAddToRegistry+0x106>
 8001d02:	4663      	mov	r3, ip
 8001d04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001d08:	e7f1      	b.n	8001cee <vQueueAddToRegistry+0x106>
 8001d0a:	f04f 0c38 	mov.w	ip, #56	; 0x38
 8001d0e:	e7f3      	b.n	8001cf8 <vQueueAddToRegistry+0x110>
 8001d10:	24000000 	.word	0x24000000

08001d14 <vQueueUnregisterQueue>:
        configASSERT( xQueue );
 8001d14:	b1c8      	cbz	r0, 8001d4a <vQueueUnregisterQueue+0x36>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <vQueueUnregisterQueue+0x74>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4290      	cmp	r0, r2
 8001d1c:	d026      	beq.n	8001d6c <vQueueUnregisterQueue+0x58>
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4290      	cmp	r0, r2
 8001d22:	d025      	beq.n	8001d70 <vQueueUnregisterQueue+0x5c>
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	4290      	cmp	r0, r2
 8001d28:	d024      	beq.n	8001d74 <vQueueUnregisterQueue+0x60>
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d023      	beq.n	8001d78 <vQueueUnregisterQueue+0x64>
 8001d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d32:	4290      	cmp	r0, r2
 8001d34:	d022      	beq.n	8001d7c <vQueueUnregisterQueue+0x68>
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	4290      	cmp	r0, r2
 8001d3a:	d00f      	beq.n	8001d5c <vQueueUnregisterQueue+0x48>
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4290      	cmp	r0, r2
 8001d40:	d01e      	beq.n	8001d80 <vQueueUnregisterQueue+0x6c>
 8001d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d44:	4282      	cmp	r2, r0
 8001d46:	d01d      	beq.n	8001d84 <vQueueUnregisterQueue+0x70>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001d48:	4770      	bx	lr
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8001d5a:	e7fe      	b.n	8001d5a <vQueueUnregisterQueue+0x46>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d5c:	2205      	movs	r2, #5
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001d5e:	2100      	movs	r1, #0
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001d60:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001d68:	6041      	str	r1, [r0, #4]
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001d6a:	4770      	bx	lr
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	e7f6      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d70:	2201      	movs	r2, #1
 8001d72:	e7f4      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d74:	2202      	movs	r2, #2
 8001d76:	e7f2      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d78:	2203      	movs	r2, #3
 8001d7a:	e7f0      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	e7ee      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d80:	2206      	movs	r2, #6
 8001d82:	e7ec      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d84:	2207      	movs	r2, #7
 8001d86:	e7ea      	b.n	8001d5e <vQueueUnregisterQueue+0x4a>
 8001d88:	24000000 	.word	0x24000000

08001d8c <pcQueueGetName>:
        configASSERT( xQueue );
 8001d8c:	b1d0      	cbz	r0, 8001dc4 <pcQueueGetName+0x38>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <pcQueueGetName+0x70>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d023      	beq.n	8001dde <pcQueueGetName+0x52>
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	d022      	beq.n	8001de2 <pcQueueGetName+0x56>
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d021      	beq.n	8001de6 <pcQueueGetName+0x5a>
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	4290      	cmp	r0, r2
 8001da6:	d020      	beq.n	8001dea <pcQueueGetName+0x5e>
 8001da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001daa:	4290      	cmp	r0, r2
 8001dac:	d01f      	beq.n	8001dee <pcQueueGetName+0x62>
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d010      	beq.n	8001dd6 <pcQueueGetName+0x4a>
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	4290      	cmp	r0, r2
 8001db8:	d01b      	beq.n	8001df2 <pcQueueGetName+0x66>
 8001dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dbc:	4282      	cmp	r2, r0
 8001dbe:	d01a      	beq.n	8001df6 <pcQueueGetName+0x6a>
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001dc0:	2000      	movs	r0, #0
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001dc2:	4770      	bx	lr
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8001dd4:	e7fe      	b.n	8001dd4 <pcQueueGetName+0x48>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dd6:	2205      	movs	r2, #5
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001dd8:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
                break;
 8001ddc:	4770      	bx	lr
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dde:	2200      	movs	r2, #0
 8001de0:	e7fa      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001de2:	2201      	movs	r2, #1
 8001de4:	e7f8      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001de6:	2202      	movs	r2, #2
 8001de8:	e7f6      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001dea:	2203      	movs	r2, #3
 8001dec:	e7f4      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001dee:	2204      	movs	r2, #4
 8001df0:	e7f2      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001df2:	2206      	movs	r2, #6
 8001df4:	e7f0      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001df6:	2207      	movs	r2, #7
 8001df8:	e7ee      	b.n	8001dd8 <pcQueueGetName+0x4c>
 8001dfa:	bf00      	nop
 8001dfc:	24000000 	.word	0x24000000

08001e00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4605      	mov	r5, r0
 8001e04:	460e      	mov	r6, r1
 8001e06:	4614      	mov	r4, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001e08:	f007 ff0c 	bl	8009c24 <vPortEnterCritical>
 8001e0c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8001e10:	2bff      	cmp	r3, #255	; 0xff
 8001e12:	d102      	bne.n	8001e1a <vQueueWaitForMessageRestricted+0x1a>
 8001e14:	2300      	movs	r3, #0
 8001e16:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001e1a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d102      	bne.n	8001e28 <vQueueWaitForMessageRestricted+0x28>
 8001e22:	2300      	movs	r3, #0
 8001e24:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8001e28:	f007 ff12 	bl	8009c50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d043      	beq.n	8001eba <vQueueWaitForMessageRestricted+0xba>
    taskENTER_CRITICAL();
 8001e32:	f007 fef7 	bl	8009c24 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001e36:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8001e3a:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	dd14      	ble.n	8001e6a <vQueueWaitForMessageRestricted+0x6a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e40:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8001e44:	e003      	b.n	8001e4e <vQueueWaitForMessageRestricted+0x4e>
            --cTxLock;
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e4c:	b16a      	cbz	r2, 8001e6a <vQueueWaitForMessageRestricted+0x6a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e50:	4630      	mov	r0, r6
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e52:	b153      	cbz	r3, 8001e6a <vQueueWaitForMessageRestricted+0x6a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e54:	f002 fbcc 	bl	80045f0 <xTaskRemoveFromEventList>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d0f4      	beq.n	8001e46 <vQueueWaitForMessageRestricted+0x46>
                            vTaskMissedYield();
 8001e5c:	f002 fd96 	bl	800498c <vTaskMissedYield>
            --cTxLock;
 8001e60:	1e63      	subs	r3, r4, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d1f1      	bne.n	8001e4e <vQueueWaitForMessageRestricted+0x4e>
        pxQueue->cTxLock = queueUNLOCKED;
 8001e6a:	23ff      	movs	r3, #255	; 0xff
 8001e6c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001e70:	f007 feee 	bl	8009c50 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001e74:	f007 fed6 	bl	8009c24 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8001e78:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8001e7c:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e7e:	2c00      	cmp	r4, #0
 8001e80:	dd14      	ble.n	8001eac <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e82:	f105 0610 	add.w	r6, r5, #16
 8001e86:	e003      	b.n	8001e90 <vQueueWaitForMessageRestricted+0x90>
                --cRxLock;
 8001e88:	1e63      	subs	r3, r4, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e8e:	b16a      	cbz	r2, 8001eac <vQueueWaitForMessageRestricted+0xac>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e90:	692b      	ldr	r3, [r5, #16]
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e92:	4630      	mov	r0, r6
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e94:	b153      	cbz	r3, 8001eac <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e96:	f002 fbab 	bl	80045f0 <xTaskRemoveFromEventList>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d0f4      	beq.n	8001e88 <vQueueWaitForMessageRestricted+0x88>
                    vTaskMissedYield();
 8001e9e:	f002 fd75 	bl	800498c <vTaskMissedYield>
                --cRxLock;
 8001ea2:	1e63      	subs	r3, r4, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d1f1      	bne.n	8001e90 <vQueueWaitForMessageRestricted+0x90>
        pxQueue->cRxLock = queueUNLOCKED;
 8001eac:	23ff      	movs	r3, #255	; 0xff
 8001eae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    }
 8001eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8001eb6:	f007 becb 	b.w	8009c50 <vPortExitCritical>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001eba:	4622      	mov	r2, r4
 8001ebc:	4631      	mov	r1, r6
 8001ebe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ec2:	f002 fb33 	bl	800452c <vTaskPlaceOnEventListRestricted>
 8001ec6:	e7b4      	b.n	8001e32 <vQueueWaitForMessageRestricted+0x32>

08001ec8 <xQueueGenericReset>:
    configASSERT( pxQueue );
 8001ec8:	b358      	cbz	r0, 8001f22 <xQueueGenericReset+0x5a>
        ( pxQueue->uxLength >= 1U ) &&
 8001eca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	4604      	mov	r4, r0
    if( ( pxQueue != NULL ) &&
 8001ed0:	b1f3      	cbz	r3, 8001f10 <xQueueGenericReset+0x48>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001ed2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001ed4:	fba5 3503 	umull	r3, r5, r5, r3
 8001ed8:	b9d5      	cbnz	r5, 8001f10 <xQueueGenericReset+0x48>
        taskENTER_CRITICAL();
 8001eda:	460e      	mov	r6, r1
 8001edc:	f007 fea2 	bl	8009c24 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ee0:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ee2:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ee4:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ee6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eee:	1a59      	subs	r1, r3, r1
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef0:	4413      	add	r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef2:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef4:	60a3      	str	r3, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001ef6:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef8:	60e2      	str	r2, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001efa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001f02:	bb46      	cbnz	r6, 8001f56 <xQueueGenericReset+0x8e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f04:	6923      	ldr	r3, [r4, #16]
 8001f06:	b9ab      	cbnz	r3, 8001f34 <xQueueGenericReset+0x6c>
        taskEXIT_CRITICAL();
 8001f08:	f007 fea2 	bl	8009c50 <vPortExitCritical>
}
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericReset+0x58>
 8001f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f26:	f383 8811 	msr	BASEPRI, r3
 8001f2a:	f3bf 8f6f 	isb	sy
 8001f2e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001f32:	e7fe      	b.n	8001f32 <xQueueGenericReset+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f34:	f104 0010 	add.w	r0, r4, #16
 8001f38:	f002 fb5a 	bl	80045f0 <xTaskRemoveFromEventList>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d0e3      	beq.n	8001f08 <xQueueGenericReset+0x40>
                        queueYIELD_IF_USING_PREEMPTION();
 8001f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	e7d8      	b.n	8001f08 <xQueueGenericReset+0x40>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f56:	f104 0010 	add.w	r0, r4, #16
 8001f5a:	f7fe fc05 	bl	8000768 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f62:	f7fe fc01 	bl	8000768 <vListInitialise>
 8001f66:	e7cf      	b.n	8001f08 <xQueueGenericReset+0x40>

08001f68 <xQueueGenericCreate>:
    {
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001f6c:	b148      	cbz	r0, 8001f82 <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f6e:	fba0 3701 	umull	r3, r7, r0, r1
 8001f72:	460d      	mov	r5, r1
 8001f74:	4604      	mov	r4, r0
 8001f76:	b927      	cbnz	r7, 8001f82 <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001f78:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001f7c:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8001f80:	d908      	bls.n	8001f94 <xQueueGenericCreate+0x2c>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8001f92:	e7fe      	b.n	8001f92 <xQueueGenericCreate+0x2a>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f94:	3050      	adds	r0, #80	; 0x50
 8001f96:	4690      	mov	r8, r2
 8001f98:	f003 fce2 	bl	8005960 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8001f9c:	4606      	mov	r6, r0
 8001f9e:	b168      	cbz	r0, 8001fbc <xQueueGenericCreate+0x54>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001fa0:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001fa4:	b16d      	cbz	r5, 8001fc2 <xQueueGenericCreate+0x5a>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fa6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001faa:	2101      	movs	r1, #1
 8001fac:	4630      	mov	r0, r6
 8001fae:	6033      	str	r3, [r6, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 8001fb0:	e9c6 450f 	strd	r4, r5, [r6, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fb4:	f7ff ff88 	bl	8001ec8 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8001fb8:	f886 804c 	strb.w	r8, [r6, #76]	; 0x4c
    }
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e7f1      	b.n	8001faa <xQueueGenericCreate+0x42>
 8001fc6:	bf00      	nop

08001fc8 <xQueueGenericCreateStatic>:
    {
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	f89d 4020 	ldrb.w	r4, [sp, #32]
        configASSERT( pxStaticQueue );
 8001fd0:	b15b      	cbz	r3, 8001fea <xQueueGenericCreateStatic+0x22>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001fd2:	b108      	cbz	r0, 8001fd8 <xQueueGenericCreateStatic+0x10>
            ( pxStaticQueue != NULL ) &&
 8001fd4:	b30a      	cbz	r2, 800201a <xQueueGenericCreateStatic+0x52>
 8001fd6:	b989      	cbnz	r1, 8001ffc <xQueueGenericCreateStatic+0x34>
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8001fe8:	e7fe      	b.n	8001fe8 <xQueueGenericCreateStatic+0x20>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 8001ffa:	e7fe      	b.n	8001ffa <xQueueGenericCreateStatic+0x32>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001ffc:	b16a      	cbz	r2, 800201a <xQueueGenericCreateStatic+0x52>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001ffe:	2550      	movs	r5, #80	; 0x50
 8002000:	9503      	str	r5, [sp, #12]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002002:	9d03      	ldr	r5, [sp, #12]
 8002004:	2d50      	cmp	r5, #80	; 0x50
 8002006:	d00b      	beq.n	8002020 <xQueueGenericCreateStatic+0x58>
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	e7fe      	b.n	8002018 <xQueueGenericCreateStatic+0x50>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800201a:	2900      	cmp	r1, #0
 800201c:	d1dc      	bne.n	8001fd8 <xQueueGenericCreateStatic+0x10>
 800201e:	e7ee      	b.n	8001ffe <xQueueGenericCreateStatic+0x36>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8002020:	2900      	cmp	r1, #0
 8002022:	bf08      	it	eq
 8002024:	461a      	moveq	r2, r3
    pxNewQueue->uxItemSize = uxItemSize;
 8002026:	6419      	str	r1, [r3, #64]	; 0x40
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002028:	2101      	movs	r1, #1
    pxNewQueue->uxLength = uxQueueLength;
 800202a:	63d8      	str	r0, [r3, #60]	; 0x3c
 800202c:	601a      	str	r2, [r3, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800202e:	4618      	mov	r0, r3
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002030:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8002034:	9301      	str	r3, [sp, #4]
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8002036:	9a03      	ldr	r2, [sp, #12]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002038:	f7ff ff46 	bl	8001ec8 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800203c:	9b01      	ldr	r3, [sp, #4]
    }
 800203e:	4618      	mov	r0, r3
            pxNewQueue->ucQueueType = ucQueueType;
 8002040:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
    }
 8002044:	b005      	add	sp, #20
 8002046:	bd30      	pop	{r4, r5, pc}

08002048 <vQueueSetQueueNumber>:
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8002048:	6481      	str	r1, [r0, #72]	; 0x48
    }
 800204a:	4770      	bx	lr

0800204c <uxQueueGetQueueNumber>:
    }
 800204c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800204e:	4770      	bx	lr

08002050 <ucQueueGetQueueType>:
    }
 8002050:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <prvWriteBytesToBuffer>:
                                     size_t xCount,
                                     size_t xHead )
{
    size_t xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );
 8002058:	b942      	cbnz	r2, 800206c <prvWriteBytesToBuffer+0x14>
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	e7fe      	b.n	800206a <prvWriteBytesToBuffer+0x12>
{
 800206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002070:	4614      	mov	r4, r2

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 8002072:	6882      	ldr	r2, [r0, #8]
 8002074:	4606      	mov	r6, r0
 8002076:	4698      	mov	r8, r3
 8002078:	1ad5      	subs	r5, r2, r3
 800207a:	42a5      	cmp	r5, r4
 800207c:	bf28      	it	cs
 800207e:	4625      	movcs	r5, r4

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002080:	1958      	adds	r0, r3, r5
 8002082:	4282      	cmp	r2, r0
 8002084:	d208      	bcs.n	8002098 <prvWriteBytesToBuffer+0x40>
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	e7fe      	b.n	8002096 <prvWriteBytesToBuffer+0x3e>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002098:	69b0      	ldr	r0, [r6, #24]
 800209a:	462a      	mov	r2, r5
 800209c:	460f      	mov	r7, r1
 800209e:	4418      	add	r0, r3
 80020a0:	f01f fed0 	bl	8021e44 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 80020a4:	42ac      	cmp	r4, r5
 80020a6:	d910      	bls.n	80020ca <prvWriteBytesToBuffer+0x72>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80020a8:	1b62      	subs	r2, r4, r5
 80020aa:	68b1      	ldr	r1, [r6, #8]
 80020ac:	428a      	cmp	r2, r1
 80020ae:	d908      	bls.n	80020c2 <prvWriteBytesToBuffer+0x6a>
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	e7fe      	b.n	80020c0 <prvWriteBytesToBuffer+0x68>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80020c2:	1979      	adds	r1, r7, r5
 80020c4:	69b0      	ldr	r0, [r6, #24]
 80020c6:	f01f febd 	bl	8021e44 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
 80020ca:	eb04 0008 	add.w	r0, r4, r8

    if( xHead >= pxStreamBuffer->xLength )
 80020ce:	68b3      	ldr	r3, [r6, #8]
 80020d0:	4283      	cmp	r3, r0
    {
        xHead -= pxStreamBuffer->xLength;
 80020d2:	bf98      	it	ls
 80020d4:	1ac0      	subls	r0, r0, r3
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
}
 80020d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020da:	bf00      	nop

080020dc <prvReadBytesFromBuffer>:
                                      size_t xCount,
                                      size_t xTail )
{
    size_t xFirstLength;

    configASSERT( xCount != ( size_t ) 0 );
 80020dc:	b942      	cbnz	r2, 80020f0 <prvReadBytesFromBuffer+0x14>
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	e7fe      	b.n	80020ee <prvReadBytesFromBuffer+0x12>
{
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	460e      	mov	r6, r1

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 80020f4:	6881      	ldr	r1, [r0, #8]
 80020f6:	4614      	mov	r4, r2
{
 80020f8:	b083      	sub	sp, #12
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 80020fa:	1aca      	subs	r2, r1, r3
 80020fc:	4605      	mov	r5, r0
 80020fe:	461f      	mov	r7, r3
 8002100:	42a2      	cmp	r2, r4
 8002102:	bf28      	it	cs
 8002104:	4622      	movcs	r2, r4

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
 8002106:	4294      	cmp	r4, r2
 8002108:	d208      	bcs.n	800211c <prvReadBytesFromBuffer+0x40>
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	e7fe      	b.n	800211a <prvReadBytesFromBuffer+0x3e>
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800211c:	1898      	adds	r0, r3, r2
 800211e:	4281      	cmp	r1, r0
 8002120:	d208      	bcs.n	8002134 <prvReadBytesFromBuffer+0x58>
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	e7fe      	b.n	8002132 <prvReadBytesFromBuffer+0x56>
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002134:	69a9      	ldr	r1, [r5, #24]
 8002136:	4630      	mov	r0, r6
 8002138:	9201      	str	r2, [sp, #4]
 800213a:	4419      	add	r1, r3
 800213c:	f01f fe82 	bl	8021e44 <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
 8002140:	9a01      	ldr	r2, [sp, #4]
 8002142:	4294      	cmp	r4, r2
 8002144:	d806      	bhi.n	8002154 <prvReadBytesFromBuffer+0x78>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
 8002146:	19e0      	adds	r0, r4, r7

    if( xTail >= pxStreamBuffer->xLength )
 8002148:	68ab      	ldr	r3, [r5, #8]
 800214a:	4283      	cmp	r3, r0
    {
        xTail -= pxStreamBuffer->xLength;
 800214c:	bf98      	it	ls
 800214e:	1ac0      	subls	r0, r0, r3
    }

    return xTail;
}
 8002150:	b003      	add	sp, #12
 8002152:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002154:	18b0      	adds	r0, r6, r2
 8002156:	69a9      	ldr	r1, [r5, #24]
 8002158:	1aa2      	subs	r2, r4, r2
 800215a:	f01f fe73 	bl	8021e44 <memcpy>
 800215e:	e7f2      	b.n	8002146 <prvReadBytesFromBuffer+0x6a>

08002160 <xStreamBufferSend>:
{
 8002160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002164:	b089      	sub	sp, #36	; 0x24
 8002166:	9303      	str	r3, [sp, #12]
    configASSERT( pvTxData );
 8002168:	2900      	cmp	r1, #0
 800216a:	d034      	beq.n	80021d6 <xStreamBufferSend+0x76>
    configASSERT( pxStreamBuffer );
 800216c:	4604      	mov	r4, r0
 800216e:	b348      	cbz	r0, 80021c4 <xStreamBufferSend+0x64>
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002170:	7f03      	ldrb	r3, [r0, #28]
 8002172:	460e      	mov	r6, r1
 8002174:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002178:	4617      	mov	r7, r2
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800217a:	f013 0101 	ands.w	r1, r3, #1
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 800217e:	f10e 3cff 	add.w	ip, lr, #4294967295	; 0xffffffff
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002182:	d031      	beq.n	80021e8 <xStreamBufferSend+0x88>
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002184:	f102 0804 	add.w	r8, r2, #4
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002188:	4542      	cmp	r2, r8
 800218a:	d26c      	bcs.n	8002266 <xStreamBufferSend+0x106>
        if( xRequiredSpace > xMaxReportedSpace )
 800218c:	45c4      	cmp	ip, r8
 800218e:	d22f      	bcs.n	80021f0 <xStreamBufferSend+0x90>
            xTicksToWait = ( TickType_t ) 0;
 8002190:	2300      	movs	r3, #0
 8002192:	9303      	str	r3, [sp, #12]
        xOriginalTail = pxStreamBuffer->xTail;
 8002194:	6822      	ldr	r2, [r4, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002196:	6825      	ldr	r5, [r4, #0]
        xSpace -= pxStreamBuffer->xHead;
 8002198:	6860      	ldr	r0, [r4, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d1f9      	bne.n	8002194 <xStreamBufferSend+0x34>
    xSpace -= ( size_t ) 1;
 80021a0:	4465      	add	r5, ip
 80021a2:	1a2d      	subs	r5, r5, r0
    if( xSpace >= pxStreamBuffer->xLength )
 80021a4:	45ae      	cmp	lr, r5
        xSpace -= pxStreamBuffer->xLength;
 80021a6:	bf98      	it	ls
 80021a8:	eba5 050e 	subls.w	r5, r5, lr
    size_t xNextHead = pxStreamBuffer->xHead;
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	9705      	str	r7, [sp, #20]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d061      	beq.n	8002278 <xStreamBufferSend+0x118>
        if( xSpace >= xRequiredSpace )
 80021b4:	4545      	cmp	r5, r8
 80021b6:	f080 8089 	bcs.w	80022cc <xStreamBufferSend+0x16c>
    return xDataLengthBytes;
 80021ba:	2500      	movs	r5, #0
}
 80021bc:	4628      	mov	r0, r5
 80021be:	b009      	add	sp, #36	; 0x24
 80021c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80021d4:	e7fe      	b.n	80021d4 <xStreamBufferSend+0x74>
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
    configASSERT( pvTxData );
 80021e6:	e7fe      	b.n	80021e6 <xStreamBufferSend+0x86>
        if( xRequiredSpace > xMaxReportedSpace )
 80021e8:	4562      	cmp	r2, ip
 80021ea:	4690      	mov	r8, r2
 80021ec:	bf28      	it	cs
 80021ee:	46e0      	movcs	r8, ip
    if( xTicksToWait != ( TickType_t ) 0 )
 80021f0:	9b03      	ldr	r3, [sp, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ce      	beq.n	8002194 <xStreamBufferSend+0x34>
        vTaskSetTimeOutState( &xTimeOut );
 80021f6:	a806      	add	r0, sp, #24
 80021f8:	f001 fd36 	bl	8003c68 <vTaskSetTimeOutState>
            taskENTER_CRITICAL();
 80021fc:	f007 fd12 	bl	8009c24 <vPortEnterCritical>
        xOriginalTail = pxStreamBuffer->xTail;
 8002200:	6820      	ldr	r0, [r4, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002202:	6821      	ldr	r1, [r4, #0]
        xSpace -= pxStreamBuffer->xHead;
 8002204:	6862      	ldr	r2, [r4, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	4298      	cmp	r0, r3
 800220a:	d1f9      	bne.n	8002200 <xStreamBufferSend+0xa0>
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800220c:	68a3      	ldr	r3, [r4, #8]
    xSpace -= ( size_t ) 1;
 800220e:	1e5d      	subs	r5, r3, #1
 8002210:	4429      	add	r1, r5
 8002212:	1a8d      	subs	r5, r1, r2
    if( xSpace >= pxStreamBuffer->xLength )
 8002214:	42ab      	cmp	r3, r5
        xSpace -= pxStreamBuffer->xLength;
 8002216:	bf98      	it	ls
 8002218:	1aed      	subls	r5, r5, r3
                if( xSpace < xRequiredSpace )
 800221a:	45a8      	cmp	r8, r5
 800221c:	d96a      	bls.n	80022f4 <xStreamBufferSend+0x194>
                    ( void ) xTaskNotifyStateClear( NULL );
 800221e:	2100      	movs	r1, #0
 8002220:	4608      	mov	r0, r1
 8002222:	f001 fcd3 	bl	8003bcc <xTaskGenericNotifyStateClear>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8002226:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800222a:	f1b9 0f00 	cmp.w	r9, #0
 800222e:	d158      	bne.n	80022e2 <xStreamBufferSend+0x182>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8002230:	f002 fba6 	bl	8004980 <xTaskGetCurrentTaskHandle>
 8002234:	6160      	str	r0, [r4, #20]
            taskEXIT_CRITICAL();
 8002236:	f007 fd0b 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	4649      	mov	r1, r9
 800223e:	464a      	mov	r2, r9
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4648      	mov	r0, r9
 8002244:	464b      	mov	r3, r9
 8002246:	f001 fb5d 	bl	8003904 <xTaskGenericNotifyWait>
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800224a:	a903      	add	r1, sp, #12
 800224c:	a806      	add	r0, sp, #24
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 800224e:	f8c4 9014 	str.w	r9, [r4, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8002252:	f001 fd23 	bl	8003c9c <xTaskCheckForTimeOut>
 8002256:	2800      	cmp	r0, #0
 8002258:	d0d0      	beq.n	80021fc <xStreamBufferSend+0x9c>
    if( xSpace == ( size_t ) 0 )
 800225a:	2d00      	cmp	r5, #0
 800225c:	d04d      	beq.n	80022fa <xStreamBufferSend+0x19a>
 800225e:	7f23      	ldrb	r3, [r4, #28]
 8002260:	f003 0101 	and.w	r1, r3, #1
 8002264:	e7a2      	b.n	80021ac <xStreamBufferSend+0x4c>
 8002266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226a:	f383 8811 	msr	BASEPRI, r3
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	f3bf 8f4f 	dsb	sy
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002276:	e7fe      	b.n	8002276 <xStreamBufferSend+0x116>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002278:	42bd      	cmp	r5, r7
 800227a:	462a      	mov	r2, r5
 800227c:	bf28      	it	cs
 800227e:	463a      	movcs	r2, r7
 8002280:	9205      	str	r2, [sp, #20]
    if( xDataLengthBytes != ( size_t ) 0 )
 8002282:	2a00      	cmp	r2, #0
 8002284:	d099      	beq.n	80021ba <xStreamBufferSend+0x5a>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002286:	4631      	mov	r1, r6
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fee5 	bl	8002058 <prvWriteBytesToBuffer>
    return xDataLengthBytes;
 800228e:	9d05      	ldr	r5, [sp, #20]
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002290:	6060      	str	r0, [r4, #4]
    if( xReturn > ( size_t ) 0 )
 8002292:	2d00      	cmp	r5, #0
 8002294:	d092      	beq.n	80021bc <xStreamBufferSend+0x5c>
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002296:	68a2      	ldr	r2, [r4, #8]
 8002298:	6863      	ldr	r3, [r4, #4]
    xCount -= pxStreamBuffer->xTail;
 800229a:	6821      	ldr	r1, [r4, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800229c:	4413      	add	r3, r2
    xCount -= pxStreamBuffer->xTail;
 800229e:	1a5b      	subs	r3, r3, r1

    if( xCount >= pxStreamBuffer->xLength )
 80022a0:	429a      	cmp	r2, r3
    {
        xCount -= pxStreamBuffer->xLength;
 80022a2:	bf98      	it	ls
 80022a4:	1a9b      	subls	r3, r3, r2
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80022a6:	68e2      	ldr	r2, [r4, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d887      	bhi.n	80021bc <xStreamBufferSend+0x5c>
            sbSEND_COMPLETED( pxStreamBuffer );
 80022ac:	f001 f958 	bl	8003560 <vTaskSuspendAll>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	b143      	cbz	r3, 80022c6 <xStreamBufferSend+0x166>
 80022b4:	2600      	movs	r6, #0
 80022b6:	6920      	ldr	r0, [r4, #16]
 80022b8:	4633      	mov	r3, r6
 80022ba:	4632      	mov	r2, r6
 80022bc:	4631      	mov	r1, r6
 80022be:	9600      	str	r6, [sp, #0]
 80022c0:	f001 f99a 	bl	80035f8 <xTaskGenericNotify>
 80022c4:	6126      	str	r6, [r4, #16]
 80022c6:	f001 fde9 	bl	8003e9c <xTaskResumeAll>
    return xReturn;
 80022ca:	e777      	b.n	80021bc <xStreamBufferSend+0x5c>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 80022cc:	2204      	movs	r2, #4
 80022ce:	a905      	add	r1, sp, #20
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fec1 	bl	8002058 <prvWriteBytesToBuffer>
    if( xDataLengthBytes != ( size_t ) 0 )
 80022d6:	9a05      	ldr	r2, [sp, #20]
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 80022d8:	4603      	mov	r3, r0
    if( xDataLengthBytes != ( size_t ) 0 )
 80022da:	2a00      	cmp	r2, #0
 80022dc:	f43f af6d 	beq.w	80021ba <xStreamBufferSend+0x5a>
 80022e0:	e7d1      	b.n	8002286 <xStreamBufferSend+0x126>
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80022f2:	e7fe      	b.n	80022f2 <xStreamBufferSend+0x192>
                    taskEXIT_CRITICAL();
 80022f4:	f007 fcac 	bl	8009c50 <vPortExitCritical>
                    break;
 80022f8:	e7af      	b.n	800225a <xStreamBufferSend+0xfa>
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80022fa:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80022fe:	7f23      	ldrb	r3, [r4, #28]
 8002300:	f10e 3cff 	add.w	ip, lr, #4294967295	; 0xffffffff
    configASSERT( pxStreamBuffer );
 8002304:	f003 0101 	and.w	r1, r3, #1
 8002308:	e744      	b.n	8002194 <xStreamBufferSend+0x34>
 800230a:	bf00      	nop

0800230c <xStreamBufferSendFromISR>:
    configASSERT( pvTxData );
 800230c:	b369      	cbz	r1, 800236a <xStreamBufferSendFromISR+0x5e>
{
 800230e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002312:	4604      	mov	r4, r0
 8002314:	b085      	sub	sp, #20
    configASSERT( pxStreamBuffer );
 8002316:	b1f8      	cbz	r0, 8002358 <xStreamBufferSendFromISR+0x4c>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002318:	4699      	mov	r9, r3
 800231a:	7f03      	ldrb	r3, [r0, #28]
 800231c:	4688      	mov	r8, r1
 800231e:	f013 0301 	ands.w	r3, r3, #1
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002322:	bf14      	ite	ne
 8002324:	f102 0c04 	addne.w	ip, r2, #4
    size_t xRequiredSpace = xDataLengthBytes;
 8002328:	4694      	moveq	ip, r2
        xOriginalTail = pxStreamBuffer->xTail;
 800232a:	6825      	ldr	r5, [r4, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800232c:	6827      	ldr	r7, [r4, #0]
        xSpace -= pxStreamBuffer->xHead;
 800232e:	6866      	ldr	r6, [r4, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	4285      	cmp	r5, r0
 8002334:	d1f9      	bne.n	800232a <xStreamBufferSendFromISR+0x1e>
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002336:	68a0      	ldr	r0, [r4, #8]
    xSpace -= ( size_t ) 1;
 8002338:	9203      	str	r2, [sp, #12]
 800233a:	1e41      	subs	r1, r0, #1
 800233c:	4439      	add	r1, r7
 800233e:	1b89      	subs	r1, r1, r6
    if( xSpace >= pxStreamBuffer->xLength )
 8002340:	4288      	cmp	r0, r1
        xSpace -= pxStreamBuffer->xLength;
 8002342:	bf98      	it	ls
 8002344:	1a09      	subls	r1, r1, r0
    size_t xNextHead = pxStreamBuffer->xHead;
 8002346:	6860      	ldr	r0, [r4, #4]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002348:	b1c3      	cbz	r3, 800237c <xStreamBufferSendFromISR+0x70>
        if( xSpace >= xRequiredSpace )
 800234a:	458c      	cmp	ip, r1
 800234c:	d94a      	bls.n	80023e4 <xStreamBufferSendFromISR+0xd8>
    return xDataLengthBytes;
 800234e:	2500      	movs	r5, #0
}
 8002350:	4628      	mov	r0, r5
 8002352:	b005      	add	sp, #20
 8002354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002368:	e7fe      	b.n	8002368 <xStreamBufferSendFromISR+0x5c>
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
    configASSERT( pvTxData );
 800237a:	e7fe      	b.n	800237a <xStreamBufferSendFromISR+0x6e>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800237c:	428a      	cmp	r2, r1
 800237e:	bf28      	it	cs
 8002380:	460a      	movcs	r2, r1
 8002382:	9203      	str	r2, [sp, #12]
    if( xDataLengthBytes != ( size_t ) 0 )
 8002384:	2a00      	cmp	r2, #0
 8002386:	d0e2      	beq.n	800234e <xStreamBufferSendFromISR+0x42>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002388:	4603      	mov	r3, r0
 800238a:	4641      	mov	r1, r8
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fe63 	bl	8002058 <prvWriteBytesToBuffer>
    return xDataLengthBytes;
 8002392:	9d03      	ldr	r5, [sp, #12]
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002394:	6060      	str	r0, [r4, #4]
    if( xReturn > ( size_t ) 0 )
 8002396:	2d00      	cmp	r5, #0
 8002398:	d0da      	beq.n	8002350 <xStreamBufferSendFromISR+0x44>
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800239a:	68a2      	ldr	r2, [r4, #8]
 800239c:	6863      	ldr	r3, [r4, #4]
    xCount -= pxStreamBuffer->xTail;
 800239e:	6821      	ldr	r1, [r4, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80023a0:	4413      	add	r3, r2
    xCount -= pxStreamBuffer->xTail;
 80023a2:	1a5b      	subs	r3, r3, r1
    if( xCount >= pxStreamBuffer->xLength )
 80023a4:	429a      	cmp	r2, r3
        xCount -= pxStreamBuffer->xLength;
 80023a6:	bf98      	it	ls
 80023a8:	1a9b      	subls	r3, r3, r2
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80023aa:	68e2      	ldr	r2, [r4, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8cf      	bhi.n	8002350 <xStreamBufferSendFromISR+0x44>
    __asm volatile
 80023b0:	f3ef 8711 	mrs	r7, BASEPRI
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	b153      	cbz	r3, 80023de <xStreamBufferSendFromISR+0xd2>
 80023c8:	2600      	movs	r6, #0
 80023ca:	6920      	ldr	r0, [r4, #16]
 80023cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80023d0:	4633      	mov	r3, r6
 80023d2:	4632      	mov	r2, r6
 80023d4:	4631      	mov	r1, r6
 80023d6:	9600      	str	r6, [sp, #0]
 80023d8:	f001 f9be 	bl	8003758 <xTaskGenericNotifyFromISR>
 80023dc:	6126      	str	r6, [r4, #16]
    __asm volatile
 80023de:	f387 8811 	msr	BASEPRI, r7
    return xReturn;
 80023e2:	e7b5      	b.n	8002350 <xStreamBufferSendFromISR+0x44>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 80023e4:	4603      	mov	r3, r0
 80023e6:	2204      	movs	r2, #4
 80023e8:	a903      	add	r1, sp, #12
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff fe34 	bl	8002058 <prvWriteBytesToBuffer>
    if( xDataLengthBytes != ( size_t ) 0 )
 80023f0:	9a03      	ldr	r2, [sp, #12]
 80023f2:	e7c7      	b.n	8002384 <xStreamBufferSendFromISR+0x78>

080023f4 <xStreamBufferReceive>:
    configASSERT( pvRxData );
 80023f4:	b341      	cbz	r1, 8002448 <xStreamBufferReceive+0x54>
{
 80023f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023fa:	4604      	mov	r4, r0
 80023fc:	b085      	sub	sp, #20
    configASSERT( pxStreamBuffer );
 80023fe:	b1d0      	cbz	r0, 8002436 <xStreamBufferReceive+0x42>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002400:	4617      	mov	r7, r2
 8002402:	7f02      	ldrb	r2, [r0, #28]
 8002404:	460e      	mov	r6, r1
 8002406:	4699      	mov	r9, r3
        xBytesToStoreMessageLength = 0;
 8002408:	f012 0f01 	tst.w	r2, #1
 800240c:	bf14      	ite	ne
 800240e:	f04f 0804 	movne.w	r8, #4
 8002412:	f04f 0800 	moveq.w	r8, #0
    if( xTicksToWait != ( TickType_t ) 0 )
 8002416:	bb03      	cbnz	r3, 800245a <xStreamBufferReceive+0x66>
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002418:	68a3      	ldr	r3, [r4, #8]
 800241a:	6865      	ldr	r5, [r4, #4]
    xCount -= pxStreamBuffer->xTail;
 800241c:	6822      	ldr	r2, [r4, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800241e:	441d      	add	r5, r3
    xCount -= pxStreamBuffer->xTail;
 8002420:	1aad      	subs	r5, r5, r2
    if( xCount >= pxStreamBuffer->xLength )
 8002422:	42ab      	cmp	r3, r5
        xCount -= pxStreamBuffer->xLength;
 8002424:	bf98      	it	ls
 8002426:	1aed      	subls	r5, r5, r3
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002428:	4545      	cmp	r5, r8
 800242a:	d824      	bhi.n	8002476 <xStreamBufferReceive+0x82>
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800242c:	2500      	movs	r5, #0
}
 800242e:	4628      	mov	r0, r5
 8002430:	b005      	add	sp, #20
 8002432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002446:	e7fe      	b.n	8002446 <xStreamBufferReceive+0x52>
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
    configASSERT( pvRxData );
 8002458:	e7fe      	b.n	8002458 <xStreamBufferReceive+0x64>
        taskENTER_CRITICAL();
 800245a:	f007 fbe3 	bl	8009c24 <vPortEnterCritical>
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800245e:	68a3      	ldr	r3, [r4, #8]
 8002460:	6865      	ldr	r5, [r4, #4]
    xCount -= pxStreamBuffer->xTail;
 8002462:	6822      	ldr	r2, [r4, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002464:	441d      	add	r5, r3
    xCount -= pxStreamBuffer->xTail;
 8002466:	1aad      	subs	r5, r5, r2
    if( xCount >= pxStreamBuffer->xLength )
 8002468:	42ab      	cmp	r3, r5
        xCount -= pxStreamBuffer->xLength;
 800246a:	bf98      	it	ls
 800246c:	1aed      	subls	r5, r5, r3
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 800246e:	45a8      	cmp	r8, r5
 8002470:	d220      	bcs.n	80024b4 <xStreamBufferReceive+0xc0>
        taskEXIT_CRITICAL();
 8002472:	f007 fbed 	bl	8009c50 <vPortExitCritical>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002476:	7f22      	ldrb	r2, [r4, #28]
    size_t xNextTail = pxStreamBuffer->xTail;
 8002478:	6823      	ldr	r3, [r4, #0]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800247a:	07d2      	lsls	r2, r2, #31
 800247c:	d429      	bmi.n	80024d2 <xStreamBufferReceive+0xde>
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 800247e:	42bd      	cmp	r5, r7
 8002480:	bf28      	it	cs
 8002482:	463d      	movcs	r5, r7
    if( xCount != ( size_t ) 0 )
 8002484:	2d00      	cmp	r5, #0
 8002486:	d0d1      	beq.n	800242c <xStreamBufferReceive+0x38>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002488:	462a      	mov	r2, r5
 800248a:	4631      	mov	r1, r6
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fe25 	bl	80020dc <prvReadBytesFromBuffer>
 8002492:	6020      	str	r0, [r4, #0]
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 8002494:	f001 f864 	bl	8003560 <vTaskSuspendAll>
 8002498:	6963      	ldr	r3, [r4, #20]
 800249a:	b143      	cbz	r3, 80024ae <xStreamBufferReceive+0xba>
 800249c:	2600      	movs	r6, #0
 800249e:	6960      	ldr	r0, [r4, #20]
 80024a0:	4633      	mov	r3, r6
 80024a2:	4632      	mov	r2, r6
 80024a4:	4631      	mov	r1, r6
 80024a6:	9600      	str	r6, [sp, #0]
 80024a8:	f001 f8a6 	bl	80035f8 <xTaskGenericNotify>
 80024ac:	6166      	str	r6, [r4, #20]
 80024ae:	f001 fcf5 	bl	8003e9c <xTaskResumeAll>
 80024b2:	e7bc      	b.n	800242e <xStreamBufferReceive+0x3a>
                ( void ) xTaskNotifyStateClear( NULL );
 80024b4:	2100      	movs	r1, #0
 80024b6:	4608      	mov	r0, r1
 80024b8:	f001 fb88 	bl	8003bcc <xTaskGenericNotifyStateClear>
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80024bc:	6925      	ldr	r5, [r4, #16]
 80024be:	b1a5      	cbz	r5, 80024ea <xStreamBufferReceive+0xf6>
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	e7fe      	b.n	80024d0 <xStreamBufferReceive+0xdc>
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 80024d2:	2204      	movs	r2, #4
 80024d4:	a903      	add	r1, sp, #12
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff fe00 	bl	80020dc <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80024dc:	9a03      	ldr	r2, [sp, #12]
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 80024de:	4603      	mov	r3, r0
        if( xNextMessageLength > xBufferLengthBytes )
 80024e0:	4297      	cmp	r7, r2
 80024e2:	d3a3      	bcc.n	800242c <xStreamBufferReceive+0x38>
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80024e4:	3d04      	subs	r5, #4
 80024e6:	4617      	mov	r7, r2
 80024e8:	e7c9      	b.n	800247e <xStreamBufferReceive+0x8a>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80024ea:	f002 fa49 	bl	8004980 <xTaskGetCurrentTaskHandle>
 80024ee:	6120      	str	r0, [r4, #16]
        taskEXIT_CRITICAL();
 80024f0:	f007 fbae 	bl	8009c50 <vPortExitCritical>
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80024f4:	462b      	mov	r3, r5
 80024f6:	462a      	mov	r2, r5
 80024f8:	4629      	mov	r1, r5
 80024fa:	4628      	mov	r0, r5
 80024fc:	f8cd 9000 	str.w	r9, [sp]
 8002500:	f001 fa00 	bl	8003904 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8002504:	6125      	str	r5, [r4, #16]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002506:	e787      	b.n	8002418 <xStreamBufferReceive+0x24>

08002508 <xStreamBufferReceiveFromISR>:
    configASSERT( pvRxData );
 8002508:	b331      	cbz	r1, 8002558 <xStreamBufferReceiveFromISR+0x50>
{
 800250a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800250e:	4604      	mov	r4, r0
 8002510:	b084      	sub	sp, #16
    configASSERT( pxStreamBuffer );
 8002512:	b1c0      	cbz	r0, 8002546 <xStreamBufferReceiveFromISR+0x3e>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002514:	7f05      	ldrb	r5, [r0, #28]
 8002516:	4698      	mov	r8, r3
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002518:	68a3      	ldr	r3, [r4, #8]
 800251a:	4617      	mov	r7, r2
        xBytesToStoreMessageLength = 0;
 800251c:	f015 0001 	ands.w	r0, r5, #1
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002520:	6865      	ldr	r5, [r4, #4]
    xCount -= pxStreamBuffer->xTail;
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	460e      	mov	r6, r1
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002526:	441d      	add	r5, r3
    xCount -= pxStreamBuffer->xTail;
 8002528:	eba5 0502 	sub.w	r5, r5, r2
        xBytesToStoreMessageLength = 0;
 800252c:	bf14      	ite	ne
 800252e:	2204      	movne	r2, #4
 8002530:	2200      	moveq	r2, #0
    if( xCount >= pxStreamBuffer->xLength )
 8002532:	42ab      	cmp	r3, r5
        xCount -= pxStreamBuffer->xLength;
 8002534:	bf98      	it	ls
 8002536:	1aed      	subls	r5, r5, r3
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002538:	42aa      	cmp	r2, r5
 800253a:	d316      	bcc.n	800256a <xStreamBufferReceiveFromISR+0x62>
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800253c:	2500      	movs	r5, #0
}
 800253e:	4628      	mov	r0, r5
 8002540:	b004      	add	sp, #16
 8002542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002556:	e7fe      	b.n	8002556 <xStreamBufferReceiveFromISR+0x4e>
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
    configASSERT( pvRxData );
 8002568:	e7fe      	b.n	8002568 <xStreamBufferReceiveFromISR+0x60>
    size_t xNextTail = pxStreamBuffer->xTail;
 800256a:	6823      	ldr	r3, [r4, #0]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800256c:	bb20      	cbnz	r0, 80025b8 <xStreamBufferReceiveFromISR+0xb0>
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 800256e:	42bd      	cmp	r5, r7
 8002570:	bf28      	it	cs
 8002572:	463d      	movcs	r5, r7
    if( xCount != ( size_t ) 0 )
 8002574:	2d00      	cmp	r5, #0
 8002576:	d0e1      	beq.n	800253c <xStreamBufferReceiveFromISR+0x34>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002578:	4631      	mov	r1, r6
 800257a:	462a      	mov	r2, r5
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff fdad 	bl	80020dc <prvReadBytesFromBuffer>
 8002582:	6020      	str	r0, [r4, #0]
    __asm volatile
 8002584:	f3ef 8711 	mrs	r7, BASEPRI
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002598:	6963      	ldr	r3, [r4, #20]
 800259a:	b153      	cbz	r3, 80025b2 <xStreamBufferReceiveFromISR+0xaa>
 800259c:	2600      	movs	r6, #0
 800259e:	6960      	ldr	r0, [r4, #20]
 80025a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80025a4:	4633      	mov	r3, r6
 80025a6:	4632      	mov	r2, r6
 80025a8:	4631      	mov	r1, r6
 80025aa:	9600      	str	r6, [sp, #0]
 80025ac:	f001 f8d4 	bl	8003758 <xTaskGenericNotifyFromISR>
 80025b0:	6166      	str	r6, [r4, #20]
    __asm volatile
 80025b2:	f387 8811 	msr	BASEPRI, r7
    (
        "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80025b6:	e7c2      	b.n	800253e <xStreamBufferReceiveFromISR+0x36>
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 80025b8:	2204      	movs	r2, #4
 80025ba:	a903      	add	r1, sp, #12
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff fd8d 	bl	80020dc <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80025c2:	9a03      	ldr	r2, [sp, #12]
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 80025c4:	4603      	mov	r3, r0
        if( xNextMessageLength > xBufferLengthBytes )
 80025c6:	4297      	cmp	r7, r2
 80025c8:	d3b8      	bcc.n	800253c <xStreamBufferReceiveFromISR+0x34>
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80025ca:	3d04      	subs	r5, #4
 80025cc:	4617      	mov	r7, r2
 80025ce:	e7ce      	b.n	800256e <xStreamBufferReceiveFromISR+0x66>

080025d0 <vStreamBufferDelete>:
    configASSERT( pxStreamBuffer );
 80025d0:	b140      	cbz	r0, 80025e4 <vStreamBufferDelete+0x14>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 80025d2:	7f03      	ldrb	r3, [r0, #28]
 80025d4:	079b      	lsls	r3, r3, #30
 80025d6:	d401      	bmi.n	80025dc <vStreamBufferDelete+0xc>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 80025d8:	f003 ba72 	b.w	8005ac0 <vPortFree>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	2100      	movs	r1, #0
 80025e0:	f01f bc3e 	b.w	8021e60 <memset>
    __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80025f4:	e7fe      	b.n	80025f4 <vStreamBufferDelete+0x24>
 80025f6:	bf00      	nop

080025f8 <xStreamBufferIsFull>:
    configASSERT( pxStreamBuffer );
 80025f8:	b1e0      	cbz	r0, 8002634 <xStreamBufferIsFull+0x3c>
{
 80025fa:	b410      	push	{r4}
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80025fc:	7f03      	ldrb	r3, [r0, #28]
        xBytesToStoreMessageLength = 0;
 80025fe:	f013 0f01 	tst.w	r3, #1
 8002602:	bf14      	ite	ne
 8002604:	f04f 0c04 	movne.w	ip, #4
 8002608:	f04f 0c00 	moveq.w	ip, #0
        xOriginalTail = pxStreamBuffer->xTail;
 800260c:	6802      	ldr	r2, [r0, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800260e:	6804      	ldr	r4, [r0, #0]
        xSpace -= pxStreamBuffer->xHead;
 8002610:	6841      	ldr	r1, [r0, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d1f9      	bne.n	800260c <xStreamBufferIsFull+0x14>
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002618:	6882      	ldr	r2, [r0, #8]
    xSpace -= ( size_t ) 1;
 800261a:	1e53      	subs	r3, r2, #1
 800261c:	441c      	add	r4, r3
 800261e:	1a61      	subs	r1, r4, r1
}
 8002620:	f85d 4b04 	ldr.w	r4, [sp], #4
    if( xSpace >= pxStreamBuffer->xLength )
 8002624:	428a      	cmp	r2, r1
        xSpace -= pxStreamBuffer->xLength;
 8002626:	bf98      	it	ls
 8002628:	1a89      	subls	r1, r1, r2
}
 800262a:	458c      	cmp	ip, r1
 800262c:	bf34      	ite	cc
 800262e:	2000      	movcc	r0, #0
 8002630:	2001      	movcs	r0, #1
 8002632:	4770      	bx	lr
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002644:	e7fe      	b.n	8002644 <xStreamBufferIsFull+0x4c>
 8002646:	bf00      	nop

08002648 <xStreamBufferIsEmpty>:
    configASSERT( pxStreamBuffer );
 8002648:	b130      	cbz	r0, 8002658 <xStreamBufferIsEmpty+0x10>
    xTail = pxStreamBuffer->xTail;
 800264a:	6803      	ldr	r3, [r0, #0]
    if( pxStreamBuffer->xHead == xTail )
 800264c:	6840      	ldr	r0, [r0, #4]
}
 800264e:	1ac0      	subs	r0, r0, r3
 8002650:	fab0 f080 	clz	r0, r0
 8002654:	0940      	lsrs	r0, r0, #5
 8002656:	4770      	bx	lr
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002668:	e7fe      	b.n	8002668 <xStreamBufferIsEmpty+0x20>
 800266a:	bf00      	nop

0800266c <xStreamBufferReset>:
    configASSERT( pxStreamBuffer );
 800266c:	b168      	cbz	r0, 800268a <xStreamBufferReset+0x1e>
{
 800266e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002672:	4604      	mov	r4, r0
            uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002674:	6a06      	ldr	r6, [r0, #32]
    taskENTER_CRITICAL();
 8002676:	f007 fad5 	bl	8009c24 <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 800267a:	6920      	ldr	r0, [r4, #16]
 800267c:	b170      	cbz	r0, 800269c <xStreamBufferReset+0x30>
    BaseType_t xReturn = pdFAIL;
 800267e:	2500      	movs	r5, #0
    taskEXIT_CRITICAL();
 8002680:	f007 fae6 	bl	8009c50 <vPortExitCritical>
}
 8002684:	4628      	mov	r0, r5
 8002686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 800269a:	e7fe      	b.n	800269a <xStreamBufferReset+0x2e>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 800269c:	6965      	ldr	r5, [r4, #20]
 800269e:	b12d      	cbz	r5, 80026ac <xStreamBufferReset+0x40>
    BaseType_t xReturn = pdFAIL;
 80026a0:	4605      	mov	r5, r0
    taskEXIT_CRITICAL();
 80026a2:	f007 fad5 	bl	8009c50 <vPortExitCritical>
}
 80026a6:	4628      	mov	r0, r5
 80026a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80026ac:	69a7      	ldr	r7, [r4, #24]
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80026ae:	2155      	movs	r1, #85	; 0x55
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80026b0:	f8d4 8008 	ldr.w	r8, [r4, #8]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80026b4:	4638      	mov	r0, r7
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80026b6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80026ba:	4642      	mov	r2, r8
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 80026bc:	f894 901c 	ldrb.w	r9, [r4, #28]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80026c0:	f01f fbce 	bl	8021e60 <memset>
 80026c4:	4287      	cmp	r7, r0
 80026c6:	d008      	beq.n	80026da <xStreamBufferReset+0x6e>
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	e7fe      	b.n	80026d8 <xStreamBufferReset+0x6c>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80026da:	4629      	mov	r1, r5
 80026dc:	2224      	movs	r2, #36	; 0x24
 80026de:	4620      	mov	r0, r4
                xReturn = pdPASS;
 80026e0:	2501      	movs	r5, #1
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80026e2:	f01f fbbd 	bl	8021e60 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 80026e6:	61a7      	str	r7, [r4, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 80026e8:	f8c4 8008 	str.w	r8, [r4, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80026ec:	f8c4 a00c 	str.w	sl, [r4, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 80026f0:	f884 901c 	strb.w	r9, [r4, #28]
                        pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80026f4:	6226      	str	r6, [r4, #32]
 80026f6:	e7c3      	b.n	8002680 <xStreamBufferReset+0x14>

080026f8 <xStreamBufferSpacesAvailable>:
    configASSERT( pxStreamBuffer );
 80026f8:	b178      	cbz	r0, 800271a <xStreamBufferSpacesAvailable+0x22>
{
 80026fa:	b430      	push	{r4, r5}
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80026fc:	6885      	ldr	r5, [r0, #8]
        xOriginalTail = pxStreamBuffer->xTail;
 80026fe:	6803      	ldr	r3, [r0, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8002700:	6804      	ldr	r4, [r0, #0]
        xSpace -= pxStreamBuffer->xHead;
 8002702:	6841      	ldr	r1, [r0, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8002704:	6802      	ldr	r2, [r0, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d1f9      	bne.n	80026fe <xStreamBufferSpacesAvailable+0x6>
    xSpace -= ( size_t ) 1;
 800270a:	1e68      	subs	r0, r5, #1
 800270c:	4420      	add	r0, r4
 800270e:	1a40      	subs	r0, r0, r1
    if( xSpace >= pxStreamBuffer->xLength )
 8002710:	4285      	cmp	r5, r0
        xSpace -= pxStreamBuffer->xLength;
 8002712:	bf98      	it	ls
 8002714:	1b40      	subls	r0, r0, r5
}
 8002716:	bc30      	pop	{r4, r5}
 8002718:	4770      	bx	lr
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 800272a:	e7fe      	b.n	800272a <xStreamBufferSpacesAvailable+0x32>

0800272c <xStreamBufferBytesAvailable>:
    configASSERT( pxStreamBuffer );
 800272c:	b140      	cbz	r0, 8002740 <xStreamBufferBytesAvailable+0x14>
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800272e:	6882      	ldr	r2, [r0, #8]
 8002730:	6843      	ldr	r3, [r0, #4]
    xCount -= pxStreamBuffer->xTail;
 8002732:	6801      	ldr	r1, [r0, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002734:	18d0      	adds	r0, r2, r3
    xCount -= pxStreamBuffer->xTail;
 8002736:	1a40      	subs	r0, r0, r1
    if( xCount >= pxStreamBuffer->xLength )
 8002738:	4282      	cmp	r2, r0
        xCount -= pxStreamBuffer->xLength;
 800273a:	bf98      	it	ls
 800273c:	1a80      	subls	r0, r0, r2
}
 800273e:	4770      	bx	lr
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8002750:	e7fe      	b.n	8002750 <xStreamBufferBytesAvailable+0x24>
 8002752:	bf00      	nop

08002754 <xStreamBufferSetTriggerLevel>:
    configASSERT( pxStreamBuffer );
 8002754:	4603      	mov	r3, r0
 8002756:	b150      	cbz	r0, 800276e <xStreamBufferSetTriggerLevel+0x1a>
    if( xTriggerLevel == ( size_t ) 0 )
 8002758:	2901      	cmp	r1, #1
    if( xTriggerLevel < pxStreamBuffer->xLength )
 800275a:	6882      	ldr	r2, [r0, #8]
 800275c:	bf38      	it	cc
 800275e:	2101      	movcc	r1, #1
 8002760:	428a      	cmp	r2, r1
 8002762:	d902      	bls.n	800276a <xStreamBufferSetTriggerLevel+0x16>
        xReturn = pdPASS;
 8002764:	2001      	movs	r0, #1
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8002766:	60d9      	str	r1, [r3, #12]
        xReturn = pdPASS;
 8002768:	4770      	bx	lr
        xReturn = pdFALSE;
 800276a:	2000      	movs	r0, #0
}
 800276c:	4770      	bx	lr
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 800277e:	e7fe      	b.n	800277e <xStreamBufferSetTriggerLevel+0x2a>

08002780 <xStreamBufferSendCompletedFromISR>:
    configASSERT( pxStreamBuffer );
 8002780:	b1e8      	cbz	r0, 80027be <xStreamBufferSendCompletedFromISR+0x3e>
{
 8002782:	b5d0      	push	{r4, r6, r7, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	b082      	sub	sp, #8
    __asm volatile
 8002788:	f3ef 8711 	mrs	r7, BASEPRI
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 800279c:	6900      	ldr	r0, [r0, #16]
 800279e:	b150      	cbz	r0, 80027b6 <xStreamBufferSendCompletedFromISR+0x36>
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 80027a0:	2600      	movs	r6, #0
 80027a2:	6920      	ldr	r0, [r4, #16]
 80027a4:	9101      	str	r1, [sp, #4]
 80027a6:	4633      	mov	r3, r6
 80027a8:	4632      	mov	r2, r6
 80027aa:	4631      	mov	r1, r6
 80027ac:	9600      	str	r6, [sp, #0]
 80027ae:	f000 ffd3 	bl	8003758 <xTaskGenericNotifyFromISR>
            xReturn = pdTRUE;
 80027b2:	2001      	movs	r0, #1
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 80027b4:	6126      	str	r6, [r4, #16]
    __asm volatile
 80027b6:	f387 8811 	msr	BASEPRI, r7
}
 80027ba:	b002      	add	sp, #8
 80027bc:	bdd0      	pop	{r4, r6, r7, pc}
    __asm volatile
 80027be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80027ce:	e7fe      	b.n	80027ce <xStreamBufferSendCompletedFromISR+0x4e>

080027d0 <xStreamBufferReceiveCompletedFromISR>:
    configASSERT( pxStreamBuffer );
 80027d0:	b1e8      	cbz	r0, 800280e <xStreamBufferReceiveCompletedFromISR+0x3e>
{
 80027d2:	b5d0      	push	{r4, r6, r7, lr}
 80027d4:	4604      	mov	r4, r0
 80027d6:	b082      	sub	sp, #8
    __asm volatile
 80027d8:	f3ef 8711 	mrs	r7, BASEPRI
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 80027ec:	6940      	ldr	r0, [r0, #20]
 80027ee:	b150      	cbz	r0, 8002806 <xStreamBufferReceiveCompletedFromISR+0x36>
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 80027f0:	2600      	movs	r6, #0
 80027f2:	6960      	ldr	r0, [r4, #20]
 80027f4:	9101      	str	r1, [sp, #4]
 80027f6:	4633      	mov	r3, r6
 80027f8:	4632      	mov	r2, r6
 80027fa:	4631      	mov	r1, r6
 80027fc:	9600      	str	r6, [sp, #0]
 80027fe:	f000 ffab 	bl	8003758 <xTaskGenericNotifyFromISR>
            xReturn = pdTRUE;
 8002802:	2001      	movs	r0, #1
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002804:	6166      	str	r6, [r4, #20]
    __asm volatile
 8002806:	f387 8811 	msr	BASEPRI, r7
}
 800280a:	b002      	add	sp, #8
 800280c:	bdd0      	pop	{r4, r6, r7, pc}
    __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 800281e:	e7fe      	b.n	800281e <xStreamBufferReceiveCompletedFromISR+0x4e>

08002820 <xStreamBufferGenericCreate>:
        if( xIsMessageBuffer == pdTRUE )
 8002820:	2a01      	cmp	r2, #1
    {
 8002822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	4604      	mov	r4, r0
 8002828:	460e      	mov	r6, r1
        if( xIsMessageBuffer == pdTRUE )
 800282a:	d015      	beq.n	8002858 <xStreamBufferGenericCreate+0x38>
            configASSERT( xBufferSizeBytes > 0 );
 800282c:	b158      	cbz	r0, 8002846 <xStreamBufferGenericCreate+0x26>
            ucFlags = 0;
 800282e:	2500      	movs	r5, #0
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002830:	42b4      	cmp	r4, r6
 8002832:	d21c      	bcs.n	800286e <xStreamBufferGenericCreate+0x4e>
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	e7fe      	b.n	8002844 <xStreamBufferGenericCreate+0x24>
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
            configASSERT( xBufferSizeBytes > 0 );
 8002856:	e7fe      	b.n	8002856 <xStreamBufferGenericCreate+0x36>
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002858:	2804      	cmp	r0, #4
 800285a:	d824      	bhi.n	80028a6 <xStreamBufferGenericCreate+0x86>
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	e7fe      	b.n	800286c <xStreamBufferGenericCreate+0x4c>
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 800286e:	f114 0f26 	cmn.w	r4, #38	; 0x26
 8002872:	d81a      	bhi.n	80028aa <xStreamBufferGenericCreate+0x8a>
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002874:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8002878:	f003 f872 	bl	8005960 <pvPortMalloc>
        if( pucAllocatedMemory != NULL )
 800287c:	4607      	mov	r7, r0
 800287e:	b1a0      	cbz	r0, 80028aa <xStreamBufferGenericCreate+0x8a>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002880:	f100 0824 	add.w	r8, r0, #36	; 0x24
            xBufferSizeBytes++;
 8002884:	3401      	adds	r4, #1
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8002886:	2155      	movs	r1, #85	; 0x55
 8002888:	4622      	mov	r2, r4
 800288a:	4640      	mov	r0, r8
 800288c:	f01f fae8 	bl	8021e60 <memset>
 8002890:	4580      	cmp	r8, r0
 8002892:	d00e      	beq.n	80028b2 <xStreamBufferGenericCreate+0x92>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	e7fe      	b.n	80028a4 <xStreamBufferGenericCreate+0x84>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80028a6:	4615      	mov	r5, r2
 80028a8:	e7c2      	b.n	8002830 <xStreamBufferGenericCreate+0x10>
            pucAllocatedMemory = NULL;
 80028aa:	2700      	movs	r7, #0
    }
 80028ac:	4638      	mov	r0, r7
 80028ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	4638      	mov	r0, r7
 80028b8:	f01f fad2 	bl	8021e60 <memset>
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80028bc:	2e01      	cmp	r6, #1
    pxStreamBuffer->pucBuffer = pucBuffer;
 80028be:	f8c7 8018 	str.w	r8, [r7, #24]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80028c2:	bf38      	it	cc
 80028c4:	2601      	movcc	r6, #1
    pxStreamBuffer->ucFlags = ucFlags;
 80028c6:	773d      	strb	r5, [r7, #28]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80028c8:	e9c7 4602 	strd	r4, r6, [r7, #8]
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80028cc:	e7ee      	b.n	80028ac <xStreamBufferGenericCreate+0x8c>
 80028ce:	bf00      	nop

080028d0 <xStreamBufferGenericCreateStatic>:
        configASSERT( pucStreamBufferStorageArea );
 80028d0:	b1cb      	cbz	r3, 8002906 <xStreamBufferGenericCreateStatic+0x36>
    {
 80028d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d4:	b085      	sub	sp, #20
 80028d6:	460c      	mov	r4, r1
        configASSERT( pxStaticStreamBuffer );
 80028d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80028da:	b159      	cbz	r1, 80028f4 <xStreamBufferGenericCreateStatic+0x24>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80028dc:	4284      	cmp	r4, r0
 80028de:	4605      	mov	r5, r0
 80028e0:	d91a      	bls.n	8002918 <xStreamBufferGenericCreateStatic+0x48>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	e7fe      	b.n	80028f2 <xStreamBufferGenericCreateStatic+0x22>
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticStreamBuffer );
 8002904:	e7fe      	b.n	8002904 <xStreamBufferGenericCreateStatic+0x34>
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
        configASSERT( pucStreamBufferStorageArea );
 8002916:	e7fe      	b.n	8002916 <xStreamBufferGenericCreateStatic+0x46>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002918:	2a00      	cmp	r2, #0
 800291a:	bf14      	ite	ne
 800291c:	2603      	movne	r6, #3
 800291e:	2602      	moveq	r6, #2
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002920:	2804      	cmp	r0, #4
 8002922:	d90d      	bls.n	8002940 <xStreamBufferGenericCreateStatic+0x70>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	9203      	str	r2, [sp, #12]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002928:	9f03      	ldr	r7, [sp, #12]
 800292a:	4297      	cmp	r7, r2
 800292c:	d011      	beq.n	8002952 <xStreamBufferGenericCreateStatic+0x82>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	e7fe      	b.n	800293e <xStreamBufferGenericCreateStatic+0x6e>
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002950:	e7fe      	b.n	8002950 <xStreamBufferGenericCreateStatic+0x80>
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8002952:	4602      	mov	r2, r0
 8002954:	2155      	movs	r1, #85	; 0x55
 8002956:	4618      	mov	r0, r3
 8002958:	f01f fa82 	bl	8021e60 <memset>
 800295c:	4280      	cmp	r0, r0
 800295e:	d008      	beq.n	8002972 <xStreamBufferGenericCreateStatic+0xa2>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	e7fe      	b.n	8002970 <xStreamBufferGenericCreateStatic+0xa0>
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8002972:	463a      	mov	r2, r7
 8002974:	9001      	str	r0, [sp, #4]
 8002976:	2100      	movs	r1, #0
 8002978:	980a      	ldr	r0, [sp, #40]	; 0x28
 800297a:	f01f fa71 	bl	8021e60 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800297e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8002980:	2c01      	cmp	r4, #1
    pxStreamBuffer->pucBuffer = pucBuffer;
 8002982:	9b01      	ldr	r3, [sp, #4]
    }
 8002984:	4610      	mov	r0, r2
    pxStreamBuffer->ucFlags = ucFlags;
 8002986:	7716      	strb	r6, [r2, #28]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8002988:	bf38      	it	cc
 800298a:	2401      	movcc	r4, #1
    pxStreamBuffer->pucBuffer = pucBuffer;
 800298c:	6193      	str	r3, [r2, #24]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800298e:	e9c2 5402 	strd	r5, r4, [r2, #8]
    }
 8002992:	b005      	add	sp, #20
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002996:	bf00      	nop

08002998 <xStreamBufferNextMessageLengthBytes>:
    configASSERT( pxStreamBuffer );
 8002998:	b1c8      	cbz	r0, 80029ce <xStreamBufferNextMessageLengthBytes+0x36>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800299a:	7f03      	ldrb	r3, [r0, #28]
 800299c:	f013 0301 	ands.w	r3, r3, #1
 80029a0:	d013      	beq.n	80029ca <xStreamBufferNextMessageLengthBytes+0x32>
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80029a2:	6882      	ldr	r2, [r0, #8]
 80029a4:	6843      	ldr	r3, [r0, #4]
    xCount -= pxStreamBuffer->xTail;
 80029a6:	6801      	ldr	r1, [r0, #0]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80029a8:	4413      	add	r3, r2
    xCount -= pxStreamBuffer->xTail;
 80029aa:	1a5b      	subs	r3, r3, r1
    if( xCount >= pxStreamBuffer->xLength )
 80029ac:	429a      	cmp	r2, r3
        xCount -= pxStreamBuffer->xLength;
 80029ae:	bf98      	it	ls
 80029b0:	1a9b      	subls	r3, r3, r2
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d814      	bhi.n	80029e0 <xStreamBufferNextMessageLengthBytes+0x48>
            configASSERT( xBytesAvailable == 0 );
 80029b6:	b143      	cbz	r3, 80029ca <xStreamBufferNextMessageLengthBytes+0x32>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	e7fe      	b.n	80029c8 <xStreamBufferNextMessageLengthBytes+0x30>
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	4770      	bx	lr
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80029de:	e7fe      	b.n	80029de <xStreamBufferNextMessageLengthBytes+0x46>
{
 80029e0:	b500      	push	{lr}
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 80029e2:	2204      	movs	r2, #4
{
 80029e4:	b083      	sub	sp, #12
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 80029e6:	6803      	ldr	r3, [r0, #0]
 80029e8:	eb0d 0102 	add.w	r1, sp, r2
 80029ec:	f7ff fb76 	bl	80020dc <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 80029f0:	9b01      	ldr	r3, [sp, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	b003      	add	sp, #12
 80029f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029fa:	bf00      	nop

080029fc <vStreamBufferSetStreamBufferNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,
                                             UBaseType_t uxStreamBufferNumber )
    {
        xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80029fc:	6201      	str	r1, [r0, #32]
    }
 80029fe:	4770      	bx	lr

08002a00 <uxStreamBufferGetStreamBufferNumber>:
    }
 8002a00:	6a00      	ldr	r0, [r0, #32]
 8002a02:	4770      	bx	lr

08002a04 <ucStreamBufferGetStreamBufferType>:

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
    {
        return( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 8002a04:	7f00      	ldrb	r0, [r0, #28]
    }
 8002a06:	f000 0001 	and.w	r0, r0, #1
 8002a0a:	4770      	bx	lr

08002a0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a0e:	4c1d      	ldr	r4, [pc, #116]	; (8002a84 <prvAddCurrentTaskToDelayedList+0x78>)
{
 8002a10:	4605      	mov	r5, r0
 8002a12:	460f      	mov	r7, r1
    const TickType_t xConstTickCount = xTickCount;
 8002a14:	6826      	ldr	r6, [r4, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8002a1c:	f7fd fedc 	bl	80007d8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a20:	1c6b      	adds	r3, r5, #1
 8002a22:	d118      	bne.n	8002a56 <prvAddCurrentTaskToDelayedList+0x4a>
 8002a24:	b1bf      	cbz	r7, 8002a56 <prvAddCurrentTaskToDelayedList+0x4a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	6860      	ldr	r0, [r4, #4]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	6862      	ldr	r2, [r4, #4]
 8002a2e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8002a32:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	689d      	ldr	r5, [r3, #8]
 8002a3a:	3184      	adds	r1, #132	; 0x84
 8002a3c:	6862      	ldr	r2, [r4, #4]
 8002a3e:	6860      	ldr	r0, [r4, #4]
 8002a40:	6069      	str	r1, [r5, #4]
 8002a42:	3284      	adds	r2, #132	; 0x84
 8002a44:	68a1      	ldr	r1, [r4, #8]
 8002a46:	f104 0508 	add.w	r5, r4, #8
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	3101      	adds	r1, #1
 8002a4e:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
 8002a52:	60a1      	str	r1, [r4, #8]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002a56:	1975      	adds	r5, r6, r5
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a58:	6863      	ldr	r3, [r4, #4]
 8002a5a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 8002a5e:	d306      	bcc.n	8002a6e <prvAddCurrentTaskToDelayedList+0x62>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a60:	69e0      	ldr	r0, [r4, #28]
 8002a62:	6861      	ldr	r1, [r4, #4]
}
 8002a64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a68:	3184      	adds	r1, #132	; 0x84
 8002a6a:	f7fd be8d 	b.w	8000788 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a6e:	6a20      	ldr	r0, [r4, #32]
 8002a70:	6861      	ldr	r1, [r4, #4]
 8002a72:	3184      	adds	r1, #132	; 0x84
 8002a74:	f7fd fe88 	bl	8000788 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	d9ea      	bls.n	8002a54 <prvAddCurrentTaskToDelayedList+0x48>
                        xNextTaskUnblockTime = xTimeToWake;
 8002a7e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	24000040 	.word	0x24000040

08002a88 <prvInitialiseNewTask>:
{
 8002a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a8e:	ea4f 0882 	mov.w	r8, r2, lsl #2
{
 8002a92:	4689      	mov	r9, r1
 8002a94:	461f      	mov	r7, r3
        uxPriority &= ~portPRIVILEGE_BIT;
 8002a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8002a98:	4615      	mov	r5, r2
 8002a9a:	4606      	mov	r6, r0
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a9c:	21a5      	movs	r1, #165	; 0xa5
 8002a9e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8002aa2:	4642      	mov	r2, r8
        uxPriority &= ~portPRIVILEGE_BIT;
 8002aa4:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002aa8:	f01f f9da 	bl	8021e60 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aac:	f8d4 a0b0 	ldr.w	sl, [r4, #176]	; 0xb0
    if( pcName != NULL )
 8002ab0:	f1b9 0f00 	cmp.w	r9, #0
 8002ab4:	f000 80cb 	beq.w	8002c4e <prvInitialiseNewTask+0x1c6>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ab8:	f899 3000 	ldrb.w	r3, [r9]
 8002abc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
            if( pcName[ x ] == ( char ) 0x00 )
 8002ac0:	f899 3000 	ldrb.w	r3, [r9]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d06a      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002acc:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
            if( pcName[ x ] == ( char ) 0x00 )
 8002ad0:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d062      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad8:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002adc:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
            if( pcName[ x ] == ( char ) 0x00 )
 8002ae0:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05a      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ae8:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002aec:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
            if( pcName[ x ] == ( char ) 0x00 )
 8002af0:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d052      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002af8:	f899 3004 	ldrb.w	r3, [r9, #4]
 8002afc:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( pcName[ x ] == ( char ) 0x00 )
 8002b00:	f899 3004 	ldrb.w	r3, [r9, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d04a      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b08:	f899 3005 	ldrb.w	r3, [r9, #5]
 8002b0c:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
            if( pcName[ x ] == ( char ) 0x00 )
 8002b10:	f899 3005 	ldrb.w	r3, [r9, #5]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d042      	beq.n	8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b18:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002b1c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
            if( pcName[ x ] == ( char ) 0x00 )
 8002b20:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002b24:	b3db      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b26:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002b2a:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
            if( pcName[ x ] == ( char ) 0x00 )
 8002b2e:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002b32:	b3a3      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b34:	f899 3008 	ldrb.w	r3, [r9, #8]
 8002b38:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
            if( pcName[ x ] == ( char ) 0x00 )
 8002b3c:	f899 3008 	ldrb.w	r3, [r9, #8]
 8002b40:	b36b      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b42:	f899 3009 	ldrb.w	r3, [r9, #9]
 8002b46:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
            if( pcName[ x ] == ( char ) 0x00 )
 8002b4a:	f899 3009 	ldrb.w	r3, [r9, #9]
 8002b4e:	b333      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b50:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002b54:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
            if( pcName[ x ] == ( char ) 0x00 )
 8002b58:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002b5c:	b1fb      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b5e:	f899 300b 	ldrb.w	r3, [r9, #11]
 8002b62:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
            if( pcName[ x ] == ( char ) 0x00 )
 8002b66:	f899 300b 	ldrb.w	r3, [r9, #11]
 8002b6a:	b1c3      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b6c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8002b70:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
            if( pcName[ x ] == ( char ) 0x00 )
 8002b74:	f899 300c 	ldrb.w	r3, [r9, #12]
 8002b78:	b18b      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b7a:	f899 300d 	ldrb.w	r3, [r9, #13]
 8002b7e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            if( pcName[ x ] == ( char ) 0x00 )
 8002b82:	f899 300d 	ldrb.w	r3, [r9, #13]
 8002b86:	b153      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b88:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002b8c:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            if( pcName[ x ] == ( char ) 0x00 )
 8002b90:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002b94:	b11b      	cbz	r3, 8002b9e <prvInitialiseNewTask+0x116>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b96:	f899 300f 	ldrb.w	r3, [r9, #15]
 8002b9a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ba4:	f1bb 0f37 	cmp.w	fp, #55	; 0x37
 8002ba8:	d908      	bls.n	8002bbc <prvInitialiseNewTask+0x134>
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	e7fe      	b.n	8002bba <prvInitialiseNewTask+0x132>
            pxNewTCB->uxMutexesHeld = 0;
 8002bbc:	f04f 0900 	mov.w	r9, #0
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bc0:	f104 0084 	add.w	r0, r4, #132	; 0x84
    pxNewTCB->uxPriority = uxPriority;
 8002bc4:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bc8:	f1a8 0804 	sub.w	r8, r8, #4
            pxNewTCB->uxBasePriority = uxPriority;
 8002bcc:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
            pxNewTCB->uxMutexesHeld = 0;
 8002bd0:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bd4:	44d0      	add	r8, sl
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd6:	f7fd fdd3 	bl	8000780 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bda:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8002bde:	f7fd fdcf 	bl	8000780 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be2:	f1cb 0338 	rsb	r3, fp, #56	; 0x38
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8002be6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002bea:	1d20      	adds	r0, r4, #4
 8002bec:	990d      	ldr	r1, [sp, #52]	; 0x34
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8002bf2:	462b      	mov	r3, r5
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bf4:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002bf8:	4d16      	ldr	r5, [pc, #88]	; (8002c54 <prvInitialiseNewTask+0x1cc>)
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bfa:	f8c4 40a4 	str.w	r4, [r4, #164]	; 0xa4
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8002bfe:	f002 fc7b 	bl	80054f8 <vPortStoreTaskMPUSettings>
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c02:	4649      	mov	r1, r9
 8002c04:	2260      	movs	r2, #96	; 0x60
 8002c06:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c0a:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8002c0e:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8002c12:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c16:	f8a4 9140 	strh.w	r9, [r4, #320]	; 0x140
 8002c1a:	f884 9142 	strb.w	r9, [r4, #322]	; 0x142
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c1e:	f01f f91f 	bl	8021e60 <memset>
 8002c22:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8002c26:	4d0c      	ldr	r5, [pc, #48]	; (8002c58 <prvInitialiseNewTask+0x1d0>)
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8002c28:	463a      	mov	r2, r7
 8002c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c2c:	4631      	mov	r1, r6
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c2e:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8002c32:	f028 0007 	bic.w	r0, r8, #7
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c36:	4d09      	ldr	r5, [pc, #36]	; (8002c5c <prvInitialiseNewTask+0x1d4>)
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8002c38:	0fdb      	lsrs	r3, r3, #31
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c3a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8002c3e:	f002 fc2f 	bl	80054a0 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8002c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8002c44:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8002c46:	b103      	cbz	r3, 8002c4a <prvInitialiseNewTask+0x1c2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c48:	601c      	str	r4, [r3, #0]
}
 8002c4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c4e:	f884 90b4 	strb.w	r9, [r4, #180]	; 0xb4
 8002c52:	e7a7      	b.n	8002ba4 <prvInitialiseNewTask+0x11c>
 8002c54:	2400af44 	.word	0x2400af44
 8002c58:	2400af64 	.word	0x2400af64
 8002c5c:	2400af24 	.word	0x2400af24

08002c60 <prvAddNewTaskToReadyList>:
{
 8002c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        uxCurrentNumberOfTasks++;
 8002c64:	4d3f      	ldr	r5, [pc, #252]	; (8002d64 <prvAddNewTaskToReadyList+0x104>)
{
 8002c66:	4606      	mov	r6, r0
    taskENTER_CRITICAL();
 8002c68:	f006 ffdc 	bl	8009c24 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8002c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002c6e:	3301      	adds	r3, #1
 8002c70:	62ab      	str	r3, [r5, #40]	; 0x28
        if( pxCurrentTCB == NULL )
 8002c72:	686b      	ldr	r3, [r5, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d04d      	beq.n	8002d14 <prvAddNewTaskToReadyList+0xb4>
            if( xSchedulerRunning == pdFALSE )
 8002c78:	f8d5 34dc 	ldr.w	r3, [r5, #1244]	; 0x4dc
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03e      	beq.n	8002cfe <prvAddNewTaskToReadyList+0x9e>
        prvAddTaskToReadyList( pxNewTCB );
 8002c80:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002c84:	f105 072c 	add.w	r7, r5, #44	; 0x2c
        uxTaskNumber++;
 8002c88:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 8002c8c:	3201      	adds	r2, #1
 8002c8e:	f8c5 24e0 	str.w	r2, [r5, #1248]	; 0x4e0
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c92:	f8c6 20c4 	str.w	r2, [r6, #196]	; 0xc4
        prvAddTaskToReadyList( pxNewTCB );
 8002c96:	f8d5 24e4 	ldr.w	r2, [r5, #1252]	; 0x4e4
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d201      	bcs.n	8002ca2 <prvAddNewTaskToReadyList+0x42>
 8002c9e:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 8002ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ca6:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8002caa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002cae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002cb0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002cb2:	6891      	ldr	r1, [r2, #8]
 8002cb4:	3701      	adds	r7, #1
 8002cb6:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8002cba:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
 8002cbe:	f106 0184 	add.w	r1, r6, #132	; 0x84
 8002cc2:	6894      	ldr	r4, [r2, #8]
 8002cc4:	6061      	str	r1, [r4, #4]
 8002cc6:	6091      	str	r1, [r2, #8]
 8002cc8:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 8002ccc:	62c7      	str	r7, [r0, #44]	; 0x2c
    taskEXIT_CRITICAL();
 8002cce:	f006 ffbf 	bl	8009c50 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8002cd2:	f8d5 34dc 	ldr.w	r3, [r5, #1244]	; 0x4dc
 8002cd6:	b183      	cbz	r3, 8002cfa <prvAddNewTaskToReadyList+0x9a>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cd8:	686a      	ldr	r2, [r5, #4]
 8002cda:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002cde:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d209      	bcs.n	8002cfa <prvAddNewTaskToReadyList+0x9a>
            taskYIELD_IF_USING_PREEMPTION();
 8002ce6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	f3bf 8f6f 	isb	sy
}
 8002cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cfe:	686a      	ldr	r2, [r5, #4]
 8002d00:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8002d04:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002d08:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8bb      	bhi.n	8002c88 <prvAddNewTaskToReadyList+0x28>
                    pxCurrentTCB = pxNewTCB;
 8002d10:	606e      	str	r6, [r5, #4]
 8002d12:	e7b9      	b.n	8002c88 <prvAddNewTaskToReadyList+0x28>
            pxCurrentTCB = pxNewTCB;
 8002d14:	606e      	str	r6, [r5, #4]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d16:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1b1      	bne.n	8002c80 <prvAddNewTaskToReadyList+0x20>
 8002d1c:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8002d20:	f205 488c 	addw	r8, r5, #1164	; 0x48c
 8002d24:	463c      	mov	r4, r7
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d26:	4620      	mov	r0, r4
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d28:	3414      	adds	r4, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d2a:	f7fd fd1d 	bl	8000768 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d2e:	45a0      	cmp	r8, r4
 8002d30:	d1f9      	bne.n	8002d26 <prvAddNewTaskToReadyList+0xc6>
    vListInitialise( &xDelayedTaskList2 );
 8002d32:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <prvAddNewTaskToReadyList+0x108>)
    vListInitialise( &xDelayedTaskList1 );
 8002d34:	480d      	ldr	r0, [pc, #52]	; (8002d6c <prvAddNewTaskToReadyList+0x10c>)
 8002d36:	f7fd fd17 	bl	8000768 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7fd fd14 	bl	8000768 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d40:	f104 0014 	add.w	r0, r4, #20
 8002d44:	f7fd fd10 	bl	8000768 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8002d48:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8002d4c:	f7fd fd0c 	bl	8000768 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8002d50:	f5a4 6093 	sub.w	r0, r4, #1176	; 0x498
 8002d54:	f7fd fd08 	bl	8000768 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d58:	f8c5 8020 	str.w	r8, [r5, #32]
        prvAddTaskToReadyList( pxNewTCB );
 8002d5c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d60:	61ec      	str	r4, [r5, #28]
}
 8002d62:	e791      	b.n	8002c88 <prvAddNewTaskToReadyList+0x28>
 8002d64:	24000040 	.word	0x24000040
 8002d68:	240004e0 	.word	0x240004e0
 8002d6c:	240004cc 	.word	0x240004cc

08002d70 <prvIdleTask>:
{
 8002d70:	4c1f      	ldr	r4, [pc, #124]	; (8002df0 <prvIdleTask+0x80>)
 8002d72:	b508      	push	{r3, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d74:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002d78:	b38b      	cbz	r3, 8002dde <prvIdleTask+0x6e>
                taskENTER_CRITICAL();
 8002d7a:	f006 ff53 	bl	8009c24 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d7e:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 8002d82:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d84:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8002d88:	f7fd fd26 	bl	80007d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	62a3      	str	r3, [r4, #40]	; 0x28
                    --uxDeletedTasksWaitingCleanUp;
 8002d92:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002d96:	3b01      	subs	r3, #1
 8002d98:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
                taskEXIT_CRITICAL();
 8002d9c:	f006 ff58 	bl	8009c50 <vPortExitCritical>
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002da0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 8002da4:	f01f fd34 	bl	8022810 <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002da8:	f895 3143 	ldrb.w	r3, [r5, #323]	; 0x143
 8002dac:	b163      	cbz	r3, 8002dc8 <prvIdleTask+0x58>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d01a      	beq.n	8002de8 <prvIdleTask+0x78>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d0de      	beq.n	8002d74 <prvIdleTask+0x4>
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	e7fe      	b.n	8002dc6 <prvIdleTask+0x56>
                    vPortFreeStack( pxTCB->pxStack );
 8002dc8:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8002dcc:	f002 fe78 	bl	8005ac0 <vPortFree>
                    vPortFree( pxTCB );
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f002 fe75 	bl	8005ac0 <vPortFree>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dd6:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cd      	bne.n	8002d7a <prvIdleTask+0xa>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d9c7      	bls.n	8002d74 <prvIdleTask+0x4>
                    taskYIELD();
 8002de4:	df01      	svc	1
 8002de6:	e7c5      	b.n	8002d74 <prvIdleTask+0x4>
                    vPortFree( pxTCB );
 8002de8:	4628      	mov	r0, r5
 8002dea:	f002 fe69 	bl	8005ac0 <vPortFree>
 8002dee:	e7c1      	b.n	8002d74 <prvIdleTask+0x4>
 8002df0:	24000040 	.word	0x24000040

08002df4 <xTaskCreate>:
    {
 8002df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002df8:	4607      	mov	r7, r0
 8002dfa:	b085      	sub	sp, #20
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dfc:	0090      	lsls	r0, r2, #2
    {
 8002dfe:	4615      	mov	r5, r2
 8002e00:	4688      	mov	r8, r1
 8002e02:	4699      	mov	r9, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e04:	f002 fdac 	bl	8005960 <pvPortMalloc>
                if( pxStack != NULL )
 8002e08:	b1f0      	cbz	r0, 8002e48 <xTaskCreate+0x54>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8002e10:	f002 fda6 	bl	8005960 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8002e14:	4606      	mov	r6, r0
 8002e16:	b1e0      	cbz	r0, 8002e52 <xTaskCreate+0x5e>
                        pxNewTCB->pxStack = pxStack;
 8002e18:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e1c:	2400      	movs	r4, #0
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e1e:	464b      	mov	r3, r9
 8002e20:	462a      	mov	r2, r5
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e22:	f886 4143 	strb.w	r4, [r6, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e26:	4641      	mov	r1, r8
 8002e28:	4638      	mov	r0, r7
 8002e2a:	e9cd 6402 	strd	r6, r4, [sp, #8]
 8002e2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002e30:	9401      	str	r4, [sp, #4]
 8002e32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002e34:	9400      	str	r4, [sp, #0]
 8002e36:	f7ff fe27 	bl	8002a88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ff10 	bl	8002c60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e40:	2001      	movs	r0, #1
    }
 8002e42:	b005      	add	sp, #20
 8002e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 8002e4c:	b005      	add	sp, #20
 8002e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        vPortFreeStack( pxStack );
 8002e52:	4620      	mov	r0, r4
 8002e54:	f002 fe34 	bl	8005ac0 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e5c:	e7f1      	b.n	8002e42 <xTaskCreate+0x4e>
 8002e5e:	bf00      	nop

08002e60 <xTaskCreateStatic>:
    {
 8002e60:	b530      	push	{r4, r5, lr}
 8002e62:	b087      	sub	sp, #28
 8002e64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        configASSERT( puxStackBuffer != NULL );
 8002e66:	b1d4      	cbz	r4, 8002e9e <xTaskCreateStatic+0x3e>
        configASSERT( pxTaskBuffer != NULL );
 8002e68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e6a:	b17d      	cbz	r5, 8002e8c <xTaskCreateStatic+0x2c>
                volatile size_t xSize = sizeof( StaticTask_t );
 8002e6c:	f44f 75a2 	mov.w	r5, #324	; 0x144
 8002e70:	9505      	str	r5, [sp, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 8002e72:	9d05      	ldr	r5, [sp, #20]
 8002e74:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
 8002e78:	d01a      	beq.n	8002eb0 <xTaskCreateStatic+0x50>
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	e7fe      	b.n	8002e8a <xTaskCreateStatic+0x2a>
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8002e9c:	e7fe      	b.n	8002e9c <xTaskCreateStatic+0x3c>
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 8002eae:	e7fe      	b.n	8002eae <xTaskCreateStatic+0x4e>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002eb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002eb2:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002eb6:	2402      	movs	r4, #2
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002eb8:	9502      	str	r5, [sp, #8]
 8002eba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002ebc:	9500      	str	r5, [sp, #0]
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ec0:	f885 4143 	strb.w	r4, [r5, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ec4:	2400      	movs	r4, #0
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ec6:	9d05      	ldr	r5, [sp, #20]
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ec8:	9403      	str	r4, [sp, #12]
 8002eca:	ac04      	add	r4, sp, #16
 8002ecc:	9401      	str	r4, [sp, #4]
 8002ece:	f7ff fddb 	bl	8002a88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ed4:	f7ff fec4 	bl	8002c60 <prvAddNewTaskToReadyList>
    }
 8002ed8:	9804      	ldr	r0, [sp, #16]
 8002eda:	b007      	add	sp, #28
 8002edc:	bd30      	pop	{r4, r5, pc}
 8002ede:	bf00      	nop

08002ee0 <xTaskCreateRestricted>:
        configASSERT( pxTaskDefinition->puxStackBuffer );
 8002ee0:	6943      	ldr	r3, [r0, #20]
 8002ee2:	b333      	cbz	r3, 8002f32 <xTaskCreateRestricted+0x52>
    {
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	b085      	sub	sp, #20
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002eea:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8002eee:	460d      	mov	r5, r1
 8002ef0:	f002 fd36 	bl	8005960 <pvPortMalloc>
            if( pxNewTCB != NULL )
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	b1c0      	cbz	r0, 8002f2a <xTaskCreateRestricted+0x4a>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8002ef8:	6963      	ldr	r3, [r4, #20]
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 8002efa:	2701      	movs	r7, #1
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8002efc:	4622      	mov	r2, r4
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 8002efe:	f880 7143 	strb.w	r7, [r0, #323]	; 0x143
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8002f02:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8002f06:	9501      	str	r5, [sp, #4]
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	9002      	str	r0, [sp, #8]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	f852 0b18 	ldr.w	r0, [r2], #24
 8002f12:	68e3      	ldr	r3, [r4, #12]
 8002f14:	9203      	str	r2, [sp, #12]
 8002f16:	8922      	ldrh	r2, [r4, #8]
 8002f18:	6861      	ldr	r1, [r4, #4]
 8002f1a:	f7ff fdb5 	bl	8002a88 <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f7ff fe9e 	bl	8002c60 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 8002f24:	4638      	mov	r0, r7
    }
 8002f26:	b005      	add	sp, #20
 8002f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 8002f2e:	b005      	add	sp, #20
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->puxStackBuffer );
 8002f42:	e7fe      	b.n	8002f42 <xTaskCreateRestricted+0x62>

08002f44 <xTaskCreateRestrictedStatic>:
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 8002f44:	6943      	ldr	r3, [r0, #20]
 8002f46:	b343      	cbz	r3, 8002f9a <xTaskCreateRestrictedStatic+0x56>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 8002f48:	4684      	mov	ip, r0
    {
 8002f4a:	b510      	push	{r4, lr}
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 8002f4c:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
    {
 8002f50:	b084      	sub	sp, #16
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 8002f52:	b1cc      	cbz	r4, 8002f88 <xTaskCreateRestrictedStatic+0x44>
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8002f54:	4602      	mov	r2, r0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f56:	2002      	movs	r0, #2
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8002f58:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f5c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8002f60:	9101      	str	r1, [sp, #4]
 8002f62:	e9dc 3103 	ldrd	r3, r1, [ip, #12]
 8002f66:	9402      	str	r4, [sp, #8]
 8002f68:	9100      	str	r1, [sp, #0]
 8002f6a:	f852 0b18 	ldr.w	r0, [r2], #24
 8002f6e:	9203      	str	r2, [sp, #12]
 8002f70:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002f74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002f78:	f7ff fd86 	bl	8002a88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff fe6f 	bl	8002c60 <prvAddNewTaskToReadyList>
    }
 8002f82:	2001      	movs	r0, #1
 8002f84:	b004      	add	sp, #16
 8002f86:	bd10      	pop	{r4, pc}
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 8002f98:	e7fe      	b.n	8002f98 <xTaskCreateRestrictedStatic+0x54>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 8002faa:	e7fe      	b.n	8002faa <xTaskCreateRestrictedStatic+0x66>

08002fac <vTaskAllocateMPURegions>:
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 8002fac:	b120      	cbz	r0, 8002fb8 <vTaskAllocateMPURegions+0xc>
        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 8002fae:	2300      	movs	r3, #0
 8002fb0:	3004      	adds	r0, #4
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f002 baa0 	b.w	80054f8 <vPortStoreTaskMPUSettings>
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <vTaskAllocateMPURegions+0x1c>)
 8002fba:	6858      	ldr	r0, [r3, #4]
        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	3004      	adds	r0, #4
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f002 ba99 	b.w	80054f8 <vPortStoreTaskMPUSettings>
 8002fc6:	bf00      	nop
 8002fc8:	24000040 	.word	0x24000040

08002fcc <vTaskDelete>:
    {
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4604      	mov	r4, r0
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002fd0:	4d3c      	ldr	r5, [pc, #240]	; (80030c4 <vTaskDelete+0xf8>)
        taskENTER_CRITICAL();
 8002fd2:	f006 fe27 	bl	8009c24 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002fd6:	2c00      	cmp	r4, #0
 8002fd8:	d045      	beq.n	8003066 <vTaskDelete+0x9a>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fda:	f104 0684 	add.w	r6, r4, #132	; 0x84
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f7fd fbfa 	bl	80007d8 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002fe8:	b11b      	cbz	r3, 8002ff2 <vTaskDelete+0x26>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fea:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8002fee:	f7fd fbf3 	bl	80007d8 <uxListRemove>
            uxTaskNumber++;
 8002ff2:	f8d5 34e0 	ldr.w	r3, [r5, #1248]	; 0x4e0
            if( pxTCB == pxCurrentTCB )
 8002ff6:	686a      	ldr	r2, [r5, #4]
            uxTaskNumber++;
 8002ff8:	3301      	adds	r3, #1
            if( pxTCB == pxCurrentTCB )
 8002ffa:	42a2      	cmp	r2, r4
            uxTaskNumber++;
 8002ffc:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
            if( pxTCB == pxCurrentTCB )
 8003000:	d047      	beq.n	8003092 <vTaskDelete+0xc6>
                --uxCurrentNumberOfTasks;
 8003002:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	62ab      	str	r3, [r5, #40]	; 0x28
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003008:	6a2b      	ldr	r3, [r5, #32]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b1e3      	cbz	r3, 8003048 <vTaskDelete+0x7c>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800300e:	6a2b      	ldr	r3, [r5, #32]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	626b      	str	r3, [r5, #36]	; 0x24
        taskEXIT_CRITICAL();
 8003016:	f006 fe1b 	bl	8009c50 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 800301a:	686b      	ldr	r3, [r5, #4]
 800301c:	42a3      	cmp	r3, r4
 800301e:	d01b      	beq.n	8003058 <vTaskDelete+0x8c>
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003020:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 8003024:	f01f fbf4 	bl	8022810 <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003028:	f894 3143 	ldrb.w	r3, [r4, #323]	; 0x143
 800302c:	b34b      	cbz	r3, 8003082 <vTaskDelete+0xb6>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800302e:	2b01      	cmp	r3, #1
 8003030:	d039      	beq.n	80030a6 <vTaskDelete+0xda>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003032:	2b02      	cmp	r3, #2
 8003034:	d010      	beq.n	8003058 <vTaskDelete+0x8c>
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	e7fe      	b.n	8003046 <vTaskDelete+0x7a>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800304c:	626b      	str	r3, [r5, #36]	; 0x24
        taskEXIT_CRITICAL();
 800304e:	f006 fdff 	bl	8009c50 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8003052:	686b      	ldr	r3, [r5, #4]
 8003054:	42a3      	cmp	r3, r4
 8003056:	d1e3      	bne.n	8003020 <vTaskDelete+0x54>
        if( xSchedulerRunning != pdFALSE )
 8003058:	f8d5 34dc 	ldr.w	r3, [r5, #1244]	; 0x4dc
 800305c:	b113      	cbz	r3, 8003064 <vTaskDelete+0x98>
            if( pxTCB == pxCurrentTCB )
 800305e:	686b      	ldr	r3, [r5, #4]
 8003060:	42a3      	cmp	r3, r4
 8003062:	d002      	beq.n	800306a <vTaskDelete+0x9e>
    }
 8003064:	bd70      	pop	{r4, r5, r6, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003066:	686c      	ldr	r4, [r5, #4]
 8003068:	e7b7      	b.n	8002fda <vTaskDelete+0xe>
                configASSERT( uxSchedulerSuspended == 0 );
 800306a:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 800306e:	b1f3      	cbz	r3, 80030ae <vTaskDelete+0xe2>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	e7fe      	b.n	8003080 <vTaskDelete+0xb4>
                    vPortFreeStack( pxTCB->pxStack );
 8003082:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8003086:	f002 fd1b 	bl	8005ac0 <vPortFree>
                    vPortFree( pxTCB );
 800308a:	4620      	mov	r0, r4
 800308c:	f002 fd18 	bl	8005ac0 <vPortFree>
 8003090:	e7e2      	b.n	8003058 <vTaskDelete+0x8c>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003092:	4631      	mov	r1, r6
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <vTaskDelete+0xfc>)
 8003096:	f7fd fb8f 	bl	80007b8 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 800309a:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c5 34e8 	str.w	r3, [r5, #1256]	; 0x4e8
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 80030a4:	e7b7      	b.n	8003016 <vTaskDelete+0x4a>
                    vPortFree( pxTCB );
 80030a6:	4620      	mov	r0, r4
 80030a8:	f002 fd0a 	bl	8005ac0 <vPortFree>
 80030ac:	e7d4      	b.n	8003058 <vTaskDelete+0x8c>
                portYIELD_WITHIN_API();
 80030ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
    }
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	24000040 	.word	0x24000040
 80030c8:	24000508 	.word	0x24000508

080030cc <uxTaskPriorityGet>:
    {
 80030cc:	b510      	push	{r4, lr}
 80030ce:	4604      	mov	r4, r0
 80030d0:	b082      	sub	sp, #8
        taskENTER_CRITICAL();
 80030d2:	f006 fda7 	bl	8009c24 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80030d6:	b13c      	cbz	r4, 80030e8 <uxTaskPriorityGet+0x1c>
            uxReturn = pxTCB->uxPriority;
 80030d8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80030dc:	9001      	str	r0, [sp, #4]
        taskEXIT_CRITICAL();
 80030de:	f006 fdb7 	bl	8009c50 <vPortExitCritical>
    }
 80030e2:	9801      	ldr	r0, [sp, #4]
 80030e4:	b002      	add	sp, #8
 80030e6:	bd10      	pop	{r4, pc}
            pxTCB = prvGetTCBFromHandle( xTask );
 80030e8:	4b01      	ldr	r3, [pc, #4]	; (80030f0 <uxTaskPriorityGet+0x24>)
 80030ea:	685c      	ldr	r4, [r3, #4]
 80030ec:	e7f4      	b.n	80030d8 <uxTaskPriorityGet+0xc>
 80030ee:	bf00      	nop
 80030f0:	24000040 	.word	0x24000040

080030f4 <uxTaskPriorityGetFromISR>:
    {
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030f8:	f006 fdea 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 80030fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003100:	f04f 0250 	mov.w	r2, #80	; 0x50
 8003104:	f382 8811 	msr	BASEPRI, r2
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
            pxTCB = prvGetTCBFromHandle( xTask );
 8003110:	b124      	cbz	r4, 800311c <uxTaskPriorityGetFromISR+0x28>
            uxReturn = pxTCB->uxPriority;
 8003112:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    __asm volatile
 8003116:	f383 8811 	msr	BASEPRI, r3
    }
 800311a:	bd10      	pop	{r4, pc}
            pxTCB = prvGetTCBFromHandle( xTask );
 800311c:	4a03      	ldr	r2, [pc, #12]	; (800312c <uxTaskPriorityGetFromISR+0x38>)
 800311e:	6854      	ldr	r4, [r2, #4]
            uxReturn = pxTCB->uxPriority;
 8003120:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8003124:	f383 8811 	msr	BASEPRI, r3
    }
 8003128:	bd10      	pop	{r4, pc}
 800312a:	bf00      	nop
 800312c:	24000040 	.word	0x24000040

08003130 <eTaskGetState>:
        configASSERT( pxTCB );
 8003130:	b310      	cbz	r0, 8003178 <eTaskGetState+0x48>
    {
 8003132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( pxTCB == pxCurrentTCB )
 8003136:	4d20      	ldr	r5, [pc, #128]	; (80031b8 <eTaskGetState+0x88>)
 8003138:	4604      	mov	r4, r0
 800313a:	686b      	ldr	r3, [r5, #4]
 800313c:	4283      	cmp	r3, r0
 800313e:	d018      	beq.n	8003172 <eTaskGetState+0x42>
            taskENTER_CRITICAL();
 8003140:	f006 fd70 	bl	8009c24 <vPortEnterCritical>
                pxDelayedList = pxDelayedTaskList;
 8003144:	6a2f      	ldr	r7, [r5, #32]
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003146:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800314a:	f8d5 801c 	ldr.w	r8, [r5, #28]
            taskEXIT_CRITICAL();
 800314e:	f006 fd7f 	bl	8009c50 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003152:	42be      	cmp	r6, r7
 8003154:	d01c      	beq.n	8003190 <eTaskGetState+0x60>
 8003156:	4546      	cmp	r6, r8
 8003158:	d01a      	beq.n	8003190 <eTaskGetState+0x60>
                else if( pxStateList == &xSuspendedTaskList )
 800315a:	f105 0308 	add.w	r3, r5, #8
 800315e:	429e      	cmp	r6, r3
 8003160:	d013      	beq.n	800318a <eTaskGetState+0x5a>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003162:	f505 6599 	add.w	r5, r5, #1224	; 0x4c8
 8003166:	42ae      	cmp	r6, r5
 8003168:	d015      	beq.n	8003196 <eTaskGetState+0x66>
 800316a:	b1a6      	cbz	r6, 8003196 <eTaskGetState+0x66>
                eReturn = eReady;
 800316c:	2001      	movs	r0, #1
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800316e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            eReturn = eRunning;
 8003172:	2000      	movs	r0, #0
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTCB );
 8003188:	e7fe      	b.n	8003188 <eTaskGetState+0x58>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800318a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800318e:	b123      	cbz	r3, 800319a <eTaskGetState+0x6a>
                eReturn = eBlocked;
 8003190:	2002      	movs	r0, #2
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    eReturn = eDeleted;
 8003196:	2004      	movs	r0, #4
 8003198:	e7ec      	b.n	8003174 <eTaskGetState+0x44>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800319a:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d0f6      	beq.n	8003190 <eTaskGetState+0x60>
 80031a2:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d0f2      	beq.n	8003190 <eTaskGetState+0x60>
 80031aa:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
                                eReturn = eSuspended;
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	bf0c      	ite	eq
 80031b2:	2002      	moveq	r0, #2
 80031b4:	2003      	movne	r0, #3
 80031b6:	e7dd      	b.n	8003174 <eTaskGetState+0x44>
 80031b8:	24000040 	.word	0x24000040

080031bc <vTaskPrioritySet>:
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 80031bc:	2937      	cmp	r1, #55	; 0x37
 80031be:	d908      	bls.n	80031d2 <vTaskPrioritySet+0x16>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <vTaskPrioritySet+0x14>
    {
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
        taskENTER_CRITICAL();
 80031da:	f006 fd23 	bl	8009c24 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80031de:	2c00      	cmp	r4, #0
 80031e0:	d03d      	beq.n	800325e <vTaskPrioritySet+0xa2>
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031e2:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
            if( uxCurrentBasePriority != uxNewPriority )
 80031e6:	4295      	cmp	r5, r2
 80031e8:	d02a      	beq.n	8003240 <vTaskPrioritySet+0x84>
                    if( pxTCB != pxCurrentTCB )
 80031ea:	4e31      	ldr	r6, [pc, #196]	; (80032b0 <vTaskPrioritySet+0xf4>)
                if( uxNewPriority > uxCurrentBasePriority )
 80031ec:	d82c      	bhi.n	8003248 <vTaskPrioritySet+0x8c>
                else if( pxTCB == pxCurrentTCB )
 80031ee:	6877      	ldr	r7, [r6, #4]
 80031f0:	1b3f      	subs	r7, r7, r4
 80031f2:	fab7 f787 	clz	r7, r7
 80031f6:	097f      	lsrs	r7, r7, #5
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80031f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
                        pxTCB->uxBasePriority = uxNewPriority;
 80031fc:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003200:	429a      	cmp	r2, r3
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003202:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
                            pxTCB->uxPriority = uxNewPriority;
 8003206:	bf08      	it	eq
 8003208:	f8c4 50ac 	streq.w	r5, [r4, #172]	; 0xac
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800320c:	2a00      	cmp	r2, #0
 800320e:	db03      	blt.n	8003218 <vTaskPrioritySet+0x5c>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003210:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 8003214:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003218:	4d26      	ldr	r5, [pc, #152]	; (80032b4 <vTaskPrioritySet+0xf8>)
 800321a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800321e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003222:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003226:	429a      	cmp	r2, r3
 8003228:	d01c      	beq.n	8003264 <vTaskPrioritySet+0xa8>
                if( xYieldRequired != pdFALSE )
 800322a:	b14f      	cbz	r7, 8003240 <vTaskPrioritySet+0x84>
                    taskYIELD_IF_USING_PREEMPTION();
 800322c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003234:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
    }
 8003240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        taskEXIT_CRITICAL();
 8003244:	f006 bd04 	b.w	8009c50 <vPortExitCritical>
                    if( pxTCB != pxCurrentTCB )
 8003248:	6873      	ldr	r3, [r6, #4]
 800324a:	42a3      	cmp	r3, r4
 800324c:	d02e      	beq.n	80032ac <vTaskPrioritySet+0xf0>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800324e:	6873      	ldr	r3, [r6, #4]
 8003250:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 8003254:	42af      	cmp	r7, r5
 8003256:	bf8c      	ite	hi
 8003258:	2700      	movhi	r7, #0
 800325a:	2701      	movls	r7, #1
 800325c:	e7cc      	b.n	80031f8 <vTaskPrioritySet+0x3c>
            pxTCB = prvGetTCBFromHandle( xTask );
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <vTaskPrioritySet+0xf4>)
 8003260:	685c      	ldr	r4, [r3, #4]
 8003262:	e7be      	b.n	80031e2 <vTaskPrioritySet+0x26>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003264:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8003268:	4640      	mov	r0, r8
 800326a:	f7fd fab5 	bl	80007d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800326e:	f8d6 24e4 	ldr.w	r2, [r6, #1252]	; 0x4e4
 8003272:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <vTaskPrioritySet+0xc2>
 800327a:	f8c6 34e4 	str.w	r3, [r6, #1252]	; 0x4e4
 800327e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003282:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003286:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800328a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003292:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003296:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003298:	6898      	ldr	r0, [r3, #8]
 800329a:	3201      	adds	r2, #1
 800329c:	f8c0 8004 	str.w	r8, [r0, #4]
 80032a0:	f8c3 8008 	str.w	r8, [r3, #8]
 80032a4:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 80032a8:	62f2      	str	r2, [r6, #44]	; 0x2c
 80032aa:	e7be      	b.n	800322a <vTaskPrioritySet+0x6e>
        BaseType_t xYieldRequired = pdFALSE;
 80032ac:	2700      	movs	r7, #0
 80032ae:	e7a3      	b.n	80031f8 <vTaskPrioritySet+0x3c>
 80032b0:	24000040 	.word	0x24000040
 80032b4:	2400006c 	.word	0x2400006c

080032b8 <vTaskResume>:
    {
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( xTaskToResume );
 80032ba:	b188      	cbz	r0, 80032e0 <vTaskResume+0x28>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80032bc:	4d2b      	ldr	r5, [pc, #172]	; (800336c <vTaskResume+0xb4>)
 80032be:	4604      	mov	r4, r0
 80032c0:	686b      	ldr	r3, [r5, #4]
 80032c2:	4283      	cmp	r3, r0
 80032c4:	d00b      	beq.n	80032de <vTaskResume+0x26>
            taskENTER_CRITICAL();
 80032c6:	f006 fcad 	bl	8009c24 <vPortEnterCritical>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032ca:	f105 0308 	add.w	r3, r5, #8
 80032ce:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d00d      	beq.n	80032f2 <vTaskResume+0x3a>
    }
 80032d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            taskEXIT_CRITICAL();
 80032da:	f006 bcb9 	b.w	8009c50 <vPortExitCritical>
    }
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToResume );
 80032f0:	e7fe      	b.n	80032f0 <vTaskResume+0x38>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80032f2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80032f6:	f205 42b4 	addw	r2, r5, #1204	; 0x4b4
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d0eb      	beq.n	80032d6 <vTaskResume+0x1e>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e9      	bne.n	80032d6 <vTaskResume+0x1e>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003302:	f104 0684 	add.w	r6, r4, #132	; 0x84
 8003306:	4630      	mov	r0, r6
 8003308:	f7fd fa66 	bl	80007d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800330c:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
 8003310:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <vTaskResume+0x64>
 8003318:	f8c5 24e4 	str.w	r2, [r5, #1252]	; 0x4e4
 800331c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8003320:	4f13      	ldr	r7, [pc, #76]	; (8003370 <vTaskResume+0xb8>)
 8003322:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8003326:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800332a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332c:	6888      	ldr	r0, [r1, #8]
 800332e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
 8003332:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8003336:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003338:	f100 0c01 	add.w	ip, r0, #1
 800333c:	6888      	ldr	r0, [r1, #8]
 800333e:	6046      	str	r6, [r0, #4]
 8003340:	608e      	str	r6, [r1, #8]
 8003342:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
 8003346:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800334a:	686b      	ldr	r3, [r5, #4]
 800334c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003350:	429a      	cmp	r2, r3
 8003352:	d3c0      	bcc.n	80032d6 <vTaskResume+0x1e>
                        taskYIELD_IF_USING_PREEMPTION();
 8003354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	e7b5      	b.n	80032d6 <vTaskResume+0x1e>
 800336a:	bf00      	nop
 800336c:	24000040 	.word	0x24000040
 8003370:	2400006c 	.word	0x2400006c

08003374 <xTaskResumeFromISR>:
        configASSERT( xTaskToResume );
 8003374:	b1d8      	cbz	r0, 80033ae <xTaskResumeFromISR+0x3a>
    {
 8003376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800337a:	4604      	mov	r4, r0
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800337c:	f006 fca8 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 8003380:	f3ef 8711 	mrs	r7, BASEPRI
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003394:	4d2b      	ldr	r5, [pc, #172]	; (8003444 <xTaskResumeFromISR+0xd0>)
 8003396:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800339a:	f105 0308 	add.w	r3, r5, #8
 800339e:	429a      	cmp	r2, r3
 80033a0:	d00e      	beq.n	80033c0 <xTaskResumeFromISR+0x4c>
        BaseType_t xYieldRequired = pdFALSE;
 80033a2:	2600      	movs	r6, #0
    __asm volatile
 80033a4:	f387 8811 	msr	BASEPRI, r7
    }
 80033a8:	4630      	mov	r0, r6
 80033aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToResume );
 80033be:	e7fe      	b.n	80033be <xTaskResumeFromISR+0x4a>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80033c0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80033c4:	f205 40b4 	addw	r0, r5, #1204	; 0x4b4
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80033c8:	4283      	cmp	r3, r0
 80033ca:	d0ea      	beq.n	80033a2 <xTaskResumeFromISR+0x2e>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e8      	bne.n	80033a2 <xTaskResumeFromISR+0x2e>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d0:	f8d5 64ec 	ldr.w	r6, [r5, #1260]	; 0x4ec
 80033d4:	bb7e      	cbnz	r6, 8003436 <xTaskResumeFromISR+0xc2>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d6:	686b      	ldr	r3, [r5, #4]
 80033d8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80033dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d303      	bcc.n	80033ec <xTaskResumeFromISR+0x78>
                        xYieldPending = pdTRUE;
 80033e4:	2301      	movs	r3, #1
                        xYieldRequired = pdTRUE;
 80033e6:	461e      	mov	r6, r3
                        xYieldPending = pdTRUE;
 80033e8:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ec:	f104 0884 	add.w	r8, r4, #132	; 0x84
 80033f0:	4640      	mov	r0, r8
 80033f2:	f7fd f9f1 	bl	80007d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033f6:	f8d5 24e4 	ldr.w	r2, [r5, #1252]	; 0x4e4
 80033fa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <xTaskResumeFromISR+0x92>
 8003402:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 8003406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800340a:	480f      	ldr	r0, [pc, #60]	; (8003448 <xTaskResumeFromISR+0xd4>)
 800340c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003410:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003414:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800341c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003420:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	3201      	adds	r2, #1
 8003426:	f8c1 8004 	str.w	r8, [r1, #4]
 800342a:	f8c3 8008 	str.w	r8, [r3, #8]
 800342e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8003432:	62ea      	str	r2, [r5, #44]	; 0x2c
 8003434:	e7b6      	b.n	80033a4 <xTaskResumeFromISR+0x30>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003436:	f104 0198 	add.w	r1, r4, #152	; 0x98
        BaseType_t xYieldRequired = pdFALSE;
 800343a:	2600      	movs	r6, #0
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800343c:	f7fd f9bc 	bl	80007b8 <vListInsertEnd>
 8003440:	e7b0      	b.n	80033a4 <xTaskResumeFromISR+0x30>
 8003442:	bf00      	nop
 8003444:	24000040 	.word	0x24000040
 8003448:	2400006c 	.word	0x2400006c

0800344c <vTaskStartScheduler>:
{
 800344c:	b530      	push	{r4, r5, lr}
 800344e:	b08b      	sub	sp, #44	; 0x2c
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003450:	2400      	movs	r4, #0
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003452:	aa07      	add	r2, sp, #28
 8003454:	a906      	add	r1, sp, #24
 8003456:	a805      	add	r0, sp, #20
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003458:	e9cd 4405 	strd	r4, r4, [sp, #20]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800345c:	f006 fc9e 	bl	8009d9c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003460:	9b06      	ldr	r3, [sp, #24]
        configASSERT( puxStackBuffer != NULL );
 8003462:	b1db      	cbz	r3, 800349c <vTaskStartScheduler+0x50>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003464:	9d05      	ldr	r5, [sp, #20]
        configASSERT( pxTaskBuffer != NULL );
 8003466:	b185      	cbz	r5, 800348a <vTaskStartScheduler+0x3e>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003468:	f44f 71a2 	mov.w	r1, #324	; 0x144
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800346c:	9a07      	ldr	r2, [sp, #28]
                volatile size_t xSize = sizeof( StaticTask_t );
 800346e:	9109      	str	r1, [sp, #36]	; 0x24
                configASSERT( xSize == sizeof( TCB_t ) );
 8003470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003472:	f5b1 7fa2 	cmp.w	r1, #324	; 0x144
 8003476:	d01a      	beq.n	80034ae <vTaskStartScheduler+0x62>
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	e7fe      	b.n	8003488 <vTaskStartScheduler+0x3c>
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 800349a:	e7fe      	b.n	800349a <vTaskStartScheduler+0x4e>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 80034ac:	e7fe      	b.n	80034ac <vTaskStartScheduler+0x60>
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ae:	2102      	movs	r1, #2
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034b0:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ba:	f885 1143 	strb.w	r1, [r5, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034be:	a908      	add	r1, sp, #32
 80034c0:	481a      	ldr	r0, [pc, #104]	; (800352c <vTaskStartScheduler+0xe0>)
 80034c2:	e9cd 3100 	strd	r3, r1, [sp]
 80034c6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80034ca:	4623      	mov	r3, r4
 80034cc:	4918      	ldr	r1, [pc, #96]	; (8003530 <vTaskStartScheduler+0xe4>)
 80034ce:	f7ff fadb 	bl	8002a88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7ff fbc4 	bl	8002c60 <prvAddNewTaskToReadyList>
        return xReturn;
 80034d8:	9b08      	ldr	r3, [sp, #32]
            if( xIdleTaskHandle != NULL )
 80034da:	b1c3      	cbz	r3, 800350e <vTaskStartScheduler+0xc2>
                xReturn = xTimerCreateTimerTask();
 80034dc:	f001 fee8 	bl	80052b0 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <vTaskStartScheduler+0xca>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <vTaskStartScheduler+0xe8>)
 80034f6:	4910      	ldr	r1, [pc, #64]	; (8003538 <vTaskStartScheduler+0xec>)
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	32d4      	adds	r2, #212	; 0xd4
 80034fc:	600a      	str	r2, [r1, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
        xSchedulerRunning = pdTRUE;
 8003504:	f8c3 04dc 	str.w	r0, [r3, #1244]	; 0x4dc
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003508:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 800350a:	f002 f90b 	bl	8005724 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <vTaskStartScheduler+0xf0>)
 8003510:	681b      	ldr	r3, [r3, #0]
}
 8003512:	b00b      	add	sp, #44	; 0x2c
 8003514:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003516:	3001      	adds	r0, #1
 8003518:	d1f9      	bne.n	800350e <vTaskStartScheduler+0xc2>
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	e7fe      	b.n	800352a <vTaskStartScheduler+0xde>
 800352c:	08002d71 	.word	0x08002d71
 8003530:	24009f90 	.word	0x24009f90
 8003534:	24000040 	.word	0x24000040
 8003538:	24009074 	.word	0x24009074
 800353c:	24008010 	.word	0x24008010

08003540 <vTaskEndScheduler>:
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
    xSchedulerRunning = pdFALSE;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <vTaskEndScheduler+0x1c>)
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
    vPortEndScheduler();
 8003558:	f001 bfbc 	b.w	80054d4 <vPortEndScheduler>
 800355c:	24000040 	.word	0x24000040

08003560 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8003560:	4a03      	ldr	r2, [pc, #12]	; (8003570 <vTaskSuspendAll+0x10>)
 8003562:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8003566:	3301      	adds	r3, #1
 8003568:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	24000040 	.word	0x24000040

08003574 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8003574:	4b01      	ldr	r3, [pc, #4]	; (800357c <xTaskGetTickCount+0x8>)
 8003576:	6818      	ldr	r0, [r3, #0]
}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	24000040 	.word	0x24000040

08003580 <xTaskGetTickCountFromISR>:
{
 8003580:	b508      	push	{r3, lr}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003582:	f006 fba5 	bl	8009cd0 <vPortValidateInterruptPriority>
        xReturn = xTickCount;
 8003586:	4b01      	ldr	r3, [pc, #4]	; (800358c <xTaskGetTickCountFromISR+0xc>)
 8003588:	6818      	ldr	r0, [r3, #0]
}
 800358a:	bd08      	pop	{r3, pc}
 800358c:	24000040 	.word	0x24000040

08003590 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8003590:	4b01      	ldr	r3, [pc, #4]	; (8003598 <uxTaskGetNumberOfTasks+0x8>)
 8003592:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	24000040 	.word	0x24000040

0800359c <pcTaskGetName>:
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800359c:	b108      	cbz	r0, 80035a2 <pcTaskGetName+0x6>
}
 800359e:	30b4      	adds	r0, #180	; 0xb4
 80035a0:	4770      	bx	lr
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <pcTaskGetName+0x20>)
 80035a4:	6858      	ldr	r0, [r3, #4]
    configASSERT( pxTCB );
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d1f9      	bne.n	800359e <pcTaskGetName+0x2>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	e7fe      	b.n	80035ba <pcTaskGetName+0x1e>
 80035bc:	24000040 	.word	0x24000040

080035c0 <uxTaskGetStackHighWaterMark>:
        pxTCB = prvGetTCBFromHandle( xTask );
 80035c0:	b170      	cbz	r0, 80035e0 <uxTaskGetStackHighWaterMark+0x20>
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80035c2:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	2aa5      	cmp	r2, #165	; 0xa5
 80035ca:	d110      	bne.n	80035ee <uxTaskGetStackHighWaterMark+0x2e>
 80035cc:	f1c3 0101 	rsb	r1, r3, #1
            ulCount++;
 80035d0:	18c8      	adds	r0, r1, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80035d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80035d6:	2aa5      	cmp	r2, #165	; 0xa5
 80035d8:	d0fa      	beq.n	80035d0 <uxTaskGetStackHighWaterMark+0x10>
 80035da:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80035de:	4770      	bx	lr
        pxTCB = prvGetTCBFromHandle( xTask );
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <uxTaskGetStackHighWaterMark+0x34>)
 80035e2:	6858      	ldr	r0, [r3, #4]
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80035e4:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	2aa5      	cmp	r2, #165	; 0xa5
 80035ec:	d0ee      	beq.n	80035cc <uxTaskGetStackHighWaterMark+0xc>
 80035ee:	2000      	movs	r0, #0
    }
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	24000040 	.word	0x24000040

080035f8 <xTaskGenericNotify>:
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80035f8:	2902      	cmp	r1, #2
    {
 80035fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80035fc:	d908      	bls.n	8003610 <xTaskGenericNotify+0x18>
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	e7fe      	b.n	800360e <xTaskGenericNotify+0x16>
        configASSERT( xTaskToNotify );
 8003610:	4607      	mov	r7, r0
 8003612:	b1d8      	cbz	r0, 800364c <xTaskGenericNotify+0x54>
        taskENTER_CRITICAL();
 8003614:	461d      	mov	r5, r3
 8003616:	460c      	mov	r4, r1
 8003618:	4616      	mov	r6, r2
 800361a:	f006 fb03 	bl	8009c24 <vPortEnterCritical>
            if( pulPreviousNotificationValue != NULL )
 800361e:	9b06      	ldr	r3, [sp, #24]
 8003620:	b133      	cbz	r3, 8003630 <xTaskGenericNotify+0x38>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003622:	461a      	mov	r2, r3
 8003624:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8003628:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	6013      	str	r3, [r2, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003630:	193b      	adds	r3, r7, r4
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003632:	2102      	movs	r1, #2
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003634:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003638:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800363c:	b2d2      	uxtb	r2, r2
            switch( eAction )
 800363e:	2d04      	cmp	r5, #4
 8003640:	d879      	bhi.n	8003736 <xTaskGenericNotify+0x13e>
 8003642:	e8df f005 	tbb	[pc, r5]
 8003646:	6811      	.short	0x6811
 8003648:	0c70      	.short	0x0c70
 800364a:	64          	.byte	0x64
 800364b:	00          	.byte	0x00
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 800365c:	e7fe      	b.n	800365c <xTaskGenericNotify+0x64>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800365e:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8003662:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003666:	605e      	str	r6, [r3, #4]
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003668:	2a01      	cmp	r2, #1
 800366a:	d14b      	bne.n	8003704 <xTaskGenericNotify+0x10c>
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800366c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003670:	f107 0c84 	add.w	ip, r7, #132	; 0x84
                prvAddTaskToReadyList( pxTCB );
 8003674:	4836      	ldr	r0, [pc, #216]	; (8003750 <xTaskGenericNotify+0x158>)
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003676:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800367a:	608a      	str	r2, [r1, #8]
 800367c:	6051      	str	r1, [r2, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	4561      	cmp	r1, ip
                prvAddTaskToReadyList( pxTCB );
 8003682:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003686:	bf08      	it	eq
 8003688:	605a      	streq	r2, [r3, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	3a01      	subs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003690:	f8d0 34e4 	ldr.w	r3, [r0, #1252]	; 0x4e4
 8003694:	4299      	cmp	r1, r3
 8003696:	d901      	bls.n	800369c <xTaskGenericNotify+0xa4>
 8003698:	f8c0 14e4 	str.w	r1, [r0, #1252]	; 0x4e4
 800369c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80036a0:	4d2c      	ldr	r5, [pc, #176]	; (8003754 <xTaskGenericNotify+0x15c>)
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80036a2:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
                prvAddTaskToReadyList( pxTCB );
 80036a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80036aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	6894      	ldr	r4, [r2, #8]
 80036b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036b6:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 80036ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80036bc:	f104 0e01 	add.w	lr, r4, #1
 80036c0:	6894      	ldr	r4, [r2, #8]
 80036c2:	f8c4 c004 	str.w	ip, [r4, #4]
 80036c6:	f8c2 c008 	str.w	ip, [r2, #8]
 80036ca:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
 80036ce:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80036d2:	b146      	cbz	r6, 80036e6 <xTaskGenericNotify+0xee>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	e7fe      	b.n	80036e4 <xTaskGenericNotify+0xec>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036e6:	6843      	ldr	r3, [r0, #4]
 80036e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036ec:	4299      	cmp	r1, r3
 80036ee:	d909      	bls.n	8003704 <xTaskGenericNotify+0x10c>
                    taskYIELD_IF_USING_PREEMPTION();
 80036f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80036f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	2401      	movs	r4, #1
        taskEXIT_CRITICAL();
 8003706:	f006 faa3 	bl	8009c50 <vPortExitCritical>
    }
 800370a:	4620      	mov	r0, r4
 800370c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800370e:	2a02      	cmp	r2, #2
 8003710:	d1a5      	bne.n	800365e <xTaskGenericNotify+0x66>
                        xReturn = pdFAIL;
 8003712:	2400      	movs	r4, #0
 8003714:	e7f7      	b.n	8003706 <xTaskGenericNotify+0x10e>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003716:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800371a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800371e:	431e      	orrs	r6, r3
 8003720:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
                    break;
 8003724:	e7a0      	b.n	8003668 <xTaskGenericNotify+0x70>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003726:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800372a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800372e:	3301      	adds	r3, #1
 8003730:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
                    break;
 8003734:	e798      	b.n	8003668 <xTaskGenericNotify+0x70>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <xTaskGenericNotify+0x158>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d094      	beq.n	8003668 <xTaskGenericNotify+0x70>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	e7fe      	b.n	800374e <xTaskGenericNotify+0x156>
 8003750:	24000040 	.word	0x24000040
 8003754:	2400006c 	.word	0x2400006c

08003758 <xTaskGenericNotifyFromISR>:
    {
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( xTaskToNotify );
 800375a:	2800      	cmp	r0, #0
 800375c:	d033      	beq.n	80037c6 <xTaskGenericNotifyFromISR+0x6e>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800375e:	2902      	cmp	r1, #2
 8003760:	460e      	mov	r6, r1
 8003762:	d908      	bls.n	8003776 <xTaskGenericNotifyFromISR+0x1e>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	e7fe      	b.n	8003774 <xTaskGenericNotifyFromISR+0x1c>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003776:	4615      	mov	r5, r2
 8003778:	461c      	mov	r4, r3
 800377a:	4607      	mov	r7, r0
 800377c:	f006 faa8 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 8003780:	f3ef 8c11 	mrs	ip, BASEPRI
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
            if( pulPreviousNotificationValue != NULL )
 8003794:	9b06      	ldr	r3, [sp, #24]
 8003796:	b133      	cbz	r3, 80037a6 <xTaskGenericNotifyFromISR+0x4e>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003798:	461a      	mov	r2, r3
 800379a:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 800379e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6013      	str	r3, [r2, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80037a6:	19bb      	adds	r3, r7, r6
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80037a8:	f04f 0e02 	mov.w	lr, #2
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80037ac:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80037b0:	f883 e140 	strb.w	lr, [r3, #320]	; 0x140
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80037b4:	b2d2      	uxtb	r2, r2
            switch( eAction )
 80037b6:	2c04      	cmp	r4, #4
 80037b8:	f200 8091 	bhi.w	80038de <xTaskGenericNotifyFromISR+0x186>
 80037bc:	e8df f004 	tbb	[pc, r4]
 80037c0:	0c232f11 	.word	0x0c232f11
 80037c4:	2b          	.byte	0x2b
 80037c5:	00          	.byte	0x00
    __asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 80037d6:	e7fe      	b.n	80037d6 <xTaskGenericNotifyFromISR+0x7e>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80037d8:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 80037dc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80037e0:	605d      	str	r5, [r3, #4]
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80037e2:	2a01      	cmp	r2, #1
 80037e4:	d003      	beq.n	80037ee <xTaskGenericNotifyFromISR+0x96>
    {
 80037e6:	2001      	movs	r0, #1
    __asm volatile
 80037e8:	f38c 8811 	msr	BASEPRI, ip
    }
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80037ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f2:	b1e3      	cbz	r3, 800382e <xTaskGenericNotifyFromISR+0xd6>
    __asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	e7fe      	b.n	8003804 <xTaskGenericNotifyFromISR+0xac>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003806:	eb07 0186 	add.w	r1, r7, r6, lsl #2
 800380a:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
 800380e:	3301      	adds	r3, #1
 8003810:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
                    break;
 8003814:	e7e5      	b.n	80037e2 <xTaskGenericNotifyFromISR+0x8a>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003816:	2a02      	cmp	r2, #2
 8003818:	d1de      	bne.n	80037d8 <xTaskGenericNotifyFromISR+0x80>
                        xReturn = pdFAIL;
 800381a:	2000      	movs	r0, #0
 800381c:	e7e4      	b.n	80037e8 <xTaskGenericNotifyFromISR+0x90>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800381e:	eb07 0186 	add.w	r1, r7, r6, lsl #2
 8003822:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
 8003826:	431d      	orrs	r5, r3
 8003828:	f8c1 5134 	str.w	r5, [r1, #308]	; 0x134
                    break;
 800382c:	e7d9      	b.n	80037e2 <xTaskGenericNotifyFromISR+0x8a>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382e:	4a33      	ldr	r2, [pc, #204]	; (80038fc <xTaskGenericNotifyFromISR+0x1a4>)
 8003830:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8003834:	2b00      	cmp	r3, #0
 8003836:	d13c      	bne.n	80038b2 <xTaskGenericNotifyFromISR+0x15a>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800383c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8003840:	e9d7 4122 	ldrd	r4, r1, [r7, #136]	; 0x88
 8003844:	60a1      	str	r1, [r4, #8]
 8003846:	604c      	str	r4, [r1, #4]
 8003848:	685c      	ldr	r4, [r3, #4]
 800384a:	4284      	cmp	r4, r0
 800384c:	bf08      	it	eq
 800384e:	6059      	streq	r1, [r3, #4]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	3901      	subs	r1, #1
 8003854:	6019      	str	r1, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003856:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800385a:	f8d2 34e4 	ldr.w	r3, [r2, #1252]	; 0x4e4
 800385e:	4299      	cmp	r1, r3
 8003860:	d901      	bls.n	8003866 <xTaskGenericNotifyFromISR+0x10e>
 8003862:	f8c2 14e4 	str.w	r1, [r2, #1252]	; 0x4e4
 8003866:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800386a:	4e25      	ldr	r6, [pc, #148]	; (8003900 <xTaskGenericNotifyFromISR+0x1a8>)
 800386c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003870:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003874:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003876:	68a5      	ldr	r5, [r4, #8]
 8003878:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800387c:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
 8003880:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003882:	f105 0e01 	add.w	lr, r5, #1
 8003886:	68a5      	ldr	r5, [r4, #8]
 8003888:	6068      	str	r0, [r5, #4]
 800388a:	60a0      	str	r0, [r4, #8]
 800388c:	f8c7 6094 	str.w	r6, [r7, #148]	; 0x94
 8003890:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003894:	6853      	ldr	r3, [r2, #4]
 8003896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800389a:	428b      	cmp	r3, r1
 800389c:	d2a3      	bcs.n	80037e6 <xTaskGenericNotifyFromISR+0x8e>
                    if( pxHigherPriorityTaskWoken != NULL )
 800389e:	9b07      	ldr	r3, [sp, #28]
 80038a0:	b113      	cbz	r3, 80038a8 <xTaskGenericNotifyFromISR+0x150>
 80038a2:	4619      	mov	r1, r3
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	600b      	str	r3, [r1, #0]
                    xYieldPending = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
 80038b0:	e79a      	b.n	80037e8 <xTaskGenericNotifyFromISR+0x90>
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80038b2:	f8d2 34b8 	ldr.w	r3, [r2, #1208]	; 0x4b8
 80038b6:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	e9c7 3127 	strd	r3, r1, [r7, #156]	; 0x9c
 80038c0:	f8d2 14b4 	ldr.w	r1, [r2, #1204]	; 0x4b4
 80038c4:	3101      	adds	r1, #1
 80038c6:	f8c2 14b4 	str.w	r1, [r2, #1204]	; 0x4b4
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	604c      	str	r4, [r1, #4]
 80038ce:	609c      	str	r4, [r3, #8]
 80038d0:	f202 43b4 	addw	r3, r2, #1204	; 0x4b4
                    prvAddTaskToReadyList( pxTCB );
 80038d4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038dc:	e7da      	b.n	8003894 <xTaskGenericNotifyFromISR+0x13c>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <xTaskGenericNotifyFromISR+0x1a4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f43f af7d 	beq.w	80037e2 <xTaskGenericNotifyFromISR+0x8a>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	e7fe      	b.n	80038f8 <xTaskGenericNotifyFromISR+0x1a0>
 80038fa:	bf00      	nop
 80038fc:	24000040 	.word	0x24000040
 8003900:	2400006c 	.word	0x2400006c

08003904 <xTaskGenericNotifyWait>:
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003904:	2802      	cmp	r0, #2
 8003906:	d908      	bls.n	800391a <xTaskGenericNotifyWait+0x16>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	e7fe      	b.n	8003918 <xTaskGenericNotifyWait+0x14>
    {
 800391a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800391e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80039dc <xTaskGenericNotifyWait+0xd8>
    {
 8003922:	b082      	sub	sp, #8
 8003924:	4604      	mov	r4, r0
 8003926:	461d      	mov	r5, r3
 8003928:	460e      	mov	r6, r1
 800392a:	4617      	mov	r7, r2
        taskENTER_CRITICAL();
 800392c:	f006 f97a 	bl	8009c24 <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003934:	4423      	add	r3, r4
 8003936:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800393a:	2b02      	cmp	r3, #2
 800393c:	d011      	beq.n	8003962 <xTaskGenericNotifyWait+0x5e>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800393e:	f8d8 3004 	ldr.w	r3, [r8, #4]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003942:	2101      	movs	r1, #1
 8003944:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003948:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800394c:	ea22 0606 	bic.w	r6, r2, r6
 8003950:	f8c3 6134 	str.w	r6, [r3, #308]	; 0x134
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003954:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003958:	4423      	add	r3, r4
 800395a:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
                if( xTicksToWait > ( TickType_t ) 0 )
 800395e:	9b08      	ldr	r3, [sp, #32]
 8003960:	bb0b      	cbnz	r3, 80039a6 <xTaskGenericNotifyWait+0xa2>
        taskEXIT_CRITICAL();
 8003962:	f006 f975 	bl	8009c50 <vPortExitCritical>
        taskENTER_CRITICAL();
 8003966:	f006 f95d 	bl	8009c24 <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 800396a:	b13d      	cbz	r5, 800397c <xTaskGenericNotifyWait+0x78>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800396c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003970:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8003974:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	602b      	str	r3, [r5, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800397c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003980:	4423      	add	r3, r4
 8003982:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003986:	2b02      	cmp	r3, #2
 8003988:	d01b      	beq.n	80039c2 <xTaskGenericNotifyWait+0xbe>
                xReturn = pdFALSE;
 800398a:	2000      	movs	r0, #0
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800398c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	9001      	str	r0, [sp, #4]
 8003994:	441c      	add	r4, r3
 8003996:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
        taskEXIT_CRITICAL();
 800399a:	f006 f959 	bl	8009c50 <vPortExitCritical>
    }
 800399e:	9801      	ldr	r0, [sp, #4]
 80039a0:	b002      	add	sp, #8
 80039a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f830 	bl	8002a0c <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80039ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	e7cf      	b.n	8003962 <xTaskGenericNotifyWait+0x5e>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80039c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
                xReturn = pdTRUE;
 80039c6:	2001      	movs	r0, #1
 80039c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80039cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80039d0:	ea22 0207 	bic.w	r2, r2, r7
 80039d4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
                xReturn = pdTRUE;
 80039d8:	e7d8      	b.n	800398c <xTaskGenericNotifyWait+0x88>
 80039da:	bf00      	nop
 80039dc:	24000040 	.word	0x24000040

080039e0 <vTaskGenericNotifyGiveFromISR>:
        configASSERT( xTaskToNotify );
 80039e0:	b388      	cbz	r0, 8003a46 <vTaskGenericNotifyGiveFromISR+0x66>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80039e2:	2902      	cmp	r1, #2
    {
 80039e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e8:	460d      	mov	r5, r1
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80039ea:	d908      	bls.n	80039fe <vTaskGenericNotifyGiveFromISR+0x1e>
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	e7fe      	b.n	80039fc <vTaskGenericNotifyGiveFromISR+0x1c>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039fe:	4680      	mov	r8, r0
 8003a00:	4614      	mov	r4, r2
 8003a02:	f006 f965 	bl	8009cd0 <vPortValidateInterruptPriority>
    __asm volatile
 8003a06:	f3ef 8e11 	mrs	lr, BASEPRI
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003a1a:	f04f 0c02 	mov.w	ip, #2
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003a1e:	eb08 0305 	add.w	r3, r8, r5
 8003a22:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8003a26:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003a2a:	f883 c140 	strb.w	ip, [r3, #320]	; 0x140
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a2e:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a32:	2a01      	cmp	r2, #1
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a34:	f103 0301 	add.w	r3, r3, #1
 8003a38:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a3c:	d00c      	beq.n	8003a58 <vTaskGenericNotifyGiveFromISR+0x78>
    __asm volatile
 8003a3e:	f38e 8811 	msr	BASEPRI, lr
    }
 8003a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 8003a56:	e7fe      	b.n	8003a56 <vTaskGenericNotifyGiveFromISR+0x76>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003a58:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8003a5c:	b143      	cbz	r3, 8003a70 <vTaskGenericNotifyGiveFromISR+0x90>
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	e7fe      	b.n	8003a6e <vTaskGenericNotifyGiveFromISR+0x8e>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <vTaskGenericNotifyGiveFromISR+0x140>)
 8003a72:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d139      	bne.n	8003aee <vTaskGenericNotifyGiveFromISR+0x10e>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a7a:	f8d8 2094 	ldr.w	r2, [r8, #148]	; 0x94
 8003a7e:	f108 0684 	add.w	r6, r8, #132	; 0x84
 8003a82:	e9d8 5122 	ldrd	r5, r1, [r8, #136]	; 0x88
 8003a86:	60a9      	str	r1, [r5, #8]
 8003a88:	604d      	str	r5, [r1, #4]
 8003a8a:	6855      	ldr	r5, [r2, #4]
 8003a8c:	42b5      	cmp	r5, r6
 8003a8e:	bf08      	it	eq
 8003a90:	6051      	streq	r1, [r2, #4]
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	3901      	subs	r1, #1
 8003a96:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003a98:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 8003a9c:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8003aa0:	4291      	cmp	r1, r2
 8003aa2:	d901      	bls.n	8003aa8 <vTaskGenericNotifyGiveFromISR+0xc8>
 8003aa4:	f8c3 14e4 	str.w	r1, [r3, #1252]	; 0x4e4
 8003aa8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003aac:	4f1d      	ldr	r7, [pc, #116]	; (8003b24 <vTaskGenericNotifyGiveFromISR+0x144>)
 8003aae:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8003ab2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003ab6:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003ab8:	6885      	ldr	r5, [r0, #8]
 8003aba:	f8c8 0088 	str.w	r0, [r8, #136]	; 0x88
 8003abe:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
 8003ac2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8003ac4:	f105 0c01 	add.w	ip, r5, #1
 8003ac8:	6885      	ldr	r5, [r0, #8]
 8003aca:	606e      	str	r6, [r5, #4]
 8003acc:	6086      	str	r6, [r0, #8]
 8003ace:	f8c8 7094 	str.w	r7, [r8, #148]	; 0x94
 8003ad2:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003adc:	428a      	cmp	r2, r1
 8003ade:	d2ae      	bcs.n	8003a3e <vTaskGenericNotifyGiveFromISR+0x5e>
                    if( pxHigherPriorityTaskWoken != NULL )
 8003ae0:	b10c      	cbz	r4, 8003ae6 <vTaskGenericNotifyGiveFromISR+0x106>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	6022      	str	r2, [r4, #0]
                    xYieldPending = pdTRUE;
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003aec:	e7a7      	b.n	8003a3e <vTaskGenericNotifyGiveFromISR+0x5e>
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003aee:	f8d3 24b8 	ldr.w	r2, [r3, #1208]	; 0x4b8
 8003af2:	6891      	ldr	r1, [r2, #8]
 8003af4:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 8003af8:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 8003afc:	f8d3 14b4 	ldr.w	r1, [r3, #1204]	; 0x4b4
 8003b00:	6895      	ldr	r5, [r2, #8]
 8003b02:	3101      	adds	r1, #1
 8003b04:	f8c3 14b4 	str.w	r1, [r3, #1204]	; 0x4b4
 8003b08:	f108 0198 	add.w	r1, r8, #152	; 0x98
 8003b0c:	6069      	str	r1, [r5, #4]
 8003b0e:	6091      	str	r1, [r2, #8]
 8003b10:	f203 42b4 	addw	r2, r3, #1204	; 0x4b4
                    prvAddTaskToReadyList( pxTCB );
 8003b14:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003b18:	f8c8 20a8 	str.w	r2, [r8, #168]	; 0xa8
 8003b1c:	e7db      	b.n	8003ad6 <vTaskGenericNotifyGiveFromISR+0xf6>
 8003b1e:	bf00      	nop
 8003b20:	24000040 	.word	0x24000040
 8003b24:	2400006c 	.word	0x2400006c

08003b28 <ulTaskGenericNotifyTake>:
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	d908      	bls.n	8003b3e <ulTaskGenericNotifyTake+0x16>
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	e7fe      	b.n	8003b3c <ulTaskGenericNotifyTake+0x14>
    {
 8003b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b42:	4604      	mov	r4, r0
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8003b44:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8003bc8 <ulTaskGenericNotifyTake+0xa0>
 8003b48:	460e      	mov	r6, r1
 8003b4a:	4615      	mov	r5, r2
 8003b4c:	f104 074c 	add.w	r7, r4, #76	; 0x4c
        taskENTER_CRITICAL();
 8003b50:	f006 f868 	bl	8009c24 <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8003b54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b58:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b99b      	cbnz	r3, 8003b88 <ulTaskGenericNotifyTake+0x60>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003b60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b64:	2101      	movs	r1, #1
 8003b66:	4423      	add	r3, r4
 8003b68:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
                if( xTicksToWait > ( TickType_t ) 0 )
 8003b6c:	b165      	cbz	r5, 8003b88 <ulTaskGenericNotifyTake+0x60>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7fe ff4c 	bl	8002a0c <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8003b74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003b88:	f006 f862 	bl	8009c50 <vPortExitCritical>
        taskENTER_CRITICAL();
 8003b8c:	f006 f84a 	bl	8009c24 <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b94:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003b98:	00bf      	lsls	r7, r7, #2
 8003b9a:	685d      	ldr	r5, [r3, #4]
            if( ulReturn != 0UL )
 8003b9c:	b12d      	cbz	r5, 8003baa <ulTaskGenericNotifyTake+0x82>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8003b9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003ba2:	441f      	add	r7, r3
                if( xClearCountOnExit != pdFALSE )
 8003ba4:	b166      	cbz	r6, 8003bc0 <ulTaskGenericNotifyTake+0x98>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
        taskEXIT_CRITICAL();
 8003bb6:	f006 f84b 	bl	8009c50 <vPortExitCritical>
    }
 8003bba:	4628      	mov	r0, r5
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8003bc0:	1e6b      	subs	r3, r5, #1
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	e7f1      	b.n	8003baa <ulTaskGenericNotifyTake+0x82>
 8003bc6:	bf00      	nop
 8003bc8:	24000040 	.word	0x24000040

08003bcc <xTaskGenericNotifyStateClear>:
        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003bcc:	2902      	cmp	r1, #2
 8003bce:	d908      	bls.n	8003be2 <xTaskGenericNotifyStateClear+0x16>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	e7fe      	b.n	8003be0 <xTaskGenericNotifyStateClear+0x14>
    {
 8003be2:	b530      	push	{r4, r5, lr}
 8003be4:	460d      	mov	r5, r1
 8003be6:	b083      	sub	sp, #12
 8003be8:	4604      	mov	r4, r0
        pxTCB = prvGetTCBFromHandle( xTask );
 8003bea:	b190      	cbz	r0, 8003c12 <xTaskGenericNotifyStateClear+0x46>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8003bec:	442c      	add	r4, r5
        taskENTER_CRITICAL();
 8003bee:	f006 f819 	bl	8009c24 <vPortEnterCritical>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8003bf2:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d006      	beq.n	8003c08 <xTaskGenericNotifyStateClear+0x3c>
                xReturn = pdFAIL;
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	9001      	str	r0, [sp, #4]
        taskEXIT_CRITICAL();
 8003bfe:	f006 f827 	bl	8009c50 <vPortExitCritical>
    }
 8003c02:	9801      	ldr	r0, [sp, #4]
 8003c04:	b003      	add	sp, #12
 8003c06:	bd30      	pop	{r4, r5, pc}
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8003c08:	2300      	movs	r3, #0
                xReturn = pdPASS;
 8003c0a:	2001      	movs	r0, #1
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8003c0c:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
                xReturn = pdPASS;
 8003c10:	e7f4      	b.n	8003bfc <xTaskGenericNotifyStateClear+0x30>
        pxTCB = prvGetTCBFromHandle( xTask );
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <xTaskGenericNotifyStateClear+0x5c>)
 8003c14:	685c      	ldr	r4, [r3, #4]
        taskENTER_CRITICAL();
 8003c16:	f006 f805 	bl	8009c24 <vPortEnterCritical>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8003c1a:	442c      	add	r4, r5
 8003c1c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d1ea      	bne.n	8003bfa <xTaskGenericNotifyStateClear+0x2e>
 8003c24:	e7f0      	b.n	8003c08 <xTaskGenericNotifyStateClear+0x3c>
 8003c26:	bf00      	nop
 8003c28:	24000040 	.word	0x24000040

08003c2c <ulTaskGenericNotifyValueClear>:
    {
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	460e      	mov	r6, r1
 8003c30:	b082      	sub	sp, #8
 8003c32:	4615      	mov	r5, r2
        pxTCB = prvGetTCBFromHandle( xTask );
 8003c34:	b190      	cbz	r0, 8003c5c <ulTaskGenericNotifyValueClear+0x30>
 8003c36:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 8003c38:	f005 fff4 	bl	8009c24 <vPortEnterCritical>
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8003c3c:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8003c40:	f8d1 0134 	ldr.w	r0, [r1, #308]	; 0x134
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8003c44:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8003c48:	9001      	str	r0, [sp, #4]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8003c4a:	ea23 0305 	bic.w	r3, r3, r5
 8003c4e:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
        taskEXIT_CRITICAL();
 8003c52:	f005 fffd 	bl	8009c50 <vPortExitCritical>
    }
 8003c56:	9801      	ldr	r0, [sp, #4]
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 8003c5c:	4b01      	ldr	r3, [pc, #4]	; (8003c64 <ulTaskGenericNotifyValueClear+0x38>)
 8003c5e:	685c      	ldr	r4, [r3, #4]
 8003c60:	e7ea      	b.n	8003c38 <ulTaskGenericNotifyValueClear+0xc>
 8003c62:	bf00      	nop
 8003c64:	24000040 	.word	0x24000040

08003c68 <vTaskSetTimeOutState>:
    configASSERT( pxTimeOut );
 8003c68:	b168      	cbz	r0, 8003c86 <vTaskSetTimeOutState+0x1e>
{
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003c6e:	f005 ffd9 	bl	8009c24 <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <vTaskSetTimeOutState+0x30>)
 8003c74:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
        pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	e9c4 2300 	strd	r2, r3, [r4]
}
 8003c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    taskEXIT_CRITICAL();
 8003c82:	f005 bfe5 	b.w	8009c50 <vPortExitCritical>
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 8003c96:	e7fe      	b.n	8003c96 <vTaskSetTimeOutState+0x2e>
 8003c98:	24000040 	.word	0x24000040

08003c9c <xTaskCheckForTimeOut>:
    configASSERT( pxTimeOut );
 8003c9c:	b328      	cbz	r0, 8003cea <xTaskCheckForTimeOut+0x4e>
{
 8003c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	b083      	sub	sp, #12
    configASSERT( pxTicksToWait );
 8003ca4:	b1c1      	cbz	r1, 8003cd8 <xTaskCheckForTimeOut+0x3c>
 8003ca6:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003ca8:	f005 ffbc 	bl	8009c24 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 8003cac:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 8003cae:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <xTaskCheckForTimeOut+0x80>)
            if( *pxTicksToWait == portMAX_DELAY )
 8003cb0:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 8003cb2:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8003cb4:	d030      	beq.n	8003d18 <xTaskCheckForTimeOut+0x7c>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cb6:	f8d2 64f4 	ldr.w	r6, [r2, #1268]	; 0x4f4
 8003cba:	e9d4 7000 	ldrd	r7, r0, [r4]
 8003cbe:	42b7      	cmp	r7, r6
 8003cc0:	d01c      	beq.n	8003cfc <xTaskCheckForTimeOut+0x60>
 8003cc2:	4288      	cmp	r0, r1
 8003cc4:	d81a      	bhi.n	8003cfc <xTaskCheckForTimeOut+0x60>
            *pxTicksToWait = ( TickType_t ) 0;
 8003cc6:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 8003cc8:	2001      	movs	r0, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 8003cce:	f005 ffbf 	bl	8009c50 <vPortExitCritical>
}
 8003cd2:	9801      	ldr	r0, [sp, #4]
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 8003ce8:	e7fe      	b.n	8003ce8 <xTaskCheckForTimeOut+0x4c>
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 8003cfa:	e7fe      	b.n	8003cfa <xTaskCheckForTimeOut+0x5e>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cfc:	eba1 0c00 	sub.w	ip, r1, r0
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d00:	4563      	cmp	r3, ip
 8003d02:	d9e0      	bls.n	8003cc6 <xTaskCheckForTimeOut+0x2a>
            *pxTicksToWait -= xElapsedTime;
 8003d04:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d06:	f8d2 14f4 	ldr.w	r1, [r2, #1268]	; 0x4f4
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d0a:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 8003d0c:	4403      	add	r3, r0
            xReturn = pdFALSE;
 8003d0e:	2000      	movs	r0, #0
            *pxTicksToWait -= xElapsedTime;
 8003d10:	602b      	str	r3, [r5, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d12:	e9c4 1200 	strd	r1, r2, [r4]
            xReturn = pdFALSE;
 8003d16:	e7d9      	b.n	8003ccc <xTaskCheckForTimeOut+0x30>
                xReturn = pdFALSE;
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e7d7      	b.n	8003ccc <xTaskCheckForTimeOut+0x30>
 8003d1c:	24000040 	.word	0x24000040

08003d20 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d20:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <xTaskIncrementTick+0x174>)
 8003d22:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 8087 	bne.w	8003e3a <xTaskIncrementTick+0x11a>
{
 8003d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d30:	6817      	ldr	r7, [r2, #0]
 8003d32:	3701      	adds	r7, #1
        xTickCount = xConstTickCount;
 8003d34:	6017      	str	r7, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d36:	b9af      	cbnz	r7, 8003d64 <xTaskIncrementTick+0x44>
            taskSWITCH_DELAYED_LISTS();
 8003d38:	6a13      	ldr	r3, [r2, #32]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 8096 	bne.w	8003e6e <xTaskIncrementTick+0x14e>
 8003d42:	6a13      	ldr	r3, [r2, #32]
 8003d44:	69d1      	ldr	r1, [r2, #28]
 8003d46:	6211      	str	r1, [r2, #32]
 8003d48:	61d3      	str	r3, [r2, #28]
 8003d4a:	f8d2 34f4 	ldr.w	r3, [r2, #1268]	; 0x4f4
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d54:	6a13      	ldr	r3, [r2, #32]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 8095 	bne.w	8003e88 <xTaskIncrementTick+0x168>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d62:	6253      	str	r3, [r2, #36]	; 0x24
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d64:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	d86e      	bhi.n	8003e48 <xTaskIncrementTick+0x128>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d6a:	6a13      	ldr	r3, [r2, #32]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f000 8086 	beq.w	8003e80 <xTaskIncrementTick+0x160>
    BaseType_t xSwitchRequired = pdFALSE;
 8003d74:	2000      	movs	r0, #0
                    prvAddTaskToReadyList( pxTCB );
 8003d76:	f8df e120 	ldr.w	lr, [pc, #288]	; 8003e98 <xTaskIncrementTick+0x178>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d7a:	4684      	mov	ip, r0
 8003d7c:	e050      	b.n	8003e20 <xTaskIncrementTick+0x100>
 8003d7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003d82:	e9d3 4822 	ldrd	r4, r8, [r3, #136]	; 0x88
 8003d86:	f8c4 8008 	str.w	r8, [r4, #8]
 8003d8a:	f8c8 4004 	str.w	r4, [r8, #4]
 8003d8e:	684c      	ldr	r4, [r1, #4]
 8003d90:	42b4      	cmp	r4, r6
 8003d92:	680c      	ldr	r4, [r1, #0]
 8003d94:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003d98:	bf08      	it	eq
 8003d9a:	f8c1 8004 	streq.w	r8, [r1, #4]
 8003d9e:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
 8003da2:	600c      	str	r4, [r1, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003da4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8003da8:	b18c      	cbz	r4, 8003dce <xTaskIncrementTick+0xae>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003daa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003dae:	e9d3 8127 	ldrd	r8, r1, [r3, #156]	; 0x9c
 8003db2:	45a9      	cmp	r9, r5
 8003db4:	f8c8 1008 	str.w	r1, [r8, #8]
 8003db8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003dbc:	f8c1 8004 	str.w	r8, [r1, #4]
 8003dc0:	bf08      	it	eq
 8003dc2:	6061      	streq	r1, [r4, #4]
 8003dc4:	6821      	ldr	r1, [r4, #0]
 8003dc6:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
 8003dca:	3901      	subs	r1, #1
 8003dcc:	6021      	str	r1, [r4, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003dce:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8003dd2:	f8d2 44e4 	ldr.w	r4, [r2, #1252]	; 0x4e4
 8003dd6:	42a1      	cmp	r1, r4
 8003dd8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8003ddc:	d901      	bls.n	8003de2 <xTaskIncrementTick+0xc2>
 8003dde:	f8c2 14e4 	str.w	r1, [r2, #1252]	; 0x4e4
 8003de2:	eb02 0884 	add.w	r8, r2, r4, lsl #2
 8003de6:	eb0e 0a84 	add.w	sl, lr, r4, lsl #2
 8003dea:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8003dee:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 8003df2:	68ac      	ldr	r4, [r5, #8]
 8003df4:	f109 0901 	add.w	r9, r9, #1
 8003df8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
 8003dfc:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 8003e00:	68ac      	ldr	r4, [r5, #8]
 8003e02:	6066      	str	r6, [r4, #4]
 8003e04:	60ae      	str	r6, [r5, #8]
 8003e06:	f8c3 a094 	str.w	sl, [r3, #148]	; 0x94
 8003e0a:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e0e:	6854      	ldr	r4, [r2, #4]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e10:	6a13      	ldr	r3, [r2, #32]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e12:	f8d4 40ac 	ldr.w	r4, [r4, #172]	; 0xac
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e16:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 8003e18:	42a1      	cmp	r1, r4
 8003e1a:	bf28      	it	cs
 8003e1c:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1e:	b37b      	cbz	r3, 8003e80 <xTaskIncrementTick+0x160>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	6a13      	ldr	r3, [r2, #32]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e26:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e2a:	f103 0684 	add.w	r6, r3, #132	; 0x84
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e2e:	f103 0598 	add.w	r5, r3, #152	; 0x98
                    if( xConstTickCount < xItemValue )
 8003e32:	428f      	cmp	r7, r1
 8003e34:	d2a3      	bcs.n	8003d7e <xTaskIncrementTick+0x5e>
                        xNextTaskUnblockTime = xItemValue;
 8003e36:	6251      	str	r1, [r2, #36]	; 0x24
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003e38:	e007      	b.n	8003e4a <xTaskIncrementTick+0x12a>
        ++xPendedTicks;
 8003e3a:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
    BaseType_t xSwitchRequired = pdFALSE;
 8003e3e:	2000      	movs	r0, #0
        ++xPendedTicks;
 8003e40:	3301      	adds	r3, #1
 8003e42:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
}
 8003e46:	4770      	bx	lr
    BaseType_t xSwitchRequired = pdFALSE;
 8003e48:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e4a:	6853      	ldr	r3, [r2, #4]
 8003e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
                if( xYieldPending != pdFALSE )
 8003e5a:	f8d2 34f0 	ldr.w	r3, [r2, #1264]	; 0x4f0
                    xSwitchRequired = pdTRUE;
 8003e5e:	2902      	cmp	r1, #2
 8003e60:	bf28      	it	cs
 8003e62:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf18      	it	ne
 8003e68:	2001      	movne	r0, #1
}
 8003e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
            taskSWITCH_DELAYED_LISTS();
 8003e7e:	e7fe      	b.n	8003e7e <xTaskIncrementTick+0x15e>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e84:	6253      	str	r3, [r2, #36]	; 0x24
                    break;
 8003e86:	e7e0      	b.n	8003e4a <xTaskIncrementTick+0x12a>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e88:	6a13      	ldr	r3, [r2, #32]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6253      	str	r3, [r2, #36]	; 0x24
 8003e90:	e768      	b.n	8003d64 <xTaskIncrementTick+0x44>
 8003e92:	bf00      	nop
 8003e94:	24000040 	.word	0x24000040
 8003e98:	2400006c 	.word	0x2400006c

08003e9c <xTaskResumeAll>:
{
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( uxSchedulerSuspended );
 8003ea0:	4c51      	ldr	r4, [pc, #324]	; (8003fe8 <xTaskResumeAll+0x14c>)
 8003ea2:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8003ea6:	b943      	cbnz	r3, 8003eba <xTaskResumeAll+0x1e>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	e7fe      	b.n	8003eb8 <xTaskResumeAll+0x1c>
    taskENTER_CRITICAL();
 8003eba:	f005 feb3 	bl	8009c24 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003ebe:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	f8d4 54ec 	ldr.w	r5, [r4, #1260]	; 0x4ec
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	d16f      	bne.n	8003fb0 <xTaskResumeAll+0x114>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d06c      	beq.n	8003fb0 <xTaskResumeAll+0x114>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed6:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d058      	beq.n	8003f90 <xTaskResumeAll+0xf4>
 8003ede:	f104 0e2c 	add.w	lr, r4, #44	; 0x2c
                        xYieldPending = pdTRUE;
 8003ee2:	f04f 0901 	mov.w	r9, #1
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee6:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
 8003eea:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003eec:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003ef0:	f103 0798 	add.w	r7, r3, #152	; 0x98
 8003ef4:	e9d3 0127 	ldrd	r0, r1, [r3, #156]	; 0x9c
 8003ef8:	6081      	str	r1, [r0, #8]
 8003efa:	6048      	str	r0, [r1, #4]
 8003efc:	6850      	ldr	r0, [r2, #4]
 8003efe:	42b8      	cmp	r0, r7
 8003f00:	bf08      	it	eq
 8003f02:	6051      	streq	r1, [r2, #4]
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
 8003f0a:	3901      	subs	r1, #1
 8003f0c:	6011      	str	r1, [r2, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f0e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003f12:	f103 0784 	add.w	r7, r3, #132	; 0x84
 8003f16:	e9d3 1022 	ldrd	r1, r0, [r3, #136]	; 0x88
 8003f1a:	6088      	str	r0, [r1, #8]
 8003f1c:	6041      	str	r1, [r0, #4]
 8003f1e:	6851      	ldr	r1, [r2, #4]
 8003f20:	42b9      	cmp	r1, r7
 8003f22:	6811      	ldr	r1, [r2, #0]
 8003f24:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8003f28:	bf08      	it	eq
 8003f2a:	6050      	streq	r0, [r2, #4]
 8003f2c:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f2e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f32:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
 8003f36:	428a      	cmp	r2, r1
 8003f38:	d901      	bls.n	8003f3e <xTaskResumeAll+0xa2>
 8003f3a:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
 8003f3e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f42:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 8003f46:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 8003f4a:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
 8003f4e:	f8dc 802c 	ldr.w	r8, [ip, #44]	; 0x2c
 8003f52:	6886      	ldr	r6, [r0, #8]
 8003f54:	f108 0801 	add.w	r8, r8, #1
 8003f58:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8003f5c:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
 8003f60:	6886      	ldr	r6, [r0, #8]
 8003f62:	6077      	str	r7, [r6, #4]
 8003f64:	6087      	str	r7, [r0, #8]
 8003f66:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8003f6a:	f8cc 802c 	str.w	r8, [ip, #44]	; 0x2c
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d321      	bcc.n	8003fbc <xTaskResumeAll+0x120>
                        xYieldPending = pdTRUE;
 8003f78:	f8c4 94f0 	str.w	r9, [r4, #1264]	; 0x4f0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7c:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1b0      	bne.n	8003ee6 <xTaskResumeAll+0x4a>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f84:	6a23      	ldr	r3, [r4, #32]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	bb4b      	cbnz	r3, 8003fde <xTaskResumeAll+0x142>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f8e:	6263      	str	r3, [r4, #36]	; 0x24
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f90:	f8d4 54f8 	ldr.w	r5, [r4, #1272]	; 0x4f8
                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f94:	b14d      	cbz	r5, 8003faa <xTaskResumeAll+0x10e>
                                xYieldPending = pdTRUE;
 8003f96:	2601      	movs	r6, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8003f98:	f7ff fec2 	bl	8003d20 <xTaskIncrementTick>
 8003f9c:	b108      	cbz	r0, 8003fa2 <xTaskResumeAll+0x106>
                                xYieldPending = pdTRUE;
 8003f9e:	f8c4 64f0 	str.w	r6, [r4, #1264]	; 0x4f0
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003fa2:	3d01      	subs	r5, #1
 8003fa4:	d1f8      	bne.n	8003f98 <xTaskResumeAll+0xfc>
                        xPendedTicks = 0;
 8003fa6:	f8c4 54f8 	str.w	r5, [r4, #1272]	; 0x4f8
                if( xYieldPending != pdFALSE )
 8003faa:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8003fae:	b953      	cbnz	r3, 8003fc6 <xTaskResumeAll+0x12a>
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fb0:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8003fb2:	f005 fe4d 	bl	8009c50 <vPortExitCritical>
}
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fbc:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d190      	bne.n	8003ee6 <xTaskResumeAll+0x4a>
 8003fc4:	e7de      	b.n	8003f84 <xTaskResumeAll+0xe8>
                    taskYIELD_IF_USING_PREEMPTION();
 8003fc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8003fda:	2401      	movs	r4, #1
 8003fdc:	e7e9      	b.n	8003fb2 <xTaskResumeAll+0x116>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fde:	6a23      	ldr	r3, [r4, #32]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8003fe6:	e7d3      	b.n	8003f90 <xTaskResumeAll+0xf4>
 8003fe8:	24000040 	.word	0x24000040

08003fec <vTaskDelay>:
    {
 8003fec:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003fee:	b1b0      	cbz	r0, 800401e <vTaskDelay+0x32>
            configASSERT( uxSchedulerSuspended == 0 );
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <vTaskDelay+0x48>)
 8003ff2:	f8d3 14ec 	ldr.w	r1, [r3, #1260]	; 0x4ec
 8003ff6:	b141      	cbz	r1, 800400a <vTaskDelay+0x1e>
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	e7fe      	b.n	8004008 <vTaskDelay+0x1c>
    ++uxSchedulerSuspended;
 800400a:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 800400e:	3201      	adds	r2, #1
 8004010:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004014:	f7fe fcfa 	bl	8002a0c <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8004018:	f7ff ff40 	bl	8003e9c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 800401c:	b948      	cbnz	r0, 8004032 <vTaskDelay+0x46>
            portYIELD_WITHIN_API();
 800401e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	f3bf 8f6f 	isb	sy
    }
 8004032:	bd08      	pop	{r3, pc}
 8004034:	24000040 	.word	0x24000040

08004038 <xTaskDelayUntil>:
    {
 8004038:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxPreviousWakeTime );
 800403a:	b300      	cbz	r0, 800407e <xTaskDelayUntil+0x46>
        configASSERT( ( xTimeIncrement > 0U ) );
 800403c:	b941      	cbnz	r1, 8004050 <xTaskDelayUntil+0x18>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	e7fe      	b.n	800404e <xTaskDelayUntil+0x16>
        configASSERT( uxSchedulerSuspended == 0 );
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <xTaskDelayUntil+0xac>)
 8004052:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8004056:	b9da      	cbnz	r2, 8004090 <xTaskDelayUntil+0x58>
    ++uxSchedulerSuspended;
 8004058:	f8d3 44ec 	ldr.w	r4, [r3, #1260]	; 0x4ec
 800405c:	3401      	adds	r4, #1
 800405e:	f8c3 44ec 	str.w	r4, [r3, #1260]	; 0x4ec
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004062:	6804      	ldr	r4, [r0, #0]
            const TickType_t xConstTickCount = xTickCount;
 8004064:	681d      	ldr	r5, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004066:	1863      	adds	r3, r4, r1
 8004068:	bf2c      	ite	cs
 800406a:	2101      	movcs	r1, #1
 800406c:	2100      	movcc	r1, #0
            if( xConstTickCount < *pxPreviousWakeTime )
 800406e:	42ac      	cmp	r4, r5
 8004070:	d917      	bls.n	80040a2 <xTaskDelayUntil+0x6a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004072:	b389      	cbz	r1, 80040d8 <xTaskDelayUntil+0xa0>
 8004074:	429d      	cmp	r5, r3
 8004076:	d332      	bcc.n	80040de <xTaskDelayUntil+0xa6>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004078:	4614      	mov	r4, r2
            *pxPreviousWakeTime = xTimeToWake;
 800407a:	6003      	str	r3, [r0, #0]
            if( xShouldDelay != pdFALSE )
 800407c:	e01d      	b.n	80040ba <xTaskDelayUntil+0x82>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
        configASSERT( pxPreviousWakeTime );
 800408e:	e7fe      	b.n	800408e <xTaskDelayUntil+0x56>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
        configASSERT( uxSchedulerSuspended == 0 );
 80040a0:	e7fe      	b.n	80040a0 <xTaskDelayUntil+0x68>
            *pxPreviousWakeTime = xTimeToWake;
 80040a2:	6003      	str	r3, [r0, #0]
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80040a4:	b921      	cbnz	r1, 80040b0 <xTaskDelayUntil+0x78>
 80040a6:	429d      	cmp	r5, r3
 80040a8:	bf2c      	ite	cs
 80040aa:	2400      	movcs	r4, #0
 80040ac:	2401      	movcc	r4, #1
 80040ae:	b124      	cbz	r4, 80040ba <xTaskDelayUntil+0x82>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80040b0:	2100      	movs	r1, #0
 80040b2:	1b58      	subs	r0, r3, r5
 80040b4:	2401      	movs	r4, #1
 80040b6:	f7fe fca9 	bl	8002a0c <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80040ba:	f7ff feef 	bl	8003e9c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80040be:	b948      	cbnz	r0, 80040d4 <xTaskDelayUntil+0x9c>
            portYIELD_WITHIN_API();
 80040c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
    }
 80040d4:	4620      	mov	r0, r4
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80040d8:	460c      	mov	r4, r1
            *pxPreviousWakeTime = xTimeToWake;
 80040da:	6003      	str	r3, [r0, #0]
            if( xShouldDelay != pdFALSE )
 80040dc:	e7ed      	b.n	80040ba <xTaskDelayUntil+0x82>
            *pxPreviousWakeTime = xTimeToWake;
 80040de:	6003      	str	r3, [r0, #0]
            if( xShouldDelay != pdFALSE )
 80040e0:	e7e6      	b.n	80040b0 <xTaskDelayUntil+0x78>
 80040e2:	bf00      	nop
 80040e4:	24000040 	.word	0x24000040

080040e8 <vTaskGetInfo>:
    {
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	460c      	mov	r4, r1
 80040ec:	4616      	mov	r6, r2
        pxTCB = prvGetTCBFromHandle( xTask );
 80040ee:	b378      	cbz	r0, 8004150 <vTaskGetInfo+0x68>
 80040f0:	4605      	mov	r5, r0
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80040f2:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
        if( eState != eInvalid )
 80040f6:	2b05      	cmp	r3, #5
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80040f8:	e9c4 5200 	strd	r5, r2, [r4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80040fc:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8004100:	6122      	str	r2, [r4, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004102:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8004106:	61e2      	str	r2, [r4, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004108:	f8d5 20c4 	ldr.w	r2, [r5, #196]	; 0xc4
 800410c:	60a2      	str	r2, [r4, #8]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800410e:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
 8004112:	6162      	str	r2, [r4, #20]
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	61a2      	str	r2, [r4, #24]
        if( eState != eInvalid )
 800411a:	d01e      	beq.n	800415a <vTaskGetInfo+0x72>
            if( pxTCB == pxCurrentTCB )
 800411c:	4919      	ldr	r1, [pc, #100]	; (8004184 <vTaskGetInfo+0x9c>)
 800411e:	6848      	ldr	r0, [r1, #4]
 8004120:	42a8      	cmp	r0, r5
 8004122:	d018      	beq.n	8004156 <vTaskGetInfo+0x6e>
                        if( eState == eSuspended )
 8004124:	2b03      	cmp	r3, #3
                pxTaskStatus->eCurrentState = eState;
 8004126:	7323      	strb	r3, [r4, #12]
                        if( eState == eSuspended )
 8004128:	d01c      	beq.n	8004164 <vTaskGetInfo+0x7c>
        if( xGetFreeStackSpace != pdFALSE )
 800412a:	b17e      	cbz	r6, 800414c <vTaskGetInfo+0x64>
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800412c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	2aa5      	cmp	r2, #165	; 0xa5
 8004134:	d123      	bne.n	800417e <vTaskGetInfo+0x96>
 8004136:	f1c3 0001 	rsb	r0, r3, #1
            ulCount++;
 800413a:	18c1      	adds	r1, r0, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800413c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004140:	2aa5      	cmp	r2, #165	; 0xa5
 8004142:	d0fa      	beq.n	800413a <vTaskGetInfo+0x52>
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004144:	f3c1 018f 	ubfx	r1, r1, #2, #16
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004148:	8421      	strh	r1, [r4, #32]
    }
 800414a:	bd70      	pop	{r4, r5, r6, pc}
            pxTaskStatus->usStackHighWaterMark = 0;
 800414c:	8426      	strh	r6, [r4, #32]
    }
 800414e:	bd70      	pop	{r4, r5, r6, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <vTaskGetInfo+0x9c>)
 8004152:	6855      	ldr	r5, [r2, #4]
 8004154:	e7cd      	b.n	80040f2 <vTaskGetInfo+0xa>
                pxTaskStatus->eCurrentState = eRunning;
 8004156:	7322      	strb	r2, [r4, #12]
 8004158:	e7e7      	b.n	800412a <vTaskGetInfo+0x42>
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800415a:	4628      	mov	r0, r5
 800415c:	f7fe ffe8 	bl	8003130 <eTaskGetState>
 8004160:	7320      	strb	r0, [r4, #12]
 8004162:	e7e2      	b.n	800412a <vTaskGetInfo+0x42>
    ++uxSchedulerSuspended;
 8004164:	f8d1 34ec 	ldr.w	r3, [r1, #1260]	; 0x4ec
 8004168:	3301      	adds	r3, #1
 800416a:	f8c1 34ec 	str.w	r3, [r1, #1260]	; 0x4ec
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800416e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8004172:	b10b      	cbz	r3, 8004178 <vTaskGetInfo+0x90>
                                    pxTaskStatus->eCurrentState = eBlocked;
 8004174:	2302      	movs	r3, #2
 8004176:	7323      	strb	r3, [r4, #12]
                            ( void ) xTaskResumeAll();
 8004178:	f7ff fe90 	bl	8003e9c <xTaskResumeAll>
 800417c:	e7d5      	b.n	800412a <vTaskGetInfo+0x42>
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800417e:	2100      	movs	r1, #0
 8004180:	e7e2      	b.n	8004148 <vTaskGetInfo+0x60>
 8004182:	bf00      	nop
 8004184:	24000040 	.word	0x24000040

08004188 <xTaskCatchUpTicks>:
    configASSERT( uxSchedulerSuspended == 0 );
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <xTaskCatchUpTicks+0x34>)
 800418a:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 800418e:	b142      	cbz	r2, 80041a2 <xTaskCatchUpTicks+0x1a>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	e7fe      	b.n	80041a0 <xTaskCatchUpTicks+0x18>
    ++uxSchedulerSuspended;
 80041a2:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 80041a6:	3201      	adds	r2, #1
 80041a8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    xPendedTicks += xTicksToCatchUp;
 80041ac:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 80041b0:	4410      	add	r0, r2
 80041b2:	f8c3 04f8 	str.w	r0, [r3, #1272]	; 0x4f8
    xYieldOccurred = xTaskResumeAll();
 80041b6:	f7ff be71 	b.w	8003e9c <xTaskResumeAll>
 80041ba:	bf00      	nop
 80041bc:	24000040 	.word	0x24000040

080041c0 <prvListTasksWithinSingleList>:
    {
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80041c4:	680f      	ldr	r7, [r1, #0]
    {
 80041c6:	b083      	sub	sp, #12
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80041c8:	2f00      	cmp	r7, #0
 80041ca:	d063      	beq.n	8004294 <prvListTasksWithinSingleList+0xd4>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041cc:	684b      	ldr	r3, [r1, #4]
 80041ce:	f101 0b08 	add.w	fp, r1, #8
 80041d2:	460e      	mov	r6, r1
        UBaseType_t uxTask = 0;
 80041d4:	2700      	movs	r7, #0
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4690      	mov	r8, r2
 80041da:	4604      	mov	r4, r0
 80041dc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80042c4 <prvListTasksWithinSingleList+0x104>
 80041e0:	455b      	cmp	r3, fp
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80041e2:	463a      	mov	r2, r7
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e4:	bf08      	it	eq
 80041e6:	68cb      	ldreq	r3, [r1, #12]
 80041e8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	459b      	cmp	fp, r3
 80041f0:	6073      	str	r3, [r6, #4]
 80041f2:	d038      	beq.n	8004266 <prvListTasksWithinSingleList+0xa6>
 80041f4:	68dd      	ldr	r5, [r3, #12]
        pxTCB = prvGetTCBFromHandle( xTask );
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	d03b      	beq.n	8004272 <prvListTasksWithinSingleList+0xb2>
 80041fa:	462b      	mov	r3, r5
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80041fc:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004200:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004204:	6120      	str	r0, [r4, #16]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004206:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800420a:	6023      	str	r3, [r4, #0]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800420c:	60a0      	str	r0, [r4, #8]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800420e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004212:	61e1      	str	r1, [r4, #28]
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8004214:	e9c4 0205 	strd	r0, r2, [r4, #20]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8004218:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 800421c:	6060      	str	r0, [r4, #4]
            if( pxTCB == pxCurrentTCB )
 800421e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8004222:	4298      	cmp	r0, r3
 8004224:	d028      	beq.n	8004278 <prvListTasksWithinSingleList+0xb8>
                        if( eState == eSuspended )
 8004226:	f1b8 0f03 	cmp.w	r8, #3
                pxTaskStatus->eCurrentState = eState;
 800422a:	f884 800c 	strb.w	r8, [r4, #12]
                        if( eState == eSuspended )
 800422e:	d035      	beq.n	800429c <prvListTasksWithinSingleList+0xdc>
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004230:	780b      	ldrb	r3, [r1, #0]
 8004232:	2ba5      	cmp	r3, #165	; 0xa5
 8004234:	d124      	bne.n	8004280 <prvListTasksWithinSingleList+0xc0>
 8004236:	460b      	mov	r3, r1
 8004238:	f1c1 0e01 	rsb	lr, r1, #1
            ulCount++;
 800423c:	eb0e 0c03 	add.w	ip, lr, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004240:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004244:	28a5      	cmp	r0, #165	; 0xa5
 8004246:	d0f9      	beq.n	800423c <prvListTasksWithinSingleList+0x7c>
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004248:	f3cc 0c8f 	ubfx	ip, ip, #2, #16
            } while( pxNextTCB != pxFirstTCB );
 800424c:	45aa      	cmp	sl, r5
                uxTask++;
 800424e:	f107 0701 	add.w	r7, r7, #1
            } while( pxNextTCB != pxFirstTCB );
 8004252:	f104 0424 	add.w	r4, r4, #36	; 0x24
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004256:	f824 cc04 	strh.w	ip, [r4, #-4]
            } while( pxNextTCB != pxFirstTCB );
 800425a:	d01b      	beq.n	8004294 <prvListTasksWithinSingleList+0xd4>
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	6873      	ldr	r3, [r6, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	459b      	cmp	fp, r3
 8004262:	6073      	str	r3, [r6, #4]
 8004264:	d1c6      	bne.n	80041f4 <prvListTasksWithinSingleList+0x34>
 8004266:	f8db 3004 	ldr.w	r3, [fp, #4]
 800426a:	68dd      	ldr	r5, [r3, #12]
 800426c:	6073      	str	r3, [r6, #4]
        pxTCB = prvGetTCBFromHandle( xTask );
 800426e:	2d00      	cmp	r5, #0
 8004270:	d1c3      	bne.n	80041fa <prvListTasksWithinSingleList+0x3a>
 8004272:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004276:	e7c1      	b.n	80041fc <prvListTasksWithinSingleList+0x3c>
                pxTaskStatus->eCurrentState = eRunning;
 8004278:	7322      	strb	r2, [r4, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800427a:	780b      	ldrb	r3, [r1, #0]
 800427c:	2ba5      	cmp	r3, #165	; 0xa5
 800427e:	d0da      	beq.n	8004236 <prvListTasksWithinSingleList+0x76>
 8004280:	f04f 0c00 	mov.w	ip, #0
            } while( pxNextTCB != pxFirstTCB );
 8004284:	45aa      	cmp	sl, r5
                uxTask++;
 8004286:	f107 0701 	add.w	r7, r7, #1
            } while( pxNextTCB != pxFirstTCB );
 800428a:	f104 0424 	add.w	r4, r4, #36	; 0x24
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800428e:	f824 cc04 	strh.w	ip, [r4, #-4]
            } while( pxNextTCB != pxFirstTCB );
 8004292:	d1e3      	bne.n	800425c <prvListTasksWithinSingleList+0x9c>
    }
 8004294:	4638      	mov	r0, r7
 8004296:	b003      	add	sp, #12
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ++uxSchedulerSuspended;
 800429c:	f8d9 04ec 	ldr.w	r0, [r9, #1260]	; 0x4ec
 80042a0:	3001      	adds	r0, #1
 80042a2:	f8c9 04ec 	str.w	r0, [r9, #1260]	; 0x4ec
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042a6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80042aa:	b110      	cbz	r0, 80042b2 <prvListTasksWithinSingleList+0xf2>
                                    pxTaskStatus->eCurrentState = eBlocked;
 80042ac:	f04f 0102 	mov.w	r1, #2
 80042b0:	7321      	strb	r1, [r4, #12]
 80042b2:	9301      	str	r3, [sp, #4]
                            ( void ) xTaskResumeAll();
 80042b4:	f7ff fdf2 	bl	8003e9c <xTaskResumeAll>
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80042c0:	e7b6      	b.n	8004230 <prvListTasksWithinSingleList+0x70>
 80042c2:	bf00      	nop
 80042c4:	24000040 	.word	0x24000040

080042c8 <uxTaskGetSystemState>:
    {
 80042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ++uxSchedulerSuspended;
 80042cc:	4d52      	ldr	r5, [pc, #328]	; (8004418 <uxTaskGetSystemState+0x150>)
    {
 80042ce:	b083      	sub	sp, #12
    ++uxSchedulerSuspended;
 80042d0:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 80042d4:	3301      	adds	r3, #1
    {
 80042d6:	e9cd 0200 	strd	r0, r2, [sp]
    ++uxSchedulerSuspended;
 80042da:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80042de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80042e0:	428b      	cmp	r3, r1
 80042e2:	f200 8091 	bhi.w	8004408 <uxTaskGetSystemState+0x140>
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80042e6:	2700      	movs	r7, #0
 80042e8:	2638      	movs	r6, #56	; 0x38
 80042ea:	f505 6890 	add.w	r8, r5, #1152	; 0x480
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80042ee:	46bb      	mov	fp, r7
 80042f0:	46ba      	mov	sl, r7
 80042f2:	46b1      	mov	r9, r6
                    uxQueue--;
 80042f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80042f8:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 80042fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d042      	beq.n	800438c <uxTaskGetSystemState+0xc4>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004306:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800430a:	eb0a 01ca 	add.w	r1, sl, sl, lsl #3
        UBaseType_t uxTask = 0;
 800430e:	f04f 0c00 	mov.w	ip, #0
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	685e      	ldr	r6, [r3, #4]
 8004314:	9b00      	ldr	r3, [sp, #0]
 8004316:	4546      	cmp	r6, r8
 8004318:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800431c:	bf08      	it	eq
 800431e:	f8d8 6004 	ldreq.w	r6, [r8, #4]
 8004322:	f8d6 e00c 	ldr.w	lr, [r6, #12]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004326:	6876      	ldr	r6, [r6, #4]
 8004328:	4546      	cmp	r6, r8
 800432a:	f848 6c04 	str.w	r6, [r8, #-4]
 800432e:	d065      	beq.n	80043fc <uxTaskGetSystemState+0x134>
 8004330:	68f0      	ldr	r0, [r6, #12]
        pxTCB = prvGetTCBFromHandle( xTask );
 8004332:	2800      	cmp	r0, #0
 8004334:	d060      	beq.n	80043f8 <uxTaskGetSystemState+0x130>
 8004336:	4602      	mov	r2, r0
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004338:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800433c:	600a      	str	r2, [r1, #0]
            if( pxTCB == pxCurrentTCB )
 800433e:	686f      	ldr	r7, [r5, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004340:	610b      	str	r3, [r1, #16]
            if( pxTCB == pxCurrentTCB )
 8004342:	1bd7      	subs	r7, r2, r7
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004344:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004348:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800434c:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
            if( pxTCB == pxCurrentTCB )
 8004350:	bf18      	it	ne
 8004352:	2701      	movne	r7, #1
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004354:	608c      	str	r4, [r1, #8]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004356:	6994      	ldr	r4, [r2, #24]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004358:	61cb      	str	r3, [r1, #28]
            if( pxTCB == pxCurrentTCB )
 800435a:	730f      	strb	r7, [r1, #12]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800435c:	614c      	str	r4, [r1, #20]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800435e:	604a      	str	r2, [r1, #4]
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8004360:	f8c1 b018 	str.w	fp, [r1, #24]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	2aa5      	cmp	r2, #165	; 0xa5
 8004368:	d14c      	bne.n	8004404 <uxTaskGetSystemState+0x13c>
 800436a:	f1c3 0701 	rsb	r7, r3, #1
            ulCount++;
 800436e:	18fc      	adds	r4, r7, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004370:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004374:	2aa5      	cmp	r2, #165	; 0xa5
 8004376:	d0fa      	beq.n	800436e <uxTaskGetSystemState+0xa6>
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004378:	f3c4 048f 	ubfx	r4, r4, #2, #16
            } while( pxNextTCB != pxFirstTCB );
 800437c:	4586      	cmp	lr, r0
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800437e:	840c      	strh	r4, [r1, #32]
                uxTask++;
 8004380:	f10c 0c01 	add.w	ip, ip, #1
            } while( pxNextTCB != pxFirstTCB );
 8004384:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8004388:	d1cd      	bne.n	8004326 <uxTaskGetSystemState+0x5e>
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800438a:	44e2      	add	sl, ip
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438c:	f1a8 0814 	sub.w	r8, r8, #20
 8004390:	f1b9 0f00 	cmp.w	r9, #0
 8004394:	d1ae      	bne.n	80042f4 <uxTaskGetSystemState+0x2c>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004396:	9c00      	ldr	r4, [sp, #0]
 8004398:	eb0a 00ca 	add.w	r0, sl, sl, lsl #3
 800439c:	4657      	mov	r7, sl
 800439e:	6a29      	ldr	r1, [r5, #32]
 80043a0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80043a4:	2202      	movs	r2, #2
 80043a6:	f7ff ff0b 	bl	80041c0 <prvListTasksWithinSingleList>
 80043aa:	4407      	add	r7, r0
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80043ac:	69e9      	ldr	r1, [r5, #28]
 80043ae:	2202      	movs	r2, #2
 80043b0:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80043b4:	4625      	mov	r5, r4
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80043b6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80043ba:	f7ff ff01 	bl	80041c0 <prvListTasksWithinSingleList>
 80043be:	4407      	add	r7, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80043c0:	2204      	movs	r2, #4
 80043c2:	4916      	ldr	r1, [pc, #88]	; (800441c <uxTaskGetSystemState+0x154>)
 80043c4:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80043c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80043cc:	f7ff fef8 	bl	80041c0 <prvListTasksWithinSingleList>
 80043d0:	183c      	adds	r4, r7, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80043d2:	2203      	movs	r2, #3
 80043d4:	4912      	ldr	r1, [pc, #72]	; (8004420 <uxTaskGetSystemState+0x158>)
 80043d6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80043da:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80043de:	f7ff feef 	bl	80041c0 <prvListTasksWithinSingleList>
                        if( pulTotalRunTime != NULL )
 80043e2:	9b01      	ldr	r3, [sp, #4]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80043e4:	4404      	add	r4, r0
                        if( pulTotalRunTime != NULL )
 80043e6:	b183      	cbz	r3, 800440a <uxTaskGetSystemState+0x142>
                            *pulTotalRunTime = 0;
 80043e8:	f8c3 9000 	str.w	r9, [r3]
        ( void ) xTaskResumeAll();
 80043ec:	f7ff fd56 	bl	8003e9c <xTaskResumeAll>
    }
 80043f0:	4620      	mov	r0, r4
 80043f2:	b003      	add	sp, #12
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 80043f8:	686a      	ldr	r2, [r5, #4]
 80043fa:	e79d      	b.n	8004338 <uxTaskGetSystemState+0x70>
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	6876      	ldr	r6, [r6, #4]
 80043fe:	f848 6c04 	str.w	r6, [r8, #-4]
 8004402:	e795      	b.n	8004330 <uxTaskGetSystemState+0x68>
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004404:	2400      	movs	r4, #0
 8004406:	e7b9      	b.n	800437c <uxTaskGetSystemState+0xb4>
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004408:	2400      	movs	r4, #0
        ( void ) xTaskResumeAll();
 800440a:	f7ff fd47 	bl	8003e9c <xTaskResumeAll>
    }
 800440e:	4620      	mov	r0, r4
 8004410:	b003      	add	sp, #12
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	bf00      	nop
 8004418:	24000040 	.word	0x24000040
 800441c:	24000508 	.word	0x24000508
 8004420:	24000048 	.word	0x24000048

08004424 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
 8004424:	2800      	cmp	r0, #0
 8004426:	d034      	beq.n	8004492 <vTaskPlaceOnEventList+0x6e>
{
 8004428:	b570      	push	{r4, r5, r6, lr}
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800442a:	4c22      	ldr	r4, [pc, #136]	; (80044b4 <vTaskPlaceOnEventList+0x90>)
 800442c:	460d      	mov	r5, r1
 800442e:	6861      	ldr	r1, [r4, #4]
 8004430:	3198      	adds	r1, #152	; 0x98
 8004432:	f7fc f9a9 	bl	8000788 <vListInsert>
    const TickType_t xConstTickCount = xTickCount;
 8004436:	6826      	ldr	r6, [r4, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004438:	6860      	ldr	r0, [r4, #4]
 800443a:	3084      	adds	r0, #132	; 0x84
 800443c:	f7fc f9cc 	bl	80007d8 <uxListRemove>
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004440:	1c6b      	adds	r3, r5, #1
 8004442:	d117      	bne.n	8004474 <vTaskPlaceOnEventList+0x50>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	6860      	ldr	r0, [r4, #4]
 8004448:	6899      	ldr	r1, [r3, #8]
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8004450:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004454:	6861      	ldr	r1, [r4, #4]
 8004456:	689d      	ldr	r5, [r3, #8]
 8004458:	3184      	adds	r1, #132	; 0x84
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	6860      	ldr	r0, [r4, #4]
 800445e:	6069      	str	r1, [r5, #4]
 8004460:	3284      	adds	r2, #132	; 0x84
 8004462:	68a1      	ldr	r1, [r4, #8]
 8004464:	f104 0508 	add.w	r5, r4, #8
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	3101      	adds	r1, #1
 800446c:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
 8004470:	60a1      	str	r1, [r4, #8]
}
 8004472:	bd70      	pop	{r4, r5, r6, pc}
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004474:	19ad      	adds	r5, r5, r6
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004476:	6863      	ldr	r3, [r4, #4]
 8004478:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 800447c:	d212      	bcs.n	80044a4 <vTaskPlaceOnEventList+0x80>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800447e:	6a20      	ldr	r0, [r4, #32]
 8004480:	6861      	ldr	r1, [r4, #4]
 8004482:	3184      	adds	r1, #132	; 0x84
 8004484:	f7fc f980 	bl	8000788 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448a:	429d      	cmp	r5, r3
 800448c:	d2f1      	bcs.n	8004472 <vTaskPlaceOnEventList+0x4e>
                        xNextTaskUnblockTime = xTimeToWake;
 800448e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 80044a2:	e7fe      	b.n	80044a2 <vTaskPlaceOnEventList+0x7e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a4:	69e0      	ldr	r0, [r4, #28]
 80044a6:	6861      	ldr	r1, [r4, #4]
}
 80044a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ac:	3184      	adds	r1, #132	; 0x84
 80044ae:	f7fc b96b 	b.w	8000788 <vListInsert>
 80044b2:	bf00      	nop
 80044b4:	24000040 	.word	0x24000040

080044b8 <vTaskPlaceOnUnorderedEventList>:
    configASSERT( pxEventList );
 80044b8:	b368      	cbz	r0, 8004516 <vTaskPlaceOnUnorderedEventList+0x5e>
    configASSERT( uxSchedulerSuspended != 0 );
 80044ba:	4603      	mov	r3, r0
{
 80044bc:	b4f0      	push	{r4, r5, r6, r7}
    configASSERT( uxSchedulerSuspended != 0 );
 80044be:	4c1a      	ldr	r4, [pc, #104]	; (8004528 <vTaskPlaceOnUnorderedEventList+0x70>)
 80044c0:	f8d4 04ec 	ldr.w	r0, [r4, #1260]	; 0x4ec
 80044c4:	b940      	cbnz	r0, 80044d8 <vTaskPlaceOnUnorderedEventList+0x20>
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	e7fe      	b.n	80044d6 <vTaskPlaceOnUnorderedEventList+0x1e>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80044d8:	6865      	ldr	r5, [r4, #4]
 80044da:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044de:	4610      	mov	r0, r2
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044e0:	685a      	ldr	r2, [r3, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80044e2:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	6895      	ldr	r5, [r2, #8]
 80044ea:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
 80044ee:	6861      	ldr	r1, [r4, #4]
 80044f0:	6866      	ldr	r6, [r4, #4]
 80044f2:	f8c1 50a0 	str.w	r5, [r1, #160]	; 0xa0
 80044f6:	6861      	ldr	r1, [r4, #4]
 80044f8:	3698      	adds	r6, #152	; 0x98
 80044fa:	6865      	ldr	r5, [r4, #4]
 80044fc:	681c      	ldr	r4, [r3, #0]
 80044fe:	3198      	adds	r1, #152	; 0x98
 8004500:	6897      	ldr	r7, [r2, #8]
 8004502:	3401      	adds	r4, #1
 8004504:	607e      	str	r6, [r7, #4]
 8004506:	6091      	str	r1, [r2, #8]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004508:	2101      	movs	r1, #1
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800450a:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800450e:	601c      	str	r4, [r3, #0]
}
 8004510:	bcf0      	pop	{r4, r5, r6, r7}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004512:	f7fe ba7b 	b.w	8002a0c <prvAddCurrentTaskToDelayedList>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 8004526:	e7fe      	b.n	8004526 <vTaskPlaceOnUnorderedEventList+0x6e>
 8004528:	24000040 	.word	0x24000040

0800452c <vTaskPlaceOnEventListRestricted>:
        configASSERT( pxEventList );
 800452c:	2800      	cmp	r0, #0
 800452e:	d04d      	beq.n	80045cc <vTaskPlaceOnEventListRestricted+0xa0>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004530:	6843      	ldr	r3, [r0, #4]
    {
 8004532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004536:	4c2d      	ldr	r4, [pc, #180]	; (80045ec <vTaskPlaceOnEventListRestricted+0xc0>)
 8004538:	4688      	mov	r8, r1
 800453a:	689e      	ldr	r6, [r3, #8]
 800453c:	6861      	ldr	r1, [r4, #4]
 800453e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	6867      	ldr	r7, [r4, #4]
 8004546:	f8c1 60a0 	str.w	r6, [r1, #160]	; 0xa0
 800454a:	6866      	ldr	r6, [r4, #4]
 800454c:	3798      	adds	r7, #152	; 0x98
 800454e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004552:	6801      	ldr	r1, [r0, #0]
 8004554:	3698      	adds	r6, #152	; 0x98
 8004556:	689d      	ldr	r5, [r3, #8]
 8004558:	3101      	adds	r1, #1
 800455a:	606f      	str	r7, [r5, #4]
 800455c:	609e      	str	r6, [r3, #8]
 800455e:	f8cc 00a8 	str.w	r0, [ip, #168]	; 0xa8
 8004562:	6001      	str	r1, [r0, #0]
        if( xWaitIndefinitely != pdFALSE )
 8004564:	b1ea      	cbz	r2, 80045a2 <vTaskPlaceOnEventListRestricted+0x76>
    const TickType_t xConstTickCount = xTickCount;
 8004566:	6823      	ldr	r3, [r4, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004568:	6860      	ldr	r0, [r4, #4]
 800456a:	3084      	adds	r0, #132	; 0x84
 800456c:	f7fc f934 	bl	80007d8 <uxListRemove>
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	6860      	ldr	r0, [r4, #4]
 8004574:	6899      	ldr	r1, [r3, #8]
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800457c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004580:	6861      	ldr	r1, [r4, #4]
 8004582:	689d      	ldr	r5, [r3, #8]
 8004584:	3184      	adds	r1, #132	; 0x84
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	6860      	ldr	r0, [r4, #4]
 800458a:	6069      	str	r1, [r5, #4]
 800458c:	3284      	adds	r2, #132	; 0x84
 800458e:	68a1      	ldr	r1, [r4, #8]
 8004590:	f104 0508 	add.w	r5, r4, #8
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	3101      	adds	r1, #1
 8004598:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
 800459c:	60a1      	str	r1, [r4, #8]
    }
 800459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const TickType_t xConstTickCount = xTickCount;
 80045a2:	6826      	ldr	r6, [r4, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a4:	6860      	ldr	r0, [r4, #4]
 80045a6:	3084      	adds	r0, #132	; 0x84
 80045a8:	f7fc f916 	bl	80007d8 <uxListRemove>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80045ac:	eb18 0506 	adds.w	r5, r8, r6
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 80045b6:	d212      	bcs.n	80045de <vTaskPlaceOnEventListRestricted+0xb2>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b8:	6a20      	ldr	r0, [r4, #32]
 80045ba:	6861      	ldr	r1, [r4, #4]
 80045bc:	3184      	adds	r1, #132	; 0x84
 80045be:	f7fc f8e3 	bl	8000788 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80045c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c4:	429d      	cmp	r5, r3
 80045c6:	d2ea      	bcs.n	800459e <vTaskPlaceOnEventListRestricted+0x72>
                        xNextTaskUnblockTime = xTimeToWake;
 80045c8:	6265      	str	r5, [r4, #36]	; 0x24
    }
 80045ca:	e7e8      	b.n	800459e <vTaskPlaceOnEventListRestricted+0x72>
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 80045dc:	e7fe      	b.n	80045dc <vTaskPlaceOnEventListRestricted+0xb0>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045de:	69e0      	ldr	r0, [r4, #28]
 80045e0:	6861      	ldr	r1, [r4, #4]
    }
 80045e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e6:	3184      	adds	r1, #132	; 0x84
 80045e8:	f7fc b8ce 	b.w	8000788 <vListInsert>
 80045ec:	24000040 	.word	0x24000040

080045f0 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	68c3      	ldr	r3, [r0, #12]
 80045f2:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d06e      	beq.n	80046d6 <xTaskRemoveFromEventList+0xe6>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80045f8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80045fc:	e9d3 0127 	ldrd	r0, r1, [r3, #156]	; 0x9c
{
 8004600:	b4f0      	push	{r4, r5, r6, r7}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004602:	6081      	str	r1, [r0, #8]
 8004604:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004608:	6048      	str	r0, [r1, #4]
 800460a:	6850      	ldr	r0, [r2, #4]
 800460c:	42a0      	cmp	r0, r4
 800460e:	f04f 0000 	mov.w	r0, #0
 8004612:	bf08      	it	eq
 8004614:	6051      	streq	r1, [r2, #4]
 8004616:	6811      	ldr	r1, [r2, #0]
 8004618:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 800461c:	3901      	subs	r1, #1
 800461e:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004620:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <xTaskRemoveFromEventList+0xf8>)
 8004622:	f8d2 14ec 	ldr.w	r1, [r2, #1260]	; 0x4ec
 8004626:	b1e9      	cbz	r1, 8004664 <xTaskRemoveFromEventList+0x74>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004628:	f8d2 14b8 	ldr.w	r1, [r2, #1208]	; 0x4b8
 800462c:	f202 45b4 	addw	r5, r2, #1204	; 0x4b4
 8004630:	6888      	ldr	r0, [r1, #8]
 8004632:	e9c3 1027 	strd	r1, r0, [r3, #156]	; 0x9c
 8004636:	6888      	ldr	r0, [r1, #8]
 8004638:	6044      	str	r4, [r0, #4]
 800463a:	f8d2 04b4 	ldr.w	r0, [r2, #1204]	; 0x4b4
 800463e:	608c      	str	r4, [r1, #8]
 8004640:	1c41      	adds	r1, r0, #1
 8004642:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004646:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800464a:	f8c2 14b4 	str.w	r1, [r2, #1204]	; 0x4b4
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800464e:	6853      	ldr	r3, [r2, #4]
 8004650:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004654:	4283      	cmp	r3, r0
 8004656:	d23b      	bcs.n	80046d0 <xTaskRemoveFromEventList+0xe0>
        xYieldPending = pdTRUE;
 8004658:	2301      	movs	r3, #1
}
 800465a:	bcf0      	pop	{r4, r5, r6, r7}
        xReturn = pdTRUE;
 800465c:	4618      	mov	r0, r3
        xYieldPending = pdTRUE;
 800465e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
}
 8004662:	4770      	bx	lr
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004664:	e9d3 0422 	ldrd	r0, r4, [r3, #136]	; 0x88
 8004668:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800466c:	f103 0784 	add.w	r7, r3, #132	; 0x84
 8004670:	6084      	str	r4, [r0, #8]
 8004672:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8004676:	6060      	str	r0, [r4, #4]
 8004678:	6848      	ldr	r0, [r1, #4]
 800467a:	42b8      	cmp	r0, r7
 800467c:	6808      	ldr	r0, [r1, #0]
 800467e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004682:	bf08      	it	eq
 8004684:	604c      	streq	r4, [r1, #4]
 8004686:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004688:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800468c:	f8d2 14e4 	ldr.w	r1, [r2, #1252]	; 0x4e4
 8004690:	4288      	cmp	r0, r1
 8004692:	d901      	bls.n	8004698 <xTaskRemoveFromEventList+0xa8>
 8004694:	f8c2 04e4 	str.w	r0, [r2, #1252]	; 0x4e4
 8004698:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800469c:	4e13      	ldr	r6, [pc, #76]	; (80046ec <xTaskRemoveFromEventList+0xfc>)
 800469e:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 80046a2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80046a6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80046a8:	68a5      	ldr	r5, [r4, #8]
 80046aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 80046ae:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
 80046b2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80046b4:	f105 0c01 	add.w	ip, r5, #1
 80046b8:	68a5      	ldr	r5, [r4, #8]
 80046ba:	606f      	str	r7, [r5, #4]
 80046bc:	60a7      	str	r7, [r4, #8]
 80046be:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
 80046c2:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046c6:	6853      	ldr	r3, [r2, #4]
 80046c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046cc:	4283      	cmp	r3, r0
 80046ce:	d3c3      	bcc.n	8004658 <xTaskRemoveFromEventList+0x68>
        xReturn = pdFALSE;
 80046d0:	2000      	movs	r0, #0
}
 80046d2:	bcf0      	pop	{r4, r5, r6, r7}
 80046d4:	4770      	bx	lr
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80046e6:	e7fe      	b.n	80046e6 <xTaskRemoveFromEventList+0xf6>
 80046e8:	24000040 	.word	0x24000040
 80046ec:	2400006c 	.word	0x2400006c

080046f0 <vTaskRemoveFromUnorderedEventList>:
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80046f0:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <vTaskRemoveFromUnorderedEventList+0xd0>)
 80046f2:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 80046f6:	b943      	cbnz	r3, 800470a <vTaskRemoveFromUnorderedEventList+0x1a>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	e7fe      	b.n	8004708 <vTaskRemoveFromUnorderedEventList+0x18>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800470a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470e:	68c3      	ldr	r3, [r0, #12]
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004710:	6001      	str	r1, [r0, #0]
    configASSERT( pxUnblockedTCB );
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04b      	beq.n	80047ae <vTaskRemoveFromUnorderedEventList+0xbe>
{
 8004716:	b4f0      	push	{r4, r5, r6, r7}
    listREMOVE_ITEM( pxEventListItem );
 8004718:	6904      	ldr	r4, [r0, #16]
 800471a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800471e:	6866      	ldr	r6, [r4, #4]
 8004720:	608d      	str	r5, [r1, #8]
 8004722:	6885      	ldr	r5, [r0, #8]
 8004724:	4286      	cmp	r6, r0
 8004726:	6069      	str	r1, [r5, #4]
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	bf08      	it	eq
 800472e:	6065      	streq	r5, [r4, #4]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004730:	f103 0584 	add.w	r5, r3, #132	; 0x84
    listREMOVE_ITEM( pxEventListItem );
 8004734:	6101      	str	r1, [r0, #16]
 8004736:	6820      	ldr	r0, [r4, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004738:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    listREMOVE_ITEM( pxEventListItem );
 800473c:	3801      	subs	r0, #1
 800473e:	6020      	str	r0, [r4, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004740:	e9d3 0422 	ldrd	r0, r4, [r3, #136]	; 0x88
 8004744:	6084      	str	r4, [r0, #8]
 8004746:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800474a:	6060      	str	r0, [r4, #4]
 800474c:	6848      	ldr	r0, [r1, #4]
 800474e:	42a8      	cmp	r0, r5
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004756:	bf08      	it	eq
 8004758:	604c      	streq	r4, [r1, #4]
 800475a:	6008      	str	r0, [r1, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800475c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8004760:	f8d2 14e4 	ldr.w	r1, [r2, #1252]	; 0x4e4
 8004764:	4288      	cmp	r0, r1
 8004766:	d901      	bls.n	800476c <vTaskRemoveFromUnorderedEventList+0x7c>
 8004768:	f8c2 04e4 	str.w	r0, [r2, #1252]	; 0x4e4
 800476c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8004770:	4f14      	ldr	r7, [pc, #80]	; (80047c4 <vTaskRemoveFromUnorderedEventList+0xd4>)
 8004772:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8004776:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800477a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800477c:	68a6      	ldr	r6, [r4, #8]
 800477e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 8004782:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
 8004786:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004788:	f106 0c01 	add.w	ip, r6, #1
 800478c:	68a6      	ldr	r6, [r4, #8]
 800478e:	6075      	str	r5, [r6, #4]
 8004790:	60a5      	str	r5, [r4, #8]
 8004792:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
 8004796:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800479a:	6853      	ldr	r3, [r2, #4]
 800479c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047a0:	4298      	cmp	r0, r3
 80047a2:	d902      	bls.n	80047aa <vTaskRemoveFromUnorderedEventList+0xba>
        xYieldPending = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
}
 80047aa:	bcf0      	pop	{r4, r5, r6, r7}
 80047ac:	4770      	bx	lr
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80047be:	e7fe      	b.n	80047be <vTaskRemoveFromUnorderedEventList+0xce>
 80047c0:	24000040 	.word	0x24000040
 80047c4:	2400006c 	.word	0x2400006c

080047c8 <vTaskSwitchContext>:
{
 80047c8:	b510      	push	{r4, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ca:	4c2a      	ldr	r4, [pc, #168]	; (8004874 <vTaskSwitchContext+0xac>)
 80047cc:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 80047d0:	b11b      	cbz	r3, 80047da <vTaskSwitchContext+0x12>
        xYieldPending = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
}
 80047d8:	bd10      	pop	{r4, pc}
        xYieldPending = pdFALSE;
 80047da:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
        taskCHECK_FOR_STACK_OVERFLOW();
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80047ea:	d103      	bne.n	80047f4 <vTaskSwitchContext+0x2c>
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80047f2:	d032      	beq.n	800485a <vTaskSwitchContext+0x92>
 80047f4:	6860      	ldr	r0, [r4, #4]
 80047f6:	6861      	ldr	r1, [r4, #4]
 80047f8:	31b4      	adds	r1, #180	; 0xb4
 80047fa:	f005 facb 	bl	8009d94 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fe:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8004802:	e001      	b.n	8004808 <vTaskSwitchContext+0x40>
 8004804:	b303      	cbz	r3, 8004848 <vTaskSwitchContext+0x80>
 8004806:	3b01      	subs	r3, #1
 8004808:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800480c:	0099      	lsls	r1, r3, #2
 800480e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004814:	2a00      	cmp	r2, #0
 8004816:	d0f5      	beq.n	8004804 <vTaskSwitchContext+0x3c>
 8004818:	4419      	add	r1, r3
 800481a:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 800481e:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
 8004822:	6850      	ldr	r0, [r2, #4]
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <vTaskSwitchContext+0xb0>)
 8004826:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
 800482a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800482e:	f101 0208 	add.w	r2, r1, #8
 8004832:	4290      	cmp	r0, r2
 8004834:	d01a      	beq.n	800486c <vTaskSwitchContext+0xa4>
 8004836:	68c1      	ldr	r1, [r0, #12]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004838:	4a10      	ldr	r2, [pc, #64]	; (800487c <vTaskSwitchContext+0xb4>)
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483a:	6061      	str	r1, [r4, #4]
 800483c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	33d4      	adds	r3, #212	; 0xd4
 8004844:	6013      	str	r3, [r2, #0]
}
 8004846:	bd10      	pop	{r4, pc}
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004858:	e7fe      	b.n	8004858 <vTaskSwitchContext+0x90>
        taskCHECK_FOR_STACK_OVERFLOW();
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004860:	d1c8      	bne.n	80047f4 <vTaskSwitchContext+0x2c>
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8004868:	d1c4      	bne.n	80047f4 <vTaskSwitchContext+0x2c>
 800486a:	e7c8      	b.n	80047fe <vTaskSwitchContext+0x36>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	6840      	ldr	r0, [r0, #4]
 800486e:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
 8004872:	e7e0      	b.n	8004836 <vTaskSwitchContext+0x6e>
 8004874:	24000040 	.word	0x24000040
 8004878:	2400006c 	.word	0x2400006c
 800487c:	24009074 	.word	0x24009074

08004880 <vTaskSuspend>:
    {
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4604      	mov	r4, r0
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004884:	4d34      	ldr	r5, [pc, #208]	; (8004958 <vTaskSuspend+0xd8>)
        taskENTER_CRITICAL();
 8004886:	f005 f9cd 	bl	8009c24 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800488a:	2c00      	cmp	r4, #0
 800488c:	d048      	beq.n	8004920 <vTaskSuspend+0xa0>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488e:	f104 0684 	add.w	r6, r4, #132	; 0x84
 8004892:	4630      	mov	r0, r6
 8004894:	f7fb ffa0 	bl	80007d8 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004898:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800489c:	b11b      	cbz	r3, 80048a6 <vTaskSuspend+0x26>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800489e:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80048a2:	f7fb ff99 	bl	80007d8 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80048a6:	4631      	mov	r1, r6
 80048a8:	482c      	ldr	r0, [pc, #176]	; (800495c <vTaskSuspend+0xdc>)
 80048aa:	f7fb ff85 	bl	80007b8 <vListInsertEnd>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80048ae:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d102      	bne.n	80048bc <vTaskSuspend+0x3c>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80048bc:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d102      	bne.n	80048ca <vTaskSuspend+0x4a>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80048ca:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d102      	bne.n	80048d8 <vTaskSuspend+0x58>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
        taskEXIT_CRITICAL();
 80048d8:	f005 f9ba 	bl	8009c50 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 80048dc:	f8d5 34dc 	ldr.w	r3, [r5, #1244]	; 0x4dc
 80048e0:	b993      	cbnz	r3, 8004908 <vTaskSuspend+0x88>
        if( pxTCB == pxCurrentTCB )
 80048e2:	686b      	ldr	r3, [r5, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d000      	beq.n	80048ea <vTaskSuspend+0x6a>
    }
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
            if( xSchedulerRunning != pdFALSE )
 80048ea:	f8d5 34dc 	ldr.w	r3, [r5, #1244]	; 0x4dc
 80048ee:	b1eb      	cbz	r3, 800492c <vTaskSuspend+0xac>
                configASSERT( uxSchedulerSuspended == 0 );
 80048f0:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 80048f4:	b303      	cbz	r3, 8004938 <vTaskSuspend+0xb8>
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	e7fe      	b.n	8004906 <vTaskSuspend+0x86>
            taskENTER_CRITICAL();
 8004908:	f005 f98c 	bl	8009c24 <vPortEnterCritical>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490c:	6a2b      	ldr	r3, [r5, #32]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b143      	cbz	r3, 8004924 <vTaskSuspend+0xa4>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004912:	6a2b      	ldr	r3, [r5, #32]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	626b      	str	r3, [r5, #36]	; 0x24
            taskEXIT_CRITICAL();
 800491a:	f005 f999 	bl	8009c50 <vPortExitCritical>
 800491e:	e7e0      	b.n	80048e2 <vTaskSuspend+0x62>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004920:	686c      	ldr	r4, [r5, #4]
 8004922:	e7b4      	b.n	800488e <vTaskSuspend+0xe>
        xNextTaskUnblockTime = portMAX_DELAY;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004928:	626b      	str	r3, [r5, #36]	; 0x24
 800492a:	e7f6      	b.n	800491a <vTaskSuspend+0x9a>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800492c:	68a9      	ldr	r1, [r5, #8]
 800492e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004930:	4291      	cmp	r1, r2
 8004932:	d10c      	bne.n	800494e <vTaskSuspend+0xce>
                    pxCurrentTCB = NULL;
 8004934:	606b      	str	r3, [r5, #4]
    }
 8004936:	bd70      	pop	{r4, r5, r6, pc}
                portYIELD_WITHIN_API();
 8004938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800493c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004940:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
    }
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    vTaskSwitchContext();
 8004952:	f7ff bf39 	b.w	80047c8 <vTaskSwitchContext>
 8004956:	bf00      	nop
 8004958:	24000040 	.word	0x24000040
 800495c:	24000048 	.word	0x24000048

08004960 <uxTaskResetEventItemValue>:
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <uxTaskResetEventItemValue+0x1c>)
 8004962:	6859      	ldr	r1, [r3, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004964:	6858      	ldr	r0, [r3, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800496c:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	24000040 	.word	0x24000040

08004980 <xTaskGetCurrentTaskHandle>:
        xReturn = pxCurrentTCB;
 8004980:	4b01      	ldr	r3, [pc, #4]	; (8004988 <xTaskGetCurrentTaskHandle+0x8>)
 8004982:	6858      	ldr	r0, [r3, #4]
    }
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	24000040 	.word	0x24000040

0800498c <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <vTaskMissedYield+0xc>)
 800498e:	2201      	movs	r2, #1
 8004990:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	24000040 	.word	0x24000040

0800499c <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <xTaskGetSchedulerState+0x1c>)
 800499e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	; 0x4dc
 80049a2:	b132      	cbz	r2, 80049b2 <xTaskGetSchedulerState+0x16>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
                xReturn = taskSCHEDULER_SUSPENDED;
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2002      	moveq	r0, #2
 80049ae:	2000      	movne	r0, #0
 80049b0:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 80049b2:	2001      	movs	r0, #1
    }
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	24000040 	.word	0x24000040

080049bc <xTaskPriorityInherit>:
    {
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 80049be:	4604      	mov	r4, r0
 80049c0:	b308      	cbz	r0, 8004a06 <xTaskPriorityInherit+0x4a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80049c2:	4d29      	ldr	r5, [pc, #164]	; (8004a68 <xTaskPriorityInherit+0xac>)
 80049c4:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 80049c8:	686a      	ldr	r2, [r5, #4]
 80049ca:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d21a      	bcs.n	8004a08 <xTaskPriorityInherit+0x4c>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049d2:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	db06      	blt.n	80049e8 <xTaskPriorityInherit+0x2c>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049da:	686a      	ldr	r2, [r5, #4]
 80049dc:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80049e0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80049e4:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049e8:	4e20      	ldr	r6, [pc, #128]	; (8004a6c <xTaskPriorityInherit+0xb0>)
 80049ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049ee:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80049f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d010      	beq.n	8004a1c <xTaskPriorityInherit+0x60>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049fa:	686b      	ldr	r3, [r5, #4]
                xReturn = pdTRUE;
 80049fc:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a02:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    }
 8004a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a08:	686b      	ldr	r3, [r5, #4]
 8004a0a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8004a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a12:	4298      	cmp	r0, r3
 8004a14:	bf2c      	ite	cs
 8004a16:	2000      	movcs	r0, #0
 8004a18:	2001      	movcc	r0, #1
    }
 8004a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8004a20:	4638      	mov	r0, r7
 8004a22:	f7fb fed9 	bl	80007d8 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a26:	686b      	ldr	r3, [r5, #4]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a28:	f8d5 24e4 	ldr.w	r2, [r5, #1252]	; 0x4e4
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a30:	4293      	cmp	r3, r2
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a32:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a36:	d901      	bls.n	8004a3c <xTaskPriorityInherit+0x80>
 8004a38:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 8004a3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                xReturn = pdTRUE;
 8004a40:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a42:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004a46:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8004a4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004a4c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	4402      	add	r2, r0
 8004a52:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004a56:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	604f      	str	r7, [r1, #4]
 8004a5e:	609f      	str	r7, [r3, #8]
 8004a60:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8004a64:	62ea      	str	r2, [r5, #44]	; 0x2c
    }
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	24000040 	.word	0x24000040
 8004a6c:	2400006c 	.word	0x2400006c

08004a70 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 8004a70:	b330      	cbz	r0, 8004ac0 <xTaskPriorityDisinherit+0x50>
    {
 8004a72:	b570      	push	{r4, r5, r6, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 8004a74:	4d28      	ldr	r5, [pc, #160]	; (8004b18 <xTaskPriorityDisinherit+0xa8>)
 8004a76:	4604      	mov	r4, r0
 8004a78:	686b      	ldr	r3, [r5, #4]
 8004a7a:	4283      	cmp	r3, r0
 8004a7c:	d008      	beq.n	8004a90 <xTaskPriorityDisinherit+0x20>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	e7fe      	b.n	8004a8e <xTaskPriorityDisinherit+0x1e>
            configASSERT( pxTCB->uxMutexesHeld );
 8004a90:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004a94:	b15b      	cbz	r3, 8004aae <xTaskPriorityDisinherit+0x3e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a96:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
            ( pxTCB->uxMutexesHeld )--;
 8004a9a:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a9c:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
            ( pxTCB->uxMutexesHeld )--;
 8004aa0:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004aa4:	4291      	cmp	r1, r2
 8004aa6:	d000      	beq.n	8004aaa <xTaskPriorityDisinherit+0x3a>
 8004aa8:	b163      	cbz	r3, 8004ac4 <xTaskPriorityDisinherit+0x54>
        BaseType_t xReturn = pdFALSE;
 8004aaa:	2000      	movs	r0, #0
    }
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
            configASSERT( pxTCB->uxMutexesHeld );
 8004abe:	e7fe      	b.n	8004abe <xTaskPriorityDisinherit+0x4e>
        BaseType_t xReturn = pdFALSE;
 8004ac0:	2000      	movs	r0, #0
    }
 8004ac2:	4770      	bx	lr
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac4:	f100 0684 	add.w	r6, r0, #132	; 0x84
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7fb fe85 	bl	80007d8 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ace:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ad6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ada:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
                    prvAddTaskToReadyList( pxTCB );
 8004ade:	f8d5 24e4 	ldr.w	r2, [r5, #1252]	; 0x4e4
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <xTaskPriorityDisinherit+0x7a>
 8004ae6:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 8004aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004aee:	480b      	ldr	r0, [pc, #44]	; (8004b1c <xTaskPriorityDisinherit+0xac>)
 8004af0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004af4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004af8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004afa:	6891      	ldr	r1, [r2, #8]
 8004afc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8004b00:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8004b04:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004b06:	6890      	ldr	r0, [r2, #8]
 8004b08:	3101      	adds	r1, #1
 8004b0a:	6046      	str	r6, [r0, #4]
                    xReturn = pdTRUE;
 8004b0c:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 8004b0e:	6096      	str	r6, [r2, #8]
 8004b10:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004b14:	62e9      	str	r1, [r5, #44]	; 0x2c
    }
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	24000040 	.word	0x24000040
 8004b1c:	2400006c 	.word	0x2400006c

08004b20 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d052      	beq.n	8004bca <vTaskPriorityDisinheritAfterTimeout+0xaa>
    {
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 8004b26:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	b15b      	cbz	r3, 8004b46 <vTaskPriorityDisinheritAfterTimeout+0x26>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b2e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004b32:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004b36:	4281      	cmp	r1, r0
 8004b38:	bf38      	it	cc
 8004b3a:	4601      	movcc	r1, r0
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d001      	beq.n	8004b44 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d009      	beq.n	8004b58 <vTaskPriorityDisinheritAfterTimeout+0x38>
    }
 8004b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
            configASSERT( pxTCB->uxMutexesHeld );
 8004b56:	e7fe      	b.n	8004b56 <vTaskPriorityDisinheritAfterTimeout+0x36>
                    configASSERT( pxTCB != pxCurrentTCB );
 8004b58:	4d21      	ldr	r5, [pc, #132]	; (8004be0 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8004b5a:	686b      	ldr	r3, [r5, #4]
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d035      	beq.n	8004bcc <vTaskPriorityDisinheritAfterTimeout+0xac>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b60:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
                    pxTCB->uxPriority = uxPriorityToUse;
 8004b64:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	db03      	blt.n	8004b74 <vTaskPriorityDisinheritAfterTimeout+0x54>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8004b70:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b74:	4e1b      	ldr	r6, [pc, #108]	; (8004be4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8004b76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b7a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004b7e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8004b82:	4299      	cmp	r1, r3
 8004b84:	d1de      	bne.n	8004b44 <vTaskPriorityDisinheritAfterTimeout+0x24>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b86:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f7fb fe24 	bl	80007d8 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8004b90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004b94:	f8d5 24e4 	ldr.w	r2, [r5, #1252]	; 0x4e4
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8004b9c:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
 8004ba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ba4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004ba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004bac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004bae:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004bb0:	6890      	ldr	r0, [r2, #8]
 8004bb2:	3101      	adds	r1, #1
 8004bb4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8004bb8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8004bbc:	6890      	ldr	r0, [r2, #8]
 8004bbe:	6047      	str	r7, [r0, #4]
 8004bc0:	6097      	str	r7, [r2, #8]
 8004bc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004bc6:	62e9      	str	r1, [r5, #44]	; 0x2c
    }
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bca:	4770      	bx	lr
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
                    configASSERT( pxTCB != pxCurrentTCB );
 8004bdc:	e7fe      	b.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004bde:	bf00      	nop
 8004be0:	24000040 	.word	0x24000040
 8004be4:	2400006c 	.word	0x2400006c

08004be8 <uxTaskGetTaskNumber>:
        if( xTask != NULL )
 8004be8:	b108      	cbz	r0, 8004bee <uxTaskGetTaskNumber+0x6>
            uxReturn = pxTCB->uxTaskNumber;
 8004bea:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
    }
 8004bee:	4770      	bx	lr

08004bf0 <vTaskSetTaskNumber>:
        if( xTask != NULL )
 8004bf0:	b108      	cbz	r0, 8004bf6 <vTaskSetTaskNumber+0x6>
            pxTCB->uxTaskNumber = uxHandle;
 8004bf2:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    }
 8004bf6:	4770      	bx	lr

08004bf8 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <pvTaskIncrementMutexHeldCount+0x18>)
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	b12a      	cbz	r2, 8004c0a <pvTaskIncrementMutexHeldCount+0x12>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	f8d1 20d0 	ldr.w	r2, [r1, #208]	; 0xd0
 8004c04:	3201      	adds	r2, #1
 8004c06:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
        return pxCurrentTCB;
 8004c0a:	6858      	ldr	r0, [r3, #4]
    }
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	24000040 	.word	0x24000040

08004c14 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <vTaskInternalSetTimeOutState+0x10>)
 8004c16:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	24000040 	.word	0x24000040

08004c28 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	4da3      	ldr	r5, [pc, #652]	; (8004ebc <prvTimerTask+0x294>)
 8004c2e:	b085      	sub	sp, #20
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
 8004c30:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	f000 810d 	beq.w	8004e58 <prvTimerTask+0x230>

        if( *pxListWasEmpty == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	681c      	ldr	r4, [r3, #0]
        vTaskSuspendAll();
 8004c42:	f7fe fc8d 	bl	8003560 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c46:	f7fe fc95 	bl	8003574 <xTaskGetTickCount>

        if( xTimeNow < xLastTime )
 8004c4a:	686b      	ldr	r3, [r5, #4]
        xTimeNow = xTaskGetTickCount();
 8004c4c:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	d33f      	bcc.n	8004cd2 <prvTimerTask+0xaa>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c52:	4284      	cmp	r4, r0
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
 8004c54:	6068      	str	r0, [r5, #4]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c56:	f240 811b 	bls.w	8004e90 <prvTimerTask+0x268>
 8004c5a:	2200      	movs	r2, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c5c:	eba4 0109 	sub.w	r1, r4, r9
 8004c60:	68e8      	ldr	r0, [r5, #12]
 8004c62:	f7fd f8cd 	bl	8001e00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004c66:	f7ff f919 	bl	8003e9c <xTaskResumeAll>
 8004c6a:	b938      	cbnz	r0, 8004c7c <prvTimerTask+0x54>
                        portYIELD_WITHIN_API();
 8004c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c70:	f8c8 3d04 	str.w	r3, [r8, #3332]	; 0xd04
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4669      	mov	r1, sp
 8004c80:	68e8      	ldr	r0, [r5, #12]
 8004c82:	f7fc f941 	bl	8000f08 <xQueueReceive>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d0d4      	beq.n	8004c34 <prvTimerTask+0xc>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c8a:	9b00      	ldr	r3, [sp, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f2c0 80da 	blt.w	8004e46 <prvTimerTask+0x21e>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c92:	9f02      	ldr	r7, [sp, #8]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	b113      	cbz	r3, 8004c9e <prvTimerTask+0x76>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	1d38      	adds	r0, r7, #4
 8004c9a:	f7fb fd9d 	bl	80007d8 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 8004c9e:	f7fe fc69 	bl	8003574 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8004ca2:	686b      	ldr	r3, [r5, #4]
        xTimeNow = xTaskGetTickCount();
 8004ca4:	4682      	mov	sl, r0
        if( xTimeNow < xLastTime )
 8004ca6:	4298      	cmp	r0, r3
 8004ca8:	d341      	bcc.n	8004d2e <prvTimerTask+0x106>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
 8004caa:	9b00      	ldr	r3, [sp, #0]
        xLastTime = xTimeNow;
 8004cac:	f8c5 a004 	str.w	sl, [r5, #4]
                switch( xMessage.xMessageID )
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d8e2      	bhi.n	8004c7c <prvTimerTask+0x54>
 8004cb6:	e8df f003 	tbb	[pc, r3]
 8004cba:	6565      	.short	0x6565
 8004cbc:	65bda0b6 	.word	0x65bda0b6
 8004cc0:	b665      	.short	0xb665
 8004cc2:	a0          	.byte	0xa0
 8004cc3:	00          	.byte	0x00
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ccc:	6a23      	ldr	r3, [r4, #32]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4798      	blx	r3

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cd2:	682b      	ldr	r3, [r5, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	f000 80cf 	beq.w	8004e7a <prvTimerTask+0x252>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cdc:	68db      	ldr	r3, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cde:	68dc      	ldr	r4, [r3, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce0:	681e      	ldr	r6, [r3, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ce2:	f104 0a04 	add.w	sl, r4, #4
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	f7fb fd76 	bl	80007d8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004cf0:	0759      	lsls	r1, r3, #29
 8004cf2:	d5e7      	bpl.n	8004cc4 <prvTimerTask+0x9c>
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cf4:	69a3      	ldr	r3, [r4, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	43f2      	mvns	r2, r6
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf8:	6124      	str	r4, [r4, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cfa:	199f      	adds	r7, r3, r6
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	429a      	cmp	r2, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cfe:	6067      	str	r7, [r4, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d00:	d309      	bcc.n	8004d16 <prvTimerTask+0xee>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d02:	6a23      	ldr	r3, [r4, #32]
 8004d04:	4620      	mov	r0, r4
 8004d06:	4798      	blx	r3
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d08:	43fe      	mvns	r6, r7
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d0a:	69a3      	ldr	r3, [r4, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d0c:	6124      	str	r4, [r4, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d0e:	441f      	add	r7, r3
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d10:	42b3      	cmp	r3, r6
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d12:	6067      	str	r7, [r4, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d14:	d9f5      	bls.n	8004d02 <prvTimerTask+0xda>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d16:	4651      	mov	r1, sl
 8004d18:	68a8      	ldr	r0, [r5, #8]
 8004d1a:	f7fb fd35 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004d1e:	e7d5      	b.n	8004ccc <prvTimerTask+0xa4>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d28:	6a23      	ldr	r3, [r4, #32]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4798      	blx	r3
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	2900      	cmp	r1, #0
 8004d34:	f000 80a8 	beq.w	8004e88 <prvTimerTask+0x260>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d38:	68db      	ldr	r3, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3a:	68dc      	ldr	r4, [r3, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d3c:	681e      	ldr	r6, [r3, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d3e:	f104 0b04 	add.w	fp, r4, #4
 8004d42:	4658      	mov	r0, fp
 8004d44:	f7fb fd48 	bl	80007d8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004d4c:	0758      	lsls	r0, r3, #29
 8004d4e:	d5e7      	bpl.n	8004d20 <prvTimerTask+0xf8>
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d50:	69a3      	ldr	r3, [r4, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d52:	43f1      	mvns	r1, r6
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d54:	6124      	str	r4, [r4, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d56:	eb06 0903 	add.w	r9, r6, r3
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5a:	4299      	cmp	r1, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d5c:	f8c4 9004 	str.w	r9, [r4, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d60:	d30b      	bcc.n	8004d7a <prvTimerTask+0x152>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d62:	464e      	mov	r6, r9
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d64:	6a23      	ldr	r3, [r4, #32]
 8004d66:	4620      	mov	r0, r4
 8004d68:	4798      	blx	r3
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6a:	43f6      	mvns	r6, r6
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d6c:	69a3      	ldr	r3, [r4, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d6e:	6124      	str	r4, [r4, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d70:	4499      	add	r9, r3
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	42b3      	cmp	r3, r6
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d74:	f8c4 9004 	str.w	r9, [r4, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d78:	d9f3      	bls.n	8004d62 <prvTimerTask+0x13a>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	68a8      	ldr	r0, [r5, #8]
 8004d7e:	f7fb fd03 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004d82:	e7d1      	b.n	8004d28 <prvTimerTask+0x100>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d84:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d88:	9901      	ldr	r1, [sp, #4]
 8004d8a:	69be      	ldr	r6, [r7, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d8c:	f040 0401 	orr.w	r4, r0, #1
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d90:	613f      	str	r7, [r7, #16]
 8004d92:	198b      	adds	r3, r1, r6
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d94:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d98:	bf2c      	ite	cs
 8004d9a:	2401      	movcs	r4, #1
 8004d9c:	2400      	movcc	r4, #0
        if( xNextExpiryTime <= xTimeNow )
 8004d9e:	4553      	cmp	r3, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004da0:	607b      	str	r3, [r7, #4]
        if( xNextExpiryTime <= xTimeNow )
 8004da2:	f200 80ac 	bhi.w	8004efe <prvTimerTask+0x2d6>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da6:	ebaa 0101 	sub.w	r1, sl, r1
 8004daa:	428e      	cmp	r6, r1
 8004dac:	f200 80ba 	bhi.w	8004f24 <prvTimerTask+0x2fc>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004db0:	0741      	lsls	r1, r0, #29
 8004db2:	d40e      	bmi.n	8004dd2 <prvTimerTask+0x1aa>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004db4:	f020 0001 	bic.w	r0, r0, #1
 8004db8:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	4798      	blx	r3
 8004dc2:	e75b      	b.n	8004c7c <prvTimerTask+0x54>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc4:	42b1      	cmp	r1, r6
 8004dc6:	f0c0 80a8 	bcc.w	8004f1a <prvTimerTask+0x2f2>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004dce:	69be      	ldr	r6, [r7, #24]
 8004dd0:	4623      	mov	r3, r4
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dd2:	199c      	adds	r4, r3, r6
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd4:	ebaa 0103 	sub.w	r1, sl, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dd8:	4638      	mov	r0, r7
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dda:	613f      	str	r7, [r7, #16]
 8004ddc:	bf2c      	ite	cs
 8004dde:	2201      	movcs	r2, #1
 8004de0:	2200      	movcc	r2, #0
        if( xNextExpiryTime <= xTimeNow )
 8004de2:	45a2      	cmp	sl, r4
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004de4:	607c      	str	r4, [r7, #4]
        if( xNextExpiryTime <= xTimeNow )
 8004de6:	d2ed      	bcs.n	8004dc4 <prvTimerTask+0x19c>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004de8:	459a      	cmp	sl, r3
 8004dea:	d201      	bcs.n	8004df0 <prvTimerTask+0x1c8>
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d0ec      	beq.n	8004dca <prvTimerTask+0x1a2>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004df0:	1d39      	adds	r1, r7, #4
 8004df2:	6828      	ldr	r0, [r5, #0]
 8004df4:	f7fb fcc8 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004df8:	e7e0      	b.n	8004dbc <prvTimerTask+0x194>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dfa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dfe:	9b01      	ldr	r3, [sp, #4]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e00:	f041 0101 	orr.w	r1, r1, #1
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e04:	61bb      	str	r3, [r7, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e06:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808f 	beq.w	8004f2e <prvTimerTask+0x306>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e10:	4453      	add	r3, sl
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e12:	1d39      	adds	r1, r7, #4
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e14:	613f      	str	r7, [r7, #16]
        if( xNextExpiryTime <= xTimeNow )
 8004e16:	4553      	cmp	r3, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e18:	607b      	str	r3, [r7, #4]
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e1a:	bf94      	ite	ls
 8004e1c:	68a8      	ldrls	r0, [r5, #8]
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e1e:	6828      	ldrhi	r0, [r5, #0]
 8004e20:	f7fb fcb2 	bl	8000788 <vListInsert>
 8004e24:	e72a      	b.n	8004c7c <prvTimerTask+0x54>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        break;
 8004e32:	e723      	b.n	8004c7c <prvTimerTask+0x54>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e38:	079a      	lsls	r2, r3, #30
 8004e3a:	d56a      	bpl.n	8004f12 <prvTimerTask+0x2ea>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004e44:	e71a      	b.n	8004c7c <prvTimerTask+0x54>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4c:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e4e:	9b00      	ldr	r3, [sp, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f6ff af13 	blt.w	8004c7c <prvTimerTask+0x54>
 8004e56:	e71c      	b.n	8004c92 <prvTimerTask+0x6a>
        vTaskSuspendAll();
 8004e58:	f7fe fb82 	bl	8003560 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 8004e5c:	f7fe fb8a 	bl	8003574 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8004e60:	686b      	ldr	r3, [r5, #4]
        xTimeNow = xTaskGetTickCount();
 8004e62:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 8004e64:	4283      	cmp	r3, r0
 8004e66:	f63f af34 	bhi.w	8004cd2 <prvTimerTask+0xaa>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e6a:	68ab      	ldr	r3, [r5, #8]
        xLastTime = xTimeNow;
 8004e6c:	f8c5 9004 	str.w	r9, [r5, #4]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	fab2 f282 	clz	r2, r2
 8004e76:	0952      	lsrs	r2, r2, #5
 8004e78:	e6f0      	b.n	8004c5c <prvTimerTask+0x34>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8004e7a:	68aa      	ldr	r2, [r5, #8]
        pxOverflowTimerList = pxTemp;
 8004e7c:	e9c5 9301 	strd	r9, r3, [r5, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e80:	602a      	str	r2, [r5, #0]
                ( void ) xTaskResumeAll();
 8004e82:	f7ff f80b 	bl	8003e9c <xTaskResumeAll>
 8004e86:	e6f9      	b.n	8004c7c <prvTimerTask+0x54>
        pxCurrentTimerList = pxOverflowTimerList;
 8004e88:	68a9      	ldr	r1, [r5, #8]
        pxOverflowTimerList = pxTemp;
 8004e8a:	60ab      	str	r3, [r5, #8]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e8c:	6029      	str	r1, [r5, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8004e8e:	e70c      	b.n	8004caa <prvTimerTask+0x82>
                    ( void ) xTaskResumeAll();
 8004e90:	f7ff f804 	bl	8003e9c <xTaskResumeAll>
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68de      	ldr	r6, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e9a:	f106 0a04 	add.w	sl, r6, #4
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f7fb fc9a 	bl	80007d8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ea4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8004ea8:	075a      	lsls	r2, r3, #29
 8004eaa:	d40e      	bmi.n	8004eca <prvTimerTask+0x2a2>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb4:	6a33      	ldr	r3, [r6, #32]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4798      	blx	r3
    }
 8004eba:	e6df      	b.n	8004c7c <prvTimerTask+0x54>
 8004ebc:	2400053c 	.word	0x2400053c
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d817      	bhi.n	8004ef4 <prvTimerTask+0x2cc>
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ec4:	461c      	mov	r4, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec6:	6a33      	ldr	r3, [r6, #32]
 8004ec8:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004eca:	69b2      	ldr	r2, [r6, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	eba9 0104 	sub.w	r1, r9, r4
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed0:	4630      	mov	r0, r6
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed2:	6136      	str	r6, [r6, #16]
 8004ed4:	18a3      	adds	r3, r4, r2
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed6:	bf2c      	ite	cs
 8004ed8:	2701      	movcs	r7, #1
 8004eda:	2700      	movcc	r7, #0
        if( xNextExpiryTime <= xTimeNow )
 8004edc:	4599      	cmp	r9, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ede:	6073      	str	r3, [r6, #4]
        if( xNextExpiryTime <= xTimeNow )
 8004ee0:	d2ee      	bcs.n	8004ec0 <prvTimerTask+0x298>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ee2:	45a1      	cmp	r9, r4
 8004ee4:	d201      	bcs.n	8004eea <prvTimerTask+0x2c2>
 8004ee6:	2f00      	cmp	r7, #0
 8004ee8:	d0ec      	beq.n	8004ec4 <prvTimerTask+0x29c>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eea:	4651      	mov	r1, sl
 8004eec:	6828      	ldr	r0, [r5, #0]
 8004eee:	f7fb fc4b 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004ef2:	e7df      	b.n	8004eb4 <prvTimerTask+0x28c>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	68a8      	ldr	r0, [r5, #8]
 8004ef8:	f7fb fc46 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004efc:	e7da      	b.n	8004eb4 <prvTimerTask+0x28c>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004efe:	4551      	cmp	r1, sl
 8004f00:	d902      	bls.n	8004f08 <prvTimerTask+0x2e0>
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	f43f af54 	beq.w	8004db0 <prvTimerTask+0x188>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f08:	1d39      	adds	r1, r7, #4
 8004f0a:	6828      	ldr	r0, [r5, #0]
 8004f0c:	f7fb fc3c 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004f10:	e6b4      	b.n	8004c7c <prvTimerTask+0x54>
                                    vPortFree( pxTimer );
 8004f12:	4638      	mov	r0, r7
 8004f14:	f000 fdd4 	bl	8005ac0 <vPortFree>
 8004f18:	e6b0      	b.n	8004c7c <prvTimerTask+0x54>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f1a:	1d39      	adds	r1, r7, #4
 8004f1c:	68a8      	ldr	r0, [r5, #8]
 8004f1e:	f7fb fc33 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004f22:	e74b      	b.n	8004dbc <prvTimerTask+0x194>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f24:	1d39      	adds	r1, r7, #4
 8004f26:	68a8      	ldr	r0, [r5, #8]
 8004f28:	f7fb fc2e 	bl	8000788 <vListInsert>
        return xProcessTimerNow;
 8004f2c:	e6a6      	b.n	8004c7c <prvTimerTask+0x54>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f3e:	e7fe      	b.n	8004f3e <prvTimerTask+0x316>

08004f40 <xTimerCreate>:
        {
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	4607      	mov	r7, r0
 8004f46:	b085      	sub	sp, #20
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004f48:	202c      	movs	r0, #44	; 0x2c
        {
 8004f4a:	4688      	mov	r8, r1
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	461d      	mov	r5, r3
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004f50:	f000 fd06 	bl	8005960 <pvPortMalloc>
            if( pxNewTimer != NULL )
 8004f54:	4604      	mov	r4, r0
 8004f56:	b330      	cbz	r0, 8004fa6 <xTimerCreate+0x66>
                pxNewTimer->ucStatus = 0x00;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004f5e:	f1b8 0f00 	cmp.w	r8, #0
 8004f62:	d108      	bne.n	8004f76 <xTimerCreate+0x36>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	e7fe      	b.n	8004f74 <xTimerCreate+0x34>
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 8004f76:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8004ff4 <xTimerCreate+0xb4>
        taskENTER_CRITICAL();
 8004f7a:	f004 fe53 	bl	8009c24 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8004f7e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004f82:	b1a3      	cbz	r3, 8004fae <xTimerCreate+0x6e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f84:	f004 fe64 	bl	8009c50 <vPortExitCritical>
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f8a:	1d20      	adds	r0, r4, #4
        pxNewTimer->pcTimerName = pcTimerName;
 8004f8c:	6027      	str	r7, [r4, #0]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f8e:	6223      	str	r3, [r4, #32]
        pxNewTimer->pvTimerID = pvTimerID;
 8004f90:	e9c4 8506 	strd	r8, r5, [r4, #24]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f94:	f7fb fbf4 	bl	8000780 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 8004f98:	b12e      	cbz	r6, 8004fa6 <xTimerCreate+0x66>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004f9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        }
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	b005      	add	sp, #20
 8004faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                vListInitialise( &xActiveTimerList1 );
 8004fae:	f109 0b10 	add.w	fp, r9, #16
                vListInitialise( &xActiveTimerList2 );
 8004fb2:	f109 0a24 	add.w	sl, r9, #36	; 0x24
 8004fb6:	9303      	str	r3, [sp, #12]
                vListInitialise( &xActiveTimerList1 );
 8004fb8:	4658      	mov	r0, fp
 8004fba:	f7fb fbd5 	bl	8000768 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004fbe:	4650      	mov	r0, sl
 8004fc0:	f7fb fbd2 	bl	8000768 <vListInitialise>
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	f109 0288 	add.w	r2, r9, #136	; 0x88
 8004fca:	2110      	movs	r1, #16
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	200a      	movs	r0, #10
 8004fd0:	f109 0338 	add.w	r3, r9, #56	; 0x38
                pxCurrentTimerList = &xActiveTimerList1;
 8004fd4:	f8c9 b000 	str.w	fp, [r9]
                pxOverflowTimerList = &xActiveTimerList2;
 8004fd8:	f8c9 a008 	str.w	sl, [r9, #8]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fdc:	f7fc fff4 	bl	8001fc8 <xQueueGenericCreateStatic>
 8004fe0:	f8c9 000c 	str.w	r0, [r9, #12]
                        if( xTimerQueue != NULL )
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d0cd      	beq.n	8004f84 <xTimerCreate+0x44>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fe8:	4901      	ldr	r1, [pc, #4]	; (8004ff0 <xTimerCreate+0xb0>)
 8004fea:	f7fc fdfd 	bl	8001be8 <vQueueAddToRegistry>
 8004fee:	e7c9      	b.n	8004f84 <xTimerCreate+0x44>
 8004ff0:	24009f98 	.word	0x24009f98
 8004ff4:	2400053c 	.word	0x2400053c

08004ff8 <xTimerCreateStatic>:
        {
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    volatile size_t xSize = sizeof( StaticTimer_t );
 8004ffc:	242c      	movs	r4, #44	; 0x2c
        {
 8004ffe:	b085      	sub	sp, #20
                    volatile size_t xSize = sizeof( StaticTimer_t );
 8005000:	9403      	str	r4, [sp, #12]
                    configASSERT( xSize == sizeof( Timer_t ) );
 8005002:	9c03      	ldr	r4, [sp, #12]
 8005004:	2c2c      	cmp	r4, #44	; 0x2c
 8005006:	d008      	beq.n	800501a <xTimerCreateStatic+0x22>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	e7fe      	b.n	8005018 <xTimerCreateStatic+0x20>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800501a:	461d      	mov	r5, r3
 800501c:	9b03      	ldr	r3, [sp, #12]
            configASSERT( pxTimerBuffer );
 800501e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005020:	b17b      	cbz	r3, 8005042 <xTimerCreateStatic+0x4a>
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005022:	4616      	mov	r6, r2
 8005024:	461a      	mov	r2, r3
 8005026:	2302      	movs	r3, #2
 8005028:	460f      	mov	r7, r1
 800502a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800502e:	b989      	cbnz	r1, 8005054 <xTimerCreateStatic+0x5c>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	e7fe      	b.n	8005040 <xTimerCreateStatic+0x48>
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
            configASSERT( pxTimerBuffer );
 8005052:	e7fe      	b.n	8005052 <xTimerCreateStatic+0x5a>
            if( xTimerQueue == NULL )
 8005054:	4c20      	ldr	r4, [pc, #128]	; (80050d8 <xTimerCreateStatic+0xe0>)
 8005056:	4680      	mov	r8, r0
        taskENTER_CRITICAL();
 8005058:	f004 fde4 	bl	8009c24 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800505c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8005060:	f1bb 0f00 	cmp.w	fp, #0
 8005064:	d018      	beq.n	8005098 <xTimerCreateStatic+0xa0>
        taskEXIT_CRITICAL();
 8005066:	f004 fdf3 	bl	8009c50 <vPortExitCritical>
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800506a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800506c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800506e:	1d18      	adds	r0, r3, #4
        pxNewTimer->pcTimerName = pcTimerName;
 8005070:	f8c3 8000 	str.w	r8, [r3]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005074:	621a      	str	r2, [r3, #32]
        pxNewTimer->pvTimerID = pvTimerID;
 8005076:	e9c3 7506 	strd	r7, r5, [r3, #24]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800507a:	f7fb fb81 	bl	8000780 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 800507e:	b13e      	cbz	r6, 8005090 <xTimerCreateStatic+0x98>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
 8005090:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005092:	b005      	add	sp, #20
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                vListInitialise( &xActiveTimerList1 );
 8005098:	f104 0a10 	add.w	sl, r4, #16
                vListInitialise( &xActiveTimerList2 );
 800509c:	f104 0924 	add.w	r9, r4, #36	; 0x24
                vListInitialise( &xActiveTimerList1 );
 80050a0:	4650      	mov	r0, sl
 80050a2:	f7fb fb61 	bl	8000768 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80050a6:	4648      	mov	r0, r9
 80050a8:	f7fb fb5e 	bl	8000768 <vListInitialise>
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050ac:	f8cd b000 	str.w	fp, [sp]
 80050b0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80050b4:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80050b8:	2110      	movs	r1, #16
 80050ba:	200a      	movs	r0, #10
                pxCurrentTimerList = &xActiveTimerList1;
 80050bc:	f8c4 a000 	str.w	sl, [r4]
                pxOverflowTimerList = &xActiveTimerList2;
 80050c0:	f8c4 9008 	str.w	r9, [r4, #8]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050c4:	f7fc ff80 	bl	8001fc8 <xQueueGenericCreateStatic>
 80050c8:	60e0      	str	r0, [r4, #12]
                        if( xTimerQueue != NULL )
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0cb      	beq.n	8005066 <xTimerCreateStatic+0x6e>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050ce:	4903      	ldr	r1, [pc, #12]	; (80050dc <xTimerCreateStatic+0xe4>)
 80050d0:	f7fc fd8a 	bl	8001be8 <vQueueAddToRegistry>
 80050d4:	e7c7      	b.n	8005066 <xTimerCreateStatic+0x6e>
 80050d6:	bf00      	nop
 80050d8:	2400053c 	.word	0x2400053c
 80050dc:	24009f98 	.word	0x24009f98

080050e0 <pvTimerGetTimerID>:
    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
        Timer_t * const pxTimer = xTimer;
        void * pvReturn;

        configASSERT( xTimer );
 80050e0:	b158      	cbz	r0, 80050fa <pvTimerGetTimerID+0x1a>
    {
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	b082      	sub	sp, #8

        taskENTER_CRITICAL();
 80050e8:	f004 fd9c 	bl	8009c24 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80050ec:	69e0      	ldr	r0, [r4, #28]
 80050ee:	9001      	str	r0, [sp, #4]
        }
        taskEXIT_CRITICAL();
 80050f0:	f004 fdae 	bl	8009c50 <vPortExitCritical>

        return pvReturn;
    }
 80050f4:	9801      	ldr	r0, [sp, #4]
 80050f6:	b002      	add	sp, #8
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800510a:	e7fe      	b.n	800510a <pvTimerGetTimerID+0x2a>

0800510c <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 800510c:	b538      	push	{r3, r4, r5, lr}
        Timer_t * const pxTimer = xTimer;

        configASSERT( xTimer );
 800510e:	b140      	cbz	r0, 8005122 <vTimerSetTimerID+0x16>
 8005110:	4604      	mov	r4, r0
 8005112:	460d      	mov	r5, r1

        taskENTER_CRITICAL();
 8005114:	f004 fd86 	bl	8009c24 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8005118:	61e5      	str	r5, [r4, #28]
        }
        taskEXIT_CRITICAL();
    }
 800511a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        taskEXIT_CRITICAL();
 800511e:	f004 bd97 	b.w	8009c50 <vPortExitCritical>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8005132:	e7fe      	b.n	8005132 <vTimerSetTimerID+0x26>

08005134 <xTimerIsTimerActive>:
        configASSERT( xTimer );
 8005134:	b170      	cbz	r0, 8005154 <xTimerIsTimerActive+0x20>
    {
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
 800513a:	b082      	sub	sp, #8
        taskENTER_CRITICAL();
 800513c:	f004 fd72 	bl	8009c24 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005140:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8005144:	f000 0001 	and.w	r0, r0, #1
 8005148:	9001      	str	r0, [sp, #4]
        taskEXIT_CRITICAL();
 800514a:	f004 fd81 	bl	8009c50 <vPortExitCritical>
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800514e:	9801      	ldr	r0, [sp, #4]
 8005150:	b002      	add	sp, #8
 8005152:	bd10      	pop	{r4, pc}
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8005164:	e7fe      	b.n	8005164 <xTimerIsTimerActive+0x30>
 8005166:	bf00      	nop

08005168 <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <xTimerGetTimerDaemonTaskHandle+0x1c>)
 800516a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800516e:	b100      	cbz	r0, 8005172 <xTimerGetTimerDaemonTaskHandle+0xa>
    }
 8005170:	4770      	bx	lr
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
        configASSERT( ( xTimerTaskHandle != NULL ) );
 8005182:	e7fe      	b.n	8005182 <xTimerGetTimerDaemonTaskHandle+0x1a>
 8005184:	2400053c 	.word	0x2400053c

08005188 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8005188:	b530      	push	{r4, r5, lr}
 800518a:	b085      	sub	sp, #20
 800518c:	4614      	mov	r4, r2
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800518e:	f06f 0501 	mvn.w	r5, #1
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005192:	461a      	mov	r2, r3
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005194:	9001      	str	r0, [sp, #4]
            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005196:	2300      	movs	r3, #0
 8005198:	4804      	ldr	r0, [pc, #16]	; (80051ac <xTimerPendFunctionCallFromISR+0x24>)
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800519a:	9102      	str	r1, [sp, #8]
            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800519c:	4669      	mov	r1, sp
 800519e:	68c0      	ldr	r0, [r0, #12]
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80051a0:	9500      	str	r5, [sp, #0]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80051a2:	9403      	str	r4, [sp, #12]
            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051a4:	f7fc f8a2 	bl	80012ec <xQueueGenericSendFromISR>

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
        }
 80051a8:	b005      	add	sp, #20
 80051aa:	bd30      	pop	{r4, r5, pc}
 80051ac:	2400053c 	.word	0x2400053c

080051b0 <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 80051b0:	b530      	push	{r4, r5, lr}
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 80051b2:	4c0e      	ldr	r4, [pc, #56]	; (80051ec <xTimerPendFunctionCall+0x3c>)
        {
 80051b4:	b085      	sub	sp, #20
            configASSERT( xTimerQueue );
 80051b6:	68e5      	ldr	r5, [r4, #12]
 80051b8:	b175      	cbz	r5, 80051d8 <xTimerPendFunctionCall+0x28>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80051ba:	4614      	mov	r4, r2
 80051bc:	461a      	mov	r2, r3
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051be:	2300      	movs	r3, #0
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80051c0:	9001      	str	r0, [sp, #4]
            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051c2:	4628      	mov	r0, r5
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80051c4:	e9cd 1402 	strd	r1, r4, [sp, #8]
            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051c8:	4669      	mov	r1, sp
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80051ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051ce:	9400      	str	r4, [sp, #0]
            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051d0:	f7fb fb58 	bl	8000884 <xQueueGenericSend>

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
        }
 80051d4:	b005      	add	sp, #20
 80051d6:	bd30      	pop	{r4, r5, pc}
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
            configASSERT( xTimerQueue );
 80051e8:	e7fe      	b.n	80051e8 <xTimerPendFunctionCall+0x38>
 80051ea:	bf00      	nop
 80051ec:	2400053c 	.word	0x2400053c

080051f0 <pcTimerGetName>:
        configASSERT( xTimer );
 80051f0:	b108      	cbz	r0, 80051f6 <pcTimerGetName+0x6>
    }
 80051f2:	6800      	ldr	r0, [r0, #0]
 80051f4:	4770      	bx	lr
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8005206:	e7fe      	b.n	8005206 <pcTimerGetName+0x16>

08005208 <vTimerSetReloadMode>:
    {
 8005208:	b538      	push	{r3, r4, r5, lr}
        configASSERT( xTimer );
 800520a:	b1b0      	cbz	r0, 800523a <vTimerSetReloadMode+0x32>
        taskENTER_CRITICAL();
 800520c:	4604      	mov	r4, r0
 800520e:	460d      	mov	r5, r1
 8005210:	f004 fd08 	bl	8009c24 <vPortEnterCritical>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005214:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
            if( uxAutoReload != pdFALSE )
 8005218:	b93d      	cbnz	r5, 800522a <vTimerSetReloadMode+0x22>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 800521a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800521e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    }
 8005222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        taskEXIT_CRITICAL();
 8005226:	f004 bd13 	b.w	8009c50 <vPortExitCritical>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    }
 8005232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        taskEXIT_CRITICAL();
 8005236:	f004 bd0b 	b.w	8009c50 <vPortExitCritical>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800524a:	e7fe      	b.n	800524a <vTimerSetReloadMode+0x42>

0800524c <uxTimerGetReloadMode>:
        configASSERT( xTimer );
 800524c:	b170      	cbz	r0, 800526c <uxTimerGetReloadMode+0x20>
    {
 800524e:	b510      	push	{r4, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	b082      	sub	sp, #8
        taskENTER_CRITICAL();
 8005254:	f004 fce6 	bl	8009c24 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 8005258:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800525c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005260:	9001      	str	r0, [sp, #4]
        taskEXIT_CRITICAL();
 8005262:	f004 fcf5 	bl	8009c50 <vPortExitCritical>
    }
 8005266:	9801      	ldr	r0, [sp, #4]
 8005268:	b002      	add	sp, #8
 800526a:	bd10      	pop	{r4, pc}
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800527c:	e7fe      	b.n	800527c <uxTimerGetReloadMode+0x30>
 800527e:	bf00      	nop

08005280 <xTimerGetPeriod>:
        configASSERT( xTimer );
 8005280:	b108      	cbz	r0, 8005286 <xTimerGetPeriod+0x6>
    }
 8005282:	6980      	ldr	r0, [r0, #24]
 8005284:	4770      	bx	lr
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8005296:	e7fe      	b.n	8005296 <xTimerGetPeriod+0x16>

08005298 <xTimerGetExpiryTime>:
        configASSERT( xTimer );
 8005298:	b108      	cbz	r0, 800529e <xTimerGetExpiryTime+0x6>
    }
 800529a:	6840      	ldr	r0, [r0, #4]
 800529c:	4770      	bx	lr
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 80052ae:	e7fe      	b.n	80052ae <xTimerGetExpiryTime+0x16>

080052b0 <xTimerCreateTimerTask>:
    {
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
            if( xTimerQueue == NULL )
 80052b2:	4c24      	ldr	r4, [pc, #144]	; (8005344 <xTimerCreateTimerTask+0x94>)
    {
 80052b4:	b089      	sub	sp, #36	; 0x24
        taskENTER_CRITICAL();
 80052b6:	f004 fcb5 	bl	8009c24 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80052ba:	68e5      	ldr	r5, [r4, #12]
 80052bc:	b335      	cbz	r5, 800530c <xTimerCreateTimerTask+0x5c>
        taskEXIT_CRITICAL();
 80052be:	f004 fcc7 	bl	8009c50 <vPortExitCritical>
        if( xTimerQueue != NULL )
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	b1cb      	cbz	r3, 80052fa <xTimerCreateTimerTask+0x4a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80052c6:	2500      	movs	r5, #0
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052c8:	aa07      	add	r2, sp, #28
 80052ca:	a906      	add	r1, sp, #24
 80052cc:	a805      	add	r0, sp, #20
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80052ce:	e9cd 5505 	strd	r5, r5, [sp, #20]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052d2:	f004 fd73 	bl	8009dbc <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80052d6:	481c      	ldr	r0, [pc, #112]	; (8005348 <xTimerCreateTimerTask+0x98>)
 80052d8:	462b      	mov	r3, r5
 80052da:	9000      	str	r0, [sp, #0]
 80052dc:	481b      	ldr	r0, [pc, #108]	; (800534c <xTimerCreateTimerTask+0x9c>)
 80052de:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80052e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80052e6:	9a07      	ldr	r2, [sp, #28]
 80052e8:	4919      	ldr	r1, [pc, #100]	; (8005350 <xTimerCreateTimerTask+0xa0>)
 80052ea:	f7fd fdb9 	bl	8002e60 <xTaskCreateStatic>
 80052ee:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
                    if( xTimerTaskHandle != NULL )
 80052f2:	b110      	cbz	r0, 80052fa <xTimerCreateTimerTask+0x4a>
    }
 80052f4:	2001      	movs	r0, #1
 80052f6:	b009      	add	sp, #36	; 0x24
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 800530a:	e7fe      	b.n	800530a <xTimerCreateTimerTask+0x5a>
                vListInitialise( &xActiveTimerList1 );
 800530c:	f104 0710 	add.w	r7, r4, #16
                vListInitialise( &xActiveTimerList2 );
 8005310:	f104 0624 	add.w	r6, r4, #36	; 0x24
                vListInitialise( &xActiveTimerList1 );
 8005314:	4638      	mov	r0, r7
 8005316:	f7fb fa27 	bl	8000768 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800531a:	4630      	mov	r0, r6
 800531c:	f7fb fa24 	bl	8000768 <vListInitialise>
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005320:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8005324:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8005328:	2110      	movs	r1, #16
 800532a:	200a      	movs	r0, #10
 800532c:	9500      	str	r5, [sp, #0]
                pxCurrentTimerList = &xActiveTimerList1;
 800532e:	6027      	str	r7, [r4, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005330:	60a6      	str	r6, [r4, #8]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005332:	f7fc fe49 	bl	8001fc8 <xQueueGenericCreateStatic>
 8005336:	60e0      	str	r0, [r4, #12]
                        if( xTimerQueue != NULL )
 8005338:	2800      	cmp	r0, #0
 800533a:	d0c0      	beq.n	80052be <xTimerCreateTimerTask+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800533c:	4905      	ldr	r1, [pc, #20]	; (8005354 <xTimerCreateTimerTask+0xa4>)
 800533e:	f7fc fc53 	bl	8001be8 <vQueueAddToRegistry>
 8005342:	e7bc      	b.n	80052be <xTimerCreateTimerTask+0xe>
 8005344:	2400053c 	.word	0x2400053c
 8005348:	80000002 	.word	0x80000002
 800534c:	08004c29 	.word	0x08004c29
 8005350:	24009fa0 	.word	0x24009fa0
 8005354:	24009f98 	.word	0x24009f98

08005358 <xTimerGenericCommand>:
        configASSERT( xTimer );
 8005358:	b1c8      	cbz	r0, 800538e <xTimerGenericCommand+0x36>
    {
 800535a:	b530      	push	{r4, r5, lr}
        if( xTimerQueue != NULL )
 800535c:	4d18      	ldr	r5, [pc, #96]	; (80053c0 <xTimerGenericCommand+0x68>)
    {
 800535e:	b085      	sub	sp, #20
        if( xTimerQueue != NULL )
 8005360:	68ec      	ldr	r4, [r5, #12]
 8005362:	b18c      	cbz	r4, 8005388 <xTimerGenericCommand+0x30>
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005364:	2905      	cmp	r1, #5
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005366:	9002      	str	r0, [sp, #8]
            xMessage.xMessageID = xCommandID;
 8005368:	e9cd 1200 	strd	r1, r2, [sp]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800536c:	dc18      	bgt.n	80053a0 <xTimerGenericCommand+0x48>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800536e:	f7ff fb15 	bl	800499c <xTaskGetSchedulerState>
 8005372:	2802      	cmp	r0, #2
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005374:	f04f 0300 	mov.w	r3, #0
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005378:	d01b      	beq.n	80053b2 <xTimerGenericCommand+0x5a>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800537a:	4669      	mov	r1, sp
 800537c:	461a      	mov	r2, r3
 800537e:	68e8      	ldr	r0, [r5, #12]
 8005380:	f7fb fa80 	bl	8000884 <xQueueGenericSend>
    }
 8005384:	b005      	add	sp, #20
 8005386:	bd30      	pop	{r4, r5, pc}
        BaseType_t xReturn = pdFAIL;
 8005388:	4620      	mov	r0, r4
    }
 800538a:	b005      	add	sp, #20
 800538c:	bd30      	pop	{r4, r5, pc}
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800539e:	e7fe      	b.n	800539e <xTimerGenericCommand+0x46>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053a0:	469c      	mov	ip, r3
 80053a2:	4669      	mov	r1, sp
 80053a4:	2300      	movs	r3, #0
 80053a6:	4620      	mov	r0, r4
 80053a8:	4662      	mov	r2, ip
 80053aa:	f7fb ff9f 	bl	80012ec <xQueueGenericSendFromISR>
    }
 80053ae:	b005      	add	sp, #20
 80053b0:	bd30      	pop	{r4, r5, pc}
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053b2:	9a08      	ldr	r2, [sp, #32]
 80053b4:	4669      	mov	r1, sp
 80053b6:	68e8      	ldr	r0, [r5, #12]
 80053b8:	f7fb fa64 	bl	8000884 <xQueueGenericSend>
 80053bc:	e7e5      	b.n	800538a <xTimerGenericCommand+0x32>
 80053be:	bf00      	nop
 80053c0:	2400053c 	.word	0x2400053c

080053c4 <vTimerSetTimerNumber>:
    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 80053c4:	6241      	str	r1, [r0, #36]	; 0x24
        }
 80053c6:	4770      	bx	lr

080053c8 <uxTimerGetTimerNumber>:
        }
 80053c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80053ca:	4770      	bx	lr
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <prvRestoreContextOfFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvRestoreContextOfFirstTask( void )
{
    __asm volatile
 80053d0:	f8df 044c 	ldr.w	r0, [pc, #1100]	; 8005820 <xPortStartScheduler+0xfc>
 80053d4:	6800      	ldr	r0, [r0, #0]
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	f380 8808 	msr	MSP, r0
 80053dc:	4b18      	ldr	r3, [pc, #96]	; (8005440 <pxCurrentTCBConst2>)
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	f101 0104 	add.w	r1, r1, #4
 80053e6:	f3bf 8f5f 	dmb	sy
 80053ea:	f8df 2438 	ldr.w	r2, [pc, #1080]	; 8005824 <xPortStartScheduler+0x100>
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005828 <xPortStartScheduler+0x104>
 80053fa:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053fe:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005402:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005406:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800540a:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800540e:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005412:	f8df 2410 	ldr.w	r2, [pc, #1040]	; 8005824 <xPortStartScheduler+0x100>
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005426:	f383 8814 	msr	CONTROL, r3
 800542a:	f380 8809 	msr	PSP, r0
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f380 8811 	msr	BASEPRI, r0
 8005436:	4770      	bx	lr
 8005438:	f3af 8000 	nop.w
 800543c:	f3af 8000 	nop.w

08005440 <pxCurrentTCBConst2>:
 8005440:	24000044 	.word	0x24000044

08005444 <prvSVCHandler>:
    ulPC = pulParam[ portOFFSET_TO_PC ];
 8005444:	6982      	ldr	r2, [r0, #24]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8005446:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    switch( ucSVCNumber )
 800544a:	2b01      	cmp	r3, #1
 800544c:	d003      	beq.n	8005456 <prvSVCHandler+0x12>
 800544e:	2b02      	cmp	r3, #2
 8005450:	d015      	beq.n	800547e <prvSVCHandler+0x3a>
 8005452:	b15b      	cbz	r3, 800546c <prvSVCHandler+0x28>
}
 8005454:	4770      	bx	lr
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005456:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
            __asm volatile ( "dsb" ::: "memory" );
 8005462:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8005466:	f3bf 8f6f 	isb	sy
            break;
 800546a:	4770      	bx	lr
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 800546c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005470:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
 8005474:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 8005478:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
            prvRestoreContextOfFirstTask();
 800547c:	e7a8      	b.n	80053d0 <prvRestoreContextOfFirstTask>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <prvSVCHandler+0x54>)
 8005480:	429a      	cmp	r2, r3
 8005482:	d3e7      	bcc.n	8005454 <prvSVCHandler+0x10>
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <prvSVCHandler+0x58>)
 8005486:	429a      	cmp	r2, r3
 8005488:	d8e4      	bhi.n	8005454 <prvSVCHandler+0x10>
                        __asm volatile
 800548a:	f3ef 8114 	mrs	r1, CONTROL
 800548e:	f021 0101 	bic.w	r1, r1, #1
 8005492:	f381 8814 	msr	CONTROL, r1
}
 8005496:	e7dd      	b.n	8005454 <prvSVCHandler+0x10>
 8005498:	08008000 	.word	0x08008000
 800549c:	08009020 	.word	0x08009020

080054a0 <pxPortInitialiseStack>:
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 80054a0:	2b01      	cmp	r3, #1
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80054a2:	f021 0101 	bic.w	r1, r1, #1
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80054a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80054aa:	b410      	push	{r4}
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80054ac:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = 0;                                                   /* LR */
 80054b0:	f04f 0400 	mov.w	r4, #0
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80054b4:	f06f 0202 	mvn.w	r2, #2
    *pxTopOfStack = 0;                                                   /* LR */
 80054b8:	f840 4c0c 	str.w	r4, [r0, #-12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80054bc:	f840 2c24 	str.w	r2, [r0, #-36]
}
 80054c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80054c4:	e940 1302 	strd	r1, r3, [r0, #-8]
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 80054c8:	bf0c      	ite	eq
 80054ca:	2302      	moveq	r3, #2
 80054cc:	2303      	movne	r3, #3
}
 80054ce:	3848      	subs	r0, #72	; 0x48
 80054d0:	6003      	str	r3, [r0, #0]
 80054d2:	4770      	bx	lr

080054d4 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <vPortEndScheduler+0x20>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054dc:	d008      	beq.n	80054f0 <vPortEndScheduler+0x1c>
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	e7fe      	b.n	80054ee <vPortEndScheduler+0x1a>
}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	24008014 	.word	0x24008014

080054f8 <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 80054f8:	b530      	push	{r4, r5, lr}
    #endif /* if defined( __ARMCC_VERSION ) */

    int32_t lIndex;
    uint32_t ul;

    if( xRegions == NULL )
 80054fa:	b371      	cbz	r1, 800555a <vPortStoreTaskMPUSettings+0x62>
    {
        /* This function is called automatically when the task is created - in
         * which case the stack region parameters will be valid.  At all other
         * times the stack parameters will not be valid and it is assumed that the
         * stack region has already been configured. */
        if( ulStackDepth > 0 )
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d176      	bne.n	80055ee <vPortStoreTaskMPUSettings+0xf6>
 8005500:	468c      	mov	ip, r1
 8005502:	f04f 0e05 	mov.w	lr, #5
 8005506:	e00b      	b.n	8005520 <vPortStoreTaskMPUSettings+0x28>
                    ( portMPU_REGION_ENABLE );
            }
            else
            {
                /* Invalidate the region. */
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8005508:	f04e 0310 	orr.w	r3, lr, #16
 800550c:	e9c0 3102 	strd	r3, r1, [r0, #8]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8005510:	f10e 0e01 	add.w	lr, lr, #1
 8005514:	f10c 0c0c 	add.w	ip, ip, #12
 8005518:	3008      	adds	r0, #8
 800551a:	f1be 0f10 	cmp.w	lr, #16
 800551e:	d063      	beq.n	80055e8 <vPortStoreTaskMPUSettings+0xf0>
            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 8005520:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005524:	2900      	cmp	r1, #0
 8005526:	d0ef      	beq.n	8005508 <vPortStoreTaskMPUSettings+0x10>
                    ( portMPU_REGION_VALID ) |
 8005528:	f8dc 4000 	ldr.w	r4, [ip]
    uint32_t ulRegionSize, ulReturnValue = 4;
 800552c:	2304      	movs	r3, #4
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800552e:	2220      	movs	r2, #32
                    ( portMPU_REGION_VALID ) |
 8005530:	ea44 040e 	orr.w	r4, r4, lr
 8005534:	f044 0410 	orr.w	r4, r4, #16
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 8005538:	6084      	str	r4, [r0, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800553a:	e002      	b.n	8005542 <vPortStoreTaskMPUSettings+0x4a>
            ulReturnValue++;
 800553c:	3301      	adds	r3, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800553e:	2b1f      	cmp	r3, #31
 8005540:	d053      	beq.n	80055ea <vPortStoreTaskMPUSettings+0xf2>
        if( ulActualSizeInBytes <= ulRegionSize )
 8005542:	4291      	cmp	r1, r2
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005544:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 8005548:	d8f8      	bhi.n	800553c <vPortStoreTaskMPUSettings+0x44>
    return( ulReturnValue << 1UL );
 800554a:	005b      	lsls	r3, r3, #1
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 800554c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8005550:	4313      	orrs	r3, r2
                    ( xRegions[ lIndex ].ulParameters ) |
 8005552:	f043 0301 	orr.w	r3, r3, #1
                xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8005556:	60c3      	str	r3, [r0, #12]
 8005558:	e7da      	b.n	8005510 <vPortStoreTaskMPUSettings+0x18>
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 800555a:	4c31      	ldr	r4, [pc, #196]	; (8005620 <vPortStoreTaskMPUSettings+0x128>)
    uint32_t ulRegionSize, ulReturnValue = 4;
 800555c:	2204      	movs	r2, #4
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 800555e:	4931      	ldr	r1, [pc, #196]	; (8005624 <vPortStoreTaskMPUSettings+0x12c>)
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005560:	2320      	movs	r3, #32
            ( portMPU_REGION_VALID ) |
 8005562:	f044 0514 	orr.w	r5, r4, #20
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 8005566:	1b09      	subs	r1, r1, r4
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8005568:	6005      	str	r5, [r0, #0]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800556a:	e002      	b.n	8005572 <vPortStoreTaskMPUSettings+0x7a>
            ulReturnValue++;
 800556c:	3201      	adds	r2, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800556e:	2a1f      	cmp	r2, #31
 8005570:	d054      	beq.n	800561c <vPortStoreTaskMPUSettings+0x124>
        if( ulActualSizeInBytes <= ulRegionSize )
 8005572:	4299      	cmp	r1, r3
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005574:	ea4f 0343 	mov.w	r3, r3, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 8005578:	d8f8      	bhi.n	800556c <vPortStoreTaskMPUSettings+0x74>
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 800557a:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <vPortStoreTaskMPUSettings+0x130>)
 800557c:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
            ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 8005580:	4c2a      	ldr	r4, [pc, #168]	; (800562c <vPortStoreTaskMPUSettings+0x134>)
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005582:	2320      	movs	r3, #32
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8005584:	492a      	ldr	r1, [pc, #168]	; (8005630 <vPortStoreTaskMPUSettings+0x138>)
            ( portMPU_REGION_VALID ) |
 8005586:	f044 0515 	orr.w	r5, r4, #21
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800558a:	6042      	str	r2, [r0, #4]
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 800558c:	1b09      	subs	r1, r1, r4
    uint32_t ulRegionSize, ulReturnValue = 4;
 800558e:	2204      	movs	r2, #4
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8005590:	6085      	str	r5, [r0, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005592:	e002      	b.n	800559a <vPortStoreTaskMPUSettings+0xa2>
            ulReturnValue++;
 8005594:	3201      	adds	r2, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005596:	2a1f      	cmp	r2, #31
 8005598:	d03e      	beq.n	8005618 <vPortStoreTaskMPUSettings+0x120>
        if( ulActualSizeInBytes <= ulRegionSize )
 800559a:	4299      	cmp	r1, r3
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800559c:	ea4f 0343 	mov.w	r3, r3, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 80055a0:	d8f8      	bhi.n	8005594 <vPortStoreTaskMPUSettings+0x9c>
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80055a2:	4b24      	ldr	r3, [pc, #144]	; (8005634 <vPortStoreTaskMPUSettings+0x13c>)
 80055a4:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 80055a8:	2416      	movs	r4, #22
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 80055aa:	2300      	movs	r3, #0
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 80055ac:	2117      	movs	r1, #23
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 80055ae:	65c3      	str	r3, [r0, #92]	; 0x5c
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 80055b0:	e9c0 2403 	strd	r2, r4, [r0, #12]
 80055b4:	2218      	movs	r2, #24
 80055b6:	2419      	movs	r4, #25
 80055b8:	e9c0 3207 	strd	r3, r2, [r0, #28]
 80055bc:	221a      	movs	r2, #26
 80055be:	e9c0 3105 	strd	r3, r1, [r0, #20]
 80055c2:	e9c0 320b 	strd	r3, r2, [r0, #44]	; 0x2c
 80055c6:	211b      	movs	r1, #27
 80055c8:	221c      	movs	r2, #28
 80055ca:	e9c0 3409 	strd	r3, r4, [r0, #36]	; 0x24
 80055ce:	e9c0 310d 	strd	r3, r1, [r0, #52]	; 0x34
 80055d2:	241d      	movs	r4, #29
 80055d4:	211e      	movs	r1, #30
 80055d6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80055da:	221f      	movs	r2, #31
 80055dc:	e9c0 3411 	strd	r3, r4, [r0, #68]	; 0x44
 80055e0:	e9c0 3113 	strd	r3, r1, [r0, #76]	; 0x4c
 80055e4:	e9c0 3215 	strd	r3, r2, [r0, #84]	; 0x54
            }

            lIndex++;
        }
    }
}
 80055e8:	bd30      	pop	{r4, r5, pc}
 80055ea:	233e      	movs	r3, #62	; 0x3e
 80055ec:	e7ae      	b.n	800554c <vPortStoreTaskMPUSettings+0x54>
                ( portMPU_REGION_VALID ) |
 80055ee:	f042 0514 	orr.w	r5, r2, #20
                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 80055f2:	009c      	lsls	r4, r3, #2
    uint32_t ulRegionSize, ulReturnValue = 4;
 80055f4:	2204      	movs	r2, #4
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80055f6:	2320      	movs	r3, #32
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 80055f8:	6005      	str	r5, [r0, #0]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80055fa:	e002      	b.n	8005602 <vPortStoreTaskMPUSettings+0x10a>
            ulReturnValue++;
 80055fc:	3201      	adds	r2, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80055fe:	2a1f      	cmp	r2, #31
 8005600:	d008      	beq.n	8005614 <vPortStoreTaskMPUSettings+0x11c>
        if( ulActualSizeInBytes <= ulRegionSize )
 8005602:	429c      	cmp	r4, r3
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005604:	ea4f 0343 	mov.w	r3, r3, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 8005608:	d8f8      	bhi.n	80055fc <vPortStoreTaskMPUSettings+0x104>
                ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <vPortStoreTaskMPUSettings+0x130>)
 800560c:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8005610:	6042      	str	r2, [r0, #4]
 8005612:	e775      	b.n	8005500 <vPortStoreTaskMPUSettings+0x8>
 8005614:	4a08      	ldr	r2, [pc, #32]	; (8005638 <vPortStoreTaskMPUSettings+0x140>)
 8005616:	e7fb      	b.n	8005610 <vPortStoreTaskMPUSettings+0x118>
 8005618:	4a08      	ldr	r2, [pc, #32]	; (800563c <vPortStoreTaskMPUSettings+0x144>)
 800561a:	e7c5      	b.n	80055a8 <vPortStoreTaskMPUSettings+0xb0>
 800561c:	4a06      	ldr	r2, [pc, #24]	; (8005638 <vPortStoreTaskMPUSettings+0x140>)
 800561e:	e7af      	b.n	8005580 <vPortStoreTaskMPUSettings+0x88>
 8005620:	24000000 	.word	0x24000000
 8005624:	24080000 	.word	0x24080000
 8005628:	03030001 	.word	0x03030001
 800562c:	24000000 	.word	0x24000000
 8005630:	24008000 	.word	0x24008000
 8005634:	01030001 	.word	0x01030001
 8005638:	0303003f 	.word	0x0303003f
 800563c:	0103003f 	.word	0x0103003f

08005640 <PendSV_Handler>:
    __asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f01e 0f10 	tst.w	lr, #16
 8005650:	bf08      	it	eq
 8005652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005656:	f3ef 8114 	mrs	r1, CONTROL
 800565a:	e920 4ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565e:	6010      	str	r0, [r2, #0]
 8005660:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005664:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005668:	f380 8811 	msr	BASEPRI, r0
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f7ff f8a8 	bl	80047c8 <vTaskSwitchContext>
 8005678:	f04f 0000 	mov.w	r0, #0
 800567c:	f380 8811 	msr	BASEPRI, r0
 8005680:	bc09      	pop	{r0, r3}
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	6808      	ldr	r0, [r1, #0]
 8005686:	f101 0104 	add.w	r1, r1, #4
 800568a:	f3bf 8f5f 	dmb	sy
 800568e:	4a65      	ldr	r2, [pc, #404]	; (8005824 <xPortStartScheduler+0x100>)
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4a63      	ldr	r2, [pc, #396]	; (8005828 <xPortStartScheduler+0x104>)
 800569a:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800569e:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056a2:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056a6:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056aa:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056ae:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056b2:	4a5c      	ldr	r2, [pc, #368]	; (8005824 <xPortStartScheduler+0x100>)
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	f383 8814 	msr	CONTROL, r3
 80056c8:	f01e 0f10 	tst.w	lr, #16
 80056cc:	bf08      	it	eq
 80056ce:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056d2:	f380 8809 	msr	PSP, r0
 80056d6:	4770      	bx	lr
 80056d8:	f3af 8000 	nop.w
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst>:
 80056e0:	24000044 	.word	0x24000044

080056e4 <SysTick_Handler>:
{
 80056e4:	b510      	push	{r4, lr}
    __asm volatile
 80056e6:	f3ef 8411 	mrs	r4, BASEPRI
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 80056fa:	f7fe fb11 	bl	8003d20 <xTaskIncrementTick>
 80056fe:	b128      	cbz	r0, 800570c <SysTick_Handler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005700:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005708:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    __asm volatile
 800570c:	f384 8811 	msr	BASEPRI, r4
}
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop

08005714 <SVC_Handler>:
    __asm volatile
 8005714:	f01e 0f04 	tst.w	lr, #4
 8005718:	bf0c      	ite	eq
 800571a:	f3ef 8008 	mrseq	r0, MSP
 800571e:	f3ef 8009 	mrsne	r0, PSP
 8005722:	e68f      	b.n	8005444 <prvSVCHandler>

08005724 <xPortStartScheduler>:
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005724:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <xPortStartScheduler+0x1f0>)
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005726:	f04f 0cff 	mov.w	ip, #255	; 0xff
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800572a:	487b      	ldr	r0, [pc, #492]	; (8005918 <xPortStartScheduler+0x1f4>)
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800572c:	497b      	ldr	r1, [pc, #492]	; (800591c <xPortStartScheduler+0x1f8>)
{
 800572e:	b530      	push	{r4, r5, lr}
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005730:	781a      	ldrb	r2, [r3, #0]
{
 8005732:	b083      	sub	sp, #12
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	9201      	str	r2, [sp, #4]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005738:	2207      	movs	r2, #7
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800573a:	f883 c000 	strb.w	ip, [r3]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800573e:	781b      	ldrb	r3, [r3, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005740:	6002      	str	r2, [r0, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005748:	f89d 3003 	ldrb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800574c:	f89d 2003 	ldrb.w	r2, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005750:	f003 0350 	and.w	r3, r3, #80	; 0x50
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005754:	0612      	lsls	r2, r2, #24
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005756:	700b      	strb	r3, [r1, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005758:	d511      	bpl.n	800577e <xPortStartScheduler+0x5a>
 800575a:	2206      	movs	r2, #6
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800575c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005760:	4611      	mov	r1, r2
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005762:	3a01      	subs	r2, #1
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800576c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	d4f3      	bmi.n	800575c <xPortStartScheduler+0x38>
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005774:	2903      	cmp	r1, #3
 8005776:	f1c1 0307 	rsb	r3, r1, #7
 800577a:	d009      	beq.n	8005790 <xPortStartScheduler+0x6c>
 800577c:	6001      	str	r1, [r0, #0]
    __asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	e7fe      	b.n	800578e <xPortStartScheduler+0x6a>
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005790:	9901      	ldr	r1, [sp, #4]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005792:	f44f 7440 	mov.w	r4, #768	; 0x300
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800579a:	6004      	str	r4, [r0, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800579c:	b2c9      	uxtb	r1, r1
 800579e:	485d      	ldr	r0, [pc, #372]	; (8005914 <xPortStartScheduler+0x1f0>)
 80057a0:	7001      	strb	r1, [r0, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80057a2:	f8d2 1d20 	ldr.w	r1, [r2, #3360]	; 0xd20
 80057a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057aa:	f8c2 1d20 	str.w	r1, [r2, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80057ae:	f8d2 1d20 	ldr.w	r1, [r2, #3360]	; 0xd20
 80057b2:	f041 4170 	orr.w	r1, r1, #4026531840	; 0xf0000000
 80057b6:	f8c2 1d20 	str.w	r1, [r2, #3360]	; 0xd20
    configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 80057ba:	f8d2 1d90 	ldr.w	r1, [r2, #3472]	; 0xd90
 80057be:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057c2:	d008      	beq.n	80057d6 <xPortStartScheduler+0xb2>
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	e7fe      	b.n	80057d4 <xPortStartScheduler+0xb0>
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 80057d6:	f8d2 1d90 	ldr.w	r1, [r2, #3472]	; 0xd90
 80057da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057de:	d028      	beq.n	8005832 <xPortStartScheduler+0x10e>
    vPortSetupTimerInterrupt();
 80057e0:	f004 fa50 	bl	8009c84 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 80057e4:	2400      	movs	r4, #0
 80057e6:	4b4e      	ldr	r3, [pc, #312]	; (8005920 <xPortStartScheduler+0x1fc>)
 80057e8:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
 80057ea:	f004 fa11 	bl	8009c10 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80057f2:	f8d2 3f34 	ldr.w	r3, [r2, #3892]	; 0xf34
 80057f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057fa:	f8c2 3f34 	str.w	r3, [r2, #3892]	; 0xf34
    __asm volatile (
 80057fe:	4808      	ldr	r0, [pc, #32]	; (8005820 <xPortStartScheduler+0xfc>)
 8005800:	6800      	ldr	r0, [r0, #0]
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	f380 8808 	msr	MSP, r0
 8005808:	f04f 0000 	mov.w	r0, #0
 800580c:	f380 8814 	msr	CONTROL, r0
 8005810:	b662      	cpsie	i
 8005812:	b661      	cpsie	f
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	df00      	svc	0
 800581e:	bf00      	nop
 8005820:	e000ed08 	.word	0xe000ed08
 8005824:	e000ed94 	.word	0xe000ed94
 8005828:	e000ed9c 	.word	0xe000ed9c
}
 800582c:	4620      	mov	r0, r4
 800582e:	b003      	add	sp, #12
 8005830:	bd30      	pop	{r4, r5, pc}
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8005832:	4d3c      	ldr	r5, [pc, #240]	; (8005924 <xPortStartScheduler+0x200>)
    uint32_t ulRegionSize, ulReturnValue = 4;
 8005834:	4619      	mov	r1, r3
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 8005836:	483c      	ldr	r0, [pc, #240]	; (8005928 <xPortStartScheduler+0x204>)
                                          ( portMPU_REGION_VALID ) |
 8005838:	f045 0410 	orr.w	r4, r5, #16
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 800583c:	1b40      	subs	r0, r0, r5
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 800583e:	f8c2 4d9c 	str.w	r4, [r2, #3484]	; 0xd9c
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005842:	2220      	movs	r2, #32
 8005844:	e002      	b.n	800584c <xPortStartScheduler+0x128>
            ulReturnValue++;
 8005846:	3101      	adds	r1, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005848:	291f      	cmp	r1, #31
 800584a:	d05e      	beq.n	800590a <xPortStartScheduler+0x1e6>
        if( ulActualSizeInBytes <= ulRegionSize )
 800584c:	4290      	cmp	r0, r2
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800584e:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 8005852:	d8f8      	bhi.n	8005846 <xPortStartScheduler+0x122>
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 8005854:	4a35      	ldr	r2, [pc, #212]	; (800592c <xPortStartScheduler+0x208>)
 8005856:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 800585a:	4a35      	ldr	r2, [pc, #212]	; (8005930 <xPortStartScheduler+0x20c>)
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 800585c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 8005860:	4834      	ldr	r0, [pc, #208]	; (8005934 <xPortStartScheduler+0x210>)
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 8005862:	f8cc 1da0 	str.w	r1, [ip, #3488]	; 0xda0
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005866:	2120      	movs	r1, #32
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 8005868:	1a80      	subs	r0, r0, r2
                                          ( portMPU_REGION_VALID ) |
 800586a:	f042 0211 	orr.w	r2, r2, #17
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 800586e:	f8cc 2d9c 	str.w	r2, [ip, #3484]	; 0xd9c
    uint32_t ulRegionSize, ulReturnValue = 4;
 8005872:	2204      	movs	r2, #4
 8005874:	e002      	b.n	800587c <xPortStartScheduler+0x158>
            ulReturnValue++;
 8005876:	3201      	adds	r2, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005878:	2a1f      	cmp	r2, #31
 800587a:	d048      	beq.n	800590e <xPortStartScheduler+0x1ea>
        if( ulActualSizeInBytes <= ulRegionSize )
 800587c:	4288      	cmp	r0, r1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800587e:	ea4f 0141 	mov.w	r1, r1, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 8005882:	d8f8      	bhi.n	8005876 <xPortStartScheduler+0x152>
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 8005884:	492c      	ldr	r1, [pc, #176]	; (8005938 <xPortStartScheduler+0x214>)
 8005886:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <xPortStartScheduler+0x218>)
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 800588c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8005890:	482b      	ldr	r0, [pc, #172]	; (8005940 <xPortStartScheduler+0x21c>)
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 8005892:	f8cc 1da0 	str.w	r1, [ip, #3488]	; 0xda0
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8005896:	2120      	movs	r1, #32
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8005898:	1a80      	subs	r0, r0, r2
                                          ( portMPU_REGION_VALID ) |
 800589a:	f042 0212 	orr.w	r2, r2, #18
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800589e:	f8cc 2d9c 	str.w	r2, [ip, #3484]	; 0xd9c
    uint32_t ulRegionSize, ulReturnValue = 4;
 80058a2:	2204      	movs	r2, #4
 80058a4:	e002      	b.n	80058ac <xPortStartScheduler+0x188>
            ulReturnValue++;
 80058a6:	3201      	adds	r2, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80058a8:	2a1f      	cmp	r2, #31
 80058aa:	d02c      	beq.n	8005906 <xPortStartScheduler+0x1e2>
        if( ulActualSizeInBytes <= ulRegionSize )
 80058ac:	4288      	cmp	r0, r1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80058ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
        if( ulActualSizeInBytes <= ulRegionSize )
 80058b2:	d8f8      	bhi.n	80058a6 <xPortStartScheduler+0x182>
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80058b4:	4923      	ldr	r1, [pc, #140]	; (8005944 <xPortStartScheduler+0x220>)
 80058b6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80058ba:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80058be:	4c22      	ldr	r4, [pc, #136]	; (8005948 <xPortStartScheduler+0x224>)
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80058c0:	2220      	movs	r2, #32
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80058c2:	f8c0 1da0 	str.w	r1, [r0, #3488]	; 0xda0
        if( ulActualSizeInBytes <= ulRegionSize )
 80058c6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80058ca:	f8c0 4d9c 	str.w	r4, [r0, #3484]	; 0xd9c
            ulReturnValue++;
 80058ce:	3301      	adds	r3, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80058d0:	0052      	lsls	r2, r2, #1
 80058d2:	2b1f      	cmp	r3, #31
 80058d4:	d015      	beq.n	8005902 <xPortStartScheduler+0x1de>
        if( ulActualSizeInBytes <= ulRegionSize )
 80058d6:	428a      	cmp	r2, r1
 80058d8:	d3f9      	bcc.n	80058ce <xPortStartScheduler+0x1aa>
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <xPortStartScheduler+0x228>)
 80058dc:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 80058e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 80058e8:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
 80058ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058f0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 80058f4:	f8d3 2d94 	ldr.w	r2, [r3, #3476]	; 0xd94
 80058f8:	f042 0205 	orr.w	r2, r2, #5
 80058fc:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
 8005900:	e76e      	b.n	80057e0 <xPortStartScheduler+0xbc>
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <xPortStartScheduler+0x22c>)
 8005904:	e7ec      	b.n	80058e0 <xPortStartScheduler+0x1bc>
 8005906:	4913      	ldr	r1, [pc, #76]	; (8005954 <xPortStartScheduler+0x230>)
 8005908:	e7d7      	b.n	80058ba <xPortStartScheduler+0x196>
 800590a:	4913      	ldr	r1, [pc, #76]	; (8005958 <xPortStartScheduler+0x234>)
 800590c:	e7a5      	b.n	800585a <xPortStartScheduler+0x136>
 800590e:	4913      	ldr	r1, [pc, #76]	; (800595c <xPortStartScheduler+0x238>)
 8005910:	e7bb      	b.n	800588a <xPortStartScheduler+0x166>
 8005912:	bf00      	nop
 8005914:	e000e400 	.word	0xe000e400
 8005918:	24010020 	.word	0x24010020
 800591c:	2401001d 	.word	0x2401001d
 8005920:	24008014 	.word	0x24008014
 8005924:	08000000 	.word	0x08000000
 8005928:	08100000 	.word	0x08100000
 800592c:	06070001 	.word	0x06070001
 8005930:	08000000 	.word	0x08000000
 8005934:	08008000 	.word	0x08008000
 8005938:	05070001 	.word	0x05070001
 800593c:	24000000 	.word	0x24000000
 8005940:	24008000 	.word	0x24008000
 8005944:	01030001 	.word	0x01030001
 8005948:	40000013 	.word	0x40000013
 800594c:	13000001 	.word	0x13000001
 8005950:	1300003f 	.word	0x1300003f
 8005954:	0103003f 	.word	0x0103003f
 8005958:	0607003f 	.word	0x0607003f
 800595c:	0507003f 	.word	0x0507003f

08005960 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005964:	4d54      	ldr	r5, [pc, #336]	; (8005ab8 <pvPortMalloc+0x158>)
{
 8005966:	4606      	mov	r6, r0
    vTaskSuspendAll();
 8005968:	f7fd fdfa 	bl	8003560 <vTaskSuspendAll>
        if( pxEnd == NULL )
 800596c:	68ab      	ldr	r3, [r5, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03d      	beq.n	80059ee <pvPortMalloc+0x8e>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005972:	68ec      	ldr	r4, [r5, #12]
 8005974:	4226      	tst	r6, r4
 8005976:	d132      	bne.n	80059de <pvPortMalloc+0x7e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005978:	1e72      	subs	r2, r6, #1
 800597a:	320a      	adds	r2, #10
 800597c:	d82f      	bhi.n	80059de <pvPortMalloc+0x7e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800597e:	0772      	lsls	r2, r6, #29
                xWantedSize += xHeapStructSize;
 8005980:	f106 0c08 	add.w	ip, r6, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005984:	d126      	bne.n	80059d4 <pvPortMalloc+0x74>
            else
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005986:	696f      	ldr	r7, [r5, #20]
 8005988:	4567      	cmp	r7, ip
 800598a:	d328      	bcc.n	80059de <pvPortMalloc+0x7e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
 800598c:	682a      	ldr	r2, [r5, #0]
                pxPreviousBlock = &xStart;
 800598e:	f8df e128 	ldr.w	lr, [pc, #296]	; 8005ab8 <pvPortMalloc+0x158>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005992:	e003      	b.n	800599c <pvPortMalloc+0x3c>
 8005994:	6810      	ldr	r0, [r2, #0]
 8005996:	b120      	cbz	r0, 80059a2 <pvPortMalloc+0x42>
 8005998:	4696      	mov	lr, r2
 800599a:	4602      	mov	r2, r0
 800599c:	6851      	ldr	r1, [r2, #4]
 800599e:	4561      	cmp	r1, ip
 80059a0:	d3f8      	bcc.n	8005994 <pvPortMalloc+0x34>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d01b      	beq.n	80059de <pvPortMalloc+0x7e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059a6:	4616      	mov	r6, r2
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a8:	eba1 000c 	sub.w	r0, r1, ip
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059ac:	f856 8b08 	ldr.w	r8, [r6], #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059b0:	2810      	cmp	r0, #16
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059b2:	f8ce 8000 	str.w	r8, [lr]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059b6:	d956      	bls.n	8005a66 <pvPortMalloc+0x106>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b8:	eb02 010c 	add.w	r1, r2, ip
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059bc:	f011 0f07 	tst.w	r1, #7
 80059c0:	d037      	beq.n	8005a32 <pvPortMalloc+0xd2>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	e7fe      	b.n	80059d2 <pvPortMalloc+0x72>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80059d4:	f02c 0207 	bic.w	r2, ip, #7
 80059d8:	3208      	adds	r2, #8
 80059da:	4562      	cmp	r2, ip
 80059dc:	d827      	bhi.n	8005a2e <pvPortMalloc+0xce>
    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 80059de:	2600      	movs	r6, #0
    ( void ) xTaskResumeAll();
 80059e0:	f7fe fa5c 	bl	8003e9c <xTaskResumeAll>
                vApplicationMallocFailedHook();
 80059e4:	f004 f9d8 	bl	8009d98 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 80059e8:	4630      	mov	r0, r6
 80059ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059ee:	4b33      	ldr	r3, [pc, #204]	; (8005abc <pvPortMalloc+0x15c>)

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059f0:	0759      	lsls	r1, r3, #29
 80059f2:	d115      	bne.n	8005a20 <pvPortMalloc+0xc0>
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    xStart.xBlockSize = ( size_t ) 0;

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059f4:	461a      	mov	r2, r3
 80059f6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80059fa:	4610      	mov	r0, r2
    uxAddress -= xHeapStructSize;
 80059fc:	3b08      	subs	r3, #8
    xStart.xBlockSize = ( size_t ) 0;
 80059fe:	2100      	movs	r1, #0
    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a04:	6028      	str	r0, [r5, #0]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a06:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8005a0a:	6069      	str	r1, [r5, #4]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	60ec      	str	r4, [r5, #12]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a0e:	1a9a      	subs	r2, r3, r2
    pxEnd = ( void * ) uxAddress;
 8005a10:	60ab      	str	r3, [r5, #8]
    pxEnd->pxNextFreeBlock = NULL;
 8005a12:	e9c3 1100 	strd	r1, r1, [r3]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a16:	e9c5 2204 	strd	r2, r2, [r5, #16]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a1a:	e9c0 3200 	strd	r3, r2, [r0]
}
 8005a1e:	e7a9      	b.n	8005974 <pvPortMalloc+0x14>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a20:	1dda      	adds	r2, r3, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a22:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8005a26:	f022 0207 	bic.w	r2, r2, #7
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	e7e6      	b.n	80059fc <pvPortMalloc+0x9c>
 8005a2e:	4694      	mov	ip, r2
 8005a30:	e7a9      	b.n	8005986 <pvPortMalloc+0x26>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a32:	6048      	str	r0, [r1, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a34:	4820      	ldr	r0, [pc, #128]	; (8005ab8 <pvPortMalloc+0x158>)
                        pxBlock->xBlockSize = xWantedSize;
 8005a36:	f8c2 c004 	str.w	ip, [r2, #4]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a3a:	4684      	mov	ip, r0
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	4281      	cmp	r1, r0
 8005a40:	d8fb      	bhi.n	8005a3a <pvPortMalloc+0xda>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a42:	f8dc e004 	ldr.w	lr, [ip, #4]
 8005a46:	eb0c 080e 	add.w	r8, ip, lr
 8005a4a:	4541      	cmp	r1, r8
 8005a4c:	d026      	beq.n	8005a9c <pvPortMalloc+0x13c>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8005a52:	eb01 080e 	add.w	r8, r1, lr
 8005a56:	4540      	cmp	r0, r8
 8005a58:	d026      	beq.n	8005aa8 <pvPortMalloc+0x148>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a5a:	6008      	str	r0, [r1, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005a5c:	458c      	cmp	ip, r1
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a5e:	bf18      	it	ne
 8005a60:	f8cc 1000 	strne.w	r1, [ip]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a64:	6851      	ldr	r1, [r2, #4]
 8005a66:	1a7f      	subs	r7, r7, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a68:	692b      	ldr	r3, [r5, #16]
 8005a6a:	429f      	cmp	r7, r3
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a6c:	616f      	str	r7, [r5, #20]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a6e:	d313      	bcc.n	8005a98 <pvPortMalloc+0x138>
                    xNumberOfSuccessfulAllocations++;
 8005a70:	69ab      	ldr	r3, [r5, #24]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a72:	4321      	orrs	r1, r4
                    pxBlock->pxNextFreeBlock = NULL;
 8005a74:	2000      	movs	r0, #0
                    xNumberOfSuccessfulAllocations++;
 8005a76:	3301      	adds	r3, #1
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a78:	6051      	str	r1, [r2, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005a7a:	6010      	str	r0, [r2, #0]
                    xNumberOfSuccessfulAllocations++;
 8005a7c:	61ab      	str	r3, [r5, #24]
    ( void ) xTaskResumeAll();
 8005a7e:	f7fe fa0d 	bl	8003e9c <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a82:	0773      	lsls	r3, r6, #29
 8005a84:	d0b0      	beq.n	80059e8 <pvPortMalloc+0x88>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	e7fe      	b.n	8005a96 <pvPortMalloc+0x136>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a98:	612f      	str	r7, [r5, #16]
 8005a9a:	e7e9      	b.n	8005a70 <pvPortMalloc+0x110>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a9c:	6849      	ldr	r1, [r1, #4]
 8005a9e:	448e      	add	lr, r1
 8005aa0:	4661      	mov	r1, ip
 8005aa2:	f8cc e004 	str.w	lr, [ip, #4]
        pxBlockToInsert = pxIterator;
 8005aa6:	e7d4      	b.n	8005a52 <pvPortMalloc+0xf2>
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aa8:	4298      	cmp	r0, r3
 8005aaa:	d0d6      	beq.n	8005a5a <pvPortMalloc+0xfa>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aac:	6843      	ldr	r3, [r0, #4]
 8005aae:	4473      	add	r3, lr
 8005ab0:	604b      	str	r3, [r1, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ab2:	6803      	ldr	r3, [r0, #0]
 8005ab4:	600b      	str	r3, [r1, #0]
 8005ab6:	e7d1      	b.n	8005a5c <pvPortMalloc+0xfc>
 8005ab8:	24000668 	.word	0x24000668
 8005abc:	24000688 	.word	0x24000688

08005ac0 <vPortFree>:
    if( pv != NULL )
 8005ac0:	b1e0      	cbz	r0, 8005afc <vPortFree+0x3c>
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ac2:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
 8005ac6:	b530      	push	{r4, r5, lr}
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ac8:	4c28      	ldr	r4, [pc, #160]	; (8005b6c <vPortFree+0xac>)
{
 8005aca:	b083      	sub	sp, #12
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005acc:	68e2      	ldr	r2, [r4, #12]
 8005ace:	4213      	tst	r3, r2
 8005ad0:	d00b      	beq.n	8005aea <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ad2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005ad6:	b191      	cbz	r1, 8005afe <vPortFree+0x3e>
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	e7fe      	b.n	8005ae8 <vPortFree+0x28>
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005afa:	e7fe      	b.n	8005afa <vPortFree+0x3a>
 8005afc:	4770      	bx	lr
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005afe:	ea23 0302 	bic.w	r3, r3, r2
        puc -= xHeapStructSize;
 8005b02:	f1a0 0508 	sub.w	r5, r0, #8
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b06:	9001      	str	r0, [sp, #4]
 8005b08:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8005b0c:	f7fd fd28 	bl	8003560 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b10:	9801      	ldr	r0, [sp, #4]
 8005b12:	6962      	ldr	r2, [r4, #20]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b14:	4623      	mov	r3, r4
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b16:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	6162      	str	r2, [r4, #20]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b1e:	461a      	mov	r2, r3
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429d      	cmp	r5, r3
 8005b24:	d8fb      	bhi.n	8005b1e <vPortFree+0x5e>
    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b26:	6850      	ldr	r0, [r2, #4]
 8005b28:	eb02 0c00 	add.w	ip, r2, r0
 8005b2c:	4565      	cmp	r5, ip
 8005b2e:	d018      	beq.n	8005b62 <vPortFree+0xa2>
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b30:	1868      	adds	r0, r5, r1
 8005b32:	4283      	cmp	r3, r0
 8005b34:	d00c      	beq.n	8005b50 <vPortFree+0x90>
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b36:	602b      	str	r3, [r5, #0]
                    xNumberOfSuccessfulFrees++;
 8005b38:	69e3      	ldr	r3, [r4, #28]
    if( pxIterator != pxBlockToInsert )
 8005b3a:	42aa      	cmp	r2, r5
                    xNumberOfSuccessfulFrees++;
 8005b3c:	f103 0301 	add.w	r3, r3, #1
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b40:	bf18      	it	ne
 8005b42:	6015      	strne	r5, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8005b44:	61e3      	str	r3, [r4, #28]
}
 8005b46:	b003      	add	sp, #12
 8005b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                ( void ) xTaskResumeAll();
 8005b4c:	f7fe b9a6 	b.w	8003e9c <xTaskResumeAll>
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b50:	68a0      	ldr	r0, [r4, #8]
 8005b52:	4283      	cmp	r3, r0
 8005b54:	d0ef      	beq.n	8005b36 <vPortFree+0x76>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b56:	6858      	ldr	r0, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b58:	681b      	ldr	r3, [r3, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b5a:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b5c:	e9c5 3100 	strd	r3, r1, [r5]
 8005b60:	e7ea      	b.n	8005b38 <vPortFree+0x78>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b62:	4401      	add	r1, r0
 8005b64:	4615      	mov	r5, r2
 8005b66:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8005b68:	e7e2      	b.n	8005b30 <vPortFree+0x70>
 8005b6a:	bf00      	nop
 8005b6c:	24000668 	.word	0x24000668

08005b70 <vPortInitialiseBlocks>:
}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop

08005b74 <xPortGetFreeHeapSize>:
    return xFreeBytesRemaining;
 8005b74:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <xPortGetFreeHeapSize+0x8>)
}
 8005b76:	6958      	ldr	r0, [r3, #20]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	24000668 	.word	0x24000668

08005b80 <xPortGetMinimumEverFreeHeapSize>:
    return xMinimumEverFreeBytesRemaining;
 8005b80:	4b01      	ldr	r3, [pc, #4]	; (8005b88 <xPortGetMinimumEverFreeHeapSize+0x8>)
}
 8005b82:	6918      	ldr	r0, [r3, #16]
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	24000668 	.word	0x24000668
 8005b8c:	addeadde 	.word	0xaddeadde
 8005b90:	addeadde 	.word	0xaddeadde
 8005b94:	addeadde 	.word	0xaddeadde
 8005b98:	addeadde 	.word	0xaddeadde
 8005b9c:	addeadde 	.word	0xaddeadde
 8005ba0:	addeadde 	.word	0xaddeadde
 8005ba4:	addeadde 	.word	0xaddeadde
 8005ba8:	addeadde 	.word	0xaddeadde
 8005bac:	addeadde 	.word	0xaddeadde
 8005bb0:	addeadde 	.word	0xaddeadde
 8005bb4:	addeadde 	.word	0xaddeadde
 8005bb8:	addeadde 	.word	0xaddeadde
 8005bbc:	addeadde 	.word	0xaddeadde
 8005bc0:	addeadde 	.word	0xaddeadde
 8005bc4:	addeadde 	.word	0xaddeadde
 8005bc8:	addeadde 	.word	0xaddeadde
 8005bcc:	addeadde 	.word	0xaddeadde
 8005bd0:	addeadde 	.word	0xaddeadde
 8005bd4:	addeadde 	.word	0xaddeadde
 8005bd8:	addeadde 	.word	0xaddeadde
 8005bdc:	addeadde 	.word	0xaddeadde
 8005be0:	addeadde 	.word	0xaddeadde
 8005be4:	addeadde 	.word	0xaddeadde
 8005be8:	addeadde 	.word	0xaddeadde
 8005bec:	addeadde 	.word	0xaddeadde
 8005bf0:	addeadde 	.word	0xaddeadde
 8005bf4:	addeadde 	.word	0xaddeadde
 8005bf8:	addeadde 	.word	0xaddeadde
 8005bfc:	addeadde 	.word	0xaddeadde
 8005c00:	addeadde 	.word	0xaddeadde
 8005c04:	addeadde 	.word	0xaddeadde
 8005c08:	addeadde 	.word	0xaddeadde
 8005c0c:	addeadde 	.word	0xaddeadde
 8005c10:	addeadde 	.word	0xaddeadde
 8005c14:	addeadde 	.word	0xaddeadde
 8005c18:	addeadde 	.word	0xaddeadde
 8005c1c:	addeadde 	.word	0xaddeadde
 8005c20:	addeadde 	.word	0xaddeadde
 8005c24:	addeadde 	.word	0xaddeadde
 8005c28:	addeadde 	.word	0xaddeadde
 8005c2c:	addeadde 	.word	0xaddeadde
 8005c30:	addeadde 	.word	0xaddeadde
 8005c34:	addeadde 	.word	0xaddeadde
 8005c38:	addeadde 	.word	0xaddeadde
 8005c3c:	addeadde 	.word	0xaddeadde
 8005c40:	addeadde 	.word	0xaddeadde
 8005c44:	addeadde 	.word	0xaddeadde
 8005c48:	addeadde 	.word	0xaddeadde
 8005c4c:	addeadde 	.word	0xaddeadde
 8005c50:	addeadde 	.word	0xaddeadde
 8005c54:	addeadde 	.word	0xaddeadde
 8005c58:	addeadde 	.word	0xaddeadde
 8005c5c:	addeadde 	.word	0xaddeadde
 8005c60:	addeadde 	.word	0xaddeadde
 8005c64:	addeadde 	.word	0xaddeadde
 8005c68:	addeadde 	.word	0xaddeadde
 8005c6c:	addeadde 	.word	0xaddeadde
 8005c70:	addeadde 	.word	0xaddeadde
 8005c74:	addeadde 	.word	0xaddeadde
 8005c78:	addeadde 	.word	0xaddeadde
 8005c7c:	addeadde 	.word	0xaddeadde
 8005c80:	addeadde 	.word	0xaddeadde
 8005c84:	addeadde 	.word	0xaddeadde
 8005c88:	addeadde 	.word	0xaddeadde
 8005c8c:	addeadde 	.word	0xaddeadde
 8005c90:	addeadde 	.word	0xaddeadde
 8005c94:	addeadde 	.word	0xaddeadde
 8005c98:	addeadde 	.word	0xaddeadde
 8005c9c:	addeadde 	.word	0xaddeadde
 8005ca0:	addeadde 	.word	0xaddeadde
 8005ca4:	addeadde 	.word	0xaddeadde
 8005ca8:	addeadde 	.word	0xaddeadde
 8005cac:	addeadde 	.word	0xaddeadde
 8005cb0:	addeadde 	.word	0xaddeadde
 8005cb4:	addeadde 	.word	0xaddeadde
 8005cb8:	addeadde 	.word	0xaddeadde
 8005cbc:	addeadde 	.word	0xaddeadde
 8005cc0:	addeadde 	.word	0xaddeadde
 8005cc4:	addeadde 	.word	0xaddeadde
 8005cc8:	addeadde 	.word	0xaddeadde
 8005ccc:	addeadde 	.word	0xaddeadde
 8005cd0:	addeadde 	.word	0xaddeadde
 8005cd4:	addeadde 	.word	0xaddeadde
 8005cd8:	addeadde 	.word	0xaddeadde
 8005cdc:	addeadde 	.word	0xaddeadde
 8005ce0:	addeadde 	.word	0xaddeadde
 8005ce4:	addeadde 	.word	0xaddeadde
 8005ce8:	addeadde 	.word	0xaddeadde
 8005cec:	addeadde 	.word	0xaddeadde
 8005cf0:	addeadde 	.word	0xaddeadde
 8005cf4:	addeadde 	.word	0xaddeadde
 8005cf8:	addeadde 	.word	0xaddeadde
 8005cfc:	addeadde 	.word	0xaddeadde
 8005d00:	addeadde 	.word	0xaddeadde
 8005d04:	addeadde 	.word	0xaddeadde
 8005d08:	addeadde 	.word	0xaddeadde
 8005d0c:	addeadde 	.word	0xaddeadde
 8005d10:	addeadde 	.word	0xaddeadde
 8005d14:	addeadde 	.word	0xaddeadde
 8005d18:	addeadde 	.word	0xaddeadde
 8005d1c:	addeadde 	.word	0xaddeadde
 8005d20:	addeadde 	.word	0xaddeadde
 8005d24:	addeadde 	.word	0xaddeadde
 8005d28:	addeadde 	.word	0xaddeadde
 8005d2c:	addeadde 	.word	0xaddeadde
 8005d30:	addeadde 	.word	0xaddeadde
 8005d34:	addeadde 	.word	0xaddeadde
 8005d38:	addeadde 	.word	0xaddeadde
 8005d3c:	addeadde 	.word	0xaddeadde
 8005d40:	addeadde 	.word	0xaddeadde
 8005d44:	addeadde 	.word	0xaddeadde
 8005d48:	addeadde 	.word	0xaddeadde
 8005d4c:	addeadde 	.word	0xaddeadde
 8005d50:	addeadde 	.word	0xaddeadde
 8005d54:	addeadde 	.word	0xaddeadde
 8005d58:	addeadde 	.word	0xaddeadde
 8005d5c:	addeadde 	.word	0xaddeadde
 8005d60:	addeadde 	.word	0xaddeadde
 8005d64:	addeadde 	.word	0xaddeadde
 8005d68:	addeadde 	.word	0xaddeadde
 8005d6c:	addeadde 	.word	0xaddeadde
 8005d70:	addeadde 	.word	0xaddeadde
 8005d74:	addeadde 	.word	0xaddeadde
 8005d78:	addeadde 	.word	0xaddeadde
 8005d7c:	addeadde 	.word	0xaddeadde
 8005d80:	addeadde 	.word	0xaddeadde
 8005d84:	addeadde 	.word	0xaddeadde
 8005d88:	addeadde 	.word	0xaddeadde
 8005d8c:	addeadde 	.word	0xaddeadde
 8005d90:	addeadde 	.word	0xaddeadde
 8005d94:	addeadde 	.word	0xaddeadde
 8005d98:	addeadde 	.word	0xaddeadde
 8005d9c:	addeadde 	.word	0xaddeadde
 8005da0:	addeadde 	.word	0xaddeadde
 8005da4:	addeadde 	.word	0xaddeadde
 8005da8:	addeadde 	.word	0xaddeadde
 8005dac:	addeadde 	.word	0xaddeadde
 8005db0:	addeadde 	.word	0xaddeadde
 8005db4:	addeadde 	.word	0xaddeadde
 8005db8:	addeadde 	.word	0xaddeadde
 8005dbc:	addeadde 	.word	0xaddeadde
 8005dc0:	addeadde 	.word	0xaddeadde
 8005dc4:	addeadde 	.word	0xaddeadde
 8005dc8:	addeadde 	.word	0xaddeadde
 8005dcc:	addeadde 	.word	0xaddeadde
 8005dd0:	addeadde 	.word	0xaddeadde
 8005dd4:	addeadde 	.word	0xaddeadde
 8005dd8:	addeadde 	.word	0xaddeadde
 8005ddc:	addeadde 	.word	0xaddeadde
 8005de0:	addeadde 	.word	0xaddeadde
 8005de4:	addeadde 	.word	0xaddeadde
 8005de8:	addeadde 	.word	0xaddeadde
 8005dec:	addeadde 	.word	0xaddeadde
 8005df0:	addeadde 	.word	0xaddeadde
 8005df4:	addeadde 	.word	0xaddeadde
 8005df8:	addeadde 	.word	0xaddeadde
 8005dfc:	addeadde 	.word	0xaddeadde
 8005e00:	addeadde 	.word	0xaddeadde
 8005e04:	addeadde 	.word	0xaddeadde
 8005e08:	addeadde 	.word	0xaddeadde
 8005e0c:	addeadde 	.word	0xaddeadde
 8005e10:	addeadde 	.word	0xaddeadde
 8005e14:	addeadde 	.word	0xaddeadde
 8005e18:	addeadde 	.word	0xaddeadde
 8005e1c:	addeadde 	.word	0xaddeadde
 8005e20:	addeadde 	.word	0xaddeadde
 8005e24:	addeadde 	.word	0xaddeadde
 8005e28:	addeadde 	.word	0xaddeadde
 8005e2c:	addeadde 	.word	0xaddeadde
 8005e30:	addeadde 	.word	0xaddeadde
 8005e34:	addeadde 	.word	0xaddeadde
 8005e38:	addeadde 	.word	0xaddeadde
 8005e3c:	addeadde 	.word	0xaddeadde
 8005e40:	addeadde 	.word	0xaddeadde
 8005e44:	addeadde 	.word	0xaddeadde
 8005e48:	addeadde 	.word	0xaddeadde
 8005e4c:	addeadde 	.word	0xaddeadde
 8005e50:	addeadde 	.word	0xaddeadde
 8005e54:	addeadde 	.word	0xaddeadde
 8005e58:	addeadde 	.word	0xaddeadde
 8005e5c:	addeadde 	.word	0xaddeadde
 8005e60:	addeadde 	.word	0xaddeadde
 8005e64:	addeadde 	.word	0xaddeadde
 8005e68:	addeadde 	.word	0xaddeadde
 8005e6c:	addeadde 	.word	0xaddeadde
 8005e70:	addeadde 	.word	0xaddeadde
 8005e74:	addeadde 	.word	0xaddeadde
 8005e78:	addeadde 	.word	0xaddeadde
 8005e7c:	addeadde 	.word	0xaddeadde
 8005e80:	addeadde 	.word	0xaddeadde
 8005e84:	addeadde 	.word	0xaddeadde
 8005e88:	addeadde 	.word	0xaddeadde
 8005e8c:	addeadde 	.word	0xaddeadde
 8005e90:	addeadde 	.word	0xaddeadde
 8005e94:	addeadde 	.word	0xaddeadde
 8005e98:	addeadde 	.word	0xaddeadde
 8005e9c:	addeadde 	.word	0xaddeadde
 8005ea0:	addeadde 	.word	0xaddeadde
 8005ea4:	addeadde 	.word	0xaddeadde
 8005ea8:	addeadde 	.word	0xaddeadde
 8005eac:	addeadde 	.word	0xaddeadde
 8005eb0:	addeadde 	.word	0xaddeadde
 8005eb4:	addeadde 	.word	0xaddeadde
 8005eb8:	addeadde 	.word	0xaddeadde
 8005ebc:	addeadde 	.word	0xaddeadde
 8005ec0:	addeadde 	.word	0xaddeadde
 8005ec4:	addeadde 	.word	0xaddeadde
 8005ec8:	addeadde 	.word	0xaddeadde
 8005ecc:	addeadde 	.word	0xaddeadde
 8005ed0:	addeadde 	.word	0xaddeadde
 8005ed4:	addeadde 	.word	0xaddeadde
 8005ed8:	addeadde 	.word	0xaddeadde
 8005edc:	addeadde 	.word	0xaddeadde
 8005ee0:	addeadde 	.word	0xaddeadde
 8005ee4:	addeadde 	.word	0xaddeadde
 8005ee8:	addeadde 	.word	0xaddeadde
 8005eec:	addeadde 	.word	0xaddeadde
 8005ef0:	addeadde 	.word	0xaddeadde
 8005ef4:	addeadde 	.word	0xaddeadde
 8005ef8:	addeadde 	.word	0xaddeadde
 8005efc:	addeadde 	.word	0xaddeadde
 8005f00:	addeadde 	.word	0xaddeadde
 8005f04:	addeadde 	.word	0xaddeadde
 8005f08:	addeadde 	.word	0xaddeadde
 8005f0c:	addeadde 	.word	0xaddeadde
 8005f10:	addeadde 	.word	0xaddeadde
 8005f14:	addeadde 	.word	0xaddeadde
 8005f18:	addeadde 	.word	0xaddeadde
 8005f1c:	addeadde 	.word	0xaddeadde
 8005f20:	addeadde 	.word	0xaddeadde
 8005f24:	addeadde 	.word	0xaddeadde
 8005f28:	addeadde 	.word	0xaddeadde
 8005f2c:	addeadde 	.word	0xaddeadde
 8005f30:	addeadde 	.word	0xaddeadde
 8005f34:	addeadde 	.word	0xaddeadde
 8005f38:	addeadde 	.word	0xaddeadde
 8005f3c:	addeadde 	.word	0xaddeadde
 8005f40:	addeadde 	.word	0xaddeadde
 8005f44:	addeadde 	.word	0xaddeadde
 8005f48:	addeadde 	.word	0xaddeadde
 8005f4c:	addeadde 	.word	0xaddeadde
 8005f50:	addeadde 	.word	0xaddeadde
 8005f54:	addeadde 	.word	0xaddeadde
 8005f58:	addeadde 	.word	0xaddeadde
 8005f5c:	addeadde 	.word	0xaddeadde
 8005f60:	addeadde 	.word	0xaddeadde
 8005f64:	addeadde 	.word	0xaddeadde
 8005f68:	addeadde 	.word	0xaddeadde
 8005f6c:	addeadde 	.word	0xaddeadde
 8005f70:	addeadde 	.word	0xaddeadde
 8005f74:	addeadde 	.word	0xaddeadde
 8005f78:	addeadde 	.word	0xaddeadde
 8005f7c:	addeadde 	.word	0xaddeadde
 8005f80:	addeadde 	.word	0xaddeadde
 8005f84:	addeadde 	.word	0xaddeadde
 8005f88:	addeadde 	.word	0xaddeadde
 8005f8c:	addeadde 	.word	0xaddeadde
 8005f90:	addeadde 	.word	0xaddeadde
 8005f94:	addeadde 	.word	0xaddeadde
 8005f98:	addeadde 	.word	0xaddeadde
 8005f9c:	addeadde 	.word	0xaddeadde
 8005fa0:	addeadde 	.word	0xaddeadde
 8005fa4:	addeadde 	.word	0xaddeadde
 8005fa8:	addeadde 	.word	0xaddeadde
 8005fac:	addeadde 	.word	0xaddeadde
 8005fb0:	addeadde 	.word	0xaddeadde
 8005fb4:	addeadde 	.word	0xaddeadde
 8005fb8:	addeadde 	.word	0xaddeadde
 8005fbc:	addeadde 	.word	0xaddeadde
 8005fc0:	addeadde 	.word	0xaddeadde
 8005fc4:	addeadde 	.word	0xaddeadde
 8005fc8:	addeadde 	.word	0xaddeadde
 8005fcc:	addeadde 	.word	0xaddeadde
 8005fd0:	addeadde 	.word	0xaddeadde
 8005fd4:	addeadde 	.word	0xaddeadde
 8005fd8:	addeadde 	.word	0xaddeadde
 8005fdc:	addeadde 	.word	0xaddeadde
 8005fe0:	addeadde 	.word	0xaddeadde
 8005fe4:	addeadde 	.word	0xaddeadde
 8005fe8:	addeadde 	.word	0xaddeadde
 8005fec:	addeadde 	.word	0xaddeadde
 8005ff0:	addeadde 	.word	0xaddeadde
 8005ff4:	addeadde 	.word	0xaddeadde
 8005ff8:	addeadde 	.word	0xaddeadde
 8005ffc:	addeadde 	.word	0xaddeadde
 8006000:	addeadde 	.word	0xaddeadde
 8006004:	addeadde 	.word	0xaddeadde
 8006008:	addeadde 	.word	0xaddeadde
 800600c:	addeadde 	.word	0xaddeadde
 8006010:	addeadde 	.word	0xaddeadde
 8006014:	addeadde 	.word	0xaddeadde
 8006018:	addeadde 	.word	0xaddeadde
 800601c:	addeadde 	.word	0xaddeadde
 8006020:	addeadde 	.word	0xaddeadde
 8006024:	addeadde 	.word	0xaddeadde
 8006028:	addeadde 	.word	0xaddeadde
 800602c:	addeadde 	.word	0xaddeadde
 8006030:	addeadde 	.word	0xaddeadde
 8006034:	addeadde 	.word	0xaddeadde
 8006038:	addeadde 	.word	0xaddeadde
 800603c:	addeadde 	.word	0xaddeadde
 8006040:	addeadde 	.word	0xaddeadde
 8006044:	addeadde 	.word	0xaddeadde
 8006048:	addeadde 	.word	0xaddeadde
 800604c:	addeadde 	.word	0xaddeadde
 8006050:	addeadde 	.word	0xaddeadde
 8006054:	addeadde 	.word	0xaddeadde
 8006058:	addeadde 	.word	0xaddeadde
 800605c:	addeadde 	.word	0xaddeadde
 8006060:	addeadde 	.word	0xaddeadde
 8006064:	addeadde 	.word	0xaddeadde
 8006068:	addeadde 	.word	0xaddeadde
 800606c:	addeadde 	.word	0xaddeadde
 8006070:	addeadde 	.word	0xaddeadde
 8006074:	addeadde 	.word	0xaddeadde
 8006078:	addeadde 	.word	0xaddeadde
 800607c:	addeadde 	.word	0xaddeadde
 8006080:	addeadde 	.word	0xaddeadde
 8006084:	addeadde 	.word	0xaddeadde
 8006088:	addeadde 	.word	0xaddeadde
 800608c:	addeadde 	.word	0xaddeadde
 8006090:	addeadde 	.word	0xaddeadde
 8006094:	addeadde 	.word	0xaddeadde
 8006098:	addeadde 	.word	0xaddeadde
 800609c:	addeadde 	.word	0xaddeadde
 80060a0:	addeadde 	.word	0xaddeadde
 80060a4:	addeadde 	.word	0xaddeadde
 80060a8:	addeadde 	.word	0xaddeadde
 80060ac:	addeadde 	.word	0xaddeadde
 80060b0:	addeadde 	.word	0xaddeadde
 80060b4:	addeadde 	.word	0xaddeadde
 80060b8:	addeadde 	.word	0xaddeadde
 80060bc:	addeadde 	.word	0xaddeadde
 80060c0:	addeadde 	.word	0xaddeadde
 80060c4:	addeadde 	.word	0xaddeadde
 80060c8:	addeadde 	.word	0xaddeadde
 80060cc:	addeadde 	.word	0xaddeadde
 80060d0:	addeadde 	.word	0xaddeadde
 80060d4:	addeadde 	.word	0xaddeadde
 80060d8:	addeadde 	.word	0xaddeadde
 80060dc:	addeadde 	.word	0xaddeadde
 80060e0:	addeadde 	.word	0xaddeadde
 80060e4:	addeadde 	.word	0xaddeadde
 80060e8:	addeadde 	.word	0xaddeadde
 80060ec:	addeadde 	.word	0xaddeadde
 80060f0:	addeadde 	.word	0xaddeadde
 80060f4:	addeadde 	.word	0xaddeadde
 80060f8:	addeadde 	.word	0xaddeadde
 80060fc:	addeadde 	.word	0xaddeadde
 8006100:	addeadde 	.word	0xaddeadde
 8006104:	addeadde 	.word	0xaddeadde
 8006108:	addeadde 	.word	0xaddeadde
 800610c:	addeadde 	.word	0xaddeadde
 8006110:	addeadde 	.word	0xaddeadde
 8006114:	addeadde 	.word	0xaddeadde
 8006118:	addeadde 	.word	0xaddeadde
 800611c:	addeadde 	.word	0xaddeadde
 8006120:	addeadde 	.word	0xaddeadde
 8006124:	addeadde 	.word	0xaddeadde
 8006128:	addeadde 	.word	0xaddeadde
 800612c:	addeadde 	.word	0xaddeadde
 8006130:	addeadde 	.word	0xaddeadde
 8006134:	addeadde 	.word	0xaddeadde
 8006138:	addeadde 	.word	0xaddeadde
 800613c:	addeadde 	.word	0xaddeadde
 8006140:	addeadde 	.word	0xaddeadde
 8006144:	addeadde 	.word	0xaddeadde
 8006148:	addeadde 	.word	0xaddeadde
 800614c:	addeadde 	.word	0xaddeadde
 8006150:	addeadde 	.word	0xaddeadde
 8006154:	addeadde 	.word	0xaddeadde
 8006158:	addeadde 	.word	0xaddeadde
 800615c:	addeadde 	.word	0xaddeadde
 8006160:	addeadde 	.word	0xaddeadde
 8006164:	addeadde 	.word	0xaddeadde
 8006168:	addeadde 	.word	0xaddeadde
 800616c:	addeadde 	.word	0xaddeadde
 8006170:	addeadde 	.word	0xaddeadde
 8006174:	addeadde 	.word	0xaddeadde
 8006178:	addeadde 	.word	0xaddeadde
 800617c:	addeadde 	.word	0xaddeadde
 8006180:	addeadde 	.word	0xaddeadde
 8006184:	addeadde 	.word	0xaddeadde
 8006188:	addeadde 	.word	0xaddeadde
 800618c:	addeadde 	.word	0xaddeadde
 8006190:	addeadde 	.word	0xaddeadde
 8006194:	addeadde 	.word	0xaddeadde
 8006198:	addeadde 	.word	0xaddeadde
 800619c:	addeadde 	.word	0xaddeadde
 80061a0:	addeadde 	.word	0xaddeadde
 80061a4:	addeadde 	.word	0xaddeadde
 80061a8:	addeadde 	.word	0xaddeadde
 80061ac:	addeadde 	.word	0xaddeadde
 80061b0:	addeadde 	.word	0xaddeadde
 80061b4:	addeadde 	.word	0xaddeadde
 80061b8:	addeadde 	.word	0xaddeadde
 80061bc:	addeadde 	.word	0xaddeadde
 80061c0:	addeadde 	.word	0xaddeadde
 80061c4:	addeadde 	.word	0xaddeadde
 80061c8:	addeadde 	.word	0xaddeadde
 80061cc:	addeadde 	.word	0xaddeadde
 80061d0:	addeadde 	.word	0xaddeadde
 80061d4:	addeadde 	.word	0xaddeadde
 80061d8:	addeadde 	.word	0xaddeadde
 80061dc:	addeadde 	.word	0xaddeadde
 80061e0:	addeadde 	.word	0xaddeadde
 80061e4:	addeadde 	.word	0xaddeadde
 80061e8:	addeadde 	.word	0xaddeadde
 80061ec:	addeadde 	.word	0xaddeadde
 80061f0:	addeadde 	.word	0xaddeadde
 80061f4:	addeadde 	.word	0xaddeadde
 80061f8:	addeadde 	.word	0xaddeadde
 80061fc:	addeadde 	.word	0xaddeadde
 8006200:	addeadde 	.word	0xaddeadde
 8006204:	addeadde 	.word	0xaddeadde
 8006208:	addeadde 	.word	0xaddeadde
 800620c:	addeadde 	.word	0xaddeadde
 8006210:	addeadde 	.word	0xaddeadde
 8006214:	addeadde 	.word	0xaddeadde
 8006218:	addeadde 	.word	0xaddeadde
 800621c:	addeadde 	.word	0xaddeadde
 8006220:	addeadde 	.word	0xaddeadde
 8006224:	addeadde 	.word	0xaddeadde
 8006228:	addeadde 	.word	0xaddeadde
 800622c:	addeadde 	.word	0xaddeadde
 8006230:	addeadde 	.word	0xaddeadde
 8006234:	addeadde 	.word	0xaddeadde
 8006238:	addeadde 	.word	0xaddeadde
 800623c:	addeadde 	.word	0xaddeadde
 8006240:	addeadde 	.word	0xaddeadde
 8006244:	addeadde 	.word	0xaddeadde
 8006248:	addeadde 	.word	0xaddeadde
 800624c:	addeadde 	.word	0xaddeadde
 8006250:	addeadde 	.word	0xaddeadde
 8006254:	addeadde 	.word	0xaddeadde
 8006258:	addeadde 	.word	0xaddeadde
 800625c:	addeadde 	.word	0xaddeadde
 8006260:	addeadde 	.word	0xaddeadde
 8006264:	addeadde 	.word	0xaddeadde
 8006268:	addeadde 	.word	0xaddeadde
 800626c:	addeadde 	.word	0xaddeadde
 8006270:	addeadde 	.word	0xaddeadde
 8006274:	addeadde 	.word	0xaddeadde
 8006278:	addeadde 	.word	0xaddeadde
 800627c:	addeadde 	.word	0xaddeadde
 8006280:	addeadde 	.word	0xaddeadde
 8006284:	addeadde 	.word	0xaddeadde
 8006288:	addeadde 	.word	0xaddeadde
 800628c:	addeadde 	.word	0xaddeadde
 8006290:	addeadde 	.word	0xaddeadde
 8006294:	addeadde 	.word	0xaddeadde
 8006298:	addeadde 	.word	0xaddeadde
 800629c:	addeadde 	.word	0xaddeadde
 80062a0:	addeadde 	.word	0xaddeadde
 80062a4:	addeadde 	.word	0xaddeadde
 80062a8:	addeadde 	.word	0xaddeadde
 80062ac:	addeadde 	.word	0xaddeadde
 80062b0:	addeadde 	.word	0xaddeadde
 80062b4:	addeadde 	.word	0xaddeadde
 80062b8:	addeadde 	.word	0xaddeadde
 80062bc:	addeadde 	.word	0xaddeadde
 80062c0:	addeadde 	.word	0xaddeadde
 80062c4:	addeadde 	.word	0xaddeadde
 80062c8:	addeadde 	.word	0xaddeadde
 80062cc:	addeadde 	.word	0xaddeadde
 80062d0:	addeadde 	.word	0xaddeadde
 80062d4:	addeadde 	.word	0xaddeadde
 80062d8:	addeadde 	.word	0xaddeadde
 80062dc:	addeadde 	.word	0xaddeadde
 80062e0:	addeadde 	.word	0xaddeadde
 80062e4:	addeadde 	.word	0xaddeadde
 80062e8:	addeadde 	.word	0xaddeadde
 80062ec:	addeadde 	.word	0xaddeadde
 80062f0:	addeadde 	.word	0xaddeadde
 80062f4:	addeadde 	.word	0xaddeadde
 80062f8:	addeadde 	.word	0xaddeadde
 80062fc:	addeadde 	.word	0xaddeadde
 8006300:	addeadde 	.word	0xaddeadde
 8006304:	addeadde 	.word	0xaddeadde
 8006308:	addeadde 	.word	0xaddeadde
 800630c:	addeadde 	.word	0xaddeadde
 8006310:	addeadde 	.word	0xaddeadde
 8006314:	addeadde 	.word	0xaddeadde
 8006318:	addeadde 	.word	0xaddeadde
 800631c:	addeadde 	.word	0xaddeadde
 8006320:	addeadde 	.word	0xaddeadde
 8006324:	addeadde 	.word	0xaddeadde
 8006328:	addeadde 	.word	0xaddeadde
 800632c:	addeadde 	.word	0xaddeadde
 8006330:	addeadde 	.word	0xaddeadde
 8006334:	addeadde 	.word	0xaddeadde
 8006338:	addeadde 	.word	0xaddeadde
 800633c:	addeadde 	.word	0xaddeadde
 8006340:	addeadde 	.word	0xaddeadde
 8006344:	addeadde 	.word	0xaddeadde
 8006348:	addeadde 	.word	0xaddeadde
 800634c:	addeadde 	.word	0xaddeadde
 8006350:	addeadde 	.word	0xaddeadde
 8006354:	addeadde 	.word	0xaddeadde
 8006358:	addeadde 	.word	0xaddeadde
 800635c:	addeadde 	.word	0xaddeadde
 8006360:	addeadde 	.word	0xaddeadde
 8006364:	addeadde 	.word	0xaddeadde
 8006368:	addeadde 	.word	0xaddeadde
 800636c:	addeadde 	.word	0xaddeadde
 8006370:	addeadde 	.word	0xaddeadde
 8006374:	addeadde 	.word	0xaddeadde
 8006378:	addeadde 	.word	0xaddeadde
 800637c:	addeadde 	.word	0xaddeadde
 8006380:	addeadde 	.word	0xaddeadde
 8006384:	addeadde 	.word	0xaddeadde
 8006388:	addeadde 	.word	0xaddeadde
 800638c:	addeadde 	.word	0xaddeadde
 8006390:	addeadde 	.word	0xaddeadde
 8006394:	addeadde 	.word	0xaddeadde
 8006398:	addeadde 	.word	0xaddeadde
 800639c:	addeadde 	.word	0xaddeadde
 80063a0:	addeadde 	.word	0xaddeadde
 80063a4:	addeadde 	.word	0xaddeadde
 80063a8:	addeadde 	.word	0xaddeadde
 80063ac:	addeadde 	.word	0xaddeadde
 80063b0:	addeadde 	.word	0xaddeadde
 80063b4:	addeadde 	.word	0xaddeadde
 80063b8:	addeadde 	.word	0xaddeadde
 80063bc:	addeadde 	.word	0xaddeadde
 80063c0:	addeadde 	.word	0xaddeadde
 80063c4:	addeadde 	.word	0xaddeadde
 80063c8:	addeadde 	.word	0xaddeadde
 80063cc:	addeadde 	.word	0xaddeadde
 80063d0:	addeadde 	.word	0xaddeadde
 80063d4:	addeadde 	.word	0xaddeadde
 80063d8:	addeadde 	.word	0xaddeadde
 80063dc:	addeadde 	.word	0xaddeadde
 80063e0:	addeadde 	.word	0xaddeadde
 80063e4:	addeadde 	.word	0xaddeadde
 80063e8:	addeadde 	.word	0xaddeadde
 80063ec:	addeadde 	.word	0xaddeadde
 80063f0:	addeadde 	.word	0xaddeadde
 80063f4:	addeadde 	.word	0xaddeadde
 80063f8:	addeadde 	.word	0xaddeadde
 80063fc:	addeadde 	.word	0xaddeadde
 8006400:	addeadde 	.word	0xaddeadde
 8006404:	addeadde 	.word	0xaddeadde
 8006408:	addeadde 	.word	0xaddeadde
 800640c:	addeadde 	.word	0xaddeadde
 8006410:	addeadde 	.word	0xaddeadde
 8006414:	addeadde 	.word	0xaddeadde
 8006418:	addeadde 	.word	0xaddeadde
 800641c:	addeadde 	.word	0xaddeadde
 8006420:	addeadde 	.word	0xaddeadde
 8006424:	addeadde 	.word	0xaddeadde
 8006428:	addeadde 	.word	0xaddeadde
 800642c:	addeadde 	.word	0xaddeadde
 8006430:	addeadde 	.word	0xaddeadde
 8006434:	addeadde 	.word	0xaddeadde
 8006438:	addeadde 	.word	0xaddeadde
 800643c:	addeadde 	.word	0xaddeadde
 8006440:	addeadde 	.word	0xaddeadde
 8006444:	addeadde 	.word	0xaddeadde
 8006448:	addeadde 	.word	0xaddeadde
 800644c:	addeadde 	.word	0xaddeadde
 8006450:	addeadde 	.word	0xaddeadde
 8006454:	addeadde 	.word	0xaddeadde
 8006458:	addeadde 	.word	0xaddeadde
 800645c:	addeadde 	.word	0xaddeadde
 8006460:	addeadde 	.word	0xaddeadde
 8006464:	addeadde 	.word	0xaddeadde
 8006468:	addeadde 	.word	0xaddeadde
 800646c:	addeadde 	.word	0xaddeadde
 8006470:	addeadde 	.word	0xaddeadde
 8006474:	addeadde 	.word	0xaddeadde
 8006478:	addeadde 	.word	0xaddeadde
 800647c:	addeadde 	.word	0xaddeadde
 8006480:	addeadde 	.word	0xaddeadde
 8006484:	addeadde 	.word	0xaddeadde
 8006488:	addeadde 	.word	0xaddeadde
 800648c:	addeadde 	.word	0xaddeadde
 8006490:	addeadde 	.word	0xaddeadde
 8006494:	addeadde 	.word	0xaddeadde
 8006498:	addeadde 	.word	0xaddeadde
 800649c:	addeadde 	.word	0xaddeadde
 80064a0:	addeadde 	.word	0xaddeadde
 80064a4:	addeadde 	.word	0xaddeadde
 80064a8:	addeadde 	.word	0xaddeadde
 80064ac:	addeadde 	.word	0xaddeadde
 80064b0:	addeadde 	.word	0xaddeadde
 80064b4:	addeadde 	.word	0xaddeadde
 80064b8:	addeadde 	.word	0xaddeadde
 80064bc:	addeadde 	.word	0xaddeadde
 80064c0:	addeadde 	.word	0xaddeadde
 80064c4:	addeadde 	.word	0xaddeadde
 80064c8:	addeadde 	.word	0xaddeadde
 80064cc:	addeadde 	.word	0xaddeadde
 80064d0:	addeadde 	.word	0xaddeadde
 80064d4:	addeadde 	.word	0xaddeadde
 80064d8:	addeadde 	.word	0xaddeadde
 80064dc:	addeadde 	.word	0xaddeadde
 80064e0:	addeadde 	.word	0xaddeadde
 80064e4:	addeadde 	.word	0xaddeadde
 80064e8:	addeadde 	.word	0xaddeadde
 80064ec:	addeadde 	.word	0xaddeadde
 80064f0:	addeadde 	.word	0xaddeadde
 80064f4:	addeadde 	.word	0xaddeadde
 80064f8:	addeadde 	.word	0xaddeadde
 80064fc:	addeadde 	.word	0xaddeadde
 8006500:	addeadde 	.word	0xaddeadde
 8006504:	addeadde 	.word	0xaddeadde
 8006508:	addeadde 	.word	0xaddeadde
 800650c:	addeadde 	.word	0xaddeadde
 8006510:	addeadde 	.word	0xaddeadde
 8006514:	addeadde 	.word	0xaddeadde
 8006518:	addeadde 	.word	0xaddeadde
 800651c:	addeadde 	.word	0xaddeadde
 8006520:	addeadde 	.word	0xaddeadde
 8006524:	addeadde 	.word	0xaddeadde
 8006528:	addeadde 	.word	0xaddeadde
 800652c:	addeadde 	.word	0xaddeadde
 8006530:	addeadde 	.word	0xaddeadde
 8006534:	addeadde 	.word	0xaddeadde
 8006538:	addeadde 	.word	0xaddeadde
 800653c:	addeadde 	.word	0xaddeadde
 8006540:	addeadde 	.word	0xaddeadde
 8006544:	addeadde 	.word	0xaddeadde
 8006548:	addeadde 	.word	0xaddeadde
 800654c:	addeadde 	.word	0xaddeadde
 8006550:	addeadde 	.word	0xaddeadde
 8006554:	addeadde 	.word	0xaddeadde
 8006558:	addeadde 	.word	0xaddeadde
 800655c:	addeadde 	.word	0xaddeadde
 8006560:	addeadde 	.word	0xaddeadde
 8006564:	addeadde 	.word	0xaddeadde
 8006568:	addeadde 	.word	0xaddeadde
 800656c:	addeadde 	.word	0xaddeadde
 8006570:	addeadde 	.word	0xaddeadde
 8006574:	addeadde 	.word	0xaddeadde
 8006578:	addeadde 	.word	0xaddeadde
 800657c:	addeadde 	.word	0xaddeadde
 8006580:	addeadde 	.word	0xaddeadde
 8006584:	addeadde 	.word	0xaddeadde
 8006588:	addeadde 	.word	0xaddeadde
 800658c:	addeadde 	.word	0xaddeadde
 8006590:	addeadde 	.word	0xaddeadde
 8006594:	addeadde 	.word	0xaddeadde
 8006598:	addeadde 	.word	0xaddeadde
 800659c:	addeadde 	.word	0xaddeadde
 80065a0:	addeadde 	.word	0xaddeadde
 80065a4:	addeadde 	.word	0xaddeadde
 80065a8:	addeadde 	.word	0xaddeadde
 80065ac:	addeadde 	.word	0xaddeadde
 80065b0:	addeadde 	.word	0xaddeadde
 80065b4:	addeadde 	.word	0xaddeadde
 80065b8:	addeadde 	.word	0xaddeadde
 80065bc:	addeadde 	.word	0xaddeadde
 80065c0:	addeadde 	.word	0xaddeadde
 80065c4:	addeadde 	.word	0xaddeadde
 80065c8:	addeadde 	.word	0xaddeadde
 80065cc:	addeadde 	.word	0xaddeadde
 80065d0:	addeadde 	.word	0xaddeadde
 80065d4:	addeadde 	.word	0xaddeadde
 80065d8:	addeadde 	.word	0xaddeadde
 80065dc:	addeadde 	.word	0xaddeadde
 80065e0:	addeadde 	.word	0xaddeadde
 80065e4:	addeadde 	.word	0xaddeadde
 80065e8:	addeadde 	.word	0xaddeadde
 80065ec:	addeadde 	.word	0xaddeadde
 80065f0:	addeadde 	.word	0xaddeadde
 80065f4:	addeadde 	.word	0xaddeadde
 80065f8:	addeadde 	.word	0xaddeadde
 80065fc:	addeadde 	.word	0xaddeadde
 8006600:	addeadde 	.word	0xaddeadde
 8006604:	addeadde 	.word	0xaddeadde
 8006608:	addeadde 	.word	0xaddeadde
 800660c:	addeadde 	.word	0xaddeadde
 8006610:	addeadde 	.word	0xaddeadde
 8006614:	addeadde 	.word	0xaddeadde
 8006618:	addeadde 	.word	0xaddeadde
 800661c:	addeadde 	.word	0xaddeadde
 8006620:	addeadde 	.word	0xaddeadde
 8006624:	addeadde 	.word	0xaddeadde
 8006628:	addeadde 	.word	0xaddeadde
 800662c:	addeadde 	.word	0xaddeadde
 8006630:	addeadde 	.word	0xaddeadde
 8006634:	addeadde 	.word	0xaddeadde
 8006638:	addeadde 	.word	0xaddeadde
 800663c:	addeadde 	.word	0xaddeadde
 8006640:	addeadde 	.word	0xaddeadde
 8006644:	addeadde 	.word	0xaddeadde
 8006648:	addeadde 	.word	0xaddeadde
 800664c:	addeadde 	.word	0xaddeadde
 8006650:	addeadde 	.word	0xaddeadde
 8006654:	addeadde 	.word	0xaddeadde
 8006658:	addeadde 	.word	0xaddeadde
 800665c:	addeadde 	.word	0xaddeadde
 8006660:	addeadde 	.word	0xaddeadde
 8006664:	addeadde 	.word	0xaddeadde
 8006668:	addeadde 	.word	0xaddeadde
 800666c:	addeadde 	.word	0xaddeadde
 8006670:	addeadde 	.word	0xaddeadde
 8006674:	addeadde 	.word	0xaddeadde
 8006678:	addeadde 	.word	0xaddeadde
 800667c:	addeadde 	.word	0xaddeadde
 8006680:	addeadde 	.word	0xaddeadde
 8006684:	addeadde 	.word	0xaddeadde
 8006688:	addeadde 	.word	0xaddeadde
 800668c:	addeadde 	.word	0xaddeadde
 8006690:	addeadde 	.word	0xaddeadde
 8006694:	addeadde 	.word	0xaddeadde
 8006698:	addeadde 	.word	0xaddeadde
 800669c:	addeadde 	.word	0xaddeadde
 80066a0:	addeadde 	.word	0xaddeadde
 80066a4:	addeadde 	.word	0xaddeadde
 80066a8:	addeadde 	.word	0xaddeadde
 80066ac:	addeadde 	.word	0xaddeadde
 80066b0:	addeadde 	.word	0xaddeadde
 80066b4:	addeadde 	.word	0xaddeadde
 80066b8:	addeadde 	.word	0xaddeadde
 80066bc:	addeadde 	.word	0xaddeadde
 80066c0:	addeadde 	.word	0xaddeadde
 80066c4:	addeadde 	.word	0xaddeadde
 80066c8:	addeadde 	.word	0xaddeadde
 80066cc:	addeadde 	.word	0xaddeadde
 80066d0:	addeadde 	.word	0xaddeadde
 80066d4:	addeadde 	.word	0xaddeadde
 80066d8:	addeadde 	.word	0xaddeadde
 80066dc:	addeadde 	.word	0xaddeadde
 80066e0:	addeadde 	.word	0xaddeadde
 80066e4:	addeadde 	.word	0xaddeadde
 80066e8:	addeadde 	.word	0xaddeadde
 80066ec:	addeadde 	.word	0xaddeadde
 80066f0:	addeadde 	.word	0xaddeadde
 80066f4:	addeadde 	.word	0xaddeadde
 80066f8:	addeadde 	.word	0xaddeadde
 80066fc:	addeadde 	.word	0xaddeadde
 8006700:	addeadde 	.word	0xaddeadde
 8006704:	addeadde 	.word	0xaddeadde
 8006708:	addeadde 	.word	0xaddeadde
 800670c:	addeadde 	.word	0xaddeadde
 8006710:	addeadde 	.word	0xaddeadde
 8006714:	addeadde 	.word	0xaddeadde
 8006718:	addeadde 	.word	0xaddeadde
 800671c:	addeadde 	.word	0xaddeadde
 8006720:	addeadde 	.word	0xaddeadde
 8006724:	addeadde 	.word	0xaddeadde
 8006728:	addeadde 	.word	0xaddeadde
 800672c:	addeadde 	.word	0xaddeadde
 8006730:	addeadde 	.word	0xaddeadde
 8006734:	addeadde 	.word	0xaddeadde
 8006738:	addeadde 	.word	0xaddeadde
 800673c:	addeadde 	.word	0xaddeadde
 8006740:	addeadde 	.word	0xaddeadde
 8006744:	addeadde 	.word	0xaddeadde
 8006748:	addeadde 	.word	0xaddeadde
 800674c:	addeadde 	.word	0xaddeadde
 8006750:	addeadde 	.word	0xaddeadde
 8006754:	addeadde 	.word	0xaddeadde
 8006758:	addeadde 	.word	0xaddeadde
 800675c:	addeadde 	.word	0xaddeadde
 8006760:	addeadde 	.word	0xaddeadde
 8006764:	addeadde 	.word	0xaddeadde
 8006768:	addeadde 	.word	0xaddeadde
 800676c:	addeadde 	.word	0xaddeadde
 8006770:	addeadde 	.word	0xaddeadde
 8006774:	addeadde 	.word	0xaddeadde
 8006778:	addeadde 	.word	0xaddeadde
 800677c:	addeadde 	.word	0xaddeadde
 8006780:	addeadde 	.word	0xaddeadde
 8006784:	addeadde 	.word	0xaddeadde
 8006788:	addeadde 	.word	0xaddeadde
 800678c:	addeadde 	.word	0xaddeadde
 8006790:	addeadde 	.word	0xaddeadde
 8006794:	addeadde 	.word	0xaddeadde
 8006798:	addeadde 	.word	0xaddeadde
 800679c:	addeadde 	.word	0xaddeadde
 80067a0:	addeadde 	.word	0xaddeadde
 80067a4:	addeadde 	.word	0xaddeadde
 80067a8:	addeadde 	.word	0xaddeadde
 80067ac:	addeadde 	.word	0xaddeadde
 80067b0:	addeadde 	.word	0xaddeadde
 80067b4:	addeadde 	.word	0xaddeadde
 80067b8:	addeadde 	.word	0xaddeadde
 80067bc:	addeadde 	.word	0xaddeadde
 80067c0:	addeadde 	.word	0xaddeadde
 80067c4:	addeadde 	.word	0xaddeadde
 80067c8:	addeadde 	.word	0xaddeadde
 80067cc:	addeadde 	.word	0xaddeadde
 80067d0:	addeadde 	.word	0xaddeadde
 80067d4:	addeadde 	.word	0xaddeadde
 80067d8:	addeadde 	.word	0xaddeadde
 80067dc:	addeadde 	.word	0xaddeadde
 80067e0:	addeadde 	.word	0xaddeadde
 80067e4:	addeadde 	.word	0xaddeadde
 80067e8:	addeadde 	.word	0xaddeadde
 80067ec:	addeadde 	.word	0xaddeadde
 80067f0:	addeadde 	.word	0xaddeadde
 80067f4:	addeadde 	.word	0xaddeadde
 80067f8:	addeadde 	.word	0xaddeadde
 80067fc:	addeadde 	.word	0xaddeadde
 8006800:	addeadde 	.word	0xaddeadde
 8006804:	addeadde 	.word	0xaddeadde
 8006808:	addeadde 	.word	0xaddeadde
 800680c:	addeadde 	.word	0xaddeadde
 8006810:	addeadde 	.word	0xaddeadde
 8006814:	addeadde 	.word	0xaddeadde
 8006818:	addeadde 	.word	0xaddeadde
 800681c:	addeadde 	.word	0xaddeadde
 8006820:	addeadde 	.word	0xaddeadde
 8006824:	addeadde 	.word	0xaddeadde
 8006828:	addeadde 	.word	0xaddeadde
 800682c:	addeadde 	.word	0xaddeadde
 8006830:	addeadde 	.word	0xaddeadde
 8006834:	addeadde 	.word	0xaddeadde
 8006838:	addeadde 	.word	0xaddeadde
 800683c:	addeadde 	.word	0xaddeadde
 8006840:	addeadde 	.word	0xaddeadde
 8006844:	addeadde 	.word	0xaddeadde
 8006848:	addeadde 	.word	0xaddeadde
 800684c:	addeadde 	.word	0xaddeadde
 8006850:	addeadde 	.word	0xaddeadde
 8006854:	addeadde 	.word	0xaddeadde
 8006858:	addeadde 	.word	0xaddeadde
 800685c:	addeadde 	.word	0xaddeadde
 8006860:	addeadde 	.word	0xaddeadde
 8006864:	addeadde 	.word	0xaddeadde
 8006868:	addeadde 	.word	0xaddeadde
 800686c:	addeadde 	.word	0xaddeadde
 8006870:	addeadde 	.word	0xaddeadde
 8006874:	addeadde 	.word	0xaddeadde
 8006878:	addeadde 	.word	0xaddeadde
 800687c:	addeadde 	.word	0xaddeadde
 8006880:	addeadde 	.word	0xaddeadde
 8006884:	addeadde 	.word	0xaddeadde
 8006888:	addeadde 	.word	0xaddeadde
 800688c:	addeadde 	.word	0xaddeadde
 8006890:	addeadde 	.word	0xaddeadde
 8006894:	addeadde 	.word	0xaddeadde
 8006898:	addeadde 	.word	0xaddeadde
 800689c:	addeadde 	.word	0xaddeadde
 80068a0:	addeadde 	.word	0xaddeadde
 80068a4:	addeadde 	.word	0xaddeadde
 80068a8:	addeadde 	.word	0xaddeadde
 80068ac:	addeadde 	.word	0xaddeadde
 80068b0:	addeadde 	.word	0xaddeadde
 80068b4:	addeadde 	.word	0xaddeadde
 80068b8:	addeadde 	.word	0xaddeadde
 80068bc:	addeadde 	.word	0xaddeadde
 80068c0:	addeadde 	.word	0xaddeadde
 80068c4:	addeadde 	.word	0xaddeadde
 80068c8:	addeadde 	.word	0xaddeadde
 80068cc:	addeadde 	.word	0xaddeadde
 80068d0:	addeadde 	.word	0xaddeadde
 80068d4:	addeadde 	.word	0xaddeadde
 80068d8:	addeadde 	.word	0xaddeadde
 80068dc:	addeadde 	.word	0xaddeadde
 80068e0:	addeadde 	.word	0xaddeadde
 80068e4:	addeadde 	.word	0xaddeadde
 80068e8:	addeadde 	.word	0xaddeadde
 80068ec:	addeadde 	.word	0xaddeadde
 80068f0:	addeadde 	.word	0xaddeadde
 80068f4:	addeadde 	.word	0xaddeadde
 80068f8:	addeadde 	.word	0xaddeadde
 80068fc:	addeadde 	.word	0xaddeadde
 8006900:	addeadde 	.word	0xaddeadde
 8006904:	addeadde 	.word	0xaddeadde
 8006908:	addeadde 	.word	0xaddeadde
 800690c:	addeadde 	.word	0xaddeadde
 8006910:	addeadde 	.word	0xaddeadde
 8006914:	addeadde 	.word	0xaddeadde
 8006918:	addeadde 	.word	0xaddeadde
 800691c:	addeadde 	.word	0xaddeadde
 8006920:	addeadde 	.word	0xaddeadde
 8006924:	addeadde 	.word	0xaddeadde
 8006928:	addeadde 	.word	0xaddeadde
 800692c:	addeadde 	.word	0xaddeadde
 8006930:	addeadde 	.word	0xaddeadde
 8006934:	addeadde 	.word	0xaddeadde
 8006938:	addeadde 	.word	0xaddeadde
 800693c:	addeadde 	.word	0xaddeadde
 8006940:	addeadde 	.word	0xaddeadde
 8006944:	addeadde 	.word	0xaddeadde
 8006948:	addeadde 	.word	0xaddeadde
 800694c:	addeadde 	.word	0xaddeadde
 8006950:	addeadde 	.word	0xaddeadde
 8006954:	addeadde 	.word	0xaddeadde
 8006958:	addeadde 	.word	0xaddeadde
 800695c:	addeadde 	.word	0xaddeadde
 8006960:	addeadde 	.word	0xaddeadde
 8006964:	addeadde 	.word	0xaddeadde
 8006968:	addeadde 	.word	0xaddeadde
 800696c:	addeadde 	.word	0xaddeadde
 8006970:	addeadde 	.word	0xaddeadde
 8006974:	addeadde 	.word	0xaddeadde
 8006978:	addeadde 	.word	0xaddeadde
 800697c:	addeadde 	.word	0xaddeadde
 8006980:	addeadde 	.word	0xaddeadde
 8006984:	addeadde 	.word	0xaddeadde
 8006988:	addeadde 	.word	0xaddeadde
 800698c:	addeadde 	.word	0xaddeadde
 8006990:	addeadde 	.word	0xaddeadde
 8006994:	addeadde 	.word	0xaddeadde
 8006998:	addeadde 	.word	0xaddeadde
 800699c:	addeadde 	.word	0xaddeadde
 80069a0:	addeadde 	.word	0xaddeadde
 80069a4:	addeadde 	.word	0xaddeadde
 80069a8:	addeadde 	.word	0xaddeadde
 80069ac:	addeadde 	.word	0xaddeadde
 80069b0:	addeadde 	.word	0xaddeadde
 80069b4:	addeadde 	.word	0xaddeadde
 80069b8:	addeadde 	.word	0xaddeadde
 80069bc:	addeadde 	.word	0xaddeadde
 80069c0:	addeadde 	.word	0xaddeadde
 80069c4:	addeadde 	.word	0xaddeadde
 80069c8:	addeadde 	.word	0xaddeadde
 80069cc:	addeadde 	.word	0xaddeadde
 80069d0:	addeadde 	.word	0xaddeadde
 80069d4:	addeadde 	.word	0xaddeadde
 80069d8:	addeadde 	.word	0xaddeadde
 80069dc:	addeadde 	.word	0xaddeadde
 80069e0:	addeadde 	.word	0xaddeadde
 80069e4:	addeadde 	.word	0xaddeadde
 80069e8:	addeadde 	.word	0xaddeadde
 80069ec:	addeadde 	.word	0xaddeadde
 80069f0:	addeadde 	.word	0xaddeadde
 80069f4:	addeadde 	.word	0xaddeadde
 80069f8:	addeadde 	.word	0xaddeadde
 80069fc:	addeadde 	.word	0xaddeadde
 8006a00:	addeadde 	.word	0xaddeadde
 8006a04:	addeadde 	.word	0xaddeadde
 8006a08:	addeadde 	.word	0xaddeadde
 8006a0c:	addeadde 	.word	0xaddeadde
 8006a10:	addeadde 	.word	0xaddeadde
 8006a14:	addeadde 	.word	0xaddeadde
 8006a18:	addeadde 	.word	0xaddeadde
 8006a1c:	addeadde 	.word	0xaddeadde
 8006a20:	addeadde 	.word	0xaddeadde
 8006a24:	addeadde 	.word	0xaddeadde
 8006a28:	addeadde 	.word	0xaddeadde
 8006a2c:	addeadde 	.word	0xaddeadde
 8006a30:	addeadde 	.word	0xaddeadde
 8006a34:	addeadde 	.word	0xaddeadde
 8006a38:	addeadde 	.word	0xaddeadde
 8006a3c:	addeadde 	.word	0xaddeadde
 8006a40:	addeadde 	.word	0xaddeadde
 8006a44:	addeadde 	.word	0xaddeadde
 8006a48:	addeadde 	.word	0xaddeadde
 8006a4c:	addeadde 	.word	0xaddeadde
 8006a50:	addeadde 	.word	0xaddeadde
 8006a54:	addeadde 	.word	0xaddeadde
 8006a58:	addeadde 	.word	0xaddeadde
 8006a5c:	addeadde 	.word	0xaddeadde
 8006a60:	addeadde 	.word	0xaddeadde
 8006a64:	addeadde 	.word	0xaddeadde
 8006a68:	addeadde 	.word	0xaddeadde
 8006a6c:	addeadde 	.word	0xaddeadde
 8006a70:	addeadde 	.word	0xaddeadde
 8006a74:	addeadde 	.word	0xaddeadde
 8006a78:	addeadde 	.word	0xaddeadde
 8006a7c:	addeadde 	.word	0xaddeadde
 8006a80:	addeadde 	.word	0xaddeadde
 8006a84:	addeadde 	.word	0xaddeadde
 8006a88:	addeadde 	.word	0xaddeadde
 8006a8c:	addeadde 	.word	0xaddeadde
 8006a90:	addeadde 	.word	0xaddeadde
 8006a94:	addeadde 	.word	0xaddeadde
 8006a98:	addeadde 	.word	0xaddeadde
 8006a9c:	addeadde 	.word	0xaddeadde
 8006aa0:	addeadde 	.word	0xaddeadde
 8006aa4:	addeadde 	.word	0xaddeadde
 8006aa8:	addeadde 	.word	0xaddeadde
 8006aac:	addeadde 	.word	0xaddeadde
 8006ab0:	addeadde 	.word	0xaddeadde
 8006ab4:	addeadde 	.word	0xaddeadde
 8006ab8:	addeadde 	.word	0xaddeadde
 8006abc:	addeadde 	.word	0xaddeadde
 8006ac0:	addeadde 	.word	0xaddeadde
 8006ac4:	addeadde 	.word	0xaddeadde
 8006ac8:	addeadde 	.word	0xaddeadde
 8006acc:	addeadde 	.word	0xaddeadde
 8006ad0:	addeadde 	.word	0xaddeadde
 8006ad4:	addeadde 	.word	0xaddeadde
 8006ad8:	addeadde 	.word	0xaddeadde
 8006adc:	addeadde 	.word	0xaddeadde
 8006ae0:	addeadde 	.word	0xaddeadde
 8006ae4:	addeadde 	.word	0xaddeadde
 8006ae8:	addeadde 	.word	0xaddeadde
 8006aec:	addeadde 	.word	0xaddeadde
 8006af0:	addeadde 	.word	0xaddeadde
 8006af4:	addeadde 	.word	0xaddeadde
 8006af8:	addeadde 	.word	0xaddeadde
 8006afc:	addeadde 	.word	0xaddeadde
 8006b00:	addeadde 	.word	0xaddeadde
 8006b04:	addeadde 	.word	0xaddeadde
 8006b08:	addeadde 	.word	0xaddeadde
 8006b0c:	addeadde 	.word	0xaddeadde
 8006b10:	addeadde 	.word	0xaddeadde
 8006b14:	addeadde 	.word	0xaddeadde
 8006b18:	addeadde 	.word	0xaddeadde
 8006b1c:	addeadde 	.word	0xaddeadde
 8006b20:	addeadde 	.word	0xaddeadde
 8006b24:	addeadde 	.word	0xaddeadde
 8006b28:	addeadde 	.word	0xaddeadde
 8006b2c:	addeadde 	.word	0xaddeadde
 8006b30:	addeadde 	.word	0xaddeadde
 8006b34:	addeadde 	.word	0xaddeadde
 8006b38:	addeadde 	.word	0xaddeadde
 8006b3c:	addeadde 	.word	0xaddeadde
 8006b40:	addeadde 	.word	0xaddeadde
 8006b44:	addeadde 	.word	0xaddeadde
 8006b48:	addeadde 	.word	0xaddeadde
 8006b4c:	addeadde 	.word	0xaddeadde
 8006b50:	addeadde 	.word	0xaddeadde
 8006b54:	addeadde 	.word	0xaddeadde
 8006b58:	addeadde 	.word	0xaddeadde
 8006b5c:	addeadde 	.word	0xaddeadde
 8006b60:	addeadde 	.word	0xaddeadde
 8006b64:	addeadde 	.word	0xaddeadde
 8006b68:	addeadde 	.word	0xaddeadde
 8006b6c:	addeadde 	.word	0xaddeadde
 8006b70:	addeadde 	.word	0xaddeadde
 8006b74:	addeadde 	.word	0xaddeadde
 8006b78:	addeadde 	.word	0xaddeadde
 8006b7c:	addeadde 	.word	0xaddeadde
 8006b80:	addeadde 	.word	0xaddeadde
 8006b84:	addeadde 	.word	0xaddeadde
 8006b88:	addeadde 	.word	0xaddeadde
 8006b8c:	addeadde 	.word	0xaddeadde
 8006b90:	addeadde 	.word	0xaddeadde
 8006b94:	addeadde 	.word	0xaddeadde
 8006b98:	addeadde 	.word	0xaddeadde
 8006b9c:	addeadde 	.word	0xaddeadde
 8006ba0:	addeadde 	.word	0xaddeadde
 8006ba4:	addeadde 	.word	0xaddeadde
 8006ba8:	addeadde 	.word	0xaddeadde
 8006bac:	addeadde 	.word	0xaddeadde
 8006bb0:	addeadde 	.word	0xaddeadde
 8006bb4:	addeadde 	.word	0xaddeadde
 8006bb8:	addeadde 	.word	0xaddeadde
 8006bbc:	addeadde 	.word	0xaddeadde
 8006bc0:	addeadde 	.word	0xaddeadde
 8006bc4:	addeadde 	.word	0xaddeadde
 8006bc8:	addeadde 	.word	0xaddeadde
 8006bcc:	addeadde 	.word	0xaddeadde
 8006bd0:	addeadde 	.word	0xaddeadde
 8006bd4:	addeadde 	.word	0xaddeadde
 8006bd8:	addeadde 	.word	0xaddeadde
 8006bdc:	addeadde 	.word	0xaddeadde
 8006be0:	addeadde 	.word	0xaddeadde
 8006be4:	addeadde 	.word	0xaddeadde
 8006be8:	addeadde 	.word	0xaddeadde
 8006bec:	addeadde 	.word	0xaddeadde
 8006bf0:	addeadde 	.word	0xaddeadde
 8006bf4:	addeadde 	.word	0xaddeadde
 8006bf8:	addeadde 	.word	0xaddeadde
 8006bfc:	addeadde 	.word	0xaddeadde
 8006c00:	addeadde 	.word	0xaddeadde
 8006c04:	addeadde 	.word	0xaddeadde
 8006c08:	addeadde 	.word	0xaddeadde
 8006c0c:	addeadde 	.word	0xaddeadde
 8006c10:	addeadde 	.word	0xaddeadde
 8006c14:	addeadde 	.word	0xaddeadde
 8006c18:	addeadde 	.word	0xaddeadde
 8006c1c:	addeadde 	.word	0xaddeadde
 8006c20:	addeadde 	.word	0xaddeadde
 8006c24:	addeadde 	.word	0xaddeadde
 8006c28:	addeadde 	.word	0xaddeadde
 8006c2c:	addeadde 	.word	0xaddeadde
 8006c30:	addeadde 	.word	0xaddeadde
 8006c34:	addeadde 	.word	0xaddeadde
 8006c38:	addeadde 	.word	0xaddeadde
 8006c3c:	addeadde 	.word	0xaddeadde
 8006c40:	addeadde 	.word	0xaddeadde
 8006c44:	addeadde 	.word	0xaddeadde
 8006c48:	addeadde 	.word	0xaddeadde
 8006c4c:	addeadde 	.word	0xaddeadde
 8006c50:	addeadde 	.word	0xaddeadde
 8006c54:	addeadde 	.word	0xaddeadde
 8006c58:	addeadde 	.word	0xaddeadde
 8006c5c:	addeadde 	.word	0xaddeadde
 8006c60:	addeadde 	.word	0xaddeadde
 8006c64:	addeadde 	.word	0xaddeadde
 8006c68:	addeadde 	.word	0xaddeadde
 8006c6c:	addeadde 	.word	0xaddeadde
 8006c70:	addeadde 	.word	0xaddeadde
 8006c74:	addeadde 	.word	0xaddeadde
 8006c78:	addeadde 	.word	0xaddeadde
 8006c7c:	addeadde 	.word	0xaddeadde
 8006c80:	addeadde 	.word	0xaddeadde
 8006c84:	addeadde 	.word	0xaddeadde
 8006c88:	addeadde 	.word	0xaddeadde
 8006c8c:	addeadde 	.word	0xaddeadde
 8006c90:	addeadde 	.word	0xaddeadde
 8006c94:	addeadde 	.word	0xaddeadde
 8006c98:	addeadde 	.word	0xaddeadde
 8006c9c:	addeadde 	.word	0xaddeadde
 8006ca0:	addeadde 	.word	0xaddeadde
 8006ca4:	addeadde 	.word	0xaddeadde
 8006ca8:	addeadde 	.word	0xaddeadde
 8006cac:	addeadde 	.word	0xaddeadde
 8006cb0:	addeadde 	.word	0xaddeadde
 8006cb4:	addeadde 	.word	0xaddeadde
 8006cb8:	addeadde 	.word	0xaddeadde
 8006cbc:	addeadde 	.word	0xaddeadde
 8006cc0:	addeadde 	.word	0xaddeadde
 8006cc4:	addeadde 	.word	0xaddeadde
 8006cc8:	addeadde 	.word	0xaddeadde
 8006ccc:	addeadde 	.word	0xaddeadde
 8006cd0:	addeadde 	.word	0xaddeadde
 8006cd4:	addeadde 	.word	0xaddeadde
 8006cd8:	addeadde 	.word	0xaddeadde
 8006cdc:	addeadde 	.word	0xaddeadde
 8006ce0:	addeadde 	.word	0xaddeadde
 8006ce4:	addeadde 	.word	0xaddeadde
 8006ce8:	addeadde 	.word	0xaddeadde
 8006cec:	addeadde 	.word	0xaddeadde
 8006cf0:	addeadde 	.word	0xaddeadde
 8006cf4:	addeadde 	.word	0xaddeadde
 8006cf8:	addeadde 	.word	0xaddeadde
 8006cfc:	addeadde 	.word	0xaddeadde
 8006d00:	addeadde 	.word	0xaddeadde
 8006d04:	addeadde 	.word	0xaddeadde
 8006d08:	addeadde 	.word	0xaddeadde
 8006d0c:	addeadde 	.word	0xaddeadde
 8006d10:	addeadde 	.word	0xaddeadde
 8006d14:	addeadde 	.word	0xaddeadde
 8006d18:	addeadde 	.word	0xaddeadde
 8006d1c:	addeadde 	.word	0xaddeadde
 8006d20:	addeadde 	.word	0xaddeadde
 8006d24:	addeadde 	.word	0xaddeadde
 8006d28:	addeadde 	.word	0xaddeadde
 8006d2c:	addeadde 	.word	0xaddeadde
 8006d30:	addeadde 	.word	0xaddeadde
 8006d34:	addeadde 	.word	0xaddeadde
 8006d38:	addeadde 	.word	0xaddeadde
 8006d3c:	addeadde 	.word	0xaddeadde
 8006d40:	addeadde 	.word	0xaddeadde
 8006d44:	addeadde 	.word	0xaddeadde
 8006d48:	addeadde 	.word	0xaddeadde
 8006d4c:	addeadde 	.word	0xaddeadde
 8006d50:	addeadde 	.word	0xaddeadde
 8006d54:	addeadde 	.word	0xaddeadde
 8006d58:	addeadde 	.word	0xaddeadde
 8006d5c:	addeadde 	.word	0xaddeadde
 8006d60:	addeadde 	.word	0xaddeadde
 8006d64:	addeadde 	.word	0xaddeadde
 8006d68:	addeadde 	.word	0xaddeadde
 8006d6c:	addeadde 	.word	0xaddeadde
 8006d70:	addeadde 	.word	0xaddeadde
 8006d74:	addeadde 	.word	0xaddeadde
 8006d78:	addeadde 	.word	0xaddeadde
 8006d7c:	addeadde 	.word	0xaddeadde
 8006d80:	addeadde 	.word	0xaddeadde
 8006d84:	addeadde 	.word	0xaddeadde
 8006d88:	addeadde 	.word	0xaddeadde
 8006d8c:	addeadde 	.word	0xaddeadde
 8006d90:	addeadde 	.word	0xaddeadde
 8006d94:	addeadde 	.word	0xaddeadde
 8006d98:	addeadde 	.word	0xaddeadde
 8006d9c:	addeadde 	.word	0xaddeadde
 8006da0:	addeadde 	.word	0xaddeadde
 8006da4:	addeadde 	.word	0xaddeadde
 8006da8:	addeadde 	.word	0xaddeadde
 8006dac:	addeadde 	.word	0xaddeadde
 8006db0:	addeadde 	.word	0xaddeadde
 8006db4:	addeadde 	.word	0xaddeadde
 8006db8:	addeadde 	.word	0xaddeadde
 8006dbc:	addeadde 	.word	0xaddeadde
 8006dc0:	addeadde 	.word	0xaddeadde
 8006dc4:	addeadde 	.word	0xaddeadde
 8006dc8:	addeadde 	.word	0xaddeadde
 8006dcc:	addeadde 	.word	0xaddeadde
 8006dd0:	addeadde 	.word	0xaddeadde
 8006dd4:	addeadde 	.word	0xaddeadde
 8006dd8:	addeadde 	.word	0xaddeadde
 8006ddc:	addeadde 	.word	0xaddeadde
 8006de0:	addeadde 	.word	0xaddeadde
 8006de4:	addeadde 	.word	0xaddeadde
 8006de8:	addeadde 	.word	0xaddeadde
 8006dec:	addeadde 	.word	0xaddeadde
 8006df0:	addeadde 	.word	0xaddeadde
 8006df4:	addeadde 	.word	0xaddeadde
 8006df8:	addeadde 	.word	0xaddeadde
 8006dfc:	addeadde 	.word	0xaddeadde
 8006e00:	addeadde 	.word	0xaddeadde
 8006e04:	addeadde 	.word	0xaddeadde
 8006e08:	addeadde 	.word	0xaddeadde
 8006e0c:	addeadde 	.word	0xaddeadde
 8006e10:	addeadde 	.word	0xaddeadde
 8006e14:	addeadde 	.word	0xaddeadde
 8006e18:	addeadde 	.word	0xaddeadde
 8006e1c:	addeadde 	.word	0xaddeadde
 8006e20:	addeadde 	.word	0xaddeadde
 8006e24:	addeadde 	.word	0xaddeadde
 8006e28:	addeadde 	.word	0xaddeadde
 8006e2c:	addeadde 	.word	0xaddeadde
 8006e30:	addeadde 	.word	0xaddeadde
 8006e34:	addeadde 	.word	0xaddeadde
 8006e38:	addeadde 	.word	0xaddeadde
 8006e3c:	addeadde 	.word	0xaddeadde
 8006e40:	addeadde 	.word	0xaddeadde
 8006e44:	addeadde 	.word	0xaddeadde
 8006e48:	addeadde 	.word	0xaddeadde
 8006e4c:	addeadde 	.word	0xaddeadde
 8006e50:	addeadde 	.word	0xaddeadde
 8006e54:	addeadde 	.word	0xaddeadde
 8006e58:	addeadde 	.word	0xaddeadde
 8006e5c:	addeadde 	.word	0xaddeadde
 8006e60:	addeadde 	.word	0xaddeadde
 8006e64:	addeadde 	.word	0xaddeadde
 8006e68:	addeadde 	.word	0xaddeadde
 8006e6c:	addeadde 	.word	0xaddeadde
 8006e70:	addeadde 	.word	0xaddeadde
 8006e74:	addeadde 	.word	0xaddeadde
 8006e78:	addeadde 	.word	0xaddeadde
 8006e7c:	addeadde 	.word	0xaddeadde
 8006e80:	addeadde 	.word	0xaddeadde
 8006e84:	addeadde 	.word	0xaddeadde
 8006e88:	addeadde 	.word	0xaddeadde
 8006e8c:	addeadde 	.word	0xaddeadde
 8006e90:	addeadde 	.word	0xaddeadde
 8006e94:	addeadde 	.word	0xaddeadde
 8006e98:	addeadde 	.word	0xaddeadde
 8006e9c:	addeadde 	.word	0xaddeadde
 8006ea0:	addeadde 	.word	0xaddeadde
 8006ea4:	addeadde 	.word	0xaddeadde
 8006ea8:	addeadde 	.word	0xaddeadde
 8006eac:	addeadde 	.word	0xaddeadde
 8006eb0:	addeadde 	.word	0xaddeadde
 8006eb4:	addeadde 	.word	0xaddeadde
 8006eb8:	addeadde 	.word	0xaddeadde
 8006ebc:	addeadde 	.word	0xaddeadde
 8006ec0:	addeadde 	.word	0xaddeadde
 8006ec4:	addeadde 	.word	0xaddeadde
 8006ec8:	addeadde 	.word	0xaddeadde
 8006ecc:	addeadde 	.word	0xaddeadde
 8006ed0:	addeadde 	.word	0xaddeadde
 8006ed4:	addeadde 	.word	0xaddeadde
 8006ed8:	addeadde 	.word	0xaddeadde
 8006edc:	addeadde 	.word	0xaddeadde
 8006ee0:	addeadde 	.word	0xaddeadde
 8006ee4:	addeadde 	.word	0xaddeadde
 8006ee8:	addeadde 	.word	0xaddeadde
 8006eec:	addeadde 	.word	0xaddeadde
 8006ef0:	addeadde 	.word	0xaddeadde
 8006ef4:	addeadde 	.word	0xaddeadde
 8006ef8:	addeadde 	.word	0xaddeadde
 8006efc:	addeadde 	.word	0xaddeadde
 8006f00:	addeadde 	.word	0xaddeadde
 8006f04:	addeadde 	.word	0xaddeadde
 8006f08:	addeadde 	.word	0xaddeadde
 8006f0c:	addeadde 	.word	0xaddeadde
 8006f10:	addeadde 	.word	0xaddeadde
 8006f14:	addeadde 	.word	0xaddeadde
 8006f18:	addeadde 	.word	0xaddeadde
 8006f1c:	addeadde 	.word	0xaddeadde
 8006f20:	addeadde 	.word	0xaddeadde
 8006f24:	addeadde 	.word	0xaddeadde
 8006f28:	addeadde 	.word	0xaddeadde
 8006f2c:	addeadde 	.word	0xaddeadde
 8006f30:	addeadde 	.word	0xaddeadde
 8006f34:	addeadde 	.word	0xaddeadde
 8006f38:	addeadde 	.word	0xaddeadde
 8006f3c:	addeadde 	.word	0xaddeadde
 8006f40:	addeadde 	.word	0xaddeadde
 8006f44:	addeadde 	.word	0xaddeadde
 8006f48:	addeadde 	.word	0xaddeadde
 8006f4c:	addeadde 	.word	0xaddeadde
 8006f50:	addeadde 	.word	0xaddeadde
 8006f54:	addeadde 	.word	0xaddeadde
 8006f58:	addeadde 	.word	0xaddeadde
 8006f5c:	addeadde 	.word	0xaddeadde
 8006f60:	addeadde 	.word	0xaddeadde
 8006f64:	addeadde 	.word	0xaddeadde
 8006f68:	addeadde 	.word	0xaddeadde
 8006f6c:	addeadde 	.word	0xaddeadde
 8006f70:	addeadde 	.word	0xaddeadde
 8006f74:	addeadde 	.word	0xaddeadde
 8006f78:	addeadde 	.word	0xaddeadde
 8006f7c:	addeadde 	.word	0xaddeadde
 8006f80:	addeadde 	.word	0xaddeadde
 8006f84:	addeadde 	.word	0xaddeadde
 8006f88:	addeadde 	.word	0xaddeadde
 8006f8c:	addeadde 	.word	0xaddeadde
 8006f90:	addeadde 	.word	0xaddeadde
 8006f94:	addeadde 	.word	0xaddeadde
 8006f98:	addeadde 	.word	0xaddeadde
 8006f9c:	addeadde 	.word	0xaddeadde
 8006fa0:	addeadde 	.word	0xaddeadde
 8006fa4:	addeadde 	.word	0xaddeadde
 8006fa8:	addeadde 	.word	0xaddeadde
 8006fac:	addeadde 	.word	0xaddeadde
 8006fb0:	addeadde 	.word	0xaddeadde
 8006fb4:	addeadde 	.word	0xaddeadde
 8006fb8:	addeadde 	.word	0xaddeadde
 8006fbc:	addeadde 	.word	0xaddeadde
 8006fc0:	addeadde 	.word	0xaddeadde
 8006fc4:	addeadde 	.word	0xaddeadde
 8006fc8:	addeadde 	.word	0xaddeadde
 8006fcc:	addeadde 	.word	0xaddeadde
 8006fd0:	addeadde 	.word	0xaddeadde
 8006fd4:	addeadde 	.word	0xaddeadde
 8006fd8:	addeadde 	.word	0xaddeadde
 8006fdc:	addeadde 	.word	0xaddeadde
 8006fe0:	addeadde 	.word	0xaddeadde
 8006fe4:	addeadde 	.word	0xaddeadde
 8006fe8:	addeadde 	.word	0xaddeadde
 8006fec:	addeadde 	.word	0xaddeadde
 8006ff0:	addeadde 	.word	0xaddeadde
 8006ff4:	addeadde 	.word	0xaddeadde
 8006ff8:	addeadde 	.word	0xaddeadde
 8006ffc:	addeadde 	.word	0xaddeadde
 8007000:	addeadde 	.word	0xaddeadde
 8007004:	addeadde 	.word	0xaddeadde
 8007008:	addeadde 	.word	0xaddeadde
 800700c:	addeadde 	.word	0xaddeadde
 8007010:	addeadde 	.word	0xaddeadde
 8007014:	addeadde 	.word	0xaddeadde
 8007018:	addeadde 	.word	0xaddeadde
 800701c:	addeadde 	.word	0xaddeadde
 8007020:	addeadde 	.word	0xaddeadde
 8007024:	addeadde 	.word	0xaddeadde
 8007028:	addeadde 	.word	0xaddeadde
 800702c:	addeadde 	.word	0xaddeadde
 8007030:	addeadde 	.word	0xaddeadde
 8007034:	addeadde 	.word	0xaddeadde
 8007038:	addeadde 	.word	0xaddeadde
 800703c:	addeadde 	.word	0xaddeadde
 8007040:	addeadde 	.word	0xaddeadde
 8007044:	addeadde 	.word	0xaddeadde
 8007048:	addeadde 	.word	0xaddeadde
 800704c:	addeadde 	.word	0xaddeadde
 8007050:	addeadde 	.word	0xaddeadde
 8007054:	addeadde 	.word	0xaddeadde
 8007058:	addeadde 	.word	0xaddeadde
 800705c:	addeadde 	.word	0xaddeadde
 8007060:	addeadde 	.word	0xaddeadde
 8007064:	addeadde 	.word	0xaddeadde
 8007068:	addeadde 	.word	0xaddeadde
 800706c:	addeadde 	.word	0xaddeadde
 8007070:	addeadde 	.word	0xaddeadde
 8007074:	addeadde 	.word	0xaddeadde
 8007078:	addeadde 	.word	0xaddeadde
 800707c:	addeadde 	.word	0xaddeadde
 8007080:	addeadde 	.word	0xaddeadde
 8007084:	addeadde 	.word	0xaddeadde
 8007088:	addeadde 	.word	0xaddeadde
 800708c:	addeadde 	.word	0xaddeadde
 8007090:	addeadde 	.word	0xaddeadde
 8007094:	addeadde 	.word	0xaddeadde
 8007098:	addeadde 	.word	0xaddeadde
 800709c:	addeadde 	.word	0xaddeadde
 80070a0:	addeadde 	.word	0xaddeadde
 80070a4:	addeadde 	.word	0xaddeadde
 80070a8:	addeadde 	.word	0xaddeadde
 80070ac:	addeadde 	.word	0xaddeadde
 80070b0:	addeadde 	.word	0xaddeadde
 80070b4:	addeadde 	.word	0xaddeadde
 80070b8:	addeadde 	.word	0xaddeadde
 80070bc:	addeadde 	.word	0xaddeadde
 80070c0:	addeadde 	.word	0xaddeadde
 80070c4:	addeadde 	.word	0xaddeadde
 80070c8:	addeadde 	.word	0xaddeadde
 80070cc:	addeadde 	.word	0xaddeadde
 80070d0:	addeadde 	.word	0xaddeadde
 80070d4:	addeadde 	.word	0xaddeadde
 80070d8:	addeadde 	.word	0xaddeadde
 80070dc:	addeadde 	.word	0xaddeadde
 80070e0:	addeadde 	.word	0xaddeadde
 80070e4:	addeadde 	.word	0xaddeadde
 80070e8:	addeadde 	.word	0xaddeadde
 80070ec:	addeadde 	.word	0xaddeadde
 80070f0:	addeadde 	.word	0xaddeadde
 80070f4:	addeadde 	.word	0xaddeadde
 80070f8:	addeadde 	.word	0xaddeadde
 80070fc:	addeadde 	.word	0xaddeadde
 8007100:	addeadde 	.word	0xaddeadde
 8007104:	addeadde 	.word	0xaddeadde
 8007108:	addeadde 	.word	0xaddeadde
 800710c:	addeadde 	.word	0xaddeadde
 8007110:	addeadde 	.word	0xaddeadde
 8007114:	addeadde 	.word	0xaddeadde
 8007118:	addeadde 	.word	0xaddeadde
 800711c:	addeadde 	.word	0xaddeadde
 8007120:	addeadde 	.word	0xaddeadde
 8007124:	addeadde 	.word	0xaddeadde
 8007128:	addeadde 	.word	0xaddeadde
 800712c:	addeadde 	.word	0xaddeadde
 8007130:	addeadde 	.word	0xaddeadde
 8007134:	addeadde 	.word	0xaddeadde
 8007138:	addeadde 	.word	0xaddeadde
 800713c:	addeadde 	.word	0xaddeadde
 8007140:	addeadde 	.word	0xaddeadde
 8007144:	addeadde 	.word	0xaddeadde
 8007148:	addeadde 	.word	0xaddeadde
 800714c:	addeadde 	.word	0xaddeadde
 8007150:	addeadde 	.word	0xaddeadde
 8007154:	addeadde 	.word	0xaddeadde
 8007158:	addeadde 	.word	0xaddeadde
 800715c:	addeadde 	.word	0xaddeadde
 8007160:	addeadde 	.word	0xaddeadde
 8007164:	addeadde 	.word	0xaddeadde
 8007168:	addeadde 	.word	0xaddeadde
 800716c:	addeadde 	.word	0xaddeadde
 8007170:	addeadde 	.word	0xaddeadde
 8007174:	addeadde 	.word	0xaddeadde
 8007178:	addeadde 	.word	0xaddeadde
 800717c:	addeadde 	.word	0xaddeadde
 8007180:	addeadde 	.word	0xaddeadde
 8007184:	addeadde 	.word	0xaddeadde
 8007188:	addeadde 	.word	0xaddeadde
 800718c:	addeadde 	.word	0xaddeadde
 8007190:	addeadde 	.word	0xaddeadde
 8007194:	addeadde 	.word	0xaddeadde
 8007198:	addeadde 	.word	0xaddeadde
 800719c:	addeadde 	.word	0xaddeadde
 80071a0:	addeadde 	.word	0xaddeadde
 80071a4:	addeadde 	.word	0xaddeadde
 80071a8:	addeadde 	.word	0xaddeadde
 80071ac:	addeadde 	.word	0xaddeadde
 80071b0:	addeadde 	.word	0xaddeadde
 80071b4:	addeadde 	.word	0xaddeadde
 80071b8:	addeadde 	.word	0xaddeadde
 80071bc:	addeadde 	.word	0xaddeadde
 80071c0:	addeadde 	.word	0xaddeadde
 80071c4:	addeadde 	.word	0xaddeadde
 80071c8:	addeadde 	.word	0xaddeadde
 80071cc:	addeadde 	.word	0xaddeadde
 80071d0:	addeadde 	.word	0xaddeadde
 80071d4:	addeadde 	.word	0xaddeadde
 80071d8:	addeadde 	.word	0xaddeadde
 80071dc:	addeadde 	.word	0xaddeadde
 80071e0:	addeadde 	.word	0xaddeadde
 80071e4:	addeadde 	.word	0xaddeadde
 80071e8:	addeadde 	.word	0xaddeadde
 80071ec:	addeadde 	.word	0xaddeadde
 80071f0:	addeadde 	.word	0xaddeadde
 80071f4:	addeadde 	.word	0xaddeadde
 80071f8:	addeadde 	.word	0xaddeadde
 80071fc:	addeadde 	.word	0xaddeadde
 8007200:	addeadde 	.word	0xaddeadde
 8007204:	addeadde 	.word	0xaddeadde
 8007208:	addeadde 	.word	0xaddeadde
 800720c:	addeadde 	.word	0xaddeadde
 8007210:	addeadde 	.word	0xaddeadde
 8007214:	addeadde 	.word	0xaddeadde
 8007218:	addeadde 	.word	0xaddeadde
 800721c:	addeadde 	.word	0xaddeadde
 8007220:	addeadde 	.word	0xaddeadde
 8007224:	addeadde 	.word	0xaddeadde
 8007228:	addeadde 	.word	0xaddeadde
 800722c:	addeadde 	.word	0xaddeadde
 8007230:	addeadde 	.word	0xaddeadde
 8007234:	addeadde 	.word	0xaddeadde
 8007238:	addeadde 	.word	0xaddeadde
 800723c:	addeadde 	.word	0xaddeadde
 8007240:	addeadde 	.word	0xaddeadde
 8007244:	addeadde 	.word	0xaddeadde
 8007248:	addeadde 	.word	0xaddeadde
 800724c:	addeadde 	.word	0xaddeadde
 8007250:	addeadde 	.word	0xaddeadde
 8007254:	addeadde 	.word	0xaddeadde
 8007258:	addeadde 	.word	0xaddeadde
 800725c:	addeadde 	.word	0xaddeadde
 8007260:	addeadde 	.word	0xaddeadde
 8007264:	addeadde 	.word	0xaddeadde
 8007268:	addeadde 	.word	0xaddeadde
 800726c:	addeadde 	.word	0xaddeadde
 8007270:	addeadde 	.word	0xaddeadde
 8007274:	addeadde 	.word	0xaddeadde
 8007278:	addeadde 	.word	0xaddeadde
 800727c:	addeadde 	.word	0xaddeadde
 8007280:	addeadde 	.word	0xaddeadde
 8007284:	addeadde 	.word	0xaddeadde
 8007288:	addeadde 	.word	0xaddeadde
 800728c:	addeadde 	.word	0xaddeadde
 8007290:	addeadde 	.word	0xaddeadde
 8007294:	addeadde 	.word	0xaddeadde
 8007298:	addeadde 	.word	0xaddeadde
 800729c:	addeadde 	.word	0xaddeadde
 80072a0:	addeadde 	.word	0xaddeadde
 80072a4:	addeadde 	.word	0xaddeadde
 80072a8:	addeadde 	.word	0xaddeadde
 80072ac:	addeadde 	.word	0xaddeadde
 80072b0:	addeadde 	.word	0xaddeadde
 80072b4:	addeadde 	.word	0xaddeadde
 80072b8:	addeadde 	.word	0xaddeadde
 80072bc:	addeadde 	.word	0xaddeadde
 80072c0:	addeadde 	.word	0xaddeadde
 80072c4:	addeadde 	.word	0xaddeadde
 80072c8:	addeadde 	.word	0xaddeadde
 80072cc:	addeadde 	.word	0xaddeadde
 80072d0:	addeadde 	.word	0xaddeadde
 80072d4:	addeadde 	.word	0xaddeadde
 80072d8:	addeadde 	.word	0xaddeadde
 80072dc:	addeadde 	.word	0xaddeadde
 80072e0:	addeadde 	.word	0xaddeadde
 80072e4:	addeadde 	.word	0xaddeadde
 80072e8:	addeadde 	.word	0xaddeadde
 80072ec:	addeadde 	.word	0xaddeadde
 80072f0:	addeadde 	.word	0xaddeadde
 80072f4:	addeadde 	.word	0xaddeadde
 80072f8:	addeadde 	.word	0xaddeadde
 80072fc:	addeadde 	.word	0xaddeadde
 8007300:	addeadde 	.word	0xaddeadde
 8007304:	addeadde 	.word	0xaddeadde
 8007308:	addeadde 	.word	0xaddeadde
 800730c:	addeadde 	.word	0xaddeadde
 8007310:	addeadde 	.word	0xaddeadde
 8007314:	addeadde 	.word	0xaddeadde
 8007318:	addeadde 	.word	0xaddeadde
 800731c:	addeadde 	.word	0xaddeadde
 8007320:	addeadde 	.word	0xaddeadde
 8007324:	addeadde 	.word	0xaddeadde
 8007328:	addeadde 	.word	0xaddeadde
 800732c:	addeadde 	.word	0xaddeadde
 8007330:	addeadde 	.word	0xaddeadde
 8007334:	addeadde 	.word	0xaddeadde
 8007338:	addeadde 	.word	0xaddeadde
 800733c:	addeadde 	.word	0xaddeadde
 8007340:	addeadde 	.word	0xaddeadde
 8007344:	addeadde 	.word	0xaddeadde
 8007348:	addeadde 	.word	0xaddeadde
 800734c:	addeadde 	.word	0xaddeadde
 8007350:	addeadde 	.word	0xaddeadde
 8007354:	addeadde 	.word	0xaddeadde
 8007358:	addeadde 	.word	0xaddeadde
 800735c:	addeadde 	.word	0xaddeadde
 8007360:	addeadde 	.word	0xaddeadde
 8007364:	addeadde 	.word	0xaddeadde
 8007368:	addeadde 	.word	0xaddeadde
 800736c:	addeadde 	.word	0xaddeadde
 8007370:	addeadde 	.word	0xaddeadde
 8007374:	addeadde 	.word	0xaddeadde
 8007378:	addeadde 	.word	0xaddeadde
 800737c:	addeadde 	.word	0xaddeadde
 8007380:	addeadde 	.word	0xaddeadde
 8007384:	addeadde 	.word	0xaddeadde
 8007388:	addeadde 	.word	0xaddeadde
 800738c:	addeadde 	.word	0xaddeadde
 8007390:	addeadde 	.word	0xaddeadde
 8007394:	addeadde 	.word	0xaddeadde
 8007398:	addeadde 	.word	0xaddeadde
 800739c:	addeadde 	.word	0xaddeadde
 80073a0:	addeadde 	.word	0xaddeadde
 80073a4:	addeadde 	.word	0xaddeadde
 80073a8:	addeadde 	.word	0xaddeadde
 80073ac:	addeadde 	.word	0xaddeadde
 80073b0:	addeadde 	.word	0xaddeadde
 80073b4:	addeadde 	.word	0xaddeadde
 80073b8:	addeadde 	.word	0xaddeadde
 80073bc:	addeadde 	.word	0xaddeadde
 80073c0:	addeadde 	.word	0xaddeadde
 80073c4:	addeadde 	.word	0xaddeadde
 80073c8:	addeadde 	.word	0xaddeadde
 80073cc:	addeadde 	.word	0xaddeadde
 80073d0:	addeadde 	.word	0xaddeadde
 80073d4:	addeadde 	.word	0xaddeadde
 80073d8:	addeadde 	.word	0xaddeadde
 80073dc:	addeadde 	.word	0xaddeadde
 80073e0:	addeadde 	.word	0xaddeadde
 80073e4:	addeadde 	.word	0xaddeadde
 80073e8:	addeadde 	.word	0xaddeadde
 80073ec:	addeadde 	.word	0xaddeadde
 80073f0:	addeadde 	.word	0xaddeadde
 80073f4:	addeadde 	.word	0xaddeadde
 80073f8:	addeadde 	.word	0xaddeadde
 80073fc:	addeadde 	.word	0xaddeadde
 8007400:	addeadde 	.word	0xaddeadde
 8007404:	addeadde 	.word	0xaddeadde
 8007408:	addeadde 	.word	0xaddeadde
 800740c:	addeadde 	.word	0xaddeadde
 8007410:	addeadde 	.word	0xaddeadde
 8007414:	addeadde 	.word	0xaddeadde
 8007418:	addeadde 	.word	0xaddeadde
 800741c:	addeadde 	.word	0xaddeadde
 8007420:	addeadde 	.word	0xaddeadde
 8007424:	addeadde 	.word	0xaddeadde
 8007428:	addeadde 	.word	0xaddeadde
 800742c:	addeadde 	.word	0xaddeadde
 8007430:	addeadde 	.word	0xaddeadde
 8007434:	addeadde 	.word	0xaddeadde
 8007438:	addeadde 	.word	0xaddeadde
 800743c:	addeadde 	.word	0xaddeadde
 8007440:	addeadde 	.word	0xaddeadde
 8007444:	addeadde 	.word	0xaddeadde
 8007448:	addeadde 	.word	0xaddeadde
 800744c:	addeadde 	.word	0xaddeadde
 8007450:	addeadde 	.word	0xaddeadde
 8007454:	addeadde 	.word	0xaddeadde
 8007458:	addeadde 	.word	0xaddeadde
 800745c:	addeadde 	.word	0xaddeadde
 8007460:	addeadde 	.word	0xaddeadde
 8007464:	addeadde 	.word	0xaddeadde
 8007468:	addeadde 	.word	0xaddeadde
 800746c:	addeadde 	.word	0xaddeadde
 8007470:	addeadde 	.word	0xaddeadde
 8007474:	addeadde 	.word	0xaddeadde
 8007478:	addeadde 	.word	0xaddeadde
 800747c:	addeadde 	.word	0xaddeadde
 8007480:	addeadde 	.word	0xaddeadde
 8007484:	addeadde 	.word	0xaddeadde
 8007488:	addeadde 	.word	0xaddeadde
 800748c:	addeadde 	.word	0xaddeadde
 8007490:	addeadde 	.word	0xaddeadde
 8007494:	addeadde 	.word	0xaddeadde
 8007498:	addeadde 	.word	0xaddeadde
 800749c:	addeadde 	.word	0xaddeadde
 80074a0:	addeadde 	.word	0xaddeadde
 80074a4:	addeadde 	.word	0xaddeadde
 80074a8:	addeadde 	.word	0xaddeadde
 80074ac:	addeadde 	.word	0xaddeadde
 80074b0:	addeadde 	.word	0xaddeadde
 80074b4:	addeadde 	.word	0xaddeadde
 80074b8:	addeadde 	.word	0xaddeadde
 80074bc:	addeadde 	.word	0xaddeadde
 80074c0:	addeadde 	.word	0xaddeadde
 80074c4:	addeadde 	.word	0xaddeadde
 80074c8:	addeadde 	.word	0xaddeadde
 80074cc:	addeadde 	.word	0xaddeadde
 80074d0:	addeadde 	.word	0xaddeadde
 80074d4:	addeadde 	.word	0xaddeadde
 80074d8:	addeadde 	.word	0xaddeadde
 80074dc:	addeadde 	.word	0xaddeadde
 80074e0:	addeadde 	.word	0xaddeadde
 80074e4:	addeadde 	.word	0xaddeadde
 80074e8:	addeadde 	.word	0xaddeadde
 80074ec:	addeadde 	.word	0xaddeadde
 80074f0:	addeadde 	.word	0xaddeadde
 80074f4:	addeadde 	.word	0xaddeadde
 80074f8:	addeadde 	.word	0xaddeadde
 80074fc:	addeadde 	.word	0xaddeadde
 8007500:	addeadde 	.word	0xaddeadde
 8007504:	addeadde 	.word	0xaddeadde
 8007508:	addeadde 	.word	0xaddeadde
 800750c:	addeadde 	.word	0xaddeadde
 8007510:	addeadde 	.word	0xaddeadde
 8007514:	addeadde 	.word	0xaddeadde
 8007518:	addeadde 	.word	0xaddeadde
 800751c:	addeadde 	.word	0xaddeadde
 8007520:	addeadde 	.word	0xaddeadde
 8007524:	addeadde 	.word	0xaddeadde
 8007528:	addeadde 	.word	0xaddeadde
 800752c:	addeadde 	.word	0xaddeadde
 8007530:	addeadde 	.word	0xaddeadde
 8007534:	addeadde 	.word	0xaddeadde
 8007538:	addeadde 	.word	0xaddeadde
 800753c:	addeadde 	.word	0xaddeadde
 8007540:	addeadde 	.word	0xaddeadde
 8007544:	addeadde 	.word	0xaddeadde
 8007548:	addeadde 	.word	0xaddeadde
 800754c:	addeadde 	.word	0xaddeadde
 8007550:	addeadde 	.word	0xaddeadde
 8007554:	addeadde 	.word	0xaddeadde
 8007558:	addeadde 	.word	0xaddeadde
 800755c:	addeadde 	.word	0xaddeadde
 8007560:	addeadde 	.word	0xaddeadde
 8007564:	addeadde 	.word	0xaddeadde
 8007568:	addeadde 	.word	0xaddeadde
 800756c:	addeadde 	.word	0xaddeadde
 8007570:	addeadde 	.word	0xaddeadde
 8007574:	addeadde 	.word	0xaddeadde
 8007578:	addeadde 	.word	0xaddeadde
 800757c:	addeadde 	.word	0xaddeadde
 8007580:	addeadde 	.word	0xaddeadde
 8007584:	addeadde 	.word	0xaddeadde
 8007588:	addeadde 	.word	0xaddeadde
 800758c:	addeadde 	.word	0xaddeadde
 8007590:	addeadde 	.word	0xaddeadde
 8007594:	addeadde 	.word	0xaddeadde
 8007598:	addeadde 	.word	0xaddeadde
 800759c:	addeadde 	.word	0xaddeadde
 80075a0:	addeadde 	.word	0xaddeadde
 80075a4:	addeadde 	.word	0xaddeadde
 80075a8:	addeadde 	.word	0xaddeadde
 80075ac:	addeadde 	.word	0xaddeadde
 80075b0:	addeadde 	.word	0xaddeadde
 80075b4:	addeadde 	.word	0xaddeadde
 80075b8:	addeadde 	.word	0xaddeadde
 80075bc:	addeadde 	.word	0xaddeadde
 80075c0:	addeadde 	.word	0xaddeadde
 80075c4:	addeadde 	.word	0xaddeadde
 80075c8:	addeadde 	.word	0xaddeadde
 80075cc:	addeadde 	.word	0xaddeadde
 80075d0:	addeadde 	.word	0xaddeadde
 80075d4:	addeadde 	.word	0xaddeadde
 80075d8:	addeadde 	.word	0xaddeadde
 80075dc:	addeadde 	.word	0xaddeadde
 80075e0:	addeadde 	.word	0xaddeadde
 80075e4:	addeadde 	.word	0xaddeadde
 80075e8:	addeadde 	.word	0xaddeadde
 80075ec:	addeadde 	.word	0xaddeadde
 80075f0:	addeadde 	.word	0xaddeadde
 80075f4:	addeadde 	.word	0xaddeadde
 80075f8:	addeadde 	.word	0xaddeadde
 80075fc:	addeadde 	.word	0xaddeadde
 8007600:	addeadde 	.word	0xaddeadde
 8007604:	addeadde 	.word	0xaddeadde
 8007608:	addeadde 	.word	0xaddeadde
 800760c:	addeadde 	.word	0xaddeadde
 8007610:	addeadde 	.word	0xaddeadde
 8007614:	addeadde 	.word	0xaddeadde
 8007618:	addeadde 	.word	0xaddeadde
 800761c:	addeadde 	.word	0xaddeadde
 8007620:	addeadde 	.word	0xaddeadde
 8007624:	addeadde 	.word	0xaddeadde
 8007628:	addeadde 	.word	0xaddeadde
 800762c:	addeadde 	.word	0xaddeadde
 8007630:	addeadde 	.word	0xaddeadde
 8007634:	addeadde 	.word	0xaddeadde
 8007638:	addeadde 	.word	0xaddeadde
 800763c:	addeadde 	.word	0xaddeadde
 8007640:	addeadde 	.word	0xaddeadde
 8007644:	addeadde 	.word	0xaddeadde
 8007648:	addeadde 	.word	0xaddeadde
 800764c:	addeadde 	.word	0xaddeadde
 8007650:	addeadde 	.word	0xaddeadde
 8007654:	addeadde 	.word	0xaddeadde
 8007658:	addeadde 	.word	0xaddeadde
 800765c:	addeadde 	.word	0xaddeadde
 8007660:	addeadde 	.word	0xaddeadde
 8007664:	addeadde 	.word	0xaddeadde
 8007668:	addeadde 	.word	0xaddeadde
 800766c:	addeadde 	.word	0xaddeadde
 8007670:	addeadde 	.word	0xaddeadde
 8007674:	addeadde 	.word	0xaddeadde
 8007678:	addeadde 	.word	0xaddeadde
 800767c:	addeadde 	.word	0xaddeadde
 8007680:	addeadde 	.word	0xaddeadde
 8007684:	addeadde 	.word	0xaddeadde
 8007688:	addeadde 	.word	0xaddeadde
 800768c:	addeadde 	.word	0xaddeadde
 8007690:	addeadde 	.word	0xaddeadde
 8007694:	addeadde 	.word	0xaddeadde
 8007698:	addeadde 	.word	0xaddeadde
 800769c:	addeadde 	.word	0xaddeadde
 80076a0:	addeadde 	.word	0xaddeadde
 80076a4:	addeadde 	.word	0xaddeadde
 80076a8:	addeadde 	.word	0xaddeadde
 80076ac:	addeadde 	.word	0xaddeadde
 80076b0:	addeadde 	.word	0xaddeadde
 80076b4:	addeadde 	.word	0xaddeadde
 80076b8:	addeadde 	.word	0xaddeadde
 80076bc:	addeadde 	.word	0xaddeadde
 80076c0:	addeadde 	.word	0xaddeadde
 80076c4:	addeadde 	.word	0xaddeadde
 80076c8:	addeadde 	.word	0xaddeadde
 80076cc:	addeadde 	.word	0xaddeadde
 80076d0:	addeadde 	.word	0xaddeadde
 80076d4:	addeadde 	.word	0xaddeadde
 80076d8:	addeadde 	.word	0xaddeadde
 80076dc:	addeadde 	.word	0xaddeadde
 80076e0:	addeadde 	.word	0xaddeadde
 80076e4:	addeadde 	.word	0xaddeadde
 80076e8:	addeadde 	.word	0xaddeadde
 80076ec:	addeadde 	.word	0xaddeadde
 80076f0:	addeadde 	.word	0xaddeadde
 80076f4:	addeadde 	.word	0xaddeadde
 80076f8:	addeadde 	.word	0xaddeadde
 80076fc:	addeadde 	.word	0xaddeadde
 8007700:	addeadde 	.word	0xaddeadde
 8007704:	addeadde 	.word	0xaddeadde
 8007708:	addeadde 	.word	0xaddeadde
 800770c:	addeadde 	.word	0xaddeadde
 8007710:	addeadde 	.word	0xaddeadde
 8007714:	addeadde 	.word	0xaddeadde
 8007718:	addeadde 	.word	0xaddeadde
 800771c:	addeadde 	.word	0xaddeadde
 8007720:	addeadde 	.word	0xaddeadde
 8007724:	addeadde 	.word	0xaddeadde
 8007728:	addeadde 	.word	0xaddeadde
 800772c:	addeadde 	.word	0xaddeadde
 8007730:	addeadde 	.word	0xaddeadde
 8007734:	addeadde 	.word	0xaddeadde
 8007738:	addeadde 	.word	0xaddeadde
 800773c:	addeadde 	.word	0xaddeadde
 8007740:	addeadde 	.word	0xaddeadde
 8007744:	addeadde 	.word	0xaddeadde
 8007748:	addeadde 	.word	0xaddeadde
 800774c:	addeadde 	.word	0xaddeadde
 8007750:	addeadde 	.word	0xaddeadde
 8007754:	addeadde 	.word	0xaddeadde
 8007758:	addeadde 	.word	0xaddeadde
 800775c:	addeadde 	.word	0xaddeadde
 8007760:	addeadde 	.word	0xaddeadde
 8007764:	addeadde 	.word	0xaddeadde
 8007768:	addeadde 	.word	0xaddeadde
 800776c:	addeadde 	.word	0xaddeadde
 8007770:	addeadde 	.word	0xaddeadde
 8007774:	addeadde 	.word	0xaddeadde
 8007778:	addeadde 	.word	0xaddeadde
 800777c:	addeadde 	.word	0xaddeadde
 8007780:	addeadde 	.word	0xaddeadde
 8007784:	addeadde 	.word	0xaddeadde
 8007788:	addeadde 	.word	0xaddeadde
 800778c:	addeadde 	.word	0xaddeadde
 8007790:	addeadde 	.word	0xaddeadde
 8007794:	addeadde 	.word	0xaddeadde
 8007798:	addeadde 	.word	0xaddeadde
 800779c:	addeadde 	.word	0xaddeadde
 80077a0:	addeadde 	.word	0xaddeadde
 80077a4:	addeadde 	.word	0xaddeadde
 80077a8:	addeadde 	.word	0xaddeadde
 80077ac:	addeadde 	.word	0xaddeadde
 80077b0:	addeadde 	.word	0xaddeadde
 80077b4:	addeadde 	.word	0xaddeadde
 80077b8:	addeadde 	.word	0xaddeadde
 80077bc:	addeadde 	.word	0xaddeadde
 80077c0:	addeadde 	.word	0xaddeadde
 80077c4:	addeadde 	.word	0xaddeadde
 80077c8:	addeadde 	.word	0xaddeadde
 80077cc:	addeadde 	.word	0xaddeadde
 80077d0:	addeadde 	.word	0xaddeadde
 80077d4:	addeadde 	.word	0xaddeadde
 80077d8:	addeadde 	.word	0xaddeadde
 80077dc:	addeadde 	.word	0xaddeadde
 80077e0:	addeadde 	.word	0xaddeadde
 80077e4:	addeadde 	.word	0xaddeadde
 80077e8:	addeadde 	.word	0xaddeadde
 80077ec:	addeadde 	.word	0xaddeadde
 80077f0:	addeadde 	.word	0xaddeadde
 80077f4:	addeadde 	.word	0xaddeadde
 80077f8:	addeadde 	.word	0xaddeadde
 80077fc:	addeadde 	.word	0xaddeadde
 8007800:	addeadde 	.word	0xaddeadde
 8007804:	addeadde 	.word	0xaddeadde
 8007808:	addeadde 	.word	0xaddeadde
 800780c:	addeadde 	.word	0xaddeadde
 8007810:	addeadde 	.word	0xaddeadde
 8007814:	addeadde 	.word	0xaddeadde
 8007818:	addeadde 	.word	0xaddeadde
 800781c:	addeadde 	.word	0xaddeadde
 8007820:	addeadde 	.word	0xaddeadde
 8007824:	addeadde 	.word	0xaddeadde
 8007828:	addeadde 	.word	0xaddeadde
 800782c:	addeadde 	.word	0xaddeadde
 8007830:	addeadde 	.word	0xaddeadde
 8007834:	addeadde 	.word	0xaddeadde
 8007838:	addeadde 	.word	0xaddeadde
 800783c:	addeadde 	.word	0xaddeadde
 8007840:	addeadde 	.word	0xaddeadde
 8007844:	addeadde 	.word	0xaddeadde
 8007848:	addeadde 	.word	0xaddeadde
 800784c:	addeadde 	.word	0xaddeadde
 8007850:	addeadde 	.word	0xaddeadde
 8007854:	addeadde 	.word	0xaddeadde
 8007858:	addeadde 	.word	0xaddeadde
 800785c:	addeadde 	.word	0xaddeadde
 8007860:	addeadde 	.word	0xaddeadde
 8007864:	addeadde 	.word	0xaddeadde
 8007868:	addeadde 	.word	0xaddeadde
 800786c:	addeadde 	.word	0xaddeadde
 8007870:	addeadde 	.word	0xaddeadde
 8007874:	addeadde 	.word	0xaddeadde
 8007878:	addeadde 	.word	0xaddeadde
 800787c:	addeadde 	.word	0xaddeadde
 8007880:	addeadde 	.word	0xaddeadde
 8007884:	addeadde 	.word	0xaddeadde
 8007888:	addeadde 	.word	0xaddeadde
 800788c:	addeadde 	.word	0xaddeadde
 8007890:	addeadde 	.word	0xaddeadde
 8007894:	addeadde 	.word	0xaddeadde
 8007898:	addeadde 	.word	0xaddeadde
 800789c:	addeadde 	.word	0xaddeadde
 80078a0:	addeadde 	.word	0xaddeadde
 80078a4:	addeadde 	.word	0xaddeadde
 80078a8:	addeadde 	.word	0xaddeadde
 80078ac:	addeadde 	.word	0xaddeadde
 80078b0:	addeadde 	.word	0xaddeadde
 80078b4:	addeadde 	.word	0xaddeadde
 80078b8:	addeadde 	.word	0xaddeadde
 80078bc:	addeadde 	.word	0xaddeadde
 80078c0:	addeadde 	.word	0xaddeadde
 80078c4:	addeadde 	.word	0xaddeadde
 80078c8:	addeadde 	.word	0xaddeadde
 80078cc:	addeadde 	.word	0xaddeadde
 80078d0:	addeadde 	.word	0xaddeadde
 80078d4:	addeadde 	.word	0xaddeadde
 80078d8:	addeadde 	.word	0xaddeadde
 80078dc:	addeadde 	.word	0xaddeadde
 80078e0:	addeadde 	.word	0xaddeadde
 80078e4:	addeadde 	.word	0xaddeadde
 80078e8:	addeadde 	.word	0xaddeadde
 80078ec:	addeadde 	.word	0xaddeadde
 80078f0:	addeadde 	.word	0xaddeadde
 80078f4:	addeadde 	.word	0xaddeadde
 80078f8:	addeadde 	.word	0xaddeadde
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_SytemCall_1>:
}



void MPU_SytemCall_1()
{
 8008000:	b508      	push	{r3, lr}
BaseType_t xPortRaisePrivilege( void ) /* FREERTOS_SYSTEM_CALL */
{
    BaseType_t xRunningPrivileged;

    /* Check whether the processor is already privileged. */
    xRunningPrivileged = portIS_PRIVILEGED();
 8008002:	f001 fe55 	bl	8009cb0 <xIsPrivileged>

    /* If the processor is not already privileged, raise privilege. */
    if( xRunningPrivileged == pdFALSE )
 8008006:	b930      	cbnz	r0, 8008016 <MPU_SytemCall_1+0x16>
    {
        portRAISE_PRIVILEGE();
 8008008:	df02      	svc	2

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();

	SytemCall_1_code();
 800800a:	f001 fa97 	bl	800953c <SytemCall_1_code>

	vPortResetPrivilege( xRunningPrivileged );

}
 800800e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void vPortResetPrivilege( BaseType_t xRunningPrivileged )
{
    if( xRunningPrivileged == pdFALSE )
    {
        portRESET_PRIVILEGE();
 8008012:	f001 be55 	b.w	8009cc0 <vResetPrivilege>
 8008016:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SytemCall_1_code();
 800801a:	f001 ba8f 	b.w	800953c <SytemCall_1_code>
 800801e:	bf00      	nop

08008020 <MPU_SytemCall_2>:


void MPU_SytemCall_2()
{
 8008020:	b508      	push	{r3, lr}
    xRunningPrivileged = portIS_PRIVILEGED();
 8008022:	f001 fe45 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008026:	b930      	cbnz	r0, 8008036 <MPU_SytemCall_2+0x16>
        portRAISE_PRIVILEGE();
 8008028:	df02      	svc	2

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();

	SytemCall_2_code();
 800802a:	f001 fa89 	bl	8009540 <SytemCall_2_code>

	vPortResetPrivilege( xRunningPrivileged );

}
 800802e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portRESET_PRIVILEGE();
 8008032:	f001 be45 	b.w	8009cc0 <vResetPrivilege>
 8008036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SytemCall_2_code();
 800803a:	f001 ba81 	b.w	8009540 <SytemCall_2_code>
 800803e:	bf00      	nop

08008040 <MPU_SytemCall_3>:


void MPU_SytemCall_3()
{
 8008040:	b508      	push	{r3, lr}
    xRunningPrivileged = portIS_PRIVILEGED();
 8008042:	f001 fe35 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008046:	b930      	cbnz	r0, 8008056 <MPU_SytemCall_3+0x16>
        portRAISE_PRIVILEGE();
 8008048:	df02      	svc	2

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();

	SytemCall_3_code();
 800804a:	f001 fa7b 	bl	8009544 <SytemCall_3_code>

	vPortResetPrivilege( xRunningPrivileged );

}
 800804e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portRESET_PRIVILEGE();
 8008052:	f001 be35 	b.w	8009cc0 <vResetPrivilege>
 8008056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SytemCall_3_code();
 800805a:	f001 ba73 	b.w	8009544 <SytemCall_3_code>
 800805e:	bf00      	nop

08008060 <MPU_SytemCall_4>:



void MPU_SytemCall_4(void *val)
{
 8008060:	b510      	push	{r4, lr}
 8008062:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008064:	f001 fe24 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008068:	b938      	cbnz	r0, 800807a <MPU_SytemCall_4+0x1a>
        portRAISE_PRIVILEGE();
 800806a:	df02      	svc	2

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();

	SytemCall_4_code(val);
 800806c:	4620      	mov	r0, r4
 800806e:	f001 fa6b 	bl	8009548 <SytemCall_4_code>

	vPortResetPrivilege( xRunningPrivileged );

}
 8008072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008076:	f001 be23 	b.w	8009cc0 <vResetPrivilege>
	SytemCall_4_code(val);
 800807a:	4620      	mov	r0, r4
}
 800807c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SytemCall_4_code(val);
 8008080:	f001 ba62 	b.w	8009548 <SytemCall_4_code>

08008084 <MPU_SytemCall_5>:

void MPU_SytemCall_5(void *val)
{
 8008084:	b510      	push	{r4, lr}
 8008086:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008088:	f001 fe12 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800808c:	b938      	cbnz	r0, 800809e <MPU_SytemCall_5+0x1a>
        portRAISE_PRIVILEGE();
 800808e:	df02      	svc	2

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();

	SytemCall_5_code(val);
 8008090:	4620      	mov	r0, r4
 8008092:	f001 fa5b 	bl	800954c <SytemCall_5_code>

	vPortResetPrivilege( xRunningPrivileged );

}
 8008096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 800809a:	f001 be11 	b.w	8009cc0 <vResetPrivilege>
	SytemCall_5_code(val);
 800809e:	4620      	mov	r0, r4
}
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SytemCall_5_code(val);
 80080a4:	f001 ba52 	b.w	800954c <SytemCall_5_code>

080080a8 <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80080b2:	9303      	str	r3, [sp, #12]
 80080b4:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 80080b8:	f001 fdfa 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80080bc:	9905      	ldr	r1, [sp, #20]
 80080be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80080c2:	b138      	cbz	r0, 80080d4 <MPU_xTaskCreate+0x2c>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080c4:	4620      	mov	r0, r4
 80080c6:	960b      	str	r6, [sp, #44]	; 0x2c
 80080c8:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );
        return xReturn;
    }
 80080ca:	b006      	add	sp, #24
 80080cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080d0:	f7fa be90 	b.w	8002df4 <xTaskCreate>
        portRAISE_PRIVILEGE();
 80080d4:	df02      	svc	2
        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080d6:	4620      	mov	r0, r4
 80080d8:	9601      	str	r6, [sp, #4]
 80080da:	9500      	str	r5, [sp, #0]
 80080dc:	f7fa fe8a 	bl	8002df4 <xTaskCreate>
 80080e0:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 80080e2:	f001 fded 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80080e6:	9803      	ldr	r0, [sp, #12]
    }
 80080e8:	b006      	add	sp, #24
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80080ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ee:	b089      	sub	sp, #36	; 0x24
 80080f0:	4604      	mov	r4, r0
 80080f2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80080fa:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
    xRunningPrivileged = portIS_PRIVILEGED();
 80080fe:	f001 fdd7 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008102:	9907      	ldr	r1, [sp, #28]
 8008104:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8008108:	b140      	cbz	r0, 800811c <MPU_xTaskCreateStatic+0x30>
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 800810a:	4620      	mov	r0, r4
 800810c:	950e      	str	r5, [sp, #56]	; 0x38
 800810e:	e9cd 670f 	strd	r6, r7, [sp, #60]	; 0x3c
        vPortResetPrivilege( xRunningPrivileged );
        return xReturn;
    }
 8008112:	b009      	add	sp, #36	; 0x24
 8008114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 8008118:	f7fa bea2 	b.w	8002e60 <xTaskCreateStatic>
        portRAISE_PRIVILEGE();
 800811c:	df02      	svc	2
        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 800811e:	4620      	mov	r0, r4
 8008120:	9500      	str	r5, [sp, #0]
 8008122:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8008126:	f7fa fe9b 	bl	8002e60 <xTaskCreateStatic>
 800812a:	9005      	str	r0, [sp, #20]
        portRESET_PRIVILEGE();
 800812c:	f001 fdc8 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008130:	9805      	ldr	r0, [sp, #20]
    }
 8008132:	b009      	add	sp, #36	; 0x24
 8008134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008136:	bf00      	nop

08008138 <MPU_vTaskDelete>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 8008138:	b510      	push	{r4, lr}
 800813a:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 800813c:	f001 fdb8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008140:	b938      	cbnz	r0, 8008152 <MPU_vTaskDelete+0x1a>
        portRAISE_PRIVILEGE();
 8008142:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTaskDelete( pxTaskToDelete );
 8008144:	4620      	mov	r0, r4
 8008146:	f7fa ff41 	bl	8002fcc <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
    }
 800814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 800814e:	f001 bdb7 	b.w	8009cc0 <vResetPrivilege>
        vTaskDelete( pxTaskToDelete );
 8008152:	4620      	mov	r0, r4
    }
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskDelete( pxTaskToDelete );
 8008158:	f7fa bf38 	b.w	8002fcc <vTaskDelete>

0800815c <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 800815c:	b510      	push	{r4, lr}
 800815e:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008160:	f001 fda6 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008164:	b938      	cbnz	r0, 8008176 <MPU_vTaskDelay+0x1a>
        portRAISE_PRIVILEGE();
 8008166:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTaskDelay( xTicksToDelay );
 8008168:	4620      	mov	r0, r4
 800816a:	f7fb ff3f 	bl	8003fec <vTaskDelay>
        vPortResetPrivilege( xRunningPrivileged );
    }
 800816e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008172:	f001 bda5 	b.w	8009cc0 <vResetPrivilege>
        vTaskDelay( xTicksToDelay );
 8008176:	4620      	mov	r0, r4
    }
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskDelay( xTicksToDelay );
 800817c:	f7fb bf36 	b.w	8003fec <vTaskDelay>

08008180 <MPU_xTaskDelayUntil>:
    {
 8008180:	b510      	push	{r4, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	4604      	mov	r4, r0
 8008186:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008188:	f001 fd92 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800818c:	9901      	ldr	r1, [sp, #4]
 800818e:	b128      	cbz	r0, 800819c <MPU_xTaskDelayUntil+0x1c>
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 8008190:	4620      	mov	r0, r4
    }
 8008192:	b002      	add	sp, #8
 8008194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 8008198:	f7fb bf4e 	b.w	8004038 <xTaskDelayUntil>
        portRAISE_PRIVILEGE();
 800819c:	df02      	svc	2
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 800819e:	4620      	mov	r0, r4
 80081a0:	f7fb ff4a 	bl	8004038 <xTaskDelayUntil>
 80081a4:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80081a6:	f001 fd8b 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80081aa:	9801      	ldr	r0, [sp, #4]
    }
 80081ac:	b002      	add	sp, #8
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081b0:	b510      	push	{r4, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80081b6:	f001 fd7b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80081ba:	b128      	cbz	r0, 80081c8 <MPU_uxTaskPriorityGet+0x18>
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        uxReturn = uxTaskPriorityGet( pxTask );
 80081bc:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return uxReturn;
    }
 80081be:	b002      	add	sp, #8
 80081c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uxReturn = uxTaskPriorityGet( pxTask );
 80081c4:	f7fa bf82 	b.w	80030cc <uxTaskPriorityGet>
        portRAISE_PRIVILEGE();
 80081c8:	df02      	svc	2
        uxReturn = uxTaskPriorityGet( pxTask );
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7fa ff7e 	bl	80030cc <uxTaskPriorityGet>
 80081d0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80081d2:	f001 fd75 	bl	8009cc0 <vResetPrivilege>
        return uxReturn;
 80081d6:	9801      	ldr	r0, [sp, #4]
    }
 80081d8:	b002      	add	sp, #8
 80081da:	bd10      	pop	{r4, pc}

080081dc <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081dc:	b510      	push	{r4, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80081e2:	f001 fd65 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80081e6:	b128      	cbz	r0, 80081f4 <MPU_eTaskGetState+0x18>
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081e8:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return eReturn;
    }
 80081ea:	b002      	add	sp, #8
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        eReturn = eTaskGetState( pxTask );
 80081f0:	f7fa bf9e 	b.w	8003130 <eTaskGetState>
        portRAISE_PRIVILEGE();
 80081f4:	df02      	svc	2
        eReturn = eTaskGetState( pxTask );
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7fa ff9a 	bl	8003130 <eTaskGetState>
 80081fc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80081fe:	f001 fd5f 	bl	8009cc0 <vResetPrivilege>
        return eReturn;
 8008202:	9801      	ldr	r0, [sp, #4]
    }
 8008204:	b002      	add	sp, #8
 8008206:	bd10      	pop	{r4, pc}

08008208 <MPU_vTaskGetInfo>:
#if ( configUSE_TRACE_FACILITY == 1 )
    void MPU_vTaskGetInfo( TaskHandle_t xTask,
                           TaskStatus_t * pxTaskStatus,
                           BaseType_t xGetFreeStackSpace,
                           eTaskState eState ) /* FREERTOS_SYSTEM_CALL */
    {
 8008208:	b510      	push	{r4, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	4604      	mov	r4, r0
 800820e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008212:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008214:	f001 fd4c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008218:	9903      	ldr	r1, [sp, #12]
 800821a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800821e:	b940      	cbnz	r0, 8008232 <MPU_vTaskGetInfo+0x2a>
        portRAISE_PRIVILEGE();
 8008220:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 8008222:	4620      	mov	r0, r4
 8008224:	f7fb ff60 	bl	80040e8 <vTaskGetInfo>
        vPortResetPrivilege( xRunningPrivileged );
    }
 8008228:	b004      	add	sp, #16
 800822a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 800822e:	f001 bd47 	b.w	8009cc0 <vResetPrivilege>
        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 8008232:	4620      	mov	r0, r4
    }
 8008234:	b004      	add	sp, #16
 8008236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 800823a:	f7fb bf55 	b.w	80040e8 <vTaskGetInfo>
 800823e:	bf00      	nop

08008240 <MPU_vTaskPrioritySet>:
    {
 8008240:	b510      	push	{r4, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	4604      	mov	r4, r0
 8008246:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008248:	f001 fd32 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800824c:	9901      	ldr	r1, [sp, #4]
 800824e:	b940      	cbnz	r0, 8008262 <MPU_vTaskPrioritySet+0x22>
        portRAISE_PRIVILEGE();
 8008250:	df02      	svc	2
        vTaskPrioritySet( pxTask, uxNewPriority );
 8008252:	4620      	mov	r0, r4
 8008254:	f7fa ffb2 	bl	80031bc <vTaskPrioritySet>
    }
 8008258:	b002      	add	sp, #8
 800825a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 800825e:	f001 bd2f 	b.w	8009cc0 <vResetPrivilege>
        vTaskPrioritySet( pxTask, uxNewPriority );
 8008262:	4620      	mov	r0, r4
    }
 8008264:	b002      	add	sp, #8
 8008266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskPrioritySet( pxTask, uxNewPriority );
 800826a:	f7fa bfa7 	b.w	80031bc <vTaskPrioritySet>
 800826e:	bf00      	nop

08008270 <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 8008270:	b510      	push	{r4, lr}
 8008272:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008274:	f001 fd1c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008278:	b938      	cbnz	r0, 800828a <MPU_vTaskSuspend+0x1a>
        portRAISE_PRIVILEGE();
 800827a:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTaskSuspend( pxTaskToSuspend );
 800827c:	4620      	mov	r0, r4
 800827e:	f7fc faff 	bl	8004880 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
    }
 8008282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008286:	f001 bd1b 	b.w	8009cc0 <vResetPrivilege>
        vTaskSuspend( pxTaskToSuspend );
 800828a:	4620      	mov	r0, r4
    }
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskSuspend( pxTaskToSuspend );
 8008290:	f7fc baf6 	b.w	8004880 <vTaskSuspend>

08008294 <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 8008294:	b510      	push	{r4, lr}
 8008296:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008298:	f001 fd0a 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800829c:	b938      	cbnz	r0, 80082ae <MPU_vTaskResume+0x1a>
        portRAISE_PRIVILEGE();
 800829e:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTaskResume( pxTaskToResume );
 80082a0:	4620      	mov	r0, r4
 80082a2:	f7fb f809 	bl	80032b8 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
    }
 80082a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 80082aa:	f001 bd09 	b.w	8009cc0 <vResetPrivilege>
        vTaskResume( pxTaskToResume );
 80082ae:	4620      	mov	r0, r4
    }
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTaskResume( pxTaskToResume );
 80082b4:	f7fb b800 	b.w	80032b8 <vTaskResume>

080082b8 <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082b8:	b508      	push	{r3, lr}
    xRunningPrivileged = portIS_PRIVILEGED();
 80082ba:	f001 fcf9 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80082be:	b930      	cbnz	r0, 80082ce <MPU_vTaskSuspendAll+0x16>
        portRAISE_PRIVILEGE();
 80082c0:	df02      	svc	2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    vTaskSuspendAll();
 80082c2:	f7fb f94d 	bl	8003560 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
}
 80082c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portRESET_PRIVILEGE();
 80082ca:	f001 bcf9 	b.w	8009cc0 <vResetPrivilege>
}
 80082ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskSuspendAll();
 80082d2:	f7fb b945 	b.w	8003560 <vTaskSuspendAll>
 80082d6:	bf00      	nop

080082d8 <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082d8:	b500      	push	{lr}
 80082da:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 80082dc:	f001 fce8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80082e0:	b120      	cbz	r0, 80082ec <MPU_xTaskResumeAll+0x14>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xTaskResumeAll();
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 80082e2:	b003      	add	sp, #12
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
    xReturn = xTaskResumeAll();
 80082e8:	f7fb bdd8 	b.w	8003e9c <xTaskResumeAll>
        portRAISE_PRIVILEGE();
 80082ec:	df02      	svc	2
    xReturn = xTaskResumeAll();
 80082ee:	f7fb fdd5 	bl	8003e9c <xTaskResumeAll>
 80082f2:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80082f4:	f001 fce4 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 80082f8:	9801      	ldr	r0, [sp, #4]
}
 80082fa:	b003      	add	sp, #12
 80082fc:	f85d fb04 	ldr.w	pc, [sp], #4

08008300 <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008300:	b500      	push	{lr}
 8008302:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 8008304:	f001 fcd4 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008308:	b120      	cbz	r0, 8008314 <MPU_xTaskGetTickCount+0x14>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xTaskGetTickCount();
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 800830a:	b003      	add	sp, #12
 800830c:	f85d eb04 	ldr.w	lr, [sp], #4
    xReturn = xTaskGetTickCount();
 8008310:	f7fb b930 	b.w	8003574 <xTaskGetTickCount>
        portRAISE_PRIVILEGE();
 8008314:	df02      	svc	2
    xReturn = xTaskGetTickCount();
 8008316:	f7fb f92d 	bl	8003574 <xTaskGetTickCount>
 800831a:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 800831c:	f001 fcd0 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008320:	9801      	ldr	r0, [sp, #4]
}
 8008322:	b003      	add	sp, #12
 8008324:	f85d fb04 	ldr.w	pc, [sp], #4

08008328 <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008328:	b500      	push	{lr}
 800832a:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 800832c:	f001 fcc0 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008330:	b120      	cbz	r0, 800833c <MPU_uxTaskGetNumberOfTasks+0x14>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    uxReturn = uxTaskGetNumberOfTasks();
    vPortResetPrivilege( xRunningPrivileged );
    return uxReturn;
}
 8008332:	b003      	add	sp, #12
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
    uxReturn = uxTaskGetNumberOfTasks();
 8008338:	f7fb b92a 	b.w	8003590 <uxTaskGetNumberOfTasks>
        portRAISE_PRIVILEGE();
 800833c:	df02      	svc	2
    uxReturn = uxTaskGetNumberOfTasks();
 800833e:	f7fb f927 	bl	8003590 <uxTaskGetNumberOfTasks>
 8008342:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008344:	f001 fcbc 	bl	8009cc0 <vResetPrivilege>
    return uxReturn;
 8008348:	9801      	ldr	r0, [sp, #4]
}
 800834a:	b003      	add	sp, #12
 800834c:	f85d fb04 	ldr.w	pc, [sp], #4

08008350 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 8008350:	b510      	push	{r4, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008356:	f001 fcab 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800835a:	b128      	cbz	r0, 8008368 <MPU_pcTaskGetName+0x18>
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    pcReturn = pcTaskGetName( xTaskToQuery );
 800835c:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );
    return pcReturn;
}
 800835e:	b002      	add	sp, #8
 8008360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pcReturn = pcTaskGetName( xTaskToQuery );
 8008364:	f7fb b91a 	b.w	800359c <pcTaskGetName>
        portRAISE_PRIVILEGE();
 8008368:	df02      	svc	2
    pcReturn = pcTaskGetName( xTaskToQuery );
 800836a:	4620      	mov	r0, r4
 800836c:	f7fb f916 	bl	800359c <pcTaskGetName>
 8008370:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008372:	f001 fca5 	bl	8009cc0 <vResetPrivilege>
    return pcReturn;
 8008376:	9801      	ldr	r0, [sp, #4]
}
 8008378:	b002      	add	sp, #8
 800837a:	bd10      	pop	{r4, pc}

0800837c <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 800837c:	b510      	push	{r4, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008382:	f001 fc95 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008386:	b128      	cbz	r0, 8008394 <MPU_uxTaskGetStackHighWaterMark+0x18>
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008388:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return uxReturn;
    }
 800838a:	b002      	add	sp, #8
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008390:	f7fb b916 	b.w	80035c0 <uxTaskGetStackHighWaterMark>
        portRAISE_PRIVILEGE();
 8008394:	df02      	svc	2
        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008396:	4620      	mov	r0, r4
 8008398:	f7fb f912 	bl	80035c0 <uxTaskGetStackHighWaterMark>
 800839c:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 800839e:	f001 fc8f 	bl	8009cc0 <vResetPrivilege>
        return uxReturn;
 80083a2:	9801      	ldr	r0, [sp, #4]
    }
 80083a4:	b002      	add	sp, #8
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <MPU_uxTaskGetSystemState>:
    {
 80083a8:	b510      	push	{r4, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	4604      	mov	r4, r0
 80083ae:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 80083b2:	f001 fc7d 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80083b6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80083ba:	b128      	cbz	r0, 80083c8 <MPU_uxTaskGetSystemState+0x20>
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 80083bc:	4620      	mov	r0, r4
    }
 80083be:	b002      	add	sp, #8
 80083c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 80083c4:	f7fb bf80 	b.w	80042c8 <uxTaskGetSystemState>
        portRAISE_PRIVILEGE();
 80083c8:	df02      	svc	2
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7fb ff7c 	bl	80042c8 <uxTaskGetSystemState>
 80083d0:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 80083d2:	f001 fc75 	bl	8009cc0 <vResetPrivilege>
        return uxReturn;
 80083d6:	9800      	ldr	r0, [sp, #0]
    }
 80083d8:	b002      	add	sp, #8
 80083da:	bd10      	pop	{r4, pc}

080083dc <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 80083dc:	b530      	push	{r4, r5, lr}
 80083de:	b087      	sub	sp, #28
 80083e0:	4604      	mov	r4, r0
 80083e2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 80083ea:	f001 fc61 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80083ee:	9905      	ldr	r1, [sp, #20]
 80083f0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80083f4:	b130      	cbz	r0, 8008404 <MPU_xTaskGenericNotify+0x28>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 80083f6:	4620      	mov	r0, r4
 80083f8:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );
        return xReturn;
    }
 80083fa:	b007      	add	sp, #28
 80083fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 8008400:	f7fb b8fa 	b.w	80035f8 <xTaskGenericNotify>
        portRAISE_PRIVILEGE();
 8008404:	df02      	svc	2
        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 8008406:	4620      	mov	r0, r4
 8008408:	9500      	str	r5, [sp, #0]
 800840a:	f7fb f8f5 	bl	80035f8 <xTaskGenericNotify>
 800840e:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008410:	f001 fc56 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008414:	9803      	ldr	r0, [sp, #12]
    }
 8008416:	b007      	add	sp, #28
 8008418:	bd30      	pop	{r4, r5, pc}
 800841a:	bf00      	nop

0800841c <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 800841c:	b530      	push	{r4, r5, lr}
 800841e:	b087      	sub	sp, #28
 8008420:	4604      	mov	r4, r0
 8008422:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 800842a:	f001 fc41 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800842e:	9905      	ldr	r1, [sp, #20]
 8008430:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008434:	b130      	cbz	r0, 8008444 <MPU_xTaskGenericNotifyWait+0x28>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 8008436:	4620      	mov	r0, r4
 8008438:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );
        return xReturn;
    }
 800843a:	b007      	add	sp, #28
 800843c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 8008440:	f7fb ba60 	b.w	8003904 <xTaskGenericNotifyWait>
        portRAISE_PRIVILEGE();
 8008444:	df02      	svc	2
        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 8008446:	4620      	mov	r0, r4
 8008448:	9500      	str	r5, [sp, #0]
 800844a:	f7fb fa5b 	bl	8003904 <xTaskGenericNotifyWait>
 800844e:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008450:	f001 fc36 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008454:	9803      	ldr	r0, [sp, #12]
    }
 8008456:	b007      	add	sp, #28
 8008458:	bd30      	pop	{r4, r5, pc}
 800845a:	bf00      	nop

0800845c <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 800845c:	b510      	push	{r4, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	4604      	mov	r4, r0
 8008462:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008466:	f001 fc23 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800846a:	e9dd 2100 	ldrd	r2, r1, [sp]
 800846e:	b128      	cbz	r0, 800847c <MPU_ulTaskGenericNotifyTake+0x20>
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 8008470:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return ulReturn;
    }
 8008472:	b002      	add	sp, #8
 8008474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 8008478:	f7fb bb56 	b.w	8003b28 <ulTaskGenericNotifyTake>
        portRAISE_PRIVILEGE();
 800847c:	df02      	svc	2
        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 800847e:	4620      	mov	r0, r4
 8008480:	f7fb fb52 	bl	8003b28 <ulTaskGenericNotifyTake>
 8008484:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 8008486:	f001 fc1b 	bl	8009cc0 <vResetPrivilege>
        return ulReturn;
 800848a:	9800      	ldr	r0, [sp, #0]
    }
 800848c:	b002      	add	sp, #8
 800848e:	bd10      	pop	{r4, pc}

08008490 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008490:	b510      	push	{r4, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	4604      	mov	r4, r0
 8008496:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008498:	f001 fc0a 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800849c:	9901      	ldr	r1, [sp, #4]
 800849e:	b128      	cbz	r0, 80084ac <MPU_xTaskGenericNotifyStateClear+0x1c>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 80084a0:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return xReturn;
    }
 80084a2:	b002      	add	sp, #8
 80084a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 80084a8:	f7fb bb90 	b.w	8003bcc <xTaskGenericNotifyStateClear>
        portRAISE_PRIVILEGE();
 80084ac:	df02      	svc	2
        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7fb fb8c 	bl	8003bcc <xTaskGenericNotifyStateClear>
 80084b4:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80084b6:	f001 fc03 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80084ba:	9801      	ldr	r0, [sp, #4]
    }
 80084bc:	b002      	add	sp, #8
 80084be:	bd10      	pop	{r4, pc}

080084c0 <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 80084c0:	b510      	push	{r4, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	4604      	mov	r4, r0
 80084c6:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 80084ca:	f001 fbf1 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80084ce:	e9dd 2100 	ldrd	r2, r1, [sp]
 80084d2:	b128      	cbz	r0, 80084e0 <MPU_ulTaskGenericNotifyValueClear+0x20>
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 80084d4:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );
        return ulReturn;
    }
 80084d6:	b002      	add	sp, #8
 80084d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 80084dc:	f7fb bba6 	b.w	8003c2c <ulTaskGenericNotifyValueClear>
        portRAISE_PRIVILEGE();
 80084e0:	df02      	svc	2
        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7fb fba2 	bl	8003c2c <ulTaskGenericNotifyValueClear>
 80084e8:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 80084ea:	f001 fbe9 	bl	8009cc0 <vResetPrivilege>
        return ulReturn;
 80084ee:	9800      	ldr	r0, [sp, #0]
    }
 80084f0:	b002      	add	sp, #8
 80084f2:	bd10      	pop	{r4, pc}

080084f4 <MPU_xTaskGetCurrentTaskHandle>:
    {
 80084f4:	b500      	push	{lr}
 80084f6:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 80084f8:	f001 fbda 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80084fc:	b120      	cbz	r0, 8008508 <MPU_xTaskGetCurrentTaskHandle+0x14>
    }
 80084fe:	b003      	add	sp, #12
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
        xReturn = xTaskGetCurrentTaskHandle();
 8008504:	f7fc ba3c 	b.w	8004980 <xTaskGetCurrentTaskHandle>
        portRAISE_PRIVILEGE();
 8008508:	df02      	svc	2
        xReturn = xTaskGetCurrentTaskHandle();
 800850a:	f7fc fa39 	bl	8004980 <xTaskGetCurrentTaskHandle>
 800850e:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008510:	f001 fbd6 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008514:	9801      	ldr	r0, [sp, #4]
    }
 8008516:	b003      	add	sp, #12
 8008518:	f85d fb04 	ldr.w	pc, [sp], #4

0800851c <MPU_vTaskSetTimeOutState>:
{
 800851c:	b510      	push	{r4, lr}
 800851e:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008520:	f001 fbc6 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008524:	b938      	cbnz	r0, 8008536 <MPU_vTaskSetTimeOutState+0x1a>
        portRAISE_PRIVILEGE();
 8008526:	df02      	svc	2
    vTaskSetTimeOutState( pxTimeOut );
 8008528:	4620      	mov	r0, r4
 800852a:	f7fb fb9d 	bl	8003c68 <vTaskSetTimeOutState>
}
 800852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008532:	f001 bbc5 	b.w	8009cc0 <vResetPrivilege>
    vTaskSetTimeOutState( pxTimeOut );
 8008536:	4620      	mov	r0, r4
}
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vTaskSetTimeOutState( pxTimeOut );
 800853c:	f7fb bb94 	b.w	8003c68 <vTaskSetTimeOutState>

08008540 <MPU_xTaskCheckForTimeOut>:
{
 8008540:	b510      	push	{r4, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	4604      	mov	r4, r0
 8008546:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008548:	f001 fbb2 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800854c:	9901      	ldr	r1, [sp, #4]
 800854e:	b128      	cbz	r0, 800855c <MPU_xTaskCheckForTimeOut+0x1c>
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 8008550:	4620      	mov	r0, r4
}
 8008552:	b002      	add	sp, #8
 8008554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 8008558:	f7fb bba0 	b.w	8003c9c <xTaskCheckForTimeOut>
        portRAISE_PRIVILEGE();
 800855c:	df02      	svc	2
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 800855e:	4620      	mov	r0, r4
 8008560:	f7fb fb9c 	bl	8003c9c <xTaskCheckForTimeOut>
 8008564:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008566:	f001 fbab 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 800856a:	9801      	ldr	r0, [sp, #4]
}
 800856c:	b002      	add	sp, #8
 800856e:	bd10      	pop	{r4, pc}

08008570 <MPU_xTaskGetSchedulerState>:
    {
 8008570:	b500      	push	{lr}
 8008572:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 8008574:	f001 fb9c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008578:	b120      	cbz	r0, 8008584 <MPU_xTaskGetSchedulerState+0x14>
    }
 800857a:	b003      	add	sp, #12
 800857c:	f85d eb04 	ldr.w	lr, [sp], #4
        xReturn = xTaskGetSchedulerState();
 8008580:	f7fc ba0c 	b.w	800499c <xTaskGetSchedulerState>
        portRAISE_PRIVILEGE();
 8008584:	df02      	svc	2
        xReturn = xTaskGetSchedulerState();
 8008586:	f7fc fa09 	bl	800499c <xTaskGetSchedulerState>
 800858a:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 800858c:	f001 fb98 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008590:	9801      	ldr	r0, [sp, #4]
    }
 8008592:	b003      	add	sp, #12
 8008594:	f85d fb04 	ldr.w	pc, [sp], #4

08008598 <MPU_xTaskCatchUpTicks>:
{
 8008598:	b510      	push	{r4, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 800859e:	f001 fb87 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80085a2:	b128      	cbz	r0, 80085b0 <MPU_xTaskCatchUpTicks+0x18>
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80085a4:	4620      	mov	r0, r4
}
 80085a6:	b002      	add	sp, #8
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80085ac:	f7fb bdec 	b.w	8004188 <xTaskCatchUpTicks>
        portRAISE_PRIVILEGE();
 80085b0:	df02      	svc	2
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7fb fde8 	bl	8004188 <xTaskCatchUpTicks>
 80085b8:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80085ba:	f001 fb81 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 80085be:	9801      	ldr	r0, [sp, #4]
}
 80085c0:	b002      	add	sp, #8
 80085c2:	bd10      	pop	{r4, pc}

080085c4 <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 80085c4:	b510      	push	{r4, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	4604      	mov	r4, r0
 80085ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80085ce:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 80085d0:	f001 fb6e 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80085d4:	9903      	ldr	r1, [sp, #12]
 80085d6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80085da:	b128      	cbz	r0, 80085e8 <MPU_xQueueGenericSend+0x24>
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 80085dc:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 80085de:	b004      	add	sp, #16
 80085e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 80085e4:	f7f8 b94e 	b.w	8000884 <xQueueGenericSend>
        portRAISE_PRIVILEGE();
 80085e8:	df02      	svc	2
    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7f8 f94a 	bl	8000884 <xQueueGenericSend>
 80085f0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80085f2:	f001 fb65 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 80085f6:	9801      	ldr	r0, [sp, #4]
}
 80085f8:	b004      	add	sp, #16
 80085fa:	bd10      	pop	{r4, pc}

080085fc <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 80085fc:	b510      	push	{r4, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	4604      	mov	r4, r0
 8008602:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008606:	f001 fb53 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800860a:	e9dd 2100 	ldrd	r2, r1, [sp]
 800860e:	b128      	cbz	r0, 800861c <MPU_xQueueReceive+0x20>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008610:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 8008612:	b002      	add	sp, #8
 8008614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008618:	f7f8 bc76 	b.w	8000f08 <xQueueReceive>
        portRAISE_PRIVILEGE();
 800861c:	df02      	svc	2
    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 800861e:	4620      	mov	r0, r4
 8008620:	f7f8 fc72 	bl	8000f08 <xQueueReceive>
 8008624:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 8008626:	f001 fb4b 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 800862a:	9800      	ldr	r0, [sp, #0]
}
 800862c:	b002      	add	sp, #8
 800862e:	bd10      	pop	{r4, pc}

08008630 <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008630:	b510      	push	{r4, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	4604      	mov	r4, r0
 8008636:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 800863a:	f001 fb39 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800863e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8008642:	b128      	cbz	r0, 8008650 <MPU_xQueuePeek+0x20>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008644:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 8008646:	b002      	add	sp, #8
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 800864c:	f7f8 ba9c 	b.w	8000b88 <xQueuePeek>
        portRAISE_PRIVILEGE();
 8008650:	df02      	svc	2
    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008652:	4620      	mov	r0, r4
 8008654:	f7f8 fa98 	bl	8000b88 <xQueuePeek>
 8008658:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 800865a:	f001 fb31 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 800865e:	9800      	ldr	r0, [sp, #0]
}
 8008660:	b002      	add	sp, #8
 8008662:	bd10      	pop	{r4, pc}

08008664 <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008664:	b510      	push	{r4, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	4604      	mov	r4, r0
 800866a:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 800866c:	f001 fb20 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008670:	9901      	ldr	r1, [sp, #4]
 8008672:	b128      	cbz	r0, 8008680 <MPU_xQueueSemaphoreTake+0x1c>
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 8008674:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );
    return xReturn;
}
 8008676:	b002      	add	sp, #8
 8008678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 800867c:	f7f9 b8c2 	b.w	8001804 <xQueueSemaphoreTake>
        portRAISE_PRIVILEGE();
 8008680:	df02      	svc	2
    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 8008682:	4620      	mov	r0, r4
 8008684:	f7f9 f8be 	bl	8001804 <xQueueSemaphoreTake>
 8008688:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 800868a:	f001 fb19 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 800868e:	9801      	ldr	r0, [sp, #4]
}
 8008690:	b002      	add	sp, #8
 8008692:	bd10      	pop	{r4, pc}

08008694 <MPU_uxQueueMessagesWaiting>:
{
 8008694:	b510      	push	{r4, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 800869a:	f001 fb09 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800869e:	b128      	cbz	r0, 80086ac <MPU_uxQueueMessagesWaiting+0x18>
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80086a0:	4620      	mov	r0, r4
}
 80086a2:	b002      	add	sp, #8
 80086a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80086a8:	f7f8 bdb0 	b.w	800120c <uxQueueMessagesWaiting>
        portRAISE_PRIVILEGE();
 80086ac:	df02      	svc	2
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7f8 fdac 	bl	800120c <uxQueueMessagesWaiting>
 80086b4:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80086b6:	f001 fb03 	bl	8009cc0 <vResetPrivilege>
    return uxReturn;
 80086ba:	9801      	ldr	r0, [sp, #4]
}
 80086bc:	b002      	add	sp, #8
 80086be:	bd10      	pop	{r4, pc}

080086c0 <MPU_uxQueueSpacesAvailable>:
{
 80086c0:	b510      	push	{r4, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80086c6:	f001 faf3 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80086ca:	b128      	cbz	r0, 80086d8 <MPU_uxQueueSpacesAvailable+0x18>
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80086cc:	4620      	mov	r0, r4
}
 80086ce:	b002      	add	sp, #8
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80086d4:	f7f8 bdb0 	b.w	8001238 <uxQueueSpacesAvailable>
        portRAISE_PRIVILEGE();
 80086d8:	df02      	svc	2
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80086da:	4620      	mov	r0, r4
 80086dc:	f7f8 fdac 	bl	8001238 <uxQueueSpacesAvailable>
 80086e0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80086e2:	f001 faed 	bl	8009cc0 <vResetPrivilege>
    return uxReturn;
 80086e6:	9801      	ldr	r0, [sp, #4]
}
 80086e8:	b002      	add	sp, #8
 80086ea:	bd10      	pop	{r4, pc}

080086ec <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80086f0:	f001 fade 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80086f4:	b938      	cbnz	r0, 8008706 <MPU_vQueueDelete+0x1a>
        portRAISE_PRIVILEGE();
 80086f6:	df02      	svc	2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    vQueueDelete( xQueue );
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7f8 fdb5 	bl	8001268 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
}
 80086fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008702:	f001 badd 	b.w	8009cc0 <vResetPrivilege>
    vQueueDelete( xQueue );
 8008706:	4620      	mov	r0, r4
}
 8008708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vQueueDelete( xQueue );
 800870c:	f7f8 bdac 	b.w	8001268 <vQueueDelete>

08008710 <MPU_xQueueCreateMutex>:
    {
 8008710:	b510      	push	{r4, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008716:	f001 facb 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800871a:	b128      	cbz	r0, 8008728 <MPU_xQueueCreateMutex+0x18>
        xReturn = xQueueCreateMutex( ucQueueType );
 800871c:	4620      	mov	r0, r4
    }
 800871e:	b002      	add	sp, #8
 8008720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueCreateMutex( ucQueueType );
 8008724:	f7f8 bf50 	b.w	80015c8 <xQueueCreateMutex>
        portRAISE_PRIVILEGE();
 8008728:	df02      	svc	2
        xReturn = xQueueCreateMutex( ucQueueType );
 800872a:	4620      	mov	r0, r4
 800872c:	f7f8 ff4c 	bl	80015c8 <xQueueCreateMutex>
 8008730:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008732:	f001 fac5 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008736:	9801      	ldr	r0, [sp, #4]
    }
 8008738:	b002      	add	sp, #8
 800873a:	bd10      	pop	{r4, pc}

0800873c <MPU_xQueueCreateMutexStatic>:
    {
 800873c:	b510      	push	{r4, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	4604      	mov	r4, r0
 8008742:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008744:	f001 fab4 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008748:	9901      	ldr	r1, [sp, #4]
 800874a:	b128      	cbz	r0, 8008758 <MPU_xQueueCreateMutexStatic+0x1c>
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 800874c:	4620      	mov	r0, r4
    }
 800874e:	b002      	add	sp, #8
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008754:	f7f8 bf70 	b.w	8001638 <xQueueCreateMutexStatic>
        portRAISE_PRIVILEGE();
 8008758:	df02      	svc	2
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 800875a:	4620      	mov	r0, r4
 800875c:	f7f8 ff6c 	bl	8001638 <xQueueCreateMutexStatic>
 8008760:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008762:	f001 faad 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008766:	9801      	ldr	r0, [sp, #4]
    }
 8008768:	b002      	add	sp, #8
 800876a:	bd10      	pop	{r4, pc}

0800876c <MPU_xQueueCreateCountingSemaphore>:
    {
 800876c:	b510      	push	{r4, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	4604      	mov	r4, r0
 8008772:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008774:	f001 fa9c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008778:	9901      	ldr	r1, [sp, #4]
 800877a:	b128      	cbz	r0, 8008788 <MPU_xQueueCreateCountingSemaphore+0x1c>
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 800877c:	4620      	mov	r0, r4
    }
 800877e:	b002      	add	sp, #8
 8008780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 8008784:	f7f8 bfa8 	b.w	80016d8 <xQueueCreateCountingSemaphore>
        portRAISE_PRIVILEGE();
 8008788:	df02      	svc	2
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 800878a:	4620      	mov	r0, r4
 800878c:	f7f8 ffa4 	bl	80016d8 <xQueueCreateCountingSemaphore>
 8008790:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008792:	f001 fa95 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008796:	9801      	ldr	r0, [sp, #4]
    }
 8008798:	b002      	add	sp, #8
 800879a:	bd10      	pop	{r4, pc}

0800879c <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 800879c:	b510      	push	{r4, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	4604      	mov	r4, r0
 80087a2:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 80087a6:	f001 fa83 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80087aa:	e9dd 2100 	ldrd	r2, r1, [sp]
 80087ae:	b128      	cbz	r0, 80087bc <MPU_xQueueCreateCountingSemaphoreStatic+0x20>
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80087b0:	4620      	mov	r0, r4
    }
 80087b2:	b002      	add	sp, #8
 80087b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80087b8:	f7f8 bfcc 	b.w	8001754 <xQueueCreateCountingSemaphoreStatic>
        portRAISE_PRIVILEGE();
 80087bc:	df02      	svc	2
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80087be:	4620      	mov	r0, r4
 80087c0:	f7f8 ffc8 	bl	8001754 <xQueueCreateCountingSemaphoreStatic>
 80087c4:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 80087c6:	f001 fa7b 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80087ca:	9800      	ldr	r0, [sp, #0]
    }
 80087cc:	b002      	add	sp, #8
 80087ce:	bd10      	pop	{r4, pc}

080087d0 <MPU_xQueueGetMutexHolder>:
    {
 80087d0:	b510      	push	{r4, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80087d6:	f001 fa6b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80087da:	b128      	cbz	r0, 80087e8 <MPU_xQueueGetMutexHolder+0x18>
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80087dc:	4620      	mov	r0, r4
    }
 80087de:	b002      	add	sp, #8
 80087e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80087e4:	f7f9 b996 	b.w	8001b14 <xQueueGetMutexHolder>
        portRAISE_PRIVILEGE();
 80087e8:	df02      	svc	2
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7f9 f992 	bl	8001b14 <xQueueGetMutexHolder>
 80087f0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80087f2:	f001 fa65 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80087f6:	9801      	ldr	r0, [sp, #4]
    }
 80087f8:	b002      	add	sp, #8
 80087fa:	bd10      	pop	{r4, pc}

080087fc <MPU_xQueueTakeMutexRecursive>:
    {
 80087fc:	b510      	push	{r4, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	4604      	mov	r4, r0
 8008802:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008804:	f001 fa54 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008808:	9901      	ldr	r1, [sp, #4]
 800880a:	b128      	cbz	r0, 8008818 <MPU_xQueueTakeMutexRecursive+0x1c>
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 800880c:	4620      	mov	r0, r4
    }
 800880e:	b002      	add	sp, #8
 8008810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 8008814:	f7f9 b9a8 	b.w	8001b68 <xQueueTakeMutexRecursive>
        portRAISE_PRIVILEGE();
 8008818:	df02      	svc	2
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 800881a:	4620      	mov	r0, r4
 800881c:	f7f9 f9a4 	bl	8001b68 <xQueueTakeMutexRecursive>
 8008820:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008822:	f001 fa4d 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008826:	9801      	ldr	r0, [sp, #4]
    }
 8008828:	b002      	add	sp, #8
 800882a:	bd10      	pop	{r4, pc}

0800882c <MPU_xQueueGiveMutexRecursive>:
    {
 800882c:	b510      	push	{r4, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008832:	f001 fa3d 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008836:	b128      	cbz	r0, 8008844 <MPU_xQueueGiveMutexRecursive+0x18>
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008838:	4620      	mov	r0, r4
    }
 800883a:	b002      	add	sp, #8
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008840:	f7f9 b9b2 	b.w	8001ba8 <xQueueGiveMutexRecursive>
        portRAISE_PRIVILEGE();
 8008844:	df02      	svc	2
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008846:	4620      	mov	r0, r4
 8008848:	f7f9 f9ae 	bl	8001ba8 <xQueueGiveMutexRecursive>
 800884c:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 800884e:	f001 fa37 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008852:	9801      	ldr	r0, [sp, #4]
    }
 8008854:	b002      	add	sp, #8
 8008856:	bd10      	pop	{r4, pc}

08008858 <MPU_vQueueAddToRegistry>:
    {
 8008858:	b510      	push	{r4, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	4604      	mov	r4, r0
 800885e:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008860:	f001 fa26 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008864:	9901      	ldr	r1, [sp, #4]
 8008866:	b940      	cbnz	r0, 800887a <MPU_vQueueAddToRegistry+0x22>
        portRAISE_PRIVILEGE();
 8008868:	df02      	svc	2
        vQueueAddToRegistry( xQueue, pcName );
 800886a:	4620      	mov	r0, r4
 800886c:	f7f9 f9bc 	bl	8001be8 <vQueueAddToRegistry>
    }
 8008870:	b002      	add	sp, #8
 8008872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008876:	f001 ba23 	b.w	8009cc0 <vResetPrivilege>
        vQueueAddToRegistry( xQueue, pcName );
 800887a:	4620      	mov	r0, r4
    }
 800887c:	b002      	add	sp, #8
 800887e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vQueueAddToRegistry( xQueue, pcName );
 8008882:	f7f9 b9b1 	b.w	8001be8 <vQueueAddToRegistry>
 8008886:	bf00      	nop

08008888 <MPU_vQueueUnregisterQueue>:
    {
 8008888:	b510      	push	{r4, lr}
 800888a:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 800888c:	f001 fa10 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008890:	b938      	cbnz	r0, 80088a2 <MPU_vQueueUnregisterQueue+0x1a>
        portRAISE_PRIVILEGE();
 8008892:	df02      	svc	2
        vQueueUnregisterQueue( xQueue );
 8008894:	4620      	mov	r0, r4
 8008896:	f7f9 fa3d 	bl	8001d14 <vQueueUnregisterQueue>
    }
 800889a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 800889e:	f001 ba0f 	b.w	8009cc0 <vResetPrivilege>
        vQueueUnregisterQueue( xQueue );
 80088a2:	4620      	mov	r0, r4
    }
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vQueueUnregisterQueue( xQueue );
 80088a8:	f7f9 ba34 	b.w	8001d14 <vQueueUnregisterQueue>

080088ac <MPU_pcQueueGetName>:
    {
 80088ac:	b510      	push	{r4, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 80088b2:	f001 f9fd 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80088b6:	b128      	cbz	r0, 80088c4 <MPU_pcQueueGetName+0x18>
        pcReturn = pcQueueGetName( xQueue );
 80088b8:	4620      	mov	r0, r4
    }
 80088ba:	b002      	add	sp, #8
 80088bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pcReturn = pcQueueGetName( xQueue );
 80088c0:	f7f9 ba64 	b.w	8001d8c <pcQueueGetName>
        portRAISE_PRIVILEGE();
 80088c4:	df02      	svc	2
        pcReturn = pcQueueGetName( xQueue );
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7f9 fa60 	bl	8001d8c <pcQueueGetName>
 80088cc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 80088ce:	f001 f9f7 	bl	8009cc0 <vResetPrivilege>
        return pcReturn;
 80088d2:	9801      	ldr	r0, [sp, #4]
    }
 80088d4:	b002      	add	sp, #8
 80088d6:	bd10      	pop	{r4, pc}

080088d8 <MPU_xQueueGenericCreate>:
    {
 80088d8:	b510      	push	{r4, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	4604      	mov	r4, r0
 80088de:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 80088e2:	f001 f9e5 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80088e6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80088ea:	b128      	cbz	r0, 80088f8 <MPU_xQueueGenericCreate+0x20>
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80088ec:	4620      	mov	r0, r4
    }
 80088ee:	b002      	add	sp, #8
 80088f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80088f4:	f7f9 bb38 	b.w	8001f68 <xQueueGenericCreate>
        portRAISE_PRIVILEGE();
 80088f8:	df02      	svc	2
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7f9 fb34 	bl	8001f68 <xQueueGenericCreate>
 8008900:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 8008902:	f001 f9dd 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008906:	9800      	ldr	r0, [sp, #0]
    }
 8008908:	b002      	add	sp, #8
 800890a:	bd10      	pop	{r4, pc}

0800890c <MPU_xQueueGenericCreateStatic>:
    {
 800890c:	b530      	push	{r4, r5, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	4604      	mov	r4, r0
 8008912:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 800891c:	f001 f9c8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008920:	9905      	ldr	r1, [sp, #20]
 8008922:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008926:	b130      	cbz	r0, 8008936 <MPU_xQueueGenericCreateStatic+0x2a>
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008928:	4620      	mov	r0, r4
 800892a:	950a      	str	r5, [sp, #40]	; 0x28
    }
 800892c:	b007      	add	sp, #28
 800892e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008932:	f7f9 bb49 	b.w	8001fc8 <xQueueGenericCreateStatic>
        portRAISE_PRIVILEGE();
 8008936:	df02      	svc	2
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008938:	4620      	mov	r0, r4
 800893a:	9500      	str	r5, [sp, #0]
 800893c:	f7f9 fb44 	bl	8001fc8 <xQueueGenericCreateStatic>
 8008940:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008942:	f001 f9bd 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008946:	9803      	ldr	r0, [sp, #12]
    }
 8008948:	b007      	add	sp, #28
 800894a:	bd30      	pop	{r4, r5, pc}

0800894c <MPU_xQueueGenericReset>:
{
 800894c:	b510      	push	{r4, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	4604      	mov	r4, r0
 8008952:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008954:	f001 f9ac 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008958:	9901      	ldr	r1, [sp, #4]
 800895a:	b128      	cbz	r0, 8008968 <MPU_xQueueGenericReset+0x1c>
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 800895c:	4620      	mov	r0, r4
}
 800895e:	b002      	add	sp, #8
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 8008964:	f7f9 bab0 	b.w	8001ec8 <xQueueGenericReset>
        portRAISE_PRIVILEGE();
 8008968:	df02      	svc	2
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 800896a:	4620      	mov	r0, r4
 800896c:	f7f9 faac 	bl	8001ec8 <xQueueGenericReset>
 8008970:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008972:	f001 f9a5 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008976:	9801      	ldr	r0, [sp, #4]
}
 8008978:	b002      	add	sp, #8
 800897a:	bd10      	pop	{r4, pc}

0800897c <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 800897c:	b530      	push	{r4, r5, lr}
 800897e:	b087      	sub	sp, #28
 8008980:	4604      	mov	r4, r0
 8008982:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 800898a:	f001 f991 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800898e:	9905      	ldr	r1, [sp, #20]
 8008990:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008994:	b130      	cbz	r0, 80089a4 <MPU_xTimerCreate+0x28>
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 8008996:	4620      	mov	r0, r4
 8008998:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 800899a:	b007      	add	sp, #28
 800899c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 80089a0:	f7fc bace 	b.w	8004f40 <xTimerCreate>
        portRAISE_PRIVILEGE();
 80089a4:	df02      	svc	2
        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 80089a6:	4620      	mov	r0, r4
 80089a8:	9500      	str	r5, [sp, #0]
 80089aa:	f7fc fac9 	bl	8004f40 <xTimerCreate>
 80089ae:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 80089b0:	f001 f986 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80089b4:	9803      	ldr	r0, [sp, #12]
    }
 80089b6:	b007      	add	sp, #28
 80089b8:	bd30      	pop	{r4, r5, pc}
 80089ba:	bf00      	nop

080089bc <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	4604      	mov	r4, r0
 80089c2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80089c6:	9303      	str	r3, [sp, #12]
 80089c8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 80089cc:	f001 f970 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 80089d0:	9905      	ldr	r1, [sp, #20]
 80089d2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80089d6:	b138      	cbz	r0, 80089e8 <MPU_xTimerCreateStatic+0x2c>
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80089d8:	4620      	mov	r0, r4
 80089da:	960b      	str	r6, [sp, #44]	; 0x2c
 80089dc:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 80089de:	b006      	add	sp, #24
 80089e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80089e4:	f7fc bb08 	b.w	8004ff8 <xTimerCreateStatic>
        portRAISE_PRIVILEGE();
 80089e8:	df02      	svc	2
        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80089ea:	4620      	mov	r0, r4
 80089ec:	9601      	str	r6, [sp, #4]
 80089ee:	9500      	str	r5, [sp, #0]
 80089f0:	f7fc fb02 	bl	8004ff8 <xTimerCreateStatic>
 80089f4:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 80089f6:	f001 f963 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 80089fa:	9803      	ldr	r0, [sp, #12]
    }
 80089fc:	b006      	add	sp, #24
 80089fe:	bd70      	pop	{r4, r5, r6, pc}

08008a00 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a00:	b510      	push	{r4, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008a06:	f001 f953 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008a0a:	b128      	cbz	r0, 8008a18 <MPU_pvTimerGetTimerID+0x18>
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        pvReturn = pvTimerGetTimerID( xTimer );
 8008a0c:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return pvReturn;
    }
 8008a0e:	b002      	add	sp, #8
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pvReturn = pvTimerGetTimerID( xTimer );
 8008a14:	f7fc bb64 	b.w	80050e0 <pvTimerGetTimerID>
        portRAISE_PRIVILEGE();
 8008a18:	df02      	svc	2
        pvReturn = pvTimerGetTimerID( xTimer );
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f7fc fb60 	bl	80050e0 <pvTimerGetTimerID>
 8008a20:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008a22:	f001 f94d 	bl	8009cc0 <vResetPrivilege>
        return pvReturn;
 8008a26:	9801      	ldr	r0, [sp, #4]
    }
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	4604      	mov	r4, r0
 8008a32:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008a34:	f001 f93c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	b940      	cbnz	r0, 8008a4e <MPU_vTimerSetTimerID+0x22>
        portRAISE_PRIVILEGE();
 8008a3c:	df02      	svc	2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        vTimerSetTimerID( xTimer, pvNewID );
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7fc fb64 	bl	800510c <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
    }
 8008a44:	b002      	add	sp, #8
 8008a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008a4a:	f001 b939 	b.w	8009cc0 <vResetPrivilege>
        vTimerSetTimerID( xTimer, pvNewID );
 8008a4e:	4620      	mov	r0, r4
    }
 8008a50:	b002      	add	sp, #8
 8008a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTimerSetTimerID( xTimer, pvNewID );
 8008a56:	f7fc bb59 	b.w	800510c <vTimerSetTimerID>
 8008a5a:	bf00      	nop

08008a5c <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008a62:	f001 f925 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008a66:	b128      	cbz	r0, 8008a74 <MPU_xTimerIsTimerActive+0x18>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerIsTimerActive( xTimer );
 8008a68:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008a6a:	b002      	add	sp, #8
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTimerIsTimerActive( xTimer );
 8008a70:	f7fc bb60 	b.w	8005134 <xTimerIsTimerActive>
        portRAISE_PRIVILEGE();
 8008a74:	df02      	svc	2
        xReturn = xTimerIsTimerActive( xTimer );
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7fc fb5c 	bl	8005134 <xTimerIsTimerActive>
 8008a7c:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008a7e:	f001 f91f 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008a82:	9801      	ldr	r0, [sp, #4]
    }
 8008a84:	b002      	add	sp, #8
 8008a86:	bd10      	pop	{r4, pc}

08008a88 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a88:	b500      	push	{lr}
 8008a8a:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 8008a8c:	f001 f910 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008a90:	b120      	cbz	r0, 8008a9c <MPU_xTimerGetTimerDaemonTaskHandle+0x14>

        xReturn = xTimerGetTimerDaemonTaskHandle();
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008a92:	b003      	add	sp, #12
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008a98:	f7fc bb66 	b.w	8005168 <xTimerGetTimerDaemonTaskHandle>
        portRAISE_PRIVILEGE();
 8008a9c:	df02      	svc	2
        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008a9e:	f7fc fb63 	bl	8005168 <xTimerGetTimerDaemonTaskHandle>
 8008aa2:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008aa4:	f001 f90c 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008aa8:	9801      	ldr	r0, [sp, #4]
    }
 8008aaa:	b003      	add	sp, #12
 8008aac:	f85d fb04 	ldr.w	pc, [sp], #4

08008ab0 <MPU_xTimerPendFunctionCall>:
#if ( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
    BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008aba:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008abc:	f001 f8f8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008ac0:	9903      	ldr	r1, [sp, #12]
 8008ac2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008ac6:	b128      	cbz	r0, 8008ad4 <MPU_xTimerPendFunctionCall+0x24>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 8008ac8:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008aca:	b004      	add	sp, #16
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 8008ad0:	f7fc bb6e 	b.w	80051b0 <xTimerPendFunctionCall>
        portRAISE_PRIVILEGE();
 8008ad4:	df02      	svc	2
        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fc fb6a 	bl	80051b0 <xTimerPendFunctionCall>
 8008adc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008ade:	f001 f8ef 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008ae2:	9801      	ldr	r0, [sp, #4]
    }
 8008ae4:	b004      	add	sp, #16
 8008ae6:	bd10      	pop	{r4, pc}

08008ae8 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008aee:	f001 f8df 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008af2:	b128      	cbz	r0, 8008b00 <MPU_pcTimerGetName+0x18>
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        pcReturn = pcTimerGetName( xTimer );
 8008af4:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return pcReturn;
    }
 8008af6:	b002      	add	sp, #8
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pcReturn = pcTimerGetName( xTimer );
 8008afc:	f7fc bb78 	b.w	80051f0 <pcTimerGetName>
        portRAISE_PRIVILEGE();
 8008b00:	df02      	svc	2
        pcReturn = pcTimerGetName( xTimer );
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7fc fb74 	bl	80051f0 <pcTimerGetName>
 8008b08:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008b0a:	f001 f8d9 	bl	8009cc0 <vResetPrivilege>
        return pcReturn;
 8008b0e:	9801      	ldr	r0, [sp, #4]
    }
 8008b10:	b002      	add	sp, #8
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <MPU_vTimerSetReloadMode>:
    {
 8008b14:	b510      	push	{r4, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	4604      	mov	r4, r0
 8008b1a:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008b1c:	f001 f8c8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008b20:	9901      	ldr	r1, [sp, #4]
 8008b22:	b940      	cbnz	r0, 8008b36 <MPU_vTimerSetReloadMode+0x22>
        portRAISE_PRIVILEGE();
 8008b24:	df02      	svc	2
        vTimerSetReloadMode( xTimer, uxAutoReload );
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7fc fb6e 	bl	8005208 <vTimerSetReloadMode>
    }
 8008b2c:	b002      	add	sp, #8
 8008b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008b32:	f001 b8c5 	b.w	8009cc0 <vResetPrivilege>
        vTimerSetReloadMode( xTimer, uxAutoReload );
 8008b36:	4620      	mov	r0, r4
    }
 8008b38:	b002      	add	sp, #8
 8008b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        vTimerSetReloadMode( xTimer, uxAutoReload );
 8008b3e:	f7fc bb63 	b.w	8005208 <vTimerSetReloadMode>
 8008b42:	bf00      	nop

08008b44 <MPU_uxTimerGetReloadMode>:
    {
 8008b44:	b510      	push	{r4, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008b4a:	f001 f8b1 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008b4e:	b128      	cbz	r0, 8008b5c <MPU_uxTimerGetReloadMode+0x18>
        uxReturn = uxTimerGetReloadMode( xTimer );
 8008b50:	4620      	mov	r0, r4
    }
 8008b52:	b002      	add	sp, #8
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uxReturn = uxTimerGetReloadMode( xTimer );
 8008b58:	f7fc bb78 	b.w	800524c <uxTimerGetReloadMode>
        portRAISE_PRIVILEGE();
 8008b5c:	df02      	svc	2
        uxReturn = uxTimerGetReloadMode( xTimer );
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f7fc fb74 	bl	800524c <uxTimerGetReloadMode>
 8008b64:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008b66:	f001 f8ab 	bl	8009cc0 <vResetPrivilege>
        return uxReturn;
 8008b6a:	9801      	ldr	r0, [sp, #4]
    }
 8008b6c:	b002      	add	sp, #8
 8008b6e:	bd10      	pop	{r4, pc}

08008b70 <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b70:	b510      	push	{r4, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008b76:	f001 f89b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008b7a:	b128      	cbz	r0, 8008b88 <MPU_xTimerGetPeriod+0x18>
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerGetPeriod( xTimer );
 8008b7c:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008b7e:	b002      	add	sp, #8
 8008b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTimerGetPeriod( xTimer );
 8008b84:	f7fc bb7c 	b.w	8005280 <xTimerGetPeriod>
        portRAISE_PRIVILEGE();
 8008b88:	df02      	svc	2
        xReturn = xTimerGetPeriod( xTimer );
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7fc fb78 	bl	8005280 <xTimerGetPeriod>
 8008b90:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008b92:	f001 f895 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008b96:	9801      	ldr	r0, [sp, #4]
    }
 8008b98:	b002      	add	sp, #8
 8008b9a:	bd10      	pop	{r4, pc}

08008b9c <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008ba2:	f001 f885 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008ba6:	b128      	cbz	r0, 8008bb4 <MPU_xTimerGetExpiryTime+0x18>
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerGetExpiryTime( xTimer );
 8008ba8:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008baa:	b002      	add	sp, #8
 8008bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xTimerGetExpiryTime( xTimer );
 8008bb0:	f7fc bb72 	b.w	8005298 <xTimerGetExpiryTime>
        portRAISE_PRIVILEGE();
 8008bb4:	df02      	svc	2
        xReturn = xTimerGetExpiryTime( xTimer );
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7fc fb6e 	bl	8005298 <xTimerGetExpiryTime>
 8008bbc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008bbe:	f001 f87f 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008bc2:	9801      	ldr	r0, [sp, #4]
    }
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008bc8:	b530      	push	{r4, r5, lr}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 8008bd6:	f001 f86b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008bda:	9905      	ldr	r1, [sp, #20]
 8008bdc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008be0:	b130      	cbz	r0, 8008bf0 <MPU_xTimerGenericCommand+0x28>
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008be2:	4620      	mov	r0, r4
 8008be4:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008be6:	b007      	add	sp, #28
 8008be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008bec:	f7fc bbb4 	b.w	8005358 <xTimerGenericCommand>
        portRAISE_PRIVILEGE();
 8008bf0:	df02      	svc	2
        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	9500      	str	r5, [sp, #0]
 8008bf6:	f7fc fbaf 	bl	8005358 <xTimerGenericCommand>
 8008bfa:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008bfc:	f001 f860 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008c00:	9803      	ldr	r0, [sp, #12]
    }
 8008c02:	b007      	add	sp, #28
 8008c04:	bd30      	pop	{r4, r5, pc}
 8008c06:	bf00      	nop

08008c08 <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008c08:	b500      	push	{lr}
 8008c0a:	b083      	sub	sp, #12
    xRunningPrivileged = portIS_PRIVILEGED();
 8008c0c:	f001 f850 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008c10:	b120      	cbz	r0, 8008c1c <MPU_xEventGroupCreate+0x14>

        xReturn = xEventGroupCreate();
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008c12:	b003      	add	sp, #12
 8008c14:	f85d eb04 	ldr.w	lr, [sp], #4
        xReturn = xEventGroupCreate();
 8008c18:	f7f7 bbac 	b.w	8000374 <xEventGroupCreate>
        portRAISE_PRIVILEGE();
 8008c1c:	df02      	svc	2
        xReturn = xEventGroupCreate();
 8008c1e:	f7f7 fba9 	bl	8000374 <xEventGroupCreate>
 8008c22:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008c24:	f001 f84c 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008c28:	9801      	ldr	r0, [sp, #4]
    }
 8008c2a:	b003      	add	sp, #12
 8008c2c:	f85d fb04 	ldr.w	pc, [sp], #4

08008c30 <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008c30:	b510      	push	{r4, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008c36:	f001 f83b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008c3a:	b128      	cbz	r0, 8008c48 <MPU_xEventGroupCreateStatic+0x18>
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008c3c:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008c3e:	b002      	add	sp, #8
 8008c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008c44:	f7f7 bba4 	b.w	8000390 <xEventGroupCreateStatic>
        portRAISE_PRIVILEGE();
 8008c48:	df02      	svc	2
        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f7f7 fba0 	bl	8000390 <xEventGroupCreateStatic>
 8008c50:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008c52:	f001 f835 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008c56:	9801      	ldr	r0, [sp, #4]
    }
 8008c58:	b002      	add	sp, #8
 8008c5a:	bd10      	pop	{r4, pc}

08008c5c <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	4604      	mov	r4, r0
 8008c62:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008c66:	9303      	str	r3, [sp, #12]
 8008c68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 8008c6a:	f001 f821 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008c6e:	9905      	ldr	r1, [sp, #20]
 8008c70:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008c74:	b130      	cbz	r0, 8008c84 <MPU_xEventGroupWaitBits+0x28>
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008c76:	4620      	mov	r0, r4
 8008c78:	950a      	str	r5, [sp, #40]	; 0x28
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008c7a:	b007      	add	sp, #28
 8008c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008c80:	f7f7 bbac 	b.w	80003dc <xEventGroupWaitBits>
        portRAISE_PRIVILEGE();
 8008c84:	df02      	svc	2
    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008c86:	4620      	mov	r0, r4
 8008c88:	9500      	str	r5, [sp, #0]
 8008c8a:	f7f7 fba7 	bl	80003dc <xEventGroupWaitBits>
 8008c8e:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008c90:	f001 f816 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008c94:	9803      	ldr	r0, [sp, #12]
}
 8008c96:	b007      	add	sp, #28
 8008c98:	bd30      	pop	{r4, r5, pc}
 8008c9a:	bf00      	nop

08008c9c <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008ca4:	f001 f804 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008ca8:	9901      	ldr	r1, [sp, #4]
 8008caa:	b128      	cbz	r0, 8008cb8 <MPU_xEventGroupClearBits+0x1c>
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008cac:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008cae:	b002      	add	sp, #8
 8008cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008cb4:	f7f7 bc1a 	b.w	80004ec <xEventGroupClearBits>
        portRAISE_PRIVILEGE();
 8008cb8:	df02      	svc	2
    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7f7 fc16 	bl	80004ec <xEventGroupClearBits>
 8008cc0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008cc2:	f000 fffd 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008cc6:	9801      	ldr	r0, [sp, #4]
}
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008cd4:	f000 ffec 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008cd8:	9901      	ldr	r1, [sp, #4]
 8008cda:	b128      	cbz	r0, 8008ce8 <MPU_xEventGroupSetBits+0x1c>
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008cdc:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008cde:	b002      	add	sp, #8
 8008ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008ce4:	f7f7 bc30 	b.w	8000548 <xEventGroupSetBits>
        portRAISE_PRIVILEGE();
 8008ce8:	df02      	svc	2
    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008cea:	4620      	mov	r0, r4
 8008cec:	f7f7 fc2c 	bl	8000548 <xEventGroupSetBits>
 8008cf0:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008cf2:	f000 ffe5 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008cf6:	9801      	ldr	r0, [sp, #4]
}
 8008cf8:	b002      	add	sp, #8
 8008cfa:	bd10      	pop	{r4, pc}

08008cfc <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	4604      	mov	r4, r0
 8008d02:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d06:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008d08:	f000 ffd2 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008d12:	b128      	cbz	r0, 8008d20 <MPU_xEventGroupSync+0x24>
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008d14:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008d1c:	f7f7 bc68 	b.w	80005f0 <xEventGroupSync>
        portRAISE_PRIVILEGE();
 8008d20:	df02      	svc	2
    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7f7 fc64 	bl	80005f0 <xEventGroupSync>
 8008d28:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008d2a:	f000 ffc9 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008d2e:	9801      	ldr	r0, [sp, #4]
}
 8008d30:	b004      	add	sp, #16
 8008d32:	bd10      	pop	{r4, pc}

08008d34 <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008d34:	b510      	push	{r4, lr}
 8008d36:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008d38:	f000 ffba 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008d3c:	b938      	cbnz	r0, 8008d4e <MPU_vEventGroupDelete+0x1a>
        portRAISE_PRIVILEGE();
 8008d3e:	df02      	svc	2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    vEventGroupDelete( xEventGroup );
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7f7 fcdb 	bl	80006fc <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
}
 8008d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008d4a:	f000 bfb9 	b.w	8009cc0 <vResetPrivilege>
    vEventGroupDelete( xEventGroup );
 8008d4e:	4620      	mov	r0, r4
}
 8008d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vEventGroupDelete( xEventGroup );
 8008d54:	f7f7 bcd2 	b.w	80006fc <vEventGroupDelete>

08008d58 <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d62:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008d64:	f000 ffa4 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008d68:	9903      	ldr	r1, [sp, #12]
 8008d6a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008d6e:	b128      	cbz	r0, 8008d7c <MPU_xStreamBufferSend+0x24>
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008d70:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008d72:	b004      	add	sp, #16
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008d78:	f7f9 b9f2 	b.w	8002160 <xStreamBufferSend>
        portRAISE_PRIVILEGE();
 8008d7c:	df02      	svc	2
    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7f9 f9ee 	bl	8002160 <xStreamBufferSend>
 8008d84:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008d86:	f000 ff9b 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008d8a:	9801      	ldr	r0, [sp, #4]
}
 8008d8c:	b004      	add	sp, #16
 8008d8e:	bd10      	pop	{r4, pc}

08008d90 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008d90:	b510      	push	{r4, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	4604      	mov	r4, r0
 8008d96:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d9a:	9301      	str	r3, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008d9c:	f000 ff88 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008da0:	9903      	ldr	r1, [sp, #12]
 8008da2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008da6:	b128      	cbz	r0, 8008db4 <MPU_xStreamBufferReceive+0x24>
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008da8:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008daa:	b004      	add	sp, #16
 8008dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008db0:	f7f9 bb20 	b.w	80023f4 <xStreamBufferReceive>
        portRAISE_PRIVILEGE();
 8008db4:	df02      	svc	2
    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7f9 fb1c 	bl	80023f4 <xStreamBufferReceive>
 8008dbc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008dbe:	f000 ff7f 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008dc2:	9801      	ldr	r0, [sp, #4]
}
 8008dc4:	b004      	add	sp, #16
 8008dc6:	bd10      	pop	{r4, pc}

08008dc8 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008dce:	f000 ff6f 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008dd2:	b128      	cbz	r0, 8008de0 <MPU_xStreamBufferNextMessageLengthBytes+0x18>
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008dd4:	4620      	mov	r0, r4
}
 8008dd6:	b002      	add	sp, #8
 8008dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008ddc:	f7f9 bddc 	b.w	8002998 <xStreamBufferNextMessageLengthBytes>
        portRAISE_PRIVILEGE();
 8008de0:	df02      	svc	2
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7f9 fdd8 	bl	8002998 <xStreamBufferNextMessageLengthBytes>
 8008de8:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008dea:	f000 ff69 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008dee:	9801      	ldr	r0, [sp, #4]
}
 8008df0:	b002      	add	sp, #8
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008df4:	b510      	push	{r4, lr}
 8008df6:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008df8:	f000 ff5a 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008dfc:	b938      	cbnz	r0, 8008e0e <MPU_vStreamBufferDelete+0x1a>
        portRAISE_PRIVILEGE();
 8008dfe:	df02      	svc	2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    vStreamBufferDelete( xStreamBuffer );
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7f9 fbe5 	bl	80025d0 <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
}
 8008e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008e0a:	f000 bf59 	b.w	8009cc0 <vResetPrivilege>
    vStreamBufferDelete( xStreamBuffer );
 8008e0e:	4620      	mov	r0, r4
}
 8008e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vStreamBufferDelete( xStreamBuffer );
 8008e14:	f7f9 bbdc 	b.w	80025d0 <vStreamBufferDelete>

08008e18 <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e1e:	f000 ff47 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008e22:	b128      	cbz	r0, 8008e30 <MPU_xStreamBufferIsFull+0x18>
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008e24:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008e26:	b002      	add	sp, #8
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008e2c:	f7f9 bbe4 	b.w	80025f8 <xStreamBufferIsFull>
        portRAISE_PRIVILEGE();
 8008e30:	df02      	svc	2
    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008e32:	4620      	mov	r0, r4
 8008e34:	f7f9 fbe0 	bl	80025f8 <xStreamBufferIsFull>
 8008e38:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008e3a:	f000 ff41 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008e3e:	9801      	ldr	r0, [sp, #4]
}
 8008e40:	b002      	add	sp, #8
 8008e42:	bd10      	pop	{r4, pc}

08008e44 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e44:	b510      	push	{r4, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e4a:	f000 ff31 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008e4e:	b128      	cbz	r0, 8008e5c <MPU_xStreamBufferIsEmpty+0x18>
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008e50:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008e52:	b002      	add	sp, #8
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008e58:	f7f9 bbf6 	b.w	8002648 <xStreamBufferIsEmpty>
        portRAISE_PRIVILEGE();
 8008e5c:	df02      	svc	2
    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f7f9 fbf2 	bl	8002648 <xStreamBufferIsEmpty>
 8008e64:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008e66:	f000 ff2b 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008e6a:	9801      	ldr	r0, [sp, #4]
}
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e70:	b510      	push	{r4, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e76:	f000 ff1b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008e7a:	b128      	cbz	r0, 8008e88 <MPU_xStreamBufferReset+0x18>
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008e7c:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008e7e:	b002      	add	sp, #8
 8008e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferReset( xStreamBuffer );
 8008e84:	f7f9 bbf2 	b.w	800266c <xStreamBufferReset>
        portRAISE_PRIVILEGE();
 8008e88:	df02      	svc	2
    xReturn = xStreamBufferReset( xStreamBuffer );
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7f9 fbee 	bl	800266c <xStreamBufferReset>
 8008e90:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008e92:	f000 ff15 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008e96:	9801      	ldr	r0, [sp, #4]
}
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008ea2:	f000 ff05 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008ea6:	b128      	cbz	r0, 8008eb4 <MPU_xStreamBufferSpacesAvailable+0x18>
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008ea8:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008eaa:	b002      	add	sp, #8
 8008eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008eb0:	f7f9 bc22 	b.w	80026f8 <xStreamBufferSpacesAvailable>
        portRAISE_PRIVILEGE();
 8008eb4:	df02      	svc	2
    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7f9 fc1e 	bl	80026f8 <xStreamBufferSpacesAvailable>
 8008ebc:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008ebe:	f000 feff 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008ec2:	9801      	ldr	r0, [sp, #4]
}
 8008ec4:	b002      	add	sp, #8
 8008ec6:	bd10      	pop	{r4, pc}

08008ec8 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008ece:	f000 feef 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008ed2:	b128      	cbz	r0, 8008ee0 <MPU_xStreamBufferBytesAvailable+0x18>
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008ed4:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008ed6:	b002      	add	sp, #8
 8008ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008edc:	f7f9 bc26 	b.w	800272c <xStreamBufferBytesAvailable>
        portRAISE_PRIVILEGE();
 8008ee0:	df02      	svc	2
    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7f9 fc22 	bl	800272c <xStreamBufferBytesAvailable>
 8008ee8:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008eea:	f000 fee9 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008eee:	9801      	ldr	r0, [sp, #4]
}
 8008ef0:	b002      	add	sp, #8
 8008ef2:	bd10      	pop	{r4, pc}

08008ef4 <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	4604      	mov	r4, r0
 8008efa:	9101      	str	r1, [sp, #4]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008efc:	f000 fed8 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008f00:	9901      	ldr	r1, [sp, #4]
 8008f02:	b128      	cbz	r0, 8008f10 <MPU_xStreamBufferSetTriggerLevel+0x1c>
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008f04:	4620      	mov	r0, r4
    vPortResetPrivilege( xRunningPrivileged );

    return xReturn;
}
 8008f06:	b002      	add	sp, #8
 8008f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008f0c:	f7f9 bc22 	b.w	8002754 <xStreamBufferSetTriggerLevel>
        portRAISE_PRIVILEGE();
 8008f10:	df02      	svc	2
    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7f9 fc1e 	bl	8002754 <xStreamBufferSetTriggerLevel>
 8008f18:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008f1a:	f000 fed1 	bl	8009cc0 <vResetPrivilege>
    return xReturn;
 8008f1e:	9801      	ldr	r0, [sp, #4]
}
 8008f20:	b002      	add	sp, #8
 8008f22:	bd10      	pop	{r4, pc}

08008f24 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008f24:	b510      	push	{r4, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	4604      	mov	r4, r0
 8008f2a:	e9cd 2100 	strd	r2, r1, [sp]
    xRunningPrivileged = portIS_PRIVILEGED();
 8008f2e:	f000 febf 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008f32:	e9dd 2100 	ldrd	r2, r1, [sp]
 8008f36:	b128      	cbz	r0, 8008f44 <MPU_xStreamBufferGenericCreate+0x20>
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008f38:	4620      	mov	r0, r4
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008f3a:	b002      	add	sp, #8
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008f40:	f7f9 bc6e 	b.w	8002820 <xStreamBufferGenericCreate>
        portRAISE_PRIVILEGE();
 8008f44:	df02      	svc	2
        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7f9 fc6a 	bl	8002820 <xStreamBufferGenericCreate>
 8008f4c:	9000      	str	r0, [sp, #0]
        portRESET_PRIVILEGE();
 8008f4e:	f000 feb7 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008f52:	9800      	ldr	r0, [sp, #0]
    }
 8008f54:	b002      	add	sp, #8
 8008f56:	bd10      	pop	{r4, pc}

08008f58 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008f58:	b530      	push	{r4, r5, lr}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    xRunningPrivileged = portIS_PRIVILEGED();
 8008f66:	f000 fea3 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008f6a:	9905      	ldr	r1, [sp, #20]
 8008f6c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008f70:	b130      	cbz	r0, 8008f80 <MPU_xStreamBufferGenericCreateStatic+0x28>
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008f72:	4620      	mov	r0, r4
 8008f74:	950a      	str	r5, [sp, #40]	; 0x28
        vPortResetPrivilege( xRunningPrivileged );

        return xReturn;
    }
 8008f76:	b007      	add	sp, #28
 8008f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008f7c:	f7f9 bca8 	b.w	80028d0 <xStreamBufferGenericCreateStatic>
        portRAISE_PRIVILEGE();
 8008f80:	df02      	svc	2
        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008f82:	4620      	mov	r0, r4
 8008f84:	9500      	str	r5, [sp, #0]
 8008f86:	f7f9 fca3 	bl	80028d0 <xStreamBufferGenericCreateStatic>
 8008f8a:	9003      	str	r0, [sp, #12]
        portRESET_PRIVILEGE();
 8008f8c:	f000 fe98 	bl	8009cc0 <vResetPrivilege>
        return xReturn;
 8008f90:	9803      	ldr	r0, [sp, #12]
    }
 8008f92:	b007      	add	sp, #28
 8008f94:	bd30      	pop	{r4, r5, pc}
 8008f96:	bf00      	nop

08008f98 <MPU_ASAN_malloc>:
{
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008f9e:	f000 fe87 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008fa2:	b140      	cbz	r0, 8008fb6 <MPU_ASAN_malloc+0x1e>
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	2108      	movs	r1, #8
 8008fa8:	4620      	mov	r0, r4
 8008faa:	461a      	mov	r2, r3
}
 8008fac:	b002      	add	sp, #8
 8008fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008fb2:	f000 bb5d 	b.w	8009670 <Allocate>
        portRAISE_PRIVILEGE();
 8008fb6:	df02      	svc	2
 8008fb8:	2301      	movs	r3, #1
 8008fba:	2108      	movs	r1, #8
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f000 fb56 	bl	8009670 <Allocate>
 8008fc4:	9001      	str	r0, [sp, #4]
        portRESET_PRIVILEGE();
 8008fc6:	f000 fe7b 	bl	8009cc0 <vResetPrivilege>
	return  (void *	)ptr;
 8008fca:	9801      	ldr	r0, [sp, #4]
}
 8008fcc:	b002      	add	sp, #8
 8008fce:	bd10      	pop	{r4, pc}

08008fd0 <MPU_ASAN_free>:
{
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008fd4:	f000 fe6c 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8008fd8:	b950      	cbnz	r0, 8008ff0 <MPU_ASAN_free+0x20>
 8008fda:	4602      	mov	r2, r0
        portRAISE_PRIVILEGE();
 8008fdc:	df02      	svc	2
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fd9c 	bl	8009b20 <Deallocate>
}
 8008fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        portRESET_PRIVILEGE();
 8008fec:	f000 be68 	b.w	8009cc0 <vResetPrivilege>
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4611      	mov	r1, r2
}
 8008ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008ffc:	f000 bd90 	b.w	8009b20 <Deallocate>

08009000 <MPU_ASAN_flush_alloc>:
{
 8009000:	b508      	push	{r3, lr}
    xRunningPrivileged = portIS_PRIVILEGED();
 8009002:	f000 fe55 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 8009006:	b920      	cbnz	r0, 8009012 <MPU_ASAN_flush_alloc+0x12>
        portRAISE_PRIVILEGE();
 8009008:	df02      	svc	2
}
 800900a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portRESET_PRIVILEGE();
 800900e:	f000 be57 	b.w	8009cc0 <vResetPrivilege>
 8009012:	bd08      	pop	{r3, pc}

08009014 <xPortRaisePrivilege>:
{
 8009014:	b508      	push	{r3, lr}
    xRunningPrivileged = portIS_PRIVILEGED();
 8009016:	f000 fe4b 	bl	8009cb0 <xIsPrivileged>
    if( xRunningPrivileged == pdFALSE )
 800901a:	b900      	cbnz	r0, 800901e <xPortRaisePrivilege+0xa>
        portRAISE_PRIVILEGE();
 800901c:	df02      	svc	2
}
 800901e:	bd08      	pop	{r3, pc}

08009020 <__do_global_dtors_aux>:
 8009020:	b510      	push	{r4, lr}
 8009022:	4c05      	ldr	r4, [pc, #20]	; (8009038 <__do_global_dtors_aux+0x18>)
 8009024:	7823      	ldrb	r3, [r4, #0]
 8009026:	b933      	cbnz	r3, 8009036 <__do_global_dtors_aux+0x16>
 8009028:	4b04      	ldr	r3, [pc, #16]	; (800903c <__do_global_dtors_aux+0x1c>)
 800902a:	b113      	cbz	r3, 8009032 <__do_global_dtors_aux+0x12>
 800902c:	4804      	ldr	r0, [pc, #16]	; (8009040 <__do_global_dtors_aux+0x20>)
 800902e:	f3af 8000 	nop.w
 8009032:	2301      	movs	r3, #1
 8009034:	7023      	strb	r3, [r4, #0]
 8009036:	bd10      	pop	{r4, pc}
 8009038:	24010000 	.word	0x24010000
 800903c:	00000000 	.word	0x00000000
 8009040:	080232a4 	.word	0x080232a4

08009044 <frame_dummy>:
 8009044:	b508      	push	{r3, lr}
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <frame_dummy+0x10>)
 8009048:	b11b      	cbz	r3, 8009052 <frame_dummy+0xe>
 800904a:	4903      	ldr	r1, [pc, #12]	; (8009058 <frame_dummy+0x14>)
 800904c:	4803      	ldr	r0, [pc, #12]	; (800905c <frame_dummy+0x18>)
 800904e:	f3af 8000 	nop.w
 8009052:	bd08      	pop	{r3, pc}
 8009054:	00000000 	.word	0x00000000
 8009058:	24010004 	.word	0x24010004
 800905c:	080232a4 	.word	0x080232a4

08009060 <strlen>:
 8009060:	4603      	mov	r3, r0
 8009062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009066:	2a00      	cmp	r2, #0
 8009068:	d1fb      	bne.n	8009062 <strlen+0x2>
 800906a:	1a18      	subs	r0, r3, r0
 800906c:	3801      	subs	r0, #1
 800906e:	4770      	bx	lr

08009070 <memchr>:
 8009070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009074:	2a10      	cmp	r2, #16
 8009076:	db2b      	blt.n	80090d0 <memchr+0x60>
 8009078:	f010 0f07 	tst.w	r0, #7
 800907c:	d008      	beq.n	8009090 <memchr+0x20>
 800907e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009082:	3a01      	subs	r2, #1
 8009084:	428b      	cmp	r3, r1
 8009086:	d02d      	beq.n	80090e4 <memchr+0x74>
 8009088:	f010 0f07 	tst.w	r0, #7
 800908c:	b342      	cbz	r2, 80090e0 <memchr+0x70>
 800908e:	d1f6      	bne.n	800907e <memchr+0xe>
 8009090:	b4f0      	push	{r4, r5, r6, r7}
 8009092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8009096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800909a:	f022 0407 	bic.w	r4, r2, #7
 800909e:	f07f 0700 	mvns.w	r7, #0
 80090a2:	2300      	movs	r3, #0
 80090a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80090a8:	3c08      	subs	r4, #8
 80090aa:	ea85 0501 	eor.w	r5, r5, r1
 80090ae:	ea86 0601 	eor.w	r6, r6, r1
 80090b2:	fa85 f547 	uadd8	r5, r5, r7
 80090b6:	faa3 f587 	sel	r5, r3, r7
 80090ba:	fa86 f647 	uadd8	r6, r6, r7
 80090be:	faa5 f687 	sel	r6, r5, r7
 80090c2:	b98e      	cbnz	r6, 80090e8 <memchr+0x78>
 80090c4:	d1ee      	bne.n	80090a4 <memchr+0x34>
 80090c6:	bcf0      	pop	{r4, r5, r6, r7}
 80090c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80090cc:	f002 0207 	and.w	r2, r2, #7
 80090d0:	b132      	cbz	r2, 80090e0 <memchr+0x70>
 80090d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80090d6:	3a01      	subs	r2, #1
 80090d8:	ea83 0301 	eor.w	r3, r3, r1
 80090dc:	b113      	cbz	r3, 80090e4 <memchr+0x74>
 80090de:	d1f8      	bne.n	80090d2 <memchr+0x62>
 80090e0:	2000      	movs	r0, #0
 80090e2:	4770      	bx	lr
 80090e4:	3801      	subs	r0, #1
 80090e6:	4770      	bx	lr
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	bf06      	itte	eq
 80090ec:	4635      	moveq	r5, r6
 80090ee:	3803      	subeq	r0, #3
 80090f0:	3807      	subne	r0, #7
 80090f2:	f015 0f01 	tst.w	r5, #1
 80090f6:	d107      	bne.n	8009108 <memchr+0x98>
 80090f8:	3001      	adds	r0, #1
 80090fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80090fe:	bf02      	ittt	eq
 8009100:	3001      	addeq	r0, #1
 8009102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8009106:	3001      	addeq	r0, #1
 8009108:	bcf0      	pop	{r4, r5, r6, r7}
 800910a:	3801      	subs	r0, #1
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop

08009110 <__aeabi_uldivmod>:
 8009110:	b953      	cbnz	r3, 8009128 <__aeabi_uldivmod+0x18>
 8009112:	b94a      	cbnz	r2, 8009128 <__aeabi_uldivmod+0x18>
 8009114:	2900      	cmp	r1, #0
 8009116:	bf08      	it	eq
 8009118:	2800      	cmpeq	r0, #0
 800911a:	bf1c      	itt	ne
 800911c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8009120:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009124:	f000 b974 	b.w	8009410 <__aeabi_idiv0>
 8009128:	f1ad 0c08 	sub.w	ip, sp, #8
 800912c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009130:	f000 f806 	bl	8009140 <__udivmoddi4>
 8009134:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800913c:	b004      	add	sp, #16
 800913e:	4770      	bx	lr

08009140 <__udivmoddi4>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	9d08      	ldr	r5, [sp, #32]
 8009146:	4604      	mov	r4, r0
 8009148:	468e      	mov	lr, r1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d14d      	bne.n	80091ea <__udivmoddi4+0xaa>
 800914e:	428a      	cmp	r2, r1
 8009150:	4694      	mov	ip, r2
 8009152:	d969      	bls.n	8009228 <__udivmoddi4+0xe8>
 8009154:	fab2 f282 	clz	r2, r2
 8009158:	b152      	cbz	r2, 8009170 <__udivmoddi4+0x30>
 800915a:	fa01 f302 	lsl.w	r3, r1, r2
 800915e:	f1c2 0120 	rsb	r1, r2, #32
 8009162:	fa20 f101 	lsr.w	r1, r0, r1
 8009166:	fa0c fc02 	lsl.w	ip, ip, r2
 800916a:	ea41 0e03 	orr.w	lr, r1, r3
 800916e:	4094      	lsls	r4, r2
 8009170:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8009174:	0c21      	lsrs	r1, r4, #16
 8009176:	fbbe f6f8 	udiv	r6, lr, r8
 800917a:	fa1f f78c 	uxth.w	r7, ip
 800917e:	fb08 e316 	mls	r3, r8, r6, lr
 8009182:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009186:	fb06 f107 	mul.w	r1, r6, r7
 800918a:	4299      	cmp	r1, r3
 800918c:	d90a      	bls.n	80091a4 <__udivmoddi4+0x64>
 800918e:	eb1c 0303 	adds.w	r3, ip, r3
 8009192:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8009196:	f080 811f 	bcs.w	80093d8 <__udivmoddi4+0x298>
 800919a:	4299      	cmp	r1, r3
 800919c:	f240 811c 	bls.w	80093d8 <__udivmoddi4+0x298>
 80091a0:	3e02      	subs	r6, #2
 80091a2:	4463      	add	r3, ip
 80091a4:	1a5b      	subs	r3, r3, r1
 80091a6:	b2a4      	uxth	r4, r4
 80091a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80091ac:	fb08 3310 	mls	r3, r8, r0, r3
 80091b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80091b4:	fb00 f707 	mul.w	r7, r0, r7
 80091b8:	42a7      	cmp	r7, r4
 80091ba:	d90a      	bls.n	80091d2 <__udivmoddi4+0x92>
 80091bc:	eb1c 0404 	adds.w	r4, ip, r4
 80091c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091c4:	f080 810a 	bcs.w	80093dc <__udivmoddi4+0x29c>
 80091c8:	42a7      	cmp	r7, r4
 80091ca:	f240 8107 	bls.w	80093dc <__udivmoddi4+0x29c>
 80091ce:	4464      	add	r4, ip
 80091d0:	3802      	subs	r0, #2
 80091d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80091d6:	1be4      	subs	r4, r4, r7
 80091d8:	2600      	movs	r6, #0
 80091da:	b11d      	cbz	r5, 80091e4 <__udivmoddi4+0xa4>
 80091dc:	40d4      	lsrs	r4, r2
 80091de:	2300      	movs	r3, #0
 80091e0:	e9c5 4300 	strd	r4, r3, [r5]
 80091e4:	4631      	mov	r1, r6
 80091e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ea:	428b      	cmp	r3, r1
 80091ec:	d909      	bls.n	8009202 <__udivmoddi4+0xc2>
 80091ee:	2d00      	cmp	r5, #0
 80091f0:	f000 80ef 	beq.w	80093d2 <__udivmoddi4+0x292>
 80091f4:	2600      	movs	r6, #0
 80091f6:	e9c5 0100 	strd	r0, r1, [r5]
 80091fa:	4630      	mov	r0, r6
 80091fc:	4631      	mov	r1, r6
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	fab3 f683 	clz	r6, r3
 8009206:	2e00      	cmp	r6, #0
 8009208:	d14a      	bne.n	80092a0 <__udivmoddi4+0x160>
 800920a:	428b      	cmp	r3, r1
 800920c:	d302      	bcc.n	8009214 <__udivmoddi4+0xd4>
 800920e:	4282      	cmp	r2, r0
 8009210:	f200 80f9 	bhi.w	8009406 <__udivmoddi4+0x2c6>
 8009214:	1a84      	subs	r4, r0, r2
 8009216:	eb61 0303 	sbc.w	r3, r1, r3
 800921a:	2001      	movs	r0, #1
 800921c:	469e      	mov	lr, r3
 800921e:	2d00      	cmp	r5, #0
 8009220:	d0e0      	beq.n	80091e4 <__udivmoddi4+0xa4>
 8009222:	e9c5 4e00 	strd	r4, lr, [r5]
 8009226:	e7dd      	b.n	80091e4 <__udivmoddi4+0xa4>
 8009228:	b902      	cbnz	r2, 800922c <__udivmoddi4+0xec>
 800922a:	deff      	udf	#255	; 0xff
 800922c:	fab2 f282 	clz	r2, r2
 8009230:	2a00      	cmp	r2, #0
 8009232:	f040 8092 	bne.w	800935a <__udivmoddi4+0x21a>
 8009236:	eba1 010c 	sub.w	r1, r1, ip
 800923a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800923e:	fa1f fe8c 	uxth.w	lr, ip
 8009242:	2601      	movs	r6, #1
 8009244:	0c20      	lsrs	r0, r4, #16
 8009246:	fbb1 f3f7 	udiv	r3, r1, r7
 800924a:	fb07 1113 	mls	r1, r7, r3, r1
 800924e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009252:	fb0e f003 	mul.w	r0, lr, r3
 8009256:	4288      	cmp	r0, r1
 8009258:	d908      	bls.n	800926c <__udivmoddi4+0x12c>
 800925a:	eb1c 0101 	adds.w	r1, ip, r1
 800925e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009262:	d202      	bcs.n	800926a <__udivmoddi4+0x12a>
 8009264:	4288      	cmp	r0, r1
 8009266:	f200 80cb 	bhi.w	8009400 <__udivmoddi4+0x2c0>
 800926a:	4643      	mov	r3, r8
 800926c:	1a09      	subs	r1, r1, r0
 800926e:	b2a4      	uxth	r4, r4
 8009270:	fbb1 f0f7 	udiv	r0, r1, r7
 8009274:	fb07 1110 	mls	r1, r7, r0, r1
 8009278:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800927c:	fb0e fe00 	mul.w	lr, lr, r0
 8009280:	45a6      	cmp	lr, r4
 8009282:	d908      	bls.n	8009296 <__udivmoddi4+0x156>
 8009284:	eb1c 0404 	adds.w	r4, ip, r4
 8009288:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800928c:	d202      	bcs.n	8009294 <__udivmoddi4+0x154>
 800928e:	45a6      	cmp	lr, r4
 8009290:	f200 80bb 	bhi.w	800940a <__udivmoddi4+0x2ca>
 8009294:	4608      	mov	r0, r1
 8009296:	eba4 040e 	sub.w	r4, r4, lr
 800929a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800929e:	e79c      	b.n	80091da <__udivmoddi4+0x9a>
 80092a0:	f1c6 0720 	rsb	r7, r6, #32
 80092a4:	40b3      	lsls	r3, r6
 80092a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80092aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80092ae:	fa20 f407 	lsr.w	r4, r0, r7
 80092b2:	fa01 f306 	lsl.w	r3, r1, r6
 80092b6:	431c      	orrs	r4, r3
 80092b8:	40f9      	lsrs	r1, r7
 80092ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80092be:	fa00 f306 	lsl.w	r3, r0, r6
 80092c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80092c6:	0c20      	lsrs	r0, r4, #16
 80092c8:	fa1f fe8c 	uxth.w	lr, ip
 80092cc:	fb09 1118 	mls	r1, r9, r8, r1
 80092d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80092d4:	fb08 f00e 	mul.w	r0, r8, lr
 80092d8:	4288      	cmp	r0, r1
 80092da:	fa02 f206 	lsl.w	r2, r2, r6
 80092de:	d90b      	bls.n	80092f8 <__udivmoddi4+0x1b8>
 80092e0:	eb1c 0101 	adds.w	r1, ip, r1
 80092e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80092e8:	f080 8088 	bcs.w	80093fc <__udivmoddi4+0x2bc>
 80092ec:	4288      	cmp	r0, r1
 80092ee:	f240 8085 	bls.w	80093fc <__udivmoddi4+0x2bc>
 80092f2:	f1a8 0802 	sub.w	r8, r8, #2
 80092f6:	4461      	add	r1, ip
 80092f8:	1a09      	subs	r1, r1, r0
 80092fa:	b2a4      	uxth	r4, r4
 80092fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8009300:	fb09 1110 	mls	r1, r9, r0, r1
 8009304:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8009308:	fb00 fe0e 	mul.w	lr, r0, lr
 800930c:	458e      	cmp	lr, r1
 800930e:	d908      	bls.n	8009322 <__udivmoddi4+0x1e2>
 8009310:	eb1c 0101 	adds.w	r1, ip, r1
 8009314:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8009318:	d26c      	bcs.n	80093f4 <__udivmoddi4+0x2b4>
 800931a:	458e      	cmp	lr, r1
 800931c:	d96a      	bls.n	80093f4 <__udivmoddi4+0x2b4>
 800931e:	3802      	subs	r0, #2
 8009320:	4461      	add	r1, ip
 8009322:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8009326:	fba0 9402 	umull	r9, r4, r0, r2
 800932a:	eba1 010e 	sub.w	r1, r1, lr
 800932e:	42a1      	cmp	r1, r4
 8009330:	46c8      	mov	r8, r9
 8009332:	46a6      	mov	lr, r4
 8009334:	d356      	bcc.n	80093e4 <__udivmoddi4+0x2a4>
 8009336:	d053      	beq.n	80093e0 <__udivmoddi4+0x2a0>
 8009338:	b15d      	cbz	r5, 8009352 <__udivmoddi4+0x212>
 800933a:	ebb3 0208 	subs.w	r2, r3, r8
 800933e:	eb61 010e 	sbc.w	r1, r1, lr
 8009342:	fa01 f707 	lsl.w	r7, r1, r7
 8009346:	fa22 f306 	lsr.w	r3, r2, r6
 800934a:	40f1      	lsrs	r1, r6
 800934c:	431f      	orrs	r7, r3
 800934e:	e9c5 7100 	strd	r7, r1, [r5]
 8009352:	2600      	movs	r6, #0
 8009354:	4631      	mov	r1, r6
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	f1c2 0320 	rsb	r3, r2, #32
 800935e:	40d8      	lsrs	r0, r3
 8009360:	fa0c fc02 	lsl.w	ip, ip, r2
 8009364:	fa21 f303 	lsr.w	r3, r1, r3
 8009368:	4091      	lsls	r1, r2
 800936a:	4301      	orrs	r1, r0
 800936c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009370:	fa1f fe8c 	uxth.w	lr, ip
 8009374:	fbb3 f0f7 	udiv	r0, r3, r7
 8009378:	fb07 3610 	mls	r6, r7, r0, r3
 800937c:	0c0b      	lsrs	r3, r1, #16
 800937e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009382:	fb00 f60e 	mul.w	r6, r0, lr
 8009386:	429e      	cmp	r6, r3
 8009388:	fa04 f402 	lsl.w	r4, r4, r2
 800938c:	d908      	bls.n	80093a0 <__udivmoddi4+0x260>
 800938e:	eb1c 0303 	adds.w	r3, ip, r3
 8009392:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8009396:	d22f      	bcs.n	80093f8 <__udivmoddi4+0x2b8>
 8009398:	429e      	cmp	r6, r3
 800939a:	d92d      	bls.n	80093f8 <__udivmoddi4+0x2b8>
 800939c:	3802      	subs	r0, #2
 800939e:	4463      	add	r3, ip
 80093a0:	1b9b      	subs	r3, r3, r6
 80093a2:	b289      	uxth	r1, r1
 80093a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80093a8:	fb07 3316 	mls	r3, r7, r6, r3
 80093ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80093b0:	fb06 f30e 	mul.w	r3, r6, lr
 80093b4:	428b      	cmp	r3, r1
 80093b6:	d908      	bls.n	80093ca <__udivmoddi4+0x28a>
 80093b8:	eb1c 0101 	adds.w	r1, ip, r1
 80093bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80093c0:	d216      	bcs.n	80093f0 <__udivmoddi4+0x2b0>
 80093c2:	428b      	cmp	r3, r1
 80093c4:	d914      	bls.n	80093f0 <__udivmoddi4+0x2b0>
 80093c6:	3e02      	subs	r6, #2
 80093c8:	4461      	add	r1, ip
 80093ca:	1ac9      	subs	r1, r1, r3
 80093cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80093d0:	e738      	b.n	8009244 <__udivmoddi4+0x104>
 80093d2:	462e      	mov	r6, r5
 80093d4:	4628      	mov	r0, r5
 80093d6:	e705      	b.n	80091e4 <__udivmoddi4+0xa4>
 80093d8:	4606      	mov	r6, r0
 80093da:	e6e3      	b.n	80091a4 <__udivmoddi4+0x64>
 80093dc:	4618      	mov	r0, r3
 80093de:	e6f8      	b.n	80091d2 <__udivmoddi4+0x92>
 80093e0:	454b      	cmp	r3, r9
 80093e2:	d2a9      	bcs.n	8009338 <__udivmoddi4+0x1f8>
 80093e4:	ebb9 0802 	subs.w	r8, r9, r2
 80093e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80093ec:	3801      	subs	r0, #1
 80093ee:	e7a3      	b.n	8009338 <__udivmoddi4+0x1f8>
 80093f0:	4646      	mov	r6, r8
 80093f2:	e7ea      	b.n	80093ca <__udivmoddi4+0x28a>
 80093f4:	4620      	mov	r0, r4
 80093f6:	e794      	b.n	8009322 <__udivmoddi4+0x1e2>
 80093f8:	4640      	mov	r0, r8
 80093fa:	e7d1      	b.n	80093a0 <__udivmoddi4+0x260>
 80093fc:	46d0      	mov	r8, sl
 80093fe:	e77b      	b.n	80092f8 <__udivmoddi4+0x1b8>
 8009400:	3b02      	subs	r3, #2
 8009402:	4461      	add	r1, ip
 8009404:	e732      	b.n	800926c <__udivmoddi4+0x12c>
 8009406:	4630      	mov	r0, r6
 8009408:	e709      	b.n	800921e <__udivmoddi4+0xde>
 800940a:	4464      	add	r4, ip
 800940c:	3802      	subs	r0, #2
 800940e:	e742      	b.n	8009296 <__udivmoddi4+0x156>

08009410 <__aeabi_idiv0>:
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009414:	4b2f      	ldr	r3, [pc, #188]	; (80094d4 <SystemInit+0xc0>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009416:	4930      	ldr	r1, [pc, #192]	; (80094d8 <SystemInit+0xc4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009418:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800941c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8009420:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	f042 0210 	orr.w	r2, r2, #16
 800942c:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800942e:	680b      	ldr	r3, [r1, #0]
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	2b06      	cmp	r3, #6
 8009436:	d805      	bhi.n	8009444 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009438:	680b      	ldr	r3, [r1, #0]
 800943a:	f023 030f 	bic.w	r3, r3, #15
 800943e:	f043 0307 	orr.w	r3, r3, #7
 8009442:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <SystemInit+0xc8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009446:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009448:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <SystemInit+0xcc>)
  RCC->CR |= RCC_CR_HSION;
 800944a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800944c:	4822      	ldr	r0, [pc, #136]	; (80094d8 <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800944e:	f041 0101 	orr.w	r1, r1, #1
 8009452:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009454:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8009456:	6819      	ldr	r1, [r3, #0]
 8009458:	400a      	ands	r2, r1
 800945a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800945c:	6803      	ldr	r3, [r0, #0]
 800945e:	071b      	lsls	r3, r3, #28
 8009460:	d505      	bpl.n	800946e <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009462:	6803      	ldr	r3, [r0, #0]
 8009464:	f023 030f 	bic.w	r3, r3, #15
 8009468:	f043 0307 	orr.w	r3, r3, #7
 800946c:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <SystemInit+0xc8>)
 8009470:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009472:	491c      	ldr	r1, [pc, #112]	; (80094e4 <SystemInit+0xd0>)
  RCC->PLLCFGR = 0x01FF0000;
 8009474:	481c      	ldr	r0, [pc, #112]	; (80094e8 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
 8009476:	4c1d      	ldr	r4, [pc, #116]	; (80094ec <SystemInit+0xd8>)
  RCC->D1CFGR = 0x00000000;
 8009478:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800947a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800947c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800947e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8009480:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8009482:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 8009486:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8009488:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800948a:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800948c:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800948e:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8009490:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8009492:	6819      	ldr	r1, [r3, #0]
 8009494:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009498:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800949a:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800949c:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80094a0:	4913      	ldr	r1, [pc, #76]	; (80094f0 <SystemInit+0xdc>)
  EXTI_D2->EMR3 |= 0x4000UL;
 80094a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80094a6:	4b13      	ldr	r3, [pc, #76]	; (80094f4 <SystemInit+0xe0>)
  EXTI_D2->EMR3 |= 0x4000UL;
 80094a8:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80094ac:	680a      	ldr	r2, [r1, #0]
 80094ae:	4013      	ands	r3, r2
 80094b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b4:	d203      	bcs.n	80094be <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <SystemInit+0xe4>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80094be:	490f      	ldr	r1, [pc, #60]	; (80094fc <SystemInit+0xe8>)
 80094c0:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80094c4:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <SystemInit+0xc0>)
 80094c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80094ca:	6008      	str	r0, [r1, #0]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80094cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80094d0:	609a      	str	r2, [r3, #8]
}
 80094d2:	4770      	bx	lr
 80094d4:	e000ed00 	.word	0xe000ed00
 80094d8:	52002000 	.word	0x52002000
 80094dc:	58024400 	.word	0x58024400
 80094e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80094e4:	01010280 	.word	0x01010280
 80094e8:	01ff0000 	.word	0x01ff0000
 80094ec:	02020200 	.word	0x02020200
 80094f0:	5c001000 	.word	0x5c001000
 80094f4:	ffff0000 	.word	0xffff0000
 80094f8:	51008000 	.word	0x51008000
 80094fc:	52004000 	.word	0x52004000

08009500 <FreeRTOSReportFailure>:
}


#endif
static void FreeRTOSReportFailure(type_exception_t  tEX)
{
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	b083      	sub	sp, #12
 8009504:	4604      	mov	r4, r0


	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


	  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009506:	f7fe fff5 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 800950a:	4909      	ldr	r1, [pc, #36]	; (8009530 <FreeRTOSReportFailure+0x30>)
 800950c:	f8d1 3870 	ldr.w	r3, [r1, #2160]	; 0x870
 8009510:	4283      	cmp	r3, r0
 8009512:	d000      	beq.n	8009516 <FreeRTOSReportFailure+0x16>
		  // port yield should be called and nothing else should be executed
	  }
	  else
	  {
		  //printf("Fuzzer crashed");
		  for( ; ; )
 8009514:	e7fe      	b.n	8009514 <FreeRTOSReportFailure+0x14>
		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 8009516:	2500      	movs	r5, #0
		  AFLfuzzer.xTypeEx = tEX;
 8009518:	f881 4874 	strb.w	r4, [r1, #2164]	; 0x874
		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 800951c:	f8d1 086c 	ldr.w	r0, [r1, #2156]	; 0x86c
 8009520:	2303      	movs	r3, #3
 8009522:	2209      	movs	r2, #9
 8009524:	4629      	mov	r1, r5
 8009526:	9500      	str	r5, [sp, #0]
 8009528:	f7fe ff58 	bl	80083dc <MPU_xTaskGenericNotify>
		  taskYIELD();
 800952c:	df01      	svc	1
		  while(1);
 800952e:	e7fe      	b.n	800952e <FreeRTOSReportFailure+0x2e>
 8009530:	24026000 	.word	0x24026000

08009534 <__asan_ReportGenericError>:
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 8009534:	2004      	movs	r0, #4
{
 8009536:	b508      	push	{r3, lr}
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 8009538:	f7ff ffe2 	bl	8009500 <FreeRTOSReportFailure>

0800953c <SytemCall_1_code>:
}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop

08009540 <SytemCall_2_code>:
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop

08009544 <SytemCall_3_code>:
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop

08009548 <SytemCall_4_code>:
}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop

0800954c <SytemCall_5_code>:
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop

08009550 <__asan_report_store1>:
{
 8009550:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r3}");
 8009552:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 8009554:	f7ff ffee 	bl	8009534 <__asan_ReportGenericError>

08009558 <__asan_report_store2>:
 8009558:	b508      	push	{r3, lr}
 800955a:	b40f      	push	{r0, r1, r2, r3}
 800955c:	f7ff ffea 	bl	8009534 <__asan_ReportGenericError>

08009560 <__asan_report_store4>:
 8009560:	b508      	push	{r3, lr}
 8009562:	b40f      	push	{r0, r1, r2, r3}
 8009564:	f7ff ffe6 	bl	8009534 <__asan_ReportGenericError>

08009568 <__asan_report_load1>:
 8009568:	b508      	push	{r3, lr}
 800956a:	b40f      	push	{r0, r1, r2, r3}
 800956c:	f7ff ffe2 	bl	8009534 <__asan_ReportGenericError>

08009570 <__asan_report_load2>:
 8009570:	b508      	push	{r3, lr}
 8009572:	b40f      	push	{r0, r1, r2, r3}
 8009574:	f7ff ffde 	bl	8009534 <__asan_ReportGenericError>

08009578 <__asan_report_load4>:
 8009578:	b508      	push	{r3, lr}
 800957a:	b40f      	push	{r0, r1, r2, r3}
 800957c:	f7ff ffda 	bl	8009534 <__asan_ReportGenericError>

08009580 <__asan_init>:
void __asan_init(void) {
 8009580:	b510      	push	{r4, lr}
	   if(!asan_inited)
 8009582:	4c07      	ldr	r4, [pc, #28]	; (80095a0 <__asan_init+0x20>)
 8009584:	7821      	ldrb	r1, [r4, #0]
 8009586:	b101      	cbz	r1, 800958a <__asan_init+0xa>
}
 8009588:	bd10      	pop	{r4, pc}
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 800958a:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <__asan_init+0x24>)
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 800958c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009590:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 8009594:	6019      	str	r1, [r3, #0]
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 8009596:	f018 fc63 	bl	8021e60 <memset>
		   asan_inited = true;
 800959a:	2301      	movs	r3, #1
 800959c:	7023      	strb	r3, [r4, #0]
}
 800959e:	bd10      	pop	{r4, pc}
 80095a0:	2401001c 	.word	0x2401001c
 80095a4:	24037400 	.word	0x24037400

080095a8 <__asan_stack_malloc_0>:
  __asm volatile("bkpt #0"); /* stop application */
 80095a8:	be00      	bkpt	0x0000
  for(;;){}
 80095aa:	e7fe      	b.n	80095aa <__asan_stack_malloc_0+0x2>

080095ac <__asan_stack_malloc_1>:
 80095ac:	be00      	bkpt	0x0000
 80095ae:	e7fe      	b.n	80095ae <__asan_stack_malloc_1+0x2>

080095b0 <__asan_handle_no_return>:
  __asm volatile("bkpt #0"); /* stop application */
 80095b0:	be00      	bkpt	0x0000
  for(;;){}
 80095b2:	e7fe      	b.n	80095b2 <__asan_handle_no_return+0x2>

080095b4 <__asan_version_mismatch_check_v8>:
void __asan_version_mismatch_check_v8(void) {  }
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop

080095b8 <__asan_unregister_globals>:
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <__asan_register_globals>:
   for(i=0; i<n ; i++)
 80095bc:	2900      	cmp	r1, #0
 80095be:	d052      	beq.n	8009666 <__asan_register_globals+0xaa>
{
 80095c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	4604      	mov	r4, r0
  return (size + boundary - 1) & ~(boundary - 1);
 80095c6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800966c <__asan_register_globals+0xb0>
 80095ca:	eb00 1841 	add.w	r8, r0, r1, lsl #5
 80095ce:	e002      	b.n	80095d6 <__asan_register_globals+0x1a>
   for(i=0; i<n ; i++)
 80095d0:	3420      	adds	r4, #32
 80095d2:	45a0      	cmp	r8, r4
 80095d4:	d03d      	beq.n	8009652 <__asan_register_globals+0x96>
	   if( (globals[i].beg >= McuASAN_CONFIG_APP_MEM_START) &&
 80095d6:	6826      	ldr	r6, [r4, #0]
 80095d8:	f106 435c 	add.w	r3, r6, #3690987520	; 0xdc000000
 80095dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095e0:	d2f6      	bcs.n	80095d0 <__asan_register_globals+0x14>
  uptr shadow_end = MEM_TO_SHADOW(
 80095e2:	4b21      	ldr	r3, [pc, #132]	; (8009668 <__asan_register_globals+0xac>)
      aligned_beg + aligned_size - SHADOW_GRANULARITY) + 1;
 80095e4:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
  return (size + boundary - 1) & ~(boundary - 1);
 80095e8:	f107 0907 	add.w	r9, r7, #7
      aligned_beg + aligned_size - SHADOW_GRANULARITY) + 1;
 80095ec:	4435      	add	r5, r6
  return (size + boundary - 1) & ~(boundary - 1);
 80095ee:	f029 0907 	bic.w	r9, r9, #7
  uptr shadow_end = MEM_TO_SHADOW(
 80095f2:	3d08      	subs	r5, #8
  FastPoisonShadow(g.beg + aligned_size, g.size_with_redzone - aligned_size,
 80095f4:	eb06 0209 	add.w	r2, r6, r9
  uptr shadow_end = MEM_TO_SHADOW(
 80095f8:	eb03 05d5 	add.w	r5, r3, r5, lsr #3
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80095fc:	08d2      	lsrs	r2, r2, #3
  return x & ~(boundary - 1);
 80095fe:	ea05 0a0b 	and.w	sl, r5, fp
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009602:	f102 50dc 	add.w	r0, r2, #461373440	; 0x1b800000
  return (size + boundary - 1) & ~(boundary - 1);
 8009606:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800960a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800960e:	ea02 020b 	and.w	r2, r2, fp
    if (page_beg >= page_end) {
 8009612:	4552      	cmp	r2, sl
 8009614:	d21f      	bcs.n	8009656 <__asan_register_globals+0x9a>
      if (page_beg != shadow_beg) {
 8009616:	4290      	cmp	r0, r2
 8009618:	d003      	beq.n	8009622 <__asan_register_globals+0x66>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 800961a:	1a12      	subs	r2, r2, r0
 800961c:	21f9      	movs	r1, #249	; 0xf9
 800961e:	f018 fc1f 	bl	8021e60 <memset>
      if (page_end != shadow_end) {
 8009622:	4555      	cmp	r5, sl
 8009624:	d005      	beq.n	8009632 <__asan_register_globals+0x76>
        memset((void *)page_end, value, shadow_end - page_end);
 8009626:	eba5 020a 	sub.w	r2, r5, sl
 800962a:	4650      	mov	r0, sl
 800962c:	21f9      	movs	r1, #249	; 0xf9
 800962e:	f018 fc17 	bl	8021e60 <memset>
  if (g.size != aligned_size) {
 8009632:	454f      	cmp	r7, r9
 8009634:	d0cc      	beq.n	80095d0 <__asan_register_globals+0x14>
  return x & ~(boundary - 1);
 8009636:	f027 0307 	bic.w	r3, r7, #7
    } else if (i >= size) {
 800963a:	f017 0707 	ands.w	r7, r7, #7
    FastPoisonShadowPartialRightRedzone(
 800963e:	441e      	add	r6, r3
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009640:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8009644:	f106 56dc 	add.w	r6, r6, #461373440	; 0x1b800000
    } else if (i >= size) {
 8009648:	d00a      	beq.n	8009660 <__asan_register_globals+0xa4>
   for(i=0; i<n ; i++)
 800964a:	3420      	adds	r4, #32
      *shadow = poison_partial ?(uint8_t)(size - i) : 0;
 800964c:	7037      	strb	r7, [r6, #0]
   for(i=0; i<n ; i++)
 800964e:	45a0      	cmp	r8, r4
 8009650:	d1c1      	bne.n	80095d6 <__asan_register_globals+0x1a>
}
 8009652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 8009656:	1a2a      	subs	r2, r5, r0
 8009658:	21f9      	movs	r1, #249	; 0xf9
 800965a:	f018 fc01 	bl	8021e60 <memset>
 800965e:	e7e8      	b.n	8009632 <__asan_register_globals+0x76>
      *shadow = (SHADOW_GRANULARITY == 128) ? 0xff : value;  // unaddressable
 8009660:	23f9      	movs	r3, #249	; 0xf9
 8009662:	7033      	strb	r3, [r6, #0]
 8009664:	e7b4      	b.n	80095d0 <__asan_register_globals+0x14>
 8009666:	4770      	bx	lr
 8009668:	1b800001 	.word	0x1b800001
 800966c:	fffffc00 	.word	0xfffffc00

08009670 <Allocate>:
                 AllocType alloc_type, bool can_fill) {
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (user_requested_alignment < 8)
 8009674:	2907      	cmp	r1, #7
                 AllocType alloc_type, bool can_fill) {
 8009676:	b085      	sub	sp, #20
 8009678:	4606      	mov	r6, r0
 800967a:	4691      	mov	r9, r2
 800967c:	9300      	str	r3, [sp, #0]
    if (user_requested_alignment < 8)
 800967e:	f240 80f3 	bls.w	8009868 <Allocate+0x1f8>
  return (uptr) ffs(x);
 8009682:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009686:	460b      	mov	r3, r1
 8009688:	bf28      	it	cs
 800968a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800968e:	2b00      	cmp	r3, #0
 8009690:	fa93 f3a3 	rbit	r3, r3
 8009694:	fab3 f383 	clz	r3, r3
 8009698:	bf08      	it	eq
 800969a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    return Log2(user_requested_alignment) - 2;
 800969e:	3b01      	subs	r3, #1
 80096a0:	9301      	str	r3, [sp, #4]
    if (alignment < min_alignment)
 80096a2:	2908      	cmp	r1, #8
 80096a4:	460f      	mov	r7, r1
 80096a6:	bf38      	it	cc
 80096a8:	2708      	movcc	r7, #8
    if (size == 0) {
 80096aa:	b1e6      	cbz	r6, 80096e6 <Allocate+0x76>
    user_requested_size <= 64        - 16   ? 0 :
 80096ac:	2e30      	cmp	r6, #48	; 0x30
 80096ae:	f240 80d1 	bls.w	8009854 <Allocate+0x1e4>
 80096b2:	2e60      	cmp	r6, #96	; 0x60
 80096b4:	f240 8138 	bls.w	8009928 <Allocate+0x2b8>
 80096b8:	f5b6 7fe0 	cmp.w	r6, #448	; 0x1c0
 80096bc:	f240 8145 	bls.w	800994a <Allocate+0x2da>
 80096c0:	f5b6 6f78 	cmp.w	r6, #3968	; 0xf80
 80096c4:	f240 8147 	bls.w	8009956 <Allocate+0x2e6>
 80096c8:	f5b6 5f7c 	cmp.w	r6, #16128	; 0x3f00
 80096cc:	f200 80ae 	bhi.w	800982c <Allocate+0x1bc>
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 80096d0:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80096d4:	4633      	mov	r3, r6
 80096d6:	f04f 0b03 	mov.w	fp, #3
 80096da:	f04f 0480 	mov.w	r4, #128	; 0x80
 80096de:	bf94      	ite	ls
 80096e0:	2500      	movls	r5, #0
 80096e2:	2501      	movhi	r5, #1
 80096e4:	e005      	b.n	80096f2 <Allocate+0x82>
 80096e6:	f04f 0b01 	mov.w	fp, #1
 80096ea:	4635      	mov	r5, r6
 80096ec:	2420      	movs	r4, #32
 80096ee:	2304      	movs	r3, #4
      size = 1;
 80096f0:	465e      	mov	r6, fp
  return (size + boundary - 1) & ~(boundary - 1);
 80096f2:	1e78      	subs	r0, r7, #1
 80096f4:	f1c7 0a00 	rsb	sl, r7, #0
    if (alignment > min_alignment)
 80096f8:	2908      	cmp	r1, #8
  return (size + boundary - 1) & ~(boundary - 1);
 80096fa:	4418      	add	r0, r3
 80096fc:	ea00 000a 	and.w	r0, r0, sl
    uptr needed_size = rounded_size + rz_size;
 8009700:	4420      	add	r0, r4
    if (alignment > min_alignment)
 8009702:	f200 80a0 	bhi.w	8009846 <Allocate+0x1d6>
    needed_size += rz_size; // manually adding the right red zone
 8009706:	1903      	adds	r3, r0, r4
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970c:	bf88      	it	hi
 800970e:	f045 0501 	orrhi.w	r5, r5, #1
 8009712:	2d00      	cmp	r5, #0
 8009714:	f040 8099 	bne.w	800984a <Allocate+0x1da>
    allocated = malloc(needed_size);
 8009718:	4618      	mov	r0, r3
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	f018 fb82 	bl	8021e24 <malloc>
  	if(ptr)
 8009720:	4680      	mov	r8, r0
 8009722:	2800      	cmp	r0, #0
 8009724:	f000 8091 	beq.w	800984a <Allocate+0x1da>
  		    if(pAFLfuzzer->allocs[i]==0)
 8009728:	4a9c      	ldr	r2, [pc, #624]	; (800999c <Allocate+0x32c>)
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	f8d2 1830 	ldr.w	r1, [r2, #2096]	; 0x830
 8009730:	2900      	cmp	r1, #0
 8009732:	f000 8116 	beq.w	8009962 <Allocate+0x2f2>
 8009736:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 800973a:	2900      	cmp	r1, #0
 800973c:	f000 8119 	beq.w	8009972 <Allocate+0x302>
 8009740:	f8d2 1838 	ldr.w	r1, [r2, #2104]	; 0x838
 8009744:	2900      	cmp	r1, #0
 8009746:	f000 8116 	beq.w	8009976 <Allocate+0x306>
 800974a:	f8d2 183c 	ldr.w	r1, [r2, #2108]	; 0x83c
 800974e:	2900      	cmp	r1, #0
 8009750:	f000 8113 	beq.w	800997a <Allocate+0x30a>
 8009754:	f8d2 1840 	ldr.w	r1, [r2, #2112]	; 0x840
 8009758:	2900      	cmp	r1, #0
 800975a:	f000 8110 	beq.w	800997e <Allocate+0x30e>
 800975e:	f8d2 1844 	ldr.w	r1, [r2, #2116]	; 0x844
 8009762:	2900      	cmp	r1, #0
 8009764:	f000 810d 	beq.w	8009982 <Allocate+0x312>
 8009768:	f8d2 1848 	ldr.w	r1, [r2, #2120]	; 0x848
 800976c:	2900      	cmp	r1, #0
 800976e:	f000 810a 	beq.w	8009986 <Allocate+0x316>
 8009772:	f8d2 184c 	ldr.w	r1, [r2, #2124]	; 0x84c
 8009776:	2900      	cmp	r1, #0
 8009778:	f000 8107 	beq.w	800998a <Allocate+0x31a>
 800977c:	f8d2 1850 	ldr.w	r1, [r2, #2128]	; 0x850
 8009780:	2900      	cmp	r1, #0
 8009782:	f000 8104 	beq.w	800998e <Allocate+0x31e>
 8009786:	f8d2 2854 	ldr.w	r2, [r2, #2132]	; 0x854
 800978a:	2a00      	cmp	r2, #0
 800978c:	f000 8101 	beq.w	8009992 <Allocate+0x322>
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009790:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8009794:	f102 50dc 	add.w	r0, r2, #461373440	; 0x1b800000
    if (*(uint8_t *)MEM_TO_SHADOW((uptr)allocated) == 0 ) {
 8009798:	7801      	ldrb	r1, [r0, #0]
 800979a:	2900      	cmp	r1, #0
 800979c:	d067      	beq.n	800986e <Allocate+0x1fe>
    uptr beg_plus_redzone = alloc_beg + rz_size;
 800979e:	4444      	add	r4, r8
  return (a & (alignment - 1)) == 0;
 80097a0:	3f01      	subs	r7, #1
    if (!IsAligned(user_beg, alignment))
 80097a2:	423c      	tst	r4, r7
 80097a4:	d007      	beq.n	80097b6 <Allocate+0x146>
  return (size + boundary - 1) & ~(boundary - 1);
 80097a6:	4427      	add	r7, r4
 80097a8:	ea07 0a0a 	and.w	sl, r7, sl
    m->from_memalign = user_beg != beg_plus_redzone;
 80097ac:	ebb4 050a 	subs.w	r5, r4, sl
      user_beg = RoundUpTo(user_beg, alignment);
 80097b0:	4654      	mov	r4, sl
    m->from_memalign = user_beg != beg_plus_redzone;
 80097b2:	bf18      	it	ne
 80097b4:	2501      	movne	r5, #1
    m->free_tid = kInvalidTid;
 80097b6:	062b      	lsls	r3, r5, #24
 80097b8:	f009 0203 	and.w	r2, r9, #3
    uptr chunk_beg = user_beg - kChunkHeaderSize;
 80097bc:	f1a4 0710 	sub.w	r7, r4, #16
    m->free_tid = kInvalidTid;
 80097c0:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
    if (alloc_beg != chunk_beg) {
 80097c4:	45b8      	cmp	r8, r7
    m->free_tid = kInvalidTid;
 80097c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    m->alloc_tid = alloc_tid;
 80097ca:	f854 2c10 	ldr.w	r2, [r4, #-16]
 80097ce:	f36f 221f 	bfc	r2, #8, #24
    m->free_tid = kInvalidTid;
 80097d2:	ea43 63cb 	orr.w	r3, r3, fp, lsl #27
    m->alloc_tid = alloc_tid;
 80097d6:	f844 2c10 	str.w	r2, [r4, #-16]
    m->free_tid = kInvalidTid;
 80097da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80097de:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80097e2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80097e6:	ea43 0302 	orr.w	r3, r3, r2
 80097ea:	f844 3c0c 	str.w	r3, [r4, #-12]
    if (alloc_beg != chunk_beg) {
 80097ee:	d004      	beq.n	80097fa <Allocate+0x18a>
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 80097f0:	4b6b      	ldr	r3, [pc, #428]	; (80099a0 <Allocate+0x330>)
      ((uptr *)alloc_beg)[1] = chunk_beg;
 80097f2:	f8c8 7004 	str.w	r7, [r8, #4]
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 80097f6:	f8c8 3000 	str.w	r3, [r8]
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 80097fa:	f026 4360 	bic.w	r3, r6, #3758096384	; 0xe0000000
 80097fe:	9a01      	ldr	r2, [sp, #4]
    if (size_rounded_down_to_granularity)
 8009800:	f036 0507 	bics.w	r5, r6, #7
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 8009804:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 8009808:	60bb      	str	r3, [r7, #8]
    if (size_rounded_down_to_granularity)
 800980a:	d163      	bne.n	80098d4 <Allocate+0x264>
          (uint8_t *)MEM_TO_SHADOW(user_beg + size_rounded_down_to_granularity);
 800980c:	4425      	add	r5, r4
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 800980e:	f006 0307 	and.w	r3, r6, #7
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009812:	08ed      	lsrs	r5, r5, #3
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 8009814:	f105 55dc 	add.w	r5, r5, #461373440	; 0x1b800000
 8009818:	702b      	strb	r3, [r5, #0]
    if (can_fill && McuASAN_FLAG_MAX_MALLOC_FILL_SIZE) {
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d14d      	bne.n	80098bc <Allocate+0x24c>
    *(uint8_t *)m = CHUNK_ALLOCATED;
 8009820:	2302      	movs	r3, #2
  }
 8009822:	4620      	mov	r0, r4
    *(uint8_t *)m = CHUNK_ALLOCATED;
 8009824:	703b      	strb	r3, [r7, #0]
  }
 8009826:	b005      	add	sp, #20
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (alignment > min_alignment)
 800982c:	2908      	cmp	r1, #8
 800982e:	d90c      	bls.n	800984a <Allocate+0x1da>
  return (size + boundary - 1) & ~(boundary - 1);
 8009830:	1e70      	subs	r0, r6, #1
 8009832:	f1c7 0a00 	rsb	sl, r7, #0
    uptr needed_size = rounded_size + rz_size;
 8009836:	2501      	movs	r5, #1
  return Min(Max(rz_log, RZSize2Log(min_rz)), RZSize2Log(max_rz));
 8009838:	f04f 0b03 	mov.w	fp, #3
  return (size + boundary - 1) & ~(boundary - 1);
 800983c:	4438      	add	r0, r7
  return 16 << rz_log;
 800983e:	2480      	movs	r4, #128	; 0x80
  return (size + boundary - 1) & ~(boundary - 1);
 8009840:	ea00 000a 	and.w	r0, r0, sl
    uptr needed_size = rounded_size + rz_size;
 8009844:	3080      	adds	r0, #128	; 0x80
      needed_size += alignment;
 8009846:	4438      	add	r0, r7
 8009848:	e75d      	b.n	8009706 <Allocate+0x96>
        return NULL;
 800984a:	2400      	movs	r4, #0
  }
 800984c:	4620      	mov	r0, r4
 800984e:	b005      	add	sp, #20
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uptr rounded_size = RoundUpTo(Max(size, kChunkHeader2Size), alignment);
 8009854:	2e04      	cmp	r6, #4
 8009856:	4633      	mov	r3, r6
 8009858:	f04f 0500 	mov.w	r5, #0
 800985c:	f04f 0b01 	mov.w	fp, #1
 8009860:	bf38      	it	cc
 8009862:	2304      	movcc	r3, #4
 8009864:	2420      	movs	r4, #32
 8009866:	e744      	b.n	80096f2 <Allocate+0x82>
      return 0;
 8009868:	2300      	movs	r3, #0
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	e719      	b.n	80096a2 <Allocate+0x32>
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 800986e:	f108 415c 	add.w	r1, r8, #3690987520	; 0xdc000000
 8009872:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8009876:	f080 808e 	bcs.w	8009996 <Allocate+0x326>
  uptr shadow_end = MEM_TO_SHADOW(
 800987a:	3b08      	subs	r3, #8
 800987c:	4949      	ldr	r1, [pc, #292]	; (80099a4 <Allocate+0x334>)
 800987e:	4443      	add	r3, r8
 8009880:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
  return (size + boundary - 1) & ~(boundary - 1);
 8009884:	f201 31fe 	addw	r1, r1, #1022	; 0x3fe
  uptr shadow_end = MEM_TO_SHADOW(
 8009888:	9302      	str	r3, [sp, #8]
  return (size + boundary - 1) & ~(boundary - 1);
 800988a:	4411      	add	r1, r2
 800988c:	4b46      	ldr	r3, [pc, #280]	; (80099a8 <Allocate+0x338>)
  return x & ~(boundary - 1);
 800988e:	9a02      	ldr	r2, [sp, #8]
  return (size + boundary - 1) & ~(boundary - 1);
 8009890:	4019      	ands	r1, r3
  return x & ~(boundary - 1);
 8009892:	4013      	ands	r3, r2
    if (page_beg >= page_end) {
 8009894:	4299      	cmp	r1, r3
 8009896:	d253      	bcs.n	8009940 <Allocate+0x2d0>
      if (page_beg != shadow_beg) {
 8009898:	4288      	cmp	r0, r1
 800989a:	d005      	beq.n	80098a8 <Allocate+0x238>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 800989c:	1a0a      	subs	r2, r1, r0
 800989e:	21fa      	movs	r1, #250	; 0xfa
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	f018 fadd 	bl	8021e60 <memset>
 80098a6:	9b03      	ldr	r3, [sp, #12]
      if (page_end != shadow_end) {
 80098a8:	9a02      	ldr	r2, [sp, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	f43f af77 	beq.w	800979e <Allocate+0x12e>
        memset((void *)page_end, value, shadow_end - page_end);
 80098b0:	1ad2      	subs	r2, r2, r3
 80098b2:	4618      	mov	r0, r3
 80098b4:	21fa      	movs	r1, #250	; 0xfa
 80098b6:	f018 fad3 	bl	8021e60 <memset>
 80098ba:	e770      	b.n	800979e <Allocate+0x12e>
      memset(res, McuASAN_FLAG_MALLOC_FILL_BYTE, fill_size);
 80098bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80098c0:	4632      	mov	r2, r6
 80098c2:	f04f 01be 	mov.w	r1, #190	; 0xbe
 80098c6:	4620      	mov	r0, r4
 80098c8:	bf28      	it	cs
 80098ca:	f44f 7200 	movcs.w	r2, #512	; 0x200
 80098ce:	f018 fac7 	bl	8021e60 <memset>
 80098d2:	e7a5      	b.n	8009820 <Allocate+0x1b0>
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80098d4:	f104 435c 	add.w	r3, r4, #3690987520	; 0xdc000000
 80098d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098dc:	d25b      	bcs.n	8009996 <Allocate+0x326>
  uptr shadow_end = MEM_TO_SHADOW(
 80098de:	f1a5 0808 	sub.w	r8, r5, #8
 80098e2:	4a30      	ldr	r2, [pc, #192]	; (80099a4 <Allocate+0x334>)
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80098e4:	08e0      	lsrs	r0, r4, #3
  uptr shadow_end = MEM_TO_SHADOW(
 80098e6:	eb08 0304 	add.w	r3, r8, r4
 80098ea:	eb02 08d3 	add.w	r8, r2, r3, lsr #3
  return (size + boundary - 1) & ~(boundary - 1);
 80098ee:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 80098f2:	4b2d      	ldr	r3, [pc, #180]	; (80099a8 <Allocate+0x338>)
 80098f4:	4402      	add	r2, r0
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80098f6:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
  return x & ~(boundary - 1);
 80098fa:	ea08 0a03 	and.w	sl, r8, r3
  return (size + boundary - 1) & ~(boundary - 1);
 80098fe:	401a      	ands	r2, r3
    if (page_beg >= page_end) {
 8009900:	4552      	cmp	r2, sl
 8009902:	d217      	bcs.n	8009934 <Allocate+0x2c4>
      if (page_beg != shadow_beg) {
 8009904:	4290      	cmp	r0, r2
 8009906:	d003      	beq.n	8009910 <Allocate+0x2a0>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009908:	1a12      	subs	r2, r2, r0
 800990a:	2100      	movs	r1, #0
 800990c:	f018 faa8 	bl	8021e60 <memset>
      if (page_end != shadow_end) {
 8009910:	45d0      	cmp	r8, sl
 8009912:	d005      	beq.n	8009920 <Allocate+0x2b0>
        memset((void *)page_end, value, shadow_end - page_end);
 8009914:	eba8 020a 	sub.w	r2, r8, sl
 8009918:	4650      	mov	r0, sl
 800991a:	2100      	movs	r1, #0
 800991c:	f018 faa0 	bl	8021e60 <memset>
    if (size != size_rounded_down_to_granularity ) {
 8009920:	42b5      	cmp	r5, r6
 8009922:	f43f af7a 	beq.w	800981a <Allocate+0x1aa>
 8009926:	e771      	b.n	800980c <Allocate+0x19c>
 8009928:	4633      	mov	r3, r6
 800992a:	2500      	movs	r5, #0
 800992c:	f04f 0b01 	mov.w	fp, #1
 8009930:	2420      	movs	r4, #32
 8009932:	e6de      	b.n	80096f2 <Allocate+0x82>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 8009934:	eba8 0200 	sub.w	r2, r8, r0
 8009938:	2100      	movs	r1, #0
 800993a:	f018 fa91 	bl	8021e60 <memset>
 800993e:	e7ef      	b.n	8009920 <Allocate+0x2b0>
 8009940:	1a12      	subs	r2, r2, r0
 8009942:	21fa      	movs	r1, #250	; 0xfa
 8009944:	f018 fa8c 	bl	8021e60 <memset>
 8009948:	e729      	b.n	800979e <Allocate+0x12e>
 800994a:	4633      	mov	r3, r6
 800994c:	2500      	movs	r5, #0
 800994e:	f04f 0b02 	mov.w	fp, #2
 8009952:	2440      	movs	r4, #64	; 0x40
 8009954:	e6cd      	b.n	80096f2 <Allocate+0x82>
 8009956:	4633      	mov	r3, r6
 8009958:	2500      	movs	r5, #0
 800995a:	f04f 0b03 	mov.w	fp, #3
 800995e:	2480      	movs	r4, #128	; 0x80
 8009960:	e6c7      	b.n	80096f2 <Allocate+0x82>
	int i=0;
 8009962:	4629      	mov	r1, r5
  		    	pAFLfuzzer->allocs[i] = ptr;
 8009964:	f641 220c 	movw	r2, #6668	; 0x1a0c
 8009968:	440a      	add	r2, r1
 800996a:	4910      	ldr	r1, [pc, #64]	; (80099ac <Allocate+0x33c>)
 800996c:	f841 8022 	str.w	r8, [r1, r2, lsl #2]
  			    break;
 8009970:	e70e      	b.n	8009790 <Allocate+0x120>
  		    i++;
 8009972:	2101      	movs	r1, #1
 8009974:	e7f6      	b.n	8009964 <Allocate+0x2f4>
 8009976:	2102      	movs	r1, #2
 8009978:	e7f4      	b.n	8009964 <Allocate+0x2f4>
 800997a:	2103      	movs	r1, #3
 800997c:	e7f2      	b.n	8009964 <Allocate+0x2f4>
 800997e:	2104      	movs	r1, #4
 8009980:	e7f0      	b.n	8009964 <Allocate+0x2f4>
 8009982:	2105      	movs	r1, #5
 8009984:	e7ee      	b.n	8009964 <Allocate+0x2f4>
 8009986:	2106      	movs	r1, #6
 8009988:	e7ec      	b.n	8009964 <Allocate+0x2f4>
 800998a:	2107      	movs	r1, #7
 800998c:	e7ea      	b.n	8009964 <Allocate+0x2f4>
 800998e:	2108      	movs	r1, #8
 8009990:	e7e8      	b.n	8009964 <Allocate+0x2f4>
 8009992:	2109      	movs	r1, #9
 8009994:	e7e6      	b.n	8009964 <Allocate+0x2f4>
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 8009996:	2007      	movs	r0, #7
 8009998:	f7ff fdb2 	bl	8009500 <FreeRTOSReportFailure>
 800999c:	24026000 	.word	0x24026000
 80099a0:	cc6e96b9 	.word	0xcc6e96b9
 80099a4:	1b800001 	.word	0x1b800001
 80099a8:	fffffc00 	.word	0xfffffc00
 80099ac:	24020000 	.word	0x24020000

080099b0 <ReportDoubleFree>:
void ReportDoubleFree(uptr addr) {
 80099b0:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r3}");
 80099b2:	b40f      	push	{r0, r1, r2, r3}
  FreeRTOSReportFailure(EX_ASAN_DOUBLE_FREE);
 80099b4:	2001      	movs	r0, #1
 80099b6:	f7ff fda3 	bl	8009500 <FreeRTOSReportFailure>
 80099ba:	bf00      	nop

080099bc <ReportFreeNotMalloced>:
void ReportFreeNotMalloced(uptr addr) {
 80099bc:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r3}");
 80099be:	b40f      	push	{r0, r1, r2, r3}
  FreeRTOSReportFailure(EX_ASAN_INVALID_FREE);
 80099c0:	2003      	movs	r0, #3
 80099c2:	f7ff fd9d 	bl	8009500 <FreeRTOSReportFailure>
 80099c6:	bf00      	nop

080099c8 <ReportInvalidFree>:
    if (chunk_state == CHUNK_QUARANTINE)
 80099c8:	2903      	cmp	r1, #3
void ReportInvalidFree(void *ptr, uint8_t chunk_state) {
 80099ca:	b508      	push	{r3, lr}
    if (chunk_state == CHUNK_QUARANTINE)
 80099cc:	d001      	beq.n	80099d2 <ReportInvalidFree+0xa>
      ReportFreeNotMalloced((uptr)ptr);
 80099ce:	f7ff fff5 	bl	80099bc <ReportFreeNotMalloced>
      ReportDoubleFree((uptr)ptr);
 80099d2:	f7ff ffed 	bl	80099b0 <ReportDoubleFree>
 80099d6:	bf00      	nop

080099d8 <Recycle>:
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80099d8:	4a4b      	ldr	r2, [pc, #300]	; (8009b08 <Recycle+0x130>)
void Recycle(AsanChunk *m) {
 80099da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80099dc:	4402      	add	r2, r0
  *(uint8_t*)m = CHUNK_AVAILABLE;
 80099de:	2300      	movs	r3, #0
 80099e0:	4606      	mov	r6, r0
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80099e2:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
  *(uint8_t*)m = CHUNK_AVAILABLE;
 80099e6:	f806 3b10 	strb.w	r3, [r6], #16
               RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 80099ea:	6883      	ldr	r3, [r0, #8]
 80099ec:	f3c3 031c 	ubfx	r3, r3, #0, #29
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 80099f0:	f080 8087 	bcs.w	8009b02 <Recycle+0x12a>
	   FastPoisonShadow(addr, size, value);
 80099f4:	4604      	mov	r4, r0
 80099f6:	3307      	adds	r3, #7
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80099f8:	08f1      	lsrs	r1, r6, #3
  return (size + boundary - 1) & ~(boundary - 1);
 80099fa:	4a44      	ldr	r2, [pc, #272]	; (8009b0c <Recycle+0x134>)
  uptr shadow_end = MEM_TO_SHADOW(
 80099fc:	f104 0708 	add.w	r7, r4, #8
 8009a00:	f023 0307 	bic.w	r3, r3, #7
  return (size + boundary - 1) & ~(boundary - 1);
 8009a04:	4d42      	ldr	r5, [pc, #264]	; (8009b10 <Recycle+0x138>)
 8009a06:	440a      	add	r2, r1
  uptr shadow_end = MEM_TO_SHADOW(
 8009a08:	443b      	add	r3, r7
 8009a0a:	4f42      	ldr	r7, [pc, #264]	; (8009b14 <Recycle+0x13c>)
  return (size + boundary - 1) & ~(boundary - 1);
 8009a0c:	402a      	ands	r2, r5
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009a0e:	f101 50dc 	add.w	r0, r1, #461373440	; 0x1b800000
  uptr shadow_end = MEM_TO_SHADOW(
 8009a12:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
  return x & ~(boundary - 1);
 8009a16:	403d      	ands	r5, r7
    if (page_beg >= page_end) {
 8009a18:	42aa      	cmp	r2, r5
 8009a1a:	d24d      	bcs.n	8009ab8 <Recycle+0xe0>
      if (page_beg != shadow_beg) {
 8009a1c:	4290      	cmp	r0, r2
 8009a1e:	d144      	bne.n	8009aaa <Recycle+0xd2>
      if (page_end != shadow_end) {
 8009a20:	42af      	cmp	r7, r5
 8009a22:	d138      	bne.n	8009a96 <Recycle+0xbe>
	if (m->from_memalign)
 8009a24:	79e3      	ldrb	r3, [r4, #7]
 8009a26:	f013 0201 	ands.w	r2, r3, #1
 8009a2a:	d133      	bne.n	8009a94 <Recycle+0xbc>
  return 16 << rz_log;
 8009a2c:	2010      	movs	r0, #16
	return (Beg(m) - RZLog2Size(m->rz_log));
 8009a2e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
  return 16 << rz_log;
 8009a32:	fa00 f303 	lsl.w	r3, r0, r3
  	if(ptr)
 8009a36:	1af0      	subs	r0, r6, r3
 8009a38:	d028      	beq.n	8009a8c <Recycle+0xb4>
  		    if(pAFLfuzzer->allocs[i]==ptr)
 8009a3a:	4b37      	ldr	r3, [pc, #220]	; (8009b18 <Recycle+0x140>)
 8009a3c:	f8d3 1830 	ldr.w	r1, [r3, #2096]	; 0x830
 8009a40:	4281      	cmp	r1, r0
 8009a42:	d043      	beq.n	8009acc <Recycle+0xf4>
 8009a44:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8009a48:	4290      	cmp	r0, r2
 8009a4a:	d03e      	beq.n	8009aca <Recycle+0xf2>
 8009a4c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8009a50:	4290      	cmp	r0, r2
 8009a52:	d048      	beq.n	8009ae6 <Recycle+0x10e>
 8009a54:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8009a58:	4290      	cmp	r0, r2
 8009a5a:	d04a      	beq.n	8009af2 <Recycle+0x11a>
 8009a5c:	f8d3 2840 	ldr.w	r2, [r3, #2112]	; 0x840
 8009a60:	4290      	cmp	r0, r2
 8009a62:	d048      	beq.n	8009af6 <Recycle+0x11e>
 8009a64:	f8d3 2844 	ldr.w	r2, [r3, #2116]	; 0x844
 8009a68:	4290      	cmp	r0, r2
 8009a6a:	d046      	beq.n	8009afa <Recycle+0x122>
 8009a6c:	f8d3 2848 	ldr.w	r2, [r3, #2120]	; 0x848
 8009a70:	4290      	cmp	r0, r2
 8009a72:	d03a      	beq.n	8009aea <Recycle+0x112>
 8009a74:	f8d3 284c 	ldr.w	r2, [r3, #2124]	; 0x84c
 8009a78:	4290      	cmp	r0, r2
 8009a7a:	d038      	beq.n	8009aee <Recycle+0x116>
 8009a7c:	f8d3 2850 	ldr.w	r2, [r3, #2128]	; 0x850
 8009a80:	4290      	cmp	r0, r2
 8009a82:	d03c      	beq.n	8009afe <Recycle+0x126>
 8009a84:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8009a88:	4298      	cmp	r0, r3
 8009a8a:	d02a      	beq.n	8009ae2 <Recycle+0x10a>
}
 8009a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  free(p);
 8009a90:	f018 b9d0 	b.w	8021e34 <free>
		while(1); // this is a special case that we do not support since we do not control the allocator, the code should not reach this point
 8009a94:	e7fe      	b.n	8009a94 <Recycle+0xbc>
        memset((void *)page_end, value, shadow_end - page_end);
 8009a96:	1b7a      	subs	r2, r7, r5
 8009a98:	21fa      	movs	r1, #250	; 0xfa
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f018 f9e0 	bl	8021e60 <memset>
	if (m->from_memalign)
 8009aa0:	79e3      	ldrb	r3, [r4, #7]
 8009aa2:	f013 0201 	ands.w	r2, r3, #1
 8009aa6:	d0c1      	beq.n	8009a2c <Recycle+0x54>
 8009aa8:	e7f4      	b.n	8009a94 <Recycle+0xbc>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009aaa:	1a12      	subs	r2, r2, r0
 8009aac:	21fa      	movs	r1, #250	; 0xfa
 8009aae:	f018 f9d7 	bl	8021e60 <memset>
      if (page_end != shadow_end) {
 8009ab2:	42af      	cmp	r7, r5
 8009ab4:	d0b6      	beq.n	8009a24 <Recycle+0x4c>
 8009ab6:	e7ee      	b.n	8009a96 <Recycle+0xbe>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 8009ab8:	1a3a      	subs	r2, r7, r0
 8009aba:	21fa      	movs	r1, #250	; 0xfa
 8009abc:	f018 f9d0 	bl	8021e60 <memset>
	if (m->from_memalign)
 8009ac0:	79e3      	ldrb	r3, [r4, #7]
 8009ac2:	f013 0201 	ands.w	r2, r3, #1
 8009ac6:	d0b1      	beq.n	8009a2c <Recycle+0x54>
 8009ac8:	e7e4      	b.n	8009a94 <Recycle+0xbc>
  		    i++;
 8009aca:	2201      	movs	r2, #1
  		    	pAFLfuzzer->allocs[i]= NULL;
 8009acc:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8009ad0:	2400      	movs	r4, #0
 8009ad2:	4912      	ldr	r1, [pc, #72]	; (8009b1c <Recycle+0x144>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
}
 8009ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  free(p);
 8009ade:	f018 b9a9 	b.w	8021e34 <free>
  		    i++;
 8009ae2:	2209      	movs	r2, #9
 8009ae4:	e7f2      	b.n	8009acc <Recycle+0xf4>
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	e7f0      	b.n	8009acc <Recycle+0xf4>
 8009aea:	2206      	movs	r2, #6
 8009aec:	e7ee      	b.n	8009acc <Recycle+0xf4>
 8009aee:	2207      	movs	r2, #7
 8009af0:	e7ec      	b.n	8009acc <Recycle+0xf4>
 8009af2:	2203      	movs	r2, #3
 8009af4:	e7ea      	b.n	8009acc <Recycle+0xf4>
 8009af6:	2204      	movs	r2, #4
 8009af8:	e7e8      	b.n	8009acc <Recycle+0xf4>
 8009afa:	2205      	movs	r2, #5
 8009afc:	e7e6      	b.n	8009acc <Recycle+0xf4>
 8009afe:	2208      	movs	r2, #8
 8009b00:	e7e4      	b.n	8009acc <Recycle+0xf4>
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 8009b02:	2007      	movs	r0, #7
 8009b04:	f7ff fcfc 	bl	8009500 <FreeRTOSReportFailure>
 8009b08:	dc000010 	.word	0xdc000010
 8009b0c:	1b8003ff 	.word	0x1b8003ff
 8009b10:	fffffc00 	.word	0xfffffc00
 8009b14:	1b800001 	.word	0x1b800001
 8009b18:	24026000 	.word	0x24026000
 8009b1c:	24020000 	.word	0x24020000

08009b20 <Deallocate>:
    if (p == 0) return;
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d05d      	beq.n	8009be0 <Deallocate+0xc0>
{
 8009b24:	b570      	push	{r4, r5, r6, lr}
  if(*state == CHUNK_ALLOCATED)
 8009b26:	f810 1c10 	ldrb.w	r1, [r0, #-16]
 8009b2a:	4604      	mov	r4, r0
    uptr chunk_beg = p - kChunkHeaderSize;
 8009b2c:	f1a0 0510 	sub.w	r5, r0, #16
  if(*state == CHUNK_ALLOCATED)
 8009b30:	2902      	cmp	r1, #2
 8009b32:	d15a      	bne.n	8009bea <Deallocate+0xca>
	  *state = CHUNK_QUARANTINE;
 8009b34:	2203      	movs	r2, #3
 8009b36:	f800 2c10 	strb.w	r2, [r0, #-16]
    if (m->alloc_type != alloc_type) {
 8009b3a:	79ea      	ldrb	r2, [r5, #7]
 8009b3c:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d003      	beq.n	8009b4c <Deallocate+0x2c>
      if (alloc_dealloc_mismatch) {
 8009b44:	4b2b      	ldr	r3, [pc, #172]	; (8009bf4 <Deallocate+0xd4>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d14a      	bne.n	8009be2 <Deallocate+0xc2>
      uptr size_to_fill = m->user_requested_size;
 8009b4c:	68aa      	ldr	r2, [r5, #8]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009b4e:	2155      	movs	r1, #85	; 0x55
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 8009b50:	4b29      	ldr	r3, [pc, #164]	; (8009bf8 <Deallocate+0xd8>)
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009b52:	4620      	mov	r0, r4
      uptr size_to_fill = m->user_requested_size;
 8009b54:	f3c2 021c 	ubfx	r2, r2, #0, #29
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 8009b58:	681b      	ldr	r3, [r3, #0]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	bf28      	it	cs
 8009b5e:	461a      	movcs	r2, r3
 8009b60:	f018 f97e 	bl	8021e60 <memset>
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009b64:	68ab      	ldr	r3, [r5, #8]
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 8009b66:	f104 425c 	add.w	r2, r4, #3690987520	; 0xdc000000
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009b6a:	f3c3 031c 	ubfx	r3, r3, #0, #29
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 8009b6e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
  return (size + boundary - 1) & ~(boundary - 1);
 8009b72:	f103 0307 	add.w	r3, r3, #7
 8009b76:	f023 0307 	bic.w	r3, r3, #7
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 8009b7a:	d238      	bcs.n	8009bee <Deallocate+0xce>
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009b7c:	08e1      	lsrs	r1, r4, #3
  uptr shadow_end = MEM_TO_SHADOW(
 8009b7e:	3c08      	subs	r4, #8
  return (size + boundary - 1) & ~(boundary - 1);
 8009b80:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <Deallocate+0xdc>)
  uptr shadow_end = MEM_TO_SHADOW(
 8009b82:	441c      	add	r4, r3
 8009b84:	4b1e      	ldr	r3, [pc, #120]	; (8009c00 <Deallocate+0xe0>)
  return (size + boundary - 1) & ~(boundary - 1);
 8009b86:	4e1f      	ldr	r6, [pc, #124]	; (8009c04 <Deallocate+0xe4>)
 8009b88:	440a      	add	r2, r1
  uptr shadow_end = MEM_TO_SHADOW(
 8009b8a:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 8009b8e:	f101 50dc 	add.w	r0, r1, #461373440	; 0x1b800000
  return (size + boundary - 1) & ~(boundary - 1);
 8009b92:	4032      	ands	r2, r6
  return x & ~(boundary - 1);
 8009b94:	4026      	ands	r6, r4
    if (page_beg >= page_end) {
 8009b96:	42b2      	cmp	r2, r6
 8009b98:	d219      	bcs.n	8009bce <Deallocate+0xae>
      if (page_beg != shadow_beg) {
 8009b9a:	4290      	cmp	r0, r2
 8009b9c:	d110      	bne.n	8009bc0 <Deallocate+0xa0>
      if (page_end != shadow_end) {
 8009b9e:	42b4      	cmp	r4, r6
 8009ba0:	d104      	bne.n	8009bac <Deallocate+0x8c>
    Recycle(m);
 8009ba2:	4628      	mov	r0, r5
 }
 8009ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Recycle(m);
 8009ba8:	f7ff bf16 	b.w	80099d8 <Recycle>
        memset((void *)page_end, value, shadow_end - page_end);
 8009bac:	1ba2      	subs	r2, r4, r6
 8009bae:	4630      	mov	r0, r6
 8009bb0:	21fd      	movs	r1, #253	; 0xfd
 8009bb2:	f018 f955 	bl	8021e60 <memset>
    Recycle(m);
 8009bb6:	4628      	mov	r0, r5
 }
 8009bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Recycle(m);
 8009bbc:	f7ff bf0c 	b.w	80099d8 <Recycle>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009bc0:	1a12      	subs	r2, r2, r0
 8009bc2:	21fd      	movs	r1, #253	; 0xfd
 8009bc4:	f018 f94c 	bl	8021e60 <memset>
      if (page_end != shadow_end) {
 8009bc8:	42b4      	cmp	r4, r6
 8009bca:	d0ea      	beq.n	8009ba2 <Deallocate+0x82>
 8009bcc:	e7ee      	b.n	8009bac <Deallocate+0x8c>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 8009bce:	1a22      	subs	r2, r4, r0
 8009bd0:	21fd      	movs	r1, #253	; 0xfd
 8009bd2:	f018 f945 	bl	8021e60 <memset>
    Recycle(m);
 8009bd6:	4628      	mov	r0, r5
 }
 8009bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Recycle(m);
 8009bdc:	f7ff befc 	b.w	80099d8 <Recycle>
 8009be0:	4770      	bx	lr
  __asm volatile("push {r0-r3}");
 8009be2:	b40f      	push	{r0, r1, r2, r3}
  FreeRTOSReportFailure(EX_ASAN_REALLOC_MISMATCH);
 8009be4:	2006      	movs	r0, #6
 8009be6:	f7ff fc8b 	bl	8009500 <FreeRTOSReportFailure>
	  ReportInvalidFree(ptr, *state);
 8009bea:	f7ff feed 	bl	80099c8 <ReportInvalidFree>
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 8009bee:	2007      	movs	r0, #7
 8009bf0:	f7ff fc86 	bl	8009500 <FreeRTOSReportFailure>
 8009bf4:	24008008 	.word	0x24008008
 8009bf8:	2400800c 	.word	0x2400800c
 8009bfc:	1b8003ff 	.word	0x1b8003ff
 8009c00:	1b800001 	.word	0x1b800001
 8009c04:	fffffc00 	.word	0xfffffc00

08009c08 <vPortResetPrivilege>:
    if( xRunningPrivileged == pdFALSE )
 8009c08:	b100      	cbz	r0, 8009c0c <vPortResetPrivilege+0x4>
}
 8009c0a:	4770      	bx	lr
        portRESET_PRIVILEGE();
 8009c0c:	f000 b858 	b.w	8009cc0 <vResetPrivilege>

08009c10 <vPortEnableVFP>:
    __asm volatile
 8009c10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c20 <vPortEnableVFP+0x10>
 8009c14:	6801      	ldr	r1, [r0, #0]
 8009c16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c1a:	6001      	str	r1, [r0, #0]
 8009c1c:	4770      	bx	lr
 8009c1e:	0000      	.short	0x0000
 8009c20:	e000ed88 	.word	0xe000ed88

08009c24 <vPortEnterCritical>:
{
 8009c24:	b508      	push	{r3, lr}
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009c26:	f7ff f9f5 	bl	8009014 <xPortRaisePrivilege>
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8009c3a:	4a04      	ldr	r2, [pc, #16]	; (8009c4c <vPortEnterCritical+0x28>)
 8009c3c:	6813      	ldr	r3, [r2, #0]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	6013      	str	r3, [r2, #0]
}
 8009c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vPortResetPrivilege( xRunningPrivileged );
 8009c46:	f7ff bfdf 	b.w	8009c08 <vPortResetPrivilege>
 8009c4a:	bf00      	nop
 8009c4c:	24008014 	.word	0x24008014

08009c50 <vPortExitCritical>:
{
 8009c50:	b508      	push	{r3, lr}
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009c52:	f7ff f9df 	bl	8009014 <xPortRaisePrivilege>
    configASSERT( uxCriticalNesting );
 8009c56:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <vPortExitCritical+0x30>)
 8009c58:	6813      	ldr	r3, [r2, #0]
 8009c5a:	b943      	cbnz	r3, 8009c6e <vPortExitCritical+0x1e>
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	e7fe      	b.n	8009c6c <vPortExitCritical+0x1c>
    uxCriticalNesting--;
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009c72:	b90b      	cbnz	r3, 8009c78 <vPortExitCritical+0x28>
    __asm volatile
 8009c74:	f383 8811 	msr	BASEPRI, r3
}
 8009c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vPortResetPrivilege( xRunningPrivileged );
 8009c7c:	f7ff bfc4 	b.w	8009c08 <vPortResetPrivilege>
 8009c80:	24008014 	.word	0x24008014

08009c84 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c84:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009c88:	2100      	movs	r1, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8a:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <vPortSetupTimerInterrupt+0x20>)
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c8c:	6111      	str	r1, [r2, #16]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c8e:	4806      	ldr	r0, [pc, #24]	; (8009ca8 <vPortSetupTimerInterrupt+0x24>)
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c90:	6191      	str	r1, [r2, #24]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 8009c92:	2107      	movs	r1, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	fba0 0303 	umull	r0, r3, r0, r3
 8009c9a:	099b      	lsrs	r3, r3, #6
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 8009ca0:	6111      	str	r1, [r2, #16]
}
 8009ca2:	4770      	bx	lr
 8009ca4:	24008000 	.word	0x24008000
 8009ca8:	10624dd3 	.word	0x10624dd3
 8009cac:	00000000 	.word	0x00000000

08009cb0 <xIsPrivileged>:
    __asm volatile
 8009cb0:	f3ef 8014 	mrs	r0, CONTROL
 8009cb4:	f010 0f01 	tst.w	r0, #1
 8009cb8:	bf14      	ite	ne
 8009cba:	2000      	movne	r0, #0
 8009cbc:	2001      	moveq	r0, #1
 8009cbe:	4770      	bx	lr

08009cc0 <vResetPrivilege>:
    __asm volatile
 8009cc0:	f3ef 8014 	mrs	r0, CONTROL
 8009cc4:	f040 0001 	orr.w	r0, r0, #1
 8009cc8:	f380 8814 	msr	CONTROL, r0
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop

08009cd0 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009cd0:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cd4:	2b0f      	cmp	r3, #15
 8009cd6:	d90e      	bls.n	8009cf6 <vPortValidateInterruptPriority+0x26>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cd8:	4911      	ldr	r1, [pc, #68]	; (8009d20 <vPortValidateInterruptPriority+0x50>)
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cda:	4a12      	ldr	r2, [pc, #72]	; (8009d24 <vPortValidateInterruptPriority+0x54>)
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cdc:	5c5b      	ldrb	r3, [r3, r1]
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d908      	bls.n	8009cf6 <vPortValidateInterruptPriority+0x26>
    __asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	e7fe      	b.n	8009cf4 <vPortValidateInterruptPriority+0x24>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cfa:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <vPortValidateInterruptPriority+0x58>)
 8009cfc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d908      	bls.n	8009d1c <vPortValidateInterruptPriority+0x4c>
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	e7fe      	b.n	8009d1a <vPortValidateInterruptPriority+0x4a>
    }
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	e000e3f0 	.word	0xe000e3f0
 8009d24:	2401001d 	.word	0x2401001d
 8009d28:	24010020 	.word	0x24010020

08009d2c <__sanitizer_cov_trace_pc>:

	uint16_t guard;

	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);

	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009d2c:	4b15      	ldr	r3, [pc, #84]	; (8009d84 <__sanitizer_cov_trace_pc+0x58>)
 8009d2e:	f503 40c0 	add.w	r0, r3, #24576	; 0x6000
{
 8009d32:	b500      	push	{lr}
	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009d34:	f8b0 2858 	ldrh.w	r2, [r0, #2136]	; 0x858
	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);
 8009d38:	f3ce 0e0c 	ubfx	lr, lr, #0, #13
	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009d3c:	ea8e 0202 	eor.w	r2, lr, r2
	bitmapindex &=AFL_BITMAP_MASK;
 8009d40:	f3c2 020c 	ubfx	r2, r2, #0, #13

	if(!paflbitmap[bitmapindex])
 8009d44:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8009d48:	b969      	cbnz	r1, 8009d66 <__sanitizer_cov_trace_pc+0x3a>
	{
		  AFLfuzzer.indexdif++; // since we need to start the index in 1 the first tuple is empty,
 8009d4a:	f8b0 1862 	ldrh.w	r1, [r0, #2146]	; 0x862
 8009d4e:	3101      	adds	r1, #1
 8009d50:	b289      	uxth	r1, r1
 8009d52:	f8a0 1862 	strh.w	r1, [r0, #2146]	; 0x862
		              // we will correct the pointer
		  	  	  	  // when sending the data to the PC
		  paflbitmap[bitmapindex] =  AFLfuzzer.indexdif;
 8009d56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  AFLfuzzer.afldiff[AFLfuzzer.indexdif].index = bitmapindex;
 8009d5a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009d5e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]

	 }
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009d62:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8009d66:	f501 5180 	add.w	r1, r1, #4096	; 0x1000

	 AFLfuzzer.previousGuard = guard>>1;
 8009d6a:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009d6e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	 AFLfuzzer.previousGuard = guard>>1;
 8009d72:	f8a0 e858 	strh.w	lr, [r0, #2136]	; 0x858
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009d76:	885a      	ldrh	r2, [r3, #2]
 8009d78:	3201      	adds	r2, #1
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	805a      	strh	r2, [r3, #2]



}
 8009d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d82:	bf00      	nop
 8009d84:	24020000 	.word	0x24020000

08009d88 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 8009d88:	b508      	push	{r3, lr}
	/* Start the MPU demo. */
	vStartMPUDemo();
 8009d8a:	f016 fd55 	bl	8020838 <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 8009d8e:	f7f9 fb5d 	bl	800344c <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009d92:	e7fe      	b.n	8009d92 <app_main+0xa>

08009d94 <vApplicationStackOverflowHook>:
{
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009d94:	e7fe      	b.n	8009d94 <vApplicationStackOverflowHook>
 8009d96:	bf00      	nop

08009d98 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void )
{
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009d98:	e7fe      	b.n	8009d98 <vApplicationMallocFailedHook>
 8009d9a:	bf00      	nop

08009d9c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009d9c:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <vApplicationGetIdleTaskMemory+0x18>)
{
 8009d9e:	b410      	push	{r4}
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009da0:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009da6:	4c04      	ldr	r4, [pc, #16]	; (8009db8 <vApplicationGetIdleTaskMemory+0x1c>)
 8009da8:	600c      	str	r4, [r1, #0]
}
 8009daa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009dae:	6013      	str	r3, [r2, #0]
}
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	24011424 	.word	0x24011424
 8009db8:	24010024 	.word	0x24010024

08009dbc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <vApplicationGetTimerTaskMemory+0x18>)
{
 8009dbe:	b410      	push	{r4}
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009dc0:	6003      	str	r3, [r0, #0]
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8009dc6:	4c04      	ldr	r4, [pc, #16]	; (8009dd8 <vApplicationGetTimerTaskMemory+0x1c>)
 8009dc8:	600c      	str	r4, [r1, #0]
}
 8009dca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009dce:	6013      	str	r3, [r2, #0]
}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	24011568 	.word	0x24011568
 8009dd8:	24011024 	.word	0x24011024

08009ddc <vHandleMemoryFault>:

}


portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 8009ddc:	b570      	push	{r4, r5, r6, lr}

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009dde:	4d13      	ldr	r5, [pc, #76]	; (8009e2c <vHandleMemoryFault+0x50>)
{
 8009de0:	b084      	sub	sp, #16
 8009de2:	4604      	mov	r4, r0
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009de4:	f7fe fb86 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 8009de8:	f8d5 3870 	ldr.w	r3, [r5, #2160]	; 0x870
 8009dec:	4283      	cmp	r3, r0
 8009dee:	d000      	beq.n	8009df2 <vHandleMemoryFault+0x16>

  }
  else
  {
	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 8009df0:	e7fe      	b.n	8009df0 <vHandleMemoryFault+0x14>
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009df2:	69a1      	ldr	r1, [r4, #24]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009df4:	2600      	movs	r6, #0
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009df6:	ab03      	add	r3, sp, #12
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 8009df8:	2208      	movs	r2, #8
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009dfa:	f8c5 1868 	str.w	r1, [r5, #2152]	; 0x868
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009dfe:	4631      	mov	r1, r6
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	2303      	movs	r3, #3
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 8009e04:	f885 2874 	strb.w	r2, [r5, #2164]	; 0x874
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009e08:	2202      	movs	r2, #2
 8009e0a:	f8d5 086c 	ldr.w	r0, [r5, #2156]	; 0x86c
 8009e0e:	9600      	str	r6, [sp, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009e10:	9603      	str	r6, [sp, #12]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009e12:	f7f9 fca1 	bl	8003758 <xTaskGenericNotifyFromISR>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009e16:	4632      	mov	r2, r6
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4805      	ldr	r0, [pc, #20]	; (8009e30 <vHandleMemoryFault+0x54>)
 8009e1c:	f002 fdf2 	bl	800ca04 <HAL_GPIO_WritePin>
	vTaskDelete(AFLfuzzer.xTaskTarget);
 8009e20:	f8d5 0870 	ldr.w	r0, [r5, #2160]	; 0x870
 8009e24:	f7fe f988 	bl	8008138 <MPU_vTaskDelete>
	  }

  }


}
 8009e28:	b004      	add	sp, #16
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	24026000 	.word	0x24026000
 8009e30:	58020400 	.word	0x58020400

08009e34 <vNMI_Handler>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	4d13      	ldr	r5, [pc, #76]	; (8009e84 <vNMI_Handler+0x50>)
 8009e38:	b084      	sub	sp, #16
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	f7fe fb5a 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 8009e40:	f8d5 3870 	ldr.w	r3, [r5, #2160]	; 0x870
 8009e44:	4283      	cmp	r3, r0
 8009e46:	d000      	beq.n	8009e4a <vNMI_Handler+0x16>
 8009e48:	e7fe      	b.n	8009e48 <vNMI_Handler+0x14>
 8009e4a:	69a1      	ldr	r1, [r4, #24]
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	2208      	movs	r2, #8
 8009e52:	f8c5 1868 	str.w	r1, [r5, #2152]	; 0x868
 8009e56:	4631      	mov	r1, r6
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	f885 2874 	strb.w	r2, [r5, #2164]	; 0x874
 8009e60:	2202      	movs	r2, #2
 8009e62:	f8d5 086c 	ldr.w	r0, [r5, #2156]	; 0x86c
 8009e66:	9600      	str	r6, [sp, #0]
 8009e68:	9603      	str	r6, [sp, #12]
 8009e6a:	f7f9 fc75 	bl	8003758 <xTaskGenericNotifyFromISR>
 8009e6e:	4632      	mov	r2, r6
 8009e70:	2101      	movs	r1, #1
 8009e72:	4805      	ldr	r0, [pc, #20]	; (8009e88 <vNMI_Handler+0x54>)
 8009e74:	f002 fdc6 	bl	800ca04 <HAL_GPIO_WritePin>
 8009e78:	f8d5 0870 	ldr.w	r0, [r5, #2160]	; 0x870
 8009e7c:	f7fe f95c 	bl	8008138 <MPU_vTaskDelete>
 8009e80:	b004      	add	sp, #16
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	24026000 	.word	0x24026000
 8009e88:	58020400 	.word	0x58020400

08009e8c <vHardFault_Handler>:

}


portDONT_DISCARD void vHardFault_Handler( uint32_t * pulFaultStackAddress )
{
 8009e8c:	b508      	push	{r3, lr}

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

  //this exception is not recoverable
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009e8e:	f7fe fb31 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 8009e92:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <vHardFault_Handler+0x14>)
 8009e94:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d000      	beq.n	8009e9e <vHardFault_Handler+0x12>
	  }

  }


}
 8009e9c:	bd08      	pop	{r3, pc}
	  for( ; ; )
 8009e9e:	e7fe      	b.n	8009e9e <vHardFault_Handler+0x12>
 8009ea0:	24026000 	.word	0x24026000

08009ea4 <vBusFault_Handler>:


portDONT_DISCARD void vBusFault_Handler( uint32_t * pulFaultStackAddress )
{
 8009ea4:	b570      	push	{r4, r5, r6, lr}

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;



  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009ea6:	4d13      	ldr	r5, [pc, #76]	; (8009ef4 <vBusFault_Handler+0x50>)
{
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	4604      	mov	r4, r0
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009eac:	f7fe fb22 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 8009eb0:	f8d5 3870 	ldr.w	r3, [r5, #2160]	; 0x870
 8009eb4:	4283      	cmp	r3, r0
 8009eb6:	d000      	beq.n	8009eba <vBusFault_Handler+0x16>
	  deleteTask();
  }
  else
  {
	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 8009eb8:	e7fe      	b.n	8009eb8 <vBusFault_Handler+0x14>
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009eba:	69a1      	ldr	r1, [r4, #24]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009ebc:	2600      	movs	r6, #0
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009ebe:	ab03      	add	r3, sp, #12
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 8009ec0:	220b      	movs	r2, #11
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009ec2:	f8c5 1868 	str.w	r1, [r5, #2152]	; 0x868
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	2303      	movs	r3, #3
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 8009ecc:	f885 2874 	strb.w	r2, [r5, #2164]	; 0x874
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f8d5 086c 	ldr.w	r0, [r5, #2156]	; 0x86c
 8009ed6:	9600      	str	r6, [sp, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009ed8:	9603      	str	r6, [sp, #12]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009eda:	f7f9 fc3d 	bl	8003758 <xTaskGenericNotifyFromISR>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009ede:	4632      	mov	r2, r6
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <vBusFault_Handler+0x54>)
 8009ee4:	f002 fd8e 	bl	800ca04 <HAL_GPIO_WritePin>
	vTaskDelete(AFLfuzzer.xTaskTarget);
 8009ee8:	f8d5 0870 	ldr.w	r0, [r5, #2160]	; 0x870
 8009eec:	f7fe f924 	bl	8008138 <MPU_vTaskDelete>
	  }

  }


}
 8009ef0:	b004      	add	sp, #16
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	24026000 	.word	0x24026000
 8009ef8:	58020400 	.word	0x58020400

08009efc <vUsageFault_Handler>:

portDONT_DISCARD void vUsageFault_Handler( uint32_t * pulFaultStackAddress )
{
 8009efc:	b530      	push	{r4, r5, lr}

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009efe:	4c22      	ldr	r4, [pc, #136]	; (8009f88 <vUsageFault_Handler+0x8c>)
{
 8009f00:	b085      	sub	sp, #20
 8009f02:	4605      	mov	r5, r0
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009f04:	f7fe faf6 	bl	80084f4 <MPU_xTaskGetCurrentTaskHandle>
 8009f08:	f8d4 3870 	ldr.w	r3, [r4, #2160]	; 0x870
 8009f0c:	4283      	cmp	r3, r0
 8009f0e:	d000      	beq.n	8009f12 <vUsageFault_Handler+0x16>

  }
  else
  {
	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 8009f10:	e7fe      	b.n	8009f10 <vUsageFault_Handler+0x14>
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 8009f12:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <vUsageFault_Handler+0x90>)
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009f14:	69a9      	ldr	r1, [r5, #24]
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 8009f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009f18:	f8c4 1868 	str.w	r1, [r4, #2152]	; 0x868
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 8009f1c:	0190      	lsls	r0, r2, #6
 8009f1e:	d506      	bpl.n	8009f2e <vUsageFault_Handler+0x32>
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 8009f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 8009f22:	2109      	movs	r1, #9
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 8009f24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 8009f28:	f884 1874 	strb.w	r1, [r4, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 8009f2c:	629a      	str	r2, [r3, #40]	; 0x28
	  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk)
 8009f2e:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <vUsageFault_Handler+0x90>)
 8009f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f32:	01d1      	lsls	r1, r2, #7
 8009f34:	d506      	bpl.n	8009f44 <vUsageFault_Handler+0x48>
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 8009f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 8009f38:	210a      	movs	r1, #10
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 8009f3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 8009f3e:	f884 1874 	strb.w	r1, [r4, #2164]	; 0x874
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28
	  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk)
 8009f44:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <vUsageFault_Handler+0x90>)
 8009f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f48:	03d2      	lsls	r2, r2, #15
 8009f4a:	d506      	bpl.n	8009f5a <vUsageFault_Handler+0x5e>
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 8009f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 8009f4e:	210c      	movs	r1, #12
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 8009f50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 8009f54:	f884 1874 	strb.w	r1, [r4, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 8009f58:	629a      	str	r2, [r3, #40]	; 0x28
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009f5a:	2500      	movs	r5, #0
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009f5c:	a903      	add	r1, sp, #12
 8009f5e:	2303      	movs	r3, #3
 8009f60:	2202      	movs	r2, #2
 8009f62:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009f66:	9503      	str	r5, [sp, #12]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009f68:	e9cd 5100 	strd	r5, r1, [sp]
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f9 fbf3 	bl	8003758 <xTaskGenericNotifyFromISR>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009f72:	462a      	mov	r2, r5
 8009f74:	2101      	movs	r1, #1
 8009f76:	4806      	ldr	r0, [pc, #24]	; (8009f90 <vUsageFault_Handler+0x94>)
 8009f78:	f002 fd44 	bl	800ca04 <HAL_GPIO_WritePin>
	vTaskDelete(AFLfuzzer.xTaskTarget);
 8009f7c:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 8009f80:	f7fe f8da 	bl	8008138 <MPU_vTaskDelete>
	  }

  }


}
 8009f84:	b005      	add	sp, #20
 8009f86:	bd30      	pop	{r4, r5, pc}
 8009f88:	24026000 	.word	0x24026000
 8009f8c:	e000ed00 	.word	0xe000ed00
 8009f90:	58020400 	.word	0x58020400

08009f94 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 8009f94:	f01e 0f04 	tst.w	lr, #4
 8009f98:	bf0c      	ite	eq
 8009f9a:	f3ef 8008 	mrseq	r0, MSP
 8009f9e:	f3ef 8009 	mrsne	r0, PSP
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	f382 8814 	msr	CONTROL, r2
 8009faa:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009fb0 <handler_address_const>
 8009fae:	4708      	bx	r1

08009fb0 <handler_address_const>:
 8009fb0:	08009ddd 	.word	0x08009ddd

08009fb4 <NMI_Handler>:
  */
void NMI_Handler( void ) __attribute__ (( naked ));
void NMI_Handler(void)
{

		__asm volatile
 8009fb4:	f01e 0f04 	tst.w	lr, #4
 8009fb8:	bf0c      	ite	eq
 8009fba:	f3ef 8008 	mrseq	r0, MSP
 8009fbe:	f3ef 8009 	mrsne	r0, PSP
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	f382 8814 	msr	CONTROL, r2
 8009fca:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009fd0 <handler_address_const1>
 8009fce:	4708      	bx	r1

08009fd0 <handler_address_const1>:
 8009fd0:	08009e35 	.word	0x08009e35

08009fd4 <HardFault_Handler>:
  */
void HardFault_Handler( void ) __attribute__ (( naked ));
void HardFault_Handler(void)
{

		__asm volatile
 8009fd4:	f01e 0f04 	tst.w	lr, #4
 8009fd8:	bf0c      	ite	eq
 8009fda:	f3ef 8008 	mrseq	r0, MSP
 8009fde:	f3ef 8009 	mrsne	r0, PSP
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	f382 8814 	msr	CONTROL, r2
 8009fea:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009ff0 <handler_address_const2>
 8009fee:	4708      	bx	r1

08009ff0 <handler_address_const2>:
 8009ff0:	08009e8d 	.word	0x08009e8d

08009ff4 <BusFault_Handler>:
  */
void BusFault_Handler( void ) __attribute__ (( naked ));
void BusFault_Handler(void)
{

		__asm volatile
 8009ff4:	f01e 0f04 	tst.w	lr, #4
 8009ff8:	bf0c      	ite	eq
 8009ffa:	f3ef 8008 	mrseq	r0, MSP
 8009ffe:	f3ef 8009 	mrsne	r0, PSP
 800a002:	f04f 0200 	mov.w	r2, #0
 800a006:	f382 8814 	msr	CONTROL, r2
 800a00a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a010 <handler_address_const3>
 800a00e:	4708      	bx	r1

0800a010 <handler_address_const3>:
 800a010:	08009ea5 	.word	0x08009ea5

0800a014 <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void ) __attribute__ (( naked ));
void UsageFault_Handler(void)
{
		__asm volatile
 800a014:	f01e 0f04 	tst.w	lr, #4
 800a018:	bf0c      	ite	eq
 800a01a:	f3ef 8008 	mrseq	r0, MSP
 800a01e:	f3ef 8009 	mrsne	r0, PSP
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f382 8814 	msr	CONTROL, r2
 800a02a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a030 <handler_address_const5>
 800a02e:	4708      	bx	r1

0800a030 <handler_address_const5>:
 800a030:	08009efd 	.word	0x08009efd

0800a034 <checkCRC>:
//extern UART_HandleTypeDef huart3;



bool checkCRC(RingBuffer_t *input)
{
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4605      	mov	r5, r0
	uint32_t numberwords;
	uint32_t *crcreceived;

	numberwords = (input->u32available-4)/4;

	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a038:	4808      	ldr	r0, [pc, #32]	; (800a05c <checkCRC+0x28>)
	numberwords = (input->u32available-4)/4;
 800a03a:	f8d5 4808 	ldr.w	r4, [r5, #2056]	; 0x808
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a03e:	4629      	mov	r1, r5
	numberwords = (input->u32available-4)/4;
 800a040:	3c04      	subs	r4, #4
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a042:	08a2      	lsrs	r2, r4, #2

	uwCRCValue = ~uwCRCValue;
	crcreceived = (uint32_t *)(input->uxBuffer);

	if (crcreceived[numberwords] == uwCRCValue)
 800a044:	f024 0403 	bic.w	r4, r4, #3
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a048:	f000 fec2 	bl	800add0 <HAL_CRC_Calculate>
	uwCRCValue = ~uwCRCValue;
 800a04c:	43c0      	mvns	r0, r0
	if (crcreceived[numberwords] == uwCRCValue)
 800a04e:	592b      	ldr	r3, [r5, r4]
	{
		return true;
	}
	return false;

}
 800a050:	1a18      	subs	r0, r3, r0
 800a052:	fab0 f080 	clz	r0, r0
 800a056:	0940      	lsrs	r0, r0, #5
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	bf00      	nop
 800a05c:	240116ac 	.word	0x240116ac

0800a060 <FuzzingInputHandler>:
}



void FuzzingInputHandler(uint8_t* Buf, uint32_t *Len)
{
 800a060:	b530      	push	{r4, r5, lr}
	  uint8_t error;


	  error = 0;

	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a062:	4c4b      	ldr	r4, [pc, #300]	; (800a190 <FuzzingInputHandler+0x130>)
	  xHigherPriorityTaskWoken = pdFALSE;
 800a064:	2300      	movs	r3, #0
{
 800a066:	b085      	sub	sp, #20
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a068:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
	  xHigherPriorityTaskWoken = pdFALSE;
 800a06c:	9303      	str	r3, [sp, #12]
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a06e:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
 800a072:	2a00      	cmp	r2, #0
 800a074:	d165      	bne.n	800a142 <FuzzingInputHandler+0xe2>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a07a:	d92d      	bls.n	800a0d8 <FuzzingInputHandler+0x78>
	RingClear(&AFLfuzzer.inputAFL);
 800a07c:	4844      	ldr	r0, [pc, #272]	; (800a190 <FuzzingInputHandler+0x130>)
	AFLfuzzer.inputLength = 0;
 800a07e:	2500      	movs	r5, #0
	RingClear(&AFLfuzzer.inputAFL);
 800a080:	f000 f8c6 	bl	800a210 <RingClear>
	AFLfuzzer.aflheader[0] = faultcode;
 800a084:	2107      	movs	r1, #7
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 800a086:	2304      	movs	r3, #4
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a088:	2202      	movs	r2, #2
	AFLfuzzer.aflheader[0] = faultcode;
 800a08a:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a08e:	4841      	ldr	r0, [pc, #260]	; (800a194 <FuzzingInputHandler+0x134>)
 800a090:	4941      	ldr	r1, [pc, #260]	; (800a198 <FuzzingInputHandler+0x138>)
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 800a092:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
	AFLfuzzer.inputLength = 0;
 800a096:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
	AFLfuzzer.inputLengthpadded = 0;
 800a09a:	f8c4 5828 	str.w	r5, [r4, #2088]	; 0x828
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a09e:	f000 fe97 	bl	800add0 <HAL_CRC_Calculate>
 800a0a2:	4603      	mov	r3, r0
	RingZeroes(&AFLfuzzer.inputAFL);
 800a0a4:	483a      	ldr	r0, [pc, #232]	; (800a190 <FuzzingInputHandler+0x130>)
	AFLfuzzer.bRXcomplete = false;
 800a0a6:	f884 5864 	strb.w	r5, [r4, #2148]	; 0x864
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 800a0aa:	43db      	mvns	r3, r3
	AFLfuzzer.inputLength = 0;
 800a0ac:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
	AFLfuzzer.previousGuard = 0;
 800a0b0:	f8a4 5858 	strh.w	r5, [r4, #2136]	; 0x858
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 800a0b4:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
	RingZeroes(&AFLfuzzer.inputAFL);
 800a0b8:	f000 f8b6 	bl	800a228 <RingZeroes>
    CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 12);
 800a0bc:	210c      	movs	r1, #12
 800a0be:	4836      	ldr	r0, [pc, #216]	; (800a198 <FuzzingInputHandler+0x138>)
 800a0c0:	f017 fac4 	bl	802164c <CDC_Transmit_FS>

	  	     }


      }
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	b12b      	cbz	r3, 800a0d4 <FuzzingInputHandler+0x74>
 800a0c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

}
 800a0d4:	b005      	add	sp, #20
 800a0d6:	bd30      	pop	{r4, r5, pc}
	      auxbytes.vbytes[0]=Buf[0];
 800a0d8:	6803      	ldr	r3, [r0, #0]
	      if(AFLfuzzer.inputLength % 4)
 800a0da:	079a      	lsls	r2, r3, #30
	      AFLfuzzer.inputLength = auxbytes.vint32;
 800a0dc:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	      if(AFLfuzzer.inputLength % 4)
 800a0e0:	d002      	beq.n	800a0e8 <FuzzingInputHandler+0x88>
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength + 4 - AFLfuzzer.inputLength % 4;
 800a0e2:	f023 0303 	bic.w	r3, r3, #3
 800a0e6:	3304      	adds	r3, #4
	      if((AFLfuzzer.inputLengthpadded + 4 )> MAX_BUFFER_INPUT)
 800a0e8:	1d1a      	adds	r2, r3, #4
 800a0ea:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
 800a0ee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a0f2:	d8c3      	bhi.n	800a07c <FuzzingInputHandler+0x1c>
      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0ed      	beq.n	800a0d4 <FuzzingInputHandler+0x74>
	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a0f8:	f8d4 5808 	ldr.w	r5, [r4, #2056]	; 0x808
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a0fc:	680a      	ldr	r2, [r1, #0]
 800a0fe:	4601      	mov	r1, r0
	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a100:	f1c5 0504 	rsb	r5, r5, #4
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a104:	4822      	ldr	r0, [pc, #136]	; (800a190 <FuzzingInputHandler+0x130>)
	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a106:	442b      	add	r3, r5
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a108:	429a      	cmp	r2, r3
 800a10a:	bf28      	it	cs
 800a10c:	461a      	movcs	r2, r3
 800a10e:	f000 f853 	bl	800a1b8 <RingCopy>
	  	     if( (AFLfuzzer.inputLengthpadded + 4) == AFLfuzzer.inputAFL.u32available)
 800a112:	f8d4 5828 	ldr.w	r5, [r4, #2088]	; 0x828
 800a116:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
 800a11a:	1d2a      	adds	r2, r5, #4
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d1d1      	bne.n	800a0c4 <FuzzingInputHandler+0x64>
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a120:	08aa      	lsrs	r2, r5, #2
	if (crcreceived[numberwords] == uwCRCValue)
 800a122:	f025 0503 	bic.w	r5, r5, #3
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a126:	491a      	ldr	r1, [pc, #104]	; (800a190 <FuzzingInputHandler+0x130>)
 800a128:	481a      	ldr	r0, [pc, #104]	; (800a194 <FuzzingInputHandler+0x134>)
 800a12a:	f000 fe51 	bl	800add0 <HAL_CRC_Calculate>
	if (crcreceived[numberwords] == uwCRCValue)
 800a12e:	5963      	ldr	r3, [r4, r5]
	uwCRCValue = ~uwCRCValue;
 800a130:	43c0      	mvns	r0, r0
	if (crcreceived[numberwords] == uwCRCValue)
 800a132:	4298      	cmp	r0, r3
 800a134:	d00e      	beq.n	800a154 <FuzzingInputHandler+0xf4>
	RingClear(&AFLfuzzer.inputAFL);
 800a136:	4816      	ldr	r0, [pc, #88]	; (800a190 <FuzzingInputHandler+0x130>)
	AFLfuzzer.inputLength = 0;
 800a138:	2500      	movs	r5, #0
	RingClear(&AFLfuzzer.inputAFL);
 800a13a:	f000 f869 	bl	800a210 <RingClear>
	AFLfuzzer.aflheader[0] = faultcode;
 800a13e:	2106      	movs	r1, #6
 800a140:	e7a1      	b.n	800a086 <FuzzingInputHandler+0x26>
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a142:	2b00      	cmp	r3, #0
 800a144:	d09a      	beq.n	800a07c <FuzzingInputHandler+0x1c>
 800a146:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a14a:	d897      	bhi.n	800a07c <FuzzingInputHandler+0x1c>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a150:	d894      	bhi.n	800a07c <FuzzingInputHandler+0x1c>
 800a152:	e7d1      	b.n	800a0f8 <FuzzingInputHandler+0x98>
	  	    		AFLfuzzer.bRXcomplete = 1;
 800a154:	2301      	movs	r3, #1
	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 800a156:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
	  	    		AFLfuzzer.bRXcomplete = 1;
 800a15a:	f884 3864 	strb.w	r3, [r4, #2148]	; 0x864
	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 800a15e:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	  	    		AFLfuzzer.timespan = HAL_GetTick();
 800a162:	f000 fcc3 	bl	800aaec <HAL_GetTick>
	  	    		if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
 800a166:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
	  	    		AFLfuzzer.timespan = HAL_GetTick();
 800a16a:	f8c4 082c 	str.w	r0, [r4, #2092]	; 0x82c
	  	    		if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
 800a16e:	b15b      	cbz	r3, 800a188 <FuzzingInputHandler+0x128>
	  	    		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 800a170:	2301      	movs	r3, #1
 800a172:	ad03      	add	r5, sp, #12
 800a174:	2100      	movs	r1, #0
 800a176:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 800a17a:	461a      	mov	r2, r3
 800a17c:	e9cd 1500 	strd	r1, r5, [sp]
 800a180:	4619      	mov	r1, r3
 800a182:	f7f9 fae9 	bl	8003758 <xTaskGenericNotifyFromISR>
 800a186:	e79d      	b.n	800a0c4 <FuzzingInputHandler+0x64>
	  	    		if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
 800a188:	4804      	ldr	r0, [pc, #16]	; (800a19c <FuzzingInputHandler+0x13c>)
 800a18a:	f018 fb2b 	bl	80227e4 <puts>
 800a18e:	e7ef      	b.n	800a170 <FuzzingInputHandler+0x110>
 800a190:	24026000 	.word	0x24026000
 800a194:	240116ac 	.word	0x240116ac
 800a198:	24026814 	.word	0x24026814
 800a19c:	24009fa8 	.word	0x24009fa8

0800a1a0 <activateCortexMtraps>:


void activateCortexMtraps()
{
	 SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <activateCortexMtraps+0x14>)
 800a1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a4:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 800a1a8:	625a      	str	r2, [r3, #36]	; 0x24
	  | SCB_SHCSR_BUSFAULTENA_Msk
	  | SCB_SHCSR_MEMFAULTENA_Msk; // enable Usage-/Bus-/MPU Fault

	  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;// | // enable div by zero trap
 800a1aa:	695a      	ldr	r2, [r3, #20]
 800a1ac:	f042 0210 	orr.w	r2, r2, #16
 800a1b0:	615a      	str	r2, [r3, #20]
			  //SCB_CCR_UNALIGN_TRP_Msk;    // enable unaligned access trap

}
 800a1b2:	4770      	bx	lr
 800a1b4:	e000ed00 	.word	0xe000ed00

0800a1b8 <RingCopy>:


/* Ring Buffer functions */

void RingCopy(RingBuffer_t *xRingBuffer, uint8_t* u8Buff, uint32_t len)
{
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	4604      	mov	r4, r0
	uint32_t u32Free=0;


	u32Free = MAX_BUFFER_INPUT - xRingBuffer->u32end;
 800a1bc:	f8d0 0804 	ldr.w	r0, [r0, #2052]	; 0x804
 800a1c0:	f5c0 6600 	rsb	r6, r0, #2048	; 0x800

	if(u32Free > len)
 800a1c4:	4296      	cmp	r6, r2
 800a1c6:	d911      	bls.n	800a1ec <RingCopy+0x34>
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, len );
 800a1c8:	4420      	add	r0, r4
 800a1ca:	4615      	mov	r5, r2
 800a1cc:	f017 fe3a 	bl	8021e44 <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a1d0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
		xRingBuffer->u32available += len;
 800a1d4:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a1d8:	442b      	add	r3, r5
		xRingBuffer->u32available += len;
 800a1da:	442a      	add	r2, r5
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a1dc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
		xRingBuffer->u32available += u32Free;
	}

	xRingBuffer->overflow = false;
 800a1e0:	2300      	movs	r3, #0
		xRingBuffer->u32available += len;
 800a1e2:	f8c4 2808 	str.w	r2, [r4, #2056]	; 0x808
	xRingBuffer->overflow = false;
 800a1e6:	f884 3810 	strb.w	r3, [r4, #2064]	; 0x810

}
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4420      	add	r0, r4
 800a1f0:	f017 fe28 	bl	8021e44 <memcpy>
		xRingBuffer->u32available += u32Free;
 800a1f4:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a1f8:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
		xRingBuffer->u32available += u32Free;
 800a1fc:	4433      	add	r3, r6
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a1fe:	4432      	add	r2, r6
		xRingBuffer->u32available += u32Free;
 800a200:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
	xRingBuffer->overflow = false;
 800a204:	2300      	movs	r3, #0
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a206:	f8c4 2804 	str.w	r2, [r4, #2052]	; 0x804
	xRingBuffer->overflow = false;
 800a20a:	f884 3810 	strb.w	r3, [r4, #2064]	; 0x810
}
 800a20e:	bd70      	pop	{r4, r5, r6, pc}

0800a210 <RingClear>:
return xRingBuffer->u32available;
}

void RingClear(RingBuffer_t *xRingBuffer)
{
xRingBuffer->u32start = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
xRingBuffer->u32end = 0;
 800a216:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
xRingBuffer->u32available = 0;
 800a21a:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
xRingBuffer->u32availablenopad = 0;
 800a21e:	f8c0 380c 	str.w	r3, [r0, #2060]	; 0x80c
xRingBuffer->overflow = false;
 800a222:	f880 3810 	strb.w	r3, [r0, #2064]	; 0x810
}
 800a226:	4770      	bx	lr

0800a228 <RingZeroes>:
 800a228:	2300      	movs	r3, #0
 800a22a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800a22e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 800a232:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
 800a236:	f8c0 380c 	str.w	r3, [r0, #2060]	; 0x80c
 800a23a:	f880 3810 	strb.w	r3, [r0, #2064]	; 0x810
 800a23e:	4770      	bx	lr

0800a240 <__io_putchar>:
static void MX_USART3_UART_Init(void);
static void MX_RNG_Init(void);
static void MX_DMA_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch) {
 800a240:	b500      	push	{lr}
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a242:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 800a244:	b083      	sub	sp, #12
 800a246:	4684      	mov	ip, r0
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a248:	4805      	ldr	r0, [pc, #20]	; (800a260 <__io_putchar+0x20>)
 800a24a:	f10d 0107 	add.w	r1, sp, #7
 800a24e:	461a      	mov	r2, r3
void __io_putchar(uint8_t ch) {
 800a250:	f88d c007 	strb.w	ip, [sp, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a254:	f006 fac4 	bl	80107e0 <HAL_UART_Transmit>
}
 800a258:	b003      	add	sp, #12
 800a25a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a25e:	bf00      	nop
 800a260:	240117d4 	.word	0x240117d4
 800a264:	00000000 	.word	0x00000000

0800a268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a268:	b500      	push	{lr}
 800a26a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a26c:	224c      	movs	r2, #76	; 0x4c
 800a26e:	2100      	movs	r1, #0
 800a270:	a80a      	add	r0, sp, #40	; 0x28
 800a272:	f017 fdf5 	bl	8021e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a276:	2220      	movs	r2, #32
 800a278:	2100      	movs	r1, #0
 800a27a:	a802      	add	r0, sp, #8
 800a27c:	f017 fdf0 	bl	8021e60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800a280:	2004      	movs	r0, #4
 800a282:	f003 f961 	bl	800d548 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a286:	4a30      	ldr	r2, [pc, #192]	; (800a348 <SystemClock_Config+0xe0>)
 800a288:	2100      	movs	r1, #0
 800a28a:	4b30      	ldr	r3, [pc, #192]	; (800a34c <SystemClock_Config+0xe4>)
 800a28c:	9101      	str	r1, [sp, #4]
 800a28e:	6991      	ldr	r1, [r2, #24]
 800a290:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800a294:	6191      	str	r1, [r2, #24]
 800a296:	6991      	ldr	r1, [r2, #24]
 800a298:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800a29c:	9101      	str	r1, [sp, #4]
 800a29e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2a0:	f041 0101 	orr.w	r1, r1, #1
 800a2a4:	62d9      	str	r1, [r3, #44]	; 0x2c
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a2b0:	6993      	ldr	r3, [r2, #24]
 800a2b2:	049b      	lsls	r3, r3, #18
 800a2b4:	d5fc      	bpl.n	800a2b0 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a2b6:	4a26      	ldr	r2, [pc, #152]	; (800a350 <SystemClock_Config+0xe8>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a2b8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a2ba:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a2bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	f043 0302 	orr.w	r3, r3, #2
 800a2c6:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2c8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a2ca:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a2cc:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a2ce:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 120;
 800a2d0:	2178      	movs	r1, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a2d2:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 120;
 800a2d4:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a2d6:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a2d8:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a2da:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a330 <SystemClock_Config+0xc8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a2e2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a2e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a2ea:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a2ee:	f003 f9f5 	bl	800d6dc <HAL_RCC_OscConfig>
 800a2f2:	b108      	cbz	r0, 800a2f8 <SystemClock_Config+0x90>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a2f6:	e7fe      	b.n	800a2f6 <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a338 <SystemClock_Config+0xd0>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a300:	a802      	add	r0, sp, #8
 800a302:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a304:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a308:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800a340 <SystemClock_Config+0xd8>
 800a30c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a314:	2340      	movs	r3, #64	; 0x40
 800a316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a31a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a31e:	f003 fd63 	bl	800dde8 <HAL_RCC_ClockConfig>
 800a322:	b108      	cbz	r0, 800a328 <SystemClock_Config+0xc0>
 800a324:	b672      	cpsid	i
  while (1)
 800a326:	e7fe      	b.n	800a326 <SystemClock_Config+0xbe>
}
 800a328:	b01f      	add	sp, #124	; 0x7c
 800a32a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a32e:	bf00      	nop
 800a330:	00000021 	.word	0x00000021
 800a334:	00050000 	.word	0x00050000
 800a338:	0000003f 	.word	0x0000003f
 800a33c:	00000003 	.word	0x00000003
 800a340:	00000040 	.word	0x00000040
 800a344:	00000040 	.word	0x00000040
 800a348:	58024800 	.word	0x58024800
 800a34c:	58000400 	.word	0x58000400
 800a350:	58024400 	.word	0x58024400
 800a354:	00000000 	.word	0x00000000

0800a358 <led_init>:
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <led_init+0x60>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35a:	2100      	movs	r1, #0
    HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 800a35c:	4817      	ldr	r0, [pc, #92]	; (800a3bc <led_init+0x64>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a35e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a362:	f042 0202 	orr.w	r2, r2, #2
void led_init(void) {
 800a366:	b500      	push	{lr}
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a368:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
void led_init(void) {
 800a36c:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a36e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a372:	9106      	str	r1, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a374:	f002 0202 	and.w	r2, r2, #2
 800a378:	9200      	str	r2, [sp, #0]
 800a37a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a37c:	e9cd 1104 	strd	r1, r1, [sp, #16]
    LD1_GPIO_CLK_EN();
 800a380:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 800a384:	a902      	add	r1, sp, #8
    LD1_GPIO_CLK_EN();
 800a386:	f042 0202 	orr.w	r2, r2, #2
 800a38a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a392:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = LD1_GPIO_PIN;
 800a396:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800a3b0 <led_init+0x58>
    LD1_GPIO_CLK_EN();
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LD1_GPIO_PIN;
 800a39e:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 800a3a2:	f002 f921 	bl	800c5e8 <HAL_GPIO_Init>
}
 800a3a6:	b009      	add	sp, #36	; 0x24
 800a3a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3ac:	f3af 8000 	nop.w
 800a3b0:	00000001 	.word	0x00000001
 800a3b4:	00000001 	.word	0x00000001
 800a3b8:	58024400 	.word	0x58024400
 800a3bc:	58020400 	.word	0x58020400

0800a3c0 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a3c0:	4a91      	ldr	r2, [pc, #580]	; (800a608 <main+0x248>)
 800a3c2:	6953      	ldr	r3, [r2, #20]
 800a3c4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ca:	b08f      	sub	sp, #60	; 0x3c
 800a3cc:	d111      	bne.n	800a3f2 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3d2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a3d6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a3da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3de:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a3e2:	6953      	ldr	r3, [r2, #20]
 800a3e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3ee:	f3bf 8f6f 	isb	sy
  HAL_MPU_Disable();
 800a3f2:	f000 fc0b 	bl	800ac0c <HAL_MPU_Disable>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a3f6:	2004      	movs	r0, #4
 800a3f8:	f000 fc16 	bl	800ac28 <HAL_MPU_Enable>
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800a3fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a400:	4982      	ldr	r1, [pc, #520]	; (800a60c <main+0x24c>)
 800a402:	e001      	b.n	800a408 <main+0x48>
 800a404:	3b01      	subs	r3, #1
 800a406:	d002      	beq.n	800a40e <main+0x4e>
 800a408:	680a      	ldr	r2, [r1, #0]
 800a40a:	0410      	lsls	r0, r2, #16
 800a40c:	d4fa      	bmi.n	800a404 <main+0x44>
__HAL_RCC_HSEM_CLK_ENABLE();
 800a40e:	4c7f      	ldr	r4, [pc, #508]	; (800a60c <main+0x24c>)
  HAL_Init();
 800a410:	f000 fb30 	bl	800aa74 <HAL_Init>
  activateCortexMtraps();
 800a414:	f7ff fec4 	bl	800a1a0 <activateCortexMtraps>
  SystemClock_Config();
 800a418:	f7ff ff26 	bl	800a268 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800a41c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 800a420:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 800a422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a426:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a42a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 800a436:	f002 fae9 	bl	800ca0c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800a43a:	2100      	movs	r1, #0
 800a43c:	4608      	mov	r0, r1
 800a43e:	f002 faf3 	bl	800ca28 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800a442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a446:	e001      	b.n	800a44c <main+0x8c>
 800a448:	3b01      	subs	r3, #1
 800a44a:	d002      	beq.n	800a452 <main+0x92>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	0412      	lsls	r2, r2, #16
 800a450:	d5fa      	bpl.n	800a448 <main+0x88>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a452:	4c6e      	ldr	r4, [pc, #440]	; (800a60c <main+0x24c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a454:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800a456:	f244 0101 	movw	r1, #16385	; 0x4001
 800a45a:	486d      	ldr	r0, [pc, #436]	; (800a610 <main+0x250>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a45c:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800a45e:	462a      	mov	r2, r5
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800a460:	2600      	movs	r6, #0
 800a462:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a464:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800a468:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a46c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a470:	f043 0304 	orr.w	r3, r3, #4
 800a474:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a478:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	9302      	str	r3, [sp, #8]
 800a482:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a484:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a490:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a49c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4a0:	f043 0302 	orr.w	r3, r3, #2
 800a4a4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4ac:	f003 0302 	and.w	r3, r3, #2
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4b8:	f043 0308 	orr.w	r3, r3, #8
 800a4bc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4c4:	f003 0308 	and.w	r3, r3, #8
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4d0:	f043 0301 	orr.w	r3, r3, #1
 800a4d4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	9306      	str	r3, [sp, #24]
 800a4e2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a4e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4e8:	f043 0310 	orr.w	r3, r3, #16
 800a4ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800a4fc:	f002 fa82 	bl	800ca04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a500:	462a      	mov	r2, r5
 800a502:	2102      	movs	r1, #2
 800a504:	4843      	ldr	r0, [pc, #268]	; (800a614 <main+0x254>)
 800a506:	f002 fa7d 	bl	800ca04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800a50a:	f244 0201 	movw	r2, #16385	; 0x4001
 800a50e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a510:	a908      	add	r1, sp, #32
 800a512:	483f      	ldr	r0, [pc, #252]	; (800a610 <main+0x250>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800a514:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a518:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a51c:	f002 f864 	bl	800c5e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800a520:	2301      	movs	r3, #1
 800a522:	2202      	movs	r2, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a524:	483b      	ldr	r0, [pc, #236]	; (800a614 <main+0x254>)
 800a526:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD2_Pin;
 800a528:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800a52c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  huart3.Instance = USART3;
 800a530:	4e39      	ldr	r6, [pc, #228]	; (800a618 <main+0x258>)
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a532:	f002 f859 	bl	800c5e8 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800a536:	4b39      	ldr	r3, [pc, #228]	; (800a61c <main+0x25c>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a538:	270c      	movs	r7, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a53a:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 800a53c:	6135      	str	r5, [r6, #16]
  huart3.Instance = USART3;
 800a53e:	6033      	str	r3, [r6, #0]
  huart3.Init.BaudRate = 5000000;
 800a540:	4b37      	ldr	r3, [pc, #220]	; (800a620 <main+0x260>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a542:	62b5      	str	r5, [r6, #40]	; 0x28
  huart3.Init.BaudRate = 5000000;
 800a544:	6073      	str	r3, [r6, #4]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800a546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a54a:	e9c6 5502 	strd	r5, r5, [r6, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a54e:	e9c6 7505 	strd	r7, r5, [r6, #20]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a552:	e9c6 5508 	strd	r5, r5, [r6, #32]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800a556:	61f3      	str	r3, [r6, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a558:	f006 f8b4 	bl	80106c4 <HAL_UART_Init>
 800a55c:	b108      	cbz	r0, 800a562 <main+0x1a2>
  __ASM volatile ("cpsid i" : : : "memory");
 800a55e:	b672      	cpsid	i
  while (1)
 800a560:	e7fe      	b.n	800a560 <main+0x1a0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a562:	4601      	mov	r1, r0
 800a564:	4630      	mov	r0, r6
 800a566:	f006 fa47 	bl	80109f8 <HAL_UARTEx_SetTxFifoThreshold>
 800a56a:	b108      	cbz	r0, 800a570 <main+0x1b0>
 800a56c:	b672      	cpsid	i
  while (1)
 800a56e:	e7fe      	b.n	800a56e <main+0x1ae>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a570:	4601      	mov	r1, r0
 800a572:	4630      	mov	r0, r6
 800a574:	f006 fa82 	bl	8010a7c <HAL_UARTEx_SetRxFifoThreshold>
 800a578:	b108      	cbz	r0, 800a57e <main+0x1be>
 800a57a:	b672      	cpsid	i
  while (1)
 800a57c:	e7fe      	b.n	800a57c <main+0x1bc>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800a57e:	4630      	mov	r0, r6
 800a580:	f006 fa1c 	bl	80109bc <HAL_UARTEx_DisableFifoMode>
 800a584:	b108      	cbz	r0, 800a58a <main+0x1ca>
 800a586:	b672      	cpsid	i
  while (1)
 800a588:	e7fe      	b.n	800a588 <main+0x1c8>
  hrng.Instance = RNG;
 800a58a:	4b26      	ldr	r3, [pc, #152]	; (800a624 <main+0x264>)
 800a58c:	4a26      	ldr	r2, [pc, #152]	; (800a628 <main+0x268>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a58e:	6058      	str	r0, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a590:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 800a592:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a594:	f004 fdf2 	bl	800f17c <HAL_RNG_Init>
 800a598:	4605      	mov	r5, r0
 800a59a:	b108      	cbz	r0, 800a5a0 <main+0x1e0>
 800a59c:	b672      	cpsid	i
  while (1)
 800a59e:	e7fe      	b.n	800a59e <main+0x1de>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a5a0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800a5b2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	9308      	str	r3, [sp, #32]
 800a5bc:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a5be:	f000 fac5 	bl	800ab4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a5c2:	200b      	movs	r0, #11
 800a5c4:	f000 fb00 	bl	800abc8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f000 fabd 	bl	800ab4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f000 faf8 	bl	800abc8 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 800a5d8:	4814      	ldr	r0, [pc, #80]	; (800a62c <main+0x26c>)
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 800a5da:	2360      	movs	r3, #96	; 0x60
  hcrc.Instance = CRC;
 800a5dc:	4914      	ldr	r1, [pc, #80]	; (800a630 <main+0x270>)
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800a5de:	2280      	movs	r2, #128	; 0x80
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a5e0:	8085      	strh	r5, [r0, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 800a5e2:	6143      	str	r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a5e4:	2303      	movs	r3, #3
  hcrc.Instance = CRC;
 800a5e6:	6001      	str	r1, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800a5e8:	6182      	str	r2, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a5ea:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a5ec:	f000 fb70 	bl	800acd0 <HAL_CRC_Init>
 800a5f0:	b108      	cbz	r0, 800a5f6 <main+0x236>
 800a5f2:	b672      	cpsid	i
  while (1)
 800a5f4:	e7fe      	b.n	800a5f4 <main+0x234>
  led_init();
 800a5f6:	f7ff feaf 	bl	800a358 <led_init>
  testextern = (uint32_t)__user_heap_start__;
 800a5fa:	4a0e      	ldr	r2, [pc, #56]	; (800a634 <main+0x274>)
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <main+0x278>)
 800a5fe:	601a      	str	r2, [r3, #0]
  app_main();
 800a600:	f7ff fbc2 	bl	8009d88 <app_main>
  while (1)
 800a604:	e7fe      	b.n	800a604 <main+0x244>
 800a606:	bf00      	nop
 800a608:	e000ed00 	.word	0xe000ed00
 800a60c:	58024400 	.word	0x58024400
 800a610:	58020400 	.word	0x58020400
 800a614:	58021000 	.word	0x58021000
 800a618:	240117d4 	.word	0x240117d4
 800a61c:	40004800 	.word	0x40004800
 800a620:	004c4b40 	.word	0x004c4b40
 800a624:	240117c0 	.word	0x240117c0
 800a628:	48021800 	.word	0x48021800
 800a62c:	240116ac 	.word	0x240116ac
 800a630:	58024c00 	.word	0x58024c00
 800a634:	24036000 	.word	0x24036000
 800a638:	24011864 	.word	0x24011864

0800a63c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM16) {
 800a63c:	4b03      	ldr	r3, [pc, #12]	; (800a64c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800a63e:	6802      	ldr	r2, [r0, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d000      	beq.n	800a646 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800a644:	4770      	bx	lr
    HAL_IncTick();
 800a646:	f000 ba45 	b.w	800aad4 <HAL_IncTick>
 800a64a:	bf00      	nop
 800a64c:	40014400 	.word	0x40014400

0800a650 <Error_Handler>:
 800a650:	b672      	cpsid	i
  while (1)
 800a652:	e7fe      	b.n	800a652 <Error_Handler+0x2>

0800a654 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a654:	4b07      	ldr	r3, [pc, #28]	; (800a674 <HAL_MspInit+0x20>)
{
 800a656:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a658:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800a65c:	f042 0202 	orr.w	r2, r2, #2
 800a660:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a670:	b002      	add	sp, #8
 800a672:	4770      	bx	lr
 800a674:	58024400 	.word	0x58024400

0800a678 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <HAL_CRC_MspInit+0x2c>)
 800a67a:	6802      	ldr	r2, [r0, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d000      	beq.n	800a682 <HAL_CRC_MspInit+0xa>
 800a680:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a682:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
 800a686:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800a688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a68c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a690:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a6a0:	b002      	add	sp, #8
 800a6a2:	4770      	bx	lr
 800a6a4:	58024c00 	.word	0x58024c00

0800a6a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	b0b0      	sub	sp, #192	; 0xc0
 800a6ac:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6ae:	22bc      	movs	r2, #188	; 0xbc
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	a801      	add	r0, sp, #4
 800a6b4:	f017 fbd4 	bl	8021e60 <memset>
  if(hrng->Instance==RNG)
 800a6b8:	4b13      	ldr	r3, [pc, #76]	; (800a708 <HAL_RNG_MspInit+0x60>)
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d001      	beq.n	800a6c4 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800a6c0:	b030      	add	sp, #192	; 0xc0
 800a6c2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800a6c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6c8:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800a6ca:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6cc:	f003 fea4 	bl	800e418 <HAL_RCCEx_PeriphCLKConfig>
 800a6d0:	b9b0      	cbnz	r0, 800a700 <HAL_RNG_MspInit+0x58>
    __HAL_RCC_RNG_CLK_ENABLE();
 800a6d2:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <HAL_RNG_MspInit+0x64>)
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2050      	movs	r0, #80	; 0x50
    __HAL_RCC_RNG_CLK_ENABLE();
 800a6d8:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800a6dc:	4611      	mov	r1, r2
    __HAL_RCC_RNG_CLK_ENABLE();
 800a6de:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800a6e2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800a6e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800a6f2:	f000 fa2b 	bl	800ab4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800a6f6:	2050      	movs	r0, #80	; 0x50
 800a6f8:	f000 fa66 	bl	800abc8 <HAL_NVIC_EnableIRQ>
}
 800a6fc:	b030      	add	sp, #192	; 0xc0
 800a6fe:	bd10      	pop	{r4, pc}
      Error_Handler();
 800a700:	f7ff ffa6 	bl	800a650 <Error_Handler>
 800a704:	e7e5      	b.n	800a6d2 <HAL_RNG_MspInit+0x2a>
 800a706:	bf00      	nop
 800a708:	48021800 	.word	0x48021800
 800a70c:	58024400 	.word	0x58024400

0800a710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a714:	2100      	movs	r1, #0
{
 800a716:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a718:	22bc      	movs	r2, #188	; 0xbc
 800a71a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a71c:	9106      	str	r1, [sp, #24]
 800a71e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800a722:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a726:	f017 fb9b 	bl	8021e60 <memset>
  if(huart->Instance==USART3)
 800a72a:	4b3c      	ldr	r3, [pc, #240]	; (800a81c <HAL_UART_MspInit+0x10c>)
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d001      	beq.n	800a736 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a732:	b036      	add	sp, #216	; 0xd8
 800a734:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a736:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a738:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a73a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a73c:	f003 fe6c 	bl	800e418 <HAL_RCCEx_PeriphCLKConfig>
 800a740:	2800      	cmp	r0, #0
 800a742:	d161      	bne.n	800a808 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a744:	4b36      	ldr	r3, [pc, #216]	; (800a820 <HAL_UART_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a746:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a748:	a902      	add	r1, sp, #8
    hdma_usart3_tx.Instance = DMA1_Stream0;
 800a74a:	4e36      	ldr	r6, [pc, #216]	; (800a824 <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a74c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800a750:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a754:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800a758:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800a75c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a760:	9200      	str	r2, [sp, #0]
 800a762:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a768:	f042 0208 	orr.w	r2, r2, #8
 800a76c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a770:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a778:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a77a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a77e:	482a      	ldr	r0, [pc, #168]	; (800a828 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a780:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a782:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a784:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	2300      	movs	r3, #0
 800a78e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a792:	f001 ff29 	bl	800c5e8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream0;
 800a796:	4925      	ldr	r1, [pc, #148]	; (800a82c <HAL_UART_MspInit+0x11c>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800a798:	222e      	movs	r2, #46	; 0x2e
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a79a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a79c:	4630      	mov	r0, r6
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a79e:	60f3      	str	r3, [r6, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7a0:	6173      	str	r3, [r6, #20]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800a7a2:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7aa:	2140      	movs	r1, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ac:	6132      	str	r2, [r6, #16]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a7ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7b2:	60b1      	str	r1, [r6, #8]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800a7b4:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a7b8:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800a7bc:	f000 fc62 	bl	800b084 <HAL_DMA_Init>
 800a7c0:	bb40      	cbnz	r0, 800a814 <HAL_UART_MspInit+0x104>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a7c2:	4d1b      	ldr	r5, [pc, #108]	; (800a830 <HAL_UART_MspInit+0x120>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7c4:	2300      	movs	r3, #0
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a7c6:	491b      	ldr	r1, [pc, #108]	; (800a834 <HAL_UART_MspInit+0x124>)
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800a7c8:	222d      	movs	r2, #45	; 0x2d
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a7ca:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800a7cc:	67a6      	str	r6, [r4, #120]	; 0x78
 800a7ce:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7d0:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800a7d2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a7da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7de:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7e2:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a7e6:	e9c5 3207 	strd	r3, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a7ea:	f000 fc4b 	bl	800b084 <HAL_DMA_Init>
 800a7ee:	b970      	cbnz	r0, 800a80e <HAL_UART_MspInit+0xfe>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2105      	movs	r1, #5
 800a7f4:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800a7f6:	67e5      	str	r5, [r4, #124]	; 0x7c
 800a7f8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a7fa:	f000 f9a7 	bl	800ab4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a7fe:	2027      	movs	r0, #39	; 0x27
 800a800:	f000 f9e2 	bl	800abc8 <HAL_NVIC_EnableIRQ>
}
 800a804:	b036      	add	sp, #216	; 0xd8
 800a806:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800a808:	f7ff ff22 	bl	800a650 <Error_Handler>
 800a80c:	e79a      	b.n	800a744 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800a80e:	f7ff ff1f 	bl	800a650 <Error_Handler>
 800a812:	e7ed      	b.n	800a7f0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800a814:	f7ff ff1c 	bl	800a650 <Error_Handler>
 800a818:	e7d3      	b.n	800a7c2 <HAL_UART_MspInit+0xb2>
 800a81a:	bf00      	nop
 800a81c:	40004800 	.word	0x40004800
 800a820:	58024400 	.word	0x58024400
 800a824:	24011748 	.word	0x24011748
 800a828:	58020c00 	.word	0x58020c00
 800a82c:	40020010 	.word	0x40020010
 800a830:	240116d0 	.word	0x240116d0
 800a834:	40020028 	.word	0x40020028

0800a838 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART3)
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <HAL_UART_MspDeInit+0x3c>)
 800a83a:	6802      	ldr	r2, [r0, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d000      	beq.n	800a842 <HAL_UART_MspDeInit+0xa>
 800a840:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800a842:	4a0d      	ldr	r2, [pc, #52]	; (800a878 <HAL_UART_MspDeInit+0x40>)

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 800a844:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_USART3_CLK_DISABLE();
 800a848:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800a84c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
{
 800a850:	b510      	push	{r4, lr}
 800a852:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_DISABLE();
 800a854:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <HAL_UART_MspDeInit+0x44>)
 800a85a:	f002 f80b 	bl	800c874 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800a85e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a860:	f000 fe7e 	bl	800b560 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800a864:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a866:	f000 fe7b 	bl	800b560 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800a86a:	2027      	movs	r0, #39	; 0x27
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800a870:	f000 b9b8 	b.w	800abe4 <HAL_NVIC_DisableIRQ>
 800a874:	40004800 	.word	0x40004800
 800a878:	58024400 	.word	0x58024400
 800a87c:	58020c00 	.word	0x58020c00

0800a880 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a880:	280f      	cmp	r0, #15
 800a882:	d901      	bls.n	800a888 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800a884:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim16);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800a886:	4770      	bx	lr
{
 800a888:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800a88a:	4601      	mov	r1, r0
{
 800a88c:	b08b      	sub	sp, #44	; 0x2c
 800a88e:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800a890:	2200      	movs	r2, #0
 800a892:	2075      	movs	r0, #117	; 0x75
  htim16.Instance = TIM16;
 800a894:	4d1a      	ldr	r5, [pc, #104]	; (800a900 <HAL_InitTick+0x80>)
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800a896:	f000 f959 	bl	800ab4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800a89a:	2075      	movs	r0, #117	; 0x75
 800a89c:	f000 f994 	bl	800abc8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM16_CLK_ENABLE();
 800a8a0:	4b18      	ldr	r3, [pc, #96]	; (800a904 <HAL_InitTick+0x84>)
    uwTickPrio = TickPriority;
 800a8a2:	4a19      	ldr	r2, [pc, #100]	; (800a908 <HAL_InitTick+0x88>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a8a4:	4669      	mov	r1, sp
 800a8a6:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800a8a8:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM16_CLK_ENABLE();
 800a8aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a8ae:	4c17      	ldr	r4, [pc, #92]	; (800a90c <HAL_InitTick+0x8c>)
  __HAL_RCC_TIM16_CLK_ENABLE();
 800a8b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a8b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800a8b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a8c4:	f003 fc88 	bl	800e1d8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a8c8:	f003 fc3e 	bl	800e148 <HAL_RCC_GetPCLK2Freq>
  htim16.Init.ClockDivision = 0;
 800a8cc:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a8ce:	0043      	lsls	r3, r0, #1
  htim16.Instance = TIM16;
 800a8d0:	490f      	ldr	r1, [pc, #60]	; (800a910 <HAL_InitTick+0x90>)
  htim16.Init.ClockDivision = 0;
 800a8d2:	612a      	str	r2, [r5, #16]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800a8d4:	4628      	mov	r0, r5
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8d6:	60aa      	str	r2, [r5, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a8d8:	fba4 2303 	umull	r2, r3, r4, r3
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800a8dc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim16.Instance = TIM16;
 800a8e0:	6029      	str	r1, [r5, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a8e2:	0c9b      	lsrs	r3, r3, #18
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800a8e4:	60ea      	str	r2, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a8e6:	3b01      	subs	r3, #1
  htim16.Init.Prescaler = uwPrescalerValue;
 800a8e8:	606b      	str	r3, [r5, #4]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800a8ea:	f004 fcc1 	bl	800f270 <HAL_TIM_Base_Init>
 800a8ee:	b110      	cbz	r0, 800a8f6 <HAL_InitTick+0x76>
    return HAL_ERROR;
 800a8f0:	2001      	movs	r0, #1
}
 800a8f2:	b00b      	add	sp, #44	; 0x2c
 800a8f4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim16);
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f004 fd70 	bl	800f3dc <HAL_TIM_Base_Start_IT>
 800a8fc:	e7f9      	b.n	800a8f2 <HAL_InitTick+0x72>
 800a8fe:	bf00      	nop
 800a900:	24011868 	.word	0x24011868
 800a904:	58024400 	.word	0x58024400
 800a908:	2400801c 	.word	0x2400801c
 800a90c:	431bde83 	.word	0x431bde83
 800a910:	40014400 	.word	0x40014400

0800a914 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop

0800a918 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800a918:	4801      	ldr	r0, [pc, #4]	; (800a920 <DMA1_Stream0_IRQHandler+0x8>)
 800a91a:	f001 bb13 	b.w	800bf44 <HAL_DMA_IRQHandler>
 800a91e:	bf00      	nop
 800a920:	24011748 	.word	0x24011748

0800a924 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800a924:	4801      	ldr	r0, [pc, #4]	; (800a92c <DMA1_Stream1_IRQHandler+0x8>)
 800a926:	f001 bb0d 	b.w	800bf44 <HAL_DMA_IRQHandler>
 800a92a:	bf00      	nop
 800a92c:	240116d0 	.word	0x240116d0

0800a930 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a930:	4801      	ldr	r0, [pc, #4]	; (800a938 <USART3_IRQHandler+0x8>)
 800a932:	f004 bfe9 	b.w	800f908 <HAL_UART_IRQHandler>
 800a936:	bf00      	nop
 800a938:	240117d4 	.word	0x240117d4

0800a93c <RNG_IRQHandler>:
void HASH_RNG_IRQHandler(void)
{
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800a93c:	4801      	ldr	r0, [pc, #4]	; (800a944 <RNG_IRQHandler+0x8>)
 800a93e:	f004 bc5d 	b.w	800f1fc <HAL_RNG_IRQHandler>
 800a942:	bf00      	nop
 800a944:	240117c0 	.word	0x240117c0

0800a948 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <OTG_FS_IRQHandler+0x8>)
 800a94a:	f002 b92d 	b.w	800cba8 <HAL_PCD_IRQHandler>
 800a94e:	bf00      	nop
 800a950:	240344d8 	.word	0x240344d8

0800a954 <TIM16_IRQHandler>:
void TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <TIM16_IRQHandler+0x8>)
 800a956:	f004 bd9f 	b.w	800f498 <HAL_TIM_IRQHandler>
 800a95a:	bf00      	nop
 800a95c:	24011868 	.word	0x24011868

0800a960 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800a960:	2001      	movs	r0, #1
 800a962:	4770      	bx	lr

0800a964 <_kill>:

int _kill(int pid, int sig)
{
 800a964:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a966:	f017 f927 	bl	8021bb8 <__errno>
 800a96a:	2216      	movs	r2, #22
 800a96c:	4603      	mov	r3, r0
	return -1;
}
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bd08      	pop	{r3, pc}
 800a976:	bf00      	nop

0800a978 <_exit>:

void _exit (int status)
{
 800a978:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a97a:	f017 f91d 	bl	8021bb8 <__errno>
 800a97e:	2316      	movs	r3, #22
 800a980:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800a982:	e7fe      	b.n	800a982 <_exit+0xa>

0800a984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a984:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a986:	1e16      	subs	r6, r2, #0
 800a988:	dd07      	ble.n	800a99a <_read+0x16>
 800a98a:	460c      	mov	r4, r1
 800a98c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800a98e:	f3af 8000 	nop.w
 800a992:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a996:	42a5      	cmp	r5, r4
 800a998:	d1f9      	bne.n	800a98e <_read+0xa>
	}

return len;
}
 800a99a:	4630      	mov	r0, r6
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	bf00      	nop

0800a9a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a9a0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a9a2:	1e16      	subs	r6, r2, #0
 800a9a4:	dd07      	ble.n	800a9b6 <_write+0x16>
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800a9aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9ae:	f7ff fc47 	bl	800a240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a9b2:	42ac      	cmp	r4, r5
 800a9b4:	d1f9      	bne.n	800a9aa <_write+0xa>
	}
	return len;
}
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	bf00      	nop

0800a9bc <_close>:

int _close(int file)
{
	return -1;
}
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop

0800a9c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a9c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800a9c8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800a9ca:	604b      	str	r3, [r1, #4]
}
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop

0800a9d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	4770      	bx	lr

0800a9d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	4770      	bx	lr

0800a9d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a9d8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a9da:	4c0d      	ldr	r4, [pc, #52]	; (800aa10 <_sbrk+0x38>)
{
 800a9dc:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a9de:	490d      	ldr	r1, [pc, #52]	; (800aa14 <_sbrk+0x3c>)
 800a9e0:	4d0d      	ldr	r5, [pc, #52]	; (800aa18 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800a9e2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a9e4:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 800a9e6:	b12a      	cbz	r2, 800a9f4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a9e8:	4413      	add	r3, r2
 800a9ea:	428b      	cmp	r3, r1
 800a9ec:	d808      	bhi.n	800aa00 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800a9ee:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 800a9f0:	6023      	str	r3, [r4, #0]
}
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 800a9f4:	4809      	ldr	r0, [pc, #36]	; (800aa1c <_sbrk+0x44>)
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800a9fa:	4413      	add	r3, r2
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	d9f6      	bls.n	800a9ee <_sbrk+0x16>
    errno = ENOMEM;
 800aa00:	f017 f8da 	bl	8021bb8 <__errno>
 800aa04:	230c      	movs	r3, #12
    return (void *)-1;
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800aa0a:	6003      	str	r3, [r0, #0]
}
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	240118b4 	.word	0x240118b4
 800aa14:	24080000 	.word	0x24080000
 800aa18:	00000400 	.word	0x00000400
 800aa1c:	24036000 	.word	0x24036000

0800aa20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800aa20:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aa58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800aa24:	f7fe fcf6 	bl	8009414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aa28:	480c      	ldr	r0, [pc, #48]	; (800aa5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800aa2a:	490d      	ldr	r1, [pc, #52]	; (800aa60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800aa2c:	4a0d      	ldr	r2, [pc, #52]	; (800aa64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800aa2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aa30:	e002      	b.n	800aa38 <LoopCopyDataInit>

0800aa32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa36:	3304      	adds	r3, #4

0800aa38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa3c:	d3f9      	bcc.n	800aa32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa3e:	4a0a      	ldr	r2, [pc, #40]	; (800aa68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800aa40:	4c0a      	ldr	r4, [pc, #40]	; (800aa6c <LoopFillZerobss+0x22>)
  movs r3, #0
 800aa42:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa44:	e001      	b.n	800aa4a <LoopFillZerobss>

0800aa46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa48:	3204      	adds	r2, #4

0800aa4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa4c:	d3fb      	bcc.n	800aa46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800aa4e:	f017 f9c1 	bl	8021dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aa52:	f7ff fcb5 	bl	800a3c0 <main>
  bx  lr
 800aa56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800aa58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800aa5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800aa60:	2400afbc 	.word	0x2400afbc
  ldr r2, =_sidata
 800aa64:	080232d4 	.word	0x080232d4
  ldr r2, =_sbss
 800aa68:	24010000 	.word	0x24010000
  ldr r4, =_ebss
 800aa6c:	24034b10 	.word	0x24034b10

0800aa70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aa70:	e7fe      	b.n	800aa70 <ADC3_IRQHandler>
	...

0800aa74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa74:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa76:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa78:	4c12      	ldr	r4, [pc, #72]	; (800aac4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa7a:	f000 f855 	bl	800ab28 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa7e:	f003 f913 	bl	800dca8 <HAL_RCC_GetSysClockFreq>
 800aa82:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <HAL_Init+0x54>)
 800aa84:	4911      	ldr	r1, [pc, #68]	; (800aacc <HAL_Init+0x58>)
 800aa86:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa88:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa8a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa8e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa92:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa94:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa96:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa9a:	490d      	ldr	r1, [pc, #52]	; (800aad0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa9c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aaa0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaa2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800aaa6:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aaa8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaaa:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aaac:	f7ff fee8 	bl	800a880 <HAL_InitTick>
 800aab0:	b110      	cbz	r0, 800aab8 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800aab2:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800aab4:	4620      	mov	r0, r4
 800aab6:	bd10      	pop	{r4, pc}
 800aab8:	4604      	mov	r4, r0
  HAL_MspInit();
 800aaba:	f7ff fdcb 	bl	800a654 <HAL_MspInit>
}
 800aabe:	4620      	mov	r0, r4
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	bf00      	nop
 800aac4:	24008004 	.word	0x24008004
 800aac8:	58024400 	.word	0x58024400
 800aacc:	24009f80 	.word	0x24009f80
 800aad0:	24008000 	.word	0x24008000

0800aad4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800aad4:	4a03      	ldr	r2, [pc, #12]	; (800aae4 <HAL_IncTick+0x10>)
 800aad6:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <HAL_IncTick+0x14>)
 800aad8:	6811      	ldr	r1, [r2, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	440b      	add	r3, r1
 800aade:	6013      	str	r3, [r2, #0]
}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	240118b8 	.word	0x240118b8
 800aae8:	24008018 	.word	0x24008018

0800aaec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800aaec:	4b01      	ldr	r3, [pc, #4]	; (800aaf4 <HAL_GetTick+0x8>)
 800aaee:	6818      	ldr	r0, [r3, #0]
}
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	240118b8 	.word	0x240118b8

0800aaf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aafc:	f7ff fff6 	bl	800aaec <HAL_GetTick>
 800ab00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab02:	1c63      	adds	r3, r4, #1
 800ab04:	d002      	beq.n	800ab0c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800ab06:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <HAL_Delay+0x20>)
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ab0c:	f7ff ffee 	bl	800aaec <HAL_GetTick>
 800ab10:	1b43      	subs	r3, r0, r5
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	d3fa      	bcc.n	800ab0c <HAL_Delay+0x14>
  {
  }
}
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	24008018 	.word	0x24008018

0800ab1c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ab1c:	4b01      	ldr	r3, [pc, #4]	; (800ab24 <HAL_GetREVID+0x8>)
 800ab1e:	6818      	ldr	r0, [r3, #0]
}
 800ab20:	0c00      	lsrs	r0, r0, #16
 800ab22:	4770      	bx	lr
 800ab24:	5c001000 	.word	0x5c001000

0800ab28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab28:	4906      	ldr	r1, [pc, #24]	; (800ab44 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab2a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab2e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab32:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab34:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab38:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab3c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800ab3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800ab40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800ab42:	4770      	bx	lr
 800ab44:	e000ed00 	.word	0xe000ed00
 800ab48:	05fa0000 	.word	0x05fa0000

0800ab4c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <HAL_NVIC_SetPriority+0x70>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab54:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab56:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab5a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab5e:	f1be 0f04 	cmp.w	lr, #4
 800ab62:	bf28      	it	cs
 800ab64:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab68:	f1bc 0f06 	cmp.w	ip, #6
 800ab6c:	d91a      	bls.n	800aba4 <HAL_NVIC_SetPriority+0x58>
 800ab6e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ab74:	fa0c fc03 	lsl.w	ip, ip, r3
 800ab78:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800ab80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab82:	fa0c fc0e 	lsl.w	ip, ip, lr
 800ab86:	ea21 010c 	bic.w	r1, r1, ip
 800ab8a:	fa01 f103 	lsl.w	r1, r1, r3
 800ab8e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800ab92:	db0a      	blt.n	800abaa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab94:	0109      	lsls	r1, r1, #4
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <HAL_NVIC_SetPriority+0x74>)
 800ab98:	b2c9      	uxtb	r1, r1
 800ab9a:	4403      	add	r3, r0
 800ab9c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800aba0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aba6:	4613      	mov	r3, r2
 800aba8:	e7e8      	b.n	800ab7c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abaa:	f000 000f 	and.w	r0, r0, #15
 800abae:	0109      	lsls	r1, r1, #4
 800abb0:	4b04      	ldr	r3, [pc, #16]	; (800abc4 <HAL_NVIC_SetPriority+0x78>)
 800abb2:	b2c9      	uxtb	r1, r1
 800abb4:	4403      	add	r3, r0
 800abb6:	7619      	strb	r1, [r3, #24]
 800abb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800abbc:	e000ed00 	.word	0xe000ed00
 800abc0:	e000e100 	.word	0xe000e100
 800abc4:	e000ecfc 	.word	0xe000ecfc

0800abc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800abc8:	2800      	cmp	r0, #0
 800abca:	db07      	blt.n	800abdc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abcc:	2301      	movs	r3, #1
 800abce:	f000 011f 	and.w	r1, r0, #31
 800abd2:	4a03      	ldr	r2, [pc, #12]	; (800abe0 <HAL_NVIC_EnableIRQ+0x18>)
 800abd4:	0940      	lsrs	r0, r0, #5
 800abd6:	408b      	lsls	r3, r1
 800abd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	e000e100 	.word	0xe000e100

0800abe4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800abe4:	2800      	cmp	r0, #0
 800abe6:	db0d      	blt.n	800ac04 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abe8:	0943      	lsrs	r3, r0, #5
 800abea:	2201      	movs	r2, #1
 800abec:	f000 001f 	and.w	r0, r0, #31
 800abf0:	4905      	ldr	r1, [pc, #20]	; (800ac08 <HAL_NVIC_DisableIRQ+0x24>)
 800abf2:	3320      	adds	r3, #32
 800abf4:	fa02 f000 	lsl.w	r0, r2, r0
 800abf8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800abfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac00:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	e000e100 	.word	0xe000e100

0800ac0c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800ac0c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ac10:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800ac12:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ac14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac1a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800ac1c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	e000ed00 	.word	0xe000ed00

0800ac28 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ac28:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <HAL_MPU_Enable+0x1c>)
 800ac2a:	f040 0001 	orr.w	r0, r0, #1
 800ac2e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ac32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ac38:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ac3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac3e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ac42:	4770      	bx	lr
 800ac44:	e000ed00 	.word	0xe000ed00

0800ac48 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac4c:	0897      	lsrs	r7, r2, #2
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac4e:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac50:	d016      	beq.n	800ac80 <CRC_Handle_8+0x38>
 800ac52:	468c      	mov	ip, r1
 800ac54:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ac58:	f89c 3001 	ldrb.w	r3, [ip, #1]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac5c:	f10c 0c04 	add.w	ip, ip, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac60:	f81c 8c04 	ldrb.w	r8, [ip, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ac64:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800ac66:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ac6a:	f81c ec02 	ldrb.w	lr, [ip, #-2]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac6e:	4566      	cmp	r6, ip
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ac70:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800ac74:	ea43 0304 	orr.w	r3, r3, r4
 800ac78:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac7c:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac7e:	d1eb      	bne.n	800ac58 <CRC_Handle_8+0x10>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800ac80:	f012 0203 	ands.w	r2, r2, #3
 800ac84:	d00b      	beq.n	800ac9e <CRC_Handle_8+0x56>
  {
    if ((BufferLength % 4U) == 1U)
 800ac86:	2a01      	cmp	r2, #1
 800ac88:	d00c      	beq.n	800aca4 <CRC_Handle_8+0x5c>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 800ac8a:	2a02      	cmp	r2, #2
 800ac8c:	d111      	bne.n	800acb2 <CRC_Handle_8+0x6a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800ac8e:	eb01 0387 	add.w	r3, r1, r7, lsl #2
 800ac92:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
 800ac9c:	802b      	strh	r3, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ac9e:	6828      	ldr	r0, [r5, #0]
}
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800aca4:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
 800aca8:	702b      	strb	r3, [r5, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800acaa:	6805      	ldr	r5, [r0, #0]
  return hcrc->Instance->DR;
 800acac:	6828      	ldr	r0, [r5, #0]
}
 800acae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800acb2:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 800acb6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800acba:	784b      	ldrb	r3, [r1, #1]
 800acbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800acc0:	802b      	strh	r3, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800acc2:	788b      	ldrb	r3, [r1, #2]
 800acc4:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 800acc6:	6805      	ldr	r5, [r0, #0]
 800acc8:	6828      	ldr	r0, [r5, #0]
}
 800acca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acce:	bf00      	nop

0800acd0 <HAL_CRC_Init>:
  if (hcrc == NULL)
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d036      	beq.n	800ad42 <HAL_CRC_Init+0x72>
{
 800acd4:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800acd6:	7f43      	ldrb	r3, [r0, #29]
 800acd8:	4604      	mov	r4, r0
 800acda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800acde:	b363      	cbz	r3, 800ad3a <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ace0:	2202      	movs	r2, #2
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ace2:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ace4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ace6:	b9f3      	cbnz	r3, 800ad26 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <HAL_CRC_Init+0x78>)
 800acec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800acee:	689a      	ldr	r2, [r3, #8]
 800acf0:	f022 0218 	bic.w	r2, r2, #24
 800acf4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800acf6:	7962      	ldrb	r2, [r4, #5]
 800acf8:	b18a      	cbz	r2, 800ad1e <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800acfa:	6922      	ldr	r2, [r4, #16]
 800acfc:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800acfe:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ad00:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ad04:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800ad08:	4311      	orrs	r1, r2
 800ad0a:	6099      	str	r1, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ad0c:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad14:	4302      	orrs	r2, r0
  return HAL_OK;
 800ad16:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ad18:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ad1a:	7761      	strb	r1, [r4, #29]
}
 800ad1c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ad1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad22:	611a      	str	r2, [r3, #16]
 800ad24:	e7eb      	b.n	800acfe <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ad26:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f890 	bl	800ae50 <HAL_CRCEx_Polynomial_Set>
 800ad30:	b908      	cbnz	r0, 800ad36 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	e7df      	b.n	800acf6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800ad36:	2001      	movs	r0, #1
}
 800ad38:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ad3a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ad3c:	f7ff fc9c 	bl	800a678 <HAL_CRC_MspInit>
 800ad40:	e7ce      	b.n	800ace0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800ad42:	2001      	movs	r0, #1
}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	04c11db7 	.word	0x04c11db7

0800ad4c <HAL_CRC_Accumulate>:
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ad4c:	2302      	movs	r3, #2
{
 800ad4e:	468c      	mov	ip, r1
 800ad50:	b570      	push	{r4, r5, r6, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ad52:	7743      	strb	r3, [r0, #29]
{
 800ad54:	4605      	mov	r5, r0
  switch (hcrc->InputDataFormat)
 800ad56:	6a03      	ldr	r3, [r0, #32]
{
 800ad58:	4616      	mov	r6, r2
  switch (hcrc->InputDataFormat)
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d007      	beq.n	800ad6e <HAL_CRC_Accumulate+0x22>
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d023      	beq.n	800adaa <HAL_CRC_Accumulate+0x5e>
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d01c      	beq.n	800ada0 <HAL_CRC_Accumulate+0x54>
  hcrc->State = HAL_CRC_STATE_READY;
 800ad66:	2301      	movs	r3, #1
  switch (hcrc->InputDataFormat)
 800ad68:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800ad6a:	776b      	strb	r3, [r5, #29]
}
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad6e:	0850      	lsrs	r0, r2, #1
 800ad70:	d029      	beq.n	800adc6 <HAL_CRC_Accumulate+0x7a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ad72:	6829      	ldr	r1, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad74:	2300      	movs	r3, #0
 800ad76:	f10c 0e02 	add.w	lr, ip, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ad7a:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 800ad7e:	f83e 4023 	ldrh.w	r4, [lr, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad82:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ad84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad88:	4283      	cmp	r3, r0
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ad8a:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad8c:	d1f5      	bne.n	800ad7a <HAL_CRC_Accumulate+0x2e>
  }
  if ((BufferLength % 2U) != 0U)
 800ad8e:	07f3      	lsls	r3, r6, #31
 800ad90:	d502      	bpl.n	800ad98 <HAL_CRC_Accumulate+0x4c>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 800ad92:	f83c 3020 	ldrh.w	r3, [ip, r0, lsl #2]
 800ad96:	800b      	strh	r3, [r1, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800ad98:	2301      	movs	r3, #1
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ad9a:	6808      	ldr	r0, [r1, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800ad9c:	776b      	strb	r3, [r5, #29]
}
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800ada0:	f7ff ff52 	bl	800ac48 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 800ada4:	2301      	movs	r3, #1
 800ada6:	776b      	strb	r3, [r5, #29]
}
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
      for (index = 0U; index < BufferLength; index++)
 800adaa:	b172      	cbz	r2, 800adca <HAL_CRC_Accumulate+0x7e>
 800adac:	3904      	subs	r1, #4
        hcrc->Instance->DR = pBuffer[index];
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800adb4:	f851 3f04 	ldr.w	r3, [r1, #4]!
      for (index = 0U; index < BufferLength; index++)
 800adb8:	428e      	cmp	r6, r1
        hcrc->Instance->DR = pBuffer[index];
 800adba:	6003      	str	r3, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 800adbc:	d1fa      	bne.n	800adb4 <HAL_CRC_Accumulate+0x68>
  hcrc->State = HAL_CRC_STATE_READY;
 800adbe:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 800adc0:	6800      	ldr	r0, [r0, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800adc2:	776b      	strb	r3, [r5, #29]
}
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
      temp = hcrc->Instance->DR;
 800adc6:	6829      	ldr	r1, [r5, #0]
 800adc8:	e7e1      	b.n	800ad8e <HAL_CRC_Accumulate+0x42>
 800adca:	6800      	ldr	r0, [r0, #0]
 800adcc:	e7f7      	b.n	800adbe <HAL_CRC_Accumulate+0x72>
 800adce:	bf00      	nop

0800add0 <HAL_CRC_Calculate>:
{
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 800add2:	2302      	movs	r3, #2
  __HAL_CRC_DR_RESET(hcrc);
 800add4:	6805      	ldr	r5, [r0, #0]
{
 800add6:	4606      	mov	r6, r0
 800add8:	468c      	mov	ip, r1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800adda:	7743      	strb	r3, [r0, #29]
{
 800addc:	4617      	mov	r7, r2
  __HAL_CRC_DR_RESET(hcrc);
 800adde:	68ab      	ldr	r3, [r5, #8]
 800ade0:	f043 0301 	orr.w	r3, r3, #1
 800ade4:	60ab      	str	r3, [r5, #8]
  switch (hcrc->InputDataFormat)
 800ade6:	6a03      	ldr	r3, [r0, #32]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d007      	beq.n	800adfc <HAL_CRC_Calculate+0x2c>
 800adec:	2b03      	cmp	r3, #3
 800adee:	d022      	beq.n	800ae36 <HAL_CRC_Calculate+0x66>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d01b      	beq.n	800ae2c <HAL_CRC_Calculate+0x5c>
  hcrc->State = HAL_CRC_STATE_READY;
 800adf4:	2301      	movs	r3, #1
  switch (hcrc->InputDataFormat)
 800adf6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800adf8:	7773      	strb	r3, [r6, #29]
}
 800adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (i = 0U; i < (BufferLength / 2U); i++)
 800adfc:	0851      	lsrs	r1, r2, #1
 800adfe:	d00c      	beq.n	800ae1a <HAL_CRC_Calculate+0x4a>
 800ae00:	2300      	movs	r3, #0
 800ae02:	f10c 0002 	add.w	r0, ip, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ae06:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 800ae0a:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ae0e:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ae10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ae14:	428b      	cmp	r3, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ae16:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ae18:	d1f5      	bne.n	800ae06 <HAL_CRC_Calculate+0x36>
  if ((BufferLength % 2U) != 0U)
 800ae1a:	07fb      	lsls	r3, r7, #31
 800ae1c:	d502      	bpl.n	800ae24 <HAL_CRC_Calculate+0x54>
    *pReg = pBuffer[2U * i];
 800ae1e:	f83c 3021 	ldrh.w	r3, [ip, r1, lsl #2]
 800ae22:	802b      	strh	r3, [r5, #0]
  return hcrc->Instance->DR;
 800ae24:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800ae26:	2301      	movs	r3, #1
 800ae28:	7773      	strb	r3, [r6, #29]
}
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800ae2c:	f7ff ff0c 	bl	800ac48 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 800ae30:	2301      	movs	r3, #1
 800ae32:	7773      	strb	r3, [r6, #29]
}
 800ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	d0f4      	beq.n	800ae24 <HAL_CRC_Calculate+0x54>
 800ae3a:	3904      	subs	r1, #4
 800ae3c:	eb01 0782 	add.w	r7, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 800ae40:	f851 3f04 	ldr.w	r3, [r1, #4]!
      for (index = 0U; index < BufferLength; index++)
 800ae44:	428f      	cmp	r7, r1
        hcrc->Instance->DR = pBuffer[index];
 800ae46:	602b      	str	r3, [r5, #0]
      for (index = 0U; index < BufferLength; index++)
 800ae48:	d1fa      	bne.n	800ae40 <HAL_CRC_Calculate+0x70>
  return hcrc->Instance->DR;
 800ae4a:	6828      	ldr	r0, [r5, #0]
      break;
 800ae4c:	e7eb      	b.n	800ae26 <HAL_CRC_Calculate+0x56>
 800ae4e:	bf00      	nop

0800ae50 <HAL_CRCEx_Polynomial_Set>:
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ae50:	231e      	movs	r3, #30
{
 800ae52:	b410      	push	{r4}
 800ae54:	e001      	b.n	800ae5a <HAL_CRCEx_Polynomial_Set+0xa>
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ae56:	3b01      	subs	r3, #1
 800ae58:	d315      	bcc.n	800ae86 <HAL_CRCEx_Polynomial_Set+0x36>
 800ae5a:	fa21 fc03 	lsr.w	ip, r1, r3
 800ae5e:	f01c 0f01 	tst.w	ip, #1
 800ae62:	d0f8      	beq.n	800ae56 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 800ae64:	2a18      	cmp	r2, #24
 800ae66:	d80f      	bhi.n	800ae88 <HAL_CRCEx_Polynomial_Set+0x38>
 800ae68:	e8df f002 	tbb	[pc, r2]
 800ae6c:	0e0e0e14 	.word	0x0e0e0e14
 800ae70:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae74:	0e0e0e1f 	.word	0x0e0e0e1f
 800ae78:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae7c:	0e0e0e22 	.word	0x0e0e0e22
 800ae80:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae84:	12          	.byte	0x12
 800ae85:	00          	.byte	0x00
 800ae86:	b12a      	cbz	r2, 800ae94 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800ae8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae8e:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800ae90:	2b06      	cmp	r3, #6
 800ae92:	d8f9      	bhi.n	800ae88 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae94:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae96:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae98:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae9a:	68a3      	ldr	r3, [r4, #8]
 800ae9c:	f023 0318 	bic.w	r3, r3, #24
 800aea0:	431a      	orrs	r2, r3
 800aea2:	60a2      	str	r2, [r4, #8]
}
 800aea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea8:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800aeaa:	2b0f      	cmp	r3, #15
 800aeac:	d9f2      	bls.n	800ae94 <HAL_CRCEx_Polynomial_Set+0x44>
 800aeae:	e7eb      	b.n	800ae88 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800aeb0:	2b07      	cmp	r3, #7
 800aeb2:	d9ef      	bls.n	800ae94 <HAL_CRCEx_Polynomial_Set+0x44>
 800aeb4:	e7e8      	b.n	800ae88 <HAL_CRCEx_Polynomial_Set+0x38>
 800aeb6:	bf00      	nop

0800aeb8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aeb8:	6802      	ldr	r2, [r0, #0]
 800aeba:	4b34      	ldr	r3, [pc, #208]	; (800af8c <DMA_CalcBaseAndBitshift+0xd4>)
 800aebc:	4934      	ldr	r1, [pc, #208]	; (800af90 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800aebe:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aec0:	4d34      	ldr	r5, [pc, #208]	; (800af94 <DMA_CalcBaseAndBitshift+0xdc>)
 800aec2:	4c35      	ldr	r4, [pc, #212]	; (800af98 <DMA_CalcBaseAndBitshift+0xe0>)
 800aec4:	42aa      	cmp	r2, r5
 800aec6:	bf18      	it	ne
 800aec8:	429a      	cmpne	r2, r3
 800aeca:	bf0c      	ite	eq
 800aecc:	2301      	moveq	r3, #1
 800aece:	2300      	movne	r3, #0
 800aed0:	428a      	cmp	r2, r1
 800aed2:	bf08      	it	eq
 800aed4:	f043 0301 	orreq.w	r3, r3, #1
 800aed8:	3130      	adds	r1, #48	; 0x30
 800aeda:	42a2      	cmp	r2, r4
 800aedc:	bf08      	it	eq
 800aede:	f043 0301 	orreq.w	r3, r3, #1
 800aee2:	3430      	adds	r4, #48	; 0x30
 800aee4:	428a      	cmp	r2, r1
 800aee6:	bf08      	it	eq
 800aee8:	f043 0301 	orreq.w	r3, r3, #1
 800aeec:	3130      	adds	r1, #48	; 0x30
 800aeee:	42a2      	cmp	r2, r4
 800aef0:	bf08      	it	eq
 800aef2:	f043 0301 	orreq.w	r3, r3, #1
 800aef6:	3430      	adds	r4, #48	; 0x30
 800aef8:	428a      	cmp	r2, r1
 800aefa:	bf08      	it	eq
 800aefc:	f043 0301 	orreq.w	r3, r3, #1
 800af00:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800af04:	42a2      	cmp	r2, r4
 800af06:	bf08      	it	eq
 800af08:	f043 0301 	orreq.w	r3, r3, #1
 800af0c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800af10:	428a      	cmp	r2, r1
 800af12:	bf08      	it	eq
 800af14:	f043 0301 	orreq.w	r3, r3, #1
 800af18:	3130      	adds	r1, #48	; 0x30
 800af1a:	42a2      	cmp	r2, r4
 800af1c:	bf08      	it	eq
 800af1e:	f043 0301 	orreq.w	r3, r3, #1
 800af22:	3430      	adds	r4, #48	; 0x30
 800af24:	428a      	cmp	r2, r1
 800af26:	bf08      	it	eq
 800af28:	f043 0301 	orreq.w	r3, r3, #1
 800af2c:	3130      	adds	r1, #48	; 0x30
 800af2e:	42a2      	cmp	r2, r4
 800af30:	bf08      	it	eq
 800af32:	f043 0301 	orreq.w	r3, r3, #1
 800af36:	3430      	adds	r4, #48	; 0x30
 800af38:	428a      	cmp	r2, r1
 800af3a:	bf08      	it	eq
 800af3c:	f043 0301 	orreq.w	r3, r3, #1
 800af40:	3130      	adds	r1, #48	; 0x30
 800af42:	42a2      	cmp	r2, r4
 800af44:	bf08      	it	eq
 800af46:	f043 0301 	orreq.w	r3, r3, #1
 800af4a:	428a      	cmp	r2, r1
 800af4c:	bf08      	it	eq
 800af4e:	f043 0301 	orreq.w	r3, r3, #1
 800af52:	b913      	cbnz	r3, 800af5a <DMA_CalcBaseAndBitshift+0xa2>
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <DMA_CalcBaseAndBitshift+0xe4>)
 800af56:	429a      	cmp	r2, r3
 800af58:	d113      	bne.n	800af82 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800af5a:	b2d3      	uxtb	r3, r2
 800af5c:	4910      	ldr	r1, [pc, #64]	; (800afa0 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800af5e:	4c11      	ldr	r4, [pc, #68]	; (800afa4 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800af60:	3b10      	subs	r3, #16
 800af62:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800af66:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800af68:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800af6a:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800af6e:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800af72:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800af74:	bf88      	it	hi
 800af76:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800af78:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800af7a:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	bc30      	pop	{r4, r5}
 800af80:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800af82:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800af86:	6583      	str	r3, [r0, #88]	; 0x58
 800af88:	e7f8      	b.n	800af7c <DMA_CalcBaseAndBitshift+0xc4>
 800af8a:	bf00      	nop
 800af8c:	40020010 	.word	0x40020010
 800af90:	40020040 	.word	0x40020040
 800af94:	40020028 	.word	0x40020028
 800af98:	40020058 	.word	0x40020058
 800af9c:	400204b8 	.word	0x400204b8
 800afa0:	aaaaaaab 	.word	0xaaaaaaab
 800afa4:	24009fb4 	.word	0x24009fb4
 800afa8:	fffffc00 	.word	0xfffffc00

0800afac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800afac:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800afae:	4a29      	ldr	r2, [pc, #164]	; (800b054 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800afb0:	4929      	ldr	r1, [pc, #164]	; (800b058 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800afb2:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800afb4:	4d29      	ldr	r5, [pc, #164]	; (800b05c <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800afb6:	4c2a      	ldr	r4, [pc, #168]	; (800b060 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800afb8:	42ab      	cmp	r3, r5
 800afba:	bf18      	it	ne
 800afbc:	4293      	cmpne	r3, r2
 800afbe:	bf0c      	ite	eq
 800afc0:	2201      	moveq	r2, #1
 800afc2:	2200      	movne	r2, #0
 800afc4:	428b      	cmp	r3, r1
 800afc6:	bf08      	it	eq
 800afc8:	f042 0201 	orreq.w	r2, r2, #1
 800afcc:	3128      	adds	r1, #40	; 0x28
 800afce:	42a3      	cmp	r3, r4
 800afd0:	bf08      	it	eq
 800afd2:	f042 0201 	orreq.w	r2, r2, #1
 800afd6:	3428      	adds	r4, #40	; 0x28
 800afd8:	428b      	cmp	r3, r1
 800afda:	bf08      	it	eq
 800afdc:	f042 0201 	orreq.w	r2, r2, #1
 800afe0:	3128      	adds	r1, #40	; 0x28
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	bf08      	it	eq
 800afe6:	f042 0201 	orreq.w	r2, r2, #1
 800afea:	428b      	cmp	r3, r1
 800afec:	bf08      	it	eq
 800afee:	f042 0201 	orreq.w	r2, r2, #1
 800aff2:	b912      	cbnz	r2, 800affa <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800aff4:	4a1b      	ldr	r2, [pc, #108]	; (800b064 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d113      	bne.n	800b022 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800affa:	b2db      	uxtb	r3, r3
 800affc:	4c1a      	ldr	r4, [pc, #104]	; (800b068 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800affe:	4a1b      	ldr	r2, [pc, #108]	; (800b06c <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b000:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b002:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b004:	4d1a      	ldr	r5, [pc, #104]	; (800b070 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b006:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b00a:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b00c:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b010:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b014:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b016:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b01a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b01c:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b01e:	bc30      	pop	{r4, r5}
 800b020:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b022:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b024:	4913      	ldr	r1, [pc, #76]	; (800b074 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b026:	4c14      	ldr	r4, [pc, #80]	; (800b078 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b028:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b02a:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b02c:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b02e:	fba4 2302 	umull	r2, r3, r4, r2
 800b032:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b036:	d800      	bhi.n	800b03a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800b038:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b03a:	4a10      	ldr	r2, [pc, #64]	; (800b07c <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b03c:	f003 051f 	and.w	r5, r3, #31
 800b040:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b042:	4c0f      	ldr	r4, [pc, #60]	; (800b080 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b044:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b046:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b048:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b04a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b04c:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b04e:	6602      	str	r2, [r0, #96]	; 0x60
}
 800b050:	e7e5      	b.n	800b01e <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800b052:	bf00      	nop
 800b054:	58025408 	.word	0x58025408
 800b058:	58025430 	.word	0x58025430
 800b05c:	5802541c 	.word	0x5802541c
 800b060:	58025444 	.word	0x58025444
 800b064:	58025494 	.word	0x58025494
 800b068:	cccccccd 	.word	0xcccccccd
 800b06c:	16009600 	.word	0x16009600
 800b070:	58025880 	.word	0x58025880
 800b074:	bffdfbf0 	.word	0xbffdfbf0
 800b078:	aaaaaaab 	.word	0xaaaaaaab
 800b07c:	10008200 	.word	0x10008200
 800b080:	40020880 	.word	0x40020880

0800b084 <HAL_DMA_Init>:
{
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b088:	f7ff fd30 	bl	800aaec <HAL_GetTick>
  if(hdma == NULL)
 800b08c:	2c00      	cmp	r4, #0
 800b08e:	f000 8177 	beq.w	800b380 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	4605      	mov	r5, r0
 800b096:	4a92      	ldr	r2, [pc, #584]	; (800b2e0 <HAL_DMA_Init+0x25c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d048      	beq.n	800b12e <HAL_DMA_Init+0xaa>
 800b09c:	3218      	adds	r2, #24
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d045      	beq.n	800b12e <HAL_DMA_Init+0xaa>
 800b0a2:	3230      	adds	r2, #48	; 0x30
 800b0a4:	498f      	ldr	r1, [pc, #572]	; (800b2e4 <HAL_DMA_Init+0x260>)
 800b0a6:	428b      	cmp	r3, r1
 800b0a8:	bf18      	it	ne
 800b0aa:	4293      	cmpne	r3, r2
 800b0ac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b0b0:	bf0c      	ite	eq
 800b0b2:	2201      	moveq	r2, #1
 800b0b4:	2200      	movne	r2, #0
 800b0b6:	428b      	cmp	r3, r1
 800b0b8:	bf08      	it	eq
 800b0ba:	f042 0201 	orreq.w	r2, r2, #1
 800b0be:	3118      	adds	r1, #24
 800b0c0:	428b      	cmp	r3, r1
 800b0c2:	bf08      	it	eq
 800b0c4:	f042 0201 	orreq.w	r2, r2, #1
 800b0c8:	3118      	adds	r1, #24
 800b0ca:	428b      	cmp	r3, r1
 800b0cc:	bf08      	it	eq
 800b0ce:	f042 0201 	orreq.w	r2, r2, #1
 800b0d2:	3118      	adds	r1, #24
 800b0d4:	428b      	cmp	r3, r1
 800b0d6:	bf08      	it	eq
 800b0d8:	f042 0201 	orreq.w	r2, r2, #1
 800b0dc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	bf08      	it	eq
 800b0e4:	f042 0201 	orreq.w	r2, r2, #1
 800b0e8:	3118      	adds	r1, #24
 800b0ea:	428b      	cmp	r3, r1
 800b0ec:	bf08      	it	eq
 800b0ee:	f042 0201 	orreq.w	r2, r2, #1
 800b0f2:	3118      	adds	r1, #24
 800b0f4:	428b      	cmp	r3, r1
 800b0f6:	bf08      	it	eq
 800b0f8:	f042 0201 	orreq.w	r2, r2, #1
 800b0fc:	3118      	adds	r1, #24
 800b0fe:	428b      	cmp	r3, r1
 800b100:	bf08      	it	eq
 800b102:	f042 0201 	orreq.w	r2, r2, #1
 800b106:	3118      	adds	r1, #24
 800b108:	428b      	cmp	r3, r1
 800b10a:	bf08      	it	eq
 800b10c:	f042 0201 	orreq.w	r2, r2, #1
 800b110:	3118      	adds	r1, #24
 800b112:	428b      	cmp	r3, r1
 800b114:	bf08      	it	eq
 800b116:	f042 0201 	orreq.w	r2, r2, #1
 800b11a:	3118      	adds	r1, #24
 800b11c:	428b      	cmp	r3, r1
 800b11e:	bf08      	it	eq
 800b120:	f042 0201 	orreq.w	r2, r2, #1
 800b124:	b91a      	cbnz	r2, 800b12e <HAL_DMA_Init+0xaa>
 800b126:	4a70      	ldr	r2, [pc, #448]	; (800b2e8 <HAL_DMA_Init+0x264>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	f040 8198 	bne.w	800b45e <HAL_DMA_Init+0x3da>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b12e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b130:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b132:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800b136:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	f022 0201 	bic.w	r2, r2, #1
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	e006      	b.n	800b152 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b144:	f7ff fcd2 	bl	800aaec <HAL_GetTick>
 800b148:	1b43      	subs	r3, r0, r5
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	f200 80ff 	bhi.w	800b34e <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	07d6      	lsls	r6, r2, #31
 800b156:	d4f5      	bmi.n	800b144 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800b158:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b15c:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800b15e:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b160:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b162:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b164:	4302      	orrs	r2, r0
 800b166:	6960      	ldr	r0, [r4, #20]
 800b168:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b16a:	69e0      	ldr	r0, [r4, #28]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b170:	485e      	ldr	r0, [pc, #376]	; (800b2ec <HAL_DMA_Init+0x268>)
 800b172:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800b174:	6a25      	ldr	r5, [r4, #32]
 800b176:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b178:	4d5d      	ldr	r5, [pc, #372]	; (800b2f0 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800b17a:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b17c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b17e:	2804      	cmp	r0, #4
 800b180:	f000 8100 	beq.w	800b384 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b184:	682e      	ldr	r6, [r5, #0]
 800b186:	4d5b      	ldr	r5, [pc, #364]	; (800b2f4 <HAL_DMA_Init+0x270>)
 800b188:	4035      	ands	r5, r6
 800b18a:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800b18e:	f080 80bb 	bcs.w	800b308 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b192:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b194:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b196:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b19a:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b19c:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff fe8a 	bl	800aeb8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b1a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b1a6:	233f      	movs	r3, #63	; 0x3f
 800b1a8:	f002 021f 	and.w	r2, r2, #31
 800b1ac:	4093      	lsls	r3, r2
 800b1ae:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	4b4b      	ldr	r3, [pc, #300]	; (800b2e0 <HAL_DMA_Init+0x25c>)
 800b1b4:	4850      	ldr	r0, [pc, #320]	; (800b2f8 <HAL_DMA_Init+0x274>)
 800b1b6:	494b      	ldr	r1, [pc, #300]	; (800b2e4 <HAL_DMA_Init+0x260>)
 800b1b8:	4282      	cmp	r2, r0
 800b1ba:	bf18      	it	ne
 800b1bc:	429a      	cmpne	r2, r3
 800b1be:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800b1c2:	bf0c      	ite	eq
 800b1c4:	2301      	moveq	r3, #1
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	bf08      	it	eq
 800b1cc:	f043 0301 	orreq.w	r3, r3, #1
 800b1d0:	3130      	adds	r1, #48	; 0x30
 800b1d2:	4282      	cmp	r2, r0
 800b1d4:	bf08      	it	eq
 800b1d6:	f043 0301 	orreq.w	r3, r3, #1
 800b1da:	3030      	adds	r0, #48	; 0x30
 800b1dc:	428a      	cmp	r2, r1
 800b1de:	bf08      	it	eq
 800b1e0:	f043 0301 	orreq.w	r3, r3, #1
 800b1e4:	3130      	adds	r1, #48	; 0x30
 800b1e6:	4282      	cmp	r2, r0
 800b1e8:	bf08      	it	eq
 800b1ea:	f043 0301 	orreq.w	r3, r3, #1
 800b1ee:	3030      	adds	r0, #48	; 0x30
 800b1f0:	428a      	cmp	r2, r1
 800b1f2:	bf08      	it	eq
 800b1f4:	f043 0301 	orreq.w	r3, r3, #1
 800b1f8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b1fc:	4282      	cmp	r2, r0
 800b1fe:	bf08      	it	eq
 800b200:	f043 0301 	orreq.w	r3, r3, #1
 800b204:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800b208:	428a      	cmp	r2, r1
 800b20a:	bf08      	it	eq
 800b20c:	f043 0301 	orreq.w	r3, r3, #1
 800b210:	3130      	adds	r1, #48	; 0x30
 800b212:	4282      	cmp	r2, r0
 800b214:	bf08      	it	eq
 800b216:	f043 0301 	orreq.w	r3, r3, #1
 800b21a:	3030      	adds	r0, #48	; 0x30
 800b21c:	428a      	cmp	r2, r1
 800b21e:	bf08      	it	eq
 800b220:	f043 0301 	orreq.w	r3, r3, #1
 800b224:	3130      	adds	r1, #48	; 0x30
 800b226:	4282      	cmp	r2, r0
 800b228:	bf08      	it	eq
 800b22a:	f043 0301 	orreq.w	r3, r3, #1
 800b22e:	3030      	adds	r0, #48	; 0x30
 800b230:	428a      	cmp	r2, r1
 800b232:	bf08      	it	eq
 800b234:	f043 0301 	orreq.w	r3, r3, #1
 800b238:	3130      	adds	r1, #48	; 0x30
 800b23a:	4282      	cmp	r2, r0
 800b23c:	bf08      	it	eq
 800b23e:	f043 0301 	orreq.w	r3, r3, #1
 800b242:	3030      	adds	r0, #48	; 0x30
 800b244:	428a      	cmp	r2, r1
 800b246:	bf08      	it	eq
 800b248:	f043 0301 	orreq.w	r3, r3, #1
 800b24c:	492b      	ldr	r1, [pc, #172]	; (800b2fc <HAL_DMA_Init+0x278>)
 800b24e:	4282      	cmp	r2, r0
 800b250:	bf08      	it	eq
 800b252:	f043 0301 	orreq.w	r3, r3, #1
 800b256:	482a      	ldr	r0, [pc, #168]	; (800b300 <HAL_DMA_Init+0x27c>)
 800b258:	428a      	cmp	r2, r1
 800b25a:	bf08      	it	eq
 800b25c:	f043 0301 	orreq.w	r3, r3, #1
 800b260:	3128      	adds	r1, #40	; 0x28
 800b262:	4282      	cmp	r2, r0
 800b264:	bf08      	it	eq
 800b266:	f043 0301 	orreq.w	r3, r3, #1
 800b26a:	3028      	adds	r0, #40	; 0x28
 800b26c:	428a      	cmp	r2, r1
 800b26e:	bf08      	it	eq
 800b270:	f043 0301 	orreq.w	r3, r3, #1
 800b274:	3128      	adds	r1, #40	; 0x28
 800b276:	4282      	cmp	r2, r0
 800b278:	bf08      	it	eq
 800b27a:	f043 0301 	orreq.w	r3, r3, #1
 800b27e:	3028      	adds	r0, #40	; 0x28
 800b280:	428a      	cmp	r2, r1
 800b282:	bf08      	it	eq
 800b284:	f043 0301 	orreq.w	r3, r3, #1
 800b288:	3128      	adds	r1, #40	; 0x28
 800b28a:	4282      	cmp	r2, r0
 800b28c:	bf08      	it	eq
 800b28e:	f043 0301 	orreq.w	r3, r3, #1
 800b292:	428a      	cmp	r2, r1
 800b294:	bf08      	it	eq
 800b296:	f043 0301 	orreq.w	r3, r3, #1
 800b29a:	b913      	cbnz	r3, 800b2a2 <HAL_DMA_Init+0x21e>
 800b29c:	4b19      	ldr	r3, [pc, #100]	; (800b304 <HAL_DMA_Init+0x280>)
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d118      	bne.n	800b2d4 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7ff fe82 	bl	800afac <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	2b80      	cmp	r3, #128	; 0x80
 800b2ac:	d05c      	beq.n	800b368 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b2ae:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2b0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b2b2:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b2b4:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2b6:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b2ba:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b2bc:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2be:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b2c0:	d859      	bhi.n	800b376 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b2c2:	1e50      	subs	r0, r2, #1
 800b2c4:	2807      	cmp	r0, #7
 800b2c6:	d96e      	bls.n	800b3a6 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2c8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b2ca:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2d2:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2d4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800b2d6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2d8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800b2da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e0:	40020010 	.word	0x40020010
 800b2e4:	40020040 	.word	0x40020040
 800b2e8:	400204b8 	.word	0x400204b8
 800b2ec:	fe10803f 	.word	0xfe10803f
 800b2f0:	5c001000 	.word	0x5c001000
 800b2f4:	ffff0000 	.word	0xffff0000
 800b2f8:	40020028 	.word	0x40020028
 800b2fc:	58025408 	.word	0x58025408
 800b300:	5802541c 	.word	0x5802541c
 800b304:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b308:	6865      	ldr	r5, [r4, #4]
 800b30a:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 800b30e:	2e1f      	cmp	r6, #31
 800b310:	d924      	bls.n	800b35c <HAL_DMA_Init+0x2d8>
 800b312:	3d4f      	subs	r5, #79	; 0x4f
 800b314:	2d03      	cmp	r5, #3
 800b316:	d801      	bhi.n	800b31c <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 800b318:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b31c:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b31e:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b320:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b322:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b326:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b32a:	f47f af37 	bne.w	800b19c <HAL_DMA_Init+0x118>
 800b32e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800b330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b332:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b334:	2d00      	cmp	r5, #0
 800b336:	f43f af31 	beq.w	800b19c <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b33a:	2900      	cmp	r1, #0
 800b33c:	d169      	bne.n	800b412 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800b33e:	2801      	cmp	r0, #1
 800b340:	f000 8088 	beq.w	800b454 <HAL_DMA_Init+0x3d0>
 800b344:	f030 0102 	bics.w	r1, r0, #2
 800b348:	f47f af28 	bne.w	800b19c <HAL_DMA_Init+0x118>
 800b34c:	e069      	b.n	800b422 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b34e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800b350:	2303      	movs	r3, #3
        return HAL_ERROR;
 800b352:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b354:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800b356:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b35c:	4d73      	ldr	r5, [pc, #460]	; (800b52c <HAL_DMA_Init+0x4a8>)
 800b35e:	fa25 f606 	lsr.w	r6, r5, r6
 800b362:	07f5      	lsls	r5, r6, #31
 800b364:	d5da      	bpl.n	800b31c <HAL_DMA_Init+0x298>
 800b366:	e7d7      	b.n	800b318 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b368:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b36a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b36c:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b370:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b372:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b374:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800b376:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800b378:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b37c:	6763      	str	r3, [r4, #116]	; 0x74
 800b37e:	e7a9      	b.n	800b2d4 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800b380:	2001      	movs	r0, #1
}
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b384:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b386:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 800b38a:	432e      	orrs	r6, r5
 800b38c:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b38e:	4e68      	ldr	r6, [pc, #416]	; (800b530 <HAL_DMA_Init+0x4ac>)
 800b390:	403e      	ands	r6, r7
 800b392:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800b396:	d2b7      	bcs.n	800b308 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b398:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b39a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b39c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b3a0:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b3a4:	e7c4      	b.n	800b330 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b3a6:	6821      	ldr	r1, [r4, #0]
 800b3a8:	4b62      	ldr	r3, [pc, #392]	; (800b534 <HAL_DMA_Init+0x4b0>)
 800b3aa:	4d63      	ldr	r5, [pc, #396]	; (800b538 <HAL_DMA_Init+0x4b4>)
 800b3ac:	42a9      	cmp	r1, r5
 800b3ae:	bf18      	it	ne
 800b3b0:	4299      	cmpne	r1, r3
 800b3b2:	f105 0514 	add.w	r5, r5, #20
 800b3b6:	bf0c      	ite	eq
 800b3b8:	2301      	moveq	r3, #1
 800b3ba:	2300      	movne	r3, #0
 800b3bc:	42a9      	cmp	r1, r5
 800b3be:	bf08      	it	eq
 800b3c0:	f043 0301 	orreq.w	r3, r3, #1
 800b3c4:	3514      	adds	r5, #20
 800b3c6:	42a9      	cmp	r1, r5
 800b3c8:	bf08      	it	eq
 800b3ca:	f043 0301 	orreq.w	r3, r3, #1
 800b3ce:	3514      	adds	r5, #20
 800b3d0:	42a9      	cmp	r1, r5
 800b3d2:	bf08      	it	eq
 800b3d4:	f043 0301 	orreq.w	r3, r3, #1
 800b3d8:	3514      	adds	r5, #20
 800b3da:	42a9      	cmp	r1, r5
 800b3dc:	bf08      	it	eq
 800b3de:	f043 0301 	orreq.w	r3, r3, #1
 800b3e2:	3514      	adds	r5, #20
 800b3e4:	42a9      	cmp	r1, r5
 800b3e6:	bf08      	it	eq
 800b3e8:	f043 0301 	orreq.w	r3, r3, #1
 800b3ec:	b93b      	cbnz	r3, 800b3fe <HAL_DMA_Init+0x37a>
 800b3ee:	4b53      	ldr	r3, [pc, #332]	; (800b53c <HAL_DMA_Init+0x4b8>)
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	d004      	beq.n	800b3fe <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3f4:	4b52      	ldr	r3, [pc, #328]	; (800b540 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b3f6:	4953      	ldr	r1, [pc, #332]	; (800b544 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b3fc:	e003      	b.n	800b406 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3fe:	4b52      	ldr	r3, [pc, #328]	; (800b548 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b400:	4952      	ldr	r1, [pc, #328]	; (800b54c <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b406:	2201      	movs	r2, #1
 800b408:	4082      	lsls	r2, r0
 800b40a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800b40e:	6762      	str	r2, [r4, #116]	; 0x74
 800b410:	e75d      	b.n	800b2ce <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b412:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b416:	d00e      	beq.n	800b436 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 800b418:	2802      	cmp	r0, #2
 800b41a:	d905      	bls.n	800b428 <HAL_DMA_Init+0x3a4>
 800b41c:	2803      	cmp	r0, #3
 800b41e:	f47f aebd 	bne.w	800b19c <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b422:	01e9      	lsls	r1, r5, #7
 800b424:	f57f aeba 	bpl.w	800b19c <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 800b428:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b42a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800b42c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b42e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800b430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 800b436:	2803      	cmp	r0, #3
 800b438:	f63f aeb0 	bhi.w	800b19c <HAL_DMA_Init+0x118>
 800b43c:	a101      	add	r1, pc, #4	; (adr r1, 800b444 <HAL_DMA_Init+0x3c0>)
 800b43e:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b429 	.word	0x0800b429
 800b448:	0800b423 	.word	0x0800b423
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b455 	.word	0x0800b455
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b454:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800b458:	f47f aea0 	bne.w	800b19c <HAL_DMA_Init+0x118>
 800b45c:	e7e4      	b.n	800b428 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b45e:	4a35      	ldr	r2, [pc, #212]	; (800b534 <HAL_DMA_Init+0x4b0>)
 800b460:	4835      	ldr	r0, [pc, #212]	; (800b538 <HAL_DMA_Init+0x4b4>)
 800b462:	493b      	ldr	r1, [pc, #236]	; (800b550 <HAL_DMA_Init+0x4cc>)
 800b464:	4283      	cmp	r3, r0
 800b466:	bf18      	it	ne
 800b468:	4293      	cmpne	r3, r2
 800b46a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800b46e:	bf0c      	ite	eq
 800b470:	2201      	moveq	r2, #1
 800b472:	2200      	movne	r2, #0
 800b474:	428b      	cmp	r3, r1
 800b476:	bf08      	it	eq
 800b478:	f042 0201 	orreq.w	r2, r2, #1
 800b47c:	3128      	adds	r1, #40	; 0x28
 800b47e:	4283      	cmp	r3, r0
 800b480:	bf08      	it	eq
 800b482:	f042 0201 	orreq.w	r2, r2, #1
 800b486:	3028      	adds	r0, #40	; 0x28
 800b488:	428b      	cmp	r3, r1
 800b48a:	bf08      	it	eq
 800b48c:	f042 0201 	orreq.w	r2, r2, #1
 800b490:	3128      	adds	r1, #40	; 0x28
 800b492:	4283      	cmp	r3, r0
 800b494:	bf08      	it	eq
 800b496:	f042 0201 	orreq.w	r2, r2, #1
 800b49a:	428b      	cmp	r3, r1
 800b49c:	bf08      	it	eq
 800b49e:	f042 0201 	orreq.w	r2, r2, #1
 800b4a2:	b912      	cbnz	r2, 800b4aa <HAL_DMA_Init+0x426>
 800b4a4:	4a25      	ldr	r2, [pc, #148]	; (800b53c <HAL_DMA_Init+0x4b8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d138      	bne.n	800b51c <HAL_DMA_Init+0x498>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4aa:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b4ac:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b4ae:	4d29      	ldr	r5, [pc, #164]	; (800b554 <HAL_DMA_Init+0x4d0>)
    __HAL_UNLOCK(hdma);
 800b4b0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4b4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b4b8:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b4ba:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b4bc:	68a2      	ldr	r2, [r4, #8]
 800b4be:	2a40      	cmp	r2, #64	; 0x40
 800b4c0:	d02a      	beq.n	800b518 <HAL_DMA_Init+0x494>
 800b4c2:	2a80      	cmp	r2, #128	; 0x80
 800b4c4:	bf0c      	ite	eq
 800b4c6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800b4ca:	4608      	movne	r0, r1
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b4cc:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b4ce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b4d2:	08d2      	lsrs	r2, r2, #3
 800b4d4:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b4d8:	6961      	ldr	r1, [r4, #20]
 800b4da:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b4de:	69a1      	ldr	r1, [r4, #24]
 800b4e0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b4e4:	69e1      	ldr	r1, [r4, #28]
 800b4e6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b4ea:	491b      	ldr	r1, [pc, #108]	; (800b558 <HAL_DMA_Init+0x4d4>)
 800b4ec:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 800b4f0:	4419      	add	r1, r3
 800b4f2:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b4f4:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b4f6:	4819      	ldr	r0, [pc, #100]	; (800b55c <HAL_DMA_Init+0x4d8>)
 800b4f8:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b4fc:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b4fe:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b500:	090b      	lsrs	r3, r1, #4
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b506:	f7ff fcd7 	bl	800aeb8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b50a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b50c:	2301      	movs	r3, #1
 800b50e:	f002 021f 	and.w	r2, r2, #31
 800b512:	4093      	lsls	r3, r2
 800b514:	6043      	str	r3, [r0, #4]
 800b516:	e64b      	b.n	800b1b0 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b518:	2010      	movs	r0, #16
 800b51a:	e7d7      	b.n	800b4cc <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b51c:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b51e:	2303      	movs	r3, #3
    return HAL_ERROR;
 800b520:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b522:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b524:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	c3c0003f 	.word	0xc3c0003f
 800b530:	ffff0000 	.word	0xffff0000
 800b534:	58025408 	.word	0x58025408
 800b538:	5802541c 	.word	0x5802541c
 800b53c:	58025494 	.word	0x58025494
 800b540:	1000823f 	.word	0x1000823f
 800b544:	40020940 	.word	0x40020940
 800b548:	1600963f 	.word	0x1600963f
 800b54c:	58025940 	.word	0x58025940
 800b550:	58025430 	.word	0x58025430
 800b554:	fffe000f 	.word	0xfffe000f
 800b558:	a7fdabf8 	.word	0xa7fdabf8
 800b55c:	cccccccd 	.word	0xcccccccd

0800b560 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800b560:	2800      	cmp	r0, #0
 800b562:	f000 80f3 	beq.w	800b74c <HAL_DMA_DeInit+0x1ec>
  __HAL_DMA_DISABLE(hdma);
 800b566:	6802      	ldr	r2, [r0, #0]
 800b568:	497c      	ldr	r1, [pc, #496]	; (800b75c <HAL_DMA_DeInit+0x1fc>)
{
 800b56a:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 800b56c:	4b7c      	ldr	r3, [pc, #496]	; (800b760 <HAL_DMA_DeInit+0x200>)
 800b56e:	4604      	mov	r4, r0
 800b570:	487c      	ldr	r0, [pc, #496]	; (800b764 <HAL_DMA_DeInit+0x204>)
 800b572:	4282      	cmp	r2, r0
 800b574:	bf18      	it	ne
 800b576:	429a      	cmpne	r2, r3
 800b578:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800b57c:	bf0c      	ite	eq
 800b57e:	2301      	moveq	r3, #1
 800b580:	2300      	movne	r3, #0
 800b582:	428a      	cmp	r2, r1
 800b584:	bf08      	it	eq
 800b586:	f043 0301 	orreq.w	r3, r3, #1
 800b58a:	3130      	adds	r1, #48	; 0x30
 800b58c:	4282      	cmp	r2, r0
 800b58e:	bf08      	it	eq
 800b590:	f043 0301 	orreq.w	r3, r3, #1
 800b594:	3030      	adds	r0, #48	; 0x30
 800b596:	428a      	cmp	r2, r1
 800b598:	bf08      	it	eq
 800b59a:	f043 0301 	orreq.w	r3, r3, #1
 800b59e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b5a2:	4282      	cmp	r2, r0
 800b5a4:	bf08      	it	eq
 800b5a6:	f043 0301 	orreq.w	r3, r3, #1
 800b5aa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800b5ae:	428a      	cmp	r2, r1
 800b5b0:	bf08      	it	eq
 800b5b2:	f043 0301 	orreq.w	r3, r3, #1
 800b5b6:	3130      	adds	r1, #48	; 0x30
 800b5b8:	4282      	cmp	r2, r0
 800b5ba:	bf08      	it	eq
 800b5bc:	f043 0301 	orreq.w	r3, r3, #1
 800b5c0:	3030      	adds	r0, #48	; 0x30
 800b5c2:	428a      	cmp	r2, r1
 800b5c4:	bf08      	it	eq
 800b5c6:	f043 0301 	orreq.w	r3, r3, #1
 800b5ca:	3130      	adds	r1, #48	; 0x30
 800b5cc:	4282      	cmp	r2, r0
 800b5ce:	bf08      	it	eq
 800b5d0:	f043 0301 	orreq.w	r3, r3, #1
 800b5d4:	3030      	adds	r0, #48	; 0x30
 800b5d6:	428a      	cmp	r2, r1
 800b5d8:	bf08      	it	eq
 800b5da:	f043 0301 	orreq.w	r3, r3, #1
 800b5de:	3130      	adds	r1, #48	; 0x30
 800b5e0:	4282      	cmp	r2, r0
 800b5e2:	bf08      	it	eq
 800b5e4:	f043 0301 	orreq.w	r3, r3, #1
 800b5e8:	428a      	cmp	r2, r1
 800b5ea:	bf08      	it	eq
 800b5ec:	f043 0301 	orreq.w	r3, r3, #1
 800b5f0:	3118      	adds	r1, #24
 800b5f2:	428a      	cmp	r2, r1
 800b5f4:	bf08      	it	eq
 800b5f6:	f043 0301 	orreq.w	r3, r3, #1
 800b5fa:	b933      	cbnz	r3, 800b60a <HAL_DMA_DeInit+0xaa>
 800b5fc:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800b600:	4b59      	ldr	r3, [pc, #356]	; (800b768 <HAL_DMA_DeInit+0x208>)
 800b602:	429a      	cmp	r2, r3
 800b604:	bf18      	it	ne
 800b606:	428a      	cmpne	r2, r1
 800b608:	d165      	bne.n	800b6d6 <HAL_DMA_DeInit+0x176>
 800b60a:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b60c:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b60e:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b610:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 800b612:	f021 0101 	bic.w	r1, r1, #1
 800b616:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b618:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800b61a:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800b61c:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800b61e:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800b620:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b622:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b624:	f7ff fc48 	bl	800aeb8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b628:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b62a:	233f      	movs	r3, #63	; 0x3f
 800b62c:	f002 021f 	and.w	r2, r2, #31
 800b630:	4093      	lsls	r3, r2
 800b632:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b634:	4620      	mov	r0, r4
 800b636:	f7ff fcb9 	bl	800afac <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800b63a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b63c:	b123      	cbz	r3, 800b648 <HAL_DMA_DeInit+0xe8>
      hdma->DMAmuxChannel->CCR = 0U;
 800b63e:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b640:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800b644:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b646:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b648:	6861      	ldr	r1, [r4, #4]
 800b64a:	1e4b      	subs	r3, r1, #1
 800b64c:	2b07      	cmp	r3, #7
 800b64e:	d910      	bls.n	800b672 <HAL_DMA_DeInit+0x112>
    hdma->DMAmuxRequestGen = 0U;
 800b650:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b652:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800b654:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b656:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800b658:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800b65c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800b660:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800b664:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800b668:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800b66c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800b670:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b672:	6820      	ldr	r0, [r4, #0]
 800b674:	4a3d      	ldr	r2, [pc, #244]	; (800b76c <HAL_DMA_DeInit+0x20c>)
 800b676:	4d3e      	ldr	r5, [pc, #248]	; (800b770 <HAL_DMA_DeInit+0x210>)
 800b678:	42a8      	cmp	r0, r5
 800b67a:	bf18      	it	ne
 800b67c:	4290      	cmpne	r0, r2
 800b67e:	f105 0514 	add.w	r5, r5, #20
 800b682:	bf0c      	ite	eq
 800b684:	2201      	moveq	r2, #1
 800b686:	2200      	movne	r2, #0
 800b688:	42a8      	cmp	r0, r5
 800b68a:	bf08      	it	eq
 800b68c:	f042 0201 	orreq.w	r2, r2, #1
 800b690:	3514      	adds	r5, #20
 800b692:	42a8      	cmp	r0, r5
 800b694:	bf08      	it	eq
 800b696:	f042 0201 	orreq.w	r2, r2, #1
 800b69a:	3514      	adds	r5, #20
 800b69c:	42a8      	cmp	r0, r5
 800b69e:	bf08      	it	eq
 800b6a0:	f042 0201 	orreq.w	r2, r2, #1
 800b6a4:	3514      	adds	r5, #20
 800b6a6:	42a8      	cmp	r0, r5
 800b6a8:	bf08      	it	eq
 800b6aa:	f042 0201 	orreq.w	r2, r2, #1
 800b6ae:	3514      	adds	r5, #20
 800b6b0:	42a8      	cmp	r0, r5
 800b6b2:	bf08      	it	eq
 800b6b4:	f042 0201 	orreq.w	r2, r2, #1
 800b6b8:	b912      	cbnz	r2, 800b6c0 <HAL_DMA_DeInit+0x160>
 800b6ba:	4a2e      	ldr	r2, [pc, #184]	; (800b774 <HAL_DMA_DeInit+0x214>)
 800b6bc:	4290      	cmp	r0, r2
 800b6be:	d147      	bne.n	800b750 <HAL_DMA_DeInit+0x1f0>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b6c0:	4a2d      	ldr	r2, [pc, #180]	; (800b778 <HAL_DMA_DeInit+0x218>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b6c2:	482e      	ldr	r0, [pc, #184]	; (800b77c <HAL_DMA_DeInit+0x21c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b6c4:	440a      	add	r2, r1
 800b6c6:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b6d2:	6043      	str	r3, [r0, #4]
 800b6d4:	e7bc      	b.n	800b650 <HAL_DMA_DeInit+0xf0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b6d6:	4b25      	ldr	r3, [pc, #148]	; (800b76c <HAL_DMA_DeInit+0x20c>)
 800b6d8:	4d25      	ldr	r5, [pc, #148]	; (800b770 <HAL_DMA_DeInit+0x210>)
 800b6da:	4829      	ldr	r0, [pc, #164]	; (800b780 <HAL_DMA_DeInit+0x220>)
 800b6dc:	42aa      	cmp	r2, r5
 800b6de:	bf18      	it	ne
 800b6e0:	429a      	cmpne	r2, r3
  __HAL_DMA_DISABLE(hdma);
 800b6e2:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800b6ea:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b6ee:	4282      	cmp	r2, r0
 800b6f0:	bf08      	it	eq
 800b6f2:	f043 0301 	orreq.w	r3, r3, #1
 800b6f6:	3014      	adds	r0, #20
  __HAL_DMA_DISABLE(hdma);
 800b6f8:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b6fa:	4282      	cmp	r2, r0
 800b6fc:	bf08      	it	eq
 800b6fe:	f043 0301 	orreq.w	r3, r3, #1
 800b702:	4920      	ldr	r1, [pc, #128]	; (800b784 <HAL_DMA_DeInit+0x224>)
 800b704:	3028      	adds	r0, #40	; 0x28
 800b706:	428a      	cmp	r2, r1
 800b708:	bf08      	it	eq
 800b70a:	f043 0301 	orreq.w	r3, r3, #1
 800b70e:	3128      	adds	r1, #40	; 0x28
 800b710:	4282      	cmp	r2, r0
 800b712:	bf08      	it	eq
 800b714:	f043 0301 	orreq.w	r3, r3, #1
 800b718:	428a      	cmp	r2, r1
 800b71a:	bf08      	it	eq
 800b71c:	f043 0301 	orreq.w	r3, r3, #1
 800b720:	b913      	cbnz	r3, 800b728 <HAL_DMA_DeInit+0x1c8>
 800b722:	4b14      	ldr	r3, [pc, #80]	; (800b774 <HAL_DMA_DeInit+0x214>)
 800b724:	429a      	cmp	r2, r3
 800b726:	d10f      	bne.n	800b748 <HAL_DMA_DeInit+0x1e8>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b728:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b72a:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b72c:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800b72e:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800b730:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800b732:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800b734:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b736:	f7ff fbbf 	bl	800aeb8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b73a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b73c:	2301      	movs	r3, #1
 800b73e:	f002 021f 	and.w	r2, r2, #31
 800b742:	4093      	lsls	r3, r2
 800b744:	6043      	str	r3, [r0, #4]
 800b746:	e775      	b.n	800b634 <HAL_DMA_DeInit+0xd4>
    return HAL_ERROR;
 800b748:	2001      	movs	r0, #1
}
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b74c:	2001      	movs	r0, #1
}
 800b74e:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b750:	4a0d      	ldr	r2, [pc, #52]	; (800b788 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b752:	480e      	ldr	r0, [pc, #56]	; (800b78c <HAL_DMA_DeInit+0x22c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b754:	440a      	add	r2, r1
 800b756:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b758:	e7b6      	b.n	800b6c8 <HAL_DMA_DeInit+0x168>
 800b75a:	bf00      	nop
 800b75c:	40020070 	.word	0x40020070
 800b760:	40020058 	.word	0x40020058
 800b764:	40020040 	.word	0x40020040
 800b768:	40020028 	.word	0x40020028
 800b76c:	58025408 	.word	0x58025408
 800b770:	5802541c 	.word	0x5802541c
 800b774:	58025494 	.word	0x58025494
 800b778:	1600963f 	.word	0x1600963f
 800b77c:	58025940 	.word	0x58025940
 800b780:	58025430 	.word	0x58025430
 800b784:	58025458 	.word	0x58025458
 800b788:	1000823f 	.word	0x1000823f
 800b78c:	40020940 	.word	0x40020940

0800b790 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800b790:	2800      	cmp	r0, #0
 800b792:	f000 8177 	beq.w	800ba84 <HAL_DMA_Start_IT+0x2f4>
 800b796:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 800b798:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800b79c:	2801      	cmp	r0, #1
 800b79e:	f000 8173 	beq.w	800ba88 <HAL_DMA_Start_IT+0x2f8>
 800b7a2:	2001      	movs	r0, #1
{
 800b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 800b7a8:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800b7ac:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b7b0:	4284      	cmp	r4, r0
 800b7b2:	d008      	beq.n	800b7c6 <HAL_DMA_Start_IT+0x36>
    __HAL_UNLOCK(hdma);
 800b7b4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b7b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800b7ba:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b7be:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
}
 800b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7c6:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800b7c8:	f8dc 4000 	ldr.w	r4, [ip]
 800b7cc:	4d53      	ldr	r5, [pc, #332]	; (800b91c <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7ce:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7d2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800b7d4:	4e52      	ldr	r6, [pc, #328]	; (800b920 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7d6:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800b7da:	4852      	ldr	r0, [pc, #328]	; (800b924 <HAL_DMA_Start_IT+0x194>)
 800b7dc:	42ac      	cmp	r4, r5
 800b7de:	bf18      	it	ne
 800b7e0:	4284      	cmpne	r4, r0
 800b7e2:	f105 0518 	add.w	r5, r5, #24
 800b7e6:	bf0c      	ite	eq
 800b7e8:	2001      	moveq	r0, #1
 800b7ea:	2000      	movne	r0, #0
 800b7ec:	42ac      	cmp	r4, r5
 800b7ee:	bf08      	it	eq
 800b7f0:	f040 0001 	orreq.w	r0, r0, #1
 800b7f4:	3518      	adds	r5, #24
 800b7f6:	42ac      	cmp	r4, r5
 800b7f8:	bf08      	it	eq
 800b7fa:	f040 0001 	orreq.w	r0, r0, #1
 800b7fe:	3518      	adds	r5, #24
 800b800:	42ac      	cmp	r4, r5
 800b802:	bf08      	it	eq
 800b804:	f040 0001 	orreq.w	r0, r0, #1
 800b808:	3518      	adds	r5, #24
 800b80a:	42ac      	cmp	r4, r5
 800b80c:	bf08      	it	eq
 800b80e:	f040 0001 	orreq.w	r0, r0, #1
 800b812:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800b816:	42ac      	cmp	r4, r5
 800b818:	bf08      	it	eq
 800b81a:	f040 0001 	orreq.w	r0, r0, #1
 800b81e:	3518      	adds	r5, #24
 800b820:	42ac      	cmp	r4, r5
 800b822:	bf08      	it	eq
 800b824:	f040 0001 	orreq.w	r0, r0, #1
 800b828:	3518      	adds	r5, #24
 800b82a:	42ac      	cmp	r4, r5
 800b82c:	bf08      	it	eq
 800b82e:	f040 0001 	orreq.w	r0, r0, #1
 800b832:	3518      	adds	r5, #24
 800b834:	42ac      	cmp	r4, r5
 800b836:	bf08      	it	eq
 800b838:	f040 0001 	orreq.w	r0, r0, #1
 800b83c:	3518      	adds	r5, #24
 800b83e:	42ac      	cmp	r4, r5
 800b840:	bf08      	it	eq
 800b842:	f040 0001 	orreq.w	r0, r0, #1
 800b846:	3518      	adds	r5, #24
 800b848:	42ac      	cmp	r4, r5
 800b84a:	bf08      	it	eq
 800b84c:	f040 0001 	orreq.w	r0, r0, #1
 800b850:	3518      	adds	r5, #24
 800b852:	42ac      	cmp	r4, r5
 800b854:	bf08      	it	eq
 800b856:	f040 0001 	orreq.w	r0, r0, #1
 800b85a:	3518      	adds	r5, #24
 800b85c:	42ac      	cmp	r4, r5
 800b85e:	bf14      	ite	ne
 800b860:	4681      	movne	r9, r0
 800b862:	f040 0901 	orreq.w	r9, r0, #1
 800b866:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 800b86a:	42ac      	cmp	r4, r5
 800b86c:	bf18      	it	ne
 800b86e:	42b4      	cmpne	r4, r6
 800b870:	bf0c      	ite	eq
 800b872:	2501      	moveq	r5, #1
 800b874:	2500      	movne	r5, #0
 800b876:	d002      	beq.n	800b87e <HAL_DMA_Start_IT+0xee>
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	d054      	beq.n	800b928 <HAL_DMA_Start_IT+0x198>
 800b87e:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b880:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800b884:	f026 0601 	bic.w	r6, r6, #1
 800b888:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	d078      	beq.n	800b980 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b88e:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800b892:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b894:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800b898:	b117      	cbz	r7, 800b8a0 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b89a:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800b89e:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b8a0:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800b8a4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800b8a8:	f006 081f 	and.w	r8, r6, #31
 800b8ac:	fa0e fe08 	lsl.w	lr, lr, r8
 800b8b0:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b8b4:	6826      	ldr	r6, [r4, #0]
 800b8b6:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800b8ba:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b8bc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8be:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	f000 80e2 	beq.w	800ba8c <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b8c8:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b8ca:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8cc:	b91d      	cbnz	r5, 800b8d6 <HAL_DMA_Start_IT+0x146>
 800b8ce:	f1b9 0f00 	cmp.w	r9, #0
 800b8d2:	f000 80e1 	beq.w	800ba98 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	f023 031e 	bic.w	r3, r3, #30
 800b8dc:	f043 0316 	orr.w	r3, r3, #22
 800b8e0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b8e2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800b8e6:	b11b      	cbz	r3, 800b8f0 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	f043 0308 	orr.w	r3, r3, #8
 800b8ee:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b8f0:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	03d2      	lsls	r2, r2, #15
 800b8f8:	d503      	bpl.n	800b902 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b900:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800b902:	b11f      	cbz	r7, 800b90c <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b90a:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 800b90c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b90e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800b910:	f043 0301 	orr.w	r3, r3, #1
 800b914:	6023      	str	r3, [r4, #0]
}
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	bf00      	nop
 800b91c:	40020058 	.word	0x40020058
 800b920:	40020010 	.word	0x40020010
 800b924:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b928:	4f61      	ldr	r7, [pc, #388]	; (800bab0 <HAL_DMA_Start_IT+0x320>)
 800b92a:	4e62      	ldr	r6, [pc, #392]	; (800bab4 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b92c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b930:	42b4      	cmp	r4, r6
 800b932:	bf18      	it	ne
 800b934:	42bc      	cmpne	r4, r7
 800b936:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b93a:	bf0c      	ite	eq
 800b93c:	2701      	moveq	r7, #1
 800b93e:	2700      	movne	r7, #0
 800b940:	42b4      	cmp	r4, r6
 800b942:	bf08      	it	eq
 800b944:	f047 0701 	orreq.w	r7, r7, #1
 800b948:	3614      	adds	r6, #20
 800b94a:	42b4      	cmp	r4, r6
 800b94c:	bf08      	it	eq
 800b94e:	f047 0701 	orreq.w	r7, r7, #1
 800b952:	3614      	adds	r6, #20
 800b954:	42b4      	cmp	r4, r6
 800b956:	bf08      	it	eq
 800b958:	f047 0701 	orreq.w	r7, r7, #1
 800b95c:	3614      	adds	r6, #20
 800b95e:	42b4      	cmp	r4, r6
 800b960:	bf08      	it	eq
 800b962:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800b966:	6826      	ldr	r6, [r4, #0]
 800b968:	f026 0601 	bic.w	r6, r6, #1
 800b96c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b96e:	4e52      	ldr	r6, [pc, #328]	; (800bab8 <HAL_DMA_Start_IT+0x328>)
 800b970:	42b4      	cmp	r4, r6
 800b972:	bf08      	it	eq
 800b974:	f047 0701 	orreq.w	r7, r7, #1
 800b978:	b917      	cbnz	r7, 800b980 <HAL_DMA_Start_IT+0x1f0>
 800b97a:	4f50      	ldr	r7, [pc, #320]	; (800babc <HAL_DMA_Start_IT+0x32c>)
 800b97c:	42bc      	cmp	r4, r7
 800b97e:	d10b      	bne.n	800b998 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b980:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800b984:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b986:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800b98a:	b117      	cbz	r7, 800b992 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b98c:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800b990:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b992:	f1b9 0f00 	cmp.w	r9, #0
 800b996:	d183      	bne.n	800b8a0 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b998:	4f46      	ldr	r7, [pc, #280]	; (800bab4 <HAL_DMA_Start_IT+0x324>)
 800b99a:	f8df e114 	ldr.w	lr, [pc, #276]	; 800bab0 <HAL_DMA_Start_IT+0x320>
 800b99e:	4574      	cmp	r4, lr
 800b9a0:	bf18      	it	ne
 800b9a2:	42bc      	cmpne	r4, r7
 800b9a4:	f10e 0e14 	add.w	lr, lr, #20
 800b9a8:	bf0c      	ite	eq
 800b9aa:	2701      	moveq	r7, #1
 800b9ac:	2700      	movne	r7, #0
 800b9ae:	4574      	cmp	r4, lr
 800b9b0:	bf08      	it	eq
 800b9b2:	f047 0701 	orreq.w	r7, r7, #1
 800b9b6:	f10e 0e14 	add.w	lr, lr, #20
 800b9ba:	4574      	cmp	r4, lr
 800b9bc:	bf08      	it	eq
 800b9be:	f047 0701 	orreq.w	r7, r7, #1
 800b9c2:	f10e 0e14 	add.w	lr, lr, #20
 800b9c6:	4574      	cmp	r4, lr
 800b9c8:	bf08      	it	eq
 800b9ca:	f047 0701 	orreq.w	r7, r7, #1
 800b9ce:	f10e 0e14 	add.w	lr, lr, #20
 800b9d2:	4574      	cmp	r4, lr
 800b9d4:	bf08      	it	eq
 800b9d6:	f047 0701 	orreq.w	r7, r7, #1
 800b9da:	f10e 0e14 	add.w	lr, lr, #20
 800b9de:	4574      	cmp	r4, lr
 800b9e0:	bf08      	it	eq
 800b9e2:	f047 0701 	orreq.w	r7, r7, #1
 800b9e6:	b917      	cbnz	r7, 800b9ee <HAL_DMA_Start_IT+0x25e>
 800b9e8:	4f34      	ldr	r7, [pc, #208]	; (800babc <HAL_DMA_Start_IT+0x32c>)
 800b9ea:	42bc      	cmp	r4, r7
 800b9ec:	d154      	bne.n	800ba98 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b9ee:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800b9f2:	2701      	movs	r7, #1
 800b9f4:	f000 0e1f 	and.w	lr, r0, #31
 800b9f8:	fa07 f70e 	lsl.w	r7, r7, lr
 800b9fc:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ba00:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba02:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ba06:	2b40      	cmp	r3, #64	; 0x40
 800ba08:	d043      	beq.n	800ba92 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ba0a:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ba0c:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	f023 030e 	bic.w	r3, r3, #14
 800ba14:	f043 030a 	orr.w	r3, r3, #10
 800ba18:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800ba1a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d02d      	beq.n	800ba7e <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f043 0304 	orr.w	r3, r3, #4
 800ba28:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba2a:	4b21      	ldr	r3, [pc, #132]	; (800bab0 <HAL_DMA_Start_IT+0x320>)
 800ba2c:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <HAL_DMA_Start_IT+0x324>)
 800ba2e:	4294      	cmp	r4, r2
 800ba30:	bf18      	it	ne
 800ba32:	429c      	cmpne	r4, r3
 800ba34:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800ba38:	bf0c      	ite	eq
 800ba3a:	2301      	moveq	r3, #1
 800ba3c:	2300      	movne	r3, #0
 800ba3e:	4294      	cmp	r4, r2
 800ba40:	bf08      	it	eq
 800ba42:	f043 0301 	orreq.w	r3, r3, #1
 800ba46:	3214      	adds	r2, #20
 800ba48:	4294      	cmp	r4, r2
 800ba4a:	bf08      	it	eq
 800ba4c:	f043 0301 	orreq.w	r3, r3, #1
 800ba50:	3214      	adds	r2, #20
 800ba52:	4294      	cmp	r4, r2
 800ba54:	bf08      	it	eq
 800ba56:	f043 0301 	orreq.w	r3, r3, #1
 800ba5a:	3214      	adds	r2, #20
 800ba5c:	4294      	cmp	r4, r2
 800ba5e:	bf08      	it	eq
 800ba60:	f043 0301 	orreq.w	r3, r3, #1
 800ba64:	3214      	adds	r2, #20
 800ba66:	4294      	cmp	r4, r2
 800ba68:	bf08      	it	eq
 800ba6a:	f043 0301 	orreq.w	r3, r3, #1
 800ba6e:	3214      	adds	r2, #20
 800ba70:	4294      	cmp	r4, r2
 800ba72:	bf08      	it	eq
 800ba74:	f043 0301 	orreq.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f43f af47 	beq.w	800b90c <HAL_DMA_Start_IT+0x17c>
 800ba7e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800ba82:	e735      	b.n	800b8f0 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800ba84:	2001      	movs	r0, #1
 800ba86:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800ba88:	2002      	movs	r0, #2
}
 800ba8a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ba8c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ba8e:	60e1      	str	r1, [r4, #12]
 800ba90:	e71c      	b.n	800b8cc <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ba92:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ba94:	60e1      	str	r1, [r4, #12]
 800ba96:	e7ba      	b.n	800ba0e <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	f023 030e 	bic.w	r3, r3, #14
 800ba9e:	f043 030a 	orr.w	r3, r3, #10
 800baa2:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800baa4:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1ba      	bne.n	800ba22 <HAL_DMA_Start_IT+0x292>
 800baac:	e7bd      	b.n	800ba2a <HAL_DMA_Start_IT+0x29a>
 800baae:	bf00      	nop
 800bab0:	5802541c 	.word	0x5802541c
 800bab4:	58025408 	.word	0x58025408
 800bab8:	58025480 	.word	0x58025480
 800babc:	58025494 	.word	0x58025494

0800bac0 <HAL_DMA_Abort>:
{
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800bac4:	f7ff f812 	bl	800aaec <HAL_GetTick>
  if(hdma == NULL)
 800bac8:	2d00      	cmp	r5, #0
 800baca:	f000 8124 	beq.w	800bd16 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bace:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	f040 80dd 	bne.w	800bc92 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bad8:	682c      	ldr	r4, [r5, #0]
 800bada:	4606      	mov	r6, r0
 800badc:	4b8f      	ldr	r3, [pc, #572]	; (800bd1c <HAL_DMA_Abort+0x25c>)
 800bade:	4890      	ldr	r0, [pc, #576]	; (800bd20 <HAL_DMA_Abort+0x260>)
 800bae0:	4a90      	ldr	r2, [pc, #576]	; (800bd24 <HAL_DMA_Abort+0x264>)
 800bae2:	4284      	cmp	r4, r0
 800bae4:	bf18      	it	ne
 800bae6:	429c      	cmpne	r4, r3
 800bae8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800baec:	498e      	ldr	r1, [pc, #568]	; (800bd28 <HAL_DMA_Abort+0x268>)
 800baee:	bf0c      	ite	eq
 800baf0:	2301      	moveq	r3, #1
 800baf2:	2300      	movne	r3, #0
 800baf4:	4284      	cmp	r4, r0
 800baf6:	bf08      	it	eq
 800baf8:	f043 0301 	orreq.w	r3, r3, #1
 800bafc:	3018      	adds	r0, #24
 800bafe:	4284      	cmp	r4, r0
 800bb00:	bf08      	it	eq
 800bb02:	f043 0301 	orreq.w	r3, r3, #1
 800bb06:	3018      	adds	r0, #24
 800bb08:	4284      	cmp	r4, r0
 800bb0a:	bf08      	it	eq
 800bb0c:	f043 0301 	orreq.w	r3, r3, #1
 800bb10:	3018      	adds	r0, #24
 800bb12:	4284      	cmp	r4, r0
 800bb14:	bf08      	it	eq
 800bb16:	f043 0301 	orreq.w	r3, r3, #1
 800bb1a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	bf08      	it	eq
 800bb22:	f043 0301 	orreq.w	r3, r3, #1
 800bb26:	3018      	adds	r0, #24
 800bb28:	4284      	cmp	r4, r0
 800bb2a:	bf08      	it	eq
 800bb2c:	f043 0301 	orreq.w	r3, r3, #1
 800bb30:	3018      	adds	r0, #24
 800bb32:	4284      	cmp	r4, r0
 800bb34:	bf08      	it	eq
 800bb36:	f043 0301 	orreq.w	r3, r3, #1
 800bb3a:	3018      	adds	r0, #24
 800bb3c:	4284      	cmp	r4, r0
 800bb3e:	bf08      	it	eq
 800bb40:	f043 0301 	orreq.w	r3, r3, #1
 800bb44:	3018      	adds	r0, #24
 800bb46:	4284      	cmp	r4, r0
 800bb48:	bf08      	it	eq
 800bb4a:	f043 0301 	orreq.w	r3, r3, #1
 800bb4e:	3018      	adds	r0, #24
 800bb50:	4284      	cmp	r4, r0
 800bb52:	bf08      	it	eq
 800bb54:	f043 0301 	orreq.w	r3, r3, #1
 800bb58:	3018      	adds	r0, #24
 800bb5a:	4284      	cmp	r4, r0
 800bb5c:	bf08      	it	eq
 800bb5e:	f043 0301 	orreq.w	r3, r3, #1
 800bb62:	3018      	adds	r0, #24
 800bb64:	4284      	cmp	r4, r0
 800bb66:	bf08      	it	eq
 800bb68:	f043 0301 	orreq.w	r3, r3, #1
 800bb6c:	428c      	cmp	r4, r1
 800bb6e:	bf18      	it	ne
 800bb70:	4294      	cmpne	r4, r2
 800bb72:	bf0c      	ite	eq
 800bb74:	2201      	moveq	r2, #1
 800bb76:	2200      	movne	r2, #0
 800bb78:	d002      	beq.n	800bb80 <HAL_DMA_Abort+0xc0>
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8090 	beq.w	800bca0 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800bb80:	6821      	ldr	r1, [r4, #0]
 800bb82:	f021 011e 	bic.w	r1, r1, #30
 800bb86:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bb88:	6961      	ldr	r1, [r4, #20]
 800bb8a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb8e:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	f000 80b0 	beq.w	800bcf6 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb96:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800bb98:	6813      	ldr	r3, [r2, #0]
 800bb9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb9e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	f023 0301 	bic.w	r3, r3, #1
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	e005      	b.n	800bbb6 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bbaa:	f7fe ff9f 	bl	800aaec <HAL_GetTick>
 800bbae:	1b83      	subs	r3, r0, r6
 800bbb0:	2b05      	cmp	r3, #5
 800bbb2:	f200 80a6 	bhi.w	800bd02 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	07db      	lsls	r3, r3, #31
 800bbba:	d4f6      	bmi.n	800bbaa <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bbbc:	682a      	ldr	r2, [r5, #0]
 800bbbe:	4b57      	ldr	r3, [pc, #348]	; (800bd1c <HAL_DMA_Abort+0x25c>)
 800bbc0:	4857      	ldr	r0, [pc, #348]	; (800bd20 <HAL_DMA_Abort+0x260>)
 800bbc2:	495a      	ldr	r1, [pc, #360]	; (800bd2c <HAL_DMA_Abort+0x26c>)
 800bbc4:	4282      	cmp	r2, r0
 800bbc6:	bf18      	it	ne
 800bbc8:	429a      	cmpne	r2, r3
 800bbca:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800bbce:	bf0c      	ite	eq
 800bbd0:	2301      	moveq	r3, #1
 800bbd2:	2300      	movne	r3, #0
 800bbd4:	428a      	cmp	r2, r1
 800bbd6:	bf08      	it	eq
 800bbd8:	f043 0301 	orreq.w	r3, r3, #1
 800bbdc:	3130      	adds	r1, #48	; 0x30
 800bbde:	4282      	cmp	r2, r0
 800bbe0:	bf08      	it	eq
 800bbe2:	f043 0301 	orreq.w	r3, r3, #1
 800bbe6:	3030      	adds	r0, #48	; 0x30
 800bbe8:	428a      	cmp	r2, r1
 800bbea:	bf08      	it	eq
 800bbec:	f043 0301 	orreq.w	r3, r3, #1
 800bbf0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800bbf4:	4282      	cmp	r2, r0
 800bbf6:	bf08      	it	eq
 800bbf8:	f043 0301 	orreq.w	r3, r3, #1
 800bbfc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bc00:	428a      	cmp	r2, r1
 800bc02:	bf08      	it	eq
 800bc04:	f043 0301 	orreq.w	r3, r3, #1
 800bc08:	3130      	adds	r1, #48	; 0x30
 800bc0a:	4282      	cmp	r2, r0
 800bc0c:	bf08      	it	eq
 800bc0e:	f043 0301 	orreq.w	r3, r3, #1
 800bc12:	3030      	adds	r0, #48	; 0x30
 800bc14:	428a      	cmp	r2, r1
 800bc16:	bf08      	it	eq
 800bc18:	f043 0301 	orreq.w	r3, r3, #1
 800bc1c:	3130      	adds	r1, #48	; 0x30
 800bc1e:	4282      	cmp	r2, r0
 800bc20:	bf08      	it	eq
 800bc22:	f043 0301 	orreq.w	r3, r3, #1
 800bc26:	3030      	adds	r0, #48	; 0x30
 800bc28:	428a      	cmp	r2, r1
 800bc2a:	bf08      	it	eq
 800bc2c:	f043 0301 	orreq.w	r3, r3, #1
 800bc30:	3130      	adds	r1, #48	; 0x30
 800bc32:	4282      	cmp	r2, r0
 800bc34:	bf08      	it	eq
 800bc36:	f043 0301 	orreq.w	r3, r3, #1
 800bc3a:	428a      	cmp	r2, r1
 800bc3c:	bf08      	it	eq
 800bc3e:	f043 0301 	orreq.w	r3, r3, #1
 800bc42:	3118      	adds	r1, #24
 800bc44:	428a      	cmp	r2, r1
 800bc46:	bf08      	it	eq
 800bc48:	f043 0301 	orreq.w	r3, r3, #1
 800bc4c:	b933      	cbnz	r3, 800bc5c <HAL_DMA_Abort+0x19c>
 800bc4e:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800bc52:	4b35      	ldr	r3, [pc, #212]	; (800bd28 <HAL_DMA_Abort+0x268>)
 800bc54:	429a      	cmp	r2, r3
 800bc56:	bf18      	it	ne
 800bc58:	428a      	cmpne	r2, r1
 800bc5a:	d16f      	bne.n	800bd3c <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bc5c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800bc5e:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc60:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bc62:	f002 021f 	and.w	r2, r2, #31
 800bc66:	4093      	lsls	r3, r2
 800bc68:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800bc6a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc6c:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800bc70:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800bc72:	b133      	cbz	r3, 800bc82 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc74:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc76:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc7e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc80:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800bc82:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800bc84:	2201      	movs	r2, #1
  return HAL_OK;
 800bc86:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800bc88:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800bc8c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 800bc90:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc92:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800bc94:	2300      	movs	r3, #0
    return HAL_ERROR;
 800bc96:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc98:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800bc9a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bca0:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bca2:	4923      	ldr	r1, [pc, #140]	; (800bd30 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bca4:	f022 020e 	bic.w	r2, r2, #14
 800bca8:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcaa:	4a22      	ldr	r2, [pc, #136]	; (800bd34 <HAL_DMA_Abort+0x274>)
 800bcac:	428c      	cmp	r4, r1
 800bcae:	bf18      	it	ne
 800bcb0:	4294      	cmpne	r4, r2
 800bcb2:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800bcb6:	bf0c      	ite	eq
 800bcb8:	2201      	moveq	r2, #1
 800bcba:	2200      	movne	r2, #0
 800bcbc:	428c      	cmp	r4, r1
 800bcbe:	bf08      	it	eq
 800bcc0:	f042 0201 	orreq.w	r2, r2, #1
 800bcc4:	3114      	adds	r1, #20
 800bcc6:	428c      	cmp	r4, r1
 800bcc8:	bf08      	it	eq
 800bcca:	f042 0201 	orreq.w	r2, r2, #1
 800bcce:	3114      	adds	r1, #20
 800bcd0:	428c      	cmp	r4, r1
 800bcd2:	bf08      	it	eq
 800bcd4:	f042 0201 	orreq.w	r2, r2, #1
 800bcd8:	3114      	adds	r1, #20
 800bcda:	428c      	cmp	r4, r1
 800bcdc:	bf08      	it	eq
 800bcde:	f042 0201 	orreq.w	r2, r2, #1
 800bce2:	3114      	adds	r1, #20
 800bce4:	428c      	cmp	r4, r1
 800bce6:	bf08      	it	eq
 800bce8:	f042 0201 	orreq.w	r2, r2, #1
 800bcec:	b91a      	cbnz	r2, 800bcf6 <HAL_DMA_Abort+0x236>
 800bcee:	4a12      	ldr	r2, [pc, #72]	; (800bd38 <HAL_DMA_Abort+0x278>)
 800bcf0:	4294      	cmp	r4, r2
 800bcf2:	f47f af55 	bne.w	800bba0 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcf6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800bcf8:	680a      	ldr	r2, [r1, #0]
 800bcfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcfe:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800bd00:	e74e      	b.n	800bba0 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd02:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800bd04:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800bd06:	2303      	movs	r3, #3
        return HAL_ERROR;
 800bd08:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd0a:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800bd0c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800bd10:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800bd14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800bd16:	2001      	movs	r0, #1
}
 800bd18:	bd70      	pop	{r4, r5, r6, pc}
 800bd1a:	bf00      	nop
 800bd1c:	40020058 	.word	0x40020058
 800bd20:	40020040 	.word	0x40020040
 800bd24:	40020010 	.word	0x40020010
 800bd28:	40020028 	.word	0x40020028
 800bd2c:	40020070 	.word	0x40020070
 800bd30:	58025408 	.word	0x58025408
 800bd34:	5802541c 	.word	0x5802541c
 800bd38:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bd3c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800bd3e:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd40:	4b16      	ldr	r3, [pc, #88]	; (800bd9c <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bd42:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd46:	4c16      	ldr	r4, [pc, #88]	; (800bda0 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bd48:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd4a:	42a2      	cmp	r2, r4
 800bd4c:	bf18      	it	ne
 800bd4e:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd50:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd52:	bf0c      	ite	eq
 800bd54:	2301      	moveq	r3, #1
 800bd56:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bd58:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd5a:	4812      	ldr	r0, [pc, #72]	; (800bda4 <HAL_DMA_Abort+0x2e4>)
 800bd5c:	4912      	ldr	r1, [pc, #72]	; (800bda8 <HAL_DMA_Abort+0x2e8>)
 800bd5e:	4282      	cmp	r2, r0
 800bd60:	bf08      	it	eq
 800bd62:	f043 0301 	orreq.w	r3, r3, #1
 800bd66:	3028      	adds	r0, #40	; 0x28
 800bd68:	428a      	cmp	r2, r1
 800bd6a:	bf08      	it	eq
 800bd6c:	f043 0301 	orreq.w	r3, r3, #1
 800bd70:	3128      	adds	r1, #40	; 0x28
 800bd72:	4282      	cmp	r2, r0
 800bd74:	bf08      	it	eq
 800bd76:	f043 0301 	orreq.w	r3, r3, #1
 800bd7a:	428a      	cmp	r2, r1
 800bd7c:	bf08      	it	eq
 800bd7e:	f043 0301 	orreq.w	r3, r3, #1
 800bd82:	3114      	adds	r1, #20
 800bd84:	428a      	cmp	r2, r1
 800bd86:	bf08      	it	eq
 800bd88:	f043 0301 	orreq.w	r3, r3, #1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f47f af6c 	bne.w	800bc6a <HAL_DMA_Abort+0x1aa>
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <HAL_DMA_Abort+0x2ec>)
 800bd94:	429a      	cmp	r2, r3
 800bd96:	f43f af68 	beq.w	800bc6a <HAL_DMA_Abort+0x1aa>
 800bd9a:	e772      	b.n	800bc82 <HAL_DMA_Abort+0x1c2>
 800bd9c:	5802541c 	.word	0x5802541c
 800bda0:	58025408 	.word	0x58025408
 800bda4:	58025430 	.word	0x58025430
 800bda8:	58025444 	.word	0x58025444
 800bdac:	58025494 	.word	0x58025494

0800bdb0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d05f      	beq.n	800be74 <HAL_DMA_Abort_IT+0xc4>
{
 800bdb4:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bdb6:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2a02      	cmp	r2, #2
 800bdbe:	d155      	bne.n	800be6c <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bdc0:	6801      	ldr	r1, [r0, #0]
 800bdc2:	4a57      	ldr	r2, [pc, #348]	; (800bf20 <HAL_DMA_Abort_IT+0x170>)
 800bdc4:	4291      	cmp	r1, r2
 800bdc6:	d048      	beq.n	800be5a <HAL_DMA_Abort_IT+0xaa>
 800bdc8:	3218      	adds	r2, #24
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	d045      	beq.n	800be5a <HAL_DMA_Abort_IT+0xaa>
 800bdce:	3230      	adds	r2, #48	; 0x30
 800bdd0:	4c54      	ldr	r4, [pc, #336]	; (800bf24 <HAL_DMA_Abort_IT+0x174>)
 800bdd2:	4855      	ldr	r0, [pc, #340]	; (800bf28 <HAL_DMA_Abort_IT+0x178>)
 800bdd4:	42a1      	cmp	r1, r4
 800bdd6:	bf18      	it	ne
 800bdd8:	4291      	cmpne	r1, r2
 800bdda:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800bdde:	bf0c      	ite	eq
 800bde0:	2201      	moveq	r2, #1
 800bde2:	2200      	movne	r2, #0
 800bde4:	4281      	cmp	r1, r0
 800bde6:	bf08      	it	eq
 800bde8:	f042 0201 	orreq.w	r2, r2, #1
 800bdec:	3030      	adds	r0, #48	; 0x30
 800bdee:	42a1      	cmp	r1, r4
 800bdf0:	bf08      	it	eq
 800bdf2:	f042 0201 	orreq.w	r2, r2, #1
 800bdf6:	3430      	adds	r4, #48	; 0x30
 800bdf8:	4281      	cmp	r1, r0
 800bdfa:	bf08      	it	eq
 800bdfc:	f042 0201 	orreq.w	r2, r2, #1
 800be00:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800be04:	42a1      	cmp	r1, r4
 800be06:	bf08      	it	eq
 800be08:	f042 0201 	orreq.w	r2, r2, #1
 800be0c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800be10:	4281      	cmp	r1, r0
 800be12:	bf08      	it	eq
 800be14:	f042 0201 	orreq.w	r2, r2, #1
 800be18:	3030      	adds	r0, #48	; 0x30
 800be1a:	42a1      	cmp	r1, r4
 800be1c:	bf08      	it	eq
 800be1e:	f042 0201 	orreq.w	r2, r2, #1
 800be22:	3430      	adds	r4, #48	; 0x30
 800be24:	4281      	cmp	r1, r0
 800be26:	bf08      	it	eq
 800be28:	f042 0201 	orreq.w	r2, r2, #1
 800be2c:	3030      	adds	r0, #48	; 0x30
 800be2e:	42a1      	cmp	r1, r4
 800be30:	bf08      	it	eq
 800be32:	f042 0201 	orreq.w	r2, r2, #1
 800be36:	3430      	adds	r4, #48	; 0x30
 800be38:	4281      	cmp	r1, r0
 800be3a:	bf08      	it	eq
 800be3c:	f042 0201 	orreq.w	r2, r2, #1
 800be40:	3030      	adds	r0, #48	; 0x30
 800be42:	42a1      	cmp	r1, r4
 800be44:	bf08      	it	eq
 800be46:	f042 0201 	orreq.w	r2, r2, #1
 800be4a:	4281      	cmp	r1, r0
 800be4c:	bf08      	it	eq
 800be4e:	f042 0201 	orreq.w	r2, r2, #1
 800be52:	b912      	cbnz	r2, 800be5a <HAL_DMA_Abort_IT+0xaa>
 800be54:	4a35      	ldr	r2, [pc, #212]	; (800bf2c <HAL_DMA_Abort_IT+0x17c>)
 800be56:	4291      	cmp	r1, r2
 800be58:	d10e      	bne.n	800be78 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800be5a:	2204      	movs	r2, #4
  return HAL_OK;
 800be5c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800be5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800be62:	680b      	ldr	r3, [r1, #0]
 800be64:	f023 0301 	bic.w	r3, r3, #1
 800be68:	600b      	str	r3, [r1, #0]
}
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be6c:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800be6e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be70:	655a      	str	r2, [r3, #84]	; 0x54
}
 800be72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800be74:	2001      	movs	r0, #1
}
 800be76:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be78:	4a2d      	ldr	r2, [pc, #180]	; (800bf30 <HAL_DMA_Abort_IT+0x180>)
 800be7a:	4d2e      	ldr	r5, [pc, #184]	; (800bf34 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be7c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be7e:	42a9      	cmp	r1, r5
 800be80:	bf18      	it	ne
 800be82:	4291      	cmpne	r1, r2
 800be84:	4c2c      	ldr	r4, [pc, #176]	; (800bf38 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be86:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be8a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800be8e:	bf0c      	ite	eq
 800be90:	2201      	moveq	r2, #1
 800be92:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be94:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be96:	42a1      	cmp	r1, r4
 800be98:	bf08      	it	eq
 800be9a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800be9e:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bea0:	3428      	adds	r4, #40	; 0x28
 800bea2:	42a9      	cmp	r1, r5
 800bea4:	bf08      	it	eq
 800bea6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800beaa:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800beae:	42a1      	cmp	r1, r4
 800beb0:	bf08      	it	eq
 800beb2:	f042 0201 	orreq.w	r2, r2, #1
 800beb6:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 800beb8:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800beba:	42a1      	cmp	r1, r4
 800bebc:	bf08      	it	eq
 800bebe:	f042 0201 	orreq.w	r2, r2, #1
 800bec2:	481e      	ldr	r0, [pc, #120]	; (800bf3c <HAL_DMA_Abort_IT+0x18c>)
 800bec4:	4281      	cmp	r1, r0
 800bec6:	bf08      	it	eq
 800bec8:	f042 0201 	orreq.w	r2, r2, #1
 800becc:	b912      	cbnz	r2, 800bed4 <HAL_DMA_Abort_IT+0x124>
 800bece:	4a1c      	ldr	r2, [pc, #112]	; (800bf40 <HAL_DMA_Abort_IT+0x190>)
 800bed0:	4291      	cmp	r1, r2
 800bed2:	d117      	bne.n	800bf04 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bed4:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bed6:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bed8:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bedc:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bede:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bee2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bee6:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bee8:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800beea:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800beec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800beee:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800bef2:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800bef4:	b132      	cbz	r2, 800bf04 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bef6:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bef8:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800befc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bf00:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bf02:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800bf04:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800bf06:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800bf08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800bf0a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800bf0e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800bf12:	b11a      	cbz	r2, 800bf1c <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800bf14:	4618      	mov	r0, r3
 800bf16:	4790      	blx	r2
  return HAL_OK;
 800bf18:	4620      	mov	r0, r4
}
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800bf1c:	4610      	mov	r0, r2
}
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	40020010 	.word	0x40020010
 800bf24:	40020040 	.word	0x40020040
 800bf28:	40020070 	.word	0x40020070
 800bf2c:	400204b8 	.word	0x400204b8
 800bf30:	5802541c 	.word	0x5802541c
 800bf34:	58025408 	.word	0x58025408
 800bf38:	58025430 	.word	0x58025430
 800bf3c:	58025480 	.word	0x58025480
 800bf40:	58025494 	.word	0x58025494

0800bf44 <HAL_DMA_IRQHandler>:
{
 800bf44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 800bf48:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800bf4a:	4b9c      	ldr	r3, [pc, #624]	; (800c1bc <HAL_DMA_IRQHandler+0x278>)
{
 800bf4c:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf4e:	4e9c      	ldr	r6, [pc, #624]	; (800c1c0 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800bf50:	681d      	ldr	r5, [r3, #0]
{
 800bf52:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 800bf54:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf56:	6803      	ldr	r3, [r0, #0]
 800bf58:	4a9a      	ldr	r2, [pc, #616]	; (800c1c4 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf5a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	bf18      	it	ne
 800bf60:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800bf62:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf64:	bf08      	it	eq
 800bf66:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 800bf68:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bf6a:	bf18      	it	ne
 800bf6c:	2600      	movne	r6, #0
 800bf6e:	d045      	beq.n	800bffc <HAL_DMA_IRQHandler+0xb8>
 800bf70:	3218      	adds	r2, #24
 800bf72:	4895      	ldr	r0, [pc, #596]	; (800c1c8 <HAL_DMA_IRQHandler+0x284>)
 800bf74:	4283      	cmp	r3, r0
 800bf76:	bf18      	it	ne
 800bf78:	4293      	cmpne	r3, r2
 800bf7a:	f100 0018 	add.w	r0, r0, #24
 800bf7e:	bf0c      	ite	eq
 800bf80:	2201      	moveq	r2, #1
 800bf82:	2200      	movne	r2, #0
 800bf84:	4283      	cmp	r3, r0
 800bf86:	bf08      	it	eq
 800bf88:	f042 0201 	orreq.w	r2, r2, #1
 800bf8c:	3018      	adds	r0, #24
 800bf8e:	4283      	cmp	r3, r0
 800bf90:	bf08      	it	eq
 800bf92:	f042 0201 	orreq.w	r2, r2, #1
 800bf96:	3018      	adds	r0, #24
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	bf08      	it	eq
 800bf9c:	f042 0201 	orreq.w	r2, r2, #1
 800bfa0:	3018      	adds	r0, #24
 800bfa2:	4283      	cmp	r3, r0
 800bfa4:	bf08      	it	eq
 800bfa6:	f042 0201 	orreq.w	r2, r2, #1
 800bfaa:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800bfae:	4283      	cmp	r3, r0
 800bfb0:	bf08      	it	eq
 800bfb2:	f042 0201 	orreq.w	r2, r2, #1
 800bfb6:	3018      	adds	r0, #24
 800bfb8:	4283      	cmp	r3, r0
 800bfba:	bf08      	it	eq
 800bfbc:	f042 0201 	orreq.w	r2, r2, #1
 800bfc0:	3018      	adds	r0, #24
 800bfc2:	4283      	cmp	r3, r0
 800bfc4:	bf08      	it	eq
 800bfc6:	f042 0201 	orreq.w	r2, r2, #1
 800bfca:	3018      	adds	r0, #24
 800bfcc:	4283      	cmp	r3, r0
 800bfce:	bf08      	it	eq
 800bfd0:	f042 0201 	orreq.w	r2, r2, #1
 800bfd4:	3018      	adds	r0, #24
 800bfd6:	4283      	cmp	r3, r0
 800bfd8:	bf08      	it	eq
 800bfda:	f042 0201 	orreq.w	r2, r2, #1
 800bfde:	3018      	adds	r0, #24
 800bfe0:	4283      	cmp	r3, r0
 800bfe2:	bf08      	it	eq
 800bfe4:	f042 0201 	orreq.w	r2, r2, #1
 800bfe8:	3018      	adds	r0, #24
 800bfea:	4283      	cmp	r3, r0
 800bfec:	bf08      	it	eq
 800bfee:	f042 0201 	orreq.w	r2, r2, #1
 800bff2:	b91a      	cbnz	r2, 800bffc <HAL_DMA_IRQHandler+0xb8>
 800bff4:	4a75      	ldr	r2, [pc, #468]	; (800c1cc <HAL_DMA_IRQHandler+0x288>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	f040 8250 	bne.w	800c49c <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bffc:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 800c000:	2208      	movs	r2, #8
 800c002:	f001 0c1f 	and.w	ip, r1, #31
 800c006:	fa02 f20c 	lsl.w	r2, r2, ip
 800c00a:	4217      	tst	r7, r2
 800c00c:	f040 8188 	bne.w	800c320 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c010:	fa27 f20c 	lsr.w	r2, r7, ip
 800c014:	07d2      	lsls	r2, r2, #31
 800c016:	d50c      	bpl.n	800c032 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c018:	695a      	ldr	r2, [r3, #20]
 800c01a:	0610      	lsls	r0, r2, #24
 800c01c:	d509      	bpl.n	800c032 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c01e:	2201      	movs	r2, #1
 800c020:	fa02 f20c 	lsl.w	r2, r2, ip
 800c024:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c026:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c02a:	f042 0202 	orr.w	r2, r2, #2
 800c02e:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c032:	f04f 0e04 	mov.w	lr, #4
 800c036:	fa0e f00c 	lsl.w	r0, lr, ip
 800c03a:	4238      	tst	r0, r7
 800c03c:	d05b      	beq.n	800c0f6 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c03e:	2e00      	cmp	r6, #0
 800c040:	d14f      	bne.n	800c0e2 <HAL_DMA_IRQHandler+0x19e>
 800c042:	4a63      	ldr	r2, [pc, #396]	; (800c1d0 <HAL_DMA_IRQHandler+0x28c>)
 800c044:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800c1c8 <HAL_DMA_IRQHandler+0x284>
 800c048:	4543      	cmp	r3, r8
 800c04a:	bf18      	it	ne
 800c04c:	4293      	cmpne	r3, r2
 800c04e:	f108 0818 	add.w	r8, r8, #24
 800c052:	bf0c      	ite	eq
 800c054:	2201      	moveq	r2, #1
 800c056:	2200      	movne	r2, #0
 800c058:	4543      	cmp	r3, r8
 800c05a:	bf08      	it	eq
 800c05c:	f042 0201 	orreq.w	r2, r2, #1
 800c060:	f108 0818 	add.w	r8, r8, #24
 800c064:	4543      	cmp	r3, r8
 800c066:	bf08      	it	eq
 800c068:	f042 0201 	orreq.w	r2, r2, #1
 800c06c:	f108 0818 	add.w	r8, r8, #24
 800c070:	4543      	cmp	r3, r8
 800c072:	bf08      	it	eq
 800c074:	f042 0201 	orreq.w	r2, r2, #1
 800c078:	f108 0818 	add.w	r8, r8, #24
 800c07c:	4543      	cmp	r3, r8
 800c07e:	bf08      	it	eq
 800c080:	f042 0201 	orreq.w	r2, r2, #1
 800c084:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800c088:	4543      	cmp	r3, r8
 800c08a:	bf08      	it	eq
 800c08c:	f042 0201 	orreq.w	r2, r2, #1
 800c090:	f108 0818 	add.w	r8, r8, #24
 800c094:	4543      	cmp	r3, r8
 800c096:	bf08      	it	eq
 800c098:	f042 0201 	orreq.w	r2, r2, #1
 800c09c:	f108 0818 	add.w	r8, r8, #24
 800c0a0:	4543      	cmp	r3, r8
 800c0a2:	bf08      	it	eq
 800c0a4:	f042 0201 	orreq.w	r2, r2, #1
 800c0a8:	f108 0818 	add.w	r8, r8, #24
 800c0ac:	4543      	cmp	r3, r8
 800c0ae:	bf08      	it	eq
 800c0b0:	f042 0201 	orreq.w	r2, r2, #1
 800c0b4:	f108 0818 	add.w	r8, r8, #24
 800c0b8:	4543      	cmp	r3, r8
 800c0ba:	bf08      	it	eq
 800c0bc:	f042 0201 	orreq.w	r2, r2, #1
 800c0c0:	f108 0818 	add.w	r8, r8, #24
 800c0c4:	4543      	cmp	r3, r8
 800c0c6:	bf08      	it	eq
 800c0c8:	f042 0201 	orreq.w	r2, r2, #1
 800c0cc:	f108 0818 	add.w	r8, r8, #24
 800c0d0:	4543      	cmp	r3, r8
 800c0d2:	bf08      	it	eq
 800c0d4:	f042 0201 	orreq.w	r2, r2, #1
 800c0d8:	b91a      	cbnz	r2, 800c0e2 <HAL_DMA_IRQHandler+0x19e>
 800c0da:	4a3c      	ldr	r2, [pc, #240]	; (800c1cc <HAL_DMA_IRQHandler+0x288>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	f040 8219 	bne.w	800c514 <HAL_DMA_IRQHandler+0x5d0>
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	0792      	lsls	r2, r2, #30
 800c0e6:	d506      	bpl.n	800c0f6 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c0e8:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c0ea:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c0ee:	f042 0204 	orr.w	r2, r2, #4
 800c0f2:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c0f6:	2210      	movs	r2, #16
 800c0f8:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c0fc:	ea1c 0f07 	tst.w	ip, r7
 800c100:	d06c      	beq.n	800c1dc <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c102:	2e00      	cmp	r6, #0
 800c104:	d145      	bne.n	800c192 <HAL_DMA_IRQHandler+0x24e>
 800c106:	4a32      	ldr	r2, [pc, #200]	; (800c1d0 <HAL_DMA_IRQHandler+0x28c>)
 800c108:	4e2f      	ldr	r6, [pc, #188]	; (800c1c8 <HAL_DMA_IRQHandler+0x284>)
 800c10a:	42b3      	cmp	r3, r6
 800c10c:	bf18      	it	ne
 800c10e:	4293      	cmpne	r3, r2
 800c110:	f106 0618 	add.w	r6, r6, #24
 800c114:	bf0c      	ite	eq
 800c116:	2201      	moveq	r2, #1
 800c118:	2200      	movne	r2, #0
 800c11a:	42b3      	cmp	r3, r6
 800c11c:	bf08      	it	eq
 800c11e:	f042 0201 	orreq.w	r2, r2, #1
 800c122:	3618      	adds	r6, #24
 800c124:	42b3      	cmp	r3, r6
 800c126:	bf08      	it	eq
 800c128:	f042 0201 	orreq.w	r2, r2, #1
 800c12c:	3618      	adds	r6, #24
 800c12e:	42b3      	cmp	r3, r6
 800c130:	bf08      	it	eq
 800c132:	f042 0201 	orreq.w	r2, r2, #1
 800c136:	3618      	adds	r6, #24
 800c138:	42b3      	cmp	r3, r6
 800c13a:	bf08      	it	eq
 800c13c:	f042 0201 	orreq.w	r2, r2, #1
 800c140:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800c144:	42b3      	cmp	r3, r6
 800c146:	bf08      	it	eq
 800c148:	f042 0201 	orreq.w	r2, r2, #1
 800c14c:	3618      	adds	r6, #24
 800c14e:	42b3      	cmp	r3, r6
 800c150:	bf08      	it	eq
 800c152:	f042 0201 	orreq.w	r2, r2, #1
 800c156:	3618      	adds	r6, #24
 800c158:	42b3      	cmp	r3, r6
 800c15a:	bf08      	it	eq
 800c15c:	f042 0201 	orreq.w	r2, r2, #1
 800c160:	3618      	adds	r6, #24
 800c162:	42b3      	cmp	r3, r6
 800c164:	bf08      	it	eq
 800c166:	f042 0201 	orreq.w	r2, r2, #1
 800c16a:	3618      	adds	r6, #24
 800c16c:	42b3      	cmp	r3, r6
 800c16e:	bf08      	it	eq
 800c170:	f042 0201 	orreq.w	r2, r2, #1
 800c174:	3618      	adds	r6, #24
 800c176:	42b3      	cmp	r3, r6
 800c178:	bf08      	it	eq
 800c17a:	f042 0201 	orreq.w	r2, r2, #1
 800c17e:	3618      	adds	r6, #24
 800c180:	42b3      	cmp	r3, r6
 800c182:	bf08      	it	eq
 800c184:	f042 0201 	orreq.w	r2, r2, #1
 800c188:	b91a      	cbnz	r2, 800c192 <HAL_DMA_IRQHandler+0x24e>
 800c18a:	4a10      	ldr	r2, [pc, #64]	; (800c1cc <HAL_DMA_IRQHandler+0x288>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	f040 81c9 	bne.w	800c524 <HAL_DMA_IRQHandler+0x5e0>
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	0710      	lsls	r0, r2, #28
 800c196:	d521      	bpl.n	800c1dc <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c198:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	0356      	lsls	r6, r2, #13
 800c1a0:	f100 814c 	bmi.w	800c43c <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	05d2      	lsls	r2, r2, #23
 800c1a8:	d403      	bmi.n	800c1b2 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	f022 0208 	bic.w	r2, r2, #8
 800c1b0:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800c1b2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c1b6:	b18b      	cbz	r3, 800c1dc <HAL_DMA_IRQHandler+0x298>
 800c1b8:	e00c      	b.n	800c1d4 <HAL_DMA_IRQHandler+0x290>
 800c1ba:	bf00      	nop
 800c1bc:	24008000 	.word	0x24008000
 800c1c0:	40020010 	.word	0x40020010
 800c1c4:	40020028 	.word	0x40020028
 800c1c8:	40020058 	.word	0x40020058
 800c1cc:	400204b8 	.word	0x400204b8
 800c1d0:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800c1d4:	4648      	mov	r0, r9
 800c1d6:	4798      	blx	r3
 800c1d8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c1dc:	f001 011f 	and.w	r1, r1, #31
 800c1e0:	2620      	movs	r6, #32
 800c1e2:	408e      	lsls	r6, r1
 800c1e4:	423e      	tst	r6, r7
 800c1e6:	d068      	beq.n	800c2ba <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c1e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c1ec:	4ba5      	ldr	r3, [pc, #660]	; (800c484 <HAL_DMA_IRQHandler+0x540>)
 800c1ee:	4fa6      	ldr	r7, [pc, #664]	; (800c488 <HAL_DMA_IRQHandler+0x544>)
 800c1f0:	42ba      	cmp	r2, r7
 800c1f2:	bf18      	it	ne
 800c1f4:	429a      	cmpne	r2, r3
 800c1f6:	f107 0718 	add.w	r7, r7, #24
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2301      	moveq	r3, #1
 800c1fe:	2300      	movne	r3, #0
 800c200:	42ba      	cmp	r2, r7
 800c202:	bf08      	it	eq
 800c204:	f043 0301 	orreq.w	r3, r3, #1
 800c208:	3718      	adds	r7, #24
 800c20a:	42ba      	cmp	r2, r7
 800c20c:	bf08      	it	eq
 800c20e:	f043 0301 	orreq.w	r3, r3, #1
 800c212:	3718      	adds	r7, #24
 800c214:	42ba      	cmp	r2, r7
 800c216:	bf08      	it	eq
 800c218:	f043 0301 	orreq.w	r3, r3, #1
 800c21c:	3718      	adds	r7, #24
 800c21e:	42ba      	cmp	r2, r7
 800c220:	bf08      	it	eq
 800c222:	f043 0301 	orreq.w	r3, r3, #1
 800c226:	3718      	adds	r7, #24
 800c228:	42ba      	cmp	r2, r7
 800c22a:	bf08      	it	eq
 800c22c:	f043 0301 	orreq.w	r3, r3, #1
 800c230:	3718      	adds	r7, #24
 800c232:	42ba      	cmp	r2, r7
 800c234:	bf08      	it	eq
 800c236:	f043 0301 	orreq.w	r3, r3, #1
 800c23a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800c23e:	42ba      	cmp	r2, r7
 800c240:	bf08      	it	eq
 800c242:	f043 0301 	orreq.w	r3, r3, #1
 800c246:	3718      	adds	r7, #24
 800c248:	42ba      	cmp	r2, r7
 800c24a:	bf08      	it	eq
 800c24c:	f043 0301 	orreq.w	r3, r3, #1
 800c250:	3718      	adds	r7, #24
 800c252:	42ba      	cmp	r2, r7
 800c254:	bf08      	it	eq
 800c256:	f043 0301 	orreq.w	r3, r3, #1
 800c25a:	3718      	adds	r7, #24
 800c25c:	42ba      	cmp	r2, r7
 800c25e:	bf08      	it	eq
 800c260:	f043 0301 	orreq.w	r3, r3, #1
 800c264:	3718      	adds	r7, #24
 800c266:	42ba      	cmp	r2, r7
 800c268:	bf08      	it	eq
 800c26a:	f043 0301 	orreq.w	r3, r3, #1
 800c26e:	3718      	adds	r7, #24
 800c270:	42ba      	cmp	r2, r7
 800c272:	bf08      	it	eq
 800c274:	f043 0301 	orreq.w	r3, r3, #1
 800c278:	3718      	adds	r7, #24
 800c27a:	42ba      	cmp	r2, r7
 800c27c:	bf08      	it	eq
 800c27e:	f043 0301 	orreq.w	r3, r3, #1
 800c282:	b91b      	cbnz	r3, 800c28c <HAL_DMA_IRQHandler+0x348>
 800c284:	4b81      	ldr	r3, [pc, #516]	; (800c48c <HAL_DMA_IRQHandler+0x548>)
 800c286:	429a      	cmp	r2, r3
 800c288:	f040 8162 	bne.w	800c550 <HAL_DMA_IRQHandler+0x60c>
 800c28c:	6813      	ldr	r3, [r2, #0]
 800c28e:	06db      	lsls	r3, r3, #27
 800c290:	d513      	bpl.n	800c2ba <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c292:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c294:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 800c298:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c29a:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c29c:	f000 80ae 	beq.w	800c3fc <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c2a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c2a4:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c2a6:	f000 80d3 	beq.w	800c450 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c2aa:	031c      	lsls	r4, r3, #12
 800c2ac:	f140 80de 	bpl.w	800c46c <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800c2b0:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800c2b4:	b10b      	cbz	r3, 800c2ba <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 800c2b6:	4648      	mov	r0, r9
 800c2b8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c2ba:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 80b9 	beq.w	800c436 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c2c4:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800c2c8:	07d8      	lsls	r0, r3, #31
 800c2ca:	d51f      	bpl.n	800c30c <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 800c2cc:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800c2d6:	6813      	ldr	r3, [r2, #0]
 800c2d8:	f023 0301 	bic.w	r3, r3, #1
 800c2dc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c2de:	4b6c      	ldr	r3, [pc, #432]	; (800c490 <HAL_DMA_IRQHandler+0x54c>)
 800c2e0:	fba3 3505 	umull	r3, r5, r3, r5
 800c2e4:	0aad      	lsrs	r5, r5, #10
 800c2e6:	e002      	b.n	800c2ee <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c2e8:	6813      	ldr	r3, [r2, #0]
 800c2ea:	07d9      	lsls	r1, r3, #31
 800c2ec:	d504      	bpl.n	800c2f8 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	42ab      	cmp	r3, r5
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	d9f7      	bls.n	800c2e8 <HAL_DMA_IRQHandler+0x3a4>
        __HAL_UNLOCK(hdma);
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c2fe:	6813      	ldr	r3, [r2, #0]
 800c300:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800c302:	bf4c      	ite	mi
 800c304:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800c306:	2301      	movpl	r3, #1
 800c308:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800c30c:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 8090 	beq.w	800c436 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800c316:	4648      	mov	r0, r9
}
 800c318:	b003      	add	sp, #12
 800c31a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 800c31e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	0740      	lsls	r0, r0, #29
 800c324:	d50a      	bpl.n	800c33c <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c326:	6818      	ldr	r0, [r3, #0]
 800c328:	f020 0004 	bic.w	r0, r0, #4
 800c32c:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c32e:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c330:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c334:	f042 0201 	orr.w	r2, r2, #1
 800c338:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c33c:	fa27 f20c 	lsr.w	r2, r7, ip
 800c340:	07d2      	lsls	r2, r2, #31
 800c342:	f57f ae76 	bpl.w	800c032 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c346:	4a53      	ldr	r2, [pc, #332]	; (800c494 <HAL_DMA_IRQHandler+0x550>)
 800c348:	4853      	ldr	r0, [pc, #332]	; (800c498 <HAL_DMA_IRQHandler+0x554>)
 800c34a:	4283      	cmp	r3, r0
 800c34c:	bf18      	it	ne
 800c34e:	4293      	cmpne	r3, r2
 800c350:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800c354:	bf0c      	ite	eq
 800c356:	2201      	moveq	r2, #1
 800c358:	2200      	movne	r2, #0
 800c35a:	4283      	cmp	r3, r0
 800c35c:	bf08      	it	eq
 800c35e:	f042 0201 	orreq.w	r2, r2, #1
 800c362:	3018      	adds	r0, #24
 800c364:	4283      	cmp	r3, r0
 800c366:	bf08      	it	eq
 800c368:	f042 0201 	orreq.w	r2, r2, #1
 800c36c:	3018      	adds	r0, #24
 800c36e:	4283      	cmp	r3, r0
 800c370:	bf08      	it	eq
 800c372:	f042 0201 	orreq.w	r2, r2, #1
 800c376:	3018      	adds	r0, #24
 800c378:	4283      	cmp	r3, r0
 800c37a:	bf08      	it	eq
 800c37c:	f042 0201 	orreq.w	r2, r2, #1
 800c380:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800c384:	4283      	cmp	r3, r0
 800c386:	bf08      	it	eq
 800c388:	f042 0201 	orreq.w	r2, r2, #1
 800c38c:	3018      	adds	r0, #24
 800c38e:	4283      	cmp	r3, r0
 800c390:	bf08      	it	eq
 800c392:	f042 0201 	orreq.w	r2, r2, #1
 800c396:	3018      	adds	r0, #24
 800c398:	4283      	cmp	r3, r0
 800c39a:	bf08      	it	eq
 800c39c:	f042 0201 	orreq.w	r2, r2, #1
 800c3a0:	3018      	adds	r0, #24
 800c3a2:	4283      	cmp	r3, r0
 800c3a4:	bf08      	it	eq
 800c3a6:	f042 0201 	orreq.w	r2, r2, #1
 800c3aa:	3018      	adds	r0, #24
 800c3ac:	4283      	cmp	r3, r0
 800c3ae:	bf08      	it	eq
 800c3b0:	f042 0201 	orreq.w	r2, r2, #1
 800c3b4:	3018      	adds	r0, #24
 800c3b6:	4283      	cmp	r3, r0
 800c3b8:	bf08      	it	eq
 800c3ba:	f042 0201 	orreq.w	r2, r2, #1
 800c3be:	3018      	adds	r0, #24
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	bf08      	it	eq
 800c3c4:	f042 0201 	orreq.w	r2, r2, #1
 800c3c8:	3018      	adds	r0, #24
 800c3ca:	4283      	cmp	r3, r0
 800c3cc:	bf08      	it	eq
 800c3ce:	f042 0201 	orreq.w	r2, r2, #1
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	f47f ae20 	bne.w	800c018 <HAL_DMA_IRQHandler+0xd4>
 800c3d8:	2e00      	cmp	r6, #0
 800c3da:	f47f ae1d 	bne.w	800c018 <HAL_DMA_IRQHandler+0xd4>
 800c3de:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	fa02 f20c 	lsl.w	r2, r2, ip
 800c3e6:	423a      	tst	r2, r7
 800c3e8:	f040 8094 	bne.w	800c514 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c3ec:	2210      	movs	r2, #16
 800c3ee:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c3f2:	ea17 0f0c 	tst.w	r7, ip
 800c3f6:	f43f aef1 	beq.w	800c1dc <HAL_DMA_IRQHandler+0x298>
 800c3fa:	e684      	b.n	800c106 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c3fc:	f023 0316 	bic.w	r3, r3, #22
 800c400:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c402:	6953      	ldr	r3, [r2, #20]
 800c404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c408:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c40a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c40e:	b39b      	cbz	r3, 800c478 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c410:	6813      	ldr	r3, [r2, #0]
 800c412:	f023 0308 	bic.w	r3, r3, #8
 800c416:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c418:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800c41a:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800c41c:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c41e:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800c422:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c426:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800c428:	f889 5034 	strb.w	r5, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c42c:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800c430:	2b00      	cmp	r3, #0
 800c432:	f47f af70 	bne.w	800c316 <HAL_DMA_IRQHandler+0x3d2>
}
 800c436:	b003      	add	sp, #12
 800c438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	0318      	lsls	r0, r3, #12
 800c440:	f57f aeb7 	bpl.w	800c1b2 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c444:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f47f aec3 	bne.w	800c1d4 <HAL_DMA_IRQHandler+0x290>
 800c44e:	e6c5      	b.n	800c1dc <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c450:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800c454:	f47f af2c 	bne.w	800c2b0 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c458:	6811      	ldr	r1, [r2, #0]
 800c45a:	f021 0110 	bic.w	r1, r1, #16
 800c45e:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800c460:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800c462:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800c466:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
 800c46a:	e721      	b.n	800c2b0 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800c46c:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800c470:	2b00      	cmp	r3, #0
 800c472:	f47f af20 	bne.w	800c2b6 <HAL_DMA_IRQHandler+0x372>
 800c476:	e720      	b.n	800c2ba <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c478:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1c7      	bne.n	800c410 <HAL_DMA_IRQHandler+0x4cc>
 800c480:	e7ca      	b.n	800c418 <HAL_DMA_IRQHandler+0x4d4>
 800c482:	bf00      	nop
 800c484:	40020010 	.word	0x40020010
 800c488:	40020028 	.word	0x40020028
 800c48c:	400204b8 	.word	0x400204b8
 800c490:	1b4e81b5 	.word	0x1b4e81b5
 800c494:	40020058 	.word	0x40020058
 800c498:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c49c:	4a4e      	ldr	r2, [pc, #312]	; (800c5d8 <HAL_DMA_IRQHandler+0x694>)
 800c49e:	4d4f      	ldr	r5, [pc, #316]	; (800c5dc <HAL_DMA_IRQHandler+0x698>)
 800c4a0:	42ab      	cmp	r3, r5
 800c4a2:	bf18      	it	ne
 800c4a4:	4293      	cmpne	r3, r2
 800c4a6:	f105 0514 	add.w	r5, r5, #20
 800c4aa:	bf0c      	ite	eq
 800c4ac:	2201      	moveq	r2, #1
 800c4ae:	2200      	movne	r2, #0
 800c4b0:	42ab      	cmp	r3, r5
 800c4b2:	bf08      	it	eq
 800c4b4:	f042 0201 	orreq.w	r2, r2, #1
 800c4b8:	3514      	adds	r5, #20
 800c4ba:	42ab      	cmp	r3, r5
 800c4bc:	bf08      	it	eq
 800c4be:	f042 0201 	orreq.w	r2, r2, #1
 800c4c2:	3514      	adds	r5, #20
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	bf08      	it	eq
 800c4c8:	f042 0201 	orreq.w	r2, r2, #1
 800c4cc:	3514      	adds	r5, #20
 800c4ce:	42ab      	cmp	r3, r5
 800c4d0:	bf08      	it	eq
 800c4d2:	f042 0201 	orreq.w	r2, r2, #1
 800c4d6:	3514      	adds	r5, #20
 800c4d8:	42ab      	cmp	r3, r5
 800c4da:	bf08      	it	eq
 800c4dc:	f042 0201 	orreq.w	r2, r2, #1
 800c4e0:	b912      	cbnz	r2, 800c4e8 <HAL_DMA_IRQHandler+0x5a4>
 800c4e2:	4a3f      	ldr	r2, [pc, #252]	; (800c5e0 <HAL_DMA_IRQHandler+0x69c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d1a6      	bne.n	800c436 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c4e8:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800c4ec:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c4ee:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c4f0:	f005 051f 	and.w	r5, r5, #31
 800c4f4:	40ae      	lsls	r6, r5
 800c4f6:	420e      	tst	r6, r1
 800c4f8:	d019      	beq.n	800c52e <HAL_DMA_IRQHandler+0x5ea>
 800c4fa:	0757      	lsls	r7, r2, #29
 800c4fc:	d517      	bpl.n	800c52e <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c4fe:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c500:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c502:	d54b      	bpl.n	800c59c <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c504:	03d1      	lsls	r1, r2, #15
 800c506:	d44f      	bmi.n	800c5a8 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c508:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f47f af02 	bne.w	800c316 <HAL_DMA_IRQHandler+0x3d2>
 800c512:	e790      	b.n	800c436 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c514:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c516:	2210      	movs	r2, #16
 800c518:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c51c:	ea17 0f0c 	tst.w	r7, ip
 800c520:	f43f ae5c 	beq.w	800c1dc <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	0752      	lsls	r2, r2, #29
 800c528:	f57f ae58 	bpl.w	800c1dc <HAL_DMA_IRQHandler+0x298>
 800c52c:	e634      	b.n	800c198 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800c52e:	2602      	movs	r6, #2
 800c530:	40ae      	lsls	r6, r5
 800c532:	420e      	tst	r6, r1
 800c534:	d011      	beq.n	800c55a <HAL_DMA_IRQHandler+0x616>
 800c536:	0797      	lsls	r7, r2, #30
 800c538:	d50f      	bpl.n	800c55a <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c53a:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c53c:	0414      	lsls	r4, r2, #16
 800c53e:	d539      	bpl.n	800c5b4 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c540:	03d0      	lsls	r0, r2, #15
 800c542:	d443      	bmi.n	800c5cc <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 800c544:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f47f aee4 	bne.w	800c316 <HAL_DMA_IRQHandler+0x3d2>
 800c54e:	e772      	b.n	800c436 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c550:	6813      	ldr	r3, [r2, #0]
 800c552:	079f      	lsls	r7, r3, #30
 800c554:	f57f aeb1 	bpl.w	800c2ba <HAL_DMA_IRQHandler+0x376>
 800c558:	e69b      	b.n	800c292 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c55a:	2608      	movs	r6, #8
 800c55c:	40ae      	lsls	r6, r5
 800c55e:	420e      	tst	r6, r1
 800c560:	f43f af69 	beq.w	800c436 <HAL_DMA_IRQHandler+0x4f2>
 800c564:	0711      	lsls	r1, r2, #28
 800c566:	f57f af66 	bpl.w	800c436 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c56a:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800c56c:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c56e:	f022 020e 	bic.w	r2, r2, #14
 800c572:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c574:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800c576:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c57a:	fa03 f505 	lsl.w	r5, r3, r5
 800c57e:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c580:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800c584:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c588:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	f43f af52 	beq.w	800c436 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800c592:	4648      	mov	r0, r9
}
 800c594:	b003      	add	sp, #12
 800c596:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800c59a:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c59c:	0692      	lsls	r2, r2, #26
 800c59e:	d403      	bmi.n	800c5a8 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	f022 0204 	bic.w	r2, r2, #4
 800c5a6:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800c5a8:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f47f aeb2 	bne.w	800c316 <HAL_DMA_IRQHandler+0x3d2>
 800c5b2:	e740      	b.n	800c436 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c5b4:	f012 0220 	ands.w	r2, r2, #32
 800c5b8:	d108      	bne.n	800c5cc <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c5ba:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800c5bc:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c5be:	f021 010a 	bic.w	r1, r1, #10
 800c5c2:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800c5c4:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c5c8:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800c5cc:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f47f aea0 	bne.w	800c316 <HAL_DMA_IRQHandler+0x3d2>
 800c5d6:	e72e      	b.n	800c436 <HAL_DMA_IRQHandler+0x4f2>
 800c5d8:	58025408 	.word	0x58025408
 800c5dc:	5802541c 	.word	0x5802541c
 800c5e0:	58025494 	.word	0x58025494

0800c5e4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800c5e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800c5e6:	4770      	bx	lr

0800c5e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c5ec:	680d      	ldr	r5, [r1, #0]
{
 800c5ee:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	f000 80eb 	beq.w	800c7cc <HAL_GPIO_Init+0x1e4>
 800c5f6:	f04f 0c00 	mov.w	ip, #0
 800c5fa:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800c864 <HAL_GPIO_Init+0x27c>
  uint32_t position = 0x00U;
 800c5fe:	4663      	mov	r3, ip
 800c600:	e025      	b.n	800c64e <HAL_GPIO_Init+0x66>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c602:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800c606:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c60a:	f04f 0a0f 	mov.w	sl, #15
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c60e:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c612:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800c616:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c61a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c61e:	fa0a fa09 	lsl.w	sl, sl, r9
        temp = GPIOx->AFR[position >> 3U];
 800c622:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c626:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c62a:	690a      	ldr	r2, [r1, #16]
 800c62c:	fa02 f209 	lsl.w	r2, r2, r9
 800c630:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 800c634:	f8ce 2020 	str.w	r2, [lr, #32]
      temp = GPIOx->MODER;
 800c638:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c63a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c63c:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;
 800c63e:	6006      	str	r6, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800c640:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c642:	f10c 0c02 	add.w	ip, ip, #2
 800c646:	fa35 f203 	lsrs.w	r2, r5, r3
 800c64a:	f000 80bf 	beq.w	800c7cc <HAL_GPIO_Init+0x1e4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c64e:	2201      	movs	r2, #1
 800c650:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800c652:	ea12 0e05 	ands.w	lr, r2, r5
 800c656:	d0f3      	beq.n	800c640 <HAL_GPIO_Init+0x58>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c658:	684c      	ldr	r4, [r1, #4]
 800c65a:	f024 0910 	bic.w	r9, r4, #16
 800c65e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c662:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c664:	f04f 0603 	mov.w	r6, #3
 800c668:	fa06 f60c 	lsl.w	r6, r6, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c66c:	f200 80b1 	bhi.w	800c7d2 <HAL_GPIO_Init+0x1ea>
        temp = GPIOx->OSPEEDR;
 800c670:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c674:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c676:	ea2a 0a06 	bic.w	sl, sl, r6
 800c67a:	43f6      	mvns	r6, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c67c:	fa07 fb0c 	lsl.w	fp, r7, ip
 800c680:	ea4b 0a0a 	orr.w	sl, fp, sl
        GPIOx->OSPEEDR = temp;
 800c684:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c688:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp = GPIOx->OTYPER;
 800c68c:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c690:	fa0a fa03 	lsl.w	sl, sl, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c694:	ea2b 0202 	bic.w	r2, fp, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c698:	ea4a 0202 	orr.w	r2, sl, r2
        GPIOx->OTYPER = temp;
 800c69c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800c69e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6a0:	f1b9 0f02 	cmp.w	r9, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c6a4:	ea02 0a06 	and.w	sl, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c6a8:	688a      	ldr	r2, [r1, #8]
 800c6aa:	fa02 f20c 	lsl.w	r2, r2, ip
 800c6ae:	ea42 020a 	orr.w	r2, r2, sl
      GPIOx->PUPDR = temp;
 800c6b2:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6b4:	d0a5      	beq.n	800c602 <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 800c6b6:	6802      	ldr	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c6b8:	00e7      	lsls	r7, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c6ba:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c6be:	f004 0603 	and.w	r6, r4, #3
 800c6c2:	fa06 f60c 	lsl.w	r6, r6, ip
 800c6c6:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->MODER = temp;
 800c6ca:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c6cc:	d5b8      	bpl.n	800c640 <HAL_GPIO_Init+0x58>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6ce:	4e5e      	ldr	r6, [pc, #376]	; (800c848 <HAL_GPIO_Init+0x260>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c6d0:	f003 0903 	and.w	r9, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c6d4:	4f5d      	ldr	r7, [pc, #372]	; (800c84c <HAL_GPIO_Init+0x264>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6d6:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c6da:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c6de:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6e0:	f042 0202 	orr.w	r2, r2, #2
 800c6e4:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 800c6e8:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
 800c6ec:	f023 0603 	bic.w	r6, r3, #3
 800c6f0:	f002 0202 	and.w	r2, r2, #2
 800c6f4:	4446      	add	r6, r8
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c6fa:	f04f 020f 	mov.w	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800c6fe:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c702:	fa02 f209 	lsl.w	r2, r2, r9
 800c706:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c70a:	d026      	beq.n	800c75a <HAL_GPIO_Init+0x172>
 800c70c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800c710:	42b8      	cmp	r0, r7
 800c712:	d067      	beq.n	800c7e4 <HAL_GPIO_Init+0x1fc>
 800c714:	4f4e      	ldr	r7, [pc, #312]	; (800c850 <HAL_GPIO_Init+0x268>)
 800c716:	42b8      	cmp	r0, r7
 800c718:	d06b      	beq.n	800c7f2 <HAL_GPIO_Init+0x20a>
 800c71a:	4f4e      	ldr	r7, [pc, #312]	; (800c854 <HAL_GPIO_Init+0x26c>)
 800c71c:	42b8      	cmp	r0, r7
 800c71e:	d05a      	beq.n	800c7d6 <HAL_GPIO_Init+0x1ee>
 800c720:	4f4d      	ldr	r7, [pc, #308]	; (800c858 <HAL_GPIO_Init+0x270>)
 800c722:	42b8      	cmp	r0, r7
 800c724:	d073      	beq.n	800c80e <HAL_GPIO_Init+0x226>
 800c726:	4f4d      	ldr	r7, [pc, #308]	; (800c85c <HAL_GPIO_Init+0x274>)
 800c728:	42b8      	cmp	r0, r7
 800c72a:	d077      	beq.n	800c81c <HAL_GPIO_Init+0x234>
 800c72c:	4f4c      	ldr	r7, [pc, #304]	; (800c860 <HAL_GPIO_Init+0x278>)
 800c72e:	42b8      	cmp	r0, r7
 800c730:	d066      	beq.n	800c800 <HAL_GPIO_Init+0x218>
 800c732:	f8df a134 	ldr.w	sl, [pc, #308]	; 800c868 <HAL_GPIO_Init+0x280>
 800c736:	4550      	cmp	r0, sl
 800c738:	d077      	beq.n	800c82a <HAL_GPIO_Init+0x242>
 800c73a:	f8df a130 	ldr.w	sl, [pc, #304]	; 800c86c <HAL_GPIO_Init+0x284>
 800c73e:	4550      	cmp	r0, sl
 800c740:	d07a      	beq.n	800c838 <HAL_GPIO_Init+0x250>
 800c742:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800c870 <HAL_GPIO_Init+0x288>
 800c746:	4550      	cmp	r0, sl
 800c748:	bf0c      	ite	eq
 800c74a:	f04f 0a09 	moveq.w	sl, #9
 800c74e:	f04f 0a0a 	movne.w	sl, #10
 800c752:	fa0a f909 	lsl.w	r9, sl, r9
 800c756:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c75a:	60b2      	str	r2, [r6, #8]
        temp = EXTI_CurrentCPU->IMR1;
 800c75c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c760:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 800c762:	ea6f 090e 	mvn.w	r9, lr
        temp = EXTI_CurrentCPU->IMR1;
 800c766:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        EXTI_CurrentCPU->IMR1 = temp;
 800c76a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    position++;
 800c76e:	f103 0301 	add.w	r3, r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c772:	f10c 0c02 	add.w	ip, ip, #2
        temp &= ~(iocurrent);
 800c776:	bf54      	ite	pl
 800c778:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 800c77c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800c780:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c784:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800c786:	f8d6 6084 	ldr.w	r6, [r6, #132]	; 0x84
        EXTI_CurrentCPU->EMR1 = temp;
 800c78a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800c78e:	bf54      	ite	pl
 800c790:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 800c794:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c798:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800c79a:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 800c79e:	6816      	ldr	r6, [r2, #0]
        EXTI->RTSR1 = temp;
 800c7a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800c7a4:	bf54      	ite	pl
 800c7a6:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 800c7aa:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c7ae:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800c7b0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800c7b4:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800c7b6:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800c7b8:	bf54      	ite	pl
 800c7ba:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 800c7be:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 800c7c2:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c7c4:	fa35 f203 	lsrs.w	r2, r5, r3
 800c7c8:	f47f af41 	bne.w	800c64e <HAL_GPIO_Init+0x66>
  }
}
 800c7cc:	b003      	add	sp, #12
 800c7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c7d2:	43f6      	mvns	r6, r6
 800c7d4:	e763      	b.n	800c69e <HAL_GPIO_Init+0xb6>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c7d6:	f04f 0a03 	mov.w	sl, #3
 800c7da:	fa0a f909 	lsl.w	r9, sl, r9
 800c7de:	ea42 0209 	orr.w	r2, r2, r9
 800c7e2:	e7ba      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c7e4:	f04f 0a01 	mov.w	sl, #1
 800c7e8:	fa0a f909 	lsl.w	r9, sl, r9
 800c7ec:	ea42 0209 	orr.w	r2, r2, r9
 800c7f0:	e7b3      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c7f2:	f04f 0a02 	mov.w	sl, #2
 800c7f6:	fa0a f909 	lsl.w	r9, sl, r9
 800c7fa:	ea42 0209 	orr.w	r2, r2, r9
 800c7fe:	e7ac      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c800:	f04f 0a06 	mov.w	sl, #6
 800c804:	fa0a f909 	lsl.w	r9, sl, r9
 800c808:	ea42 0209 	orr.w	r2, r2, r9
 800c80c:	e7a5      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c80e:	f04f 0a04 	mov.w	sl, #4
 800c812:	fa0a f909 	lsl.w	r9, sl, r9
 800c816:	ea42 0209 	orr.w	r2, r2, r9
 800c81a:	e79e      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c81c:	f04f 0a05 	mov.w	sl, #5
 800c820:	fa0a f909 	lsl.w	r9, sl, r9
 800c824:	ea42 0209 	orr.w	r2, r2, r9
 800c828:	e797      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c82a:	f04f 0a07 	mov.w	sl, #7
 800c82e:	fa0a f909 	lsl.w	r9, sl, r9
 800c832:	ea42 0209 	orr.w	r2, r2, r9
 800c836:	e790      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c838:	f04f 0a08 	mov.w	sl, #8
 800c83c:	fa0a f909 	lsl.w	r9, sl, r9
 800c840:	ea42 0209 	orr.w	r2, r2, r9
 800c844:	e789      	b.n	800c75a <HAL_GPIO_Init+0x172>
 800c846:	bf00      	nop
 800c848:	58024400 	.word	0x58024400
 800c84c:	58020000 	.word	0x58020000
 800c850:	58020800 	.word	0x58020800
 800c854:	58020c00 	.word	0x58020c00
 800c858:	58021000 	.word	0x58021000
 800c85c:	58021400 	.word	0x58021400
 800c860:	58021800 	.word	0x58021800
 800c864:	58000400 	.word	0x58000400
 800c868:	58021c00 	.word	0x58021c00
 800c86c:	58022000 	.word	0x58022000
 800c870:	58022400 	.word	0x58022400

0800c874 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c874:	2900      	cmp	r1, #0
 800c876:	f000 80a8 	beq.w	800c9ca <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
 800c87a:	2300      	movs	r3, #0
{
 800c87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800c9ec <HAL_GPIO_DeInit+0x178>
 800c884:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c886:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800c9f0 <HAL_GPIO_DeInit+0x17c>
 800c88a:	f8df a168 	ldr.w	sl, [pc, #360]	; 800c9f4 <HAL_GPIO_DeInit+0x180>
 800c88e:	f8df b168 	ldr.w	fp, [pc, #360]	; 800c9f8 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c892:	f04f 0e01 	mov.w	lr, #1
 800c896:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
 800c89a:	ea12 0c01 	ands.w	ip, r2, r1
 800c89e:	d06f      	beq.n	800c980 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c8a0:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c8a4:	f003 0403 	and.w	r4, r3, #3
 800c8a8:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c8aa:	4540      	cmp	r0, r8
 800c8ac:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c8ae:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c8b2:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c8b4:	fa06 f604 	lsl.w	r6, r6, r4
 800c8b8:	ea07 0706 	and.w	r7, r7, r6
 800c8bc:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c8be:	d021      	beq.n	800c904 <HAL_GPIO_DeInit+0x90>
 800c8c0:	4550      	cmp	r0, sl
 800c8c2:	d066      	beq.n	800c992 <HAL_GPIO_DeInit+0x11e>
 800c8c4:	4558      	cmp	r0, fp
 800c8c6:	d067      	beq.n	800c998 <HAL_GPIO_DeInit+0x124>
 800c8c8:	4f43      	ldr	r7, [pc, #268]	; (800c9d8 <HAL_GPIO_DeInit+0x164>)
 800c8ca:	42b8      	cmp	r0, r7
 800c8cc:	d06e      	beq.n	800c9ac <HAL_GPIO_DeInit+0x138>
 800c8ce:	4f43      	ldr	r7, [pc, #268]	; (800c9dc <HAL_GPIO_DeInit+0x168>)
 800c8d0:	42b8      	cmp	r0, r7
 800c8d2:	d070      	beq.n	800c9b6 <HAL_GPIO_DeInit+0x142>
 800c8d4:	4f42      	ldr	r7, [pc, #264]	; (800c9e0 <HAL_GPIO_DeInit+0x16c>)
 800c8d6:	42b8      	cmp	r0, r7
 800c8d8:	d063      	beq.n	800c9a2 <HAL_GPIO_DeInit+0x12e>
 800c8da:	4f42      	ldr	r7, [pc, #264]	; (800c9e4 <HAL_GPIO_DeInit+0x170>)
 800c8dc:	42b8      	cmp	r0, r7
 800c8de:	d056      	beq.n	800c98e <HAL_GPIO_DeInit+0x11a>
 800c8e0:	4f41      	ldr	r7, [pc, #260]	; (800c9e8 <HAL_GPIO_DeInit+0x174>)
 800c8e2:	42b8      	cmp	r0, r7
 800c8e4:	d072      	beq.n	800c9cc <HAL_GPIO_DeInit+0x158>
 800c8e6:	f8df e114 	ldr.w	lr, [pc, #276]	; 800c9fc <HAL_GPIO_DeInit+0x188>
 800c8ea:	4570      	cmp	r0, lr
 800c8ec:	d068      	beq.n	800c9c0 <HAL_GPIO_DeInit+0x14c>
 800c8ee:	f8df e110 	ldr.w	lr, [pc, #272]	; 800ca00 <HAL_GPIO_DeInit+0x18c>
 800c8f2:	4570      	cmp	r0, lr
 800c8f4:	bf14      	ite	ne
 800c8f6:	f04f 0e0a 	movne.w	lr, #10
 800c8fa:	f04f 0e09 	moveq.w	lr, #9
 800c8fe:	fa0e f404 	lsl.w	r4, lr, r4
 800c902:	e000      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c904:	2400      	movs	r4, #0
 800c906:	9f01      	ldr	r7, [sp, #4]
 800c908:	42a7      	cmp	r7, r4
 800c90a:	d119      	bne.n	800c940 <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c90c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800c910:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800c914:	ea27 070c 	bic.w	r7, r7, ip
 800c918:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c91c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 800c920:	ea27 070c 	bic.w	r7, r7, ip
 800c924:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c928:	6827      	ldr	r7, [r4, #0]
 800c92a:	ea27 070c 	bic.w	r7, r7, ip
 800c92e:	6027      	str	r7, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800c930:	6867      	ldr	r7, [r4, #4]
 800c932:	ea27 070c 	bic.w	r7, r7, ip
 800c936:	6067      	str	r7, [r4, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c938:	68ac      	ldr	r4, [r5, #8]
 800c93a:	ea24 0606 	bic.w	r6, r4, r6
 800c93e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c940:	2503      	movs	r5, #3
 800c942:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c944:	f003 0707 	and.w	r7, r3, #7
 800c948:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c94a:	fa05 f404 	lsl.w	r4, r5, r4
 800c94e:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c950:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c952:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c954:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c958:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c95a:	08dd      	lsrs	r5, r3, #3
 800c95c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c960:	6a2e      	ldr	r6, [r5, #32]
 800c962:	ea26 0607 	bic.w	r6, r6, r7
 800c966:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c968:	68c5      	ldr	r5, [r0, #12]
 800c96a:	ea25 0504 	bic.w	r5, r5, r4
 800c96e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c970:	6845      	ldr	r5, [r0, #4]
 800c972:	ea25 0202 	bic.w	r2, r5, r2
 800c976:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c978:	6882      	ldr	r2, [r0, #8]
 800c97a:	ea22 0404 	bic.w	r4, r2, r4
 800c97e:	6084      	str	r4, [r0, #8]
    }

    position++;
 800c980:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800c982:	fa31 f203 	lsrs.w	r2, r1, r3
 800c986:	d184      	bne.n	800c892 <HAL_GPIO_DeInit+0x1e>
  }
}
 800c988:	b003      	add	sp, #12
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c98e:	f04f 0e06 	mov.w	lr, #6
 800c992:	fa0e f404 	lsl.w	r4, lr, r4
 800c996:	e7b6      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c998:	f04f 0e02 	mov.w	lr, #2
 800c99c:	fa0e f404 	lsl.w	r4, lr, r4
 800c9a0:	e7b1      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9a2:	f04f 0e05 	mov.w	lr, #5
 800c9a6:	fa0e f404 	lsl.w	r4, lr, r4
 800c9aa:	e7ac      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9ac:	f04f 0e03 	mov.w	lr, #3
 800c9b0:	fa0e f404 	lsl.w	r4, lr, r4
 800c9b4:	e7a7      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9b6:	f04f 0e04 	mov.w	lr, #4
 800c9ba:	fa0e f404 	lsl.w	r4, lr, r4
 800c9be:	e7a2      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9c0:	f04f 0e08 	mov.w	lr, #8
 800c9c4:	fa0e f404 	lsl.w	r4, lr, r4
 800c9c8:	e79d      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9ca:	4770      	bx	lr
 800c9cc:	f04f 0e07 	mov.w	lr, #7
 800c9d0:	fa0e f404 	lsl.w	r4, lr, r4
 800c9d4:	e797      	b.n	800c906 <HAL_GPIO_DeInit+0x92>
 800c9d6:	bf00      	nop
 800c9d8:	58020c00 	.word	0x58020c00
 800c9dc:	58021000 	.word	0x58021000
 800c9e0:	58021400 	.word	0x58021400
 800c9e4:	58021800 	.word	0x58021800
 800c9e8:	58021c00 	.word	0x58021c00
 800c9ec:	58000400 	.word	0x58000400
 800c9f0:	58020000 	.word	0x58020000
 800c9f4:	58020400 	.word	0x58020400
 800c9f8:	58020800 	.word	0x58020800
 800c9fc:	58022000 	.word	0x58022000
 800ca00:	58022400 	.word	0x58022400

0800ca04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ca04:	b902      	cbnz	r2, 800ca08 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ca06:	0409      	lsls	r1, r1, #16
 800ca08:	6181      	str	r1, [r0, #24]
  }
}
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800ca0c:	4a04      	ldr	r2, [pc, #16]	; (800ca20 <HAL_HSEM_FastTake+0x14>)
 800ca0e:	3020      	adds	r0, #32
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <HAL_HSEM_FastTake+0x18>)
 800ca12:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800ca16:	1ac0      	subs	r0, r0, r3
 800ca18:	bf18      	it	ne
 800ca1a:	2001      	movne	r0, #1
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	58026400 	.word	0x58026400
 800ca24:	80000300 	.word	0x80000300

0800ca28 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ca28:	4b02      	ldr	r3, [pc, #8]	; (800ca34 <HAL_HSEM_Release+0xc>)
 800ca2a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800ca2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800ca32:	4770      	bx	lr
 800ca34:	58026400 	.word	0x58026400

0800ca38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ca38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	f000 8088 	beq.w	800cb52 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca42:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800ca46:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800ca48:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d079      	beq.n	800cb46 <HAL_PCD_Init+0x10e>
 800ca52:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca54:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca56:	462e      	mov	r6, r5
 800ca58:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca5a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca60:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca62:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800ca66:	bf08      	it	eq
 800ca68:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800ca6a:	f004 f977 	bl	8010d5c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca6e:	f856 eb10 	ldr.w	lr, [r6], #16
 800ca72:	46b4      	mov	ip, r6
 800ca74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca80:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ca84:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca88:	4670      	mov	r0, lr
 800ca8a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ca8e:	f004 f859 	bl	8010b44 <USB_CoreInit>
 800ca92:	4604      	mov	r4, r0
 800ca94:	b130      	cbz	r0, 800caa4 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800ca96:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca98:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800ca9a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca9c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800caa0:	b00b      	add	sp, #44	; 0x2c
 800caa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800caa4:	4601      	mov	r1, r0
 800caa6:	6828      	ldr	r0, [r5, #0]
 800caa8:	f004 f960 	bl	8010d6c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caac:	6868      	ldr	r0, [r5, #4]
 800caae:	b358      	cbz	r0, 800cb08 <HAL_PCD_Init+0xd0>
 800cab0:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800cab2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cab6:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800cab8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cabc:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800cac0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800cac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cac8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cacc:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800cad0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cad4:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cad6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800cada:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cadc:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cae0:	d3ea      	bcc.n	800cab8 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800cae2:	2200      	movs	r2, #0
 800cae4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cae8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800caea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800caee:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caf2:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800caf4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caf8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cafa:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cafe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb02:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb06:	d3ed      	bcc.n	800cae4 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cb08:	466c      	mov	r4, sp
 800cb0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb12:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cb16:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb1a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cb1e:	6828      	ldr	r0, [r5, #0]
 800cb20:	f004 f93c 	bl	8010d9c <USB_DevInit>
 800cb24:	4604      	mov	r4, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d1b5      	bne.n	800ca96 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800cb2a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800cb2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800cb2e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800cb32:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800cb34:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800cb38:	d00f      	beq.n	800cb5a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800cb3a:	6828      	ldr	r0, [r5, #0]
 800cb3c:	f004 fd78 	bl	8011630 <USB_DevDisconnect>
}
 800cb40:	4620      	mov	r0, r4
 800cb42:	b00b      	add	sp, #44	; 0x2c
 800cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800cb46:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800cb4a:	f014 fe6b 	bl	8021824 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800cb4e:	6828      	ldr	r0, [r5, #0]
 800cb50:	e780      	b.n	800ca54 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800cb52:	2401      	movs	r4, #1
}
 800cb54:	4620      	mov	r0, r4
 800cb56:	b00b      	add	sp, #44	; 0x2c
 800cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f000 fcda 	bl	800d514 <HAL_PCDEx_ActivateLPM>
 800cb60:	e7eb      	b.n	800cb3a <HAL_PCD_Init+0x102>
 800cb62:	bf00      	nop

0800cb64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cb64:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800cb66:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800cb6a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb6c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d017      	beq.n	800cba2 <HAL_PCD_Start+0x3e>
 800cb72:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cb74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb76:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 800cb78:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cb7c:	d009      	beq.n	800cb92 <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800cb7e:	f004 f8e5 	bl	8010d4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	f004 fd44 	bl	8011610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cb88:	2300      	movs	r3, #0

  return HAL_OK;
 800cb8a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cb8c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cb90:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cb92:	69a3      	ldr	r3, [r4, #24]
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d0f2      	beq.n	800cb7e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb98:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cb9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb9e:	6383      	str	r3, [r0, #56]	; 0x38
 800cba0:	e7ed      	b.n	800cb7e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 800cba2:	2002      	movs	r0, #2
}
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	bf00      	nop

0800cba8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cbac:	6807      	ldr	r7, [r0, #0]
{
 800cbae:	b089      	sub	sp, #36	; 0x24
 800cbb0:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f004 fd7a 	bl	80116ac <USB_GetMode>
 800cbb8:	b110      	cbz	r0, 800cbc0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800cbba:	b009      	add	sp, #36	; 0x24
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cbc0:	4683      	mov	fp, r0
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	f004 fd44 	bl	8011650 <USB_ReadInterrupts>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d0f6      	beq.n	800cbba <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cbcc:	6820      	ldr	r0, [r4, #0]
 800cbce:	f004 fd3f 	bl	8011650 <USB_ReadInterrupts>
 800cbd2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cbd6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cbd8:	d003      	beq.n	800cbe2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cbda:	6943      	ldr	r3, [r0, #20]
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cbe2:	f004 fd35 	bl	8011650 <USB_ReadInterrupts>
 800cbe6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cbea:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cbec:	d012      	beq.n	800cc14 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cbee:	6983      	ldr	r3, [r0, #24]
 800cbf0:	f023 0310 	bic.w	r3, r3, #16
 800cbf4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800cbf6:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cbf8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cbfc:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	f000 825c 	beq.w	800d0be <HAL_PCD_IRQHandler+0x516>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cc06:	2b06      	cmp	r3, #6
 800cc08:	f000 81b7 	beq.w	800cf7a <HAL_PCD_IRQHandler+0x3d2>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cc0c:	6983      	ldr	r3, [r0, #24]
 800cc0e:	f043 0310 	orr.w	r3, r3, #16
 800cc12:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cc14:	f004 fd1c 	bl	8011650 <USB_ReadInterrupts>
 800cc18:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cc1c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cc1e:	f040 80cf 	bne.w	800cdc0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cc22:	f004 fd15 	bl	8011650 <USB_ReadInterrupts>
 800cc26:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cc2a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cc2c:	d175      	bne.n	800cd1a <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cc2e:	f004 fd0f 	bl	8011650 <USB_ReadInterrupts>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	db5d      	blt.n	800ccf2 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cc36:	6820      	ldr	r0, [r4, #0]
 800cc38:	f004 fd0a 	bl	8011650 <USB_ReadInterrupts>
 800cc3c:	0500      	lsls	r0, r0, #20
 800cc3e:	d44d      	bmi.n	800ccdc <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	f004 fd05 	bl	8011650 <USB_ReadInterrupts>
 800cc46:	0102      	lsls	r2, r0, #4
 800cc48:	d514      	bpl.n	800cc74 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cc4a:	6822      	ldr	r2, [r4, #0]
 800cc4c:	6953      	ldr	r3, [r2, #20]
 800cc4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc52:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800cc54:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 8178 	bne.w	800cf4e <HAL_PCD_IRQHandler+0x3a6>
        hpcd->LPM_State = LPM_L1;
 800cc5e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cc60:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800cc62:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cc66:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cc68:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800cc6c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cc70:	f000 fc68 	bl	800d544 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	f004 fceb 	bl	8011650 <USB_ReadInterrupts>
 800cc7a:	04c3      	lsls	r3, r0, #19
 800cc7c:	f100 8116 	bmi.w	800ceac <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc80:	6820      	ldr	r0, [r4, #0]
 800cc82:	f004 fce5 	bl	8011650 <USB_ReadInterrupts>
 800cc86:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800cc8a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc8c:	f040 80f7 	bne.w	800ce7e <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cc90:	f004 fcde 	bl	8011650 <USB_ReadInterrupts>
 800cc94:	0707      	lsls	r7, r0, #28
 800cc96:	f100 80e9 	bmi.w	800ce6c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	f004 fcd8 	bl	8011650 <USB_ReadInterrupts>
 800cca0:	02c6      	lsls	r6, r0, #11
 800cca2:	f100 80d9 	bmi.w	800ce58 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	f004 fcd2 	bl	8011650 <USB_ReadInterrupts>
 800ccac:	0285      	lsls	r5, r0, #10
 800ccae:	f100 80c9 	bmi.w	800ce44 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ccb2:	6820      	ldr	r0, [r4, #0]
 800ccb4:	f004 fccc 	bl	8011650 <USB_ReadInterrupts>
 800ccb8:	0040      	lsls	r0, r0, #1
 800ccba:	f100 80ba 	bmi.w	800ce32 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ccbe:	6820      	ldr	r0, [r4, #0]
 800ccc0:	f004 fcc6 	bl	8011650 <USB_ReadInterrupts>
 800ccc4:	0741      	lsls	r1, r0, #29
 800ccc6:	f57f af78 	bpl.w	800cbba <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ccce:	076a      	lsls	r2, r5, #29
 800ccd0:	f100 8216 	bmi.w	800d100 <HAL_PCD_IRQHandler+0x558>
      hpcd->Instance->GOTGINT |= temp;
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	432a      	orrs	r2, r5
 800ccd8:	605a      	str	r2, [r3, #4]
 800ccda:	e76e      	b.n	800cbba <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ccdc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800cce0:	07d9      	lsls	r1, r3, #31
 800cce2:	f100 8209 	bmi.w	800d0f8 <HAL_PCD_IRQHandler+0x550>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	6943      	ldr	r3, [r0, #20]
 800ccea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccee:	6143      	str	r3, [r0, #20]
 800ccf0:	e7a7      	b.n	800cc42 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ccf2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800ccf6:	f022 0201 	bic.w	r2, r2, #1
 800ccfa:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800ccfe:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	f000 8132 	beq.w	800cf6c <HAL_PCD_IRQHandler+0x3c4>
        HAL_PCD_ResumeCallback(hpcd);
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f014 fe49 	bl	80219a0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cd0e:	6820      	ldr	r0, [r4, #0]
 800cd10:	6943      	ldr	r3, [r0, #20]
 800cd12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd16:	6143      	str	r3, [r0, #20]
 800cd18:	e78e      	b.n	800cc38 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cd1a:	f004 fca5 	bl	8011668 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800cd1e:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd20:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800cd22:	f1b8 0f00 	cmp.w	r8, #0
 800cd26:	d082      	beq.n	800cc2e <HAL_PCD_IRQHandler+0x86>
 800cd28:	4626      	mov	r6, r4
 800cd2a:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800cd2e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cd32:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800cd36:	e009      	b.n	800cd4c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800cd38:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800cd3c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800cd40:	f106 061c 	add.w	r6, r6, #28
 800cd44:	f109 0920 	add.w	r9, r9, #32
 800cd48:	f000 812c 	beq.w	800cfa4 <HAL_PCD_IRQHandler+0x3fc>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800cd4c:	f018 0f01 	tst.w	r8, #1
 800cd50:	d0f2      	beq.n	800cd38 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd52:	fa5f f78a 	uxtb.w	r7, sl
 800cd56:	4639      	mov	r1, r7
 800cd58:	f004 fc98 	bl	801168c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cd5c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd5e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cd60:	d515      	bpl.n	800cd8e <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd62:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cd64:	f00a 030f 	and.w	r3, sl, #15
 800cd68:	2201      	movs	r2, #1
 800cd6a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd6c:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800cd70:	ea23 0302 	bic.w	r3, r3, r2
 800cd74:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cd78:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800cd7a:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cd7c:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800cd80:	4299      	cmp	r1, r3
 800cd82:	f000 81c2 	beq.w	800d10a <HAL_PCD_IRQHandler+0x562>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cd86:	4639      	mov	r1, r7
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f014 fdcd 	bl	8021928 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cd8e:	0728      	lsls	r0, r5, #28
 800cd90:	d502      	bpl.n	800cd98 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cd92:	2308      	movs	r3, #8
 800cd94:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cd98:	06e9      	lsls	r1, r5, #27
 800cd9a:	d502      	bpl.n	800cda2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cd9c:	2310      	movs	r3, #16
 800cd9e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cda2:	066a      	lsls	r2, r5, #25
 800cda4:	d502      	bpl.n	800cdac <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cda6:	2340      	movs	r3, #64	; 0x40
 800cda8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cdac:	07ab      	lsls	r3, r5, #30
 800cdae:	d502      	bpl.n	800cdb6 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cdb6:	062d      	lsls	r5, r5, #24
 800cdb8:	f100 80f7 	bmi.w	800cfaa <HAL_PCD_IRQHandler+0x402>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	e7bb      	b.n	800cd38 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cdc0:	f004 fc4a 	bl	8011658 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800cdc4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cdc6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800cdc8:	2d00      	cmp	r5, #0
 800cdca:	f43f af2a 	beq.w	800cc22 <HAL_PCD_IRQHandler+0x7a>
 800cdce:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800cdd2:	46a2      	mov	sl, r4
      epnum = 0U;
 800cdd4:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cdd8:	9703      	str	r7, [sp, #12]
 800cdda:	e008      	b.n	800cdee <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800cddc:	086d      	lsrs	r5, r5, #1
        epnum++;
 800cdde:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800cde2:	f106 0620 	add.w	r6, r6, #32
 800cde6:	f10a 0a1c 	add.w	sl, sl, #28
 800cdea:	f000 80d9 	beq.w	800cfa0 <HAL_PCD_IRQHandler+0x3f8>
        if ((ep_intr & 0x1U) != 0U)
 800cdee:	07ef      	lsls	r7, r5, #31
 800cdf0:	d5f4      	bpl.n	800cddc <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cdf2:	fa5f f788 	uxtb.w	r7, r8
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	f004 fc3e 	bl	8011678 <USB_ReadDevOutEPInterrupt>
 800cdfc:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cdfe:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ce00:	f019 0f01 	tst.w	r9, #1
 800ce04:	f040 813e 	bne.w	800d084 <HAL_PCD_IRQHandler+0x4dc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ce08:	f019 0f08 	tst.w	r9, #8
 800ce0c:	f040 8121 	bne.w	800d052 <HAL_PCD_IRQHandler+0x4aa>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ce10:	f019 0f10 	tst.w	r9, #16
 800ce14:	d001      	beq.n	800ce1a <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ce16:	2310      	movs	r3, #16
 800ce18:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce1a:	f019 0f20 	tst.w	r9, #32
 800ce1e:	d001      	beq.n	800ce24 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce20:	2320      	movs	r3, #32
 800ce22:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ce24:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800ce28:	d0d8      	beq.n	800cddc <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ce2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce2e:	60b3      	str	r3, [r6, #8]
 800ce30:	e7d4      	b.n	800cddc <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800ce32:	4620      	mov	r0, r4
 800ce34:	f014 fdc0 	bl	80219b8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	6943      	ldr	r3, [r0, #20]
 800ce3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce40:	6143      	str	r3, [r0, #20]
 800ce42:	e73d      	b.n	800ccc0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce44:	4620      	mov	r0, r4
 800ce46:	2100      	movs	r1, #0
 800ce48:	f014 fdae 	bl	80219a8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ce4c:	6820      	ldr	r0, [r4, #0]
 800ce4e:	6943      	ldr	r3, [r0, #20]
 800ce50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce54:	6143      	str	r3, [r0, #20]
 800ce56:	e72d      	b.n	800ccb4 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ce58:	4620      	mov	r0, r4
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	f014 fda8 	bl	80219b0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	6943      	ldr	r3, [r0, #20]
 800ce64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce68:	6143      	str	r3, [r0, #20]
 800ce6a:	e71d      	b.n	800cca8 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f014 fd65 	bl	802193c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ce72:	6820      	ldr	r0, [r4, #0]
 800ce74:	6943      	ldr	r3, [r0, #20]
 800ce76:	f003 0308 	and.w	r3, r3, #8
 800ce7a:	6143      	str	r3, [r0, #20]
 800ce7c:	e70e      	b.n	800cc9c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800ce7e:	f004 fc19 	bl	80116b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce82:	6820      	ldr	r0, [r4, #0]
 800ce84:	f004 f892 	bl	8010fac <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce88:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce8a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce8c:	f001 f8d4 	bl	800e038 <HAL_RCC_GetHCLKFreq>
 800ce90:	7b22      	ldrb	r2, [r4, #12]
 800ce92:	4601      	mov	r1, r0
 800ce94:	4628      	mov	r0, r5
 800ce96:	f003 fedf 	bl	8010c58 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f014 fd52 	bl	8021944 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	6943      	ldr	r3, [r0, #20]
 800cea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cea8:	6143      	str	r3, [r0, #20]
 800ceaa:	e6f1      	b.n	800cc90 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ceac:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800ceb0:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ceb4:	2110      	movs	r1, #16
 800ceb6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ceb8:	f023 0301 	bic.w	r3, r3, #1
 800cebc:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cebe:	f004 f863 	bl	8010f88 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cec2:	6860      	ldr	r0, [r4, #4]
 800cec4:	b310      	cbz	r0, 800cf0c <HAL_PCD_IRQHandler+0x364>
 800cec6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ceca:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800cece:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ced0:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ced4:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ced6:	3320      	adds	r3, #32
 800ced8:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ceda:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800cede:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cee2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800cee6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ceea:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ceee:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cef2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800cef6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800cefa:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cefe:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800cf02:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cf06:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cf0a:	d1e0      	bne.n	800cece <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cf0c:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cf0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cf10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cf14:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cf16:	b9f2      	cbnz	r2, 800cf56 <HAL_PCD_IRQHandler+0x3ae>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cf18:	696a      	ldr	r2, [r5, #20]
 800cf1a:	f242 032b 	movw	r3, #8235	; 0x202b
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cf22:	692b      	ldr	r3, [r5, #16]
 800cf24:	f043 030b 	orr.w	r3, r3, #11
 800cf28:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cf2a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf2e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cf32:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cf34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf38:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cf3a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cf3e:	f004 fbcf 	bl	80116e0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cf42:	6820      	ldr	r0, [r4, #0]
 800cf44:	6943      	ldr	r3, [r0, #20]
 800cf46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf4a:	6143      	str	r3, [r0, #20]
 800cf4c:	e699      	b.n	800cc82 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f014 fd0e 	bl	8021970 <HAL_PCD_SuspendCallback>
 800cf54:	e68e      	b.n	800cc74 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cf56:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800cf5a:	f043 030b 	orr.w	r3, r3, #11
 800cf5e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cf62:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cf64:	f043 030b 	orr.w	r3, r3, #11
 800cf68:	646b      	str	r3, [r5, #68]	; 0x44
 800cf6a:	e7de      	b.n	800cf2a <HAL_PCD_IRQHandler+0x382>
        hpcd->LPM_State = LPM_L0;
 800cf6c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cf6e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800cf70:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cf74:	f000 fae6 	bl	800d544 <HAL_PCDEx_LPM_Callback>
 800cf78:	e6c9      	b.n	800cd0e <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf7a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cf7e:	2208      	movs	r2, #8
 800cf80:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800cf84:	4638      	mov	r0, r7
 800cf86:	f004 faab 	bl	80114e0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf8a:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800cf8e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cf92:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf94:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800cf98:	440b      	add	r3, r1
 800cf9a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800cf9e:	e635      	b.n	800cc0c <HAL_PCD_IRQHandler+0x64>
 800cfa0:	9f03      	ldr	r7, [sp, #12]
 800cfa2:	e63e      	b.n	800cc22 <HAL_PCD_IRQHandler+0x7a>
 800cfa4:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800cfa8:	e641      	b.n	800cc2e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800cfaa:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfae:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800cfb2:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfb4:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800cfb6:	f63f aebf 	bhi.w	800cd38 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfba:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800cfbe:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc0:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfc4:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800cfc8:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800cfca:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800cfcc:	428a      	cmp	r2, r1
 800cfce:	bf28      	it	cs
 800cfd0:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfd2:	9905      	ldr	r1, [sp, #20]
 800cfd4:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800cfd6:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfd8:	b289      	uxth	r1, r1
 800cfda:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800cfde:	f0c0 80c0 	bcc.w	800d162 <HAL_PCD_IRQHandler+0x5ba>
 800cfe2:	f8cd 9018 	str.w	r9, [sp, #24]
 800cfe6:	46c1      	mov	r9, r8
 800cfe8:	46a0      	mov	r8, r4
 800cfea:	9c05      	ldr	r4, [sp, #20]
 800cfec:	e01a      	b.n	800d024 <HAL_PCD_IRQHandler+0x47c>
 800cfee:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cff0:	463a      	mov	r2, r7
 800cff2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800cff4:	4658      	mov	r0, fp
 800cff6:	429d      	cmp	r5, r3
 800cff8:	bf28      	it	cs
 800cffa:	461d      	movcs	r5, r3
 800cffc:	f898 3010 	ldrb.w	r3, [r8, #16]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	b2ab      	uxth	r3, r5
 800d004:	f004 fa56 	bl	80114b4 <USB_WritePacket>
    ep->xfer_buff  += len;
 800d008:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d00a:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800d00c:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d00e:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800d010:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800d012:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d014:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800d016:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d018:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800d01c:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d01e:	f0c0 8098 	bcc.w	800d152 <HAL_PCD_IRQHandler+0x5aa>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d022:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800d024:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800d026:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d02a:	d3e0      	bcc.n	800cfee <HAL_PCD_IRQHandler+0x446>
 800d02c:	4644      	mov	r4, r8
 800d02e:	46c8      	mov	r8, r9
 800d030:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800d034:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d038:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d03a:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d03c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d03e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d042:	f00a 030f 	and.w	r3, sl, #15
 800d046:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d048:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800d04a:	ea23 0302 	bic.w	r3, r3, r2
 800d04e:	634b      	str	r3, [r1, #52]	; 0x34
 800d050:	e672      	b.n	800cd38 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d052:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d054:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d058:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d05e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d060:	4860      	ldr	r0, [pc, #384]	; (800d1e4 <HAL_PCD_IRQHandler+0x63c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d062:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d064:	4282      	cmp	r2, r0
 800d066:	d962      	bls.n	800d12e <HAL_PCD_IRQHandler+0x586>
 800d068:	040a      	lsls	r2, r1, #16
 800d06a:	d502      	bpl.n	800d072 <HAL_PCD_IRQHandler+0x4ca>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d06c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d070:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d072:	4620      	mov	r0, r4
 800d074:	f014 fc48 	bl	8021908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d078:	6921      	ldr	r1, [r4, #16]
 800d07a:	2901      	cmp	r1, #1
 800d07c:	f000 8081 	beq.w	800d182 <HAL_PCD_IRQHandler+0x5da>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d080:	6820      	ldr	r0, [r4, #0]
 800d082:	e6c5      	b.n	800ce10 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d084:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800d086:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d088:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d08a:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800d08e:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d090:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d094:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800d098:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800d09a:	d04d      	beq.n	800d138 <HAL_PCD_IRQHandler+0x590>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d09c:	4952      	ldr	r1, [pc, #328]	; (800d1e8 <HAL_PCD_IRQHandler+0x640>)
 800d09e:	458c      	cmp	ip, r1
 800d0a0:	d063      	beq.n	800d16a <HAL_PCD_IRQHandler+0x5c2>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d0a2:	f1b8 0f00 	cmp.w	r8, #0
 800d0a6:	d104      	bne.n	800d0b2 <HAL_PCD_IRQHandler+0x50a>
 800d0a8:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d0ac:	2a00      	cmp	r2, #0
 800d0ae:	f000 8093 	beq.w	800d1d8 <HAL_PCD_IRQHandler+0x630>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f014 fc2d 	bl	8021914 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d0ba:	6820      	ldr	r0, [r4, #0]
 800d0bc:	e6a4      	b.n	800ce08 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d0be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d0c2:	421d      	tst	r5, r3
 800d0c4:	f43f ada2 	beq.w	800cc0c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d0c8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d0cc:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d0d6:	4615      	mov	r5, r2
 800d0d8:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800d0dc:	f004 fa00 	bl	80114e0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d0e0:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d0e4:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d0e6:	442b      	add	r3, r5
 800d0e8:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d0ec:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800d0f0:	442b      	add	r3, r5
 800d0f2:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800d0f6:	e589      	b.n	800cc0c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f014 fc39 	bl	8021970 <HAL_PCD_SuspendCallback>
 800d0fe:	e5f2      	b.n	800cce6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800d100:	4620      	mov	r0, r4
 800d102:	f014 fc5d 	bl	80219c0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	e5e4      	b.n	800ccd4 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d10a:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800d10e:	4413      	add	r3, r2
 800d110:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d112:	f1ba 0f00 	cmp.w	sl, #0
 800d116:	f47f ae36 	bne.w	800cd86 <HAL_PCD_IRQHandler+0x1de>
 800d11a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f47f ae32 	bne.w	800cd86 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d122:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d126:	6820      	ldr	r0, [r4, #0]
 800d128:	f004 fada 	bl	80116e0 <USB_EP0_OutStart>
 800d12c:	e62b      	b.n	800cd86 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800d12e:	4620      	mov	r0, r4
 800d130:	f014 fbea 	bl	8021908 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	e66b      	b.n	800ce10 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d138:	0719      	lsls	r1, r3, #28
 800d13a:	d51d      	bpl.n	800d178 <HAL_PCD_IRQHandler+0x5d0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d13c:	4929      	ldr	r1, [pc, #164]	; (800d1e4 <HAL_PCD_IRQHandler+0x63c>)
 800d13e:	458c      	cmp	ip, r1
 800d140:	f67f ae62 	bls.w	800ce08 <HAL_PCD_IRQHandler+0x260>
 800d144:	041f      	lsls	r7, r3, #16
 800d146:	f57f ae5f 	bpl.w	800ce08 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d14a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d14e:	6093      	str	r3, [r2, #8]
 800d150:	e65a      	b.n	800ce08 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d152:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800d154:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d156:	46c8      	mov	r8, r9
 800d158:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800d15c:	f8d4 b000 	ldr.w	fp, [r4]
 800d160:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800d162:	42ab      	cmp	r3, r5
 800d164:	f4ff ade8 	bcc.w	800cd38 <HAL_PCD_IRQHandler+0x190>
 800d168:	e766      	b.n	800d038 <HAL_PCD_IRQHandler+0x490>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d16a:	0419      	lsls	r1, r3, #16
 800d16c:	d4ed      	bmi.n	800d14a <HAL_PCD_IRQHandler+0x5a2>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d16e:	0699      	lsls	r1, r3, #26
 800d170:	d59f      	bpl.n	800d0b2 <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d172:	2120      	movs	r1, #32
 800d174:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d176:	e79c      	b.n	800d0b2 <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d178:	0699      	lsls	r1, r3, #26
 800d17a:	d508      	bpl.n	800d18e <HAL_PCD_IRQHandler+0x5e6>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d17c:	2320      	movs	r3, #32
 800d17e:	6093      	str	r3, [r2, #8]
 800d180:	e642      	b.n	800ce08 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d182:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d186:	6820      	ldr	r0, [r4, #0]
 800d188:	f004 faaa 	bl	80116e0 <USB_EP0_OutStart>
 800d18c:	e778      	b.n	800d080 <HAL_PCD_IRQHandler+0x4d8>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d18e:	f013 0f28 	tst.w	r3, #40	; 0x28
 800d192:	f47f ae39 	bne.w	800ce08 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d196:	4913      	ldr	r1, [pc, #76]	; (800d1e4 <HAL_PCD_IRQHandler+0x63c>)
 800d198:	458c      	cmp	ip, r1
 800d19a:	d901      	bls.n	800d1a0 <HAL_PCD_IRQHandler+0x5f8>
 800d19c:	041b      	lsls	r3, r3, #16
 800d19e:	d4d4      	bmi.n	800d14a <HAL_PCD_IRQHandler+0x5a2>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1a0:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800d1a2:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1a6:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d1aa:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800d1ac:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d1b0:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d1ba:	f1b8 0f00 	cmp.w	r8, #0
 800d1be:	f47f af78 	bne.w	800d0b2 <HAL_PCD_IRQHandler+0x50a>
 800d1c2:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d1c6:	2a00      	cmp	r2, #0
 800d1c8:	f47f af73 	bne.w	800d0b2 <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d1cc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	f004 fa85 	bl	80116e0 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1d6:	e76c      	b.n	800d0b2 <HAL_PCD_IRQHandler+0x50a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d1d8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d1dc:	4641      	mov	r1, r8
 800d1de:	f004 fa7f 	bl	80116e0 <USB_EP0_OutStart>
 800d1e2:	e766      	b.n	800d0b2 <HAL_PCD_IRQHandler+0x50a>
 800d1e4:	4f54300a 	.word	0x4f54300a
 800d1e8:	4f54310a 	.word	0x4f54310a

0800d1ec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800d1ec:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800d1f0:	2a01      	cmp	r2, #1
 800d1f2:	d00e      	beq.n	800d212 <HAL_PCD_SetAddress+0x26>
 800d1f4:	2201      	movs	r2, #1
{
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d1fa:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800d1fc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800d200:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d204:	f004 f9f2 	bl	80115ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d208:	2300      	movs	r3, #0
  return HAL_OK;
 800d20a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d20c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d210:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800d212:	2002      	movs	r0, #2
}
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop

0800d218 <HAL_PCD_EP_Open>:
{
 800d218:	b510      	push	{r4, lr}
 800d21a:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800d21e:	0609      	lsls	r1, r1, #24
{
 800d220:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d222:	d427      	bmi.n	800d274 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d224:	f04f 0c1c 	mov.w	ip, #28
 800d228:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800d22c:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800d230:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800d234:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800d238:	2000      	movs	r0, #0
 800d23a:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800d23e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800d240:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d242:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800d246:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800d248:	b10a      	cbz	r2, 800d24e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800d24a:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d101      	bne.n	800d256 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800d256:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d018      	beq.n	800d290 <HAL_PCD_EP_Open+0x78>
 800d25e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d260:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d262:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d266:	f003 fead 	bl	8010fc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d26a:	2300      	movs	r3, #0
  return ret;
 800d26c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d26e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d272:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d274:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800d276:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d27a:	fb00 400e 	mla	r0, r0, lr, r4
 800d27e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800d282:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800d286:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800d28a:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800d28e:	e7d6      	b.n	800d23e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800d290:	2002      	movs	r0, #2
}
 800d292:	bd10      	pop	{r4, pc}

0800d294 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800d294:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d298:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d29c:	f04f 011c 	mov.w	r1, #28
{
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d2a4:	d11a      	bne.n	800d2dc <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2a6:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d2aa:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d2ae:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2b0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d2b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d2b8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d2bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d2be:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d019      	beq.n	800d2fa <HAL_PCD_EP_Close+0x66>
 800d2c6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d2c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d2ca:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d2ce:	f003 fec1 	bl	8011054 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d2d2:	2300      	movs	r3, #0
  return HAL_OK;
 800d2d4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d2d6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d2da:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2dc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d2e0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2ea:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d2ec:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d2f0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d2f2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d1e5      	bne.n	800d2c6 <HAL_PCD_EP_Close+0x32>
 800d2fa:	2002      	movs	r0, #2
}
 800d2fc:	bd10      	pop	{r4, pc}
 800d2fe:	bf00      	nop

0800d300 <HAL_PCD_EP_Receive>:
{
 800d300:	b510      	push	{r4, lr}
 800d302:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d306:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d308:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d30c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d310:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d314:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800d318:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800d31c:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d31e:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800d322:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800d326:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800d32a:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800d32e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d330:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d332:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d334:	bf08      	it	eq
 800d336:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d33a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d33c:	b91c      	cbnz	r4, 800d346 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d33e:	f003 ffff 	bl	8011340 <USB_EP0StartXfer>
}
 800d342:	2000      	movs	r0, #0
 800d344:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d346:	f003 fee3 	bl	8011110 <USB_EPStartXfer>
}
 800d34a:	2000      	movs	r0, #0
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	bf00      	nop

0800d350 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d350:	f001 010f 	and.w	r1, r1, #15
 800d354:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800d35c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop

0800d364 <HAL_PCD_EP_Transmit>:
{
 800d364:	b510      	push	{r4, lr}
 800d366:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d36a:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d36c:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d370:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d374:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d378:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800d37a:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800d37e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d380:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800d384:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800d388:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d38a:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800d38e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800d392:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d394:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d396:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d398:	bf08      	it	eq
 800d39a:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d39e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d3a0:	b91c      	cbnz	r4, 800d3aa <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d3a2:	f003 ffcd 	bl	8011340 <USB_EP0StartXfer>
}
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d3aa:	f003 feb1 	bl	8011110 <USB_EPStartXfer>
}
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	bd10      	pop	{r4, pc}
 800d3b2:	bf00      	nop

0800d3b4 <HAL_PCD_EP_SetStall>:
{
 800d3b4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d3b6:	6843      	ldr	r3, [r0, #4]
 800d3b8:	f001 050f 	and.w	r5, r1, #15
 800d3bc:	429d      	cmp	r5, r3
 800d3be:	d834      	bhi.n	800d42a <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800d3c0:	060b      	lsls	r3, r1, #24
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	d41d      	bmi.n	800d402 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800d3c6:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800d3c8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800d3cc:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800d3d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d3d4:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800d3d6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d3da:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800d3de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3e0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d3e2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d3e4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d01c      	beq.n	800d426 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d3ec:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d3ee:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d3f2:	f004 f89b 	bl	801152c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d3f6:	b1d5      	cbz	r5, 800d42e <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800d3f8:	2300      	movs	r3, #0
  return HAL_OK;
 800d3fa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d3fc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d400:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d402:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800d404:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800d408:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d40a:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800d40e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d412:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800d418:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d41a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d41c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d41e:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d422:	429a      	cmp	r2, r3
 800d424:	d1e2      	bne.n	800d3ec <HAL_PCD_EP_SetStall+0x38>
 800d426:	2002      	movs	r0, #2
}
 800d428:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d42a:	2001      	movs	r0, #1
}
 800d42c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d42e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d432:	7c21      	ldrb	r1, [r4, #16]
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	f004 f953 	bl	80116e0 <USB_EP0_OutStart>
 800d43a:	e7dd      	b.n	800d3f8 <HAL_PCD_EP_SetStall+0x44>

0800d43c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d43c:	6842      	ldr	r2, [r0, #4]
{
 800d43e:	b538      	push	{r3, r4, r5, lr}
 800d440:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d444:	4293      	cmp	r3, r2
 800d446:	d832      	bhi.n	800d4ae <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800d448:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d44c:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d44e:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800d452:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800d456:	d119      	bne.n	800d48c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d458:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d45c:	2000      	movs	r0, #0
 800d45e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d462:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d464:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d468:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800d46c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d46e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d470:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d474:	2b01      	cmp	r3, #1
 800d476:	d018      	beq.n	800d4aa <HAL_PCD_EP_ClrStall+0x6e>
 800d478:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d47a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d47c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d480:	f004 f888 	bl	8011594 <USB_EPClearStall>
  return HAL_OK;
 800d484:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800d486:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d48c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d490:	2001      	movs	r0, #1
 800d492:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d496:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d498:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d49a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800d49e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d4a0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d4a2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d1e6      	bne.n	800d478 <HAL_PCD_EP_ClrStall+0x3c>
 800d4aa:	2002      	movs	r0, #2
}
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d4ae:	2001      	movs	r0, #1
}
 800d4b0:	bd38      	pop	{r3, r4, r5, pc}
 800d4b2:	bf00      	nop

0800d4b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d4b4:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d4b6:	6804      	ldr	r4, [r0, #0]
 800d4b8:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800d4ba:	b931      	cbnz	r1, 800d4ca <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d4bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d4c0:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c8:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d4ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800d4cc:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d4d0:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d4d4:	d00b      	beq.n	800d4ee <HAL_PCDEx_SetTxFiFo+0x3a>
 800d4d6:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d4d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800d4dc:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d4de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800d4e2:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d4e4:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800d4e6:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d4e8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d4ec:	d3f4      	bcc.n	800d4d8 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d4ee:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d4f2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d4f6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800d4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d4fe:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800d502:	2000      	movs	r0, #0
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop

0800d508 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d508:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800d50a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	6259      	str	r1, [r3, #36]	; 0x24
}
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop

0800d514 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d514:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800d516:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d51a:	4909      	ldr	r1, [pc, #36]	; (800d540 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d51c:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800d51e:	4660      	mov	r0, ip
{
 800d520:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800d522:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800d524:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800d528:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d52c:	6993      	ldr	r3, [r2, #24]
}
 800d52e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d536:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d538:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d53a:	4319      	orrs	r1, r3
 800d53c:	6551      	str	r1, [r2, #84]	; 0x54
}
 800d53e:	4770      	bx	lr
 800d540:	10000003 	.word	0x10000003

0800d544 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop

0800d548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d548:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d54a:	4c1d      	ldr	r4, [pc, #116]	; (800d5c0 <HAL_PWREx_ConfigSupply+0x78>)
{
 800d54c:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d54e:	68e3      	ldr	r3, [r4, #12]
 800d550:	f003 0307 	and.w	r3, r3, #7
 800d554:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d556:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d558:	d005      	beq.n	800d566 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d55a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d55e:	1a18      	subs	r0, r3, r0
 800d560:	bf18      	it	ne
 800d562:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800d564:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d566:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d56a:	4303      	orrs	r3, r0
 800d56c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800d56e:	f7fd fabd 	bl	800aaec <HAL_GetTick>
 800d572:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d574:	e005      	b.n	800d582 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d576:	f7fd fab9 	bl	800aaec <HAL_GetTick>
 800d57a:	1b83      	subs	r3, r0, r6
 800d57c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d580:	d81b      	bhi.n	800d5ba <HAL_PWREx_ConfigSupply+0x72>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d582:	6863      	ldr	r3, [r4, #4]
 800d584:	049a      	lsls	r2, r3, #18
 800d586:	d5f6      	bpl.n	800d576 <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800d588:	f1a5 031d 	sub.w	r3, r5, #29
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d905      	bls.n	800d59c <HAL_PWREx_ConfigSupply+0x54>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800d590:	f1a5 002d 	sub.w	r0, r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800d594:	2801      	cmp	r0, #1
 800d596:	d901      	bls.n	800d59c <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 800d598:	2000      	movs	r0, #0
}
 800d59a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800d59c:	f7fd faa6 	bl	800aaec <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d5a0:	4d07      	ldr	r5, [pc, #28]	; (800d5c0 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800d5a2:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d5a4:	e005      	b.n	800d5b2 <HAL_PWREx_ConfigSupply+0x6a>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d5a6:	f7fd faa1 	bl	800aaec <HAL_GetTick>
 800d5aa:	1b00      	subs	r0, r0, r4
 800d5ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d5b0:	d803      	bhi.n	800d5ba <HAL_PWREx_ConfigSupply+0x72>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d5b2:	68eb      	ldr	r3, [r5, #12]
 800d5b4:	03db      	lsls	r3, r3, #15
 800d5b6:	d5f6      	bpl.n	800d5a6 <HAL_PWREx_ConfigSupply+0x5e>
 800d5b8:	e7ee      	b.n	800d598 <HAL_PWREx_ConfigSupply+0x50>
      return HAL_ERROR;
 800d5ba:	2001      	movs	r0, #1
}
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
 800d5be:	bf00      	nop
 800d5c0:	58024800 	.word	0x58024800

0800d5c4 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d5c4:	4a02      	ldr	r2, [pc, #8]	; (800d5d0 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800d5c6:	68d3      	ldr	r3, [r2, #12]
 800d5c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5cc:	60d3      	str	r3, [r2, #12]
}
 800d5ce:	4770      	bx	lr
 800d5d0:	58024800 	.word	0x58024800

0800d5d4 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5d4:	4b3b      	ldr	r3, [pc, #236]	; (800d6c4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800d5d6:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d5da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d5dc:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800d5de:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d5e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d5e4:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800d5e8:	d038      	beq.n	800d65c <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d5ea:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d5ee:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5f2:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d5f6:	fb05 f101 	mul.w	r1, r5, r1
 800d5fa:	2a01      	cmp	r2, #1
 800d5fc:	ee07 1a90 	vmov	s15, r1
 800d600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800d604:	d002      	beq.n	800d60c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800d606:	2a02      	cmp	r2, #2
 800d608:	d04e      	beq.n	800d6a8 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800d60a:	b34a      	cbz	r2, 800d660 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d60c:	ee07 0a90 	vmov	s15, r0
 800d610:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d6c8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800d614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d61e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d6cc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800d622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d626:	ee06 3a90 	vmov	s13, r3
 800d62a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d62e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d632:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d636:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d63a:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d63e:	4b21      	ldr	r3, [pc, #132]	; (800d6c4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800d640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d642:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d646:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d648:	ee07 3a90 	vmov	s15, r3
 800d64c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d658:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800d65c:	bc30      	pop	{r4, r5}
 800d65e:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	0692      	lsls	r2, r2, #26
 800d664:	d527      	bpl.n	800d6b6 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d666:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d668:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d66c:	4a18      	ldr	r2, [pc, #96]	; (800d6d0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d66e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d674:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d67c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800d6cc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800d680:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d684:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d686:	ee06 3a90 	vmov	s13, r3
 800d68a:	ee05 2a90 	vmov	s11, r2
 800d68e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d692:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d696:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d69a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800d69e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800d6a2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d6a6:	e7ca      	b.n	800d63e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6a8:	ee07 0a90 	vmov	s15, r0
 800d6ac:	eddf 6a09 	vldr	s13, [pc, #36]	; 800d6d4 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800d6b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6b4:	e7b0      	b.n	800d618 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6b6:	ee07 0a90 	vmov	s15, r0
 800d6ba:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d6d8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800d6be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6c2:	e7a9      	b.n	800d618 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	4a742400 	.word	0x4a742400
 800d6cc:	39000000 	.word	0x39000000
 800d6d0:	03d09000 	.word	0x03d09000
 800d6d4:	4af42400 	.word	0x4af42400
 800d6d8:	4c742400 	.word	0x4c742400

0800d6dc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f000 81e7 	beq.w	800dab0 <HAL_RCC_OscConfig+0x3d4>
{
 800d6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6e4:	6803      	ldr	r3, [r0, #0]
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	07d9      	lsls	r1, r3, #31
 800d6ea:	d52e      	bpl.n	800d74a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6ec:	499f      	ldr	r1, [pc, #636]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d6ee:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d6f0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6f2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d6f6:	2a10      	cmp	r2, #16
 800d6f8:	f000 8125 	beq.w	800d946 <HAL_RCC_OscConfig+0x26a>
 800d6fc:	2a18      	cmp	r2, #24
 800d6fe:	f000 811d 	beq.w	800d93c <HAL_RCC_OscConfig+0x260>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d702:	6863      	ldr	r3, [r4, #4]
 800d704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d708:	f000 815f 	beq.w	800d9ca <HAL_RCC_OscConfig+0x2ee>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 8177 	beq.w	800da00 <HAL_RCC_OscConfig+0x324>
 800d712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d716:	4b95      	ldr	r3, [pc, #596]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	f000 8268 	beq.w	800dbee <HAL_RCC_OscConfig+0x512>
 800d71e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d72a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d72c:	f7fd f9de 	bl	800aaec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d730:	4e8e      	ldr	r6, [pc, #568]	; (800d96c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800d732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d734:	e005      	b.n	800d742 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d736:	f7fd f9d9 	bl	800aaec <HAL_GetTick>
 800d73a:	1b40      	subs	r0, r0, r5
 800d73c:	2864      	cmp	r0, #100	; 0x64
 800d73e:	f200 815d 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d742:	6833      	ldr	r3, [r6, #0]
 800d744:	039f      	lsls	r7, r3, #14
 800d746:	d5f6      	bpl.n	800d736 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	0799      	lsls	r1, r3, #30
 800d74c:	d521      	bpl.n	800d792 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d74e:	4a87      	ldr	r2, [pc, #540]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d750:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d752:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d754:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800d758:	f040 80a4 	bne.w	800d8a4 <HAL_RCC_OscConfig+0x1c8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d75c:	4b83      	ldr	r3, [pc, #524]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	075b      	lsls	r3, r3, #29
 800d762:	d503      	bpl.n	800d76c <HAL_RCC_OscConfig+0x90>
 800d764:	68e3      	ldr	r3, [r4, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80e6 	beq.w	800d938 <HAL_RCC_OscConfig+0x25c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d76c:	f7fd f9d6 	bl	800ab1c <HAL_GetREVID>
 800d770:	f241 0303 	movw	r3, #4099	; 0x1003
 800d774:	4298      	cmp	r0, r3
 800d776:	f200 817c 	bhi.w	800da72 <HAL_RCC_OscConfig+0x396>
 800d77a:	6922      	ldr	r2, [r4, #16]
 800d77c:	2a40      	cmp	r2, #64	; 0x40
 800d77e:	f000 823e 	beq.w	800dbfe <HAL_RCC_OscConfig+0x522>
 800d782:	497a      	ldr	r1, [pc, #488]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d784:	684b      	ldr	r3, [r1, #4]
 800d786:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d78a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800d78e:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	06d9      	lsls	r1, r3, #27
 800d794:	d453      	bmi.n	800d83e <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d796:	071d      	lsls	r5, r3, #28
 800d798:	d516      	bpl.n	800d7c8 <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d79a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d79c:	4d73      	ldr	r5, [pc, #460]	; (800d96c <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 80ae 	beq.w	800d900 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 800d7a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d7a6:	f043 0301 	orr.w	r3, r3, #1
 800d7aa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d7ac:	f7fd f99e 	bl	800aaec <HAL_GetTick>
 800d7b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d7b2:	e005      	b.n	800d7c0 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d7b4:	f7fd f99a 	bl	800aaec <HAL_GetTick>
 800d7b8:	1b80      	subs	r0, r0, r6
 800d7ba:	2802      	cmp	r0, #2
 800d7bc:	f200 811e 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d7c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d7c2:	0798      	lsls	r0, r3, #30
 800d7c4:	d5f6      	bpl.n	800d7b4 <HAL_RCC_OscConfig+0xd8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	069a      	lsls	r2, r3, #26
 800d7ca:	d516      	bpl.n	800d7fa <HAL_RCC_OscConfig+0x11e>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d7cc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800d7ce:	4d67      	ldr	r5, [pc, #412]	; (800d96c <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 812b 	beq.w	800da2c <HAL_RCC_OscConfig+0x350>
      __HAL_RCC_HSI48_ENABLE();
 800d7d6:	682b      	ldr	r3, [r5, #0]
 800d7d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d7de:	f7fd f985 	bl	800aaec <HAL_GetTick>
 800d7e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d7e4:	e005      	b.n	800d7f2 <HAL_RCC_OscConfig+0x116>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d7e6:	f7fd f981 	bl	800aaec <HAL_GetTick>
 800d7ea:	1b80      	subs	r0, r0, r6
 800d7ec:	2802      	cmp	r0, #2
 800d7ee:	f200 8105 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	049f      	lsls	r7, r3, #18
 800d7f6:	d5f6      	bpl.n	800d7e6 <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	0759      	lsls	r1, r3, #29
 800d7fc:	f100 80ad 	bmi.w	800d95a <HAL_RCC_OscConfig+0x27e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d800:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d802:	b1d0      	cbz	r0, 800d83a <HAL_RCC_OscConfig+0x15e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d804:	4d59      	ldr	r5, [pc, #356]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d806:	692b      	ldr	r3, [r5, #16]
 800d808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d80c:	2b18      	cmp	r3, #24
 800d80e:	f000 81c0 	beq.w	800db92 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 800d812:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d814:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800d816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d81a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d81c:	f000 8154 	beq.w	800dac8 <HAL_RCC_OscConfig+0x3ec>
        tickstart = HAL_GetTick();
 800d820:	f7fd f964 	bl	800aaec <HAL_GetTick>
 800d824:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d826:	e005      	b.n	800d834 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d828:	f7fd f960 	bl	800aaec <HAL_GetTick>
 800d82c:	1b00      	subs	r0, r0, r4
 800d82e:	2802      	cmp	r0, #2
 800d830:	f200 80e4 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	019b      	lsls	r3, r3, #6
 800d838:	d4f6      	bmi.n	800d828 <HAL_RCC_OscConfig+0x14c>
  return HAL_OK;
 800d83a:	2000      	movs	r0, #0
}
 800d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d83e:	4a4b      	ldr	r2, [pc, #300]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d840:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d842:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d844:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d848:	2b08      	cmp	r3, #8
 800d84a:	d06e      	beq.n	800d92a <HAL_RCC_OscConfig+0x24e>
 800d84c:	2b18      	cmp	r3, #24
 800d84e:	d068      	beq.n	800d922 <HAL_RCC_OscConfig+0x246>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d850:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800d852:	4d46      	ldr	r5, [pc, #280]	; (800d96c <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 80fa 	beq.w	800da4e <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_CSI_ENABLE();
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d860:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d862:	f7fd f943 	bl	800aaec <HAL_GetTick>
 800d866:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d868:	e005      	b.n	800d876 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d86a:	f7fd f93f 	bl	800aaec <HAL_GetTick>
 800d86e:	1b80      	subs	r0, r0, r6
 800d870:	2802      	cmp	r0, #2
 800d872:	f200 80c3 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d876:	682b      	ldr	r3, [r5, #0]
 800d878:	05db      	lsls	r3, r3, #23
 800d87a:	d5f6      	bpl.n	800d86a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d87c:	f7fd f94e 	bl	800ab1c <HAL_GetREVID>
 800d880:	f241 0303 	movw	r3, #4099	; 0x1003
 800d884:	4298      	cmp	r0, r3
 800d886:	f200 81e3 	bhi.w	800dc50 <HAL_RCC_OscConfig+0x574>
 800d88a:	6a22      	ldr	r2, [r4, #32]
 800d88c:	686b      	ldr	r3, [r5, #4]
 800d88e:	2a20      	cmp	r2, #32
 800d890:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d894:	bf0c      	ite	eq
 800d896:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800d89a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800d89e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	e778      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d8a4:	2b18      	cmp	r3, #24
 800d8a6:	f000 80ff 	beq.w	800daa8 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d8aa:	4d30      	ldr	r5, [pc, #192]	; (800d96c <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d8ac:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d8ae:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	f000 80e8 	beq.w	800da86 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d8b6:	f023 0319 	bic.w	r3, r3, #25
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d8be:	f7fd f915 	bl	800aaec <HAL_GetTick>
 800d8c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8c4:	e005      	b.n	800d8d2 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d8c6:	f7fd f911 	bl	800aaec <HAL_GetTick>
 800d8ca:	1b80      	subs	r0, r0, r6
 800d8cc:	2802      	cmp	r0, #2
 800d8ce:	f200 8095 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8d2:	682b      	ldr	r3, [r5, #0]
 800d8d4:	075f      	lsls	r7, r3, #29
 800d8d6:	d5f6      	bpl.n	800d8c6 <HAL_RCC_OscConfig+0x1ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8d8:	f7fd f920 	bl	800ab1c <HAL_GetREVID>
 800d8dc:	f241 0303 	movw	r3, #4099	; 0x1003
 800d8e0:	4298      	cmp	r0, r3
 800d8e2:	f200 81be 	bhi.w	800dc62 <HAL_RCC_OscConfig+0x586>
 800d8e6:	6922      	ldr	r2, [r4, #16]
 800d8e8:	686b      	ldr	r3, [r5, #4]
 800d8ea:	2a40      	cmp	r2, #64	; 0x40
 800d8ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d8f0:	bf0c      	ite	eq
 800d8f2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800d8f6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800d8fa:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	e748      	b.n	800d792 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 800d900:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d902:	f023 0301 	bic.w	r3, r3, #1
 800d906:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d908:	f7fd f8f0 	bl	800aaec <HAL_GetTick>
 800d90c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d90e:	e004      	b.n	800d91a <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d910:	f7fd f8ec 	bl	800aaec <HAL_GetTick>
 800d914:	1b80      	subs	r0, r0, r6
 800d916:	2802      	cmp	r0, #2
 800d918:	d870      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d91a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d91c:	0799      	lsls	r1, r3, #30
 800d91e:	d4f7      	bmi.n	800d910 <HAL_RCC_OscConfig+0x234>
 800d920:	e751      	b.n	800d7c6 <HAL_RCC_OscConfig+0xea>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d922:	f002 0203 	and.w	r2, r2, #3
 800d926:	2a01      	cmp	r2, #1
 800d928:	d192      	bne.n	800d850 <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d92a:	4b10      	ldr	r3, [pc, #64]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	05da      	lsls	r2, r3, #23
 800d930:	d551      	bpl.n	800d9d6 <HAL_RCC_OscConfig+0x2fa>
 800d932:	69e3      	ldr	r3, [r4, #28]
 800d934:	2b80      	cmp	r3, #128	; 0x80
 800d936:	d04e      	beq.n	800d9d6 <HAL_RCC_OscConfig+0x2fa>
        return HAL_ERROR;
 800d938:	2001      	movs	r0, #1
}
 800d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d93c:	f001 0103 	and.w	r1, r1, #3
 800d940:	2902      	cmp	r1, #2
 800d942:	f47f aede 	bne.w	800d702 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d946:	4a09      	ldr	r2, [pc, #36]	; (800d96c <HAL_RCC_OscConfig+0x290>)
 800d948:	6812      	ldr	r2, [r2, #0]
 800d94a:	0392      	lsls	r2, r2, #14
 800d94c:	f57f aefd 	bpl.w	800d74a <HAL_RCC_OscConfig+0x6e>
 800d950:	6862      	ldr	r2, [r4, #4]
 800d952:	2a00      	cmp	r2, #0
 800d954:	f47f aef9 	bne.w	800d74a <HAL_RCC_OscConfig+0x6e>
 800d958:	e7ee      	b.n	800d938 <HAL_RCC_OscConfig+0x25c>
    PWR->CR1 |= PWR_CR1_DBP;
 800d95a:	4d05      	ldr	r5, [pc, #20]	; (800d970 <HAL_RCC_OscConfig+0x294>)
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d962:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d964:	f7fd f8c2 	bl	800aaec <HAL_GetTick>
 800d968:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d96a:	e008      	b.n	800d97e <HAL_RCC_OscConfig+0x2a2>
 800d96c:	58024400 	.word	0x58024400
 800d970:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d974:	f7fd f8ba 	bl	800aaec <HAL_GetTick>
 800d978:	1b80      	subs	r0, r0, r6
 800d97a:	2864      	cmp	r0, #100	; 0x64
 800d97c:	d83e      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d97e:	682b      	ldr	r3, [r5, #0]
 800d980:	05da      	lsls	r2, r3, #23
 800d982:	d5f7      	bpl.n	800d974 <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	2b01      	cmp	r3, #1
 800d988:	f000 8174 	beq.w	800dc74 <HAL_RCC_OscConfig+0x598>
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 813f 	beq.w	800dc10 <HAL_RCC_OscConfig+0x534>
 800d992:	2b05      	cmp	r3, #5
 800d994:	4ba6      	ldr	r3, [pc, #664]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800d996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d998:	f000 817b 	beq.w	800dc92 <HAL_RCC_OscConfig+0x5b6>
 800d99c:	f022 0201 	bic.w	r2, r2, #1
 800d9a0:	671a      	str	r2, [r3, #112]	; 0x70
 800d9a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d9a4:	f022 0204 	bic.w	r2, r2, #4
 800d9a8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d9aa:	f7fd f89f 	bl	800aaec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9ae:	4ea0      	ldr	r6, [pc, #640]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9b0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d9b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9b6:	e004      	b.n	800d9c2 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9b8:	f7fd f898 	bl	800aaec <HAL_GetTick>
 800d9bc:	1b40      	subs	r0, r0, r5
 800d9be:	42b8      	cmp	r0, r7
 800d9c0:	d81c      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d9c4:	079b      	lsls	r3, r3, #30
 800d9c6:	d5f7      	bpl.n	800d9b8 <HAL_RCC_OscConfig+0x2dc>
 800d9c8:	e71a      	b.n	800d800 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9ca:	4a99      	ldr	r2, [pc, #612]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800d9cc:	6813      	ldr	r3, [r2, #0]
 800d9ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9d2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9d4:	e6aa      	b.n	800d72c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d9d6:	f7fd f8a1 	bl	800ab1c <HAL_GetREVID>
 800d9da:	f241 0303 	movw	r3, #4099	; 0x1003
 800d9de:	4298      	cmp	r0, r3
 800d9e0:	d868      	bhi.n	800dab4 <HAL_RCC_OscConfig+0x3d8>
 800d9e2:	6a22      	ldr	r2, [r4, #32]
 800d9e4:	2a20      	cmp	r2, #32
 800d9e6:	f000 814b 	beq.w	800dc80 <HAL_RCC_OscConfig+0x5a4>
 800d9ea:	4991      	ldr	r1, [pc, #580]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800d9ec:	684b      	ldr	r3, [r1, #4]
 800d9ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d9f2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800d9f6:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	e6cc      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800d9fc:	2003      	movs	r0, #3
}
 800d9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da00:	4d8b      	ldr	r5, [pc, #556]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800da02:	682b      	ldr	r3, [r5, #0]
 800da04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da08:	602b      	str	r3, [r5, #0]
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da12:	f7fd f86b 	bl	800aaec <HAL_GetTick>
 800da16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da18:	e004      	b.n	800da24 <HAL_RCC_OscConfig+0x348>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da1a:	f7fd f867 	bl	800aaec <HAL_GetTick>
 800da1e:	1b80      	subs	r0, r0, r6
 800da20:	2864      	cmp	r0, #100	; 0x64
 800da22:	d8eb      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	0398      	lsls	r0, r3, #14
 800da28:	d4f7      	bmi.n	800da1a <HAL_RCC_OscConfig+0x33e>
 800da2a:	e68d      	b.n	800d748 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800da34:	f7fd f85a 	bl	800aaec <HAL_GetTick>
 800da38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800da3a:	e004      	b.n	800da46 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800da3c:	f7fd f856 	bl	800aaec <HAL_GetTick>
 800da40:	1b80      	subs	r0, r0, r6
 800da42:	2802      	cmp	r0, #2
 800da44:	d8da      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800da46:	682b      	ldr	r3, [r5, #0]
 800da48:	0498      	lsls	r0, r3, #18
 800da4a:	d4f7      	bmi.n	800da3c <HAL_RCC_OscConfig+0x360>
 800da4c:	e6d4      	b.n	800d7f8 <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_CSI_DISABLE();
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da56:	f7fd f849 	bl	800aaec <HAL_GetTick>
 800da5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800da5c:	e004      	b.n	800da68 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800da5e:	f7fd f845 	bl	800aaec <HAL_GetTick>
 800da62:	1b80      	subs	r0, r0, r6
 800da64:	2802      	cmp	r0, #2
 800da66:	d8c9      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800da68:	682b      	ldr	r3, [r5, #0]
 800da6a:	05df      	lsls	r7, r3, #23
 800da6c:	d4f7      	bmi.n	800da5e <HAL_RCC_OscConfig+0x382>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	e691      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da72:	4a6f      	ldr	r2, [pc, #444]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800da74:	6921      	ldr	r1, [r4, #16]
 800da76:	6853      	ldr	r3, [r2, #4]
 800da78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800da7c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800da80:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	e685      	b.n	800d792 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 800da86:	f023 0301 	bic.w	r3, r3, #1
 800da8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da8c:	f7fd f82e 	bl	800aaec <HAL_GetTick>
 800da90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800da92:	e004      	b.n	800da9e <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da94:	f7fd f82a 	bl	800aaec <HAL_GetTick>
 800da98:	1b80      	subs	r0, r0, r6
 800da9a:	2802      	cmp	r0, #2
 800da9c:	d8ae      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800da9e:	682b      	ldr	r3, [r5, #0]
 800daa0:	0758      	lsls	r0, r3, #29
 800daa2:	d4f7      	bmi.n	800da94 <HAL_RCC_OscConfig+0x3b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	e674      	b.n	800d792 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800daa8:	0792      	lsls	r2, r2, #30
 800daaa:	f47f aefe 	bne.w	800d8aa <HAL_RCC_OscConfig+0x1ce>
 800daae:	e655      	b.n	800d75c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 800dab0:	2001      	movs	r0, #1
}
 800dab2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dab4:	4a5e      	ldr	r2, [pc, #376]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800dab6:	6a21      	ldr	r1, [r4, #32]
 800dab8:	68d3      	ldr	r3, [r2, #12]
 800daba:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800dabe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800dac2:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	e666      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800dac8:	f7fd f810 	bl	800aaec <HAL_GetTick>
 800dacc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dace:	e004      	b.n	800dada <HAL_RCC_OscConfig+0x3fe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dad0:	f7fd f80c 	bl	800aaec <HAL_GetTick>
 800dad4:	1b80      	subs	r0, r0, r6
 800dad6:	2802      	cmp	r0, #2
 800dad8:	d890      	bhi.n	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dada:	682b      	ldr	r3, [r5, #0]
 800dadc:	0199      	lsls	r1, r3, #6
 800dade:	d4f7      	bmi.n	800dad0 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dae0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800dae2:	4b54      	ldr	r3, [pc, #336]	; (800dc34 <HAL_RCC_OscConfig+0x558>)
 800dae4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800dae6:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dae8:	4953      	ldr	r1, [pc, #332]	; (800dc38 <HAL_RCC_OscConfig+0x55c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800daea:	4e51      	ldr	r6, [pc, #324]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800daec:	4313      	orrs	r3, r2
 800daee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800daf0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800daf4:	62ab      	str	r3, [r5, #40]	; 0x28
 800daf6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800dafa:	3b01      	subs	r3, #1
 800dafc:	3a01      	subs	r2, #1
 800dafe:	025b      	lsls	r3, r3, #9
 800db00:	0412      	lsls	r2, r2, #16
 800db02:	b29b      	uxth	r3, r3
 800db04:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800db08:	4313      	orrs	r3, r2
 800db0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800db0c:	3a01      	subs	r2, #1
 800db0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db12:	4313      	orrs	r3, r2
 800db14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800db16:	3a01      	subs	r2, #1
 800db18:	0612      	lsls	r2, r2, #24
 800db1a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800db1e:	4313      	orrs	r3, r2
 800db20:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800db22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db24:	f023 0301 	bic.w	r3, r3, #1
 800db28:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800db2a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800db2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db2e:	4011      	ands	r1, r2
 800db30:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800db34:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800db36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800db3a:	f023 030c 	bic.w	r3, r3, #12
 800db3e:	4313      	orrs	r3, r2
 800db40:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800db42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db44:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800db46:	f023 0302 	bic.w	r3, r3, #2
 800db4a:	4313      	orrs	r3, r2
 800db4c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db54:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db5c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800db5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db64:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800db66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db68:	f043 0301 	orr.w	r3, r3, #1
 800db6c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800db6e:	682b      	ldr	r3, [r5, #0]
 800db70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800db76:	f7fc ffb9 	bl	800aaec <HAL_GetTick>
 800db7a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db7c:	e005      	b.n	800db8a <HAL_RCC_OscConfig+0x4ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db7e:	f7fc ffb5 	bl	800aaec <HAL_GetTick>
 800db82:	1b00      	subs	r0, r0, r4
 800db84:	2802      	cmp	r0, #2
 800db86:	f63f af39 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db8a:	6833      	ldr	r3, [r6, #0]
 800db8c:	019a      	lsls	r2, r3, #6
 800db8e:	d5f6      	bpl.n	800db7e <HAL_RCC_OscConfig+0x4a2>
 800db90:	e653      	b.n	800d83a <HAL_RCC_OscConfig+0x15e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db92:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800db94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800db96:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db98:	f43f ae50 	beq.w	800d83c <HAL_RCC_OscConfig+0x160>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db9c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dba0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800dba2:	428b      	cmp	r3, r1
 800dba4:	f47f aec8 	bne.w	800d938 <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dba8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	f47f aec2 	bne.w	800d938 <HAL_RCC_OscConfig+0x25c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dbb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dbb6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800dbba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	f47f aebb 	bne.w	800d938 <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dbc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbc4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800dbc8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	f47f aeb4 	bne.w	800d938 <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dbd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dbd2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800dbd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	f47f aead 	bne.w	800d938 <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dbde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dbe0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800dbe4:	3801      	subs	r0, #1
  return HAL_OK;
 800dbe6:	1a28      	subs	r0, r5, r0
 800dbe8:	bf18      	it	ne
 800dbea:	2001      	movne	r0, #1
}
 800dbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dbee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	e596      	b.n	800d72c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbfe:	4a0c      	ldr	r2, [pc, #48]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
 800dc00:	6853      	ldr	r3, [r2, #4]
 800dc02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dc06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc0a:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	e5c0      	b.n	800d792 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc10:	4d07      	ldr	r5, [pc, #28]	; (800dc30 <HAL_RCC_OscConfig+0x554>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc12:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800dc18:	f023 0301 	bic.w	r3, r3, #1
 800dc1c:	672b      	str	r3, [r5, #112]	; 0x70
 800dc1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800dc20:	f023 0304 	bic.w	r3, r3, #4
 800dc24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800dc26:	f7fc ff61 	bl	800aaec <HAL_GetTick>
 800dc2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dc2c:	e00c      	b.n	800dc48 <HAL_RCC_OscConfig+0x56c>
 800dc2e:	bf00      	nop
 800dc30:	58024400 	.word	0x58024400
 800dc34:	fffffc0c 	.word	0xfffffc0c
 800dc38:	ffff0007 	.word	0xffff0007
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc3c:	f7fc ff56 	bl	800aaec <HAL_GetTick>
 800dc40:	1b80      	subs	r0, r0, r6
 800dc42:	42b8      	cmp	r0, r7
 800dc44:	f63f aeda 	bhi.w	800d9fc <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dc48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800dc4a:	0798      	lsls	r0, r3, #30
 800dc4c:	d4f6      	bmi.n	800dc3c <HAL_RCC_OscConfig+0x560>
 800dc4e:	e5d7      	b.n	800d800 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc50:	68eb      	ldr	r3, [r5, #12]
 800dc52:	6a22      	ldr	r2, [r4, #32]
 800dc54:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800dc58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc5c:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	e599      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc62:	686b      	ldr	r3, [r5, #4]
 800dc64:	6922      	ldr	r2, [r4, #16]
 800dc66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800dc6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc6e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	e58e      	b.n	800d792 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc74:	4a0b      	ldr	r2, [pc, #44]	; (800dca4 <HAL_RCC_OscConfig+0x5c8>)
 800dc76:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800dc78:	f043 0301 	orr.w	r3, r3, #1
 800dc7c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dc7e:	e694      	b.n	800d9aa <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc80:	4a08      	ldr	r2, [pc, #32]	; (800dca4 <HAL_RCC_OscConfig+0x5c8>)
 800dc82:	6853      	ldr	r3, [r2, #4]
 800dc84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dc88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc8c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	e581      	b.n	800d796 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc92:	f042 0204 	orr.w	r2, r2, #4
 800dc96:	671a      	str	r2, [r3, #112]	; 0x70
 800dc98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dc9a:	f042 0201 	orr.w	r2, r2, #1
 800dc9e:	671a      	str	r2, [r3, #112]	; 0x70
 800dca0:	e683      	b.n	800d9aa <HAL_RCC_OscConfig+0x2ce>
 800dca2:	bf00      	nop
 800dca4:	58024400 	.word	0x58024400

0800dca8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dca8:	4a47      	ldr	r2, [pc, #284]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x120>)
 800dcaa:	6913      	ldr	r3, [r2, #16]
 800dcac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcb0:	2b10      	cmp	r3, #16
 800dcb2:	d004      	beq.n	800dcbe <HAL_RCC_GetSysClockFreq+0x16>
 800dcb4:	2b18      	cmp	r3, #24
 800dcb6:	d00d      	beq.n	800dcd4 <HAL_RCC_GetSysClockFreq+0x2c>
 800dcb8:	b11b      	cbz	r3, 800dcc2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800dcba:	4844      	ldr	r0, [pc, #272]	; (800ddcc <HAL_RCC_GetSysClockFreq+0x124>)
 800dcbc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dcbe:	4844      	ldr	r0, [pc, #272]	; (800ddd0 <HAL_RCC_GetSysClockFreq+0x128>)
 800dcc0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcc2:	6813      	ldr	r3, [r2, #0]
 800dcc4:	0699      	lsls	r1, r3, #26
 800dcc6:	d54a      	bpl.n	800dd5e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dcc8:	6813      	ldr	r3, [r2, #0]
 800dcca:	4842      	ldr	r0, [pc, #264]	; (800ddd4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dccc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800dcd0:	40d8      	lsrs	r0, r3
 800dcd2:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dcd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800dcd6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800dcd8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dcda:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800dcdc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dce0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800dce2:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800dce6:	d038      	beq.n	800dd5a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dce8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dcec:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dcf0:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dcf4:	fb05 f101 	mul.w	r1, r5, r1
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	ee07 1a90 	vmov	s15, r1
 800dcfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800dd02:	d002      	beq.n	800dd0a <HAL_RCC_GetSysClockFreq+0x62>
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d02c      	beq.n	800dd62 <HAL_RCC_GetSysClockFreq+0xba>
 800dd08:	b393      	cbz	r3, 800dd70 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd0a:	ee07 0a90 	vmov	s15, r0
 800dd0e:	eddf 6a32 	vldr	s13, [pc, #200]	; 800ddd8 <HAL_RCC_GetSysClockFreq+0x130>
 800dd12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800dd18:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800dd1c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800dddc <HAL_RCC_GetSysClockFreq+0x134>
 800dd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd24:	ee06 3a90 	vmov	s13, r3
 800dd28:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800dd2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800dd30:	ee76 6a85 	vadd.f32	s13, s13, s10
 800dd34:	eee7 6a25 	vfma.f32	s13, s14, s11
 800dd38:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800dd3c:	4b22      	ldr	r3, [pc, #136]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x120>)
 800dd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd40:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800dd44:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800dd46:	ee07 3a90 	vmov	s15, r3
 800dd4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd56:	ee17 0a90 	vmov	r0, s15
}
 800dd5a:	bc30      	pop	{r4, r5}
 800dd5c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dd5e:	481d      	ldr	r0, [pc, #116]	; (800ddd4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800dd60:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd62:	ee07 0a90 	vmov	s15, r0
 800dd66:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800dde0 <HAL_RCC_GetSysClockFreq+0x138>
 800dd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd6e:	e7d2      	b.n	800dd16 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd70:	6813      	ldr	r3, [r2, #0]
 800dd72:	069b      	lsls	r3, r3, #26
 800dd74:	d520      	bpl.n	800ddb8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd76:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd78:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd7c:	4915      	ldr	r1, [pc, #84]	; (800ddd4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dd82:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd84:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd8c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800dddc <HAL_RCC_GetSysClockFreq+0x134>
 800dd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd94:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd96:	ee06 3a90 	vmov	s13, r3
 800dd9a:	ee05 1a90 	vmov	s11, r1
 800dd9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800dda2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800dda6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ddaa:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800ddae:	eee7 6a05 	vfma.f32	s13, s14, s10
 800ddb2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ddb6:	e7c1      	b.n	800dd3c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ddb8:	ee07 0a90 	vmov	s15, r0
 800ddbc:	eddf 6a09 	vldr	s13, [pc, #36]	; 800dde4 <HAL_RCC_GetSysClockFreq+0x13c>
 800ddc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddc4:	e7a7      	b.n	800dd16 <HAL_RCC_GetSysClockFreq+0x6e>
 800ddc6:	bf00      	nop
 800ddc8:	58024400 	.word	0x58024400
 800ddcc:	003d0900 	.word	0x003d0900
 800ddd0:	007a1200 	.word	0x007a1200
 800ddd4:	03d09000 	.word	0x03d09000
 800ddd8:	4a742400 	.word	0x4a742400
 800dddc:	39000000 	.word	0x39000000
 800dde0:	4af42400 	.word	0x4af42400
 800dde4:	4c742400 	.word	0x4c742400

0800dde8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800dde8:	2800      	cmp	r0, #0
 800ddea:	f000 810c 	beq.w	800e006 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ddee:	4a8c      	ldr	r2, [pc, #560]	; (800e020 <HAL_RCC_ClockConfig+0x238>)
 800ddf0:	6813      	ldr	r3, [r2, #0]
 800ddf2:	f003 030f 	and.w	r3, r3, #15
 800ddf6:	428b      	cmp	r3, r1
{
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de00:	d20c      	bcs.n	800de1c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de02:	6813      	ldr	r3, [r2, #0]
 800de04:	f023 030f 	bic.w	r3, r3, #15
 800de08:	430b      	orrs	r3, r1
 800de0a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de0c:	6813      	ldr	r3, [r2, #0]
 800de0e:	f003 030f 	and.w	r3, r3, #15
 800de12:	428b      	cmp	r3, r1
 800de14:	d002      	beq.n	800de1c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800de16:	2001      	movs	r0, #1
}
 800de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	075f      	lsls	r7, r3, #29
 800de20:	d50b      	bpl.n	800de3a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800de22:	4980      	ldr	r1, [pc, #512]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800de24:	6920      	ldr	r0, [r4, #16]
 800de26:	698a      	ldr	r2, [r1, #24]
 800de28:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800de2c:	4290      	cmp	r0, r2
 800de2e:	d904      	bls.n	800de3a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800de30:	698a      	ldr	r2, [r1, #24]
 800de32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800de36:	4302      	orrs	r2, r0
 800de38:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de3a:	071e      	lsls	r6, r3, #28
 800de3c:	d50b      	bpl.n	800de56 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800de3e:	4979      	ldr	r1, [pc, #484]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800de40:	6960      	ldr	r0, [r4, #20]
 800de42:	69ca      	ldr	r2, [r1, #28]
 800de44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800de48:	4290      	cmp	r0, r2
 800de4a:	d904      	bls.n	800de56 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800de4c:	69ca      	ldr	r2, [r1, #28]
 800de4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800de52:	4302      	orrs	r2, r0
 800de54:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de56:	06d8      	lsls	r0, r3, #27
 800de58:	d50b      	bpl.n	800de72 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800de5a:	4972      	ldr	r1, [pc, #456]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800de5c:	69a0      	ldr	r0, [r4, #24]
 800de5e:	69ca      	ldr	r2, [r1, #28]
 800de60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800de64:	4290      	cmp	r0, r2
 800de66:	d904      	bls.n	800de72 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800de68:	69ca      	ldr	r2, [r1, #28]
 800de6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de6e:	4302      	orrs	r2, r0
 800de70:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800de72:	0699      	lsls	r1, r3, #26
 800de74:	d50b      	bpl.n	800de8e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800de76:	496b      	ldr	r1, [pc, #428]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800de78:	69e0      	ldr	r0, [r4, #28]
 800de7a:	6a0a      	ldr	r2, [r1, #32]
 800de7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800de80:	4290      	cmp	r0, r2
 800de82:	d904      	bls.n	800de8e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800de84:	6a0a      	ldr	r2, [r1, #32]
 800de86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800de8a:	4302      	orrs	r2, r0
 800de8c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de8e:	079a      	lsls	r2, r3, #30
 800de90:	f140 80ab 	bpl.w	800dfea <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de94:	4863      	ldr	r0, [pc, #396]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800de96:	68e1      	ldr	r1, [r4, #12]
 800de98:	6982      	ldr	r2, [r0, #24]
 800de9a:	f002 020f 	and.w	r2, r2, #15
 800de9e:	4291      	cmp	r1, r2
 800dea0:	d904      	bls.n	800deac <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dea2:	6982      	ldr	r2, [r0, #24]
 800dea4:	f022 020f 	bic.w	r2, r2, #15
 800dea8:	430a      	orrs	r2, r1
 800deaa:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800deac:	07d8      	lsls	r0, r3, #31
 800deae:	d530      	bpl.n	800df12 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800deb0:	4a5c      	ldr	r2, [pc, #368]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800deb2:	68a1      	ldr	r1, [r4, #8]
 800deb4:	6993      	ldr	r3, [r2, #24]
 800deb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800deba:	430b      	orrs	r3, r1
 800debc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800debe:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dec0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dec2:	2902      	cmp	r1, #2
 800dec4:	f000 80a1 	beq.w	800e00a <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dec8:	2903      	cmp	r1, #3
 800deca:	f000 8098 	beq.w	800dffe <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dece:	2901      	cmp	r1, #1
 800ded0:	f000 80a1 	beq.w	800e016 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ded4:	0758      	lsls	r0, r3, #29
 800ded6:	d59e      	bpl.n	800de16 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ded8:	4e52      	ldr	r6, [pc, #328]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800deda:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dede:	6933      	ldr	r3, [r6, #16]
 800dee0:	f023 0307 	bic.w	r3, r3, #7
 800dee4:	430b      	orrs	r3, r1
 800dee6:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800dee8:	f7fc fe00 	bl	800aaec <HAL_GetTick>
 800deec:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800deee:	e005      	b.n	800defc <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800def0:	f7fc fdfc 	bl	800aaec <HAL_GetTick>
 800def4:	1bc0      	subs	r0, r0, r7
 800def6:	4540      	cmp	r0, r8
 800def8:	f200 808b 	bhi.w	800e012 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800defc:	6933      	ldr	r3, [r6, #16]
 800defe:	6862      	ldr	r2, [r4, #4]
 800df00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df04:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800df08:	d1f2      	bne.n	800def0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	0799      	lsls	r1, r3, #30
 800df0e:	d506      	bpl.n	800df1e <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800df10:	68e1      	ldr	r1, [r4, #12]
 800df12:	4844      	ldr	r0, [pc, #272]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800df14:	6982      	ldr	r2, [r0, #24]
 800df16:	f002 020f 	and.w	r2, r2, #15
 800df1a:	428a      	cmp	r2, r1
 800df1c:	d869      	bhi.n	800dff2 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df1e:	4940      	ldr	r1, [pc, #256]	; (800e020 <HAL_RCC_ClockConfig+0x238>)
 800df20:	680a      	ldr	r2, [r1, #0]
 800df22:	f002 020f 	and.w	r2, r2, #15
 800df26:	42aa      	cmp	r2, r5
 800df28:	d90a      	bls.n	800df40 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df2a:	680a      	ldr	r2, [r1, #0]
 800df2c:	f022 020f 	bic.w	r2, r2, #15
 800df30:	432a      	orrs	r2, r5
 800df32:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df34:	680a      	ldr	r2, [r1, #0]
 800df36:	f002 020f 	and.w	r2, r2, #15
 800df3a:	42aa      	cmp	r2, r5
 800df3c:	f47f af6b 	bne.w	800de16 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df40:	075a      	lsls	r2, r3, #29
 800df42:	d50b      	bpl.n	800df5c <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df44:	4937      	ldr	r1, [pc, #220]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800df46:	6920      	ldr	r0, [r4, #16]
 800df48:	698a      	ldr	r2, [r1, #24]
 800df4a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800df4e:	4290      	cmp	r0, r2
 800df50:	d204      	bcs.n	800df5c <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800df52:	698a      	ldr	r2, [r1, #24]
 800df54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800df58:	4302      	orrs	r2, r0
 800df5a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df5c:	071f      	lsls	r7, r3, #28
 800df5e:	d50b      	bpl.n	800df78 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800df60:	4930      	ldr	r1, [pc, #192]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800df62:	6960      	ldr	r0, [r4, #20]
 800df64:	69ca      	ldr	r2, [r1, #28]
 800df66:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800df6a:	4290      	cmp	r0, r2
 800df6c:	d204      	bcs.n	800df78 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800df6e:	69ca      	ldr	r2, [r1, #28]
 800df70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800df74:	4302      	orrs	r2, r0
 800df76:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df78:	06de      	lsls	r6, r3, #27
 800df7a:	d50b      	bpl.n	800df94 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800df7c:	4929      	ldr	r1, [pc, #164]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800df7e:	69a0      	ldr	r0, [r4, #24]
 800df80:	69ca      	ldr	r2, [r1, #28]
 800df82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800df86:	4290      	cmp	r0, r2
 800df88:	d204      	bcs.n	800df94 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800df8a:	69ca      	ldr	r2, [r1, #28]
 800df8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df90:	4302      	orrs	r2, r0
 800df92:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800df94:	069d      	lsls	r5, r3, #26
 800df96:	d50b      	bpl.n	800dfb0 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800df98:	4a22      	ldr	r2, [pc, #136]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800df9a:	69e1      	ldr	r1, [r4, #28]
 800df9c:	6a13      	ldr	r3, [r2, #32]
 800df9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	d204      	bcs.n	800dfb0 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800dfa6:	6a13      	ldr	r3, [r2, #32]
 800dfa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfac:	430b      	orrs	r3, r1
 800dfae:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfb0:	f7ff fe7a 	bl	800dca8 <HAL_RCC_GetSysClockFreq>
 800dfb4:	4a1b      	ldr	r2, [pc, #108]	; (800e024 <HAL_RCC_ClockConfig+0x23c>)
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	481b      	ldr	r0, [pc, #108]	; (800e028 <HAL_RCC_ClockConfig+0x240>)
 800dfba:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfbc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfbe:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800dfc2:	4d1a      	ldr	r5, [pc, #104]	; (800e02c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfc4:	f002 020f 	and.w	r2, r2, #15
 800dfc8:	4c19      	ldr	r4, [pc, #100]	; (800e030 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfca:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfcc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfce:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800dfd2:	4818      	ldr	r0, [pc, #96]	; (800e034 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfd4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dfd8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800dfda:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800dfdc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfde:	40d3      	lsrs	r3, r2
 800dfe0:	6023      	str	r3, [r4, #0]
}
 800dfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800dfe6:	f7fc bc4b 	b.w	800a880 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dfea:	07da      	lsls	r2, r3, #31
 800dfec:	f53f af60 	bmi.w	800deb0 <HAL_RCC_ClockConfig+0xc8>
 800dff0:	e795      	b.n	800df1e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dff2:	6982      	ldr	r2, [r0, #24]
 800dff4:	f022 020f 	bic.w	r2, r2, #15
 800dff8:	4311      	orrs	r1, r2
 800dffa:	6181      	str	r1, [r0, #24]
 800dffc:	e78f      	b.n	800df1e <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dffe:	019f      	lsls	r7, r3, #6
 800e000:	f53f af6a 	bmi.w	800ded8 <HAL_RCC_ClockConfig+0xf0>
 800e004:	e707      	b.n	800de16 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800e006:	2001      	movs	r0, #1
}
 800e008:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e00a:	039b      	lsls	r3, r3, #14
 800e00c:	f53f af64 	bmi.w	800ded8 <HAL_RCC_ClockConfig+0xf0>
 800e010:	e701      	b.n	800de16 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800e012:	2003      	movs	r0, #3
 800e014:	e700      	b.n	800de18 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e016:	05de      	lsls	r6, r3, #23
 800e018:	f53f af5e 	bmi.w	800ded8 <HAL_RCC_ClockConfig+0xf0>
 800e01c:	e6fb      	b.n	800de16 <HAL_RCC_ClockConfig+0x2e>
 800e01e:	bf00      	nop
 800e020:	52002000 	.word	0x52002000
 800e024:	58024400 	.word	0x58024400
 800e028:	24009f80 	.word	0x24009f80
 800e02c:	24008000 	.word	0x24008000
 800e030:	24008004 	.word	0x24008004
 800e034:	2400801c 	.word	0x2400801c

0800e038 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e038:	4a18      	ldr	r2, [pc, #96]	; (800e09c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e03a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e03c:	6913      	ldr	r3, [r2, #16]
 800e03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e042:	2b10      	cmp	r3, #16
 800e044:	d01a      	beq.n	800e07c <HAL_RCC_GetHCLKFreq+0x44>
 800e046:	2b18      	cmp	r3, #24
 800e048:	d023      	beq.n	800e092 <HAL_RCC_GetHCLKFreq+0x5a>
 800e04a:	b1cb      	cbz	r3, 800e080 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800e04c:	4814      	ldr	r0, [pc, #80]	; (800e0a0 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <HAL_RCC_GetHCLKFreq+0x64>)
 800e050:	4914      	ldr	r1, [pc, #80]	; (800e0a4 <HAL_RCC_GetHCLKFreq+0x6c>)
 800e052:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e054:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e056:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e05a:	4c13      	ldr	r4, [pc, #76]	; (800e0a8 <HAL_RCC_GetHCLKFreq+0x70>)
 800e05c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e060:	4d12      	ldr	r5, [pc, #72]	; (800e0ac <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e062:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e064:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e066:	f002 021f 	and.w	r2, r2, #31
 800e06a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e06e:	f003 001f 	and.w	r0, r3, #31
 800e072:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800e076:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e078:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e07c:	480c      	ldr	r0, [pc, #48]	; (800e0b0 <HAL_RCC_GetHCLKFreq+0x78>)
 800e07e:	e7e6      	b.n	800e04e <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e080:	6813      	ldr	r3, [r2, #0]
 800e082:	069b      	lsls	r3, r3, #26
 800e084:	d508      	bpl.n	800e098 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e086:	6812      	ldr	r2, [r2, #0]
 800e088:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <HAL_RCC_GetHCLKFreq+0x7c>)
 800e08a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800e08e:	40d0      	lsrs	r0, r2
 800e090:	e7dd      	b.n	800e04e <HAL_RCC_GetHCLKFreq+0x16>
 800e092:	f7ff fa9f 	bl	800d5d4 <HAL_RCC_GetSysClockFreq.part.0>
 800e096:	e7da      	b.n	800e04e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e098:	4806      	ldr	r0, [pc, #24]	; (800e0b4 <HAL_RCC_GetHCLKFreq+0x7c>)
 800e09a:	e7d8      	b.n	800e04e <HAL_RCC_GetHCLKFreq+0x16>
 800e09c:	58024400 	.word	0x58024400
 800e0a0:	003d0900 	.word	0x003d0900
 800e0a4:	24009f80 	.word	0x24009f80
 800e0a8:	24008004 	.word	0x24008004
 800e0ac:	24008000 	.word	0x24008000
 800e0b0:	007a1200 	.word	0x007a1200
 800e0b4:	03d09000 	.word	0x03d09000

0800e0b8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0b8:	4a1c      	ldr	r2, [pc, #112]	; (800e12c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0ba:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0bc:	6913      	ldr	r3, [r2, #16]
 800e0be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0c2:	2b10      	cmp	r3, #16
 800e0c4:	d021      	beq.n	800e10a <HAL_RCC_GetPCLK1Freq+0x52>
 800e0c6:	2b18      	cmp	r3, #24
 800e0c8:	d02b      	beq.n	800e122 <HAL_RCC_GetPCLK1Freq+0x6a>
 800e0ca:	b303      	cbz	r3, 800e10e <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800e0cc:	4818      	ldr	r0, [pc, #96]	; (800e130 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0ce:	4a17      	ldr	r2, [pc, #92]	; (800e12c <HAL_RCC_GetPCLK1Freq+0x74>)
 800e0d0:	4918      	ldr	r1, [pc, #96]	; (800e134 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800e0d2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800e0d4:	4d18      	ldr	r5, [pc, #96]	; (800e138 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0d6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e0da:	4c18      	ldr	r4, [pc, #96]	; (800e13c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0dc:	5ccb      	ldrb	r3, [r1, r3]
 800e0de:	f003 031f 	and.w	r3, r3, #31
 800e0e2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e0e6:	6990      	ldr	r0, [r2, #24]
 800e0e8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800e0ec:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e0ee:	5c08      	ldrb	r0, [r1, r0]
 800e0f0:	f000 001f 	and.w	r0, r0, #31
 800e0f4:	40c3      	lsrs	r3, r0
 800e0f6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e0f8:	69d2      	ldr	r2, [r2, #28]
 800e0fa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800e0fe:	5c88      	ldrb	r0, [r1, r2]
 800e100:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e104:	fa23 f000 	lsr.w	r0, r3, r0
 800e108:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e10a:	480d      	ldr	r0, [pc, #52]	; (800e140 <HAL_RCC_GetPCLK1Freq+0x88>)
 800e10c:	e7df      	b.n	800e0ce <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e10e:	6813      	ldr	r3, [r2, #0]
 800e110:	069b      	lsls	r3, r3, #26
 800e112:	d509      	bpl.n	800e128 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e114:	6810      	ldr	r0, [r2, #0]
 800e116:	4b0b      	ldr	r3, [pc, #44]	; (800e144 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800e118:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800e11c:	fa23 f000 	lsr.w	r0, r3, r0
 800e120:	e7d5      	b.n	800e0ce <HAL_RCC_GetPCLK1Freq+0x16>
 800e122:	f7ff fa57 	bl	800d5d4 <HAL_RCC_GetSysClockFreq.part.0>
 800e126:	e7d2      	b.n	800e0ce <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e128:	4806      	ldr	r0, [pc, #24]	; (800e144 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800e12a:	e7d0      	b.n	800e0ce <HAL_RCC_GetPCLK1Freq+0x16>
 800e12c:	58024400 	.word	0x58024400
 800e130:	003d0900 	.word	0x003d0900
 800e134:	24009f80 	.word	0x24009f80
 800e138:	24008000 	.word	0x24008000
 800e13c:	24008004 	.word	0x24008004
 800e140:	007a1200 	.word	0x007a1200
 800e144:	03d09000 	.word	0x03d09000

0800e148 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e148:	4a1c      	ldr	r2, [pc, #112]	; (800e1bc <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e14a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e14c:	6913      	ldr	r3, [r2, #16]
 800e14e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e152:	2b10      	cmp	r3, #16
 800e154:	d021      	beq.n	800e19a <HAL_RCC_GetPCLK2Freq+0x52>
 800e156:	2b18      	cmp	r3, #24
 800e158:	d02b      	beq.n	800e1b2 <HAL_RCC_GetPCLK2Freq+0x6a>
 800e15a:	b303      	cbz	r3, 800e19e <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800e15c:	4818      	ldr	r0, [pc, #96]	; (800e1c0 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e15e:	4a17      	ldr	r2, [pc, #92]	; (800e1bc <HAL_RCC_GetPCLK2Freq+0x74>)
 800e160:	4918      	ldr	r1, [pc, #96]	; (800e1c4 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800e162:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800e164:	4d18      	ldr	r5, [pc, #96]	; (800e1c8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e166:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e16a:	4c18      	ldr	r4, [pc, #96]	; (800e1cc <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e16c:	5ccb      	ldrb	r3, [r1, r3]
 800e16e:	f003 031f 	and.w	r3, r3, #31
 800e172:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e176:	6990      	ldr	r0, [r2, #24]
 800e178:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800e17c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e17e:	5c08      	ldrb	r0, [r1, r0]
 800e180:	f000 001f 	and.w	r0, r0, #31
 800e184:	40c3      	lsrs	r3, r0
 800e186:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e188:	69d2      	ldr	r2, [r2, #28]
 800e18a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800e18e:	5c88      	ldrb	r0, [r1, r2]
 800e190:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e194:	fa23 f000 	lsr.w	r0, r3, r0
 800e198:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e19a:	480d      	ldr	r0, [pc, #52]	; (800e1d0 <HAL_RCC_GetPCLK2Freq+0x88>)
 800e19c:	e7df      	b.n	800e15e <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e19e:	6813      	ldr	r3, [r2, #0]
 800e1a0:	069b      	lsls	r3, r3, #26
 800e1a2:	d509      	bpl.n	800e1b8 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e1a4:	6810      	ldr	r0, [r2, #0]
 800e1a6:	4b0b      	ldr	r3, [pc, #44]	; (800e1d4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800e1a8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800e1ac:	fa23 f000 	lsr.w	r0, r3, r0
 800e1b0:	e7d5      	b.n	800e15e <HAL_RCC_GetPCLK2Freq+0x16>
 800e1b2:	f7ff fa0f 	bl	800d5d4 <HAL_RCC_GetSysClockFreq.part.0>
 800e1b6:	e7d2      	b.n	800e15e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e1b8:	4806      	ldr	r0, [pc, #24]	; (800e1d4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800e1ba:	e7d0      	b.n	800e15e <HAL_RCC_GetPCLK2Freq+0x16>
 800e1bc:	58024400 	.word	0x58024400
 800e1c0:	003d0900 	.word	0x003d0900
 800e1c4:	24009f80 	.word	0x24009f80
 800e1c8:	24008000 	.word	0x24008000
 800e1cc:	24008004 	.word	0x24008004
 800e1d0:	007a1200 	.word	0x007a1200
 800e1d4:	03d09000 	.word	0x03d09000

0800e1d8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e1d8:	4b13      	ldr	r3, [pc, #76]	; (800e228 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e1da:	223f      	movs	r2, #63	; 0x3f
 800e1dc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e1de:	691a      	ldr	r2, [r3, #16]
 800e1e0:	f002 0207 	and.w	r2, r2, #7
 800e1e4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e1e6:	699a      	ldr	r2, [r3, #24]
 800e1e8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800e1ec:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e1ee:	699a      	ldr	r2, [r3, #24]
 800e1f0:	f002 020f 	and.w	r2, r2, #15
 800e1f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e1f6:	699a      	ldr	r2, [r3, #24]
 800e1f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e1fc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e1fe:	69da      	ldr	r2, [r3, #28]
 800e200:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e204:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e206:	69da      	ldr	r2, [r3, #28]
 800e208:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800e20c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e20e:	6a1b      	ldr	r3, [r3, #32]
{
 800e210:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e212:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e216:	4c05      	ldr	r4, [pc, #20]	; (800e22c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e218:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e21a:	6823      	ldr	r3, [r4, #0]
}
 800e21c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e220:	f003 030f 	and.w	r3, r3, #15
 800e224:	600b      	str	r3, [r1, #0]
}
 800e226:	4770      	bx	lr
 800e228:	58024400 	.word	0x58024400
 800e22c:	52002000 	.word	0x52002000

0800e230 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e232:	4c3a      	ldr	r4, [pc, #232]	; (800e31c <RCCEx_PLL2_Config+0xec>)
 800e234:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e236:	f003 0303 	and.w	r3, r3, #3
 800e23a:	2b03      	cmp	r3, #3
 800e23c:	d067      	beq.n	800e30e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	4606      	mov	r6, r0
 800e242:	460f      	mov	r7, r1
 800e244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e248:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e24a:	f7fc fc4f 	bl	800aaec <HAL_GetTick>
 800e24e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e250:	e004      	b.n	800e25c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e252:	f7fc fc4b 	bl	800aaec <HAL_GetTick>
 800e256:	1b43      	subs	r3, r0, r5
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d856      	bhi.n	800e30a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	011a      	lsls	r2, r3, #4
 800e260:	d4f7      	bmi.n	800e252 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e264:	6832      	ldr	r2, [r6, #0]
 800e266:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e26a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e26e:	62a3      	str	r3, [r4, #40]	; 0x28
 800e270:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800e274:	3b01      	subs	r3, #1
 800e276:	3a01      	subs	r2, #1
 800e278:	025b      	lsls	r3, r3, #9
 800e27a:	0412      	lsls	r2, r2, #16
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e282:	4313      	orrs	r3, r2
 800e284:	6872      	ldr	r2, [r6, #4]
 800e286:	3a01      	subs	r2, #1
 800e288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e28c:	4313      	orrs	r3, r2
 800e28e:	6932      	ldr	r2, [r6, #16]
 800e290:	3a01      	subs	r2, #1
 800e292:	0612      	lsls	r2, r2, #24
 800e294:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e298:	4313      	orrs	r3, r2
 800e29a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e29c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e29e:	6972      	ldr	r2, [r6, #20]
 800e2a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e2a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e2aa:	69b3      	ldr	r3, [r6, #24]
 800e2ac:	f022 0220 	bic.w	r2, r2, #32
 800e2b0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e2b2:	4b1b      	ldr	r3, [pc, #108]	; (800e320 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e2b4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e2b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e2b8:	f022 0210 	bic.w	r2, r2, #16
 800e2bc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e2be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e2c0:	69f2      	ldr	r2, [r6, #28]
 800e2c2:	400b      	ands	r3, r1
 800e2c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e2c8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e2ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e2cc:	f043 0310 	orr.w	r3, r3, #16
 800e2d0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e2d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800e2d4:	b1ef      	cbz	r7, 800e312 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e2d6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e2d8:	bf0c      	ite	eq
 800e2da:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e2de:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800e2e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e2e4:	4c0d      	ldr	r4, [pc, #52]	; (800e31c <RCCEx_PLL2_Config+0xec>)
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e2ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2ee:	f7fc fbfd 	bl	800aaec <HAL_GetTick>
 800e2f2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e2f4:	e004      	b.n	800e300 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e2f6:	f7fc fbf9 	bl	800aaec <HAL_GetTick>
 800e2fa:	1b40      	subs	r0, r0, r5
 800e2fc:	2802      	cmp	r0, #2
 800e2fe:	d804      	bhi.n	800e30a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	011b      	lsls	r3, r3, #4
 800e304:	d5f7      	bpl.n	800e2f6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800e306:	2000      	movs	r0, #0
}
 800e308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800e30a:	2003      	movs	r0, #3
}
 800e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800e30e:	2001      	movs	r0, #1
}
 800e310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e316:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e318:	e7e4      	b.n	800e2e4 <RCCEx_PLL2_Config+0xb4>
 800e31a:	bf00      	nop
 800e31c:	58024400 	.word	0x58024400
 800e320:	ffff0007 	.word	0xffff0007

0800e324 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e326:	4c3a      	ldr	r4, [pc, #232]	; (800e410 <RCCEx_PLL3_Config+0xec>)
 800e328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e32a:	f003 0303 	and.w	r3, r3, #3
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d067      	beq.n	800e402 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	4606      	mov	r6, r0
 800e336:	460f      	mov	r7, r1
 800e338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e33c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e33e:	f7fc fbd5 	bl	800aaec <HAL_GetTick>
 800e342:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e344:	e004      	b.n	800e350 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e346:	f7fc fbd1 	bl	800aaec <HAL_GetTick>
 800e34a:	1b43      	subs	r3, r0, r5
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d856      	bhi.n	800e3fe <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	009a      	lsls	r2, r3, #2
 800e354:	d4f7      	bmi.n	800e346 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e356:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e358:	6832      	ldr	r2, [r6, #0]
 800e35a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800e35e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e362:	62a3      	str	r3, [r4, #40]	; 0x28
 800e364:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800e368:	3b01      	subs	r3, #1
 800e36a:	3a01      	subs	r2, #1
 800e36c:	025b      	lsls	r3, r3, #9
 800e36e:	0412      	lsls	r2, r2, #16
 800e370:	b29b      	uxth	r3, r3
 800e372:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e376:	4313      	orrs	r3, r2
 800e378:	6872      	ldr	r2, [r6, #4]
 800e37a:	3a01      	subs	r2, #1
 800e37c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e380:	4313      	orrs	r3, r2
 800e382:	6932      	ldr	r2, [r6, #16]
 800e384:	3a01      	subs	r2, #1
 800e386:	0612      	lsls	r2, r2, #24
 800e388:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e38c:	4313      	orrs	r3, r2
 800e38e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e392:	6972      	ldr	r2, [r6, #20]
 800e394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e398:	4313      	orrs	r3, r2
 800e39a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e39c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e39e:	69b3      	ldr	r3, [r6, #24]
 800e3a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e3a4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e3a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e3aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e3ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e3b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e3b4:	69f2      	ldr	r2, [r6, #28]
 800e3b6:	400b      	ands	r3, r1
 800e3b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e3bc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e3be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3c4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e3c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800e3c8:	b1ef      	cbz	r7, 800e406 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e3ca:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e3cc:	bf0c      	ite	eq
 800e3ce:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e3d2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800e3d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e3d8:	4c0d      	ldr	r4, [pc, #52]	; (800e410 <RCCEx_PLL3_Config+0xec>)
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3e0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3e2:	f7fc fb83 	bl	800aaec <HAL_GetTick>
 800e3e6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3e8:	e004      	b.n	800e3f4 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e3ea:	f7fc fb7f 	bl	800aaec <HAL_GetTick>
 800e3ee:	1b40      	subs	r0, r0, r5
 800e3f0:	2802      	cmp	r0, #2
 800e3f2:	d804      	bhi.n	800e3fe <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	d5f7      	bpl.n	800e3ea <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800e3fa:	2000      	movs	r0, #0
}
 800e3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800e3fe:	2003      	movs	r0, #3
}
 800e400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800e402:	2001      	movs	r0, #1
}
 800e404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e40a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e40c:	e7e4      	b.n	800e3d8 <RCCEx_PLL3_Config+0xb4>
 800e40e:	bf00      	nop
 800e410:	58024400 	.word	0x58024400
 800e414:	ffff0007 	.word	0xffff0007

0800e418 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e41c:	6803      	ldr	r3, [r0, #0]
{
 800e41e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e420:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800e424:	d022      	beq.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800e426:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800e428:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800e42c:	f000 8499 	beq.w	800ed62 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800e430:	d811      	bhi.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800e432:	2a00      	cmp	r2, #0
 800e434:	f000 8503 	beq.w	800ee3e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800e438:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e43c:	f040 84fc 	bne.w	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e440:	2102      	movs	r1, #2
 800e442:	3004      	adds	r0, #4
 800e444:	f7ff fef4 	bl	800e230 <RCCEx_PLL2_Config>
 800e448:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800e44a:	2e00      	cmp	r6, #0
 800e44c:	f040 8491 	bne.w	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e450:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	e003      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800e456:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800e45a:	f040 84ed 	bne.w	800ee38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e45e:	48a8      	ldr	r0, [pc, #672]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e460:	2600      	movs	r6, #0
 800e462:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800e464:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800e468:	430a      	orrs	r2, r1
 800e46a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e46c:	05dd      	lsls	r5, r3, #23
 800e46e:	d50a      	bpl.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e470:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e472:	2a04      	cmp	r2, #4
 800e474:	d806      	bhi.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800e476:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e47a:	04ad      	.short	0x04ad
 800e47c:	0493048c 	.word	0x0493048c
 800e480:	02e902e9 	.word	0x02e902e9
 800e484:	2601      	movs	r6, #1
 800e486:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e488:	0598      	lsls	r0, r3, #22
 800e48a:	d51b      	bpl.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 800e48c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e48e:	2a80      	cmp	r2, #128	; 0x80
 800e490:	f000 8497 	beq.w	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800e494:	f200 80ec 	bhi.w	800e670 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800e498:	2a00      	cmp	r2, #0
 800e49a:	f000 8394 	beq.w	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800e49e:	2a40      	cmp	r2, #64	; 0x40
 800e4a0:	f040 80ed 	bne.w	800e67e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	1d20      	adds	r0, r4, #4
 800e4a8:	f7ff fec2 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e4ac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e4ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e4b0:	2d00      	cmp	r5, #0
 800e4b2:	f040 836e 	bne.w	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e4b6:	4992      	ldr	r1, [pc, #584]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e4bc:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800e4c0:	4302      	orrs	r2, r0
 800e4c2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e4c4:	0559      	lsls	r1, r3, #21
 800e4c6:	d51f      	bpl.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800e4c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800e4cc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e4d0:	f000 8456 	beq.w	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800e4d4:	f200 80d6 	bhi.w	800e684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800e4d8:	2a00      	cmp	r2, #0
 800e4da:	f000 837a 	beq.w	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800e4de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800e4e2:	f040 80d7 	bne.w	800e694 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	1d20      	adds	r0, r4, #4
 800e4ea:	f7ff fea1 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e4ee:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e4f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e4f2:	2d00      	cmp	r5, #0
 800e4f4:	f040 8351 	bne.w	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e4f8:	4981      	ldr	r1, [pc, #516]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e4fa:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800e4fe:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e500:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800e504:	4302      	orrs	r2, r0
 800e506:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e508:	051a      	lsls	r2, r3, #20
 800e50a:	d51f      	bpl.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 800e50c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800e510:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800e514:	f000 8465 	beq.w	800ede2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800e518:	f200 80bf 	bhi.w	800e69a <HAL_RCCEx_PeriphCLKConfig+0x282>
 800e51c:	2a00      	cmp	r2, #0
 800e51e:	f000 835e 	beq.w	800ebde <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800e522:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e526:	f040 80c0 	bne.w	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e52a:	2100      	movs	r1, #0
 800e52c:	1d20      	adds	r0, r4, #4
 800e52e:	f7ff fe7f 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e532:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e534:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e536:	2d00      	cmp	r5, #0
 800e538:	f040 8333 	bne.w	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e53c:	4970      	ldr	r1, [pc, #448]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e53e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800e542:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e544:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800e548:	4302      	orrs	r2, r0
 800e54a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e54c:	019f      	lsls	r7, r3, #6
 800e54e:	d518      	bpl.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 800e550:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e552:	2a20      	cmp	r2, #32
 800e554:	f000 83ce 	beq.w	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800e558:	f200 80aa 	bhi.w	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e55c:	b13a      	cbz	r2, 800e56e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800e55e:	2a10      	cmp	r2, #16
 800e560:	f040 80a9 	bne.w	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e564:	4966      	ldr	r1, [pc, #408]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e566:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e568:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e56c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800e56e:	2d00      	cmp	r5, #0
 800e570:	f040 8360 	bne.w	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e574:	4962      	ldr	r1, [pc, #392]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e576:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e578:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e57a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800e57e:	4302      	orrs	r2, r0
 800e580:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e582:	04d8      	lsls	r0, r3, #19
 800e584:	d51d      	bpl.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 800e586:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e588:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e58c:	f000 8410 	beq.w	800edb0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800e590:	f200 8094 	bhi.w	800e6bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800e594:	2a00      	cmp	r2, #0
 800e596:	f000 8328 	beq.w	800ebea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e59a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e59e:	f040 8095 	bne.w	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	1d20      	adds	r0, r4, #4
 800e5a6:	f7ff fe43 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e5aa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e5ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	f040 82f1 	bne.w	800eb96 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e5b4:	4952      	ldr	r1, [pc, #328]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e5b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e5b8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e5ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800e5be:	4302      	orrs	r2, r0
 800e5c0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e5c2:	0499      	lsls	r1, r3, #18
 800e5c4:	d51a      	bpl.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800e5c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e5c8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800e5cc:	f000 8376 	beq.w	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800e5d0:	d87f      	bhi.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e5d2:	b14a      	cbz	r2, 800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800e5d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e5d8:	f040 8083 	bne.w	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e5dc:	2101      	movs	r1, #1
 800e5de:	1d20      	adds	r0, r4, #4
 800e5e0:	f7ff fe26 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e5e4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e5e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e5e8:	2d00      	cmp	r5, #0
 800e5ea:	f040 8325 	bne.w	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e5ee:	4944      	ldr	r1, [pc, #272]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e5f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e5f2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e5f4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800e5f8:	4302      	orrs	r2, r0
 800e5fa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e5fc:	045a      	lsls	r2, r3, #17
 800e5fe:	d51b      	bpl.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 800e600:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800e604:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800e608:	f000 8362 	beq.w	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800e60c:	d86c      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800e60e:	b142      	cbz	r2, 800e622 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e610:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800e614:	d170      	bne.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e616:	2101      	movs	r1, #1
 800e618:	1d20      	adds	r0, r4, #4
 800e61a:	f7ff fe09 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e61e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e620:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e622:	2d00      	cmp	r5, #0
 800e624:	f040 830a 	bne.w	800ec3c <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e628:	4935      	ldr	r1, [pc, #212]	; (800e700 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800e62a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800e62e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e630:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800e634:	4302      	orrs	r2, r0
 800e636:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e638:	041f      	lsls	r7, r3, #16
 800e63a:	d50d      	bpl.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 800e63c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e63e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800e642:	f000 834f 	beq.w	800ece4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800e646:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800e64a:	f000 820b 	beq.w	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e64e:	2a00      	cmp	r2, #0
 800e650:	f000 820e 	beq.w	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800e654:	2601      	movs	r6, #1
 800e656:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e658:	01d8      	lsls	r0, r3, #7
 800e65a:	d55d      	bpl.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800e65c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e65e:	2a03      	cmp	r2, #3
 800e660:	f200 8418 	bhi.w	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800e664:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e668:	035a0054 	.word	0x035a0054
 800e66c:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 800e670:	2ac0      	cmp	r2, #192	; 0xc0
 800e672:	f43f af1d 	beq.w	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e676:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e67a:	f43f af19 	beq.w	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e67e:	2601      	movs	r6, #1
 800e680:	4635      	mov	r5, r6
 800e682:	e71f      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 800e684:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800e688:	f43f af33 	beq.w	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800e68c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800e690:	f43f af2f 	beq.w	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800e694:	2601      	movs	r6, #1
 800e696:	4635      	mov	r5, r6
 800e698:	e736      	b.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800e69a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800e69e:	f43f af4a 	beq.w	800e536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800e6a2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800e6a6:	f43f af46 	beq.w	800e536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800e6aa:	2601      	movs	r6, #1
 800e6ac:	4635      	mov	r5, r6
 800e6ae:	e74d      	b.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 800e6b0:	2a30      	cmp	r2, #48	; 0x30
 800e6b2:	f43f af5c 	beq.w	800e56e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800e6b6:	2601      	movs	r6, #1
 800e6b8:	4635      	mov	r5, r6
 800e6ba:	e762      	b.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800e6bc:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800e6c0:	f43f af75 	beq.w	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800e6c4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e6c8:	f43f af71 	beq.w	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800e6cc:	2601      	movs	r6, #1
 800e6ce:	4635      	mov	r5, r6
 800e6d0:	e777      	b.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800e6d2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800e6d6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800e6da:	d085      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800e6dc:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800e6e0:	d082      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800e6e2:	2601      	movs	r6, #1
 800e6e4:	4635      	mov	r5, r6
 800e6e6:	e789      	b.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 800e6e8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800e6ec:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e6f0:	d097      	beq.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e6f2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800e6f6:	d094      	beq.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e6f8:	2601      	movs	r6, #1
 800e6fa:	4635      	mov	r5, r6
 800e6fc:	e79c      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800e6fe:	bf00      	nop
 800e700:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e704:	2102      	movs	r1, #2
 800e706:	1d20      	adds	r0, r4, #4
 800e708:	f7ff fd92 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e70c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e70e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e710:	2d00      	cmp	r5, #0
 800e712:	f000 8272 	beq.w	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 800e716:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e718:	0259      	lsls	r1, r3, #9
 800e71a:	f100 81ee 	bmi.w	800eafa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e71e:	07df      	lsls	r7, r3, #31
 800e720:	d52f      	bpl.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800e722:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800e724:	2a28      	cmp	r2, #40	; 0x28
 800e726:	d82a      	bhi.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800e728:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e72c:	002901dc 	.word	0x002901dc
 800e730:	00290029 	.word	0x00290029
 800e734:	00290029 	.word	0x00290029
 800e738:	00290029 	.word	0x00290029
 800e73c:	00290378 	.word	0x00290378
 800e740:	00290029 	.word	0x00290029
 800e744:	00290029 	.word	0x00290029
 800e748:	00290029 	.word	0x00290029
 800e74c:	002901d5 	.word	0x002901d5
 800e750:	00290029 	.word	0x00290029
 800e754:	00290029 	.word	0x00290029
 800e758:	00290029 	.word	0x00290029
 800e75c:	002901dc 	.word	0x002901dc
 800e760:	00290029 	.word	0x00290029
 800e764:	00290029 	.word	0x00290029
 800e768:	00290029 	.word	0x00290029
 800e76c:	002901dc 	.word	0x002901dc
 800e770:	00290029 	.word	0x00290029
 800e774:	00290029 	.word	0x00290029
 800e778:	00290029 	.word	0x00290029
 800e77c:	01dc      	.short	0x01dc
 800e77e:	2601      	movs	r6, #1
 800e780:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e782:	0798      	lsls	r0, r3, #30
 800e784:	d516      	bpl.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e786:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800e788:	2a05      	cmp	r2, #5
 800e78a:	f200 8380 	bhi.w	800ee8e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800e78e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e792:	000d      	.short	0x000d
 800e794:	00060331 	.word	0x00060331
 800e798:	000d000d 	.word	0x000d000d
 800e79c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e79e:	2101      	movs	r1, #1
 800e7a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e7a4:	f7ff fdbe 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e7a8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e7aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	f000 822e 	beq.w	800ec0e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800e7b2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e7b4:	0759      	lsls	r1, r3, #29
 800e7b6:	d517      	bpl.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e7b8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800e7bc:	2a05      	cmp	r2, #5
 800e7be:	f200 836c 	bhi.w	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800e7c2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e7c6:	000d      	.short	0x000d
 800e7c8:	00060321 	.word	0x00060321
 800e7cc:	000d000d 	.word	0x000d000d
 800e7d0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e7d8:	f7ff fda4 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7dc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e7de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e7e0:	2d00      	cmp	r5, #0
 800e7e2:	f000 821c 	beq.w	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x806>
 800e7e6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7e8:	069a      	lsls	r2, r3, #26
 800e7ea:	d51d      	bpl.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e7ec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e7f0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800e7f4:	f000 8287 	beq.w	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e7f8:	f200 80e6 	bhi.w	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800e7fc:	b14a      	cbz	r2, 800e812 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800e7fe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800e802:	f040 80eb 	bne.w	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e806:	2100      	movs	r1, #0
 800e808:	1d20      	adds	r0, r4, #4
 800e80a:	f7ff fd11 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e80e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e810:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e812:	2d00      	cmp	r5, #0
 800e814:	f040 81ef 	bne.w	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e818:	49a4      	ldr	r1, [pc, #656]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e81a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e81e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800e820:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800e824:	4302      	orrs	r2, r0
 800e826:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e828:	065f      	lsls	r7, r3, #25
 800e82a:	d51d      	bpl.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e82c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800e830:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800e834:	f000 822e 	beq.w	800ec94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e838:	f200 80d3 	bhi.w	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800e83c:	b14a      	cbz	r2, 800e852 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800e83e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e842:	f040 80d8 	bne.w	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e846:	2100      	movs	r1, #0
 800e848:	1d20      	adds	r0, r4, #4
 800e84a:	f7ff fcf1 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e84e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e850:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e852:	2d00      	cmp	r5, #0
 800e854:	f040 81f4 	bne.w	800ec40 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e858:	4994      	ldr	r1, [pc, #592]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e85a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800e85e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e860:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800e864:	4302      	orrs	r2, r0
 800e866:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e868:	0618      	lsls	r0, r3, #24
 800e86a:	d51d      	bpl.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e86c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800e870:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e874:	f000 8218 	beq.w	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800e878:	f200 80c0 	bhi.w	800e9fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800e87c:	b14a      	cbz	r2, 800e892 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800e87e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e882:	f040 80c5 	bne.w	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e886:	2100      	movs	r1, #0
 800e888:	1d20      	adds	r0, r4, #4
 800e88a:	f7ff fcd1 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e88e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e890:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e892:	2d00      	cmp	r5, #0
 800e894:	f040 81b9 	bne.w	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e898:	4984      	ldr	r1, [pc, #528]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e89a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800e89e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e8a0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e8a4:	4302      	orrs	r2, r0
 800e8a6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e8a8:	0719      	lsls	r1, r3, #28
 800e8aa:	d50b      	bpl.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800e8ac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e8b0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e8b4:	f000 823b 	beq.w	800ed2e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e8b8:	487c      	ldr	r0, [pc, #496]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e8ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e8bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e8c0:	430a      	orrs	r2, r1
 800e8c2:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e8c4:	06da      	lsls	r2, r3, #27
 800e8c6:	d50b      	bpl.n	800e8e0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e8c8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800e8cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e8d0:	f000 823a 	beq.w	800ed48 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e8d4:	4875      	ldr	r0, [pc, #468]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e8d6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e8d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e8e0:	031f      	lsls	r7, r3, #12
 800e8e2:	d50e      	bpl.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 800e8e4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800e8e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e8ec:	f000 80e0 	beq.w	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800e8f0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800e8f4:	f000 80e3 	beq.w	800eabe <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800e8f8:	2900      	cmp	r1, #0
 800e8fa:	f000 81c3 	beq.w	800ec84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800e8fe:	2601      	movs	r6, #1
 800e900:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e902:	0358      	lsls	r0, r3, #13
 800e904:	d50f      	bpl.n	800e926 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 800e906:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800e90a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800e90e:	f000 80ba 	beq.w	800ea86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e912:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800e916:	f000 80bd 	beq.w	800ea94 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800e91a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e91e:	f000 81a9 	beq.w	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800e922:	2601      	movs	r6, #1
 800e924:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e926:	03d9      	lsls	r1, r3, #15
 800e928:	d509      	bpl.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 800e92a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	f000 818f 	beq.w	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800e932:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e936:	f000 8136 	beq.w	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800e93a:	2601      	movs	r6, #1
 800e93c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e93e:	009a      	lsls	r2, r3, #2
 800e940:	f100 811c 	bmi.w	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e944:	039f      	lsls	r7, r3, #14
 800e946:	d466      	bmi.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 800e948:	1e30      	subs	r0, r6, #0
 800e94a:	bf18      	it	ne
 800e94c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e94e:	02de      	lsls	r6, r3, #11
 800e950:	d506      	bpl.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e952:	4956      	ldr	r1, [pc, #344]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e954:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800e956:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e958:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800e95c:	432a      	orrs	r2, r5
 800e95e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e960:	00dd      	lsls	r5, r3, #3
 800e962:	d507      	bpl.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e964:	4951      	ldr	r1, [pc, #324]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e966:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800e96a:	690a      	ldr	r2, [r1, #16]
 800e96c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e970:	432a      	orrs	r2, r5
 800e972:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e974:	0299      	lsls	r1, r3, #10
 800e976:	d506      	bpl.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e978:	494c      	ldr	r1, [pc, #304]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e97a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800e97c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e97e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e982:	432a      	orrs	r2, r5
 800e984:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e986:	005a      	lsls	r2, r3, #1
 800e988:	d509      	bpl.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e98a:	4a48      	ldr	r2, [pc, #288]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e98c:	6911      	ldr	r1, [r2, #16]
 800e98e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800e992:	6111      	str	r1, [r2, #16]
 800e994:	6911      	ldr	r1, [r2, #16]
 800e996:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800e99a:	4329      	orrs	r1, r5
 800e99c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	da06      	bge.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e9a2:	4942      	ldr	r1, [pc, #264]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e9a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800e9a6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e9a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e9ac:	432a      	orrs	r2, r5
 800e9ae:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e9b0:	021b      	lsls	r3, r3, #8
 800e9b2:	d507      	bpl.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e9b4:	4a3d      	ldr	r2, [pc, #244]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800e9b6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e9ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e9bc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e9c0:	430b      	orrs	r3, r1
 800e9c2:	6553      	str	r3, [r2, #84]	; 0x54
}
 800e9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e9c8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800e9cc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e9d0:	f43f af1f 	beq.w	800e812 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800e9d4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800e9d8:	f43f af1b 	beq.w	800e812 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800e9dc:	2601      	movs	r6, #1
 800e9de:	4635      	mov	r5, r6
 800e9e0:	e722      	b.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e9e2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800e9e6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e9ea:	f43f af32 	beq.w	800e852 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800e9ee:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800e9f2:	f43f af2e 	beq.w	800e852 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800e9f6:	2601      	movs	r6, #1
 800e9f8:	4635      	mov	r5, r6
 800e9fa:	e735      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e9fc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800ea00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ea04:	f43f af45 	beq.w	800e892 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800ea08:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800ea0c:	f43f af41 	beq.w	800e892 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800ea10:	2601      	movs	r6, #1
 800ea12:	4635      	mov	r5, r6
 800ea14:	e748      	b.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 800ea16:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ea18:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ea1c:	f000 8121 	beq.w	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800ea20:	d906      	bls.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800ea22:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800ea26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ea2a:	d003      	beq.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	e78e      	b.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x536>
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	d1fb      	bne.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	d1f9      	bne.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea38:	4d1c      	ldr	r5, [pc, #112]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 800ea3a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea3c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800ea3e:	bf18      	it	ne
 800ea40:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea42:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800ea46:	430a      	orrs	r2, r1
 800ea48:	656a      	str	r2, [r5, #84]	; 0x54
 800ea4a:	e780      	b.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 800ea4c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800ea4e:	2d00      	cmp	r5, #0
 800ea50:	f040 80a5 	bne.w	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea54:	4915      	ldr	r1, [pc, #84]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800ea56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea58:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ea5a:	f022 0207 	bic.w	r2, r2, #7
 800ea5e:	4302      	orrs	r2, r0
 800ea60:	650a      	str	r2, [r1, #80]	; 0x50
 800ea62:	e511      	b.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ea64:	2101      	movs	r1, #1
 800ea66:	1d20      	adds	r0, r4, #4
 800ea68:	f7ff fbe2 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ea6c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ea6e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	f040 80dd 	bne.w	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ea76:	490d      	ldr	r1, [pc, #52]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800ea78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ea7a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ea7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ea80:	4302      	orrs	r2, r0
 800ea82:	650a      	str	r2, [r1, #80]	; 0x50
 800ea84:	e5e8      	b.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ea86:	2101      	movs	r1, #1
 800ea88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ea8c:	f7ff fc4a 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ea90:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ea92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	f040 80d9 	bne.w	800ec4c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ea9a:	4904      	ldr	r1, [pc, #16]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800ea9c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800eaa0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800eaa2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800eaa6:	4302      	orrs	r2, r0
 800eaa8:	654a      	str	r2, [r1, #84]	; 0x54
 800eaaa:	e73c      	b.n	800e926 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800eaac:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eab0:	2102      	movs	r1, #2
 800eab2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eab6:	f7ff fc35 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eabc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	f040 80c2 	bne.w	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eac4:	49ac      	ldr	r1, [pc, #688]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800eac6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800eaca:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800eacc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ead0:	4302      	orrs	r2, r0
 800ead2:	658a      	str	r2, [r1, #88]	; 0x58
 800ead4:	e715      	b.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ead6:	2101      	movs	r1, #1
 800ead8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eadc:	f7ff fc22 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eae0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800eae2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800eae4:	2d00      	cmp	r5, #0
 800eae6:	f040 80ad 	bne.w	800ec44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eaea:	49a3      	ldr	r1, [pc, #652]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800eaec:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800eaee:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800eaf0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800eaf4:	4302      	orrs	r2, r0
 800eaf6:	654a      	str	r2, [r1, #84]	; 0x54
 800eaf8:	e643      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800eafa:	4fa0      	ldr	r7, [pc, #640]	; (800ed7c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb02:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800eb04:	f7fb fff2 	bl	800aaec <HAL_GetTick>
 800eb08:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb0a:	e006      	b.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb0c:	f7fb ffee 	bl	800aaec <HAL_GetTick>
 800eb10:	eba0 0008 	sub.w	r0, r0, r8
 800eb14:	2864      	cmp	r0, #100	; 0x64
 800eb16:	f200 818b 	bhi.w	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	05da      	lsls	r2, r3, #23
 800eb1e:	d5f5      	bpl.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 800eb20:	2d00      	cmp	r5, #0
 800eb22:	f040 81b1 	bne.w	800ee88 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800eb26:	4a94      	ldr	r2, [pc, #592]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800eb28:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800eb2c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800eb2e:	4059      	eors	r1, r3
 800eb30:	f411 7f40 	tst.w	r1, #768	; 0x300
 800eb34:	d00b      	beq.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eb36:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800eb38:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eb3a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800eb3e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800eb42:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eb44:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800eb46:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800eb4a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800eb4c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800eb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb52:	f000 817b 	beq.w	800ee4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb56:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800eb5a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800eb5e:	f000 8189 	beq.w	800ee74 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800eb62:	4985      	ldr	r1, [pc, #532]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800eb64:	690a      	ldr	r2, [r1, #16]
 800eb66:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800eb6a:	610a      	str	r2, [r1, #16]
 800eb6c:	4a82      	ldr	r2, [pc, #520]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800eb6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb72:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800eb74:	430b      	orrs	r3, r1
 800eb76:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	e5d0      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800eb7c:	2102      	movs	r1, #2
 800eb7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eb82:	f7ff fbcf 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800eb86:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f43f aedb 	beq.w	800e944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800eb8e:	2601      	movs	r6, #1
 800eb90:	e6d8      	b.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800eb92:	462e      	mov	r6, r5
 800eb94:	e496      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800eb96:	462e      	mov	r6, r5
 800eb98:	e513      	b.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800eb9a:	462e      	mov	r6, r5
 800eb9c:	e4b4      	b.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800eb9e:	462e      	mov	r6, r5
 800eba0:	e472      	b.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800eba2:	462e      	mov	r6, r5
 800eba4:	e4d2      	b.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800eba6:	2102      	movs	r1, #2
 800eba8:	1d20      	adds	r0, r4, #4
 800ebaa:	f7ff fb41 	bl	800e230 <RCCEx_PLL2_Config>
 800ebae:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ebb0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ebb2:	2d00      	cmp	r5, #0
 800ebb4:	d153      	bne.n	800ec5e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ebb6:	4970      	ldr	r1, [pc, #448]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebb8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ebba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ebbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ebc0:	4302      	orrs	r2, r0
 800ebc2:	64ca      	str	r2, [r1, #76]	; 0x4c
 800ebc4:	e6bb      	b.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebc6:	496c      	ldr	r1, [pc, #432]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ebca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebce:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800ebd0:	e46e      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebd2:	4969      	ldr	r1, [pc, #420]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebd4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ebd6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebda:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800ebdc:	e489      	b.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebde:	4966      	ldr	r1, [pc, #408]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebe0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ebe2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebe6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800ebe8:	e4a5      	b.n	800e536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebea:	4963      	ldr	r1, [pc, #396]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ebee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebf2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800ebf4:	e4db      	b.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ebf6:	462e      	mov	r6, r5
 800ebf8:	e616      	b.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ebfa:	495f      	ldr	r1, [pc, #380]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ebfc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ebfe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ec00:	f022 0203 	bic.w	r2, r2, #3
 800ec04:	4302      	orrs	r2, r0
 800ec06:	64ca      	str	r2, [r1, #76]	; 0x4c
 800ec08:	e586      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ec0a:	462e      	mov	r6, r5
 800ec0c:	e64c      	b.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ec0e:	495a      	ldr	r1, [pc, #360]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ec10:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ec12:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800ec14:	f022 0207 	bic.w	r2, r2, #7
 800ec18:	4302      	orrs	r2, r0
 800ec1a:	654a      	str	r2, [r1, #84]	; 0x54
 800ec1c:	e5ca      	b.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ec1e:	4956      	ldr	r1, [pc, #344]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ec20:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800ec24:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ec26:	f022 0207 	bic.w	r2, r2, #7
 800ec2a:	4302      	orrs	r2, r0
 800ec2c:	658a      	str	r2, [r1, #88]	; 0x58
 800ec2e:	e5db      	b.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ec30:	462e      	mov	r6, r5
 800ec32:	e511      	b.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800ec34:	462e      	mov	r6, r5
 800ec36:	e4a4      	b.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800ec38:	462e      	mov	r6, r5
 800ec3a:	e4df      	b.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ec3c:	462e      	mov	r6, r5
 800ec3e:	e4fb      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800ec40:	462e      	mov	r6, r5
 800ec42:	e611      	b.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x450>
 800ec44:	462e      	mov	r6, r5
 800ec46:	e59c      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800ec48:	462e      	mov	r6, r5
 800ec4a:	e65a      	b.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800ec4c:	462e      	mov	r6, r5
 800ec4e:	e66a      	b.n	800e926 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec50:	4949      	ldr	r1, [pc, #292]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ec52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ec54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec58:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ec5a:	2d00      	cmp	r5, #0
 800ec5c:	d0ab      	beq.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800ec5e:	462e      	mov	r6, r5
 800ec60:	e66d      	b.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec62:	4845      	ldr	r0, [pc, #276]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ec64:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ec66:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ec6a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ec6c:	2d00      	cmp	r5, #0
 800ec6e:	f47f aedd 	bne.w	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ec72:	e6e1      	b.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec74:	4940      	ldr	r1, [pc, #256]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ec76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ec78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec7c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ec7e:	2d00      	cmp	r5, #0
 800ec80:	d1e4      	bne.n	800ec4c <HAL_RCCEx_PeriphCLKConfig+0x834>
 800ec82:	e70a      	b.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ec84:	1d20      	adds	r0, r4, #4
 800ec86:	f7ff fad3 	bl	800e230 <RCCEx_PLL2_Config>
 800ec8a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ec8c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ec8e:	2d00      	cmp	r5, #0
 800ec90:	d1da      	bne.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800ec92:	e717      	b.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ec94:	2102      	movs	r1, #2
 800ec96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ec9a:	f7ff fb43 	bl	800e324 <RCCEx_PLL3_Config>
 800ec9e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eca0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	d1cc      	bne.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800eca6:	e5d7      	b.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eca8:	2102      	movs	r1, #2
 800ecaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ecae:	f7ff fb39 	bl	800e324 <RCCEx_PLL3_Config>
 800ecb2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ecb4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ecb6:	2d00      	cmp	r5, #0
 800ecb8:	d1a7      	bne.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800ecba:	e5ed      	b.n	800e898 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ecc2:	f7ff fb2f 	bl	800e324 <RCCEx_PLL3_Config>
 800ecc6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ecc8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ecca:	2d00      	cmp	r5, #0
 800eccc:	d1b4      	bne.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800ecce:	e48e      	b.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ecd6:	f7ff fb25 	bl	800e324 <RCCEx_PLL3_Config>
 800ecda:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ecdc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ecde:	2d00      	cmp	r5, #0
 800ece0:	d1ac      	bne.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0x824>
 800ece2:	e4a1      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ece4:	4924      	ldr	r1, [pc, #144]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ece6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ece8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ecec:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ecee:	2d00      	cmp	r5, #0
 800ecf0:	d19e      	bne.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800ecf2:	e6c0      	b.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	1d20      	adds	r0, r4, #4
 800ecf8:	f7ff fa9a 	bl	800e230 <RCCEx_PLL2_Config>
 800ecfc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ecfe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ed00:	2d00      	cmp	r5, #0
 800ed02:	d197      	bne.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800ed04:	e436      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ed06:	2102      	movs	r1, #2
 800ed08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ed0c:	f7ff fb0a 	bl	800e324 <RCCEx_PLL3_Config>
 800ed10:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ed12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ed14:	2d00      	cmp	r5, #0
 800ed16:	f47f af6e 	bne.w	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800ed1a:	e57d      	b.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed1c:	4916      	ldr	r1, [pc, #88]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ed1e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ed20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ed24:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ed26:	2d00      	cmp	r5, #0
 800ed28:	f47f acf5 	bne.w	800e716 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800ed2c:	e765      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ed2e:	2102      	movs	r1, #2
 800ed30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ed34:	f7ff faf6 	bl	800e324 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ed38:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ed3c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f43f adba 	beq.w	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 800ed44:	2601      	movs	r6, #1
 800ed46:	e5b7      	b.n	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ed48:	2102      	movs	r1, #2
 800ed4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ed4e:	f7ff fae9 	bl	800e324 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ed52:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ed56:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	f43f adbb 	beq.w	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800ed5e:	2601      	movs	r6, #1
 800ed60:	e5b8      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ed62:	2102      	movs	r1, #2
 800ed64:	3024      	adds	r0, #36	; 0x24
 800ed66:	f7ff fadd 	bl	800e324 <RCCEx_PLL3_Config>
 800ed6a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800ed6c:	2e00      	cmp	r6, #0
 800ed6e:	f43f ab6f 	beq.w	800e450 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	f7ff bb7a 	b.w	800e46c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ed78:	58024400 	.word	0x58024400
 800ed7c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ed80:	2100      	movs	r1, #0
 800ed82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ed86:	f7ff facd 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ed8a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ed8c:	4605      	mov	r5, r0
      break;
 800ed8e:	f7ff bbb0 	b.w	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ed92:	2100      	movs	r1, #0
 800ed94:	1d20      	adds	r0, r4, #4
 800ed96:	f7ff fa4b 	bl	800e230 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ed9a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ed9c:	4605      	mov	r5, r0
      break;
 800ed9e:	e656      	b.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800eda0:	2100      	movs	r1, #0
 800eda2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800eda6:	f7ff fabd 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800edaa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800edac:	4605      	mov	r5, r0
      break;
 800edae:	e64e      	b.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800edb0:	2100      	movs	r1, #0
 800edb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800edb6:	f7ff fab5 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800edba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800edbc:	4605      	mov	r5, r0
      break;
 800edbe:	f7ff bbf6 	b.w	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800edc2:	2100      	movs	r1, #0
 800edc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800edc8:	f7ff faac 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800edcc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800edce:	4605      	mov	r5, r0
      break;
 800edd0:	f7ff bb6e 	b.w	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edd4:	4932      	ldr	r1, [pc, #200]	; (800eea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 800edd6:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edd8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800edda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800edde:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800ede0:	e635      	b.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ede2:	2100      	movs	r1, #0
 800ede4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ede8:	f7ff fa9c 	bl	800e324 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800edec:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edee:	4605      	mov	r5, r0
      break;
 800edf0:	f7ff bba1 	b.w	800e536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800edf4:	2101      	movs	r1, #1
 800edf6:	1d20      	adds	r0, r4, #4
 800edf8:	f7ff fa1a 	bl	800e230 <RCCEx_PLL2_Config>
 800edfc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800edfe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ee00:	2d00      	cmp	r5, #0
 800ee02:	f47f acd6 	bne.w	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800ee06:	e702      	b.n	800ec0e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ee08:	2101      	movs	r1, #1
 800ee0a:	1d20      	adds	r0, r4, #4
 800ee0c:	f7ff fa10 	bl	800e230 <RCCEx_PLL2_Config>
 800ee10:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ee12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	f47f ace6 	bne.w	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ee1a:	e700      	b.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ee1c:	2101      	movs	r1, #1
 800ee1e:	1d20      	adds	r0, r4, #4
 800ee20:	f7ff fa06 	bl	800e230 <RCCEx_PLL2_Config>
 800ee24:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ee26:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ee28:	2d00      	cmp	r5, #0
 800ee2a:	f47f af0b 	bne.w	800ec44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ee2e:	e65c      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 800ee30:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ee32:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 800ee34:	4635      	mov	r5, r6
 800ee36:	e472      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800ee38:	2601      	movs	r6, #1
 800ee3a:	f7ff bb17 	b.w	800e46c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee3e:	4818      	ldr	r0, [pc, #96]	; (800eea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ee40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ee42:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ee46:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ee48:	f7ff bb09 	b.w	800e45e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800ee4c:	f7fb fe4e 	bl	800aaec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ee50:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800eea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 800ee54:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee56:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ee5a:	e004      	b.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee5c:	f7fb fe46 	bl	800aaec <HAL_GetTick>
 800ee60:	1bc0      	subs	r0, r0, r7
 800ee62:	4548      	cmp	r0, r9
 800ee64:	d8e4      	bhi.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ee66:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ee6a:	079b      	lsls	r3, r3, #30
 800ee6c:	d5f6      	bpl.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ee6e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ee72:	e670      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ee74:	480a      	ldr	r0, [pc, #40]	; (800eea0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ee76:	4a0b      	ldr	r2, [pc, #44]	; (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800ee78:	6901      	ldr	r1, [r0, #16]
 800ee7a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ee7e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800ee82:	430a      	orrs	r2, r1
 800ee84:	6102      	str	r2, [r0, #16]
 800ee86:	e671      	b.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	462e      	mov	r6, r5
 800ee8c:	e447      	b.n	800e71e <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ee8e:	2601      	movs	r6, #1
 800ee90:	4635      	mov	r5, r6
 800ee92:	e48f      	b.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 800ee94:	2601      	movs	r6, #1
 800ee96:	4635      	mov	r5, r6
 800ee98:	e43e      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ee9a:	2601      	movs	r6, #1
 800ee9c:	4635      	mov	r5, r6
 800ee9e:	e4a3      	b.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800eea0:	58024400 	.word	0x58024400
 800eea4:	00ffffcf 	.word	0x00ffffcf

0800eea8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800eea8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eeaa:	f7ff f8c5 	bl	800e038 <HAL_RCC_GetHCLKFreq>
 800eeae:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800eeb0:	4a05      	ldr	r2, [pc, #20]	; (800eec8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800eeb2:	6a1b      	ldr	r3, [r3, #32]
 800eeb4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800eeb8:	5cd3      	ldrb	r3, [r2, r3]
 800eeba:	f003 031f 	and.w	r3, r3, #31
}
 800eebe:	40d8      	lsrs	r0, r3
 800eec0:	bd08      	pop	{r3, pc}
 800eec2:	bf00      	nop
 800eec4:	58024400 	.word	0x58024400
 800eec8:	24009f80 	.word	0x24009f80

0800eecc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eecc:	4b4f      	ldr	r3, [pc, #316]	; (800f00c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800eece:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eed0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800eed2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eed4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800eed6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800eeda:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800eede:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800eee0:	d05c      	beq.n	800ef9c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800eee2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eee6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eeea:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800eeee:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800eef2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800eef4:	ee07 4a90 	vmov	s15, r4
 800eef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800eefc:	d003      	beq.n	800ef06 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800eefe:	2902      	cmp	r1, #2
 800ef00:	d075      	beq.n	800efee <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800ef02:	2900      	cmp	r1, #0
 800ef04:	d04f      	beq.n	800efa6 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ef06:	ee07 2a90 	vmov	s15, r2
 800ef0a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800f010 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800ef0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef14:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ef18:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f014 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ef1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef20:	ee06 3a90 	vmov	s13, r3
 800ef24:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ef28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ef2c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ef30:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ef34:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ef38:	4a34      	ldr	r2, [pc, #208]	; (800f00c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800ef3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ef3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ef40:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ef44:	ee07 3a10 	vmov	s14, r3
 800ef48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ef4c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ef4e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ef52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef5a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ef5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ef60:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ef64:	ee07 3a10 	vmov	s14, r3
 800ef68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ef70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef78:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ef7c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ef7e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ef82:	ee07 3a90 	vmov	s15, r3
 800ef86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef8a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ef8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef92:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ef96:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ef9a:	4770      	bx	lr
 800ef9c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ef9e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800efa2:	6082      	str	r2, [r0, #8]
}
 800efa4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efa6:	6819      	ldr	r1, [r3, #0]
 800efa8:	0689      	lsls	r1, r1, #26
 800efaa:	d527      	bpl.n	800effc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efac:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efae:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efb2:	4919      	ldr	r1, [pc, #100]	; (800f018 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800efb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efba:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efc2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800f014 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800efc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efca:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efcc:	ee06 3a90 	vmov	s13, r3
 800efd0:	ee05 1a90 	vmov	s11, r1
 800efd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800efd8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800efdc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800efe0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800efe4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800efe8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800efec:	e7a4      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efee:	ee07 2a90 	vmov	s15, r2
 800eff2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f01c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800eff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800effa:	e78a      	b.n	800ef12 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800effc:	ee07 2a90 	vmov	s15, r2
 800f000:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f020 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800f004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f008:	e783      	b.n	800ef12 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800f00a:	bf00      	nop
 800f00c:	58024400 	.word	0x58024400
 800f010:	4a742400 	.word	0x4a742400
 800f014:	39000000 	.word	0x39000000
 800f018:	03d09000 	.word	0x03d09000
 800f01c:	4af42400 	.word	0x4af42400
 800f020:	4c742400 	.word	0x4c742400

0800f024 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f024:	4b4f      	ldr	r3, [pc, #316]	; (800f164 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800f026:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f028:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f02a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f02c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800f02e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f032:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f036:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800f038:	d05c      	beq.n	800f0f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f03a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f03e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f042:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f046:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800f04a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f04c:	ee07 4a90 	vmov	s15, r4
 800f050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800f054:	d003      	beq.n	800f05e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800f056:	2902      	cmp	r1, #2
 800f058:	d075      	beq.n	800f146 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800f05a:	2900      	cmp	r1, #0
 800f05c:	d04f      	beq.n	800f0fe <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f05e:	ee07 2a90 	vmov	s15, r2
 800f062:	eddf 6a41 	vldr	s13, [pc, #260]	; 800f168 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800f066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800f070:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f16c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800f074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f078:	ee06 3a90 	vmov	s13, r3
 800f07c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f080:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f084:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f088:	eee7 6a25 	vfma.f32	s13, s14, s11
 800f08c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f090:	4a34      	ldr	r2, [pc, #208]	; (800f164 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800f092:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f096:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f098:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f09c:	ee07 3a10 	vmov	s14, r3
 800f0a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800f0a4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f0a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0b2:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f0b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f0b8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f0bc:	ee07 3a10 	vmov	s14, r3
 800f0c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f0c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0d0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f0d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f0d6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f0da:	ee07 3a90 	vmov	s15, r3
 800f0de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f0ee:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800f0f2:	4770      	bx	lr
 800f0f4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0f6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0fa:	6082      	str	r2, [r0, #8]
}
 800f0fc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0fe:	6819      	ldr	r1, [r3, #0]
 800f100:	0689      	lsls	r1, r1, #26
 800f102:	d527      	bpl.n	800f154 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f104:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f106:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f10a:	4919      	ldr	r1, [pc, #100]	; (800f170 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f10c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f112:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f11a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800f16c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800f11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f122:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f124:	ee06 3a90 	vmov	s13, r3
 800f128:	ee05 1a90 	vmov	s11, r1
 800f12c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f130:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f134:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f138:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800f13c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800f140:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f144:	e7a4      	b.n	800f090 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f146:	ee07 2a90 	vmov	s15, r2
 800f14a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f174 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800f14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f152:	e78a      	b.n	800f06a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f154:	ee07 2a90 	vmov	s15, r2
 800f158:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f178 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800f15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f160:	e783      	b.n	800f06a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800f162:	bf00      	nop
 800f164:	58024400 	.word	0x58024400
 800f168:	4a742400 	.word	0x4a742400
 800f16c:	39000000 	.word	0x39000000
 800f170:	03d09000 	.word	0x03d09000
 800f174:	4af42400 	.word	0x4af42400
 800f178:	4c742400 	.word	0x4c742400

0800f17c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d036      	beq.n	800f1ee <HAL_RNG_Init+0x72>
{
 800f180:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f182:	7a43      	ldrb	r3, [r0, #9]
 800f184:	4604      	mov	r4, r0
 800f186:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f18a:	b333      	cbz	r3, 800f1da <HAL_RNG_Init+0x5e>
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f18c:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f18e:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f190:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f192:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	f022 0220 	bic.w	r2, r2, #32
 800f19a:	430a      	orrs	r2, r1
 800f19c:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	f042 0204 	orr.w	r2, r2, #4
 800f1a4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	065b      	lsls	r3, r3, #25
 800f1aa:	d503      	bpl.n	800f1b4 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f1ac:	2304      	movs	r3, #4
    return HAL_ERROR;
 800f1ae:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800f1b0:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800f1b4:	f7fb fc9a 	bl	800aaec <HAL_GetTick>
 800f1b8:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f1ba:	e004      	b.n	800f1c6 <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f1bc:	f7fb fc96 	bl	800aaec <HAL_GetTick>
 800f1c0:	1b43      	subs	r3, r0, r5
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d80d      	bhi.n	800f1e2 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f013 0304 	ands.w	r3, r3, #4
 800f1ce:	d1f5      	bne.n	800f1bc <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 800f1d0:	2201      	movs	r2, #1
  return HAL_OK;
 800f1d2:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800f1d4:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f1d6:	60e3      	str	r3, [r4, #12]
}
 800f1d8:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800f1da:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800f1dc:	f7fb fa64 	bl	800a6a8 <HAL_RNG_MspInit>
 800f1e0:	e7d4      	b.n	800f18c <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 800f1e2:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f1e4:	2302      	movs	r3, #2
      return HAL_ERROR;
 800f1e6:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800f1e8:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f1ea:	60e3      	str	r3, [r4, #12]
}
 800f1ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f1ee:	2001      	movs	r0, #1
}
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop

0800f1f4 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop

0800f1f8 <HAL_RNG_ErrorCallback>:
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop

0800f1fc <HAL_RNG_IRQHandler>:
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800f1fc:	6803      	ldr	r3, [r0, #0]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	0692      	lsls	r2, r2, #26
{
 800f202:	b510      	push	{r4, lr}
 800f204:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800f206:	d416      	bmi.n	800f236 <HAL_RNG_IRQHandler+0x3a>
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	0650      	lsls	r0, r2, #25
 800f20c:	d506      	bpl.n	800f21c <HAL_RNG_IRQHandler+0x20>
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	0751      	lsls	r1, r2, #29
 800f212:	d424      	bmi.n	800f25e <HAL_RNG_IRQHandler+0x62>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f21a:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	07d2      	lsls	r2, r2, #31
 800f220:	d508      	bpl.n	800f234 <HAL_RNG_IRQHandler+0x38>
    __HAL_RNG_DISABLE_IT(hrng);
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	f022 0208 	bic.w	r2, r2, #8
 800f228:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 800f22a:	6899      	ldr	r1, [r3, #8]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 800f22c:	7a63      	ldrb	r3, [r4, #9]
    hrng->RandomNumber = hrng->Instance->DR;
 800f22e:	6121      	str	r1, [r4, #16]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 800f230:	2b04      	cmp	r3, #4
 800f232:	d10c      	bne.n	800f24e <HAL_RNG_IRQHandler+0x52>
}
 800f234:	bd10      	pop	{r4, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800f236:	2310      	movs	r3, #16
 800f238:	60c3      	str	r3, [r0, #12]
    hrng->State = HAL_RNG_STATE_ERROR;
 800f23a:	2304      	movs	r3, #4
    HAL_RNG_ErrorCallback(hrng);
 800f23c:	4620      	mov	r0, r4
    hrng->State = HAL_RNG_STATE_ERROR;
 800f23e:	7263      	strb	r3, [r4, #9]
    HAL_RNG_ErrorCallback(hrng);
 800f240:	f7ff ffda 	bl	800f1f8 <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800f24a:	605a      	str	r2, [r3, #4]
}
 800f24c:	bd10      	pop	{r4, pc}
      hrng->State = HAL_RNG_STATE_READY;
 800f24e:	2201      	movs	r2, #1
      __HAL_UNLOCK(hrng);
 800f250:	2300      	movs	r3, #0
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800f252:	4620      	mov	r0, r4
      hrng->State = HAL_RNG_STATE_READY;
 800f254:	7262      	strb	r2, [r4, #9]
      __HAL_UNLOCK(hrng);
 800f256:	7223      	strb	r3, [r4, #8]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800f258:	f7ff ffcc 	bl	800f1f4 <HAL_RNG_ReadyDataCallback>
}
 800f25c:	bd10      	pop	{r4, pc}
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f25e:	2208      	movs	r2, #8
 800f260:	60e2      	str	r2, [r4, #12]
      __HAL_RNG_DISABLE_IT(hrng);
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	f022 0208 	bic.w	r2, r2, #8
 800f268:	601a      	str	r2, [r3, #0]
  if (rngclockerror == 1U)
 800f26a:	e7e6      	b.n	800f23a <HAL_RNG_IRQHandler+0x3e>

0800f26c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop

0800f270 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f270:	2800      	cmp	r0, #0
 800f272:	f000 80a5 	beq.w	800f3c0 <HAL_TIM_Base_Init+0x150>
{
 800f276:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800f278:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f27c:	4604      	mov	r4, r0
 800f27e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f282:	2b00      	cmp	r3, #0
 800f284:	d076      	beq.n	800f374 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f286:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f288:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f28a:	494e      	ldr	r1, [pc, #312]	; (800f3c4 <HAL_TIM_Base_Init+0x154>)
 800f28c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800f290:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f294:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800f298:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f29a:	fab1 f181 	clz	r1, r1
 800f29e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800f2a2:	d027      	beq.n	800f2f4 <HAL_TIM_Base_Init+0x84>
 800f2a4:	bb31      	cbnz	r1, 800f2f4 <HAL_TIM_Base_Init+0x84>
 800f2a6:	4848      	ldr	r0, [pc, #288]	; (800f3c8 <HAL_TIM_Base_Init+0x158>)
 800f2a8:	4d48      	ldr	r5, [pc, #288]	; (800f3cc <HAL_TIM_Base_Init+0x15c>)
 800f2aa:	4282      	cmp	r2, r0
 800f2ac:	d067      	beq.n	800f37e <HAL_TIM_Base_Init+0x10e>
 800f2ae:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f2b2:	4282      	cmp	r2, r0
 800f2b4:	d063      	beq.n	800f37e <HAL_TIM_Base_Init+0x10e>
 800f2b6:	1b55      	subs	r5, r2, r5
 800f2b8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f2bc:	fab5 f585 	clz	r5, r5
 800f2c0:	4282      	cmp	r2, r0
 800f2c2:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800f2c6:	d063      	beq.n	800f390 <HAL_TIM_Base_Init+0x120>
 800f2c8:	2d00      	cmp	r5, #0
 800f2ca:	d161      	bne.n	800f390 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2cc:	4840      	ldr	r0, [pc, #256]	; (800f3d0 <HAL_TIM_Base_Init+0x160>)
 800f2ce:	4941      	ldr	r1, [pc, #260]	; (800f3d4 <HAL_TIM_Base_Init+0x164>)
 800f2d0:	428a      	cmp	r2, r1
 800f2d2:	bf18      	it	ne
 800f2d4:	4282      	cmpne	r2, r0
 800f2d6:	d065      	beq.n	800f3a4 <HAL_TIM_Base_Init+0x134>
 800f2d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2dc:	428a      	cmp	r2, r1
 800f2de:	d061      	beq.n	800f3a4 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f2e0:	69a0      	ldr	r0, [r4, #24]
 800f2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f2e6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f2e8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800f2ea:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f2ec:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f2ee:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f2f0:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f2f2:	e023      	b.n	800f33c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2f4:	4d35      	ldr	r5, [pc, #212]	; (800f3cc <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f2fa:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2fc:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800f2fe:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f300:	fab5 f585 	clz	r5, r5
 800f304:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f306:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800f308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f30c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f30e:	69a0      	ldr	r0, [r4, #24]
 800f310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f314:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800f316:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f318:	68e3      	ldr	r3, [r4, #12]
 800f31a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f31c:	6863      	ldr	r3, [r4, #4]
 800f31e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f320:	b951      	cbnz	r1, 800f338 <HAL_TIM_Base_Init+0xc8>
 800f322:	b94d      	cbnz	r5, 800f338 <HAL_TIM_Base_Init+0xc8>
 800f324:	492a      	ldr	r1, [pc, #168]	; (800f3d0 <HAL_TIM_Base_Init+0x160>)
 800f326:	4b2b      	ldr	r3, [pc, #172]	; (800f3d4 <HAL_TIM_Base_Init+0x164>)
 800f328:	429a      	cmp	r2, r3
 800f32a:	bf18      	it	ne
 800f32c:	428a      	cmpne	r2, r1
 800f32e:	d003      	beq.n	800f338 <HAL_TIM_Base_Init+0xc8>
 800f330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f334:	429a      	cmp	r2, r3
 800f336:	d101      	bne.n	800f33c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f338:	6963      	ldr	r3, [r4, #20]
 800f33a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f33c:	2301      	movs	r3, #1
  return HAL_OK;
 800f33e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800f340:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f342:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f34a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f34e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f352:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f35a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f35e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f366:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f36a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f36e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f372:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800f374:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f378:	f7ff ff78 	bl	800f26c <HAL_TIM_Base_MspInit>
 800f37c:	e783      	b.n	800f286 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f37e:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f384:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f386:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800f38a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f38c:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f38e:	e7ba      	b.n	800f306 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800f390:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f396:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f398:	480f      	ldr	r0, [pc, #60]	; (800f3d8 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f39a:	4282      	cmp	r2, r0
 800f39c:	d0b3      	beq.n	800f306 <HAL_TIM_Base_Init+0x96>
 800f39e:	2d00      	cmp	r5, #0
 800f3a0:	d1b1      	bne.n	800f306 <HAL_TIM_Base_Init+0x96>
 800f3a2:	e793      	b.n	800f2cc <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3a4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3aa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3ac:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3ae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3b4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800f3b6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800f3b8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3ba:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f3bc:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3be:	e7b1      	b.n	800f324 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800f3c0:	2001      	movs	r0, #1
}
 800f3c2:	4770      	bx	lr
 800f3c4:	40010000 	.word	0x40010000
 800f3c8:	40000400 	.word	0x40000400
 800f3cc:	40010400 	.word	0x40010400
 800f3d0:	40014000 	.word	0x40014000
 800f3d4:	40014400 	.word	0x40014400
 800f3d8:	40000c00 	.word	0x40000c00

0800f3dc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800f3dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d13c      	bne.n	800f45e <HAL_TIM_Base_Start_IT+0x82>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f3e4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f3e6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3e8:	4b22      	ldr	r3, [pc, #136]	; (800f474 <HAL_TIM_Base_Start_IT+0x98>)
 800f3ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f3ee:	bf18      	it	ne
 800f3f0:	429a      	cmpne	r2, r3
{
 800f3f2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f4:	bf0c      	ite	eq
 800f3f6:	2301      	moveq	r3, #1
 800f3f8:	2300      	movne	r3, #0
 800f3fa:	4d1f      	ldr	r5, [pc, #124]	; (800f478 <HAL_TIM_Base_Start_IT+0x9c>)
 800f3fc:	4c1f      	ldr	r4, [pc, #124]	; (800f47c <HAL_TIM_Base_Start_IT+0xa0>)
 800f3fe:	42aa      	cmp	r2, r5
 800f400:	bf08      	it	eq
 800f402:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f406:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f40a:	481d      	ldr	r0, [pc, #116]	; (800f480 <HAL_TIM_Base_Start_IT+0xa4>)
 800f40c:	42a2      	cmp	r2, r4
 800f40e:	bf08      	it	eq
 800f410:	f043 0301 	orreq.w	r3, r3, #1
 800f414:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f418:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f41a:	42a2      	cmp	r2, r4
 800f41c:	bf08      	it	eq
 800f41e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f422:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f426:	4282      	cmp	r2, r0
 800f428:	bf08      	it	eq
 800f42a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f42e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f430:	b933      	cbnz	r3, 800f440 <HAL_TIM_Base_Start_IT+0x64>
 800f432:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f436:	1a10      	subs	r0, r2, r0
 800f438:	fab0 f080 	clz	r0, r0
 800f43c:	0940      	lsrs	r0, r0, #5
 800f43e:	b198      	cbz	r0, 800f468 <HAL_TIM_Base_Start_IT+0x8c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f440:	6891      	ldr	r1, [r2, #8]
 800f442:	4b10      	ldr	r3, [pc, #64]	; (800f484 <HAL_TIM_Base_Start_IT+0xa8>)
 800f444:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f446:	2b06      	cmp	r3, #6
 800f448:	d00b      	beq.n	800f462 <HAL_TIM_Base_Start_IT+0x86>
 800f44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f44e:	d008      	beq.n	800f462 <HAL_TIM_Base_Start_IT+0x86>
      __HAL_TIM_ENABLE(htim);
 800f450:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f452:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f454:	f043 0301 	orr.w	r3, r3, #1
 800f458:	6013      	str	r3, [r2, #0]
}
 800f45a:	bc30      	pop	{r4, r5}
 800f45c:	4770      	bx	lr
    return HAL_ERROR;
 800f45e:	2001      	movs	r0, #1
}
 800f460:	4770      	bx	lr
  return HAL_OK;
 800f462:	2000      	movs	r0, #0
}
 800f464:	bc30      	pop	{r4, r5}
 800f466:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800f468:	6813      	ldr	r3, [r2, #0]
 800f46a:	f043 0301 	orr.w	r3, r3, #1
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e7f3      	b.n	800f45a <HAL_TIM_Base_Start_IT+0x7e>
 800f472:	bf00      	nop
 800f474:	40010000 	.word	0x40010000
 800f478:	40000400 	.word	0x40000400
 800f47c:	40000800 	.word	0x40000800
 800f480:	40010400 	.word	0x40010400
 800f484:	00010007 	.word	0x00010007

0800f488 <HAL_TIM_OC_DelayElapsedCallback>:
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop

0800f48c <HAL_TIM_IC_CaptureCallback>:
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop

0800f490 <HAL_TIM_PWM_PulseFinishedCallback>:
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop

0800f494 <HAL_TIM_TriggerCallback>:
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop

0800f498 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f498:	6803      	ldr	r3, [r0, #0]
 800f49a:	691a      	ldr	r2, [r3, #16]
 800f49c:	0791      	lsls	r1, r2, #30
{
 800f49e:	b510      	push	{r4, lr}
 800f4a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f4a2:	d502      	bpl.n	800f4aa <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4a4:	68da      	ldr	r2, [r3, #12]
 800f4a6:	0792      	lsls	r2, r2, #30
 800f4a8:	d468      	bmi.n	800f57c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4aa:	691a      	ldr	r2, [r3, #16]
 800f4ac:	0752      	lsls	r2, r2, #29
 800f4ae:	d502      	bpl.n	800f4b6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4b0:	68da      	ldr	r2, [r3, #12]
 800f4b2:	0750      	lsls	r0, r2, #29
 800f4b4:	d44f      	bmi.n	800f556 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f4b6:	691a      	ldr	r2, [r3, #16]
 800f4b8:	0711      	lsls	r1, r2, #28
 800f4ba:	d502      	bpl.n	800f4c2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f4bc:	68da      	ldr	r2, [r3, #12]
 800f4be:	0712      	lsls	r2, r2, #28
 800f4c0:	d437      	bmi.n	800f532 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f4c2:	691a      	ldr	r2, [r3, #16]
 800f4c4:	06d0      	lsls	r0, r2, #27
 800f4c6:	d502      	bpl.n	800f4ce <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	06d1      	lsls	r1, r2, #27
 800f4cc:	d41e      	bmi.n	800f50c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f4ce:	691a      	ldr	r2, [r3, #16]
 800f4d0:	07d2      	lsls	r2, r2, #31
 800f4d2:	d502      	bpl.n	800f4da <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f4d4:	68da      	ldr	r2, [r3, #12]
 800f4d6:	07d0      	lsls	r0, r2, #31
 800f4d8:	d469      	bmi.n	800f5ae <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	0611      	lsls	r1, r2, #24
 800f4de:	d502      	bpl.n	800f4e6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f4e0:	68da      	ldr	r2, [r3, #12]
 800f4e2:	0612      	lsls	r2, r2, #24
 800f4e4:	d46b      	bmi.n	800f5be <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f4e6:	691a      	ldr	r2, [r3, #16]
 800f4e8:	05d0      	lsls	r0, r2, #23
 800f4ea:	d502      	bpl.n	800f4f2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f4ec:	68da      	ldr	r2, [r3, #12]
 800f4ee:	0611      	lsls	r1, r2, #24
 800f4f0:	d46d      	bmi.n	800f5ce <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f4f2:	691a      	ldr	r2, [r3, #16]
 800f4f4:	0652      	lsls	r2, r2, #25
 800f4f6:	d502      	bpl.n	800f4fe <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4f8:	68da      	ldr	r2, [r3, #12]
 800f4fa:	0650      	lsls	r0, r2, #25
 800f4fc:	d46f      	bmi.n	800f5de <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4fe:	691a      	ldr	r2, [r3, #16]
 800f500:	0691      	lsls	r1, r2, #26
 800f502:	d502      	bpl.n	800f50a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f504:	68da      	ldr	r2, [r3, #12]
 800f506:	0692      	lsls	r2, r2, #26
 800f508:	d449      	bmi.n	800f59e <HAL_TIM_IRQHandler+0x106>
}
 800f50a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f50c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f510:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f512:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f514:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f516:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f518:	69db      	ldr	r3, [r3, #28]
 800f51a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f51e:	d16f      	bne.n	800f600 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f520:	f7ff ffb2 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f524:	4620      	mov	r0, r4
 800f526:	f7ff ffb3 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f52a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f52c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f52e:	7722      	strb	r2, [r4, #28]
 800f530:	e7cd      	b.n	800f4ce <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f532:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f536:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f538:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f53a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f53c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	079b      	lsls	r3, r3, #30
 800f542:	d15a      	bne.n	800f5fa <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f544:	f7ff ffa0 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f548:	4620      	mov	r0, r4
 800f54a:	f7ff ffa1 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f54e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f550:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f552:	7722      	strb	r2, [r4, #28]
 800f554:	e7b5      	b.n	800f4c2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f556:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f55a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800f55c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f55e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f560:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f562:	699b      	ldr	r3, [r3, #24]
 800f564:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f568:	d144      	bne.n	800f5f4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f56a:	f7ff ff8d 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f56e:	4620      	mov	r0, r4
 800f570:	f7ff ff8e 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f574:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f576:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f578:	7722      	strb	r2, [r4, #28]
 800f57a:	e79c      	b.n	800f4b6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f57c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f580:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f582:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f584:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f586:	699b      	ldr	r3, [r3, #24]
 800f588:	0799      	lsls	r1, r3, #30
 800f58a:	d130      	bne.n	800f5ee <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f58c:	f7ff ff7c 	bl	800f488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff ff7d 	bl	800f490 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f596:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f598:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f59a:	7722      	strb	r2, [r4, #28]
 800f59c:	e785      	b.n	800f4aa <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f59e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800f5a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f5a4:	611a      	str	r2, [r3, #16]
}
 800f5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800f5aa:	f000 b82d 	b.w	800f608 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5ae:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5b6:	f7fb f841 	bl	800a63c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	e78d      	b.n	800f4da <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5be:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800f5c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f5c6:	f000 f821 	bl	800f60c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	e78b      	b.n	800f4e6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800f5d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f5d6:	f000 f81b 	bl	800f610 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	e789      	b.n	800f4f2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f5de:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800f5e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f5e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f5e6:	f7ff ff55 	bl	800f494 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	e787      	b.n	800f4fe <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800f5ee:	f7ff ff4d 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800f5f2:	e7d0      	b.n	800f596 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800f5f4:	f7ff ff4a 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800f5f8:	e7bc      	b.n	800f574 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800f5fa:	f7ff ff47 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800f5fe:	e7a6      	b.n	800f54e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800f600:	f7ff ff44 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800f604:	e791      	b.n	800f52a <HAL_TIM_IRQHandler+0x92>
 800f606:	bf00      	nop

0800f608 <HAL_TIMEx_CommutCallback>:
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop

0800f60c <HAL_TIMEx_BreakCallback>:
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop

0800f610 <HAL_TIMEx_Break2Callback>:
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop

0800f614 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f614:	b1d0      	cbz	r0, 800f64c <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800f616:	2224      	movs	r2, #36	; 0x24
{
 800f618:	b538      	push	{r3, r4, r5, lr}

  __HAL_UART_DISABLE(huart);
 800f61a:	6803      	ldr	r3, [r0, #0]

  huart->Instance->CR1 = 0x0U;
 800f61c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800f61e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800f622:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	f022 0201 	bic.w	r2, r2, #1
 800f62a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800f62c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f62e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f630:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f632:	f7fb f901 	bl	800a838 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f636:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800f63a:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800f63c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800f640:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 800f644:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f648:	66e5      	str	r5, [r4, #108]	; 0x6c
}
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f64c:	2001      	movs	r0, #1
}
 800f64e:	4770      	bx	lr

0800f650 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f650:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800f654:	2b20      	cmp	r3, #32
 800f656:	d143      	bne.n	800f6e0 <HAL_UART_Receive_IT+0x90>
  {
    if ((pData == NULL) || (Size == 0U))
 800f658:	2900      	cmp	r1, #0
 800f65a:	d03f      	beq.n	800f6dc <HAL_UART_Receive_IT+0x8c>
 800f65c:	fab2 f382 	clz	r3, r2
 800f660:	095b      	lsrs	r3, r3, #5
 800f662:	2a00      	cmp	r2, #0
 800f664:	d03a      	beq.n	800f6dc <HAL_UART_Receive_IT+0x8c>
{
 800f666:	b430      	push	{r4, r5}
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800f668:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 800f66c:	2c01      	cmp	r4, #1
 800f66e:	d07d      	beq.n	800f76c <HAL_UART_Receive_IT+0x11c>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f670:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800f672:	2501      	movs	r5, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f674:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f676:	4b47      	ldr	r3, [pc, #284]	; (800f794 <HAL_UART_Receive_IT+0x144>)
    __HAL_LOCK(huart);
 800f678:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f67c:	429c      	cmp	r4, r3
 800f67e:	d002      	beq.n	800f686 <HAL_UART_Receive_IT+0x36>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f680:	6863      	ldr	r3, [r4, #4]
 800f682:	021b      	lsls	r3, r3, #8
 800f684:	d42e      	bmi.n	800f6e4 <HAL_UART_Receive_IT+0x94>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f686:	6883      	ldr	r3, [r0, #8]
  huart->RxISR       = NULL;
 800f688:	2500      	movs	r5, #0
  huart->pRxBuffPtr  = pData;
 800f68a:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 800f68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 800f690:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f694:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f698:	6705      	str	r5, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800f69a:	d02f      	beq.n	800f6fc <HAL_UART_Receive_IT+0xac>
 800f69c:	b33b      	cbz	r3, 800f6ee <HAL_UART_Receive_IT+0x9e>
 800f69e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6a2:	d06f      	beq.n	800f784 <HAL_UART_Receive_IT+0x134>
 800f6a4:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6a8:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6aa:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6ac:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f6b0:	6e41      	ldr	r1, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6b6:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f6b8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6bc:	f043 0301 	orr.w	r3, r3, #1
 800f6c0:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f6c2:	d040      	beq.n	800f746 <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f6c4:	4a34      	ldr	r2, [pc, #208]	; (800f798 <HAL_UART_Receive_IT+0x148>)
    }

    __HAL_UNLOCK(huart);
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	6702      	str	r2, [r0, #112]	; 0x70
 800f6ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return (UART_Start_Receive_IT(huart, pData, Size));
 800f6ce:	4618      	mov	r0, r3

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f6d0:	6822      	ldr	r2, [r4, #0]
 800f6d2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f6d6:	6022      	str	r2, [r4, #0]
}
 800f6d8:	bc30      	pop	{r4, r5}
 800f6da:	4770      	bx	lr
      return HAL_ERROR;
 800f6dc:	2001      	movs	r0, #1
}
 800f6de:	4770      	bx	lr
    return HAL_BUSY;
 800f6e0:	2002      	movs	r0, #2
 800f6e2:	4770      	bx	lr
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f6ea:	6023      	str	r3, [r4, #0]
 800f6ec:	e7cb      	b.n	800f686 <HAL_UART_Receive_IT+0x36>
  UART_MASK_COMPUTATION(huart);
 800f6ee:	6903      	ldr	r3, [r0, #16]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d13d      	bne.n	800f770 <HAL_UART_Receive_IT+0x120>
 800f6f4:	23ff      	movs	r3, #255	; 0xff
 800f6f6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800f6fa:	e7d5      	b.n	800f6a8 <HAL_UART_Receive_IT+0x58>
 800f6fc:	6903      	ldr	r3, [r0, #16]
 800f6fe:	b993      	cbnz	r3, 800f726 <HAL_UART_Receive_IT+0xd6>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f700:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f704:	2522      	movs	r5, #34	; 0x22
 800f706:	f240 13ff 	movw	r3, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f70a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f70c:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
 800f710:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f714:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f718:	68a3      	ldr	r3, [r4, #8]
 800f71a:	f043 0301 	orr.w	r3, r3, #1
 800f71e:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f720:	d02a      	beq.n	800f778 <HAL_UART_Receive_IT+0x128>
      huart->RxISR = UART_RxISR_16BIT;
 800f722:	4a1e      	ldr	r2, [pc, #120]	; (800f79c <HAL_UART_Receive_IT+0x14c>)
 800f724:	e7cf      	b.n	800f6c6 <HAL_UART_Receive_IT+0x76>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f726:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
 800f72a:	23ff      	movs	r3, #255	; 0xff
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f72c:	2522      	movs	r5, #34	; 0x22
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f72e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800f730:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f734:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f738:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	f043 0301 	orr.w	r3, r3, #1
 800f742:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f744:	d1be      	bne.n	800f6c4 <HAL_UART_Receive_IT+0x74>
 800f746:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d8ba      	bhi.n	800f6c4 <HAL_UART_Receive_IT+0x74>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f74e:	4a14      	ldr	r2, [pc, #80]	; (800f7a0 <HAL_UART_Receive_IT+0x150>)
    __HAL_UNLOCK(huart);
 800f750:	2300      	movs	r3, #0
 800f752:	6702      	str	r2, [r0, #112]	; 0x70
 800f754:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return (UART_Start_Receive_IT(huart, pData, Size));
 800f758:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f75a:	6822      	ldr	r2, [r4, #0]
 800f75c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f760:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f768:	60a3      	str	r3, [r4, #8]
 800f76a:	e7b5      	b.n	800f6d8 <HAL_UART_Receive_IT+0x88>
    return HAL_BUSY;
 800f76c:	2002      	movs	r0, #2
 800f76e:	e7b3      	b.n	800f6d8 <HAL_UART_Receive_IT+0x88>
  UART_MASK_COMPUTATION(huart);
 800f770:	237f      	movs	r3, #127	; 0x7f
 800f772:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800f776:	e797      	b.n	800f6a8 <HAL_UART_Receive_IT+0x58>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f778:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d8d0      	bhi.n	800f722 <HAL_UART_Receive_IT+0xd2>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f780:	4a08      	ldr	r2, [pc, #32]	; (800f7a4 <HAL_UART_Receive_IT+0x154>)
 800f782:	e7e5      	b.n	800f750 <HAL_UART_Receive_IT+0x100>
  UART_MASK_COMPUTATION(huart);
 800f784:	6903      	ldr	r3, [r0, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0f2      	beq.n	800f770 <HAL_UART_Receive_IT+0x120>
 800f78a:	233f      	movs	r3, #63	; 0x3f
 800f78c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800f790:	e78a      	b.n	800f6a8 <HAL_UART_Receive_IT+0x58>
 800f792:	bf00      	nop
 800f794:	58000c00 	.word	0x58000c00
 800f798:	0800fbdd 	.word	0x0800fbdd
 800f79c:	0800fc5d 	.word	0x0800fc5d
 800f7a0:	0800fcd9 	.word	0x0800fcd9
 800f7a4:	0800fe3d 	.word	0x0800fe3d

0800f7a8 <HAL_UART_Abort>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800f7a8:	6803      	ldr	r3, [r0, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f7aa:	4a2e      	ldr	r2, [pc, #184]	; (800f864 <HAL_UART_Abort+0xbc>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800f7ac:	6819      	ldr	r1, [r3, #0]
 800f7ae:	f421 71f0 	bic.w	r1, r1, #480	; 0x1e0
{
 800f7b2:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800f7b4:	6019      	str	r1, [r3, #0]
{
 800f7b6:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f7b8:	6899      	ldr	r1, [r3, #8]
 800f7ba:	400a      	ands	r2, r1
 800f7bc:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	d103      	bne.n	800f7cc <HAL_UART_Abort+0x24>
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	f022 0210 	bic.w	r2, r2, #16
 800f7ca:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f7cc:	689a      	ldr	r2, [r3, #8]
 800f7ce:	0611      	lsls	r1, r2, #24
 800f7d0:	d50b      	bpl.n	800f7ea <HAL_UART_Abort+0x42>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7d2:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f7d4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f7da:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f7dc:	b128      	cbz	r0, 800f7ea <HAL_UART_Abort+0x42>
      huart->hdmatx->XferAbortCallback = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f7e2:	f7fc f96d 	bl	800bac0 <HAL_DMA_Abort>
 800f7e6:	bb68      	cbnz	r0, 800f844 <HAL_UART_Abort+0x9c>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	689a      	ldr	r2, [r3, #8]
 800f7ec:	0652      	lsls	r2, r2, #25
 800f7ee:	d50b      	bpl.n	800f808 <HAL_UART_Abort+0x60>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7f0:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f7f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7f8:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f7fa:	b128      	cbz	r0, 800f808 <HAL_UART_Abort+0x60>
      huart->hdmarx->XferAbortCallback = NULL;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f800:	f7fc f95e 	bl	800bac0 <HAL_DMA_Abort>
 800f804:	bb40      	cbnz	r0, 800f858 <HAL_UART_Abort+0xb0>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f806:	6823      	ldr	r3, [r4, #0]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f808:	6e61      	ldr	r1, [r4, #100]	; 0x64
  huart->TxXferCount = 0U;
 800f80a:	2200      	movs	r2, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f80c:	200f      	movs	r0, #15
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f80e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  huart->TxXferCount = 0U;
 800f812:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
  huart->RxXferCount = 0U;
 800f816:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f81a:	6218      	str	r0, [r3, #32]
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f81c:	d103      	bne.n	800f826 <HAL_UART_Abort+0x7e>
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f81e:	699a      	ldr	r2, [r3, #24]
 800f820:	f042 0210 	orr.w	r2, r2, #16
 800f824:	619a      	str	r2, [r3, #24]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f826:	6999      	ldr	r1, [r3, #24]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f828:	2200      	movs	r2, #0
  huart->gState  = HAL_UART_STATE_READY;
 800f82a:	2020      	movs	r0, #32
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f82c:	f041 0108 	orr.w	r1, r1, #8
 800f830:	6199      	str	r1, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f832:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f836:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  return HAL_OK;
 800f83a:	4610      	mov	r0, r2
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f83c:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f83e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 800f842:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f844:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f846:	f7fc fecd 	bl	800c5e4 <HAL_DMA_GetError>
 800f84a:	2820      	cmp	r0, #32
 800f84c:	d1cc      	bne.n	800f7e8 <HAL_UART_Abort+0x40>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f84e:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800f850:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f852:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800f856:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f858:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f85a:	f7fc fec3 	bl	800c5e4 <HAL_DMA_GetError>
 800f85e:	2820      	cmp	r0, #32
 800f860:	d1d1      	bne.n	800f806 <HAL_UART_Abort+0x5e>
 800f862:	e7f4      	b.n	800f84e <HAL_UART_Abort+0xa6>
 800f864:	ef7ffffe 	.word	0xef7ffffe

0800f868 <HAL_UART_RxHalfCpltCallback>:
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop

0800f86c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f86c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f86e:	6803      	ldr	r3, [r0, #0]
{
 800f870:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f872:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f876:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	0612      	lsls	r2, r2, #24
 800f87e:	d501      	bpl.n	800f884 <UART_DMAError+0x18>
 800f880:	2c21      	cmp	r4, #33	; 0x21
 800f882:	d026      	beq.n	800f8d2 <UART_DMAError+0x66>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f884:	689a      	ldr	r2, [r3, #8]
 800f886:	0652      	lsls	r2, r2, #25
 800f888:	d501      	bpl.n	800f88e <UART_DMAError+0x22>
 800f88a:	2922      	cmp	r1, #34	; 0x22
 800f88c:	d008      	beq.n	800f8a0 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f88e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800f892:	f043 0310 	orr.w	r3, r3, #16
 800f896:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f89a:	f010 ff29 	bl	80206f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f89e:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800f8a0:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8a2:	4a13      	ldr	r2, [pc, #76]	; (800f8f0 <UART_DMAError+0x84>)
    huart->RxXferCount = 0U;
 800f8a4:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8a8:	6819      	ldr	r1, [r3, #0]
 800f8aa:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800f8ae:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8b0:	6899      	ldr	r1, [r3, #8]
 800f8b2:	400a      	ands	r2, r1
 800f8b4:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8b6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800f8b8:	2a01      	cmp	r2, #1
 800f8ba:	d103      	bne.n	800f8c4 <UART_DMAError+0x58>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	f022 0210 	bic.w	r2, r2, #16
 800f8c2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8c4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800f8c6:	2220      	movs	r2, #32
  huart->RxISR = NULL;
 800f8c8:	6703      	str	r3, [r0, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800f8ca:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ce:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800f8d0:	e7dd      	b.n	800f88e <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800f8d2:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800f8d4:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800f8d6:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f8e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f8e2:	689a      	ldr	r2, [r3, #8]
 800f8e4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f8e8:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800f8ea:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
}
 800f8ee:	e7c9      	b.n	800f884 <UART_DMAError+0x18>
 800f8f0:	effffffe 	.word	0xeffffffe

0800f8f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f8fe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f902:	f010 fef5 	bl	80206f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f906:	bd08      	pop	{r3, pc}

0800f908 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f908:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f90a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f90e:	69d3      	ldr	r3, [r2, #28]
  if (errorflags == 0U)
 800f910:	ea13 0f0c 	tst.w	r3, ip
{
 800f914:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f916:	6815      	ldr	r5, [r2, #0]
{
 800f918:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f91a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800f91c:	f000 80da 	beq.w	800fad4 <HAL_UART_IRQHandler+0x1cc>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f920:	4ea7      	ldr	r6, [pc, #668]	; (800fbc0 <HAL_UART_IRQHandler+0x2b8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f922:	48a8      	ldr	r0, [pc, #672]	; (800fbc4 <HAL_UART_IRQHandler+0x2bc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f924:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f928:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f92a:	ea5c 0600 	orrs.w	r6, ip, r0
 800f92e:	d15c      	bne.n	800f9ea <HAL_UART_IRQHandler+0xe2>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f930:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f932:	2801      	cmp	r0, #1
 800f934:	d01d      	beq.n	800f972 <HAL_UART_IRQHandler+0x6a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f936:	02d8      	lsls	r0, r3, #11
 800f938:	d502      	bpl.n	800f940 <HAL_UART_IRQHandler+0x38>
 800f93a:	024e      	lsls	r6, r1, #9
 800f93c:	f100 80f1 	bmi.w	800fb22 <HAL_UART_IRQHandler+0x21a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f940:	0618      	lsls	r0, r3, #24
 800f942:	d506      	bpl.n	800f952 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f944:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f948:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f94c:	4301      	orrs	r1, r0
 800f94e:	f040 80e0 	bne.w	800fb12 <HAL_UART_IRQHandler+0x20a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f952:	065e      	lsls	r6, r3, #25
 800f954:	d502      	bpl.n	800f95c <HAL_UART_IRQHandler+0x54>
 800f956:	0668      	lsls	r0, r5, #25
 800f958:	f100 80ef 	bmi.w	800fb3a <HAL_UART_IRQHandler+0x232>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f95c:	0219      	lsls	r1, r3, #8
 800f95e:	d502      	bpl.n	800f966 <HAL_UART_IRQHandler+0x5e>
 800f960:	006a      	lsls	r2, r5, #1
 800f962:	f100 80f7 	bmi.w	800fb54 <HAL_UART_IRQHandler+0x24c>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f966:	01db      	lsls	r3, r3, #7
 800f968:	d502      	bpl.n	800f970 <HAL_UART_IRQHandler+0x68>
 800f96a:	2d00      	cmp	r5, #0
 800f96c:	f2c0 8122 	blt.w	800fbb4 <HAL_UART_IRQHandler+0x2ac>
}
 800f970:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f972:	06d8      	lsls	r0, r3, #27
 800f974:	d5df      	bpl.n	800f936 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f976:	06ee      	lsls	r6, r5, #27
 800f978:	d5dd      	bpl.n	800f936 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f97a:	2310      	movs	r3, #16
 800f97c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f97e:	6893      	ldr	r3, [r2, #8]
 800f980:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800f984:	f000 80f2 	beq.w	800fb6c <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f988:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f98a:	6801      	ldr	r1, [r0, #0]
 800f98c:	684b      	ldr	r3, [r1, #4]
 800f98e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0ed      	beq.n	800f970 <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f994:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f998:	4299      	cmp	r1, r3
 800f99a:	d9e9      	bls.n	800f970 <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 800f99c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f9a0:	69c3      	ldr	r3, [r0, #28]
 800f9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a6:	d018      	beq.n	800f9da <HAL_UART_IRQHandler+0xd2>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9a8:	6813      	ldr	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 800f9aa:	2120      	movs	r1, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9b0:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9b2:	6893      	ldr	r3, [r2, #8]
 800f9b4:	f023 0301 	bic.w	r3, r3, #1
 800f9b8:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ba:	6893      	ldr	r3, [r2, #8]
 800f9bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9c0:	6093      	str	r3, [r2, #8]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9c2:	2300      	movs	r3, #0
          huart->RxState = HAL_UART_STATE_READY;
 800f9c4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9c8:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ca:	6813      	ldr	r3, [r2, #0]
 800f9cc:	f023 0310 	bic.w	r3, r3, #16
 800f9d0:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f9d2:	f7fc f875 	bl	800bac0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f9d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f9da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800f9de:	4620      	mov	r0, r4
 800f9e0:	1ac9      	subs	r1, r1, r3
 800f9e2:	b289      	uxth	r1, r1
 800f9e4:	f010 ff08 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
}
 800f9e8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f9ea:	07de      	lsls	r6, r3, #31
 800f9ec:	d509      	bpl.n	800fa02 <HAL_UART_IRQHandler+0xfa>
 800f9ee:	05ee      	lsls	r6, r5, #23
 800f9f0:	d507      	bpl.n	800fa02 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f9f2:	2601      	movs	r6, #1
 800f9f4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9f6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800f9fa:	f046 0601 	orr.w	r6, r6, #1
 800f9fe:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa02:	079e      	lsls	r6, r3, #30
 800fa04:	d578      	bpl.n	800faf8 <HAL_UART_IRQHandler+0x1f0>
 800fa06:	07ce      	lsls	r6, r1, #31
 800fa08:	d509      	bpl.n	800fa1e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa0a:	2602      	movs	r6, #2
 800fa0c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa0e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800fa12:	f046 0604 	orr.w	r6, r6, #4
 800fa16:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa1a:	075e      	lsls	r6, r3, #29
 800fa1c:	d470      	bmi.n	800fb00 <HAL_UART_IRQHandler+0x1f8>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fa1e:	071e      	lsls	r6, r3, #28
 800fa20:	d50b      	bpl.n	800fa3a <HAL_UART_IRQHandler+0x132>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fa22:	f005 0620 	and.w	r6, r5, #32
 800fa26:	4330      	orrs	r0, r6
 800fa28:	d007      	beq.n	800fa3a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa2a:	2008      	movs	r0, #8
 800fa2c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa2e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800fa32:	f040 0008 	orr.w	r0, r0, #8
 800fa36:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa3a:	051e      	lsls	r6, r3, #20
 800fa3c:	d50a      	bpl.n	800fa54 <HAL_UART_IRQHandler+0x14c>
 800fa3e:	0168      	lsls	r0, r5, #5
 800fa40:	d508      	bpl.n	800fa54 <HAL_UART_IRQHandler+0x14c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fa46:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa48:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800fa4c:	f040 0020 	orr.w	r0, r0, #32
 800fa50:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa54:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d089      	beq.n	800f970 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa5c:	069e      	lsls	r6, r3, #26
 800fa5e:	d506      	bpl.n	800fa6e <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa60:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa64:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800fa68:	ea55 0301 	orrs.w	r3, r5, r1
 800fa6c:	d177      	bne.n	800fb5e <HAL_UART_IRQHandler+0x256>
      errorcode = huart->ErrorCode;
 800fa6e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa72:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa74:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7c:	431d      	orrs	r5, r3
 800fa7e:	f000 80a7 	beq.w	800fbd0 <HAL_UART_IRQHandler+0x2c8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa82:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa84:	4b50      	ldr	r3, [pc, #320]	; (800fbc8 <HAL_UART_IRQHandler+0x2c0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa86:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800fa8a:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa8c:	6891      	ldr	r1, [r2, #8]
 800fa8e:	400b      	ands	r3, r1
 800fa90:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d103      	bne.n	800faa0 <HAL_UART_IRQHandler+0x198>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa98:	6813      	ldr	r3, [r2, #0]
 800fa9a:	f023 0310 	bic.w	r3, r3, #16
 800fa9e:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faa0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800faa2:	2120      	movs	r1, #32
 800faa4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faa8:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faaa:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 800faac:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faae:	064d      	lsls	r5, r1, #25
 800fab0:	d53f      	bpl.n	800fb32 <HAL_UART_IRQHandler+0x22a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab2:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800fab4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faba:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d038      	beq.n	800fb32 <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fac0:	4b42      	ldr	r3, [pc, #264]	; (800fbcc <HAL_UART_IRQHandler+0x2c4>)
 800fac2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fac4:	f7fc f974 	bl	800bdb0 <HAL_DMA_Abort_IT>
 800fac8:	2800      	cmp	r0, #0
 800faca:	f43f af51 	beq.w	800f970 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800face:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fad0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fad2:	e00e      	b.n	800faf2 <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fad4:	069e      	lsls	r6, r3, #26
 800fad6:	f57f af2b 	bpl.w	800f930 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fada:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fade:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800fae2:	ea56 060c 	orrs.w	r6, r6, ip
 800fae6:	f43f af23 	beq.w	800f930 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800faea:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800faec:	2b00      	cmp	r3, #0
 800faee:	f43f af3f 	beq.w	800f970 <HAL_UART_IRQHandler+0x68>
}
 800faf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800faf6:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800faf8:	075e      	lsls	r6, r3, #29
 800fafa:	d590      	bpl.n	800fa1e <HAL_UART_IRQHandler+0x116>
 800fafc:	07ce      	lsls	r6, r1, #31
 800fafe:	d58e      	bpl.n	800fa1e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb00:	2604      	movs	r6, #4
 800fb02:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb04:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800fb08:	f046 0602 	orr.w	r6, r6, #2
 800fb0c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800fb10:	e785      	b.n	800fa1e <HAL_UART_IRQHandler+0x116>
    if (huart->TxISR != NULL)
 800fb12:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f43f af2b 	beq.w	800f970 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 800fb1a:	4620      	mov	r0, r4
}
 800fb1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800fb20:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fb22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800fb26:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fb28:	6213      	str	r3, [r2, #32]
}
 800fb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800fb2e:	f000 bf3f 	b.w	80109b0 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800fb32:	4620      	mov	r0, r4
 800fb34:	f010 fddc 	bl	80206f0 <HAL_UART_ErrorCallback>
}
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb3a:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb3c:	2020      	movs	r0, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb3e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb44:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800fb46:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb4a:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800fb4c:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800fb4e:	f010 fdc1 	bl	80206d4 <HAL_UART_TxCpltCallback>
}
 800fb52:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fb54:	4620      	mov	r0, r4
}
 800fb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fb5a:	f000 bf2d 	b.w	80109b8 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800fb5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d084      	beq.n	800fa6e <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800fb64:	4620      	mov	r0, r4
 800fb66:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb68:	6822      	ldr	r2, [r4, #0]
 800fb6a:	e780      	b.n	800fa6e <HAL_UART_IRQHandler+0x166>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb6c:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800fb70:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800fb74:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800fb76:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800fb7a:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fb7c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	f43f aef6 	beq.w	800f970 <HAL_UART_IRQHandler+0x68>
 800fb84:	2900      	cmp	r1, #0
 800fb86:	f43f aef3 	beq.w	800f970 <HAL_UART_IRQHandler+0x68>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb8a:	6810      	ldr	r0, [r2, #0]
 800fb8c:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800fb90:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb92:	480d      	ldr	r0, [pc, #52]	; (800fbc8 <HAL_UART_IRQHandler+0x2c0>)
 800fb94:	6895      	ldr	r5, [r2, #8]
 800fb96:	4028      	ands	r0, r5
 800fb98:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800fb9a:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 800fb9c:	6723      	str	r3, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800fb9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fba2:	4620      	mov	r0, r4
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fba4:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fba6:	6813      	ldr	r3, [r2, #0]
 800fba8:	f023 0310 	bic.w	r3, r3, #16
 800fbac:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fbae:	f010 fe23 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
}
 800fbb2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fbb4:	4620      	mov	r0, r4
}
 800fbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fbba:	f000 befb 	b.w	80109b4 <HAL_UARTEx_RxFifoFullCallback>
 800fbbe:	bf00      	nop
 800fbc0:	04000120 	.word	0x04000120
 800fbc4:	10000001 	.word	0x10000001
 800fbc8:	effffffe 	.word	0xeffffffe
 800fbcc:	0800f8f5 	.word	0x0800f8f5
        HAL_UART_ErrorCallback(huart);
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f010 fd8d 	bl	80206f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbd6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800fbda:	bd70      	pop	{r4, r5, r6, pc}

0800fbdc <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbdc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fbe0:	2b22      	cmp	r3, #34	; 0x22
{
 800fbe2:	b510      	push	{r4, lr}
 800fbe4:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbe6:	d005      	beq.n	800fbf4 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fbe8:	6802      	ldr	r2, [r0, #0]
 800fbea:	6993      	ldr	r3, [r2, #24]
 800fbec:	f043 0308 	orr.w	r3, r3, #8
 800fbf0:	6193      	str	r3, [r2, #24]
  }
}
 800fbf2:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fbf4:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fbf6:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fbfc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800fbfe:	400b      	ands	r3, r1
 800fc00:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800fc02:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 800fc06:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800fc08:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 800fc0a:	3201      	adds	r2, #1
    huart->RxXferCount--;
 800fc0c:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 800fc0e:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800fc10:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800fc14:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1e9      	bne.n	800fbf2 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc1e:	6802      	ldr	r2, [r0, #0]
 800fc20:	6811      	ldr	r1, [r2, #0]
 800fc22:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800fc26:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc28:	6891      	ldr	r1, [r2, #8]
 800fc2a:	f021 0101 	bic.w	r1, r1, #1
 800fc2e:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800fc30:	2120      	movs	r1, #32
      huart->RxISR = NULL;
 800fc32:	6703      	str	r3, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 800fc34:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc38:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d004      	beq.n	800fc48 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 800fc3e:	f010 fd91 	bl	8020764 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc42:	2300      	movs	r3, #0
 800fc44:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800fc46:	bd10      	pop	{r4, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc48:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc4a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc4e:	f023 0310 	bic.w	r3, r3, #16
 800fc52:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc54:	f010 fdd0 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
 800fc58:	e7f3      	b.n	800fc42 <UART_RxISR_8BIT+0x66>
 800fc5a:	bf00      	nop

0800fc5c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc5c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc60:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc62:	2b22      	cmp	r3, #34	; 0x22
{
 800fc64:	b510      	push	{r4, lr}
 800fc66:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc68:	d004      	beq.n	800fc74 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc6a:	6993      	ldr	r3, [r2, #24]
 800fc6c:	f043 0308 	orr.w	r3, r3, #8
 800fc70:	6193      	str	r3, [r2, #24]
  }
}
 800fc72:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc74:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800fc76:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 800fc7a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fc7c:	ea03 030c 	and.w	r3, r3, ip
 800fc80:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 800fc84:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 800fc88:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800fc92:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1ea      	bne.n	800fc72 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc9c:	6811      	ldr	r1, [r2, #0]
 800fc9e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800fca2:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fca4:	6891      	ldr	r1, [r2, #8]
 800fca6:	f021 0101 	bic.w	r1, r1, #1
 800fcaa:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800fcac:	2120      	movs	r1, #32
      huart->RxISR = NULL;
 800fcae:	6703      	str	r3, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 800fcb0:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcb4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d004      	beq.n	800fcc4 <UART_RxISR_16BIT+0x68>
        HAL_UART_RxCpltCallback(huart);
 800fcba:	f010 fd53 	bl	8020764 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800fcc2:	bd10      	pop	{r4, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc4:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcc6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcca:	f023 0310 	bic.w	r3, r3, #16
 800fcce:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcd0:	f010 fd92 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
 800fcd4:	e7f3      	b.n	800fcbe <UART_RxISR_16BIT+0x62>
 800fcd6:	bf00      	nop

0800fcd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fcdc:	6803      	ldr	r3, [r0, #0]
 800fcde:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fce0:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fce2:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fce4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800fce8:	2a22      	cmp	r2, #34	; 0x22
 800fcea:	d005      	beq.n	800fcf8 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcec:	699a      	ldr	r2, [r3, #24]
 800fcee:	f042 0208 	orr.w	r2, r2, #8
 800fcf2:	619a      	str	r2, [r3, #24]
  }
}
 800fcf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fcf8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	f000 8095 	beq.w	800fe2e <UART_RxISR_8BIT_FIFOEN+0x156>
 800fd04:	068a      	lsls	r2, r1, #26
 800fd06:	d57b      	bpl.n	800fe00 <UART_RxISR_8BIT_FIFOEN+0x128>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd08:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd0c:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd10:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd14:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd18:	f04f 0a04 	mov.w	sl, #4
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd1c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800fe38 <UART_RxISR_8BIT_FIFOEN+0x160>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd22:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fd24:	402b      	ands	r3, r5
 800fd26:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800fd28:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd2c:	6821      	ldr	r1, [r4, #0]
      huart->RxXferCount--;
 800fd2e:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 800fd30:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800fd32:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 800fd34:	3201      	adds	r2, #1
      huart->RxXferCount--;
 800fd36:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd3a:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 800fd3e:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd40:	f01b 0f07 	tst.w	fp, #7
 800fd44:	d025      	beq.n	800fd92 <UART_RxISR_8BIT_FIFOEN+0xba>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd46:	f01b 0f01 	tst.w	fp, #1
 800fd4a:	d008      	beq.n	800fd5e <UART_RxISR_8BIT_FIFOEN+0x86>
 800fd4c:	b13f      	cbz	r7, 800fd5e <UART_RxISR_8BIT_FIFOEN+0x86>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd4e:	2301      	movs	r3, #1
 800fd50:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fd56:	f043 0301 	orr.w	r3, r3, #1
 800fd5a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd5e:	f01b 0f02 	tst.w	fp, #2
 800fd62:	d034      	beq.n	800fdce <UART_RxISR_8BIT_FIFOEN+0xf6>
 800fd64:	b196      	cbz	r6, 800fd8c <UART_RxISR_8BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd66:	2302      	movs	r3, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd68:	f01b 0f04 	tst.w	fp, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd6c:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd6e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fd72:	f043 0304 	orr.w	r3, r3, #4
 800fd76:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd7a:	d007      	beq.n	800fd8c <UART_RxISR_8BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd7c:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fd84:	f043 0302 	orr.w	r3, r3, #2
 800fd88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fd90:	bb33      	cbnz	r3, 800fde0 <UART_RxISR_8BIT_FIFOEN+0x108>
      if (huart->RxXferCount == 0U)
 800fd92:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	b9a3      	cbnz	r3, 800fdc4 <UART_RxISR_8BIT_FIFOEN+0xec>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd9a:	6822      	ldr	r2, [r4, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800fd9c:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd9e:	6811      	ldr	r1, [r2, #0]
 800fda0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800fda4:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fda6:	6891      	ldr	r1, [r2, #8]
 800fda8:	ea01 0109 	and.w	r1, r1, r9
 800fdac:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800fdae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800fdb2:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d018      	beq.n	800fdec <UART_RxISR_8BIT_FIFOEN+0x114>
          HAL_UART_RxCpltCallback(huart);
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f010 fcd2 	bl	8020764 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdc0:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fdc4:	f01b 0f20 	tst.w	fp, #32
 800fdc8:	d01a      	beq.n	800fe00 <UART_RxISR_8BIT_FIFOEN+0x128>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	e7a8      	b.n	800fd20 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdce:	f01b 0f04 	tst.w	fp, #4
 800fdd2:	d0db      	beq.n	800fd8c <UART_RxISR_8BIT_FIFOEN+0xb4>
 800fdd4:	2e00      	cmp	r6, #0
 800fdd6:	d1d1      	bne.n	800fd7c <UART_RxISR_8BIT_FIFOEN+0xa4>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdd8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d0d8      	beq.n	800fd92 <UART_RxISR_8BIT_FIFOEN+0xba>
          HAL_UART_ErrorCallback(huart);
 800fde0:	4620      	mov	r0, r4
 800fde2:	f010 fc85 	bl	80206f0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde6:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 800fdea:	e7d2      	b.n	800fd92 <UART_RxISR_8BIT_FIFOEN+0xba>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdec:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdf4:	f023 0310 	bic.w	r3, r3, #16
 800fdf8:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdfa:	f010 fcfd 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
 800fdfe:	e7df      	b.n	800fdc0 <UART_RxISR_8BIT_FIFOEN+0xe8>
    rxdatacount = huart->RxXferCount;
 800fe00:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800fe04:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f43f af74 	beq.w	800fcf4 <UART_RxISR_8BIT_FIFOEN+0x1c>
 800fe0c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800fe10:	429a      	cmp	r2, r3
 800fe12:	f67f af6f 	bls.w	800fcf4 <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe16:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800fe18:	4906      	ldr	r1, [pc, #24]	; (800fe34 <UART_RxISR_8BIT_FIFOEN+0x15c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe1a:	689a      	ldr	r2, [r3, #8]
 800fe1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fe20:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe22:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800fe24:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe26:	f042 0220 	orr.w	r2, r2, #32
 800fe2a:	601a      	str	r2, [r3, #0]
 800fe2c:	e762      	b.n	800fcf4 <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 800fe2e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe32:	e75f      	b.n	800fcf4 <UART_RxISR_8BIT_FIFOEN+0x1c>
 800fe34:	0800fbdd 	.word	0x0800fbdd
 800fe38:	effffffe 	.word	0xeffffffe

0800fe3c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fe3c:	6802      	ldr	r2, [r0, #0]
{
 800fe3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fe42:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fe44:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fe46:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe48:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800fe4c:	2b22      	cmp	r3, #34	; 0x22
 800fe4e:	d005      	beq.n	800fe5c <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fe50:	6993      	ldr	r3, [r2, #24]
 800fe52:	f043 0308 	orr.w	r3, r3, #8
 800fe56:	6193      	str	r3, [r2, #24]
  }
}
 800fe58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe5c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800fe60:	4604      	mov	r4, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8093 	beq.w	800ff8e <UART_RxISR_16BIT_FIFOEN+0x152>
 800fe68:	068b      	lsls	r3, r1, #26
 800fe6a:	d579      	bpl.n	800ff60 <UART_RxISR_16BIT_FIFOEN+0x124>
  uint16_t  uhMask = huart->Mask;
 800fe6c:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe70:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe74:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe78:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe7c:	f04f 0a04 	mov.w	sl, #4
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe80:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800ff98 <UART_RxISR_16BIT_FIFOEN+0x15c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe84:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800fe86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fe88:	402b      	ands	r3, r5
 800fe8a:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 800fe8e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 800fe92:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800fe94:	3b01      	subs	r3, #1
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fe9c:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fea0:	f01b 0f07 	tst.w	fp, #7
 800fea4:	d025      	beq.n	800fef2 <UART_RxISR_16BIT_FIFOEN+0xb6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fea6:	f01b 0f01 	tst.w	fp, #1
 800feaa:	d008      	beq.n	800febe <UART_RxISR_16BIT_FIFOEN+0x82>
 800feac:	b13f      	cbz	r7, 800febe <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800feae:	2301      	movs	r3, #1
 800feb0:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800feb2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800feb6:	f043 0301 	orr.w	r3, r3, #1
 800feba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800febe:	f01b 0f02 	tst.w	fp, #2
 800fec2:	d034      	beq.n	800ff2e <UART_RxISR_16BIT_FIFOEN+0xf2>
 800fec4:	b196      	cbz	r6, 800feec <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fec6:	2302      	movs	r3, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fec8:	f01b 0f04 	tst.w	fp, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fecc:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fece:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fed2:	f043 0304 	orr.w	r3, r3, #4
 800fed6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800feda:	d007      	beq.n	800feec <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fedc:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fee0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fee4:	f043 0302 	orr.w	r3, r3, #2
 800fee8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800feec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800fef0:	bb33      	cbnz	r3, 800ff40 <UART_RxISR_16BIT_FIFOEN+0x104>
      if (huart->RxXferCount == 0U)
 800fef2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	b9a3      	cbnz	r3, 800ff24 <UART_RxISR_16BIT_FIFOEN+0xe8>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fefa:	6822      	ldr	r2, [r4, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800fefc:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fefe:	6811      	ldr	r1, [r2, #0]
 800ff00:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ff04:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff06:	6891      	ldr	r1, [r2, #8]
 800ff08:	ea01 0109 	and.w	r1, r1, r9
 800ff0c:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800ff0e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800ff12:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d018      	beq.n	800ff4c <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f010 fc22 	bl	8020764 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff20:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff24:	f01b 0f20 	tst.w	fp, #32
 800ff28:	d01a      	beq.n	800ff60 <UART_RxISR_16BIT_FIFOEN+0x124>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff2a:	6822      	ldr	r2, [r4, #0]
 800ff2c:	e7aa      	b.n	800fe84 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff2e:	f01b 0f04 	tst.w	fp, #4
 800ff32:	d0db      	beq.n	800feec <UART_RxISR_16BIT_FIFOEN+0xb0>
 800ff34:	2e00      	cmp	r6, #0
 800ff36:	d1d1      	bne.n	800fedc <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d0d8      	beq.n	800fef2 <UART_RxISR_16BIT_FIFOEN+0xb6>
          HAL_UART_ErrorCallback(huart);
 800ff40:	4620      	mov	r0, r4
 800ff42:	f010 fbd5 	bl	80206f0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff46:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 800ff4a:	e7d2      	b.n	800fef2 <UART_RxISR_16BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff4c:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff54:	f023 0310 	bic.w	r3, r3, #16
 800ff58:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff5a:	f010 fc4d 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
 800ff5e:	e7df      	b.n	800ff20 <UART_RxISR_16BIT_FIFOEN+0xe4>
    rxdatacount = huart->RxXferCount;
 800ff60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ff64:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f43f af76 	beq.w	800fe58 <UART_RxISR_16BIT_FIFOEN+0x1c>
 800ff6c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800ff70:	429a      	cmp	r2, r3
 800ff72:	f67f af71 	bls.w	800fe58 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff76:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800ff78:	4906      	ldr	r1, [pc, #24]	; (800ff94 <UART_RxISR_16BIT_FIFOEN+0x158>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff7a:	689a      	ldr	r2, [r3, #8]
 800ff7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ff80:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff82:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800ff84:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff86:	f042 0220 	orr.w	r2, r2, #32
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	e764      	b.n	800fe58 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 800ff8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff92:	e761      	b.n	800fe58 <UART_RxISR_16BIT_FIFOEN+0x1c>
 800ff94:	0800fc5d 	.word	0x0800fc5d
 800ff98:	effffffe 	.word	0xeffffffe

0800ff9c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800ff9e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffa0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d002      	beq.n	800ffac <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800ffa6:	f7ff fc5f 	bl	800f868 <HAL_UART_RxHalfCpltCallback>
}
 800ffaa:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ffac:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800ffb0:	0849      	lsrs	r1, r1, #1
 800ffb2:	f010 fc21 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
}
 800ffb6:	bd08      	pop	{r3, pc}

0800ffb8 <UART_DMAReceiveCplt>:
{
 800ffb8:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ffba:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ffbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffc2:	d015      	beq.n	800fff0 <UART_DMAReceiveCplt+0x38>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffc4:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800ffc6:	2200      	movs	r2, #0
    huart->RxState = HAL_UART_STATE_READY;
 800ffc8:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800ffca:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ffd4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffd6:	689a      	ldr	r2, [r3, #8]
 800ffd8:	f022 0201 	bic.w	r2, r2, #1
 800ffdc:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffde:	689a      	ldr	r2, [r3, #8]
 800ffe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffe4:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800ffe6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffea:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800ffec:	2a01      	cmp	r2, #1
 800ffee:	d005      	beq.n	800fffc <UART_DMAReceiveCplt+0x44>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fff0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d009      	beq.n	801000a <UART_DMAReceiveCplt+0x52>
    HAL_UART_RxCpltCallback(huart);
 800fff6:	f010 fbb5 	bl	8020764 <HAL_UART_RxCpltCallback>
}
 800fffa:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	f022 0210 	bic.w	r2, r2, #16
 8010002:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010004:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010006:	2b01      	cmp	r3, #1
 8010008:	d1f5      	bne.n	800fff6 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801000a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 801000e:	f010 fbf3 	bl	80207f8 <HAL_UARTEx_RxEventCallback>
}
 8010012:	bd08      	pop	{r3, pc}

08010014 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010014:	6901      	ldr	r1, [r0, #16]
 8010016:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8010018:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801001a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801001c:	49c0      	ldr	r1, [pc, #768]	; (8010320 <UART_SetConfig+0x30c>)
{
 801001e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010020:	6945      	ldr	r5, [r0, #20]
{
 8010022:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010024:	69c0      	ldr	r0, [r0, #28]
{
 8010026:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010028:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801002a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801002c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801002e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010030:	4dbc      	ldr	r5, [pc, #752]	; (8010324 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010032:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010034:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010036:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010038:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8010040:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010044:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010046:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010048:	f000 80e0 	beq.w	801020c <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 801004c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801004e:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8010050:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010052:	4ab5      	ldr	r2, [pc, #724]	; (8010328 <UART_SetConfig+0x314>)
 8010054:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010056:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010058:	4311      	orrs	r1, r2
 801005a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801005c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005e:	f022 020f 	bic.w	r2, r2, #15
 8010062:	432a      	orrs	r2, r5
 8010064:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010066:	4ab1      	ldr	r2, [pc, #708]	; (801032c <UART_SetConfig+0x318>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d023      	beq.n	80100b4 <UART_SetConfig+0xa0>
 801006c:	4ab0      	ldr	r2, [pc, #704]	; (8010330 <UART_SetConfig+0x31c>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d076      	beq.n	8010160 <UART_SetConfig+0x14c>
 8010072:	4ab0      	ldr	r2, [pc, #704]	; (8010334 <UART_SetConfig+0x320>)
 8010074:	4293      	cmp	r3, r2
 8010076:	f000 8190 	beq.w	801039a <UART_SetConfig+0x386>
 801007a:	4aaf      	ldr	r2, [pc, #700]	; (8010338 <UART_SetConfig+0x324>)
 801007c:	4293      	cmp	r3, r2
 801007e:	f000 81e3 	beq.w	8010448 <UART_SetConfig+0x434>
 8010082:	4aae      	ldr	r2, [pc, #696]	; (801033c <UART_SetConfig+0x328>)
 8010084:	4293      	cmp	r3, r2
 8010086:	f000 8121 	beq.w	80102cc <UART_SetConfig+0x2b8>
 801008a:	4aad      	ldr	r2, [pc, #692]	; (8010340 <UART_SetConfig+0x32c>)
 801008c:	4293      	cmp	r3, r2
 801008e:	f000 81e5 	beq.w	801045c <UART_SetConfig+0x448>
 8010092:	4aac      	ldr	r2, [pc, #688]	; (8010344 <UART_SetConfig+0x330>)
 8010094:	4293      	cmp	r3, r2
 8010096:	f000 8236 	beq.w	8010506 <UART_SetConfig+0x4f2>
 801009a:	4aab      	ldr	r2, [pc, #684]	; (8010348 <UART_SetConfig+0x334>)
 801009c:	4293      	cmp	r3, r2
 801009e:	f000 81e9 	beq.w	8010474 <UART_SetConfig+0x460>
        ret = HAL_ERROR;
 80100a2:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80100a4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80100a6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 80100aa:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80100ac:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80100ae:	6763      	str	r3, [r4, #116]	; 0x74
}
 80100b0:	b007      	add	sp, #28
 80100b2:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80100b4:	4ba5      	ldr	r3, [pc, #660]	; (801034c <UART_SetConfig+0x338>)
 80100b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100bc:	2b28      	cmp	r3, #40	; 0x28
 80100be:	d8f0      	bhi.n	80100a2 <UART_SetConfig+0x8e>
 80100c0:	4aa3      	ldr	r2, [pc, #652]	; (8010350 <UART_SetConfig+0x33c>)
 80100c2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80100c8:	d055      	beq.n	8010176 <UART_SetConfig+0x162>
    switch (clocksource)
 80100ca:	2b20      	cmp	r3, #32
 80100cc:	f200 814a 	bhi.w	8010364 <UART_SetConfig+0x350>
 80100d0:	2b20      	cmp	r3, #32
 80100d2:	d8e6      	bhi.n	80100a2 <UART_SetConfig+0x8e>
 80100d4:	a201      	add	r2, pc, #4	; (adr r2, 80100dc <UART_SetConfig+0xc8>)
 80100d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100da:	bf00      	nop
 80100dc:	0801031b 	.word	0x0801031b
 80100e0:	08010315 	.word	0x08010315
 80100e4:	080100a3 	.word	0x080100a3
 80100e8:	080100a3 	.word	0x080100a3
 80100ec:	08010305 	.word	0x08010305
 80100f0:	080100a3 	.word	0x080100a3
 80100f4:	080100a3 	.word	0x080100a3
 80100f8:	080100a3 	.word	0x080100a3
 80100fc:	080102f7 	.word	0x080102f7
 8010100:	080100a3 	.word	0x080100a3
 8010104:	080100a3 	.word	0x080100a3
 8010108:	080100a3 	.word	0x080100a3
 801010c:	080100a3 	.word	0x080100a3
 8010110:	080100a3 	.word	0x080100a3
 8010114:	080100a3 	.word	0x080100a3
 8010118:	080100a3 	.word	0x080100a3
 801011c:	080102e1 	.word	0x080102e1
 8010120:	080100a3 	.word	0x080100a3
 8010124:	080100a3 	.word	0x080100a3
 8010128:	080100a3 	.word	0x080100a3
 801012c:	080100a3 	.word	0x080100a3
 8010130:	080100a3 	.word	0x080100a3
 8010134:	080100a3 	.word	0x080100a3
 8010138:	080100a3 	.word	0x080100a3
 801013c:	080100a3 	.word	0x080100a3
 8010140:	080100a3 	.word	0x080100a3
 8010144:	080100a3 	.word	0x080100a3
 8010148:	080100a3 	.word	0x080100a3
 801014c:	080100a3 	.word	0x080100a3
 8010150:	080100a3 	.word	0x080100a3
 8010154:	080100a3 	.word	0x080100a3
 8010158:	080100a3 	.word	0x080100a3
 801015c:	08010489 	.word	0x08010489
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010160:	4b7a      	ldr	r3, [pc, #488]	; (801034c <UART_SetConfig+0x338>)
 8010162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010164:	f003 0307 	and.w	r3, r3, #7
 8010168:	2b05      	cmp	r3, #5
 801016a:	d89a      	bhi.n	80100a2 <UART_SetConfig+0x8e>
 801016c:	4a79      	ldr	r2, [pc, #484]	; (8010354 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801016e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010172:	5cd3      	ldrb	r3, [r2, r3]
 8010174:	d1a9      	bne.n	80100ca <UART_SetConfig+0xb6>
    switch (clocksource)
 8010176:	2b20      	cmp	r3, #32
 8010178:	f200 8146 	bhi.w	8010408 <UART_SetConfig+0x3f4>
 801017c:	2b20      	cmp	r3, #32
 801017e:	d890      	bhi.n	80100a2 <UART_SetConfig+0x8e>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <UART_SetConfig+0x174>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	080104f3 	.word	0x080104f3
 801018c:	080104ed 	.word	0x080104ed
 8010190:	080100a3 	.word	0x080100a3
 8010194:	080100a3 	.word	0x080100a3
 8010198:	080104f9 	.word	0x080104f9
 801019c:	080100a3 	.word	0x080100a3
 80101a0:	080100a3 	.word	0x080100a3
 80101a4:	080100a3 	.word	0x080100a3
 80101a8:	080104db 	.word	0x080104db
 80101ac:	080100a3 	.word	0x080100a3
 80101b0:	080100a3 	.word	0x080100a3
 80101b4:	080100a3 	.word	0x080100a3
 80101b8:	080100a3 	.word	0x080100a3
 80101bc:	080100a3 	.word	0x080100a3
 80101c0:	080100a3 	.word	0x080100a3
 80101c4:	080100a3 	.word	0x080100a3
 80101c8:	080104c7 	.word	0x080104c7
 80101cc:	080100a3 	.word	0x080100a3
 80101d0:	080100a3 	.word	0x080100a3
 80101d4:	080100a3 	.word	0x080100a3
 80101d8:	080100a3 	.word	0x080100a3
 80101dc:	080100a3 	.word	0x080100a3
 80101e0:	080100a3 	.word	0x080100a3
 80101e4:	080100a3 	.word	0x080100a3
 80101e8:	080100a3 	.word	0x080100a3
 80101ec:	080100a3 	.word	0x080100a3
 80101f0:	080100a3 	.word	0x080100a3
 80101f4:	080100a3 	.word	0x080100a3
 80101f8:	080100a3 	.word	0x080100a3
 80101fc:	080100a3 	.word	0x080100a3
 8010200:	080100a3 	.word	0x080100a3
 8010204:	080100a3 	.word	0x080100a3
 8010208:	08010503 	.word	0x08010503
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801020c:	6898      	ldr	r0, [r3, #8]
 801020e:	4a46      	ldr	r2, [pc, #280]	; (8010328 <UART_SetConfig+0x314>)
 8010210:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010212:	484e      	ldr	r0, [pc, #312]	; (801034c <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010214:	430a      	orrs	r2, r1
 8010216:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801021a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801021c:	f022 020f 	bic.w	r2, r2, #15
 8010220:	430a      	orrs	r2, r1
 8010222:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010224:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010226:	f003 0307 	and.w	r3, r3, #7
 801022a:	2b05      	cmp	r3, #5
 801022c:	f63f af39 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010230:	4a49      	ldr	r2, [pc, #292]	; (8010358 <UART_SetConfig+0x344>)
 8010232:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8010234:	2b20      	cmp	r3, #32
 8010236:	f200 80ba 	bhi.w	80103ae <UART_SetConfig+0x39a>
 801023a:	2b01      	cmp	r3, #1
 801023c:	f67f af31 	bls.w	80100a2 <UART_SetConfig+0x8e>
 8010240:	3b02      	subs	r3, #2
 8010242:	2b1e      	cmp	r3, #30
 8010244:	f63f af2d 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010248:	a201      	add	r2, pc, #4	; (adr r2, 8010250 <UART_SetConfig+0x23c>)
 801024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024e:	bf00      	nop
 8010250:	080104bd 	.word	0x080104bd
 8010254:	080100a3 	.word	0x080100a3
 8010258:	080104b3 	.word	0x080104b3
 801025c:	080100a3 	.word	0x080100a3
 8010260:	080100a3 	.word	0x080100a3
 8010264:	080100a3 	.word	0x080100a3
 8010268:	080104a1 	.word	0x080104a1
 801026c:	080100a3 	.word	0x080100a3
 8010270:	080100a3 	.word	0x080100a3
 8010274:	080100a3 	.word	0x080100a3
 8010278:	080100a3 	.word	0x080100a3
 801027c:	080100a3 	.word	0x080100a3
 8010280:	080100a3 	.word	0x080100a3
 8010284:	080100a3 	.word	0x080100a3
 8010288:	0801048d 	.word	0x0801048d
 801028c:	080100a3 	.word	0x080100a3
 8010290:	080100a3 	.word	0x080100a3
 8010294:	080100a3 	.word	0x080100a3
 8010298:	080100a3 	.word	0x080100a3
 801029c:	080100a3 	.word	0x080100a3
 80102a0:	080100a3 	.word	0x080100a3
 80102a4:	080100a3 	.word	0x080100a3
 80102a8:	080100a3 	.word	0x080100a3
 80102ac:	080100a3 	.word	0x080100a3
 80102b0:	080100a3 	.word	0x080100a3
 80102b4:	080100a3 	.word	0x080100a3
 80102b8:	080100a3 	.word	0x080100a3
 80102bc:	080100a3 	.word	0x080100a3
 80102c0:	080100a3 	.word	0x080100a3
 80102c4:	080100a3 	.word	0x080100a3
 80102c8:	080104c3 	.word	0x080104c3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102cc:	4b1f      	ldr	r3, [pc, #124]	; (801034c <UART_SetConfig+0x338>)
 80102ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d0:	f003 0307 	and.w	r3, r3, #7
 80102d4:	2b05      	cmp	r3, #5
 80102d6:	f63f aee4 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 80102da:	4a20      	ldr	r2, [pc, #128]	; (801035c <UART_SetConfig+0x348>)
 80102dc:	5cd3      	ldrb	r3, [r2, r3]
 80102de:	e6f1      	b.n	80100c4 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102e0:	4b1a      	ldr	r3, [pc, #104]	; (801034c <UART_SetConfig+0x338>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	0692      	lsls	r2, r2, #26
 80102e6:	f140 80c3 	bpl.w	8010470 <UART_SetConfig+0x45c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	481c      	ldr	r0, [pc, #112]	; (8010360 <UART_SetConfig+0x34c>)
 80102ee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80102f2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80102f4:	e03b      	b.n	801036e <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102f6:	a803      	add	r0, sp, #12
 80102f8:	f7fe fe94 	bl	800f024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102fc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80102fe:	b938      	cbnz	r0, 8010310 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 8010300:	2000      	movs	r0, #0
 8010302:	e6cf      	b.n	80100a4 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010304:	4668      	mov	r0, sp
 8010306:	f7fe fde1 	bl	800eecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801030a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 801030c:	2800      	cmp	r0, #0
 801030e:	d0f7      	beq.n	8010300 <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010310:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010312:	e02c      	b.n	801036e <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010314:	f7fd ff18 	bl	800e148 <HAL_RCC_GetPCLK2Freq>
        break;
 8010318:	e7f1      	b.n	80102fe <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 801031a:	f7fd fecd 	bl	800e0b8 <HAL_RCC_GetPCLK1Freq>
        break;
 801031e:	e7ee      	b.n	80102fe <UART_SetConfig+0x2ea>
 8010320:	cfff69f3 	.word	0xcfff69f3
 8010324:	58000c00 	.word	0x58000c00
 8010328:	11fff4ff 	.word	0x11fff4ff
 801032c:	40011000 	.word	0x40011000
 8010330:	40004400 	.word	0x40004400
 8010334:	40004800 	.word	0x40004800
 8010338:	40004c00 	.word	0x40004c00
 801033c:	40005000 	.word	0x40005000
 8010340:	40011400 	.word	0x40011400
 8010344:	40007800 	.word	0x40007800
 8010348:	40007c00 	.word	0x40007c00
 801034c:	58024400 	.word	0x58024400
 8010350:	24009fbc 	.word	0x24009fbc
 8010354:	24009fe8 	.word	0x24009fe8
 8010358:	24009ff0 	.word	0x24009ff0
 801035c:	24009fe8 	.word	0x24009fe8
 8010360:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8010364:	2b40      	cmp	r3, #64	; 0x40
 8010366:	f47f ae9c 	bne.w	80100a2 <UART_SetConfig+0x8e>
 801036a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801036e:	4b6d      	ldr	r3, [pc, #436]	; (8010524 <UART_SetConfig+0x510>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010370:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010374:	6862      	ldr	r2, [r4, #4]
 8010376:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801037a:	fbb0 f3f3 	udiv	r3, r0, r3
 801037e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010382:	fbb3 f3f2 	udiv	r3, r3, r2
 8010386:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010388:	f1a3 0210 	sub.w	r2, r3, #16
 801038c:	428a      	cmp	r2, r1
 801038e:	f63f ae88 	bhi.w	80100a2 <UART_SetConfig+0x8e>
        huart->Instance->BRR = usartdiv;
 8010392:	6822      	ldr	r2, [r4, #0]
 8010394:	2000      	movs	r0, #0
 8010396:	60d3      	str	r3, [r2, #12]
 8010398:	e684      	b.n	80100a4 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801039a:	4b63      	ldr	r3, [pc, #396]	; (8010528 <UART_SetConfig+0x514>)
 801039c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801039e:	f003 0307 	and.w	r3, r3, #7
 80103a2:	2b05      	cmp	r3, #5
 80103a4:	f63f ae7d 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 80103a8:	4a60      	ldr	r2, [pc, #384]	; (801052c <UART_SetConfig+0x518>)
 80103aa:	5cd3      	ldrb	r3, [r2, r3]
 80103ac:	e68a      	b.n	80100c4 <UART_SetConfig+0xb0>
    switch (clocksource)
 80103ae:	2b40      	cmp	r3, #64	; 0x40
 80103b0:	f47f ae77 	bne.w	80100a2 <UART_SetConfig+0x8e>
 80103b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103b8:	4b5a      	ldr	r3, [pc, #360]	; (8010524 <UART_SetConfig+0x510>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103ba:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103bc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103c4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103c8:	4299      	cmp	r1, r3
 80103ca:	f63f ae6a 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 80103ce:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80103d2:	f63f ae66 	bhi.w	80100a2 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103d6:	2300      	movs	r3, #0
 80103d8:	4619      	mov	r1, r3
 80103da:	f7f8 fe99 	bl	8009110 <__aeabi_uldivmod>
 80103de:	462a      	mov	r2, r5
 80103e0:	0209      	lsls	r1, r1, #8
 80103e2:	0203      	lsls	r3, r0, #8
 80103e4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80103e8:	0868      	lsrs	r0, r5, #1
 80103ea:	1818      	adds	r0, r3, r0
 80103ec:	f04f 0300 	mov.w	r3, #0
 80103f0:	f141 0100 	adc.w	r1, r1, #0
 80103f4:	f7f8 fe8c 	bl	8009110 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80103f8:	4a4d      	ldr	r2, [pc, #308]	; (8010530 <UART_SetConfig+0x51c>)
 80103fa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103fe:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010400:	4291      	cmp	r1, r2
 8010402:	f63f ae4e 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010406:	e7c4      	b.n	8010392 <UART_SetConfig+0x37e>
    switch (clocksource)
 8010408:	2b40      	cmp	r3, #64	; 0x40
 801040a:	f47f ae4a 	bne.w	80100a2 <UART_SetConfig+0x8e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801040e:	4b45      	ldr	r3, [pc, #276]	; (8010524 <UART_SetConfig+0x510>)
 8010410:	6862      	ldr	r2, [r4, #4]
 8010412:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8010416:	0853      	lsrs	r3, r2, #1
 8010418:	fbb0 f0f1 	udiv	r0, r0, r1
 801041c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010420:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010424:	fbb0 f0f2 	udiv	r0, r0, r2
 8010428:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801042a:	f1a2 0110 	sub.w	r1, r2, #16
 801042e:	4299      	cmp	r1, r3
 8010430:	f63f ae37 	bhi.w	80100a2 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010434:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010438:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 801043c:	6821      	ldr	r1, [r4, #0]
 801043e:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010440:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8010442:	4313      	orrs	r3, r2
 8010444:	60cb      	str	r3, [r1, #12]
 8010446:	e62d      	b.n	80100a4 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010448:	4b37      	ldr	r3, [pc, #220]	; (8010528 <UART_SetConfig+0x514>)
 801044a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801044c:	f003 0307 	and.w	r3, r3, #7
 8010450:	2b05      	cmp	r3, #5
 8010452:	f63f ae26 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010456:	4a37      	ldr	r2, [pc, #220]	; (8010534 <UART_SetConfig+0x520>)
 8010458:	5cd3      	ldrb	r3, [r2, r3]
 801045a:	e633      	b.n	80100c4 <UART_SetConfig+0xb0>
 801045c:	4b32      	ldr	r3, [pc, #200]	; (8010528 <UART_SetConfig+0x514>)
 801045e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010464:	2b28      	cmp	r3, #40	; 0x28
 8010466:	f63f ae1c 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 801046a:	4a33      	ldr	r2, [pc, #204]	; (8010538 <UART_SetConfig+0x524>)
 801046c:	5cd3      	ldrb	r3, [r2, r3]
 801046e:	e629      	b.n	80100c4 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8010470:	4832      	ldr	r0, [pc, #200]	; (801053c <UART_SetConfig+0x528>)
 8010472:	e77c      	b.n	801036e <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010474:	4b2c      	ldr	r3, [pc, #176]	; (8010528 <UART_SetConfig+0x514>)
 8010476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010478:	f003 0307 	and.w	r3, r3, #7
 801047c:	2b05      	cmp	r3, #5
 801047e:	f63f ae10 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010482:	4a2f      	ldr	r2, [pc, #188]	; (8010540 <UART_SetConfig+0x52c>)
 8010484:	5cd3      	ldrb	r3, [r2, r3]
 8010486:	e61d      	b.n	80100c4 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 8010488:	482e      	ldr	r0, [pc, #184]	; (8010544 <UART_SetConfig+0x530>)
 801048a:	e770      	b.n	801036e <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801048c:	4b26      	ldr	r3, [pc, #152]	; (8010528 <UART_SetConfig+0x514>)
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	0690      	lsls	r0, r2, #26
 8010492:	d542      	bpl.n	801051a <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	4829      	ldr	r0, [pc, #164]	; (801053c <UART_SetConfig+0x528>)
 8010498:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801049c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 801049e:	e78b      	b.n	80103b8 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104a0:	a803      	add	r0, sp, #12
 80104a2:	f7fe fdbf 	bl	800f024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104a6:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80104a8:	2800      	cmp	r0, #0
 80104aa:	f43f af29 	beq.w	8010300 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80104ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80104b0:	e782      	b.n	80103b8 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104b2:	4668      	mov	r0, sp
 80104b4:	f7fe fd0a 	bl	800eecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104b8:	9801      	ldr	r0, [sp, #4]
        break;
 80104ba:	e7f5      	b.n	80104a8 <UART_SetConfig+0x494>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104bc:	f7fe fcf4 	bl	800eea8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80104c0:	e7f2      	b.n	80104a8 <UART_SetConfig+0x494>
        pclk = (uint32_t) CSI_VALUE;
 80104c2:	4820      	ldr	r0, [pc, #128]	; (8010544 <UART_SetConfig+0x530>)
 80104c4:	e778      	b.n	80103b8 <UART_SetConfig+0x3a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104c6:	4b18      	ldr	r3, [pc, #96]	; (8010528 <UART_SetConfig+0x514>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	0691      	lsls	r1, r2, #26
 80104cc:	d527      	bpl.n	801051e <UART_SetConfig+0x50a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	481a      	ldr	r0, [pc, #104]	; (801053c <UART_SetConfig+0x528>)
 80104d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80104d6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80104d8:	e799      	b.n	801040e <UART_SetConfig+0x3fa>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104da:	a803      	add	r0, sp, #12
 80104dc:	f7fe fda2 	bl	800f024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104e0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80104e2:	2800      	cmp	r0, #0
 80104e4:	f43f af0c 	beq.w	8010300 <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80104ea:	e790      	b.n	801040e <UART_SetConfig+0x3fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 80104ec:	f7fd fe2c 	bl	800e148 <HAL_RCC_GetPCLK2Freq>
        break;
 80104f0:	e7f7      	b.n	80104e2 <UART_SetConfig+0x4ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80104f2:	f7fd fde1 	bl	800e0b8 <HAL_RCC_GetPCLK1Freq>
        break;
 80104f6:	e7f4      	b.n	80104e2 <UART_SetConfig+0x4ce>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104f8:	4668      	mov	r0, sp
 80104fa:	f7fe fce7 	bl	800eecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104fe:	9801      	ldr	r0, [sp, #4]
        break;
 8010500:	e7ef      	b.n	80104e2 <UART_SetConfig+0x4ce>
        pclk = (uint32_t) CSI_VALUE;
 8010502:	4810      	ldr	r0, [pc, #64]	; (8010544 <UART_SetConfig+0x530>)
 8010504:	e783      	b.n	801040e <UART_SetConfig+0x3fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010506:	4b08      	ldr	r3, [pc, #32]	; (8010528 <UART_SetConfig+0x514>)
 8010508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801050a:	f003 0307 	and.w	r3, r3, #7
 801050e:	2b05      	cmp	r3, #5
 8010510:	f63f adc7 	bhi.w	80100a2 <UART_SetConfig+0x8e>
 8010514:	4a0c      	ldr	r2, [pc, #48]	; (8010548 <UART_SetConfig+0x534>)
 8010516:	5cd3      	ldrb	r3, [r2, r3]
 8010518:	e5d4      	b.n	80100c4 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 801051a:	4808      	ldr	r0, [pc, #32]	; (801053c <UART_SetConfig+0x528>)
 801051c:	e74c      	b.n	80103b8 <UART_SetConfig+0x3a4>
          pclk = (uint32_t) HSI_VALUE;
 801051e:	4807      	ldr	r0, [pc, #28]	; (801053c <UART_SetConfig+0x528>)
 8010520:	e775      	b.n	801040e <UART_SetConfig+0x3fa>
 8010522:	bf00      	nop
 8010524:	24009ff8 	.word	0x24009ff8
 8010528:	58024400 	.word	0x58024400
 801052c:	24009fe8 	.word	0x24009fe8
 8010530:	000ffcff 	.word	0x000ffcff
 8010534:	24009fe8 	.word	0x24009fe8
 8010538:	24009fbc 	.word	0x24009fbc
 801053c:	03d09000 	.word	0x03d09000
 8010540:	24009fe8 	.word	0x24009fe8
 8010544:	003d0900 	.word	0x003d0900
 8010548:	24009fe8 	.word	0x24009fe8

0801054c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801054c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801054e:	07da      	lsls	r2, r3, #31
{
 8010550:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010552:	d506      	bpl.n	8010562 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010554:	6801      	ldr	r1, [r0, #0]
 8010556:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8010558:	684a      	ldr	r2, [r1, #4]
 801055a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801055e:	4322      	orrs	r2, r4
 8010560:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010562:	079c      	lsls	r4, r3, #30
 8010564:	d506      	bpl.n	8010574 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010566:	6801      	ldr	r1, [r0, #0]
 8010568:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801056a:	684a      	ldr	r2, [r1, #4]
 801056c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010570:	4322      	orrs	r2, r4
 8010572:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010574:	0759      	lsls	r1, r3, #29
 8010576:	d506      	bpl.n	8010586 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010578:	6801      	ldr	r1, [r0, #0]
 801057a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801057c:	684a      	ldr	r2, [r1, #4]
 801057e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010582:	4322      	orrs	r2, r4
 8010584:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010586:	071a      	lsls	r2, r3, #28
 8010588:	d506      	bpl.n	8010598 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801058a:	6801      	ldr	r1, [r0, #0]
 801058c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801058e:	684a      	ldr	r2, [r1, #4]
 8010590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010594:	4322      	orrs	r2, r4
 8010596:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010598:	06dc      	lsls	r4, r3, #27
 801059a:	d506      	bpl.n	80105aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801059c:	6801      	ldr	r1, [r0, #0]
 801059e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80105a0:	688a      	ldr	r2, [r1, #8]
 80105a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80105a6:	4322      	orrs	r2, r4
 80105a8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105aa:	0699      	lsls	r1, r3, #26
 80105ac:	d506      	bpl.n	80105bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105ae:	6801      	ldr	r1, [r0, #0]
 80105b0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80105b2:	688a      	ldr	r2, [r1, #8]
 80105b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105b8:	4322      	orrs	r2, r4
 80105ba:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105bc:	065a      	lsls	r2, r3, #25
 80105be:	d50a      	bpl.n	80105d6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105c0:	6801      	ldr	r1, [r0, #0]
 80105c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80105c4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105c6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80105ce:	ea42 0204 	orr.w	r2, r2, r4
 80105d2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105d4:	d00b      	beq.n	80105ee <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105d6:	061b      	lsls	r3, r3, #24
 80105d8:	d506      	bpl.n	80105e8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105da:	6802      	ldr	r2, [r0, #0]
 80105dc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80105de:	6853      	ldr	r3, [r2, #4]
 80105e0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80105e4:	430b      	orrs	r3, r1
 80105e6:	6053      	str	r3, [r2, #4]
}
 80105e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105ee:	684a      	ldr	r2, [r1, #4]
 80105f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80105f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80105f6:	4322      	orrs	r2, r4
 80105f8:	604a      	str	r2, [r1, #4]
 80105fa:	e7ec      	b.n	80105d6 <UART_AdvFeatureConfig+0x8a>

080105fc <UART_CheckIdleState>:
{
 80105fc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105fe:	2300      	movs	r3, #0
{
 8010600:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010602:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8010606:	f7fa fa71 	bl	800aaec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801060a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801060c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	0711      	lsls	r1, r2, #28
 8010612:	d40d      	bmi.n	8010630 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	0752      	lsls	r2, r2, #29
 8010618:	d431      	bmi.n	801067e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801061a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 801061c:	2220      	movs	r2, #32
  return HAL_OK;
 801061e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8010620:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8010624:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010628:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801062c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 801062e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010630:	69da      	ldr	r2, [r3, #28]
 8010632:	0292      	lsls	r2, r2, #10
 8010634:	d4ee      	bmi.n	8010614 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010636:	f7fa fa59 	bl	800aaec <HAL_GetTick>
 801063a:	1b43      	subs	r3, r0, r5
 801063c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010640:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010642:	d22d      	bcs.n	80106a0 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	0750      	lsls	r0, r2, #29
 8010648:	d5f2      	bpl.n	8010630 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801064a:	69da      	ldr	r2, [r3, #28]
 801064c:	0511      	lsls	r1, r2, #20
 801064e:	d5ef      	bpl.n	8010630 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010650:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8010654:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8010656:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8010658:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801065a:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801065c:	6819      	ldr	r1, [r3, #0]
 801065e:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8010662:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010664:	6899      	ldr	r1, [r3, #8]
 8010666:	f021 0101 	bic.w	r1, r1, #1
 801066a:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 801066c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8010670:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010674:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010678:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 801067c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801067e:	69db      	ldr	r3, [r3, #28]
 8010680:	0258      	lsls	r0, r3, #9
 8010682:	d4ca      	bmi.n	801061a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010684:	f7fa fa32 	bl	800aaec <HAL_GetTick>
 8010688:	1b43      	subs	r3, r0, r5
 801068a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801068e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010690:	d206      	bcs.n	80106a0 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	0751      	lsls	r1, r2, #29
 8010696:	d5f2      	bpl.n	801067e <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010698:	69da      	ldr	r2, [r3, #28]
 801069a:	0512      	lsls	r2, r2, #20
 801069c:	d5ef      	bpl.n	801067e <UART_CheckIdleState+0x82>
 801069e:	e7d7      	b.n	8010650 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80106a0:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80106a2:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80106a4:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 80106a6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80106a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80106ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106ae:	689a      	ldr	r2, [r3, #8]
 80106b0:	f022 0201 	bic.w	r2, r2, #1
 80106b4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80106b6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80106ba:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80106be:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 80106c2:	bd38      	pop	{r3, r4, r5, pc}

080106c4 <HAL_UART_Init>:
  if (huart == NULL)
 80106c4:	b380      	cbz	r0, 8010728 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80106c6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80106ca:	b510      	push	{r4, lr}
 80106cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80106ce:	b333      	cbz	r3, 801071e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80106d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80106d2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80106d4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80106d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80106da:	6813      	ldr	r3, [r2, #0]
 80106dc:	f023 0301 	bic.w	r3, r3, #1
 80106e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80106e2:	f7ff fc97 	bl	8010014 <UART_SetConfig>
 80106e6:	2801      	cmp	r0, #1
 80106e8:	d017      	beq.n	801071a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80106ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80106ec:	b98b      	cbnz	r3, 8010712 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80106ee:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80106f0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80106f2:	685a      	ldr	r2, [r3, #4]
 80106f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80106f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80106fa:	689a      	ldr	r2, [r3, #8]
 80106fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010700:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	f042 0201 	orr.w	r2, r2, #1
}
 8010708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 801070c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801070e:	f7ff bf75 	b.w	80105fc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8010712:	4620      	mov	r0, r4
 8010714:	f7ff ff1a 	bl	801054c <UART_AdvFeatureConfig>
 8010718:	e7e9      	b.n	80106ee <HAL_UART_Init+0x2a>
}
 801071a:	2001      	movs	r0, #1
 801071c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801071e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8010722:	f7f9 fff5 	bl	800a710 <HAL_UART_MspInit>
 8010726:	e7d3      	b.n	80106d0 <HAL_UART_Init+0xc>
}
 8010728:	2001      	movs	r0, #1
 801072a:	4770      	bx	lr

0801072c <UART_WaitOnFlagUntilTimeout>:
{
 801072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010730:	9f08      	ldr	r7, [sp, #32]
 8010732:	4680      	mov	r8, r0
 8010734:	460e      	mov	r6, r1
 8010736:	4615      	mov	r5, r2
 8010738:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801073a:	6804      	ldr	r4, [r0, #0]
 801073c:	1c7b      	adds	r3, r7, #1
 801073e:	d10a      	bne.n	8010756 <UART_WaitOnFlagUntilTimeout+0x2a>
 8010740:	69e3      	ldr	r3, [r4, #28]
 8010742:	ea36 0303 	bics.w	r3, r6, r3
 8010746:	bf0c      	ite	eq
 8010748:	2301      	moveq	r3, #1
 801074a:	2300      	movne	r3, #0
 801074c:	429d      	cmp	r5, r3
 801074e:	d0f7      	beq.n	8010740 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8010750:	2000      	movs	r0, #0
}
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010756:	69e3      	ldr	r3, [r4, #28]
 8010758:	ea36 0303 	bics.w	r3, r6, r3
 801075c:	bf0c      	ite	eq
 801075e:	2301      	moveq	r3, #1
 8010760:	2300      	movne	r3, #0
 8010762:	42ab      	cmp	r3, r5
 8010764:	d1f4      	bne.n	8010750 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010766:	f7fa f9c1 	bl	800aaec <HAL_GetTick>
 801076a:	eba0 0009 	sub.w	r0, r0, r9
 801076e:	fab7 f287 	clz	r2, r7
 8010772:	42b8      	cmp	r0, r7
 8010774:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8010778:	d81e      	bhi.n	80107b8 <UART_WaitOnFlagUntilTimeout+0x8c>
 801077a:	b1ef      	cbz	r7, 80107b8 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801077c:	f8d8 4000 	ldr.w	r4, [r8]
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	0758      	lsls	r0, r3, #29
 8010784:	d5da      	bpl.n	801073c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010786:	69e3      	ldr	r3, [r4, #28]
 8010788:	0519      	lsls	r1, r3, #20
 801078a:	d5d7      	bpl.n	801073c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8010790:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8010792:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010794:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010796:	6821      	ldr	r1, [r4, #0]
 8010798:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 801079c:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801079e:	68a1      	ldr	r1, [r4, #8]
 80107a0:	f021 0101 	bic.w	r1, r1, #1
 80107a4:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80107a6:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80107aa:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80107ae:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80107b2:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          return HAL_TIMEOUT;
 80107b6:	e7cc      	b.n	8010752 <UART_WaitOnFlagUntilTimeout+0x26>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80107b8:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 80107bc:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80107be:	2400      	movs	r4, #0
 80107c0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80107c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ca:	689a      	ldr	r2, [r3, #8]
 80107cc:	f022 0201 	bic.w	r2, r2, #1
 80107d0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80107d2:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80107d6:	f888 4080 	strb.w	r4, [r8, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80107da:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
        return HAL_TIMEOUT;
 80107de:	e7b8      	b.n	8010752 <UART_WaitOnFlagUntilTimeout+0x26>

080107e0 <HAL_UART_Transmit>:
{
 80107e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80107e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80107ea:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80107ec:	2b20      	cmp	r3, #32
 80107ee:	f040 8081 	bne.w	80108f4 <HAL_UART_Transmit+0x114>
    if ((pData == NULL) || (Size == 0U))
 80107f2:	4689      	mov	r9, r1
 80107f4:	2900      	cmp	r1, #0
 80107f6:	d04a      	beq.n	801088e <HAL_UART_Transmit+0xae>
 80107f8:	fab2 f782 	clz	r7, r2
 80107fc:	4614      	mov	r4, r2
 80107fe:	097f      	lsrs	r7, r7, #5
 8010800:	2a00      	cmp	r2, #0
 8010802:	d044      	beq.n	801088e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8010804:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8010808:	4605      	mov	r5, r0
 801080a:	2b01      	cmp	r3, #1
 801080c:	d072      	beq.n	80108f4 <HAL_UART_Transmit+0x114>
 801080e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010810:	f8c0 708c 	str.w	r7, [r0, #140]	; 0x8c
    __HAL_LOCK(huart);
 8010814:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010818:	2321      	movs	r3, #33	; 0x21
 801081a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 801081e:	f7fa f965 	bl	800aaec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010822:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8010824:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8010826:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801082a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 801082e:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010832:	d078      	beq.n	8010926 <HAL_UART_Transmit+0x146>
    while (huart->TxXferCount > 0U)
 8010834:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8010838:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 801083a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 801083c:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8010840:	b1b3      	cbz	r3, 8010870 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010842:	682c      	ldr	r4, [r5, #0]
 8010844:	1c71      	adds	r1, r6, #1
 8010846:	d126      	bne.n	8010896 <HAL_UART_Transmit+0xb6>
 8010848:	69e2      	ldr	r2, [r4, #28]
 801084a:	0612      	lsls	r2, r2, #24
 801084c:	d5fc      	bpl.n	8010848 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 801084e:	f1b9 0f00 	cmp.w	r9, #0
 8010852:	d04a      	beq.n	80108ea <HAL_UART_Transmit+0x10a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010854:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010858:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 801085a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 801085e:	3b01      	subs	r3, #1
 8010860:	b29b      	uxth	r3, r3
 8010862:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010866:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 801086a:	b29b      	uxth	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1e9      	bne.n	8010844 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010870:	4643      	mov	r3, r8
 8010872:	2200      	movs	r2, #0
 8010874:	2140      	movs	r1, #64	; 0x40
 8010876:	4628      	mov	r0, r5
 8010878:	9600      	str	r6, [sp, #0]
 801087a:	f7ff ff57 	bl	801072c <UART_WaitOnFlagUntilTimeout>
 801087e:	2800      	cmp	r0, #0
 8010880:	d157      	bne.n	8010932 <HAL_UART_Transmit+0x152>
    huart->gState = HAL_UART_STATE_READY;
 8010882:	2320      	movs	r3, #32
 8010884:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8010888:	b003      	add	sp, #12
 801088a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 801088e:	2001      	movs	r0, #1
}
 8010890:	b003      	add	sp, #12
 8010892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010896:	69e3      	ldr	r3, [r4, #28]
 8010898:	061b      	lsls	r3, r3, #24
 801089a:	d4d8      	bmi.n	801084e <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801089c:	f7fa f926 	bl	800aaec <HAL_GetTick>
 80108a0:	eba0 0008 	sub.w	r0, r0, r8
 80108a4:	4286      	cmp	r6, r0
 80108a6:	d329      	bcc.n	80108fc <HAL_UART_Transmit+0x11c>
 80108a8:	fab6 f386 	clz	r3, r6
 80108ac:	095b      	lsrs	r3, r3, #5
 80108ae:	b32e      	cbz	r6, 80108fc <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80108b0:	682c      	ldr	r4, [r5, #0]
 80108b2:	6822      	ldr	r2, [r4, #0]
 80108b4:	0752      	lsls	r2, r2, #29
 80108b6:	d5c5      	bpl.n	8010844 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108b8:	69e2      	ldr	r2, [r4, #28]
 80108ba:	0510      	lsls	r0, r2, #20
 80108bc:	d5c2      	bpl.n	8010844 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108be:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80108c2:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 80108c4:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108c6:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80108c8:	6821      	ldr	r1, [r4, #0]
 80108ca:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80108ce:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108d0:	68a1      	ldr	r1, [r4, #8]
 80108d2:	f021 0101 	bic.w	r1, r1, #1
 80108d6:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80108d8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80108dc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80108e0:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108e4:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80108e8:	e7d2      	b.n	8010890 <HAL_UART_Transmit+0xb0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80108ea:	f837 3b02 	ldrh.w	r3, [r7], #2
 80108ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f2:	e7b1      	b.n	8010858 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80108f4:	2002      	movs	r0, #2
}
 80108f6:	b003      	add	sp, #12
 80108f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80108fc:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 80108fe:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8010900:	2400      	movs	r4, #0
        return HAL_TIMEOUT;
 8010902:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801090a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801090c:	689a      	ldr	r2, [r3, #8]
 801090e:	f022 0201 	bic.w	r2, r2, #1
 8010912:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8010914:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8010918:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801091c:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
}
 8010920:	b003      	add	sp, #12
 8010922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010926:	692b      	ldr	r3, [r5, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d183      	bne.n	8010834 <HAL_UART_Transmit+0x54>
 801092c:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 801092e:	4699      	mov	r9, r3
 8010930:	e780      	b.n	8010834 <HAL_UART_Transmit+0x54>
      return HAL_TIMEOUT;
 8010932:	2003      	movs	r0, #3
 8010934:	e7ac      	b.n	8010890 <HAL_UART_Transmit+0xb0>
 8010936:	bf00      	nop

08010938 <UART_Start_Receive_DMA>:
{
 8010938:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801093a:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801093c:	2500      	movs	r5, #0
{
 801093e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8010940:	6581      	str	r1, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010942:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  huart->RxXferSize = Size;
 8010946:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801094a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 801094e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8010950:	b168      	cbz	r0, 801096e <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010952:	4e14      	ldr	r6, [pc, #80]	; (80109a4 <UART_Start_Receive_DMA+0x6c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010954:	4613      	mov	r3, r2
 8010956:	460a      	mov	r2, r1
 8010958:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801095a:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801095c:	4e12      	ldr	r6, [pc, #72]	; (80109a8 <UART_Start_Receive_DMA+0x70>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801095e:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8010960:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010962:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010964:	4e11      	ldr	r6, [pc, #68]	; (80109ac <UART_Start_Receive_DMA+0x74>)
 8010966:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010968:	f7fa ff12 	bl	800b790 <HAL_DMA_Start_IT>
 801096c:	b980      	cbnz	r0, 8010990 <UART_Start_Receive_DMA+0x58>
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801096e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8010970:	2000      	movs	r0, #0
 8010972:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801097c:	601a      	str	r2, [r3, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801097e:	689a      	ldr	r2, [r3, #8]
 8010980:	f042 0201 	orr.w	r2, r2, #1
 8010984:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010986:	689a      	ldr	r2, [r3, #8]
 8010988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801098c:	609a      	str	r2, [r3, #8]
}
 801098e:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010990:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 8010992:	2320      	movs	r3, #32
      return HAL_ERROR;
 8010994:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8010996:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801099a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      huart->gState = HAL_UART_STATE_READY;
 801099e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
 80109a4:	0800ffb9 	.word	0x0800ffb9
 80109a8:	0800ff9d 	.word	0x0800ff9d
 80109ac:	0800f86d 	.word	0x0800f86d

080109b0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop

080109b4 <HAL_UARTEx_RxFifoFullCallback>:
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop

080109b8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109bc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80109c0:	2a01      	cmp	r2, #1
 80109c2:	d017      	beq.n	80109f4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109c4:	6802      	ldr	r2, [r0, #0]
 80109c6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80109c8:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109ca:	2100      	movs	r1, #0
{
 80109cc:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80109ce:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80109d2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109d4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80109d6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109d8:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80109dc:	f024 0401 	bic.w	r4, r4, #1
 80109e0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109e2:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109e4:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80109e6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80109e8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80109ec:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 80109f0:	bc30      	pop	{r4, r5}
 80109f2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80109f4:	2002      	movs	r0, #2
}
 80109f6:	4770      	bx	lr

080109f8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109f8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80109fc:	2a01      	cmp	r2, #1
 80109fe:	d037      	beq.n	8010a70 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a00:	6802      	ldr	r2, [r0, #0]
 8010a02:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8010a04:	2024      	movs	r0, #36	; 0x24
{
 8010a06:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8010a08:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a0c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a0e:	6810      	ldr	r0, [r2, #0]
 8010a10:	f020 0001 	bic.w	r0, r0, #1
 8010a14:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a16:	6890      	ldr	r0, [r2, #8]
 8010a18:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8010a1c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a1e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a20:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a22:	b310      	cbz	r0, 8010a6a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a24:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a26:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a28:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a2c:	4911      	ldr	r1, [pc, #68]	; (8010a74 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a2e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a32:	4d11      	ldr	r5, [pc, #68]	; (8010a78 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a34:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a38:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a3c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a40:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a42:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a46:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a48:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a4c:	fbb1 f1f5 	udiv	r1, r1, r5
 8010a50:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8010a54:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8010a56:	2100      	movs	r1, #0
 8010a58:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a5c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8010a5e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8010a60:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8010a64:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8010a68:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8010a6a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8010a6c:	4608      	mov	r0, r1
 8010a6e:	e7ef      	b.n	8010a50 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8010a70:	2002      	movs	r0, #2
}
 8010a72:	4770      	bx	lr
 8010a74:	2400a018 	.word	0x2400a018
 8010a78:	2400a010 	.word	0x2400a010

08010a7c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8010a7c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8010a80:	2a01      	cmp	r2, #1
 8010a82:	d037      	beq.n	8010af4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a84:	6802      	ldr	r2, [r0, #0]
 8010a86:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8010a88:	2024      	movs	r0, #36	; 0x24
{
 8010a8a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8010a8c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a90:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8010a92:	6810      	ldr	r0, [r2, #0]
 8010a94:	f020 0001 	bic.w	r0, r0, #1
 8010a98:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a9a:	6890      	ldr	r0, [r2, #8]
 8010a9c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8010aa0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010aa2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010aa4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010aa6:	b310      	cbz	r0, 8010aee <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010aa8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010aaa:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aac:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ab0:	4911      	ldr	r1, [pc, #68]	; (8010af8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010ab2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8010ab6:	4d11      	ldr	r5, [pc, #68]	; (8010afc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ab8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010abc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010ac0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ac4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8010ac6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aca:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010acc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ad0:	fbb1 f1f5 	udiv	r1, r1, r5
 8010ad4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8010ad8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8010ada:	2100      	movs	r1, #0
 8010adc:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ae0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8010ae2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8010ae4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8010ae8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 8010aec:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8010aee:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8010af0:	4608      	mov	r0, r1
 8010af2:	e7ef      	b.n	8010ad4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8010af4:	2002      	movs	r0, #2
}
 8010af6:	4770      	bx	lr
 8010af8:	2400a018 	.word	0x2400a018
 8010afc:	2400a010 	.word	0x2400a010

08010b00 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8010b00:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b02:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8010b06:	2e20      	cmp	r6, #32
 8010b08:	d112      	bne.n	8010b30 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8010b0a:	b179      	cbz	r1, 8010b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
 8010b0c:	b172      	cbz	r2, 8010b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
    __HAL_LOCK(huart);
 8010b0e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8010b12:	4604      	mov	r4, r0
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d00b      	beq.n	8010b30 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010b1e:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010b20:	f7ff ff0a 	bl	8010938 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8010b24:	b918      	cbnz	r0, 8010b2e <HAL_UARTEx_ReceiveToIdle_DMA+0x2e>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d003      	beq.n	8010b34 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
      return HAL_ERROR;
 8010b2c:	2001      	movs	r0, #1
}
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8010b30:	2002      	movs	r0, #2
}
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	2210      	movs	r2, #16
 8010b38:	621a      	str	r2, [r3, #32]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	f042 0210 	orr.w	r2, r2, #16
 8010b40:	601a      	str	r2, [r3, #0]
}
 8010b42:	bd70      	pop	{r4, r5, r6, pc}

08010b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b44:	b084      	sub	sp, #16
 8010b46:	4684      	mov	ip, r0
 8010b48:	b500      	push	{lr}
 8010b4a:	f10d 0e08 	add.w	lr, sp, #8
 8010b4e:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b52:	9b07      	ldr	r3, [sp, #28]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d146      	bne.n	8010be6 <USB_CoreInit+0xa2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b58:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010b5a:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8010b5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8010b64:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b66:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010b68:	68c2      	ldr	r2, [r0, #12]
 8010b6a:	ea03 0302 	and.w	r3, r3, r2
 8010b6e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010b70:	68c3      	ldr	r3, [r0, #12]
 8010b72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010b76:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8010b78:	d061      	beq.n	8010c3e <USB_CoreInit+0xfa>
{
 8010b7a:	4b35      	ldr	r3, [pc, #212]	; (8010c50 <USB_CoreInit+0x10c>)
 8010b7c:	e001      	b.n	8010b82 <USB_CoreInit+0x3e>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	d062      	beq.n	8010c48 <USB_CoreInit+0x104>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b82:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	daf9      	bge.n	8010b7e <USB_CoreInit+0x3a>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b8a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8010b8e:	4a30      	ldr	r2, [pc, #192]	; (8010c50 <USB_CoreInit+0x10c>)
 8010b90:	f043 0301 	orr.w	r3, r3, #1
 8010b94:	f8cc 3010 	str.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 8010b98:	e001      	b.n	8010b9e <USB_CoreInit+0x5a>
 8010b9a:	3a01      	subs	r2, #1
 8010b9c:	d054      	beq.n	8010c48 <USB_CoreInit+0x104>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b9e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8010ba2:	f013 0301 	ands.w	r3, r3, #1
 8010ba6:	d1f8      	bne.n	8010b9a <USB_CoreInit+0x56>

  return HAL_OK;
 8010ba8:	4618      	mov	r0, r3
  if (cfg.dma_enable == 1U)
 8010baa:	9b05      	ldr	r3, [sp, #20]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d116      	bne.n	8010bde <USB_CoreInit+0x9a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010bb0:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010bb4:	4b27      	ldr	r3, [pc, #156]	; (8010c54 <USB_CoreInit+0x110>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010bb6:	b292      	uxth	r2, r2
 8010bb8:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010bbc:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010bc6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8010bca:	f043 0306 	orr.w	r3, r3, #6
 8010bce:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010bd2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8010bd6:	f043 0320 	orr.w	r3, r3, #32
 8010bda:	f8cc 3008 	str.w	r3, [ip, #8]
}
 8010bde:	f85d eb04 	ldr.w	lr, [sp], #4
 8010be2:	b004      	add	sp, #16
 8010be4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010be6:	68c2      	ldr	r2, [r0, #12]
 8010be8:	4b19      	ldr	r3, [pc, #100]	; (8010c50 <USB_CoreInit+0x10c>)
 8010bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bee:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 8010bf0:	e001      	b.n	8010bf6 <USB_CoreInit+0xb2>
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	d02a      	beq.n	8010c4c <USB_CoreInit+0x108>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010bf6:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8010bfa:	2a00      	cmp	r2, #0
 8010bfc:	daf9      	bge.n	8010bf2 <USB_CoreInit+0xae>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010bfe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8010c02:	4a13      	ldr	r2, [pc, #76]	; (8010c50 <USB_CoreInit+0x10c>)
 8010c04:	f043 0301 	orr.w	r3, r3, #1
 8010c08:	f8cc 3010 	str.w	r3, [ip, #16]
    if (++count > 200000U)
 8010c0c:	e001      	b.n	8010c12 <USB_CoreInit+0xce>
 8010c0e:	3a01      	subs	r2, #1
 8010c10:	d01c      	beq.n	8010c4c <USB_CoreInit+0x108>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c12:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8010c16:	f013 0301 	ands.w	r3, r3, #1
 8010c1a:	d1f8      	bne.n	8010c0e <USB_CoreInit+0xca>
  return HAL_OK;
 8010c1c:	4618      	mov	r0, r3
    if (cfg.battery_charging_enable == 0U)
 8010c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c20:	b933      	cbnz	r3, 8010c30 <USB_CoreInit+0xec>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c22:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8010c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c2a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8010c2e:	e7bc      	b.n	8010baa <USB_CoreInit+0x66>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c30:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8010c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c38:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8010c3c:	e7b5      	b.n	8010baa <USB_CoreInit+0x66>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010c3e:	68c3      	ldr	r3, [r0, #12]
 8010c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c44:	60c3      	str	r3, [r0, #12]
 8010c46:	e798      	b.n	8010b7a <USB_CoreInit+0x36>
      return HAL_TIMEOUT;
 8010c48:	2003      	movs	r0, #3
 8010c4a:	e7ae      	b.n	8010baa <USB_CoreInit+0x66>
 8010c4c:	2003      	movs	r0, #3
 8010c4e:	e7e6      	b.n	8010c1e <USB_CoreInit+0xda>
 8010c50:	00030d40 	.word	0x00030d40
 8010c54:	03ee0000 	.word	0x03ee0000

08010c58 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8010c58:	2a02      	cmp	r2, #2
{
 8010c5a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8010c5c:	d00b      	beq.n	8010c76 <USB_SetTurnaroundTime+0x1e>
 8010c5e:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010c62:	68d9      	ldr	r1, [r3, #12]
}
 8010c64:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010c66:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8010c6a:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010c6c:	68da      	ldr	r2, [r3, #12]
 8010c6e:	ea42 020c 	orr.w	r2, r2, ip
 8010c72:	60da      	str	r2, [r3, #12]
}
 8010c74:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c76:	4a23      	ldr	r2, [pc, #140]	; (8010d04 <USB_SetTurnaroundTime+0xac>)
 8010c78:	4823      	ldr	r0, [pc, #140]	; (8010d08 <USB_SetTurnaroundTime+0xb0>)
 8010c7a:	440a      	add	r2, r1
 8010c7c:	4282      	cmp	r2, r0
 8010c7e:	d92c      	bls.n	8010cda <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c80:	4a22      	ldr	r2, [pc, #136]	; (8010d0c <USB_SetTurnaroundTime+0xb4>)
 8010c82:	4823      	ldr	r0, [pc, #140]	; (8010d10 <USB_SetTurnaroundTime+0xb8>)
 8010c84:	440a      	add	r2, r1
 8010c86:	4282      	cmp	r2, r0
 8010c88:	d92a      	bls.n	8010ce0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c8a:	4a22      	ldr	r2, [pc, #136]	; (8010d14 <USB_SetTurnaroundTime+0xbc>)
 8010c8c:	4822      	ldr	r0, [pc, #136]	; (8010d18 <USB_SetTurnaroundTime+0xc0>)
 8010c8e:	440a      	add	r2, r1
 8010c90:	4282      	cmp	r2, r0
 8010c92:	d928      	bls.n	8010ce6 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c94:	4a21      	ldr	r2, [pc, #132]	; (8010d1c <USB_SetTurnaroundTime+0xc4>)
 8010c96:	4822      	ldr	r0, [pc, #136]	; (8010d20 <USB_SetTurnaroundTime+0xc8>)
 8010c98:	440a      	add	r2, r1
 8010c9a:	4282      	cmp	r2, r0
 8010c9c:	d326      	bcc.n	8010cec <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010c9e:	4a21      	ldr	r2, [pc, #132]	; (8010d24 <USB_SetTurnaroundTime+0xcc>)
 8010ca0:	4821      	ldr	r0, [pc, #132]	; (8010d28 <USB_SetTurnaroundTime+0xd0>)
 8010ca2:	440a      	add	r2, r1
 8010ca4:	4282      	cmp	r2, r0
 8010ca6:	d924      	bls.n	8010cf2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010ca8:	4a20      	ldr	r2, [pc, #128]	; (8010d2c <USB_SetTurnaroundTime+0xd4>)
 8010caa:	4821      	ldr	r0, [pc, #132]	; (8010d30 <USB_SetTurnaroundTime+0xd8>)
 8010cac:	440a      	add	r2, r1
 8010cae:	4282      	cmp	r2, r0
 8010cb0:	d322      	bcc.n	8010cf8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010cb2:	4a20      	ldr	r2, [pc, #128]	; (8010d34 <USB_SetTurnaroundTime+0xdc>)
 8010cb4:	4820      	ldr	r0, [pc, #128]	; (8010d38 <USB_SetTurnaroundTime+0xe0>)
 8010cb6:	440a      	add	r2, r1
 8010cb8:	4282      	cmp	r2, r0
 8010cba:	d3d0      	bcc.n	8010c5e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cbc:	4a1f      	ldr	r2, [pc, #124]	; (8010d3c <USB_SetTurnaroundTime+0xe4>)
 8010cbe:	4820      	ldr	r0, [pc, #128]	; (8010d40 <USB_SetTurnaroundTime+0xe8>)
 8010cc0:	440a      	add	r2, r1
 8010cc2:	4282      	cmp	r2, r0
 8010cc4:	d31b      	bcc.n	8010cfe <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010cc6:	4a1f      	ldr	r2, [pc, #124]	; (8010d44 <USB_SetTurnaroundTime+0xec>)
 8010cc8:	481f      	ldr	r0, [pc, #124]	; (8010d48 <USB_SetTurnaroundTime+0xf0>)
 8010cca:	440a      	add	r2, r1
 8010ccc:	4282      	cmp	r2, r0
 8010cce:	bf34      	ite	cc
 8010cd0:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8010cd4:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8010cd8:	e7c3      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010cda:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 8010cde:	e7c0      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010ce0:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8010ce4:	e7bd      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010ce6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8010cea:	e7ba      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010cec:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8010cf0:	e7b7      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010cf2:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8010cf6:	e7b4      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010cf8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8010cfc:	e7b1      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010cfe:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8010d02:	e7ae      	b.n	8010c62 <USB_SetTurnaroundTime+0xa>
 8010d04:	ff275340 	.word	0xff275340
 8010d08:	000c34ff 	.word	0x000c34ff
 8010d0c:	ff1b1e40 	.word	0xff1b1e40
 8010d10:	000f423f 	.word	0x000f423f
 8010d14:	ff0bdc00 	.word	0xff0bdc00
 8010d18:	00124f7f 	.word	0x00124f7f
 8010d1c:	fef98c80 	.word	0xfef98c80
 8010d20:	0013d620 	.word	0x0013d620
 8010d24:	fee5b660 	.word	0xfee5b660
 8010d28:	0016e35f 	.word	0x0016e35f
 8010d2c:	feced300 	.word	0xfeced300
 8010d30:	001b7740 	.word	0x001b7740
 8010d34:	feb35bc0 	.word	0xfeb35bc0
 8010d38:	002191c0 	.word	0x002191c0
 8010d3c:	fe91ca00 	.word	0xfe91ca00
 8010d40:	00387520 	.word	0x00387520
 8010d44:	fe5954e0 	.word	0xfe5954e0
 8010d48:	00419ce0 	.word	0x00419ce0

08010d4c <USB_EnableGlobalInt>:
{
 8010d4c:	4603      	mov	r3, r0
}
 8010d4e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d50:	689a      	ldr	r2, [r3, #8]
 8010d52:	f042 0201 	orr.w	r2, r2, #1
 8010d56:	609a      	str	r2, [r3, #8]
}
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop

08010d5c <USB_DisableGlobalInt>:
{
 8010d5c:	4603      	mov	r3, r0
}
 8010d5e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010d60:	689a      	ldr	r2, [r3, #8]
 8010d62:	f022 0201 	bic.w	r2, r2, #1
 8010d66:	609a      	str	r2, [r3, #8]
}
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop

08010d6c <USB_SetCurrentMode>:
{
 8010d6c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010d6e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8010d70:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010d72:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010d76:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8010d78:	d00b      	beq.n	8010d92 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8010d7a:	b941      	cbnz	r1, 8010d8e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010d7c:	68c3      	ldr	r3, [r0, #12]
 8010d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d82:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8010d84:	2032      	movs	r0, #50	; 0x32
 8010d86:	f7f9 feb7 	bl	800aaf8 <HAL_Delay>
  return HAL_OK;
 8010d8a:	2000      	movs	r0, #0
}
 8010d8c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8010d8e:	2001      	movs	r0, #1
}
 8010d90:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010d92:	68c3      	ldr	r3, [r0, #12]
 8010d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010d98:	60c3      	str	r3, [r0, #12]
 8010d9a:	e7f3      	b.n	8010d84 <USB_SetCurrentMode+0x18>

08010d9c <USB_DevInit>:
{
 8010d9c:	b084      	sub	sp, #16
 8010d9e:	4684      	mov	ip, r0
 8010da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010da4:	ac08      	add	r4, sp, #32
 8010da6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8010daa:	2300      	movs	r3, #0
 8010dac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010dae:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8010db2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8010db6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8010dba:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8010dbe:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8010dc2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8010dc6:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8010dca:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8010dce:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8010dd2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8010dd6:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8010dda:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8010dde:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8010de2:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8010de6:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8010dea:	2c00      	cmp	r4, #0
 8010dec:	f040 80ad 	bne.w	8010f4a <USB_DevInit+0x1ae>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010df0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8010df4:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8010df8:	f043 0302 	orr.w	r3, r3, #2
 8010dfc:	f8ce 3004 	str.w	r3, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e06:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e08:	6803      	ldr	r3, [r0, #0]
 8010e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e0e:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e10:	6803      	ldr	r3, [r0, #0]
 8010e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e16:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f8cc 3e00 	str.w	r3, [ip, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010e1e:	f8de 3000 	ldr.w	r3, [lr]
 8010e22:	f8ce 3000 	str.w	r3, [lr]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	f000 8095 	beq.w	8010f58 <USB_DevInit+0x1bc>
  USBx_DEVICE->DCFG |= speed;
 8010e2e:	f8de 3000 	ldr.w	r3, [lr]
 8010e32:	f043 0303 	orr.w	r3, r3, #3
 8010e36:	f8ce 3000 	str.w	r3, [lr]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010e3a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8010e3e:	f8cc 3010 	str.w	r3, [ip, #16]
 8010e42:	4b4e      	ldr	r3, [pc, #312]	; (8010f7c <USB_DevInit+0x1e0>)
 8010e44:	e002      	b.n	8010e4c <USB_DevInit+0xb0>
    if (++count > 200000U)
 8010e46:	3b01      	subs	r3, #1
 8010e48:	f000 8094 	beq.w	8010f74 <USB_DevInit+0x1d8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e4c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8010e50:	f010 0020 	ands.w	r0, r0, #32
 8010e54:	d1f7      	bne.n	8010e46 <USB_DevInit+0xaa>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010e56:	2310      	movs	r3, #16
 8010e58:	f8cc 3010 	str.w	r3, [ip, #16]
 8010e5c:	4b47      	ldr	r3, [pc, #284]	; (8010f7c <USB_DevInit+0x1e0>)
 8010e5e:	e002      	b.n	8010e66 <USB_DevInit+0xca>
    if (++count > 200000U)
 8010e60:	3b01      	subs	r3, #1
 8010e62:	f000 8089 	beq.w	8010f78 <USB_DevInit+0x1dc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010e66:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8010e6a:	06d2      	lsls	r2, r2, #27
 8010e6c:	d4f8      	bmi.n	8010e60 <USB_DevInit+0xc4>
  USBx_DEVICE->DIEPMSK = 0U;
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010e74:	f8ce 2014 	str.w	r2, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010e78:	f8ce 201c 	str.w	r2, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e7c:	b1d1      	cbz	r1, 8010eb4 <USB_DevInit+0x118>
 8010e7e:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010e82:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010e86:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e8a:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010e8c:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8010e90:	e006      	b.n	8010ea0 <USB_DevInit+0x104>
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e92:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e94:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010e96:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010e98:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e9a:	3320      	adds	r3, #32
 8010e9c:	428a      	cmp	r2, r1
 8010e9e:	d038      	beq.n	8010f12 <USB_DevInit+0x176>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ea0:	681d      	ldr	r5, [r3, #0]
 8010ea2:	2d00      	cmp	r5, #0
 8010ea4:	daf5      	bge.n	8010e92 <USB_DevInit+0xf6>
      if (i == 0U)
 8010ea6:	b112      	cbz	r2, 8010eae <USB_DevInit+0x112>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010ea8:	f8c3 8000 	str.w	r8, [r3]
 8010eac:	e7f2      	b.n	8010e94 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010eae:	f8c3 9000 	str.w	r9, [r3]
 8010eb2:	e7ef      	b.n	8010e94 <USB_DevInit+0xf8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010eb4:	f8de 3010 	ldr.w	r3, [lr, #16]
  USBx->GINTMSK = 0U;
 8010eb8:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ebe:	f8ce 3010 	str.w	r3, [lr, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010ec2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8010ec6:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010eca:	f8cc 3014 	str.w	r3, [ip, #20]
  if (cfg.dma_enable == 0U)
 8010ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ed0:	b92b      	cbnz	r3, 8010ede <USB_DevInit+0x142>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010ed2:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010ed6:	f043 0310 	orr.w	r3, r3, #16
 8010eda:	f8cc 3018 	str.w	r3, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010ede:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8010ee2:	4b27      	ldr	r3, [pc, #156]	; (8010f80 <USB_DevInit+0x1e4>)
 8010ee4:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8010ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010ee8:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.Sof_enable != 0U)
 8010eec:	b12a      	cbz	r2, 8010efa <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010eee:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010ef2:	f043 0308 	orr.w	r3, r3, #8
 8010ef6:	f8cc 3018 	str.w	r3, [ip, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8010efa:	2c01      	cmp	r4, #1
 8010efc:	d105      	bne.n	8010f0a <USB_DevInit+0x16e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010efe:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8010f02:	4b20      	ldr	r3, [pc, #128]	; (8010f84 <USB_DevInit+0x1e8>)
 8010f04:	4313      	orrs	r3, r2
 8010f06:	f8cc 3018 	str.w	r3, [ip, #24]
}
 8010f0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f0e:	b004      	add	sp, #16
 8010f10:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f12:	2200      	movs	r2, #0
 8010f14:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010f18:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010f1c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010f20:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010f22:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 8010f26:	e006      	b.n	8010f36 <USB_DevInit+0x19a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010f28:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f2a:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010f2c:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010f2e:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f30:	3320      	adds	r3, #32
 8010f32:	428a      	cmp	r2, r1
 8010f34:	d0be      	beq.n	8010eb4 <USB_DevInit+0x118>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f36:	681d      	ldr	r5, [r3, #0]
 8010f38:	2d00      	cmp	r5, #0
 8010f3a:	daf5      	bge.n	8010f28 <USB_DevInit+0x18c>
      if (i == 0U)
 8010f3c:	b112      	cbz	r2, 8010f44 <USB_DevInit+0x1a8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010f3e:	f8c3 8000 	str.w	r8, [r3]
 8010f42:	e7f2      	b.n	8010f2a <USB_DevInit+0x18e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010f44:	f8c3 9000 	str.w	r9, [r3]
 8010f48:	e7ef      	b.n	8010f2a <USB_DevInit+0x18e>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f4c:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010f54:	6383      	str	r3, [r0, #56]	; 0x38
 8010f56:	e75f      	b.n	8010e18 <USB_DevInit+0x7c>
    if (cfg.speed == USBD_HS_SPEED)
 8010f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f5a:	b923      	cbnz	r3, 8010f66 <USB_DevInit+0x1ca>
  USBx_DEVICE->DCFG |= speed;
 8010f5c:	f8de 3000 	ldr.w	r3, [lr]
 8010f60:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 8010f64:	e769      	b.n	8010e3a <USB_DevInit+0x9e>
  USBx_DEVICE->DCFG |= speed;
 8010f66:	f8de 3000 	ldr.w	r3, [lr]
 8010f6a:	f043 0301 	orr.w	r3, r3, #1
 8010f6e:	f8ce 3000 	str.w	r3, [lr]
  return HAL_OK;
 8010f72:	e762      	b.n	8010e3a <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8010f74:	2001      	movs	r0, #1
 8010f76:	e76e      	b.n	8010e56 <USB_DevInit+0xba>
    ret = HAL_ERROR;
 8010f78:	2001      	movs	r0, #1
 8010f7a:	e778      	b.n	8010e6e <USB_DevInit+0xd2>
 8010f7c:	00030d40 	.word	0x00030d40
 8010f80:	803c3800 	.word	0x803c3800
 8010f84:	40000004 	.word	0x40000004

08010f88 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010f88:	0189      	lsls	r1, r1, #6
 8010f8a:	4a07      	ldr	r2, [pc, #28]	; (8010fa8 <USB_FlushTxFifo+0x20>)
 8010f8c:	f041 0120 	orr.w	r1, r1, #32
 8010f90:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8010f92:	e001      	b.n	8010f98 <USB_FlushTxFifo+0x10>
 8010f94:	3a01      	subs	r2, #1
 8010f96:	d005      	beq.n	8010fa4 <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010f98:	6903      	ldr	r3, [r0, #16]
 8010f9a:	f013 0320 	ands.w	r3, r3, #32
 8010f9e:	d1f9      	bne.n	8010f94 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	4770      	bx	lr
      return HAL_TIMEOUT;
 8010fa4:	2003      	movs	r0, #3
}
 8010fa6:	4770      	bx	lr
 8010fa8:	00030d40 	.word	0x00030d40

08010fac <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010fac:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010fb0:	f013 0006 	ands.w	r0, r3, #6
 8010fb4:	d004      	beq.n	8010fc0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8010fb6:	f013 0f02 	tst.w	r3, #2
 8010fba:	bf14      	ite	ne
 8010fbc:	2002      	movne	r0, #2
 8010fbe:	200f      	moveq	r0, #15
}
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop

08010fc4 <USB_ActivateEndpoint>:
{
 8010fc4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8010fc6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8010fc8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d020      	beq.n	8011010 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010fce:	f002 0c0f 	and.w	ip, r2, #15
 8010fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010fd6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010fda:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010fde:	fa03 f30c 	lsl.w	r3, r3, ip
 8010fe2:	4323      	orrs	r3, r4
 8010fe4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010fe8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8010fec:	041b      	lsls	r3, r3, #16
 8010fee:	d40c      	bmi.n	801100a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010ff0:	688b      	ldr	r3, [r1, #8]
 8010ff2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8010ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010ffa:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010ffc:	4914      	ldr	r1, [pc, #80]	; (8011050 <USB_ActivateEndpoint+0x8c>)
 8010ffe:	4323      	orrs	r3, r4
 8011000:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8011004:	4319      	orrs	r1, r3
 8011006:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 801100a:	2000      	movs	r0, #0
 801100c:	bc30      	pop	{r4, r5}
 801100e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011010:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8011014:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011018:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801101c:	40ab      	lsls	r3, r5
 801101e:	69e5      	ldr	r5, [r4, #28]
 8011020:	432b      	orrs	r3, r5
 8011022:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011024:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8011028:	041c      	lsls	r4, r3, #16
 801102a:	d4ee      	bmi.n	801100a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801102c:	688b      	ldr	r3, [r1, #8]
 801102e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8011032:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011036:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011038:	4905      	ldr	r1, [pc, #20]	; (8011050 <USB_ActivateEndpoint+0x8c>)
 801103a:	432b      	orrs	r3, r5
 801103c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8011040:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8011044:	4311      	orrs	r1, r2
}
 8011046:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011048:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 801104c:	2000      	movs	r0, #0
 801104e:	4770      	bx	lr
 8011050:	10008000 	.word	0x10008000

08011054 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8011054:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011056:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011058:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801105a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801105e:	d02a      	beq.n	80110b6 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011060:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8011064:	2a00      	cmp	r2, #0
 8011066:	db19      	blt.n	801109c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801106c:	f003 030f 	and.w	r3, r3, #15
 8011070:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8011074:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011078:	4a23      	ldr	r2, [pc, #140]	; (8011108 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801107a:	ea21 0103 	bic.w	r1, r1, r3
 801107e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011082:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8011086:	ea21 0303 	bic.w	r3, r1, r3
 801108a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 801108e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011090:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8011094:	401a      	ands	r2, r3
 8011096:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 801109a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801109c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80110a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80110a4:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80110a8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80110ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80110b0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 80110b4:	e7d8      	b.n	8011068 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110b6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80110ba:	2a00      	cmp	r2, #0
 80110bc:	da0b      	bge.n	80110d6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80110be:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80110c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80110c6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80110ca:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80110ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80110d2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80110d6:	f003 020f 	and.w	r2, r3, #15
 80110da:	2301      	movs	r3, #1
 80110dc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80110e0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80110e2:	4a0a      	ldr	r2, [pc, #40]	; (801110c <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80110e4:	ea21 0103 	bic.w	r1, r1, r3
 80110e8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80110ec:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80110f0:	ea21 0303 	bic.w	r3, r1, r3
 80110f4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80110f8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80110fa:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80110fe:	401a      	ands	r2, r3
 8011100:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	eff37800 	.word	0xeff37800
 801110c:	ec337800 	.word	0xec337800

08011110 <USB_EPStartXfer>:
{
 8011110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8011114:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011116:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 801111a:	2b01      	cmp	r3, #1
 801111c:	d051      	beq.n	80111c2 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801111e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8011122:	4c84      	ldr	r4, [pc, #528]	; (8011334 <USB_EPStartXfer+0x224>)
 8011124:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8011128:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 801112c:	402c      	ands	r4, r5
 801112e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011130:	4c81      	ldr	r4, [pc, #516]	; (8011338 <USB_EPStartXfer+0x228>)
 8011132:	691d      	ldr	r5, [r3, #16]
 8011134:	402c      	ands	r4, r5
 8011136:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8011138:	694c      	ldr	r4, [r1, #20]
 801113a:	b384      	cbz	r4, 801119e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801113c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 801113e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011140:	4e7e      	ldr	r6, [pc, #504]	; (801133c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011142:	442c      	add	r4, r5
 8011144:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011148:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801114c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8011150:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011152:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011156:	691d      	ldr	r5, [r3, #16]
 8011158:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801115c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011160:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011162:	691d      	ldr	r5, [r3, #16]
 8011164:	ea44 0405 	orr.w	r4, r4, r5
 8011168:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 801116a:	d025      	beq.n	80111b8 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 801116c:	78cb      	ldrb	r3, [r1, #3]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d10c      	bne.n	801118c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011172:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8011176:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801117a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801117e:	bf0c      	ite	eq
 8011180:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011184:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011188:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801118c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8011190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011194:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8011198:	2000      	movs	r0, #0
 801119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801119e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 80111a0:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80111a2:	691d      	ldr	r5, [r3, #16]
 80111a4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80111a8:	ea44 0405 	orr.w	r4, r4, r5
 80111ac:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80111ae:	691c      	ldr	r4, [r3, #16]
 80111b0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80111b4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80111b6:	d1d9      	bne.n	801116c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 80111b8:	68ca      	ldr	r2, [r1, #12]
 80111ba:	2a00      	cmp	r2, #0
 80111bc:	d0d6      	beq.n	801116c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80111be:	615a      	str	r2, [r3, #20]
 80111c0:	e7d4      	b.n	801116c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 80111c2:	694d      	ldr	r5, [r1, #20]
 80111c4:	2d00      	cmp	r5, #0
 80111c6:	d03d      	beq.n	8011244 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111c8:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 80111cc:	4e59      	ldr	r6, [pc, #356]	; (8011334 <USB_EPStartXfer+0x224>)
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80111ce:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111d2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111d6:	4f58      	ldr	r7, [pc, #352]	; (8011338 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111d8:	ea08 0606 	and.w	r6, r8, r6
 80111dc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80111e0:	eb05 060e 	add.w	r6, r5, lr
 80111e4:	3e01      	subs	r6, #1
 80111e6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111ea:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80111ee:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80111f0:	4e52      	ldr	r6, [pc, #328]	; (801133c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80111f2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80111f6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 80111fa:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 80111fe:	433e      	orrs	r6, r7
 8011200:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011204:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8011208:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 801120c:	433e      	orrs	r6, r7
 801120e:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011212:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8011216:	f891 e003 	ldrb.w	lr, [r1, #3]
 801121a:	f1be 0f01 	cmp.w	lr, #1
 801121e:	d057      	beq.n	80112d0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8011220:	2a01      	cmp	r2, #1
 8011222:	d072      	beq.n	801130a <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011224:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011228:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801122c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011230:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011234:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011238:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 801123c:	4313      	orrs	r3, r2
 801123e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8011242:	e7a9      	b.n	8011198 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011244:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8011248:	4e3b      	ldr	r6, [pc, #236]	; (8011338 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801124a:	4c3a      	ldr	r4, [pc, #232]	; (8011334 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 801124c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801124e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8011252:	ea06 0607 	and.w	r6, r6, r7
 8011256:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801125a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 801125e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8011262:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011266:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 801126a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801126e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011272:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8011276:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 801127a:	d03a      	beq.n	80112f2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801127c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8011280:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011284:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8011288:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801128c:	d184      	bne.n	8011198 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801128e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8011292:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011296:	6833      	ldr	r3, [r6, #0]
 8011298:	bf0c      	ite	eq
 801129a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801129e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80112a2:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 80112a4:	2a00      	cmp	r2, #0
 80112a6:	f47f af77 	bne.w	8011198 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 80112aa:	b2ad      	uxth	r5, r5
 80112ac:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 80112ae:	08ad      	lsrs	r5, r5, #2
 80112b0:	f43f af72 	beq.w	8011198 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80112b4:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80112b6:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 80112ba:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80112be:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80112c2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 80112c6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80112c8:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 80112cc:	d1f9      	bne.n	80112c2 <USB_EPStartXfer+0x1b2>
 80112ce:	e763      	b.n	8011198 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80112d0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 80112d2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80112d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80112d8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80112da:	6933      	ldr	r3, [r6, #16]
 80112dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80112e0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 80112e2:	d017      	beq.n	8011314 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80112e4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80112e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80112ec:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80112f0:	e7cd      	b.n	801128e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 80112f2:	690b      	ldr	r3, [r1, #16]
 80112f4:	b963      	cbnz	r3, 8011310 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 80112f6:	f1be 0f01 	cmp.w	lr, #1
 80112fa:	d00e      	beq.n	801131a <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80112fc:	6833      	ldr	r3, [r6, #0]
}
 80112fe:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011304:	6033      	str	r3, [r6, #0]
}
 8011306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 801130a:	690b      	ldr	r3, [r1, #16]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d0f5      	beq.n	80112fc <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011310:	6173      	str	r3, [r6, #20]
 8011312:	e7f0      	b.n	80112f6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8011314:	690b      	ldr	r3, [r1, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1fa      	bne.n	8011310 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801131a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801131e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011322:	6833      	ldr	r3, [r6, #0]
 8011324:	bf0c      	ite	eq
 8011326:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801132a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 801132e:	6033      	str	r3, [r6, #0]
 8011330:	e7e4      	b.n	80112fc <USB_EPStartXfer+0x1ec>
 8011332:	bf00      	nop
 8011334:	fff80000 	.word	0xfff80000
 8011338:	e007ffff 	.word	0xe007ffff
 801133c:	1ff80000 	.word	0x1ff80000

08011340 <USB_EP0StartXfer>:
{
 8011340:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8011342:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011344:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011346:	2c01      	cmp	r4, #1
 8011348:	d026      	beq.n	8011398 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801134a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 801134e:	4c57      	ldr	r4, [pc, #348]	; (80114ac <USB_EP0StartXfer+0x16c>)
 8011350:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8011354:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8011358:	402c      	ands	r4, r5
 801135a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801135c:	4c54      	ldr	r4, [pc, #336]	; (80114b0 <USB_EP0StartXfer+0x170>)
 801135e:	691d      	ldr	r5, [r3, #16]
 8011360:	402c      	ands	r4, r5
 8011362:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8011364:	694c      	ldr	r4, [r1, #20]
 8011366:	b9a4      	cbnz	r4, 8011392 <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 8011368:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801136a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801136c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8011370:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011372:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8011376:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011378:	691d      	ldr	r5, [r3, #16]
 801137a:	ea44 0405 	orr.w	r4, r4, r5
 801137e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8011380:	d049      	beq.n	8011416 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011382:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801138a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801138e:	2000      	movs	r0, #0
 8011390:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 8011392:	688c      	ldr	r4, [r1, #8]
 8011394:	614c      	str	r4, [r1, #20]
 8011396:	e7e8      	b.n	801136a <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 8011398:	694c      	ldr	r4, [r1, #20]
 801139a:	2c00      	cmp	r4, #0
 801139c:	d040      	beq.n	8011420 <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801139e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80113a2:	4f42      	ldr	r7, [pc, #264]	; (80114ac <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 80113a4:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80113a8:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80113ac:	4e40      	ldr	r6, [pc, #256]	; (80114b0 <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 80113ae:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80113b0:	ea0c 0707 	and.w	r7, ip, r7
 80113b4:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 80113b8:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80113bc:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 80113c0:	ea06 0607 	and.w	r6, r6, r7
 80113c4:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 80113c8:	d958      	bls.n	801147c <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80113ca:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 80113ce:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 80113d0:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80113d4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80113d8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80113dc:	f3ce 0412 	ubfx	r4, lr, #0, #19
 80113e0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80113e4:	ea44 0406 	orr.w	r4, r4, r6
 80113e8:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 80113ec:	d03a      	beq.n	8011464 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113ee:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80113f2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80113f6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80113fa:	f1be 0f00 	cmp.w	lr, #0
 80113fe:	d0c6      	beq.n	801138e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011400:	f003 010f 	and.w	r1, r3, #15
 8011404:	2301      	movs	r3, #1
 8011406:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 801140a:	408b      	lsls	r3, r1
 801140c:	4313      	orrs	r3, r2
 801140e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8011412:	2000      	movs	r0, #0
 8011414:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 8011416:	68ca      	ldr	r2, [r1, #12]
 8011418:	2a00      	cmp	r2, #0
 801141a:	d0b2      	beq.n	8011382 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801141c:	615a      	str	r2, [r3, #20]
 801141e:	e7b0      	b.n	8011382 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011420:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8011424:	4b22      	ldr	r3, [pc, #136]	; (80114b0 <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 8011426:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011428:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 801142c:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 8011430:	ea03 0304 	and.w	r3, r3, r4
 8011434:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011438:	f8dc 3010 	ldr.w	r3, [ip, #16]
 801143c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011440:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011444:	4b19      	ldr	r3, [pc, #100]	; (80114ac <USB_EP0StartXfer+0x16c>)
 8011446:	f8dc 4010 	ldr.w	r4, [ip, #16]
 801144a:	ea03 0304 	and.w	r3, r3, r4
 801144e:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 8011452:	d007      	beq.n	8011464 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011454:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8011458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801145c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8011460:	2000      	movs	r0, #0
 8011462:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8011464:	690b      	ldr	r3, [r1, #16]
 8011466:	b10b      	cbz	r3, 801146c <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011468:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801146c:	f8dc 3000 	ldr.w	r3, [ip]
}
 8011470:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011476:	f8cc 3000 	str.w	r3, [ip]
}
 801147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801147c:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011480:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8011484:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011486:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801148a:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801148e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8011492:	ea44 0406 	orr.w	r4, r4, r6
 8011496:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 801149a:	d0e3      	beq.n	8011464 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801149c:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80114a0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80114a4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80114a8:	e7aa      	b.n	8011400 <USB_EP0StartXfer+0xc0>
 80114aa:	bf00      	nop
 80114ac:	fff80000 	.word	0xfff80000
 80114b0:	e007ffff 	.word	0xe007ffff

080114b4 <USB_WritePacket>:
{
 80114b4:	b410      	push	{r4}
 80114b6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80114ba:	b964      	cbnz	r4, 80114d6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80114bc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80114be:	089b      	lsrs	r3, r3, #2
 80114c0:	d009      	beq.n	80114d6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80114c2:	3201      	adds	r2, #1
 80114c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80114c8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80114cc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80114d0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80114d2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80114d4:	d1fa      	bne.n	80114cc <USB_WritePacket+0x18>
}
 80114d6:	2000      	movs	r0, #0
 80114d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop

080114e0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 80114e0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 80114e8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 80114ec:	d01c      	beq.n	8011528 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80114ee:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 80114f2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 80114f4:	2300      	movs	r3, #0
 80114f6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80114f8:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 80114fc:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80114fe:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8011502:	d1f8      	bne.n	80114f6 <USB_ReadPacket+0x16>
    pDest++;
 8011504:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8011508:	b16e      	cbz	r6, 8011526 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801150a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 801150e:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011510:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 8011512:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011514:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 8011516:	b12b      	cbz	r3, 8011524 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011518:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 801151a:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801151c:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 801151e:	d001      	beq.n	8011524 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011520:	0c12      	lsrs	r2, r2, #16
 8011522:	7082      	strb	r2, [r0, #2]
      pDest++;
 8011524:	4430      	add	r0, r6
}
 8011526:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8011528:	4608      	mov	r0, r1
 801152a:	e7ed      	b.n	8011508 <USB_ReadPacket+0x28>

0801152c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 801152c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801152e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011530:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011532:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8011536:	d00c      	beq.n	8011552 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011538:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 801153c:	b10b      	cbz	r3, 8011542 <USB_EPSetStall+0x16>
 801153e:	2a00      	cmp	r2, #0
 8011540:	da14      	bge.n	801156c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011542:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801154a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801154e:	2000      	movs	r0, #0
 8011550:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011552:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8011556:	2a00      	cmp	r2, #0
 8011558:	db00      	blt.n	801155c <USB_EPSetStall+0x30>
 801155a:	b973      	cbnz	r3, 801157a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801155c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8011560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011564:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8011568:	2000      	movs	r0, #0
 801156a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801156c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011574:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8011578:	e7e3      	b.n	8011542 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801157a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801157e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011582:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011586:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801158a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801158e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8011592:	e7e9      	b.n	8011568 <USB_EPSetStall+0x3c>

08011594 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8011594:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011596:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011598:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801159a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801159e:	d013      	beq.n	80115c8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80115a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80115a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80115a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80115ac:	78cb      	ldrb	r3, [r1, #3]
 80115ae:	3b02      	subs	r3, #2
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d901      	bls.n	80115b8 <USB_EPClearStall+0x24>
}
 80115b4:	2000      	movs	r0, #0
 80115b6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80115b8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80115bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80115c0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80115c4:	2000      	movs	r0, #0
 80115c6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80115c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80115cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80115d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80115d4:	78cb      	ldrb	r3, [r1, #3]
 80115d6:	3b02      	subs	r3, #2
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d8eb      	bhi.n	80115b4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80115dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80115e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80115e4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80115e8:	2000      	movs	r0, #0
 80115ea:	4770      	bx	lr

080115ec <USB_SetDevAddress>:
{
 80115ec:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80115ee:	0109      	lsls	r1, r1, #4
}
 80115f0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80115f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80115f6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80115fa:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80115fe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011602:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8011606:	4311      	orrs	r1, r2
 8011608:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop

08011610 <USB_DevConnect>:
{
 8011610:	4603      	mov	r3, r0
}
 8011612:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011614:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011618:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801161c:	f022 0203 	bic.w	r2, r2, #3
 8011620:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011624:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8011628:	f023 0302 	bic.w	r3, r3, #2
 801162c:	604b      	str	r3, [r1, #4]
}
 801162e:	4770      	bx	lr

08011630 <USB_DevDisconnect>:
{
 8011630:	4603      	mov	r3, r0
}
 8011632:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011634:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011638:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801163c:	f022 0203 	bic.w	r2, r2, #3
 8011640:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011644:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8011648:	f043 0302 	orr.w	r3, r3, #2
 801164c:	604b      	str	r3, [r1, #4]
}
 801164e:	4770      	bx	lr

08011650 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8011650:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8011652:	6980      	ldr	r0, [r0, #24]
}
 8011654:	4010      	ands	r0, r2
 8011656:	4770      	bx	lr

08011658 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8011658:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801165c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8011660:	4018      	ands	r0, r3
}
 8011662:	0c00      	lsrs	r0, r0, #16
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop

08011668 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8011668:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801166c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8011670:	4018      	ands	r0, r3
}
 8011672:	b280      	uxth	r0, r0
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop

08011678 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011678:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801167c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011680:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011684:	6940      	ldr	r0, [r0, #20]
}
 8011686:	4010      	ands	r0, r2
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop

0801168c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 801168c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011690:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011694:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011698:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801169c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80116a0:	40cb      	lsrs	r3, r1
 80116a2:	01db      	lsls	r3, r3, #7
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	4313      	orrs	r3, r2
}
 80116a8:	4018      	ands	r0, r3
 80116aa:	4770      	bx	lr

080116ac <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80116ac:	6940      	ldr	r0, [r0, #20]
}
 80116ae:	f000 0001 	and.w	r0, r0, #1
 80116b2:	4770      	bx	lr

080116b4 <USB_ActivateSetup>:
{
 80116b4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80116b6:	4a09      	ldr	r2, [pc, #36]	; (80116dc <USB_ActivateSetup+0x28>)
}
 80116b8:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80116ba:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 80116be:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80116c0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80116c4:	4022      	ands	r2, r4
}
 80116c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80116ca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80116ce:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80116d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116d6:	604b      	str	r3, [r1, #4]
}
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	fffff800 	.word	0xfffff800

080116e0 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80116e0:	4b14      	ldr	r3, [pc, #80]	; (8011734 <USB_EP0_OutStart+0x54>)
{
 80116e2:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80116e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80116e6:	429c      	cmp	r4, r3
 80116e8:	d81a      	bhi.n	8011720 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80116ea:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80116ee:	2300      	movs	r3, #0
  if (dma == 1U)
 80116f0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80116f2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80116f4:	6903      	ldr	r3, [r0, #16]
 80116f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116fa:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80116fc:	6903      	ldr	r3, [r0, #16]
 80116fe:	f043 0318 	orr.w	r3, r3, #24
 8011702:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011704:	6903      	ldr	r3, [r0, #16]
 8011706:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801170a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 801170c:	d104      	bne.n	8011718 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801170e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011710:	6803      	ldr	r3, [r0, #0]
 8011712:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011716:	6003      	str	r3, [r0, #0]
}
 8011718:	2000      	movs	r0, #0
 801171a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801171e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011720:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011724:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8011728:	2b00      	cmp	r3, #0
 801172a:	dae0      	bge.n	80116ee <USB_EP0_OutStart+0xe>
}
 801172c:	2000      	movs	r0, #0
 801172e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	4f54300a 	.word	0x4f54300a

08011738 <get_cmd_state>:

        return false;
}

static uint8_t get_cmd_state(struct cat_object *self, size_t i)
{
 8011738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801173c:	4604      	mov	r4, r0
 801173e:	460e      	mov	r6, r1
        uint8_t s;

        assert(self != NULL);
 8011740:	f7f8 faf4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011744:	2c00      	cmp	r4, #0
 8011746:	f000 80fe 	beq.w	8011946 <get_cmd_state+0x20e>
        assert(i < self->commands_num);
 801174a:	f7f8 faef 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801174e:	f104 0020 	add.w	r0, r4, #32
 8011752:	08c2      	lsrs	r2, r0, #3
 8011754:	f000 0307 	and.w	r3, r0, #7
 8011758:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801175c:	3303      	adds	r3, #3
 801175e:	f992 2000 	ldrsb.w	r2, [r2]
 8011762:	4293      	cmp	r3, r2
 8011764:	db02      	blt.n	801176c <get_cmd_state+0x34>
 8011766:	2a00      	cmp	r2, #0
 8011768:	f040 80eb 	bne.w	8011942 <get_cmd_state+0x20a>
 801176c:	6a23      	ldr	r3, [r4, #32]
 801176e:	42b3      	cmp	r3, r6
 8011770:	f240 80db 	bls.w	801192a <get_cmd_state+0x1f2>
        return (char*)self->desc->buf;
 8011774:	f7f8 fada 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011778:	f004 0307 	and.w	r3, r4, #7
 801177c:	08e2      	lsrs	r2, r4, #3
 801177e:	3303      	adds	r3, #3
 8011780:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011784:	f992 2000 	ldrsb.w	r2, [r2]
 8011788:	4293      	cmp	r3, r2
 801178a:	db02      	blt.n	8011792 <get_cmd_state+0x5a>
 801178c:	2a00      	cmp	r2, #0
 801178e:	f040 80ec 	bne.w	801196a <get_cmd_state+0x232>
 8011792:	6824      	ldr	r4, [r4, #0]
 8011794:	f104 0008 	add.w	r0, r4, #8
 8011798:	08c2      	lsrs	r2, r0, #3
 801179a:	f000 0307 	and.w	r3, r0, #7
 801179e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80117a2:	3303      	adds	r3, #3
 80117a4:	f992 2000 	ldrsb.w	r2, [r2]
 80117a8:	4293      	cmp	r3, r2
 80117aa:	db02      	blt.n	80117b2 <get_cmd_state+0x7a>
 80117ac:	2a00      	cmp	r2, #0
 80117ae:	f040 80da 	bne.w	8011966 <get_cmd_state+0x22e>

        s = get_atcmd_buf(self)[i >> 2];
 80117b2:	68a2      	ldr	r2, [r4, #8]
 80117b4:	08b1      	lsrs	r1, r6, #2
 80117b6:	eb02 0096 	add.w	r0, r2, r6, lsr #2
 80117ba:	08c3      	lsrs	r3, r0, #3
 80117bc:	f000 0507 	and.w	r5, r0, #7
 80117c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80117c4:	f993 3000 	ldrsb.w	r3, [r3]
 80117c8:	429d      	cmp	r5, r3
 80117ca:	db02      	blt.n	80117d2 <get_cmd_state+0x9a>
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f040 80c8 	bne.w	8011962 <get_cmd_state+0x22a>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80117d2:	1d20      	adds	r0, r4, #4
        s >>= (i % 4) << 1;
 80117d4:	0073      	lsls	r3, r6, #1
 80117d6:	f812 9001 	ldrb.w	r9, [r2, r1]
 80117da:	f003 0306 	and.w	r3, r3, #6
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80117de:	08c2      	lsrs	r2, r0, #3
        s >>= (i % 4) << 1;
 80117e0:	fa49 f903 	asr.w	r9, r9, r3
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80117e4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80117e8:	f000 0307 	and.w	r3, r0, #7
 80117ec:	f992 2000 	ldrsb.w	r2, [r2]
        s &= 0x03;
 80117f0:	f009 0903 	and.w	r9, r9, #3
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80117f4:	3303      	adds	r3, #3
 80117f6:	4293      	cmp	r3, r2
 80117f8:	db02      	blt.n	8011800 <get_cmd_state+0xc8>
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	f040 80af 	bne.w	801195e <get_cmd_state+0x226>
 8011800:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011804:	f1b8 0f00 	cmp.w	r8, #0
 8011808:	d078      	beq.n	80118fc <get_cmd_state+0x1c4>
                cmd_group = self->desc->cmd_group[i];
 801180a:	f7f8 fa8f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801180e:	08e3      	lsrs	r3, r4, #3
 8011810:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011814:	f993 2000 	ldrsb.w	r2, [r3]
 8011818:	f004 0307 	and.w	r3, r4, #7
 801181c:	3303      	adds	r3, #3
 801181e:	4293      	cmp	r3, r2
 8011820:	db02      	blt.n	8011828 <get_cmd_state+0xf0>
 8011822:	2a00      	cmp	r2, #0
 8011824:	f040 80a4 	bne.w	8011970 <get_cmd_state+0x238>
        j = 0;
 8011828:	2700      	movs	r7, #0
 801182a:	6824      	ldr	r4, [r4, #0]
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801182c:	463d      	mov	r5, r7
 801182e:	e03e      	b.n	80118ae <get_cmd_state+0x176>
                if (cmd_group->disable != false)
 8011830:	f7f8 fa7c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011834:	f10a 000c 	add.w	r0, sl, #12
 8011838:	08c3      	lsrs	r3, r0, #3
 801183a:	f000 0207 	and.w	r2, r0, #7
 801183e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011842:	f993 3000 	ldrsb.w	r3, [r3]
 8011846:	429a      	cmp	r2, r3
 8011848:	db01      	blt.n	801184e <get_cmd_state+0x116>
 801184a:	2b00      	cmp	r3, #0
 801184c:	d167      	bne.n	801191e <get_cmd_state+0x1e6>
 801184e:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d157      	bne.n	8011906 <get_cmd_state+0x1ce>
                if (cmd_group->cmd[index - j].disable != false)
 8011856:	f7f8 fa69 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801185a:	f10a 0004 	add.w	r0, sl, #4
 801185e:	08c2      	lsrs	r2, r0, #3
 8011860:	f000 0307 	and.w	r3, r0, #7
 8011864:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011868:	3303      	adds	r3, #3
 801186a:	f992 2000 	ldrsb.w	r2, [r2]
 801186e:	4293      	cmp	r3, r2
 8011870:	db01      	blt.n	8011876 <get_cmd_state+0x13e>
 8011872:	2a00      	cmp	r2, #0
 8011874:	d157      	bne.n	8011926 <get_cmd_state+0x1ee>
 8011876:	1bf3      	subs	r3, r6, r7
 8011878:	f8da 2004 	ldr.w	r2, [sl, #4]
 801187c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011884:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8011888:	08c2      	lsrs	r2, r0, #3
 801188a:	f000 0107 	and.w	r1, r0, #7
 801188e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011892:	f992 2000 	ldrsb.w	r2, [r2]
 8011896:	4291      	cmp	r1, r2
 8011898:	db01      	blt.n	801189e <get_cmd_state+0x166>
 801189a:	2a00      	cmp	r2, #0
 801189c:	d141      	bne.n	8011922 <get_cmd_state+0x1ea>
 801189e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80118a2:	bb83      	cbnz	r3, 8011906 <get_cmd_state+0x1ce>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80118a4:	3501      	adds	r5, #1
 80118a6:	f7f8 fa41 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80118aa:	4545      	cmp	r5, r8
 80118ac:	d026      	beq.n	80118fc <get_cmd_state+0x1c4>
                cmd_group = self->desc->cmd_group[i];
 80118ae:	f7f8 fa3d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80118b2:	f004 0307 	and.w	r3, r4, #7
 80118b6:	08e2      	lsrs	r2, r4, #3
 80118b8:	3303      	adds	r3, #3
 80118ba:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80118be:	f992 2000 	ldrsb.w	r2, [r2]
 80118c2:	4293      	cmp	r3, r2
 80118c4:	db00      	blt.n	80118c8 <get_cmd_state+0x190>
 80118c6:	bb2a      	cbnz	r2, 8011914 <get_cmd_state+0x1dc>
 80118c8:	f854 ab04 	ldr.w	sl, [r4], #4
                if (index >= j + cmd_group->cmd_num) {
 80118cc:	f10a 0008 	add.w	r0, sl, #8
 80118d0:	08c2      	lsrs	r2, r0, #3
 80118d2:	f000 0307 	and.w	r3, r0, #7
 80118d6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80118da:	3303      	adds	r3, #3
 80118dc:	f992 2000 	ldrsb.w	r2, [r2]
 80118e0:	4293      	cmp	r3, r2
 80118e2:	db00      	blt.n	80118e6 <get_cmd_state+0x1ae>
 80118e4:	b9ca      	cbnz	r2, 801191a <get_cmd_state+0x1e2>
 80118e6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80118ea:	443b      	add	r3, r7
 80118ec:	429e      	cmp	r6, r3
 80118ee:	d39f      	bcc.n	8011830 <get_cmd_state+0xf8>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80118f0:	3501      	adds	r5, #1
 80118f2:	461f      	mov	r7, r3
 80118f4:	f7f8 fa1a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80118f8:	4545      	cmp	r5, r8
 80118fa:	d1d8      	bne.n	80118ae <get_cmd_state+0x176>
 80118fc:	f7f8 fa16 	bl	8009d2c <__sanitizer_cov_trace_pc>

        if (is_command_disable(self, i) != false)
                return CAT_CMD_STATE_NOT_MATCH;

        return s;
}
 8011900:	4648      	mov	r0, r9
 8011902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return CAT_CMD_STATE_NOT_MATCH;
 8011906:	f04f 0900 	mov.w	r9, #0
 801190a:	f7f8 fa0f 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 801190e:	4648      	mov	r0, r9
 8011910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                cmd_group = self->desc->cmd_group[i];
 8011914:	4620      	mov	r0, r4
 8011916:	f7f7 fe2f 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801191a:	f7f7 fe2d 	bl	8009578 <__asan_report_load4>
                if (cmd_group->disable != false)
 801191e:	f7f7 fe23 	bl	8009568 <__asan_report_load1>
                if (cmd_group->cmd[index - j].disable != false)
 8011922:	f7f7 fe21 	bl	8009568 <__asan_report_load1>
 8011926:	f7f7 fe27 	bl	8009578 <__asan_report_load4>
        assert(i < self->commands_num);
 801192a:	f7f8 f9ff 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801192e:	f7f7 fe3f 	bl	80095b0 <__asan_handle_no_return>
 8011932:	4b11      	ldr	r3, [pc, #68]	; (8011978 <get_cmd_state+0x240>)
 8011934:	4a11      	ldr	r2, [pc, #68]	; (801197c <get_cmd_state+0x244>)
 8011936:	f240 3102 	movw	r1, #770	; 0x302
 801193a:	f1a3 00a0 	sub.w	r0, r3, #160	; 0xa0
 801193e:	f010 f91d 	bl	8021b7c <__assert_func>
 8011942:	f7f7 fe19 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8011946:	f7f8 f9f1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801194a:	f7f7 fe31 	bl	80095b0 <__asan_handle_no_return>
 801194e:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <get_cmd_state+0x248>)
 8011950:	4a0a      	ldr	r2, [pc, #40]	; (801197c <get_cmd_state+0x244>)
 8011952:	f240 3101 	movw	r1, #769	; 0x301
 8011956:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 801195a:	f010 f90f 	bl	8021b7c <__assert_func>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801195e:	f7f7 fe0b 	bl	8009578 <__asan_report_load4>
        s = get_atcmd_buf(self)[i >> 2];
 8011962:	f7f7 fe01 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 8011966:	f7f7 fe07 	bl	8009578 <__asan_report_load4>
 801196a:	4620      	mov	r0, r4
 801196c:	f7f7 fe04 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 8011970:	4620      	mov	r0, r4
 8011972:	f7f7 fe01 	bl	8009578 <__asan_report_load4>
 8011976:	bf00      	nop
 8011978:	240091c0 	.word	0x240091c0
 801197c:	2400a640 	.word	0x2400a640
 8011980:	24009180 	.word	0x24009180

08011984 <ack_error.part.0>:
static void ack_error(struct cat_object *self)
 8011984:	b508      	push	{r3, lr}
        assert(self != NULL);
 8011986:	f7f8 f9d1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801198a:	f7f7 fe11 	bl	80095b0 <__asan_handle_no_return>
 801198e:	4804      	ldr	r0, [pc, #16]	; (80119a0 <ack_error.part.0+0x1c>)
 8011990:	4a04      	ldr	r2, [pc, #16]	; (80119a4 <ack_error.part.0+0x20>)
 8011992:	f240 1141 	movw	r1, #321	; 0x141
 8011996:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 801199a:	3040      	adds	r0, #64	; 0x40
 801199c:	f010 f8ee 	bl	8021b7c <__assert_func>
 80119a0:	240090e0 	.word	0x240090e0
 80119a4:	2400a680 	.word	0x2400a680

080119a8 <ack_error>:
{
 80119a8:	b570      	push	{r4, r5, r6, lr}
 80119aa:	4604      	mov	r4, r0
 80119ac:	b082      	sub	sp, #8
        assert(self != NULL);
 80119ae:	f7f8 f9bd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80119b2:	2c00      	cmp	r4, #0
 80119b4:	f000 80d7 	beq.w	8011b66 <ack_error+0x1be>
        return (char*)self->desc->buf;
 80119b8:	f7f8 f9b8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80119bc:	f004 0307 	and.w	r3, r4, #7
 80119c0:	08e2      	lsrs	r2, r4, #3
 80119c2:	3303      	adds	r3, #3
 80119c4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80119c8:	f992 2000 	ldrsb.w	r2, [r2]
 80119cc:	4293      	cmp	r3, r2
 80119ce:	db02      	blt.n	80119d6 <ack_error+0x2e>
 80119d0:	2a00      	cmp	r2, #0
 80119d2:	f040 80b7 	bne.w	8011b44 <ack_error+0x19c>
 80119d6:	6825      	ldr	r5, [r4, #0]
 80119d8:	f105 0008 	add.w	r0, r5, #8
 80119dc:	08c2      	lsrs	r2, r0, #3
 80119de:	f000 0307 	and.w	r3, r0, #7
 80119e2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80119e6:	3303      	adds	r3, #3
 80119e8:	f992 2000 	ldrsb.w	r2, [r2]
 80119ec:	4293      	cmp	r3, r2
 80119ee:	db02      	blt.n	80119f6 <ack_error+0x4e>
 80119f0:	2a00      	cmp	r2, #0
 80119f2:	f040 80a5 	bne.w	8011b40 <ack_error+0x198>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80119f6:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 80119fa:	68ae      	ldr	r6, [r5, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80119fc:	08c3      	lsrs	r3, r0, #3
 80119fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011a02:	f993 1000 	ldrsb.w	r1, [r3]
 8011a06:	f000 0307 	and.w	r3, r0, #7
 8011a0a:	3303      	adds	r3, #3
 8011a0c:	428b      	cmp	r3, r1
 8011a0e:	db02      	blt.n	8011a16 <ack_error+0x6e>
 8011a10:	2900      	cmp	r1, #0
 8011a12:	f040 8093 	bne.w	8011b3c <ack_error+0x194>
 8011a16:	692b      	ldr	r3, [r5, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d07b      	beq.n	8011b14 <ack_error+0x16c>
 8011a1c:	f7f8 f986 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011a20:	f105 000c 	add.w	r0, r5, #12
 8011a24:	08c3      	lsrs	r3, r0, #3
 8011a26:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011a2a:	f993 2000 	ldrsb.w	r2, [r3]
 8011a2e:	f000 0307 	and.w	r3, r0, #7
 8011a32:	3303      	adds	r3, #3
 8011a34:	4293      	cmp	r3, r2
 8011a36:	db02      	blt.n	8011a3e <ack_error+0x96>
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	f040 8090 	bne.w	8011b5e <ack_error+0x1b6>
 8011a3e:	68ea      	ldr	r2, [r5, #12]
 8011a40:	9201      	str	r2, [sp, #4]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8011a42:	f7f8 f973 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011a46:	9a01      	ldr	r2, [sp, #4]
 8011a48:	4630      	mov	r0, r6
 8011a4a:	494a      	ldr	r1, [pc, #296]	; (8011b74 <ack_error+0x1cc>)
 8011a4c:	f010 ffc3 	bl	80229d6 <strncpy>
        self->position = 0;
 8011a50:	f104 0018 	add.w	r0, r4, #24
 8011a54:	08c2      	lsrs	r2, r0, #3
 8011a56:	f000 0307 	and.w	r3, r0, #7
 8011a5a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011a5e:	3303      	adds	r3, #3
 8011a60:	f992 2000 	ldrsb.w	r2, [r2]
 8011a64:	4293      	cmp	r3, r2
 8011a66:	db01      	blt.n	8011a6c <ack_error+0xc4>
 8011a68:	2a00      	cmp	r2, #0
 8011a6a:	d165      	bne.n	8011b38 <ack_error+0x190>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a6c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8011a70:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a72:	08c3      	lsrs	r3, r0, #3
 8011a74:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8011a78:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a7a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	db01      	blt.n	8011a8a <ack_error+0xe2>
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d167      	bne.n	8011b5a <ack_error+0x1b2>
        self->write_buf = get_new_line_chars(self);
 8011a8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a8e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8011a92:	4b39      	ldr	r3, [pc, #228]	; (8011b78 <ack_error+0x1d0>)
        self->write_buf = get_new_line_chars(self);
 8011a94:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a96:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8011a9a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011a9e:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8011aa0:	f992 1000 	ldrsb.w	r1, [r2]
 8011aa4:	f000 0207 	and.w	r2, r0, #7
 8011aa8:	3203      	adds	r2, #3
 8011aaa:	428a      	cmp	r2, r1
 8011aac:	db01      	blt.n	8011ab2 <ack_error+0x10a>
 8011aae:	2900      	cmp	r1, #0
 8011ab0:	d151      	bne.n	8011b56 <ack_error+0x1ae>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8011ab2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8011ab6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8011ab8:	08c2      	lsrs	r2, r0, #3
 8011aba:	f000 0307 	and.w	r3, r0, #7
 8011abe:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011ac2:	3303      	adds	r3, #3
 8011ac4:	f992 2000 	ldrsb.w	r2, [r2]
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	db01      	blt.n	8011ad0 <ack_error+0x128>
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	d140      	bne.n	8011b52 <ack_error+0x1aa>
        self->write_state_after = state_after;
 8011ad0:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8011ad4:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8011ad6:	08c3      	lsrs	r3, r0, #3
 8011ad8:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8011adc:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8011ade:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	db00      	blt.n	8011aec <ack_error+0x144>
 8011aea:	bb83      	cbnz	r3, 8011b4e <ack_error+0x1a6>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8011aec:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 8011af0:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8011af2:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 8011af4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8011af8:	f000 0207 	and.w	r2, r0, #7
 8011afc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011b00:	f993 3000 	ldrsb.w	r3, [r3]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	db00      	blt.n	8011b0a <ack_error+0x162>
 8011b08:	b9fb      	cbnz	r3, 8011b4a <ack_error+0x1a2>
 8011b0a:	2312      	movs	r3, #18
 8011b0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8011b10:	b002      	add	sp, #8
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011b14:	f7f8 f90a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011b18:	f105 000c 	add.w	r0, r5, #12
 8011b1c:	08c3      	lsrs	r3, r0, #3
 8011b1e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011b22:	f993 2000 	ldrsb.w	r2, [r3]
 8011b26:	f000 0307 	and.w	r3, r0, #7
 8011b2a:	3303      	adds	r3, #3
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	db00      	blt.n	8011b32 <ack_error+0x18a>
 8011b30:	b9ba      	cbnz	r2, 8011b62 <ack_error+0x1ba>
 8011b32:	68ea      	ldr	r2, [r5, #12]
 8011b34:	0852      	lsrs	r2, r2, #1
 8011b36:	e783      	b.n	8011a40 <ack_error+0x98>
        self->position = 0;
 8011b38:	f7f7 fd12 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011b3c:	f7f7 fd1c 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 8011b40:	f7f7 fd1a 	bl	8009578 <__asan_report_load4>
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7f7 fd17 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8011b4a:	f7f7 fd01 	bl	8009550 <__asan_report_store1>
        self->write_state_after = state_after;
 8011b4e:	f7f7 fcff 	bl	8009550 <__asan_report_store1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8011b52:	f7f7 fd05 	bl	8009560 <__asan_report_store4>
        self->write_buf = get_new_line_chars(self);
 8011b56:	f7f7 fd03 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8011b5a:	f7f7 fd05 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011b5e:	f7f7 fd0b 	bl	8009578 <__asan_report_load4>
 8011b62:	f7f7 fd09 	bl	8009578 <__asan_report_load4>
 8011b66:	f7f8 f8e1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011b6a:	f7f7 fd21 	bl	80095b0 <__asan_handle_no_return>
 8011b6e:	f7ff ff09 	bl	8011984 <ack_error.part.0>
 8011b72:	bf00      	nop
 8011b74:	24009200 	.word	0x24009200
 8011b78:	24009240 	.word	0x24009240

08011b7c <print_string_to_buf>:
{
 8011b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b80:	4604      	mov	r4, r0
 8011b82:	b082      	sub	sp, #8
 8011b84:	460f      	mov	r7, r1
 8011b86:	4615      	mov	r5, r2
        assert(self != NULL);
 8011b88:	f7f8 f8d0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011b8c:	2c00      	cmp	r4, #0
 8011b8e:	f000 815b 	beq.w	8011e48 <print_string_to_buf+0x2cc>
        switch (fsm) {
 8011b92:	f7f8 f8cb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011b96:	2d01      	cmp	r5, #1
 8011b98:	f000 808c 	beq.w	8011cb4 <print_string_to_buf+0x138>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011b9c:	f7f8 f8c6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011ba0:	f004 0307 	and.w	r3, r4, #7
 8011ba4:	08e2      	lsrs	r2, r4, #3
 8011ba6:	3303      	adds	r3, #3
 8011ba8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011bac:	f992 2000 	ldrsb.w	r2, [r2]
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	db02      	blt.n	8011bba <print_string_to_buf+0x3e>
 8011bb4:	2a00      	cmp	r2, #0
 8011bb6:	f040 8134 	bne.w	8011e22 <print_string_to_buf+0x2a6>
 8011bba:	6826      	ldr	r6, [r4, #0]
 8011bbc:	f106 0010 	add.w	r0, r6, #16
 8011bc0:	08c3      	lsrs	r3, r0, #3
 8011bc2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011bc6:	f993 2000 	ldrsb.w	r2, [r3]
 8011bca:	f000 0307 	and.w	r3, r0, #7
 8011bce:	3303      	adds	r3, #3
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	db02      	blt.n	8011bda <print_string_to_buf+0x5e>
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	f040 8127 	bne.w	8011e28 <print_string_to_buf+0x2ac>
 8011bda:	6933      	ldr	r3, [r6, #16]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f000 80d0 	beq.w	8011d82 <print_string_to_buf+0x206>
 8011be2:	f7f8 f8a3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011be6:	f106 000c 	add.w	r0, r6, #12
 8011bea:	08c3      	lsrs	r3, r0, #3
 8011bec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011bf0:	f993 2000 	ldrsb.w	r2, [r3]
 8011bf4:	f000 0307 	and.w	r3, r0, #7
 8011bf8:	3303      	adds	r3, #3
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	db02      	blt.n	8011c04 <print_string_to_buf+0x88>
 8011bfe:	2a00      	cmp	r2, #0
 8011c00:	f040 8135 	bne.w	8011e6e <print_string_to_buf+0x2f2>
 8011c04:	f8d6 800c 	ldr.w	r8, [r6, #12]
                return get_atcmd_buf_size(self) - self->position;
 8011c08:	f7f8 f890 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011c0c:	f104 0018 	add.w	r0, r4, #24
 8011c10:	08c3      	lsrs	r3, r0, #3
 8011c12:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011c16:	f993 2000 	ldrsb.w	r2, [r3]
 8011c1a:	f000 0307 	and.w	r3, r0, #7
 8011c1e:	3303      	adds	r3, #3
 8011c20:	4293      	cmp	r3, r2
 8011c22:	db02      	blt.n	8011c2a <print_string_to_buf+0xae>
 8011c24:	2a00      	cmp	r2, #0
 8011c26:	f040 8120 	bne.w	8011e6a <print_string_to_buf+0x2ee>
        return (char*)self->desc->buf;
 8011c2a:	f106 0208 	add.w	r2, r6, #8
                return get_atcmd_buf_size(self) - self->position;
 8011c2e:	69a1      	ldr	r1, [r4, #24]
        return (char*)self->desc->buf;
 8011c30:	08d3      	lsrs	r3, r2, #3
                return get_atcmd_buf_size(self) - self->position;
 8011c32:	eba8 0801 	sub.w	r8, r8, r1
        return (char*)self->desc->buf;
 8011c36:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011c3a:	f993 0000 	ldrsb.w	r0, [r3]
 8011c3e:	f002 0307 	and.w	r3, r2, #7
 8011c42:	3303      	adds	r3, #3
 8011c44:	4283      	cmp	r3, r0
 8011c46:	db02      	blt.n	8011c4e <print_string_to_buf+0xd2>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	f040 8109 	bne.w	8011e60 <print_string_to_buf+0x2e4>
                return &(get_atcmd_buf(self)[self->position]);
 8011c4e:	68b0      	ldr	r0, [r6, #8]
 8011c50:	4408      	add	r0, r1
 8011c52:	9001      	str	r0, [sp, #4]
        written = snprintf(get_current_buffer_by_fsm(self, fsm), len, "%s", str);
 8011c54:	f7f8 f86a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011c58:	463b      	mov	r3, r7
 8011c5a:	9801      	ldr	r0, [sp, #4]
 8011c5c:	4a89      	ldr	r2, [pc, #548]	; (8011e84 <print_string_to_buf+0x308>)
 8011c5e:	4641      	mov	r1, r8
 8011c60:	f010 fe42 	bl	80228e8 <sniprintf>
        if ((written < 0) || ((size_t)written >= len))
 8011c64:	1e06      	subs	r6, r0, #0
 8011c66:	f2c0 80ec 	blt.w	8011e42 <print_string_to_buf+0x2c6>
 8011c6a:	f7f8 f85f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011c6e:	4546      	cmp	r6, r8
 8011c70:	f080 80e7 	bcs.w	8011e42 <print_string_to_buf+0x2c6>
        switch (fsm) {
 8011c74:	f7f8 f85a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011c78:	2d01      	cmp	r5, #1
 8011c7a:	d06d      	beq.n	8011d58 <print_string_to_buf+0x1dc>
                self->position += offset;
 8011c7c:	f7f8 f856 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011c80:	f104 0018 	add.w	r0, r4, #24
 8011c84:	08c2      	lsrs	r2, r0, #3
 8011c86:	f000 0307 	and.w	r3, r0, #7
 8011c8a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011c8e:	3303      	adds	r3, #3
 8011c90:	f992 2000 	ldrsb.w	r2, [r2]
 8011c94:	4293      	cmp	r3, r2
 8011c96:	db02      	blt.n	8011c9e <print_string_to_buf+0x122>
 8011c98:	2a00      	cmp	r2, #0
 8011c9a:	f040 80e4 	bne.w	8011e66 <print_string_to_buf+0x2ea>
 8011c9e:	69a3      	ldr	r3, [r4, #24]
        return 0;
 8011ca0:	2000      	movs	r0, #0
                self->position += offset;
 8011ca2:	4433      	add	r3, r6
 8011ca4:	61a3      	str	r3, [r4, #24]
                break;
 8011ca6:	9001      	str	r0, [sp, #4]
 8011ca8:	f7f8 f840 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8011cac:	9801      	ldr	r0, [sp, #4]
 8011cae:	b002      	add	sp, #8
 8011cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8011cb4:	f7f8 f83a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011cb8:	f004 0307 	and.w	r3, r4, #7
 8011cbc:	08e2      	lsrs	r2, r4, #3
 8011cbe:	3303      	adds	r3, #3
 8011cc0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011cc4:	f992 2000 	ldrsb.w	r2, [r2]
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	db02      	blt.n	8011cd2 <print_string_to_buf+0x156>
 8011ccc:	2a00      	cmp	r2, #0
 8011cce:	f040 80af 	bne.w	8011e30 <print_string_to_buf+0x2b4>
 8011cd2:	f8d4 9000 	ldr.w	r9, [r4]
 8011cd6:	f109 0010 	add.w	r0, r9, #16
 8011cda:	08c3      	lsrs	r3, r0, #3
 8011cdc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011ce0:	f993 2000 	ldrsb.w	r2, [r3]
 8011ce4:	f000 0307 	and.w	r3, r0, #7
 8011ce8:	3303      	adds	r3, #3
 8011cea:	4293      	cmp	r3, r2
 8011cec:	db02      	blt.n	8011cf4 <print_string_to_buf+0x178>
 8011cee:	2a00      	cmp	r2, #0
 8011cf0:	f040 80a1 	bne.w	8011e36 <print_string_to_buf+0x2ba>
 8011cf4:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8011cf8:	2e00      	cmp	r6, #0
 8011cfa:	d056      	beq.n	8011daa <print_string_to_buf+0x22e>
 8011cfc:	f7f8 f816 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011d00:	f109 0014 	add.w	r0, r9, #20
 8011d04:	08c3      	lsrs	r3, r0, #3
 8011d06:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011d0a:	f993 2000 	ldrsb.w	r2, [r3]
 8011d0e:	f000 0307 	and.w	r3, r0, #7
 8011d12:	3303      	adds	r3, #3
 8011d14:	4293      	cmp	r3, r2
 8011d16:	db02      	blt.n	8011d1e <print_string_to_buf+0x1a2>
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	f040 808e 	bne.w	8011e3a <print_string_to_buf+0x2be>
 8011d1e:	f8d9 8014 	ldr.w	r8, [r9, #20]
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8011d22:	f7f8 f803 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011d26:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8011d2a:	08c3      	lsrs	r3, r0, #3
 8011d2c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011d30:	f993 2000 	ldrsb.w	r2, [r3]
 8011d34:	f000 0307 	and.w	r3, r0, #7
 8011d38:	3303      	adds	r3, #3
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	db01      	blt.n	8011d42 <print_string_to_buf+0x1c6>
 8011d3e:	2a00      	cmp	r2, #0
 8011d40:	d17d      	bne.n	8011e3e <print_string_to_buf+0x2c2>
 8011d42:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 8011d46:	eba8 080a 	sub.w	r8, r8, sl
                return &(get_unsolicited_buf(self)[self->unsolicited_fsm.position]);
 8011d4a:	eb06 000a 	add.w	r0, r6, sl
 8011d4e:	9001      	str	r0, [sp, #4]
 8011d50:	f7f7 ffec 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011d54:	9801      	ldr	r0, [sp, #4]
 8011d56:	e77c      	b.n	8011c52 <print_string_to_buf+0xd6>
                self->unsolicited_fsm.position += offset;
 8011d58:	f7f7 ffe8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011d5c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8011d60:	08c2      	lsrs	r2, r0, #3
 8011d62:	f000 0307 	and.w	r3, r0, #7
 8011d66:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8011d6a:	3303      	adds	r3, #3
 8011d6c:	f992 2000 	ldrsb.w	r2, [r2]
 8011d70:	4293      	cmp	r3, r2
 8011d72:	db01      	blt.n	8011d78 <print_string_to_buf+0x1fc>
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	d159      	bne.n	8011e2c <print_string_to_buf+0x2b0>
 8011d78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return 0;
 8011d7a:	2000      	movs	r0, #0
                self->unsolicited_fsm.position += offset;
 8011d7c:	4433      	add	r3, r6
 8011d7e:	64e3      	str	r3, [r4, #76]	; 0x4c
                break;
 8011d80:	e791      	b.n	8011ca6 <print_string_to_buf+0x12a>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011d82:	f7f7 ffd3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011d86:	f106 000c 	add.w	r0, r6, #12
 8011d8a:	08c3      	lsrs	r3, r0, #3
 8011d8c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011d90:	f993 2000 	ldrsb.w	r2, [r3]
 8011d94:	f000 0307 	and.w	r3, r0, #7
 8011d98:	3303      	adds	r3, #3
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	db01      	blt.n	8011da2 <print_string_to_buf+0x226>
 8011d9e:	2a00      	cmp	r2, #0
 8011da0:	d16d      	bne.n	8011e7e <print_string_to_buf+0x302>
 8011da2:	68f3      	ldr	r3, [r6, #12]
 8011da4:	ea4f 0853 	mov.w	r8, r3, lsr #1
 8011da8:	e72e      	b.n	8011c08 <print_string_to_buf+0x8c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8011daa:	f7f7 ffbf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011dae:	f109 000c 	add.w	r0, r9, #12
 8011db2:	08c3      	lsrs	r3, r0, #3
 8011db4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011db8:	f993 2000 	ldrsb.w	r2, [r3]
 8011dbc:	f000 0307 	and.w	r3, r0, #7
 8011dc0:	3303      	adds	r3, #3
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	db01      	blt.n	8011dca <print_string_to_buf+0x24e>
 8011dc6:	2a00      	cmp	r2, #0
 8011dc8:	d157      	bne.n	8011e7a <print_string_to_buf+0x2fe>
 8011dca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011dce:	ea4f 0853 	mov.w	r8, r3, lsr #1
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8011dd2:	f7f7 ffab 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011dd6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8011dda:	08c3      	lsrs	r3, r0, #3
 8011ddc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011de0:	f993 2000 	ldrsb.w	r2, [r3]
 8011de4:	f000 0307 	and.w	r3, r0, #7
 8011de8:	3303      	adds	r3, #3
 8011dea:	4293      	cmp	r3, r2
 8011dec:	db01      	blt.n	8011df2 <print_string_to_buf+0x276>
 8011dee:	2a00      	cmp	r2, #0
 8011df0:	d141      	bne.n	8011e76 <print_string_to_buf+0x2fa>
 8011df2:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8011df6:	f7f7 ff99 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011dfa:	f109 0008 	add.w	r0, r9, #8
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8011dfe:	eba8 080a 	sub.w	r8, r8, sl
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8011e02:	08c3      	lsrs	r3, r0, #3
 8011e04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011e08:	f993 2000 	ldrsb.w	r2, [r3]
 8011e0c:	f000 0307 	and.w	r3, r0, #7
 8011e10:	3303      	adds	r3, #3
 8011e12:	4293      	cmp	r3, r2
 8011e14:	db00      	blt.n	8011e18 <print_string_to_buf+0x29c>
 8011e16:	bb62      	cbnz	r2, 8011e72 <print_string_to_buf+0x2f6>
 8011e18:	e9d9 0602 	ldrd	r0, r6, [r9, #8]
 8011e1c:	eb00 0656 	add.w	r6, r0, r6, lsr #1
 8011e20:	e793      	b.n	8011d4a <print_string_to_buf+0x1ce>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011e22:	4620      	mov	r0, r4
 8011e24:	f7f7 fba8 	bl	8009578 <__asan_report_load4>
 8011e28:	f7f7 fba6 	bl	8009578 <__asan_report_load4>
                self->unsolicited_fsm.position += offset;
 8011e2c:	f7f7 fba4 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8011e30:	4620      	mov	r0, r4
 8011e32:	f7f7 fba1 	bl	8009578 <__asan_report_load4>
 8011e36:	f7f7 fb9f 	bl	8009578 <__asan_report_load4>
 8011e3a:	f7f7 fb9d 	bl	8009578 <__asan_report_load4>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8011e3e:	f7f7 fb9b 	bl	8009578 <__asan_report_load4>
                return -1;
 8011e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e46:	e72e      	b.n	8011ca6 <print_string_to_buf+0x12a>
        assert(self != NULL);
 8011e48:	f7f7 ff70 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011e4c:	f7f7 fbb0 	bl	80095b0 <__asan_handle_no_return>
 8011e50:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <print_string_to_buf+0x30c>)
 8011e52:	4a0e      	ldr	r2, [pc, #56]	; (8011e8c <print_string_to_buf+0x310>)
 8011e54:	f240 1189 	movw	r1, #393	; 0x189
 8011e58:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8011e5c:	f00f fe8e 	bl	8021b7c <__assert_func>
        return (char*)self->desc->buf;
 8011e60:	4610      	mov	r0, r2
 8011e62:	f7f7 fb89 	bl	8009578 <__asan_report_load4>
                self->position += offset;
 8011e66:	f7f7 fb87 	bl	8009578 <__asan_report_load4>
                return get_atcmd_buf_size(self) - self->position;
 8011e6a:	f7f7 fb85 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011e6e:	f7f7 fb83 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8011e72:	f7f7 fb81 	bl	8009578 <__asan_report_load4>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8011e76:	f7f7 fb7f 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8011e7a:	f7f7 fb7d 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011e7e:	f7f7 fb7b 	bl	8009578 <__asan_report_load4>
 8011e82:	bf00      	nop
 8011e84:	24009280 	.word	0x24009280
 8011e88:	24009180 	.word	0x24009180
 8011e8c:	2400a420 	.word	0x2400a420

08011e90 <print_string_to_buf.constprop.0>:
static int print_string_to_buf(struct cat_object *self, const char *str, cat_fsm_type fsm)
 8011e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e94:	4604      	mov	r4, r0
 8011e96:	b082      	sub	sp, #8
 8011e98:	460e      	mov	r6, r1
        assert(self != NULL);
 8011e9a:	f7f7 ff47 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011e9e:	2c00      	cmp	r4, #0
 8011ea0:	f000 809d 	beq.w	8011fde <print_string_to_buf.constprop.0+0x14e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011ea4:	f7f7 ff42 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011ea8:	f004 0207 	and.w	r2, r4, #7
 8011eac:	08e0      	lsrs	r0, r4, #3
 8011eae:	3203      	adds	r2, #3
 8011eb0:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 8011eb4:	f990 3000 	ldrsb.w	r3, [r0]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	db02      	blt.n	8011ec2 <print_string_to_buf.constprop.0+0x32>
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f040 8084 	bne.w	8011fca <print_string_to_buf.constprop.0+0x13a>
 8011ec2:	6825      	ldr	r5, [r4, #0]
 8011ec4:	f105 0010 	add.w	r0, r5, #16
 8011ec8:	08c3      	lsrs	r3, r0, #3
 8011eca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011ece:	f993 2000 	ldrsb.w	r2, [r3]
 8011ed2:	f000 0307 	and.w	r3, r0, #7
 8011ed6:	3303      	adds	r3, #3
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	db01      	blt.n	8011ee0 <print_string_to_buf.constprop.0+0x50>
 8011edc:	2a00      	cmp	r2, #0
 8011ede:	d172      	bne.n	8011fc6 <print_string_to_buf.constprop.0+0x136>
 8011ee0:	692b      	ldr	r3, [r5, #16]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d054      	beq.n	8011f90 <print_string_to_buf.constprop.0+0x100>
 8011ee6:	f7f7 ff21 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011eea:	f105 000c 	add.w	r0, r5, #12
 8011eee:	08c3      	lsrs	r3, r0, #3
 8011ef0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011ef4:	f993 2000 	ldrsb.w	r2, [r3]
 8011ef8:	f000 0307 	and.w	r3, r0, #7
 8011efc:	3303      	adds	r3, #3
 8011efe:	4293      	cmp	r3, r2
 8011f00:	db01      	blt.n	8011f06 <print_string_to_buf.constprop.0+0x76>
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	d164      	bne.n	8011fd0 <print_string_to_buf.constprop.0+0x140>
 8011f06:	68ef      	ldr	r7, [r5, #12]
                return get_atcmd_buf_size(self) - self->position;
 8011f08:	f104 0918 	add.w	r9, r4, #24
 8011f0c:	f7f7 ff0e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011f10:	ea4f 0ad9 	mov.w	sl, r9, lsr #3
 8011f14:	f009 0807 	and.w	r8, r9, #7
 8011f18:	f10a 53dc 	add.w	r3, sl, #461373440	; 0x1b800000
 8011f1c:	f108 0203 	add.w	r2, r8, #3
 8011f20:	f993 3000 	ldrsb.w	r3, [r3]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	db01      	blt.n	8011f2c <print_string_to_buf.constprop.0+0x9c>
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d149      	bne.n	8011fc0 <print_string_to_buf.constprop.0+0x130>
        return (char*)self->desc->buf;
 8011f2c:	f105 0208 	add.w	r2, r5, #8
                return get_atcmd_buf_size(self) - self->position;
 8011f30:	69a1      	ldr	r1, [r4, #24]
        return (char*)self->desc->buf;
 8011f32:	08d3      	lsrs	r3, r2, #3
                return get_atcmd_buf_size(self) - self->position;
 8011f34:	1a7f      	subs	r7, r7, r1
        return (char*)self->desc->buf;
 8011f36:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011f3a:	f993 0000 	ldrsb.w	r0, [r3]
 8011f3e:	f002 0307 	and.w	r3, r2, #7
 8011f42:	3303      	adds	r3, #3
 8011f44:	4283      	cmp	r3, r0
 8011f46:	db00      	blt.n	8011f4a <print_string_to_buf.constprop.0+0xba>
 8011f48:	bbb8      	cbnz	r0, 8011fba <print_string_to_buf.constprop.0+0x12a>
                return &(get_atcmd_buf(self)[self->position]);
 8011f4a:	68a8      	ldr	r0, [r5, #8]
        written = snprintf(get_current_buffer_by_fsm(self, fsm), len, "%s", str);
 8011f4c:	4633      	mov	r3, r6
 8011f4e:	4a2a      	ldr	r2, [pc, #168]	; (8011ff8 <print_string_to_buf.constprop.0+0x168>)
 8011f50:	4408      	add	r0, r1
 8011f52:	4639      	mov	r1, r7
 8011f54:	f010 fcc8 	bl	80228e8 <sniprintf>
        if ((written < 0) || ((size_t)written >= len))
 8011f58:	1e05      	subs	r5, r0, #0
 8011f5a:	db3d      	blt.n	8011fd8 <print_string_to_buf.constprop.0+0x148>
 8011f5c:	f7f7 fee6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011f60:	42bd      	cmp	r5, r7
 8011f62:	d239      	bcs.n	8011fd8 <print_string_to_buf.constprop.0+0x148>
                self->position += offset;
 8011f64:	f10a 5adc 	add.w	sl, sl, #461373440	; 0x1b800000
 8011f68:	f7f7 fee0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011f6c:	f108 0803 	add.w	r8, r8, #3
 8011f70:	f99a 3000 	ldrsb.w	r3, [sl]
 8011f74:	4598      	cmp	r8, r3
 8011f76:	db00      	blt.n	8011f7a <print_string_to_buf.constprop.0+0xea>
 8011f78:	b9e3      	cbnz	r3, 8011fb4 <print_string_to_buf.constprop.0+0x124>
 8011f7a:	69a3      	ldr	r3, [r4, #24]
        return 0;
 8011f7c:	2000      	movs	r0, #0
                self->position += offset;
 8011f7e:	442b      	add	r3, r5
 8011f80:	61a3      	str	r3, [r4, #24]
                break;
 8011f82:	9001      	str	r0, [sp, #4]
 8011f84:	f7f7 fed2 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8011f88:	9801      	ldr	r0, [sp, #4]
 8011f8a:	b002      	add	sp, #8
 8011f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011f90:	f7f7 fecc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011f94:	f105 000c 	add.w	r0, r5, #12
 8011f98:	08c3      	lsrs	r3, r0, #3
 8011f9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8011f9e:	f993 2000 	ldrsb.w	r2, [r3]
 8011fa2:	f000 0307 	and.w	r3, r0, #7
 8011fa6:	3303      	adds	r3, #3
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	db00      	blt.n	8011fae <print_string_to_buf.constprop.0+0x11e>
 8011fac:	b992      	cbnz	r2, 8011fd4 <print_string_to_buf.constprop.0+0x144>
 8011fae:	68ef      	ldr	r7, [r5, #12]
 8011fb0:	087f      	lsrs	r7, r7, #1
 8011fb2:	e7a9      	b.n	8011f08 <print_string_to_buf.constprop.0+0x78>
                self->position += offset;
 8011fb4:	4648      	mov	r0, r9
 8011fb6:	f7f7 fadf 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f7f7 fadc 	bl	8009578 <__asan_report_load4>
                return get_atcmd_buf_size(self) - self->position;
 8011fc0:	4648      	mov	r0, r9
 8011fc2:	f7f7 fad9 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8011fc6:	f7f7 fad7 	bl	8009578 <__asan_report_load4>
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f7f7 fad4 	bl	8009578 <__asan_report_load4>
 8011fd0:	f7f7 fad2 	bl	8009578 <__asan_report_load4>
 8011fd4:	f7f7 fad0 	bl	8009578 <__asan_report_load4>
                return -1;
 8011fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fdc:	e7d1      	b.n	8011f82 <print_string_to_buf.constprop.0+0xf2>
        assert(self != NULL);
 8011fde:	f7f7 fea5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8011fe2:	f7f7 fae5 	bl	80095b0 <__asan_handle_no_return>
 8011fe6:	4b05      	ldr	r3, [pc, #20]	; (8011ffc <print_string_to_buf.constprop.0+0x16c>)
 8011fe8:	4a05      	ldr	r2, [pc, #20]	; (8012000 <print_string_to_buf.constprop.0+0x170>)
 8011fea:	f240 1189 	movw	r1, #393	; 0x189
 8011fee:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8011ff2:	f00f fdc3 	bl	8021b7c <__assert_func>
 8011ff6:	bf00      	nop
 8011ff8:	24009280 	.word	0x24009280
 8011ffc:	24009180 	.word	0x24009180
 8012000:	2400a420 	.word	0x2400a420

08012004 <print_current_cmd_full_name>:

        return true;
}

static int print_current_cmd_full_name(struct cat_object *self, const char *suffix)
{
 8012004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012008:	4604      	mov	r4, r0
 801200a:	b082      	sub	sp, #8
 801200c:	460d      	mov	r5, r1
        if (self->length == 0) {
 801200e:	f7f7 fe8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012012:	f104 0814 	add.w	r8, r4, #20
 8012016:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 801201a:	f008 0607 	and.w	r6, r8, #7
 801201e:	f107 53dc 	add.w	r3, r7, #461373440	; 0x1b800000
 8012022:	1cf2      	adds	r2, r6, #3
 8012024:	f993 3000 	ldrsb.w	r3, [r3]
 8012028:	429a      	cmp	r2, r3
 801202a:	db01      	blt.n	8012030 <print_current_cmd_full_name+0x2c>
 801202c:	2b00      	cmp	r3, #0
 801202e:	d17f      	bne.n	8012130 <print_current_cmd_full_name+0x12c>
 8012030:	6963      	ldr	r3, [r4, #20]
 8012032:	bb33      	cbnz	r3, 8012082 <print_current_cmd_full_name+0x7e>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012034:	f7f7 fe7a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012038:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801203c:	08c3      	lsrs	r3, r0, #3
 801203e:	f000 0207 	and.w	r2, r0, #7
 8012042:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012046:	f993 3000 	ldrsb.w	r3, [r3]
 801204a:	429a      	cmp	r2, r3
 801204c:	db01      	blt.n	8012052 <print_current_cmd_full_name+0x4e>
 801204e:	2b00      	cmp	r3, #0
 8012050:	d175      	bne.n	801213e <print_current_cmd_full_name+0x13a>
 8012052:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
                if (print_string_to_buf(self, get_new_line_chars(self), CAT_FSM_TYPE_ATCMD) != 0)
 8012056:	4620      	mov	r0, r4
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012058:	493b      	ldr	r1, [pc, #236]	; (8012148 <print_current_cmd_full_name+0x144>)
 801205a:	f083 0301 	eor.w	r3, r3, #1
                if (print_string_to_buf(self, get_new_line_chars(self), CAT_FSM_TYPE_ATCMD) != 0)
 801205e:	4419      	add	r1, r3
 8012060:	f7ff ff16 	bl	8011e90 <print_string_to_buf.constprop.0>
 8012064:	2800      	cmp	r0, #0
 8012066:	d15e      	bne.n	8012126 <print_current_cmd_full_name+0x122>
                        return -1;
                self->length = 1;
 8012068:	f107 57dc 	add.w	r7, r7, #461373440	; 0x1b800000
 801206c:	f7f7 fe5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012070:	3603      	adds	r6, #3
 8012072:	f997 3000 	ldrsb.w	r3, [r7]
 8012076:	429e      	cmp	r6, r3
 8012078:	db01      	blt.n	801207e <print_current_cmd_full_name+0x7a>
 801207a:	2b00      	cmp	r3, #0
 801207c:	d161      	bne.n	8012142 <print_current_cmd_full_name+0x13e>
 801207e:	2301      	movs	r3, #1
 8012080:	6163      	str	r3, [r4, #20]
        }

        if (print_string_to_buf(self, "AT", CAT_FSM_TYPE_ATCMD) != 0)
 8012082:	f7f7 fe53 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012086:	4931      	ldr	r1, [pc, #196]	; (801214c <print_current_cmd_full_name+0x148>)
 8012088:	4620      	mov	r0, r4
 801208a:	f7ff ff01 	bl	8011e90 <print_string_to_buf.constprop.0>
 801208e:	2800      	cmp	r0, #0
 8012090:	d149      	bne.n	8012126 <print_current_cmd_full_name+0x122>
                return -1;
        if (print_string_to_buf(self, self->cmd->name, CAT_FSM_TYPE_ATCMD) != 0)
 8012092:	f7f7 fe4b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801209a:	08c2      	lsrs	r2, r0, #3
 801209c:	f000 0307 	and.w	r3, r0, #7
 80120a0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80120a4:	3303      	adds	r3, #3
 80120a6:	f992 2000 	ldrsb.w	r2, [r2]
 80120aa:	4293      	cmp	r3, r2
 80120ac:	db01      	blt.n	80120b2 <print_current_cmd_full_name+0xae>
 80120ae:	2a00      	cmp	r2, #0
 80120b0:	d143      	bne.n	801213a <print_current_cmd_full_name+0x136>
 80120b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80120b4:	08c2      	lsrs	r2, r0, #3
 80120b6:	f000 0307 	and.w	r3, r0, #7
 80120ba:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80120be:	3303      	adds	r3, #3
 80120c0:	f992 2000 	ldrsb.w	r2, [r2]
 80120c4:	4293      	cmp	r3, r2
 80120c6:	db00      	blt.n	80120ca <print_current_cmd_full_name+0xc6>
 80120c8:	bbaa      	cbnz	r2, 8012136 <print_current_cmd_full_name+0x132>
 80120ca:	6801      	ldr	r1, [r0, #0]
 80120cc:	4620      	mov	r0, r4
 80120ce:	f7ff fedf 	bl	8011e90 <print_string_to_buf.constprop.0>
 80120d2:	bb40      	cbnz	r0, 8012126 <print_current_cmd_full_name+0x122>
                return -1;
        if (print_string_to_buf(self, suffix, CAT_FSM_TYPE_ATCMD) != 0)
 80120d4:	f7f7 fe2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80120d8:	4629      	mov	r1, r5
 80120da:	4620      	mov	r0, r4
 80120dc:	f7ff fed8 	bl	8011e90 <print_string_to_buf.constprop.0>
 80120e0:	bb08      	cbnz	r0, 8012126 <print_current_cmd_full_name+0x122>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80120e2:	f7f7 fe23 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80120e6:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80120ea:	08c3      	lsrs	r3, r0, #3
 80120ec:	f000 0207 	and.w	r2, r0, #7
 80120f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80120f4:	f993 3000 	ldrsb.w	r3, [r3]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	db00      	blt.n	80120fe <print_current_cmd_full_name+0xfa>
 80120fc:	b9b3      	cbnz	r3, 801212c <print_current_cmd_full_name+0x128>
 80120fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
                return -1;
        if (print_string_to_buf(self, get_new_line_chars(self), CAT_FSM_TYPE_ATCMD) != 0)
 8012102:	4620      	mov	r0, r4
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012104:	4910      	ldr	r1, [pc, #64]	; (8012148 <print_current_cmd_full_name+0x144>)
 8012106:	f083 0301 	eor.w	r3, r3, #1
        if (print_string_to_buf(self, get_new_line_chars(self), CAT_FSM_TYPE_ATCMD) != 0)
 801210a:	4419      	add	r1, r3
 801210c:	f7ff fec0 	bl	8011e90 <print_string_to_buf.constprop.0>
 8012110:	3800      	subs	r0, #0
 8012112:	bf18      	it	ne
 8012114:	2001      	movne	r0, #1
 8012116:	4240      	negs	r0, r0
 8012118:	9001      	str	r0, [sp, #4]
 801211a:	f7f7 fe07 	bl	8009d2c <__sanitizer_cov_trace_pc>
                return -1;

        return 0;
}
 801211e:	9801      	ldr	r0, [sp, #4]
 8012120:	b002      	add	sp, #8
 8012122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        return -1;
 8012126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801212a:	e7f5      	b.n	8012118 <print_current_cmd_full_name+0x114>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801212c:	f7f7 fa1c 	bl	8009568 <__asan_report_load1>
        if (self->length == 0) {
 8012130:	4640      	mov	r0, r8
 8012132:	f7f7 fa21 	bl	8009578 <__asan_report_load4>
        if (print_string_to_buf(self, self->cmd->name, CAT_FSM_TYPE_ATCMD) != 0)
 8012136:	f7f7 fa1f 	bl	8009578 <__asan_report_load4>
 801213a:	f7f7 fa1d 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801213e:	f7f7 fa13 	bl	8009568 <__asan_report_load1>
                self->length = 1;
 8012142:	4640      	mov	r0, r8
 8012144:	f7f7 fa0c 	bl	8009560 <__asan_report_store4>
 8012148:	24009240 	.word	0x24009240
 801214c:	240092c0 	.word	0x240092c0

08012150 <print_format_num>:
{
 8012150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012154:	4604      	mov	r4, r0
 8012156:	b083      	sub	sp, #12
 8012158:	4688      	mov	r8, r1
 801215a:	4691      	mov	r9, r2
 801215c:	461f      	mov	r7, r3
        assert(self != NULL);
 801215e:	f7f7 fde5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012162:	2c00      	cmp	r4, #0
 8012164:	f000 8157 	beq.w	8012416 <print_format_num+0x2c6>
        switch (fsm) {
 8012168:	f7f7 fde0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801216c:	2f01      	cmp	r7, #1
 801216e:	f000 808a 	beq.w	8012286 <print_format_num+0x136>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012172:	f7f7 fddb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012176:	08e3      	lsrs	r3, r4, #3
 8012178:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801217c:	f993 2000 	ldrsb.w	r2, [r3]
 8012180:	f004 0307 	and.w	r3, r4, #7
 8012184:	3303      	adds	r3, #3
 8012186:	4293      	cmp	r3, r2
 8012188:	db02      	blt.n	8012190 <print_format_num+0x40>
 801218a:	2a00      	cmp	r2, #0
 801218c:	f040 8130 	bne.w	80123f0 <print_format_num+0x2a0>
 8012190:	6825      	ldr	r5, [r4, #0]
 8012192:	f105 0010 	add.w	r0, r5, #16
 8012196:	08c3      	lsrs	r3, r0, #3
 8012198:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801219c:	f993 2000 	ldrsb.w	r2, [r3]
 80121a0:	f000 0307 	and.w	r3, r0, #7
 80121a4:	3303      	adds	r3, #3
 80121a6:	4293      	cmp	r3, r2
 80121a8:	db02      	blt.n	80121b0 <print_format_num+0x60>
 80121aa:	2a00      	cmp	r2, #0
 80121ac:	f040 8123 	bne.w	80123f6 <print_format_num+0x2a6>
 80121b0:	692b      	ldr	r3, [r5, #16]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f000 80ce 	beq.w	8012354 <print_format_num+0x204>
 80121b8:	f7f7 fdb8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80121bc:	f105 000c 	add.w	r0, r5, #12
 80121c0:	08c3      	lsrs	r3, r0, #3
 80121c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80121c6:	f993 2000 	ldrsb.w	r2, [r3]
 80121ca:	f000 0307 	and.w	r3, r0, #7
 80121ce:	3303      	adds	r3, #3
 80121d0:	4293      	cmp	r3, r2
 80121d2:	db02      	blt.n	80121da <print_format_num+0x8a>
 80121d4:	2a00      	cmp	r2, #0
 80121d6:	f040 8131 	bne.w	801243c <print_format_num+0x2ec>
 80121da:	68ee      	ldr	r6, [r5, #12]
                return get_atcmd_buf_size(self) - self->position;
 80121dc:	f7f7 fda6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80121e0:	f104 0018 	add.w	r0, r4, #24
 80121e4:	08c3      	lsrs	r3, r0, #3
 80121e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80121ea:	f993 2000 	ldrsb.w	r2, [r3]
 80121ee:	f000 0307 	and.w	r3, r0, #7
 80121f2:	3303      	adds	r3, #3
 80121f4:	4293      	cmp	r3, r2
 80121f6:	db02      	blt.n	80121fe <print_format_num+0xae>
 80121f8:	2a00      	cmp	r2, #0
 80121fa:	f040 811d 	bne.w	8012438 <print_format_num+0x2e8>
        return (char*)self->desc->buf;
 80121fe:	f105 0208 	add.w	r2, r5, #8
                return get_atcmd_buf_size(self) - self->position;
 8012202:	69a1      	ldr	r1, [r4, #24]
        return (char*)self->desc->buf;
 8012204:	08d3      	lsrs	r3, r2, #3
                return get_atcmd_buf_size(self) - self->position;
 8012206:	1a76      	subs	r6, r6, r1
        return (char*)self->desc->buf;
 8012208:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801220c:	f993 0000 	ldrsb.w	r0, [r3]
 8012210:	f002 0307 	and.w	r3, r2, #7
 8012214:	3303      	adds	r3, #3
 8012216:	4283      	cmp	r3, r0
 8012218:	db02      	blt.n	8012220 <print_format_num+0xd0>
 801221a:	2800      	cmp	r0, #0
 801221c:	f040 8107 	bne.w	801242e <print_format_num+0x2de>
                return &(get_atcmd_buf(self)[self->position]);
 8012220:	68a8      	ldr	r0, [r5, #8]
 8012222:	4408      	add	r0, r1
 8012224:	9001      	str	r0, [sp, #4]
        written = snprintf(get_current_buffer_by_fsm(self, fsm), len, fmt, val);
 8012226:	f7f7 fd81 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801222a:	464b      	mov	r3, r9
 801222c:	4642      	mov	r2, r8
 801222e:	4631      	mov	r1, r6
 8012230:	9801      	ldr	r0, [sp, #4]
 8012232:	f010 fb59 	bl	80228e8 <sniprintf>
        if ((written < 0) || ((size_t)written >= len))
 8012236:	1e05      	subs	r5, r0, #0
 8012238:	f2c0 80ea 	blt.w	8012410 <print_format_num+0x2c0>
 801223c:	f7f7 fd76 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012240:	42b5      	cmp	r5, r6
 8012242:	f080 80e5 	bcs.w	8012410 <print_format_num+0x2c0>
        switch (fsm) {
 8012246:	f7f7 fd71 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801224a:	2f01      	cmp	r7, #1
 801224c:	d06d      	beq.n	801232a <print_format_num+0x1da>
                self->position += offset;
 801224e:	f7f7 fd6d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012252:	f104 0018 	add.w	r0, r4, #24
 8012256:	08c2      	lsrs	r2, r0, #3
 8012258:	f000 0307 	and.w	r3, r0, #7
 801225c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012260:	3303      	adds	r3, #3
 8012262:	f992 2000 	ldrsb.w	r2, [r2]
 8012266:	4293      	cmp	r3, r2
 8012268:	db02      	blt.n	8012270 <print_format_num+0x120>
 801226a:	2a00      	cmp	r2, #0
 801226c:	f040 80e2 	bne.w	8012434 <print_format_num+0x2e4>
 8012270:	69a3      	ldr	r3, [r4, #24]
        return 0;
 8012272:	2000      	movs	r0, #0
                self->position += offset;
 8012274:	442b      	add	r3, r5
 8012276:	61a3      	str	r3, [r4, #24]
                break;
 8012278:	9001      	str	r0, [sp, #4]
 801227a:	f7f7 fd57 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 801227e:	9801      	ldr	r0, [sp, #4]
 8012280:	b003      	add	sp, #12
 8012282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8012286:	f7f7 fd51 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801228a:	08e3      	lsrs	r3, r4, #3
 801228c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012290:	f993 2000 	ldrsb.w	r2, [r3]
 8012294:	f004 0307 	and.w	r3, r4, #7
 8012298:	3303      	adds	r3, #3
 801229a:	4293      	cmp	r3, r2
 801229c:	db02      	blt.n	80122a4 <print_format_num+0x154>
 801229e:	2a00      	cmp	r2, #0
 80122a0:	f040 80ad 	bne.w	80123fe <print_format_num+0x2ae>
 80122a4:	f8d4 a000 	ldr.w	sl, [r4]
 80122a8:	f10a 0010 	add.w	r0, sl, #16
 80122ac:	08c3      	lsrs	r3, r0, #3
 80122ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80122b2:	f993 2000 	ldrsb.w	r2, [r3]
 80122b6:	f000 0307 	and.w	r3, r0, #7
 80122ba:	3303      	adds	r3, #3
 80122bc:	4293      	cmp	r3, r2
 80122be:	db02      	blt.n	80122c6 <print_format_num+0x176>
 80122c0:	2a00      	cmp	r2, #0
 80122c2:	f040 809f 	bne.w	8012404 <print_format_num+0x2b4>
 80122c6:	f8da 5010 	ldr.w	r5, [sl, #16]
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	d055      	beq.n	801237a <print_format_num+0x22a>
 80122ce:	f7f7 fd2d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80122d2:	f10a 0014 	add.w	r0, sl, #20
 80122d6:	08c3      	lsrs	r3, r0, #3
 80122d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80122dc:	f993 2000 	ldrsb.w	r2, [r3]
 80122e0:	f000 0307 	and.w	r3, r0, #7
 80122e4:	3303      	adds	r3, #3
 80122e6:	4293      	cmp	r3, r2
 80122e8:	db02      	blt.n	80122f0 <print_format_num+0x1a0>
 80122ea:	2a00      	cmp	r2, #0
 80122ec:	f040 808c 	bne.w	8012408 <print_format_num+0x2b8>
 80122f0:	f8da 6014 	ldr.w	r6, [sl, #20]
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 80122f4:	f7f7 fd1a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80122f8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80122fc:	08c3      	lsrs	r3, r0, #3
 80122fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012302:	f993 2000 	ldrsb.w	r2, [r3]
 8012306:	f000 0307 	and.w	r3, r0, #7
 801230a:	3303      	adds	r3, #3
 801230c:	4293      	cmp	r3, r2
 801230e:	db01      	blt.n	8012314 <print_format_num+0x1c4>
 8012310:	2a00      	cmp	r2, #0
 8012312:	d17b      	bne.n	801240c <print_format_num+0x2bc>
 8012314:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
 8012318:	eba6 060b 	sub.w	r6, r6, fp
                return &(get_unsolicited_buf(self)[self->unsolicited_fsm.position]);
 801231c:	eb05 000b 	add.w	r0, r5, fp
 8012320:	9001      	str	r0, [sp, #4]
 8012322:	f7f7 fd03 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012326:	9801      	ldr	r0, [sp, #4]
 8012328:	e77c      	b.n	8012224 <print_format_num+0xd4>
                self->unsolicited_fsm.position += offset;
 801232a:	f7f7 fcff 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801232e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8012332:	08c2      	lsrs	r2, r0, #3
 8012334:	f000 0307 	and.w	r3, r0, #7
 8012338:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801233c:	3303      	adds	r3, #3
 801233e:	f992 2000 	ldrsb.w	r2, [r2]
 8012342:	4293      	cmp	r3, r2
 8012344:	db01      	blt.n	801234a <print_format_num+0x1fa>
 8012346:	2a00      	cmp	r2, #0
 8012348:	d157      	bne.n	80123fa <print_format_num+0x2aa>
 801234a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return 0;
 801234c:	2000      	movs	r0, #0
                self->unsolicited_fsm.position += offset;
 801234e:	442b      	add	r3, r5
 8012350:	64e3      	str	r3, [r4, #76]	; 0x4c
                break;
 8012352:	e791      	b.n	8012278 <print_format_num+0x128>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012354:	f7f7 fcea 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012358:	f105 000c 	add.w	r0, r5, #12
 801235c:	08c3      	lsrs	r3, r0, #3
 801235e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012362:	f993 2000 	ldrsb.w	r2, [r3]
 8012366:	f000 0307 	and.w	r3, r0, #7
 801236a:	3303      	adds	r3, #3
 801236c:	4293      	cmp	r3, r2
 801236e:	db01      	blt.n	8012374 <print_format_num+0x224>
 8012370:	2a00      	cmp	r2, #0
 8012372:	d16b      	bne.n	801244c <print_format_num+0x2fc>
 8012374:	68ee      	ldr	r6, [r5, #12]
 8012376:	0876      	lsrs	r6, r6, #1
 8012378:	e730      	b.n	80121dc <print_format_num+0x8c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 801237a:	f7f7 fcd7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801237e:	f10a 000c 	add.w	r0, sl, #12
 8012382:	08c3      	lsrs	r3, r0, #3
 8012384:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012388:	f993 2000 	ldrsb.w	r2, [r3]
 801238c:	f000 0307 	and.w	r3, r0, #7
 8012390:	3303      	adds	r3, #3
 8012392:	4293      	cmp	r3, r2
 8012394:	db01      	blt.n	801239a <print_format_num+0x24a>
 8012396:	2a00      	cmp	r2, #0
 8012398:	d156      	bne.n	8012448 <print_format_num+0x2f8>
 801239a:	f8da 600c 	ldr.w	r6, [sl, #12]
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 801239e:	f7f7 fcc5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80123a2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80123a6:	0876      	lsrs	r6, r6, #1
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 80123a8:	08c3      	lsrs	r3, r0, #3
 80123aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80123ae:	f993 2000 	ldrsb.w	r2, [r3]
 80123b2:	f000 0307 	and.w	r3, r0, #7
 80123b6:	3303      	adds	r3, #3
 80123b8:	4293      	cmp	r3, r2
 80123ba:	db01      	blt.n	80123c0 <print_format_num+0x270>
 80123bc:	2a00      	cmp	r2, #0
 80123be:	d141      	bne.n	8012444 <print_format_num+0x2f4>
 80123c0:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80123c4:	f7f7 fcb2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80123c8:	f10a 0008 	add.w	r0, sl, #8
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 80123cc:	eba6 060b 	sub.w	r6, r6, fp
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80123d0:	08c3      	lsrs	r3, r0, #3
 80123d2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80123d6:	f993 2000 	ldrsb.w	r2, [r3]
 80123da:	f000 0307 	and.w	r3, r0, #7
 80123de:	3303      	adds	r3, #3
 80123e0:	4293      	cmp	r3, r2
 80123e2:	db00      	blt.n	80123e6 <print_format_num+0x296>
 80123e4:	bb62      	cbnz	r2, 8012440 <print_format_num+0x2f0>
 80123e6:	e9da 0502 	ldrd	r0, r5, [sl, #8]
 80123ea:	eb00 0555 	add.w	r5, r0, r5, lsr #1
 80123ee:	e795      	b.n	801231c <print_format_num+0x1cc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80123f0:	4620      	mov	r0, r4
 80123f2:	f7f7 f8c1 	bl	8009578 <__asan_report_load4>
 80123f6:	f7f7 f8bf 	bl	8009578 <__asan_report_load4>
                self->unsolicited_fsm.position += offset;
 80123fa:	f7f7 f8bd 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80123fe:	4620      	mov	r0, r4
 8012400:	f7f7 f8ba 	bl	8009578 <__asan_report_load4>
 8012404:	f7f7 f8b8 	bl	8009578 <__asan_report_load4>
 8012408:	f7f7 f8b6 	bl	8009578 <__asan_report_load4>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 801240c:	f7f7 f8b4 	bl	8009578 <__asan_report_load4>
                return -1;
 8012410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012414:	e730      	b.n	8012278 <print_format_num+0x128>
        assert(self != NULL);
 8012416:	f7f7 fc89 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801241a:	f7f7 f8c9 	bl	80095b0 <__asan_handle_no_return>
 801241e:	4b0c      	ldr	r3, [pc, #48]	; (8012450 <print_format_num+0x300>)
 8012420:	4a0c      	ldr	r2, [pc, #48]	; (8012454 <print_format_num+0x304>)
 8012422:	f240 5199 	movw	r1, #1433	; 0x599
 8012426:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 801242a:	f00f fba7 	bl	8021b7c <__assert_func>
        return (char*)self->desc->buf;
 801242e:	4610      	mov	r0, r2
 8012430:	f7f7 f8a2 	bl	8009578 <__asan_report_load4>
                self->position += offset;
 8012434:	f7f7 f8a0 	bl	8009578 <__asan_report_load4>
                return get_atcmd_buf_size(self) - self->position;
 8012438:	f7f7 f89e 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801243c:	f7f7 f89c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8012440:	f7f7 f89a 	bl	8009578 <__asan_report_load4>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8012444:	f7f7 f898 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8012448:	f7f7 f896 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801244c:	f7f7 f894 	bl	8009578 <__asan_report_load4>
 8012450:	24009180 	.word	0x24009180
 8012454:	2400a4e0 	.word	0x2400a4e0

08012458 <print_response_test>:
{
 8012458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801245c:	4604      	mov	r4, r0
 801245e:	b083      	sub	sp, #12
 8012460:	460d      	mov	r5, r1
        assert(self != NULL);
 8012462:	f7f7 fc63 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012466:	2c00      	cmp	r4, #0
 8012468:	f000 81ad 	beq.w	80127c6 <print_response_test+0x36e>
        switch (fsm) {
 801246c:	f7f7 fc5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012470:	2d01      	cmp	r5, #1
 8012472:	f000 80fb 	beq.w	801266c <print_response_test+0x214>
                return (struct cat_command*)self->cmd;
 8012476:	f7f7 fc59 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801247a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801247e:	08c2      	lsrs	r2, r0, #3
 8012480:	f000 0307 	and.w	r3, r0, #7
 8012484:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012488:	3303      	adds	r3, #3
 801248a:	f992 2000 	ldrsb.w	r2, [r2]
 801248e:	4293      	cmp	r3, r2
 8012490:	db02      	blt.n	8012498 <print_response_test+0x40>
 8012492:	2a00      	cmp	r2, #0
 8012494:	f040 817d 	bne.w	8012792 <print_response_test+0x33a>
 8012498:	6a66      	ldr	r6, [r4, #36]	; 0x24
        if (cmd->description != NULL) {
 801249a:	f106 0904 	add.w	r9, r6, #4
 801249e:	f7f7 fc45 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80124a2:	ea4f 08d9 	mov.w	r8, r9, lsr #3
 80124a6:	f009 0707 	and.w	r7, r9, #7
 80124aa:	f108 53dc 	add.w	r3, r8, #461373440	; 0x1b800000
 80124ae:	1cfa      	adds	r2, r7, #3
 80124b0:	f993 3000 	ldrsb.w	r3, [r3]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	db02      	blt.n	80124be <print_response_test+0x66>
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f040 8167 	bne.w	801278c <print_response_test+0x334>
 80124be:	6873      	ldr	r3, [r6, #4]
 80124c0:	b383      	cbz	r3, 8012524 <print_response_test+0xcc>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80124c2:	f7f7 fc33 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80124c6:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80124ca:	08c3      	lsrs	r3, r0, #3
 80124cc:	f000 0207 	and.w	r2, r0, #7
 80124d0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80124d4:	f993 3000 	ldrsb.w	r3, [r3]
 80124d8:	429a      	cmp	r2, r3
 80124da:	db02      	blt.n	80124e2 <print_response_test+0x8a>
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 815a 	bne.w	8012796 <print_response_test+0x33e>
 80124e2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
                if (print_string_to_buf(self, get_new_line_chars(self), fsm) != 0)
 80124e6:	462a      	mov	r2, r5
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80124e8:	49c4      	ldr	r1, [pc, #784]	; (80127fc <print_response_test+0x3a4>)
                if (print_string_to_buf(self, get_new_line_chars(self), fsm) != 0)
 80124ea:	4620      	mov	r0, r4
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80124ec:	f083 0301 	eor.w	r3, r3, #1
                if (print_string_to_buf(self, get_new_line_chars(self), fsm) != 0)
 80124f0:	4419      	add	r1, r3
 80124f2:	f7ff fb43 	bl	8011b7c <print_string_to_buf>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f040 8162 	bne.w	80127c0 <print_response_test+0x368>
                if (print_string_to_buf(self, cmd->description, fsm) != 0)
 80124fc:	f108 58dc 	add.w	r8, r8, #461373440	; 0x1b800000
 8012500:	f7f7 fc14 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012504:	3703      	adds	r7, #3
 8012506:	f998 3000 	ldrsb.w	r3, [r8]
 801250a:	429f      	cmp	r7, r3
 801250c:	db02      	blt.n	8012514 <print_response_test+0xbc>
 801250e:	2b00      	cmp	r3, #0
 8012510:	f040 8143 	bne.w	801279a <print_response_test+0x342>
 8012514:	462a      	mov	r2, r5
 8012516:	6871      	ldr	r1, [r6, #4]
 8012518:	4620      	mov	r0, r4
 801251a:	f7ff fb2f 	bl	8011b7c <print_string_to_buf>
 801251e:	2800      	cmp	r0, #0
 8012520:	f040 814e 	bne.w	80127c0 <print_response_test+0x368>
        if (cmd->test != NULL) {
 8012524:	f7f7 fc02 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012528:	f106 0014 	add.w	r0, r6, #20
 801252c:	08c3      	lsrs	r3, r0, #3
 801252e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012532:	f993 2000 	ldrsb.w	r2, [r3]
 8012536:	f000 0307 	and.w	r3, r0, #7
 801253a:	3303      	adds	r3, #3
 801253c:	4293      	cmp	r3, r2
 801253e:	db02      	blt.n	8012546 <print_response_test+0xee>
 8012540:	2a00      	cmp	r2, #0
 8012542:	f040 8121 	bne.w	8012788 <print_response_test+0x330>
 8012546:	6973      	ldr	r3, [r6, #20]
 8012548:	b1fb      	cbz	r3, 801258a <print_response_test+0x132>
                switch (fsm) {
 801254a:	f7f7 fbef 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801254e:	2d01      	cmp	r5, #1
 8012550:	f000 809f 	beq.w	8012692 <print_response_test+0x23a>
                        self->state = CAT_STATE_TEST_LOOP;
 8012554:	f7f7 fbea 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012558:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801255c:	08c3      	lsrs	r3, r0, #3
 801255e:	f000 0207 	and.w	r2, r0, #7
 8012562:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012566:	f993 3000 	ldrsb.w	r3, [r3]
 801256a:	429a      	cmp	r2, r3
 801256c:	db02      	blt.n	8012574 <print_response_test+0x11c>
 801256e:	2b00      	cmp	r3, #0
 8012570:	f040 8118 	bne.w	80127a4 <print_response_test+0x34c>
 8012574:	230f      	movs	r3, #15
                return 0;
 8012576:	2000      	movs	r0, #0
                        self->state = CAT_STATE_TEST_LOOP;
 8012578:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 801257c:	9001      	str	r0, [sp, #4]
 801257e:	f7f7 fbd5 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8012582:	9801      	ldr	r0, [sp, #4]
 8012584:	b003      	add	sp, #12
 8012586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        switch (fsm) {
 801258a:	f7f7 fbcf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801258e:	2d01      	cmp	r5, #1
 8012590:	f000 8094 	beq.w	80126bc <print_response_test+0x264>
        self->position = 0;
 8012594:	f7f7 fbca 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012598:	f104 0018 	add.w	r0, r4, #24
 801259c:	08c2      	lsrs	r2, r0, #3
 801259e:	f000 0307 	and.w	r3, r0, #7
 80125a2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80125a6:	3303      	adds	r3, #3
 80125a8:	f992 2000 	ldrsb.w	r2, [r2]
 80125ac:	4293      	cmp	r3, r2
 80125ae:	db02      	blt.n	80125b6 <print_response_test+0x15e>
 80125b0:	2a00      	cmp	r2, #0
 80125b2:	f040 80f9 	bne.w	80127a8 <print_response_test+0x350>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125b6:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 80125ba:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125bc:	08c3      	lsrs	r3, r0, #3
 80125be:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 80125c2:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125c4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80125c8:	f993 3000 	ldrsb.w	r3, [r3]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	db02      	blt.n	80125d6 <print_response_test+0x17e>
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f040 80ed 	bne.w	80127b0 <print_response_test+0x358>
        self->write_buf = get_new_line_chars(self);
 80125d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125da:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80125de:	4b87      	ldr	r3, [pc, #540]	; (80127fc <print_response_test+0x3a4>)
        self->write_buf = get_new_line_chars(self);
 80125e0:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125e2:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 80125e6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80125ea:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 80125ec:	f992 1000 	ldrsb.w	r1, [r2]
 80125f0:	f000 0207 	and.w	r2, r0, #7
 80125f4:	3203      	adds	r2, #3
 80125f6:	428a      	cmp	r2, r1
 80125f8:	db02      	blt.n	8012600 <print_response_test+0x1a8>
 80125fa:	2900      	cmp	r1, #0
 80125fc:	f040 80da 	bne.w	80127b4 <print_response_test+0x35c>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012600:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8012604:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012606:	08c2      	lsrs	r2, r0, #3
 8012608:	f000 0307 	and.w	r3, r0, #7
 801260c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012610:	3303      	adds	r3, #3
 8012612:	f992 2000 	ldrsb.w	r2, [r2]
 8012616:	4293      	cmp	r3, r2
 8012618:	db02      	blt.n	8012620 <print_response_test+0x1c8>
 801261a:	2a00      	cmp	r2, #0
 801261c:	f040 80cc 	bne.w	80127b8 <print_response_test+0x360>
        self->write_state_after = state_after;
 8012620:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012624:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8012626:	08c3      	lsrs	r3, r0, #3
 8012628:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801262c:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801262e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012632:	f993 3000 	ldrsb.w	r3, [r3]
 8012636:	429a      	cmp	r2, r3
 8012638:	db02      	blt.n	8012640 <print_response_test+0x1e8>
 801263a:	2b00      	cmp	r3, #0
 801263c:	f040 80be 	bne.w	80127bc <print_response_test+0x364>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012640:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 8012644:	2215      	movs	r2, #21
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012646:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 8012648:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801264c:	f000 0207 	and.w	r2, r0, #7
 8012650:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012654:	f993 3000 	ldrsb.w	r3, [r3]
 8012658:	429a      	cmp	r2, r3
 801265a:	db02      	blt.n	8012662 <print_response_test+0x20a>
 801265c:	2b00      	cmp	r3, #0
 801265e:	f040 80a5 	bne.w	80127ac <print_response_test+0x354>
 8012662:	2312      	movs	r3, #18
        return 0;
 8012664:	2000      	movs	r0, #0
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012666:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 801266a:	e787      	b.n	801257c <print_response_test+0x124>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 801266c:	f7f7 fb5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012670:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012674:	08c2      	lsrs	r2, r0, #3
 8012676:	f000 0307 	and.w	r3, r0, #7
 801267a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801267e:	3303      	adds	r3, #3
 8012680:	f992 2000 	ldrsb.w	r2, [r2]
 8012684:	4293      	cmp	r3, r2
 8012686:	db02      	blt.n	801268e <print_response_test+0x236>
 8012688:	2a00      	cmp	r2, #0
 801268a:	f040 8089 	bne.w	80127a0 <print_response_test+0x348>
 801268e:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8012690:	e703      	b.n	801249a <print_response_test+0x42>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_TEST_LOOP;
 8012692:	f7f7 fb4b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012696:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801269a:	08c3      	lsrs	r3, r0, #3
 801269c:	f000 0207 	and.w	r2, r0, #7
 80126a0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80126a4:	f993 3000 	ldrsb.w	r3, [r3]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	db02      	blt.n	80126b2 <print_response_test+0x25a>
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f040 8096 	bne.w	80127de <print_response_test+0x386>
 80126b2:	2304      	movs	r3, #4
                return 0;
 80126b4:	2000      	movs	r0, #0
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_TEST_LOOP;
 80126b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
                        break;
 80126ba:	e75f      	b.n	801257c <print_response_test+0x124>
        self->unsolicited_fsm.position = 0;
 80126bc:	f7f7 fb36 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80126c0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80126c4:	08c2      	lsrs	r2, r0, #3
 80126c6:	f000 0307 	and.w	r3, r0, #7
 80126ca:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80126ce:	3303      	adds	r3, #3
 80126d0:	f992 2000 	ldrsb.w	r2, [r2]
 80126d4:	4293      	cmp	r3, r2
 80126d6:	db02      	blt.n	80126de <print_response_test+0x286>
 80126d8:	2a00      	cmp	r2, #0
 80126da:	f040 808c 	bne.w	80127f6 <print_response_test+0x39e>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80126de:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 80126e2:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80126e4:	08c3      	lsrs	r3, r0, #3
 80126e6:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.position = 0;
 80126ea:	64e1      	str	r1, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80126ec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80126f0:	f993 3000 	ldrsb.w	r3, [r3]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	db01      	blt.n	80126fc <print_response_test+0x2a4>
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d17a      	bne.n	80127f2 <print_response_test+0x39a>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80126fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012700:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8012704:	4b3d      	ldr	r3, [pc, #244]	; (80127fc <print_response_test+0x3a4>)
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8012706:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012708:	f081 0101 	eor.w	r1, r1, #1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 801270c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012710:	440b      	add	r3, r1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8012712:	f992 1000 	ldrsb.w	r1, [r2]
 8012716:	f000 0207 	and.w	r2, r0, #7
 801271a:	3203      	adds	r2, #3
 801271c:	428a      	cmp	r2, r1
 801271e:	db01      	blt.n	8012724 <print_response_test+0x2cc>
 8012720:	2900      	cmp	r1, #0
 8012722:	d164      	bne.n	80127ee <print_response_test+0x396>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8012724:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8012728:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801272a:	08c2      	lsrs	r2, r0, #3
 801272c:	f000 0307 	and.w	r3, r0, #7
 8012730:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012734:	3303      	adds	r3, #3
 8012736:	f992 2000 	ldrsb.w	r2, [r2]
 801273a:	4293      	cmp	r3, r2
 801273c:	db01      	blt.n	8012742 <print_response_test+0x2ea>
 801273e:	2a00      	cmp	r2, #0
 8012740:	d153      	bne.n	80127ea <print_response_test+0x392>
        self->unsolicited_fsm.write_state_after = state_after;
 8012742:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8012746:	2100      	movs	r1, #0
        self->unsolicited_fsm.write_state_after = state_after;
 8012748:	08c3      	lsrs	r3, r0, #3
 801274a:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801274e:	6621      	str	r1, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 8012750:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012754:	f993 3000 	ldrsb.w	r3, [r3]
 8012758:	429a      	cmp	r2, r3
 801275a:	db01      	blt.n	8012760 <print_response_test+0x308>
 801275c:	2b00      	cmp	r3, #0
 801275e:	d142      	bne.n	80127e6 <print_response_test+0x38e>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8012760:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 8012764:	2208      	movs	r2, #8
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8012766:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.write_state_after = state_after;
 8012768:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 801276c:	f000 0207 	and.w	r2, r0, #7
 8012770:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012774:	f993 3000 	ldrsb.w	r3, [r3]
 8012778:	429a      	cmp	r2, r3
 801277a:	db00      	blt.n	801277e <print_response_test+0x326>
 801277c:	bb8b      	cbnz	r3, 80127e2 <print_response_test+0x38a>
 801277e:	2305      	movs	r3, #5
        return 0;
 8012780:	2000      	movs	r0, #0
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8012782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012786:	e6f9      	b.n	801257c <print_response_test+0x124>
        if (cmd->test != NULL) {
 8012788:	f7f6 fef6 	bl	8009578 <__asan_report_load4>
        if (cmd->description != NULL) {
 801278c:	4648      	mov	r0, r9
 801278e:	f7f6 fef3 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 8012792:	f7f6 fef1 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012796:	f7f6 fee7 	bl	8009568 <__asan_report_load1>
                if (print_string_to_buf(self, cmd->description, fsm) != 0)
 801279a:	4648      	mov	r0, r9
 801279c:	f7f6 feec 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80127a0:	f7f6 feea 	bl	8009578 <__asan_report_load4>
                        self->state = CAT_STATE_TEST_LOOP;
 80127a4:	f7f6 fed4 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 80127a8:	f7f6 feda 	bl	8009560 <__asan_report_store4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80127ac:	f7f6 fed0 	bl	8009550 <__asan_report_store1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80127b0:	f7f6 feda 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 80127b4:	f7f6 fed4 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80127b8:	f7f6 fed2 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 80127bc:	f7f6 fec8 	bl	8009550 <__asan_report_store1>
                        return -1;
 80127c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127c4:	e6da      	b.n	801257c <print_response_test+0x124>
        assert(self != NULL);
 80127c6:	f7f7 fab1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80127ca:	f7f6 fef1 	bl	80095b0 <__asan_handle_no_return>
 80127ce:	4b0c      	ldr	r3, [pc, #48]	; (8012800 <print_response_test+0x3a8>)
 80127d0:	4a0c      	ldr	r2, [pc, #48]	; (8012804 <print_response_test+0x3ac>)
 80127d2:	f240 218a 	movw	r1, #650	; 0x28a
 80127d6:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 80127da:	f00f f9cf 	bl	8021b7c <__assert_func>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_TEST_LOOP;
 80127de:	f7f6 feb7 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80127e2:	f7f6 feb5 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.write_state_after = state_after;
 80127e6:	f7f6 feb3 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 80127ea:	f7f6 feb9 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80127ee:	f7f6 feb7 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80127f2:	f7f6 feb9 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.position = 0;
 80127f6:	f7f6 feb3 	bl	8009560 <__asan_report_store4>
 80127fa:	bf00      	nop
 80127fc:	24009240 	.word	0x24009240
 8012800:	24009180 	.word	0x24009180
 8012804:	2400a2e0 	.word	0x2400a2e0

08012808 <end_processing_with_ok>:
{
 8012808:	b570      	push	{r4, r5, r6, lr}
 801280a:	4604      	mov	r4, r0
 801280c:	b082      	sub	sp, #8
 801280e:	460d      	mov	r5, r1
        assert(self != NULL);
 8012810:	f7f7 fa8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012814:	2c00      	cmp	r4, #0
 8012816:	f000 810c 	beq.w	8012a32 <end_processing_with_ok+0x22a>
        switch (fsm) {
 801281a:	f7f7 fa87 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801281e:	2d01      	cmp	r5, #1
 8012820:	d139      	bne.n	8012896 <end_processing_with_ok+0x8e>
        self->unsolicited_fsm.cmd = NULL;
 8012822:	f7f7 fa83 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012826:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801282a:	08c2      	lsrs	r2, r0, #3
 801282c:	f000 0307 	and.w	r3, r0, #7
 8012830:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012834:	3303      	adds	r3, #3
 8012836:	f992 2000 	ldrsb.w	r2, [r2]
 801283a:	4293      	cmp	r3, r2
 801283c:	db02      	blt.n	8012844 <end_processing_with_ok+0x3c>
 801283e:	2a00      	cmp	r2, #0
 8012840:	f040 80ef 	bne.w	8012a22 <end_processing_with_ok+0x21a>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012844:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 8012848:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801284a:	08c3      	lsrs	r3, r0, #3
 801284c:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.cmd = NULL;
 8012850:	6521      	str	r1, [r4, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012852:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012856:	f993 3000 	ldrsb.w	r3, [r3]
 801285a:	429a      	cmp	r2, r3
 801285c:	db02      	blt.n	8012864 <end_processing_with_ok+0x5c>
 801285e:	2b00      	cmp	r3, #0
 8012860:	f040 80e3 	bne.w	8012a2a <end_processing_with_ok+0x222>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012864:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012868:	22ff      	movs	r2, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 801286a:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801286c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012870:	f000 0207 	and.w	r2, r0, #7
 8012874:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012878:	f993 3000 	ldrsb.w	r3, [r3]
 801287c:	429a      	cmp	r2, r3
 801287e:	db02      	blt.n	8012886 <end_processing_with_ok+0x7e>
 8012880:	2b00      	cmp	r3, #0
 8012882:	f040 80d0 	bne.w	8012a26 <end_processing_with_ok+0x21e>
 8012886:	2300      	movs	r3, #0
 8012888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 801288c:	b002      	add	sp, #8
 801288e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012892:	f7f7 ba4b 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        return (char*)self->desc->buf;
 8012896:	f7f7 fa49 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801289a:	f004 0307 	and.w	r3, r4, #7
 801289e:	08e2      	lsrs	r2, r4, #3
 80128a0:	3303      	adds	r3, #3
 80128a2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80128a6:	f992 2000 	ldrsb.w	r2, [r2]
 80128aa:	4293      	cmp	r3, r2
 80128ac:	db02      	blt.n	80128b4 <end_processing_with_ok+0xac>
 80128ae:	2a00      	cmp	r2, #0
 80128b0:	f040 80d3 	bne.w	8012a5a <end_processing_with_ok+0x252>
 80128b4:	6825      	ldr	r5, [r4, #0]
 80128b6:	f105 0008 	add.w	r0, r5, #8
 80128ba:	08c2      	lsrs	r2, r0, #3
 80128bc:	f000 0307 	and.w	r3, r0, #7
 80128c0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80128c4:	3303      	adds	r3, #3
 80128c6:	f992 2000 	ldrsb.w	r2, [r2]
 80128ca:	4293      	cmp	r3, r2
 80128cc:	db02      	blt.n	80128d4 <end_processing_with_ok+0xcc>
 80128ce:	2a00      	cmp	r2, #0
 80128d0:	f040 80c6 	bne.w	8012a60 <end_processing_with_ok+0x258>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80128d4:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 80128d8:	68ae      	ldr	r6, [r5, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80128da:	08c3      	lsrs	r3, r0, #3
 80128dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80128e0:	f993 1000 	ldrsb.w	r1, [r3]
 80128e4:	f000 0307 	and.w	r3, r0, #7
 80128e8:	3303      	adds	r3, #3
 80128ea:	428b      	cmp	r3, r1
 80128ec:	db02      	blt.n	80128f4 <end_processing_with_ok+0xec>
 80128ee:	2900      	cmp	r1, #0
 80128f0:	f040 80bc 	bne.w	8012a6c <end_processing_with_ok+0x264>
 80128f4:	692b      	ldr	r3, [r5, #16]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 8081 	beq.w	80129fe <end_processing_with_ok+0x1f6>
 80128fc:	f7f7 fa16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012900:	f105 000c 	add.w	r0, r5, #12
 8012904:	08c3      	lsrs	r3, r0, #3
 8012906:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801290a:	f993 2000 	ldrsb.w	r2, [r3]
 801290e:	f000 0307 	and.w	r3, r0, #7
 8012912:	3303      	adds	r3, #3
 8012914:	4293      	cmp	r3, r2
 8012916:	db02      	blt.n	801291e <end_processing_with_ok+0x116>
 8012918:	2a00      	cmp	r2, #0
 801291a:	f040 8088 	bne.w	8012a2e <end_processing_with_ok+0x226>
 801291e:	68ea      	ldr	r2, [r5, #12]
 8012920:	9201      	str	r2, [sp, #4]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 8012922:	f7f7 fa03 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012926:	9a01      	ldr	r2, [sp, #4]
 8012928:	4630      	mov	r0, r6
 801292a:	4952      	ldr	r1, [pc, #328]	; (8012a74 <end_processing_with_ok+0x26c>)
 801292c:	f010 f853 	bl	80229d6 <strncpy>
        self->position = 0;
 8012930:	f104 0018 	add.w	r0, r4, #24
 8012934:	08c2      	lsrs	r2, r0, #3
 8012936:	f000 0307 	and.w	r3, r0, #7
 801293a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801293e:	3303      	adds	r3, #3
 8012940:	f992 2000 	ldrsb.w	r2, [r2]
 8012944:	4293      	cmp	r3, r2
 8012946:	db01      	blt.n	801294c <end_processing_with_ok+0x144>
 8012948:	2a00      	cmp	r2, #0
 801294a:	d17e      	bne.n	8012a4a <end_processing_with_ok+0x242>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801294c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8012950:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012952:	08c3      	lsrs	r3, r0, #3
 8012954:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8012958:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801295a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801295e:	f993 3000 	ldrsb.w	r3, [r3]
 8012962:	429a      	cmp	r2, r3
 8012964:	db01      	blt.n	801296a <end_processing_with_ok+0x162>
 8012966:	2b00      	cmp	r3, #0
 8012968:	d171      	bne.n	8012a4e <end_processing_with_ok+0x246>
        self->write_buf = get_new_line_chars(self);
 801296a:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801296e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8012972:	4b41      	ldr	r3, [pc, #260]	; (8012a78 <end_processing_with_ok+0x270>)
        self->write_buf = get_new_line_chars(self);
 8012974:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012976:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 801297a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801297e:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8012980:	f992 1000 	ldrsb.w	r1, [r2]
 8012984:	f000 0207 	and.w	r2, r0, #7
 8012988:	3203      	adds	r2, #3
 801298a:	428a      	cmp	r2, r1
 801298c:	db01      	blt.n	8012992 <end_processing_with_ok+0x18a>
 801298e:	2900      	cmp	r1, #0
 8012990:	d15f      	bne.n	8012a52 <end_processing_with_ok+0x24a>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012992:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8012996:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012998:	08c2      	lsrs	r2, r0, #3
 801299a:	f000 0307 	and.w	r3, r0, #7
 801299e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80129a2:	3303      	adds	r3, #3
 80129a4:	f992 2000 	ldrsb.w	r2, [r2]
 80129a8:	4293      	cmp	r3, r2
 80129aa:	db01      	blt.n	80129b0 <end_processing_with_ok+0x1a8>
 80129ac:	2a00      	cmp	r2, #0
 80129ae:	d152      	bne.n	8012a56 <end_processing_with_ok+0x24e>
        self->write_state_after = state_after;
 80129b0:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80129b4:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 80129b6:	08c3      	lsrs	r3, r0, #3
 80129b8:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80129bc:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80129be:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80129c2:	f993 3000 	ldrsb.w	r3, [r3]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	db01      	blt.n	80129ce <end_processing_with_ok+0x1c6>
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d14a      	bne.n	8012a64 <end_processing_with_ok+0x25c>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80129ce:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 80129d2:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80129d4:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 80129d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80129da:	f000 0207 	and.w	r2, r0, #7
 80129de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80129e2:	f993 3000 	ldrsb.w	r3, [r3]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	db01      	blt.n	80129ee <end_processing_with_ok+0x1e6>
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d13c      	bne.n	8012a68 <end_processing_with_ok+0x260>
 80129ee:	2312      	movs	r3, #18
 80129f0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 80129f4:	b002      	add	sp, #8
 80129f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129fa:	f7f7 b997 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80129fe:	f7f7 f995 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012a02:	f105 000c 	add.w	r0, r5, #12
 8012a06:	08c3      	lsrs	r3, r0, #3
 8012a08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012a0c:	f993 2000 	ldrsb.w	r2, [r3]
 8012a10:	f000 0307 	and.w	r3, r0, #7
 8012a14:	3303      	adds	r3, #3
 8012a16:	4293      	cmp	r3, r2
 8012a18:	db00      	blt.n	8012a1c <end_processing_with_ok+0x214>
 8012a1a:	bb4a      	cbnz	r2, 8012a70 <end_processing_with_ok+0x268>
 8012a1c:	68ea      	ldr	r2, [r5, #12]
 8012a1e:	0852      	lsrs	r2, r2, #1
 8012a20:	e77e      	b.n	8012920 <end_processing_with_ok+0x118>
        self->unsolicited_fsm.cmd = NULL;
 8012a22:	f7f6 fd9d 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012a26:	f7f6 fd93 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012a2a:	f7f6 fd91 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012a2e:	f7f6 fda3 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8012a32:	f7f7 f97b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012a36:	f7f6 fdbb 	bl	80095b0 <__asan_handle_no_return>
 8012a3a:	4b10      	ldr	r3, [pc, #64]	; (8012a7c <end_processing_with_ok+0x274>)
 8012a3c:	4a10      	ldr	r2, [pc, #64]	; (8012a80 <end_processing_with_ok+0x278>)
 8012a3e:	f240 2157 	movw	r1, #599	; 0x257
 8012a42:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8012a46:	f00f f899 	bl	8021b7c <__assert_func>
        self->position = 0;
 8012a4a:	f7f6 fd89 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012a4e:	f7f6 fd8b 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 8012a52:	f7f6 fd85 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012a56:	f7f6 fd83 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f7f6 fd8c 	bl	8009578 <__asan_report_load4>
 8012a60:	f7f6 fd8a 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 8012a64:	f7f6 fd74 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012a68:	f7f6 fd72 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012a6c:	f7f6 fd84 	bl	8009578 <__asan_report_load4>
 8012a70:	f7f6 fd82 	bl	8009578 <__asan_report_load4>
 8012a74:	24009300 	.word	0x24009300
 8012a78:	24009240 	.word	0x24009240
 8012a7c:	24009180 	.word	0x24009180
 8012a80:	2400a6c0 	.word	0x2400a6c0

08012a84 <end_processing_with_error>:
{
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	4604      	mov	r4, r0
 8012a88:	b082      	sub	sp, #8
 8012a8a:	460d      	mov	r5, r1
        assert(self != NULL);
 8012a8c:	f7f7 f94e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012a90:	2c00      	cmp	r4, #0
 8012a92:	f000 810c 	beq.w	8012cae <end_processing_with_error+0x22a>
        switch (fsm) {
 8012a96:	f7f7 f949 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012a9a:	2d01      	cmp	r5, #1
 8012a9c:	d139      	bne.n	8012b12 <end_processing_with_error+0x8e>
        self->unsolicited_fsm.cmd = NULL;
 8012a9e:	f7f7 f945 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012aa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012aa6:	08c2      	lsrs	r2, r0, #3
 8012aa8:	f000 0307 	and.w	r3, r0, #7
 8012aac:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012ab0:	3303      	adds	r3, #3
 8012ab2:	f992 2000 	ldrsb.w	r2, [r2]
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	db02      	blt.n	8012ac0 <end_processing_with_error+0x3c>
 8012aba:	2a00      	cmp	r2, #0
 8012abc:	f040 80ef 	bne.w	8012c9e <end_processing_with_error+0x21a>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 8012ac4:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ac6:	08c3      	lsrs	r3, r0, #3
 8012ac8:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.cmd = NULL;
 8012acc:	6521      	str	r1, [r4, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ace:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	db02      	blt.n	8012ae0 <end_processing_with_error+0x5c>
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f040 80e3 	bne.w	8012ca6 <end_processing_with_error+0x222>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012ae0:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ae4:	22ff      	movs	r2, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012ae6:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ae8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012aec:	f000 0207 	and.w	r2, r0, #7
 8012af0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012af4:	f993 3000 	ldrsb.w	r3, [r3]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	db02      	blt.n	8012b02 <end_processing_with_error+0x7e>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f040 80d0 	bne.w	8012ca2 <end_processing_with_error+0x21e>
 8012b02:	2300      	movs	r3, #0
 8012b04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012b08:	b002      	add	sp, #8
 8012b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b0e:	f7f7 b90d 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        return (char*)self->desc->buf;
 8012b12:	f7f7 f90b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012b16:	f004 0307 	and.w	r3, r4, #7
 8012b1a:	08e2      	lsrs	r2, r4, #3
 8012b1c:	3303      	adds	r3, #3
 8012b1e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012b22:	f992 2000 	ldrsb.w	r2, [r2]
 8012b26:	4293      	cmp	r3, r2
 8012b28:	db02      	blt.n	8012b30 <end_processing_with_error+0xac>
 8012b2a:	2a00      	cmp	r2, #0
 8012b2c:	f040 80d3 	bne.w	8012cd6 <end_processing_with_error+0x252>
 8012b30:	6825      	ldr	r5, [r4, #0]
 8012b32:	f105 0008 	add.w	r0, r5, #8
 8012b36:	08c2      	lsrs	r2, r0, #3
 8012b38:	f000 0307 	and.w	r3, r0, #7
 8012b3c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012b40:	3303      	adds	r3, #3
 8012b42:	f992 2000 	ldrsb.w	r2, [r2]
 8012b46:	4293      	cmp	r3, r2
 8012b48:	db02      	blt.n	8012b50 <end_processing_with_error+0xcc>
 8012b4a:	2a00      	cmp	r2, #0
 8012b4c:	f040 80c6 	bne.w	8012cdc <end_processing_with_error+0x258>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012b50:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 8012b54:	68ae      	ldr	r6, [r5, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012b56:	08c3      	lsrs	r3, r0, #3
 8012b58:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012b5c:	f993 1000 	ldrsb.w	r1, [r3]
 8012b60:	f000 0307 	and.w	r3, r0, #7
 8012b64:	3303      	adds	r3, #3
 8012b66:	428b      	cmp	r3, r1
 8012b68:	db02      	blt.n	8012b70 <end_processing_with_error+0xec>
 8012b6a:	2900      	cmp	r1, #0
 8012b6c:	f040 80bc 	bne.w	8012ce8 <end_processing_with_error+0x264>
 8012b70:	692b      	ldr	r3, [r5, #16]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 8081 	beq.w	8012c7a <end_processing_with_error+0x1f6>
 8012b78:	f7f7 f8d8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012b7c:	f105 000c 	add.w	r0, r5, #12
 8012b80:	08c3      	lsrs	r3, r0, #3
 8012b82:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012b86:	f993 2000 	ldrsb.w	r2, [r3]
 8012b8a:	f000 0307 	and.w	r3, r0, #7
 8012b8e:	3303      	adds	r3, #3
 8012b90:	4293      	cmp	r3, r2
 8012b92:	db02      	blt.n	8012b9a <end_processing_with_error+0x116>
 8012b94:	2a00      	cmp	r2, #0
 8012b96:	f040 8088 	bne.w	8012caa <end_processing_with_error+0x226>
 8012b9a:	68ea      	ldr	r2, [r5, #12]
 8012b9c:	9201      	str	r2, [sp, #4]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8012b9e:	f7f7 f8c5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012ba2:	9a01      	ldr	r2, [sp, #4]
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	4952      	ldr	r1, [pc, #328]	; (8012cf0 <end_processing_with_error+0x26c>)
 8012ba8:	f00f ff15 	bl	80229d6 <strncpy>
        self->position = 0;
 8012bac:	f104 0018 	add.w	r0, r4, #24
 8012bb0:	08c2      	lsrs	r2, r0, #3
 8012bb2:	f000 0307 	and.w	r3, r0, #7
 8012bb6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012bba:	3303      	adds	r3, #3
 8012bbc:	f992 2000 	ldrsb.w	r2, [r2]
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	db01      	blt.n	8012bc8 <end_processing_with_error+0x144>
 8012bc4:	2a00      	cmp	r2, #0
 8012bc6:	d17e      	bne.n	8012cc6 <end_processing_with_error+0x242>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bc8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8012bcc:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bce:	08c3      	lsrs	r3, r0, #3
 8012bd0:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8012bd4:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bd6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012bda:	f993 3000 	ldrsb.w	r3, [r3]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	db01      	blt.n	8012be6 <end_processing_with_error+0x162>
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d171      	bne.n	8012cca <end_processing_with_error+0x246>
        self->write_buf = get_new_line_chars(self);
 8012be6:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bea:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8012bee:	4b41      	ldr	r3, [pc, #260]	; (8012cf4 <end_processing_with_error+0x270>)
        self->write_buf = get_new_line_chars(self);
 8012bf0:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bf2:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8012bf6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012bfa:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8012bfc:	f992 1000 	ldrsb.w	r1, [r2]
 8012c00:	f000 0207 	and.w	r2, r0, #7
 8012c04:	3203      	adds	r2, #3
 8012c06:	428a      	cmp	r2, r1
 8012c08:	db01      	blt.n	8012c0e <end_processing_with_error+0x18a>
 8012c0a:	2900      	cmp	r1, #0
 8012c0c:	d15f      	bne.n	8012cce <end_processing_with_error+0x24a>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012c0e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8012c12:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012c14:	08c2      	lsrs	r2, r0, #3
 8012c16:	f000 0307 	and.w	r3, r0, #7
 8012c1a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012c1e:	3303      	adds	r3, #3
 8012c20:	f992 2000 	ldrsb.w	r2, [r2]
 8012c24:	4293      	cmp	r3, r2
 8012c26:	db01      	blt.n	8012c2c <end_processing_with_error+0x1a8>
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	d152      	bne.n	8012cd2 <end_processing_with_error+0x24e>
        self->write_state_after = state_after;
 8012c2c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012c30:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8012c32:	08c3      	lsrs	r3, r0, #3
 8012c34:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012c38:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8012c3a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	db01      	blt.n	8012c4a <end_processing_with_error+0x1c6>
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d14a      	bne.n	8012ce0 <end_processing_with_error+0x25c>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012c4a:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 8012c4e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012c50:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 8012c52:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012c56:	f000 0207 	and.w	r2, r0, #7
 8012c5a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	db01      	blt.n	8012c6a <end_processing_with_error+0x1e6>
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d13c      	bne.n	8012ce4 <end_processing_with_error+0x260>
 8012c6a:	2312      	movs	r3, #18
 8012c6c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8012c70:	b002      	add	sp, #8
 8012c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c76:	f7f7 b859 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012c7a:	f7f7 f857 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012c7e:	f105 000c 	add.w	r0, r5, #12
 8012c82:	08c3      	lsrs	r3, r0, #3
 8012c84:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012c88:	f993 2000 	ldrsb.w	r2, [r3]
 8012c8c:	f000 0307 	and.w	r3, r0, #7
 8012c90:	3303      	adds	r3, #3
 8012c92:	4293      	cmp	r3, r2
 8012c94:	db00      	blt.n	8012c98 <end_processing_with_error+0x214>
 8012c96:	bb4a      	cbnz	r2, 8012cec <end_processing_with_error+0x268>
 8012c98:	68ea      	ldr	r2, [r5, #12]
 8012c9a:	0852      	lsrs	r2, r2, #1
 8012c9c:	e77e      	b.n	8012b9c <end_processing_with_error+0x118>
        self->unsolicited_fsm.cmd = NULL;
 8012c9e:	f7f6 fc5f 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8012ca2:	f7f6 fc55 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8012ca6:	f7f6 fc53 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012caa:	f7f6 fc65 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8012cae:	f7f7 f83d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012cb2:	f7f6 fc7d 	bl	80095b0 <__asan_handle_no_return>
 8012cb6:	4b10      	ldr	r3, [pc, #64]	; (8012cf8 <end_processing_with_error+0x274>)
 8012cb8:	4a10      	ldr	r2, [pc, #64]	; (8012cfc <end_processing_with_error+0x278>)
 8012cba:	f240 2146 	movw	r1, #582	; 0x246
 8012cbe:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8012cc2:	f00e ff5b 	bl	8021b7c <__assert_func>
        self->position = 0;
 8012cc6:	f7f6 fc4b 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8012cca:	f7f6 fc4d 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 8012cce:	f7f6 fc47 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8012cd2:	f7f6 fc45 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7f6 fc4e 	bl	8009578 <__asan_report_load4>
 8012cdc:	f7f6 fc4c 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 8012ce0:	f7f6 fc36 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8012ce4:	f7f6 fc34 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012ce8:	f7f6 fc46 	bl	8009578 <__asan_report_load4>
 8012cec:	f7f6 fc44 	bl	8009578 <__asan_report_load4>
 8012cf0:	24009200 	.word	0x24009200
 8012cf4:	24009240 	.word	0x24009240
 8012cf8:	24009180 	.word	0x24009180
 8012cfc:	2400a3e0 	.word	0x2400a3e0

08012d00 <next_format_var_by_fsm>:
{
 8012d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d04:	4604      	mov	r4, r0
 8012d06:	460d      	mov	r5, r1
        assert(self != NULL);
 8012d08:	f7f7 f810 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012d0c:	2c00      	cmp	r4, #0
 8012d0e:	f000 820b 	beq.w	8013128 <next_format_var_by_fsm+0x428>
        switch (fsm) {
 8012d12:	f7f7 f80b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012d16:	2d01      	cmp	r5, #1
 8012d18:	f000 80d5 	beq.w	8012ec6 <next_format_var_by_fsm+0x1c6>
                return (struct cat_command*)self->cmd;
 8012d1c:	f7f7 f806 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012d20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012d24:	08c2      	lsrs	r2, r0, #3
 8012d26:	f000 0307 	and.w	r3, r0, #7
 8012d2a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012d2e:	3303      	adds	r3, #3
 8012d30:	f992 2000 	ldrsb.w	r2, [r2]
 8012d34:	4293      	cmp	r3, r2
 8012d36:	db02      	blt.n	8012d3e <next_format_var_by_fsm+0x3e>
 8012d38:	2a00      	cmp	r2, #0
 8012d3a:	f040 81d8 	bne.w	80130ee <next_format_var_by_fsm+0x3ee>
                if (++self->index < cmd->var_num) {
 8012d3e:	f104 000c 	add.w	r0, r4, #12
                return (struct cat_command*)self->cmd;
 8012d42:	6a65      	ldr	r5, [r4, #36]	; 0x24
                if (++self->index < cmd->var_num) {
 8012d44:	08c2      	lsrs	r2, r0, #3
 8012d46:	f000 0307 	and.w	r3, r0, #7
 8012d4a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012d4e:	3303      	adds	r3, #3
 8012d50:	f992 2000 	ldrsb.w	r2, [r2]
 8012d54:	4293      	cmp	r3, r2
 8012d56:	db02      	blt.n	8012d5e <next_format_var_by_fsm+0x5e>
 8012d58:	2a00      	cmp	r2, #0
 8012d5a:	f040 81cc 	bne.w	80130f6 <next_format_var_by_fsm+0x3f6>
 8012d5e:	f105 001c 	add.w	r0, r5, #28
 8012d62:	68e3      	ldr	r3, [r4, #12]
 8012d64:	08c2      	lsrs	r2, r0, #3
 8012d66:	3301      	adds	r3, #1
 8012d68:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012d6c:	60e3      	str	r3, [r4, #12]
 8012d6e:	f992 1000 	ldrsb.w	r1, [r2]
 8012d72:	f000 0207 	and.w	r2, r0, #7
 8012d76:	3203      	adds	r2, #3
 8012d78:	428a      	cmp	r2, r1
 8012d7a:	db02      	blt.n	8012d82 <next_format_var_by_fsm+0x82>
 8012d7c:	2900      	cmp	r1, #0
 8012d7e:	f040 81b8 	bne.w	80130f2 <next_format_var_by_fsm+0x3f2>
 8012d82:	69ea      	ldr	r2, [r5, #28]
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d305      	bcc.n	8012d94 <next_format_var_by_fsm+0x94>
        return CAT_STATUS_OK;
 8012d88:	2500      	movs	r5, #0
 8012d8a:	f7f6 ffcf 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8012d8e:	4628      	mov	r0, r5
 8012d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                        if (self->position >= get_atcmd_buf_size(self)) {
 8012d94:	f7f6 ffca 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012d98:	f104 0018 	add.w	r0, r4, #24
 8012d9c:	08c2      	lsrs	r2, r0, #3
 8012d9e:	f000 0307 	and.w	r3, r0, #7
 8012da2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012da6:	3303      	adds	r3, #3
 8012da8:	f992 2000 	ldrsb.w	r2, [r2]
 8012dac:	4293      	cmp	r3, r2
 8012dae:	db02      	blt.n	8012db6 <next_format_var_by_fsm+0xb6>
 8012db0:	2a00      	cmp	r2, #0
 8012db2:	f040 81a8 	bne.w	8013106 <next_format_var_by_fsm+0x406>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012db6:	08e2      	lsrs	r2, r4, #3
 8012db8:	f004 0307 	and.w	r3, r4, #7
                        if (self->position >= get_atcmd_buf_size(self)) {
 8012dbc:	69a7      	ldr	r7, [r4, #24]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8012dbe:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012dc2:	3303      	adds	r3, #3
 8012dc4:	f992 2000 	ldrsb.w	r2, [r2]
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	db02      	blt.n	8012dd2 <next_format_var_by_fsm+0xd2>
 8012dcc:	2a00      	cmp	r2, #0
 8012dce:	f040 819c 	bne.w	801310a <next_format_var_by_fsm+0x40a>
 8012dd2:	6826      	ldr	r6, [r4, #0]
 8012dd4:	f106 0010 	add.w	r0, r6, #16
 8012dd8:	08c3      	lsrs	r3, r0, #3
 8012dda:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012dde:	f993 2000 	ldrsb.w	r2, [r3]
 8012de2:	f000 0307 	and.w	r3, r0, #7
 8012de6:	3303      	adds	r3, #3
 8012de8:	4293      	cmp	r3, r2
 8012dea:	db02      	blt.n	8012df2 <next_format_var_by_fsm+0xf2>
 8012dec:	2a00      	cmp	r2, #0
 8012dee:	f040 818f 	bne.w	8013110 <next_format_var_by_fsm+0x410>
 8012df2:	6933      	ldr	r3, [r6, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f000 8130 	beq.w	801305a <next_format_var_by_fsm+0x35a>
 8012dfa:	f7f6 ff97 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012dfe:	f106 000c 	add.w	r0, r6, #12
 8012e02:	08c3      	lsrs	r3, r0, #3
 8012e04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012e08:	f993 2000 	ldrsb.w	r2, [r3]
 8012e0c:	f000 0307 	and.w	r3, r0, #7
 8012e10:	3303      	adds	r3, #3
 8012e12:	4293      	cmp	r3, r2
 8012e14:	db02      	blt.n	8012e1c <next_format_var_by_fsm+0x11c>
 8012e16:	2a00      	cmp	r2, #0
 8012e18:	f040 8184 	bne.w	8013124 <next_format_var_by_fsm+0x424>
 8012e1c:	f8d6 800c 	ldr.w	r8, [r6, #12]
                        if (self->position >= get_atcmd_buf_size(self)) {
 8012e20:	f7f6 ff84 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012e24:	4547      	cmp	r7, r8
 8012e26:	f080 810c 	bcs.w	8013042 <next_format_var_by_fsm+0x342>
        return (char*)self->desc->buf;
 8012e2a:	f7f6 ff7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012e2e:	f106 0008 	add.w	r0, r6, #8
 8012e32:	08c3      	lsrs	r3, r0, #3
 8012e34:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012e38:	f993 2000 	ldrsb.w	r2, [r3]
 8012e3c:	f000 0307 	and.w	r3, r0, #7
 8012e40:	3303      	adds	r3, #3
 8012e42:	4293      	cmp	r3, r2
 8012e44:	db02      	blt.n	8012e4c <next_format_var_by_fsm+0x14c>
 8012e46:	2a00      	cmp	r2, #0
 8012e48:	f040 8168 	bne.w	801311c <next_format_var_by_fsm+0x41c>
 8012e4c:	68b2      	ldr	r2, [r6, #8]
                        get_atcmd_buf(self)[self->position++] = ',';
 8012e4e:	1c7b      	adds	r3, r7, #1
 8012e50:	19d0      	adds	r0, r2, r7
 8012e52:	61a3      	str	r3, [r4, #24]
 8012e54:	08c3      	lsrs	r3, r0, #3
 8012e56:	f000 0107 	and.w	r1, r0, #7
 8012e5a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8012e62:	4299      	cmp	r1, r3
 8012e64:	db02      	blt.n	8012e6c <next_format_var_by_fsm+0x16c>
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f040 8154 	bne.w	8013114 <next_format_var_by_fsm+0x414>
 8012e6c:	232c      	movs	r3, #44	; 0x2c
                        self->var = &cmd->var[self->index];
 8012e6e:	f105 0018 	add.w	r0, r5, #24
                        get_atcmd_buf(self)[self->position++] = ',';
 8012e72:	55d3      	strb	r3, [r2, r7]
                        self->var = &cmd->var[self->index];
 8012e74:	08c2      	lsrs	r2, r0, #3
 8012e76:	f000 0307 	and.w	r3, r0, #7
 8012e7a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012e7e:	3303      	adds	r3, #3
 8012e80:	f992 2000 	ldrsb.w	r2, [r2]
 8012e84:	4293      	cmp	r3, r2
 8012e86:	db02      	blt.n	8012e8e <next_format_var_by_fsm+0x18e>
 8012e88:	2a00      	cmp	r2, #0
 8012e8a:	f040 8145 	bne.w	8013118 <next_format_var_by_fsm+0x418>
 8012e8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012e92:	68e3      	ldr	r3, [r4, #12]
 8012e94:	69aa      	ldr	r2, [r5, #24]
 8012e96:	08c1      	lsrs	r1, r0, #3
 8012e98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012e9c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8012ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ea4:	f000 0207 	and.w	r2, r0, #7
 8012ea8:	f991 1000 	ldrsb.w	r1, [r1]
 8012eac:	3203      	adds	r2, #3
 8012eae:	428a      	cmp	r2, r1
 8012eb0:	db02      	blt.n	8012eb8 <next_format_var_by_fsm+0x1b8>
 8012eb2:	2900      	cmp	r1, #0
 8012eb4:	f040 8134 	bne.w	8013120 <next_format_var_by_fsm+0x420>
                        return CAT_STATUS_BUSY;
 8012eb8:	2501      	movs	r5, #1
                        self->var = &cmd->var[self->index];
 8012eba:	62a3      	str	r3, [r4, #40]	; 0x28
                        return CAT_STATUS_BUSY;
 8012ebc:	f7f6 ff36 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8012ec6:	f7f6 ff31 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012eca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ece:	08c2      	lsrs	r2, r0, #3
 8012ed0:	f000 0307 	and.w	r3, r0, #7
 8012ed4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012ed8:	3303      	adds	r3, #3
 8012eda:	f992 2000 	ldrsb.w	r2, [r2]
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	db02      	blt.n	8012ee8 <next_format_var_by_fsm+0x1e8>
 8012ee2:	2a00      	cmp	r2, #0
 8012ee4:	f040 8109 	bne.w	80130fa <next_format_var_by_fsm+0x3fa>
                if (++self->unsolicited_fsm.index < cmd->var_num) {
 8012ee8:	f104 0048 	add.w	r0, r4, #72	; 0x48
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8012eec:	6d25      	ldr	r5, [r4, #80]	; 0x50
                if (++self->unsolicited_fsm.index < cmd->var_num) {
 8012eee:	08c2      	lsrs	r2, r0, #3
 8012ef0:	f000 0307 	and.w	r3, r0, #7
 8012ef4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012ef8:	3303      	adds	r3, #3
 8012efa:	f992 2000 	ldrsb.w	r2, [r2]
 8012efe:	4293      	cmp	r3, r2
 8012f00:	db02      	blt.n	8012f08 <next_format_var_by_fsm+0x208>
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	f040 80fb 	bne.w	80130fe <next_format_var_by_fsm+0x3fe>
 8012f08:	f105 001c 	add.w	r0, r5, #28
 8012f0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012f0e:	08c2      	lsrs	r2, r0, #3
 8012f10:	3301      	adds	r3, #1
 8012f12:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012f16:	64a3      	str	r3, [r4, #72]	; 0x48
 8012f18:	f992 1000 	ldrsb.w	r1, [r2]
 8012f1c:	f000 0207 	and.w	r2, r0, #7
 8012f20:	3203      	adds	r2, #3
 8012f22:	428a      	cmp	r2, r1
 8012f24:	db02      	blt.n	8012f2c <next_format_var_by_fsm+0x22c>
 8012f26:	2900      	cmp	r1, #0
 8012f28:	f040 80eb 	bne.w	8013102 <next_format_var_by_fsm+0x402>
 8012f2c:	69ea      	ldr	r2, [r5, #28]
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	f4bf af2a 	bcs.w	8012d88 <next_format_var_by_fsm+0x88>
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 8012f34:	f7f6 fefa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012f38:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8012f3c:	08c2      	lsrs	r2, r0, #3
 8012f3e:	f000 0307 	and.w	r3, r0, #7
 8012f42:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012f46:	3303      	adds	r3, #3
 8012f48:	f992 2000 	ldrsb.w	r2, [r2]
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	db02      	blt.n	8012f56 <next_format_var_by_fsm+0x256>
 8012f50:	2a00      	cmp	r2, #0
 8012f52:	f040 80fa 	bne.w	801314a <next_format_var_by_fsm+0x44a>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8012f56:	08e2      	lsrs	r2, r4, #3
 8012f58:	f004 0307 	and.w	r3, r4, #7
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 8012f5c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8012f5e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012f62:	3303      	adds	r3, #3
 8012f64:	f992 2000 	ldrsb.w	r2, [r2]
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	db02      	blt.n	8012f72 <next_format_var_by_fsm+0x272>
 8012f6c:	2a00      	cmp	r2, #0
 8012f6e:	f040 80e9 	bne.w	8013144 <next_format_var_by_fsm+0x444>
 8012f72:	f8d4 8000 	ldr.w	r8, [r4]
 8012f76:	f108 0010 	add.w	r0, r8, #16
 8012f7a:	08c3      	lsrs	r3, r0, #3
 8012f7c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012f80:	f993 2000 	ldrsb.w	r2, [r3]
 8012f84:	f000 0307 	and.w	r3, r0, #7
 8012f88:	3303      	adds	r3, #3
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	db02      	blt.n	8012f94 <next_format_var_by_fsm+0x294>
 8012f8e:	2a00      	cmp	r2, #0
 8012f90:	f040 80e4 	bne.w	801315c <next_format_var_by_fsm+0x45c>
 8012f94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f98:	2f00      	cmp	r7, #0
 8012f9a:	d073      	beq.n	8013084 <next_format_var_by_fsm+0x384>
 8012f9c:	f7f6 fec6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012fa0:	f108 0014 	add.w	r0, r8, #20
 8012fa4:	08c3      	lsrs	r3, r0, #3
 8012fa6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012faa:	f993 2000 	ldrsb.w	r2, [r3]
 8012fae:	f000 0307 	and.w	r3, r0, #7
 8012fb2:	3303      	adds	r3, #3
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	db02      	blt.n	8012fbe <next_format_var_by_fsm+0x2be>
 8012fb8:	2a00      	cmp	r2, #0
 8012fba:	f040 80cd 	bne.w	8013158 <next_format_var_by_fsm+0x458>
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 8012fbe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012fc2:	429e      	cmp	r6, r3
 8012fc4:	d273      	bcs.n	80130ae <next_format_var_by_fsm+0x3ae>
                        get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ',';
 8012fc6:	4437      	add	r7, r6
 8012fc8:	f7f6 feb0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8012fcc:	3601      	adds	r6, #1
 8012fce:	08fb      	lsrs	r3, r7, #3
 8012fd0:	f007 0207 	and.w	r2, r7, #7
 8012fd4:	64e6      	str	r6, [r4, #76]	; 0x4c
 8012fd6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8012fda:	f993 3000 	ldrsb.w	r3, [r3]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	db02      	blt.n	8012fe8 <next_format_var_by_fsm+0x2e8>
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f040 80b5 	bne.w	8013152 <next_format_var_by_fsm+0x452>
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 8012fe8:	f105 0018 	add.w	r0, r5, #24
                        get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ',';
 8012fec:	232c      	movs	r3, #44	; 0x2c
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 8012fee:	08c2      	lsrs	r2, r0, #3
                        get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ',';
 8012ff0:	703b      	strb	r3, [r7, #0]
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 8012ff2:	f000 0307 	and.w	r3, r0, #7
 8012ff6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8012ffa:	3303      	adds	r3, #3
 8012ffc:	f992 2000 	ldrsb.w	r2, [r2]
 8013000:	4293      	cmp	r3, r2
 8013002:	db02      	blt.n	801300a <next_format_var_by_fsm+0x30a>
 8013004:	2a00      	cmp	r2, #0
 8013006:	f040 80a2 	bne.w	801314e <next_format_var_by_fsm+0x44e>
 801300a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801300e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013010:	69aa      	ldr	r2, [r5, #24]
 8013012:	08c1      	lsrs	r1, r0, #3
 8013014:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013018:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801301c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013020:	f000 0207 	and.w	r2, r0, #7
 8013024:	f991 1000 	ldrsb.w	r1, [r1]
 8013028:	3203      	adds	r2, #3
 801302a:	428a      	cmp	r2, r1
 801302c:	db02      	blt.n	8013034 <next_format_var_by_fsm+0x334>
 801302e:	2900      	cmp	r1, #0
 8013030:	f040 8086 	bne.w	8013140 <next_format_var_by_fsm+0x440>
                        return CAT_STATUS_BUSY;
 8013034:	2501      	movs	r5, #1
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 8013036:	6563      	str	r3, [r4, #84]	; 0x54
                        return CAT_STATUS_BUSY;
 8013038:	f7f6 fe78 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 801303c:	4628      	mov	r0, r5
 801303e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                                return CAT_STATUS_BUSY;
 8013042:	2501      	movs	r5, #1
                                end_processing_with_error(self, fsm);
 8013044:	f7f6 fe72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013048:	4620      	mov	r0, r4
 801304a:	2100      	movs	r1, #0
 801304c:	f7ff fd1a 	bl	8012a84 <end_processing_with_error>
                                return CAT_STATUS_BUSY;
 8013050:	f7f6 fe6c 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8013054:	4628      	mov	r0, r5
 8013056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801305a:	f7f6 fe67 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801305e:	f106 000c 	add.w	r0, r6, #12
 8013062:	08c3      	lsrs	r3, r0, #3
 8013064:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013068:	f993 2000 	ldrsb.w	r2, [r3]
 801306c:	f000 0307 	and.w	r3, r0, #7
 8013070:	3303      	adds	r3, #3
 8013072:	4293      	cmp	r3, r2
 8013074:	db02      	blt.n	801307c <next_format_var_by_fsm+0x37c>
 8013076:	b10a      	cbz	r2, 801307c <next_format_var_by_fsm+0x37c>
 8013078:	f7f6 fa7e 	bl	8009578 <__asan_report_load4>
 801307c:	68f3      	ldr	r3, [r6, #12]
 801307e:	ea4f 0853 	mov.w	r8, r3, lsr #1
 8013082:	e6cd      	b.n	8012e20 <next_format_var_by_fsm+0x120>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013084:	f7f6 fe52 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013088:	f108 000c 	add.w	r0, r8, #12
 801308c:	08c3      	lsrs	r3, r0, #3
 801308e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013092:	f993 2000 	ldrsb.w	r2, [r3]
 8013096:	f000 0307 	and.w	r3, r0, #7
 801309a:	3303      	adds	r3, #3
 801309c:	4293      	cmp	r3, r2
 801309e:	da22      	bge.n	80130e6 <next_format_var_by_fsm+0x3e6>
 80130a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 80130a4:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80130a8:	ea4f 0953 	mov.w	r9, r3, lsr #1
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 80130ac:	d307      	bcc.n	80130be <next_format_var_by_fsm+0x3be>
                                end_processing_with_error(self, fsm);
 80130ae:	f7f6 fe3d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80130b2:	2101      	movs	r1, #1
 80130b4:	4620      	mov	r0, r4
                                return CAT_STATUS_BUSY;
 80130b6:	460d      	mov	r5, r1
                                end_processing_with_error(self, fsm);
 80130b8:	f7ff fce4 	bl	8012a84 <end_processing_with_error>
                                return CAT_STATUS_BUSY;
 80130bc:	e665      	b.n	8012d8a <next_format_var_by_fsm+0x8a>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80130be:	f7f6 fe35 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80130c2:	f108 0008 	add.w	r0, r8, #8
 80130c6:	08c3      	lsrs	r3, r0, #3
 80130c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80130cc:	f993 2000 	ldrsb.w	r2, [r3]
 80130d0:	f000 0307 	and.w	r3, r0, #7
 80130d4:	3303      	adds	r3, #3
 80130d6:	4293      	cmp	r3, r2
 80130d8:	db01      	blt.n	80130de <next_format_var_by_fsm+0x3de>
 80130da:	2a00      	cmp	r2, #0
 80130dc:	d140      	bne.n	8013160 <next_format_var_by_fsm+0x460>
 80130de:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80130e2:	444f      	add	r7, r9
 80130e4:	e76f      	b.n	8012fc6 <next_format_var_by_fsm+0x2c6>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80130e6:	2a00      	cmp	r2, #0
 80130e8:	d0da      	beq.n	80130a0 <next_format_var_by_fsm+0x3a0>
 80130ea:	f7f6 fa45 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 80130ee:	f7f6 fa43 	bl	8009578 <__asan_report_load4>
                if (++self->index < cmd->var_num) {
 80130f2:	f7f6 fa41 	bl	8009578 <__asan_report_load4>
 80130f6:	f7f6 fa3f 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80130fa:	f7f6 fa3d 	bl	8009578 <__asan_report_load4>
                if (++self->unsolicited_fsm.index < cmd->var_num) {
 80130fe:	f7f6 fa3b 	bl	8009578 <__asan_report_load4>
 8013102:	f7f6 fa39 	bl	8009578 <__asan_report_load4>
                        if (self->position >= get_atcmd_buf_size(self)) {
 8013106:	f7f6 fa37 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801310a:	4620      	mov	r0, r4
 801310c:	f7f6 fa34 	bl	8009578 <__asan_report_load4>
 8013110:	f7f6 fa32 	bl	8009578 <__asan_report_load4>
                        get_atcmd_buf(self)[self->position++] = ',';
 8013114:	f7f6 fa1c 	bl	8009550 <__asan_report_store1>
                        self->var = &cmd->var[self->index];
 8013118:	f7f6 fa2e 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801311c:	f7f6 fa2c 	bl	8009578 <__asan_report_load4>
                        self->var = &cmd->var[self->index];
 8013120:	f7f6 fa1e 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013124:	f7f6 fa28 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8013128:	f7f6 fe00 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801312c:	f7f6 fa40 	bl	80095b0 <__asan_handle_no_return>
 8013130:	4b0c      	ldr	r3, [pc, #48]	; (8013164 <next_format_var_by_fsm+0x464>)
 8013132:	4a0d      	ldr	r2, [pc, #52]	; (8013168 <next_format_var_by_fsm+0x468>)
 8013134:	f240 61cb 	movw	r1, #1739	; 0x6cb
 8013138:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 801313c:	f00e fd1e 	bl	8021b7c <__assert_func>
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 8013140:	f7f6 fa0e 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013144:	4620      	mov	r0, r4
 8013146:	f7f6 fa17 	bl	8009578 <__asan_report_load4>
                        if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self)) {
 801314a:	f7f6 fa15 	bl	8009578 <__asan_report_load4>
                        self->unsolicited_fsm.var = &cmd->var[self->unsolicited_fsm.index];
 801314e:	f7f6 fa13 	bl	8009578 <__asan_report_load4>
                        get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ',';
 8013152:	4638      	mov	r0, r7
 8013154:	f7f6 f9fc 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013158:	f7f6 fa0e 	bl	8009578 <__asan_report_load4>
 801315c:	f7f6 fa0c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8013160:	f7f6 fa0a 	bl	8009578 <__asan_report_load4>
 8013164:	24009180 	.word	0x24009180
 8013168:	2400a360 	.word	0x2400a360

0801316c <start_processing_format_read_args>:
{
 801316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013170:	4604      	mov	r4, r0
 8013172:	460e      	mov	r6, r1
        assert(self != NULL);
 8013174:	f7f6 fdda 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013178:	2c00      	cmp	r4, #0
 801317a:	f000 817e 	beq.w	801347a <start_processing_format_read_args+0x30e>
        switch (fsm) {
 801317e:	f7f6 fdd5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013182:	2e01      	cmp	r6, #1
 8013184:	f000 80db 	beq.w	801333e <start_processing_format_read_args+0x1d2>
                self->position = 0;
 8013188:	f7f6 fdd0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801318c:	f104 0018 	add.w	r0, r4, #24
 8013190:	08c2      	lsrs	r2, r0, #3
 8013192:	f000 0307 	and.w	r3, r0, #7
 8013196:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801319a:	3303      	adds	r3, #3
 801319c:	f992 2000 	ldrsb.w	r2, [r2]
 80131a0:	4293      	cmp	r3, r2
 80131a2:	db02      	blt.n	80131aa <start_processing_format_read_args+0x3e>
 80131a4:	2a00      	cmp	r2, #0
 80131a6:	f040 8131 	bne.w	801340c <start_processing_format_read_args+0x2a0>
                return (struct cat_command*)self->cmd;
 80131aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
                self->position = 0;
 80131ae:	2200      	movs	r2, #0
                return (struct cat_command*)self->cmd;
 80131b0:	08c3      	lsrs	r3, r0, #3
                self->position = 0;
 80131b2:	61a2      	str	r2, [r4, #24]
                return (struct cat_command*)self->cmd;
 80131b4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80131b8:	f993 2000 	ldrsb.w	r2, [r3]
 80131bc:	f000 0307 	and.w	r3, r0, #7
 80131c0:	3303      	adds	r3, #3
 80131c2:	4293      	cmp	r3, r2
 80131c4:	db02      	blt.n	80131cc <start_processing_format_read_args+0x60>
 80131c6:	2a00      	cmp	r2, #0
 80131c8:	f040 811c 	bne.w	8013404 <start_processing_format_read_args+0x298>
 80131cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
        if (print_string_to_buf(self, cmd->name, fsm) != 0) {
 80131ce:	f7f6 fdad 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80131d2:	f007 0307 	and.w	r3, r7, #7
 80131d6:	08fa      	lsrs	r2, r7, #3
 80131d8:	3303      	adds	r3, #3
 80131da:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80131de:	f992 2000 	ldrsb.w	r2, [r2]
 80131e2:	4293      	cmp	r3, r2
 80131e4:	db02      	blt.n	80131ec <start_processing_format_read_args+0x80>
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	f040 8109 	bne.w	80133fe <start_processing_format_read_args+0x292>
 80131ec:	4632      	mov	r2, r6
 80131ee:	6839      	ldr	r1, [r7, #0]
 80131f0:	4620      	mov	r0, r4
 80131f2:	f7fe fcc3 	bl	8011b7c <print_string_to_buf>
 80131f6:	2800      	cmp	r0, #0
 80131f8:	d168      	bne.n	80132cc <start_processing_format_read_args+0x160>
        if (print_string_to_buf(self, "=", fsm) != 0) {
 80131fa:	f7f6 fd97 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80131fe:	4632      	mov	r2, r6
 8013200:	49ac      	ldr	r1, [pc, #688]	; (80134b4 <start_processing_format_read_args+0x348>)
 8013202:	4620      	mov	r0, r4
 8013204:	f7fe fcba 	bl	8011b7c <print_string_to_buf>
 8013208:	2800      	cmp	r0, #0
 801320a:	d15f      	bne.n	80132cc <start_processing_format_read_args+0x160>
        if (cmd->var == NULL)
 801320c:	f7f6 fd8e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013210:	f107 0018 	add.w	r0, r7, #24
 8013214:	08c3      	lsrs	r3, r0, #3
 8013216:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801321a:	f993 2000 	ldrsb.w	r2, [r3]
 801321e:	f000 0307 	and.w	r3, r0, #7
 8013222:	3303      	adds	r3, #3
 8013224:	4293      	cmp	r3, r2
 8013226:	db02      	blt.n	801322e <start_processing_format_read_args+0xc2>
 8013228:	2a00      	cmp	r2, #0
 801322a:	f040 80ed 	bne.w	8013408 <start_processing_format_read_args+0x29c>
 801322e:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8013232:	f1b9 0f00 	cmp.w	r9, #0
 8013236:	d053      	beq.n	80132e0 <start_processing_format_read_args+0x174>
        for (i = 0; i < cmd->var_num; i++) {
 8013238:	f7f6 fd78 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801323c:	f107 001c 	add.w	r0, r7, #28
 8013240:	08c3      	lsrs	r3, r0, #3
 8013242:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013246:	f993 2000 	ldrsb.w	r2, [r3]
 801324a:	f000 0307 	and.w	r3, r0, #7
 801324e:	3303      	adds	r3, #3
 8013250:	4293      	cmp	r3, r2
 8013252:	db02      	blt.n	801325a <start_processing_format_read_args+0xee>
 8013254:	2a00      	cmp	r2, #0
 8013256:	f040 810e 	bne.w	8013476 <start_processing_format_read_args+0x30a>
 801325a:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801325e:	f1b8 0f00 	cmp.w	r8, #0
 8013262:	d03d      	beq.n	80132e0 <start_processing_format_read_args+0x174>
 8013264:	f109 0a10 	add.w	sl, r9, #16
 8013268:	2500      	movs	r5, #0
 801326a:	e006      	b.n	801327a <start_processing_format_read_args+0x10e>
 801326c:	3501      	adds	r5, #1
 801326e:	f7f6 fd5d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013272:	f10a 0a1c 	add.w	sl, sl, #28
 8013276:	4545      	cmp	r5, r8
 8013278:	d032      	beq.n	80132e0 <start_processing_format_read_args+0x174>
                var = &cmd->var[i];
 801327a:	f7f6 fd57 	bl	8009d2c <__sanitizer_cov_trace_pc>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801327e:	f00a 0207 	and.w	r2, sl, #7
 8013282:	ea4f 03da 	mov.w	r3, sl, lsr #3
 8013286:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801328a:	f993 1000 	ldrsb.w	r1, [r3]
 801328e:	428a      	cmp	r2, r1
 8013290:	db02      	blt.n	8013298 <start_processing_format_read_args+0x12c>
 8013292:	2900      	cmp	r1, #0
 8013294:	f040 80ec 	bne.w	8013470 <start_processing_format_read_args+0x304>
 8013298:	f89a 3000 	ldrb.w	r3, [sl]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d8e5      	bhi.n	801326c <start_processing_format_read_args+0x100>
                switch (fsm) {
 80132a0:	f7f6 fd44 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80132a4:	2e01      	cmp	r6, #1
 80132a6:	f000 80b3 	beq.w	8013410 <start_processing_format_read_args+0x2a4>
                        self->state = CAT_STATE_FORMAT_READ_ARGS;
 80132aa:	f7f6 fd3f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80132ae:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80132b2:	08c3      	lsrs	r3, r0, #3
 80132b4:	f000 0207 	and.w	r2, r0, #7
 80132b8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80132bc:	f993 3000 	ldrsb.w	r3, [r3]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	db60      	blt.n	8013386 <start_processing_format_read_args+0x21a>
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d05e      	beq.n	8013386 <start_processing_format_read_args+0x21a>
 80132c8:	f7f6 f942 	bl	8009550 <__asan_report_store1>
                end_processing_with_error(self, fsm);
 80132cc:	f7f6 fd2e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80132d0:	4631      	mov	r1, r6
 80132d2:	4620      	mov	r0, r4
 80132d4:	f7ff fbd6 	bl	8012a84 <end_processing_with_error>
}
 80132d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132dc:	f7f6 bd26 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        if (cmd->read == NULL) {
 80132e0:	f7f6 fd24 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80132e4:	f107 000c 	add.w	r0, r7, #12
 80132e8:	08c3      	lsrs	r3, r0, #3
 80132ea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80132ee:	f993 2000 	ldrsb.w	r2, [r3]
 80132f2:	f000 0307 	and.w	r3, r0, #7
 80132f6:	3303      	adds	r3, #3
 80132f8:	4293      	cmp	r3, r2
 80132fa:	db02      	blt.n	8013302 <start_processing_format_read_args+0x196>
 80132fc:	2a00      	cmp	r2, #0
 80132fe:	f040 80d6 	bne.w	80134ae <start_processing_format_read_args+0x342>
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d0e1      	beq.n	80132cc <start_processing_format_read_args+0x160>
        switch (fsm) {
 8013308:	f7f6 fd10 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801330c:	2e01      	cmp	r6, #1
 801330e:	d060      	beq.n	80133d2 <start_processing_format_read_args+0x266>
                self->state = CAT_STATE_READ_LOOP;
 8013310:	f7f6 fd0c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013314:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8013318:	08c3      	lsrs	r3, r0, #3
 801331a:	f000 0207 	and.w	r2, r0, #7
 801331e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013322:	f993 3000 	ldrsb.w	r3, [r3]
 8013326:	429a      	cmp	r2, r3
 8013328:	db02      	blt.n	8013330 <start_processing_format_read_args+0x1c4>
 801332a:	2b00      	cmp	r3, #0
 801332c:	f040 80b9 	bne.w	80134a2 <start_processing_format_read_args+0x336>
 8013330:	230e      	movs	r3, #14
 8013332:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8013336:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801333a:	f7f6 bcf7 	b.w	8009d2c <__sanitizer_cov_trace_pc>
                self->unsolicited_fsm.position = 0;
 801333e:	f7f6 fcf5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013342:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013346:	08c2      	lsrs	r2, r0, #3
 8013348:	f000 0307 	and.w	r3, r0, #7
 801334c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013350:	3303      	adds	r3, #3
 8013352:	f992 2000 	ldrsb.w	r2, [r2]
 8013356:	4293      	cmp	r3, r2
 8013358:	db02      	blt.n	8013360 <start_processing_format_read_args+0x1f4>
 801335a:	2a00      	cmp	r2, #0
 801335c:	f040 80a3 	bne.w	80134a6 <start_processing_format_read_args+0x33a>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8013360:	f104 0050 	add.w	r0, r4, #80	; 0x50
                self->unsolicited_fsm.position = 0;
 8013364:	2200      	movs	r2, #0
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8013366:	08c3      	lsrs	r3, r0, #3
                self->unsolicited_fsm.position = 0;
 8013368:	64e2      	str	r2, [r4, #76]	; 0x4c
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 801336a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801336e:	f993 2000 	ldrsb.w	r2, [r3]
 8013372:	f000 0307 	and.w	r3, r0, #7
 8013376:	3303      	adds	r3, #3
 8013378:	4293      	cmp	r3, r2
 801337a:	db02      	blt.n	8013382 <start_processing_format_read_args+0x216>
 801337c:	2a00      	cmp	r2, #0
 801337e:	f040 8094 	bne.w	80134aa <start_processing_format_read_args+0x33e>
 8013382:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8013384:	e723      	b.n	80131ce <start_processing_format_read_args+0x62>
                        self->index = 0;
 8013386:	f104 000c 	add.w	r0, r4, #12
                        self->state = CAT_STATE_FORMAT_READ_ARGS;
 801338a:	220a      	movs	r2, #10
                        self->index = 0;
 801338c:	08c3      	lsrs	r3, r0, #3
                        self->state = CAT_STATE_FORMAT_READ_ARGS;
 801338e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
                        self->index = 0;
 8013392:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013396:	f993 2000 	ldrsb.w	r2, [r3]
 801339a:	f000 0307 	and.w	r3, r0, #7
 801339e:	3303      	adds	r3, #3
 80133a0:	4293      	cmp	r3, r2
 80133a2:	db02      	blt.n	80133aa <start_processing_format_read_args+0x23e>
 80133a4:	b10a      	cbz	r2, 80133aa <start_processing_format_read_args+0x23e>
 80133a6:	f7f6 f8db 	bl	8009560 <__asan_report_store4>
                        self->var = cmd->var;
 80133aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
                        self->index = 0;
 80133ae:	2200      	movs	r2, #0
                        self->var = cmd->var;
 80133b0:	08c3      	lsrs	r3, r0, #3
                        self->index = 0;
 80133b2:	60e2      	str	r2, [r4, #12]
                        self->var = cmd->var;
 80133b4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80133b8:	f993 2000 	ldrsb.w	r2, [r3]
 80133bc:	f000 0307 	and.w	r3, r0, #7
 80133c0:	3303      	adds	r3, #3
 80133c2:	4293      	cmp	r3, r2
 80133c4:	db02      	blt.n	80133cc <start_processing_format_read_args+0x260>
 80133c6:	b10a      	cbz	r2, 80133cc <start_processing_format_read_args+0x260>
 80133c8:	f7f6 f8ca 	bl	8009560 <__asan_report_store4>
 80133cc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
                        break;
 80133d0:	e782      	b.n	80132d8 <start_processing_format_read_args+0x16c>
                self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_READ_LOOP;
 80133d2:	f7f6 fcab 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80133d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80133da:	08c3      	lsrs	r3, r0, #3
 80133dc:	f000 0207 	and.w	r2, r0, #7
 80133e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80133e4:	f993 3000 	ldrsb.w	r3, [r3]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	db01      	blt.n	80133f0 <start_processing_format_read_args+0x284>
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d156      	bne.n	801349e <start_processing_format_read_args+0x332>
 80133f0:	2303      	movs	r3, #3
 80133f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80133f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133fa:	f7f6 bc97 	b.w	8009d2c <__sanitizer_cov_trace_pc>
        if (print_string_to_buf(self, cmd->name, fsm) != 0) {
 80133fe:	4638      	mov	r0, r7
 8013400:	f7f6 f8ba 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 8013404:	f7f6 f8b8 	bl	8009578 <__asan_report_load4>
        if (cmd->var == NULL)
 8013408:	f7f6 f8b6 	bl	8009578 <__asan_report_load4>
                self->position = 0;
 801340c:	f7f6 f8a8 	bl	8009560 <__asan_report_store4>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_READ_ARGS;
 8013410:	f7f6 fc8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013414:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013418:	08c3      	lsrs	r3, r0, #3
 801341a:	f000 0207 	and.w	r2, r0, #7
 801341e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013422:	f993 3000 	ldrsb.w	r3, [r3]
 8013426:	429a      	cmp	r2, r3
 8013428:	db00      	blt.n	801342c <start_processing_format_read_args+0x2c0>
 801342a:	bb93      	cbnz	r3, 8013492 <start_processing_format_read_args+0x326>
                        self->unsolicited_fsm.index = 0;
 801342c:	f104 0048 	add.w	r0, r4, #72	; 0x48
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_READ_ARGS;
 8013430:	2201      	movs	r2, #1
                        self->unsolicited_fsm.index = 0;
 8013432:	08c3      	lsrs	r3, r0, #3
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_READ_ARGS;
 8013434:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
                        self->unsolicited_fsm.index = 0;
 8013438:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801343c:	f993 2000 	ldrsb.w	r2, [r3]
 8013440:	f000 0307 	and.w	r3, r0, #7
 8013444:	3303      	adds	r3, #3
 8013446:	4293      	cmp	r3, r2
 8013448:	db00      	blt.n	801344c <start_processing_format_read_args+0x2e0>
 801344a:	bb22      	cbnz	r2, 8013496 <start_processing_format_read_args+0x32a>
                        self->unsolicited_fsm.var = cmd->var;
 801344c:	f104 0054 	add.w	r0, r4, #84	; 0x54
                        self->unsolicited_fsm.index = 0;
 8013450:	2200      	movs	r2, #0
                        self->unsolicited_fsm.var = cmd->var;
 8013452:	08c3      	lsrs	r3, r0, #3
                        self->unsolicited_fsm.index = 0;
 8013454:	64a2      	str	r2, [r4, #72]	; 0x48
                        self->unsolicited_fsm.var = cmd->var;
 8013456:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801345a:	f993 2000 	ldrsb.w	r2, [r3]
 801345e:	f000 0307 	and.w	r3, r0, #7
 8013462:	3303      	adds	r3, #3
 8013464:	4293      	cmp	r3, r2
 8013466:	db00      	blt.n	801346a <start_processing_format_read_args+0x2fe>
 8013468:	b9ba      	cbnz	r2, 801349a <start_processing_format_read_args+0x32e>
 801346a:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
                        break;
 801346e:	e733      	b.n	80132d8 <start_processing_format_read_args+0x16c>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 8013470:	4650      	mov	r0, sl
 8013472:	f7f6 f879 	bl	8009568 <__asan_report_load1>
        for (i = 0; i < cmd->var_num; i++) {
 8013476:	f7f6 f87f 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 801347a:	f7f6 fc57 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801347e:	f7f6 f897 	bl	80095b0 <__asan_handle_no_return>
 8013482:	4b0d      	ldr	r3, [pc, #52]	; (80134b8 <start_processing_format_read_args+0x34c>)
 8013484:	4a0d      	ldr	r2, [pc, #52]	; (80134bc <start_processing_format_read_args+0x350>)
 8013486:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801348a:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 801348e:	f00e fb75 	bl	8021b7c <__assert_func>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_READ_ARGS;
 8013492:	f7f6 f85d 	bl	8009550 <__asan_report_store1>
                        self->unsolicited_fsm.index = 0;
 8013496:	f7f6 f863 	bl	8009560 <__asan_report_store4>
                        self->unsolicited_fsm.var = cmd->var;
 801349a:	f7f6 f861 	bl	8009560 <__asan_report_store4>
                self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_READ_LOOP;
 801349e:	f7f6 f857 	bl	8009550 <__asan_report_store1>
                self->state = CAT_STATE_READ_LOOP;
 80134a2:	f7f6 f855 	bl	8009550 <__asan_report_store1>
                self->unsolicited_fsm.position = 0;
 80134a6:	f7f6 f85b 	bl	8009560 <__asan_report_store4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80134aa:	f7f6 f865 	bl	8009578 <__asan_report_load4>
        if (cmd->read == NULL) {
 80134ae:	f7f6 f863 	bl	8009578 <__asan_report_load4>
 80134b2:	bf00      	nop
 80134b4:	24009340 	.word	0x24009340
 80134b8:	24009180 	.word	0x24009180
 80134bc:	2400a520 	.word	0x2400a520

080134c0 <start_processing_format_test_args>:
{
 80134c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c2:	4604      	mov	r4, r0
 80134c4:	460d      	mov	r5, r1
        assert(self != NULL);
 80134c6:	f7f6 fc31 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80134ca:	2c00      	cmp	r4, #0
 80134cc:	f000 8119 	beq.w	8013702 <start_processing_format_test_args+0x242>
        switch (fsm) {
 80134d0:	f7f6 fc2c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80134d4:	2d01      	cmp	r5, #1
 80134d6:	d076      	beq.n	80135c6 <start_processing_format_test_args+0x106>
                self->position = 0;
 80134d8:	f7f6 fc28 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80134dc:	f104 0018 	add.w	r0, r4, #24
 80134e0:	08c2      	lsrs	r2, r0, #3
 80134e2:	f000 0307 	and.w	r3, r0, #7
 80134e6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80134ea:	3303      	adds	r3, #3
 80134ec:	f992 2000 	ldrsb.w	r2, [r2]
 80134f0:	4293      	cmp	r3, r2
 80134f2:	db02      	blt.n	80134fa <start_processing_format_test_args+0x3a>
 80134f4:	2a00      	cmp	r2, #0
 80134f6:	f040 80fc 	bne.w	80136f2 <start_processing_format_test_args+0x232>
                return (struct cat_command*)self->cmd;
 80134fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
                self->position = 0;
 80134fe:	2200      	movs	r2, #0
                return (struct cat_command*)self->cmd;
 8013500:	08c3      	lsrs	r3, r0, #3
                self->position = 0;
 8013502:	61a2      	str	r2, [r4, #24]
                return (struct cat_command*)self->cmd;
 8013504:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013508:	f993 2000 	ldrsb.w	r2, [r3]
 801350c:	f000 0307 	and.w	r3, r0, #7
 8013510:	3303      	adds	r3, #3
 8013512:	4293      	cmp	r3, r2
 8013514:	db02      	blt.n	801351c <start_processing_format_test_args+0x5c>
 8013516:	2a00      	cmp	r2, #0
 8013518:	f040 80e9 	bne.w	80136ee <start_processing_format_test_args+0x22e>
 801351c:	6a66      	ldr	r6, [r4, #36]	; 0x24
        if (print_string_to_buf(self, cmd->name, fsm) != 0) {
 801351e:	f7f6 fc05 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013522:	f006 0307 	and.w	r3, r6, #7
 8013526:	08f2      	lsrs	r2, r6, #3
 8013528:	3303      	adds	r3, #3
 801352a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801352e:	f992 2000 	ldrsb.w	r2, [r2]
 8013532:	4293      	cmp	r3, r2
 8013534:	db02      	blt.n	801353c <start_processing_format_test_args+0x7c>
 8013536:	2a00      	cmp	r2, #0
 8013538:	f040 80d6 	bne.w	80136e8 <start_processing_format_test_args+0x228>
 801353c:	462a      	mov	r2, r5
 801353e:	6831      	ldr	r1, [r6, #0]
 8013540:	4620      	mov	r0, r4
 8013542:	f7fe fb1b 	bl	8011b7c <print_string_to_buf>
 8013546:	bba0      	cbnz	r0, 80135b2 <start_processing_format_test_args+0xf2>
        if (print_string_to_buf(self, "=", fsm) != 0) {
 8013548:	f7f6 fbf0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801354c:	462a      	mov	r2, r5
 801354e:	4974      	ldr	r1, [pc, #464]	; (8013720 <start_processing_format_test_args+0x260>)
 8013550:	4620      	mov	r0, r4
 8013552:	f7fe fb13 	bl	8011b7c <print_string_to_buf>
 8013556:	bb60      	cbnz	r0, 80135b2 <start_processing_format_test_args+0xf2>
        if ((cmd->var != NULL) && (cmd->var_num > 0)) {
 8013558:	f7f6 fbe8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801355c:	f106 0018 	add.w	r0, r6, #24
 8013560:	08c3      	lsrs	r3, r0, #3
 8013562:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013566:	f993 2000 	ldrsb.w	r2, [r3]
 801356a:	f000 0307 	and.w	r3, r0, #7
 801356e:	3303      	adds	r3, #3
 8013570:	4293      	cmp	r3, r2
 8013572:	db02      	blt.n	801357a <start_processing_format_test_args+0xba>
 8013574:	2a00      	cmp	r2, #0
 8013576:	f040 80be 	bne.w	80136f6 <start_processing_format_test_args+0x236>
 801357a:	69b7      	ldr	r7, [r6, #24]
 801357c:	b197      	cbz	r7, 80135a4 <start_processing_format_test_args+0xe4>
 801357e:	f7f6 fbd5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013582:	f106 001c 	add.w	r0, r6, #28
 8013586:	08c3      	lsrs	r3, r0, #3
 8013588:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801358c:	f993 2000 	ldrsb.w	r2, [r3]
 8013590:	f000 0307 	and.w	r3, r0, #7
 8013594:	3303      	adds	r3, #3
 8013596:	4293      	cmp	r3, r2
 8013598:	db02      	blt.n	80135a0 <start_processing_format_test_args+0xe0>
 801359a:	2a00      	cmp	r2, #0
 801359c:	f040 80bd 	bne.w	801371a <start_processing_format_test_args+0x25a>
 80135a0:	69f3      	ldr	r3, [r6, #28]
 80135a2:	bb9b      	cbnz	r3, 801360c <start_processing_format_test_args+0x14c>
        if (print_response_test(self, fsm) == 0)
 80135a4:	f7f6 fbc2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80135a8:	4629      	mov	r1, r5
 80135aa:	4620      	mov	r0, r4
 80135ac:	f7fe ff54 	bl	8012458 <print_response_test>
 80135b0:	b128      	cbz	r0, 80135be <start_processing_format_test_args+0xfe>
                end_processing_with_error(self, fsm);
 80135b2:	f7f6 fbbb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80135b6:	4629      	mov	r1, r5
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7ff fa63 	bl	8012a84 <end_processing_with_error>
}
 80135be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80135c2:	f7f6 bbb3 	b.w	8009d2c <__sanitizer_cov_trace_pc>
                self->unsolicited_fsm.position = 0;
 80135c6:	f7f6 fbb1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80135ca:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80135ce:	08c2      	lsrs	r2, r0, #3
 80135d0:	f000 0307 	and.w	r3, r0, #7
 80135d4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80135d8:	3303      	adds	r3, #3
 80135da:	f992 2000 	ldrsb.w	r2, [r2]
 80135de:	4293      	cmp	r3, r2
 80135e0:	db02      	blt.n	80135e8 <start_processing_format_test_args+0x128>
 80135e2:	2a00      	cmp	r2, #0
 80135e4:	f040 8089 	bne.w	80136fa <start_processing_format_test_args+0x23a>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80135e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
                self->unsolicited_fsm.position = 0;
 80135ec:	2200      	movs	r2, #0
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80135ee:	08c3      	lsrs	r3, r0, #3
                self->unsolicited_fsm.position = 0;
 80135f0:	64e2      	str	r2, [r4, #76]	; 0x4c
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80135f2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80135f6:	f993 2000 	ldrsb.w	r2, [r3]
 80135fa:	f000 0307 	and.w	r3, r0, #7
 80135fe:	3303      	adds	r3, #3
 8013600:	4293      	cmp	r3, r2
 8013602:	db01      	blt.n	8013608 <start_processing_format_test_args+0x148>
 8013604:	2a00      	cmp	r2, #0
 8013606:	d17a      	bne.n	80136fe <start_processing_format_test_args+0x23e>
 8013608:	6d26      	ldr	r6, [r4, #80]	; 0x50
 801360a:	e788      	b.n	801351e <start_processing_format_test_args+0x5e>
                switch (fsm) {
 801360c:	f7f6 fb8e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013610:	2d01      	cmp	r5, #1
 8013612:	d034      	beq.n	801367e <start_processing_format_test_args+0x1be>
                        self->state = CAT_STATE_FORMAT_TEST_ARGS;
 8013614:	f7f6 fb8a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013618:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801361c:	08c3      	lsrs	r3, r0, #3
 801361e:	f000 0207 	and.w	r2, r0, #7
 8013622:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013626:	f993 3000 	ldrsb.w	r3, [r3]
 801362a:	429a      	cmp	r2, r3
 801362c:	db02      	blt.n	8013634 <start_processing_format_test_args+0x174>
 801362e:	b10b      	cbz	r3, 8013634 <start_processing_format_test_args+0x174>
 8013630:	f7f5 ff8e 	bl	8009550 <__asan_report_store1>
                        self->index = 0;
 8013634:	f104 000c 	add.w	r0, r4, #12
                        self->state = CAT_STATE_FORMAT_TEST_ARGS;
 8013638:	220c      	movs	r2, #12
                        self->index = 0;
 801363a:	08c3      	lsrs	r3, r0, #3
                        self->state = CAT_STATE_FORMAT_TEST_ARGS;
 801363c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
                        self->index = 0;
 8013640:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013644:	f993 2000 	ldrsb.w	r2, [r3]
 8013648:	f000 0307 	and.w	r3, r0, #7
 801364c:	3303      	adds	r3, #3
 801364e:	4293      	cmp	r3, r2
 8013650:	db02      	blt.n	8013658 <start_processing_format_test_args+0x198>
 8013652:	b10a      	cbz	r2, 8013658 <start_processing_format_test_args+0x198>
 8013654:	f7f5 ff84 	bl	8009560 <__asan_report_store4>
                        self->var = cmd->var;
 8013658:	f104 0028 	add.w	r0, r4, #40	; 0x28
                        self->index = 0;
 801365c:	2200      	movs	r2, #0
                        self->var = cmd->var;
 801365e:	08c3      	lsrs	r3, r0, #3
                        self->index = 0;
 8013660:	60e2      	str	r2, [r4, #12]
                        self->var = cmd->var;
 8013662:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013666:	f993 2000 	ldrsb.w	r2, [r3]
 801366a:	f000 0307 	and.w	r3, r0, #7
 801366e:	3303      	adds	r3, #3
 8013670:	4293      	cmp	r3, r2
 8013672:	db02      	blt.n	801367a <start_processing_format_test_args+0x1ba>
 8013674:	b10a      	cbz	r2, 801367a <start_processing_format_test_args+0x1ba>
 8013676:	f7f5 ff73 	bl	8009560 <__asan_report_store4>
 801367a:	62a7      	str	r7, [r4, #40]	; 0x28
                        break;
 801367c:	e79f      	b.n	80135be <start_processing_format_test_args+0xfe>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_TEST_ARGS;
 801367e:	f7f6 fb55 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013682:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013686:	08c3      	lsrs	r3, r0, #3
 8013688:	f000 0207 	and.w	r2, r0, #7
 801368c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013690:	f993 3000 	ldrsb.w	r3, [r3]
 8013694:	429a      	cmp	r2, r3
 8013696:	db02      	blt.n	801369e <start_processing_format_test_args+0x1de>
 8013698:	b10b      	cbz	r3, 801369e <start_processing_format_test_args+0x1de>
 801369a:	f7f5 ff59 	bl	8009550 <__asan_report_store1>
                        self->unsolicited_fsm.index = 0;
 801369e:	f104 0048 	add.w	r0, r4, #72	; 0x48
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_TEST_ARGS;
 80136a2:	2202      	movs	r2, #2
                        self->unsolicited_fsm.index = 0;
 80136a4:	08c3      	lsrs	r3, r0, #3
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FORMAT_TEST_ARGS;
 80136a6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
                        self->unsolicited_fsm.index = 0;
 80136aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80136ae:	f993 2000 	ldrsb.w	r2, [r3]
 80136b2:	f000 0307 	and.w	r3, r0, #7
 80136b6:	3303      	adds	r3, #3
 80136b8:	4293      	cmp	r3, r2
 80136ba:	db02      	blt.n	80136c2 <start_processing_format_test_args+0x202>
 80136bc:	b10a      	cbz	r2, 80136c2 <start_processing_format_test_args+0x202>
 80136be:	f7f5 ff4f 	bl	8009560 <__asan_report_store4>
                        self->unsolicited_fsm.var = cmd->var;
 80136c2:	f104 0054 	add.w	r0, r4, #84	; 0x54
                        self->unsolicited_fsm.index = 0;
 80136c6:	2200      	movs	r2, #0
                        self->unsolicited_fsm.var = cmd->var;
 80136c8:	08c3      	lsrs	r3, r0, #3
                        self->unsolicited_fsm.index = 0;
 80136ca:	64a2      	str	r2, [r4, #72]	; 0x48
                        self->unsolicited_fsm.var = cmd->var;
 80136cc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80136d0:	f993 2000 	ldrsb.w	r2, [r3]
 80136d4:	f000 0307 	and.w	r3, r0, #7
 80136d8:	3303      	adds	r3, #3
 80136da:	4293      	cmp	r3, r2
 80136dc:	db02      	blt.n	80136e4 <start_processing_format_test_args+0x224>
 80136de:	b10a      	cbz	r2, 80136e4 <start_processing_format_test_args+0x224>
 80136e0:	f7f5 ff3e 	bl	8009560 <__asan_report_store4>
 80136e4:	6567      	str	r7, [r4, #84]	; 0x54
                        break;
 80136e6:	e76a      	b.n	80135be <start_processing_format_test_args+0xfe>
        if (print_string_to_buf(self, cmd->name, fsm) != 0) {
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7f5 ff45 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 80136ee:	f7f5 ff43 	bl	8009578 <__asan_report_load4>
                self->position = 0;
 80136f2:	f7f5 ff35 	bl	8009560 <__asan_report_store4>
        if ((cmd->var != NULL) && (cmd->var_num > 0)) {
 80136f6:	f7f5 ff3f 	bl	8009578 <__asan_report_load4>
                self->unsolicited_fsm.position = 0;
 80136fa:	f7f5 ff31 	bl	8009560 <__asan_report_store4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80136fe:	f7f5 ff3b 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8013702:	f7f6 fb13 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013706:	f7f5 ff53 	bl	80095b0 <__asan_handle_no_return>
 801370a:	4b06      	ldr	r3, [pc, #24]	; (8013724 <start_processing_format_test_args+0x264>)
 801370c:	4a06      	ldr	r2, [pc, #24]	; (8013728 <start_processing_format_test_args+0x268>)
 801370e:	f44f 7154 	mov.w	r1, #848	; 0x350
 8013712:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8013716:	f00e fa31 	bl	8021b7c <__assert_func>
        if ((cmd->var != NULL) && (cmd->var_num > 0)) {
 801371a:	f7f5 ff2d 	bl	8009578 <__asan_report_load4>
 801371e:	bf00      	nop
 8013720:	24009340 	.word	0x24009340
 8013724:	24009180 	.word	0x24009180
 8013728:	2400a240 	.word	0x2400a240

0801372c <format_read_args>:
{
 801372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013730:	b0a3      	sub	sp, #140	; 0x8c
 8013732:	4bc4      	ldr	r3, [pc, #784]	; (8013a44 <format_read_args+0x318>)
 8013734:	4604      	mov	r4, r0
 8013736:	460e      	mov	r6, r1
 8013738:	aa22      	add	r2, sp, #136	; 0x88
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f022 051f 	bic.w	r5, r2, #31
 8013740:	3d40      	subs	r5, #64	; 0x40
 8013742:	9501      	str	r5, [sp, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	f041 81b1 	bne.w	8014aac <format_read_args+0x1380>
 801374a:	08eb      	lsrs	r3, r5, #3
 801374c:	46a8      	mov	r8, r5
 801374e:	f04f 31f1 	mov.w	r1, #4059165169	; 0xf1f1f1f1
 8013752:	f103 52dc 	add.w	r2, r3, #461373440	; 0x1b800000
 8013756:	4bbc      	ldr	r3, [pc, #752]	; (8013a48 <format_read_args+0x31c>)
 8013758:	9202      	str	r2, [sp, #8]
 801375a:	f848 3b40 	str.w	r3, [r8], #64
 801375e:	4bbb      	ldr	r3, [pc, #748]	; (8013a4c <format_read_args+0x320>)
 8013760:	606b      	str	r3, [r5, #4]
 8013762:	4bbb      	ldr	r3, [pc, #748]	; (8013a50 <format_read_args+0x324>)
 8013764:	60ab      	str	r3, [r5, #8]
 8013766:	4bbb      	ldr	r3, [pc, #748]	; (8013a54 <format_read_args+0x328>)
 8013768:	e9c2 1300 	strd	r1, r3, [r2]
        assert(self != NULL);
 801376c:	f7f6 fade 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013770:	2c00      	cmp	r4, #0
 8013772:	f001 818f 	beq.w	8014a94 <format_read_args+0x1368>
        switch (fsm) {
 8013776:	f7f6 fad9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801377a:	2e01      	cmp	r6, #1
 801377c:	d045      	beq.n	801380a <format_read_args+0xde>
                return (struct cat_variable*)self->var;
 801377e:	f7f6 fad5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013782:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013786:	08c3      	lsrs	r3, r0, #3
 8013788:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801378c:	f993 2000 	ldrsb.w	r2, [r3]
 8013790:	f000 0307 	and.w	r3, r0, #7
 8013794:	3303      	adds	r3, #3
 8013796:	4293      	cmp	r3, r2
 8013798:	db02      	blt.n	80137a0 <format_read_args+0x74>
 801379a:	2a00      	cmp	r2, #0
 801379c:	f040 87a5 	bne.w	80146ea <format_read_args+0xfbe>
 80137a0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        if ((var->read != NULL) && (var->read(var) != 0)) {
 80137a2:	f7f6 fac3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80137a6:	f107 0018 	add.w	r0, r7, #24
 80137aa:	08c3      	lsrs	r3, r0, #3
 80137ac:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80137b0:	f993 2000 	ldrsb.w	r2, [r3]
 80137b4:	f000 0307 	and.w	r3, r0, #7
 80137b8:	3303      	adds	r3, #3
 80137ba:	4293      	cmp	r3, r2
 80137bc:	db02      	blt.n	80137c4 <format_read_args+0x98>
 80137be:	2a00      	cmp	r2, #0
 80137c0:	f040 878f 	bne.w	80146e2 <format_read_args+0xfb6>
 80137c4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80137c8:	f1b9 0f00 	cmp.w	r9, #0
 80137cc:	d005      	beq.n	80137da <format_read_args+0xae>
 80137ce:	f7f6 faad 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80137d2:	4638      	mov	r0, r7
 80137d4:	47c8      	blx	r9
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d165      	bne.n	80138a6 <format_read_args+0x17a>
        switch (var->type) {
 80137da:	f7f6 faa7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80137de:	1d38      	adds	r0, r7, #4
 80137e0:	08c3      	lsrs	r3, r0, #3
 80137e2:	f000 0207 	and.w	r2, r0, #7
 80137e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80137ea:	f993 3000 	ldrsb.w	r3, [r3]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	db02      	blt.n	80137f8 <format_read_args+0xcc>
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	f040 8777 	bne.w	80146e6 <format_read_args+0xfba>
 80137f8:	793b      	ldrb	r3, [r7, #4]
 80137fa:	2b04      	cmp	r3, #4
 80137fc:	f201 8203 	bhi.w	8014c06 <format_read_args+0x14da>
 8013800:	e8df f003 	tbb	[pc, r3]
 8013804:	6616ae7f 	.word	0x6616ae7f
 8013808:	95          	.byte	0x95
 8013809:	00          	.byte	0x00
                return (struct cat_variable*)self->unsolicited_fsm.var;
 801380a:	f7f6 fa8f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801380e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8013812:	08c3      	lsrs	r3, r0, #3
 8013814:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013818:	f993 2000 	ldrsb.w	r2, [r3]
 801381c:	f000 0307 	and.w	r3, r0, #7
 8013820:	3303      	adds	r3, #3
 8013822:	4293      	cmp	r3, r2
 8013824:	db02      	blt.n	801382c <format_read_args+0x100>
 8013826:	2a00      	cmp	r2, #0
 8013828:	f040 8761 	bne.w	80146ee <format_read_args+0xfc2>
 801382c:	6d67      	ldr	r7, [r4, #84]	; 0x54
 801382e:	e7b8      	b.n	80137a2 <format_read_args+0x76>
        char fstr[8];
 8013830:	f7f6 fa7c 	bl	8009d2c <__sanitizer_cov_trace_pc>
        switch (fsm) {
 8013834:	2e01      	cmp	r6, #1
 8013836:	f000 879e 	beq.w	8014776 <format_read_args+0x104a>
                return (struct cat_variable*)self->var;
 801383a:	f7f6 fa77 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801383e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013842:	08c3      	lsrs	r3, r0, #3
 8013844:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013848:	f993 2000 	ldrsb.w	r2, [r3]
 801384c:	f000 0307 	and.w	r3, r0, #7
 8013850:	3303      	adds	r3, #3
 8013852:	4293      	cmp	r3, r2
 8013854:	f280 86d3 	bge.w	80145fe <format_read_args+0xed2>
 8013858:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        switch (var->data_size) {
 801385a:	f7f6 fa67 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801385e:	f107 000c 	add.w	r0, r7, #12
 8013862:	08c3      	lsrs	r3, r0, #3
 8013864:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013868:	f993 2000 	ldrsb.w	r2, [r3]
 801386c:	f000 0307 	and.w	r3, r0, #7
 8013870:	3303      	adds	r3, #3
 8013872:	4293      	cmp	r3, r2
 8013874:	db02      	blt.n	801387c <format_read_args+0x150>
 8013876:	2a00      	cmp	r2, #0
 8013878:	f041 8158 	bne.w	8014b2c <format_read_args+0x1400>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b02      	cmp	r3, #2
 8013880:	f001 8002 	beq.w	8014888 <format_read_args+0x115c>
 8013884:	2b04      	cmp	r3, #4
 8013886:	f001 8028 	beq.w	80148da <format_read_args+0x11ae>
 801388a:	2b01      	cmp	r3, #1
 801388c:	f000 87aa 	beq.w	80147e4 <format_read_args+0x10b8>
 8013890:	f7f6 fa4c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013894:	f1a8 0320 	sub.w	r3, r8, #32
 8013898:	22f8      	movs	r2, #248	; 0xf8
 801389a:	08db      	lsrs	r3, r3, #3
 801389c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80138a0:	701a      	strb	r2, [r3, #0]
        if (stat < 0) {
 80138a2:	f7f6 fa43 	bl	8009d2c <__sanitizer_cov_trace_pc>
                return CAT_STATUS_BUSY;
 80138a6:	2701      	movs	r7, #1
                end_processing_with_error(self, fsm);
 80138a8:	f7f6 fa40 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80138ac:	4631      	mov	r1, r6
 80138ae:	4620      	mov	r0, r4
 80138b0:	f7ff f8e8 	bl	8012a84 <end_processing_with_error>
                return CAT_STATUS_BUSY;
 80138b4:	f7f6 fa3a 	bl	8009d2c <__sanitizer_cov_trace_pc>
{
 80138b8:	9b01      	ldr	r3, [sp, #4]
 80138ba:	42ab      	cmp	r3, r5
 80138bc:	f041 80fe 	bne.w	8014abc <format_read_args+0x1390>
 80138c0:	2300      	movs	r3, #0
 80138c2:	9a02      	ldr	r2, [sp, #8]
 80138c4:	e9c2 3300 	strd	r3, r3, [r2]
}
 80138c8:	4638      	mov	r0, r7
 80138ca:	b023      	add	sp, #140	; 0x8c
 80138cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (fsm) {
 80138d0:	f7f6 fa2c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80138d4:	2e01      	cmp	r6, #1
 80138d6:	f000 8739 	beq.w	801474c <format_read_args+0x1020>
                return (struct cat_variable*)self->var;
 80138da:	f7f6 fa27 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80138de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80138e2:	08c3      	lsrs	r3, r0, #3
 80138e4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80138e8:	f993 2000 	ldrsb.w	r2, [r3]
 80138ec:	f000 0307 	and.w	r3, r0, #7
 80138f0:	3303      	adds	r3, #3
 80138f2:	4293      	cmp	r3, r2
 80138f4:	f2c0 80b2 	blt.w	8013a5c <format_read_args+0x330>
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	f000 80af 	beq.w	8013a5c <format_read_args+0x330>
 80138fe:	f7f5 fe3b 	bl	8009578 <__asan_report_load4>
        switch (fsm) {
 8013902:	f7f6 fa13 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013906:	2e01      	cmp	r6, #1
 8013908:	f000 870c 	beq.w	8014724 <format_read_args+0xff8>
                return (struct cat_variable*)self->var;
 801390c:	f7f6 fa0e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013910:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013914:	08c3      	lsrs	r3, r0, #3
 8013916:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801391a:	f993 2000 	ldrsb.w	r2, [r3]
 801391e:	f000 0307 	and.w	r3, r0, #7
 8013922:	3303      	adds	r3, #3
 8013924:	4293      	cmp	r3, r2
 8013926:	db34      	blt.n	8013992 <format_read_args+0x266>
 8013928:	b39a      	cbz	r2, 8013992 <format_read_args+0x266>
 801392a:	f7f5 fe25 	bl	8009578 <__asan_report_load4>
        switch (fsm) {
 801392e:	f7f6 f9fd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013932:	2e01      	cmp	r6, #1
 8013934:	f000 86dd 	beq.w	80146f2 <format_read_args+0xfc6>
                return (struct cat_variable*)self->var;
 8013938:	f7f6 f9f8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801393c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013940:	08c3      	lsrs	r3, r0, #3
 8013942:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013946:	f993 2000 	ldrsb.w	r2, [r3]
 801394a:	f000 0307 	and.w	r3, r0, #7
 801394e:	3303      	adds	r3, #3
 8013950:	4293      	cmp	r3, r2
 8013952:	f2c0 81db 	blt.w	8013d0c <format_read_args+0x5e0>
 8013956:	2a00      	cmp	r2, #0
 8013958:	f000 81d8 	beq.w	8013d0c <format_read_args+0x5e0>
 801395c:	f7f5 fe0c 	bl	8009578 <__asan_report_load4>
        switch (fsm) {
 8013960:	f7f6 f9e4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013964:	2e01      	cmp	r6, #1
 8013966:	f000 871a 	beq.w	801479e <format_read_args+0x1072>
                return (struct cat_variable*)self->var;
 801396a:	f7f6 f9df 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801396e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013972:	08c3      	lsrs	r3, r0, #3
 8013974:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013978:	f993 2000 	ldrsb.w	r2, [r3]
 801397c:	f000 0307 	and.w	r3, r0, #7
 8013980:	3303      	adds	r3, #3
 8013982:	4293      	cmp	r3, r2
 8013984:	f2c0 8311 	blt.w	8013faa <format_read_args+0x87e>
 8013988:	2a00      	cmp	r2, #0
 801398a:	f000 830e 	beq.w	8013faa <format_read_args+0x87e>
 801398e:	f7f5 fdf3 	bl	8009578 <__asan_report_load4>
 8013992:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        switch (var->data_size) {
 8013994:	f7f6 f9ca 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013998:	f107 000c 	add.w	r0, r7, #12
 801399c:	08c3      	lsrs	r3, r0, #3
 801399e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80139a2:	f993 2000 	ldrsb.w	r2, [r3]
 80139a6:	f000 0307 	and.w	r3, r0, #7
 80139aa:	3303      	adds	r3, #3
 80139ac:	4293      	cmp	r3, r2
 80139ae:	db02      	blt.n	80139b6 <format_read_args+0x28a>
 80139b0:	2a00      	cmp	r2, #0
 80139b2:	f041 8102 	bne.w	8014bba <format_read_args+0x148e>
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	f000 87da 	beq.w	8014972 <format_read_args+0x1246>
 80139be:	2b04      	cmp	r3, #4
 80139c0:	f001 801d 	beq.w	80149fe <format_read_args+0x12d2>
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	f47f af6c 	bne.w	80138a2 <format_read_args+0x176>
                val = *(int8_t *)var->data;
 80139ca:	f7f6 f9af 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80139ce:	f107 0008 	add.w	r0, r7, #8
 80139d2:	08c3      	lsrs	r3, r0, #3
 80139d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80139d8:	f993 2000 	ldrsb.w	r2, [r3]
 80139dc:	f000 0307 	and.w	r3, r0, #7
 80139e0:	3303      	adds	r3, #3
 80139e2:	4293      	cmp	r3, r2
 80139e4:	db02      	blt.n	80139ec <format_read_args+0x2c0>
 80139e6:	2a00      	cmp	r2, #0
 80139e8:	f041 80c8 	bne.w	8014b7c <format_read_args+0x1450>
 80139ec:	68b8      	ldr	r0, [r7, #8]
 80139ee:	08c3      	lsrs	r3, r0, #3
 80139f0:	f000 0207 	and.w	r2, r0, #7
 80139f4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80139f8:	f993 3000 	ldrsb.w	r3, [r3]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	db02      	blt.n	8013a06 <format_read_args+0x2da>
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f041 80bd 	bne.w	8014b80 <format_read_args+0x1454>
 8013a06:	f990 8000 	ldrsb.w	r8, [r0]
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8013a0a:	f7f6 f98f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013a0e:	f107 0010 	add.w	r0, r7, #16
 8013a12:	08c3      	lsrs	r3, r0, #3
 8013a14:	f000 0207 	and.w	r2, r0, #7
 8013a18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	db02      	blt.n	8013a2a <format_read_args+0x2fe>
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f041 80ad 	bne.w	8014b84 <format_read_args+0x1458>
 8013a2a:	7c3b      	ldrb	r3, [r7, #16]
 8013a2c:	2b02      	cmp	r3, #2
 8013a2e:	f000 86d5 	beq.w	80147dc <format_read_args+0x10b0>
        if (print_format_num(self, "%d", val, fsm) != 0)
 8013a32:	f7f6 f97b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013a36:	f7f6 f979 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013a3a:	4633      	mov	r3, r6
 8013a3c:	4642      	mov	r2, r8
 8013a3e:	4906      	ldr	r1, [pc, #24]	; (8013a58 <format_read_args+0x32c>)
 8013a40:	e309      	b.n	8014056 <format_read_args+0x92a>
 8013a42:	bf00      	nop
 8013a44:	24037400 	.word	0x24037400
 8013a48:	41b58ab3 	.word	0x41b58ab3
 8013a4c:	2400a020 	.word	0x2400a020
 8013a50:	0801372c 	.word	0x0801372c
 8013a54:	f3f3f300 	.word	0xf3f3f300
 8013a58:	24009380 	.word	0x24009380
                return (struct cat_variable*)self->var;
 8013a5c:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
        buf = var->data;
 8013a60:	f7f6 f964 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013a64:	f10a 0008 	add.w	r0, sl, #8
 8013a68:	08c3      	lsrs	r3, r0, #3
 8013a6a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013a6e:	f993 2000 	ldrsb.w	r2, [r3]
 8013a72:	f000 0307 	and.w	r3, r0, #7
 8013a76:	3303      	adds	r3, #3
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	db02      	blt.n	8013a82 <format_read_args+0x356>
 8013a7c:	2a00      	cmp	r2, #0
 8013a7e:	f041 8098 	bne.w	8014bb2 <format_read_args+0x1486>
        for (i = 0; i < var->data_size; i++) {
 8013a82:	f10a 030c 	add.w	r3, sl, #12
        buf = var->data;
 8013a86:	f8da 1008 	ldr.w	r1, [sl, #8]
        for (i = 0; i < var->data_size; i++) {
 8013a8a:	08da      	lsrs	r2, r3, #3
 8013a8c:	f003 0007 	and.w	r0, r3, #7
 8013a90:	9309      	str	r3, [sp, #36]	; 0x24
 8013a92:	f102 53dc 	add.w	r3, r2, #461373440	; 0x1b800000
 8013a96:	9206      	str	r2, [sp, #24]
 8013a98:	1cc2      	adds	r2, r0, #3
 8013a9a:	9005      	str	r0, [sp, #20]
 8013a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	db02      	blt.n	8013aaa <format_read_args+0x37e>
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f041 8081 	bne.w	8014bac <format_read_args+0x1480>
 8013aaa:	f8da 300c 	ldr.w	r3, [sl, #12]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 859d 	beq.w	80145ee <format_read_args+0xec2>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013ab4:	f004 0307 	and.w	r3, r4, #7
 8013ab8:	4689      	mov	r9, r1
        for (i = 0; i < var->data_size; i++) {
 8013aba:	f04f 0b00 	mov.w	fp, #0
 8013abe:	9508      	str	r5, [sp, #32]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013ac0:	3303      	adds	r3, #3
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	f10a 0310 	add.w	r3, sl, #16
 8013ac8:	9303      	str	r3, [sp, #12]
 8013aca:	e0af      	b.n	8013c2c <format_read_args+0x500>
                        val = buf[i];
 8013acc:	f7f6 f92e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013ad0:	f009 0207 	and.w	r2, r9, #7
 8013ad4:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8013ad8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013adc:	f993 3000 	ldrsb.w	r3, [r3]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	db02      	blt.n	8013aea <format_read_args+0x3be>
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	f040 87ba 	bne.w	8014a5e <format_read_args+0x1332>
                if (print_format_num(self, "%02X", val, fsm) != 0)
 8013aea:	f899 7000 	ldrb.w	r7, [r9]
        switch (fsm) {
 8013aee:	f7f6 f91d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013af2:	2e01      	cmp	r6, #1
 8013af4:	f000 80b5 	beq.w	8013c62 <format_read_args+0x536>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013af8:	f7f6 f918 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013afc:	9a04      	ldr	r2, [sp, #16]
 8013afe:	08e3      	lsrs	r3, r4, #3
 8013b00:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013b04:	f993 3000 	ldrsb.w	r3, [r3]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	db02      	blt.n	8013b12 <format_read_args+0x3e6>
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f040 87b4 	bne.w	8014a7a <format_read_args+0x134e>
 8013b12:	6825      	ldr	r5, [r4, #0]
 8013b14:	f105 0010 	add.w	r0, r5, #16
 8013b18:	08c2      	lsrs	r2, r0, #3
 8013b1a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013b1e:	f992 1000 	ldrsb.w	r1, [r2]
 8013b22:	f000 0207 	and.w	r2, r0, #7
 8013b26:	3203      	adds	r2, #3
 8013b28:	428a      	cmp	r2, r1
 8013b2a:	db02      	blt.n	8013b32 <format_read_args+0x406>
 8013b2c:	2900      	cmp	r1, #0
 8013b2e:	f040 87a2 	bne.w	8014a76 <format_read_args+0x134a>
 8013b32:	692a      	ldr	r2, [r5, #16]
 8013b34:	2a00      	cmp	r2, #0
 8013b36:	f000 836f 	beq.w	8014218 <format_read_args+0xaec>
 8013b3a:	f7f6 f8f7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013b3e:	f105 000c 	add.w	r0, r5, #12
 8013b42:	08c2      	lsrs	r2, r0, #3
 8013b44:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013b48:	f992 1000 	ldrsb.w	r1, [r2]
 8013b4c:	f000 0207 	and.w	r2, r0, #7
 8013b50:	3203      	adds	r2, #3
 8013b52:	428a      	cmp	r2, r1
 8013b54:	db02      	blt.n	8013b5c <format_read_args+0x430>
 8013b56:	2900      	cmp	r1, #0
 8013b58:	f040 87e0 	bne.w	8014b1c <format_read_args+0x13f0>
 8013b5c:	f8d5 800c 	ldr.w	r8, [r5, #12]
                return get_atcmd_buf_size(self) - self->position;
 8013b60:	f7f6 f8e4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013b64:	f104 0018 	add.w	r0, r4, #24
 8013b68:	08c2      	lsrs	r2, r0, #3
 8013b6a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013b6e:	f992 1000 	ldrsb.w	r1, [r2]
 8013b72:	f000 0207 	and.w	r2, r0, #7
 8013b76:	3203      	adds	r2, #3
 8013b78:	428a      	cmp	r2, r1
 8013b7a:	db02      	blt.n	8013b82 <format_read_args+0x456>
 8013b7c:	2900      	cmp	r1, #0
 8013b7e:	f040 8778 	bne.w	8014a72 <format_read_args+0x1346>
        return (char*)self->desc->buf;
 8013b82:	f105 0008 	add.w	r0, r5, #8
                return get_atcmd_buf_size(self) - self->position;
 8013b86:	69a1      	ldr	r1, [r4, #24]
        return (char*)self->desc->buf;
 8013b88:	08c2      	lsrs	r2, r0, #3
                return get_atcmd_buf_size(self) - self->position;
 8013b8a:	eba8 0801 	sub.w	r8, r8, r1
        return (char*)self->desc->buf;
 8013b8e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013b92:	f992 3000 	ldrsb.w	r3, [r2]
 8013b96:	f000 0207 	and.w	r2, r0, #7
 8013b9a:	3203      	adds	r2, #3
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	db02      	blt.n	8013ba6 <format_read_args+0x47a>
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f040 8764 	bne.w	8014a6e <format_read_args+0x1342>
                return &(get_atcmd_buf(self)[self->position]);
 8013ba6:	68a8      	ldr	r0, [r5, #8]
 8013ba8:	4408      	add	r0, r1
 8013baa:	9000      	str	r0, [sp, #0]
        written = snprintf(get_current_buffer_by_fsm(self, fsm), len, fmt, val);
 8013bac:	f7f6 f8be 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013bb0:	463b      	mov	r3, r7
 8013bb2:	9800      	ldr	r0, [sp, #0]
 8013bb4:	4a7e      	ldr	r2, [pc, #504]	; (8013db0 <format_read_args+0x684>)
 8013bb6:	4641      	mov	r1, r8
 8013bb8:	f00e fe96 	bl	80228e8 <sniprintf>
        if ((written < 0) || ((size_t)written >= len))
 8013bbc:	1e07      	subs	r7, r0, #0
 8013bbe:	f2c0 8519 	blt.w	80145f4 <format_read_args+0xec8>
 8013bc2:	f7f6 f8b3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013bc6:	4547      	cmp	r7, r8
 8013bc8:	f080 8514 	bcs.w	80145f4 <format_read_args+0xec8>
        switch (fsm) {
 8013bcc:	f7f6 f8ae 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013bd0:	2e01      	cmp	r6, #1
 8013bd2:	f000 8248 	beq.w	8014066 <format_read_args+0x93a>
                self->position += offset;
 8013bd6:	f7f6 f8a9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013bda:	f104 0018 	add.w	r0, r4, #24
 8013bde:	08c3      	lsrs	r3, r0, #3
 8013be0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013be4:	f993 2000 	ldrsb.w	r2, [r3]
 8013be8:	f000 0307 	and.w	r3, r0, #7
 8013bec:	3303      	adds	r3, #3
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	db02      	blt.n	8013bf8 <format_read_args+0x4cc>
 8013bf2:	2a00      	cmp	r2, #0
 8013bf4:	f040 8739 	bne.w	8014a6a <format_read_args+0x133e>
 8013bf8:	69a0      	ldr	r0, [r4, #24]
        for (i = 0; i < var->data_size; i++) {
 8013bfa:	f10b 0b01 	add.w	fp, fp, #1
                self->position += offset;
 8013bfe:	4438      	add	r0, r7
 8013c00:	61a0      	str	r0, [r4, #24]
        for (i = 0; i < var->data_size; i++) {
 8013c02:	f7f6 f893 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013c06:	9b06      	ldr	r3, [sp, #24]
 8013c08:	9a05      	ldr	r2, [sp, #20]
 8013c0a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013c0e:	3203      	adds	r2, #3
 8013c10:	f993 3000 	ldrsb.w	r3, [r3]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	db02      	blt.n	8013c1e <format_read_args+0x4f2>
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f040 8723 	bne.w	8014a64 <format_read_args+0x1338>
 8013c1e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8013c22:	f109 0901 	add.w	r9, r9, #1
 8013c26:	459b      	cmp	fp, r3
 8013c28:	f080 84e0 	bcs.w	80145ec <format_read_args+0xec0>
                if (var->access == CAT_VAR_ACCESS_WRITE_ONLY) {
 8013c2c:	f7f6 f87e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013c30:	9a03      	ldr	r2, [sp, #12]
 8013c32:	08d3      	lsrs	r3, r2, #3
 8013c34:	f002 0207 	and.w	r2, r2, #7
 8013c38:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	db02      	blt.n	8013c4a <format_read_args+0x51e>
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f040 8700 	bne.w	8014a4a <format_read_args+0x131e>
 8013c4a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	f47f af3c 	bne.w	8013acc <format_read_args+0x3a0>
        switch (fsm) {
 8013c54:	f7f6 f86a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013c58:	2e01      	cmp	r6, #1
 8013c5a:	f04f 0700 	mov.w	r7, #0
 8013c5e:	f47f af4b 	bne.w	8013af8 <format_read_args+0x3cc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8013c62:	f7f6 f863 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013c66:	9a04      	ldr	r2, [sp, #16]
 8013c68:	08e3      	lsrs	r3, r4, #3
 8013c6a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	db02      	blt.n	8013c7c <format_read_args+0x550>
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	f040 872b 	bne.w	8014ad2 <format_read_args+0x13a6>
 8013c7c:	6823      	ldr	r3, [r4, #0]
 8013c7e:	f103 0010 	add.w	r0, r3, #16
 8013c82:	08c2      	lsrs	r2, r0, #3
 8013c84:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013c88:	f992 1000 	ldrsb.w	r1, [r2]
 8013c8c:	f000 0207 	and.w	r2, r0, #7
 8013c90:	3203      	adds	r2, #3
 8013c92:	428a      	cmp	r2, r1
 8013c94:	db02      	blt.n	8013c9c <format_read_args+0x570>
 8013c96:	2900      	cmp	r1, #0
 8013c98:	f040 8721 	bne.w	8014ade <format_read_args+0x13b2>
 8013c9c:	6918      	ldr	r0, [r3, #16]
 8013c9e:	9000      	str	r0, [sp, #0]
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	f000 82ff 	beq.w	80142a4 <format_read_args+0xb78>
 8013ca6:	9307      	str	r3, [sp, #28]
 8013ca8:	f7f6 f840 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013cac:	9b07      	ldr	r3, [sp, #28]
 8013cae:	9800      	ldr	r0, [sp, #0]
 8013cb0:	f103 0114 	add.w	r1, r3, #20
 8013cb4:	08ca      	lsrs	r2, r1, #3
 8013cb6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8013cba:	f992 c000 	ldrsb.w	ip, [r2]
 8013cbe:	f001 0207 	and.w	r2, r1, #7
 8013cc2:	3203      	adds	r2, #3
 8013cc4:	4562      	cmp	r2, ip
 8013cc6:	db03      	blt.n	8013cd0 <format_read_args+0x5a4>
 8013cc8:	f1bc 0f00 	cmp.w	ip, #0
 8013ccc:	f040 8704 	bne.w	8014ad8 <format_read_args+0x13ac>
 8013cd0:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8013cd4:	9000      	str	r0, [sp, #0]
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8013cd6:	f7f6 f829 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013cda:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8013cde:	9800      	ldr	r0, [sp, #0]
 8013ce0:	08d3      	lsrs	r3, r2, #3
 8013ce2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013ce6:	f993 1000 	ldrsb.w	r1, [r3]
 8013cea:	f002 0307 	and.w	r3, r2, #7
 8013cee:	3303      	adds	r3, #3
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	db02      	blt.n	8013cfa <format_read_args+0x5ce>
 8013cf4:	2900      	cmp	r1, #0
 8013cf6:	f040 86f6 	bne.w	8014ae6 <format_read_args+0x13ba>
 8013cfa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8013cfc:	eba8 0802 	sub.w	r8, r8, r2
                return &(get_unsolicited_buf(self)[self->unsolicited_fsm.position]);
 8013d00:	4410      	add	r0, r2
 8013d02:	9000      	str	r0, [sp, #0]
 8013d04:	f7f6 f812 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013d08:	9800      	ldr	r0, [sp, #0]
 8013d0a:	e74e      	b.n	8013baa <format_read_args+0x47e>
                return (struct cat_variable*)self->var;
 8013d0c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY) {
 8013d0e:	f7f6 f80d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013d12:	f107 0010 	add.w	r0, r7, #16
 8013d16:	08c3      	lsrs	r3, r0, #3
 8013d18:	f000 0207 	and.w	r2, r0, #7
 8013d1c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013d20:	f993 3000 	ldrsb.w	r3, [r3]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	db02      	blt.n	8013d2e <format_read_args+0x602>
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f040 86f9 	bne.w	8014b20 <format_read_args+0x13f4>
 8013d2e:	7c3b      	ldrb	r3, [r7, #16]
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	f000 8548 	beq.w	80147c6 <format_read_args+0x109a>
                buf_size = var->data_size;
 8013d36:	f7f5 fff9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013d3a:	f107 000c 	add.w	r0, r7, #12
 8013d3e:	08c3      	lsrs	r3, r0, #3
 8013d40:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013d44:	f993 2000 	ldrsb.w	r2, [r3]
 8013d48:	f000 0307 	and.w	r3, r0, #7
 8013d4c:	3303      	adds	r3, #3
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	db02      	blt.n	8013d58 <format_read_args+0x62c>
 8013d52:	b10a      	cbz	r2, 8013d58 <format_read_args+0x62c>
 8013d54:	f7f5 fc10 	bl	8009578 <__asan_report_load4>
        if (print_string_to_buf(self, "\"", fsm) != 0)
 8013d58:	4632      	mov	r2, r6
 8013d5a:	4916      	ldr	r1, [pc, #88]	; (8013db4 <format_read_args+0x688>)
 8013d5c:	4620      	mov	r0, r4
                buf_size = var->data_size;
 8013d5e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
        if (print_string_to_buf(self, "\"", fsm) != 0)
 8013d62:	f7fd ff0b 	bl	8011b7c <print_string_to_buf>
 8013d66:	2800      	cmp	r0, #0
 8013d68:	f47f ad9b 	bne.w	80138a2 <format_read_args+0x176>
        buf = var->data;
 8013d6c:	f7f5 ffde 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013d70:	f107 0008 	add.w	r0, r7, #8
 8013d74:	08c3      	lsrs	r3, r0, #3
 8013d76:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013d7a:	f993 2000 	ldrsb.w	r2, [r3]
 8013d7e:	f000 0307 	and.w	r3, r0, #7
 8013d82:	3303      	adds	r3, #3
 8013d84:	4293      	cmp	r3, r2
 8013d86:	db02      	blt.n	8013d8e <format_read_args+0x662>
 8013d88:	2a00      	cmp	r2, #0
 8013d8a:	f040 86cb 	bne.w	8014b24 <format_read_args+0x13f8>
 8013d8e:	68bf      	ldr	r7, [r7, #8]
        for (i = 0; i < buf_size; i++) {
 8013d90:	f1ba 0f00 	cmp.w	sl, #0
 8013d94:	f000 832a 	beq.w	80143ec <format_read_args+0xcc0>
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8013d98:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8013d9c:	44ba      	add	sl, r7
 8013d9e:	46a3      	mov	fp, r4
 8013da0:	46b0      	mov	r8, r6
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	08db      	lsrs	r3, r3, #3
 8013da6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013daa:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013dae:	e0d7      	b.n	8013f60 <format_read_args+0x834>
 8013db0:	240094c0 	.word	0x240094c0
 8013db4:	24009500 	.word	0x24009500
                } else if (ch == '"') {
 8013db8:	f7f5 ffb8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013dbc:	2c22      	cmp	r4, #34	; 0x22
 8013dbe:	f000 8215 	beq.w	80141ec <format_read_args+0xac0>
                } else if (ch == '\n') {
 8013dc2:	f7f5 ffb3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013dc6:	2c0a      	cmp	r4, #10
 8013dc8:	f000 821b 	beq.w	8014202 <format_read_args+0xad6>
                        switch (fsm) {
 8013dcc:	f7f5 ffae 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013dd0:	f1b8 0f01 	cmp.w	r8, #1
 8013dd4:	f000 816f 	beq.w	80140b6 <format_read_args+0x98a>
                                if (self->position >= get_atcmd_buf_size(self))
 8013dd8:	f7f5 ffa8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013ddc:	f10b 0018 	add.w	r0, fp, #24
 8013de0:	08c3      	lsrs	r3, r0, #3
 8013de2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013de6:	f993 2000 	ldrsb.w	r2, [r3]
 8013dea:	f000 0307 	and.w	r3, r0, #7
 8013dee:	3303      	adds	r3, #3
 8013df0:	4293      	cmp	r3, r2
 8013df2:	db02      	blt.n	8013dfa <format_read_args+0x6ce>
 8013df4:	2a00      	cmp	r2, #0
 8013df6:	f040 8630 	bne.w	8014a5a <format_read_args+0x132e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013dfa:	ea4f 03db 	mov.w	r3, fp, lsr #3
                                if (self->position >= get_atcmd_buf_size(self))
 8013dfe:	f8db 5018 	ldr.w	r5, [fp, #24]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013e02:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013e06:	f993 2000 	ldrsb.w	r2, [r3]
 8013e0a:	f00b 0307 	and.w	r3, fp, #7
 8013e0e:	3303      	adds	r3, #3
 8013e10:	4293      	cmp	r3, r2
 8013e12:	db02      	blt.n	8013e1a <format_read_args+0x6ee>
 8013e14:	2a00      	cmp	r2, #0
 8013e16:	f040 861d 	bne.w	8014a54 <format_read_args+0x1328>
 8013e1a:	f8db 6000 	ldr.w	r6, [fp]
 8013e1e:	f106 0010 	add.w	r0, r6, #16
 8013e22:	08c3      	lsrs	r3, r0, #3
 8013e24:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013e28:	f993 2000 	ldrsb.w	r2, [r3]
 8013e2c:	f000 0307 	and.w	r3, r0, #7
 8013e30:	3303      	adds	r3, #3
 8013e32:	4293      	cmp	r3, r2
 8013e34:	db02      	blt.n	8013e3c <format_read_args+0x710>
 8013e36:	2a00      	cmp	r2, #0
 8013e38:	f040 860a 	bne.w	8014a50 <format_read_args+0x1324>
 8013e3c:	6933      	ldr	r3, [r6, #16]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f000 81ff 	beq.w	8014242 <format_read_args+0xb16>
 8013e44:	f7f5 ff72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013e48:	f106 000c 	add.w	r0, r6, #12
 8013e4c:	08c3      	lsrs	r3, r0, #3
 8013e4e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013e52:	f993 2000 	ldrsb.w	r2, [r3]
 8013e56:	f000 0307 	and.w	r3, r0, #7
 8013e5a:	3303      	adds	r3, #3
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	db02      	blt.n	8013e66 <format_read_args+0x73a>
 8013e60:	2a00      	cmp	r2, #0
 8013e62:	f040 8656 	bne.w	8014b12 <format_read_args+0x13e6>
 8013e66:	f8d6 900c 	ldr.w	r9, [r6, #12]
                                if (self->position >= get_atcmd_buf_size(self))
 8013e6a:	f7f5 ff5f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013e6e:	454d      	cmp	r5, r9
 8013e70:	f080 8097 	bcs.w	8013fa2 <format_read_args+0x876>
        return (char*)self->desc->buf;
 8013e74:	f7f5 ff5a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013e78:	f106 0008 	add.w	r0, r6, #8
 8013e7c:	08c3      	lsrs	r3, r0, #3
 8013e7e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013e82:	f993 2000 	ldrsb.w	r2, [r3]
 8013e86:	f000 0307 	and.w	r3, r0, #7
 8013e8a:	3303      	adds	r3, #3
 8013e8c:	4293      	cmp	r3, r2
 8013e8e:	db02      	blt.n	8013e96 <format_read_args+0x76a>
 8013e90:	2a00      	cmp	r2, #0
 8013e92:	f040 85fd 	bne.w	8014a90 <format_read_args+0x1364>
 8013e96:	68b2      	ldr	r2, [r6, #8]
                                get_atcmd_buf(self)[self->position++] = ch;
 8013e98:	1c6b      	adds	r3, r5, #1
 8013e9a:	1950      	adds	r0, r2, r5
 8013e9c:	f8cb 3018 	str.w	r3, [fp, #24]
 8013ea0:	08c3      	lsrs	r3, r0, #3
 8013ea2:	f000 0107 	and.w	r1, r0, #7
 8013ea6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013eaa:	f993 3000 	ldrsb.w	r3, [r3]
 8013eae:	4299      	cmp	r1, r3
 8013eb0:	db02      	blt.n	8013eb8 <format_read_args+0x78c>
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	f040 85ea 	bne.w	8014a8c <format_read_args+0x1360>
 8013eb8:	5554      	strb	r4, [r2, r5]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013eba:	f8db 6000 	ldr.w	r6, [fp]
                                if (self->position >= get_atcmd_buf_size(self))
 8013ebe:	f8db 4018 	ldr.w	r4, [fp, #24]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8013ec2:	f106 0010 	add.w	r0, r6, #16
 8013ec6:	08c3      	lsrs	r3, r0, #3
 8013ec8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013ecc:	f993 2000 	ldrsb.w	r2, [r3]
 8013ed0:	f000 0307 	and.w	r3, r0, #7
 8013ed4:	3303      	adds	r3, #3
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	db02      	blt.n	8013ee0 <format_read_args+0x7b4>
 8013eda:	2a00      	cmp	r2, #0
 8013edc:	f040 85d4 	bne.w	8014a88 <format_read_args+0x135c>
 8013ee0:	6933      	ldr	r3, [r6, #16]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f000 81c2 	beq.w	801426c <format_read_args+0xb40>
 8013ee8:	f7f5 ff20 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013eec:	f106 000c 	add.w	r0, r6, #12
 8013ef0:	08c3      	lsrs	r3, r0, #3
 8013ef2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013ef6:	f993 2000 	ldrsb.w	r2, [r3]
 8013efa:	f000 0307 	and.w	r3, r0, #7
 8013efe:	3303      	adds	r3, #3
 8013f00:	4293      	cmp	r3, r2
 8013f02:	db02      	blt.n	8013f0a <format_read_args+0x7de>
 8013f04:	2a00      	cmp	r2, #0
 8013f06:	f040 85e2 	bne.w	8014ace <format_read_args+0x13a2>
 8013f0a:	68f5      	ldr	r5, [r6, #12]
                                if (self->position >= get_atcmd_buf_size(self))
 8013f0c:	f7f5 ff0e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f10:	42ac      	cmp	r4, r5
 8013f12:	d246      	bcs.n	8013fa2 <format_read_args+0x876>
        return (char*)self->desc->buf;
 8013f14:	f7f5 ff0a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f18:	f106 0008 	add.w	r0, r6, #8
 8013f1c:	08c3      	lsrs	r3, r0, #3
 8013f1e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013f22:	f993 2000 	ldrsb.w	r2, [r3]
 8013f26:	f000 0307 	and.w	r3, r0, #7
 8013f2a:	3303      	adds	r3, #3
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	db02      	blt.n	8013f36 <format_read_args+0x80a>
 8013f30:	2a00      	cmp	r2, #0
 8013f32:	f040 85a7 	bne.w	8014a84 <format_read_args+0x1358>
                                get_atcmd_buf(self)[self->position] = 0;
 8013f36:	68b2      	ldr	r2, [r6, #8]
 8013f38:	1910      	adds	r0, r2, r4
 8013f3a:	08c3      	lsrs	r3, r0, #3
 8013f3c:	f000 0107 	and.w	r1, r0, #7
 8013f40:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013f44:	f993 3000 	ldrsb.w	r3, [r3]
 8013f48:	4299      	cmp	r1, r3
 8013f4a:	db02      	blt.n	8013f52 <format_read_args+0x826>
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f040 8597 	bne.w	8014a80 <format_read_args+0x1354>
 8013f52:	2300      	movs	r3, #0
 8013f54:	5513      	strb	r3, [r2, r4]
        for (i = 0; i < buf_size; i++) {
 8013f56:	f7f5 fee9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f5a:	4557      	cmp	r7, sl
 8013f5c:	f000 8243 	beq.w	80143e6 <format_read_args+0xcba>
                ch = buf[i];
 8013f60:	f7f5 fee4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f64:	f007 0207 	and.w	r2, r7, #7
 8013f68:	08fb      	lsrs	r3, r7, #3
 8013f6a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	db02      	blt.n	8013f7c <format_read_args+0x850>
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	f040 8564 	bne.w	8014a44 <format_read_args+0x1318>
 8013f7c:	f817 4b01 	ldrb.w	r4, [r7], #1
                if (ch == 0)
 8013f80:	2c00      	cmp	r4, #0
 8013f82:	f000 8230 	beq.w	80143e6 <format_read_args+0xcba>
                if (ch == '\\') {
 8013f86:	f7f5 fed1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f8a:	2c5c      	cmp	r4, #92	; 0x5c
 8013f8c:	f47f af14 	bne.w	8013db8 <format_read_args+0x68c>
                        if (print_string_to_buf(self, "\\\\", fsm) != 0)
 8013f90:	f7f5 fecc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013f94:	4642      	mov	r2, r8
 8013f96:	49bf      	ldr	r1, [pc, #764]	; (8014294 <format_read_args+0xb68>)
 8013f98:	4658      	mov	r0, fp
 8013f9a:	f7fd fdef 	bl	8011b7c <print_string_to_buf>
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	d0d9      	beq.n	8013f56 <format_read_args+0x82a>
 8013fa2:	9d04      	ldr	r5, [sp, #16]
 8013fa4:	465c      	mov	r4, fp
 8013fa6:	4646      	mov	r6, r8
        if (stat < 0) {
 8013fa8:	e47b      	b.n	80138a2 <format_read_args+0x176>
                return (struct cat_variable*)self->var;
 8013faa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
        switch (var->data_size) {
 8013fac:	f7f5 febe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013fb0:	f107 000c 	add.w	r0, r7, #12
 8013fb4:	08c3      	lsrs	r3, r0, #3
 8013fb6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013fba:	f993 2000 	ldrsb.w	r2, [r3]
 8013fbe:	f000 0307 	and.w	r3, r0, #7
 8013fc2:	3303      	adds	r3, #3
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	db02      	blt.n	8013fce <format_read_args+0x8a2>
 8013fc8:	2a00      	cmp	r2, #0
 8013fca:	f040 85cd 	bne.w	8014b68 <format_read_args+0x143c>
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	f000 84ab 	beq.w	801492c <format_read_args+0x1200>
 8013fd6:	2b04      	cmp	r3, #4
 8013fd8:	f000 84ee 	beq.w	80149b8 <format_read_args+0x128c>
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	f47f ac60 	bne.w	80138a2 <format_read_args+0x176>
                val = *(uint8_t *)var->data;
 8013fe2:	f7f5 fea3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8013fe6:	f107 0008 	add.w	r0, r7, #8
 8013fea:	08c3      	lsrs	r3, r0, #3
 8013fec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8013ff0:	f993 2000 	ldrsb.w	r2, [r3]
 8013ff4:	f000 0307 	and.w	r3, r0, #7
 8013ff8:	3303      	adds	r3, #3
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	db02      	blt.n	8014004 <format_read_args+0x8d8>
 8013ffe:	2a00      	cmp	r2, #0
 8014000:	f040 85ca 	bne.w	8014b98 <format_read_args+0x146c>
 8014004:	68b8      	ldr	r0, [r7, #8]
 8014006:	08c3      	lsrs	r3, r0, #3
 8014008:	f000 0207 	and.w	r2, r0, #7
 801400c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014010:	f993 3000 	ldrsb.w	r3, [r3]
 8014014:	429a      	cmp	r2, r3
 8014016:	db02      	blt.n	801401e <format_read_args+0x8f2>
 8014018:	2b00      	cmp	r3, #0
 801401a:	f040 85d0 	bne.w	8014bbe <format_read_args+0x1492>
 801401e:	f890 8000 	ldrb.w	r8, [r0]
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8014022:	f7f5 fe83 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014026:	f107 0010 	add.w	r0, r7, #16
 801402a:	08c3      	lsrs	r3, r0, #3
 801402c:	f000 0207 	and.w	r2, r0, #7
 8014030:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014034:	f993 3000 	ldrsb.w	r3, [r3]
 8014038:	429a      	cmp	r2, r3
 801403a:	db02      	blt.n	8014042 <format_read_args+0x916>
 801403c:	2b00      	cmp	r3, #0
 801403e:	f040 85c0 	bne.w	8014bc2 <format_read_args+0x1496>
 8014042:	7c3b      	ldrb	r3, [r7, #16]
                val = 0;
 8014044:	2b02      	cmp	r3, #2
 8014046:	bf08      	it	eq
 8014048:	f04f 0800 	moveq.w	r8, #0
        if (print_format_num(self, "%u", val, fsm) != 0)
 801404c:	f7f5 fe6e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014050:	4633      	mov	r3, r6
 8014052:	4991      	ldr	r1, [pc, #580]	; (8014298 <format_read_args+0xb6c>)
 8014054:	4642      	mov	r2, r8
 8014056:	4620      	mov	r0, r4
 8014058:	f7fe f87a 	bl	8012150 <print_format_num>
 801405c:	3800      	subs	r0, #0
 801405e:	bf18      	it	ne
 8014060:	2001      	movne	r0, #1
                stat = format_uint_decimal(self, fsm);
 8014062:	4247      	negs	r7, r0
                break;
 8014064:	e1cd      	b.n	8014402 <format_read_args+0xcd6>
                self->unsolicited_fsm.position += offset;
 8014066:	f7f5 fe61 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801406a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801406e:	08c3      	lsrs	r3, r0, #3
 8014070:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014074:	f993 2000 	ldrsb.w	r2, [r3]
 8014078:	f000 0307 	and.w	r3, r0, #7
 801407c:	3303      	adds	r3, #3
 801407e:	4293      	cmp	r3, r2
 8014080:	db02      	blt.n	8014088 <format_read_args+0x95c>
 8014082:	2a00      	cmp	r2, #0
 8014084:	f040 852d 	bne.w	8014ae2 <format_read_args+0x13b6>
 8014088:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        for (i = 0; i < var->data_size; i++) {
 801408a:	f10b 0b01 	add.w	fp, fp, #1
                self->unsolicited_fsm.position += offset;
 801408e:	443b      	add	r3, r7
 8014090:	64e3      	str	r3, [r4, #76]	; 0x4c
        for (i = 0; i < var->data_size; i++) {
 8014092:	f7f5 fe4b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	9a05      	ldr	r2, [sp, #20]
 801409a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801409e:	3203      	adds	r2, #3
 80140a0:	f993 3000 	ldrsb.w	r3, [r3]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	f6ff adba 	blt.w	8013c1e <format_read_args+0x4f2>
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f43f adb7 	beq.w	8013c1e <format_read_args+0x4f2>
 80140b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140b2:	f7f5 fa61 	bl	8009578 <__asan_report_load4>
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 80140b6:	f7f5 fe39 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80140ba:	9b00      	ldr	r3, [sp, #0]
 80140bc:	9a03      	ldr	r2, [sp, #12]
 80140be:	f003 0307 	and.w	r3, r3, #7
 80140c2:	f992 2000 	ldrsb.w	r2, [r2]
 80140c6:	3303      	adds	r3, #3
 80140c8:	4293      	cmp	r3, r2
 80140ca:	db02      	blt.n	80140d2 <format_read_args+0x9a6>
 80140cc:	2a00      	cmp	r2, #0
 80140ce:	f040 8522 	bne.w	8014b16 <format_read_args+0x13ea>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80140d2:	ea4f 03db 	mov.w	r3, fp, lsr #3
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 80140d6:	f8db 604c 	ldr.w	r6, [fp, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80140da:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80140de:	f993 2000 	ldrsb.w	r2, [r3]
 80140e2:	f00b 0307 	and.w	r3, fp, #7
 80140e6:	3303      	adds	r3, #3
 80140e8:	4293      	cmp	r3, r2
 80140ea:	db02      	blt.n	80140f2 <format_read_args+0x9c6>
 80140ec:	2a00      	cmp	r2, #0
 80140ee:	f040 8504 	bne.w	8014afa <format_read_args+0x13ce>
 80140f2:	f8db 9000 	ldr.w	r9, [fp]
 80140f6:	f109 0010 	add.w	r0, r9, #16
 80140fa:	08c2      	lsrs	r2, r0, #3
 80140fc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8014100:	f992 1000 	ldrsb.w	r1, [r2]
 8014104:	f000 0207 	and.w	r2, r0, #7
 8014108:	3203      	adds	r2, #3
 801410a:	428a      	cmp	r2, r1
 801410c:	db02      	blt.n	8014114 <format_read_args+0x9e8>
 801410e:	2900      	cmp	r1, #0
 8014110:	f040 84f1 	bne.w	8014af6 <format_read_args+0x13ca>
 8014114:	f8d9 5010 	ldr.w	r5, [r9, #16]
 8014118:	2d00      	cmp	r5, #0
 801411a:	f000 810a 	beq.w	8014332 <format_read_args+0xc06>
 801411e:	f7f5 fe05 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014122:	f109 0014 	add.w	r0, r9, #20
 8014126:	08c2      	lsrs	r2, r0, #3
 8014128:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801412c:	f992 1000 	ldrsb.w	r1, [r2]
 8014130:	f000 0207 	and.w	r2, r0, #7
 8014134:	3203      	adds	r2, #3
 8014136:	428a      	cmp	r2, r1
 8014138:	db02      	blt.n	8014140 <format_read_args+0xa14>
 801413a:	2900      	cmp	r1, #0
 801413c:	f040 84d9 	bne.w	8014af2 <format_read_args+0x13c6>
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8014140:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014144:	429e      	cmp	r6, r3
 8014146:	f4bf af2c 	bcs.w	8013fa2 <format_read_args+0x876>
                                get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ch;
 801414a:	4435      	add	r5, r6
 801414c:	f7f5 fdee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014150:	3601      	adds	r6, #1
 8014152:	08eb      	lsrs	r3, r5, #3
 8014154:	f005 0207 	and.w	r2, r5, #7
 8014158:	f8cb 604c 	str.w	r6, [fp, #76]	; 0x4c
 801415c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014160:	f993 3000 	ldrsb.w	r3, [r3]
 8014164:	429a      	cmp	r2, r3
 8014166:	db02      	blt.n	801416e <format_read_args+0xa42>
 8014168:	2b00      	cmp	r3, #0
 801416a:	f040 84bf 	bne.w	8014aec <format_read_args+0x13c0>
 801416e:	702c      	strb	r4, [r5, #0]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014170:	f8db 6000 	ldr.w	r6, [fp]
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8014174:	f8db 504c 	ldr.w	r5, [fp, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014178:	f106 0010 	add.w	r0, r6, #16
 801417c:	08c3      	lsrs	r3, r0, #3
 801417e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014182:	f993 2000 	ldrsb.w	r2, [r3]
 8014186:	f000 0307 	and.w	r3, r0, #7
 801418a:	3303      	adds	r3, #3
 801418c:	4293      	cmp	r3, r2
 801418e:	db02      	blt.n	8014196 <format_read_args+0xa6a>
 8014190:	2a00      	cmp	r2, #0
 8014192:	f040 84bc 	bne.w	8014b0e <format_read_args+0x13e2>
 8014196:	6934      	ldr	r4, [r6, #16]
 8014198:	2c00      	cmp	r4, #0
 801419a:	f000 80f8 	beq.w	801438e <format_read_args+0xc62>
 801419e:	f7f5 fdc5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80141a2:	f106 0014 	add.w	r0, r6, #20
 80141a6:	08c3      	lsrs	r3, r0, #3
 80141a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80141ac:	f993 2000 	ldrsb.w	r2, [r3]
 80141b0:	f000 0307 	and.w	r3, r0, #7
 80141b4:	3303      	adds	r3, #3
 80141b6:	4293      	cmp	r3, r2
 80141b8:	db02      	blt.n	80141c0 <format_read_args+0xa94>
 80141ba:	2a00      	cmp	r2, #0
 80141bc:	f040 84a5 	bne.w	8014b0a <format_read_args+0x13de>
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 80141c0:	6973      	ldr	r3, [r6, #20]
 80141c2:	429d      	cmp	r5, r3
 80141c4:	f4bf aeed 	bcs.w	8013fa2 <format_read_args+0x876>
                                get_unsolicited_buf(self)[self->unsolicited_fsm.position] = 0;
 80141c8:	442c      	add	r4, r5
 80141ca:	f7f5 fdaf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80141ce:	08e3      	lsrs	r3, r4, #3
 80141d0:	f004 0207 	and.w	r2, r4, #7
 80141d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80141d8:	f993 3000 	ldrsb.w	r3, [r3]
 80141dc:	429a      	cmp	r2, r3
 80141de:	db02      	blt.n	80141e6 <format_read_args+0xaba>
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f040 848f 	bne.w	8014b04 <format_read_args+0x13d8>
 80141e6:	2300      	movs	r3, #0
 80141e8:	7023      	strb	r3, [r4, #0]
                                break;
 80141ea:	e6b4      	b.n	8013f56 <format_read_args+0x82a>
                        if (print_string_to_buf(self, "\\\"", fsm) != 0)
 80141ec:	f7f5 fd9e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80141f0:	4642      	mov	r2, r8
 80141f2:	492a      	ldr	r1, [pc, #168]	; (801429c <format_read_args+0xb70>)
 80141f4:	4658      	mov	r0, fp
 80141f6:	f7fd fcc1 	bl	8011b7c <print_string_to_buf>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	f43f aeab 	beq.w	8013f56 <format_read_args+0x82a>
 8014200:	e6cf      	b.n	8013fa2 <format_read_args+0x876>
                        if (print_string_to_buf(self, "\\n", fsm) != 0)
 8014202:	f7f5 fd93 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014206:	4642      	mov	r2, r8
 8014208:	4925      	ldr	r1, [pc, #148]	; (80142a0 <format_read_args+0xb74>)
 801420a:	4658      	mov	r0, fp
 801420c:	f7fd fcb6 	bl	8011b7c <print_string_to_buf>
 8014210:	2800      	cmp	r0, #0
 8014212:	f43f aea0 	beq.w	8013f56 <format_read_args+0x82a>
 8014216:	e6c4      	b.n	8013fa2 <format_read_args+0x876>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014218:	f7f5 fd88 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801421c:	f105 000c 	add.w	r0, r5, #12
 8014220:	08c2      	lsrs	r2, r0, #3
 8014222:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8014226:	f992 1000 	ldrsb.w	r1, [r2]
 801422a:	f000 0207 	and.w	r2, r0, #7
 801422e:	3203      	adds	r2, #3
 8014230:	428a      	cmp	r2, r1
 8014232:	db02      	blt.n	801423a <format_read_args+0xb0e>
 8014234:	2900      	cmp	r1, #0
 8014236:	f040 8463 	bne.w	8014b00 <format_read_args+0x13d4>
 801423a:	68ea      	ldr	r2, [r5, #12]
 801423c:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8014240:	e48e      	b.n	8013b60 <format_read_args+0x434>
 8014242:	f7f5 fd73 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014246:	f106 000c 	add.w	r0, r6, #12
 801424a:	08c3      	lsrs	r3, r0, #3
 801424c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014250:	f993 2000 	ldrsb.w	r2, [r3]
 8014254:	f000 0307 	and.w	r3, r0, #7
 8014258:	3303      	adds	r3, #3
 801425a:	4293      	cmp	r3, r2
 801425c:	db02      	blt.n	8014264 <format_read_args+0xb38>
 801425e:	2a00      	cmp	r2, #0
 8014260:	f040 8498 	bne.w	8014b94 <format_read_args+0x1468>
 8014264:	68f3      	ldr	r3, [r6, #12]
 8014266:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801426a:	e5fe      	b.n	8013e6a <format_read_args+0x73e>
 801426c:	f7f5 fd5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014270:	f106 000c 	add.w	r0, r6, #12
 8014274:	08c3      	lsrs	r3, r0, #3
 8014276:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801427a:	f993 2000 	ldrsb.w	r2, [r3]
 801427e:	f000 0307 	and.w	r3, r0, #7
 8014282:	3303      	adds	r3, #3
 8014284:	4293      	cmp	r3, r2
 8014286:	db02      	blt.n	801428e <format_read_args+0xb62>
 8014288:	2a00      	cmp	r2, #0
 801428a:	f040 8481 	bne.w	8014b90 <format_read_args+0x1464>
 801428e:	68f5      	ldr	r5, [r6, #12]
 8014290:	086d      	lsrs	r5, r5, #1
 8014292:	e63b      	b.n	8013f0c <format_read_args+0x7e0>
 8014294:	24009540 	.word	0x24009540
 8014298:	240093c0 	.word	0x240093c0
 801429c:	24009580 	.word	0x24009580
 80142a0:	240095c0 	.word	0x240095c0
 80142a4:	9300      	str	r3, [sp, #0]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80142a6:	f7f5 fd41 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80142aa:	9b00      	ldr	r3, [sp, #0]
 80142ac:	f103 000c 	add.w	r0, r3, #12
 80142b0:	08c2      	lsrs	r2, r0, #3
 80142b2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80142b6:	f992 1000 	ldrsb.w	r1, [r2]
 80142ba:	f000 0207 	and.w	r2, r0, #7
 80142be:	3203      	adds	r2, #3
 80142c0:	428a      	cmp	r2, r1
 80142c2:	db02      	blt.n	80142ca <format_read_args+0xb9e>
 80142c4:	2900      	cmp	r1, #0
 80142c6:	f040 8461 	bne.w	8014b8c <format_read_args+0x1460>
 80142ca:	68da      	ldr	r2, [r3, #12]
 80142cc:	9300      	str	r3, [sp, #0]
 80142ce:	ea4f 0852 	mov.w	r8, r2, lsr #1
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 80142d2:	f7f5 fd2b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80142d6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80142da:	9b00      	ldr	r3, [sp, #0]
 80142dc:	08c2      	lsrs	r2, r0, #3
 80142de:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80142e2:	f992 1000 	ldrsb.w	r1, [r2]
 80142e6:	f000 0207 	and.w	r2, r0, #7
 80142ea:	3203      	adds	r2, #3
 80142ec:	428a      	cmp	r2, r1
 80142ee:	db02      	blt.n	80142f6 <format_read_args+0xbca>
 80142f0:	2900      	cmp	r1, #0
 80142f2:	f040 8449 	bne.w	8014b88 <format_read_args+0x145c>
 80142f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80142f8:	9307      	str	r3, [sp, #28]
 80142fa:	9200      	str	r2, [sp, #0]
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80142fc:	f7f5 fd16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014300:	9b07      	ldr	r3, [sp, #28]
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8014302:	9a00      	ldr	r2, [sp, #0]
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8014304:	f103 0008 	add.w	r0, r3, #8
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8014308:	eba8 0802 	sub.w	r8, r8, r2
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801430c:	08c1      	lsrs	r1, r0, #3
 801430e:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8014312:	f991 c000 	ldrsb.w	ip, [r1]
 8014316:	f000 0107 	and.w	r1, r0, #7
 801431a:	3103      	adds	r1, #3
 801431c:	4561      	cmp	r1, ip
 801431e:	db03      	blt.n	8014328 <format_read_args+0xbfc>
 8014320:	f1bc 0f00 	cmp.w	ip, #0
 8014324:	f040 841e 	bne.w	8014b64 <format_read_args+0x1438>
 8014328:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801432c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8014330:	e4e6      	b.n	8013d00 <format_read_args+0x5d4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014332:	f7f5 fcfb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014336:	f109 000c 	add.w	r0, r9, #12
 801433a:	08c2      	lsrs	r2, r0, #3
 801433c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8014340:	f992 1000 	ldrsb.w	r1, [r2]
 8014344:	f000 0207 	and.w	r2, r0, #7
 8014348:	3203      	adds	r2, #3
 801434a:	428a      	cmp	r2, r1
 801434c:	db02      	blt.n	8014354 <format_read_args+0xc28>
 801434e:	2900      	cmp	r1, #0
 8014350:	f040 8406 	bne.w	8014b60 <format_read_args+0x1434>
 8014354:	f8d9 200c 	ldr.w	r2, [r9, #12]
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8014358:	ebb6 0f52 	cmp.w	r6, r2, lsr #1
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 801435c:	ea4f 0552 	mov.w	r5, r2, lsr #1
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8014360:	f4bf ae1f 	bcs.w	8013fa2 <format_read_args+0x876>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8014364:	f7f5 fce2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014368:	f109 0008 	add.w	r0, r9, #8
 801436c:	08c2      	lsrs	r2, r0, #3
 801436e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8014372:	f992 1000 	ldrsb.w	r1, [r2]
 8014376:	f000 0207 	and.w	r2, r0, #7
 801437a:	3203      	adds	r2, #3
 801437c:	428a      	cmp	r2, r1
 801437e:	db02      	blt.n	8014386 <format_read_args+0xc5a>
 8014380:	2900      	cmp	r1, #0
 8014382:	f040 83eb 	bne.w	8014b5c <format_read_args+0x1430>
 8014386:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801438a:	441d      	add	r5, r3
 801438c:	e6dd      	b.n	801414a <format_read_args+0xa1e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 801438e:	f7f5 fccd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014392:	f106 000c 	add.w	r0, r6, #12
 8014396:	08c3      	lsrs	r3, r0, #3
 8014398:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801439c:	f993 2000 	ldrsb.w	r2, [r3]
 80143a0:	f000 0307 	and.w	r3, r0, #7
 80143a4:	3303      	adds	r3, #3
 80143a6:	4293      	cmp	r3, r2
 80143a8:	db02      	blt.n	80143b0 <format_read_args+0xc84>
 80143aa:	2a00      	cmp	r2, #0
 80143ac:	f040 83d4 	bne.w	8014b58 <format_read_args+0x142c>
 80143b0:	68f3      	ldr	r3, [r6, #12]
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 80143b2:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80143b6:	ea4f 0453 	mov.w	r4, r3, lsr #1
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 80143ba:	f4bf adf2 	bcs.w	8013fa2 <format_read_args+0x876>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80143be:	f7f5 fcb5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80143c2:	f106 0008 	add.w	r0, r6, #8
 80143c6:	08c3      	lsrs	r3, r0, #3
 80143c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80143cc:	f993 2000 	ldrsb.w	r2, [r3]
 80143d0:	f000 0307 	and.w	r3, r0, #7
 80143d4:	3303      	adds	r3, #3
 80143d6:	4293      	cmp	r3, r2
 80143d8:	db02      	blt.n	80143e0 <format_read_args+0xcb4>
 80143da:	b10a      	cbz	r2, 80143e0 <format_read_args+0xcb4>
 80143dc:	f7f5 f8cc 	bl	8009578 <__asan_report_load4>
 80143e0:	68b3      	ldr	r3, [r6, #8]
 80143e2:	441c      	add	r4, r3
 80143e4:	e6f0      	b.n	80141c8 <format_read_args+0xa9c>
 80143e6:	9d04      	ldr	r5, [sp, #16]
 80143e8:	465c      	mov	r4, fp
 80143ea:	4646      	mov	r6, r8
        if (print_string_to_buf(self, "\"", fsm) != 0)
 80143ec:	f7f5 fc9e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80143f0:	4632      	mov	r2, r6
 80143f2:	49ca      	ldr	r1, [pc, #808]	; (801471c <format_read_args+0xff0>)
 80143f4:	4620      	mov	r0, r4
 80143f6:	f7fd fbc1 	bl	8011b7c <print_string_to_buf>
 80143fa:	3800      	subs	r0, #0
 80143fc:	bf18      	it	ne
 80143fe:	2001      	movne	r0, #1
                stat = format_buffer_string(self, fsm);
 8014400:	4247      	negs	r7, r0
        if (stat < 0) {
 8014402:	f7f5 fc93 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014406:	2f00      	cmp	r7, #0
 8014408:	f47f aa4d 	bne.w	80138a6 <format_read_args+0x17a>
        stat = next_format_var_by_fsm(self, fsm);
 801440c:	f7f5 fc8e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014410:	4631      	mov	r1, r6
 8014412:	4620      	mov	r0, r4
 8014414:	f7fe fc74 	bl	8012d00 <next_format_var_by_fsm>
        if (stat != CAT_STATUS_OK)
 8014418:	4607      	mov	r7, r0
 801441a:	2800      	cmp	r0, #0
 801441c:	f47f aa4a 	bne.w	80138b4 <format_read_args+0x188>
        switch (fsm) {
 8014420:	f7f5 fc84 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014424:	2e01      	cmp	r6, #1
 8014426:	d039      	beq.n	801449c <format_read_args+0xd70>
                return (struct cat_command*)self->cmd;
 8014428:	f7f5 fc80 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801442c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014430:	08c3      	lsrs	r3, r0, #3
 8014432:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014436:	f993 2000 	ldrsb.w	r2, [r3]
 801443a:	f000 0307 	and.w	r3, r0, #7
 801443e:	3303      	adds	r3, #3
 8014440:	4293      	cmp	r3, r2
 8014442:	db02      	blt.n	801444a <format_read_args+0xd1e>
 8014444:	2a00      	cmp	r2, #0
 8014446:	f040 83d4 	bne.w	8014bf2 <format_read_args+0x14c6>
 801444a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (cmd->read != NULL) {
 801444c:	f102 000c 	add.w	r0, r2, #12
 8014450:	08c3      	lsrs	r3, r0, #3
 8014452:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014456:	f993 1000 	ldrsb.w	r1, [r3]
 801445a:	f000 0307 	and.w	r3, r0, #7
 801445e:	3303      	adds	r3, #3
 8014460:	428b      	cmp	r3, r1
 8014462:	db02      	blt.n	801446a <format_read_args+0xd3e>
 8014464:	2900      	cmp	r1, #0
 8014466:	f040 83c2 	bne.w	8014bee <format_read_args+0x14c2>
 801446a:	68d3      	ldr	r3, [r2, #12]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d050      	beq.n	8014512 <format_read_args+0xde6>
                        self->state = CAT_STATE_READ_LOOP;
 8014470:	f7f5 fc5c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014474:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8014478:	08c3      	lsrs	r3, r0, #3
 801447a:	f000 0207 	and.w	r2, r0, #7
 801447e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014482:	f993 3000 	ldrsb.w	r3, [r3]
 8014486:	429a      	cmp	r2, r3
 8014488:	db02      	blt.n	8014490 <format_read_args+0xd64>
 801448a:	b10b      	cbz	r3, 8014490 <format_read_args+0xd64>
 801448c:	f7f5 f860 	bl	8009550 <__asan_report_store1>
 8014490:	230e      	movs	r3, #14
                return CAT_STATUS_BUSY;
 8014492:	2701      	movs	r7, #1
                        self->state = CAT_STATE_READ_LOOP;
 8014494:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 8014498:	f7ff ba0c 	b.w	80138b4 <format_read_args+0x188>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 801449c:	f7f5 fc46 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80144a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80144a4:	08c3      	lsrs	r3, r0, #3
 80144a6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80144aa:	f993 2000 	ldrsb.w	r2, [r3]
 80144ae:	f000 0307 	and.w	r3, r0, #7
 80144b2:	3303      	adds	r3, #3
 80144b4:	4293      	cmp	r3, r2
 80144b6:	db02      	blt.n	80144be <format_read_args+0xd92>
 80144b8:	b10a      	cbz	r2, 80144be <format_read_args+0xd92>
 80144ba:	f7f5 f85d 	bl	8009578 <__asan_report_load4>
 80144be:	6d22      	ldr	r2, [r4, #80]	; 0x50
        if (cmd->read != NULL) {
 80144c0:	f102 000c 	add.w	r0, r2, #12
 80144c4:	08c3      	lsrs	r3, r0, #3
 80144c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80144ca:	f993 1000 	ldrsb.w	r1, [r3]
 80144ce:	f000 0307 	and.w	r3, r0, #7
 80144d2:	3303      	adds	r3, #3
 80144d4:	428b      	cmp	r3, r1
 80144d6:	db02      	blt.n	80144de <format_read_args+0xdb2>
 80144d8:	b109      	cbz	r1, 80144de <format_read_args+0xdb2>
 80144da:	f7f5 f84d 	bl	8009578 <__asan_report_load4>
 80144de:	68d3      	ldr	r3, [r2, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f000 8091 	beq.w	8014608 <format_read_args+0xedc>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_READ_LOOP;
 80144e6:	f7f5 fc21 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80144ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80144ee:	08c3      	lsrs	r3, r0, #3
 80144f0:	f000 0207 	and.w	r2, r0, #7
 80144f4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80144f8:	f993 3000 	ldrsb.w	r3, [r3]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	db02      	blt.n	8014506 <format_read_args+0xdda>
 8014500:	2b00      	cmp	r3, #0
 8014502:	f040 8370 	bne.w	8014be6 <format_read_args+0x14ba>
 8014506:	2303      	movs	r3, #3
                return CAT_STATUS_BUSY;
 8014508:	2701      	movs	r7, #1
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_READ_LOOP;
 801450a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
                        break;
 801450e:	f7ff b9d1 	b.w	80138b4 <format_read_args+0x188>
        self->position = 0;
 8014512:	f7f5 fc0b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014516:	f104 0018 	add.w	r0, r4, #24
 801451a:	08c3      	lsrs	r3, r0, #3
 801451c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014520:	f993 2000 	ldrsb.w	r2, [r3]
 8014524:	f000 0307 	and.w	r3, r0, #7
 8014528:	3303      	adds	r3, #3
 801452a:	4293      	cmp	r3, r2
 801452c:	db02      	blt.n	8014534 <format_read_args+0xe08>
 801452e:	b10a      	cbz	r2, 8014534 <format_read_args+0xe08>
 8014530:	f7f5 f816 	bl	8009560 <__asan_report_store4>
 8014534:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8014536:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801453a:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801453c:	08c3      	lsrs	r3, r0, #3
 801453e:	f000 0207 	and.w	r2, r0, #7
 8014542:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014546:	f993 3000 	ldrsb.w	r3, [r3]
 801454a:	429a      	cmp	r2, r3
 801454c:	db02      	blt.n	8014554 <format_read_args+0xe28>
 801454e:	b10b      	cbz	r3, 8014554 <format_read_args+0xe28>
 8014550:	f7f5 f80a 	bl	8009568 <__asan_report_load1>
 8014554:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
        self->write_buf = get_new_line_chars(self);
 8014558:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801455c:	4b70      	ldr	r3, [pc, #448]	; (8014720 <format_read_args+0xff4>)
 801455e:	f082 0201 	eor.w	r2, r2, #1
 8014562:	4413      	add	r3, r2
        self->write_buf = get_new_line_chars(self);
 8014564:	08c2      	lsrs	r2, r0, #3
 8014566:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801456a:	f992 1000 	ldrsb.w	r1, [r2]
 801456e:	f000 0207 	and.w	r2, r0, #7
 8014572:	3203      	adds	r2, #3
 8014574:	428a      	cmp	r2, r1
 8014576:	db02      	blt.n	801457e <format_read_args+0xe52>
 8014578:	b109      	cbz	r1, 801457e <format_read_args+0xe52>
 801457a:	f7f4 fff1 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801457e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8014582:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8014584:	08c3      	lsrs	r3, r0, #3
 8014586:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801458a:	f993 2000 	ldrsb.w	r2, [r3]
 801458e:	f000 0307 	and.w	r3, r0, #7
 8014592:	3303      	adds	r3, #3
 8014594:	4293      	cmp	r3, r2
 8014596:	db02      	blt.n	801459e <format_read_args+0xe72>
 8014598:	b10a      	cbz	r2, 801459e <format_read_args+0xe72>
 801459a:	f7f4 ffe1 	bl	8009560 <__asan_report_store4>
 801459e:	2300      	movs	r3, #0
        self->write_state_after = state_after;
 80145a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80145a4:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80145a6:	08c3      	lsrs	r3, r0, #3
 80145a8:	f000 0207 	and.w	r2, r0, #7
 80145ac:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80145b0:	f993 3000 	ldrsb.w	r3, [r3]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	db02      	blt.n	80145be <format_read_args+0xe92>
 80145b8:	b10b      	cbz	r3, 80145be <format_read_args+0xe92>
 80145ba:	f7f4 ffc9 	bl	8009550 <__asan_report_store1>
 80145be:	2315      	movs	r3, #21
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80145c0:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 80145c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80145c8:	08c3      	lsrs	r3, r0, #3
 80145ca:	f000 0207 	and.w	r2, r0, #7
 80145ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80145d2:	f993 3000 	ldrsb.w	r3, [r3]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	db02      	blt.n	80145e0 <format_read_args+0xeb4>
 80145da:	b10b      	cbz	r3, 80145e0 <format_read_args+0xeb4>
 80145dc:	f7f4 ffb8 	bl	8009550 <__asan_report_store1>
 80145e0:	2312      	movs	r3, #18
        return CAT_STATUS_BUSY;
 80145e2:	2701      	movs	r7, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80145e4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 80145e8:	f7ff b964 	b.w	80138b4 <format_read_args+0x188>
 80145ec:	9d08      	ldr	r5, [sp, #32]
        if (stat < 0) {
 80145ee:	f7f5 fb9d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80145f2:	e70b      	b.n	801440c <format_read_args+0xce0>
 80145f4:	9d08      	ldr	r5, [sp, #32]
 80145f6:	f7f5 fb99 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80145fa:	f7ff b954 	b.w	80138a6 <format_read_args+0x17a>
                return (struct cat_variable*)self->var;
 80145fe:	2a00      	cmp	r2, #0
 8014600:	f43f a92a 	beq.w	8013858 <format_read_args+0x12c>
 8014604:	f7f4 ffb8 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.position = 0;
 8014608:	f7f5 fb90 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801460c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014610:	08c3      	lsrs	r3, r0, #3
 8014612:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014616:	f993 2000 	ldrsb.w	r2, [r3]
 801461a:	f000 0307 	and.w	r3, r0, #7
 801461e:	3303      	adds	r3, #3
 8014620:	4293      	cmp	r3, r2
 8014622:	db02      	blt.n	801462a <format_read_args+0xefe>
 8014624:	2a00      	cmp	r2, #0
 8014626:	f040 82ec 	bne.w	8014c02 <format_read_args+0x14d6>
 801462a:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801462c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 8014630:	64e3      	str	r3, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8014632:	08c3      	lsrs	r3, r0, #3
 8014634:	f000 0207 	and.w	r2, r0, #7
 8014638:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801463c:	f993 3000 	ldrsb.w	r3, [r3]
 8014640:	429a      	cmp	r2, r3
 8014642:	db02      	blt.n	801464a <format_read_args+0xf1e>
 8014644:	2b00      	cmp	r3, #0
 8014646:	f040 82c6 	bne.w	8014bd6 <format_read_args+0x14aa>
 801464a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 801464e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8014652:	4b33      	ldr	r3, [pc, #204]	; (8014720 <format_read_args+0xff4>)
 8014654:	f082 0201 	eor.w	r2, r2, #1
 8014658:	4413      	add	r3, r2
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 801465a:	08c2      	lsrs	r2, r0, #3
 801465c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8014660:	f992 1000 	ldrsb.w	r1, [r2]
 8014664:	f000 0207 	and.w	r2, r0, #7
 8014668:	3203      	adds	r2, #3
 801466a:	428a      	cmp	r2, r1
 801466c:	db02      	blt.n	8014674 <format_read_args+0xf48>
 801466e:	2900      	cmp	r1, #0
 8014670:	f040 82b3 	bne.w	8014bda <format_read_args+0x14ae>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8014674:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8014678:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801467a:	08c3      	lsrs	r3, r0, #3
 801467c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014680:	f993 2000 	ldrsb.w	r2, [r3]
 8014684:	f000 0307 	and.w	r3, r0, #7
 8014688:	3303      	adds	r3, #3
 801468a:	4293      	cmp	r3, r2
 801468c:	db02      	blt.n	8014694 <format_read_args+0xf68>
 801468e:	2a00      	cmp	r2, #0
 8014690:	f040 82a5 	bne.w	8014bde <format_read_args+0x14b2>
 8014694:	2300      	movs	r3, #0
        self->unsolicited_fsm.write_state_after = state_after;
 8014696:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801469a:	6623      	str	r3, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 801469c:	08c3      	lsrs	r3, r0, #3
 801469e:	f000 0207 	and.w	r2, r0, #7
 80146a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80146a6:	f993 3000 	ldrsb.w	r3, [r3]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	db02      	blt.n	80146b4 <format_read_args+0xf88>
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	f040 8297 	bne.w	8014be2 <format_read_args+0x14b6>
 80146b4:	2308      	movs	r3, #8
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80146b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 80146ba:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80146be:	08c3      	lsrs	r3, r0, #3
 80146c0:	f000 0207 	and.w	r2, r0, #7
 80146c4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80146c8:	f993 3000 	ldrsb.w	r3, [r3]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	db02      	blt.n	80146d6 <format_read_args+0xfaa>
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	f040 8294 	bne.w	8014bfe <format_read_args+0x14d2>
 80146d6:	2305      	movs	r3, #5
        return CAT_STATUS_BUSY;
 80146d8:	2701      	movs	r7, #1
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80146da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80146de:	f7ff b8e9 	b.w	80138b4 <format_read_args+0x188>
        if ((var->read != NULL) && (var->read(var) != 0)) {
 80146e2:	f7f4 ff49 	bl	8009578 <__asan_report_load4>
        switch (var->type) {
 80146e6:	f7f4 ff3f 	bl	8009568 <__asan_report_load1>
                return (struct cat_variable*)self->var;
 80146ea:	f7f4 ff45 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 80146ee:	f7f4 ff43 	bl	8009578 <__asan_report_load4>
 80146f2:	f7f5 fb1b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80146f6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80146fa:	08c3      	lsrs	r3, r0, #3
 80146fc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014700:	f993 2000 	ldrsb.w	r2, [r3]
 8014704:	f000 0307 	and.w	r3, r0, #7
 8014708:	3303      	adds	r3, #3
 801470a:	4293      	cmp	r3, r2
 801470c:	db02      	blt.n	8014714 <format_read_args+0xfe8>
 801470e:	2a00      	cmp	r2, #0
 8014710:	f040 8271 	bne.w	8014bf6 <format_read_args+0x14ca>
 8014714:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8014716:	f7ff bafa 	b.w	8013d0e <format_read_args+0x5e2>
 801471a:	bf00      	nop
 801471c:	24009500 	.word	0x24009500
 8014720:	24009240 	.word	0x24009240
 8014724:	f7f5 fb02 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014728:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801472c:	08c3      	lsrs	r3, r0, #3
 801472e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014732:	f993 2000 	ldrsb.w	r2, [r3]
 8014736:	f000 0307 	and.w	r3, r0, #7
 801473a:	3303      	adds	r3, #3
 801473c:	4293      	cmp	r3, r2
 801473e:	db02      	blt.n	8014746 <format_read_args+0x101a>
 8014740:	2a00      	cmp	r2, #0
 8014742:	f040 825a 	bne.w	8014bfa <format_read_args+0x14ce>
 8014746:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8014748:	f7ff b924 	b.w	8013994 <format_read_args+0x268>
 801474c:	f7f5 faee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014750:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014754:	08c3      	lsrs	r3, r0, #3
 8014756:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801475a:	f993 2000 	ldrsb.w	r2, [r3]
 801475e:	f000 0307 	and.w	r3, r0, #7
 8014762:	3303      	adds	r3, #3
 8014764:	4293      	cmp	r3, r2
 8014766:	db02      	blt.n	801476e <format_read_args+0x1042>
 8014768:	2a00      	cmp	r2, #0
 801476a:	f040 823e 	bne.w	8014bea <format_read_args+0x14be>
 801476e:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
 8014772:	f7ff b975 	b.w	8013a60 <format_read_args+0x334>
 8014776:	f7f5 fad9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801477a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801477e:	08c3      	lsrs	r3, r0, #3
 8014780:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014784:	f993 2000 	ldrsb.w	r2, [r3]
 8014788:	f000 0307 	and.w	r3, r0, #7
 801478c:	3303      	adds	r3, #3
 801478e:	4293      	cmp	r3, r2
 8014790:	db02      	blt.n	8014798 <format_read_args+0x106c>
 8014792:	2a00      	cmp	r2, #0
 8014794:	f040 8208 	bne.w	8014ba8 <format_read_args+0x147c>
 8014798:	6d67      	ldr	r7, [r4, #84]	; 0x54
 801479a:	f7ff b85e 	b.w	801385a <format_read_args+0x12e>
 801479e:	f7f5 fac5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80147a2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80147a6:	08c3      	lsrs	r3, r0, #3
 80147a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80147ac:	f993 2000 	ldrsb.w	r2, [r3]
 80147b0:	f000 0307 	and.w	r3, r0, #7
 80147b4:	3303      	adds	r3, #3
 80147b6:	4293      	cmp	r3, r2
 80147b8:	db02      	blt.n	80147c0 <format_read_args+0x1094>
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	f040 81b4 	bne.w	8014b28 <format_read_args+0x13fc>
 80147c0:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80147c2:	f7ff bbf3 	b.w	8013fac <format_read_args+0x880>
        if (print_string_to_buf(self, "\"", fsm) != 0)
 80147c6:	f7f5 fab1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80147ca:	4632      	mov	r2, r6
 80147cc:	49d8      	ldr	r1, [pc, #864]	; (8014b30 <format_read_args+0x1404>)
 80147ce:	4620      	mov	r0, r4
 80147d0:	f7fd f9d4 	bl	8011b7c <print_string_to_buf>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f47f a864 	bne.w	80138a2 <format_read_args+0x176>
 80147da:	e607      	b.n	80143ec <format_read_args+0xcc0>
 80147dc:	f04f 0800 	mov.w	r8, #0
 80147e0:	f7ff b929 	b.w	8013a36 <format_read_args+0x30a>
                val = *(uint8_t *)var->data;
 80147e4:	f7f5 faa2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80147e8:	f107 0008 	add.w	r0, r7, #8
 80147ec:	08c3      	lsrs	r3, r0, #3
 80147ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80147f2:	f993 2000 	ldrsb.w	r2, [r3]
 80147f6:	f000 0307 	and.w	r3, r0, #7
 80147fa:	3303      	adds	r3, #3
 80147fc:	4293      	cmp	r3, r2
 80147fe:	db02      	blt.n	8014806 <format_read_args+0x10da>
 8014800:	2a00      	cmp	r2, #0
 8014802:	f040 81e2 	bne.w	8014bca <format_read_args+0x149e>
 8014806:	68b8      	ldr	r0, [r7, #8]
 8014808:	08c3      	lsrs	r3, r0, #3
 801480a:	f000 0207 	and.w	r2, r0, #7
 801480e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014812:	f993 3000 	ldrsb.w	r3, [r3]
 8014816:	429a      	cmp	r2, r3
 8014818:	db02      	blt.n	8014820 <format_read_args+0x10f4>
 801481a:	2b00      	cmp	r3, #0
 801481c:	f040 81d7 	bne.w	8014bce <format_read_args+0x14a2>
                strcpy(fstr, "0x%02X");
 8014820:	f1a8 0820 	sub.w	r8, r8, #32
                val = *(uint8_t *)var->data;
 8014824:	f890 9000 	ldrb.w	r9, [r0]
                strcpy(fstr, "0x%02X");
 8014828:	2207      	movs	r2, #7
 801482a:	49c2      	ldr	r1, [pc, #776]	; (8014b34 <format_read_args+0x1408>)
 801482c:	4640      	mov	r0, r8
 801482e:	f00d fb09 	bl	8021e44 <memcpy>
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8014832:	f7f5 fa7b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014836:	f107 0010 	add.w	r0, r7, #16
 801483a:	08c3      	lsrs	r3, r0, #3
 801483c:	f000 0207 	and.w	r2, r0, #7
 8014840:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014844:	f993 3000 	ldrsb.w	r3, [r3]
 8014848:	429a      	cmp	r2, r3
 801484a:	db02      	blt.n	8014852 <format_read_args+0x1126>
 801484c:	2b00      	cmp	r3, #0
 801484e:	f040 81c0 	bne.w	8014bd2 <format_read_args+0x14a6>
 8014852:	7c3b      	ldrb	r3, [r7, #16]
                val = 0;
 8014854:	2b02      	cmp	r3, #2
 8014856:	bf08      	it	eq
 8014858:	f04f 0900 	moveq.w	r9, #0
        if (print_format_num(self, fstr, val, fsm) != 0)
 801485c:	f7f5 fa66 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014860:	4633      	mov	r3, r6
 8014862:	4641      	mov	r1, r8
 8014864:	464a      	mov	r2, r9
 8014866:	4620      	mov	r0, r4
 8014868:	f7fd fc72 	bl	8012150 <print_format_num>
 801486c:	3800      	subs	r0, #0
 801486e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8014872:	bf18      	it	ne
 8014874:	2001      	movne	r0, #1
 8014876:	f108 58dc 	add.w	r8, r8, #461373440	; 0x1b800000
                stat = format_num_hexadecimal(self, fsm);
 801487a:	4247      	negs	r7, r0
 801487c:	f7f5 fa56 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014880:	23f8      	movs	r3, #248	; 0xf8
 8014882:	f888 3000 	strb.w	r3, [r8]
                break;
 8014886:	e5bc      	b.n	8014402 <format_read_args+0xcd6>
                val = *(uint16_t *)var->data;
 8014888:	f7f5 fa50 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801488c:	f107 0008 	add.w	r0, r7, #8
 8014890:	08c3      	lsrs	r3, r0, #3
 8014892:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014896:	f993 2000 	ldrsb.w	r2, [r3]
 801489a:	f000 0307 	and.w	r3, r0, #7
 801489e:	3303      	adds	r3, #3
 80148a0:	4293      	cmp	r3, r2
 80148a2:	db02      	blt.n	80148aa <format_read_args+0x117e>
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	f040 8151 	bne.w	8014b4c <format_read_args+0x1420>
 80148aa:	68b8      	ldr	r0, [r7, #8]
 80148ac:	08c3      	lsrs	r3, r0, #3
 80148ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80148b2:	f993 2000 	ldrsb.w	r2, [r3]
 80148b6:	f000 0307 	and.w	r3, r0, #7
 80148ba:	3301      	adds	r3, #1
 80148bc:	4293      	cmp	r3, r2
 80148be:	db02      	blt.n	80148c6 <format_read_args+0x119a>
 80148c0:	2a00      	cmp	r2, #0
 80148c2:	f040 8180 	bne.w	8014bc6 <format_read_args+0x149a>
                strcpy(fstr, "0x%04X");
 80148c6:	f1a8 0820 	sub.w	r8, r8, #32
                val = *(uint16_t *)var->data;
 80148ca:	f8b0 9000 	ldrh.w	r9, [r0]
                strcpy(fstr, "0x%04X");
 80148ce:	2207      	movs	r2, #7
 80148d0:	4999      	ldr	r1, [pc, #612]	; (8014b38 <format_read_args+0x140c>)
 80148d2:	4640      	mov	r0, r8
 80148d4:	f00d fab6 	bl	8021e44 <memcpy>
                break;
 80148d8:	e7ab      	b.n	8014832 <format_read_args+0x1106>
                val = *(uint32_t *)var->data;
 80148da:	f7f5 fa27 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80148de:	f107 0008 	add.w	r0, r7, #8
 80148e2:	08c3      	lsrs	r3, r0, #3
 80148e4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80148e8:	f993 2000 	ldrsb.w	r2, [r3]
 80148ec:	f000 0307 	and.w	r3, r0, #7
 80148f0:	3303      	adds	r3, #3
 80148f2:	4293      	cmp	r3, r2
 80148f4:	db02      	blt.n	80148fc <format_read_args+0x11d0>
 80148f6:	2a00      	cmp	r2, #0
 80148f8:	f040 812a 	bne.w	8014b50 <format_read_args+0x1424>
 80148fc:	68b8      	ldr	r0, [r7, #8]
 80148fe:	08c3      	lsrs	r3, r0, #3
 8014900:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014904:	f993 2000 	ldrsb.w	r2, [r3]
 8014908:	f000 0307 	and.w	r3, r0, #7
 801490c:	3303      	adds	r3, #3
 801490e:	4293      	cmp	r3, r2
 8014910:	db02      	blt.n	8014918 <format_read_args+0x11ec>
 8014912:	2a00      	cmp	r2, #0
 8014914:	f040 811e 	bne.w	8014b54 <format_read_args+0x1428>
                strcpy(fstr, "0x%08X");
 8014918:	f1a8 0820 	sub.w	r8, r8, #32
                val = *(uint32_t *)var->data;
 801491c:	f8d0 9000 	ldr.w	r9, [r0]
                strcpy(fstr, "0x%08X");
 8014920:	2207      	movs	r2, #7
 8014922:	4986      	ldr	r1, [pc, #536]	; (8014b3c <format_read_args+0x1410>)
 8014924:	4640      	mov	r0, r8
 8014926:	f00d fa8d 	bl	8021e44 <memcpy>
                break;
 801492a:	e782      	b.n	8014832 <format_read_args+0x1106>
                val = *(uint16_t *)var->data;
 801492c:	f7f5 f9fe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014930:	f107 0008 	add.w	r0, r7, #8
 8014934:	08c3      	lsrs	r3, r0, #3
 8014936:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801493a:	f993 2000 	ldrsb.w	r2, [r3]
 801493e:	f000 0307 	and.w	r3, r0, #7
 8014942:	3303      	adds	r3, #3
 8014944:	4293      	cmp	r3, r2
 8014946:	db02      	blt.n	801494e <format_read_args+0x1222>
 8014948:	2a00      	cmp	r2, #0
 801494a:	f040 810f 	bne.w	8014b6c <format_read_args+0x1440>
 801494e:	68b8      	ldr	r0, [r7, #8]
 8014950:	08c3      	lsrs	r3, r0, #3
 8014952:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014956:	f993 2000 	ldrsb.w	r2, [r3]
 801495a:	f000 0307 	and.w	r3, r0, #7
 801495e:	3301      	adds	r3, #1
 8014960:	4293      	cmp	r3, r2
 8014962:	db02      	blt.n	801496a <format_read_args+0x123e>
 8014964:	2a00      	cmp	r2, #0
 8014966:	f040 8126 	bne.w	8014bb6 <format_read_args+0x148a>
 801496a:	f8b0 8000 	ldrh.w	r8, [r0]
                break;
 801496e:	f7ff bb58 	b.w	8014022 <format_read_args+0x8f6>
                val = *(int16_t *)var->data;
 8014972:	f7f5 f9db 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014976:	f107 0008 	add.w	r0, r7, #8
 801497a:	08c3      	lsrs	r3, r0, #3
 801497c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014980:	f993 2000 	ldrsb.w	r2, [r3]
 8014984:	f000 0307 	and.w	r3, r0, #7
 8014988:	3303      	adds	r3, #3
 801498a:	4293      	cmp	r3, r2
 801498c:	db02      	blt.n	8014994 <format_read_args+0x1268>
 801498e:	2a00      	cmp	r2, #0
 8014990:	f040 80ee 	bne.w	8014b70 <format_read_args+0x1444>
 8014994:	68b8      	ldr	r0, [r7, #8]
 8014996:	08c3      	lsrs	r3, r0, #3
 8014998:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801499c:	f993 2000 	ldrsb.w	r2, [r3]
 80149a0:	f000 0307 	and.w	r3, r0, #7
 80149a4:	3301      	adds	r3, #1
 80149a6:	4293      	cmp	r3, r2
 80149a8:	db02      	blt.n	80149b0 <format_read_args+0x1284>
 80149aa:	2a00      	cmp	r2, #0
 80149ac:	f040 80e2 	bne.w	8014b74 <format_read_args+0x1448>
 80149b0:	f9b0 8000 	ldrsh.w	r8, [r0]
                break;
 80149b4:	f7ff b829 	b.w	8013a0a <format_read_args+0x2de>
                val = *(uint32_t *)var->data;
 80149b8:	f7f5 f9b8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80149bc:	f107 0008 	add.w	r0, r7, #8
 80149c0:	08c3      	lsrs	r3, r0, #3
 80149c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80149c6:	f993 2000 	ldrsb.w	r2, [r3]
 80149ca:	f000 0307 	and.w	r3, r0, #7
 80149ce:	3303      	adds	r3, #3
 80149d0:	4293      	cmp	r3, r2
 80149d2:	db02      	blt.n	80149da <format_read_args+0x12ae>
 80149d4:	2a00      	cmp	r2, #0
 80149d6:	f040 80e1 	bne.w	8014b9c <format_read_args+0x1470>
 80149da:	68b8      	ldr	r0, [r7, #8]
 80149dc:	08c3      	lsrs	r3, r0, #3
 80149de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80149e2:	f993 2000 	ldrsb.w	r2, [r3]
 80149e6:	f000 0307 	and.w	r3, r0, #7
 80149ea:	3303      	adds	r3, #3
 80149ec:	4293      	cmp	r3, r2
 80149ee:	db02      	blt.n	80149f6 <format_read_args+0x12ca>
 80149f0:	2a00      	cmp	r2, #0
 80149f2:	f040 80c1 	bne.w	8014b78 <format_read_args+0x144c>
 80149f6:	f8d0 8000 	ldr.w	r8, [r0]
                break;
 80149fa:	f7ff bb12 	b.w	8014022 <format_read_args+0x8f6>
                val = *(int32_t *)var->data;
 80149fe:	f7f5 f995 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014a02:	f107 0008 	add.w	r0, r7, #8
 8014a06:	08c3      	lsrs	r3, r0, #3
 8014a08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014a0c:	f993 2000 	ldrsb.w	r2, [r3]
 8014a10:	f000 0307 	and.w	r3, r0, #7
 8014a14:	3303      	adds	r3, #3
 8014a16:	4293      	cmp	r3, r2
 8014a18:	db02      	blt.n	8014a20 <format_read_args+0x12f4>
 8014a1a:	2a00      	cmp	r2, #0
 8014a1c:	f040 80c0 	bne.w	8014ba0 <format_read_args+0x1474>
 8014a20:	68b8      	ldr	r0, [r7, #8]
 8014a22:	08c3      	lsrs	r3, r0, #3
 8014a24:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014a28:	f993 2000 	ldrsb.w	r2, [r3]
 8014a2c:	f000 0307 	and.w	r3, r0, #7
 8014a30:	3303      	adds	r3, #3
 8014a32:	4293      	cmp	r3, r2
 8014a34:	db02      	blt.n	8014a3c <format_read_args+0x1310>
 8014a36:	2a00      	cmp	r2, #0
 8014a38:	f040 80b4 	bne.w	8014ba4 <format_read_args+0x1478>
 8014a3c:	f8d0 8000 	ldr.w	r8, [r0]
                break;
 8014a40:	f7fe bfe3 	b.w	8013a0a <format_read_args+0x2de>
                ch = buf[i];
 8014a44:	4638      	mov	r0, r7
 8014a46:	f7f4 fd8f 	bl	8009568 <__asan_report_load1>
                if (var->access == CAT_VAR_ACCESS_WRITE_ONLY) {
 8014a4a:	9803      	ldr	r0, [sp, #12]
 8014a4c:	f7f4 fd8c 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014a50:	f7f4 fd92 	bl	8009578 <__asan_report_load4>
 8014a54:	4658      	mov	r0, fp
 8014a56:	f7f4 fd8f 	bl	8009578 <__asan_report_load4>
                                if (self->position >= get_atcmd_buf_size(self))
 8014a5a:	f7f4 fd8d 	bl	8009578 <__asan_report_load4>
                        val = buf[i];
 8014a5e:	4648      	mov	r0, r9
 8014a60:	f7f4 fd82 	bl	8009568 <__asan_report_load1>
        for (i = 0; i < var->data_size; i++) {
 8014a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a66:	f7f4 fd87 	bl	8009578 <__asan_report_load4>
                self->position += offset;
 8014a6a:	f7f4 fd85 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 8014a6e:	f7f4 fd83 	bl	8009578 <__asan_report_load4>
                return get_atcmd_buf_size(self) - self->position;
 8014a72:	f7f4 fd81 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014a76:	f7f4 fd7f 	bl	8009578 <__asan_report_load4>
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f7f4 fd7c 	bl	8009578 <__asan_report_load4>
                                get_atcmd_buf(self)[self->position] = 0;
 8014a80:	f7f4 fd66 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 8014a84:	f7f4 fd78 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014a88:	f7f4 fd76 	bl	8009578 <__asan_report_load4>
                                get_atcmd_buf(self)[self->position++] = ch;
 8014a8c:	f7f4 fd60 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 8014a90:	f7f4 fd72 	bl	8009578 <__asan_report_load4>
        assert(self != NULL);
 8014a94:	f7f5 f94a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014a98:	f7f4 fd8a 	bl	80095b0 <__asan_handle_no_return>
 8014a9c:	4b28      	ldr	r3, [pc, #160]	; (8014b40 <format_read_args+0x1414>)
 8014a9e:	4a29      	ldr	r2, [pc, #164]	; (8014b44 <format_read_args+0x1418>)
 8014aa0:	f240 61f2 	movw	r1, #1778	; 0x6f2
 8014aa4:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8014aa8:	f00d f868 	bl	8021b7c <__assert_func>
{
 8014aac:	2040      	movs	r0, #64	; 0x40
 8014aae:	f7f4 fd7b 	bl	80095a8 <__asan_stack_malloc_0>
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	bf18      	it	ne
 8014ab6:	4605      	movne	r5, r0
 8014ab8:	f7fe be47 	b.w	801374a <format_read_args+0x1e>
 8014abc:	4a22      	ldr	r2, [pc, #136]	; (8014b48 <format_read_args+0x141c>)
 8014abe:	f04f 33f5 	mov.w	r3, #4126537205	; 0xf5f5f5f5
 8014ac2:	602a      	str	r2, [r5, #0]
 8014ac4:	9a02      	ldr	r2, [sp, #8]
 8014ac6:	6013      	str	r3, [r2, #0]
 8014ac8:	6053      	str	r3, [r2, #4]
 8014aca:	f7fe befd 	b.w	80138c8 <format_read_args+0x19c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014ace:	f7f4 fd53 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	f7f4 fd50 	bl	8009578 <__asan_report_load4>
 8014ad8:	4608      	mov	r0, r1
 8014ada:	f7f4 fd4d 	bl	8009578 <__asan_report_load4>
 8014ade:	f7f4 fd4b 	bl	8009578 <__asan_report_load4>
                self->unsolicited_fsm.position += offset;
 8014ae2:	f7f4 fd49 	bl	8009578 <__asan_report_load4>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8014ae6:	4610      	mov	r0, r2
 8014ae8:	f7f4 fd46 	bl	8009578 <__asan_report_load4>
                                get_unsolicited_buf(self)[self->unsolicited_fsm.position++] = ch;
 8014aec:	4628      	mov	r0, r5
 8014aee:	f7f4 fd2f 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014af2:	f7f4 fd41 	bl	8009578 <__asan_report_load4>
 8014af6:	f7f4 fd3f 	bl	8009578 <__asan_report_load4>
 8014afa:	4658      	mov	r0, fp
 8014afc:	f7f4 fd3c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014b00:	f7f4 fd3a 	bl	8009578 <__asan_report_load4>
                                get_unsolicited_buf(self)[self->unsolicited_fsm.position] = 0;
 8014b04:	4620      	mov	r0, r4
 8014b06:	f7f4 fd23 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014b0a:	f7f4 fd35 	bl	8009578 <__asan_report_load4>
 8014b0e:	f7f4 fd33 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014b12:	f7f4 fd31 	bl	8009578 <__asan_report_load4>
                                if (self->unsolicited_fsm.position >= get_unsolicited_buf_size(self))
 8014b16:	9800      	ldr	r0, [sp, #0]
 8014b18:	f7f4 fd2e 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014b1c:	f7f4 fd2c 	bl	8009578 <__asan_report_load4>
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY) {
 8014b20:	f7f4 fd22 	bl	8009568 <__asan_report_load1>
        buf = var->data;
 8014b24:	f7f4 fd28 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8014b28:	f7f4 fd26 	bl	8009578 <__asan_report_load4>
        switch (var->data_size) {
 8014b2c:	f7f4 fd24 	bl	8009578 <__asan_report_load4>
 8014b30:	24009500 	.word	0x24009500
 8014b34:	24009400 	.word	0x24009400
 8014b38:	24009440 	.word	0x24009440
 8014b3c:	24009480 	.word	0x24009480
 8014b40:	24009180 	.word	0x24009180
 8014b44:	2400a5c0 	.word	0x2400a5c0
 8014b48:	45e0360e 	.word	0x45e0360e
                val = *(uint16_t *)var->data;
 8014b4c:	f7f4 fd14 	bl	8009578 <__asan_report_load4>
                val = *(uint32_t *)var->data;
 8014b50:	f7f4 fd12 	bl	8009578 <__asan_report_load4>
 8014b54:	f7f4 fd10 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014b58:	f7f4 fd0e 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8014b5c:	f7f4 fd0c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014b60:	f7f4 fd0a 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8014b64:	f7f4 fd08 	bl	8009578 <__asan_report_load4>
        switch (var->data_size) {
 8014b68:	f7f4 fd06 	bl	8009578 <__asan_report_load4>
                val = *(uint16_t *)var->data;
 8014b6c:	f7f4 fd04 	bl	8009578 <__asan_report_load4>
                val = *(int16_t *)var->data;
 8014b70:	f7f4 fd02 	bl	8009578 <__asan_report_load4>
 8014b74:	f7f4 fcfc 	bl	8009570 <__asan_report_load2>
                val = *(uint32_t *)var->data;
 8014b78:	f7f4 fcfe 	bl	8009578 <__asan_report_load4>
                val = *(int8_t *)var->data;
 8014b7c:	f7f4 fcfc 	bl	8009578 <__asan_report_load4>
 8014b80:	f7f4 fcf2 	bl	8009568 <__asan_report_load1>
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8014b84:	f7f4 fcf0 	bl	8009568 <__asan_report_load1>
                return get_unsolicited_buf_size(self) - self->unsolicited_fsm.position;
 8014b88:	f7f4 fcf6 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8014b8c:	f7f4 fcf4 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8014b90:	f7f4 fcf2 	bl	8009578 <__asan_report_load4>
 8014b94:	f7f4 fcf0 	bl	8009578 <__asan_report_load4>
                val = *(uint8_t *)var->data;
 8014b98:	f7f4 fcee 	bl	8009578 <__asan_report_load4>
                val = *(uint32_t *)var->data;
 8014b9c:	f7f4 fcec 	bl	8009578 <__asan_report_load4>
                val = *(int32_t *)var->data;
 8014ba0:	f7f4 fcea 	bl	8009578 <__asan_report_load4>
 8014ba4:	f7f4 fce8 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8014ba8:	f7f4 fce6 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < var->data_size; i++) {
 8014bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bae:	f7f4 fce3 	bl	8009578 <__asan_report_load4>
        buf = var->data;
 8014bb2:	f7f4 fce1 	bl	8009578 <__asan_report_load4>
                val = *(uint16_t *)var->data;
 8014bb6:	f7f4 fcdb 	bl	8009570 <__asan_report_load2>
        switch (var->data_size) {
 8014bba:	f7f4 fcdd 	bl	8009578 <__asan_report_load4>
                val = *(uint8_t *)var->data;
 8014bbe:	f7f4 fcd3 	bl	8009568 <__asan_report_load1>
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8014bc2:	f7f4 fcd1 	bl	8009568 <__asan_report_load1>
                val = *(uint16_t *)var->data;
 8014bc6:	f7f4 fcd3 	bl	8009570 <__asan_report_load2>
                val = *(uint8_t *)var->data;
 8014bca:	f7f4 fcd5 	bl	8009578 <__asan_report_load4>
 8014bce:	f7f4 fccb 	bl	8009568 <__asan_report_load1>
        if (var->access == CAT_VAR_ACCESS_WRITE_ONLY)
 8014bd2:	f7f4 fcc9 	bl	8009568 <__asan_report_load1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8014bd6:	f7f4 fcc7 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8014bda:	f7f4 fcc1 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8014bde:	f7f4 fcbf 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state_after = state_after;
 8014be2:	f7f4 fcb5 	bl	8009550 <__asan_report_store1>
                        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_READ_LOOP;
 8014be6:	f7f4 fcb3 	bl	8009550 <__asan_report_store1>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8014bea:	f7f4 fcc5 	bl	8009578 <__asan_report_load4>
        if (cmd->read != NULL) {
 8014bee:	f7f4 fcc3 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 8014bf2:	f7f4 fcc1 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8014bf6:	f7f4 fcbf 	bl	8009578 <__asan_report_load4>
 8014bfa:	f7f4 fcbd 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8014bfe:	f7f4 fca7 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.position = 0;
 8014c02:	f7f4 fcad 	bl	8009560 <__asan_report_store4>
        switch (var->type) {
 8014c06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014c0a:	f7fe be53 	b.w	80138b4 <format_read_args+0x188>
 8014c0e:	bf00      	nop

08014c10 <format_test_args>:
{
 8014c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c14:	b0a1      	sub	sp, #132	; 0x84
 8014c16:	4bcd      	ldr	r3, [pc, #820]	; (8014f4c <format_test_args+0x33c>)
 8014c18:	4604      	mov	r4, r0
 8014c1a:	460e      	mov	r6, r1
 8014c1c:	aa20      	add	r2, sp, #128	; 0x80
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	f022 071f 	bic.w	r7, r2, #31
 8014c24:	3f60      	subs	r7, #96	; 0x60
 8014c26:	46b9      	mov	r9, r7
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f040 823c 	bne.w	80150a6 <format_test_args+0x496>
 8014c2e:	4bc8      	ldr	r3, [pc, #800]	; (8014f50 <format_test_args+0x340>)
 8014c30:	463d      	mov	r5, r7
 8014c32:	ea4f 08d7 	mov.w	r8, r7, lsr #3
 8014c36:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8014c3a:	f845 3b60 	str.w	r3, [r5], #96
 8014c3e:	4bc5      	ldr	r3, [pc, #788]	; (8014f54 <format_test_args+0x344>)
 8014c40:	f108 58dc 	add.w	r8, r8, #461373440	; 0x1b800000
 8014c44:	607b      	str	r3, [r7, #4]
 8014c46:	4bc4      	ldr	r3, [pc, #784]	; (8014f58 <format_test_args+0x348>)
 8014c48:	60bb      	str	r3, [r7, #8]
 8014c4a:	4bc4      	ldr	r3, [pc, #784]	; (8014f5c <format_test_args+0x34c>)
 8014c4c:	e9c8 2300 	strd	r2, r3, [r8]
 8014c50:	4bc3      	ldr	r3, [pc, #780]	; (8014f60 <format_test_args+0x350>)
 8014c52:	f8c8 3008 	str.w	r3, [r8, #8]
        assert(self != NULL);
 8014c56:	f7f5 f869 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014c5a:	2c00      	cmp	r4, #0
 8014c5c:	f000 8235 	beq.w	80150ca <format_test_args+0x4ba>
        char var_type[8];
 8014c60:	f7f5 f864 	bl	8009d2c <__sanitizer_cov_trace_pc>
        switch (fsm) {
 8014c64:	2e01      	cmp	r6, #1
 8014c66:	f000 811a 	beq.w	8014e9e <format_test_args+0x28e>
                return (struct cat_variable*)self->var;
 8014c6a:	f7f5 f85f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014c6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014c72:	08c3      	lsrs	r3, r0, #3
 8014c74:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014c78:	f993 2000 	ldrsb.w	r2, [r3]
 8014c7c:	f000 0307 	and.w	r3, r0, #7
 8014c80:	3303      	adds	r3, #3
 8014c82:	4293      	cmp	r3, r2
 8014c84:	db02      	blt.n	8014c8c <format_test_args+0x7c>
 8014c86:	2a00      	cmp	r2, #0
 8014c88:	f040 81ca 	bne.w	8015020 <format_test_args+0x410>
 8014c8c:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
        switch (var->access) {
 8014c90:	f7f5 f84c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014c94:	f10b 0010 	add.w	r0, fp, #16
 8014c98:	08c3      	lsrs	r3, r0, #3
 8014c9a:	f000 0207 	and.w	r2, r0, #7
 8014c9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	db02      	blt.n	8014cb0 <format_test_args+0xa0>
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f040 81b1 	bne.w	8015012 <format_test_args+0x402>
 8014cb0:	f89b 3010 	ldrb.w	r3, [fp, #16]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	f000 811a 	beq.w	8014eee <format_test_args+0x2de>
 8014cba:	2b02      	cmp	r3, #2
 8014cbc:	f000 810d 	beq.w	8014eda <format_test_args+0x2ca>
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 8100 	beq.w	8014ec6 <format_test_args+0x2b6>
                strcpy(accessor, "??");
 8014cc6:	f1a5 0a20 	sub.w	sl, r5, #32
 8014cca:	f7f5 f82f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014cce:	2203      	movs	r2, #3
 8014cd0:	49a4      	ldr	r1, [pc, #656]	; (8014f64 <format_test_args+0x354>)
 8014cd2:	4650      	mov	r0, sl
 8014cd4:	f00d f8b6 	bl	8021e44 <memcpy>
        switch (var->type) {
 8014cd8:	f7f5 f828 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014cdc:	f10b 0004 	add.w	r0, fp, #4
 8014ce0:	08c3      	lsrs	r3, r0, #3
 8014ce2:	f000 0207 	and.w	r2, r0, #7
 8014ce6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014cea:	f993 3000 	ldrsb.w	r3, [r3]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	db02      	blt.n	8014cf8 <format_test_args+0xe8>
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	f040 818f 	bne.w	8015016 <format_test_args+0x406>
 8014cf8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8014cfc:	2b04      	cmp	r3, #4
 8014cfe:	d80e      	bhi.n	8014d1e <format_test_args+0x10e>
 8014d00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014d04:	00ff009c 	.word	0x00ff009c
 8014d08:	01690146 	.word	0x01690146
 8014d0c:	0005      	.short	0x0005
                strcpy(var_type, "STRING");
 8014d0e:	f7f5 f80d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d12:	2207      	movs	r2, #7
 8014d14:	4994      	ldr	r1, [pc, #592]	; (8014f68 <format_test_args+0x358>)
 8014d16:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8014d1a:	f00d f893 	bl	8021e44 <memcpy>
        if (print_string_to_buf(self, "<", fsm) != 0)
 8014d1e:	f7f5 f805 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d22:	4632      	mov	r2, r6
 8014d24:	4991      	ldr	r1, [pc, #580]	; (8014f6c <format_test_args+0x35c>)
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7fc ff28 	bl	8011b7c <print_string_to_buf>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f040 815b 	bne.w	8014fe8 <format_test_args+0x3d8>
        if (var->name != NULL) {
 8014d32:	f7f4 fffb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d36:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8014d3a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014d3e:	f993 2000 	ldrsb.w	r2, [r3]
 8014d42:	f00b 0307 	and.w	r3, fp, #7
 8014d46:	3303      	adds	r3, #3
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	db02      	blt.n	8014d52 <format_test_args+0x142>
 8014d4c:	2a00      	cmp	r2, #0
 8014d4e:	f040 8164 	bne.w	801501a <format_test_args+0x40a>
 8014d52:	f8db b000 	ldr.w	fp, [fp]
 8014d56:	f1bb 0f00 	cmp.w	fp, #0
 8014d5a:	d013      	beq.n	8014d84 <format_test_args+0x174>
                if (print_string_to_buf(self, var->name, fsm) != 0)
 8014d5c:	f7f4 ffe6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d60:	4632      	mov	r2, r6
 8014d62:	4659      	mov	r1, fp
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7fc ff09 	bl	8011b7c <print_string_to_buf>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f040 813c 	bne.w	8014fe8 <format_test_args+0x3d8>
                if (print_string_to_buf(self, ":", fsm) != 0)
 8014d70:	f7f4 ffdc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d74:	4632      	mov	r2, r6
 8014d76:	497e      	ldr	r1, [pc, #504]	; (8014f70 <format_test_args+0x360>)
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f7fc feff 	bl	8011b7c <print_string_to_buf>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	f040 8132 	bne.w	8014fe8 <format_test_args+0x3d8>
        if (print_string_to_buf(self, var_type, fsm) != 0)
 8014d84:	3d40      	subs	r5, #64	; 0x40
 8014d86:	f7f4 ffd1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d8a:	4632      	mov	r2, r6
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	4629      	mov	r1, r5
 8014d90:	f7fc fef4 	bl	8011b7c <print_string_to_buf>
 8014d94:	2800      	cmp	r0, #0
 8014d96:	f040 8128 	bne.w	8014fea <format_test_args+0x3da>
        if (print_string_to_buf(self, "[", fsm) != 0)
 8014d9a:	f7f4 ffc7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014d9e:	4632      	mov	r2, r6
 8014da0:	4974      	ldr	r1, [pc, #464]	; (8014f74 <format_test_args+0x364>)
 8014da2:	4620      	mov	r0, r4
 8014da4:	f7fc feea 	bl	8011b7c <print_string_to_buf>
 8014da8:	2800      	cmp	r0, #0
 8014daa:	f040 811e 	bne.w	8014fea <format_test_args+0x3da>
        if (print_string_to_buf(self, accessor, fsm) != 0)
 8014dae:	f7f4 ffbd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014db2:	4632      	mov	r2, r6
 8014db4:	4651      	mov	r1, sl
 8014db6:	4620      	mov	r0, r4
 8014db8:	f7fc fee0 	bl	8011b7c <print_string_to_buf>
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	f040 8114 	bne.w	8014fea <format_test_args+0x3da>
        if (print_string_to_buf(self, "]", fsm) != 0)
 8014dc2:	f7f4 ffb3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014dc6:	4632      	mov	r2, r6
 8014dc8:	496b      	ldr	r1, [pc, #428]	; (8014f78 <format_test_args+0x368>)
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f7fc fed6 	bl	8011b7c <print_string_to_buf>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f040 810a 	bne.w	8014fea <format_test_args+0x3da>
        if (print_string_to_buf(self, ">", fsm) != 0)
 8014dd6:	f7f4 ffa9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014dda:	4632      	mov	r2, r6
 8014ddc:	4967      	ldr	r1, [pc, #412]	; (8014f7c <format_test_args+0x36c>)
 8014dde:	4620      	mov	r0, r4
 8014de0:	f7fc fecc 	bl	8011b7c <print_string_to_buf>
 8014de4:	2800      	cmp	r0, #0
 8014de6:	f040 8100 	bne.w	8014fea <format_test_args+0x3da>
 8014dea:	f7f4 ff9f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014dee:	23f8      	movs	r3, #248	; 0xf8
 8014df0:	08ed      	lsrs	r5, r5, #3
        cat_status stat = next_format_var_by_fsm(self, fsm);
 8014df2:	4631      	mov	r1, r6
 8014df4:	ea4f 00da 	mov.w	r0, sl, lsr #3
 8014df8:	f105 55dc 	add.w	r5, r5, #461373440	; 0x1b800000
 8014dfc:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 8014e00:	702b      	strb	r3, [r5, #0]
 8014e02:	7003      	strb	r3, [r0, #0]
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7fd ff7b 	bl	8012d00 <next_format_var_by_fsm>
        if (stat != CAT_STATUS_OK)
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	b168      	cbz	r0, 8014e2a <format_test_args+0x21a>
 8014e0e:	f7f4 ff8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
{
 8014e12:	45b9      	cmp	r9, r7
 8014e14:	f040 814e 	bne.w	80150b4 <format_test_args+0x4a4>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	e9c8 3300 	strd	r3, r3, [r8]
 8014e1e:	f8c8 3008 	str.w	r3, [r8, #8]
}
 8014e22:	4628      	mov	r0, r5
 8014e24:	b021      	add	sp, #132	; 0x84
 8014e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (print_response_test(self, fsm) == 0)
 8014e2a:	f7f4 ff7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014e2e:	4631      	mov	r1, r6
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7fd fb11 	bl	8012458 <print_response_test>
 8014e36:	bb50      	cbnz	r0, 8014e8e <format_test_args+0x27e>
                return CAT_STATUS_BUSY;
 8014e38:	2501      	movs	r5, #1
 8014e3a:	e7e8      	b.n	8014e0e <format_test_args+0x1fe>
                switch (var->data_size) {
 8014e3c:	f7f4 ff76 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014e40:	f10b 000c 	add.w	r0, fp, #12
 8014e44:	08c3      	lsrs	r3, r0, #3
 8014e46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014e4a:	f993 2000 	ldrsb.w	r2, [r3]
 8014e4e:	f000 0307 	and.w	r3, r0, #7
 8014e52:	3303      	adds	r3, #3
 8014e54:	4293      	cmp	r3, r2
 8014e56:	db02      	blt.n	8014e5e <format_test_args+0x24e>
 8014e58:	2a00      	cmp	r2, #0
 8014e5a:	f040 8142 	bne.w	80150e2 <format_test_args+0x4d2>
 8014e5e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	f000 8116 	beq.w	8015094 <format_test_args+0x484>
 8014e68:	2b04      	cmp	r3, #4
 8014e6a:	f000 8101 	beq.w	8015070 <format_test_args+0x460>
 8014e6e:	2b01      	cmp	r3, #1
 8014e70:	f000 80da 	beq.w	8015028 <format_test_args+0x418>
 8014e74:	3d40      	subs	r5, #64	; 0x40
 8014e76:	f7f4 ff59 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014e7a:	ea4f 00da 	mov.w	r0, sl, lsr #3
 8014e7e:	23f8      	movs	r3, #248	; 0xf8
 8014e80:	08ed      	lsrs	r5, r5, #3
 8014e82:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 8014e86:	f105 55dc 	add.w	r5, r5, #461373440	; 0x1b800000
 8014e8a:	702b      	strb	r3, [r5, #0]
 8014e8c:	7003      	strb	r3, [r0, #0]
                end_processing_with_error(self, fsm);
 8014e8e:	f7f4 ff4d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014e92:	4631      	mov	r1, r6
 8014e94:	4620      	mov	r0, r4
                return CAT_STATUS_BUSY;
 8014e96:	2501      	movs	r5, #1
                end_processing_with_error(self, fsm);
 8014e98:	f7fd fdf4 	bl	8012a84 <end_processing_with_error>
                return CAT_STATUS_BUSY;
 8014e9c:	e7b7      	b.n	8014e0e <format_test_args+0x1fe>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8014e9e:	f7f4 ff45 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014ea2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014ea6:	08c3      	lsrs	r3, r0, #3
 8014ea8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014eac:	f993 2000 	ldrsb.w	r2, [r3]
 8014eb0:	f000 0307 	and.w	r3, r0, #7
 8014eb4:	3303      	adds	r3, #3
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	db02      	blt.n	8014ec0 <format_test_args+0x2b0>
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	f040 80b2 	bne.w	8015024 <format_test_args+0x414>
 8014ec0:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
 8014ec4:	e6e4      	b.n	8014c90 <format_test_args+0x80>
                strcpy(accessor, "RW");
 8014ec6:	f1a5 0a20 	sub.w	sl, r5, #32
 8014eca:	f7f4 ff2f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014ece:	2203      	movs	r2, #3
 8014ed0:	492b      	ldr	r1, [pc, #172]	; (8014f80 <format_test_args+0x370>)
 8014ed2:	4650      	mov	r0, sl
 8014ed4:	f00c ffb6 	bl	8021e44 <memcpy>
                break;
 8014ed8:	e6fe      	b.n	8014cd8 <format_test_args+0xc8>
                strcpy(accessor, "WO");
 8014eda:	f1a5 0a20 	sub.w	sl, r5, #32
 8014ede:	f7f4 ff25 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014ee2:	2203      	movs	r2, #3
 8014ee4:	4927      	ldr	r1, [pc, #156]	; (8014f84 <format_test_args+0x374>)
 8014ee6:	4650      	mov	r0, sl
 8014ee8:	f00c ffac 	bl	8021e44 <memcpy>
                break;
 8014eec:	e6f4      	b.n	8014cd8 <format_test_args+0xc8>
                strcpy(accessor, "RO");
 8014eee:	f1a5 0a20 	sub.w	sl, r5, #32
 8014ef2:	f7f4 ff1b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014ef6:	2203      	movs	r2, #3
 8014ef8:	4923      	ldr	r1, [pc, #140]	; (8014f88 <format_test_args+0x378>)
 8014efa:	4650      	mov	r0, sl
 8014efc:	f00c ffa2 	bl	8021e44 <memcpy>
                break;
 8014f00:	e6ea      	b.n	8014cd8 <format_test_args+0xc8>
                switch (var->data_size) {
 8014f02:	f7f4 ff13 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014f06:	f10b 000c 	add.w	r0, fp, #12
 8014f0a:	08c3      	lsrs	r3, r0, #3
 8014f0c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014f10:	f993 2000 	ldrsb.w	r2, [r3]
 8014f14:	f000 0307 	and.w	r3, r0, #7
 8014f18:	3303      	adds	r3, #3
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	db02      	blt.n	8014f24 <format_test_args+0x314>
 8014f1e:	2a00      	cmp	r2, #0
 8014f20:	f040 80e1 	bne.w	80150e6 <format_test_args+0x4d6>
 8014f24:	f8db 300c 	ldr.w	r3, [fp, #12]
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	f000 80aa 	beq.w	8015082 <format_test_args+0x472>
 8014f2e:	2b04      	cmp	r3, #4
 8014f30:	f000 8095 	beq.w	801505e <format_test_args+0x44e>
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d19d      	bne.n	8014e74 <format_test_args+0x264>
                        strcpy(var_type, "UINT8");
 8014f38:	f7f4 fef8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014f3c:	2206      	movs	r2, #6
 8014f3e:	4913      	ldr	r1, [pc, #76]	; (8014f8c <format_test_args+0x37c>)
 8014f40:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8014f44:	f00c ff7e 	bl	8021e44 <memcpy>
                        break;
 8014f48:	e6e9      	b.n	8014d1e <format_test_args+0x10e>
 8014f4a:	bf00      	nop
 8014f4c:	24037400 	.word	0x24037400
 8014f50:	41b58ab3 	.word	0x41b58ab3
 8014f54:	2400a034 	.word	0x2400a034
 8014f58:	08014c10 	.word	0x08014c10
 8014f5c:	f2f2f200 	.word	0xf2f2f200
 8014f60:	f3f3f300 	.word	0xf3f3f300
 8014f64:	240096c0 	.word	0x240096c0
 8014f68:	24009980 	.word	0x24009980
 8014f6c:	240099c0 	.word	0x240099c0
 8014f70:	24009a00 	.word	0x24009a00
 8014f74:	24009a40 	.word	0x24009a40
 8014f78:	24009a80 	.word	0x24009a80
 8014f7c:	24009ac0 	.word	0x24009ac0
 8014f80:	24009600 	.word	0x24009600
 8014f84:	24009680 	.word	0x24009680
 8014f88:	24009640 	.word	0x24009640
 8014f8c:	240097c0 	.word	0x240097c0
                switch (var->data_size) {
 8014f90:	f7f4 fecc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014f94:	f10b 000c 	add.w	r0, fp, #12
 8014f98:	08c3      	lsrs	r3, r0, #3
 8014f9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8014f9e:	f993 2000 	ldrsb.w	r2, [r3]
 8014fa2:	f000 0307 	and.w	r3, r0, #7
 8014fa6:	3303      	adds	r3, #3
 8014fa8:	4293      	cmp	r3, r2
 8014faa:	db02      	blt.n	8014fb2 <format_test_args+0x3a2>
 8014fac:	2a00      	cmp	r2, #0
 8014fae:	f040 809c 	bne.w	80150ea <format_test_args+0x4da>
 8014fb2:	f8db 300c 	ldr.w	r3, [fp, #12]
 8014fb6:	2b02      	cmp	r3, #2
 8014fb8:	d03f      	beq.n	801503a <format_test_args+0x42a>
 8014fba:	2b04      	cmp	r3, #4
 8014fbc:	d046      	beq.n	801504c <format_test_args+0x43c>
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	f47f af58 	bne.w	8014e74 <format_test_args+0x264>
                        strcpy(var_type, "HEX8");
 8014fc4:	f7f4 feb2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014fc8:	2205      	movs	r2, #5
 8014fca:	4949      	ldr	r1, [pc, #292]	; (80150f0 <format_test_args+0x4e0>)
 8014fcc:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8014fd0:	f00c ff38 	bl	8021e44 <memcpy>
                        break;
 8014fd4:	e6a3      	b.n	8014d1e <format_test_args+0x10e>
                strcpy(var_type, "HEXBUF");
 8014fd6:	f7f4 fea9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014fda:	2207      	movs	r2, #7
 8014fdc:	4945      	ldr	r1, [pc, #276]	; (80150f4 <format_test_args+0x4e4>)
 8014fde:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8014fe2:	f00c ff2f 	bl	8021e44 <memcpy>
                break;
 8014fe6:	e69a      	b.n	8014d1e <format_test_args+0x10e>
 8014fe8:	3d40      	subs	r5, #64	; 0x40
                return -1;
 8014fea:	f7f4 fe9f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8014fee:	23f8      	movs	r3, #248	; 0xf8
 8014ff0:	08ed      	lsrs	r5, r5, #3
 8014ff2:	ea4f 00da 	mov.w	r0, sl, lsr #3
 8014ff6:	f105 55dc 	add.w	r5, r5, #461373440	; 0x1b800000
 8014ffa:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 8014ffe:	702b      	strb	r3, [r5, #0]
                return CAT_STATUS_BUSY;
 8015000:	2501      	movs	r5, #1
 8015002:	7003      	strb	r3, [r0, #0]
                end_processing_with_error(self, fsm);
 8015004:	f7f4 fe92 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015008:	4631      	mov	r1, r6
 801500a:	4620      	mov	r0, r4
 801500c:	f7fd fd3a 	bl	8012a84 <end_processing_with_error>
                return CAT_STATUS_BUSY;
 8015010:	e6fd      	b.n	8014e0e <format_test_args+0x1fe>
        switch (var->access) {
 8015012:	f7f4 faa9 	bl	8009568 <__asan_report_load1>
        switch (var->type) {
 8015016:	f7f4 faa7 	bl	8009568 <__asan_report_load1>
        if (var->name != NULL) {
 801501a:	4658      	mov	r0, fp
 801501c:	f7f4 faac 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->var;
 8015020:	f7f4 faaa 	bl	8009578 <__asan_report_load4>
                return (struct cat_variable*)self->unsolicited_fsm.var;
 8015024:	f7f4 faa8 	bl	8009578 <__asan_report_load4>
                        strcpy(var_type, "INT8");
 8015028:	f7f4 fe80 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801502c:	2205      	movs	r2, #5
 801502e:	4932      	ldr	r1, [pc, #200]	; (80150f8 <format_test_args+0x4e8>)
 8015030:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8015034:	f00c ff06 	bl	8021e44 <memcpy>
                        break;
 8015038:	e671      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "HEX16");
 801503a:	f7f4 fe77 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801503e:	2206      	movs	r2, #6
 8015040:	492e      	ldr	r1, [pc, #184]	; (80150fc <format_test_args+0x4ec>)
 8015042:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8015046:	f00c fefd 	bl	8021e44 <memcpy>
                        break;
 801504a:	e668      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "HEX32");
 801504c:	f7f4 fe6e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015050:	2206      	movs	r2, #6
 8015052:	492b      	ldr	r1, [pc, #172]	; (8015100 <format_test_args+0x4f0>)
 8015054:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 8015058:	f00c fef4 	bl	8021e44 <memcpy>
                        break;
 801505c:	e65f      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "UINT32");
 801505e:	f7f4 fe65 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015062:	2207      	movs	r2, #7
 8015064:	4927      	ldr	r1, [pc, #156]	; (8015104 <format_test_args+0x4f4>)
 8015066:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 801506a:	f00c feeb 	bl	8021e44 <memcpy>
                        break;
 801506e:	e656      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "INT32");
 8015070:	f7f4 fe5c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015074:	2206      	movs	r2, #6
 8015076:	4924      	ldr	r1, [pc, #144]	; (8015108 <format_test_args+0x4f8>)
 8015078:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 801507c:	f00c fee2 	bl	8021e44 <memcpy>
                        break;
 8015080:	e64d      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "UINT16");
 8015082:	f7f4 fe53 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015086:	2207      	movs	r2, #7
 8015088:	4920      	ldr	r1, [pc, #128]	; (801510c <format_test_args+0x4fc>)
 801508a:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 801508e:	f00c fed9 	bl	8021e44 <memcpy>
                        break;
 8015092:	e644      	b.n	8014d1e <format_test_args+0x10e>
                        strcpy(var_type, "INT16");
 8015094:	f7f4 fe4a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015098:	2206      	movs	r2, #6
 801509a:	491d      	ldr	r1, [pc, #116]	; (8015110 <format_test_args+0x500>)
 801509c:	f1a5 0040 	sub.w	r0, r5, #64	; 0x40
 80150a0:	f00c fed0 	bl	8021e44 <memcpy>
                        break;
 80150a4:	e63b      	b.n	8014d1e <format_test_args+0x10e>
{
 80150a6:	2060      	movs	r0, #96	; 0x60
 80150a8:	f7f4 fa80 	bl	80095ac <__asan_stack_malloc_1>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	bf18      	it	ne
 80150b0:	4607      	movne	r7, r0
 80150b2:	e5bc      	b.n	8014c2e <format_test_args+0x1e>
 80150b4:	f04f 33f5 	mov.w	r3, #4126537205	; 0xf5f5f5f5
 80150b8:	4a16      	ldr	r2, [pc, #88]	; (8015114 <format_test_args+0x504>)
 80150ba:	603a      	str	r2, [r7, #0]
 80150bc:	f8c8 3000 	str.w	r3, [r8]
 80150c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80150c4:	f8c8 3008 	str.w	r3, [r8, #8]
 80150c8:	e6ab      	b.n	8014e22 <format_test_args+0x212>
        assert(self != NULL);
 80150ca:	f7f4 fe2f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80150ce:	f7f4 fa6f 	bl	80095b0 <__asan_handle_no_return>
 80150d2:	4b11      	ldr	r3, [pc, #68]	; (8015118 <format_test_args+0x508>)
 80150d4:	4a11      	ldr	r2, [pc, #68]	; (801511c <format_test_args+0x50c>)
 80150d6:	f240 713a 	movw	r1, #1850	; 0x73a
 80150da:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 80150de:	f00c fd4d 	bl	8021b7c <__assert_func>
                switch (var->data_size) {
 80150e2:	f7f4 fa49 	bl	8009578 <__asan_report_load4>
                switch (var->data_size) {
 80150e6:	f7f4 fa47 	bl	8009578 <__asan_report_load4>
                switch (var->data_size) {
 80150ea:	f7f4 fa45 	bl	8009578 <__asan_report_load4>
 80150ee:	bf00      	nop
 80150f0:	24009880 	.word	0x24009880
 80150f4:	24009940 	.word	0x24009940
 80150f8:	24009700 	.word	0x24009700
 80150fc:	240098c0 	.word	0x240098c0
 8015100:	24009900 	.word	0x24009900
 8015104:	24009840 	.word	0x24009840
 8015108:	24009780 	.word	0x24009780
 801510c:	24009800 	.word	0x24009800
 8015110:	24009740 	.word	0x24009740
 8015114:	45e0360e 	.word	0x45e0360e
 8015118:	24009180 	.word	0x24009180
 801511c:	2400a320 	.word	0x2400a320

08015120 <process_read_loop>:
                assert(false);
        }
}

static cat_status process_read_loop(struct cat_object *self, cat_fsm_type fsm)
{
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	4604      	mov	r4, r0
 8015126:	b085      	sub	sp, #20
 8015128:	460e      	mov	r6, r1
        assert(self != NULL);
 801512a:	f7f4 fdff 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801512e:	2c00      	cmp	r4, #0
 8015130:	f000 84bc 	beq.w	8015aac <process_read_loop+0x98c>
        switch (fsm) {
 8015134:	f7f4 fdfa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015138:	2e01      	cmp	r6, #1
 801513a:	f000 8081 	beq.w	8015240 <process_read_loop+0x120>
                return (struct cat_command*)self->cmd;
 801513e:	f7f4 fdf5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015146:	08c2      	lsrs	r2, r0, #3
 8015148:	f000 0307 	and.w	r3, r0, #7
 801514c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015150:	3303      	adds	r3, #3
 8015152:	f992 2000 	ldrsb.w	r2, [r2]
 8015156:	4293      	cmp	r3, r2
 8015158:	db02      	blt.n	8015160 <process_read_loop+0x40>
 801515a:	2a00      	cmp	r2, #0
 801515c:	f040 8432 	bne.w	80159c4 <process_read_loop+0x8a4>
 8015160:	6a67      	ldr	r7, [r4, #36]	; 0x24
                return cmd->read(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015162:	f107 000c 	add.w	r0, r7, #12
 8015166:	08c3      	lsrs	r3, r0, #3
 8015168:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801516c:	f993 2000 	ldrsb.w	r2, [r3]
 8015170:	f000 0307 	and.w	r3, r0, #7
 8015174:	3303      	adds	r3, #3
 8015176:	4293      	cmp	r3, r2
 8015178:	db02      	blt.n	8015180 <process_read_loop+0x60>
 801517a:	2a00      	cmp	r2, #0
 801517c:	f040 8420 	bne.w	80159c0 <process_read_loop+0x8a0>
        return (char*)self->desc->buf;
 8015180:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 8015184:	f004 0907 	and.w	r9, r4, #7
                return cmd->read(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015188:	f8d7 b00c 	ldr.w	fp, [r7, #12]
        return (char*)self->desc->buf;
 801518c:	f10a 53dc 	add.w	r3, sl, #461373440	; 0x1b800000
 8015190:	f109 0203 	add.w	r2, r9, #3
 8015194:	f993 3000 	ldrsb.w	r3, [r3]
 8015198:	429a      	cmp	r2, r3
 801519a:	db02      	blt.n	80151a2 <process_read_loop+0x82>
 801519c:	2b00      	cmp	r3, #0
 801519e:	f040 840c 	bne.w	80159ba <process_read_loop+0x89a>
 80151a2:	6825      	ldr	r5, [r4, #0]
 80151a4:	f105 0008 	add.w	r0, r5, #8
 80151a8:	08c3      	lsrs	r3, r0, #3
 80151aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80151ae:	f993 2000 	ldrsb.w	r2, [r3]
 80151b2:	f000 0307 	and.w	r3, r0, #7
 80151b6:	3303      	adds	r3, #3
 80151b8:	4293      	cmp	r3, r2
 80151ba:	db02      	blt.n	80151c2 <process_read_loop+0xa2>
 80151bc:	2a00      	cmp	r2, #0
 80151be:	f040 83fa 	bne.w	80159b6 <process_read_loop+0x896>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80151c2:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 80151c6:	68a9      	ldr	r1, [r5, #8]
                return cmd->read(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 80151c8:	f104 0818 	add.w	r8, r4, #24
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80151cc:	08c3      	lsrs	r3, r0, #3
 80151ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80151d2:	f993 2000 	ldrsb.w	r2, [r3]
 80151d6:	f000 0307 	and.w	r3, r0, #7
 80151da:	3303      	adds	r3, #3
 80151dc:	4293      	cmp	r3, r2
 80151de:	db02      	blt.n	80151e6 <process_read_loop+0xc6>
 80151e0:	2a00      	cmp	r2, #0
 80151e2:	f040 83e6 	bne.w	80159b2 <process_read_loop+0x892>
 80151e6:	692b      	ldr	r3, [r5, #16]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 809b 	beq.w	8015324 <process_read_loop+0x204>
 80151ee:	9101      	str	r1, [sp, #4]
 80151f0:	f7f4 fd9c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80151f4:	f105 000c 	add.w	r0, r5, #12
 80151f8:	9901      	ldr	r1, [sp, #4]
 80151fa:	08c3      	lsrs	r3, r0, #3
 80151fc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015200:	f993 2000 	ldrsb.w	r2, [r3]
 8015204:	f000 0307 	and.w	r3, r0, #7
 8015208:	3303      	adds	r3, #3
 801520a:	4293      	cmp	r3, r2
 801520c:	db02      	blt.n	8015214 <process_read_loop+0xf4>
 801520e:	2a00      	cmp	r2, #0
 8015210:	f040 8458 	bne.w	8015ac4 <process_read_loop+0x9a4>
 8015214:	68eb      	ldr	r3, [r5, #12]
 8015216:	e9cd 1301 	strd	r1, r3, [sp, #4]
                return cmd->read(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 801521a:	f7f4 fd87 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801521e:	9b02      	ldr	r3, [sp, #8]
 8015220:	4642      	mov	r2, r8
 8015222:	9901      	ldr	r1, [sp, #4]
 8015224:	4638      	mov	r0, r7
 8015226:	47d8      	blx	fp
        assert(fsm < CAT_FSM_TYPE__TOTAL_NUM);

        switch (call_cmd_read_by_fsm(self, fsm)) {
 8015228:	2806      	cmp	r0, #6
 801522a:	f200 80b8 	bhi.w	801539e <process_read_loop+0x27e>
 801522e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8015232:	0151      	.short	0x0151
 8015234:	012f013b 	.word	0x012f013b
 8015238:	00f40163 	.word	0x00f40163
 801523c:	008f00c2 	.word	0x008f00c2
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8015240:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8015244:	f7f4 fd72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015248:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 801524c:	f007 0207 	and.w	r2, r7, #7
 8015250:	f109 53dc 	add.w	r3, r9, #461373440	; 0x1b800000
 8015254:	9203      	str	r2, [sp, #12]
 8015256:	3203      	adds	r2, #3
 8015258:	f993 3000 	ldrsb.w	r3, [r3]
 801525c:	429a      	cmp	r2, r3
 801525e:	db02      	blt.n	8015266 <process_read_loop+0x146>
 8015260:	2b00      	cmp	r3, #0
 8015262:	f040 83b1 	bne.w	80159c8 <process_read_loop+0x8a8>
 8015266:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 801526a:	f108 000c 	add.w	r0, r8, #12
 801526e:	08c3      	lsrs	r3, r0, #3
 8015270:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015274:	f993 1000 	ldrsb.w	r1, [r3]
 8015278:	f000 0307 	and.w	r3, r0, #7
 801527c:	3303      	adds	r3, #3
 801527e:	428b      	cmp	r3, r1
 8015280:	db02      	blt.n	8015288 <process_read_loop+0x168>
 8015282:	2900      	cmp	r1, #0
 8015284:	f040 83a3 	bne.w	80159ce <process_read_loop+0x8ae>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015288:	08e3      	lsrs	r3, r4, #3
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 801528a:	f8d8 100c 	ldr.w	r1, [r8, #12]
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801528e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015292:	9101      	str	r1, [sp, #4]
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015294:	f993 2000 	ldrsb.w	r2, [r3]
 8015298:	f004 0307 	and.w	r3, r4, #7
 801529c:	3303      	adds	r3, #3
 801529e:	4293      	cmp	r3, r2
 80152a0:	db02      	blt.n	80152a8 <process_read_loop+0x188>
 80152a2:	2a00      	cmp	r2, #0
 80152a4:	f040 8395 	bne.w	80159d2 <process_read_loop+0x8b2>
 80152a8:	6825      	ldr	r5, [r4, #0]
 80152aa:	f105 0010 	add.w	r0, r5, #16
 80152ae:	08c3      	lsrs	r3, r0, #3
 80152b0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80152b4:	f993 1000 	ldrsb.w	r1, [r3]
 80152b8:	f000 0307 	and.w	r3, r0, #7
 80152bc:	3303      	adds	r3, #3
 80152be:	428b      	cmp	r3, r1
 80152c0:	db02      	blt.n	80152c8 <process_read_loop+0x1a8>
 80152c2:	2900      	cmp	r1, #0
 80152c4:	f040 8388 	bne.w	80159d8 <process_read_loop+0x8b8>
 80152c8:	f8d5 b010 	ldr.w	fp, [r5, #16]
 80152cc:	f1bb 0f00 	cmp.w	fp, #0
 80152d0:	f000 82ab 	beq.w	801582a <process_read_loop+0x70a>
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 80152d4:	f7f4 fd2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80152d8:	f105 0014 	add.w	r0, r5, #20
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 80152dc:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80152e0:	08c3      	lsrs	r3, r0, #3
 80152e2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80152e6:	f993 2000 	ldrsb.w	r2, [r3]
 80152ea:	f000 0307 	and.w	r3, r0, #7
 80152ee:	3303      	adds	r3, #3
 80152f0:	4293      	cmp	r3, r2
 80152f2:	db02      	blt.n	80152fa <process_read_loop+0x1da>
 80152f4:	2a00      	cmp	r2, #0
 80152f6:	f040 8371 	bne.w	80159dc <process_read_loop+0x8bc>
 80152fa:	696b      	ldr	r3, [r5, #20]
 80152fc:	9302      	str	r3, [sp, #8]
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 80152fe:	f7f4 fd15 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015302:	9b02      	ldr	r3, [sp, #8]
 8015304:	4652      	mov	r2, sl
 8015306:	4659      	mov	r1, fp
 8015308:	4640      	mov	r0, r8
 801530a:	9d01      	ldr	r5, [sp, #4]
 801530c:	47a8      	blx	r5
        switch (call_cmd_read_by_fsm(self, fsm)) {
 801530e:	2806      	cmp	r0, #6
 8015310:	d845      	bhi.n	801539e <process_read_loop+0x27e>
 8015312:	e8df f010 	tbh	[pc, r0, lsl #1]
 8015316:	02b7      	.short	0x02b7
 8015318:	00bd00c9 	.word	0x00bd00c9
 801531c:	00820102 	.word	0x00820102
 8015320:	001d0050 	.word	0x001d0050
 8015324:	9101      	str	r1, [sp, #4]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015326:	f7f4 fd01 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801532a:	f105 000c 	add.w	r0, r5, #12
 801532e:	9901      	ldr	r1, [sp, #4]
 8015330:	08c3      	lsrs	r3, r0, #3
 8015332:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015336:	f993 2000 	ldrsb.w	r2, [r3]
 801533a:	f000 0307 	and.w	r3, r0, #7
 801533e:	3303      	adds	r3, #3
 8015340:	4293      	cmp	r3, r2
 8015342:	db02      	blt.n	801534a <process_read_loop+0x22a>
 8015344:	2a00      	cmp	r2, #0
 8015346:	f040 83c1 	bne.w	8015acc <process_read_loop+0x9ac>
 801534a:	68eb      	ldr	r3, [r5, #12]
 801534c:	085b      	lsrs	r3, r3, #1
 801534e:	e762      	b.n	8015216 <process_read_loop+0xf6>
        if (self->hold_state_flag == false) {
 8015350:	f7f4 fcec 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015354:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015358:	08c3      	lsrs	r3, r0, #3
 801535a:	f000 0207 	and.w	r2, r0, #7
 801535e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015362:	f993 3000 	ldrsb.w	r3, [r3]
 8015366:	429a      	cmp	r2, r3
 8015368:	db02      	blt.n	8015370 <process_read_loop+0x250>
 801536a:	2b00      	cmp	r3, #0
 801536c:	f040 83b2 	bne.w	8015ad4 <process_read_loop+0x9b4>
 8015370:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015374:	b19b      	cbz	r3, 801539e <process_read_loop+0x27e>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 8015376:	f7f4 fcd9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801537a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801537e:	08c2      	lsrs	r2, r0, #3
 8015380:	f000 0307 	and.w	r3, r0, #7
 8015384:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015388:	3303      	adds	r3, #3
 801538a:	f992 2000 	ldrsb.w	r2, [r2]
 801538e:	4293      	cmp	r3, r2
 8015390:	db02      	blt.n	8015398 <process_read_loop+0x278>
 8015392:	2a00      	cmp	r2, #0
 8015394:	f040 83aa 	bne.w	8015aec <process_read_loop+0x9cc>
 8015398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801539c:	6363      	str	r3, [r4, #52]	; 0x34
                end_processing_with_error(self, fsm);
                break;
        case CAT_RETURN_STATE_PRINT_CMD_LIST_OK:
        case CAT_RETURN_STATE_ERROR:
        default:
                end_processing_with_error(self, fsm);
 801539e:	f7f4 fcc5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80153a2:	4631      	mov	r1, r6
 80153a4:	4620      	mov	r0, r4
 80153a6:	f7fd fb6d 	bl	8012a84 <end_processing_with_error>
                break;
        }

        return CAT_STATUS_BUSY;
 80153aa:	f7f4 fcbf 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 80153ae:	2001      	movs	r0, #1
 80153b0:	b005      	add	sp, #20
 80153b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (self->hold_state_flag == false) {
 80153b6:	f7f4 fcb9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80153ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80153be:	08c3      	lsrs	r3, r0, #3
 80153c0:	f000 0207 	and.w	r2, r0, #7
 80153c4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80153c8:	f993 3000 	ldrsb.w	r3, [r3]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	db02      	blt.n	80153d6 <process_read_loop+0x2b6>
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f040 8389 	bne.w	8015ae8 <process_read_loop+0x9c8>
 80153d6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80153da:	b193      	cbz	r3, 8015402 <process_read_loop+0x2e2>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 80153dc:	f7f4 fca6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80153e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80153e4:	08c2      	lsrs	r2, r0, #3
 80153e6:	f000 0307 	and.w	r3, r0, #7
 80153ea:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80153ee:	3303      	adds	r3, #3
 80153f0:	f992 2000 	ldrsb.w	r2, [r2]
 80153f4:	4293      	cmp	r3, r2
 80153f6:	db02      	blt.n	80153fe <process_read_loop+0x2de>
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	f040 8373 	bne.w	8015ae4 <process_read_loop+0x9c4>
 80153fe:	2301      	movs	r3, #1
 8015400:	6363      	str	r3, [r4, #52]	; 0x34
                end_processing_with_ok(self, fsm);
 8015402:	f7f4 fc93 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015406:	4620      	mov	r0, r4
 8015408:	4631      	mov	r1, r6
 801540a:	f7fd f9fd 	bl	8012808 <end_processing_with_ok>
        return CAT_STATUS_BUSY;
 801540e:	f7f4 fc8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015412:	2001      	movs	r0, #1
 8015414:	b005      	add	sp, #20
 8015416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        self->state = CAT_STATE_HOLD;
 801541a:	f7f4 fc87 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801541e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8015422:	08c3      	lsrs	r3, r0, #3
 8015424:	f000 0207 	and.w	r2, r0, #7
 8015428:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801542c:	f993 3000 	ldrsb.w	r3, [r3]
 8015430:	429a      	cmp	r2, r3
 8015432:	db02      	blt.n	801543a <process_read_loop+0x31a>
 8015434:	2b00      	cmp	r3, #0
 8015436:	f040 8353 	bne.w	8015ae0 <process_read_loop+0x9c0>
        self->hold_state_flag = true;
 801543a:	f104 0030 	add.w	r0, r4, #48	; 0x30
        self->state = CAT_STATE_HOLD;
 801543e:	2211      	movs	r2, #17
        self->hold_state_flag = true;
 8015440:	08c3      	lsrs	r3, r0, #3
        self->state = CAT_STATE_HOLD;
 8015442:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        self->hold_state_flag = true;
 8015446:	f000 0207 	and.w	r2, r0, #7
 801544a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801544e:	f993 3000 	ldrsb.w	r3, [r3]
 8015452:	429a      	cmp	r2, r3
 8015454:	db02      	blt.n	801545c <process_read_loop+0x33c>
 8015456:	2b00      	cmp	r3, #0
 8015458:	f040 8340 	bne.w	8015adc <process_read_loop+0x9bc>
        self->hold_exit_status = 0;
 801545c:	f104 0034 	add.w	r0, r4, #52	; 0x34
        self->hold_state_flag = true;
 8015460:	2101      	movs	r1, #1
        self->hold_exit_status = 0;
 8015462:	08c2      	lsrs	r2, r0, #3
 8015464:	f000 0307 	and.w	r3, r0, #7
        self->hold_state_flag = true;
 8015468:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        self->hold_exit_status = 0;
 801546c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015470:	3303      	adds	r3, #3
 8015472:	f992 2000 	ldrsb.w	r2, [r2]
 8015476:	4293      	cmp	r3, r2
 8015478:	db02      	blt.n	8015480 <process_read_loop+0x360>
 801547a:	2a00      	cmp	r2, #0
 801547c:	f040 832c 	bne.w	8015ad8 <process_read_loop+0x9b8>
 8015480:	2300      	movs	r3, #0
 8015482:	6363      	str	r3, [r4, #52]	; 0x34
        return CAT_STATUS_BUSY;
 8015484:	f7f4 fc52 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015488:	2001      	movs	r0, #1
 801548a:	b005      	add	sp, #20
 801548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                start_processing_format_read_args(self, fsm);
 8015490:	f7f4 fc4c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015494:	4620      	mov	r0, r4
 8015496:	4631      	mov	r1, r6
 8015498:	f7fd fe68 	bl	801316c <start_processing_format_read_args>
        return CAT_STATUS_BUSY;
 801549c:	f7f4 fc46 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 80154a0:	2001      	movs	r0, #1
 80154a2:	b005      	add	sp, #20
 80154a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                switch (fsm) {
 80154a8:	f7f4 fc40 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80154ac:	2e01      	cmp	r6, #1
 80154ae:	f000 8297 	beq.w	80159e0 <process_read_loop+0x8c0>
        self->position = 0;
 80154b2:	f7f4 fc3b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80154b6:	f104 0018 	add.w	r0, r4, #24
 80154ba:	08c2      	lsrs	r2, r0, #3
 80154bc:	f000 0307 	and.w	r3, r0, #7
 80154c0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80154c4:	3303      	adds	r3, #3
 80154c6:	f992 2000 	ldrsb.w	r2, [r2]
 80154ca:	4293      	cmp	r3, r2
 80154cc:	db37      	blt.n	801553e <process_read_loop+0x41e>
 80154ce:	b3b2      	cbz	r2, 801553e <process_read_loop+0x41e>
 80154d0:	f7f4 f846 	bl	8009560 <__asan_report_store4>
 80154d4:	f7f4 fc2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80154d8:	f008 0307 	and.w	r3, r8, #7
 80154dc:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 80154e0:	3303      	adds	r3, #3
 80154e2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80154e6:	f992 2000 	ldrsb.w	r2, [r2]
 80154ea:	4293      	cmp	r3, r2
 80154ec:	db7e      	blt.n	80155ec <process_read_loop+0x4cc>
 80154ee:	2a00      	cmp	r2, #0
 80154f0:	d07c      	beq.n	80155ec <process_read_loop+0x4cc>
 80154f2:	4640      	mov	r0, r8
 80154f4:	f7f4 f834 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 80154f8:	f10a 5adc 	add.w	sl, sl, #461373440	; 0x1b800000
 80154fc:	f7f4 fc16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015500:	f109 0903 	add.w	r9, r9, #3
 8015504:	f99a 3000 	ldrsb.w	r3, [sl]
 8015508:	4599      	cmp	r9, r3
 801550a:	f2c0 80e9 	blt.w	80156e0 <process_read_loop+0x5c0>
 801550e:	2b00      	cmp	r3, #0
 8015510:	f000 80e6 	beq.w	80156e0 <process_read_loop+0x5c0>
 8015514:	4620      	mov	r0, r4
 8015516:	f7f4 f82f 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.cmd = NULL;
 801551a:	f7f4 fc07 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801551e:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
 8015522:	9b03      	ldr	r3, [sp, #12]
 8015524:	f103 0803 	add.w	r8, r3, #3
 8015528:	f999 3000 	ldrsb.w	r3, [r9]
 801552c:	4598      	cmp	r8, r3
 801552e:	f2c0 80b2 	blt.w	8015696 <process_read_loop+0x576>
 8015532:	2b00      	cmp	r3, #0
 8015534:	f000 80af 	beq.w	8015696 <process_read_loop+0x576>
 8015538:	4638      	mov	r0, r7
 801553a:	f7f4 f811 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801553e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8015542:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015544:	08c3      	lsrs	r3, r0, #3
 8015546:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801554a:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801554c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015550:	f993 3000 	ldrsb.w	r3, [r3]
 8015554:	429a      	cmp	r2, r3
 8015556:	db02      	blt.n	801555e <process_read_loop+0x43e>
 8015558:	b10b      	cbz	r3, 801555e <process_read_loop+0x43e>
 801555a:	f7f4 f805 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801555e:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015562:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015566:	4bc5      	ldr	r3, [pc, #788]	; (801587c <process_read_loop+0x75c>)
        self->write_buf = get_new_line_chars(self);
 8015568:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801556a:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 801556e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015572:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8015574:	f992 1000 	ldrsb.w	r1, [r2]
 8015578:	f000 0207 	and.w	r2, r0, #7
 801557c:	3203      	adds	r2, #3
 801557e:	428a      	cmp	r2, r1
 8015580:	db02      	blt.n	8015588 <process_read_loop+0x468>
 8015582:	b109      	cbz	r1, 8015588 <process_read_loop+0x468>
 8015584:	f7f3 ffec 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015588:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801558c:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801558e:	08c2      	lsrs	r2, r0, #3
 8015590:	f000 0307 	and.w	r3, r0, #7
 8015594:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015598:	3303      	adds	r3, #3
 801559a:	f992 2000 	ldrsb.w	r2, [r2]
 801559e:	4293      	cmp	r3, r2
 80155a0:	db02      	blt.n	80155a8 <process_read_loop+0x488>
 80155a2:	b10a      	cbz	r2, 80155a8 <process_read_loop+0x488>
 80155a4:	f7f3 ffdc 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 80155a8:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80155ac:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 80155ae:	08c3      	lsrs	r3, r0, #3
 80155b0:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80155b4:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80155b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80155ba:	f993 3000 	ldrsb.w	r3, [r3]
 80155be:	429a      	cmp	r2, r3
 80155c0:	db02      	blt.n	80155c8 <process_read_loop+0x4a8>
 80155c2:	b10b      	cbz	r3, 80155c8 <process_read_loop+0x4a8>
 80155c4:	f7f3 ffc4 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80155c8:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 80155cc:	2216      	movs	r2, #22
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80155ce:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 80155d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80155d4:	f000 0207 	and.w	r2, r0, #7
 80155d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80155dc:	f993 3000 	ldrsb.w	r3, [r3]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	db4f      	blt.n	8015684 <process_read_loop+0x564>
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d04d      	beq.n	8015684 <process_read_loop+0x564>
 80155e8:	f7f3 ffb2 	bl	8009550 <__asan_report_store1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80155ec:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 80155f0:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80155f2:	08c3      	lsrs	r3, r0, #3
 80155f4:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 80155f8:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80155fa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80155fe:	f993 3000 	ldrsb.w	r3, [r3]
 8015602:	429a      	cmp	r2, r3
 8015604:	f280 81bc 	bge.w	8015980 <process_read_loop+0x860>
        self->write_buf = get_new_line_chars(self);
 8015608:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801560c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015610:	4b9a      	ldr	r3, [pc, #616]	; (801587c <process_read_loop+0x75c>)
        self->write_buf = get_new_line_chars(self);
 8015612:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015614:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8015618:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801561c:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 801561e:	f992 1000 	ldrsb.w	r1, [r2]
 8015622:	f000 0207 	and.w	r2, r0, #7
 8015626:	3203      	adds	r2, #3
 8015628:	428a      	cmp	r2, r1
 801562a:	f280 81a4 	bge.w	8015976 <process_read_loop+0x856>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801562e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8015632:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015634:	08c2      	lsrs	r2, r0, #3
 8015636:	f000 0307 	and.w	r3, r0, #7
 801563a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801563e:	3303      	adds	r3, #3
 8015640:	f992 2000 	ldrsb.w	r2, [r2]
 8015644:	4293      	cmp	r3, r2
 8015646:	f280 8191 	bge.w	801596c <process_read_loop+0x84c>
        self->write_state_after = state_after;
 801564a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801564e:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8015650:	08c3      	lsrs	r3, r0, #3
 8015652:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015656:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8015658:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801565c:	f993 3000 	ldrsb.w	r3, [r3]
 8015660:	429a      	cmp	r2, r3
 8015662:	f280 817e 	bge.w	8015962 <process_read_loop+0x842>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8015666:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 801566a:	2215      	movs	r2, #21
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801566c:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 801566e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8015672:	f000 0207 	and.w	r2, r0, #7
 8015676:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801567a:	f993 3000 	ldrsb.w	r3, [r3]
 801567e:	429a      	cmp	r2, r3
 8015680:	f280 816a 	bge.w	8015958 <process_read_loop+0x838>
 8015684:	2312      	movs	r3, #18
 8015686:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return CAT_STATUS_BUSY;
 801568a:	f7f4 fb4f 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 801568e:	2001      	movs	r0, #1
 8015690:	b005      	add	sp, #20
 8015692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8015696:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 801569a:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801569c:	08c3      	lsrs	r3, r0, #3
 801569e:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.cmd = NULL;
 80156a2:	6521      	str	r1, [r4, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 80156a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80156a8:	f993 3000 	ldrsb.w	r3, [r3]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	db02      	blt.n	80156b6 <process_read_loop+0x596>
 80156b0:	b10b      	cbz	r3, 80156b6 <process_read_loop+0x596>
 80156b2:	f7f3 ff4d 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 80156b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 80156ba:	22ff      	movs	r2, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 80156bc:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 80156be:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 80156c2:	f000 0207 	and.w	r2, r0, #7
 80156c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80156ca:	f993 3000 	ldrsb.w	r3, [r3]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	db02      	blt.n	80156d8 <process_read_loop+0x5b8>
 80156d2:	b10b      	cbz	r3, 80156d8 <process_read_loop+0x5b8>
 80156d4:	f7f3 ff3c 	bl	8009550 <__asan_report_store1>
 80156d8:	2300      	movs	r3, #0
 80156da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80156de:	e664      	b.n	80153aa <process_read_loop+0x28a>
        return (char*)self->desc->buf;
 80156e0:	6825      	ldr	r5, [r4, #0]
 80156e2:	f105 0008 	add.w	r0, r5, #8
 80156e6:	08c3      	lsrs	r3, r0, #3
 80156e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80156ec:	f993 2000 	ldrsb.w	r2, [r3]
 80156f0:	f000 0307 	and.w	r3, r0, #7
 80156f4:	3303      	adds	r3, #3
 80156f6:	4293      	cmp	r3, r2
 80156f8:	db02      	blt.n	8015700 <process_read_loop+0x5e0>
 80156fa:	b10a      	cbz	r2, 8015700 <process_read_loop+0x5e0>
 80156fc:	f7f3 ff3c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015700:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 8015704:	68ae      	ldr	r6, [r5, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015706:	08c3      	lsrs	r3, r0, #3
 8015708:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801570c:	f993 1000 	ldrsb.w	r1, [r3]
 8015710:	f000 0307 	and.w	r3, r0, #7
 8015714:	3303      	adds	r3, #3
 8015716:	428b      	cmp	r3, r1
 8015718:	db02      	blt.n	8015720 <process_read_loop+0x600>
 801571a:	b109      	cbz	r1, 8015720 <process_read_loop+0x600>
 801571c:	f7f3 ff2c 	bl	8009578 <__asan_report_load4>
 8015720:	692b      	ldr	r3, [r5, #16]
 8015722:	2b00      	cmp	r3, #0
 8015724:	f000 8131 	beq.w	801598a <process_read_loop+0x86a>
 8015728:	f7f4 fb00 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801572c:	f105 000c 	add.w	r0, r5, #12
 8015730:	08c3      	lsrs	r3, r0, #3
 8015732:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015736:	f993 2000 	ldrsb.w	r2, [r3]
 801573a:	f000 0307 	and.w	r3, r0, #7
 801573e:	3303      	adds	r3, #3
 8015740:	4293      	cmp	r3, r2
 8015742:	db02      	blt.n	801574a <process_read_loop+0x62a>
 8015744:	2a00      	cmp	r2, #0
 8015746:	f040 81f0 	bne.w	8015b2a <process_read_loop+0xa0a>
 801574a:	68ea      	ldr	r2, [r5, #12]
 801574c:	9201      	str	r2, [sp, #4]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801574e:	f7f4 faed 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015752:	9a01      	ldr	r2, [sp, #4]
 8015754:	4630      	mov	r0, r6
 8015756:	494a      	ldr	r1, [pc, #296]	; (8015880 <process_read_loop+0x760>)
 8015758:	f00d f93d 	bl	80229d6 <strncpy>
        self->position = 0;
 801575c:	f008 0307 	and.w	r3, r8, #7
 8015760:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8015764:	3303      	adds	r3, #3
 8015766:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801576a:	f992 2000 	ldrsb.w	r2, [r2]
 801576e:	4293      	cmp	r3, r2
 8015770:	db02      	blt.n	8015778 <process_read_loop+0x658>
 8015772:	2a00      	cmp	r2, #0
 8015774:	f040 81db 	bne.w	8015b2e <process_read_loop+0xa0e>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015778:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801577c:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801577e:	08c3      	lsrs	r3, r0, #3
 8015780:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8015784:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015786:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801578a:	f993 3000 	ldrsb.w	r3, [r3]
 801578e:	429a      	cmp	r2, r3
 8015790:	db02      	blt.n	8015798 <process_read_loop+0x678>
 8015792:	2b00      	cmp	r3, #0
 8015794:	f040 81ce 	bne.w	8015b34 <process_read_loop+0xa14>
        self->write_buf = get_new_line_chars(self);
 8015798:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801579c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80157a0:	4b36      	ldr	r3, [pc, #216]	; (801587c <process_read_loop+0x75c>)
        self->write_buf = get_new_line_chars(self);
 80157a2:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80157a4:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 80157a8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80157ac:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 80157ae:	f992 1000 	ldrsb.w	r1, [r2]
 80157b2:	f000 0207 	and.w	r2, r0, #7
 80157b6:	3203      	adds	r2, #3
 80157b8:	428a      	cmp	r2, r1
 80157ba:	db02      	blt.n	80157c2 <process_read_loop+0x6a2>
 80157bc:	2900      	cmp	r1, #0
 80157be:	f040 81bb 	bne.w	8015b38 <process_read_loop+0xa18>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80157c2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 80157c6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80157c8:	08c2      	lsrs	r2, r0, #3
 80157ca:	f000 0307 	and.w	r3, r0, #7
 80157ce:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80157d2:	3303      	adds	r3, #3
 80157d4:	f992 2000 	ldrsb.w	r2, [r2]
 80157d8:	4293      	cmp	r3, r2
 80157da:	db02      	blt.n	80157e2 <process_read_loop+0x6c2>
 80157dc:	2a00      	cmp	r2, #0
 80157de:	f040 8187 	bne.w	8015af0 <process_read_loop+0x9d0>
        self->write_state_after = state_after;
 80157e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80157e6:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 80157e8:	08c3      	lsrs	r3, r0, #3
 80157ea:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80157ee:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80157f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80157f4:	f993 3000 	ldrsb.w	r3, [r3]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	db02      	blt.n	8015802 <process_read_loop+0x6e2>
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	f040 8179 	bne.w	8015af4 <process_read_loop+0x9d4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8015802:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 8015806:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8015808:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 801580a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801580e:	f000 0207 	and.w	r2, r0, #7
 8015812:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015816:	f993 3000 	ldrsb.w	r3, [r3]
 801581a:	429a      	cmp	r2, r3
 801581c:	f6ff af32 	blt.w	8015684 <process_read_loop+0x564>
 8015820:	2b00      	cmp	r3, #0
 8015822:	f43f af2f 	beq.w	8015684 <process_read_loop+0x564>
 8015826:	f7f3 fe93 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801582a:	f7f4 fa7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801582e:	f105 0008 	add.w	r0, r5, #8
 8015832:	08c3      	lsrs	r3, r0, #3
 8015834:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015838:	f993 1000 	ldrsb.w	r1, [r3]
 801583c:	f000 0307 	and.w	r3, r0, #7
 8015840:	3303      	adds	r3, #3
 8015842:	428b      	cmp	r3, r1
 8015844:	db02      	blt.n	801584c <process_read_loop+0x72c>
 8015846:	2900      	cmp	r1, #0
 8015848:	f040 8142 	bne.w	8015ad0 <process_read_loop+0x9b0>
 801584c:	f105 000c 	add.w	r0, r5, #12
 8015850:	68a9      	ldr	r1, [r5, #8]
 8015852:	08c3      	lsrs	r3, r0, #3
 8015854:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015858:	f993 2000 	ldrsb.w	r2, [r3]
 801585c:	f000 0307 	and.w	r3, r0, #7
 8015860:	3303      	adds	r3, #3
 8015862:	4293      	cmp	r3, r2
 8015864:	db02      	blt.n	801586c <process_read_loop+0x74c>
 8015866:	2a00      	cmp	r2, #0
 8015868:	f040 812e 	bne.w	8015ac8 <process_read_loop+0x9a8>
 801586c:	68eb      	ldr	r3, [r5, #12]
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 801586e:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015872:	eb01 0b53 	add.w	fp, r1, r3, lsr #1
 8015876:	085b      	lsrs	r3, r3, #1
 8015878:	e540      	b.n	80152fc <process_read_loop+0x1dc>
 801587a:	bf00      	nop
 801587c:	24009240 	.word	0x24009240
 8015880:	24009300 	.word	0x24009300
        self->unsolicited_fsm.position = 0;
 8015884:	f7f4 fa52 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015888:	f00a 0307 	and.w	r3, sl, #7
 801588c:	ea4f 02da 	mov.w	r2, sl, lsr #3
 8015890:	3303      	adds	r3, #3
 8015892:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015896:	f992 2000 	ldrsb.w	r2, [r2]
 801589a:	4293      	cmp	r3, r2
 801589c:	db02      	blt.n	80158a4 <process_read_loop+0x784>
 801589e:	2a00      	cmp	r2, #0
 80158a0:	f040 8132 	bne.w	8015b08 <process_read_loop+0x9e8>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158a4:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 80158a8:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158aa:	08c3      	lsrs	r3, r0, #3
 80158ac:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.position = 0;
 80158b0:	64e1      	str	r1, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80158b6:	f993 3000 	ldrsb.w	r3, [r3]
 80158ba:	429a      	cmp	r2, r3
 80158bc:	db02      	blt.n	80158c4 <process_read_loop+0x7a4>
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f040 812b 	bne.w	8015b1a <process_read_loop+0x9fa>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80158c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158c8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80158cc:	4b9b      	ldr	r3, [pc, #620]	; (8015b3c <process_read_loop+0xa1c>)
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80158ce:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158d0:	f081 0101 	eor.w	r1, r1, #1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80158d4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80158d8:	440b      	add	r3, r1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80158da:	f992 1000 	ldrsb.w	r1, [r2]
 80158de:	f000 0207 	and.w	r2, r0, #7
 80158e2:	3203      	adds	r2, #3
 80158e4:	428a      	cmp	r2, r1
 80158e6:	db02      	blt.n	80158ee <process_read_loop+0x7ce>
 80158e8:	2900      	cmp	r1, #0
 80158ea:	f040 8118 	bne.w	8015b1e <process_read_loop+0x9fe>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 80158ee:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80158f2:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 80158f4:	08c2      	lsrs	r2, r0, #3
 80158f6:	f000 0307 	and.w	r3, r0, #7
 80158fa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80158fe:	3303      	adds	r3, #3
 8015900:	f992 2000 	ldrsb.w	r2, [r2]
 8015904:	4293      	cmp	r3, r2
 8015906:	db02      	blt.n	801590e <process_read_loop+0x7ee>
 8015908:	2a00      	cmp	r2, #0
 801590a:	f040 810a 	bne.w	8015b22 <process_read_loop+0xa02>
        self->unsolicited_fsm.write_state_after = state_after;
 801590e:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015912:	2100      	movs	r1, #0
        self->unsolicited_fsm.write_state_after = state_after;
 8015914:	08c3      	lsrs	r3, r0, #3
 8015916:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801591a:	6621      	str	r1, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 801591c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015920:	f993 3000 	ldrsb.w	r3, [r3]
 8015924:	429a      	cmp	r2, r3
 8015926:	db02      	blt.n	801592e <process_read_loop+0x80e>
 8015928:	2b00      	cmp	r3, #0
 801592a:	f040 80fc 	bne.w	8015b26 <process_read_loop+0xa06>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 801592e:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 8015932:	2208      	movs	r2, #8
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8015934:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.write_state_after = state_after;
 8015936:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 801593a:	f000 0207 	and.w	r2, r0, #7
 801593e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015942:	f993 3000 	ldrsb.w	r3, [r3]
 8015946:	429a      	cmp	r2, r3
 8015948:	db02      	blt.n	8015950 <process_read_loop+0x830>
 801594a:	2b00      	cmp	r3, #0
 801594c:	f040 80d4 	bne.w	8015af8 <process_read_loop+0x9d8>
 8015950:	2305      	movs	r3, #5
 8015952:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8015956:	e528      	b.n	80153aa <process_read_loop+0x28a>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8015958:	2b00      	cmp	r3, #0
 801595a:	f43f ae93 	beq.w	8015684 <process_read_loop+0x564>
 801595e:	f7f3 fdf7 	bl	8009550 <__asan_report_store1>
        self->write_state_after = state_after;
 8015962:	2b00      	cmp	r3, #0
 8015964:	f43f ae7f 	beq.w	8015666 <process_read_loop+0x546>
 8015968:	f7f3 fdf2 	bl	8009550 <__asan_report_store1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801596c:	2a00      	cmp	r2, #0
 801596e:	f43f ae6c 	beq.w	801564a <process_read_loop+0x52a>
 8015972:	f7f3 fdf5 	bl	8009560 <__asan_report_store4>
        self->write_buf = get_new_line_chars(self);
 8015976:	2900      	cmp	r1, #0
 8015978:	f43f ae59 	beq.w	801562e <process_read_loop+0x50e>
 801597c:	f7f3 fdf0 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015980:	2b00      	cmp	r3, #0
 8015982:	f43f ae41 	beq.w	8015608 <process_read_loop+0x4e8>
 8015986:	f7f3 fdef 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801598a:	f7f4 f9cf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801598e:	f105 000c 	add.w	r0, r5, #12
 8015992:	08c3      	lsrs	r3, r0, #3
 8015994:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015998:	f993 2000 	ldrsb.w	r2, [r3]
 801599c:	f000 0307 	and.w	r3, r0, #7
 80159a0:	3303      	adds	r3, #3
 80159a2:	4293      	cmp	r3, r2
 80159a4:	db02      	blt.n	80159ac <process_read_loop+0x88c>
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	f040 80a8 	bne.w	8015afc <process_read_loop+0x9dc>
 80159ac:	68ea      	ldr	r2, [r5, #12]
 80159ae:	0852      	lsrs	r2, r2, #1
 80159b0:	e6cc      	b.n	801574c <process_read_loop+0x62c>
 80159b2:	f7f3 fde1 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 80159b6:	f7f3 fddf 	bl	8009578 <__asan_report_load4>
 80159ba:	4620      	mov	r0, r4
 80159bc:	f7f3 fddc 	bl	8009578 <__asan_report_load4>
                return cmd->read(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 80159c0:	f7f3 fdda 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 80159c4:	f7f3 fdd8 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 80159c8:	4638      	mov	r0, r7
 80159ca:	f7f3 fdd5 	bl	8009578 <__asan_report_load4>
                return cmd->read(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 80159ce:	f7f3 fdd3 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80159d2:	4620      	mov	r0, r4
 80159d4:	f7f3 fdd0 	bl	8009578 <__asan_report_load4>
 80159d8:	f7f3 fdce 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80159dc:	f7f3 fdcc 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.position = 0;
 80159e0:	f7f4 f9a4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80159e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80159e8:	08c2      	lsrs	r2, r0, #3
 80159ea:	f000 0307 	and.w	r3, r0, #7
 80159ee:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80159f2:	3303      	adds	r3, #3
 80159f4:	f992 2000 	ldrsb.w	r2, [r2]
 80159f8:	4293      	cmp	r3, r2
 80159fa:	db02      	blt.n	8015a02 <process_read_loop+0x8e2>
 80159fc:	2a00      	cmp	r2, #0
 80159fe:	f040 8086 	bne.w	8015b0e <process_read_loop+0x9ee>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a02:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 8015a06:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a08:	08c3      	lsrs	r3, r0, #3
 8015a0a:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.position = 0;
 8015a0e:	64e1      	str	r1, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a10:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015a14:	f993 3000 	ldrsb.w	r3, [r3]
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	db01      	blt.n	8015a20 <process_read_loop+0x900>
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d178      	bne.n	8015b12 <process_read_loop+0x9f2>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a24:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015a28:	4b44      	ldr	r3, [pc, #272]	; (8015b3c <process_read_loop+0xa1c>)
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015a2a:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a2c:	f081 0101 	eor.w	r1, r1, #1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015a30:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015a34:	440b      	add	r3, r1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015a36:	f992 1000 	ldrsb.w	r1, [r2]
 8015a3a:	f000 0207 	and.w	r2, r0, #7
 8015a3e:	3203      	adds	r2, #3
 8015a40:	428a      	cmp	r2, r1
 8015a42:	db01      	blt.n	8015a48 <process_read_loop+0x928>
 8015a44:	2900      	cmp	r1, #0
 8015a46:	d166      	bne.n	8015b16 <process_read_loop+0x9f6>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015a48:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015a4c:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015a4e:	08c2      	lsrs	r2, r0, #3
 8015a50:	f000 0307 	and.w	r3, r0, #7
 8015a54:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015a58:	3303      	adds	r3, #3
 8015a5a:	f992 2000 	ldrsb.w	r2, [r2]
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	db01      	blt.n	8015a66 <process_read_loop+0x946>
 8015a62:	2a00      	cmp	r2, #0
 8015a64:	d14c      	bne.n	8015b00 <process_read_loop+0x9e0>
        self->unsolicited_fsm.write_state_after = state_after;
 8015a66:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015a6a:	2100      	movs	r1, #0
        self->unsolicited_fsm.write_state_after = state_after;
 8015a6c:	08c3      	lsrs	r3, r0, #3
 8015a6e:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015a72:	6621      	str	r1, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 8015a74:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015a78:	f993 3000 	ldrsb.w	r3, [r3]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	db01      	blt.n	8015a84 <process_read_loop+0x964>
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d13f      	bne.n	8015b04 <process_read_loop+0x9e4>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8015a84:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 8015a88:	2209      	movs	r2, #9
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8015a8a:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.write_state_after = state_after;
 8015a8c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8015a90:	f000 0207 	and.w	r2, r0, #7
 8015a94:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015a98:	f993 3000 	ldrsb.w	r3, [r3]
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	f6ff af57 	blt.w	8015950 <process_read_loop+0x830>
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f43f af54 	beq.w	8015950 <process_read_loop+0x830>
 8015aa8:	f7f3 fd52 	bl	8009550 <__asan_report_store1>
        assert(self != NULL);
 8015aac:	f7f4 f93e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015ab0:	f7f3 fd7e 	bl	80095b0 <__asan_handle_no_return>
 8015ab4:	4b22      	ldr	r3, [pc, #136]	; (8015b40 <process_read_loop+0xa20>)
 8015ab6:	4a23      	ldr	r2, [pc, #140]	; (8015b44 <process_read_loop+0xa24>)
 8015ab8:	f640 01a4 	movw	r1, #2212	; 0x8a4
 8015abc:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8015ac0:	f00c f85c 	bl	8021b7c <__assert_func>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015ac4:	f7f3 fd58 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015ac8:	f7f3 fd56 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015acc:	f7f3 fd54 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015ad0:	f7f3 fd52 	bl	8009578 <__asan_report_load4>
        if (self->hold_state_flag == false) {
 8015ad4:	f7f3 fd48 	bl	8009568 <__asan_report_load1>
        self->hold_exit_status = 0;
 8015ad8:	f7f3 fd42 	bl	8009560 <__asan_report_store4>
        self->hold_state_flag = true;
 8015adc:	f7f3 fd38 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_HOLD;
 8015ae0:	f7f3 fd36 	bl	8009550 <__asan_report_store1>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 8015ae4:	f7f3 fd3c 	bl	8009560 <__asan_report_store4>
        if (self->hold_state_flag == false) {
 8015ae8:	f7f3 fd3e 	bl	8009568 <__asan_report_load1>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 8015aec:	f7f3 fd38 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015af0:	f7f3 fd36 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 8015af4:	f7f3 fd2c 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8015af8:	f7f3 fd2a 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015afc:	f7f3 fd3c 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015b00:	f7f3 fd2e 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state_after = state_after;
 8015b04:	f7f3 fd24 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.position = 0;
 8015b08:	4650      	mov	r0, sl
 8015b0a:	f7f3 fd29 	bl	8009560 <__asan_report_store4>
 8015b0e:	f7f3 fd27 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015b12:	f7f3 fd29 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015b16:	f7f3 fd23 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015b1a:	f7f3 fd25 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8015b1e:	f7f3 fd1f 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8015b22:	f7f3 fd1d 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state_after = state_after;
 8015b26:	f7f3 fd13 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015b2a:	f7f3 fd25 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 8015b2e:	4640      	mov	r0, r8
 8015b30:	f7f3 fd16 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015b34:	f7f3 fd18 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 8015b38:	f7f3 fd12 	bl	8009560 <__asan_report_store4>
 8015b3c:	24009240 	.word	0x24009240
 8015b40:	24009180 	.word	0x24009180
 8015b44:	2400a2a0 	.word	0x2400a2a0

08015b48 <process_test_loop>:
                assert(false);
        }
}

static cat_status process_test_loop(struct cat_object *self, cat_fsm_type fsm)
{
 8015b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	b083      	sub	sp, #12
 8015b50:	460e      	mov	r6, r1
        assert(self != NULL);
 8015b52:	f7f4 f8eb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015b56:	2c00      	cmp	r4, #0
 8015b58:	f000 8524 	beq.w	80165a4 <process_test_loop+0xa5c>
        switch (fsm) {
 8015b5c:	f7f4 f8e6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015b60:	2e01      	cmp	r6, #1
 8015b62:	f000 80b4 	beq.w	8015cce <process_test_loop+0x186>
                return (struct cat_command*)self->cmd;
 8015b66:	f7f4 f8e1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015b6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015b6e:	08c2      	lsrs	r2, r0, #3
 8015b70:	f000 0307 	and.w	r3, r0, #7
 8015b74:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015b78:	3303      	adds	r3, #3
 8015b7a:	f992 2000 	ldrsb.w	r2, [r2]
 8015b7e:	4293      	cmp	r3, r2
 8015b80:	db02      	blt.n	8015b88 <process_test_loop+0x40>
 8015b82:	2a00      	cmp	r2, #0
 8015b84:	f040 8483 	bne.w	801648e <process_test_loop+0x946>
 8015b88:	6a67      	ldr	r7, [r4, #36]	; 0x24
                return cmd->test(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015b8a:	f107 0014 	add.w	r0, r7, #20
 8015b8e:	08c3      	lsrs	r3, r0, #3
 8015b90:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015b94:	f993 2000 	ldrsb.w	r2, [r3]
 8015b98:	f000 0307 	and.w	r3, r0, #7
 8015b9c:	3303      	adds	r3, #3
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	db02      	blt.n	8015ba8 <process_test_loop+0x60>
 8015ba2:	2a00      	cmp	r2, #0
 8015ba4:	f040 846d 	bne.w	8016482 <process_test_loop+0x93a>
        return (char*)self->desc->buf;
 8015ba8:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 8015bac:	f004 0907 	and.w	r9, r4, #7
                return cmd->test(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015bb0:	f8d7 b014 	ldr.w	fp, [r7, #20]
        return (char*)self->desc->buf;
 8015bb4:	f10a 53dc 	add.w	r3, sl, #461373440	; 0x1b800000
 8015bb8:	f109 0203 	add.w	r2, r9, #3
 8015bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	db02      	blt.n	8015bca <process_test_loop+0x82>
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	f040 8464 	bne.w	8016492 <process_test_loop+0x94a>
 8015bca:	6825      	ldr	r5, [r4, #0]
 8015bcc:	f105 0008 	add.w	r0, r5, #8
 8015bd0:	08c3      	lsrs	r3, r0, #3
 8015bd2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015bd6:	f993 2000 	ldrsb.w	r2, [r3]
 8015bda:	f000 0307 	and.w	r3, r0, #7
 8015bde:	3303      	adds	r3, #3
 8015be0:	4293      	cmp	r3, r2
 8015be2:	db02      	blt.n	8015bea <process_test_loop+0xa2>
 8015be4:	2a00      	cmp	r2, #0
 8015be6:	f040 844e 	bne.w	8016486 <process_test_loop+0x93e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015bea:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 8015bee:	68a9      	ldr	r1, [r5, #8]
                return cmd->test(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015bf0:	f104 0818 	add.w	r8, r4, #24
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015bf4:	08c3      	lsrs	r3, r0, #3
 8015bf6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015bfa:	f993 2000 	ldrsb.w	r2, [r3]
 8015bfe:	f000 0307 	and.w	r3, r0, #7
 8015c02:	3303      	adds	r3, #3
 8015c04:	4293      	cmp	r3, r2
 8015c06:	db02      	blt.n	8015c0e <process_test_loop+0xc6>
 8015c08:	2a00      	cmp	r2, #0
 8015c0a:	f040 843e 	bne.w	801648a <process_test_loop+0x942>
 8015c0e:	692b      	ldr	r3, [r5, #16]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 80d5 	beq.w	8015dc0 <process_test_loop+0x278>
 8015c16:	9100      	str	r1, [sp, #0]
 8015c18:	f7f4 f888 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015c1c:	f105 000c 	add.w	r0, r5, #12
 8015c20:	9900      	ldr	r1, [sp, #0]
 8015c22:	08c3      	lsrs	r3, r0, #3
 8015c24:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015c28:	f993 2000 	ldrsb.w	r2, [r3]
 8015c2c:	f000 0307 	and.w	r3, r0, #7
 8015c30:	3303      	adds	r3, #3
 8015c32:	4293      	cmp	r3, r2
 8015c34:	db02      	blt.n	8015c3c <process_test_loop+0xf4>
 8015c36:	2a00      	cmp	r2, #0
 8015c38:	f040 84c0 	bne.w	80165bc <process_test_loop+0xa74>
 8015c3c:	68eb      	ldr	r3, [r5, #12]
 8015c3e:	e9cd 1300 	strd	r1, r3, [sp]
                return cmd->test(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8015c42:	f7f4 f873 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015c46:	9b01      	ldr	r3, [sp, #4]
 8015c48:	4642      	mov	r2, r8
 8015c4a:	9900      	ldr	r1, [sp, #0]
 8015c4c:	4638      	mov	r0, r7
 8015c4e:	47d8      	blx	fp
        assert(fsm < CAT_FSM_TYPE__TOTAL_NUM);

        switch (call_cmd_test_by_fsm(self, fsm)) {
 8015c50:	2807      	cmp	r0, #7
 8015c52:	f200 80f2 	bhi.w	8015e3a <process_test_loop+0x2f2>
 8015c56:	e8df f010 	tbh	[pc, r0, lsl #1]
 8015c5a:	015a      	.short	0x015a
 8015c5c:	01370143 	.word	0x01370143
 8015c60:	00fc002e 	.word	0x00fc002e
 8015c64:	00c90008 	.word	0x00c90008
 8015c68:	016e      	.short	0x016e
        if (self->hold_state_flag == false) {
 8015c6a:	f7f4 f85f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015c6e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015c72:	08c3      	lsrs	r3, r0, #3
 8015c74:	f000 0207 	and.w	r2, r0, #7
 8015c78:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8015c80:	429a      	cmp	r2, r3
 8015c82:	db02      	blt.n	8015c8a <process_test_loop+0x142>
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	f040 84a3 	bne.w	80165d0 <process_test_loop+0xa88>
 8015c8a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015c8e:	b193      	cbz	r3, 8015cb6 <process_test_loop+0x16e>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 8015c90:	f7f4 f84c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015c94:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015c98:	08c2      	lsrs	r2, r0, #3
 8015c9a:	f000 0307 	and.w	r3, r0, #7
 8015c9e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015ca2:	3303      	adds	r3, #3
 8015ca4:	f992 2000 	ldrsb.w	r2, [r2]
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	db02      	blt.n	8015cb2 <process_test_loop+0x16a>
 8015cac:	2a00      	cmp	r2, #0
 8015cae:	f040 8499 	bne.w	80165e4 <process_test_loop+0xa9c>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	6363      	str	r3, [r4, #52]	; 0x34
        case CAT_RETURN_STATE_HOLD:
                enable_hold_state(self);
                break;
        case CAT_RETURN_STATE_HOLD_EXIT_OK:
                hold_exit(self, CAT_STATUS_OK);
                end_processing_with_ok(self, fsm);
 8015cb6:	f7f4 f839 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015cba:	4631      	mov	r1, r6
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	f7fc fda3 	bl	8012808 <end_processing_with_ok>
        default:
                end_processing_with_error(self, fsm);
                break;
        }

        return CAT_STATUS_BUSY;
 8015cc2:	f7f4 f833 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015cc6:	2001      	movs	r0, #1
 8015cc8:	b003      	add	sp, #12
 8015cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8015cce:	f104 0850 	add.w	r8, r4, #80	; 0x50
 8015cd2:	f7f4 f82b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015cd6:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8015cda:	f008 0307 	and.w	r3, r8, #7
 8015cde:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015ce2:	3303      	adds	r3, #3
 8015ce4:	f992 2000 	ldrsb.w	r2, [r2]
 8015ce8:	4293      	cmp	r3, r2
 8015cea:	db02      	blt.n	8015cf2 <process_test_loop+0x1aa>
 8015cec:	2a00      	cmp	r2, #0
 8015cee:	f040 83d3 	bne.w	8016498 <process_test_loop+0x950>
 8015cf2:	6d27      	ldr	r7, [r4, #80]	; 0x50
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015cf4:	f107 0014 	add.w	r0, r7, #20
 8015cf8:	08c3      	lsrs	r3, r0, #3
 8015cfa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015cfe:	f993 2000 	ldrsb.w	r2, [r3]
 8015d02:	f000 0307 	and.w	r3, r0, #7
 8015d06:	3303      	adds	r3, #3
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	db02      	blt.n	8015d12 <process_test_loop+0x1ca>
 8015d0c:	2a00      	cmp	r2, #0
 8015d0e:	f040 83c6 	bne.w	801649e <process_test_loop+0x956>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015d12:	08e3      	lsrs	r3, r4, #3
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015d14:	f8d7 9014 	ldr.w	r9, [r7, #20]
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 8015d18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015d1c:	f993 2000 	ldrsb.w	r2, [r3]
 8015d20:	f004 0307 	and.w	r3, r4, #7
 8015d24:	3303      	adds	r3, #3
 8015d26:	4293      	cmp	r3, r2
 8015d28:	db02      	blt.n	8015d30 <process_test_loop+0x1e8>
 8015d2a:	2a00      	cmp	r2, #0
 8015d2c:	f040 83b9 	bne.w	80164a2 <process_test_loop+0x95a>
 8015d30:	6825      	ldr	r5, [r4, #0]
 8015d32:	f105 0010 	add.w	r0, r5, #16
 8015d36:	08c3      	lsrs	r3, r0, #3
 8015d38:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015d3c:	f993 2000 	ldrsb.w	r2, [r3]
 8015d40:	f000 0307 	and.w	r3, r0, #7
 8015d44:	3303      	adds	r3, #3
 8015d46:	4293      	cmp	r3, r2
 8015d48:	db02      	blt.n	8015d50 <process_test_loop+0x208>
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	f040 83ac 	bne.w	80164a8 <process_test_loop+0x960>
 8015d50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015d54:	f1ba 0f00 	cmp.w	sl, #0
 8015d58:	f000 8233 	beq.w	80161c2 <process_test_loop+0x67a>
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015d5c:	f7f3 ffe6 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8015d60:	f105 0014 	add.w	r0, r5, #20
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015d64:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 8015d68:	08c3      	lsrs	r3, r0, #3
 8015d6a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015d6e:	f993 2000 	ldrsb.w	r2, [r3]
 8015d72:	f000 0307 	and.w	r3, r0, #7
 8015d76:	3303      	adds	r3, #3
 8015d78:	4293      	cmp	r3, r2
 8015d7a:	db02      	blt.n	8015d82 <process_test_loop+0x23a>
 8015d7c:	2a00      	cmp	r2, #0
 8015d7e:	f040 8395 	bne.w	80164ac <process_test_loop+0x964>
 8015d82:	696b      	ldr	r3, [r5, #20]
 8015d84:	9300      	str	r3, [sp, #0]
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8015d86:	f7f3 ffd1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015d8a:	9b00      	ldr	r3, [sp, #0]
 8015d8c:	465a      	mov	r2, fp
 8015d8e:	4651      	mov	r1, sl
 8015d90:	4638      	mov	r0, r7
 8015d92:	47c8      	blx	r9
        switch (call_cmd_test_by_fsm(self, fsm)) {
 8015d94:	2807      	cmp	r0, #7
 8015d96:	d850      	bhi.n	8015e3a <process_test_loop+0x2f2>
 8015d98:	a301      	add	r3, pc, #4	; (adr r3, 8015da0 <process_test_loop+0x258>)
 8015d9a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8015d9e:	bf00      	nop
 8015da0:	08016213 	.word	0x08016213
 8015da4:	08015ee1 	.word	0x08015ee1
 8015da8:	08015ec9 	.word	0x08015ec9
 8015dac:	08015cb7 	.word	0x08015cb7
 8015db0:	08015e53 	.word	0x08015e53
 8015db4:	08015c6b 	.word	0x08015c6b
 8015db8:	08015ded 	.word	0x08015ded
 8015dbc:	08015f63 	.word	0x08015f63
 8015dc0:	9100      	str	r1, [sp, #0]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8015dc2:	f7f3 ffb3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015dc6:	f105 000c 	add.w	r0, r5, #12
 8015dca:	9900      	ldr	r1, [sp, #0]
 8015dcc:	08c3      	lsrs	r3, r0, #3
 8015dce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015dd2:	f993 2000 	ldrsb.w	r2, [r3]
 8015dd6:	f000 0307 	and.w	r3, r0, #7
 8015dda:	3303      	adds	r3, #3
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	db02      	blt.n	8015de6 <process_test_loop+0x29e>
 8015de0:	2a00      	cmp	r2, #0
 8015de2:	f040 83ed 	bne.w	80165c0 <process_test_loop+0xa78>
 8015de6:	68eb      	ldr	r3, [r5, #12]
 8015de8:	085b      	lsrs	r3, r3, #1
 8015dea:	e728      	b.n	8015c3e <process_test_loop+0xf6>
        if (self->hold_state_flag == false) {
 8015dec:	f7f3 ff9e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015df0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015df4:	08c3      	lsrs	r3, r0, #3
 8015df6:	f000 0207 	and.w	r2, r0, #7
 8015dfa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015dfe:	f993 3000 	ldrsb.w	r3, [r3]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	db02      	blt.n	8015e0c <process_test_loop+0x2c4>
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	f040 83de 	bne.w	80165c8 <process_test_loop+0xa80>
 8015e0c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015e10:	b19b      	cbz	r3, 8015e3a <process_test_loop+0x2f2>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 8015e12:	f7f3 ff8b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015e16:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015e1a:	08c2      	lsrs	r2, r0, #3
 8015e1c:	f000 0307 	and.w	r3, r0, #7
 8015e20:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015e24:	3303      	adds	r3, #3
 8015e26:	f992 2000 	ldrsb.w	r2, [r2]
 8015e2a:	4293      	cmp	r3, r2
 8015e2c:	db02      	blt.n	8015e34 <process_test_loop+0x2ec>
 8015e2e:	2a00      	cmp	r2, #0
 8015e30:	f040 83d0 	bne.w	80165d4 <process_test_loop+0xa8c>
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e38:	6363      	str	r3, [r4, #52]	; 0x34
                end_processing_with_error(self, fsm);
 8015e3a:	f7f3 ff77 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015e3e:	4620      	mov	r0, r4
 8015e40:	4631      	mov	r1, r6
 8015e42:	f7fc fe1f 	bl	8012a84 <end_processing_with_error>
        return CAT_STATUS_BUSY;
 8015e46:	f7f3 ff71 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015e4a:	2001      	movs	r0, #1
 8015e4c:	b003      	add	sp, #12
 8015e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        self->state = CAT_STATE_HOLD;
 8015e52:	f7f3 ff6b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015e56:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8015e5a:	08c3      	lsrs	r3, r0, #3
 8015e5c:	f000 0207 	and.w	r2, r0, #7
 8015e60:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015e64:	f993 3000 	ldrsb.w	r3, [r3]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	db02      	blt.n	8015e72 <process_test_loop+0x32a>
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f040 83b7 	bne.w	80165e0 <process_test_loop+0xa98>
        self->hold_state_flag = true;
 8015e72:	f104 0030 	add.w	r0, r4, #48	; 0x30
        self->state = CAT_STATE_HOLD;
 8015e76:	2211      	movs	r2, #17
        self->hold_state_flag = true;
 8015e78:	08c3      	lsrs	r3, r0, #3
        self->state = CAT_STATE_HOLD;
 8015e7a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        self->hold_state_flag = true;
 8015e7e:	f000 0207 	and.w	r2, r0, #7
 8015e82:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015e86:	f993 3000 	ldrsb.w	r3, [r3]
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	db02      	blt.n	8015e94 <process_test_loop+0x34c>
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f040 83a4 	bne.w	80165dc <process_test_loop+0xa94>
        self->hold_exit_status = 0;
 8015e94:	f104 0034 	add.w	r0, r4, #52	; 0x34
        self->hold_state_flag = true;
 8015e98:	2101      	movs	r1, #1
        self->hold_exit_status = 0;
 8015e9a:	08c2      	lsrs	r2, r0, #3
 8015e9c:	f000 0307 	and.w	r3, r0, #7
        self->hold_state_flag = true;
 8015ea0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        self->hold_exit_status = 0;
 8015ea4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015ea8:	3303      	adds	r3, #3
 8015eaa:	f992 2000 	ldrsb.w	r2, [r2]
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	db02      	blt.n	8015eb8 <process_test_loop+0x370>
 8015eb2:	2a00      	cmp	r2, #0
 8015eb4:	f040 8390 	bne.w	80165d8 <process_test_loop+0xa90>
 8015eb8:	2300      	movs	r3, #0
 8015eba:	6363      	str	r3, [r4, #52]	; 0x34
        return CAT_STATUS_BUSY;
 8015ebc:	f7f3 ff36 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	b003      	add	sp, #12
 8015ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                start_processing_format_test_args(self, fsm);
 8015ec8:	f7f3 ff30 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015ecc:	4620      	mov	r0, r4
 8015ece:	4631      	mov	r1, r6
 8015ed0:	f7fd faf6 	bl	80134c0 <start_processing_format_test_args>
        return CAT_STATUS_BUSY;
 8015ed4:	f7f3 ff2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 8015ed8:	2001      	movs	r0, #1
 8015eda:	b003      	add	sp, #12
 8015edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                switch (fsm) {
 8015ee0:	f7f3 ff24 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015ee4:	2e01      	cmp	r6, #1
 8015ee6:	f000 82e3 	beq.w	80164b0 <process_test_loop+0x968>
        self->position = 0;
 8015eea:	f7f3 ff1f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015eee:	f104 0018 	add.w	r0, r4, #24
 8015ef2:	08c2      	lsrs	r2, r0, #3
 8015ef4:	f000 0307 	and.w	r3, r0, #7
 8015ef8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015efc:	3303      	adds	r3, #3
 8015efe:	f992 2000 	ldrsb.w	r2, [r2]
 8015f02:	4293      	cmp	r3, r2
 8015f04:	db41      	blt.n	8015f8a <process_test_loop+0x442>
 8015f06:	2a00      	cmp	r2, #0
 8015f08:	d03f      	beq.n	8015f8a <process_test_loop+0x442>
 8015f0a:	f7f3 fb29 	bl	8009560 <__asan_report_store4>
 8015f0e:	f7f3 ff0d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015f12:	f008 0307 	and.w	r3, r8, #7
 8015f16:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8015f1a:	3303      	adds	r3, #3
 8015f1c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015f20:	f992 2000 	ldrsb.w	r2, [r2]
 8015f24:	4293      	cmp	r3, r2
 8015f26:	f2c0 8087 	blt.w	8016038 <process_test_loop+0x4f0>
 8015f2a:	2a00      	cmp	r2, #0
 8015f2c:	f000 8084 	beq.w	8016038 <process_test_loop+0x4f0>
 8015f30:	4640      	mov	r0, r8
 8015f32:	f7f3 fb15 	bl	8009560 <__asan_report_store4>
                if (fsm == CAT_FSM_TYPE_ATCMD) {
 8015f36:	f7f3 fef9 	bl	8009d2c <__sanitizer_cov_trace_pc>
        if (self->commands_num == 0) {
 8015f3a:	f7f3 fef7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015f3e:	f104 0020 	add.w	r0, r4, #32
 8015f42:	08c3      	lsrs	r3, r0, #3
 8015f44:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015f48:	f993 2000 	ldrsb.w	r2, [r3]
 8015f4c:	f000 0307 	and.w	r3, r0, #7
 8015f50:	3303      	adds	r3, #3
 8015f52:	4293      	cmp	r3, r2
 8015f54:	f2c0 80c5 	blt.w	80160e2 <process_test_loop+0x59a>
 8015f58:	2a00      	cmp	r2, #0
 8015f5a:	f000 80c2 	beq.w	80160e2 <process_test_loop+0x59a>
 8015f5e:	f7f3 fb0b 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.cmd = NULL;
 8015f62:	f7f3 fee3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8015f66:	f008 0307 	and.w	r3, r8, #7
 8015f6a:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8015f6e:	3303      	adds	r3, #3
 8015f70:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015f74:	f992 2000 	ldrsb.w	r2, [r2]
 8015f78:	4293      	cmp	r3, r2
 8015f7a:	f2c0 80fd 	blt.w	8016178 <process_test_loop+0x630>
 8015f7e:	2a00      	cmp	r2, #0
 8015f80:	f000 80fa 	beq.w	8016178 <process_test_loop+0x630>
 8015f84:	4640      	mov	r0, r8
 8015f86:	f7f3 faeb 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015f8a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8015f8e:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015f90:	08c3      	lsrs	r3, r0, #3
 8015f92:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8015f96:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015f98:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8015f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	db02      	blt.n	8015faa <process_test_loop+0x462>
 8015fa4:	b10b      	cbz	r3, 8015faa <process_test_loop+0x462>
 8015fa6:	f7f3 fadf 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 8015faa:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015fae:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015fb2:	4bcd      	ldr	r3, [pc, #820]	; (80162e8 <process_test_loop+0x7a0>)
        self->write_buf = get_new_line_chars(self);
 8015fb4:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015fb6:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8015fba:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8015fbe:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8015fc0:	f992 1000 	ldrsb.w	r1, [r2]
 8015fc4:	f000 0207 	and.w	r2, r0, #7
 8015fc8:	3203      	adds	r2, #3
 8015fca:	428a      	cmp	r2, r1
 8015fcc:	db02      	blt.n	8015fd4 <process_test_loop+0x48c>
 8015fce:	b109      	cbz	r1, 8015fd4 <process_test_loop+0x48c>
 8015fd0:	f7f3 fac6 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015fd4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8015fd8:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015fda:	08c2      	lsrs	r2, r0, #3
 8015fdc:	f000 0307 	and.w	r3, r0, #7
 8015fe0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8015fe4:	3303      	adds	r3, #3
 8015fe6:	f992 2000 	ldrsb.w	r2, [r2]
 8015fea:	4293      	cmp	r3, r2
 8015fec:	db02      	blt.n	8015ff4 <process_test_loop+0x4ac>
 8015fee:	b10a      	cbz	r2, 8015ff4 <process_test_loop+0x4ac>
 8015ff0:	f7f3 fab6 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 8015ff4:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8015ff8:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8015ffa:	08c3      	lsrs	r3, r0, #3
 8015ffc:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8016000:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8016002:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016006:	f993 3000 	ldrsb.w	r3, [r3]
 801600a:	429a      	cmp	r2, r3
 801600c:	db02      	blt.n	8016014 <process_test_loop+0x4cc>
 801600e:	b10b      	cbz	r3, 8016014 <process_test_loop+0x4cc>
 8016010:	f7f3 fa9e 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8016014:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 8016018:	2217      	movs	r2, #23
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801601a:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 801601c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8016020:	f000 0207 	and.w	r2, r0, #7
 8016024:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016028:	f993 3000 	ldrsb.w	r3, [r3]
 801602c:	429a      	cmp	r2, r3
 801602e:	db4f      	blt.n	80160d0 <process_test_loop+0x588>
 8016030:	2b00      	cmp	r3, #0
 8016032:	d04d      	beq.n	80160d0 <process_test_loop+0x588>
 8016034:	f7f3 fa8c 	bl	8009550 <__asan_report_store1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016038:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801603c:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801603e:	08c3      	lsrs	r3, r0, #3
 8016040:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8016044:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016046:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801604a:	f993 3000 	ldrsb.w	r3, [r3]
 801604e:	429a      	cmp	r2, r3
 8016050:	f280 8160 	bge.w	8016314 <process_test_loop+0x7cc>
        self->write_buf = get_new_line_chars(self);
 8016054:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016058:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801605c:	4ba2      	ldr	r3, [pc, #648]	; (80162e8 <process_test_loop+0x7a0>)
        self->write_buf = get_new_line_chars(self);
 801605e:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016060:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8016064:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016068:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 801606a:	f992 1000 	ldrsb.w	r1, [r2]
 801606e:	f000 0207 	and.w	r2, r0, #7
 8016072:	3203      	adds	r2, #3
 8016074:	428a      	cmp	r2, r1
 8016076:	f280 8148 	bge.w	801630a <process_test_loop+0x7c2>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801607a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801607e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8016080:	08c2      	lsrs	r2, r0, #3
 8016082:	f000 0307 	and.w	r3, r0, #7
 8016086:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801608a:	3303      	adds	r3, #3
 801608c:	f992 2000 	ldrsb.w	r2, [r2]
 8016090:	4293      	cmp	r3, r2
 8016092:	f280 8135 	bge.w	8016300 <process_test_loop+0x7b8>
        self->write_state_after = state_after;
 8016096:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801609a:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 801609c:	08c3      	lsrs	r3, r0, #3
 801609e:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80160a2:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80160a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80160a8:	f993 3000 	ldrsb.w	r3, [r3]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	f280 8122 	bge.w	80162f6 <process_test_loop+0x7ae>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80160b2:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 80160b6:	2215      	movs	r2, #21
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80160b8:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 80160ba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80160be:	f000 0207 	and.w	r2, r0, #7
 80160c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80160c6:	f993 3000 	ldrsb.w	r3, [r3]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	f280 810e 	bge.w	80162ec <process_test_loop+0x7a4>
 80160d0:	2312      	movs	r3, #18
 80160d2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return CAT_STATUS_BUSY;
 80160d6:	f7f3 fe29 	bl	8009d2c <__sanitizer_cov_trace_pc>
}
 80160da:	2001      	movs	r0, #1
 80160dc:	b003      	add	sp, #12
 80160de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (self->commands_num == 0) {
 80160e2:	6a23      	ldr	r3, [r4, #32]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 811a 	beq.w	801631e <process_test_loop+0x7d6>
        self->index = 0;
 80160ea:	f7f3 fe1f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80160ee:	f104 000c 	add.w	r0, r4, #12
 80160f2:	08c2      	lsrs	r2, r0, #3
 80160f4:	f000 0307 	and.w	r3, r0, #7
 80160f8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80160fc:	3303      	adds	r3, #3
 80160fe:	f992 2000 	ldrsb.w	r2, [r2]
 8016102:	4293      	cmp	r3, r2
 8016104:	db02      	blt.n	801610c <process_test_loop+0x5c4>
 8016106:	2a00      	cmp	r2, #0
 8016108:	f040 829a 	bne.w	8016640 <process_test_loop+0xaf8>
        self->length = 0;
 801610c:	f104 0014 	add.w	r0, r4, #20
        self->index = 0;
 8016110:	2100      	movs	r1, #0
        self->length = 0;
 8016112:	08c2      	lsrs	r2, r0, #3
 8016114:	f000 0307 	and.w	r3, r0, #7
        self->index = 0;
 8016118:	60e1      	str	r1, [r4, #12]
        self->length = 0;
 801611a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801611e:	3303      	adds	r3, #3
 8016120:	f992 2000 	ldrsb.w	r2, [r2]
 8016124:	4293      	cmp	r3, r2
 8016126:	db02      	blt.n	801612e <process_test_loop+0x5e6>
 8016128:	2a00      	cmp	r2, #0
 801612a:	f040 8263 	bne.w	80165f4 <process_test_loop+0xaac>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801612e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        self->length = 0;
 8016132:	2100      	movs	r1, #0
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016134:	08c3      	lsrs	r3, r0, #3
 8016136:	f000 0207 	and.w	r2, r0, #7
        self->length = 0;
 801613a:	6161      	str	r1, [r4, #20]
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801613c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016140:	f993 3000 	ldrsb.w	r3, [r3]
 8016144:	429a      	cmp	r2, r3
 8016146:	db02      	blt.n	801614e <process_test_loop+0x606>
 8016148:	2b00      	cmp	r3, #0
 801614a:	f040 8255 	bne.w	80165f8 <process_test_loop+0xab0>
        self->state = CAT_STATE_PRINT_CMD;
 801614e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016152:	22ff      	movs	r2, #255	; 0xff
        self->state = CAT_STATE_PRINT_CMD;
 8016154:	08c3      	lsrs	r3, r0, #3
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016156:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        self->state = CAT_STATE_PRINT_CMD;
 801615a:	f000 0207 	and.w	r2, r0, #7
 801615e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016162:	f993 3000 	ldrsb.w	r3, [r3]
 8016166:	429a      	cmp	r2, r3
 8016168:	db02      	blt.n	8016170 <process_test_loop+0x628>
 801616a:	2b00      	cmp	r3, #0
 801616c:	f040 8251 	bne.w	8016612 <process_test_loop+0xaca>
 8016170:	2318      	movs	r3, #24
 8016172:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8016176:	e5a4      	b.n	8015cc2 <process_test_loop+0x17a>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016178:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 801617c:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801617e:	08c3      	lsrs	r3, r0, #3
 8016180:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.cmd = NULL;
 8016184:	6521      	str	r1, [r4, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016186:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801618a:	f993 3000 	ldrsb.w	r3, [r3]
 801618e:	429a      	cmp	r2, r3
 8016190:	db02      	blt.n	8016198 <process_test_loop+0x650>
 8016192:	b10b      	cbz	r3, 8016198 <process_test_loop+0x650>
 8016194:	f7f3 f9dc 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016198:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801619c:	22ff      	movs	r2, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 801619e:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 80161a0:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 80161a4:	f000 0207 	and.w	r2, r0, #7
 80161a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80161ac:	f993 3000 	ldrsb.w	r3, [r3]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	db02      	blt.n	80161ba <process_test_loop+0x672>
 80161b4:	b10b      	cbz	r3, 80161ba <process_test_loop+0x672>
 80161b6:	f7f3 f9cb 	bl	8009550 <__asan_report_store1>
 80161ba:	2300      	movs	r3, #0
 80161bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80161c0:	e57f      	b.n	8015cc2 <process_test_loop+0x17a>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80161c2:	f7f3 fdb3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80161c6:	f105 0008 	add.w	r0, r5, #8
 80161ca:	08c3      	lsrs	r3, r0, #3
 80161cc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80161d0:	f993 2000 	ldrsb.w	r2, [r3]
 80161d4:	f000 0307 	and.w	r3, r0, #7
 80161d8:	3303      	adds	r3, #3
 80161da:	4293      	cmp	r3, r2
 80161dc:	db02      	blt.n	80161e4 <process_test_loop+0x69c>
 80161de:	2a00      	cmp	r2, #0
 80161e0:	f040 81f4 	bne.w	80165cc <process_test_loop+0xa84>
 80161e4:	f105 000c 	add.w	r0, r5, #12
 80161e8:	68a9      	ldr	r1, [r5, #8]
 80161ea:	08c3      	lsrs	r3, r0, #3
 80161ec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80161f0:	f993 2000 	ldrsb.w	r2, [r3]
 80161f4:	f000 0307 	and.w	r3, r0, #7
 80161f8:	3303      	adds	r3, #3
 80161fa:	4293      	cmp	r3, r2
 80161fc:	db02      	blt.n	8016204 <process_test_loop+0x6bc>
 80161fe:	2a00      	cmp	r2, #0
 8016200:	f040 81e0 	bne.w	80165c4 <process_test_loop+0xa7c>
 8016204:	68eb      	ldr	r3, [r5, #12]
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 8016206:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801620a:	eb01 0a53 	add.w	sl, r1, r3, lsr #1
 801620e:	085b      	lsrs	r3, r3, #1
 8016210:	e5b8      	b.n	8015d84 <process_test_loop+0x23c>
        self->unsolicited_fsm.position = 0;
 8016212:	f7f3 fd8b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016216:	f00b 0307 	and.w	r3, fp, #7
 801621a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801621e:	3303      	adds	r3, #3
 8016220:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016224:	f992 2000 	ldrsb.w	r2, [r2]
 8016228:	4293      	cmp	r3, r2
 801622a:	db02      	blt.n	8016232 <process_test_loop+0x6ea>
 801622c:	2a00      	cmp	r2, #0
 801622e:	f040 81e5 	bne.w	80165fc <process_test_loop+0xab4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016232:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 8016236:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016238:	08c3      	lsrs	r3, r0, #3
 801623a:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.position = 0;
 801623e:	64e1      	str	r1, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016240:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016244:	f993 3000 	ldrsb.w	r3, [r3]
 8016248:	429a      	cmp	r2, r3
 801624a:	db02      	blt.n	8016252 <process_test_loop+0x70a>
 801624c:	2b00      	cmp	r3, #0
 801624e:	f040 81d8 	bne.w	8016602 <process_test_loop+0xaba>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016252:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016256:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801625a:	4b23      	ldr	r3, [pc, #140]	; (80162e8 <process_test_loop+0x7a0>)
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 801625c:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801625e:	f081 0101 	eor.w	r1, r1, #1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016262:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016266:	440b      	add	r3, r1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016268:	f992 1000 	ldrsb.w	r1, [r2]
 801626c:	f000 0207 	and.w	r2, r0, #7
 8016270:	3203      	adds	r2, #3
 8016272:	428a      	cmp	r2, r1
 8016274:	db02      	blt.n	801627c <process_test_loop+0x734>
 8016276:	2900      	cmp	r1, #0
 8016278:	f040 81c5 	bne.w	8016606 <process_test_loop+0xabe>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801627c:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016280:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8016282:	08c2      	lsrs	r2, r0, #3
 8016284:	f000 0307 	and.w	r3, r0, #7
 8016288:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801628c:	3303      	adds	r3, #3
 801628e:	f992 2000 	ldrsb.w	r2, [r2]
 8016292:	4293      	cmp	r3, r2
 8016294:	db02      	blt.n	801629c <process_test_loop+0x754>
 8016296:	2a00      	cmp	r2, #0
 8016298:	f040 81b7 	bne.w	801660a <process_test_loop+0xac2>
        self->unsolicited_fsm.write_state_after = state_after;
 801629c:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 80162a0:	2100      	movs	r1, #0
        self->unsolicited_fsm.write_state_after = state_after;
 80162a2:	08c3      	lsrs	r3, r0, #3
 80162a4:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 80162a8:	6621      	str	r1, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 80162aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80162ae:	f993 3000 	ldrsb.w	r3, [r3]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	db02      	blt.n	80162bc <process_test_loop+0x774>
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f040 81ad 	bne.w	8016616 <process_test_loop+0xace>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80162bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 80162c0:	2208      	movs	r2, #8
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80162c2:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.write_state_after = state_after;
 80162c4:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 80162c8:	f000 0207 	and.w	r2, r0, #7
 80162cc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80162d0:	f993 3000 	ldrsb.w	r3, [r3]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	db02      	blt.n	80162de <process_test_loop+0x796>
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f040 819e 	bne.w	801661a <process_test_loop+0xad2>
 80162de:	2305      	movs	r3, #5
 80162e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80162e4:	e4ed      	b.n	8015cc2 <process_test_loop+0x17a>
 80162e6:	bf00      	nop
 80162e8:	24009240 	.word	0x24009240
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f43f aeef 	beq.w	80160d0 <process_test_loop+0x588>
 80162f2:	f7f3 f92d 	bl	8009550 <__asan_report_store1>
        self->write_state_after = state_after;
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f43f aedb 	beq.w	80160b2 <process_test_loop+0x56a>
 80162fc:	f7f3 f928 	bl	8009550 <__asan_report_store1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8016300:	2a00      	cmp	r2, #0
 8016302:	f43f aec8 	beq.w	8016096 <process_test_loop+0x54e>
 8016306:	f7f3 f92b 	bl	8009560 <__asan_report_store4>
        self->write_buf = get_new_line_chars(self);
 801630a:	2900      	cmp	r1, #0
 801630c:	f43f aeb5 	beq.w	801607a <process_test_loop+0x532>
 8016310:	f7f3 f926 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016314:	2b00      	cmp	r3, #0
 8016316:	f43f ae9d 	beq.w	8016054 <process_test_loop+0x50c>
 801631a:	f7f3 f925 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801631e:	f10a 5adc 	add.w	sl, sl, #461373440	; 0x1b800000
 8016322:	f7f3 fd03 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016326:	f109 0903 	add.w	r9, r9, #3
 801632a:	f99a 3000 	ldrsb.w	r3, [sl]
 801632e:	4599      	cmp	r9, r3
 8016330:	db02      	blt.n	8016338 <process_test_loop+0x7f0>
 8016332:	2b00      	cmp	r3, #0
 8016334:	f040 8186 	bne.w	8016644 <process_test_loop+0xafc>
 8016338:	6825      	ldr	r5, [r4, #0]
 801633a:	f105 0008 	add.w	r0, r5, #8
 801633e:	08c3      	lsrs	r3, r0, #3
 8016340:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016344:	f993 2000 	ldrsb.w	r2, [r3]
 8016348:	f000 0307 	and.w	r3, r0, #7
 801634c:	3303      	adds	r3, #3
 801634e:	4293      	cmp	r3, r2
 8016350:	db02      	blt.n	8016358 <process_test_loop+0x810>
 8016352:	2a00      	cmp	r2, #0
 8016354:	f040 8179 	bne.w	801664a <process_test_loop+0xb02>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8016358:	f105 0010 	add.w	r0, r5, #16
        return (char*)self->desc->buf;
 801635c:	68ae      	ldr	r6, [r5, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801635e:	08c3      	lsrs	r3, r0, #3
 8016360:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016364:	f993 1000 	ldrsb.w	r1, [r3]
 8016368:	f000 0307 	and.w	r3, r0, #7
 801636c:	3303      	adds	r3, #3
 801636e:	428b      	cmp	r3, r1
 8016370:	db02      	blt.n	8016378 <process_test_loop+0x830>
 8016372:	2900      	cmp	r1, #0
 8016374:	f040 816b 	bne.w	801664e <process_test_loop+0xb06>
 8016378:	692b      	ldr	r3, [r5, #16]
 801637a:	2b00      	cmp	r3, #0
 801637c:	f000 8100 	beq.w	8016580 <process_test_loop+0xa38>
 8016380:	f7f3 fcd4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016384:	f105 000c 	add.w	r0, r5, #12
 8016388:	08c3      	lsrs	r3, r0, #3
 801638a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801638e:	f993 2000 	ldrsb.w	r2, [r3]
 8016392:	f000 0307 	and.w	r3, r0, #7
 8016396:	3303      	adds	r3, #3
 8016398:	4293      	cmp	r3, r2
 801639a:	db02      	blt.n	80163a2 <process_test_loop+0x85a>
 801639c:	2a00      	cmp	r2, #0
 801639e:	f040 8148 	bne.w	8016632 <process_test_loop+0xaea>
 80163a2:	68ea      	ldr	r2, [r5, #12]
 80163a4:	9200      	str	r2, [sp, #0]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 80163a6:	f7f3 fcc1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80163aa:	9a00      	ldr	r2, [sp, #0]
 80163ac:	4630      	mov	r0, r6
 80163ae:	49a9      	ldr	r1, [pc, #676]	; (8016654 <process_test_loop+0xb0c>)
 80163b0:	f00c fb11 	bl	80229d6 <strncpy>
        self->position = 0;
 80163b4:	f008 0307 	and.w	r3, r8, #7
 80163b8:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 80163bc:	3303      	adds	r3, #3
 80163be:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80163c2:	f992 2000 	ldrsb.w	r2, [r2]
 80163c6:	4293      	cmp	r3, r2
 80163c8:	db02      	blt.n	80163d0 <process_test_loop+0x888>
 80163ca:	2a00      	cmp	r2, #0
 80163cc:	f040 8133 	bne.w	8016636 <process_test_loop+0xaee>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80163d0:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 80163d4:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80163d6:	08c3      	lsrs	r3, r0, #3
 80163d8:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 80163dc:	61a1      	str	r1, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80163de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80163e2:	f993 3000 	ldrsb.w	r3, [r3]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	db02      	blt.n	80163f0 <process_test_loop+0x8a8>
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	f040 8126 	bne.w	801663c <process_test_loop+0xaf4>
        self->write_buf = get_new_line_chars(self);
 80163f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80163f4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80163f8:	4b97      	ldr	r3, [pc, #604]	; (8016658 <process_test_loop+0xb10>)
        self->write_buf = get_new_line_chars(self);
 80163fa:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80163fc:	f081 0101 	eor.w	r1, r1, #1
        self->write_buf = get_new_line_chars(self);
 8016400:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016404:	440b      	add	r3, r1
        self->write_buf = get_new_line_chars(self);
 8016406:	f992 1000 	ldrsb.w	r1, [r2]
 801640a:	f000 0207 	and.w	r2, r0, #7
 801640e:	3203      	adds	r2, #3
 8016410:	428a      	cmp	r2, r1
 8016412:	db02      	blt.n	801641a <process_test_loop+0x8d2>
 8016414:	2900      	cmp	r1, #0
 8016416:	f040 80e9 	bne.w	80165ec <process_test_loop+0xaa4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801641a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801641e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8016420:	08c2      	lsrs	r2, r0, #3
 8016422:	f000 0307 	and.w	r3, r0, #7
 8016426:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801642a:	3303      	adds	r3, #3
 801642c:	f992 2000 	ldrsb.w	r2, [r2]
 8016430:	4293      	cmp	r3, r2
 8016432:	db02      	blt.n	801643a <process_test_loop+0x8f2>
 8016434:	2a00      	cmp	r2, #0
 8016436:	f040 80db 	bne.w	80165f0 <process_test_loop+0xaa8>
        self->write_state_after = state_after;
 801643a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801643e:	2100      	movs	r1, #0
        self->write_state_after = state_after;
 8016440:	08c3      	lsrs	r3, r0, #3
 8016442:	f000 0207 	and.w	r2, r0, #7
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8016446:	63e1      	str	r1, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8016448:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801644c:	f993 3000 	ldrsb.w	r3, [r3]
 8016450:	429a      	cmp	r2, r3
 8016452:	db02      	blt.n	801645a <process_test_loop+0x912>
 8016454:	2b00      	cmp	r3, #0
 8016456:	f040 80c7 	bne.w	80165e8 <process_test_loop+0xaa0>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801645a:	f104 002e 	add.w	r0, r4, #46	; 0x2e
        self->write_state_after = state_after;
 801645e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8016460:	08c3      	lsrs	r3, r0, #3
        self->write_state_after = state_after;
 8016462:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8016466:	f000 0207 	and.w	r2, r0, #7
 801646a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801646e:	f993 3000 	ldrsb.w	r3, [r3]
 8016472:	429a      	cmp	r2, r3
 8016474:	f6ff ae2c 	blt.w	80160d0 <process_test_loop+0x588>
 8016478:	2b00      	cmp	r3, #0
 801647a:	f43f ae29 	beq.w	80160d0 <process_test_loop+0x588>
 801647e:	f7f3 f867 	bl	8009550 <__asan_report_store1>
                return cmd->test(cmd, (uint8_t*)get_atcmd_buf(self), &self->position, get_atcmd_buf_size(self));
 8016482:	f7f3 f879 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 8016486:	f7f3 f877 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801648a:	f7f3 f875 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->cmd;
 801648e:	f7f3 f873 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 8016492:	4620      	mov	r0, r4
 8016494:	f7f3 f870 	bl	8009578 <__asan_report_load4>
                return (struct cat_command*)self->unsolicited_fsm.cmd;
 8016498:	4640      	mov	r0, r8
 801649a:	f7f3 f86d 	bl	8009578 <__asan_report_load4>
                return cmd->test(cmd, (uint8_t*)get_unsolicited_buf(self), &self->unsolicited_fsm.position, get_unsolicited_buf_size(self));
 801649e:	f7f3 f86b 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80164a2:	4620      	mov	r0, r4
 80164a4:	f7f3 f868 	bl	8009578 <__asan_report_load4>
 80164a8:	f7f3 f866 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->unsolicited_buf_size : self->desc->buf_size >> 1;
 80164ac:	f7f3 f864 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.position = 0;
 80164b0:	f7f3 fc3c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80164b4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80164b8:	08c2      	lsrs	r2, r0, #3
 80164ba:	f000 0307 	and.w	r3, r0, #7
 80164be:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80164c2:	3303      	adds	r3, #3
 80164c4:	f992 2000 	ldrsb.w	r2, [r2]
 80164c8:	4293      	cmp	r3, r2
 80164ca:	db02      	blt.n	80164d2 <process_test_loop+0x98a>
 80164cc:	2a00      	cmp	r2, #0
 80164ce:	f040 80a6 	bne.w	801661e <process_test_loop+0xad6>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80164d2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->unsolicited_fsm.position = 0;
 80164d6:	2100      	movs	r1, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80164d8:	08c3      	lsrs	r3, r0, #3
 80164da:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.position = 0;
 80164de:	64e1      	str	r1, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80164e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80164e4:	f993 3000 	ldrsb.w	r3, [r3]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	db02      	blt.n	80164f2 <process_test_loop+0x9aa>
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	f040 8098 	bne.w	8016622 <process_test_loop+0xada>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80164f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80164f6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80164fa:	4b57      	ldr	r3, [pc, #348]	; (8016658 <process_test_loop+0xb10>)
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 80164fc:	08c2      	lsrs	r2, r0, #3
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80164fe:	f081 0101 	eor.w	r1, r1, #1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016502:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016506:	440b      	add	r3, r1
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016508:	f992 1000 	ldrsb.w	r1, [r2]
 801650c:	f000 0207 	and.w	r2, r0, #7
 8016510:	3203      	adds	r2, #3
 8016512:	428a      	cmp	r2, r1
 8016514:	db02      	blt.n	801651c <process_test_loop+0x9d4>
 8016516:	2900      	cmp	r1, #0
 8016518:	f040 8085 	bne.w	8016626 <process_test_loop+0xade>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801651c:	f104 0060 	add.w	r0, r4, #96	; 0x60
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016520:	65e3      	str	r3, [r4, #92]	; 0x5c
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8016522:	08c2      	lsrs	r2, r0, #3
 8016524:	f000 0307 	and.w	r3, r0, #7
 8016528:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801652c:	3303      	adds	r3, #3
 801652e:	f992 2000 	ldrsb.w	r2, [r2]
 8016532:	4293      	cmp	r3, r2
 8016534:	db01      	blt.n	801653a <process_test_loop+0x9f2>
 8016536:	2a00      	cmp	r2, #0
 8016538:	d177      	bne.n	801662a <process_test_loop+0xae2>
        self->unsolicited_fsm.write_state_after = state_after;
 801653a:	f104 0064 	add.w	r0, r4, #100	; 0x64
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801653e:	2100      	movs	r1, #0
        self->unsolicited_fsm.write_state_after = state_after;
 8016540:	08c3      	lsrs	r3, r0, #3
 8016542:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 8016546:	6621      	str	r1, [r4, #96]	; 0x60
        self->unsolicited_fsm.write_state_after = state_after;
 8016548:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801654c:	f993 3000 	ldrsb.w	r3, [r3]
 8016550:	429a      	cmp	r2, r3
 8016552:	db01      	blt.n	8016558 <process_test_loop+0xa10>
 8016554:	2b00      	cmp	r3, #0
 8016556:	d16a      	bne.n	801662e <process_test_loop+0xae6>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8016558:	f104 0044 	add.w	r0, r4, #68	; 0x44
        self->unsolicited_fsm.write_state_after = state_after;
 801655c:	220a      	movs	r2, #10
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 801655e:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.write_state_after = state_after;
 8016560:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 8016564:	f000 0207 	and.w	r2, r0, #7
 8016568:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801656c:	f993 3000 	ldrsb.w	r3, [r3]
 8016570:	429a      	cmp	r2, r3
 8016572:	f6ff aeb4 	blt.w	80162de <process_test_loop+0x796>
 8016576:	2b00      	cmp	r3, #0
 8016578:	f43f aeb1 	beq.w	80162de <process_test_loop+0x796>
 801657c:	f7f2 ffe8 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8016580:	f7f3 fbd4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016584:	f105 000c 	add.w	r0, r5, #12
 8016588:	08c3      	lsrs	r3, r0, #3
 801658a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801658e:	f993 2000 	ldrsb.w	r2, [r3]
 8016592:	f000 0307 	and.w	r3, r0, #7
 8016596:	3303      	adds	r3, #3
 8016598:	4293      	cmp	r3, r2
 801659a:	db00      	blt.n	801659e <process_test_loop+0xa56>
 801659c:	bbba      	cbnz	r2, 801660e <process_test_loop+0xac6>
 801659e:	68ea      	ldr	r2, [r5, #12]
 80165a0:	0852      	lsrs	r2, r2, #1
 80165a2:	e6ff      	b.n	80163a4 <process_test_loop+0x85c>
        assert(self != NULL);
 80165a4:	f7f3 fbc2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80165a8:	f7f3 f802 	bl	80095b0 <__asan_handle_no_return>
 80165ac:	4b2b      	ldr	r3, [pc, #172]	; (801665c <process_test_loop+0xb14>)
 80165ae:	4a2c      	ldr	r2, [pc, #176]	; (8016660 <process_test_loop+0xb18>)
 80165b0:	f640 01ee 	movw	r1, #2286	; 0x8ee
 80165b4:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 80165b8:	f00b fae0 	bl	8021b7c <__assert_func>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80165bc:	f7f2 ffdc 	bl	8009578 <__asan_report_load4>
 80165c0:	f7f2 ffda 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80165c4:	f7f2 ffd8 	bl	8009578 <__asan_report_load4>
        if (self->hold_state_flag == false) {
 80165c8:	f7f2 ffce 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 80165cc:	f7f2 ffd4 	bl	8009578 <__asan_report_load4>
        if (self->hold_state_flag == false) {
 80165d0:	f7f2 ffca 	bl	8009568 <__asan_report_load1>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 80165d4:	f7f2 ffc4 	bl	8009560 <__asan_report_store4>
        self->hold_exit_status = 0;
 80165d8:	f7f2 ffc2 	bl	8009560 <__asan_report_store4>
        self->hold_state_flag = true;
 80165dc:	f7f2 ffb8 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_HOLD;
 80165e0:	f7f2 ffb6 	bl	8009550 <__asan_report_store1>
                self->hold_exit_status = (status == CAT_STATUS_OK) ? 1 : -1;
 80165e4:	f7f2 ffbc 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 80165e8:	f7f2 ffb2 	bl	8009550 <__asan_report_store1>
        self->write_buf = get_new_line_chars(self);
 80165ec:	f7f2 ffb8 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80165f0:	f7f2 ffb6 	bl	8009560 <__asan_report_store4>
        self->length = 0;
 80165f4:	f7f2 ffb4 	bl	8009560 <__asan_report_store4>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80165f8:	f7f2 ffaa 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.position = 0;
 80165fc:	4658      	mov	r0, fp
 80165fe:	f7f2 ffaf 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016602:	f7f2 ffb1 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016606:	f7f2 ffab 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801660a:	f7f2 ffa9 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801660e:	f7f2 ffb3 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_PRINT_CMD;
 8016612:	f7f2 ff9d 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.write_state_after = state_after;
 8016616:	f7f2 ff9b 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE_WAIT;
 801661a:	f7f2 ff99 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.position = 0;
 801661e:	f7f2 ff9f 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8016622:	f7f2 ffa1 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 8016626:	f7f2 ff9b 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_BEFORE;
 801662a:	f7f2 ff99 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.write_state_after = state_after;
 801662e:	f7f2 ff8f 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8016632:	f7f2 ffa1 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 8016636:	4640      	mov	r0, r8
 8016638:	f7f2 ff92 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801663c:	f7f2 ff94 	bl	8009568 <__asan_report_load1>
        self->index = 0;
 8016640:	f7f2 ff8e 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 8016644:	4620      	mov	r0, r4
 8016646:	f7f2 ff97 	bl	8009578 <__asan_report_load4>
 801664a:	f7f2 ff95 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801664e:	f7f2 ff93 	bl	8009578 <__asan_report_load4>
 8016652:	bf00      	nop
 8016654:	24009300 	.word	0x24009300
 8016658:	24009240 	.word	0x24009240
 801665c:	24009180 	.word	0x24009180
 8016660:	2400ab00 	.word	0x2400ab00

08016664 <cat_init>:
{
 8016664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016668:	4682      	mov	sl, r0
 801666a:	b085      	sub	sp, #20
 801666c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016670:	9303      	str	r3, [sp, #12]
        assert(self != NULL);
 8016672:	f7f3 fb5b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016676:	f1ba 0f00 	cmp.w	sl, #0
 801667a:	f000 8221 	beq.w	8016ac0 <cat_init+0x45c>
        assert(desc != NULL);
 801667e:	f7f3 fb55 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	f000 820f 	beq.w	8016aa8 <cat_init+0x444>
        assert(io != NULL);
 801668a:	f7f3 fb4f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801668e:	9b02      	ldr	r3, [sp, #8]
 8016690:	2b00      	cmp	r3, #0
 8016692:	f000 8239 	beq.w	8016b08 <cat_init+0x4a4>
        assert(desc->cmd_group != NULL);
 8016696:	f7f3 fb49 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801669a:	9901      	ldr	r1, [sp, #4]
 801669c:	08cb      	lsrs	r3, r1, #3
 801669e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80166a2:	f993 2000 	ldrsb.w	r2, [r3]
 80166a6:	f001 0307 	and.w	r3, r1, #7
 80166aa:	3303      	adds	r3, #3
 80166ac:	4293      	cmp	r3, r2
 80166ae:	db02      	blt.n	80166b6 <cat_init+0x52>
 80166b0:	2a00      	cmp	r2, #0
 80166b2:	f040 8258 	bne.w	8016b66 <cat_init+0x502>
 80166b6:	9b01      	ldr	r3, [sp, #4]
 80166b8:	681f      	ldr	r7, [r3, #0]
 80166ba:	2f00      	cmp	r7, #0
 80166bc:	f000 81e8 	beq.w	8016a90 <cat_init+0x42c>
        assert(desc->cmd_group_num > 0);
 80166c0:	f7f3 fb34 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80166c4:	9b01      	ldr	r3, [sp, #4]
 80166c6:	1d18      	adds	r0, r3, #4
 80166c8:	08c3      	lsrs	r3, r0, #3
 80166ca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80166ce:	f993 2000 	ldrsb.w	r2, [r3]
 80166d2:	f000 0307 	and.w	r3, r0, #7
 80166d6:	3303      	adds	r3, #3
 80166d8:	4293      	cmp	r3, r2
 80166da:	db02      	blt.n	80166e2 <cat_init+0x7e>
 80166dc:	2a00      	cmp	r2, #0
 80166de:	f040 8240 	bne.w	8016b62 <cat_init+0x4fe>
 80166e2:	9b01      	ldr	r3, [sp, #4]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	f000 81c5 	beq.w	8016a78 <cat_init+0x414>
        self->commands_num = 0;
 80166ee:	f7f3 fb1d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80166f2:	f10a 0020 	add.w	r0, sl, #32
 80166f6:	08c3      	lsrs	r3, r0, #3
 80166f8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80166fc:	f993 2000 	ldrsb.w	r2, [r3]
 8016700:	f000 0307 	and.w	r3, r0, #7
 8016704:	3303      	adds	r3, #3
 8016706:	4293      	cmp	r3, r2
 8016708:	db02      	blt.n	8016710 <cat_init+0xac>
 801670a:	2a00      	cmp	r2, #0
 801670c:	f040 8227 	bne.w	8016b5e <cat_init+0x4fa>
 8016710:	2300      	movs	r3, #0
 8016712:	4698      	mov	r8, r3
        for (i = 0; i < desc->cmd_group_num; i++) {
 8016714:	4699      	mov	r9, r3
        self->commands_num = 0;
 8016716:	f8ca 3020 	str.w	r3, [sl, #32]
                cmd_group = desc->cmd_group[i];
 801671a:	f7f3 fb07 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801671e:	f007 0307 	and.w	r3, r7, #7
 8016722:	08fa      	lsrs	r2, r7, #3
 8016724:	3303      	adds	r3, #3
 8016726:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801672a:	f992 2000 	ldrsb.w	r2, [r2]
 801672e:	4293      	cmp	r3, r2
 8016730:	db02      	blt.n	8016738 <cat_init+0xd4>
 8016732:	2a00      	cmp	r2, #0
 8016734:	f040 8210 	bne.w	8016b58 <cat_init+0x4f4>
 8016738:	f857 4b04 	ldr.w	r4, [r7], #4
                assert(cmd_group->cmd != NULL);
 801673c:	1d20      	adds	r0, r4, #4
 801673e:	08c2      	lsrs	r2, r0, #3
 8016740:	f000 0307 	and.w	r3, r0, #7
 8016744:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016748:	3303      	adds	r3, #3
 801674a:	f992 2000 	ldrsb.w	r2, [r2]
 801674e:	4293      	cmp	r3, r2
 8016750:	db02      	blt.n	8016758 <cat_init+0xf4>
 8016752:	2a00      	cmp	r2, #0
 8016754:	f040 81fe 	bne.w	8016b54 <cat_init+0x4f0>
 8016758:	6866      	ldr	r6, [r4, #4]
 801675a:	2e00      	cmp	r6, #0
 801675c:	f000 81ee 	beq.w	8016b3c <cat_init+0x4d8>
                assert(cmd_group->cmd_num > 0);
 8016760:	f7f3 fae4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016764:	f104 0008 	add.w	r0, r4, #8
 8016768:	08c2      	lsrs	r2, r0, #3
 801676a:	f000 0307 	and.w	r3, r0, #7
 801676e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016772:	3303      	adds	r3, #3
 8016774:	f992 2000 	ldrsb.w	r2, [r2]
 8016778:	4293      	cmp	r3, r2
 801677a:	db02      	blt.n	8016782 <cat_init+0x11e>
 801677c:	2a00      	cmp	r2, #0
 801677e:	f040 81db 	bne.w	8016b38 <cat_init+0x4d4>
 8016782:	68a5      	ldr	r5, [r4, #8]
 8016784:	2d00      	cmp	r5, #0
 8016786:	f000 81a7 	beq.w	8016ad8 <cat_init+0x474>
                self->commands_num += cmd_group->cmd_num;
 801678a:	44a8      	add	r8, r5
 801678c:	4634      	mov	r4, r6
 801678e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016792:	f04f 0b00 	mov.w	fp, #0
 8016796:	f7f3 fac9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801679a:	f8ca 8020 	str.w	r8, [sl, #32]
                        assert(cmd_group->cmd[j].name != NULL);
 801679e:	f7f3 fac5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80167a2:	08e2      	lsrs	r2, r4, #3
 80167a4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80167a8:	f992 1000 	ldrsb.w	r1, [r2]
 80167ac:	f004 0207 	and.w	r2, r4, #7
 80167b0:	3203      	adds	r2, #3
 80167b2:	428a      	cmp	r2, r1
 80167b4:	db02      	blt.n	80167bc <cat_init+0x158>
 80167b6:	2900      	cmp	r1, #0
 80167b8:	f040 814d 	bne.w	8016a56 <cat_init+0x3f2>
 80167bc:	f856 202b 	ldr.w	r2, [r6, fp, lsl #2]
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	f000 814b 	beq.w	8016a5c <cat_init+0x3f8>
                for (j = 0; j < cmd_group->cmd_num; j++)
 80167c6:	f10b 0b09 	add.w	fp, fp, #9
 80167ca:	f7f3 faaf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80167ce:	3424      	adds	r4, #36	; 0x24
 80167d0:	45ab      	cmp	fp, r5
 80167d2:	d1e4      	bne.n	801679e <cat_init+0x13a>
        for (i = 0; i < desc->cmd_group_num; i++) {
 80167d4:	f7f3 faaa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80167d8:	f109 0901 	add.w	r9, r9, #1
 80167dc:	9b00      	ldr	r3, [sp, #0]
 80167de:	454b      	cmp	r3, r9
 80167e0:	d19b      	bne.n	801671a <cat_init+0xb6>
        assert(desc->buf != NULL);
 80167e2:	f7f3 faa3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80167e6:	9b01      	ldr	r3, [sp, #4]
 80167e8:	f103 0008 	add.w	r0, r3, #8
 80167ec:	08c3      	lsrs	r3, r0, #3
 80167ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80167f2:	f993 2000 	ldrsb.w	r2, [r3]
 80167f6:	f000 0307 	and.w	r3, r0, #7
 80167fa:	3303      	adds	r3, #3
 80167fc:	4293      	cmp	r3, r2
 80167fe:	db02      	blt.n	8016806 <cat_init+0x1a2>
 8016800:	2a00      	cmp	r2, #0
 8016802:	f040 8137 	bne.w	8016a74 <cat_init+0x410>
 8016806:	9b01      	ldr	r3, [sp, #4]
 8016808:	689b      	ldr	r3, [r3, #8]
 801680a:	2b00      	cmp	r3, #0
 801680c:	f000 8170 	beq.w	8016af0 <cat_init+0x48c>
        assert(desc->buf_size * 4U >= self->commands_num);
 8016810:	f7f3 fa8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016814:	9b01      	ldr	r3, [sp, #4]
 8016816:	f103 000c 	add.w	r0, r3, #12
 801681a:	08c3      	lsrs	r3, r0, #3
 801681c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016820:	f993 2000 	ldrsb.w	r2, [r3]
 8016824:	f000 0307 	and.w	r3, r0, #7
 8016828:	3303      	adds	r3, #3
 801682a:	4293      	cmp	r3, r2
 801682c:	db02      	blt.n	8016834 <cat_init+0x1d0>
 801682e:	2a00      	cmp	r2, #0
 8016830:	f040 81ba 	bne.w	8016ba8 <cat_init+0x544>
 8016834:	9b01      	ldr	r3, [sp, #4]
 8016836:	68db      	ldr	r3, [r3, #12]
 8016838:	ebb8 0f83 	cmp.w	r8, r3, lsl #2
 801683c:	f200 8170 	bhi.w	8016b20 <cat_init+0x4bc>
        self->desc = desc;
 8016840:	f7f3 fa74 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016844:	4650      	mov	r0, sl
 8016846:	ea4f 03da 	mov.w	r3, sl, lsr #3
 801684a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801684e:	f993 2000 	ldrsb.w	r2, [r3]
 8016852:	f00a 0307 	and.w	r3, sl, #7
 8016856:	3303      	adds	r3, #3
 8016858:	4293      	cmp	r3, r2
 801685a:	db02      	blt.n	8016862 <cat_init+0x1fe>
 801685c:	2a00      	cmp	r2, #0
 801685e:	f040 81a1 	bne.w	8016ba4 <cat_init+0x540>
 8016862:	9b01      	ldr	r3, [sp, #4]
 8016864:	f840 3b04 	str.w	r3, [r0], #4
        self->io = io;
 8016868:	08c3      	lsrs	r3, r0, #3
 801686a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801686e:	f993 2000 	ldrsb.w	r2, [r3]
 8016872:	f000 0307 	and.w	r3, r0, #7
 8016876:	3303      	adds	r3, #3
 8016878:	4293      	cmp	r3, r2
 801687a:	db02      	blt.n	8016882 <cat_init+0x21e>
 801687c:	2a00      	cmp	r2, #0
 801687e:	f040 818f 	bne.w	8016ba0 <cat_init+0x53c>
        self->mutex = mutex;
 8016882:	f10a 0008 	add.w	r0, sl, #8
        self->io = io;
 8016886:	9b02      	ldr	r3, [sp, #8]
        self->mutex = mutex;
 8016888:	08c2      	lsrs	r2, r0, #3
        self->io = io;
 801688a:	f8ca 3004 	str.w	r3, [sl, #4]
        self->mutex = mutex;
 801688e:	f000 0307 	and.w	r3, r0, #7
 8016892:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016896:	3303      	adds	r3, #3
 8016898:	f992 2000 	ldrsb.w	r2, [r2]
 801689c:	4293      	cmp	r3, r2
 801689e:	db02      	blt.n	80168a6 <cat_init+0x242>
 80168a0:	2a00      	cmp	r2, #0
 80168a2:	f040 817b 	bne.w	8016b9c <cat_init+0x538>
        self->hold_state_flag = false;
 80168a6:	f10a 0030 	add.w	r0, sl, #48	; 0x30
        self->mutex = mutex;
 80168aa:	9b03      	ldr	r3, [sp, #12]
 80168ac:	f8ca 3008 	str.w	r3, [sl, #8]
        self->hold_state_flag = false;
 80168b0:	08c3      	lsrs	r3, r0, #3
 80168b2:	f000 0207 	and.w	r2, r0, #7
 80168b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80168ba:	f993 3000 	ldrsb.w	r3, [r3]
 80168be:	429a      	cmp	r2, r3
 80168c0:	db02      	blt.n	80168c8 <cat_init+0x264>
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	f040 8168 	bne.w	8016b98 <cat_init+0x534>
        self->hold_exit_status = 0;
 80168c8:	f10a 0034 	add.w	r0, sl, #52	; 0x34
        self->hold_state_flag = false;
 80168cc:	2100      	movs	r1, #0
        self->hold_exit_status = 0;
 80168ce:	08c2      	lsrs	r2, r0, #3
 80168d0:	f000 0307 	and.w	r3, r0, #7
        self->hold_state_flag = false;
 80168d4:	f88a 1030 	strb.w	r1, [sl, #48]	; 0x30
        self->hold_exit_status = 0;
 80168d8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80168dc:	3303      	adds	r3, #3
 80168de:	f992 2000 	ldrsb.w	r2, [r2]
 80168e2:	4293      	cmp	r3, r2
 80168e4:	db02      	blt.n	80168ec <cat_init+0x288>
 80168e6:	2a00      	cmp	r2, #0
 80168e8:	f040 8154 	bne.w	8016b94 <cat_init+0x530>
                self->state = CAT_STATE_IDLE;
 80168ec:	f10a 002e 	add.w	r0, sl, #46	; 0x2e
        self->hold_exit_status = 0;
 80168f0:	2100      	movs	r1, #0
                self->state = CAT_STATE_IDLE;
 80168f2:	08c3      	lsrs	r3, r0, #3
 80168f4:	f000 0207 	and.w	r2, r0, #7
        self->hold_exit_status = 0;
 80168f8:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
                self->state = CAT_STATE_IDLE;
 80168fc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016900:	f993 3000 	ldrsb.w	r3, [r3]
 8016904:	429a      	cmp	r2, r3
 8016906:	db02      	blt.n	801690e <cat_init+0x2aa>
 8016908:	2b00      	cmp	r3, #0
 801690a:	f040 8141 	bne.w	8016b90 <cat_init+0x52c>
                self->cr_flag = false;
 801690e:	f10a 002f 	add.w	r0, sl, #47	; 0x2f
                self->state = CAT_STATE_IDLE;
 8016912:	2200      	movs	r2, #0
                self->cr_flag = false;
 8016914:	08c3      	lsrs	r3, r0, #3
                self->state = CAT_STATE_IDLE;
 8016916:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
                self->cr_flag = false;
 801691a:	f000 0207 	and.w	r2, r0, #7
 801691e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016922:	f993 3000 	ldrsb.w	r3, [r3]
 8016926:	429a      	cmp	r2, r3
 8016928:	db02      	blt.n	8016930 <cat_init+0x2cc>
 801692a:	2b00      	cmp	r3, #0
 801692c:	f040 812e 	bne.w	8016b8c <cat_init+0x528>
        self->cmd = NULL;
 8016930:	f10a 0024 	add.w	r0, sl, #36	; 0x24
                self->cr_flag = false;
 8016934:	2100      	movs	r1, #0
        self->cmd = NULL;
 8016936:	08c2      	lsrs	r2, r0, #3
 8016938:	f000 0307 	and.w	r3, r0, #7
                self->cr_flag = false;
 801693c:	f88a 102f 	strb.w	r1, [sl, #47]	; 0x2f
        self->cmd = NULL;
 8016940:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8016944:	3303      	adds	r3, #3
 8016946:	f992 2000 	ldrsb.w	r2, [r2]
 801694a:	4293      	cmp	r3, r2
 801694c:	db02      	blt.n	8016954 <cat_init+0x2f0>
 801694e:	2a00      	cmp	r2, #0
 8016950:	f040 811a 	bne.w	8016b88 <cat_init+0x524>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016954:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
        self->cmd = NULL;
 8016958:	2100      	movs	r1, #0
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801695a:	08c3      	lsrs	r3, r0, #3
 801695c:	f000 0207 	and.w	r2, r0, #7
        self->cmd = NULL;
 8016960:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016964:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016968:	f993 3000 	ldrsb.w	r3, [r3]
 801696c:	429a      	cmp	r2, r3
 801696e:	db02      	blt.n	8016976 <cat_init+0x312>
 8016970:	2b00      	cmp	r3, #0
 8016972:	f040 8107 	bne.w	8016b84 <cat_init+0x520>
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 8016976:	f10a 0070 	add.w	r0, sl, #112	; 0x70
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801697a:	21ff      	movs	r1, #255	; 0xff
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 801697c:	08c2      	lsrs	r2, r0, #3
 801697e:	f000 0307 	and.w	r3, r0, #7
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016982:	f88a 102c 	strb.w	r1, [sl, #44]	; 0x2c
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 8016986:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801698a:	3303      	adds	r3, #3
 801698c:	f992 2000 	ldrsb.w	r2, [r2]
 8016990:	4293      	cmp	r3, r2
 8016992:	db02      	blt.n	801699a <cat_init+0x336>
 8016994:	2a00      	cmp	r2, #0
 8016996:	f040 80f3 	bne.w	8016b80 <cat_init+0x51c>
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 801699a:	f10a 0074 	add.w	r0, sl, #116	; 0x74
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 801699e:	2100      	movs	r1, #0
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 80169a0:	08c2      	lsrs	r2, r0, #3
 80169a2:	f000 0307 	and.w	r3, r0, #7
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 80169a6:	f8ca 1070 	str.w	r1, [sl, #112]	; 0x70
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 80169aa:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80169ae:	3303      	adds	r3, #3
 80169b0:	f992 2000 	ldrsb.w	r2, [r2]
 80169b4:	4293      	cmp	r3, r2
 80169b6:	db02      	blt.n	80169be <cat_init+0x35a>
 80169b8:	2a00      	cmp	r2, #0
 80169ba:	f040 80df 	bne.w	8016b7c <cat_init+0x518>
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 80169be:	f10a 0078 	add.w	r0, sl, #120	; 0x78
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 80169c2:	2100      	movs	r1, #0
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 80169c4:	08c2      	lsrs	r2, r0, #3
 80169c6:	f000 0307 	and.w	r3, r0, #7
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 80169ca:	f8ca 1074 	str.w	r1, [sl, #116]	; 0x74
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 80169ce:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80169d2:	3303      	adds	r3, #3
 80169d4:	f992 2000 	ldrsb.w	r2, [r2]
 80169d8:	4293      	cmp	r3, r2
 80169da:	db02      	blt.n	80169e2 <cat_init+0x37e>
 80169dc:	2a00      	cmp	r2, #0
 80169de:	f040 80cb 	bne.w	8016b78 <cat_init+0x514>
        self->unsolicited_fsm.cmd = NULL;
 80169e2:	f10a 0050 	add.w	r0, sl, #80	; 0x50
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 80169e6:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd = NULL;
 80169e8:	08c2      	lsrs	r2, r0, #3
 80169ea:	f000 0307 	and.w	r3, r0, #7
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 80169ee:	f8ca 1078 	str.w	r1, [sl, #120]	; 0x78
        self->unsolicited_fsm.cmd = NULL;
 80169f2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80169f6:	3303      	adds	r3, #3
 80169f8:	f992 2000 	ldrsb.w	r2, [r2]
 80169fc:	4293      	cmp	r3, r2
 80169fe:	db02      	blt.n	8016a06 <cat_init+0x3a2>
 8016a00:	2a00      	cmp	r2, #0
 8016a02:	f040 80b7 	bne.w	8016b74 <cat_init+0x510>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016a06:	f10a 0058 	add.w	r0, sl, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 8016a0a:	2100      	movs	r1, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016a0c:	08c3      	lsrs	r3, r0, #3
 8016a0e:	f000 0207 	and.w	r2, r0, #7
        self->unsolicited_fsm.cmd = NULL;
 8016a12:	f8ca 1050 	str.w	r1, [sl, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016a16:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	db02      	blt.n	8016a28 <cat_init+0x3c4>
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	f040 80a4 	bne.w	8016b70 <cat_init+0x50c>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016a28:	f10a 0044 	add.w	r0, sl, #68	; 0x44
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016a2c:	22ff      	movs	r2, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016a2e:	08c3      	lsrs	r3, r0, #3
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016a30:	f88a 2058 	strb.w	r2, [sl, #88]	; 0x58
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016a34:	f000 0207 	and.w	r2, r0, #7
 8016a38:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	db02      	blt.n	8016a4a <cat_init+0x3e6>
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	f040 8091 	bne.w	8016b6c <cat_init+0x508>
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	f88a 3044 	strb.w	r3, [sl, #68]	; 0x44
}
 8016a50:	b005      	add	sp, #20
 8016a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        assert(cmd_group->cmd[j].name != NULL);
 8016a56:	4620      	mov	r0, r4
 8016a58:	f7f2 fd8e 	bl	8009578 <__asan_report_load4>
 8016a5c:	f7f3 f966 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016a60:	f7f2 fda6 	bl	80095b0 <__asan_handle_no_return>
 8016a64:	4b51      	ldr	r3, [pc, #324]	; (8016bac <cat_init+0x548>)
 8016a66:	4a52      	ldr	r2, [pc, #328]	; (8016bb0 <cat_init+0x54c>)
 8016a68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016a6c:	f5a3 603e 	sub.w	r0, r3, #3040	; 0xbe0
 8016a70:	f00b f884 	bl	8021b7c <__assert_func>
        assert(desc->buf != NULL);
 8016a74:	f7f2 fd80 	bl	8009578 <__asan_report_load4>
        assert(desc->cmd_group_num > 0);
 8016a78:	f7f3 f958 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016a7c:	f7f2 fd98 	bl	80095b0 <__asan_handle_no_return>
 8016a80:	4b4c      	ldr	r3, [pc, #304]	; (8016bb4 <cat_init+0x550>)
 8016a82:	4a4b      	ldr	r2, [pc, #300]	; (8016bb0 <cat_init+0x54c>)
 8016a84:	f240 11cd 	movw	r1, #461	; 0x1cd
 8016a88:	f5a3 6032 	sub.w	r0, r3, #2848	; 0xb20
 8016a8c:	f00b f876 	bl	8021b7c <__assert_func>
        assert(desc->cmd_group != NULL);
 8016a90:	f7f3 f94c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016a94:	f7f2 fd8c 	bl	80095b0 <__asan_handle_no_return>
 8016a98:	4b47      	ldr	r3, [pc, #284]	; (8016bb8 <cat_init+0x554>)
 8016a9a:	4a45      	ldr	r2, [pc, #276]	; (8016bb0 <cat_init+0x54c>)
 8016a9c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8016aa0:	f5a3 602e 	sub.w	r0, r3, #2784	; 0xae0
 8016aa4:	f00b f86a 	bl	8021b7c <__assert_func>
        assert(desc != NULL);
 8016aa8:	f7f3 f940 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016aac:	f7f2 fd80 	bl	80095b0 <__asan_handle_no_return>
 8016ab0:	4b42      	ldr	r3, [pc, #264]	; (8016bbc <cat_init+0x558>)
 8016ab2:	4a3f      	ldr	r2, [pc, #252]	; (8016bb0 <cat_init+0x54c>)
 8016ab4:	f240 11c9 	movw	r1, #457	; 0x1c9
 8016ab8:	f5a3 6026 	sub.w	r0, r3, #2656	; 0xa60
 8016abc:	f00b f85e 	bl	8021b7c <__assert_func>
        assert(self != NULL);
 8016ac0:	f7f3 f934 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016ac4:	f7f2 fd74 	bl	80095b0 <__asan_handle_no_return>
 8016ac8:	4b3d      	ldr	r3, [pc, #244]	; (8016bc0 <cat_init+0x55c>)
 8016aca:	4a39      	ldr	r2, [pc, #228]	; (8016bb0 <cat_init+0x54c>)
 8016acc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8016ad0:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 8016ad4:	f00b f852 	bl	8021b7c <__assert_func>
                assert(cmd_group->cmd_num > 0);
 8016ad8:	f7f3 f928 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016adc:	f7f2 fd68 	bl	80095b0 <__asan_handle_no_return>
 8016ae0:	4b38      	ldr	r3, [pc, #224]	; (8016bc4 <cat_init+0x560>)
 8016ae2:	4a33      	ldr	r2, [pc, #204]	; (8016bb0 <cat_init+0x54c>)
 8016ae4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8016ae8:	f5a3 603a 	sub.w	r0, r3, #2976	; 0xba0
 8016aec:	f00b f846 	bl	8021b7c <__assert_func>
        assert(desc->buf != NULL);
 8016af0:	f7f3 f91c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016af4:	f7f2 fd5c 	bl	80095b0 <__asan_handle_no_return>
 8016af8:	4b33      	ldr	r3, [pc, #204]	; (8016bc8 <cat_init+0x564>)
 8016afa:	4a2d      	ldr	r2, [pc, #180]	; (8016bb0 <cat_init+0x54c>)
 8016afc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8016b00:	f5a3 6042 	sub.w	r0, r3, #3104	; 0xc20
 8016b04:	f00b f83a 	bl	8021b7c <__assert_func>
        assert(io != NULL);
 8016b08:	f7f3 f910 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016b0c:	f7f2 fd50 	bl	80095b0 <__asan_handle_no_return>
 8016b10:	4b2e      	ldr	r3, [pc, #184]	; (8016bcc <cat_init+0x568>)
 8016b12:	4a27      	ldr	r2, [pc, #156]	; (8016bb0 <cat_init+0x54c>)
 8016b14:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8016b18:	f5a3 602a 	sub.w	r0, r3, #2720	; 0xaa0
 8016b1c:	f00b f82e 	bl	8021b7c <__assert_func>
        assert(desc->buf_size * 4U >= self->commands_num);
 8016b20:	f7f3 f904 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016b24:	f7f2 fd44 	bl	80095b0 <__asan_handle_no_return>
 8016b28:	4b29      	ldr	r3, [pc, #164]	; (8016bd0 <cat_init+0x56c>)
 8016b2a:	4a21      	ldr	r2, [pc, #132]	; (8016bb0 <cat_init+0x54c>)
 8016b2c:	f240 11dd 	movw	r1, #477	; 0x1dd
 8016b30:	f5a3 6046 	sub.w	r0, r3, #3168	; 0xc60
 8016b34:	f00b f822 	bl	8021b7c <__assert_func>
                assert(cmd_group->cmd_num > 0);
 8016b38:	f7f2 fd1e 	bl	8009578 <__asan_report_load4>
                assert(cmd_group->cmd != NULL);
 8016b3c:	f7f3 f8f6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016b40:	f7f2 fd36 	bl	80095b0 <__asan_handle_no_return>
 8016b44:	4b23      	ldr	r3, [pc, #140]	; (8016bd4 <cat_init+0x570>)
 8016b46:	4a1a      	ldr	r2, [pc, #104]	; (8016bb0 <cat_init+0x54c>)
 8016b48:	f240 11d3 	movw	r1, #467	; 0x1d3
 8016b4c:	f5a3 6036 	sub.w	r0, r3, #2912	; 0xb60
 8016b50:	f00b f814 	bl	8021b7c <__assert_func>
 8016b54:	f7f2 fd10 	bl	8009578 <__asan_report_load4>
                cmd_group = desc->cmd_group[i];
 8016b58:	4638      	mov	r0, r7
 8016b5a:	f7f2 fd0d 	bl	8009578 <__asan_report_load4>
        self->commands_num = 0;
 8016b5e:	f7f2 fcff 	bl	8009560 <__asan_report_store4>
        assert(desc->cmd_group_num > 0);
 8016b62:	f7f2 fd09 	bl	8009578 <__asan_report_load4>
        assert(desc->cmd_group != NULL);
 8016b66:	4608      	mov	r0, r1
 8016b68:	f7f2 fd06 	bl	8009578 <__asan_report_load4>
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016b6c:	f7f2 fcf0 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016b70:	f7f2 fcee 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.cmd = NULL;
 8016b74:	f7f2 fcf4 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count = 0;
 8016b78:	f7f2 fcf2 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 8016b7c:	f7f2 fcf0 	bl	8009560 <__asan_report_store4>
        self->unsolicited_fsm.unsolicited_cmd_buffer_tail = 0;
 8016b80:	f7f2 fcee 	bl	8009560 <__asan_report_store4>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8016b84:	f7f2 fce4 	bl	8009550 <__asan_report_store1>
        self->cmd = NULL;
 8016b88:	f7f2 fcea 	bl	8009560 <__asan_report_store4>
                self->cr_flag = false;
 8016b8c:	f7f2 fce0 	bl	8009550 <__asan_report_store1>
                self->state = CAT_STATE_IDLE;
 8016b90:	f7f2 fcde 	bl	8009550 <__asan_report_store1>
        self->hold_exit_status = 0;
 8016b94:	f7f2 fce4 	bl	8009560 <__asan_report_store4>
        self->hold_state_flag = false;
 8016b98:	f7f2 fcda 	bl	8009550 <__asan_report_store1>
        self->mutex = mutex;
 8016b9c:	f7f2 fce0 	bl	8009560 <__asan_report_store4>
        self->io = io;
 8016ba0:	f7f2 fcde 	bl	8009560 <__asan_report_store4>
        self->desc = desc;
 8016ba4:	f7f2 fcdc 	bl	8009560 <__asan_report_store4>
        assert(desc->buf_size * 4U >= self->commands_num);
 8016ba8:	f7f2 fce6 	bl	8009578 <__asan_report_load4>
 8016bac:	24009d00 	.word	0x24009d00
 8016bb0:	2400a920 	.word	0x2400a920
 8016bb4:	24009c40 	.word	0x24009c40
 8016bb8:	24009c00 	.word	0x24009c00
 8016bbc:	24009b80 	.word	0x24009b80
 8016bc0:	24009180 	.word	0x24009180
 8016bc4:	24009cc0 	.word	0x24009cc0
 8016bc8:	24009d40 	.word	0x24009d40
 8016bcc:	24009bc0 	.word	0x24009bc0
 8016bd0:	24009d80 	.word	0x24009d80
 8016bd4:	24009c80 	.word	0x24009c80

08016bd8 <cat_service>:
{
        return (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_IDLE);
}

cat_status cat_service(struct cat_object *self)
{
 8016bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bdc:	4604      	mov	r4, r0
 8016bde:	ed2d 8b02 	vpush	{d8}
 8016be2:	b095      	sub	sp, #84	; 0x54
        cat_status s;
        cat_status unsolicited_stat;

        assert(self != NULL);
 8016be4:	f7f3 f8a2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016be8:	2c00      	cmp	r4, #0
 8016bea:	f008 805c 	beq.w	801eca6 <cat_service+0x80ce>

        if ((self->mutex != NULL) && (self->mutex->lock() != 0))
 8016bee:	f104 0808 	add.w	r8, r4, #8
 8016bf2:	f7f3 f89b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016bf6:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
 8016bfa:	f008 0b07 	and.w	fp, r8, #7
 8016bfe:	f10a 53dc 	add.w	r3, sl, #461373440	; 0x1b800000
 8016c02:	f10b 0203 	add.w	r2, fp, #3
 8016c06:	f993 3000 	ldrsb.w	r3, [r3]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	db02      	blt.n	8016c14 <cat_service+0x3c>
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f043 8258 	bne.w	801a0c4 <cat_service+0x34ec>
 8016c14:	68a5      	ldr	r5, [r4, #8]
 8016c16:	b19d      	cbz	r5, 8016c40 <cat_service+0x68>
 8016c18:	f7f3 f888 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016c1c:	08eb      	lsrs	r3, r5, #3
 8016c1e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016c22:	f993 2000 	ldrsb.w	r2, [r3]
 8016c26:	f005 0307 	and.w	r3, r5, #7
 8016c2a:	3303      	adds	r3, #3
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	db02      	blt.n	8016c36 <cat_service+0x5e>
 8016c30:	2a00      	cmp	r2, #0
 8016c32:	f043 824a 	bne.w	801a0ca <cat_service+0x34f2>
 8016c36:	682b      	ldr	r3, [r5, #0]
 8016c38:	4798      	blx	r3
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	f044 81fe 	bne.w	801b03c <cat_service+0x4464>
        switch (self->unsolicited_fsm.state) {
 8016c40:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8016c44:	f7f3 f872 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016c48:	08fb      	lsrs	r3, r7, #3
 8016c4a:	f007 0207 	and.w	r2, r7, #7
 8016c4e:	9303      	str	r3, [sp, #12]
 8016c50:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016c54:	9202      	str	r2, [sp, #8]
 8016c56:	f993 3000 	ldrsb.w	r3, [r3]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	db02      	blt.n	8016c64 <cat_service+0x8c>
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	f043 822d 	bne.w	801a0be <cat_service+0x34e6>
 8016c64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016c68:	2b0a      	cmp	r3, #10
 8016c6a:	f209 8094 	bhi.w	801fd96 <cat_service+0x91be>
 8016c6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016c72:	010d      	.short	0x010d
 8016c74:	00fd0066 	.word	0x00fd0066
 8016c78:	010500c5 	.word	0x010500c5
 8016c7c:	00b3009f 	.word	0x00b3009f
 8016c80:	000b000b 	.word	0x000b000b
 8016c84:	00cd00e5 	.word	0x00cd00e5
        self->unsolicited_fsm.cmd = NULL;
 8016c88:	f7f3 f850 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016c90:	08c3      	lsrs	r3, r0, #3
 8016c92:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016c96:	f993 2000 	ldrsb.w	r2, [r3]
 8016c9a:	f000 0307 	and.w	r3, r0, #7
 8016c9e:	3303      	adds	r3, #3
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	db02      	blt.n	8016caa <cat_service+0xd2>
 8016ca4:	2a00      	cmp	r2, #0
 8016ca6:	f048 814f 	bne.w	801ef48 <cat_service+0x8370>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.cmd = NULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	6523      	str	r3, [r4, #80]	; 0x50
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016cb2:	08c3      	lsrs	r3, r0, #3
 8016cb4:	f000 0207 	and.w	r2, r0, #7
 8016cb8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	db02      	blt.n	8016cca <cat_service+0xf2>
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f048 813d 	bne.w	801ef44 <cat_service+0x836c>
                return CAT_STATUS_ERROR_MUTEX_LOCK;

        unsolicited_stat = unsolicited_events_service(self);

        switch (self->state) {
 8016cca:	f104 062e 	add.w	r6, r4, #46	; 0x2e
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016cce:	23ff      	movs	r3, #255	; 0xff
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016cd0:	2200      	movs	r2, #0
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 8016cd2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        switch (self->state) {
 8016cd6:	08f3      	lsrs	r3, r6, #3
        self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_IDLE;
 8016cd8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        switch (self->state) {
 8016cdc:	f006 0207 	and.w	r2, r6, #7
 8016ce0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	db02      	blt.n	8016cf2 <cat_service+0x11a>
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f048 8126 	bne.w	801ef3e <cat_service+0x8366>
 8016cf2:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8016cf6:	9301      	str	r3, [sp, #4]
 8016cf8:	f7f3 f818 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016cfc:	9b01      	ldr	r3, [sp, #4]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	2b19      	cmp	r3, #25
 8016d02:	f200 8275 	bhi.w	80171f0 <cat_service+0x618>
 8016d06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016d0a:	0d0c      	.short	0x0d0c
 8016d0c:	02bc03a0 	.word	0x02bc03a0
 8016d10:	07710325 	.word	0x07710325
 8016d14:	08a30704 	.word	0x08a30704
 8016d18:	0932062d 	.word	0x0932062d
 8016d1c:	05380569 	.word	0x05380569
 8016d20:	0b8d052e 	.word	0x0b8d052e
 8016d24:	0b0f0b82 	.word	0x0b0f0b82
 8016d28:	0c280afd 	.word	0x0c280afd
 8016d2c:	0a160bf6 	.word	0x0a160bf6
 8016d30:	01ef09ee 	.word	0x01ef09ee
 8016d34:	0473040b 	.word	0x0473040b
 8016d38:	0d010469 	.word	0x0d010469
 8016d3c:	0c33      	.short	0x0c33
                s = format_read_args(self, CAT_FSM_TYPE_UNSOLICITED);
 8016d3e:	f7f2 fff5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016d42:	2101      	movs	r1, #1
 8016d44:	4620      	mov	r0, r4
 8016d46:	f7fc fcf1 	bl	801372c <format_read_args>
 8016d4a:	9001      	str	r0, [sp, #4]
        switch (self->state) {
 8016d4c:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 8016d50:	f7f2 ffec 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016d54:	08f3      	lsrs	r3, r6, #3
 8016d56:	f006 0207 	and.w	r2, r6, #7
 8016d5a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	db02      	blt.n	8016d6c <cat_service+0x194>
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	f048 80d9 	bne.w	801ef1e <cat_service+0x8346>
 8016d6c:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8016d70:	3301      	adds	r3, #1
 8016d72:	2b19      	cmp	r3, #25
 8016d74:	f209 8013 	bhi.w	801fd9e <cat_service+0x91c6>
 8016d78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016d7c:	03690cd5 	.word	0x03690cd5
 8016d80:	02ee0283 	.word	0x02ee0283
 8016d84:	06cd073a 	.word	0x06cd073a
 8016d88:	05f6086c 	.word	0x05f6086c
 8016d8c:	053208fb 	.word	0x053208fb
 8016d90:	04f70501 	.word	0x04f70501
 8016d94:	0b4b0b56 	.word	0x0b4b0b56
 8016d98:	0ac60ad8 	.word	0x0ac60ad8
 8016d9c:	0bbf0bf1 	.word	0x0bbf0bf1
 8016da0:	09b709df 	.word	0x09b709df
 8016da4:	03d401b8 	.word	0x03d401b8
 8016da8:	0432043c 	.word	0x0432043c
 8016dac:	0bfc0cca 	.word	0x0bfc0cca
        if (self->state != CAT_STATE_FLUSH_IO_WRITE)
 8016db0:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 8016db4:	f7f2 ffba 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016db8:	08f3      	lsrs	r3, r6, #3
 8016dba:	f006 0207 	and.w	r2, r6, #7
 8016dbe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	f2c0 80ab 	blt.w	8016f22 <cat_service+0x34a>
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 80a8 	beq.w	8016f22 <cat_service+0x34a>
 8016dd2:	4630      	mov	r0, r6
 8016dd4:	f7f2 fbc8 	bl	8009568 <__asan_report_load1>
        char ch = self->unsolicited_fsm.write_buf[self->unsolicited_fsm.position];
 8016dd8:	f7f2 ffa8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016de0:	08c3      	lsrs	r3, r0, #3
 8016de2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016de6:	f993 2000 	ldrsb.w	r2, [r3]
 8016dea:	f000 0307 	and.w	r3, r0, #7
 8016dee:	3303      	adds	r3, #3
 8016df0:	4293      	cmp	r3, r2
 8016df2:	db5d      	blt.n	8016eb0 <cat_service+0x2d8>
 8016df4:	2a00      	cmp	r2, #0
 8016df6:	d05b      	beq.n	8016eb0 <cat_service+0x2d8>
 8016df8:	f7f2 fbbe 	bl	8009578 <__asan_report_load4>
                s = process_read_loop(self, CAT_FSM_TYPE_UNSOLICITED);
 8016dfc:	f7f2 ff96 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e00:	2101      	movs	r1, #1
 8016e02:	4620      	mov	r0, r4
 8016e04:	f7fe f98c 	bl	8015120 <process_read_loop>
 8016e08:	9001      	str	r0, [sp, #4]
                break;
 8016e0a:	e79f      	b.n	8016d4c <cat_service+0x174>
        switch (self->state) {
 8016e0c:	f104 062e 	add.w	r6, r4, #46	; 0x2e
                start_processing_format_test_args(self, CAT_FSM_TYPE_UNSOLICITED);
 8016e10:	f7f2 ff8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e14:	2101      	movs	r1, #1
 8016e16:	4620      	mov	r0, r4
 8016e18:	f7fc fb52 	bl	80134c0 <start_processing_format_test_args>
        switch (self->state) {
 8016e1c:	f006 0207 	and.w	r2, r6, #7
 8016e20:	08f3      	lsrs	r3, r6, #3
 8016e22:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016e26:	f993 3000 	ldrsb.w	r3, [r3]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	f6ff af61 	blt.w	8016cf2 <cat_service+0x11a>
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	f43f af5e 	beq.w	8016cf2 <cat_service+0x11a>
 8016e36:	4630      	mov	r0, r6
 8016e38:	f7f2 fb96 	bl	8009568 <__asan_report_load1>
 8016e3c:	f104 062e 	add.w	r6, r4, #46	; 0x2e
                start_processing_format_read_args(self, CAT_FSM_TYPE_UNSOLICITED);
 8016e40:	f7f2 ff74 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e44:	2101      	movs	r1, #1
 8016e46:	4620      	mov	r0, r4
 8016e48:	f7fc f990 	bl	801316c <start_processing_format_read_args>
        switch (self->state) {
 8016e4c:	f006 0207 	and.w	r2, r6, #7
 8016e50:	08f3      	lsrs	r3, r6, #3
 8016e52:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016e56:	f993 3000 	ldrsb.w	r3, [r3]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	f6ff af49 	blt.w	8016cf2 <cat_service+0x11a>
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	f43f af46 	beq.w	8016cf2 <cat_service+0x11a>
 8016e66:	4630      	mov	r0, r6
 8016e68:	f7f2 fb7e 	bl	8009568 <__asan_report_load1>
                s = format_test_args(self, CAT_FSM_TYPE_UNSOLICITED);
 8016e6c:	f7f2 ff5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e70:	2101      	movs	r1, #1
 8016e72:	4620      	mov	r0, r4
 8016e74:	f7fd fecc 	bl	8014c10 <format_test_args>
 8016e78:	9001      	str	r0, [sp, #4]
                break;
 8016e7a:	e767      	b.n	8016d4c <cat_service+0x174>
                s = process_test_loop(self, CAT_FSM_TYPE_UNSOLICITED);
 8016e7c:	f7f2 ff56 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e80:	2101      	movs	r1, #1
 8016e82:	4620      	mov	r0, r4
 8016e84:	f7fe fe60 	bl	8015b48 <process_test_loop>
 8016e88:	9001      	str	r0, [sp, #4]
                break;
 8016e8a:	e75f      	b.n	8016d4c <cat_service+0x174>
        return (self->unsolicited_fsm.unsolicited_cmd_buffer_items_count == 0) ? true : false;
 8016e8c:	f7f2 ff4e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016e90:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016e94:	08c3      	lsrs	r3, r0, #3
 8016e96:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016e9a:	f993 2000 	ldrsb.w	r2, [r3]
 8016e9e:	f000 0307 	and.w	r3, r0, #7
 8016ea2:	3303      	adds	r3, #3
 8016ea4:	4293      	cmp	r3, r2
 8016ea6:	db48      	blt.n	8016f3a <cat_service+0x362>
 8016ea8:	2a00      	cmp	r2, #0
 8016eaa:	d046      	beq.n	8016f3a <cat_service+0x362>
 8016eac:	f7f2 fb64 	bl	8009578 <__asan_report_load4>
        char ch = self->unsolicited_fsm.write_buf[self->unsolicited_fsm.position];
 8016eb0:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8016eb4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016eb6:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8016eba:	f005 0607 	and.w	r6, r5, #7
 8016ebe:	f109 53dc 	add.w	r3, r9, #461373440	; 0x1b800000
 8016ec2:	1cf1      	adds	r1, r6, #3
 8016ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8016ec8:	4299      	cmp	r1, r3
 8016eca:	db03      	blt.n	8016ed4 <cat_service+0x2fc>
 8016ecc:	b113      	cbz	r3, 8016ed4 <cat_service+0x2fc>
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f7f2 fb52 	bl	8009578 <__asan_report_load4>
 8016ed4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016ed6:	1850      	adds	r0, r2, r1
 8016ed8:	08c3      	lsrs	r3, r0, #3
 8016eda:	f000 0c07 	and.w	ip, r0, #7
 8016ede:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8016ee6:	459c      	cmp	ip, r3
 8016ee8:	db02      	blt.n	8016ef0 <cat_service+0x318>
 8016eea:	b10b      	cbz	r3, 8016ef0 <cat_service+0x318>
 8016eec:	f7f2 fb3c 	bl	8009568 <__asan_report_load1>
 8016ef0:	5c51      	ldrb	r1, [r2, r1]
        if (ch == '\0') {
 8016ef2:	2900      	cmp	r1, #0
 8016ef4:	f003 811b 	beq.w	801a12e <cat_service+0x3556>
        if (self->io->write(ch) != 1)
 8016ef8:	9101      	str	r1, [sp, #4]
 8016efa:	f7f2 ff17 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016efe:	1d20      	adds	r0, r4, #4
 8016f00:	9901      	ldr	r1, [sp, #4]
 8016f02:	08c3      	lsrs	r3, r0, #3
 8016f04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016f08:	f993 2000 	ldrsb.w	r2, [r3]
 8016f0c:	f000 0307 	and.w	r3, r0, #7
 8016f10:	3303      	adds	r3, #3
 8016f12:	4293      	cmp	r3, r2
 8016f14:	f2c0 80b3 	blt.w	801707e <cat_service+0x4a6>
 8016f18:	2a00      	cmp	r2, #0
 8016f1a:	f000 80b0 	beq.w	801707e <cat_service+0x4a6>
 8016f1e:	f7f2 fb2b 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_FLUSH_IO_WRITE)
 8016f22:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8016f26:	2b13      	cmp	r3, #19
 8016f28:	9301      	str	r3, [sp, #4]
 8016f2a:	f000 80dd 	beq.w	80170e8 <cat_service+0x510>
                self->unsolicited_fsm.state = CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE;
 8016f2e:	f7f2 fefd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016f32:	2306      	movs	r3, #6
 8016f34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016f38:	e6de      	b.n	8016cf8 <cat_service+0x120>
        return (self->unsolicited_fsm.unsolicited_cmd_buffer_items_count == 0) ? true : false;
 8016f3a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
        if (is_unsolicited_buffer_empty(self) != false)
 8016f3c:	2d00      	cmp	r5, #0
 8016f3e:	f007 82d8 	beq.w	801e4f2 <cat_service+0x791a>
        item = &self->unsolicited_fsm.unsolicited_cmd_buffer[self->unsolicited_fsm.unsolicited_cmd_buffer_head];
 8016f42:	f7f2 fef3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016f46:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8016f4a:	08c3      	lsrs	r3, r0, #3
 8016f4c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016f50:	f993 2000 	ldrsb.w	r2, [r3]
 8016f54:	f000 0307 	and.w	r3, r0, #7
 8016f58:	3303      	adds	r3, #3
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	db02      	blt.n	8016f64 <cat_service+0x38c>
 8016f5e:	b10a      	cbz	r2, 8016f64 <cat_service+0x38c>
 8016f60:	f7f2 fb0a 	bl	8009578 <__asan_report_load4>
 8016f64:	6f62      	ldr	r2, [r4, #116]	; 0x74
        *cmd = item->cmd;
 8016f66:	f102 030c 	add.w	r3, r2, #12
 8016f6a:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 8016f6e:	3008      	adds	r0, #8
 8016f70:	08c1      	lsrs	r1, r0, #3
 8016f72:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8016f76:	f991 6000 	ldrsb.w	r6, [r1]
 8016f7a:	f000 0107 	and.w	r1, r0, #7
 8016f7e:	3103      	adds	r1, #3
 8016f80:	42b1      	cmp	r1, r6
 8016f82:	db02      	blt.n	8016f8a <cat_service+0x3b2>
 8016f84:	b10e      	cbz	r6, 8016f8a <cat_service+0x3b2>
 8016f86:	f7f2 faf7 	bl	8009578 <__asan_report_load4>
 8016f8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f8e:	eb04 06c2 	add.w	r6, r4, r2, lsl #3
 8016f92:	08c1      	lsrs	r1, r0, #3
 8016f94:	f8d6 e068 	ldr.w	lr, [r6, #104]	; 0x68
 8016f98:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8016f9c:	f991 c000 	ldrsb.w	ip, [r1]
 8016fa0:	f000 0107 	and.w	r1, r0, #7
 8016fa4:	3103      	adds	r1, #3
 8016fa6:	4561      	cmp	r1, ip
 8016fa8:	db04      	blt.n	8016fb4 <cat_service+0x3dc>
 8016faa:	f1bc 0f00 	cmp.w	ip, #0
 8016fae:	d001      	beq.n	8016fb4 <cat_service+0x3dc>
 8016fb0:	f7f2 fad6 	bl	8009560 <__asan_report_store4>
        *type = item->type;
 8016fb4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        *cmd = item->cmd;
 8016fb8:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
        *type = item->type;
 8016fbc:	330c      	adds	r3, #12
 8016fbe:	08d9      	lsrs	r1, r3, #3
 8016fc0:	f003 0007 	and.w	r0, r3, #7
 8016fc4:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8016fc8:	f991 1000 	ldrsb.w	r1, [r1]
 8016fcc:	4288      	cmp	r0, r1
 8016fce:	db03      	blt.n	8016fd8 <cat_service+0x400>
 8016fd0:	b111      	cbz	r1, 8016fd8 <cat_service+0x400>
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7f2 fac8 	bl	8009568 <__asan_report_load1>
 8016fd8:	f996 606c 	ldrsb.w	r6, [r6, #108]	; 0x6c
                self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 8016fdc:	f7f2 fea6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8016fe0:	2300      	movs	r3, #0
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count--;
 8016fe2:	3d01      	subs	r5, #1
                self->unsolicited_fsm.unsolicited_cmd_buffer_head = 0;
 8016fe4:	6763      	str	r3, [r4, #116]	; 0x74
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count--;
 8016fe6:	f7f2 fea1 	bl	8009d2c <__sanitizer_cov_trace_pc>
        self->unsolicited_fsm.cmd_type = type;
 8016fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
        self->unsolicited_fsm.unsolicited_cmd_buffer_items_count--;
 8016fee:	67a5      	str	r5, [r4, #120]	; 0x78
        self->unsolicited_fsm.cmd_type = type;
 8016ff0:	08c3      	lsrs	r3, r0, #3
 8016ff2:	f000 0207 	and.w	r2, r0, #7
 8016ff6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8016ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8016ffe:	429a      	cmp	r2, r3
 8017000:	db02      	blt.n	8017008 <cat_service+0x430>
 8017002:	b10b      	cbz	r3, 8017008 <cat_service+0x430>
 8017004:	f7f2 faa4 	bl	8009550 <__asan_report_store1>
        switch (type) {
 8017008:	2e01      	cmp	r6, #1
        self->unsolicited_fsm.cmd_type = type;
 801700a:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
        switch (type) {
 801700e:	f003 81d9 	beq.w	801a3c4 <cat_service+0x37ec>
 8017012:	2e03      	cmp	r6, #3
 8017014:	f000 811a 	beq.w	801724c <cat_service+0x674>
        switch (self->state) {
 8017018:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 801701c:	f7f2 fe86 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017020:	08f3      	lsrs	r3, r6, #3
 8017022:	f006 0207 	and.w	r2, r6, #7
 8017026:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801702a:	f993 3000 	ldrsb.w	r3, [r3]
 801702e:	429a      	cmp	r2, r3
 8017030:	db03      	blt.n	801703a <cat_service+0x462>
 8017032:	b113      	cbz	r3, 801703a <cat_service+0x462>
 8017034:	4630      	mov	r0, r6
 8017036:	f7f2 fa97 	bl	8009568 <__asan_report_load1>
 801703a:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 801703e:	3301      	adds	r3, #1
 8017040:	2b19      	cmp	r3, #25
 8017042:	f208 876e 	bhi.w	801ff22 <cat_service+0x934a>
 8017046:	e8df f013 	tbh	[pc, r3, lsl #1]
 801704a:	16e6      	.short	0x16e6
 801704c:	16bb1690 	.word	0x16bb1690
 8017050:	17f71665 	.word	0x17f71665
 8017054:	17c817cc 	.word	0x17c817cc
 8017058:	17c017c4 	.word	0x17c017c4
 801705c:	17601795 	.word	0x17601795
 8017060:	1807175c 	.word	0x1807175c
 8017064:	17ff1803 	.word	0x17ff1803
 8017068:	183617fb 	.word	0x183617fb
 801706c:	172b1832 	.word	0x172b1832
 8017070:	17581711 	.word	0x17581711
 8017074:	17501754 	.word	0x17501754
 8017078:	1748174c 	.word	0x1748174c
 801707c:	1744      	.short	0x1744
        if (self->io->write(ch) != 1)
 801707e:	6860      	ldr	r0, [r4, #4]
 8017080:	08c3      	lsrs	r3, r0, #3
 8017082:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017086:	f993 2000 	ldrsb.w	r2, [r3]
 801708a:	f000 0307 	and.w	r3, r0, #7
 801708e:	3303      	adds	r3, #3
 8017090:	4293      	cmp	r3, r2
 8017092:	db02      	blt.n	801709a <cat_service+0x4c2>
 8017094:	b10a      	cbz	r2, 801709a <cat_service+0x4c2>
 8017096:	f7f2 fa6f 	bl	8009578 <__asan_report_load4>
 801709a:	6803      	ldr	r3, [r0, #0]
 801709c:	4608      	mov	r0, r1
 801709e:	4798      	blx	r3
 80170a0:	2801      	cmp	r0, #1
 80170a2:	f040 80da 	bne.w	801725a <cat_service+0x682>
        self->unsolicited_fsm.position++;
 80170a6:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
 80170aa:	f7f2 fe3f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80170ae:	3603      	adds	r6, #3
 80170b0:	f999 3000 	ldrsb.w	r3, [r9]
 80170b4:	429e      	cmp	r6, r3
 80170b6:	db02      	blt.n	80170be <cat_service+0x4e6>
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	f048 8333 	bne.w	801f724 <cat_service+0x8b4c>
 80170be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        switch (self->state) {
 80170c0:	f104 062e 	add.w	r6, r4, #46	; 0x2e
        self->unsolicited_fsm.position++;
 80170c4:	3301      	adds	r3, #1
        switch (self->state) {
 80170c6:	f006 0207 	and.w	r2, r6, #7
        self->unsolicited_fsm.position++;
 80170ca:	64e3      	str	r3, [r4, #76]	; 0x4c
        switch (self->state) {
 80170cc:	08f3      	lsrs	r3, r6, #3
 80170ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80170d2:	f993 3000 	ldrsb.w	r3, [r3]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	f6ff ae0b 	blt.w	8016cf2 <cat_service+0x11a>
 80170dc:	2b00      	cmp	r3, #0
 80170de:	f43f ae08 	beq.w	8016cf2 <cat_service+0x11a>
 80170e2:	4630      	mov	r0, r6
 80170e4:	f7f2 fa40 	bl	8009568 <__asan_report_load1>
 80170e8:	2301      	movs	r3, #1
 80170ea:	9301      	str	r3, [sp, #4]
        char ch = self->write_buf[self->position];
 80170ec:	f7f2 fe1e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80170f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80170f4:	08c3      	lsrs	r3, r0, #3
 80170f6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80170fa:	f993 2000 	ldrsb.w	r2, [r3]
 80170fe:	f000 0307 	and.w	r3, r0, #7
 8017102:	3303      	adds	r3, #3
 8017104:	4293      	cmp	r3, r2
 8017106:	db02      	blt.n	801710e <cat_service+0x536>
 8017108:	2a00      	cmp	r2, #0
 801710a:	f048 84d2 	bne.w	801fab2 <cat_service+0x8eda>
 801710e:	f104 0518 	add.w	r5, r4, #24
 8017112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017114:	08eb      	lsrs	r3, r5, #3
 8017116:	f005 0207 	and.w	r2, r5, #7
 801711a:	9305      	str	r3, [sp, #20]
 801711c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017120:	9204      	str	r2, [sp, #16]
 8017122:	3203      	adds	r2, #3
 8017124:	f993 3000 	ldrsb.w	r3, [r3]
 8017128:	429a      	cmp	r2, r3
 801712a:	db02      	blt.n	8017132 <cat_service+0x55a>
 801712c:	2b00      	cmp	r3, #0
 801712e:	f048 853c 	bne.w	801fbaa <cat_service+0x8fd2>
 8017132:	69a2      	ldr	r2, [r4, #24]
 8017134:	1888      	adds	r0, r1, r2
 8017136:	08c3      	lsrs	r3, r0, #3
 8017138:	f000 0c07 	and.w	ip, r0, #7
 801713c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017140:	f993 3000 	ldrsb.w	r3, [r3]
 8017144:	459c      	cmp	ip, r3
 8017146:	db02      	blt.n	801714e <cat_service+0x576>
 8017148:	2b00      	cmp	r3, #0
 801714a:	f048 8531 	bne.w	801fbb0 <cat_service+0x8fd8>
 801714e:	f811 9002 	ldrb.w	r9, [r1, r2]
        if (ch == '\0') {
 8017152:	f1b9 0f00 	cmp.w	r9, #0
 8017156:	f003 8148 	beq.w	801a3ea <cat_service+0x3812>
        if (self->io->write(ch) != 1)
 801715a:	f7f2 fde7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801715e:	1d20      	adds	r0, r4, #4
 8017160:	08c3      	lsrs	r3, r0, #3
 8017162:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017166:	f993 2000 	ldrsb.w	r2, [r3]
 801716a:	f000 0307 	and.w	r3, r0, #7
 801716e:	3303      	adds	r3, #3
 8017170:	4293      	cmp	r3, r2
 8017172:	db02      	blt.n	801717a <cat_service+0x5a2>
 8017174:	2a00      	cmp	r2, #0
 8017176:	f048 8540 	bne.w	801fbfa <cat_service+0x9022>
 801717a:	6860      	ldr	r0, [r4, #4]
 801717c:	08c2      	lsrs	r2, r0, #3
 801717e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017182:	f992 1000 	ldrsb.w	r1, [r2]
 8017186:	f000 0207 	and.w	r2, r0, #7
 801718a:	3203      	adds	r2, #3
 801718c:	428a      	cmp	r2, r1
 801718e:	db02      	blt.n	8017196 <cat_service+0x5be>
 8017190:	2900      	cmp	r1, #0
 8017192:	f048 8501 	bne.w	801fb98 <cat_service+0x8fc0>
 8017196:	6803      	ldr	r3, [r0, #0]
 8017198:	4648      	mov	r0, r9
 801719a:	4798      	blx	r3
 801719c:	2801      	cmp	r0, #1
 801719e:	f043 8145 	bne.w	801a42c <cat_service+0x3854>
        self->position++;
 80171a2:	f7f2 fdc3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80171a6:	9b05      	ldr	r3, [sp, #20]
 80171a8:	9a04      	ldr	r2, [sp, #16]
 80171aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80171ae:	f102 0903 	add.w	r9, r2, #3
 80171b2:	f993 3000 	ldrsb.w	r3, [r3]
 80171b6:	4599      	cmp	r9, r3
 80171b8:	db02      	blt.n	80171c0 <cat_service+0x5e8>
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	f048 84ee 	bne.w	801fb9c <cat_service+0x8fc4>
 80171c0:	69a3      	ldr	r3, [r4, #24]
                break;
        case CAT_STATE_FLUSH_IO_WRITE_WAIT:
                s = process_io_write_wait(self);
                break;
        case CAT_STATE_FLUSH_IO_WRITE:
                s = process_io_write(self);
 80171c2:	2501      	movs	r5, #1
        self->position++;
 80171c4:	3301      	adds	r3, #1
 80171c6:	61a3      	str	r3, [r4, #24]
        default:
                s = CAT_STATUS_ERROR_UNKNOWN_STATE;
                break;
        }

        if ((unsolicited_stat != CAT_STATUS_OK) || (is_unsolicited_fsm_busy(self) != false)) {
 80171c8:	f7f2 fdb0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80171cc:	9b01      	ldr	r3, [sp, #4]
 80171ce:	b97b      	cbnz	r3, 80171f0 <cat_service+0x618>
        return (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_IDLE);
 80171d0:	f7f2 fdac 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80171d4:	9b03      	ldr	r3, [sp, #12]
 80171d6:	9a02      	ldr	r2, [sp, #8]
 80171d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80171dc:	f993 3000 	ldrsb.w	r3, [r3]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	db02      	blt.n	80171ea <cat_service+0x612>
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	f047 8697 	bne.w	801ef18 <cat_service+0x8340>
        if ((unsolicited_stat != CAT_STATUS_OK) || (is_unsolicited_fsm_busy(self) != false)) {
 80171ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80171ee:	b103      	cbz	r3, 80171f2 <cat_service+0x61a>
        switch (self->state) {
 80171f0:	2501      	movs	r5, #1
                s = CAT_STATUS_BUSY;
        }

        if ((self->mutex != NULL) && (self->mutex->unlock() != 0))
 80171f2:	f7f2 fd9b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80171f6:	f10a 53dc 	add.w	r3, sl, #461373440	; 0x1b800000
 80171fa:	f10b 0203 	add.w	r2, fp, #3
 80171fe:	f993 3000 	ldrsb.w	r3, [r3]
 8017202:	429a      	cmp	r2, r3
 8017204:	db02      	blt.n	801720c <cat_service+0x634>
 8017206:	2b00      	cmp	r3, #0
 8017208:	f047 84da 	bne.w	801ebc0 <cat_service+0x7fe8>
 801720c:	68a4      	ldr	r4, [r4, #8]
 801720e:	b1ac      	cbz	r4, 801723c <cat_service+0x664>
 8017210:	f7f2 fd8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017214:	1d20      	adds	r0, r4, #4
 8017216:	08c2      	lsrs	r2, r0, #3
 8017218:	f000 0307 	and.w	r3, r0, #7
 801721c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017220:	3303      	adds	r3, #3
 8017222:	f992 2000 	ldrsb.w	r2, [r2]
 8017226:	4293      	cmp	r3, r2
 8017228:	db02      	blt.n	8017230 <cat_service+0x658>
 801722a:	2a00      	cmp	r2, #0
 801722c:	f047 8669 	bne.w	801ef02 <cat_service+0x832a>
 8017230:	6863      	ldr	r3, [r4, #4]
 8017232:	4798      	blx	r3
                return CAT_STATUS_ERROR_MUTEX_UNLOCK;
 8017234:	2800      	cmp	r0, #0
 8017236:	bf18      	it	ne
 8017238:	f06f 0501 	mvnne.w	r5, #1
 801723c:	f7f2 fd76 	bl	8009d2c <__sanitizer_cov_trace_pc>

        return s;
}
 8017240:	4628      	mov	r0, r5
 8017242:	b015      	add	sp, #84	; 0x54
 8017244:	ecbd 8b02 	vpop	{d8}
 8017248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                start_processing_format_test_args(self, CAT_FSM_TYPE_UNSOLICITED);
 801724c:	f7f2 fd6e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017250:	2101      	movs	r1, #1
 8017252:	4620      	mov	r0, r4
 8017254:	f7fc f934 	bl	80134c0 <start_processing_format_test_args>
                break;
 8017258:	e6de      	b.n	8017018 <cat_service+0x440>
        switch (self->state) {
 801725a:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 801725e:	f7f2 fd65 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017262:	08f3      	lsrs	r3, r6, #3
 8017264:	f006 0207 	and.w	r2, r6, #7
 8017268:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801726c:	f993 3000 	ldrsb.w	r3, [r3]
 8017270:	429a      	cmp	r2, r3
 8017272:	f6ff ad3e 	blt.w	8016cf2 <cat_service+0x11a>
 8017276:	2b00      	cmp	r3, #0
 8017278:	f43f ad3b 	beq.w	8016cf2 <cat_service+0x11a>
 801727c:	4630      	mov	r0, r6
 801727e:	f7f2 f973 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 8017282:	f7f2 fd53 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017286:	1d20      	adds	r0, r4, #4
 8017288:	08c3      	lsrs	r3, r0, #3
 801728a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801728e:	f993 2000 	ldrsb.w	r2, [r3]
 8017292:	f000 0307 	and.w	r3, r0, #7
 8017296:	3303      	adds	r3, #3
 8017298:	4293      	cmp	r3, r2
 801729a:	db02      	blt.n	80172a2 <cat_service+0x6ca>
 801729c:	2a00      	cmp	r2, #0
 801729e:	f048 8469 	bne.w	801fb74 <cat_service+0x8f9c>
 80172a2:	6862      	ldr	r2, [r4, #4]
 80172a4:	1d10      	adds	r0, r2, #4
 80172a6:	08c3      	lsrs	r3, r0, #3
 80172a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80172ac:	f993 1000 	ldrsb.w	r1, [r3]
 80172b0:	f000 0307 	and.w	r3, r0, #7
 80172b4:	3303      	adds	r3, #3
 80172b6:	428b      	cmp	r3, r1
 80172b8:	db02      	blt.n	80172c0 <cat_service+0x6e8>
 80172ba:	2900      	cmp	r1, #0
 80172bc:	f048 8462 	bne.w	801fb84 <cat_service+0x8fac>
 80172c0:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 80172c4:	6853      	ldr	r3, [r2, #4]
 80172c6:	4648      	mov	r0, r9
 80172c8:	4798      	blx	r3
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f003 80bd 	beq.w	801a44a <cat_service+0x3872>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 80172d0:	f7f2 fd2c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80172d4:	f006 0207 	and.w	r2, r6, #7
 80172d8:	08f3      	lsrs	r3, r6, #3
 80172da:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80172de:	f993 3000 	ldrsb.w	r3, [r3]
 80172e2:	429a      	cmp	r2, r3
 80172e4:	db02      	blt.n	80172ec <cat_service+0x714>
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f048 844e 	bne.w	801fb88 <cat_service+0x8fb0>
 80172ec:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 80172f0:	2b08      	cmp	r3, #8
 80172f2:	f003 86d8 	beq.w	801b0a6 <cat_service+0x44ce>
                self->current_char = to_upper(self->current_char);
 80172f6:	f7f2 fd19 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80172fa:	f009 0207 	and.w	r2, r9, #7
 80172fe:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8017302:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017306:	f993 3000 	ldrsb.w	r3, [r3]
 801730a:	429a      	cmp	r2, r3
 801730c:	db02      	blt.n	8017314 <cat_service+0x73c>
 801730e:	2b00      	cmp	r3, #0
 8017310:	f048 8435 	bne.w	801fb7e <cat_service+0x8fa6>
 8017314:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8017318:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 801731c:	2b19      	cmp	r3, #25
 801731e:	d803      	bhi.n	8017328 <cat_service+0x750>
 8017320:	3d20      	subs	r5, #32
 8017322:	f7f2 fd03 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017326:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 8017328:	f7f2 fd00 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801732c:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 8017330:	f7f2 fcfc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017334:	2d0d      	cmp	r5, #13
 8017336:	f004 826c 	beq.w	801b812 <cat_service+0x4c3a>
 801733a:	2d54      	cmp	r5, #84	; 0x54
 801733c:	f004 827f 	beq.w	801b83e <cat_service+0x4c66>
 8017340:	2d0a      	cmp	r5, #10
 8017342:	f004 8302 	beq.w	801b94a <cat_service+0x4d72>
                self->state = CAT_STATE_ERROR;
 8017346:	f7f2 fcf1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801734a:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 801734c:	2501      	movs	r5, #1
                self->state = CAT_STATE_ERROR;
 801734e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 8017352:	e739      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017354:	2301      	movs	r3, #1
 8017356:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 8017358:	f7f2 fce8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801735c:	1d20      	adds	r0, r4, #4
 801735e:	08c3      	lsrs	r3, r0, #3
 8017360:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017364:	f993 2000 	ldrsb.w	r2, [r3]
 8017368:	f000 0307 	and.w	r3, r0, #7
 801736c:	3303      	adds	r3, #3
 801736e:	4293      	cmp	r3, r2
 8017370:	db02      	blt.n	8017378 <cat_service+0x7a0>
 8017372:	2a00      	cmp	r2, #0
 8017374:	f048 8372 	bne.w	801fa5c <cat_service+0x8e84>
 8017378:	6862      	ldr	r2, [r4, #4]
 801737a:	1d10      	adds	r0, r2, #4
 801737c:	08c3      	lsrs	r3, r0, #3
 801737e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017382:	f993 1000 	ldrsb.w	r1, [r3]
 8017386:	f000 0307 	and.w	r3, r0, #7
 801738a:	3303      	adds	r3, #3
 801738c:	428b      	cmp	r3, r1
 801738e:	db02      	blt.n	8017396 <cat_service+0x7be>
 8017390:	2900      	cmp	r1, #0
 8017392:	f048 835e 	bne.w	801fa52 <cat_service+0x8e7a>
 8017396:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 801739a:	6853      	ldr	r3, [r2, #4]
 801739c:	4648      	mov	r0, r9
 801739e:	4798      	blx	r3
 80173a0:	2800      	cmp	r0, #0
 80173a2:	f003 8049 	beq.w	801a438 <cat_service+0x3860>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 80173a6:	f7f2 fcc1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80173aa:	f006 0207 	and.w	r2, r6, #7
 80173ae:	08f3      	lsrs	r3, r6, #3
 80173b0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80173b4:	f993 3000 	ldrsb.w	r3, [r3]
 80173b8:	429a      	cmp	r2, r3
 80173ba:	db02      	blt.n	80173c2 <cat_service+0x7ea>
 80173bc:	2b00      	cmp	r3, #0
 80173be:	f048 834a 	bne.w	801fa56 <cat_service+0x8e7e>
 80173c2:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 80173c6:	2b08      	cmp	r3, #8
 80173c8:	f003 865a 	beq.w	801b080 <cat_service+0x44a8>
                self->current_char = to_upper(self->current_char);
 80173cc:	f7f2 fcae 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80173d0:	f009 0207 	and.w	r2, r9, #7
 80173d4:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 80173d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80173dc:	f993 3000 	ldrsb.w	r3, [r3]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	db02      	blt.n	80173ea <cat_service+0x812>
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	f048 835e 	bne.w	801faa6 <cat_service+0x8ece>
 80173ea:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 80173ee:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80173f2:	2b19      	cmp	r3, #25
 80173f4:	d803      	bhi.n	80173fe <cat_service+0x826>
 80173f6:	3d20      	subs	r5, #32
 80173f8:	f7f2 fc98 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80173fc:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 80173fe:	f7f2 fc95 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017402:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 8017406:	f7f2 fc91 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801740a:	2d3d      	cmp	r5, #61	; 0x3d
 801740c:	f004 83c7 	beq.w	801bb9e <cat_service+0x4fc6>
 8017410:	f202 86f6 	bhi.w	801a200 <cat_service+0x3628>
 8017414:	2d0a      	cmp	r5, #10
 8017416:	f004 8372 	beq.w	801bafe <cat_service+0x4f26>
 801741a:	2d0d      	cmp	r5, #13
 801741c:	f045 8410 	bne.w	801cc40 <cat_service+0x6068>
                self->cr_flag = true;
 8017420:	f7f2 fc84 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017424:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8017428:	08c3      	lsrs	r3, r0, #3
 801742a:	f000 0207 	and.w	r2, r0, #7
 801742e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017432:	f993 3000 	ldrsb.w	r3, [r3]
 8017436:	429a      	cmp	r2, r3
 8017438:	db02      	blt.n	8017440 <cat_service+0x868>
 801743a:	2b00      	cmp	r3, #0
 801743c:	f048 82e4 	bne.w	801fa08 <cat_service+0x8e30>
 8017440:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 8017442:	4605      	mov	r5, r0
                self->cr_flag = true;
 8017444:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 8017448:	e6be      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 801744a:	2301      	movs	r3, #1
 801744c:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 801744e:	f7f2 fc6d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017452:	1d20      	adds	r0, r4, #4
 8017454:	08c3      	lsrs	r3, r0, #3
 8017456:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801745a:	f993 2000 	ldrsb.w	r2, [r3]
 801745e:	f000 0307 	and.w	r3, r0, #7
 8017462:	3303      	adds	r3, #3
 8017464:	4293      	cmp	r3, r2
 8017466:	db02      	blt.n	801746e <cat_service+0x896>
 8017468:	2a00      	cmp	r2, #0
 801746a:	f048 82c1 	bne.w	801f9f0 <cat_service+0x8e18>
 801746e:	6862      	ldr	r2, [r4, #4]
 8017470:	1d10      	adds	r0, r2, #4
 8017472:	08c3      	lsrs	r3, r0, #3
 8017474:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017478:	f993 1000 	ldrsb.w	r1, [r3]
 801747c:	f000 0307 	and.w	r3, r0, #7
 8017480:	3303      	adds	r3, #3
 8017482:	428b      	cmp	r3, r1
 8017484:	db02      	blt.n	801748c <cat_service+0x8b4>
 8017486:	2900      	cmp	r1, #0
 8017488:	f048 82b4 	bne.w	801f9f4 <cat_service+0x8e1c>
 801748c:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8017490:	6853      	ldr	r3, [r2, #4]
 8017492:	4648      	mov	r0, r9
 8017494:	4798      	blx	r3
 8017496:	2800      	cmp	r0, #0
 8017498:	f003 805b 	beq.w	801a552 <cat_service+0x397a>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801749c:	f7f2 fc46 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80174a0:	f006 0207 	and.w	r2, r6, #7
 80174a4:	08f3      	lsrs	r3, r6, #3
 80174a6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80174aa:	f993 3000 	ldrsb.w	r3, [r3]
 80174ae:	429a      	cmp	r2, r3
 80174b0:	db02      	blt.n	80174b8 <cat_service+0x8e0>
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f048 82a0 	bne.w	801f9f8 <cat_service+0x8e20>
 80174b8:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 80174bc:	2b08      	cmp	r3, #8
 80174be:	f003 861d 	beq.w	801b0fc <cat_service+0x4524>
                self->current_char = to_upper(self->current_char);
 80174c2:	f7f2 fc33 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80174c6:	f009 0207 	and.w	r2, r9, #7
 80174ca:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 80174ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80174d2:	f993 3000 	ldrsb.w	r3, [r3]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	db02      	blt.n	80174e0 <cat_service+0x908>
 80174da:	2b00      	cmp	r3, #0
 80174dc:	f048 8398 	bne.w	801fc10 <cat_service+0x9038>
 80174e0:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 80174e4:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80174e8:	2b19      	cmp	r3, #25
 80174ea:	d803      	bhi.n	80174f4 <cat_service+0x91c>
 80174ec:	3d20      	subs	r5, #32
 80174ee:	f7f2 fc1d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80174f2:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 80174f4:	f7f2 fc1a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80174f8:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 80174fc:	f7f2 fc16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017500:	2d0d      	cmp	r5, #13
 8017502:	f004 843c 	beq.w	801bd7e <cat_service+0x51a6>
 8017506:	2d41      	cmp	r5, #65	; 0x41
 8017508:	f003 86f5 	beq.w	801b2f6 <cat_service+0x471e>
 801750c:	2d0a      	cmp	r5, #10
 801750e:	f004 8363 	beq.w	801bbd8 <cat_service+0x5000>
                self->state = CAT_STATE_ERROR;
 8017512:	f7f2 fc0b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017516:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 8017518:	2501      	movs	r5, #1
                self->state = CAT_STATE_ERROR;
 801751a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801751e:	e653      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017520:	2301      	movs	r3, #1
 8017522:	9301      	str	r3, [sp, #4]
        if (self->hold_state_flag == false) {
 8017524:	f7f2 fc02 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017528:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801752c:	08c3      	lsrs	r3, r0, #3
 801752e:	f000 0207 	and.w	r2, r0, #7
 8017532:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017536:	f993 3000 	ldrsb.w	r3, [r3]
 801753a:	429a      	cmp	r2, r3
 801753c:	db02      	blt.n	8017544 <cat_service+0x96c>
 801753e:	2b00      	cmp	r3, #0
 8017540:	f048 8356 	bne.w	801fbf0 <cat_service+0x9018>
 8017544:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017548:	2b00      	cmp	r3, #0
 801754a:	f042 8729 	bne.w	801a3a0 <cat_service+0x37c8>
                self->cr_flag = false;
 801754e:	f7f2 fbed 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017552:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8017556:	08c3      	lsrs	r3, r0, #3
 8017558:	f000 0207 	and.w	r2, r0, #7
 801755c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017560:	f993 3000 	ldrsb.w	r3, [r3]
 8017564:	429a      	cmp	r2, r3
 8017566:	db02      	blt.n	801756e <cat_service+0x996>
 8017568:	2b00      	cmp	r3, #0
 801756a:	f048 8020 	bne.w	801f5ae <cat_service+0x89d6>
 801756e:	2500      	movs	r5, #0
 8017570:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
 8017574:	f7f2 fbda 	bl	8009d2c <__sanitizer_cov_trace_pc>
                self->state = CAT_STATE_IDLE;
 8017578:	f006 0207 	and.w	r2, r6, #7
 801757c:	08f3      	lsrs	r3, r6, #3
 801757e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017582:	f993 3000 	ldrsb.w	r3, [r3]
 8017586:	429a      	cmp	r2, r3
 8017588:	db02      	blt.n	8017590 <cat_service+0x9b8>
 801758a:	2b00      	cmp	r3, #0
 801758c:	f048 8229 	bne.w	801f9e2 <cat_service+0x8e0a>
        self->cmd = NULL;
 8017590:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8017594:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017598:	08c3      	lsrs	r3, r0, #3
 801759a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801759e:	f993 2000 	ldrsb.w	r2, [r3]
 80175a2:	f000 0307 	and.w	r3, r0, #7
 80175a6:	3303      	adds	r3, #3
 80175a8:	4293      	cmp	r3, r2
 80175aa:	db02      	blt.n	80175b2 <cat_service+0x9da>
 80175ac:	2a00      	cmp	r2, #0
 80175ae:	f048 821b 	bne.w	801f9e8 <cat_service+0x8e10>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80175b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        self->cmd = NULL;
 80175b6:	2300      	movs	r3, #0
 80175b8:	6263      	str	r3, [r4, #36]	; 0x24
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80175ba:	08c3      	lsrs	r3, r0, #3
 80175bc:	f000 0207 	and.w	r2, r0, #7
 80175c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80175c4:	f993 3000 	ldrsb.w	r3, [r3]
 80175c8:	429a      	cmp	r2, r3
 80175ca:	db02      	blt.n	80175d2 <cat_service+0x9fa>
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f048 8322 	bne.w	801fc16 <cat_service+0x903e>
 80175d2:	23ff      	movs	r3, #255	; 0xff
                s = CAT_STATUS_BUSY;
 80175d4:	2501      	movs	r5, #1
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80175d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                break;
 80175da:	e5f5      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 80175dc:	2301      	movs	r3, #1
 80175de:	9301      	str	r3, [sp, #4]
                start_processing_format_read_args(self, CAT_FSM_TYPE_ATCMD);
 80175e0:	f7f2 fba4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80175e4:	2100      	movs	r1, #0
 80175e6:	4620      	mov	r0, r4
                s = CAT_STATUS_BUSY;
 80175e8:	2501      	movs	r5, #1
                start_processing_format_read_args(self, CAT_FSM_TYPE_ATCMD);
 80175ea:	f7fb fdbf 	bl	801316c <start_processing_format_read_args>
                break;
 80175ee:	e5eb      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 80175f0:	2301      	movs	r3, #1
 80175f2:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 80175f4:	f7f2 fb9a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80175f8:	08e3      	lsrs	r3, r4, #3
 80175fa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80175fe:	f993 2000 	ldrsb.w	r2, [r3]
 8017602:	f004 0307 	and.w	r3, r4, #7
 8017606:	3303      	adds	r3, #3
 8017608:	4293      	cmp	r3, r2
 801760a:	db02      	blt.n	8017612 <cat_service+0xa3a>
 801760c:	2a00      	cmp	r2, #0
 801760e:	f048 8304 	bne.w	801fc1a <cat_service+0x9042>
 8017612:	f8d4 9000 	ldr.w	r9, [r4]
 8017616:	f109 0008 	add.w	r0, r9, #8
 801761a:	08c3      	lsrs	r3, r0, #3
 801761c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017620:	f993 2000 	ldrsb.w	r2, [r3]
 8017624:	f000 0307 	and.w	r3, r0, #7
 8017628:	3303      	adds	r3, #3
 801762a:	4293      	cmp	r3, r2
 801762c:	db02      	blt.n	8017634 <cat_service+0xa5c>
 801762e:	2a00      	cmp	r2, #0
 8017630:	f048 82fb 	bne.w	801fc2a <cat_service+0x9052>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8017634:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 8017638:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801763c:	08c3      	lsrs	r3, r0, #3
 801763e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017642:	f993 2000 	ldrsb.w	r2, [r3]
 8017646:	f000 0307 	and.w	r3, r0, #7
 801764a:	3303      	adds	r3, #3
 801764c:	4293      	cmp	r3, r2
 801764e:	db02      	blt.n	8017656 <cat_service+0xa7e>
 8017650:	2a00      	cmp	r2, #0
 8017652:	f048 82ec 	bne.w	801fc2e <cat_service+0x9056>
 8017656:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801765a:	2b00      	cmp	r3, #0
 801765c:	f003 812b 	beq.w	801a8b6 <cat_service+0x3cde>
 8017660:	f7f2 fb64 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017664:	f109 000c 	add.w	r0, r9, #12
 8017668:	08c3      	lsrs	r3, r0, #3
 801766a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801766e:	f993 2000 	ldrsb.w	r2, [r3]
 8017672:	f000 0307 	and.w	r3, r0, #7
 8017676:	3303      	adds	r3, #3
 8017678:	4293      	cmp	r3, r2
 801767a:	db02      	blt.n	8017682 <cat_service+0xaaa>
 801767c:	2a00      	cmp	r2, #0
 801767e:	f048 820a 	bne.w	801fa96 <cat_service+0x8ebe>
 8017682:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017686:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 8017688:	f7f2 fb50 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801768c:	9a04      	ldr	r2, [sp, #16]
 801768e:	4628      	mov	r0, r5
 8017690:	49b2      	ldr	r1, [pc, #712]	; (801795c <cat_service+0xd84>)
 8017692:	f00b f9a0 	bl	80229d6 <strncpy>
        self->position = 0;
 8017696:	f104 0018 	add.w	r0, r4, #24
 801769a:	08c3      	lsrs	r3, r0, #3
 801769c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80176a0:	f993 2000 	ldrsb.w	r2, [r3]
 80176a4:	f000 0307 	and.w	r3, r0, #7
 80176a8:	3303      	adds	r3, #3
 80176aa:	4293      	cmp	r3, r2
 80176ac:	db02      	blt.n	80176b4 <cat_service+0xadc>
 80176ae:	2a00      	cmp	r2, #0
 80176b0:	f048 82bf 	bne.w	801fc32 <cat_service+0x905a>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80176b4:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 80176b8:	2300      	movs	r3, #0
 80176ba:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80176bc:	08c3      	lsrs	r3, r0, #3
 80176be:	f000 0207 	and.w	r2, r0, #7
 80176c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80176c6:	f993 3000 	ldrsb.w	r3, [r3]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	db02      	blt.n	80176d4 <cat_service+0xafc>
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f048 82b1 	bne.w	801fc36 <cat_service+0x905e>
        self->write_buf = get_new_line_chars(self);
 80176d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80176d8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80176dc:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 80176e0:	08c3      	lsrs	r3, r0, #3
 80176e2:	f000 0207 	and.w	r2, r0, #7
 80176e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80176ea:	3203      	adds	r2, #3
 80176ec:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80176f0:	4b9b      	ldr	r3, [pc, #620]	; (8017960 <cat_service+0xd88>)
        self->write_buf = get_new_line_chars(self);
 80176f2:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80176f4:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 80176f6:	db02      	blt.n	80176fe <cat_service+0xb26>
 80176f8:	2900      	cmp	r1, #0
 80176fa:	f048 829e 	bne.w	801fc3a <cat_service+0x9062>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80176fe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8017702:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8017704:	08c3      	lsrs	r3, r0, #3
 8017706:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801770a:	f993 2000 	ldrsb.w	r2, [r3]
 801770e:	f000 0307 	and.w	r3, r0, #7
 8017712:	3303      	adds	r3, #3
 8017714:	4293      	cmp	r3, r2
 8017716:	db02      	blt.n	801771e <cat_service+0xb46>
 8017718:	2a00      	cmp	r2, #0
 801771a:	f048 8290 	bne.w	801fc3e <cat_service+0x9066>
        self->write_state_after = state_after;
 801771e:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8017722:	2300      	movs	r3, #0
 8017724:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8017726:	08c3      	lsrs	r3, r0, #3
 8017728:	f000 0207 	and.w	r2, r0, #7
 801772c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017730:	f993 3000 	ldrsb.w	r3, [r3]
 8017734:	429a      	cmp	r2, r3
 8017736:	db02      	blt.n	801773e <cat_service+0xb66>
 8017738:	2b00      	cmp	r3, #0
 801773a:	f047 86e3 	bne.w	801f504 <cat_service+0x892c>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801773e:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8017740:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017742:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8017746:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801774a:	f006 0207 	and.w	r2, r6, #7
 801774e:	f993 3000 	ldrsb.w	r3, [r3]
 8017752:	429a      	cmp	r2, r3
 8017754:	db02      	blt.n	801775c <cat_service+0xb84>
 8017756:	2b00      	cmp	r3, #0
 8017758:	f047 86d6 	bne.w	801f508 <cat_service+0x8930>
 801775c:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801775e:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017760:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8017764:	e530      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017766:	2301      	movs	r3, #1
 8017768:	9301      	str	r3, [sp, #4]
                s = format_read_args(self, CAT_FSM_TYPE_ATCMD);
 801776a:	f7f2 fadf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801776e:	2100      	movs	r1, #0
 8017770:	4620      	mov	r0, r4
 8017772:	f7fb ffdb 	bl	801372c <format_read_args>
 8017776:	4605      	mov	r5, r0
                break;
 8017778:	e526      	b.n	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 801777a:	2301      	movs	r3, #1
 801777c:	9301      	str	r3, [sp, #4]
        switch (self->var->type) {
 801777e:	f7f2 fad5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017782:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8017786:	08da      	lsrs	r2, r3, #3
 8017788:	f003 0107 	and.w	r1, r3, #7
 801778c:	9310      	str	r3, [sp, #64]	; 0x40
 801778e:	f102 53dc 	add.w	r3, r2, #461373440	; 0x1b800000
 8017792:	920d      	str	r2, [sp, #52]	; 0x34
 8017794:	1cca      	adds	r2, r1, #3
 8017796:	910e      	str	r1, [sp, #56]	; 0x38
 8017798:	f993 3000 	ldrsb.w	r3, [r3]
 801779c:	429a      	cmp	r2, r3
 801779e:	db02      	blt.n	80177a6 <cat_service+0xbce>
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	f048 81b8 	bne.w	801fb16 <cat_service+0x8f3e>
 80177a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80177a8:	1d18      	adds	r0, r3, #4
 80177aa:	9304      	str	r3, [sp, #16]
 80177ac:	08c3      	lsrs	r3, r0, #3
 80177ae:	f000 0207 	and.w	r2, r0, #7
 80177b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80177b6:	f993 3000 	ldrsb.w	r3, [r3]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	db02      	blt.n	80177c4 <cat_service+0xbec>
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f048 81ac 	bne.w	801fb1c <cat_service+0x8f44>
 80177c4:	9b04      	ldr	r3, [sp, #16]
 80177c6:	791b      	ldrb	r3, [r3, #4]
 80177c8:	2b04      	cmp	r3, #4
 80177ca:	f208 83d5 	bhi.w	801ff78 <cat_service+0x93a0>
 80177ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80177d2:	0d7e      	.short	0x0d7e
 80177d4:	0bbd0c33 	.word	0x0bbd0c33
 80177d8:	09d50ab8 	.word	0x09d50ab8
        switch (self->state) {
 80177dc:	2301      	movs	r3, #1
 80177de:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 80177e0:	f7f2 faa4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80177e4:	1d20      	adds	r0, r4, #4
 80177e6:	08c3      	lsrs	r3, r0, #3
 80177e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80177ec:	f993 2000 	ldrsb.w	r2, [r3]
 80177f0:	f000 0307 	and.w	r3, r0, #7
 80177f4:	3303      	adds	r3, #3
 80177f6:	4293      	cmp	r3, r2
 80177f8:	db02      	blt.n	8017800 <cat_service+0xc28>
 80177fa:	2a00      	cmp	r2, #0
 80177fc:	f048 8175 	bne.w	801faea <cat_service+0x8f12>
 8017800:	6862      	ldr	r2, [r4, #4]
 8017802:	1d10      	adds	r0, r2, #4
 8017804:	08c3      	lsrs	r3, r0, #3
 8017806:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801780a:	f993 1000 	ldrsb.w	r1, [r3]
 801780e:	f000 0307 	and.w	r3, r0, #7
 8017812:	3303      	adds	r3, #3
 8017814:	428b      	cmp	r3, r1
 8017816:	db02      	blt.n	801781e <cat_service+0xc46>
 8017818:	2900      	cmp	r1, #0
 801781a:	f048 8168 	bne.w	801faee <cat_service+0x8f16>
 801781e:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8017822:	6853      	ldr	r3, [r2, #4]
 8017824:	4648      	mov	r0, r9
 8017826:	4798      	blx	r3
 8017828:	2800      	cmp	r0, #0
 801782a:	f002 860b 	beq.w	801a444 <cat_service+0x386c>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801782e:	f7f2 fa7d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017832:	f006 0207 	and.w	r2, r6, #7
 8017836:	08f3      	lsrs	r3, r6, #3
 8017838:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801783c:	f993 3000 	ldrsb.w	r3, [r3]
 8017840:	429a      	cmp	r2, r3
 8017842:	db02      	blt.n	801784a <cat_service+0xc72>
 8017844:	2b00      	cmp	r3, #0
 8017846:	f048 8154 	bne.w	801faf2 <cat_service+0x8f1a>
 801784a:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 801784e:	2b08      	cmp	r3, #8
 8017850:	f003 847a 	beq.w	801b148 <cat_service+0x4570>
                self->current_char = to_upper(self->current_char);
 8017854:	f7f2 fa6a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017858:	f009 0207 	and.w	r2, r9, #7
 801785c:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8017860:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017864:	f993 3000 	ldrsb.w	r3, [r3]
 8017868:	429a      	cmp	r2, r3
 801786a:	db02      	blt.n	8017872 <cat_service+0xc9a>
 801786c:	2b00      	cmp	r3, #0
 801786e:	f048 8183 	bne.w	801fb78 <cat_service+0x8fa0>
 8017872:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8017876:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 801787a:	2b19      	cmp	r3, #25
 801787c:	d803      	bhi.n	8017886 <cat_service+0xcae>
 801787e:	3d20      	subs	r5, #32
 8017880:	f7f2 fa54 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017884:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 8017886:	f7f2 fa51 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801788a:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 801788e:	f7f2 fa4d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017892:	2d0a      	cmp	r5, #10
 8017894:	f003 8481 	beq.w	801b19a <cat_service+0x45c2>
 8017898:	2d0d      	cmp	r5, #13
 801789a:	f003 8468 	beq.w	801b16e <cat_service+0x4596>
                if ((self->length == 0) && (self->current_char == '?')) {
 801789e:	f7f2 fa45 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80178a2:	f104 0014 	add.w	r0, r4, #20
 80178a6:	08c3      	lsrs	r3, r0, #3
 80178a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80178ac:	f993 2000 	ldrsb.w	r2, [r3]
 80178b0:	f000 0307 	and.w	r3, r0, #7
 80178b4:	3303      	adds	r3, #3
 80178b6:	4293      	cmp	r3, r2
 80178b8:	db02      	blt.n	80178c0 <cat_service+0xce8>
 80178ba:	2a00      	cmp	r2, #0
 80178bc:	f047 8644 	bne.w	801f548 <cat_service+0x8970>
 80178c0:	6966      	ldr	r6, [r4, #20]
 80178c2:	b926      	cbnz	r6, 80178ce <cat_service+0xcf6>
 80178c4:	f7f2 fa32 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80178c8:	2d3f      	cmp	r5, #63	; 0x3f
 80178ca:	f005 87dc 	beq.w	801d886 <cat_service+0x6cae>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80178ce:	f7f2 fa2d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80178d2:	08e3      	lsrs	r3, r4, #3
 80178d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80178d8:	f993 2000 	ldrsb.w	r2, [r3]
 80178dc:	f004 0307 	and.w	r3, r4, #7
 80178e0:	3303      	adds	r3, #3
 80178e2:	4293      	cmp	r3, r2
 80178e4:	db02      	blt.n	80178ec <cat_service+0xd14>
 80178e6:	2a00      	cmp	r2, #0
 80178e8:	f047 86de 	bne.w	801f6a8 <cat_service+0x8ad0>
 80178ec:	f8d4 9000 	ldr.w	r9, [r4]
 80178f0:	f109 0010 	add.w	r0, r9, #16
 80178f4:	08c3      	lsrs	r3, r0, #3
 80178f6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80178fa:	f993 2000 	ldrsb.w	r2, [r3]
 80178fe:	f000 0307 	and.w	r3, r0, #7
 8017902:	3303      	adds	r3, #3
 8017904:	4293      	cmp	r3, r2
 8017906:	db02      	blt.n	801790e <cat_service+0xd36>
 8017908:	2a00      	cmp	r2, #0
 801790a:	f048 8100 	bne.w	801fb0e <cat_service+0x8f36>
 801790e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017912:	2b00      	cmp	r3, #0
 8017914:	f005 8215 	beq.w	801cd42 <cat_service+0x616a>
 8017918:	f7f2 fa08 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801791c:	f109 000c 	add.w	r0, r9, #12
 8017920:	08c3      	lsrs	r3, r0, #3
 8017922:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017926:	f993 2000 	ldrsb.w	r2, [r3]
 801792a:	f000 0307 	and.w	r3, r0, #7
 801792e:	3303      	adds	r3, #3
 8017930:	4293      	cmp	r3, r2
 8017932:	db02      	blt.n	801793a <cat_service+0xd62>
 8017934:	2a00      	cmp	r2, #0
 8017936:	f048 80ec 	bne.w	801fb12 <cat_service+0x8f3a>
 801793a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801793e:	9304      	str	r3, [sp, #16]
                if (self->length >= get_atcmd_buf_size(self)) {
 8017940:	f7f2 f9f4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017944:	9b04      	ldr	r3, [sp, #16]
 8017946:	429e      	cmp	r6, r3
 8017948:	f0c4 8378 	bcc.w	801c03c <cat_service+0x5464>
                        self->state = CAT_STATE_ERROR;
 801794c:	f7f2 f9ee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017950:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 8017952:	2501      	movs	r5, #1
                        self->state = CAT_STATE_ERROR;
 8017954:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 8017958:	e436      	b.n	80171c8 <cat_service+0x5f0>
 801795a:	bf00      	nop
 801795c:	24009300 	.word	0x24009300
 8017960:	24009240 	.word	0x24009240
        switch (self->state) {
 8017964:	2301      	movs	r3, #1
 8017966:	9301      	str	r3, [sp, #4]
        switch (self->cmd_type) {
 8017968:	f7f2 f9e0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801796c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017970:	08c3      	lsrs	r3, r0, #3
 8017972:	f000 0207 	and.w	r2, r0, #7
 8017976:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801797a:	f993 3000 	ldrsb.w	r3, [r3]
 801797e:	429a      	cmp	r2, r3
 8017980:	db02      	blt.n	8017988 <cat_service+0xdb0>
 8017982:	2b00      	cmp	r3, #0
 8017984:	f047 8664 	bne.w	801f650 <cat_service+0x8a78>
 8017988:	f994 502c 	ldrsb.w	r5, [r4, #44]	; 0x2c
 801798c:	2d01      	cmp	r5, #1
 801798e:	f003 819a 	beq.w	801acc6 <cat_service+0x40ee>
 8017992:	2d02      	cmp	r5, #2
 8017994:	f003 8146 	beq.w	801ac24 <cat_service+0x404c>
 8017998:	2d00      	cmp	r5, #0
 801799a:	f003 80f5 	beq.w	801ab88 <cat_service+0x3fb0>
        return (char*)self->desc->buf;
 801799e:	f7f2 f9c5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80179a2:	08e3      	lsrs	r3, r4, #3
 80179a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80179a8:	f993 2000 	ldrsb.w	r2, [r3]
 80179ac:	f004 0307 	and.w	r3, r4, #7
 80179b0:	3303      	adds	r3, #3
 80179b2:	4293      	cmp	r3, r2
 80179b4:	db02      	blt.n	80179bc <cat_service+0xde4>
 80179b6:	2a00      	cmp	r2, #0
 80179b8:	f047 8751 	bne.w	801f85e <cat_service+0x8c86>
 80179bc:	f8d4 9000 	ldr.w	r9, [r4]
 80179c0:	f109 0008 	add.w	r0, r9, #8
 80179c4:	08c3      	lsrs	r3, r0, #3
 80179c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80179ca:	f993 2000 	ldrsb.w	r2, [r3]
 80179ce:	f000 0307 	and.w	r3, r0, #7
 80179d2:	3303      	adds	r3, #3
 80179d4:	4293      	cmp	r3, r2
 80179d6:	db02      	blt.n	80179de <cat_service+0xe06>
 80179d8:	2a00      	cmp	r2, #0
 80179da:	f047 8477 	bne.w	801f2cc <cat_service+0x86f4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80179de:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 80179e2:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80179e6:	08c3      	lsrs	r3, r0, #3
 80179e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80179ec:	f993 2000 	ldrsb.w	r2, [r3]
 80179f0:	f000 0307 	and.w	r3, r0, #7
 80179f4:	3303      	adds	r3, #3
 80179f6:	4293      	cmp	r3, r2
 80179f8:	db02      	blt.n	8017a00 <cat_service+0xe28>
 80179fa:	2a00      	cmp	r2, #0
 80179fc:	f047 8468 	bne.w	801f2d0 <cat_service+0x86f8>
 8017a00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	f004 860c 	beq.w	801c622 <cat_service+0x5a4a>
 8017a0a:	f7f2 f98f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017a0e:	f109 000c 	add.w	r0, r9, #12
 8017a12:	08c3      	lsrs	r3, r0, #3
 8017a14:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017a18:	f993 2000 	ldrsb.w	r2, [r3]
 8017a1c:	f000 0307 	and.w	r3, r0, #7
 8017a20:	3303      	adds	r3, #3
 8017a22:	4293      	cmp	r3, r2
 8017a24:	db02      	blt.n	8017a2c <cat_service+0xe54>
 8017a26:	2a00      	cmp	r2, #0
 8017a28:	f047 8454 	bne.w	801f2d4 <cat_service+0x86fc>
 8017a2c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017a30:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8017a32:	f7f2 f97b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017a36:	9a04      	ldr	r2, [sp, #16]
 8017a38:	4628      	mov	r0, r5
 8017a3a:	496a      	ldr	r1, [pc, #424]	; (8017be4 <cat_service+0x100c>)
 8017a3c:	f00a ffcb 	bl	80229d6 <strncpy>
        self->position = 0;
 8017a40:	f104 0018 	add.w	r0, r4, #24
 8017a44:	08c3      	lsrs	r3, r0, #3
 8017a46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017a4a:	f993 2000 	ldrsb.w	r2, [r3]
 8017a4e:	f000 0307 	and.w	r3, r0, #7
 8017a52:	3303      	adds	r3, #3
 8017a54:	4293      	cmp	r3, r2
 8017a56:	db02      	blt.n	8017a5e <cat_service+0xe86>
 8017a58:	2a00      	cmp	r2, #0
 8017a5a:	f048 80b3 	bne.w	801fbc4 <cat_service+0x8fec>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8017a5e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8017a62:	2300      	movs	r3, #0
 8017a64:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8017a66:	08c3      	lsrs	r3, r0, #3
 8017a68:	f000 0207 	and.w	r2, r0, #7
 8017a6c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017a70:	f993 3000 	ldrsb.w	r3, [r3]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	db02      	blt.n	8017a7e <cat_service+0xea6>
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f048 80a5 	bne.w	801fbc8 <cat_service+0x8ff0>
        self->write_buf = get_new_line_chars(self);
 8017a7e:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8017a82:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8017a86:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 8017a8a:	08c3      	lsrs	r3, r0, #3
 8017a8c:	f000 0207 	and.w	r2, r0, #7
 8017a90:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017a94:	3203      	adds	r2, #3
 8017a96:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8017a9a:	4b53      	ldr	r3, [pc, #332]	; (8017be8 <cat_service+0x1010>)
        self->write_buf = get_new_line_chars(self);
 8017a9c:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8017a9e:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8017aa0:	db02      	blt.n	8017aa8 <cat_service+0xed0>
 8017aa2:	2900      	cmp	r1, #0
 8017aa4:	f048 8092 	bne.w	801fbcc <cat_service+0x8ff4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8017aa8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8017aac:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8017aae:	08c3      	lsrs	r3, r0, #3
 8017ab0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017ab4:	f993 2000 	ldrsb.w	r2, [r3]
 8017ab8:	f000 0307 	and.w	r3, r0, #7
 8017abc:	3303      	adds	r3, #3
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	db02      	blt.n	8017ac8 <cat_service+0xef0>
 8017ac2:	2a00      	cmp	r2, #0
 8017ac4:	f048 8084 	bne.w	801fbd0 <cat_service+0x8ff8>
        self->write_state_after = state_after;
 8017ac8:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8017acc:	2300      	movs	r3, #0
 8017ace:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8017ad0:	08c3      	lsrs	r3, r0, #3
 8017ad2:	f000 0207 	and.w	r2, r0, #7
 8017ad6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017ada:	f993 3000 	ldrsb.w	r3, [r3]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	db02      	blt.n	8017ae8 <cat_service+0xf10>
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f048 800e 	bne.w	801fb04 <cat_service+0x8f2c>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017ae8:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8017aea:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017aec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8017af0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017af4:	f006 0207 	and.w	r2, r6, #7
 8017af8:	f993 3000 	ldrsb.w	r3, [r3]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	db02      	blt.n	8017b06 <cat_service+0xf2e>
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	f048 8001 	bne.w	801fb08 <cat_service+0x8f30>
 8017b06:	2312      	movs	r3, #18
                s = command_found(self);
 8017b08:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8017b0a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8017b0e:	f7ff bb5b 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017b12:	2301      	movs	r3, #1
 8017b14:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 8017b16:	f7f2 f909 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017b1a:	1d20      	adds	r0, r4, #4
 8017b1c:	08c3      	lsrs	r3, r0, #3
 8017b1e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017b22:	f993 2000 	ldrsb.w	r2, [r3]
 8017b26:	f000 0307 	and.w	r3, r0, #7
 8017b2a:	3303      	adds	r3, #3
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	db02      	blt.n	8017b36 <cat_service+0xf5e>
 8017b30:	2a00      	cmp	r2, #0
 8017b32:	f047 85ef 	bne.w	801f714 <cat_service+0x8b3c>
 8017b36:	6862      	ldr	r2, [r4, #4]
 8017b38:	1d10      	adds	r0, r2, #4
 8017b3a:	08c3      	lsrs	r3, r0, #3
 8017b3c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017b40:	f993 1000 	ldrsb.w	r1, [r3]
 8017b44:	f000 0307 	and.w	r3, r0, #7
 8017b48:	3303      	adds	r3, #3
 8017b4a:	428b      	cmp	r3, r1
 8017b4c:	db02      	blt.n	8017b54 <cat_service+0xf7c>
 8017b4e:	2900      	cmp	r1, #0
 8017b50:	f047 86ec 	bne.w	801f92c <cat_service+0x8d54>
 8017b54:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8017b58:	6853      	ldr	r3, [r2, #4]
 8017b5a:	4648      	mov	r0, r9
 8017b5c:	4798      	blx	r3
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	f002 84fa 	beq.w	801a558 <cat_service+0x3980>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 8017b64:	f7f2 f8e2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017b68:	f006 0207 	and.w	r2, r6, #7
 8017b6c:	08f3      	lsrs	r3, r6, #3
 8017b6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017b72:	f993 3000 	ldrsb.w	r3, [r3]
 8017b76:	429a      	cmp	r2, r3
 8017b78:	db02      	blt.n	8017b80 <cat_service+0xfa8>
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f047 86d8 	bne.w	801f930 <cat_service+0x8d58>
 8017b80:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8017b84:	2b08      	cmp	r3, #8
 8017b86:	f003 82cc 	beq.w	801b122 <cat_service+0x454a>
                self->current_char = to_upper(self->current_char);
 8017b8a:	f7f2 f8cf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017b8e:	f009 0207 	and.w	r2, r9, #7
 8017b92:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8017b96:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	db02      	blt.n	8017ba8 <cat_service+0xfd0>
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	f047 843e 	bne.w	801f424 <cat_service+0x884c>
 8017ba8:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8017bac:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 8017bb0:	2b19      	cmp	r3, #25
 8017bb2:	d803      	bhi.n	8017bbc <cat_service+0xfe4>
 8017bb4:	3d20      	subs	r5, #32
 8017bb6:	f7f2 f8b9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017bba:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 8017bbc:	f7f2 f8b6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017bc0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 8017bc4:	f7f2 f8b2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017bc8:	2d0a      	cmp	r5, #10
 8017bca:	f003 83b2 	beq.w	801b332 <cat_service+0x475a>
 8017bce:	2d0d      	cmp	r5, #13
 8017bd0:	f003 8399 	beq.w	801b306 <cat_service+0x472e>
                self->state = CAT_STATE_ERROR;
 8017bd4:	f7f2 f8aa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017bd8:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 8017bda:	2501      	movs	r5, #1
                self->state = CAT_STATE_ERROR;
 8017bdc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 8017be0:	f7ff baf2 	b.w	80171c8 <cat_service+0x5f0>
 8017be4:	24009200 	.word	0x24009200
 8017be8:	24009240 	.word	0x24009240
        switch (self->state) {
 8017bec:	2301      	movs	r3, #1
 8017bee:	9301      	str	r3, [sp, #4]
        struct cat_command const *cmd = get_command_by_index(self, self->index);
 8017bf0:	f7f2 f89c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017bf4:	f104 030c 	add.w	r3, r4, #12
 8017bf8:	08da      	lsrs	r2, r3, #3
 8017bfa:	f003 0107 	and.w	r1, r3, #7
 8017bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c00:	f102 53dc 	add.w	r3, r2, #461373440	; 0x1b800000
 8017c04:	9207      	str	r2, [sp, #28]
 8017c06:	1cca      	adds	r2, r1, #3
 8017c08:	9106      	str	r1, [sp, #24]
 8017c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	db02      	blt.n	8017c18 <cat_service+0x1040>
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f047 86f3 	bne.w	801f9fe <cat_service+0x8e26>
        assert(index < self->commands_num);
 8017c18:	f104 0320 	add.w	r3, r4, #32
        struct cat_command const *cmd = get_command_by_index(self, self->index);
 8017c1c:	68e5      	ldr	r5, [r4, #12]
        assert(index < self->commands_num);
 8017c1e:	08da      	lsrs	r2, r3, #3
 8017c20:	f003 0107 	and.w	r1, r3, #7
 8017c24:	930c      	str	r3, [sp, #48]	; 0x30
 8017c26:	f102 53dc 	add.w	r3, r2, #461373440	; 0x1b800000
 8017c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8017c2c:	1cca      	adds	r2, r1, #3
 8017c2e:	9109      	str	r1, [sp, #36]	; 0x24
 8017c30:	f993 3000 	ldrsb.w	r3, [r3]
 8017c34:	429a      	cmp	r2, r3
 8017c36:	db02      	blt.n	8017c3e <cat_service+0x1066>
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	f047 873f 	bne.w	801fabc <cat_service+0x8ee4>
 8017c3e:	6a23      	ldr	r3, [r4, #32]
 8017c40:	429d      	cmp	r5, r3
 8017c42:	9305      	str	r3, [sp, #20]
 8017c44:	f087 8740 	bcs.w	801fac8 <cat_service+0x8ef0>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 8017c48:	f7f2 f870 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017c4c:	08e3      	lsrs	r3, r4, #3
 8017c4e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017c52:	f993 2000 	ldrsb.w	r2, [r3]
 8017c56:	f004 0307 	and.w	r3, r4, #7
 8017c5a:	3303      	adds	r3, #3
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	db02      	blt.n	8017c66 <cat_service+0x108e>
 8017c60:	2a00      	cmp	r2, #0
 8017c62:	f047 872e 	bne.w	801fac2 <cat_service+0x8eea>
 8017c66:	6823      	ldr	r3, [r4, #0]
 8017c68:	1d18      	adds	r0, r3, #4
 8017c6a:	9304      	str	r3, [sp, #16]
 8017c6c:	08c3      	lsrs	r3, r0, #3
 8017c6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017c72:	f993 2000 	ldrsb.w	r2, [r3]
 8017c76:	f000 0307 	and.w	r3, r0, #7
 8017c7a:	3303      	adds	r3, #3
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	db02      	blt.n	8017c86 <cat_service+0x10ae>
 8017c80:	2a00      	cmp	r2, #0
 8017c82:	f047 872d 	bne.w	801fae0 <cat_service+0x8f08>
 8017c86:	9904      	ldr	r1, [sp, #16]
 8017c88:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8017c8c:	f1b9 0f00 	cmp.w	r9, #0
 8017c90:	d04b      	beq.n	8017d2a <cat_service+0x1152>
                cmd_group = self->desc->cmd_group[i];
 8017c92:	f7f2 f84b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017c96:	9904      	ldr	r1, [sp, #16]
 8017c98:	08cb      	lsrs	r3, r1, #3
 8017c9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017c9e:	f993 2000 	ldrsb.w	r2, [r3]
 8017ca2:	f001 0307 	and.w	r3, r1, #7
 8017ca6:	3303      	adds	r3, #3
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	db02      	blt.n	8017cb2 <cat_service+0x10da>
 8017cac:	2a00      	cmp	r2, #0
 8017cae:	f047 8490 	bne.w	801f5d2 <cat_service+0x89fa>
 8017cb2:	9b04      	ldr	r3, [sp, #16]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	08da      	lsrs	r2, r3, #3
 8017cb8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017cbc:	f992 1000 	ldrsb.w	r1, [r2]
 8017cc0:	f003 0207 	and.w	r2, r3, #7
 8017cc4:	3203      	adds	r2, #3
 8017cc6:	428a      	cmp	r2, r1
 8017cc8:	db02      	blt.n	8017cd0 <cat_service+0x10f8>
 8017cca:	2900      	cmp	r1, #0
 8017ccc:	f047 8487 	bne.w	801f5de <cat_service+0x8a06>
 8017cd0:	681a      	ldr	r2, [r3, #0]
                if (index >= j + cmd_group->cmd_num) {
 8017cd2:	f102 0008 	add.w	r0, r2, #8
 8017cd6:	08c1      	lsrs	r1, r0, #3
 8017cd8:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017cdc:	f991 c000 	ldrsb.w	ip, [r1]
 8017ce0:	f000 0107 	and.w	r1, r0, #7
 8017ce4:	3103      	adds	r1, #3
 8017ce6:	4561      	cmp	r1, ip
 8017ce8:	db03      	blt.n	8017cf2 <cat_service+0x111a>
 8017cea:	f1bc 0f00 	cmp.w	ip, #0
 8017cee:	f047 8479 	bne.w	801f5e4 <cat_service+0x8a0c>
 8017cf2:	6891      	ldr	r1, [r2, #8]
 8017cf4:	428d      	cmp	r5, r1
 8017cf6:	f082 83ea 	bcs.w	801a4ce <cat_service+0x38f6>
 8017cfa:	46a9      	mov	r9, r5
                return &cmd_group->cmd[index - j];
 8017cfc:	9208      	str	r2, [sp, #32]
 8017cfe:	f7f2 f815 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017d02:	9a08      	ldr	r2, [sp, #32]
 8017d04:	1d10      	adds	r0, r2, #4
 8017d06:	08c3      	lsrs	r3, r0, #3
 8017d08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017d0c:	f993 1000 	ldrsb.w	r1, [r3]
 8017d10:	f000 0307 	and.w	r3, r0, #7
 8017d14:	3303      	adds	r3, #3
 8017d16:	428b      	cmp	r3, r1
 8017d18:	db02      	blt.n	8017d20 <cat_service+0x1148>
 8017d1a:	2900      	cmp	r1, #0
 8017d1c:	f047 849a 	bne.w	801f654 <cat_service+0x8a7c>
 8017d20:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 8017d24:	6853      	ldr	r3, [r2, #4]
 8017d26:	eb03 0989 	add.w	r9, r3, r9, lsl #2
        if (get_cmd_state(self, self->index) != CAT_CMD_STATE_NOT_MATCH) {
 8017d2a:	f7f1 ffff 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017d2e:	4629      	mov	r1, r5
 8017d30:	4620      	mov	r0, r4
 8017d32:	f7f9 fd01 	bl	8011738 <get_cmd_state>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d071      	beq.n	8017e1e <cat_service+0x1246>
                cmd_name_len = strlen(cmd->name);
 8017d3a:	f7f1 fff7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017d3e:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8017d42:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017d46:	f993 2000 	ldrsb.w	r2, [r3]
 8017d4a:	f009 0307 	and.w	r3, r9, #7
 8017d4e:	3303      	adds	r3, #3
 8017d50:	4293      	cmp	r3, r2
 8017d52:	db02      	blt.n	8017d5a <cat_service+0x1182>
 8017d54:	2a00      	cmp	r2, #0
 8017d56:	f047 843f 	bne.w	801f5d8 <cat_service+0x8a00>
 8017d5a:	f8d9 9000 	ldr.w	r9, [r9]
 8017d5e:	4648      	mov	r0, r9
 8017d60:	f7f1 f97e 	bl	8009060 <strlen>
 8017d64:	9008      	str	r0, [sp, #32]
                if (self->length > cmd_name_len) {
 8017d66:	f104 0014 	add.w	r0, r4, #20
 8017d6a:	08c3      	lsrs	r3, r0, #3
 8017d6c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017d70:	f993 1000 	ldrsb.w	r1, [r3]
 8017d74:	f000 0307 	and.w	r3, r0, #7
 8017d78:	3303      	adds	r3, #3
 8017d7a:	428b      	cmp	r3, r1
 8017d7c:	db02      	blt.n	8017d84 <cat_service+0x11ac>
 8017d7e:	2900      	cmp	r1, #0
 8017d80:	f047 8425 	bne.w	801f5ce <cat_service+0x89f6>
 8017d84:	6963      	ldr	r3, [r4, #20]
 8017d86:	9a08      	ldr	r2, [sp, #32]
 8017d88:	930d      	str	r3, [sp, #52]	; 0x34
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	f082 867e 	bcs.w	801aa8c <cat_service+0x3eb4>
        n = i >> 2;
 8017d90:	f7f1 ffcc 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (char*)self->desc->buf;
 8017d94:	9b04      	ldr	r3, [sp, #16]
        k = ((i % 4) << 1);
 8017d96:	0069      	lsls	r1, r5, #1
        return (char*)self->desc->buf;
 8017d98:	f103 0008 	add.w	r0, r3, #8
        n = i >> 2;
 8017d9c:	08ad      	lsrs	r5, r5, #2
        k = ((i % 4) << 1);
 8017d9e:	f001 0106 	and.w	r1, r1, #6
        return (char*)self->desc->buf;
 8017da2:	08c3      	lsrs	r3, r0, #3
 8017da4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017da8:	f993 2000 	ldrsb.w	r2, [r3]
 8017dac:	f000 0307 	and.w	r3, r0, #7
 8017db0:	3303      	adds	r3, #3
 8017db2:	4293      	cmp	r3, r2
 8017db4:	db02      	blt.n	8017dbc <cat_service+0x11e4>
 8017db6:	2a00      	cmp	r2, #0
 8017db8:	f047 838c 	bne.w	801f4d4 <cat_service+0x88fc>
        s = get_atcmd_buf(self)[n];
 8017dbc:	9b04      	ldr	r3, [sp, #16]
 8017dbe:	689b      	ldr	r3, [r3, #8]
 8017dc0:	1958      	adds	r0, r3, r5
 8017dc2:	08c2      	lsrs	r2, r0, #3
 8017dc4:	f000 0c07 	and.w	ip, r0, #7
 8017dc8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017dcc:	f992 2000 	ldrsb.w	r2, [r2]
 8017dd0:	4594      	cmp	ip, r2
 8017dd2:	db02      	blt.n	8017dda <cat_service+0x1202>
 8017dd4:	2a00      	cmp	r2, #0
 8017dd6:	f047 8378 	bne.w	801f4ca <cat_service+0x88f2>
        s &= ~(0x03 << k);
 8017dda:	2203      	movs	r2, #3
 8017ddc:	fa02 f101 	lsl.w	r1, r2, r1
 8017de0:	5d5a      	ldrb	r2, [r3, r5]
 8017de2:	ea22 0201 	bic.w	r2, r2, r1
        get_atcmd_buf(self)[n] = s;
 8017de6:	555a      	strb	r2, [r3, r5]
        if (++self->index >= self->commands_num) {
 8017de8:	9b07      	ldr	r3, [sp, #28]
 8017dea:	9a06      	ldr	r2, [sp, #24]
 8017dec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017df0:	3203      	adds	r2, #3
 8017df2:	f993 3000 	ldrsb.w	r3, [r3]
 8017df6:	429a      	cmp	r2, r3
 8017df8:	db02      	blt.n	8017e00 <cat_service+0x1228>
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	f047 8367 	bne.w	801f4ce <cat_service+0x88f6>
 8017e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017e08:	68e5      	ldr	r5, [r4, #12]
 8017e0a:	3203      	adds	r2, #3
 8017e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8017e10:	429a      	cmp	r2, r3
 8017e12:	db02      	blt.n	8017e1a <cat_service+0x1242>
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	f047 83d7 	bne.w	801f5c8 <cat_service+0x89f0>
 8017e1a:	6a23      	ldr	r3, [r4, #32]
 8017e1c:	9305      	str	r3, [sp, #20]
 8017e1e:	f7f1 ff85 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017e22:	3501      	adds	r5, #1
 8017e24:	9b05      	ldr	r3, [sp, #20]
 8017e26:	429d      	cmp	r5, r3
 8017e28:	f082 8298 	bcs.w	801a35c <cat_service+0x3784>
 8017e2c:	f7f1 ff7e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017e30:	9b07      	ldr	r3, [sp, #28]
 8017e32:	9a06      	ldr	r2, [sp, #24]
 8017e34:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017e38:	3203      	adds	r2, #3
 8017e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	db02      	blt.n	8017e48 <cat_service+0x1270>
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f047 865b 	bne.w	801fafe <cat_service+0x8f26>
 8017e48:	60e5      	str	r5, [r4, #12]
                s = update_command(self);
 8017e4a:	2501      	movs	r5, #1
 8017e4c:	f7ff b9bc 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017e50:	2301      	movs	r3, #1
 8017e52:	9301      	str	r3, [sp, #4]
        uint8_t cmd_state = get_cmd_state(self, self->index);
 8017e54:	f104 090c 	add.w	r9, r4, #12
 8017e58:	f7f1 ff68 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017e5c:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8017e60:	f009 0207 	and.w	r2, r9, #7
 8017e64:	9306      	str	r3, [sp, #24]
 8017e66:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017e6a:	9205      	str	r2, [sp, #20]
 8017e6c:	3203      	adds	r2, #3
 8017e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	db02      	blt.n	8017e7c <cat_service+0x12a4>
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f047 8138 	bne.w	801f0ec <cat_service+0x8514>
 8017e7c:	68e5      	ldr	r5, [r4, #12]
 8017e7e:	4620      	mov	r0, r4
 8017e80:	4629      	mov	r1, r5
 8017e82:	f7f9 fc59 	bl	8011738 <get_cmd_state>
        if (cmd_state != CAT_CMD_STATE_NOT_MATCH) {
 8017e86:	9004      	str	r0, [sp, #16]
 8017e88:	b160      	cbz	r0, 8017ea4 <cat_service+0x12cc>
                if (cmd_state == CAT_CMD_STATE_PARTIAL_MATCH) {
 8017e8a:	f7f1 ff4f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017e8e:	9804      	ldr	r0, [sp, #16]
 8017e90:	2801      	cmp	r0, #1
 8017e92:	f003 8401 	beq.w	801b698 <cat_service+0x4ac0>
 8017e96:	9004      	str	r0, [sp, #16]
                } else if (cmd_state == CAT_CMD_STATE_FULL_MATCH) {
 8017e98:	f7f1 ff48 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017e9c:	9804      	ldr	r0, [sp, #16]
 8017e9e:	2802      	cmp	r0, #2
 8017ea0:	f005 8531 	beq.w	801d906 <cat_service+0x6d2e>
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 8017ea4:	f7f1 ff42 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017ea8:	f104 0020 	add.w	r0, r4, #32
 8017eac:	08c3      	lsrs	r3, r0, #3
 8017eae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017eb2:	f993 2000 	ldrsb.w	r2, [r3]
 8017eb6:	f000 0307 	and.w	r3, r0, #7
 8017eba:	3303      	adds	r3, #3
 8017ebc:	4293      	cmp	r3, r2
 8017ebe:	db02      	blt.n	8017ec6 <cat_service+0x12ee>
 8017ec0:	2a00      	cmp	r2, #0
 8017ec2:	f047 8664 	bne.w	801fb8e <cat_service+0x8fb6>
 8017ec6:	6a23      	ldr	r3, [r4, #32]
 8017ec8:	9304      	str	r3, [sp, #16]
        if (++self->index >= self->commands_num) {
 8017eca:	f7f1 ff2f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017ece:	9b06      	ldr	r3, [sp, #24]
 8017ed0:	9a05      	ldr	r2, [sp, #20]
 8017ed2:	3501      	adds	r5, #1
 8017ed4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017ed8:	3203      	adds	r2, #3
 8017eda:	f993 3000 	ldrsb.w	r3, [r3]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	db02      	blt.n	8017ee8 <cat_service+0x1310>
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	f047 8655 	bne.w	801fb92 <cat_service+0x8fba>
 8017ee8:	9b04      	ldr	r3, [sp, #16]
 8017eea:	60e5      	str	r5, [r4, #12]
 8017eec:	429d      	cmp	r5, r3
 8017eee:	f0c2 8271 	bcc.w	801a3d4 <cat_service+0x37fc>
                if (self->cmd == NULL) {
 8017ef2:	f7f1 ff1b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8017efa:	08c3      	lsrs	r3, r0, #3
 8017efc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017f00:	f993 2000 	ldrsb.w	r2, [r3]
 8017f04:	f000 0307 	and.w	r3, r0, #7
 8017f08:	3303      	adds	r3, #3
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	db02      	blt.n	8017f14 <cat_service+0x133c>
 8017f0e:	2a00      	cmp	r2, #0
 8017f10:	f047 815b 	bne.w	801f1ca <cat_service+0x85f2>
 8017f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	f003 85c7 	beq.w	801baaa <cat_service+0x4ed2>
                        self->state = (self->partial_cntr == 1) ? CAT_STATE_COMMAND_FOUND : CAT_STATE_COMMAND_NOT_FOUND;
 8017f1c:	f7f1 ff06 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017f20:	f104 0010 	add.w	r0, r4, #16
 8017f24:	08c3      	lsrs	r3, r0, #3
 8017f26:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017f2a:	f993 2000 	ldrsb.w	r2, [r3]
 8017f2e:	f000 0307 	and.w	r3, r0, #7
 8017f32:	3303      	adds	r3, #3
 8017f34:	4293      	cmp	r3, r2
 8017f36:	db02      	blt.n	8017f3e <cat_service+0x1366>
 8017f38:	2a00      	cmp	r2, #0
 8017f3a:	f047 838d 	bne.w	801f658 <cat_service+0x8a80>
 8017f3e:	6923      	ldr	r3, [r4, #16]
 8017f40:	2b01      	cmp	r3, #1
 8017f42:	bf0c      	ite	eq
 8017f44:	2506      	moveq	r5, #6
 8017f46:	2507      	movne	r5, #7
 8017f48:	f7f1 fef0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017f4c:	f006 0207 	and.w	r2, r6, #7
 8017f50:	08f3      	lsrs	r3, r6, #3
 8017f52:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017f56:	f993 3000 	ldrsb.w	r3, [r3]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	db02      	blt.n	8017f64 <cat_service+0x138c>
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f047 85c0 	bne.w	801fae4 <cat_service+0x8f0c>
 8017f64:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
                s = search_command(self);
 8017f68:	2501      	movs	r5, #1
 8017f6a:	f7ff b92d 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8017f6e:	2301      	movs	r3, #1
 8017f70:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 8017f72:	f7f1 fedb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017f76:	08e3      	lsrs	r3, r4, #3
 8017f78:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017f7c:	f993 2000 	ldrsb.w	r2, [r3]
 8017f80:	f004 0307 	and.w	r3, r4, #7
 8017f84:	3303      	adds	r3, #3
 8017f86:	4293      	cmp	r3, r2
 8017f88:	db02      	blt.n	8017f90 <cat_service+0x13b8>
 8017f8a:	2a00      	cmp	r2, #0
 8017f8c:	f047 856b 	bne.w	801fa66 <cat_service+0x8e8e>
 8017f90:	f8d4 9000 	ldr.w	r9, [r4]
 8017f94:	f109 0008 	add.w	r0, r9, #8
 8017f98:	08c3      	lsrs	r3, r0, #3
 8017f9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017f9e:	f993 2000 	ldrsb.w	r2, [r3]
 8017fa2:	f000 0307 	and.w	r3, r0, #7
 8017fa6:	3303      	adds	r3, #3
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	db02      	blt.n	8017fb2 <cat_service+0x13da>
 8017fac:	2a00      	cmp	r2, #0
 8017fae:	f047 855d 	bne.w	801fa6c <cat_service+0x8e94>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8017fb2:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 8017fb6:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8017fba:	08c3      	lsrs	r3, r0, #3
 8017fbc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017fc0:	f993 2000 	ldrsb.w	r2, [r3]
 8017fc4:	f000 0307 	and.w	r3, r0, #7
 8017fc8:	3303      	adds	r3, #3
 8017fca:	4293      	cmp	r3, r2
 8017fcc:	db02      	blt.n	8017fd4 <cat_service+0x13fc>
 8017fce:	2a00      	cmp	r2, #0
 8017fd0:	f047 854e 	bne.w	801fa70 <cat_service+0x8e98>
 8017fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	f002 8482 	beq.w	801a8e2 <cat_service+0x3d0a>
 8017fde:	f7f1 fea5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8017fe2:	f109 000c 	add.w	r0, r9, #12
 8017fe6:	08c3      	lsrs	r3, r0, #3
 8017fe8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017fec:	f993 2000 	ldrsb.w	r2, [r3]
 8017ff0:	f000 0307 	and.w	r3, r0, #7
 8017ff4:	3303      	adds	r3, #3
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	db02      	blt.n	8018000 <cat_service+0x1428>
 8017ffa:	2a00      	cmp	r2, #0
 8017ffc:	f047 853a 	bne.w	801fa74 <cat_service+0x8e9c>
 8018000:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018004:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8018006:	f7f1 fe91 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801800a:	9a04      	ldr	r2, [sp, #16]
 801800c:	4628      	mov	r0, r5
 801800e:	49c3      	ldr	r1, [pc, #780]	; (801831c <cat_service+0x1744>)
 8018010:	f00a fce1 	bl	80229d6 <strncpy>
        self->position = 0;
 8018014:	f104 0018 	add.w	r0, r4, #24
 8018018:	08c3      	lsrs	r3, r0, #3
 801801a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801801e:	f993 2000 	ldrsb.w	r2, [r3]
 8018022:	f000 0307 	and.w	r3, r0, #7
 8018026:	3303      	adds	r3, #3
 8018028:	4293      	cmp	r3, r2
 801802a:	db02      	blt.n	8018032 <cat_service+0x145a>
 801802c:	2a00      	cmp	r2, #0
 801802e:	f047 81e5 	bne.w	801f3fc <cat_service+0x8824>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018032:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8018036:	2300      	movs	r3, #0
 8018038:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801803a:	08c3      	lsrs	r3, r0, #3
 801803c:	f000 0207 	and.w	r2, r0, #7
 8018040:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018044:	f993 3000 	ldrsb.w	r3, [r3]
 8018048:	429a      	cmp	r2, r3
 801804a:	db02      	blt.n	8018052 <cat_service+0x147a>
 801804c:	2b00      	cmp	r3, #0
 801804e:	f047 8526 	bne.w	801fa9e <cat_service+0x8ec6>
        self->write_buf = get_new_line_chars(self);
 8018052:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018056:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801805a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801805e:	08c3      	lsrs	r3, r0, #3
 8018060:	f000 0207 	and.w	r2, r0, #7
 8018064:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018068:	3203      	adds	r2, #3
 801806a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801806e:	4bac      	ldr	r3, [pc, #688]	; (8018320 <cat_service+0x1748>)
        self->write_buf = get_new_line_chars(self);
 8018070:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018072:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8018074:	db02      	blt.n	801807c <cat_service+0x14a4>
 8018076:	2900      	cmp	r1, #0
 8018078:	f047 8513 	bne.w	801faa2 <cat_service+0x8eca>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801807c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8018080:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018082:	08c3      	lsrs	r3, r0, #3
 8018084:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018088:	f993 2000 	ldrsb.w	r2, [r3]
 801808c:	f000 0307 	and.w	r3, r0, #7
 8018090:	3303      	adds	r3, #3
 8018092:	4293      	cmp	r3, r2
 8018094:	db02      	blt.n	801809c <cat_service+0x14c4>
 8018096:	2a00      	cmp	r2, #0
 8018098:	f047 8583 	bne.w	801fba2 <cat_service+0x8fca>
        self->write_state_after = state_after;
 801809c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80180a0:	2300      	movs	r3, #0
 80180a2:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80180a4:	08c3      	lsrs	r3, r0, #3
 80180a6:	f000 0207 	and.w	r2, r0, #7
 80180aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80180ae:	f993 3000 	ldrsb.w	r3, [r3]
 80180b2:	429a      	cmp	r2, r3
 80180b4:	db02      	blt.n	80180bc <cat_service+0x14e4>
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f047 8575 	bne.w	801fba6 <cat_service+0x8fce>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80180bc:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 80180be:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80180c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 80180c4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80180c8:	f006 0207 	and.w	r2, r6, #7
 80180cc:	f993 3000 	ldrsb.w	r3, [r3]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	db02      	blt.n	80180da <cat_service+0x1502>
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f047 83d9 	bne.w	801f88c <cat_service+0x8cb4>
 80180da:	2312      	movs	r3, #18
                s = command_not_found(self);
 80180dc:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80180de:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 80180e2:	f7ff b871 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 80180e6:	2301      	movs	r3, #1
 80180e8:	9301      	str	r3, [sp, #4]
        if (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE)
 80180ea:	f7f1 fe1f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80180ee:	9b03      	ldr	r3, [sp, #12]
 80180f0:	9a02      	ldr	r2, [sp, #8]
 80180f2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80180f6:	f993 3000 	ldrsb.w	r3, [r3]
 80180fa:	429a      	cmp	r2, r3
 80180fc:	db02      	blt.n	8018104 <cat_service+0x152c>
 80180fe:	2b00      	cmp	r3, #0
 8018100:	f047 84d9 	bne.w	801fab6 <cat_service+0x8ede>
 8018104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018108:	2b06      	cmp	r3, #6
 801810a:	f002 8198 	beq.w	801a43e <cat_service+0x3866>
                self->state = CAT_STATE_FLUSH_IO_WRITE;
 801810e:	f7f1 fe0d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018112:	f006 0207 	and.w	r2, r6, #7
 8018116:	08f3      	lsrs	r3, r6, #3
 8018118:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801811c:	f993 3000 	ldrsb.w	r3, [r3]
 8018120:	429a      	cmp	r2, r3
 8018122:	db02      	blt.n	801812a <cat_service+0x1552>
 8018124:	2b00      	cmp	r3, #0
 8018126:	f047 84c1 	bne.w	801faac <cat_service+0x8ed4>
 801812a:	2313      	movs	r3, #19
                s = process_io_write_wait(self);
 801812c:	2501      	movs	r5, #1
                self->state = CAT_STATE_FLUSH_IO_WRITE;
 801812e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8018132:	f7ff b849 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8018136:	2301      	movs	r3, #1
 8018138:	9301      	str	r3, [sp, #4]
        if (self->hold_exit_status == 0)
 801813a:	f7f1 fdf7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801813e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8018142:	08c3      	lsrs	r3, r0, #3
 8018144:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018148:	f993 2000 	ldrsb.w	r2, [r3]
 801814c:	f000 0307 	and.w	r3, r0, #7
 8018150:	3303      	adds	r3, #3
 8018152:	4293      	cmp	r3, r2
 8018154:	db02      	blt.n	801815c <cat_service+0x1584>
 8018156:	2a00      	cmp	r2, #0
 8018158:	f047 839b 	bne.w	801f892 <cat_service+0x8cba>
 801815c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801815e:	2d00      	cmp	r5, #0
 8018160:	f002 81f4 	beq.w	801a54c <cat_service+0x3974>
        self->hold_state_flag = false;
 8018164:	f7f1 fde2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018168:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801816c:	08c3      	lsrs	r3, r0, #3
 801816e:	f000 0207 	and.w	r2, r0, #7
 8018172:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018176:	f993 3000 	ldrsb.w	r3, [r3]
 801817a:	429a      	cmp	r2, r3
 801817c:	db02      	blt.n	8018184 <cat_service+0x15ac>
 801817e:	2b00      	cmp	r3, #0
 8018180:	f047 813a 	bne.w	801f3f8 <cat_service+0x8820>
 8018184:	2300      	movs	r3, #0
        if (self->hold_exit_status < 0) {
 8018186:	429d      	cmp	r5, r3
        self->hold_state_flag = false;
 8018188:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (self->hold_exit_status < 0) {
 801818c:	f2c2 83bf 	blt.w	801a90e <cat_service+0x3d36>
        return (char*)self->desc->buf;
 8018190:	f7f1 fdcc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018194:	08e3      	lsrs	r3, r4, #3
 8018196:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801819a:	f993 2000 	ldrsb.w	r2, [r3]
 801819e:	f004 0307 	and.w	r3, r4, #7
 80181a2:	3303      	adds	r3, #3
 80181a4:	4293      	cmp	r3, r2
 80181a6:	db02      	blt.n	80181ae <cat_service+0x15d6>
 80181a8:	2a00      	cmp	r2, #0
 80181aa:	f047 8169 	bne.w	801f480 <cat_service+0x88a8>
 80181ae:	f8d4 9000 	ldr.w	r9, [r4]
 80181b2:	f109 0008 	add.w	r0, r9, #8
 80181b6:	08c3      	lsrs	r3, r0, #3
 80181b8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80181bc:	f993 2000 	ldrsb.w	r2, [r3]
 80181c0:	f000 0307 	and.w	r3, r0, #7
 80181c4:	3303      	adds	r3, #3
 80181c6:	4293      	cmp	r3, r2
 80181c8:	db02      	blt.n	80181d0 <cat_service+0x15f8>
 80181ca:	2a00      	cmp	r2, #0
 80181cc:	f047 8502 	bne.w	801fbd4 <cat_service+0x8ffc>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80181d0:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 80181d4:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80181d8:	08c3      	lsrs	r3, r0, #3
 80181da:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80181de:	f993 2000 	ldrsb.w	r2, [r3]
 80181e2:	f000 0307 	and.w	r3, r0, #7
 80181e6:	3303      	adds	r3, #3
 80181e8:	4293      	cmp	r3, r2
 80181ea:	db02      	blt.n	80181f2 <cat_service+0x161a>
 80181ec:	2a00      	cmp	r2, #0
 80181ee:	f047 84f3 	bne.w	801fbd8 <cat_service+0x9000>
 80181f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	f003 85ab 	beq.w	801bd52 <cat_service+0x517a>
 80181fc:	f7f1 fd96 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018200:	f109 000c 	add.w	r0, r9, #12
 8018204:	08c3      	lsrs	r3, r0, #3
 8018206:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801820a:	f993 2000 	ldrsb.w	r2, [r3]
 801820e:	f000 0307 	and.w	r3, r0, #7
 8018212:	3303      	adds	r3, #3
 8018214:	4293      	cmp	r3, r2
 8018216:	db02      	blt.n	801821e <cat_service+0x1646>
 8018218:	2a00      	cmp	r2, #0
 801821a:	f047 84df 	bne.w	801fbdc <cat_service+0x9004>
 801821e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018222:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 8018224:	f7f1 fd82 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018228:	9a04      	ldr	r2, [sp, #16]
 801822a:	4628      	mov	r0, r5
 801822c:	493d      	ldr	r1, [pc, #244]	; (8018324 <cat_service+0x174c>)
 801822e:	f00a fbd2 	bl	80229d6 <strncpy>
        self->position = 0;
 8018232:	f104 0018 	add.w	r0, r4, #24
 8018236:	08c3      	lsrs	r3, r0, #3
 8018238:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801823c:	f993 2000 	ldrsb.w	r2, [r3]
 8018240:	f000 0307 	and.w	r3, r0, #7
 8018244:	3303      	adds	r3, #3
 8018246:	4293      	cmp	r3, r2
 8018248:	db02      	blt.n	8018250 <cat_service+0x1678>
 801824a:	2a00      	cmp	r2, #0
 801824c:	f047 8212 	bne.w	801f674 <cat_service+0x8a9c>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018250:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8018254:	2300      	movs	r3, #0
 8018256:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018258:	08c3      	lsrs	r3, r0, #3
 801825a:	f000 0207 	and.w	r2, r0, #7
 801825e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018262:	f993 3000 	ldrsb.w	r3, [r3]
 8018266:	429a      	cmp	r2, r3
 8018268:	db02      	blt.n	8018270 <cat_service+0x1698>
 801826a:	2b00      	cmp	r3, #0
 801826c:	f047 8204 	bne.w	801f678 <cat_service+0x8aa0>
        self->write_buf = get_new_line_chars(self);
 8018270:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018274:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8018278:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801827c:	08c3      	lsrs	r3, r0, #3
 801827e:	f000 0207 	and.w	r2, r0, #7
 8018282:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018286:	3203      	adds	r2, #3
 8018288:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801828c:	4b24      	ldr	r3, [pc, #144]	; (8018320 <cat_service+0x1748>)
        self->write_buf = get_new_line_chars(self);
 801828e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018290:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8018292:	db02      	blt.n	801829a <cat_service+0x16c2>
 8018294:	2900      	cmp	r1, #0
 8018296:	f047 81f1 	bne.w	801f67c <cat_service+0x8aa4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801829a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801829e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80182a0:	08c3      	lsrs	r3, r0, #3
 80182a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80182a6:	f993 2000 	ldrsb.w	r2, [r3]
 80182aa:	f000 0307 	and.w	r3, r0, #7
 80182ae:	3303      	adds	r3, #3
 80182b0:	4293      	cmp	r3, r2
 80182b2:	db02      	blt.n	80182ba <cat_service+0x16e2>
 80182b4:	2a00      	cmp	r2, #0
 80182b6:	f047 81e3 	bne.w	801f680 <cat_service+0x8aa8>
        self->write_state_after = state_after;
 80182ba:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 80182be:	2300      	movs	r3, #0
 80182c0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80182c2:	08c3      	lsrs	r3, r0, #3
 80182c4:	f000 0207 	and.w	r2, r0, #7
 80182c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80182cc:	f993 3000 	ldrsb.w	r3, [r3]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	db02      	blt.n	80182da <cat_service+0x1702>
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	f047 80b4 	bne.w	801f442 <cat_service+0x886a>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80182da:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 80182dc:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80182de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 80182e2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80182e6:	f006 0207 	and.w	r2, r6, #7
 80182ea:	f993 3000 	ldrsb.w	r3, [r3]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	db02      	blt.n	80182f8 <cat_service+0x1720>
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	f047 80a7 	bne.w	801f446 <cat_service+0x886e>
 80182f8:	2312      	movs	r3, #18
                s = process_hold_state(self);
 80182fa:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80182fc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8018300:	f7fe bf62 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8018304:	2301      	movs	r3, #1
 8018306:	9301      	str	r3, [sp, #4]
                s = process_read_loop(self, CAT_FSM_TYPE_ATCMD);
 8018308:	f7f1 fd10 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801830c:	2100      	movs	r1, #0
 801830e:	4620      	mov	r0, r4
 8018310:	f7fc ff06 	bl	8015120 <process_read_loop>
 8018314:	4605      	mov	r5, r0
                break;
 8018316:	f7fe bf57 	b.w	80171c8 <cat_service+0x5f0>
 801831a:	bf00      	nop
 801831c:	24009200 	.word	0x24009200
 8018320:	24009240 	.word	0x24009240
 8018324:	24009300 	.word	0x24009300
        switch (self->state) {
 8018328:	2301      	movs	r3, #1
 801832a:	9301      	str	r3, [sp, #4]
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 801832c:	f7f1 fcfe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018330:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018334:	08c3      	lsrs	r3, r0, #3
 8018336:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801833a:	f993 2000 	ldrsb.w	r2, [r3]
 801833e:	f000 0307 	and.w	r3, r0, #7
 8018342:	3303      	adds	r3, #3
 8018344:	4293      	cmp	r3, r2
 8018346:	db02      	blt.n	801834e <cat_service+0x1776>
 8018348:	2a00      	cmp	r2, #0
 801834a:	f047 8075 	bne.w	801f438 <cat_service+0x8860>
 801834e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018350:	f100 0208 	add.w	r2, r0, #8
 8018354:	08d3      	lsrs	r3, r2, #3
 8018356:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801835a:	f993 1000 	ldrsb.w	r1, [r3]
 801835e:	f002 0307 	and.w	r3, r2, #7
 8018362:	3303      	adds	r3, #3
 8018364:	428b      	cmp	r3, r1
 8018366:	db02      	blt.n	801836e <cat_service+0x1796>
 8018368:	2900      	cmp	r1, #0
 801836a:	f047 817d 	bne.w	801f668 <cat_service+0x8a90>
        return (char*)self->desc->buf;
 801836e:	08e3      	lsrs	r3, r4, #3
 8018370:	f004 0207 	and.w	r2, r4, #7
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 8018374:	6885      	ldr	r5, [r0, #8]
        return (char*)self->desc->buf;
 8018376:	9307      	str	r3, [sp, #28]
 8018378:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801837c:	9206      	str	r2, [sp, #24]
 801837e:	3203      	adds	r2, #3
 8018380:	f993 3000 	ldrsb.w	r3, [r3]
 8018384:	429a      	cmp	r2, r3
 8018386:	db02      	blt.n	801838e <cat_service+0x17b6>
 8018388:	2b00      	cmp	r3, #0
 801838a:	f047 8170 	bne.w	801f66e <cat_service+0x8a96>
 801838e:	6821      	ldr	r1, [r4, #0]
 8018390:	f101 0208 	add.w	r2, r1, #8
 8018394:	08d3      	lsrs	r3, r2, #3
 8018396:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801839a:	f993 c000 	ldrsb.w	ip, [r3]
 801839e:	f002 0307 	and.w	r3, r2, #7
 80183a2:	3303      	adds	r3, #3
 80183a4:	4563      	cmp	r3, ip
 80183a6:	db03      	blt.n	80183b0 <cat_service+0x17d8>
 80183a8:	f1bc 0f00 	cmp.w	ip, #0
 80183ac:	f047 8156 	bne.w	801f65c <cat_service+0x8a84>
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 80183b0:	f104 0214 	add.w	r2, r4, #20
        return (char*)self->desc->buf;
 80183b4:	6889      	ldr	r1, [r1, #8]
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 80183b6:	08d3      	lsrs	r3, r2, #3
 80183b8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80183bc:	f993 c000 	ldrsb.w	ip, [r3]
 80183c0:	f002 0307 	and.w	r3, r2, #7
 80183c4:	3303      	adds	r3, #3
 80183c6:	4563      	cmp	r3, ip
 80183c8:	db03      	blt.n	80183d2 <cat_service+0x17fa>
 80183ca:	f1bc 0f00 	cmp.w	ip, #0
 80183ce:	f047 8148 	bne.w	801f662 <cat_service+0x8a8a>
 80183d2:	f104 0c0c 	add.w	ip, r4, #12
 80183d6:	6962      	ldr	r2, [r4, #20]
 80183d8:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80183dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80183e0:	f993 e000 	ldrsb.w	lr, [r3]
 80183e4:	f00c 0307 	and.w	r3, ip, #7
 80183e8:	3303      	adds	r3, #3
 80183ea:	4573      	cmp	r3, lr
 80183ec:	db03      	blt.n	80183f6 <cat_service+0x181e>
 80183ee:	f1be 0f00 	cmp.w	lr, #0
 80183f2:	f047 8023 	bne.w	801f43c <cat_service+0x8864>
 80183f6:	68e3      	ldr	r3, [r4, #12]
 80183f8:	47a8      	blx	r5
 80183fa:	2804      	cmp	r0, #4
 80183fc:	f207 84dc 	bhi.w	801fdb8 <cat_service+0x91e0>
 8018400:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018404:	02060209 	.word	0x02060209
 8018408:	02090206 	.word	0x02090206
 801840c:	037f      	.short	0x037f
        switch (self->state) {
 801840e:	2301      	movs	r3, #1
 8018410:	9301      	str	r3, [sp, #4]
                s = format_test_args(self, CAT_FSM_TYPE_ATCMD);
 8018412:	f7f1 fc8b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018416:	2100      	movs	r1, #0
 8018418:	4620      	mov	r0, r4
 801841a:	f7fc fbf9 	bl	8014c10 <format_test_args>
 801841e:	4605      	mov	r5, r0
                break;
 8018420:	f7fe bed2 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8018424:	2301      	movs	r3, #1
 8018426:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 8018428:	f7f1 fc80 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801842c:	1d20      	adds	r0, r4, #4
 801842e:	08c3      	lsrs	r3, r0, #3
 8018430:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018434:	f993 2000 	ldrsb.w	r2, [r3]
 8018438:	f000 0307 	and.w	r3, r0, #7
 801843c:	3303      	adds	r3, #3
 801843e:	4293      	cmp	r3, r2
 8018440:	db02      	blt.n	8018448 <cat_service+0x1870>
 8018442:	2a00      	cmp	r2, #0
 8018444:	f046 87f4 	bne.w	801f430 <cat_service+0x8858>
 8018448:	6862      	ldr	r2, [r4, #4]
 801844a:	1d10      	adds	r0, r2, #4
 801844c:	08c3      	lsrs	r3, r0, #3
 801844e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018452:	f993 1000 	ldrsb.w	r1, [r3]
 8018456:	f000 0307 	and.w	r3, r0, #7
 801845a:	3303      	adds	r3, #3
 801845c:	428b      	cmp	r3, r1
 801845e:	db02      	blt.n	8018466 <cat_service+0x188e>
 8018460:	2900      	cmp	r1, #0
 8018462:	f046 87e7 	bne.w	801f434 <cat_service+0x885c>
 8018466:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 801846a:	6853      	ldr	r3, [r2, #4]
 801846c:	4648      	mov	r0, r9
 801846e:	4798      	blx	r3
 8018470:	2800      	cmp	r0, #0
 8018472:	f002 8074 	beq.w	801a55e <cat_service+0x3986>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 8018476:	f7f1 fc59 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801847a:	f006 0207 	and.w	r2, r6, #7
 801847e:	08f3      	lsrs	r3, r6, #3
 8018480:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018484:	f993 3000 	ldrsb.w	r3, [r3]
 8018488:	429a      	cmp	r2, r3
 801848a:	db02      	blt.n	8018492 <cat_service+0x18ba>
 801848c:	2b00      	cmp	r3, #0
 801848e:	f046 87cc 	bne.w	801f42a <cat_service+0x8852>
 8018492:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8018496:	2b08      	cmp	r3, #8
 8018498:	f002 85df 	beq.w	801b05a <cat_service+0x4482>
                self->current_char = to_upper(self->current_char);
 801849c:	f7f1 fc46 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184a0:	f009 0207 	and.w	r2, r9, #7
 80184a4:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 80184a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80184ac:	f993 3000 	ldrsb.w	r3, [r3]
 80184b0:	429a      	cmp	r2, r3
 80184b2:	db02      	blt.n	80184ba <cat_service+0x18e2>
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	f047 82b1 	bne.w	801fa1c <cat_service+0x8e44>
 80184ba:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 80184be:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80184c2:	2b19      	cmp	r3, #25
 80184c4:	d803      	bhi.n	80184ce <cat_service+0x18f6>
 80184c6:	3d20      	subs	r5, #32
 80184c8:	f7f1 fc30 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184cc:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 80184ce:	f7f1 fc2d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184d2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 80184d6:	f7f1 fc29 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184da:	2d0a      	cmp	r5, #10
 80184dc:	f003 8024 	beq.w	801b528 <cat_service+0x4950>
 80184e0:	2d0d      	cmp	r5, #13
 80184e2:	f003 800b 	beq.w	801b4fc <cat_service+0x4924>
                self->state = CAT_STATE_ERROR;
 80184e6:	f7f1 fc21 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184ea:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 80184ec:	2501      	movs	r5, #1
                self->state = CAT_STATE_ERROR;
 80184ee:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 80184f2:	f7fe be69 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 80184f6:	2301      	movs	r3, #1
 80184f8:	9301      	str	r3, [sp, #4]
        switch (self->cmd->run(self->cmd)) {
 80184fa:	f7f1 fc17 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80184fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018502:	08c3      	lsrs	r3, r0, #3
 8018504:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018508:	f993 2000 	ldrsb.w	r2, [r3]
 801850c:	f000 0307 	and.w	r3, r0, #7
 8018510:	3303      	adds	r3, #3
 8018512:	4293      	cmp	r3, r2
 8018514:	db02      	blt.n	801851c <cat_service+0x1944>
 8018516:	2a00      	cmp	r2, #0
 8018518:	f047 8123 	bne.w	801f762 <cat_service+0x8b8a>
 801851c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801851e:	f100 0210 	add.w	r2, r0, #16
 8018522:	08d3      	lsrs	r3, r2, #3
 8018524:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018528:	f993 1000 	ldrsb.w	r1, [r3]
 801852c:	f002 0307 	and.w	r3, r2, #7
 8018530:	3303      	adds	r3, #3
 8018532:	428b      	cmp	r3, r1
 8018534:	db02      	blt.n	801853c <cat_service+0x1964>
 8018536:	2900      	cmp	r1, #0
 8018538:	f047 81f0 	bne.w	801f91c <cat_service+0x8d44>
 801853c:	6903      	ldr	r3, [r0, #16]
 801853e:	4798      	blx	r3
 8018540:	2807      	cmp	r0, #7
 8018542:	f201 82d1 	bhi.w	8019ae8 <cat_service+0x2f10>
 8018546:	e8df f010 	tbh	[pc, r0, lsl #1]
 801854a:	0222      	.short	0x0222
 801854c:	021f021f 	.word	0x021f021f
 8018550:	0a990222 	.word	0x0a990222
 8018554:	0acf0acf 	.word	0x0acf0acf
 8018558:	0b89      	.short	0x0b89
        switch (self->state) {
 801855a:	2301      	movs	r3, #1
 801855c:	9301      	str	r3, [sp, #4]
                s = process_test_loop(self, CAT_FSM_TYPE_ATCMD);
 801855e:	f7f1 fbe5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018562:	2100      	movs	r1, #0
 8018564:	4620      	mov	r0, r4
 8018566:	f7fd faef 	bl	8015b48 <process_test_loop>
 801856a:	4605      	mov	r5, r0
                break;
 801856c:	f7fe be2c 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8018570:	2301      	movs	r3, #1
 8018572:	9301      	str	r3, [sp, #4]
        self->cmd = get_command_by_index(self, self->index);
 8018574:	f7f1 fbda 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018578:	f104 000c 	add.w	r0, r4, #12
 801857c:	08c3      	lsrs	r3, r0, #3
 801857e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018582:	f993 2000 	ldrsb.w	r2, [r3]
 8018586:	f000 0307 	and.w	r3, r0, #7
 801858a:	3303      	adds	r3, #3
 801858c:	4293      	cmp	r3, r2
 801858e:	db02      	blt.n	8018596 <cat_service+0x19be>
 8018590:	2a00      	cmp	r2, #0
 8018592:	f047 80fc 	bne.w	801f78e <cat_service+0x8bb6>
        assert(index < self->commands_num);
 8018596:	f104 0020 	add.w	r0, r4, #32
        self->cmd = get_command_by_index(self, self->index);
 801859a:	68e3      	ldr	r3, [r4, #12]
 801859c:	9304      	str	r3, [sp, #16]
        assert(index < self->commands_num);
 801859e:	08c3      	lsrs	r3, r0, #3
 80185a0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80185a4:	f993 2000 	ldrsb.w	r2, [r3]
 80185a8:	f000 0307 	and.w	r3, r0, #7
 80185ac:	3303      	adds	r3, #3
 80185ae:	4293      	cmp	r3, r2
 80185b0:	db02      	blt.n	80185b8 <cat_service+0x19e0>
 80185b2:	2a00      	cmp	r2, #0
 80185b4:	f047 80ed 	bne.w	801f792 <cat_service+0x8bba>
 80185b8:	6a23      	ldr	r3, [r4, #32]
 80185ba:	9a04      	ldr	r2, [sp, #16]
 80185bc:	9308      	str	r3, [sp, #32]
 80185be:	429a      	cmp	r2, r3
 80185c0:	f087 8282 	bcs.w	801fac8 <cat_service+0x8ef0>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 80185c4:	f7f1 fbb2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80185c8:	f004 0207 	and.w	r2, r4, #7
 80185cc:	08e3      	lsrs	r3, r4, #3
 80185ce:	9206      	str	r2, [sp, #24]
 80185d0:	3203      	adds	r2, #3
 80185d2:	9307      	str	r3, [sp, #28]
 80185d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80185d8:	f993 3000 	ldrsb.w	r3, [r3]
 80185dc:	429a      	cmp	r2, r3
 80185de:	db02      	blt.n	80185e6 <cat_service+0x1a0e>
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f047 80d8 	bne.w	801f796 <cat_service+0x8bbe>
 80185e6:	f8d4 9000 	ldr.w	r9, [r4]
 80185ea:	f109 0004 	add.w	r0, r9, #4
 80185ee:	08c3      	lsrs	r3, r0, #3
 80185f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80185f4:	f993 2000 	ldrsb.w	r2, [r3]
 80185f8:	f000 0307 	and.w	r3, r0, #7
 80185fc:	3303      	adds	r3, #3
 80185fe:	4293      	cmp	r3, r2
 8018600:	db02      	blt.n	8018608 <cat_service+0x1a30>
 8018602:	2a00      	cmp	r2, #0
 8018604:	f047 80be 	bne.w	801f784 <cat_service+0x8bac>
 8018608:	f8d9 5004 	ldr.w	r5, [r9, #4]
 801860c:	2d00      	cmp	r5, #0
 801860e:	f004 83af 	beq.w	801cd70 <cat_service+0x6198>
                cmd_group = self->desc->cmd_group[i];
 8018612:	f7f1 fb8b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018616:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801861a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801861e:	f993 2000 	ldrsb.w	r2, [r3]
 8018622:	f009 0307 	and.w	r3, r9, #7
 8018626:	3303      	adds	r3, #3
 8018628:	4293      	cmp	r3, r2
 801862a:	db02      	blt.n	8018632 <cat_service+0x1a5a>
 801862c:	2a00      	cmp	r2, #0
 801862e:	f047 80ab 	bne.w	801f788 <cat_service+0x8bb0>
 8018632:	f8d9 3000 	ldr.w	r3, [r9]
 8018636:	08da      	lsrs	r2, r3, #3
 8018638:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801863c:	f992 1000 	ldrsb.w	r1, [r2]
 8018640:	f003 0207 	and.w	r2, r3, #7
 8018644:	3203      	adds	r2, #3
 8018646:	428a      	cmp	r2, r1
 8018648:	db02      	blt.n	8018650 <cat_service+0x1a78>
 801864a:	2900      	cmp	r1, #0
 801864c:	f047 8097 	bne.w	801f77e <cat_service+0x8ba6>
 8018650:	681a      	ldr	r2, [r3, #0]
                if (index >= j + cmd_group->cmd_num) {
 8018652:	f102 0008 	add.w	r0, r2, #8
 8018656:	08c1      	lsrs	r1, r0, #3
 8018658:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801865c:	f991 c000 	ldrsb.w	ip, [r1]
 8018660:	f000 0107 	and.w	r1, r0, #7
 8018664:	3103      	adds	r1, #3
 8018666:	4561      	cmp	r1, ip
 8018668:	db03      	blt.n	8018672 <cat_service+0x1a9a>
 801866a:	f1bc 0f00 	cmp.w	ip, #0
 801866e:	f046 8767 	bne.w	801f540 <cat_service+0x8968>
 8018672:	6891      	ldr	r1, [r2, #8]
 8018674:	9804      	ldr	r0, [sp, #16]
 8018676:	4288      	cmp	r0, r1
 8018678:	f081 86ea 	bcs.w	801a450 <cat_service+0x3878>
 801867c:	4605      	mov	r5, r0
                return &cmd_group->cmd[index - j];
 801867e:	9205      	str	r2, [sp, #20]
 8018680:	f7f1 fb54 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018684:	9a05      	ldr	r2, [sp, #20]
 8018686:	1d10      	adds	r0, r2, #4
 8018688:	08c3      	lsrs	r3, r0, #3
 801868a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801868e:	f993 1000 	ldrsb.w	r1, [r3]
 8018692:	f000 0307 	and.w	r3, r0, #7
 8018696:	3303      	adds	r3, #3
 8018698:	428b      	cmp	r3, r1
 801869a:	db02      	blt.n	80186a2 <cat_service+0x1aca>
 801869c:	2900      	cmp	r1, #0
 801869e:	f046 8751 	bne.w	801f544 <cat_service+0x896c>
 80186a2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80186a6:	6851      	ldr	r1, [r2, #4]
 80186a8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80186ac:	9105      	str	r1, [sp, #20]
        self->cmd = get_command_by_index(self, self->index);
 80186ae:	f7f1 fb3d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80186b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80186b6:	9905      	ldr	r1, [sp, #20]
 80186b8:	08c3      	lsrs	r3, r0, #3
 80186ba:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80186be:	f993 2000 	ldrsb.w	r2, [r3]
 80186c2:	f000 0307 	and.w	r3, r0, #7
 80186c6:	3303      	adds	r3, #3
 80186c8:	4293      	cmp	r3, r2
 80186ca:	db02      	blt.n	80186d2 <cat_service+0x1afa>
 80186cc:	2a00      	cmp	r2, #0
 80186ce:	f046 85ee 	bne.w	801f2ae <cat_service+0x86d6>
        switch (self->cmd_type) {
 80186d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        self->cmd = get_command_by_index(self, self->index);
 80186d6:	6261      	str	r1, [r4, #36]	; 0x24
        switch (self->cmd_type) {
 80186d8:	08c3      	lsrs	r3, r0, #3
 80186da:	f000 0207 	and.w	r2, r0, #7
 80186de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80186e2:	f993 3000 	ldrsb.w	r3, [r3]
 80186e6:	429a      	cmp	r2, r3
 80186e8:	db02      	blt.n	80186f0 <cat_service+0x1b18>
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	f047 817e 	bne.w	801f9ec <cat_service+0x8e14>
 80186f0:	f994 502c 	ldrsb.w	r5, [r4, #44]	; 0x2c
 80186f4:	1c6b      	adds	r3, r5, #1
 80186f6:	2b05      	cmp	r3, #5
 80186f8:	f207 82a3 	bhi.w	801fc42 <cat_service+0x906a>
 80186fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018700:	091108c9 	.word	0x091108c9
 8018704:	082006c8 	.word	0x082006c8
 8018708:	06930772 	.word	0x06930772
        switch (self->state) {
 801870c:	2301      	movs	r3, #1
 801870e:	9301      	str	r3, [sp, #4]
                start_processing_format_test_args(self, CAT_FSM_TYPE_ATCMD);
 8018710:	f7f1 fb0c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018714:	2100      	movs	r1, #0
 8018716:	4620      	mov	r0, r4
                s = CAT_STATUS_BUSY;
 8018718:	2501      	movs	r5, #1
                start_processing_format_test_args(self, CAT_FSM_TYPE_ATCMD);
 801871a:	f7fa fed1 	bl	80134c0 <start_processing_format_test_args>
                break;
 801871e:	f7fe bd53 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 8018722:	2301      	movs	r3, #1
 8018724:	9301      	str	r3, [sp, #4]
        if (self->io->read(&self->current_char) == 0)
 8018726:	f7f1 fb01 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801872a:	1d20      	adds	r0, r4, #4
 801872c:	08c3      	lsrs	r3, r0, #3
 801872e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018732:	f993 2000 	ldrsb.w	r2, [r3]
 8018736:	f000 0307 	and.w	r3, r0, #7
 801873a:	3303      	adds	r3, #3
 801873c:	4293      	cmp	r3, r2
 801873e:	db02      	blt.n	8018746 <cat_service+0x1b6e>
 8018740:	2a00      	cmp	r2, #0
 8018742:	f047 815f 	bne.w	801fa04 <cat_service+0x8e2c>
 8018746:	6862      	ldr	r2, [r4, #4]
 8018748:	1d10      	adds	r0, r2, #4
 801874a:	08c3      	lsrs	r3, r0, #3
 801874c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018750:	f993 1000 	ldrsb.w	r1, [r3]
 8018754:	f000 0307 	and.w	r3, r0, #7
 8018758:	3303      	adds	r3, #3
 801875a:	428b      	cmp	r3, r1
 801875c:	db02      	blt.n	8018764 <cat_service+0x1b8c>
 801875e:	2900      	cmp	r1, #0
 8018760:	f047 8168 	bne.w	801fa34 <cat_service+0x8e5c>
 8018764:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8018768:	6853      	ldr	r3, [r2, #4]
 801876a:	4648      	mov	r0, r9
 801876c:	4798      	blx	r3
 801876e:	2800      	cmp	r0, #0
 8018770:	f001 865f 	beq.w	801a432 <cat_service+0x385a>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 8018774:	f7f1 fada 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018778:	f006 0207 	and.w	r2, r6, #7
 801877c:	08f3      	lsrs	r3, r6, #3
 801877e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018782:	f993 3000 	ldrsb.w	r3, [r3]
 8018786:	429a      	cmp	r2, r3
 8018788:	db02      	blt.n	8018790 <cat_service+0x1bb8>
 801878a:	2b00      	cmp	r3, #0
 801878c:	f047 8154 	bne.w	801fa38 <cat_service+0x8e60>
 8018790:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8018794:	2b08      	cmp	r3, #8
 8018796:	f002 8499 	beq.w	801b0cc <cat_service+0x44f4>
                self->current_char = to_upper(self->current_char);
 801879a:	f7f1 fac7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801879e:	f009 0207 	and.w	r2, r9, #7
 80187a2:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 80187a6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80187aa:	f993 3000 	ldrsb.w	r3, [r3]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	db02      	blt.n	80187b8 <cat_service+0x1be0>
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	f047 813b 	bne.w	801fa2e <cat_service+0x8e56>
 80187b8:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 80187bc:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80187c0:	2b19      	cmp	r3, #25
 80187c2:	d803      	bhi.n	80187cc <cat_service+0x1bf4>
 80187c4:	3d20      	subs	r5, #32
 80187c6:	f7f1 fab1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80187ca:	b2ed      	uxtb	r5, r5
                self->current_char = to_upper(self->current_char);
 80187cc:	f7f1 faae 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80187d0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
        switch (self->current_char) {
 80187d4:	f7f1 faaa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80187d8:	2d0a      	cmp	r5, #10
 80187da:	f002 85e5 	beq.w	801b3a8 <cat_service+0x47d0>
 80187de:	2d0d      	cmp	r5, #13
 80187e0:	f041 8621 	bne.w	801a426 <cat_service+0x384e>
                self->cr_flag = true;
 80187e4:	f7f1 faa2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80187e8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80187ec:	08c3      	lsrs	r3, r0, #3
 80187ee:	f000 0207 	and.w	r2, r0, #7
 80187f2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80187f6:	f993 3000 	ldrsb.w	r3, [r3]
 80187fa:	429a      	cmp	r2, r3
 80187fc:	db02      	blt.n	8018804 <cat_service+0x1c2c>
 80187fe:	2b00      	cmp	r3, #0
 8018800:	f047 81ff 	bne.w	801fc02 <cat_service+0x902a>
 8018804:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 8018806:	4605      	mov	r5, r0
                self->cr_flag = true;
 8018808:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 801880c:	f7fe bcdc 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 8018810:	2501      	movs	r5, #1
 8018812:	f7fe bcd9 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 8018816:	f7f1 fa89 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801881a:	9b07      	ldr	r3, [sp, #28]
 801881c:	9a06      	ldr	r2, [sp, #24]
 801881e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018822:	3203      	adds	r2, #3
 8018824:	f993 3000 	ldrsb.w	r3, [r3]
 8018828:	429a      	cmp	r2, r3
 801882a:	db02      	blt.n	8018832 <cat_service+0x1c5a>
 801882c:	2b00      	cmp	r3, #0
 801882e:	f046 85d3 	bne.w	801f3d8 <cat_service+0x8800>
 8018832:	f8d4 9000 	ldr.w	r9, [r4]
 8018836:	f109 0008 	add.w	r0, r9, #8
 801883a:	08c3      	lsrs	r3, r0, #3
 801883c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018840:	f993 2000 	ldrsb.w	r2, [r3]
 8018844:	f000 0307 	and.w	r3, r0, #7
 8018848:	3303      	adds	r3, #3
 801884a:	4293      	cmp	r3, r2
 801884c:	db02      	blt.n	8018854 <cat_service+0x1c7c>
 801884e:	2a00      	cmp	r2, #0
 8018850:	f046 85c5 	bne.w	801f3de <cat_service+0x8806>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8018854:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 8018858:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801885c:	08c3      	lsrs	r3, r0, #3
 801885e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018862:	f993 2000 	ldrsb.w	r2, [r3]
 8018866:	f000 0307 	and.w	r3, r0, #7
 801886a:	3303      	adds	r3, #3
 801886c:	4293      	cmp	r3, r2
 801886e:	db02      	blt.n	8018876 <cat_service+0x1c9e>
 8018870:	2a00      	cmp	r2, #0
 8018872:	f046 85cb 	bne.w	801f40c <cat_service+0x8834>
 8018876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801887a:	2b00      	cmp	r3, #0
 801887c:	f003 86ee 	beq.w	801c65c <cat_service+0x5a84>
 8018880:	f7f1 fa54 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018884:	f109 000c 	add.w	r0, r9, #12
 8018888:	08c3      	lsrs	r3, r0, #3
 801888a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801888e:	f993 2000 	ldrsb.w	r2, [r3]
 8018892:	f000 0307 	and.w	r3, r0, #7
 8018896:	3303      	adds	r3, #3
 8018898:	4293      	cmp	r3, r2
 801889a:	db02      	blt.n	80188a2 <cat_service+0x1cca>
 801889c:	2a00      	cmp	r2, #0
 801889e:	f046 85b7 	bne.w	801f410 <cat_service+0x8838>
 80188a2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80188a6:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 80188a8:	f7f1 fa40 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80188ac:	9a04      	ldr	r2, [sp, #16]
 80188ae:	4628      	mov	r0, r5
 80188b0:	49af      	ldr	r1, [pc, #700]	; (8018b70 <cat_service+0x1f98>)
 80188b2:	f00a f890 	bl	80229d6 <strncpy>
        self->position = 0;
 80188b6:	f104 0018 	add.w	r0, r4, #24
 80188ba:	08c3      	lsrs	r3, r0, #3
 80188bc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80188c0:	f993 2000 	ldrsb.w	r2, [r3]
 80188c4:	f000 0307 	and.w	r3, r0, #7
 80188c8:	3303      	adds	r3, #3
 80188ca:	4293      	cmp	r3, r2
 80188cc:	db02      	blt.n	80188d4 <cat_service+0x1cfc>
 80188ce:	2a00      	cmp	r2, #0
 80188d0:	f046 859a 	bne.w	801f408 <cat_service+0x8830>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80188d4:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80188dc:	08c3      	lsrs	r3, r0, #3
 80188de:	f000 0207 	and.w	r2, r0, #7
 80188e2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80188e6:	f993 3000 	ldrsb.w	r3, [r3]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	db02      	blt.n	80188f4 <cat_service+0x1d1c>
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	f046 8590 	bne.w	801f414 <cat_service+0x883c>
        self->write_buf = get_new_line_chars(self);
 80188f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 80188f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80188fc:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 8018900:	08c3      	lsrs	r3, r0, #3
 8018902:	f000 0207 	and.w	r2, r0, #7
 8018906:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801890a:	3203      	adds	r2, #3
 801890c:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018910:	4b98      	ldr	r3, [pc, #608]	; (8018b74 <cat_service+0x1f9c>)
        self->write_buf = get_new_line_chars(self);
 8018912:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018914:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8018916:	db02      	blt.n	801891e <cat_service+0x1d46>
 8018918:	2900      	cmp	r1, #0
 801891a:	f046 857d 	bne.w	801f418 <cat_service+0x8840>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801891e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8018922:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018924:	08c3      	lsrs	r3, r0, #3
 8018926:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801892a:	f993 2000 	ldrsb.w	r2, [r3]
 801892e:	f000 0307 	and.w	r3, r0, #7
 8018932:	3303      	adds	r3, #3
 8018934:	4293      	cmp	r3, r2
 8018936:	db02      	blt.n	801893e <cat_service+0x1d66>
 8018938:	2a00      	cmp	r2, #0
 801893a:	f046 856f 	bne.w	801f41c <cat_service+0x8844>
        self->write_state_after = state_after;
 801893e:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018942:	2300      	movs	r3, #0
 8018944:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8018946:	08c3      	lsrs	r3, r0, #3
 8018948:	f000 0207 	and.w	r2, r0, #7
 801894c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018950:	f993 3000 	ldrsb.w	r3, [r3]
 8018954:	429a      	cmp	r2, r3
 8018956:	db02      	blt.n	801895e <cat_service+0x1d86>
 8018958:	2b00      	cmp	r3, #0
 801895a:	f046 8561 	bne.w	801f420 <cat_service+0x8848>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801895e:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8018960:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018962:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8018966:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801896a:	f006 0207 	and.w	r2, r6, #7
 801896e:	f993 3000 	ldrsb.w	r3, [r3]
 8018972:	429a      	cmp	r2, r3
 8018974:	db02      	blt.n	801897c <cat_service+0x1da4>
 8018976:	2b00      	cmp	r3, #0
 8018978:	f046 85f3 	bne.w	801f562 <cat_service+0x898a>
 801897c:	2312      	movs	r3, #18
                s = process_write_loop(self);
 801897e:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018980:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8018984:	f7fe bc20 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->cmd->run(self->cmd)) {
 8018988:	2501      	movs	r5, #1
 801898a:	f7fe bc1d 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801898e:	f7f1 f9cd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018992:	08e3      	lsrs	r3, r4, #3
 8018994:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018998:	f993 2000 	ldrsb.w	r2, [r3]
 801899c:	f004 0307 	and.w	r3, r4, #7
 80189a0:	3303      	adds	r3, #3
 80189a2:	4293      	cmp	r3, r2
 80189a4:	db02      	blt.n	80189ac <cat_service+0x1dd4>
 80189a6:	2a00      	cmp	r2, #0
 80189a8:	f046 85d5 	bne.w	801f556 <cat_service+0x897e>
 80189ac:	f8d4 9000 	ldr.w	r9, [r4]
 80189b0:	f109 0008 	add.w	r0, r9, #8
 80189b4:	08c3      	lsrs	r3, r0, #3
 80189b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80189ba:	f993 2000 	ldrsb.w	r2, [r3]
 80189be:	f000 0307 	and.w	r3, r0, #7
 80189c2:	3303      	adds	r3, #3
 80189c4:	4293      	cmp	r3, r2
 80189c6:	db02      	blt.n	80189ce <cat_service+0x1df6>
 80189c8:	2a00      	cmp	r2, #0
 80189ca:	f046 85ad 	bne.w	801f528 <cat_service+0x8950>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80189ce:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 80189d2:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80189d6:	08c3      	lsrs	r3, r0, #3
 80189d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80189dc:	f993 2000 	ldrsb.w	r2, [r3]
 80189e0:	f000 0307 	and.w	r3, r0, #7
 80189e4:	3303      	adds	r3, #3
 80189e6:	4293      	cmp	r3, r2
 80189e8:	db02      	blt.n	80189f0 <cat_service+0x1e18>
 80189ea:	2a00      	cmp	r2, #0
 80189ec:	f046 859e 	bne.w	801f52c <cat_service+0x8954>
 80189f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f004 8144 	beq.w	801cc82 <cat_service+0x60aa>
 80189fa:	f7f1 f997 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80189fe:	f109 000c 	add.w	r0, r9, #12
 8018a02:	08c3      	lsrs	r3, r0, #3
 8018a04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018a08:	f993 2000 	ldrsb.w	r2, [r3]
 8018a0c:	f000 0307 	and.w	r3, r0, #7
 8018a10:	3303      	adds	r3, #3
 8018a12:	4293      	cmp	r3, r2
 8018a14:	db02      	blt.n	8018a1c <cat_service+0x1e44>
 8018a16:	2a00      	cmp	r2, #0
 8018a18:	f046 8584 	bne.w	801f524 <cat_service+0x894c>
 8018a1c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018a20:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 8018a22:	f7f1 f983 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018a26:	9a04      	ldr	r2, [sp, #16]
 8018a28:	4628      	mov	r0, r5
 8018a2a:	4951      	ldr	r1, [pc, #324]	; (8018b70 <cat_service+0x1f98>)
 8018a2c:	f009 ffd3 	bl	80229d6 <strncpy>
        self->position = 0;
 8018a30:	f104 0018 	add.w	r0, r4, #24
 8018a34:	08c3      	lsrs	r3, r0, #3
 8018a36:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018a3a:	f993 2000 	ldrsb.w	r2, [r3]
 8018a3e:	f000 0307 	and.w	r3, r0, #7
 8018a42:	3303      	adds	r3, #3
 8018a44:	4293      	cmp	r3, r2
 8018a46:	db02      	blt.n	8018a4e <cat_service+0x1e76>
 8018a48:	2a00      	cmp	r2, #0
 8018a4a:	f046 8571 	bne.w	801f530 <cat_service+0x8958>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018a4e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8018a52:	2300      	movs	r3, #0
 8018a54:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018a56:	08c3      	lsrs	r3, r0, #3
 8018a58:	f000 0207 	and.w	r2, r0, #7
 8018a5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018a60:	f993 3000 	ldrsb.w	r3, [r3]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	db02      	blt.n	8018a6e <cat_service+0x1e96>
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	f046 8563 	bne.w	801f534 <cat_service+0x895c>
        self->write_buf = get_new_line_chars(self);
 8018a6e:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018a72:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8018a76:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 8018a7a:	08c3      	lsrs	r3, r0, #3
 8018a7c:	f000 0207 	and.w	r2, r0, #7
 8018a80:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018a84:	3203      	adds	r2, #3
 8018a86:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018a8a:	4b3a      	ldr	r3, [pc, #232]	; (8018b74 <cat_service+0x1f9c>)
        self->write_buf = get_new_line_chars(self);
 8018a8c:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8018a8e:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8018a90:	db02      	blt.n	8018a98 <cat_service+0x1ec0>
 8018a92:	2900      	cmp	r1, #0
 8018a94:	f046 8550 	bne.w	801f538 <cat_service+0x8960>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018a98:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8018a9c:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018a9e:	08c3      	lsrs	r3, r0, #3
 8018aa0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018aa4:	f993 2000 	ldrsb.w	r2, [r3]
 8018aa8:	f000 0307 	and.w	r3, r0, #7
 8018aac:	3303      	adds	r3, #3
 8018aae:	4293      	cmp	r3, r2
 8018ab0:	db02      	blt.n	8018ab8 <cat_service+0x1ee0>
 8018ab2:	2a00      	cmp	r2, #0
 8018ab4:	f046 8542 	bne.w	801f53c <cat_service+0x8964>
        self->write_state_after = state_after;
 8018ab8:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8018abc:	2300      	movs	r3, #0
 8018abe:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8018ac0:	08c3      	lsrs	r3, r0, #3
 8018ac2:	f000 0207 	and.w	r2, r0, #7
 8018ac6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018aca:	f993 3000 	ldrsb.w	r3, [r3]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	db02      	blt.n	8018ad8 <cat_service+0x1f00>
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f046 847b 	bne.w	801f3ce <cat_service+0x87f6>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018ad8:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8018ada:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018adc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8018ae0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018ae4:	f006 0207 	and.w	r2, r6, #7
 8018ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8018aec:	429a      	cmp	r2, r3
 8018aee:	db02      	blt.n	8018af6 <cat_service+0x1f1e>
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f046 846e 	bne.w	801f3d2 <cat_service+0x87fa>
 8018af6:	2312      	movs	r3, #18
                s = process_run_loop(self);
 8018af8:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8018afa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8018afe:	f7fe bb63 	b.w	80171c8 <cat_service+0x5f0>
        self->state = CAT_STATE_HOLD;
 8018b02:	f7f1 f913 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018b06:	f006 0207 	and.w	r2, r6, #7
 8018b0a:	08f3      	lsrs	r3, r6, #3
 8018b0c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018b10:	f993 3000 	ldrsb.w	r3, [r3]
 8018b14:	429a      	cmp	r2, r3
 8018b16:	db02      	blt.n	8018b1e <cat_service+0x1f46>
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	f046 854e 	bne.w	801f5ba <cat_service+0x89e2>
        self->hold_state_flag = true;
 8018b1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
        self->state = CAT_STATE_HOLD;
 8018b22:	2311      	movs	r3, #17
 8018b24:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        self->hold_state_flag = true;
 8018b28:	08c3      	lsrs	r3, r0, #3
 8018b2a:	f000 0207 	and.w	r2, r0, #7
 8018b2e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018b32:	f993 3000 	ldrsb.w	r3, [r3]
 8018b36:	429a      	cmp	r2, r3
 8018b38:	db02      	blt.n	8018b40 <cat_service+0x1f68>
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	f046 8540 	bne.w	801f5c0 <cat_service+0x89e8>
        self->hold_exit_status = 0;
 8018b40:	f104 0034 	add.w	r0, r4, #52	; 0x34
        self->hold_state_flag = true;
 8018b44:	2301      	movs	r3, #1
 8018b46:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        self->hold_exit_status = 0;
 8018b4a:	08c3      	lsrs	r3, r0, #3
 8018b4c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018b50:	f993 2000 	ldrsb.w	r2, [r3]
 8018b54:	f000 0307 	and.w	r3, r0, #7
 8018b58:	3303      	adds	r3, #3
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	db02      	blt.n	8018b64 <cat_service+0x1f8c>
 8018b5e:	2a00      	cmp	r2, #0
 8018b60:	f046 8530 	bne.w	801f5c4 <cat_service+0x89ec>
 8018b64:	2300      	movs	r3, #0
                s = process_write_loop(self);
 8018b66:	2501      	movs	r5, #1
        self->hold_exit_status = 0;
 8018b68:	6363      	str	r3, [r4, #52]	; 0x34
}
 8018b6a:	f7fe bb2d 	b.w	80171c8 <cat_service+0x5f0>
 8018b6e:	bf00      	nop
 8018b70:	24009300 	.word	0x24009300
 8018b74:	24009240 	.word	0x24009240
        switch (self->var->type) {
 8018b78:	2300      	movs	r3, #0
 8018b7a:	9301      	str	r3, [sp, #4]
 8018b7c:	08e3      	lsrs	r3, r4, #3
                ch = get_atcmd_buf(self)[self->position++];
 8018b7e:	f104 0918 	add.w	r9, r4, #24
        switch (self->var->type) {
 8018b82:	2200      	movs	r2, #0
 8018b84:	960b      	str	r6, [sp, #44]	; 0x2c
 8018b86:	9307      	str	r3, [sp, #28]
 8018b88:	f004 0307 	and.w	r3, r4, #7
 8018b8c:	9204      	str	r2, [sp, #16]
 8018b8e:	9306      	str	r3, [sp, #24]
                ch = get_atcmd_buf(self)[self->position++];
 8018b90:	ea4f 03d9 	mov.w	r3, r9, lsr #3
        switch (self->var->type) {
 8018b94:	9205      	str	r2, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 8018b96:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        switch (self->var->type) {
 8018b9a:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
                ch = get_atcmd_buf(self)[self->position++];
 8018b9e:	9308      	str	r3, [sp, #32]
        return (char*)self->desc->buf;
 8018ba0:	f7f1 f8c4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018ba4:	9b07      	ldr	r3, [sp, #28]
 8018ba6:	9a06      	ldr	r2, [sp, #24]
 8018ba8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018bac:	3203      	adds	r2, #3
 8018bae:	f993 3000 	ldrsb.w	r3, [r3]
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	db02      	blt.n	8018bbc <cat_service+0x1fe4>
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	f046 84a1 	bne.w	801f4fe <cat_service+0x8926>
 8018bbc:	6827      	ldr	r7, [r4, #0]
 8018bbe:	f107 0008 	add.w	r0, r7, #8
 8018bc2:	08c3      	lsrs	r3, r0, #3
 8018bc4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018bc8:	f993 2000 	ldrsb.w	r2, [r3]
 8018bcc:	f000 0307 	and.w	r3, r0, #7
 8018bd0:	3303      	adds	r3, #3
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	db02      	blt.n	8018bdc <cat_service+0x2004>
 8018bd6:	2a00      	cmp	r2, #0
 8018bd8:	f046 8499 	bne.w	801f50e <cat_service+0x8936>
                ch = get_atcmd_buf(self)[self->position++];
 8018bdc:	f009 0307 	and.w	r3, r9, #7
 8018be0:	9a08      	ldr	r2, [sp, #32]
        return (char*)self->desc->buf;
 8018be2:	68be      	ldr	r6, [r7, #8]
                ch = get_atcmd_buf(self)[self->position++];
 8018be4:	3303      	adds	r3, #3
 8018be6:	f992 2000 	ldrsb.w	r2, [r2]
 8018bea:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8018bee:	4293      	cmp	r3, r2
 8018bf0:	db02      	blt.n	8018bf8 <cat_service+0x2020>
 8018bf2:	2a00      	cmp	r2, #0
 8018bf4:	f046 848d 	bne.w	801f512 <cat_service+0x893a>
 8018bf8:	69a2      	ldr	r2, [r4, #24]
 8018bfa:	18b0      	adds	r0, r6, r2
 8018bfc:	f102 0801 	add.w	r8, r2, #1
 8018c00:	08c3      	lsrs	r3, r0, #3
 8018c02:	f000 0107 	and.w	r1, r0, #7
 8018c06:	f8c4 8018 	str.w	r8, [r4, #24]
 8018c0a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8018c12:	4299      	cmp	r1, r3
 8018c14:	db02      	blt.n	8018c1c <cat_service+0x2044>
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f046 847e 	bne.w	801f518 <cat_service+0x8940>
                switch (state) {
 8018c1c:	9b05      	ldr	r3, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 8018c1e:	7805      	ldrb	r5, [r0, #0]
                switch (state) {
 8018c20:	b9eb      	cbnz	r3, 8018c5e <cat_service+0x2086>
 8018c22:	9205      	str	r2, [sp, #20]
                        if (ch != '"')
 8018c24:	f7f1 f882 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c28:	2d22      	cmp	r5, #34	; 0x22
 8018c2a:	9a05      	ldr	r2, [sp, #20]
 8018c2c:	f046 816d 	bne.w	801ef0a <cat_service+0x8332>
        return (char*)self->desc->buf;
 8018c30:	9205      	str	r2, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 8018c32:	f7f1 f87b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c36:	eb06 0008 	add.w	r0, r6, r8
 8018c3a:	9a05      	ldr	r2, [sp, #20]
 8018c3c:	08c3      	lsrs	r3, r0, #3
 8018c3e:	f102 0802 	add.w	r8, r2, #2
 8018c42:	f000 0207 	and.w	r2, r0, #7
 8018c46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018c4a:	f8c4 8018 	str.w	r8, [r4, #24]
 8018c4e:	f993 3000 	ldrsb.w	r3, [r3]
 8018c52:	429a      	cmp	r2, r3
 8018c54:	db02      	blt.n	8018c5c <cat_service+0x2084>
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f046 8460 	bne.w	801f51c <cat_service+0x8944>
 8018c5c:	7805      	ldrb	r5, [r0, #0]
                        if (ch == 0)
 8018c5e:	f7f1 f865 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c62:	2d00      	cmp	r5, #0
 8018c64:	f006 8151 	beq.w	801ef0a <cat_service+0x8332>
                        if (ch == '\\') {
 8018c68:	f7f1 f860 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c6c:	2d5c      	cmp	r5, #92	; 0x5c
 8018c6e:	f004 8313 	beq.w	801d298 <cat_service+0x66c0>
                        if (ch == '"') {
 8018c72:	f7f1 f85b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c76:	2d22      	cmp	r5, #34	; 0x22
 8018c78:	f002 87b6 	beq.w	801bbe8 <cat_service+0x5010>
                        if (size >= self->var->data_size)
 8018c7c:	f7f1 f856 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018c84:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018c88:	3203      	adds	r2, #3
 8018c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	db02      	blt.n	8018c98 <cat_service+0x20c0>
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f046 86c8 	bne.w	801fa28 <cat_service+0x8e50>
 8018c98:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8018c9c:	f108 000c 	add.w	r0, r8, #12
 8018ca0:	08c3      	lsrs	r3, r0, #3
 8018ca2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018ca6:	f993 2000 	ldrsb.w	r2, [r3]
 8018caa:	f000 0307 	and.w	r3, r0, #7
 8018cae:	3303      	adds	r3, #3
 8018cb0:	4293      	cmp	r3, r2
 8018cb2:	db02      	blt.n	8018cba <cat_service+0x20e2>
 8018cb4:	2a00      	cmp	r2, #0
 8018cb6:	f046 8416 	bne.w	801f4e6 <cat_service+0x890e>
 8018cba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018cbe:	9a04      	ldr	r2, [sp, #16]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	f086 8122 	bcs.w	801ef0a <cat_service+0x8332>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 8018cc6:	f7f1 f831 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018cca:	f108 0010 	add.w	r0, r8, #16
 8018cce:	08c3      	lsrs	r3, r0, #3
 8018cd0:	f000 0207 	and.w	r2, r0, #7
 8018cd4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	db02      	blt.n	8018ce6 <cat_service+0x210e>
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	f046 8402 	bne.w	801f4ea <cat_service+0x8912>
 8018ce6:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018cea:	2b01      	cmp	r3, #1
 8018cec:	f005 86ca 	beq.w	801ea84 <cat_service+0x7eac>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 8018cf0:	f7f1 f81c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018cf4:	f108 0008 	add.w	r0, r8, #8
 8018cf8:	08c3      	lsrs	r3, r0, #3
 8018cfa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018cfe:	f993 2000 	ldrsb.w	r2, [r3]
 8018d02:	f000 0307 	and.w	r3, r0, #7
 8018d06:	3303      	adds	r3, #3
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	db02      	blt.n	8018d12 <cat_service+0x213a>
 8018d0c:	2a00      	cmp	r2, #0
 8018d0e:	f046 83e8 	bne.w	801f4e2 <cat_service+0x890a>
 8018d12:	9b04      	ldr	r3, [sp, #16]
 8018d14:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018d18:	1c5a      	adds	r2, r3, #1
 8018d1a:	4418      	add	r0, r3
 8018d1c:	08c3      	lsrs	r3, r0, #3
 8018d1e:	f000 0107 	and.w	r1, r0, #7
 8018d22:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018d26:	f993 3000 	ldrsb.w	r3, [r3]
 8018d2a:	4299      	cmp	r1, r3
 8018d2c:	db02      	blt.n	8018d34 <cat_service+0x215c>
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	f046 83e3 	bne.w	801f4fa <cat_service+0x8922>
 8018d34:	7005      	strb	r5, [r0, #0]
 8018d36:	9204      	str	r2, [sp, #16]
        switch (self->var->type) {
 8018d38:	2301      	movs	r3, #1
 8018d3a:	9305      	str	r3, [sp, #20]
 8018d3c:	e730      	b.n	8018ba0 <cat_service+0x1fc8>
 8018d3e:	2300      	movs	r3, #0
 8018d40:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 8018d42:	f7f0 fff3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018d46:	f004 0207 	and.w	r2, r4, #7
 8018d4a:	08e3      	lsrs	r3, r4, #3
 8018d4c:	9206      	str	r2, [sp, #24]
 8018d4e:	3203      	adds	r2, #3
 8018d50:	9307      	str	r3, [sp, #28]
 8018d52:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018d56:	f993 3000 	ldrsb.w	r3, [r3]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	db02      	blt.n	8018d64 <cat_service+0x218c>
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	f046 82aa 	bne.w	801f2b8 <cat_service+0x86e0>
 8018d64:	6823      	ldr	r3, [r4, #0]
 8018d66:	f103 0008 	add.w	r0, r3, #8
 8018d6a:	9304      	str	r3, [sp, #16]
 8018d6c:	08c3      	lsrs	r3, r0, #3
 8018d6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018d72:	f993 2000 	ldrsb.w	r2, [r3]
 8018d76:	f000 0307 	and.w	r3, r0, #7
 8018d7a:	3303      	adds	r3, #3
 8018d7c:	4293      	cmp	r3, r2
 8018d7e:	db02      	blt.n	8018d86 <cat_service+0x21ae>
 8018d80:	2a00      	cmp	r2, #0
 8018d82:	f046 829c 	bne.w	801f2be <cat_service+0x86e6>
 8018d86:	9b04      	ldr	r3, [sp, #16]
                ch = get_atcmd_buf(self)[self->position++];
 8018d88:	f104 0118 	add.w	r1, r4, #24
        return (char*)self->desc->buf;
 8018d8c:	689b      	ldr	r3, [r3, #8]
                ch = get_atcmd_buf(self)[self->position++];
 8018d8e:	910f      	str	r1, [sp, #60]	; 0x3c
        return (char*)self->desc->buf;
 8018d90:	9305      	str	r3, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 8018d92:	08cb      	lsrs	r3, r1, #3
 8018d94:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018d98:	f993 2000 	ldrsb.w	r2, [r3]
 8018d9c:	f001 0307 	and.w	r3, r1, #7
 8018da0:	3303      	adds	r3, #3
 8018da2:	4293      	cmp	r3, r2
 8018da4:	db02      	blt.n	8018dac <cat_service+0x21d4>
 8018da6:	2a00      	cmp	r2, #0
 8018da8:	f046 828b 	bne.w	801f2c2 <cat_service+0x86ea>
                        if (size >= self->var->data_size)
 8018dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        size_t size = 0;
 8018dae:	2200      	movs	r2, #0
                ch = get_atcmd_buf(self)[self->position++];
 8018db0:	f8d4 9018 	ldr.w	r9, [r4, #24]
                        if (size >= self->var->data_size)
 8018db4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018db8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018dbc:	970b      	str	r7, [sp, #44]	; 0x2c
 8018dbe:	4690      	mov	r8, r2
 8018dc0:	9308      	str	r3, [sp, #32]
 8018dc2:	464f      	mov	r7, r9
 8018dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dc6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8018dca:	46a3      	mov	fp, r4
 8018dcc:	3303      	adds	r3, #3
 8018dce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018dd2:	4614      	mov	r4, r2
 8018dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8018dd6:	e9cd a611 	strd	sl, r6, [sp, #68]	; 0x44
 8018dda:	4616      	mov	r6, r2
                ch = get_atcmd_buf(self)[self->position++];
 8018ddc:	f7f0 ffa6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018de0:	eb09 0007 	add.w	r0, r9, r7
 8018de4:	3701      	adds	r7, #1
 8018de6:	08c3      	lsrs	r3, r0, #3
 8018de8:	f000 0207 	and.w	r2, r0, #7
 8018dec:	f8cb 7018 	str.w	r7, [fp, #24]
 8018df0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018df4:	f993 3000 	ldrsb.w	r3, [r3]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	db02      	blt.n	8018e02 <cat_service+0x222a>
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f046 8263 	bne.w	801f2c8 <cat_service+0x86f0>
 8018e02:	7805      	ldrb	r5, [r0, #0]
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8018e04:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 8018e08:	fa5f fa83 	uxtb.w	sl, r3
 8018e0c:	f1ba 0f19 	cmp.w	sl, #25
 8018e10:	f201 83ac 	bhi.w	801a56c <cat_service+0x3994>
 8018e14:	3d20      	subs	r5, #32
 8018e16:	f7f0 ff89 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e1a:	b2ed      	uxtb	r5, r5
                if ((size > 0) && (state == 0) && ((ch == 0) || (ch == ','))) {
 8018e1c:	2c00      	cmp	r4, #0
 8018e1e:	f001 84af 	beq.w	801a780 <cat_service+0x3ba8>
 8018e22:	f7f0 ff83 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e26:	b91e      	cbnz	r6, 8018e30 <cat_service+0x2258>
 8018e28:	f7f0 ff80 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e2c:	f7f0 ff7e 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
 8018e30:	f7f0 ff7c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e34:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8018e38:	fa5f fa83 	uxtb.w	sl, r3
 8018e3c:	f1ba 0f09 	cmp.w	sl, #9
 8018e40:	f201 8498 	bhi.w	801a774 <cat_service+0x3b9c>
                byte <<= 4;
 8018e44:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8018e48:	f7f0 ff70 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e4c:	fa5f f888 	uxtb.w	r8, r8
                byte += convert_hex_char_to_value(ch);
 8018e50:	f7f0 ff6c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e54:	eb0a 0308 	add.w	r3, sl, r8
 8018e58:	fa5f f883 	uxtb.w	r8, r3
                if (state != 0) {
 8018e5c:	2e00      	cmp	r6, #0
 8018e5e:	d06e      	beq.n	8018f3e <cat_service+0x2366>
                        if (size >= self->var->data_size)
 8018e60:	f7f0 ff64 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018e64:	9b08      	ldr	r3, [sp, #32]
 8018e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e68:	f993 3000 	ldrsb.w	r3, [r3]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	db02      	blt.n	8018e76 <cat_service+0x229e>
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	f046 82be 	bne.w	801f3f2 <cat_service+0x881a>
 8018e76:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
 8018e7a:	f105 000c 	add.w	r0, r5, #12
 8018e7e:	08c3      	lsrs	r3, r0, #3
 8018e80:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018e84:	f993 2000 	ldrsb.w	r2, [r3]
 8018e88:	f000 0307 	and.w	r3, r0, #7
 8018e8c:	3303      	adds	r3, #3
 8018e8e:	4293      	cmp	r3, r2
 8018e90:	db02      	blt.n	8018e98 <cat_service+0x22c0>
 8018e92:	2a00      	cmp	r2, #0
 8018e94:	f046 84ef 	bne.w	801f876 <cat_service+0x8c9e>
 8018e98:	68eb      	ldr	r3, [r5, #12]
 8018e9a:	429c      	cmp	r4, r3
 8018e9c:	f081 8476 	bcs.w	801a78c <cat_service+0x3bb4>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 8018ea0:	f7f0 ff44 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018ea4:	f105 0010 	add.w	r0, r5, #16
 8018ea8:	08c3      	lsrs	r3, r0, #3
 8018eaa:	f000 0207 	and.w	r2, r0, #7
 8018eae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	db02      	blt.n	8018ec0 <cat_service+0x22e8>
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	f046 827e 	bne.w	801f3bc <cat_service+0x87e4>
 8018ec0:	7c2b      	ldrb	r3, [r5, #16]
 8018ec2:	2b01      	cmp	r3, #1
 8018ec4:	f003 83c3 	beq.w	801c64e <cat_service+0x5a76>
                                ((uint8_t *)(self->var->data))[size++] = byte;
 8018ec8:	f7f0 ff30 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018ecc:	f105 0008 	add.w	r0, r5, #8
 8018ed0:	08c3      	lsrs	r3, r0, #3
 8018ed2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018ed6:	f993 2000 	ldrsb.w	r2, [r3]
 8018eda:	f000 0307 	and.w	r3, r0, #7
 8018ede:	3303      	adds	r3, #3
 8018ee0:	4293      	cmp	r3, r2
 8018ee2:	db02      	blt.n	8018eea <cat_service+0x2312>
 8018ee4:	2a00      	cmp	r2, #0
 8018ee6:	f046 828d 	bne.w	801f404 <cat_service+0x882c>
 8018eea:	68a8      	ldr	r0, [r5, #8]
 8018eec:	4420      	add	r0, r4
 8018eee:	3401      	adds	r4, #1
 8018ef0:	08c3      	lsrs	r3, r0, #3
 8018ef2:	f000 0207 	and.w	r2, r0, #7
 8018ef6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018efa:	f993 3000 	ldrsb.w	r3, [r3]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	db02      	blt.n	8018f08 <cat_service+0x2330>
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	f046 81ea 	bne.w	801f2dc <cat_service+0x8704>
 8018f08:	f880 8000 	strb.w	r8, [r0]
        return (char*)self->desc->buf;
 8018f0c:	f8db 3000 	ldr.w	r3, [fp]
 8018f10:	f103 0008 	add.w	r0, r3, #8
 8018f14:	9304      	str	r3, [sp, #16]
 8018f16:	08c3      	lsrs	r3, r0, #3
 8018f18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018f1c:	f993 2000 	ldrsb.w	r2, [r3]
 8018f20:	f000 0307 	and.w	r3, r0, #7
 8018f24:	3303      	adds	r3, #3
 8018f26:	4293      	cmp	r3, r2
 8018f28:	db02      	blt.n	8018f30 <cat_service+0x2358>
 8018f2a:	2a00      	cmp	r2, #0
 8018f2c:	f046 81d8 	bne.w	801f2e0 <cat_service+0x8708>
 8018f30:	9b04      	ldr	r3, [sp, #16]
                        byte = 0;
 8018f32:	f04f 0800 	mov.w	r8, #0
                ch = get_atcmd_buf(self)[self->position++];
 8018f36:	f8db 7018 	ldr.w	r7, [fp, #24]
        return (char*)self->desc->buf;
 8018f3a:	f8d3 9008 	ldr.w	r9, [r3, #8]
                state = !state;
 8018f3e:	f086 0601 	eor.w	r6, r6, #1
 8018f42:	f7f0 fef3 	bl	8009d2c <__sanitizer_cov_trace_pc>
                ch = get_atcmd_buf(self)[self->position++];
 8018f46:	e749      	b.n	8018ddc <cat_service+0x2204>
        switch (self->var->type) {
 8018f48:	2300      	movs	r3, #0
 8018f4a:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 8018f4c:	f7f0 feee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018f50:	f004 0207 	and.w	r2, r4, #7
 8018f54:	08e3      	lsrs	r3, r4, #3
 8018f56:	9206      	str	r2, [sp, #24]
 8018f58:	3203      	adds	r2, #3
 8018f5a:	9307      	str	r3, [sp, #28]
 8018f5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018f60:	f993 3000 	ldrsb.w	r3, [r3]
 8018f64:	429a      	cmp	r2, r3
 8018f66:	db02      	blt.n	8018f6e <cat_service+0x2396>
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	f046 8084 	bne.w	801f076 <cat_service+0x849e>
 8018f6e:	6823      	ldr	r3, [r4, #0]
 8018f70:	f103 0008 	add.w	r0, r3, #8
 8018f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f76:	08c3      	lsrs	r3, r0, #3
 8018f78:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018f7c:	f993 2000 	ldrsb.w	r2, [r3]
 8018f80:	f000 0307 	and.w	r3, r0, #7
 8018f84:	3303      	adds	r3, #3
 8018f86:	4293      	cmp	r3, r2
 8018f88:	db02      	blt.n	8018f90 <cat_service+0x23b8>
 8018f8a:	2a00      	cmp	r2, #0
 8018f8c:	f046 8076 	bne.w	801f07c <cat_service+0x84a4>
 8018f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                ch = get_atcmd_buf(self)[self->position++];
 8018f92:	f104 0118 	add.w	r1, r4, #24
        return (char*)self->desc->buf;
 8018f96:	689b      	ldr	r3, [r3, #8]
                ch = get_atcmd_buf(self)[self->position++];
 8018f98:	910f      	str	r1, [sp, #60]	; 0x3c
        return (char*)self->desc->buf;
 8018f9a:	9311      	str	r3, [sp, #68]	; 0x44
                ch = get_atcmd_buf(self)[self->position++];
 8018f9c:	08cb      	lsrs	r3, r1, #3
 8018f9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018fa2:	f993 2000 	ldrsb.w	r2, [r3]
 8018fa6:	f001 0307 	and.w	r3, r1, #7
 8018faa:	3303      	adds	r3, #3
 8018fac:	4293      	cmp	r3, r2
 8018fae:	db02      	blt.n	8018fb6 <cat_service+0x23de>
 8018fb0:	2a00      	cmp	r2, #0
 8018fb2:	f046 8333 	bne.w	801f61c <cat_service+0x8a44>
        int state = 0;
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	69a3      	ldr	r3, [r4, #24]
 8018fba:	9911      	ldr	r1, [sp, #68]	; 0x44
        uint64_t val = 0;
 8018fbc:	9208      	str	r2, [sp, #32]
 8018fbe:	eb01 0903 	add.w	r9, r1, r3
 8018fc2:	4613      	mov	r3, r2
 8018fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8018fc6:	f1c1 0201 	rsb	r2, r1, #1
 8018fca:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8018fce:	4698      	mov	r8, r3
 8018fd0:	9205      	str	r2, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 8018fd2:	f7f0 feab 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8018fd6:	9a05      	ldr	r2, [sp, #20]
 8018fd8:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 8018fdc:	444a      	add	r2, r9
 8018fde:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018fe2:	f993 3000 	ldrsb.w	r3, [r3]
 8018fe6:	61a2      	str	r2, [r4, #24]
 8018fe8:	f009 0207 	and.w	r2, r9, #7
 8018fec:	429a      	cmp	r2, r3
 8018fee:	db02      	blt.n	8018ff6 <cat_service+0x241e>
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f046 8316 	bne.w	801f622 <cat_service+0x8a4a>
 8018ff6:	f819 5b01 	ldrb.w	r5, [r9], #1
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8018ffa:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 8018ffe:	2b19      	cmp	r3, #25
 8019000:	f201 8066 	bhi.w	801a0d0 <cat_service+0x34f8>
                if ((state >= 3) && ((ch == 0) || (ch == ','))) {
 8019004:	f7f0 fe92 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019008:	f1b8 0f00 	cmp.w	r8, #0
 801900c:	f001 8118 	beq.w	801a240 <cat_service+0x3668>
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 8019010:	f7f0 fe8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019014:	3d20      	subs	r5, #32
                } else if (state == 1) {
 8019016:	f7f0 fe89 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801901a:	f1b8 0f01 	cmp.w	r8, #1
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 801901e:	b2ed      	uxtb	r5, r5
                } else if (state == 1) {
 8019020:	f042 831e 	bne.w	801b660 <cat_service+0x4a88>
                        if (ch != 'X')
 8019024:	f7f0 fe82 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019028:	2d58      	cmp	r5, #88	; 0x58
 801902a:	f041 8109 	bne.w	801a240 <cat_service+0x3668>
                        state = 2;
 801902e:	f04f 0802 	mov.w	r8, #2
 8019032:	e7ce      	b.n	8018fd2 <cat_service+0x23fa>
        switch (self->var->type) {
 8019034:	2300      	movs	r3, #0
 8019036:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 8019038:	f7f0 fe78 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801903c:	f004 0207 	and.w	r2, r4, #7
 8019040:	08e3      	lsrs	r3, r4, #3
 8019042:	9206      	str	r2, [sp, #24]
 8019044:	3203      	adds	r2, #3
 8019046:	9307      	str	r3, [sp, #28]
 8019048:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801904c:	f993 3000 	ldrsb.w	r3, [r3]
 8019050:	429a      	cmp	r2, r3
 8019052:	db02      	blt.n	801905a <cat_service+0x2482>
 8019054:	2b00      	cmp	r3, #0
 8019056:	f046 80d4 	bne.w	801f202 <cat_service+0x862a>
 801905a:	6823      	ldr	r3, [r4, #0]
 801905c:	f103 0008 	add.w	r0, r3, #8
 8019060:	9305      	str	r3, [sp, #20]
 8019062:	08c3      	lsrs	r3, r0, #3
 8019064:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019068:	f993 2000 	ldrsb.w	r2, [r3]
 801906c:	f000 0307 	and.w	r3, r0, #7
 8019070:	3303      	adds	r3, #3
 8019072:	4293      	cmp	r3, r2
 8019074:	db02      	blt.n	801907c <cat_service+0x24a4>
 8019076:	2a00      	cmp	r2, #0
 8019078:	f046 80c6 	bne.w	801f208 <cat_service+0x8630>
 801907c:	9b05      	ldr	r3, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 801907e:	f104 0118 	add.w	r1, r4, #24
        return (char*)self->desc->buf;
 8019082:	689b      	ldr	r3, [r3, #8]
                ch = get_atcmd_buf(self)[self->position++];
 8019084:	910f      	str	r1, [sp, #60]	; 0x3c
        return (char*)self->desc->buf;
 8019086:	9308      	str	r3, [sp, #32]
                ch = get_atcmd_buf(self)[self->position++];
 8019088:	08cb      	lsrs	r3, r1, #3
 801908a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801908e:	f993 2000 	ldrsb.w	r2, [r3]
 8019092:	f001 0307 	and.w	r3, r1, #7
 8019096:	3303      	adds	r3, #3
 8019098:	4293      	cmp	r3, r2
 801909a:	db02      	blt.n	80190a2 <cat_service+0x24ca>
 801909c:	2a00      	cmp	r2, #0
 801909e:	f046 80b5 	bne.w	801f20c <cat_service+0x8634>
 80190a2:	69a2      	ldr	r2, [r4, #24]
 80190a4:	9b08      	ldr	r3, [sp, #32]
 80190a6:	1c55      	adds	r5, r2, #1
 80190a8:	1898      	adds	r0, r3, r2
 80190aa:	61a5      	str	r5, [r4, #24]
 80190ac:	08c3      	lsrs	r3, r0, #3
 80190ae:	f000 0107 	and.w	r1, r0, #7
 80190b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80190b6:	f993 3000 	ldrsb.w	r3, [r3]
 80190ba:	4299      	cmp	r1, r3
 80190bc:	db02      	blt.n	80190c4 <cat_service+0x24ec>
 80190be:	2b00      	cmp	r3, #0
 80190c0:	f046 80a7 	bne.w	801f212 <cat_service+0x863a>
 80190c4:	9b08      	ldr	r3, [sp, #32]
        uint64_t val = 0;
 80190c6:	f04f 0900 	mov.w	r9, #0
 80190ca:	960b      	str	r6, [sp, #44]	; 0x2c
                ch = get_atcmd_buf(self)[self->position++];
 80190cc:	5c98      	ldrb	r0, [r3, r2]
                if ((ok != 0) && ((ch == 0) || (ch == ','))) {
 80190ce:	441d      	add	r5, r3
                ch = get_atcmd_buf(self)[self->position++];
 80190d0:	f1c3 0301 	rsb	r3, r3, #1
 80190d4:	4606      	mov	r6, r0
 80190d6:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
 80190da:	464f      	mov	r7, r9
 80190dc:	4698      	mov	r8, r3
        return (ch >= '0' && ch <= '9');
 80190de:	3e30      	subs	r6, #48	; 0x30
 80190e0:	f7f0 fe24 	bl	8009d2c <__sanitizer_cov_trace_pc>
                if (is_valid_dec_char(ch) != 0) {
 80190e4:	b2f3      	uxtb	r3, r6
 80190e6:	2b09      	cmp	r3, #9
 80190e8:	f204 8041 	bhi.w	801d16e <cat_service+0x6596>
                        val *= 10;
 80190ec:	f7f0 fe1e 	bl	8009d2c <__sanitizer_cov_trace_pc>
                ch = get_atcmd_buf(self)[self->position++];
 80190f0:	eb08 0205 	add.w	r2, r8, r5
                        val *= 10;
 80190f4:	00b9      	lsls	r1, r7, #2
 80190f6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80190fa:	ea41 7199 	orr.w	r1, r1, r9, lsr #30
 80190fe:	eb13 0909 	adds.w	r9, r3, r9
                ch = get_atcmd_buf(self)[self->position++];
 8019102:	ea4f 03d5 	mov.w	r3, r5, lsr #3
                        val *= 10;
 8019106:	eb47 0701 	adc.w	r7, r7, r1
                ch = get_atcmd_buf(self)[self->position++];
 801910a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
                        val *= 10;
 801910e:	eb19 0909 	adds.w	r9, r9, r9
                ch = get_atcmd_buf(self)[self->position++];
 8019112:	f993 3000 	ldrsb.w	r3, [r3]
                        val *= 10;
 8019116:	417f      	adcs	r7, r7
                ch = get_atcmd_buf(self)[self->position++];
 8019118:	61a2      	str	r2, [r4, #24]
                        val += ch - '0';
 801911a:	eb16 0909 	adds.w	r9, r6, r9
                ch = get_atcmd_buf(self)[self->position++];
 801911e:	f005 0207 	and.w	r2, r5, #7
                        val += ch - '0';
 8019122:	eb47 77e6 	adc.w	r7, r7, r6, asr #31
                ch = get_atcmd_buf(self)[self->position++];
 8019126:	429a      	cmp	r2, r3
 8019128:	db02      	blt.n	8019130 <cat_service+0x2558>
 801912a:	2b00      	cmp	r3, #0
 801912c:	f046 81d6 	bne.w	801f4dc <cat_service+0x8904>
 8019130:	f815 6b01 	ldrb.w	r6, [r5], #1
                if ((ok != 0) && ((ch == 0) || (ch == ','))) {
 8019134:	2e00      	cmp	r6, #0
 8019136:	f003 826b 	beq.w	801c610 <cat_service+0x5a38>
 801913a:	f7f0 fdf7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801913e:	2e2c      	cmp	r6, #44	; 0x2c
 8019140:	d1cd      	bne.n	80190de <cat_service+0x2506>
 8019142:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8019146:	2501      	movs	r5, #1
 8019148:	9709      	str	r7, [sp, #36]	; 0x24
 801914a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801914e:	f7f0 fded 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019152:	9b04      	ldr	r3, [sp, #16]
 8019154:	f103 0010 	add.w	r0, r3, #16
 8019158:	08c3      	lsrs	r3, r0, #3
 801915a:	f000 0207 	and.w	r2, r0, #7
 801915e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019162:	f993 3000 	ldrsb.w	r3, [r3]
 8019166:	429a      	cmp	r2, r3
 8019168:	db02      	blt.n	8019170 <cat_service+0x2598>
 801916a:	2b00      	cmp	r3, #0
 801916c:	f046 8254 	bne.w	801f618 <cat_service+0x8a40>
 8019170:	9b04      	ldr	r3, [sp, #16]
 8019172:	7c1b      	ldrb	r3, [r3, #16]
 8019174:	2b01      	cmp	r3, #1
 8019176:	f005 844f 	beq.w	801ea18 <cat_service+0x7e40>
        switch (self->var->data_size) {
 801917a:	f7f0 fdd7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801917e:	9b04      	ldr	r3, [sp, #16]
 8019180:	f103 000c 	add.w	r0, r3, #12
 8019184:	08c3      	lsrs	r3, r0, #3
 8019186:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801918a:	f993 2000 	ldrsb.w	r2, [r3]
 801918e:	f000 0307 	and.w	r3, r0, #7
 8019192:	3303      	adds	r3, #3
 8019194:	4293      	cmp	r3, r2
 8019196:	db02      	blt.n	801919e <cat_service+0x25c6>
 8019198:	2a00      	cmp	r2, #0
 801919a:	f046 80da 	bne.w	801f352 <cat_service+0x877a>
 801919e:	9b04      	ldr	r3, [sp, #16]
 80191a0:	68db      	ldr	r3, [r3, #12]
 80191a2:	2b02      	cmp	r3, #2
 80191a4:	f005 81f2 	beq.w	801e58c <cat_service+0x79b4>
 80191a8:	2b04      	cmp	r3, #4
 80191aa:	f005 8406 	beq.w	801e9ba <cat_service+0x7de2>
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	f005 83d5 	beq.w	801e95e <cat_service+0x7d86>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 80191b4:	f7f0 fdba 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80191b8:	9b05      	ldr	r3, [sp, #20]
 80191ba:	f103 0010 	add.w	r0, r3, #16
 80191be:	08c3      	lsrs	r3, r0, #3
 80191c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80191c4:	f993 2000 	ldrsb.w	r2, [r3]
 80191c8:	f000 0307 	and.w	r3, r0, #7
 80191cc:	3303      	adds	r3, #3
 80191ce:	4293      	cmp	r3, r2
 80191d0:	db02      	blt.n	80191d8 <cat_service+0x2600>
 80191d2:	2a00      	cmp	r2, #0
 80191d4:	f046 83bc 	bne.w	801f950 <cat_service+0x8d78>
 80191d8:	9d05      	ldr	r5, [sp, #20]
 80191da:	692b      	ldr	r3, [r5, #16]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	f005 8679 	beq.w	801eed4 <cat_service+0x82fc>
 80191e2:	f7f0 fda3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80191e6:	f105 000c 	add.w	r0, r5, #12
 80191ea:	08c3      	lsrs	r3, r0, #3
 80191ec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80191f0:	f993 2000 	ldrsb.w	r2, [r3]
 80191f4:	f000 0307 	and.w	r3, r0, #7
 80191f8:	3303      	adds	r3, #3
 80191fa:	4293      	cmp	r3, r2
 80191fc:	db02      	blt.n	8019204 <cat_service+0x262c>
 80191fe:	2a00      	cmp	r2, #0
 8019200:	f046 81b2 	bne.w	801f568 <cat_service+0x8990>
 8019204:	9b05      	ldr	r3, [sp, #20]
 8019206:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8019208:	f7f0 fd90 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801920c:	462a      	mov	r2, r5
 801920e:	9808      	ldr	r0, [sp, #32]
 8019210:	499d      	ldr	r1, [pc, #628]	; (8019488 <cat_service+0x28b0>)
 8019212:	f009 fbe0 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019216:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801921a:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801921c:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 8019220:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019222:	08c3      	lsrs	r3, r0, #3
 8019224:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019228:	f993 3000 	ldrsb.w	r3, [r3]
 801922c:	429a      	cmp	r2, r3
 801922e:	db02      	blt.n	8019236 <cat_service+0x265e>
 8019230:	2b00      	cmp	r3, #0
 8019232:	f046 822f 	bne.w	801f694 <cat_service+0x8abc>
        self->write_buf = get_new_line_chars(self);
 8019236:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801923a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801923e:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 8019242:	08c3      	lsrs	r3, r0, #3
 8019244:	f000 0207 	and.w	r2, r0, #7
 8019248:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801924c:	3203      	adds	r2, #3
 801924e:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019252:	4b8e      	ldr	r3, [pc, #568]	; (801948c <cat_service+0x28b4>)
        self->write_buf = get_new_line_chars(self);
 8019254:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019256:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8019258:	db02      	blt.n	8019260 <cat_service+0x2688>
 801925a:	2900      	cmp	r1, #0
 801925c:	f046 821c 	bne.w	801f698 <cat_service+0x8ac0>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019260:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8019264:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019266:	08c3      	lsrs	r3, r0, #3
 8019268:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801926c:	f993 2000 	ldrsb.w	r2, [r3]
 8019270:	f000 0307 	and.w	r3, r0, #7
 8019274:	3303      	adds	r3, #3
 8019276:	4293      	cmp	r3, r2
 8019278:	db02      	blt.n	8019280 <cat_service+0x26a8>
 801927a:	2a00      	cmp	r2, #0
 801927c:	f046 820e 	bne.w	801f69c <cat_service+0x8ac4>
        self->write_state_after = state_after;
 8019280:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019284:	2300      	movs	r3, #0
 8019286:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8019288:	08c3      	lsrs	r3, r0, #3
 801928a:	f000 0207 	and.w	r2, r0, #7
 801928e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019292:	f993 3000 	ldrsb.w	r3, [r3]
 8019296:	429a      	cmp	r2, r3
 8019298:	db02      	blt.n	80192a0 <cat_service+0x26c8>
 801929a:	2b00      	cmp	r3, #0
 801929c:	f046 8200 	bne.w	801f6a0 <cat_service+0x8ac8>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80192a0:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 80192a2:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80192a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 80192a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80192ac:	f006 0207 	and.w	r2, r6, #7
 80192b0:	f993 3000 	ldrsb.w	r3, [r3]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	db02      	blt.n	80192be <cat_service+0x26e6>
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f046 815e 	bne.w	801f57a <cat_service+0x89a2>
 80192be:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 80192c0:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80192c2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 80192c6:	f7fd bf7f 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->var->type) {
 80192ca:	2300      	movs	r3, #0
 80192cc:	9301      	str	r3, [sp, #4]
        return (char*)self->desc->buf;
 80192ce:	f7f0 fd2d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80192d2:	f004 0207 	and.w	r2, r4, #7
 80192d6:	08e3      	lsrs	r3, r4, #3
 80192d8:	9206      	str	r2, [sp, #24]
 80192da:	3203      	adds	r2, #3
 80192dc:	9307      	str	r3, [sp, #28]
 80192de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80192e2:	f993 3000 	ldrsb.w	r3, [r3]
 80192e6:	429a      	cmp	r2, r3
 80192e8:	db02      	blt.n	80192f0 <cat_service+0x2718>
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	f046 8266 	bne.w	801f7bc <cat_service+0x8be4>
 80192f0:	6823      	ldr	r3, [r4, #0]
 80192f2:	f103 0008 	add.w	r0, r3, #8
 80192f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80192f8:	08c3      	lsrs	r3, r0, #3
 80192fa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80192fe:	f993 2000 	ldrsb.w	r2, [r3]
 8019302:	f000 0307 	and.w	r3, r0, #7
 8019306:	3303      	adds	r3, #3
 8019308:	4293      	cmp	r3, r2
 801930a:	db02      	blt.n	8019312 <cat_service+0x273a>
 801930c:	2a00      	cmp	r2, #0
 801930e:	f045 861d 	bne.w	801ef4c <cat_service+0x8374>
 8019312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                ch = get_atcmd_buf(self)[self->position++];
 8019314:	f104 0118 	add.w	r1, r4, #24
        return (char*)self->desc->buf;
 8019318:	689b      	ldr	r3, [r3, #8]
                ch = get_atcmd_buf(self)[self->position++];
 801931a:	910f      	str	r1, [sp, #60]	; 0x3c
        return (char*)self->desc->buf;
 801931c:	9309      	str	r3, [sp, #36]	; 0x24
                ch = get_atcmd_buf(self)[self->position++];
 801931e:	08cb      	lsrs	r3, r1, #3
 8019320:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019324:	f993 2000 	ldrsb.w	r2, [r3]
 8019328:	f001 0307 	and.w	r3, r1, #7
 801932c:	3303      	adds	r3, #3
 801932e:	4293      	cmp	r3, r2
 8019330:	db02      	blt.n	8019338 <cat_service+0x2760>
 8019332:	2a00      	cmp	r2, #0
 8019334:	f045 860c 	bne.w	801ef50 <cat_service+0x8378>
 8019338:	69a3      	ldr	r3, [r4, #24]
 801933a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801933c:	1c5d      	adds	r5, r3, #1
 801933e:	18d0      	adds	r0, r2, r3
 8019340:	61a5      	str	r5, [r4, #24]
 8019342:	08c2      	lsrs	r2, r0, #3
 8019344:	f000 0107 	and.w	r1, r0, #7
 8019348:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801934c:	f992 2000 	ldrsb.w	r2, [r2]
 8019350:	4291      	cmp	r1, r2
 8019352:	db02      	blt.n	801935a <cat_service+0x2782>
 8019354:	2a00      	cmp	r2, #0
 8019356:	f045 8607 	bne.w	801ef68 <cat_service+0x8390>
 801935a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801935c:	f812 9003 	ldrb.w	r9, [r2, r3]
                        if (ch == '-') {
 8019360:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8019364:	f003 84b9 	beq.w	801ccda <cat_service+0x6102>
                        } else if (ch == '+') {
 8019368:	f7f0 fce0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801936c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8019370:	f001 8033 	beq.w	801a3da <cat_service+0x3802>
        return (ch >= '0' && ch <= '9');
 8019374:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8019378:	f7f0 fcd8 	bl	8009d2c <__sanitizer_cov_trace_pc>
                        } else if (is_valid_dec_char(ch) != 0) {
 801937c:	fa5f f389 	uxtb.w	r3, r9
 8019380:	2b09      	cmp	r3, #9
 8019382:	f203 8252 	bhi.w	801c82a <cat_service+0x5c52>
                                val = ch - '0';
 8019386:	f7f0 fcd1 	bl	8009d2c <__sanitizer_cov_trace_pc>
                                ok = 1;
 801938a:	2101      	movs	r1, #1
                                val = ch - '0';
 801938c:	ea4f 73e9 	mov.w	r3, r9, asr #31
                                sign = 1;
 8019390:	9111      	str	r1, [sp, #68]	; 0x44
                                val = ch - '0';
 8019392:	9308      	str	r3, [sp, #32]
                                sign = 1;
 8019394:	2300      	movs	r3, #0
 8019396:	9312      	str	r3, [sp, #72]	; 0x48
 8019398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801939a:	960c      	str	r6, [sp, #48]	; 0x30
 801939c:	460e      	mov	r6, r1
 801939e:	441d      	add	r5, r3
 80193a0:	f1c3 0301 	rsb	r3, r3, #1
 80193a4:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
 80193a8:	9f08      	ldr	r7, [sp, #32]
 80193aa:	9305      	str	r3, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 80193ac:	f7f0 fcbe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80193b0:	9a05      	ldr	r2, [sp, #20]
 80193b2:	08eb      	lsrs	r3, r5, #3
 80193b4:	442a      	add	r2, r5
 80193b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80193ba:	f993 3000 	ldrsb.w	r3, [r3]
 80193be:	61a2      	str	r2, [r4, #24]
 80193c0:	f005 0207 	and.w	r2, r5, #7
 80193c4:	429a      	cmp	r2, r3
 80193c6:	db02      	blt.n	80193ce <cat_service+0x27f6>
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	f045 85b2 	bne.w	801ef32 <cat_service+0x835a>
 80193ce:	f815 8b01 	ldrb.w	r8, [r5], #1
                if ((ok != 0) && ((ch == 0) || (ch == ','))) {
 80193d2:	b15e      	cbz	r6, 80193ec <cat_service+0x2814>
 80193d4:	f7f0 fcaa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80193d8:	f1b8 0f00 	cmp.w	r8, #0
 80193dc:	f003 864a 	beq.w	801d074 <cat_service+0x649c>
 80193e0:	f7f0 fca4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80193e4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80193e8:	f003 84c5 	beq.w	801cd76 <cat_service+0x619e>
        return (ch >= '0' && ch <= '9');
 80193ec:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80193f0:	f7f0 fc9c 	bl	8009d2c <__sanitizer_cov_trace_pc>
                        if (is_valid_dec_char(ch) != 0) {
 80193f4:	fa5f f388 	uxtb.w	r3, r8
 80193f8:	2b09      	cmp	r3, #9
 80193fa:	f203 8213 	bhi.w	801c824 <cat_service+0x5c4c>
                                val *= 10;
 80193fe:	f7f0 fc95 	bl	8009d2c <__sanitizer_cov_trace_pc>
                                ok = 1;
 8019402:	2601      	movs	r6, #1
                                val *= 10;
 8019404:	00b9      	lsls	r1, r7, #2
 8019406:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801940a:	ea41 7199 	orr.w	r1, r1, r9, lsr #30
 801940e:	eb13 0909 	adds.w	r9, r3, r9
 8019412:	eb47 0101 	adc.w	r1, r7, r1
 8019416:	eb19 0909 	adds.w	r9, r9, r9
 801941a:	4149      	adcs	r1, r1
                                val += ch - '0';
 801941c:	eb18 0909 	adds.w	r9, r8, r9
 8019420:	eb41 77e8 	adc.w	r7, r1, r8, asr #31
 8019424:	e7c2      	b.n	80193ac <cat_service+0x27d4>
        if (++self->index >= self->commands_num)
 8019426:	f7f0 fc81 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801942a:	9b04      	ldr	r3, [sp, #16]
 801942c:	9a08      	ldr	r2, [sp, #32]
 801942e:	3301      	adds	r3, #1
 8019430:	4293      	cmp	r3, r2
 8019432:	60e3      	str	r3, [r4, #12]
 8019434:	f083 8574 	bcs.w	801cf20 <cat_service+0x6348>
        self->length = 0;
 8019438:	f7f0 fc78 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801943c:	f104 0014 	add.w	r0, r4, #20
 8019440:	08c3      	lsrs	r3, r0, #3
 8019442:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019446:	f993 2000 	ldrsb.w	r2, [r3]
 801944a:	f000 0307 	and.w	r3, r0, #7
 801944e:	3303      	adds	r3, #3
 8019450:	4293      	cmp	r3, r2
 8019452:	db02      	blt.n	801945a <cat_service+0x2882>
 8019454:	2a00      	cmp	r2, #0
 8019456:	f045 86ae 	bne.w	801f1b6 <cat_service+0x85de>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801945a:	22ff      	movs	r2, #255	; 0xff
        self->state = CAT_STATE_PRINT_CMD;
 801945c:	08f3      	lsrs	r3, r6, #3
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801945e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        self->state = CAT_STATE_PRINT_CMD;
 8019462:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->length = 0;
 8019466:	2200      	movs	r2, #0
        self->state = CAT_STATE_PRINT_CMD;
 8019468:	f993 3000 	ldrsb.w	r3, [r3]
        self->length = 0;
 801946c:	6162      	str	r2, [r4, #20]
        self->state = CAT_STATE_PRINT_CMD;
 801946e:	f006 0207 	and.w	r2, r6, #7
 8019472:	429a      	cmp	r2, r3
 8019474:	db02      	blt.n	801947c <cat_service+0x28a4>
 8019476:	2b00      	cmp	r3, #0
 8019478:	f045 869a 	bne.w	801f1b0 <cat_service+0x85d8>
 801947c:	2318      	movs	r3, #24
                s = CAT_STATUS_BUSY;
 801947e:	2501      	movs	r5, #1
        self->state = CAT_STATE_PRINT_CMD;
 8019480:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return true;
 8019484:	f7fd bea0 	b.w	80171c8 <cat_service+0x5f0>
 8019488:	24009200 	.word	0x24009200
 801948c:	24009240 	.word	0x24009240
                if ((self->cmd->read != NULL) || (is_variables_access_possible(self, self->cmd, CAT_VAR_ACCESS_READ_ONLY) != false)) {
 8019490:	9104      	str	r1, [sp, #16]
 8019492:	f7f0 fc4b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019496:	9904      	ldr	r1, [sp, #16]
 8019498:	f101 000c 	add.w	r0, r1, #12
 801949c:	08c3      	lsrs	r3, r0, #3
 801949e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80194a2:	f993 2000 	ldrsb.w	r2, [r3]
 80194a6:	f000 0307 	and.w	r3, r0, #7
 80194aa:	3303      	adds	r3, #3
 80194ac:	4293      	cmp	r3, r2
 80194ae:	db02      	blt.n	80194b6 <cat_service+0x28de>
 80194b0:	2a00      	cmp	r2, #0
 80194b2:	f046 827f 	bne.w	801f9b4 <cat_service+0x8ddc>
 80194b6:	68cb      	ldr	r3, [r1, #12]
 80194b8:	9104      	str	r1, [sp, #16]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	f003 82e0 	beq.w	801ca80 <cat_service+0x5ea8>
                        self->position = 0;
 80194c0:	f104 0918 	add.w	r9, r4, #24
 80194c4:	f7f0 fc32 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80194c8:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 80194cc:	f009 0207 	and.w	r2, r9, #7
 80194d0:	9305      	str	r3, [sp, #20]
 80194d2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80194d6:	9204      	str	r2, [sp, #16]
 80194d8:	3203      	adds	r2, #3
 80194da:	f993 3000 	ldrsb.w	r3, [r3]
 80194de:	429a      	cmp	r2, r3
 80194e0:	db02      	blt.n	80194e8 <cat_service+0x2910>
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	f045 859a 	bne.w	801f01c <cat_service+0x8444>
 80194e8:	2300      	movs	r3, #0
                        if (print_current_cmd_full_name(self, "?") != 0) {
 80194ea:	4993      	ldr	r1, [pc, #588]	; (8019738 <cat_service+0x2b60>)
 80194ec:	4620      	mov	r0, r4
                        self->position = 0;
 80194ee:	61a3      	str	r3, [r4, #24]
                        if (print_current_cmd_full_name(self, "?") != 0) {
 80194f0:	f7f8 fd88 	bl	8012004 <print_current_cmd_full_name>
 80194f4:	2800      	cmp	r0, #0
 80194f6:	f044 82cf 	bne.w	801da98 <cat_service+0x6ec0>
        self->position = 0;
 80194fa:	f7f0 fc17 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80194fe:	9b05      	ldr	r3, [sp, #20]
 8019500:	9a04      	ldr	r2, [sp, #16]
 8019502:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019506:	3203      	adds	r2, #3
 8019508:	f993 3000 	ldrsb.w	r3, [r3]
 801950c:	429a      	cmp	r2, r3
 801950e:	db02      	blt.n	8019516 <cat_service+0x293e>
 8019510:	2b00      	cmp	r3, #0
 8019512:	f045 8586 	bne.w	801f022 <cat_service+0x844a>
        return (char*)self->desc->buf;
 8019516:	9b07      	ldr	r3, [sp, #28]
        self->position = 0;
 8019518:	2100      	movs	r1, #0
        return (char*)self->desc->buf;
 801951a:	9a06      	ldr	r2, [sp, #24]
 801951c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019520:	3203      	adds	r2, #3
 8019522:	f993 3000 	ldrsb.w	r3, [r3]
        self->position = 0;
 8019526:	61a1      	str	r1, [r4, #24]
        return (char*)self->desc->buf;
 8019528:	429a      	cmp	r2, r3
 801952a:	db02      	blt.n	8019532 <cat_service+0x295a>
 801952c:	2b00      	cmp	r3, #0
 801952e:	f045 8566 	bne.w	801effe <cat_service+0x8426>
 8019532:	6822      	ldr	r2, [r4, #0]
 8019534:	f102 0008 	add.w	r0, r2, #8
 8019538:	08c3      	lsrs	r3, r0, #3
 801953a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801953e:	f993 1000 	ldrsb.w	r1, [r3]
 8019542:	f000 0307 	and.w	r3, r0, #7
 8019546:	3303      	adds	r3, #3
 8019548:	428b      	cmp	r3, r1
 801954a:	db02      	blt.n	8019552 <cat_service+0x297a>
 801954c:	2900      	cmp	r1, #0
 801954e:	f045 8559 	bne.w	801f004 <cat_service+0x842c>
        self->write_buf = get_atcmd_buf(self);
 8019552:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return (char*)self->desc->buf;
 8019556:	6892      	ldr	r2, [r2, #8]
        self->write_buf = get_atcmd_buf(self);
 8019558:	08c3      	lsrs	r3, r0, #3
 801955a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801955e:	f993 1000 	ldrsb.w	r1, [r3]
 8019562:	f000 0307 	and.w	r3, r0, #7
 8019566:	3303      	adds	r3, #3
 8019568:	428b      	cmp	r3, r1
 801956a:	db02      	blt.n	8019572 <cat_service+0x299a>
 801956c:	2900      	cmp	r1, #0
 801956e:	f045 854b 	bne.w	801f008 <cat_service+0x8430>
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019572:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_atcmd_buf(self);
 8019576:	63a2      	str	r2, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019578:	08c3      	lsrs	r3, r0, #3
 801957a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801957e:	f993 2000 	ldrsb.w	r2, [r3]
 8019582:	f000 0307 	and.w	r3, r0, #7
 8019586:	3303      	adds	r3, #3
 8019588:	4293      	cmp	r3, r2
 801958a:	db02      	blt.n	8019592 <cat_service+0x29ba>
 801958c:	2a00      	cmp	r2, #0
 801958e:	f045 853d 	bne.w	801f00c <cat_service+0x8434>
        self->write_state_after = state_after;
 8019592:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019596:	2302      	movs	r3, #2
 8019598:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801959a:	08c3      	lsrs	r3, r0, #3
 801959c:	f000 0207 	and.w	r2, r0, #7
 80195a0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80195a4:	f993 3000 	ldrsb.w	r3, [r3]
 80195a8:	429a      	cmp	r2, r3
 80195aa:	db02      	blt.n	80195b2 <cat_service+0x29da>
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	f046 81b8 	bne.w	801f922 <cat_service+0x8d4a>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80195b2:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 80195b4:	2218      	movs	r2, #24
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80195b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 80195ba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 80195be:	f006 0207 	and.w	r2, r6, #7
 80195c2:	f993 3000 	ldrsb.w	r3, [r3]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	db02      	blt.n	80195d0 <cat_service+0x29f8>
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	f046 81ab 	bne.w	801f926 <cat_service+0x8d4e>
 80195d0:	2312      	movs	r3, #18
 80195d2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                self->cmd_type = CAT_CMD_TYPE_WRITE;
 80195d6:	f7f0 fba9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80195da:	2302      	movs	r3, #2
 80195dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                break;
 80195e0:	f7fd bdf2 	b.w	80171c8 <cat_service+0x5f0>
                if (self->cmd->test != NULL || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 80195e4:	9104      	str	r1, [sp, #16]
 80195e6:	f7f0 fba1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80195ea:	9904      	ldr	r1, [sp, #16]
 80195ec:	f101 0014 	add.w	r0, r1, #20
 80195f0:	08c3      	lsrs	r3, r0, #3
 80195f2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80195f6:	f993 2000 	ldrsb.w	r2, [r3]
 80195fa:	f000 0307 	and.w	r3, r0, #7
 80195fe:	3303      	adds	r3, #3
 8019600:	4293      	cmp	r3, r2
 8019602:	db02      	blt.n	801960a <cat_service+0x2a32>
 8019604:	2a00      	cmp	r2, #0
 8019606:	f046 815d 	bne.w	801f8c4 <cat_service+0x8cec>
 801960a:	694b      	ldr	r3, [r1, #20]
 801960c:	9104      	str	r1, [sp, #16]
 801960e:	2b00      	cmp	r3, #0
 8019610:	f003 82e7 	beq.w	801cbe2 <cat_service+0x600a>
                        self->position = 0;
 8019614:	f104 0518 	add.w	r5, r4, #24
 8019618:	f7f0 fb88 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801961c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8019620:	f005 0207 	and.w	r2, r5, #7
 8019624:	f109 53dc 	add.w	r3, r9, #461373440	; 0x1b800000
 8019628:	9204      	str	r2, [sp, #16]
 801962a:	3203      	adds	r2, #3
 801962c:	f993 3000 	ldrsb.w	r3, [r3]
 8019630:	429a      	cmp	r2, r3
 8019632:	db02      	blt.n	801963a <cat_service+0x2a62>
 8019634:	2b00      	cmp	r3, #0
 8019636:	f046 8142 	bne.w	801f8be <cat_service+0x8ce6>
 801963a:	2300      	movs	r3, #0
                        if (print_current_cmd_full_name(self, "=?") != 0) {
 801963c:	493f      	ldr	r1, [pc, #252]	; (801973c <cat_service+0x2b64>)
 801963e:	4620      	mov	r0, r4
                        self->position = 0;
 8019640:	61a3      	str	r3, [r4, #24]
                        if (print_current_cmd_full_name(self, "=?") != 0) {
 8019642:	f7f8 fcdf 	bl	8012004 <print_current_cmd_full_name>
 8019646:	2800      	cmp	r0, #0
 8019648:	f044 8396 	bne.w	801dd78 <cat_service+0x71a0>
        self->position = 0;
 801964c:	f7f0 fb6e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019650:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
 8019654:	9a04      	ldr	r2, [sp, #16]
 8019656:	f999 3000 	ldrsb.w	r3, [r9]
 801965a:	3203      	adds	r2, #3
 801965c:	429a      	cmp	r2, r3
 801965e:	db02      	blt.n	8019666 <cat_service+0x2a8e>
 8019660:	2b00      	cmp	r3, #0
 8019662:	f045 84e9 	bne.w	801f038 <cat_service+0x8460>
        return (char*)self->desc->buf;
 8019666:	9b07      	ldr	r3, [sp, #28]
        self->position = 0;
 8019668:	2100      	movs	r1, #0
        return (char*)self->desc->buf;
 801966a:	9a06      	ldr	r2, [sp, #24]
 801966c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019670:	3203      	adds	r2, #3
 8019672:	f993 3000 	ldrsb.w	r3, [r3]
        self->position = 0;
 8019676:	61a1      	str	r1, [r4, #24]
        return (char*)self->desc->buf;
 8019678:	429a      	cmp	r2, r3
 801967a:	db02      	blt.n	8019682 <cat_service+0x2aaa>
 801967c:	2b00      	cmp	r3, #0
 801967e:	f045 84d6 	bne.w	801f02e <cat_service+0x8456>
 8019682:	6822      	ldr	r2, [r4, #0]
 8019684:	f102 0008 	add.w	r0, r2, #8
 8019688:	08c3      	lsrs	r3, r0, #3
 801968a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801968e:	f993 1000 	ldrsb.w	r1, [r3]
 8019692:	f000 0307 	and.w	r3, r0, #7
 8019696:	3303      	adds	r3, #3
 8019698:	428b      	cmp	r3, r1
 801969a:	db02      	blt.n	80196a2 <cat_service+0x2aca>
 801969c:	2900      	cmp	r1, #0
 801969e:	f045 84c9 	bne.w	801f034 <cat_service+0x845c>
        self->write_buf = get_atcmd_buf(self);
 80196a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return (char*)self->desc->buf;
 80196a6:	6892      	ldr	r2, [r2, #8]
        self->write_buf = get_atcmd_buf(self);
 80196a8:	08c3      	lsrs	r3, r0, #3
 80196aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80196ae:	f993 1000 	ldrsb.w	r1, [r3]
 80196b2:	f000 0307 	and.w	r3, r0, #7
 80196b6:	3303      	adds	r3, #3
 80196b8:	428b      	cmp	r3, r1
 80196ba:	db02      	blt.n	80196c2 <cat_service+0x2aea>
 80196bc:	2900      	cmp	r1, #0
 80196be:	f046 8118 	bne.w	801f8f2 <cat_service+0x8d1a>
        self->write_state = CAT_WRITE_STATE_AFTER;
 80196c2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_atcmd_buf(self);
 80196c6:	63a2      	str	r2, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_AFTER;
 80196c8:	08c3      	lsrs	r3, r0, #3
 80196ca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80196ce:	f993 2000 	ldrsb.w	r2, [r3]
 80196d2:	f000 0307 	and.w	r3, r0, #7
 80196d6:	3303      	adds	r3, #3
 80196d8:	4293      	cmp	r3, r2
 80196da:	db02      	blt.n	80196e2 <cat_service+0x2b0a>
 80196dc:	2a00      	cmp	r2, #0
 80196de:	f046 810a 	bne.w	801f8f6 <cat_service+0x8d1e>
        self->write_state_after = state_after;
 80196e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_AFTER;
 80196e6:	2302      	movs	r3, #2
 80196e8:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 80196ea:	08c3      	lsrs	r3, r0, #3
 80196ec:	f000 0207 	and.w	r2, r0, #7
 80196f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80196f4:	f993 3000 	ldrsb.w	r3, [r3]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	db02      	blt.n	8019702 <cat_service+0x2b2a>
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	f046 80fc 	bne.w	801f8fa <cat_service+0x8d22>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019702:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8019704:	2218      	movs	r2, #24
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019706:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801970a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801970e:	f006 0207 	and.w	r2, r6, #7
 8019712:	f993 3000 	ldrsb.w	r3, [r3]
 8019716:	429a      	cmp	r2, r3
 8019718:	db02      	blt.n	8019720 <cat_service+0x2b48>
 801971a:	2b00      	cmp	r3, #0
 801971c:	f046 80ef 	bne.w	801f8fe <cat_service+0x8d26>
 8019720:	2312      	movs	r3, #18
 8019722:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                self->cmd_type = CAT_CMD_TYPE__TOTAL_NUM;
 8019726:	f7f0 fb01 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801972a:	2304      	movs	r3, #4
                s = CAT_STATUS_BUSY;
 801972c:	2501      	movs	r5, #1
                self->cmd_type = CAT_CMD_TYPE__TOTAL_NUM;
 801972e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                break;
 8019732:	f7fd bd49 	b.w	80171c8 <cat_service+0x5f0>
 8019736:	bf00      	nop
 8019738:	24009f00 	.word	0x24009f00
 801973c:	24009f40 	.word	0x24009f40
                if (self->cmd->write != NULL || (is_variables_access_possible(self, self->cmd, CAT_VAR_ACCESS_WRITE_ONLY) != false)) {
 8019740:	9104      	str	r1, [sp, #16]
 8019742:	f7f0 faf3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019746:	9904      	ldr	r1, [sp, #16]
 8019748:	f101 0008 	add.w	r0, r1, #8
 801974c:	08c3      	lsrs	r3, r0, #3
 801974e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019752:	f993 2000 	ldrsb.w	r2, [r3]
 8019756:	f000 0307 	and.w	r3, r0, #7
 801975a:	3303      	adds	r3, #3
 801975c:	4293      	cmp	r3, r2
 801975e:	db02      	blt.n	8019766 <cat_service+0x2b8e>
 8019760:	2a00      	cmp	r2, #0
 8019762:	f046 80b1 	bne.w	801f8c8 <cat_service+0x8cf0>
 8019766:	688b      	ldr	r3, [r1, #8]
 8019768:	9104      	str	r1, [sp, #16]
 801976a:	2b00      	cmp	r3, #0
 801976c:	f003 81e2 	beq.w	801cb34 <cat_service+0x5f5c>
                        self->position = 0;
 8019770:	f104 0518 	add.w	r5, r4, #24
 8019774:	f7f0 fada 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019778:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801977c:	f005 0207 	and.w	r2, r5, #7
 8019780:	f109 53dc 	add.w	r3, r9, #461373440	; 0x1b800000
 8019784:	9204      	str	r2, [sp, #16]
 8019786:	3203      	adds	r2, #3
 8019788:	f993 3000 	ldrsb.w	r3, [r3]
 801978c:	429a      	cmp	r2, r3
 801978e:	db02      	blt.n	8019796 <cat_service+0x2bbe>
 8019790:	2b00      	cmp	r3, #0
 8019792:	f046 801e 	bne.w	801f7d2 <cat_service+0x8bfa>
 8019796:	2300      	movs	r3, #0
                        if (print_current_cmd_full_name(self, "=") != 0) {
 8019798:	49b6      	ldr	r1, [pc, #728]	; (8019a74 <cat_service+0x2e9c>)
 801979a:	4620      	mov	r0, r4
                        self->position = 0;
 801979c:	61a3      	str	r3, [r4, #24]
                        if (print_current_cmd_full_name(self, "=") != 0) {
 801979e:	f7f8 fc31 	bl	8012004 <print_current_cmd_full_name>
 80197a2:	2800      	cmp	r0, #0
 80197a4:	f044 822e 	bne.w	801dc04 <cat_service+0x702c>
        self->position = 0;
 80197a8:	f7f0 fac0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80197ac:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
 80197b0:	9a04      	ldr	r2, [sp, #16]
 80197b2:	f999 3000 	ldrsb.w	r3, [r9]
 80197b6:	3203      	adds	r2, #3
 80197b8:	429a      	cmp	r2, r3
 80197ba:	db02      	blt.n	80197c2 <cat_service+0x2bea>
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f045 840b 	bne.w	801efd8 <cat_service+0x8400>
        return (char*)self->desc->buf;
 80197c2:	9b07      	ldr	r3, [sp, #28]
        self->position = 0;
 80197c4:	2100      	movs	r1, #0
        return (char*)self->desc->buf;
 80197c6:	9a06      	ldr	r2, [sp, #24]
 80197c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80197cc:	3203      	adds	r2, #3
 80197ce:	f993 3000 	ldrsb.w	r3, [r3]
        self->position = 0;
 80197d2:	61a1      	str	r1, [r4, #24]
        return (char*)self->desc->buf;
 80197d4:	429a      	cmp	r2, r3
 80197d6:	db02      	blt.n	80197de <cat_service+0x2c06>
 80197d8:	2b00      	cmp	r3, #0
 80197da:	f046 814d 	bne.w	801fa78 <cat_service+0x8ea0>
 80197de:	6822      	ldr	r2, [r4, #0]
 80197e0:	f102 0008 	add.w	r0, r2, #8
 80197e4:	08c3      	lsrs	r3, r0, #3
 80197e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80197ea:	f993 1000 	ldrsb.w	r1, [r3]
 80197ee:	f000 0307 	and.w	r3, r0, #7
 80197f2:	3303      	adds	r3, #3
 80197f4:	428b      	cmp	r3, r1
 80197f6:	db02      	blt.n	80197fe <cat_service+0x2c26>
 80197f8:	2900      	cmp	r1, #0
 80197fa:	f046 8140 	bne.w	801fa7e <cat_service+0x8ea6>
        self->write_buf = get_atcmd_buf(self);
 80197fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return (char*)self->desc->buf;
 8019802:	6892      	ldr	r2, [r2, #8]
        self->write_buf = get_atcmd_buf(self);
 8019804:	08c3      	lsrs	r3, r0, #3
 8019806:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801980a:	f993 1000 	ldrsb.w	r1, [r3]
 801980e:	f000 0307 	and.w	r3, r0, #7
 8019812:	3303      	adds	r3, #3
 8019814:	428b      	cmp	r3, r1
 8019816:	db02      	blt.n	801981e <cat_service+0x2c46>
 8019818:	2900      	cmp	r1, #0
 801981a:	f046 8132 	bne.w	801fa82 <cat_service+0x8eaa>
        self->write_state = CAT_WRITE_STATE_AFTER;
 801981e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_atcmd_buf(self);
 8019822:	63a2      	str	r2, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019824:	08c3      	lsrs	r3, r0, #3
 8019826:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801982a:	f993 2000 	ldrsb.w	r2, [r3]
 801982e:	f000 0307 	and.w	r3, r0, #7
 8019832:	3303      	adds	r3, #3
 8019834:	4293      	cmp	r3, r2
 8019836:	db02      	blt.n	801983e <cat_service+0x2c66>
 8019838:	2a00      	cmp	r2, #0
 801983a:	f046 8124 	bne.w	801fa86 <cat_service+0x8eae>
        self->write_state_after = state_after;
 801983e:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019842:	2302      	movs	r3, #2
 8019844:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8019846:	08c3      	lsrs	r3, r0, #3
 8019848:	f000 0207 	and.w	r2, r0, #7
 801984c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019850:	f993 3000 	ldrsb.w	r3, [r3]
 8019854:	429a      	cmp	r2, r3
 8019856:	db02      	blt.n	801985e <cat_service+0x2c86>
 8019858:	2b00      	cmp	r3, #0
 801985a:	f046 8058 	bne.w	801f90e <cat_service+0x8d36>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801985e:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8019860:	2218      	movs	r2, #24
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019862:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8019866:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801986a:	f006 0207 	and.w	r2, r6, #7
 801986e:	f993 3000 	ldrsb.w	r3, [r3]
 8019872:	429a      	cmp	r2, r3
 8019874:	db02      	blt.n	801987c <cat_service+0x2ca4>
 8019876:	2b00      	cmp	r3, #0
 8019878:	f046 804b 	bne.w	801f912 <cat_service+0x8d3a>
 801987c:	2312      	movs	r3, #18
 801987e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                self->cmd_type = CAT_CMD_TYPE_TEST;
 8019882:	f7f0 fa53 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019886:	2303      	movs	r3, #3
                s = CAT_STATUS_BUSY;
 8019888:	2501      	movs	r5, #1
                self->cmd_type = CAT_CMD_TYPE_TEST;
 801988a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                break;
 801988e:	f7fd bc9b 	b.w	80171c8 <cat_service+0x5f0>
                if (self->cmd->disable != false) {
 8019892:	9105      	str	r1, [sp, #20]
 8019894:	f7f0 fa4a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019898:	9905      	ldr	r1, [sp, #20]
 801989a:	f101 0022 	add.w	r0, r1, #34	; 0x22
 801989e:	08c3      	lsrs	r3, r0, #3
 80198a0:	f000 0207 	and.w	r2, r0, #7
 80198a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80198a8:	f993 3000 	ldrsb.w	r3, [r3]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	db02      	blt.n	80198b6 <cat_service+0x2cde>
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	f046 80ea 	bne.w	801fa8a <cat_service+0x8eb2>
 80198b6:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f002 878e 	beq.w	801c7dc <cat_service+0x5c04>
        if (++self->index >= self->commands_num)
 80198c0:	f7f0 fa34 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80198c4:	9b04      	ldr	r3, [sp, #16]
 80198c6:	9a08      	ldr	r2, [sp, #32]
 80198c8:	3301      	adds	r3, #1
 80198ca:	4293      	cmp	r3, r2
 80198cc:	60e3      	str	r3, [r4, #12]
 80198ce:	f084 86c0 	bcs.w	801e652 <cat_service+0x7a7a>
        self->length = 0;
 80198d2:	f7f0 fa2b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 80198d6:	f104 0014 	add.w	r0, r4, #20
 80198da:	08c3      	lsrs	r3, r0, #3
 80198dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80198e0:	f993 2000 	ldrsb.w	r2, [r3]
 80198e4:	f000 0307 	and.w	r3, r0, #7
 80198e8:	3303      	adds	r3, #3
 80198ea:	4293      	cmp	r3, r2
 80198ec:	db02      	blt.n	80198f4 <cat_service+0x2d1c>
 80198ee:	2a00      	cmp	r2, #0
 80198f0:	f046 80cd 	bne.w	801fa8e <cat_service+0x8eb6>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80198f4:	22ff      	movs	r2, #255	; 0xff
        self->state = CAT_STATE_PRINT_CMD;
 80198f6:	08f3      	lsrs	r3, r6, #3
        self->cmd_type = CAT_CMD_TYPE_NONE;
 80198f8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        self->state = CAT_STATE_PRINT_CMD;
 80198fc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->length = 0;
 8019900:	2200      	movs	r2, #0
        self->state = CAT_STATE_PRINT_CMD;
 8019902:	f993 3000 	ldrsb.w	r3, [r3]
        self->length = 0;
 8019906:	6162      	str	r2, [r4, #20]
        self->state = CAT_STATE_PRINT_CMD;
 8019908:	f006 0207 	and.w	r2, r6, #7
 801990c:	429a      	cmp	r2, r3
 801990e:	db02      	blt.n	8019916 <cat_service+0x2d3e>
 8019910:	2b00      	cmp	r3, #0
 8019912:	f045 8527 	bne.w	801f364 <cat_service+0x878c>
 8019916:	2318      	movs	r3, #24
                s = CAT_STATUS_BUSY;
 8019918:	2501      	movs	r5, #1
        self->state = CAT_STATE_PRINT_CMD;
 801991a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return true;
 801991e:	f7fd bc53 	b.w	80171c8 <cat_service+0x5f0>
                if (self->cmd->run != NULL) {
 8019922:	9104      	str	r1, [sp, #16]
 8019924:	f7f0 fa02 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019928:	9904      	ldr	r1, [sp, #16]
 801992a:	f101 0010 	add.w	r0, r1, #16
 801992e:	08c3      	lsrs	r3, r0, #3
 8019930:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019934:	f993 2000 	ldrsb.w	r2, [r3]
 8019938:	f000 0307 	and.w	r3, r0, #7
 801993c:	3303      	adds	r3, #3
 801993e:	4293      	cmp	r3, r2
 8019940:	db02      	blt.n	8019948 <cat_service+0x2d70>
 8019942:	2a00      	cmp	r2, #0
 8019944:	f046 8038 	bne.w	801f9b8 <cat_service+0x8de0>
 8019948:	690b      	ldr	r3, [r1, #16]
 801994a:	2b00      	cmp	r3, #0
 801994c:	f000 808a 	beq.w	8019a64 <cat_service+0x2e8c>
                        self->position = 0;
 8019950:	f104 0518 	add.w	r5, r4, #24
 8019954:	f7f0 f9ea 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019958:	08eb      	lsrs	r3, r5, #3
 801995a:	f005 0907 	and.w	r9, r5, #7
 801995e:	9304      	str	r3, [sp, #16]
 8019960:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019964:	f109 0203 	add.w	r2, r9, #3
 8019968:	f993 3000 	ldrsb.w	r3, [r3]
 801996c:	429a      	cmp	r2, r3
 801996e:	db02      	blt.n	8019976 <cat_service+0x2d9e>
 8019970:	2b00      	cmp	r3, #0
 8019972:	f045 85f3 	bne.w	801f55c <cat_service+0x8984>
 8019976:	2300      	movs	r3, #0
                        if (print_current_cmd_full_name(self, "") != 0) {
 8019978:	493f      	ldr	r1, [pc, #252]	; (8019a78 <cat_service+0x2ea0>)
 801997a:	4620      	mov	r0, r4
                        self->position = 0;
 801997c:	61a3      	str	r3, [r4, #24]
                        if (print_current_cmd_full_name(self, "") != 0) {
 801997e:	f7f8 fb41 	bl	8012004 <print_current_cmd_full_name>
 8019982:	2800      	cmp	r0, #0
 8019984:	f044 870f 	bne.w	801e7a6 <cat_service+0x7bce>
        self->position = 0;
 8019988:	f7f0 f9d0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801998c:	9b04      	ldr	r3, [sp, #16]
 801998e:	f109 0903 	add.w	r9, r9, #3
 8019992:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019996:	f993 3000 	ldrsb.w	r3, [r3]
 801999a:	4599      	cmp	r9, r3
 801999c:	db02      	blt.n	80199a4 <cat_service+0x2dcc>
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f045 87e7 	bne.w	801f972 <cat_service+0x8d9a>
        return (char*)self->desc->buf;
 80199a4:	9b07      	ldr	r3, [sp, #28]
        self->position = 0;
 80199a6:	2100      	movs	r1, #0
        return (char*)self->desc->buf;
 80199a8:	9a06      	ldr	r2, [sp, #24]
 80199aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80199ae:	3203      	adds	r2, #3
 80199b0:	f993 3000 	ldrsb.w	r3, [r3]
        self->position = 0;
 80199b4:	61a1      	str	r1, [r4, #24]
        return (char*)self->desc->buf;
 80199b6:	429a      	cmp	r2, r3
 80199b8:	db02      	blt.n	80199c0 <cat_service+0x2de8>
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	f045 87dc 	bne.w	801f978 <cat_service+0x8da0>
 80199c0:	6822      	ldr	r2, [r4, #0]
 80199c2:	f102 0008 	add.w	r0, r2, #8
 80199c6:	08c3      	lsrs	r3, r0, #3
 80199c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80199cc:	f993 1000 	ldrsb.w	r1, [r3]
 80199d0:	f000 0307 	and.w	r3, r0, #7
 80199d4:	3303      	adds	r3, #3
 80199d6:	428b      	cmp	r3, r1
 80199d8:	db02      	blt.n	80199e0 <cat_service+0x2e08>
 80199da:	2900      	cmp	r1, #0
 80199dc:	f045 87cf 	bne.w	801f97e <cat_service+0x8da6>
        self->write_buf = get_atcmd_buf(self);
 80199e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return (char*)self->desc->buf;
 80199e4:	6892      	ldr	r2, [r2, #8]
        self->write_buf = get_atcmd_buf(self);
 80199e6:	08c3      	lsrs	r3, r0, #3
 80199e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 80199ec:	f993 1000 	ldrsb.w	r1, [r3]
 80199f0:	f000 0307 	and.w	r3, r0, #7
 80199f4:	3303      	adds	r3, #3
 80199f6:	428b      	cmp	r3, r1
 80199f8:	db02      	blt.n	8019a00 <cat_service+0x2e28>
 80199fa:	2900      	cmp	r1, #0
 80199fc:	f045 87c1 	bne.w	801f982 <cat_service+0x8daa>
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019a00:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_atcmd_buf(self);
 8019a04:	63a2      	str	r2, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019a06:	08c3      	lsrs	r3, r0, #3
 8019a08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019a0c:	f993 2000 	ldrsb.w	r2, [r3]
 8019a10:	f000 0307 	and.w	r3, r0, #7
 8019a14:	3303      	adds	r3, #3
 8019a16:	4293      	cmp	r3, r2
 8019a18:	db02      	blt.n	8019a20 <cat_service+0x2e48>
 8019a1a:	2a00      	cmp	r2, #0
 8019a1c:	f045 87b3 	bne.w	801f986 <cat_service+0x8dae>
        self->write_state_after = state_after;
 8019a20:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_AFTER;
 8019a24:	2302      	movs	r3, #2
 8019a26:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8019a28:	08c3      	lsrs	r3, r0, #3
 8019a2a:	f000 0207 	and.w	r2, r0, #7
 8019a2e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019a32:	f993 3000 	ldrsb.w	r3, [r3]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	db02      	blt.n	8019a40 <cat_service+0x2e68>
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	f045 87a5 	bne.w	801f98a <cat_service+0x8db2>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019a40:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8019a42:	2218      	movs	r2, #24
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019a44:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8019a48:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019a4c:	f006 0207 	and.w	r2, r6, #7
 8019a50:	f993 3000 	ldrsb.w	r3, [r3]
 8019a54:	429a      	cmp	r2, r3
 8019a56:	db02      	blt.n	8019a5e <cat_service+0x2e86>
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	f045 8798 	bne.w	801f98e <cat_service+0x8db6>
 8019a5e:	2312      	movs	r3, #18
 8019a60:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                self->cmd_type = CAT_CMD_TYPE_READ;
 8019a64:	f7f0 f962 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019a68:	2001      	movs	r0, #1
                s = CAT_STATUS_BUSY;
 8019a6a:	4605      	mov	r5, r0
                self->cmd_type = CAT_CMD_TYPE_READ;
 8019a6c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                break;
 8019a70:	f7fd bbaa 	b.w	80171c8 <cat_service+0x5f0>
 8019a74:	24009340 	.word	0x24009340
 8019a78:	24009ec0 	.word	0x24009ec0
        self->state = CAT_STATE_HOLD;
 8019a7c:	f7f0 f956 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019a80:	f006 0207 	and.w	r2, r6, #7
 8019a84:	08f3      	lsrs	r3, r6, #3
 8019a86:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	db02      	blt.n	8019a98 <cat_service+0x2ec0>
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	f045 8792 	bne.w	801f9bc <cat_service+0x8de4>
        self->hold_state_flag = true;
 8019a98:	f104 0030 	add.w	r0, r4, #48	; 0x30
        self->state = CAT_STATE_HOLD;
 8019a9c:	2311      	movs	r3, #17
 8019a9e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        self->hold_state_flag = true;
 8019aa2:	08c3      	lsrs	r3, r0, #3
 8019aa4:	f000 0207 	and.w	r2, r0, #7
 8019aa8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019aac:	f993 3000 	ldrsb.w	r3, [r3]
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	db02      	blt.n	8019aba <cat_service+0x2ee2>
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	f045 8784 	bne.w	801f9c2 <cat_service+0x8dea>
        self->hold_exit_status = 0;
 8019aba:	f104 0034 	add.w	r0, r4, #52	; 0x34
        self->hold_state_flag = true;
 8019abe:	2301      	movs	r3, #1
 8019ac0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        self->hold_exit_status = 0;
 8019ac4:	08c3      	lsrs	r3, r0, #3
 8019ac6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019aca:	f993 2000 	ldrsb.w	r2, [r3]
 8019ace:	f000 0307 	and.w	r3, r0, #7
 8019ad2:	3303      	adds	r3, #3
 8019ad4:	4293      	cmp	r3, r2
 8019ad6:	db02      	blt.n	8019ade <cat_service+0x2f06>
 8019ad8:	2a00      	cmp	r2, #0
 8019ada:	f045 853a 	bne.w	801f552 <cat_service+0x897a>
 8019ade:	2300      	movs	r3, #0
                s = process_run_loop(self);
 8019ae0:	2501      	movs	r5, #1
        self->hold_exit_status = 0;
 8019ae2:	6363      	str	r3, [r4, #52]	; 0x34
}
 8019ae4:	f7fd bb70 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 8019ae8:	f7f0 f920 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019aec:	08e3      	lsrs	r3, r4, #3
 8019aee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019af2:	f993 2000 	ldrsb.w	r2, [r3]
 8019af6:	f004 0307 	and.w	r3, r4, #7
 8019afa:	3303      	adds	r3, #3
 8019afc:	4293      	cmp	r3, r2
 8019afe:	db02      	blt.n	8019b06 <cat_service+0x2f2e>
 8019b00:	2a00      	cmp	r2, #0
 8019b02:	f045 8760 	bne.w	801f9c6 <cat_service+0x8dee>
 8019b06:	f8d4 9000 	ldr.w	r9, [r4]
 8019b0a:	f109 0008 	add.w	r0, r9, #8
 8019b0e:	08c3      	lsrs	r3, r0, #3
 8019b10:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019b14:	f993 2000 	ldrsb.w	r2, [r3]
 8019b18:	f000 0307 	and.w	r3, r0, #7
 8019b1c:	3303      	adds	r3, #3
 8019b1e:	4293      	cmp	r3, r2
 8019b20:	db02      	blt.n	8019b28 <cat_service+0x2f50>
 8019b22:	2a00      	cmp	r2, #0
 8019b24:	f045 8752 	bne.w	801f9cc <cat_service+0x8df4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8019b28:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 8019b2c:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 8019b30:	08c3      	lsrs	r3, r0, #3
 8019b32:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019b36:	f993 2000 	ldrsb.w	r2, [r3]
 8019b3a:	f000 0307 	and.w	r3, r0, #7
 8019b3e:	3303      	adds	r3, #3
 8019b40:	4293      	cmp	r3, r2
 8019b42:	db02      	blt.n	8019b4a <cat_service+0x2f72>
 8019b44:	2a00      	cmp	r2, #0
 8019b46:	f045 8743 	bne.w	801f9d0 <cat_service+0x8df8>
 8019b4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	f003 80ad 	beq.w	801ccae <cat_service+0x60d6>
 8019b54:	f7f0 f8ea 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019b58:	f109 000c 	add.w	r0, r9, #12
 8019b5c:	08c3      	lsrs	r3, r0, #3
 8019b5e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019b62:	f993 2000 	ldrsb.w	r2, [r3]
 8019b66:	f000 0307 	and.w	r3, r0, #7
 8019b6a:	3303      	adds	r3, #3
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	db02      	blt.n	8019b76 <cat_service+0x2f9e>
 8019b70:	2a00      	cmp	r2, #0
 8019b72:	f045 872f 	bne.w	801f9d4 <cat_service+0x8dfc>
 8019b76:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019b7a:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 8019b7c:	f7f0 f8d6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019b80:	9a04      	ldr	r2, [sp, #16]
 8019b82:	4628      	mov	r0, r5
 8019b84:	49c4      	ldr	r1, [pc, #784]	; (8019e98 <cat_service+0x32c0>)
 8019b86:	f008 ff26 	bl	80229d6 <strncpy>
        self->position = 0;
 8019b8a:	f104 0018 	add.w	r0, r4, #24
 8019b8e:	08c3      	lsrs	r3, r0, #3
 8019b90:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019b94:	f993 2000 	ldrsb.w	r2, [r3]
 8019b98:	f000 0307 	and.w	r3, r0, #7
 8019b9c:	3303      	adds	r3, #3
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	db02      	blt.n	8019ba8 <cat_service+0x2fd0>
 8019ba2:	2a00      	cmp	r2, #0
 8019ba4:	f045 86f8 	bne.w	801f998 <cat_service+0x8dc0>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019ba8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 8019bac:	2300      	movs	r3, #0
 8019bae:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019bb0:	08c3      	lsrs	r3, r0, #3
 8019bb2:	f000 0207 	and.w	r2, r0, #7
 8019bb6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019bba:	f993 3000 	ldrsb.w	r3, [r3]
 8019bbe:	429a      	cmp	r2, r3
 8019bc0:	db02      	blt.n	8019bc8 <cat_service+0x2ff0>
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	f045 86ea 	bne.w	801f99c <cat_service+0x8dc4>
        self->write_buf = get_new_line_chars(self);
 8019bc8:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019bcc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8019bd0:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 8019bd4:	08c3      	lsrs	r3, r0, #3
 8019bd6:	f000 0207 	and.w	r2, r0, #7
 8019bda:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019bde:	3203      	adds	r2, #3
 8019be0:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019be4:	4bad      	ldr	r3, [pc, #692]	; (8019e9c <cat_service+0x32c4>)
        self->write_buf = get_new_line_chars(self);
 8019be6:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 8019be8:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 8019bea:	db02      	blt.n	8019bf2 <cat_service+0x301a>
 8019bec:	2900      	cmp	r1, #0
 8019bee:	f045 86d7 	bne.w	801f9a0 <cat_service+0x8dc8>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019bf2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 8019bf6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019bf8:	08c3      	lsrs	r3, r0, #3
 8019bfa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019bfe:	f993 2000 	ldrsb.w	r2, [r3]
 8019c02:	f000 0307 	and.w	r3, r0, #7
 8019c06:	3303      	adds	r3, #3
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	db02      	blt.n	8019c12 <cat_service+0x303a>
 8019c0c:	2a00      	cmp	r2, #0
 8019c0e:	f045 86c9 	bne.w	801f9a4 <cat_service+0x8dcc>
        self->write_state_after = state_after;
 8019c12:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 8019c16:	2300      	movs	r3, #0
 8019c18:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 8019c1a:	08c3      	lsrs	r3, r0, #3
 8019c1c:	f000 0207 	and.w	r2, r0, #7
 8019c20:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019c24:	f993 3000 	ldrsb.w	r3, [r3]
 8019c28:	429a      	cmp	r2, r3
 8019c2a:	db02      	blt.n	8019c32 <cat_service+0x305a>
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	f045 86bb 	bne.w	801f9a8 <cat_service+0x8dd0>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019c32:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 8019c34:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019c36:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 8019c3a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019c3e:	f006 0207 	and.w	r2, r6, #7
 8019c42:	f993 3000 	ldrsb.w	r3, [r3]
 8019c46:	429a      	cmp	r2, r3
 8019c48:	db02      	blt.n	8019c50 <cat_service+0x3078>
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	f045 8586 	bne.w	801f75c <cat_service+0x8b84>
 8019c50:	2312      	movs	r3, #18
                s = process_run_loop(self);
 8019c52:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 8019c54:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 8019c58:	f7fd bab6 	b.w	80171c8 <cat_service+0x5f0>
        if (self->commands_num == 0) {
 8019c5c:	f7f0 f866 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019c60:	f104 0020 	add.w	r0, r4, #32
 8019c64:	08c3      	lsrs	r3, r0, #3
 8019c66:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019c6a:	f993 2000 	ldrsb.w	r2, [r3]
 8019c6e:	f000 0307 	and.w	r3, r0, #7
 8019c72:	3303      	adds	r3, #3
 8019c74:	4293      	cmp	r3, r2
 8019c76:	db02      	blt.n	8019c7e <cat_service+0x30a6>
 8019c78:	2a00      	cmp	r2, #0
 8019c7a:	f045 8697 	bne.w	801f9ac <cat_service+0x8dd4>
 8019c7e:	6a23      	ldr	r3, [r4, #32]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	f003 8547 	beq.w	801d714 <cat_service+0x6b3c>
        self->index = 0;
 8019c86:	f7f0 f851 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019c8a:	f104 000c 	add.w	r0, r4, #12
 8019c8e:	08c3      	lsrs	r3, r0, #3
 8019c90:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019c94:	f993 2000 	ldrsb.w	r2, [r3]
 8019c98:	f000 0307 	and.w	r3, r0, #7
 8019c9c:	3303      	adds	r3, #3
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	db02      	blt.n	8019ca8 <cat_service+0x30d0>
 8019ca2:	2a00      	cmp	r2, #0
 8019ca4:	f045 8684 	bne.w	801f9b0 <cat_service+0x8dd8>
        self->length = 0;
 8019ca8:	f104 0014 	add.w	r0, r4, #20
        self->index = 0;
 8019cac:	2300      	movs	r3, #0
 8019cae:	60e3      	str	r3, [r4, #12]
        self->length = 0;
 8019cb0:	08c3      	lsrs	r3, r0, #3
 8019cb2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019cb6:	f993 2000 	ldrsb.w	r2, [r3]
 8019cba:	f000 0307 	and.w	r3, r0, #7
 8019cbe:	3303      	adds	r3, #3
 8019cc0:	4293      	cmp	r3, r2
 8019cc2:	db02      	blt.n	8019cca <cat_service+0x30f2>
 8019cc4:	2a00      	cmp	r2, #0
 8019cc6:	f045 81c5 	bne.w	801f054 <cat_service+0x847c>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8019cca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        self->length = 0;
 8019cce:	2300      	movs	r3, #0
 8019cd0:	6163      	str	r3, [r4, #20]
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8019cd2:	08c3      	lsrs	r3, r0, #3
 8019cd4:	f000 0207 	and.w	r2, r0, #7
 8019cd8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	db02      	blt.n	8019cea <cat_service+0x3112>
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	f045 8543 	bne.w	801f770 <cat_service+0x8b98>
        self->state = CAT_STATE_PRINT_CMD;
 8019cea:	08f3      	lsrs	r3, r6, #3
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8019cec:	22ff      	movs	r2, #255	; 0xff
        self->state = CAT_STATE_PRINT_CMD;
 8019cee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->cmd_type = CAT_CMD_TYPE_NONE;
 8019cf2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        self->state = CAT_STATE_PRINT_CMD;
 8019cf6:	f006 0207 	and.w	r2, r6, #7
 8019cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8019cfe:	429a      	cmp	r2, r3
 8019d00:	db02      	blt.n	8019d08 <cat_service+0x3130>
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f045 8536 	bne.w	801f774 <cat_service+0x8b9c>
 8019d08:	2318      	movs	r3, #24
                s = process_run_loop(self);
 8019d0a:	2501      	movs	r5, #1
        self->state = CAT_STATE_PRINT_CMD;
 8019d0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019d10:	f7fd ba5a 	b.w	80171c8 <cat_service+0x5f0>
        if (self->io->read(&self->current_char) == 0)
 8019d14:	f7f0 f80a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019d18:	1d20      	adds	r0, r4, #4
 8019d1a:	08c3      	lsrs	r3, r0, #3
 8019d1c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019d20:	f993 2000 	ldrsb.w	r2, [r3]
 8019d24:	f000 0307 	and.w	r3, r0, #7
 8019d28:	3303      	adds	r3, #3
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	db02      	blt.n	8019d34 <cat_service+0x315c>
 8019d2e:	2a00      	cmp	r2, #0
 8019d30:	f045 8431 	bne.w	801f596 <cat_service+0x89be>
 8019d34:	6862      	ldr	r2, [r4, #4]
 8019d36:	1d10      	adds	r0, r2, #4
 8019d38:	08c3      	lsrs	r3, r0, #3
 8019d3a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019d3e:	f993 1000 	ldrsb.w	r1, [r3]
 8019d42:	f000 0307 	and.w	r3, r0, #7
 8019d46:	3303      	adds	r3, #3
 8019d48:	428b      	cmp	r3, r1
 8019d4a:	db02      	blt.n	8019d52 <cat_service+0x317a>
 8019d4c:	2900      	cmp	r1, #0
 8019d4e:	f045 8424 	bne.w	801f59a <cat_service+0x89c2>
 8019d52:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8019d56:	6853      	ldr	r3, [r2, #4]
 8019d58:	4648      	mov	r0, r9
 8019d5a:	4798      	blx	r3
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	f001 83ec 	beq.w	801b53a <cat_service+0x4962>
 8019d62:	2300      	movs	r3, #0
 8019d64:	9301      	str	r3, [sp, #4]
 8019d66:	f7fd bb1e 	b.w	80173a6 <cat_service+0x7ce>
 8019d6a:	f7ef ffdf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019d6e:	1d20      	adds	r0, r4, #4
 8019d70:	08c3      	lsrs	r3, r0, #3
 8019d72:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019d76:	f993 2000 	ldrsb.w	r2, [r3]
 8019d7a:	f000 0307 	and.w	r3, r0, #7
 8019d7e:	3303      	adds	r3, #3
 8019d80:	4293      	cmp	r3, r2
 8019d82:	db02      	blt.n	8019d8a <cat_service+0x31b2>
 8019d84:	2a00      	cmp	r2, #0
 8019d86:	f045 840a 	bne.w	801f59e <cat_service+0x89c6>
 8019d8a:	6862      	ldr	r2, [r4, #4]
 8019d8c:	1d10      	adds	r0, r2, #4
 8019d8e:	08c3      	lsrs	r3, r0, #3
 8019d90:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019d94:	f993 1000 	ldrsb.w	r1, [r3]
 8019d98:	f000 0307 	and.w	r3, r0, #7
 8019d9c:	3303      	adds	r3, #3
 8019d9e:	428b      	cmp	r3, r1
 8019da0:	db02      	blt.n	8019da8 <cat_service+0x31d0>
 8019da2:	2900      	cmp	r1, #0
 8019da4:	f045 83f5 	bne.w	801f592 <cat_service+0x89ba>
 8019da8:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8019dac:	6853      	ldr	r3, [r2, #4]
 8019dae:	4648      	mov	r0, r9
 8019db0:	4798      	blx	r3
 8019db2:	2800      	cmp	r0, #0
 8019db4:	f001 83c1 	beq.w	801b53a <cat_service+0x4962>
 8019db8:	2300      	movs	r3, #0
 8019dba:	9301      	str	r3, [sp, #4]
 8019dbc:	f7fd bb6e 	b.w	801749c <cat_service+0x8c4>
 8019dc0:	f7ef ffb4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019dc4:	1d20      	adds	r0, r4, #4
 8019dc6:	08c3      	lsrs	r3, r0, #3
 8019dc8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019dcc:	f993 2000 	ldrsb.w	r2, [r3]
 8019dd0:	f000 0307 	and.w	r3, r0, #7
 8019dd4:	3303      	adds	r3, #3
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	db02      	blt.n	8019de0 <cat_service+0x3208>
 8019dda:	2a00      	cmp	r2, #0
 8019ddc:	f045 83e1 	bne.w	801f5a2 <cat_service+0x89ca>
 8019de0:	6862      	ldr	r2, [r4, #4]
 8019de2:	1d10      	adds	r0, r2, #4
 8019de4:	08c3      	lsrs	r3, r0, #3
 8019de6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019dea:	f993 1000 	ldrsb.w	r1, [r3]
 8019dee:	f000 0307 	and.w	r3, r0, #7
 8019df2:	3303      	adds	r3, #3
 8019df4:	428b      	cmp	r3, r1
 8019df6:	db02      	blt.n	8019dfe <cat_service+0x3226>
 8019df8:	2900      	cmp	r1, #0
 8019dfa:	f045 83d4 	bne.w	801f5a6 <cat_service+0x89ce>
 8019dfe:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8019e02:	6853      	ldr	r3, [r2, #4]
 8019e04:	4648      	mov	r0, r9
 8019e06:	4798      	blx	r3
 8019e08:	2800      	cmp	r0, #0
 8019e0a:	f001 8396 	beq.w	801b53a <cat_service+0x4962>
 8019e0e:	2300      	movs	r3, #0
 8019e10:	9301      	str	r3, [sp, #4]
 8019e12:	f7fd ba5d 	b.w	80172d0 <cat_service+0x6f8>
 8019e16:	f7ef ff89 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019e1a:	1d20      	adds	r0, r4, #4
 8019e1c:	08c3      	lsrs	r3, r0, #3
 8019e1e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019e22:	f993 2000 	ldrsb.w	r2, [r3]
 8019e26:	f000 0307 	and.w	r3, r0, #7
 8019e2a:	3303      	adds	r3, #3
 8019e2c:	4293      	cmp	r3, r2
 8019e2e:	db02      	blt.n	8019e36 <cat_service+0x325e>
 8019e30:	2a00      	cmp	r2, #0
 8019e32:	f045 83ac 	bne.w	801f58e <cat_service+0x89b6>
 8019e36:	6862      	ldr	r2, [r4, #4]
 8019e38:	1d10      	adds	r0, r2, #4
 8019e3a:	08c3      	lsrs	r3, r0, #3
 8019e3c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019e40:	f993 1000 	ldrsb.w	r1, [r3]
 8019e44:	f000 0307 	and.w	r3, r0, #7
 8019e48:	3303      	adds	r3, #3
 8019e4a:	428b      	cmp	r3, r1
 8019e4c:	db02      	blt.n	8019e54 <cat_service+0x327c>
 8019e4e:	2900      	cmp	r1, #0
 8019e50:	f045 81b5 	bne.w	801f1be <cat_service+0x85e6>
 8019e54:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8019e58:	6853      	ldr	r3, [r2, #4]
 8019e5a:	4648      	mov	r0, r9
 8019e5c:	4798      	blx	r3
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	f001 836b 	beq.w	801b53a <cat_service+0x4962>
 8019e64:	2300      	movs	r3, #0
 8019e66:	9301      	str	r3, [sp, #4]
 8019e68:	f7fe bc84 	b.w	8018774 <cat_service+0x1b9c>
        if (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE)
 8019e6c:	f7ef ff5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019e70:	9b03      	ldr	r3, [sp, #12]
 8019e72:	9a02      	ldr	r2, [sp, #8]
 8019e74:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019e78:	f993 3000 	ldrsb.w	r3, [r3]
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	db02      	blt.n	8019e86 <cat_service+0x32ae>
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	f045 85c6 	bne.w	801fa12 <cat_service+0x8e3a>
 8019e86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e8a:	2b06      	cmp	r3, #6
 8019e8c:	f002 872e 	beq.w	801ccec <cat_service+0x6114>
 8019e90:	2300      	movs	r3, #0
 8019e92:	9301      	str	r3, [sp, #4]
 8019e94:	f7fe b93b 	b.w	801810e <cat_service+0x1536>
 8019e98:	24009200 	.word	0x24009200
 8019e9c:	24009240 	.word	0x24009240
        if (self->hold_exit_status == 0)
 8019ea0:	f7ef ff44 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019ea4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8019ea8:	08c3      	lsrs	r3, r0, #3
 8019eaa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019eae:	f993 2000 	ldrsb.w	r2, [r3]
 8019eb2:	f000 0307 	and.w	r3, r0, #7
 8019eb6:	3303      	adds	r3, #3
 8019eb8:	4293      	cmp	r3, r2
 8019eba:	db02      	blt.n	8019ec2 <cat_service+0x32ea>
 8019ebc:	2a00      	cmp	r2, #0
 8019ebe:	f045 85ab 	bne.w	801fa18 <cat_service+0x8e40>
 8019ec2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8019ec4:	2d00      	cmp	r5, #0
 8019ec6:	f002 8711 	beq.w	801ccec <cat_service+0x6114>
 8019eca:	2300      	movs	r3, #0
 8019ecc:	9301      	str	r3, [sp, #4]
 8019ece:	f7fe b949 	b.w	8018164 <cat_service+0x158c>
        switch (self->state) {
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	9301      	str	r3, [sp, #4]
 8019ed6:	f7fe bb4d 	b.w	8018574 <cat_service+0x199c>
 8019eda:	2300      	movs	r3, #0
 8019edc:	9301      	str	r3, [sp, #4]
 8019ede:	f7fe bc17 	b.w	8018710 <cat_service+0x1b38>
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	9301      	str	r3, [sp, #4]
 8019ee6:	f7fd bb7b 	b.w	80175e0 <cat_service+0xa08>
                self->state = CAT_STATE_HOLD;
 8019eea:	2300      	movs	r3, #0
 8019eec:	9301      	str	r3, [sp, #4]
 8019eee:	f7fd bb81 	b.w	80175f4 <cat_service+0xa1c>
        switch (self->state) {
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	9301      	str	r3, [sp, #4]
 8019ef6:	f7fd bb15 	b.w	8017524 <cat_service+0x94c>
        if (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE)
 8019efa:	2300      	movs	r3, #0
 8019efc:	9301      	str	r3, [sp, #4]
 8019efe:	f7fd b8f5 	b.w	80170ec <cat_service+0x514>
                                ch = '\n';
 8019f02:	2300      	movs	r3, #0
 8019f04:	9301      	str	r3, [sp, #4]
 8019f06:	f7fd bc30 	b.w	801776a <cat_service+0xb92>
        switch (self->var->type) {
 8019f0a:	f7ef ff0f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019f0e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8019f12:	08da      	lsrs	r2, r3, #3
 8019f14:	f003 0107 	and.w	r1, r3, #7
 8019f18:	9310      	str	r3, [sp, #64]	; 0x40
 8019f1a:	f102 53dc 	add.w	r3, r2, #461373440	; 0x1b800000
 8019f1e:	920d      	str	r2, [sp, #52]	; 0x34
 8019f20:	1cca      	adds	r2, r1, #3
 8019f22:	910e      	str	r1, [sp, #56]	; 0x38
 8019f24:	f993 3000 	ldrsb.w	r3, [r3]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	db02      	blt.n	8019f32 <cat_service+0x335a>
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	f045 8327 	bne.w	801f580 <cat_service+0x89a8>
 8019f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019f34:	1d18      	adds	r0, r3, #4
 8019f36:	9304      	str	r3, [sp, #16]
 8019f38:	08c3      	lsrs	r3, r0, #3
 8019f3a:	f000 0207 	and.w	r2, r0, #7
 8019f3e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019f42:	f993 3000 	ldrsb.w	r3, [r3]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	db02      	blt.n	8019f50 <cat_service+0x3378>
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	f045 831b 	bne.w	801f586 <cat_service+0x89ae>
 8019f50:	9b04      	ldr	r3, [sp, #16]
 8019f52:	791b      	ldrb	r3, [r3, #4]
 8019f54:	2b04      	cmp	r3, #4
 8019f56:	f206 8009 	bhi.w	801ff6c <cat_service+0x9394>
 8019f5a:	a201      	add	r2, pc, #4	; (adr r2, 8019f60 <cat_service+0x3388>)
 8019f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f60:	080192cb 	.word	0x080192cb
 8019f64:	08019035 	.word	0x08019035
 8019f68:	08018f49 	.word	0x08018f49
 8019f6c:	08018d3f 	.word	0x08018d3f
 8019f70:	08018b79 	.word	0x08018b79
        if (self->io->read(&self->current_char) == 0)
 8019f74:	f7ef feda 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019f78:	1d20      	adds	r0, r4, #4
 8019f7a:	08c3      	lsrs	r3, r0, #3
 8019f7c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019f80:	f993 2000 	ldrsb.w	r2, [r3]
 8019f84:	f000 0307 	and.w	r3, r0, #7
 8019f88:	3303      	adds	r3, #3
 8019f8a:	4293      	cmp	r3, r2
 8019f8c:	db02      	blt.n	8019f94 <cat_service+0x33bc>
 8019f8e:	2a00      	cmp	r2, #0
 8019f90:	f045 8490 	bne.w	801f8b4 <cat_service+0x8cdc>
 8019f94:	6862      	ldr	r2, [r4, #4]
 8019f96:	1d10      	adds	r0, r2, #4
 8019f98:	08c3      	lsrs	r3, r0, #3
 8019f9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019f9e:	f993 1000 	ldrsb.w	r1, [r3]
 8019fa2:	f000 0307 	and.w	r3, r0, #7
 8019fa6:	3303      	adds	r3, #3
 8019fa8:	428b      	cmp	r3, r1
 8019faa:	db02      	blt.n	8019fb2 <cat_service+0x33da>
 8019fac:	2900      	cmp	r1, #0
 8019fae:	f045 847f 	bne.w	801f8b0 <cat_service+0x8cd8>
 8019fb2:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 8019fb6:	6853      	ldr	r3, [r2, #4]
 8019fb8:	4648      	mov	r0, r9
 8019fba:	4798      	blx	r3
 8019fbc:	2800      	cmp	r0, #0
 8019fbe:	f001 82bc 	beq.w	801b53a <cat_service+0x4962>
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	9301      	str	r3, [sp, #4]
 8019fc6:	f7fd bc32 	b.w	801782e <cat_service+0xc56>
        switch (self->state) {
 8019fca:	2300      	movs	r3, #0
 8019fcc:	9301      	str	r3, [sp, #4]
 8019fce:	f7fd bfd0 	b.w	8017f72 <cat_service+0x139a>
                        self->state = (self->partial_cntr == 1) ? CAT_STATE_COMMAND_FOUND : CAT_STATE_COMMAND_NOT_FOUND;
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	9301      	str	r3, [sp, #4]
 8019fd6:	f7fd bcc7 	b.w	8017968 <cat_service+0xd90>
        if (self->io->read(&self->current_char) == 0)
 8019fda:	2300      	movs	r3, #0
 8019fdc:	9301      	str	r3, [sp, #4]
 8019fde:	f7fd bf39 	b.w	8017e54 <cat_service+0x127c>
 8019fe2:	f7ef fea3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8019fe6:	1d20      	adds	r0, r4, #4
 8019fe8:	08c3      	lsrs	r3, r0, #3
 8019fea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8019fee:	f993 2000 	ldrsb.w	r2, [r3]
 8019ff2:	f000 0307 	and.w	r3, r0, #7
 8019ff6:	3303      	adds	r3, #3
 8019ff8:	4293      	cmp	r3, r2
 8019ffa:	db02      	blt.n	801a002 <cat_service+0x342a>
 8019ffc:	2a00      	cmp	r2, #0
 8019ffe:	f045 8455 	bne.w	801f8ac <cat_service+0x8cd4>
 801a002:	6862      	ldr	r2, [r4, #4]
 801a004:	1d10      	adds	r0, r2, #4
 801a006:	08c3      	lsrs	r3, r0, #3
 801a008:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a00c:	f993 1000 	ldrsb.w	r1, [r3]
 801a010:	f000 0307 	and.w	r3, r0, #7
 801a014:	3303      	adds	r3, #3
 801a016:	428b      	cmp	r3, r1
 801a018:	db02      	blt.n	801a020 <cat_service+0x3448>
 801a01a:	2900      	cmp	r1, #0
 801a01c:	f045 8444 	bne.w	801f8a8 <cat_service+0x8cd0>
 801a020:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 801a024:	6853      	ldr	r3, [r2, #4]
 801a026:	4648      	mov	r0, r9
 801a028:	4798      	blx	r3
 801a02a:	2800      	cmp	r0, #0
 801a02c:	f001 8285 	beq.w	801b53a <cat_service+0x4962>
 801a030:	2300      	movs	r3, #0
 801a032:	9301      	str	r3, [sp, #4]
 801a034:	f7fd bd96 	b.w	8017b64 <cat_service+0xf8c>
 801a038:	2300      	movs	r3, #0
 801a03a:	9301      	str	r3, [sp, #4]
 801a03c:	f7fd bdd8 	b.w	8017bf0 <cat_service+0x1018>
        switch (self->state) {
 801a040:	2300      	movs	r3, #0
 801a042:	9301      	str	r3, [sp, #4]
 801a044:	f7fe b960 	b.w	8018308 <cat_service+0x1730>
 801a048:	2300      	movs	r3, #0
 801a04a:	9301      	str	r3, [sp, #4]
 801a04c:	f7fe b96e 	b.w	801832c <cat_service+0x1754>
        if (self->io->read(&self->current_char) == 0)
 801a050:	2300      	movs	r3, #0
 801a052:	9301      	str	r3, [sp, #4]
 801a054:	f7fe b9dd 	b.w	8018412 <cat_service+0x183a>
 801a058:	f7ef fe68 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a05c:	1d20      	adds	r0, r4, #4
 801a05e:	08c3      	lsrs	r3, r0, #3
 801a060:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a064:	f993 2000 	ldrsb.w	r2, [r3]
 801a068:	f000 0307 	and.w	r3, r0, #7
 801a06c:	3303      	adds	r3, #3
 801a06e:	4293      	cmp	r3, r2
 801a070:	db02      	blt.n	801a078 <cat_service+0x34a0>
 801a072:	2a00      	cmp	r2, #0
 801a074:	f045 829d 	bne.w	801f5b2 <cat_service+0x89da>
 801a078:	6862      	ldr	r2, [r4, #4]
 801a07a:	1d10      	adds	r0, r2, #4
 801a07c:	08c3      	lsrs	r3, r0, #3
 801a07e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a082:	f993 1000 	ldrsb.w	r1, [r3]
 801a086:	f000 0307 	and.w	r3, r0, #7
 801a08a:	3303      	adds	r3, #3
 801a08c:	428b      	cmp	r3, r1
 801a08e:	db02      	blt.n	801a096 <cat_service+0x34be>
 801a090:	2900      	cmp	r1, #0
 801a092:	f045 8290 	bne.w	801f5b6 <cat_service+0x89de>
 801a096:	f104 092d 	add.w	r9, r4, #45	; 0x2d
 801a09a:	6853      	ldr	r3, [r2, #4]
 801a09c:	4648      	mov	r0, r9
 801a09e:	4798      	blx	r3
 801a0a0:	2800      	cmp	r0, #0
 801a0a2:	f001 824a 	beq.w	801b53a <cat_service+0x4962>
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	9301      	str	r3, [sp, #4]
 801a0aa:	f7fe b9e4 	b.w	8018476 <cat_service+0x189e>
        switch (self->state) {
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	9301      	str	r3, [sp, #4]
 801a0b2:	f7fe ba22 	b.w	80184fa <cat_service+0x1922>
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	f7fe ba50 	b.w	801855e <cat_service+0x1986>
        switch (self->unsolicited_fsm.state) {
 801a0be:	4638      	mov	r0, r7
 801a0c0:	f7ef fa52 	bl	8009568 <__asan_report_load1>
        if ((self->mutex != NULL) && (self->mutex->lock() != 0))
 801a0c4:	4640      	mov	r0, r8
 801a0c6:	f7ef fa57 	bl	8009578 <__asan_report_load4>
 801a0ca:	4628      	mov	r0, r5
 801a0cc:	f7ef fa54 	bl	8009578 <__asan_report_load4>
                if ((state >= 3) && ((ch == 0) || (ch == ','))) {
 801a0d0:	f7ef fe2c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a0d4:	f1b8 0f03 	cmp.w	r8, #3
 801a0d8:	f040 8165 	bne.w	801a3a6 <cat_service+0x37ce>
 801a0dc:	f7ef fe26 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a0e0:	2d00      	cmp	r5, #0
 801a0e2:	f003 824b 	beq.w	801d57c <cat_service+0x69a4>
 801a0e6:	f7ef fe21 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a0ea:	2d2c      	cmp	r5, #44	; 0x2c
 801a0ec:	f003 8246 	beq.w	801d57c <cat_service+0x69a4>
        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
 801a0f0:	f1a5 0830 	sub.w	r8, r5, #48	; 0x30
 801a0f4:	f7ef fe1a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a0f8:	fa5f f388 	uxtb.w	r3, r8
 801a0fc:	2b09      	cmp	r3, #9
 801a0fe:	930c      	str	r3, [sp, #48]	; 0x30
 801a100:	f201 82b0 	bhi.w	801b664 <cat_service+0x4a8c>
                                val <<= 4;
 801a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801a10a:	f7ef fe0f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a10e:	9b08      	ldr	r3, [sp, #32]
 801a110:	ea48 7813 	orr.w	r8, r8, r3, lsr #28
 801a114:	011d      	lsls	r5, r3, #4
                                val += convert_hex_char_to_value(ch);
 801a116:	f7ef fe09 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a11c:	195b      	adds	r3, r3, r5
 801a11e:	9308      	str	r3, [sp, #32]
 801a120:	f148 0300 	adc.w	r3, r8, #0
                                state = 3;
 801a124:	f04f 0803 	mov.w	r8, #3
                                val += convert_hex_char_to_value(ch);
 801a128:	930a      	str	r3, [sp, #40]	; 0x28
 801a12a:	f7fe bf52 	b.w	8018fd2 <cat_service+0x23fa>
                switch (self->unsolicited_fsm.write_state) {
 801a12e:	f7ef fdfd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a132:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801a136:	08c3      	lsrs	r3, r0, #3
 801a138:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a13c:	f993 2000 	ldrsb.w	r2, [r3]
 801a140:	f000 0307 	and.w	r3, r0, #7
 801a144:	3303      	adds	r3, #3
 801a146:	4293      	cmp	r3, r2
 801a148:	db02      	blt.n	801a150 <cat_service+0x3578>
 801a14a:	2a00      	cmp	r2, #0
 801a14c:	f045 8395 	bne.w	801f87a <cat_service+0x8ca2>
 801a150:	6e25      	ldr	r5, [r4, #96]	; 0x60
 801a152:	2d01      	cmp	r5, #1
 801a154:	f001 821c 	beq.w	801b590 <cat_service+0x49b8>
 801a158:	2d02      	cmp	r5, #2
 801a15a:	f001 81f3 	beq.w	801b544 <cat_service+0x496c>
 801a15e:	2d00      	cmp	r5, #0
 801a160:	f001 8243 	beq.w	801b5ea <cat_service+0x4a12>
        switch (self->state) {
 801a164:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 801a168:	f7ef fde0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a16c:	08f3      	lsrs	r3, r6, #3
 801a16e:	f006 0207 	and.w	r2, r6, #7
 801a172:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a176:	f993 3000 	ldrsb.w	r3, [r3]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	db02      	blt.n	801a184 <cat_service+0x35ac>
 801a17e:	2b00      	cmp	r3, #0
 801a180:	f045 837d 	bne.w	801f87e <cat_service+0x8ca6>
 801a184:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 801a188:	9301      	str	r3, [sp, #4]
 801a18a:	3301      	adds	r3, #1
 801a18c:	2b19      	cmp	r3, #25
 801a18e:	f205 86e9 	bhi.w	801ff64 <cat_service+0x938c>
 801a192:	a201      	add	r2, pc, #4	; (adr r2, 801a198 <cat_service+0x35c0>)
 801a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a198:	08018723 	.word	0x08018723
 801a19c:	0801744b 	.word	0x0801744b
 801a1a0:	08017283 	.word	0x08017283
 801a1a4:	08017355 	.word	0x08017355
 801a1a8:	08017bed 	.word	0x08017bed
 801a1ac:	08017b13 	.word	0x08017b13
 801a1b0:	08017e51 	.word	0x08017e51
 801a1b4:	08017965 	.word	0x08017965
 801a1b8:	08017f6f 	.word	0x08017f6f
 801a1bc:	080177dd 	.word	0x080177dd
 801a1c0:	0801777b 	.word	0x0801777b
 801a1c4:	08017767 	.word	0x08017767
 801a1c8:	08018425 	.word	0x08018425
 801a1cc:	0801840f 	.word	0x0801840f
 801a1d0:	08018329 	.word	0x08018329
 801a1d4:	08018305 	.word	0x08018305
 801a1d8:	0801855b 	.word	0x0801855b
 801a1dc:	080184f7 	.word	0x080184f7
 801a1e0:	08018137 	.word	0x08018137
 801a1e4:	080180e7 	.word	0x080180e7
 801a1e8:	080170e9 	.word	0x080170e9
 801a1ec:	08017521 	.word	0x08017521
 801a1f0:	080175f1 	.word	0x080175f1
 801a1f4:	080175dd 	.word	0x080175dd
 801a1f8:	0801870d 	.word	0x0801870d
 801a1fc:	08018571 	.word	0x08018571
        switch (self->current_char) {
 801a200:	2d3f      	cmp	r5, #63	; 0x3f
 801a202:	f042 83ff 	bne.w	801ca04 <cat_service+0x5e2c>
                if (self->length == 0) {
 801a206:	f7ef fd91 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a20a:	f104 0014 	add.w	r0, r4, #20
 801a20e:	08c3      	lsrs	r3, r0, #3
 801a210:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a214:	f993 2000 	ldrsb.w	r2, [r3]
 801a218:	f000 0307 	and.w	r3, r0, #7
 801a21c:	3303      	adds	r3, #3
 801a21e:	4293      	cmp	r3, r2
 801a220:	db02      	blt.n	801a228 <cat_service+0x3650>
 801a222:	2a00      	cmp	r2, #0
 801a224:	f044 875d 	bne.w	801f0e2 <cat_service+0x850a>
 801a228:	6963      	ldr	r3, [r4, #20]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	f042 840f 	bne.w	801ca4e <cat_service+0x5e76>
                        self->state = CAT_STATE_ERROR;
 801a230:	f7ef fd7c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a234:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 801a236:	2501      	movs	r5, #1
                        self->state = CAT_STATE_ERROR;
 801a238:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 801a23c:	f7fc bfc4 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801a240:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a244:	f7ef fd72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a24a:	f103 0010 	add.w	r0, r3, #16
 801a24e:	08c3      	lsrs	r3, r0, #3
 801a250:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a254:	f993 2000 	ldrsb.w	r2, [r3]
 801a258:	f000 0307 	and.w	r3, r0, #7
 801a25c:	3303      	adds	r3, #3
 801a25e:	4293      	cmp	r3, r2
 801a260:	db02      	blt.n	801a268 <cat_service+0x3690>
 801a262:	2a00      	cmp	r2, #0
 801a264:	f045 82ad 	bne.w	801f7c2 <cat_service+0x8bea>
 801a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a26a:	691b      	ldr	r3, [r3, #16]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	f004 8490 	beq.w	801eb92 <cat_service+0x7fba>
 801a272:	f7ef fd5b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a278:	f103 000c 	add.w	r0, r3, #12
 801a27c:	08c3      	lsrs	r3, r0, #3
 801a27e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a282:	f993 2000 	ldrsb.w	r2, [r3]
 801a286:	f000 0307 	and.w	r3, r0, #7
 801a28a:	3303      	adds	r3, #3
 801a28c:	4293      	cmp	r3, r2
 801a28e:	db02      	blt.n	801a296 <cat_service+0x36be>
 801a290:	2a00      	cmp	r2, #0
 801a292:	f045 81b0 	bne.w	801f5f6 <cat_service+0x8a1e>
 801a296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a298:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801a29a:	f7ef fd47 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a29e:	462a      	mov	r2, r5
 801a2a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a2a2:	49b0      	ldr	r1, [pc, #704]	; (801a564 <cat_service+0x398c>)
 801a2a4:	f008 fb97 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2a8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801a2ac:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2ae:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801a2b2:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2b4:	08c3      	lsrs	r3, r0, #3
 801a2b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a2ba:	f993 3000 	ldrsb.w	r3, [r3]
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	db02      	blt.n	801a2c8 <cat_service+0x36f0>
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	f045 819d 	bne.w	801f602 <cat_service+0x8a2a>
        self->write_buf = get_new_line_chars(self);
 801a2c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2cc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a2d0:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801a2d4:	08c3      	lsrs	r3, r0, #3
 801a2d6:	f000 0207 	and.w	r2, r0, #7
 801a2da:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a2de:	3203      	adds	r2, #3
 801a2e0:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2e4:	4ba0      	ldr	r3, [pc, #640]	; (801a568 <cat_service+0x3990>)
        self->write_buf = get_new_line_chars(self);
 801a2e6:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a2e8:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801a2ea:	db02      	blt.n	801a2f2 <cat_service+0x371a>
 801a2ec:	2900      	cmp	r1, #0
 801a2ee:	f045 818a 	bne.w	801f606 <cat_service+0x8a2e>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a2f2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801a2f6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a2f8:	08c3      	lsrs	r3, r0, #3
 801a2fa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a2fe:	f993 2000 	ldrsb.w	r2, [r3]
 801a302:	f000 0307 	and.w	r3, r0, #7
 801a306:	3303      	adds	r3, #3
 801a308:	4293      	cmp	r3, r2
 801a30a:	db02      	blt.n	801a312 <cat_service+0x373a>
 801a30c:	2a00      	cmp	r2, #0
 801a30e:	f045 817c 	bne.w	801f60a <cat_service+0x8a32>
        self->write_state_after = state_after;
 801a312:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a316:	2300      	movs	r3, #0
 801a318:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801a31a:	08c3      	lsrs	r3, r0, #3
 801a31c:	f000 0207 	and.w	r2, r0, #7
 801a320:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a324:	f993 3000 	ldrsb.w	r3, [r3]
 801a328:	429a      	cmp	r2, r3
 801a32a:	db02      	blt.n	801a332 <cat_service+0x375a>
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	f045 816e 	bne.w	801f60e <cat_service+0x8a36>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a332:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801a334:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a336:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801a33a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a33e:	f006 0207 	and.w	r2, r6, #7
 801a342:	f993 3000 	ldrsb.w	r3, [r3]
 801a346:	429a      	cmp	r2, r3
 801a348:	db02      	blt.n	801a350 <cat_service+0x3778>
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	f045 83d4 	bne.w	801faf8 <cat_service+0x8f20>
 801a350:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801a352:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a354:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801a358:	f7fc bf36 	b.w	80171c8 <cat_service+0x5f0>
                self->index = 0;
 801a35c:	f7ef fce6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a360:	9b07      	ldr	r3, [sp, #28]
 801a362:	f103 52dc 	add.w	r2, r3, #461373440	; 0x1b800000
 801a366:	9b06      	ldr	r3, [sp, #24]
 801a368:	f992 2000 	ldrsb.w	r2, [r2]
 801a36c:	3303      	adds	r3, #3
 801a36e:	4293      	cmp	r3, r2
 801a370:	db02      	blt.n	801a378 <cat_service+0x37a0>
 801a372:	2a00      	cmp	r2, #0
 801a374:	f045 8436 	bne.w	801fbe4 <cat_service+0x900c>
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801a378:	08f3      	lsrs	r3, r6, #3
                self->index = 0;
 801a37a:	2200      	movs	r2, #0
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801a37c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a380:	f993 3000 	ldrsb.w	r3, [r3]
                self->index = 0;
 801a384:	60e2      	str	r2, [r4, #12]
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801a386:	f006 0207 	and.w	r2, r6, #7
 801a38a:	429a      	cmp	r2, r3
 801a38c:	db02      	blt.n	801a394 <cat_service+0x37bc>
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f045 842b 	bne.w	801fbea <cat_service+0x9012>
 801a394:	2302      	movs	r3, #2
                s = update_command(self);
 801a396:	2501      	movs	r5, #1
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801a398:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801a39c:	f7fc bf14 	b.w	80171c8 <cat_service+0x5f0>
                self->state = CAT_STATE_HOLD;
 801a3a0:	2511      	movs	r5, #17
 801a3a2:	f7fd b8e7 	b.w	8017574 <cat_service+0x99c>
                if (state == 0) {
 801a3a6:	f7ef fcc1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a3aa:	f1b8 0f00 	cmp.w	r8, #0
 801a3ae:	f044 8349 	bne.w	801ea44 <cat_service+0x7e6c>
                        if (ch != '0')
 801a3b2:	f7ef fcbb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a3b6:	2d30      	cmp	r5, #48	; 0x30
 801a3b8:	f47f af42 	bne.w	801a240 <cat_service+0x3668>
                        state = 1;
 801a3bc:	f04f 0801 	mov.w	r8, #1
 801a3c0:	f7fe be07 	b.w	8018fd2 <cat_service+0x23fa>
                start_processing_format_read_args(self, CAT_FSM_TYPE_UNSOLICITED);
 801a3c4:	f7ef fcb2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a3c8:	4631      	mov	r1, r6
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	f7f8 fece 	bl	801316c <start_processing_format_read_args>
                break;
 801a3d0:	f7fc be22 	b.w	8017018 <cat_service+0x440>
                s = search_command(self);
 801a3d4:	2501      	movs	r5, #1
 801a3d6:	f7fc bef7 	b.w	80171c8 <cat_service+0x5f0>
 801a3da:	2100      	movs	r1, #0
                                sign = 1;
 801a3dc:	2301      	movs	r3, #1
 801a3de:	4689      	mov	r9, r1
 801a3e0:	9108      	str	r1, [sp, #32]
 801a3e2:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 801a3e6:	f7fe bfd7 	b.w	8019398 <cat_service+0x27c0>
                switch (self->write_state) {
 801a3ea:	f7ef fc9f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a3ee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a3f2:	08c3      	lsrs	r3, r0, #3
 801a3f4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a3f8:	f993 2000 	ldrsb.w	r2, [r3]
 801a3fc:	f000 0307 	and.w	r3, r0, #7
 801a400:	3303      	adds	r3, #3
 801a402:	4293      	cmp	r3, r2
 801a404:	db02      	blt.n	801a40c <cat_service+0x3834>
 801a406:	2a00      	cmp	r2, #0
 801a408:	f045 83f9 	bne.w	801fbfe <cat_service+0x9026>
 801a40c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 801a40e:	2d01      	cmp	r5, #1
 801a410:	f001 8700 	beq.w	801c214 <cat_service+0x563c>
 801a414:	2d02      	cmp	r5, #2
 801a416:	f001 86da 	beq.w	801c1ce <cat_service+0x55f6>
 801a41a:	2d00      	cmp	r5, #0
 801a41c:	f001 86b1 	beq.w	801c182 <cat_service+0x55aa>
 801a420:	2501      	movs	r5, #1
 801a422:	f7fc bed1 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->current_char) {
 801a426:	2501      	movs	r5, #1
 801a428:	f7fc bece 	b.w	80171c8 <cat_service+0x5f0>
                s = process_io_write(self);
 801a42c:	2501      	movs	r5, #1
 801a42e:	f7fc becb 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a432:	4605      	mov	r5, r0
 801a434:	f7fc bec8 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a438:	4605      	mov	r5, r0
 801a43a:	f7fc bec5 	b.w	80171c8 <cat_service+0x5f0>
                s = process_io_write_wait(self);
 801a43e:	2501      	movs	r5, #1
 801a440:	f7fc bec2 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a444:	4605      	mov	r5, r0
 801a446:	f7fc bebf 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a44a:	4605      	mov	r5, r0
 801a44c:	f7fc bebc 	b.w	80171c8 <cat_service+0x5f0>
 801a450:	3304      	adds	r3, #4
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801a452:	2200      	movs	r2, #0
 801a454:	9705      	str	r7, [sp, #20]
 801a456:	9409      	str	r4, [sp, #36]	; 0x24
 801a458:	461f      	mov	r7, r3
 801a45a:	960a      	str	r6, [sp, #40]	; 0x28
 801a45c:	4614      	mov	r4, r2
 801a45e:	462e      	mov	r6, r5
 801a460:	460d      	mov	r5, r1
 801a462:	3401      	adds	r4, #1
 801a464:	f7ef fc62 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a468:	42b4      	cmp	r4, r6
 801a46a:	f003 8775 	beq.w	801e358 <cat_service+0x7780>
                cmd_group = self->desc->cmd_group[i];
 801a46e:	f7ef fc5d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a472:	08fa      	lsrs	r2, r7, #3
 801a474:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801a478:	f992 1000 	ldrsb.w	r1, [r2]
 801a47c:	f007 0207 	and.w	r2, r7, #7
 801a480:	3203      	adds	r2, #3
 801a482:	428a      	cmp	r2, r1
 801a484:	db02      	blt.n	801a48c <cat_service+0x38b4>
 801a486:	2900      	cmp	r1, #0
 801a488:	f044 8713 	bne.w	801f2b2 <cat_service+0x86da>
 801a48c:	f857 2b04 	ldr.w	r2, [r7], #4
                if (index >= j + cmd_group->cmd_num) {
 801a490:	f102 0008 	add.w	r0, r2, #8
 801a494:	08c1      	lsrs	r1, r0, #3
 801a496:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801a49a:	f991 3000 	ldrsb.w	r3, [r1]
 801a49e:	f000 0107 	and.w	r1, r0, #7
 801a4a2:	3103      	adds	r1, #3
 801a4a4:	4299      	cmp	r1, r3
 801a4a6:	db02      	blt.n	801a4ae <cat_service+0x38d6>
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	f044 874e 	bne.w	801f34a <cat_service+0x8772>
 801a4ae:	6891      	ldr	r1, [r2, #8]
 801a4b0:	9b04      	ldr	r3, [sp, #16]
 801a4b2:	4429      	add	r1, r5
 801a4b4:	428b      	cmp	r3, r1
 801a4b6:	f081 82f5 	bcs.w	801baa4 <cat_service+0x4ecc>
                return &cmd_group->cmd[index - j];
 801a4ba:	920b      	str	r2, [sp, #44]	; 0x2c
 801a4bc:	1b5d      	subs	r5, r3, r5
 801a4be:	9f05      	ldr	r7, [sp, #20]
 801a4c0:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
 801a4c4:	f7ef fc32 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a4c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a4ca:	f7fe b8d8 	b.w	801867e <cat_service+0x1aa6>
 801a4ce:	3304      	adds	r3, #4
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	9708      	str	r7, [sp, #32]
 801a4d4:	940d      	str	r4, [sp, #52]	; 0x34
 801a4d6:	461f      	mov	r7, r3
 801a4d8:	960e      	str	r6, [sp, #56]	; 0x38
 801a4da:	4614      	mov	r4, r2
 801a4dc:	464e      	mov	r6, r9
 801a4de:	4689      	mov	r9, r1
 801a4e0:	3401      	adds	r4, #1
 801a4e2:	f7ef fc23 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a4e6:	42b4      	cmp	r4, r6
 801a4e8:	f004 8232 	beq.w	801e950 <cat_service+0x7d78>
                cmd_group = self->desc->cmd_group[i];
 801a4ec:	f7ef fc1e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a4f0:	08fa      	lsrs	r2, r7, #3
 801a4f2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801a4f6:	f992 1000 	ldrsb.w	r1, [r2]
 801a4fa:	f007 0207 	and.w	r2, r7, #7
 801a4fe:	3203      	adds	r2, #3
 801a500:	428a      	cmp	r2, r1
 801a502:	db02      	blt.n	801a50a <cat_service+0x3932>
 801a504:	2900      	cmp	r1, #0
 801a506:	f045 8102 	bne.w	801f70e <cat_service+0x8b36>
 801a50a:	f857 2b04 	ldr.w	r2, [r7], #4
                if (index >= j + cmd_group->cmd_num) {
 801a50e:	f102 0008 	add.w	r0, r2, #8
 801a512:	08c1      	lsrs	r1, r0, #3
 801a514:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801a518:	f991 3000 	ldrsb.w	r3, [r1]
 801a51c:	f000 0107 	and.w	r1, r0, #7
 801a520:	3103      	adds	r1, #3
 801a522:	4299      	cmp	r1, r3
 801a524:	db02      	blt.n	801a52c <cat_service+0x3954>
 801a526:	2b00      	cmp	r3, #0
 801a528:	f045 8370 	bne.w	801fc0c <cat_service+0x9034>
 801a52c:	6891      	ldr	r1, [r2, #8]
 801a52e:	4449      	add	r1, r9
 801a530:	428d      	cmp	r5, r1
 801a532:	f081 82b4 	bcs.w	801ba9e <cat_service+0x4ec6>
                return &cmd_group->cmd[index - j];
 801a536:	920f      	str	r2, [sp, #60]	; 0x3c
 801a538:	eba5 0909 	sub.w	r9, r5, r9
 801a53c:	9f08      	ldr	r7, [sp, #32]
 801a53e:	e9dd 460d 	ldrd	r4, r6, [sp, #52]	; 0x34
 801a542:	f7ef fbf3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a548:	f7fd bbd8 	b.w	8017cfc <cat_service+0x1124>
                s = process_hold_state(self);
 801a54c:	2501      	movs	r5, #1
 801a54e:	f7fc be3b 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a552:	4605      	mov	r5, r0
 801a554:	f7fc be38 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a558:	4605      	mov	r5, r0
 801a55a:	f7fc be35 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801a55e:	4605      	mov	r5, r0
 801a560:	f7fc be32 	b.w	80171c8 <cat_service+0x5f0>
 801a564:	24009200 	.word	0x24009200
 801a568:	24009240 	.word	0x24009240
                if ((size > 0) && (state == 0) && ((ch == 0) || (ch == ','))) {
 801a56c:	f7ef fbde 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a570:	2c00      	cmp	r4, #0
 801a572:	f43e ac5d 	beq.w	8018e30 <cat_service+0x2258>
 801a576:	f7ef fbd9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a57a:	2e00      	cmp	r6, #0
 801a57c:	f47e ac58 	bne.w	8018e30 <cat_service+0x2258>
 801a580:	f7ef fbd4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a584:	b125      	cbz	r5, 801a590 <cat_service+0x39b8>
 801a586:	f7ef fbd1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a58a:	2d2c      	cmp	r5, #44	; 0x2c
 801a58c:	f47e ac50 	bne.w	8018e30 <cat_service+0x2258>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801a590:	9405      	str	r4, [sp, #20]
 801a592:	465c      	mov	r4, fp
 801a594:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801a598:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
 801a59c:	e9dd a611 	ldrd	sl, r6, [sp, #68]	; 0x44
 801a5a0:	f7ef fbc4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a5ac:	3203      	adds	r2, #3
 801a5ae:	f993 3000 	ldrsb.w	r3, [r3]
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	db02      	blt.n	801a5bc <cat_service+0x39e4>
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	f045 82cc 	bne.w	801fb54 <cat_service+0x8f7c>
 801a5bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a5be:	f103 0010 	add.w	r0, r3, #16
 801a5c2:	9304      	str	r3, [sp, #16]
 801a5c4:	08c3      	lsrs	r3, r0, #3
 801a5c6:	f000 0207 	and.w	r2, r0, #7
 801a5ca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a5ce:	f993 3000 	ldrsb.w	r3, [r3]
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	db02      	blt.n	801a5dc <cat_service+0x3a04>
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	f045 810d 	bne.w	801f7f6 <cat_service+0x8c1e>
 801a5dc:	9b04      	ldr	r3, [sp, #16]
                                self->write_size = 0;
 801a5de:	f104 091c 	add.w	r9, r4, #28
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801a5e2:	7c1b      	ldrb	r3, [r3, #16]
                                self->write_size = 0;
 801a5e4:	2b01      	cmp	r3, #1
 801a5e6:	9b05      	ldr	r3, [sp, #20]
 801a5e8:	bf08      	it	eq
 801a5ea:	2300      	moveq	r3, #0
 801a5ec:	9305      	str	r3, [sp, #20]
 801a5ee:	f7ef fb9d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a5f2:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801a5f6:	f009 0207 	and.w	r2, r9, #7
 801a5fa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a5fe:	3203      	adds	r2, #3
 801a600:	f993 3000 	ldrsb.w	r3, [r3]
 801a604:	429a      	cmp	r2, r3
 801a606:	db02      	blt.n	801a60e <cat_service+0x3a36>
 801a608:	2b00      	cmp	r3, #0
 801a60a:	f045 80f6 	bne.w	801f7fa <cat_service+0x8c22>
                stat = parse_buffer_hexadecimal(self);
 801a60e:	f1a5 052c 	sub.w	r5, r5, #44	; 0x2c
 801a612:	9b05      	ldr	r3, [sp, #20]
 801a614:	fab5 f585 	clz	r5, r5
 801a618:	61e3      	str	r3, [r4, #28]
 801a61a:	096d      	lsrs	r5, r5, #5
        if ((self->var->write != NULL) && (self->var->write(self->var, self->write_size) != 0)) {
 801a61c:	f7ef fb86 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a620:	9b04      	ldr	r3, [sp, #16]
 801a622:	f103 0014 	add.w	r0, r3, #20
 801a626:	08c3      	lsrs	r3, r0, #3
 801a628:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a62c:	f993 2000 	ldrsb.w	r2, [r3]
 801a630:	f000 0307 	and.w	r3, r0, #7
 801a634:	3303      	adds	r3, #3
 801a636:	4293      	cmp	r3, r2
 801a638:	db02      	blt.n	801a640 <cat_service+0x3a68>
 801a63a:	2a00      	cmp	r2, #0
 801a63c:	f045 80e0 	bne.w	801f800 <cat_service+0x8c28>
 801a640:	9b04      	ldr	r3, [sp, #16]
 801a642:	695b      	ldr	r3, [r3, #20]
 801a644:	9305      	str	r3, [sp, #20]
 801a646:	b1b3      	cbz	r3, 801a676 <cat_service+0x3a9e>
 801a648:	f7ef fb70 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a64c:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801a650:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a654:	f993 2000 	ldrsb.w	r2, [r3]
 801a658:	f009 0307 	and.w	r3, r9, #7
 801a65c:	3303      	adds	r3, #3
 801a65e:	4293      	cmp	r3, r2
 801a660:	db02      	blt.n	801a668 <cat_service+0x3a90>
 801a662:	2a00      	cmp	r2, #0
 801a664:	f045 80ce 	bne.w	801f804 <cat_service+0x8c2c>
 801a668:	9804      	ldr	r0, [sp, #16]
 801a66a:	69e1      	ldr	r1, [r4, #28]
 801a66c:	9b05      	ldr	r3, [sp, #20]
 801a66e:	4798      	blx	r3
 801a670:	2800      	cmp	r0, #0
 801a672:	f041 8715 	bne.w	801c4a0 <cat_service+0x58c8>
        if ((++self->index < self->cmd->var_num) && (stat > 0)) {
 801a676:	f7ef fb59 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a67a:	f104 000c 	add.w	r0, r4, #12
 801a67e:	08c3      	lsrs	r3, r0, #3
 801a680:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a684:	f993 2000 	ldrsb.w	r2, [r3]
 801a688:	f000 0307 	and.w	r3, r0, #7
 801a68c:	3303      	adds	r3, #3
 801a68e:	4293      	cmp	r3, r2
 801a690:	db02      	blt.n	801a698 <cat_service+0x3ac0>
 801a692:	2a00      	cmp	r2, #0
 801a694:	f045 80bb 	bne.w	801f80e <cat_service+0x8c36>
 801a698:	68e3      	ldr	r3, [r4, #12]
 801a69a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a69e:	3301      	adds	r3, #1
 801a6a0:	9304      	str	r3, [sp, #16]
 801a6a2:	60e3      	str	r3, [r4, #12]
 801a6a4:	08c3      	lsrs	r3, r0, #3
 801a6a6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a6aa:	f993 2000 	ldrsb.w	r2, [r3]
 801a6ae:	f000 0307 	and.w	r3, r0, #7
 801a6b2:	3303      	adds	r3, #3
 801a6b4:	4293      	cmp	r3, r2
 801a6b6:	db02      	blt.n	801a6be <cat_service+0x3ae6>
 801a6b8:	2a00      	cmp	r2, #0
 801a6ba:	f045 80aa 	bne.w	801f812 <cat_service+0x8c3a>
 801a6be:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 801a6c2:	f109 001c 	add.w	r0, r9, #28
 801a6c6:	08c3      	lsrs	r3, r0, #3
 801a6c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a6cc:	f993 2000 	ldrsb.w	r2, [r3]
 801a6d0:	f000 0307 	and.w	r3, r0, #7
 801a6d4:	3303      	adds	r3, #3
 801a6d6:	4293      	cmp	r3, r2
 801a6d8:	db02      	blt.n	801a6e0 <cat_service+0x3b08>
 801a6da:	2a00      	cmp	r2, #0
 801a6dc:	f045 809b 	bne.w	801f816 <cat_service+0x8c3e>
 801a6e0:	f8d9 101c 	ldr.w	r1, [r9, #28]
 801a6e4:	9b04      	ldr	r3, [sp, #16]
 801a6e6:	428b      	cmp	r3, r1
 801a6e8:	f080 83cb 	bcs.w	801ae82 <cat_service+0x42aa>
 801a6ec:	f7ef fb1e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a6f0:	2d01      	cmp	r5, #1
 801a6f2:	f001 8347 	beq.w	801bd84 <cat_service+0x51ac>
        if ((self->cmd->need_all_vars != false) && (self->index != self->cmd->var_num)) {
 801a6f6:	f7ef fb19 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a6fa:	f109 0020 	add.w	r0, r9, #32
 801a6fe:	08c3      	lsrs	r3, r0, #3
 801a700:	f000 0207 	and.w	r2, r0, #7
 801a704:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a708:	f993 3000 	ldrsb.w	r3, [r3]
 801a70c:	429a      	cmp	r2, r3
 801a70e:	db02      	blt.n	801a716 <cat_service+0x3b3e>
 801a710:	2b00      	cmp	r3, #0
 801a712:	f045 8089 	bne.w	801f828 <cat_service+0x8c50>
 801a716:	f899 3020 	ldrb.w	r3, [r9, #32]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f040 83d7 	bne.w	801aece <cat_service+0x42f6>
        if (self->cmd->write == NULL) {
 801a720:	f7ef fb04 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a724:	f109 0008 	add.w	r0, r9, #8
 801a728:	08c3      	lsrs	r3, r0, #3
 801a72a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a72e:	f993 2000 	ldrsb.w	r2, [r3]
 801a732:	f000 0307 	and.w	r3, r0, #7
 801a736:	3303      	adds	r3, #3
 801a738:	4293      	cmp	r3, r2
 801a73a:	db02      	blt.n	801a742 <cat_service+0x3b6a>
 801a73c:	2a00      	cmp	r2, #0
 801a73e:	f045 806e 	bne.w	801f81e <cat_service+0x8c46>
 801a742:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a746:	2b00      	cmp	r3, #0
 801a748:	f004 8035 	beq.w	801e7b6 <cat_service+0x7bde>
        self->state = CAT_STATE_WRITE_LOOP;
 801a74c:	f7ef faee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a750:	f006 0207 	and.w	r2, r6, #7
 801a754:	08f3      	lsrs	r3, r6, #3
 801a756:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a75a:	f993 3000 	ldrsb.w	r3, [r3]
 801a75e:	429a      	cmp	r2, r3
 801a760:	db02      	blt.n	801a768 <cat_service+0x3b90>
 801a762:	2b00      	cmp	r3, #0
 801a764:	f044 848c 	bne.w	801f080 <cat_service+0x84a8>
 801a768:	230d      	movs	r3, #13
        return CAT_STATUS_BUSY;
 801a76a:	2501      	movs	r5, #1
        self->state = CAT_STATE_WRITE_LOOP;
 801a76c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return CAT_STATUS_BUSY;
 801a770:	f7fc bd2a 	b.w	80171c8 <cat_service+0x5f0>
        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
 801a774:	f7ef fada 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a778:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
 801a77c:	fa5f fa83 	uxtb.w	sl, r3
 801a780:	f7ef fad4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a784:	f1ba 0f05 	cmp.w	sl, #5
 801a788:	f240 845c 	bls.w	801b044 <cat_service+0x446c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801a78c:	465c      	mov	r4, fp
 801a78e:	f8cd 9014 	str.w	r9, [sp, #20]
 801a792:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801a796:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
 801a79a:	e9dd a611 	ldrd	sl, r6, [sp, #68]	; 0x44
 801a79e:	f7ef fac5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a7a2:	9b04      	ldr	r3, [sp, #16]
 801a7a4:	f103 0010 	add.w	r0, r3, #16
 801a7a8:	08c3      	lsrs	r3, r0, #3
 801a7aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a7ae:	f993 2000 	ldrsb.w	r2, [r3]
 801a7b2:	f000 0307 	and.w	r3, r0, #7
 801a7b6:	3303      	adds	r3, #3
 801a7b8:	4293      	cmp	r3, r2
 801a7ba:	db02      	blt.n	801a7c2 <cat_service+0x3bea>
 801a7bc:	2a00      	cmp	r2, #0
 801a7be:	f045 803d 	bne.w	801f83c <cat_service+0x8c64>
 801a7c2:	9b04      	ldr	r3, [sp, #16]
 801a7c4:	691b      	ldr	r3, [r3, #16]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f004 8328 	beq.w	801ee1c <cat_service+0x8244>
 801a7cc:	f7ef faae 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a7d0:	9b04      	ldr	r3, [sp, #16]
 801a7d2:	f103 000c 	add.w	r0, r3, #12
 801a7d6:	08c3      	lsrs	r3, r0, #3
 801a7d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a7dc:	f993 2000 	ldrsb.w	r2, [r3]
 801a7e0:	f000 0307 	and.w	r3, r0, #7
 801a7e4:	3303      	adds	r3, #3
 801a7e6:	4293      	cmp	r3, r2
 801a7e8:	db02      	blt.n	801a7f0 <cat_service+0x3c18>
 801a7ea:	2a00      	cmp	r2, #0
 801a7ec:	f045 8028 	bne.w	801f840 <cat_service+0x8c68>
 801a7f0:	9b04      	ldr	r3, [sp, #16]
 801a7f2:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801a7f4:	f7ef fa9a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a7f8:	462a      	mov	r2, r5
 801a7fa:	9805      	ldr	r0, [sp, #20]
 801a7fc:	49a1      	ldr	r1, [pc, #644]	; (801aa84 <cat_service+0x3eac>)
 801a7fe:	f008 f8ea 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a802:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801a806:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a808:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801a80c:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a80e:	08c3      	lsrs	r3, r0, #3
 801a810:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a814:	f993 3000 	ldrsb.w	r3, [r3]
 801a818:	429a      	cmp	r2, r3
 801a81a:	db02      	blt.n	801a822 <cat_service+0x3c4a>
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	f045 8007 	bne.w	801f830 <cat_service+0x8c58>
        self->write_buf = get_new_line_chars(self);
 801a822:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a826:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a82a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801a82e:	08c3      	lsrs	r3, r0, #3
 801a830:	f000 0207 	and.w	r2, r0, #7
 801a834:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a838:	3203      	adds	r2, #3
 801a83a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a83e:	4b92      	ldr	r3, [pc, #584]	; (801aa88 <cat_service+0x3eb0>)
        self->write_buf = get_new_line_chars(self);
 801a840:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a842:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801a844:	db02      	blt.n	801a84c <cat_service+0x3c74>
 801a846:	2900      	cmp	r1, #0
 801a848:	f044 87f4 	bne.w	801f834 <cat_service+0x8c5c>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a84c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801a850:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a852:	08c3      	lsrs	r3, r0, #3
 801a854:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a858:	f993 2000 	ldrsb.w	r2, [r3]
 801a85c:	f000 0307 	and.w	r3, r0, #7
 801a860:	3303      	adds	r3, #3
 801a862:	4293      	cmp	r3, r2
 801a864:	db02      	blt.n	801a86c <cat_service+0x3c94>
 801a866:	2a00      	cmp	r2, #0
 801a868:	f044 87e6 	bne.w	801f838 <cat_service+0x8c60>
        self->write_state_after = state_after;
 801a86c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801a870:	2300      	movs	r3, #0
 801a872:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801a874:	08c3      	lsrs	r3, r0, #3
 801a876:	f000 0207 	and.w	r2, r0, #7
 801a87a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a87e:	f993 3000 	ldrsb.w	r3, [r3]
 801a882:	429a      	cmp	r2, r3
 801a884:	db02      	blt.n	801a88c <cat_service+0x3cb4>
 801a886:	2b00      	cmp	r3, #0
 801a888:	f045 81ca 	bne.w	801fc20 <cat_service+0x9048>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a88c:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801a88e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a890:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801a894:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a898:	f006 0207 	and.w	r2, r6, #7
 801a89c:	f993 3000 	ldrsb.w	r3, [r3]
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	db02      	blt.n	801a8aa <cat_service+0x3cd2>
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	f045 81bd 	bne.w	801fc24 <cat_service+0x904c>
 801a8aa:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801a8ac:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801a8ae:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801a8b2:	f7fc bc89 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801a8b6:	f7ef fa39 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a8ba:	f109 000c 	add.w	r0, r9, #12
 801a8be:	08c3      	lsrs	r3, r0, #3
 801a8c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a8c4:	f993 2000 	ldrsb.w	r2, [r3]
 801a8c8:	f000 0307 	and.w	r3, r0, #7
 801a8cc:	3303      	adds	r3, #3
 801a8ce:	4293      	cmp	r3, r2
 801a8d0:	db02      	blt.n	801a8d8 <cat_service+0x3d00>
 801a8d2:	2a00      	cmp	r2, #0
 801a8d4:	f045 80e1 	bne.w	801fa9a <cat_service+0x8ec2>
 801a8d8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a8dc:	0852      	lsrs	r2, r2, #1
 801a8de:	f7fc bed2 	b.w	8017686 <cat_service+0xaae>
 801a8e2:	f7ef fa23 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a8e6:	f109 000c 	add.w	r0, r9, #12
 801a8ea:	08c3      	lsrs	r3, r0, #3
 801a8ec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a8f0:	f993 2000 	ldrsb.w	r2, [r3]
 801a8f4:	f000 0307 	and.w	r3, r0, #7
 801a8f8:	3303      	adds	r3, #3
 801a8fa:	4293      	cmp	r3, r2
 801a8fc:	db02      	blt.n	801a904 <cat_service+0x3d2c>
 801a8fe:	2a00      	cmp	r2, #0
 801a900:	f044 857e 	bne.w	801f400 <cat_service+0x8828>
 801a904:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a908:	0852      	lsrs	r2, r2, #1
 801a90a:	f7fd bb7b 	b.w	8018004 <cat_service+0x142c>
        return (char*)self->desc->buf;
 801a90e:	f7ef fa0d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a912:	08e3      	lsrs	r3, r4, #3
 801a914:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a918:	f993 2000 	ldrsb.w	r2, [r3]
 801a91c:	f004 0307 	and.w	r3, r4, #7
 801a920:	3303      	adds	r3, #3
 801a922:	4293      	cmp	r3, r2
 801a924:	db02      	blt.n	801a92c <cat_service+0x3d54>
 801a926:	2a00      	cmp	r2, #0
 801a928:	f044 85ad 	bne.w	801f486 <cat_service+0x88ae>
 801a92c:	f8d4 9000 	ldr.w	r9, [r4]
 801a930:	f109 0008 	add.w	r0, r9, #8
 801a934:	08c3      	lsrs	r3, r0, #3
 801a936:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a93a:	f993 2000 	ldrsb.w	r2, [r3]
 801a93e:	f000 0307 	and.w	r3, r0, #7
 801a942:	3303      	adds	r3, #3
 801a944:	4293      	cmp	r3, r2
 801a946:	db02      	blt.n	801a94e <cat_service+0x3d76>
 801a948:	2a00      	cmp	r2, #0
 801a94a:	f044 859f 	bne.w	801f48c <cat_service+0x88b4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801a94e:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801a952:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801a956:	08c3      	lsrs	r3, r0, #3
 801a958:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a95c:	f993 2000 	ldrsb.w	r2, [r3]
 801a960:	f000 0307 	and.w	r3, r0, #7
 801a964:	3303      	adds	r3, #3
 801a966:	4293      	cmp	r3, r2
 801a968:	db02      	blt.n	801a970 <cat_service+0x3d98>
 801a96a:	2a00      	cmp	r2, #0
 801a96c:	f044 8590 	bne.w	801f490 <cat_service+0x88b8>
 801a970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a974:	2b00      	cmp	r3, #0
 801a976:	f001 8579 	beq.w	801c46c <cat_service+0x5894>
 801a97a:	f7ef f9d7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a97e:	f109 000c 	add.w	r0, r9, #12
 801a982:	08c3      	lsrs	r3, r0, #3
 801a984:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a988:	f993 2000 	ldrsb.w	r2, [r3]
 801a98c:	f000 0307 	and.w	r3, r0, #7
 801a990:	3303      	adds	r3, #3
 801a992:	4293      	cmp	r3, r2
 801a994:	db02      	blt.n	801a99c <cat_service+0x3dc4>
 801a996:	2a00      	cmp	r2, #0
 801a998:	f044 856c 	bne.w	801f474 <cat_service+0x889c>
 801a99c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a9a0:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801a9a2:	f7ef f9c3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801a9a6:	9a04      	ldr	r2, [sp, #16]
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	4936      	ldr	r1, [pc, #216]	; (801aa84 <cat_service+0x3eac>)
 801a9ac:	f008 f813 	bl	80229d6 <strncpy>
        self->position = 0;
 801a9b0:	f104 0018 	add.w	r0, r4, #24
 801a9b4:	08c3      	lsrs	r3, r0, #3
 801a9b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a9ba:	f993 2000 	ldrsb.w	r2, [r3]
 801a9be:	f000 0307 	and.w	r3, r0, #7
 801a9c2:	3303      	adds	r3, #3
 801a9c4:	4293      	cmp	r3, r2
 801a9c6:	db02      	blt.n	801a9ce <cat_service+0x3df6>
 801a9c8:	2a00      	cmp	r2, #0
 801a9ca:	f044 8555 	bne.w	801f478 <cat_service+0x88a0>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a9ce:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a9d6:	08c3      	lsrs	r3, r0, #3
 801a9d8:	f000 0207 	and.w	r2, r0, #7
 801a9dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801a9e0:	f993 3000 	ldrsb.w	r3, [r3]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	db02      	blt.n	801a9ee <cat_service+0x3e16>
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	f044 8547 	bne.w	801f47c <cat_service+0x88a4>
        self->write_buf = get_new_line_chars(self);
 801a9ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801a9f2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a9f6:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801a9fa:	08c3      	lsrs	r3, r0, #3
 801a9fc:	f000 0207 	and.w	r2, r0, #7
 801aa00:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aa04:	3203      	adds	r2, #3
 801aa06:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801aa0a:	4b1f      	ldr	r3, [pc, #124]	; (801aa88 <cat_service+0x3eb0>)
        self->write_buf = get_new_line_chars(self);
 801aa0c:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801aa0e:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801aa10:	db02      	blt.n	801aa18 <cat_service+0x3e40>
 801aa12:	2900      	cmp	r1, #0
 801aa14:	f044 8608 	bne.w	801f628 <cat_service+0x8a50>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801aa18:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801aa1c:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801aa1e:	08c3      	lsrs	r3, r0, #3
 801aa20:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aa24:	f993 2000 	ldrsb.w	r2, [r3]
 801aa28:	f000 0307 	and.w	r3, r0, #7
 801aa2c:	3303      	adds	r3, #3
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	db02      	blt.n	801aa38 <cat_service+0x3e60>
 801aa32:	2a00      	cmp	r2, #0
 801aa34:	f044 85fa 	bne.w	801f62c <cat_service+0x8a54>
        self->write_state_after = state_after;
 801aa38:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801aa40:	08c3      	lsrs	r3, r0, #3
 801aa42:	f000 0207 	and.w	r2, r0, #7
 801aa46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aa4a:	f993 3000 	ldrsb.w	r3, [r3]
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	db02      	blt.n	801aa58 <cat_service+0x3e80>
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	f044 85ec 	bne.w	801f630 <cat_service+0x8a58>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801aa58:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801aa5a:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801aa5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801aa60:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801aa64:	f006 0207 	and.w	r2, r6, #7
 801aa68:	f993 3000 	ldrsb.w	r3, [r3]
 801aa6c:	429a      	cmp	r2, r3
 801aa6e:	db02      	blt.n	801aa76 <cat_service+0x3e9e>
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	f044 85df 	bne.w	801f634 <cat_service+0x8a5c>
 801aa76:	2312      	movs	r3, #18
                s = process_hold_state(self);
 801aa78:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801aa7a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801aa7e:	f7fc bba3 	b.w	80171c8 <cat_service+0x5f0>
 801aa82:	bf00      	nop
 801aa84:	24009200 	.word	0x24009200
 801aa88:	24009240 	.word	0x24009240
                } else if (to_upper(cmd->name[self->length - 1]) != self->current_char) {
 801aa8c:	f7ef f94e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801aa90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa92:	1e59      	subs	r1, r3, #1
 801aa94:	eb09 0001 	add.w	r0, r9, r1
 801aa98:	08c3      	lsrs	r3, r0, #3
 801aa9a:	f000 0c07 	and.w	ip, r0, #7
 801aa9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aaa2:	f993 3000 	ldrsb.w	r3, [r3]
 801aaa6:	459c      	cmp	ip, r3
 801aaa8:	db02      	blt.n	801aab0 <cat_service+0x3ed8>
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	f044 8514 	bne.w	801f4d8 <cat_service+0x8900>
 801aab0:	f819 3001 	ldrb.w	r3, [r9, r1]
        return (ch >= 'a' && ch <= 'z') ? ch - ('a' - 'A') : ch;
 801aab4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801aab8:	2a19      	cmp	r2, #25
 801aaba:	d805      	bhi.n	801aac8 <cat_service+0x3ef0>
 801aabc:	930e      	str	r3, [sp, #56]	; 0x38
 801aabe:	f7ef f935 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801aac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aac4:	3b20      	subs	r3, #32
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	930e      	str	r3, [sp, #56]	; 0x38
                } else if (to_upper(cmd->name[self->length - 1]) != self->current_char) {
 801aaca:	f7ef f92f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801aace:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801aad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aad4:	08c2      	lsrs	r2, r0, #3
 801aad6:	f000 0107 	and.w	r1, r0, #7
 801aada:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801aade:	f992 2000 	ldrsb.w	r2, [r2]
 801aae2:	4291      	cmp	r1, r2
 801aae4:	db02      	blt.n	801aaec <cat_service+0x3f14>
 801aae6:	2a00      	cmp	r2, #0
 801aae8:	f044 84eb 	bne.w	801f4c2 <cat_service+0x88ea>
 801aaec:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	f001 83ad 	beq.w	801c250 <cat_service+0x5678>
        n = i >> 2;
 801aaf6:	f7ef f919 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (char*)self->desc->buf;
 801aafa:	9b04      	ldr	r3, [sp, #16]
        k = ((i % 4) << 1);
 801aafc:	0069      	lsls	r1, r5, #1
        return (char*)self->desc->buf;
 801aafe:	f103 0008 	add.w	r0, r3, #8
        n = i >> 2;
 801ab02:	08ad      	lsrs	r5, r5, #2
        k = ((i % 4) << 1);
 801ab04:	f001 0106 	and.w	r1, r1, #6
        return (char*)self->desc->buf;
 801ab08:	08c3      	lsrs	r3, r0, #3
 801ab0a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ab0e:	f993 2000 	ldrsb.w	r2, [r3]
 801ab12:	f000 0307 	and.w	r3, r0, #7
 801ab16:	3303      	adds	r3, #3
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	db02      	blt.n	801ab22 <cat_service+0x3f4a>
 801ab1c:	2a00      	cmp	r2, #0
 801ab1e:	f044 84d2 	bne.w	801f4c6 <cat_service+0x88ee>
        s = get_atcmd_buf(self)[n];
 801ab22:	9b04      	ldr	r3, [sp, #16]
 801ab24:	689b      	ldr	r3, [r3, #8]
 801ab26:	1958      	adds	r0, r3, r5
 801ab28:	08c2      	lsrs	r2, r0, #3
 801ab2a:	f000 0c07 	and.w	ip, r0, #7
 801ab2e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ab32:	f992 2000 	ldrsb.w	r2, [r2]
 801ab36:	4594      	cmp	ip, r2
 801ab38:	db02      	blt.n	801ab40 <cat_service+0x3f68>
 801ab3a:	2a00      	cmp	r2, #0
 801ab3c:	f044 84bf 	bne.w	801f4be <cat_service+0x88e6>
        s &= ~(0x03 << k);
 801ab40:	2203      	movs	r2, #3
 801ab42:	fa02 f101 	lsl.w	r1, r2, r1
 801ab46:	5d5a      	ldrb	r2, [r3, r5]
 801ab48:	ea22 0201 	bic.w	r2, r2, r1
        get_atcmd_buf(self)[n] = s;
 801ab4c:	555a      	strb	r2, [r3, r5]
        if (++self->index >= self->commands_num) {
 801ab4e:	9b07      	ldr	r3, [sp, #28]
 801ab50:	9a06      	ldr	r2, [sp, #24]
 801ab52:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ab56:	3203      	adds	r2, #3
 801ab58:	f993 3000 	ldrsb.w	r3, [r3]
 801ab5c:	429a      	cmp	r2, r3
 801ab5e:	db02      	blt.n	801ab66 <cat_service+0x3f8e>
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	f044 84a0 	bne.w	801f4a6 <cat_service+0x88ce>
 801ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab6a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ab6e:	68e5      	ldr	r5, [r4, #12]
 801ab70:	3203      	adds	r2, #3
 801ab72:	f993 3000 	ldrsb.w	r3, [r3]
 801ab76:	429a      	cmp	r2, r3
 801ab78:	f6fd a94f 	blt.w	8017e1a <cat_service+0x1242>
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	f43d a94c 	beq.w	8017e1a <cat_service+0x1242>
 801ab82:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ab84:	f7ee fcf8 	bl	8009578 <__asan_report_load4>
                if (self->cmd->only_test != false) {
 801ab88:	f7ef f8d0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ab8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801ab90:	08c3      	lsrs	r3, r0, #3
 801ab92:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ab96:	f993 2000 	ldrsb.w	r2, [r3]
 801ab9a:	f000 0307 	and.w	r3, r0, #7
 801ab9e:	3303      	adds	r3, #3
 801aba0:	4293      	cmp	r3, r2
 801aba2:	db02      	blt.n	801abaa <cat_service+0x3fd2>
 801aba4:	2a00      	cmp	r2, #0
 801aba6:	f044 847a 	bne.w	801f49e <cat_service+0x88c6>
 801abaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801abac:	f105 0021 	add.w	r0, r5, #33	; 0x21
 801abb0:	08c3      	lsrs	r3, r0, #3
 801abb2:	f000 0207 	and.w	r2, r0, #7
 801abb6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801abba:	f993 3000 	ldrsb.w	r3, [r3]
 801abbe:	429a      	cmp	r2, r3
 801abc0:	db02      	blt.n	801abc8 <cat_service+0x3ff0>
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	f044 846d 	bne.w	801f4a2 <cat_service+0x88ca>
 801abc8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801abcc:	2b00      	cmp	r3, #0
 801abce:	f041 8393 	bne.w	801c2f8 <cat_service+0x5720>
                if (self->cmd->run == NULL) {
 801abd2:	f7ef f8ab 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801abd6:	f105 0010 	add.w	r0, r5, #16
 801abda:	08c3      	lsrs	r3, r0, #3
 801abdc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801abe0:	f993 2000 	ldrsb.w	r2, [r3]
 801abe4:	f000 0307 	and.w	r3, r0, #7
 801abe8:	3303      	adds	r3, #3
 801abea:	4293      	cmp	r3, r2
 801abec:	db02      	blt.n	801abf4 <cat_service+0x401c>
 801abee:	2a00      	cmp	r2, #0
 801abf0:	f044 8453 	bne.w	801f49a <cat_service+0x88c2>
 801abf4:	692b      	ldr	r3, [r5, #16]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	f003 81df 	beq.w	801dfba <cat_service+0x73e2>
                self->state = CAT_STATE_RUN_LOOP;
 801abfc:	f7ef f896 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ac00:	f006 0207 	and.w	r2, r6, #7
 801ac04:	08f3      	lsrs	r3, r6, #3
 801ac06:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ac0a:	f993 3000 	ldrsb.w	r3, [r3]
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	db02      	blt.n	801ac18 <cat_service+0x4040>
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	f044 8319 	bne.w	801f24a <cat_service+0x8672>
 801ac18:	2310      	movs	r3, #16
                s = command_found(self);
 801ac1a:	2501      	movs	r5, #1
                self->state = CAT_STATE_RUN_LOOP;
 801ac1c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801ac20:	f7fc bad2 	b.w	80171c8 <cat_service+0x5f0>
                self->length = 0;
 801ac24:	f7ef f882 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ac28:	f104 0014 	add.w	r0, r4, #20
 801ac2c:	08c3      	lsrs	r3, r0, #3
 801ac2e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ac32:	f993 2000 	ldrsb.w	r2, [r3]
 801ac36:	f000 0307 	and.w	r3, r0, #7
 801ac3a:	3303      	adds	r3, #3
 801ac3c:	4293      	cmp	r3, r2
 801ac3e:	db02      	blt.n	801ac46 <cat_service+0x406e>
 801ac40:	2a00      	cmp	r2, #0
 801ac42:	f044 8433 	bne.w	801f4ac <cat_service+0x88d4>
        return (char*)self->desc->buf;
 801ac46:	08e3      	lsrs	r3, r4, #3
                self->length = 0;
 801ac48:	2100      	movs	r1, #0
        return (char*)self->desc->buf;
 801ac4a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ac4e:	f993 2000 	ldrsb.w	r2, [r3]
 801ac52:	f004 0307 	and.w	r3, r4, #7
                self->length = 0;
 801ac56:	6161      	str	r1, [r4, #20]
        return (char*)self->desc->buf;
 801ac58:	3303      	adds	r3, #3
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	db02      	blt.n	801ac64 <cat_service+0x408c>
 801ac5e:	2a00      	cmp	r2, #0
 801ac60:	f044 8426 	bne.w	801f4b0 <cat_service+0x88d8>
 801ac64:	6822      	ldr	r2, [r4, #0]
 801ac66:	f102 0008 	add.w	r0, r2, #8
 801ac6a:	08c3      	lsrs	r3, r0, #3
 801ac6c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ac70:	f993 1000 	ldrsb.w	r1, [r3]
 801ac74:	f000 0307 	and.w	r3, r0, #7
 801ac78:	3303      	adds	r3, #3
 801ac7a:	428b      	cmp	r3, r1
 801ac7c:	db02      	blt.n	801ac84 <cat_service+0x40ac>
 801ac7e:	2900      	cmp	r1, #0
 801ac80:	f044 8419 	bne.w	801f4b6 <cat_service+0x88de>
 801ac84:	6890      	ldr	r0, [r2, #8]
                get_atcmd_buf(self)[0] = 0;
 801ac86:	08c3      	lsrs	r3, r0, #3
 801ac88:	f000 0207 	and.w	r2, r0, #7
 801ac8c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ac90:	f993 3000 	ldrsb.w	r3, [r3]
 801ac94:	429a      	cmp	r2, r3
 801ac96:	db02      	blt.n	801ac9e <cat_service+0x40c6>
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	f044 84d2 	bne.w	801f642 <cat_service+0x8a6a>
                self->state = CAT_STATE_PARSE_COMMAND_ARGS;
 801ac9e:	08f3      	lsrs	r3, r6, #3
                get_atcmd_buf(self)[0] = 0;
 801aca0:	2200      	movs	r2, #0
                self->state = CAT_STATE_PARSE_COMMAND_ARGS;
 801aca2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
                get_atcmd_buf(self)[0] = 0;
 801aca6:	7002      	strb	r2, [r0, #0]
                self->state = CAT_STATE_PARSE_COMMAND_ARGS;
 801aca8:	f006 0207 	and.w	r2, r6, #7
 801acac:	f993 3000 	ldrsb.w	r3, [r3]
 801acb0:	429a      	cmp	r2, r3
 801acb2:	db02      	blt.n	801acba <cat_service+0x40e2>
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	f044 84c6 	bne.w	801f646 <cat_service+0x8a6e>
 801acba:	2308      	movs	r3, #8
                s = command_found(self);
 801acbc:	2501      	movs	r5, #1
                self->state = CAT_STATE_PARSE_COMMAND_ARGS;
 801acbe:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801acc2:	f7fc ba81 	b.w	80171c8 <cat_service+0x5f0>
                if (self->cmd->only_test != false) {
 801acc6:	f7ef f831 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801acca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801acce:	08c3      	lsrs	r3, r0, #3
 801acd0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801acd4:	f993 2000 	ldrsb.w	r2, [r3]
 801acd8:	f000 0307 	and.w	r3, r0, #7
 801acdc:	3303      	adds	r3, #3
 801acde:	4293      	cmp	r3, r2
 801ace0:	db02      	blt.n	801ace8 <cat_service+0x4110>
 801ace2:	2a00      	cmp	r2, #0
 801ace4:	f044 85be 	bne.w	801f864 <cat_service+0x8c8c>
 801ace8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801acea:	f102 0021 	add.w	r0, r2, #33	; 0x21
 801acee:	08c3      	lsrs	r3, r0, #3
 801acf0:	f000 0107 	and.w	r1, r0, #7
 801acf4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801acf8:	f993 3000 	ldrsb.w	r3, [r3]
 801acfc:	4299      	cmp	r1, r3
 801acfe:	db02      	blt.n	801ad06 <cat_service+0x412e>
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f044 85b1 	bne.w	801f868 <cat_service+0x8c90>
 801ad06:	f892 9021 	ldrb.w	r9, [r2, #33]	; 0x21
 801ad0a:	f1b9 0f00 	cmp.w	r9, #0
 801ad0e:	f001 8018 	beq.w	801bd42 <cat_service+0x516a>
        return (char*)self->desc->buf;
 801ad12:	f7ef f80b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ad16:	08e3      	lsrs	r3, r4, #3
 801ad18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ad1c:	f993 2000 	ldrsb.w	r2, [r3]
 801ad20:	f004 0307 	and.w	r3, r4, #7
 801ad24:	3303      	adds	r3, #3
 801ad26:	4293      	cmp	r3, r2
 801ad28:	db02      	blt.n	801ad30 <cat_service+0x4158>
 801ad2a:	2a00      	cmp	r2, #0
 801ad2c:	f044 859e 	bne.w	801f86c <cat_service+0x8c94>
 801ad30:	6821      	ldr	r1, [r4, #0]
 801ad32:	f101 0008 	add.w	r0, r1, #8
 801ad36:	08c3      	lsrs	r3, r0, #3
 801ad38:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ad3c:	f993 2000 	ldrsb.w	r2, [r3]
 801ad40:	f000 0307 	and.w	r3, r0, #7
 801ad44:	3303      	adds	r3, #3
 801ad46:	4293      	cmp	r3, r2
 801ad48:	db02      	blt.n	801ad50 <cat_service+0x4178>
 801ad4a:	2a00      	cmp	r2, #0
 801ad4c:	f044 8581 	bne.w	801f852 <cat_service+0x8c7a>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ad50:	f101 0010 	add.w	r0, r1, #16
        return (char*)self->desc->buf;
 801ad54:	f8d1 9008 	ldr.w	r9, [r1, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ad58:	08c3      	lsrs	r3, r0, #3
 801ad5a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ad5e:	f993 2000 	ldrsb.w	r2, [r3]
 801ad62:	f000 0307 	and.w	r3, r0, #7
 801ad66:	3303      	adds	r3, #3
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	db02      	blt.n	801ad72 <cat_service+0x419a>
 801ad6c:	2a00      	cmp	r2, #0
 801ad6e:	f044 8572 	bne.w	801f856 <cat_service+0x8c7e>
 801ad72:	690b      	ldr	r3, [r1, #16]
 801ad74:	9104      	str	r1, [sp, #16]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	f002 8674 	beq.w	801da64 <cat_service+0x6e8c>
 801ad7c:	f7ee ffd6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ad80:	9904      	ldr	r1, [sp, #16]
 801ad82:	f101 000c 	add.w	r0, r1, #12
 801ad86:	08c3      	lsrs	r3, r0, #3
 801ad88:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ad8c:	f993 2000 	ldrsb.w	r2, [r3]
 801ad90:	f000 0307 	and.w	r3, r0, #7
 801ad94:	3303      	adds	r3, #3
 801ad96:	4293      	cmp	r3, r2
 801ad98:	db02      	blt.n	801ada0 <cat_service+0x41c8>
 801ad9a:	2a00      	cmp	r2, #0
 801ad9c:	f044 855d 	bne.w	801f85a <cat_service+0x8c82>
 801ada0:	68ca      	ldr	r2, [r1, #12]
 801ada2:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801ada4:	f7ee ffc2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ada8:	9a04      	ldr	r2, [sp, #16]
 801adaa:	4648      	mov	r0, r9
 801adac:	49d1      	ldr	r1, [pc, #836]	; (801b0f4 <cat_service+0x451c>)
 801adae:	f007 fe12 	bl	80229d6 <strncpy>
        self->position = 0;
 801adb2:	f104 0018 	add.w	r0, r4, #24
 801adb6:	08c3      	lsrs	r3, r0, #3
 801adb8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801adbc:	f993 2000 	ldrsb.w	r2, [r3]
 801adc0:	f000 0307 	and.w	r3, r0, #7
 801adc4:	3303      	adds	r3, #3
 801adc6:	4293      	cmp	r3, r2
 801adc8:	db02      	blt.n	801add0 <cat_service+0x41f8>
 801adca:	2a00      	cmp	r2, #0
 801adcc:	f044 85bc 	bne.w	801f948 <cat_service+0x8d70>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801add0:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801add4:	2300      	movs	r3, #0
 801add6:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801add8:	08c3      	lsrs	r3, r0, #3
 801adda:	f000 0207 	and.w	r2, r0, #7
 801adde:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ade2:	f993 3000 	ldrsb.w	r3, [r3]
 801ade6:	429a      	cmp	r2, r3
 801ade8:	db02      	blt.n	801adf0 <cat_service+0x4218>
 801adea:	2b00      	cmp	r3, #0
 801adec:	f044 85a8 	bne.w	801f940 <cat_service+0x8d68>
        self->write_buf = get_new_line_chars(self);
 801adf0:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801adf4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801adf8:	f083 0c01 	eor.w	ip, r3, #1
        self->write_buf = get_new_line_chars(self);
 801adfc:	08c3      	lsrs	r3, r0, #3
 801adfe:	f000 0207 	and.w	r2, r0, #7
 801ae02:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ae06:	3203      	adds	r2, #3
 801ae08:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ae0c:	4bba      	ldr	r3, [pc, #744]	; (801b0f8 <cat_service+0x4520>)
        self->write_buf = get_new_line_chars(self);
 801ae0e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ae10:	4463      	add	r3, ip
        self->write_buf = get_new_line_chars(self);
 801ae12:	db02      	blt.n	801ae1a <cat_service+0x4242>
 801ae14:	2900      	cmp	r1, #0
 801ae16:	f044 8595 	bne.w	801f944 <cat_service+0x8d6c>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ae1a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801ae1e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ae20:	08c3      	lsrs	r3, r0, #3
 801ae22:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ae26:	f993 2000 	ldrsb.w	r2, [r3]
 801ae2a:	f000 0307 	and.w	r3, r0, #7
 801ae2e:	3303      	adds	r3, #3
 801ae30:	4293      	cmp	r3, r2
 801ae32:	db02      	blt.n	801ae3a <cat_service+0x4262>
 801ae34:	2a00      	cmp	r2, #0
 801ae36:	f044 821a 	bne.w	801f26e <cat_service+0x8696>
        self->write_state_after = state_after;
 801ae3a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ae3e:	2300      	movs	r3, #0
 801ae40:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801ae42:	08c3      	lsrs	r3, r0, #3
 801ae44:	f000 0207 	and.w	r2, r0, #7
 801ae48:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ae4c:	f993 3000 	ldrsb.w	r3, [r3]
 801ae50:	429a      	cmp	r2, r3
 801ae52:	db02      	blt.n	801ae5a <cat_service+0x4282>
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	f044 820c 	bne.w	801f272 <cat_service+0x869a>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ae5a:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801ae5c:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ae5e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801ae62:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ae66:	f006 0207 	and.w	r2, r6, #7
 801ae6a:	f993 3000 	ldrsb.w	r3, [r3]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	db02      	blt.n	801ae78 <cat_service+0x42a0>
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	f044 84d5 	bne.w	801f822 <cat_service+0x8c4a>
 801ae78:	2312      	movs	r3, #18
 801ae7a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801ae7e:	f7fc b9a3 	b.w	80171c8 <cat_service+0x5f0>
 801ae82:	9105      	str	r1, [sp, #20]
        if (stat > 0) {
 801ae84:	f7ee ff52 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ae88:	2d01      	cmp	r5, #1
 801ae8a:	9905      	ldr	r1, [sp, #20]
 801ae8c:	f000 87a1 	beq.w	801bdd2 <cat_service+0x51fa>
        if ((self->cmd->need_all_vars != false) && (self->index != self->cmd->var_num)) {
 801ae90:	9105      	str	r1, [sp, #20]
 801ae92:	f7ee ff4b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ae96:	f109 0020 	add.w	r0, r9, #32
 801ae9a:	9905      	ldr	r1, [sp, #20]
 801ae9c:	08c3      	lsrs	r3, r0, #3
 801ae9e:	f000 0207 	and.w	r2, r0, #7
 801aea2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aea6:	f993 3000 	ldrsb.w	r3, [r3]
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	db02      	blt.n	801aeb4 <cat_service+0x42dc>
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	f044 81e1 	bne.w	801f276 <cat_service+0x869e>
 801aeb4:	f899 3020 	ldrb.w	r3, [r9, #32]
 801aeb8:	9105      	str	r1, [sp, #20]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	f43f ac30 	beq.w	801a720 <cat_service+0x3b48>
 801aec0:	f7ee ff34 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801aec4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801aec8:	428b      	cmp	r3, r1
 801aeca:	f43f ac29 	beq.w	801a720 <cat_service+0x3b48>
        return (char*)self->desc->buf;
 801aece:	f7ee ff2d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801aed2:	9b07      	ldr	r3, [sp, #28]
 801aed4:	9a06      	ldr	r2, [sp, #24]
 801aed6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aeda:	3203      	adds	r2, #3
 801aedc:	f993 3000 	ldrsb.w	r3, [r3]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	db02      	blt.n	801aeea <cat_service+0x4312>
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f044 80ce 	bne.w	801f086 <cat_service+0x84ae>
 801aeea:	f8d4 9000 	ldr.w	r9, [r4]
 801aeee:	f109 0008 	add.w	r0, r9, #8
 801aef2:	08c3      	lsrs	r3, r0, #3
 801aef4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801aef8:	f993 2000 	ldrsb.w	r2, [r3]
 801aefc:	f000 0307 	and.w	r3, r0, #7
 801af00:	3303      	adds	r3, #3
 801af02:	4293      	cmp	r3, r2
 801af04:	db02      	blt.n	801af0c <cat_service+0x4334>
 801af06:	2a00      	cmp	r2, #0
 801af08:	f044 80c0 	bne.w	801f08c <cat_service+0x84b4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801af0c:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801af10:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801af14:	08c3      	lsrs	r3, r0, #3
 801af16:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801af1a:	f993 2000 	ldrsb.w	r2, [r3]
 801af1e:	f000 0307 	and.w	r3, r0, #7
 801af22:	3303      	adds	r3, #3
 801af24:	4293      	cmp	r3, r2
 801af26:	db02      	blt.n	801af2e <cat_service+0x4356>
 801af28:	2a00      	cmp	r2, #0
 801af2a:	f044 80b1 	bne.w	801f090 <cat_service+0x84b8>
 801af2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801af32:	2b00      	cmp	r3, #0
 801af34:	f003 8647 	beq.w	801ebc6 <cat_service+0x7fee>
 801af38:	f7ee fef8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801af3c:	f109 000c 	add.w	r0, r9, #12
 801af40:	08c3      	lsrs	r3, r0, #3
 801af42:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801af46:	f993 2000 	ldrsb.w	r2, [r3]
 801af4a:	f000 0307 	and.w	r3, r0, #7
 801af4e:	3303      	adds	r3, #3
 801af50:	4293      	cmp	r3, r2
 801af52:	db02      	blt.n	801af5a <cat_service+0x4382>
 801af54:	2a00      	cmp	r2, #0
 801af56:	f044 809d 	bne.w	801f094 <cat_service+0x84bc>
 801af5a:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801af5e:	f7ee fee5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801af62:	464a      	mov	r2, r9
 801af64:	4963      	ldr	r1, [pc, #396]	; (801b0f4 <cat_service+0x451c>)
 801af66:	4628      	mov	r0, r5
 801af68:	f007 fd35 	bl	80229d6 <strncpy>
        self->position = 0;
 801af6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801af6e:	08cb      	lsrs	r3, r1, #3
 801af70:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801af74:	f993 2000 	ldrsb.w	r2, [r3]
 801af78:	f001 0307 	and.w	r3, r1, #7
 801af7c:	3303      	adds	r3, #3
 801af7e:	4293      	cmp	r3, r2
 801af80:	db02      	blt.n	801af88 <cat_service+0x43b0>
 801af82:	2a00      	cmp	r2, #0
 801af84:	f044 8487 	bne.w	801f896 <cat_service+0x8cbe>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801af88:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801af8c:	2300      	movs	r3, #0
 801af8e:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801af90:	08c3      	lsrs	r3, r0, #3
 801af92:	f000 0207 	and.w	r2, r0, #7
 801af96:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801af9a:	f993 3000 	ldrsb.w	r3, [r3]
 801af9e:	429a      	cmp	r2, r3
 801afa0:	db02      	blt.n	801afa8 <cat_service+0x43d0>
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	f044 847a 	bne.w	801f89c <cat_service+0x8cc4>
        self->write_buf = get_new_line_chars(self);
 801afa8:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801afac:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801afb0:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801afb4:	08c3      	lsrs	r3, r0, #3
 801afb6:	f000 0207 	and.w	r2, r0, #7
 801afba:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801afbe:	3203      	adds	r2, #3
 801afc0:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801afc4:	4b4c      	ldr	r3, [pc, #304]	; (801b0f8 <cat_service+0x4520>)
        self->write_buf = get_new_line_chars(self);
 801afc6:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801afc8:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801afca:	db02      	blt.n	801afd2 <cat_service+0x43fa>
 801afcc:	2900      	cmp	r1, #0
 801afce:	f044 8467 	bne.w	801f8a0 <cat_service+0x8cc8>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801afd2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801afd6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801afd8:	08c3      	lsrs	r3, r0, #3
 801afda:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801afde:	f993 2000 	ldrsb.w	r2, [r3]
 801afe2:	f000 0307 	and.w	r3, r0, #7
 801afe6:	3303      	adds	r3, #3
 801afe8:	4293      	cmp	r3, r2
 801afea:	db02      	blt.n	801aff2 <cat_service+0x441a>
 801afec:	2a00      	cmp	r2, #0
 801afee:	f044 8459 	bne.w	801f8a4 <cat_service+0x8ccc>
        self->write_state_after = state_after;
 801aff2:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801aff6:	2300      	movs	r3, #0
 801aff8:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801affa:	08c3      	lsrs	r3, r0, #3
 801affc:	f000 0207 	and.w	r2, r0, #7
 801b000:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b004:	f993 3000 	ldrsb.w	r3, [r3]
 801b008:	429a      	cmp	r2, r3
 801b00a:	db02      	blt.n	801b012 <cat_service+0x443a>
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	f044 82af 	bne.w	801f570 <cat_service+0x8998>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801b012:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801b014:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801b016:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801b01a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801b01e:	f006 0207 	and.w	r2, r6, #7
 801b022:	f993 3000 	ldrsb.w	r3, [r3]
 801b026:	429a      	cmp	r2, r3
 801b028:	db02      	blt.n	801b030 <cat_service+0x4458>
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	f044 82a2 	bne.w	801f574 <cat_service+0x899c>
 801b030:	2312      	movs	r3, #18
                return CAT_STATUS_BUSY;
 801b032:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801b034:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801b038:	f7fc b8c6 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_ERROR_MUTEX_LOCK;
 801b03c:	f06f 0502 	mvn.w	r5, #2
 801b040:	f7fc b8fc 	b.w	801723c <cat_service+0x664>
                byte <<= 4;
 801b044:	ea4f 1808 	mov.w	r8, r8, lsl #4
        return ((ch >= '0') && (ch <= '9')) ? (uint8_t)(ch - '0') : (uint8_t)(ch - 'A' + 10U);
 801b048:	3d37      	subs	r5, #55	; 0x37
                byte <<= 4;
 801b04a:	f7ee fe6f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b04e:	fa5f f888 	uxtb.w	r8, r8
        return ((ch >= '0') && (ch <= '9')) ? (uint8_t)(ch - '0') : (uint8_t)(ch - 'A' + 10U);
 801b052:	fa5f fa85 	uxtb.w	sl, r5
 801b056:	f7fd befb 	b.w	8018e50 <cat_service+0x2278>
        switch (self->current_char) {
 801b05a:	f7ee fe67 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b05e:	f009 0207 	and.w	r2, r9, #7
 801b062:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b066:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b06a:	f993 3000 	ldrsb.w	r3, [r3]
 801b06e:	429a      	cmp	r2, r3
 801b070:	db02      	blt.n	801b078 <cat_service+0x44a0>
 801b072:	2b00      	cmp	r3, #0
 801b074:	f044 84d5 	bne.w	801fa22 <cat_service+0x8e4a>
 801b078:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b07c:	f7fd ba2b 	b.w	80184d6 <cat_service+0x18fe>
        switch (self->current_char) {
 801b080:	f7ee fe54 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b084:	f009 0207 	and.w	r2, r9, #7
 801b088:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b08c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b090:	f993 3000 	ldrsb.w	r3, [r3]
 801b094:	429a      	cmp	r2, r3
 801b096:	db02      	blt.n	801b09e <cat_service+0x44c6>
 801b098:	2b00      	cmp	r3, #0
 801b09a:	f044 84b7 	bne.w	801fa0c <cat_service+0x8e34>
 801b09e:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b0a2:	f7fc b9b0 	b.w	8017406 <cat_service+0x82e>
        switch (self->current_char) {
 801b0a6:	f7ee fe41 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b0aa:	f009 0207 	and.w	r2, r9, #7
 801b0ae:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b0b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b0b6:	f993 3000 	ldrsb.w	r3, [r3]
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	db02      	blt.n	801b0c4 <cat_service+0x44ec>
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	f044 84ce 	bne.w	801fa60 <cat_service+0x8e88>
 801b0c4:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b0c8:	f7fc b932 	b.w	8017330 <cat_service+0x758>
        switch (self->current_char) {
 801b0cc:	f7ee fe2e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b0d0:	f009 0207 	and.w	r2, r9, #7
 801b0d4:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b0d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b0dc:	f993 3000 	ldrsb.w	r3, [r3]
 801b0e0:	429a      	cmp	r2, r3
 801b0e2:	db02      	blt.n	801b0ea <cat_service+0x4512>
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	f044 858e 	bne.w	801fc06 <cat_service+0x902e>
 801b0ea:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b0ee:	f7fd bb71 	b.w	80187d4 <cat_service+0x1bfc>
 801b0f2:	bf00      	nop
 801b0f4:	24009200 	.word	0x24009200
 801b0f8:	24009240 	.word	0x24009240
        switch (self->current_char) {
 801b0fc:	f7ee fe16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b100:	f009 0207 	and.w	r2, r9, #7
 801b104:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b108:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b10c:	f993 3000 	ldrsb.w	r3, [r3]
 801b110:	429a      	cmp	r2, r3
 801b112:	db02      	blt.n	801b11a <cat_service+0x4542>
 801b114:	2b00      	cmp	r3, #0
 801b116:	f044 856d 	bne.w	801fbf4 <cat_service+0x901c>
 801b11a:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b11e:	f7fc b9ed 	b.w	80174fc <cat_service+0x924>
        switch (self->current_char) {
 801b122:	f7ee fe03 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b126:	f009 0207 	and.w	r2, r9, #7
 801b12a:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b12e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b132:	f993 3000 	ldrsb.w	r3, [r3]
 801b136:	429a      	cmp	r2, r3
 801b138:	db02      	blt.n	801b140 <cat_service+0x4568>
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	f044 82ec 	bne.w	801f718 <cat_service+0x8b40>
 801b140:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b144:	f7fc bd3e 	b.w	8017bc4 <cat_service+0xfec>
        switch (self->current_char) {
 801b148:	f7ee fdf0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b14c:	f009 0207 	and.w	r2, r9, #7
 801b150:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801b154:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b158:	f993 3000 	ldrsb.w	r3, [r3]
 801b15c:	429a      	cmp	r2, r3
 801b15e:	db02      	blt.n	801b166 <cat_service+0x458e>
 801b160:	2b00      	cmp	r3, #0
 801b162:	f044 81f3 	bne.w	801f54c <cat_service+0x8974>
 801b166:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 801b16a:	f7fc bb90 	b.w	801788e <cat_service+0xcb6>
                self->cr_flag = true;
 801b16e:	f7ee fddd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b172:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801b176:	08c3      	lsrs	r3, r0, #3
 801b178:	f000 0207 	and.w	r2, r0, #7
 801b17c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b180:	f993 3000 	ldrsb.w	r3, [r3]
 801b184:	429a      	cmp	r2, r3
 801b186:	db02      	blt.n	801b18e <cat_service+0x45b6>
 801b188:	2b00      	cmp	r3, #0
 801b18a:	f044 8290 	bne.w	801f6ae <cat_service+0x8ad6>
 801b18e:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 801b190:	4605      	mov	r5, r0
                self->cr_flag = true;
 801b192:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 801b196:	f7fc b817 	b.w	80171c8 <cat_service+0x5f0>
                if (self->cmd->only_test != false) {
 801b19a:	f7ee fdc7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b19e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801b1a2:	08c3      	lsrs	r3, r0, #3
 801b1a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b1a8:	f993 2000 	ldrsb.w	r2, [r3]
 801b1ac:	f000 0307 	and.w	r3, r0, #7
 801b1b0:	3303      	adds	r3, #3
 801b1b2:	4293      	cmp	r3, r2
 801b1b4:	db02      	blt.n	801b1bc <cat_service+0x45e4>
 801b1b6:	2a00      	cmp	r2, #0
 801b1b8:	f044 827b 	bne.w	801f6b2 <cat_service+0x8ada>
 801b1bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b1be:	f106 0021 	add.w	r0, r6, #33	; 0x21
 801b1c2:	08c3      	lsrs	r3, r0, #3
 801b1c4:	f000 0207 	and.w	r2, r0, #7
 801b1c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b1cc:	f993 3000 	ldrsb.w	r3, [r3]
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	db02      	blt.n	801b1da <cat_service+0x4602>
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	f044 8272 	bne.w	801f6be <cat_service+0x8ae6>
 801b1da:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	f041 8252 	bne.w	801c688 <cat_service+0x5ab0>
        if (cmd->var == NULL)
 801b1e4:	f7ee fda2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b1e8:	f106 0018 	add.w	r0, r6, #24
 801b1ec:	08c3      	lsrs	r3, r0, #3
 801b1ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b1f2:	f993 2000 	ldrsb.w	r2, [r3]
 801b1f6:	f000 0307 	and.w	r3, r0, #7
 801b1fa:	3303      	adds	r3, #3
 801b1fc:	4293      	cmp	r3, r2
 801b1fe:	db02      	blt.n	801b206 <cat_service+0x462e>
 801b200:	2a00      	cmp	r2, #0
 801b202:	f044 825e 	bne.w	801f6c2 <cat_service+0x8aea>
 801b206:	69b3      	ldr	r3, [r6, #24]
 801b208:	9304      	str	r3, [sp, #16]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	f000 878b 	beq.w	801c126 <cat_service+0x554e>
        for (i = 0; i < cmd->var_num; i++) {
 801b210:	f7ee fd8c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b214:	f106 001c 	add.w	r0, r6, #28
 801b218:	08c3      	lsrs	r3, r0, #3
 801b21a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b21e:	f993 2000 	ldrsb.w	r2, [r3]
 801b222:	f000 0307 	and.w	r3, r0, #7
 801b226:	3303      	adds	r3, #3
 801b228:	4293      	cmp	r3, r2
 801b22a:	db02      	blt.n	801b232 <cat_service+0x465a>
 801b22c:	2a00      	cmp	r2, #0
 801b22e:	f044 8244 	bne.w	801f6ba <cat_service+0x8ae2>
 801b232:	69f3      	ldr	r3, [r6, #28]
 801b234:	2b00      	cmp	r3, #0
 801b236:	f000 8776 	beq.w	801c126 <cat_service+0x554e>
 801b23a:	9a04      	ldr	r2, [sp, #16]
 801b23c:	2500      	movs	r5, #0
 801b23e:	9605      	str	r6, [sp, #20]
 801b240:	461e      	mov	r6, r3
 801b242:	f102 0910 	add.w	r9, r2, #16
 801b246:	e007      	b.n	801b258 <cat_service+0x4680>
 801b248:	3501      	adds	r5, #1
 801b24a:	f7ee fd6f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b24e:	f109 091c 	add.w	r9, r9, #28
 801b252:	42b5      	cmp	r5, r6
 801b254:	f000 8766 	beq.w	801c124 <cat_service+0x554c>
                var = &cmd->var[i];
 801b258:	f7ee fd68 	bl	8009d2c <__sanitizer_cov_trace_pc>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801b25c:	f009 0107 	and.w	r1, r9, #7
 801b260:	ea4f 02d9 	mov.w	r2, r9, lsr #3
 801b264:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801b268:	f992 2000 	ldrsb.w	r2, [r2]
 801b26c:	4291      	cmp	r1, r2
 801b26e:	db02      	blt.n	801b276 <cat_service+0x469e>
 801b270:	2a00      	cmp	r2, #0
 801b272:	f043 8715 	bne.w	801f0a0 <cat_service+0x84c8>
 801b276:	f899 2000 	ldrb.w	r2, [r9]
 801b27a:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 801b27e:	d1e3      	bne.n	801b248 <cat_service+0x4670>
                        self->state = CAT_STATE_PARSE_WRITE_ARGS;
 801b280:	f7ee fd54 	bl	8009d2c <__sanitizer_cov_trace_pc>
                        self->position = 0;
 801b284:	f104 0018 	add.w	r0, r4, #24
                        self->state = CAT_STATE_PARSE_WRITE_ARGS;
 801b288:	2309      	movs	r3, #9
 801b28a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        self->position = 0;
 801b28e:	08c3      	lsrs	r3, r0, #3
 801b290:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b294:	f993 2000 	ldrsb.w	r2, [r3]
 801b298:	f000 0307 	and.w	r3, r0, #7
 801b29c:	3303      	adds	r3, #3
 801b29e:	4293      	cmp	r3, r2
 801b2a0:	db02      	blt.n	801b2a8 <cat_service+0x46d0>
 801b2a2:	2a00      	cmp	r2, #0
 801b2a4:	f044 81fe 	bne.w	801f6a4 <cat_service+0x8acc>
                        self->index = 0;
 801b2a8:	f104 000c 	add.w	r0, r4, #12
                        self->position = 0;
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	61a3      	str	r3, [r4, #24]
                        self->index = 0;
 801b2b0:	08c3      	lsrs	r3, r0, #3
 801b2b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b2b6:	f993 2000 	ldrsb.w	r2, [r3]
 801b2ba:	f000 0307 	and.w	r3, r0, #7
 801b2be:	3303      	adds	r3, #3
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	db02      	blt.n	801b2ca <cat_service+0x46f2>
 801b2c4:	2a00      	cmp	r2, #0
 801b2c6:	f044 8230 	bne.w	801f72a <cat_service+0x8b52>
                        self->var = &self->cmd->var[self->index];
 801b2ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
                        self->index = 0;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	60e3      	str	r3, [r4, #12]
                        self->var = &self->cmd->var[self->index];
 801b2d2:	08c3      	lsrs	r3, r0, #3
 801b2d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b2d8:	f993 2000 	ldrsb.w	r2, [r3]
 801b2dc:	f000 0307 	and.w	r3, r0, #7
 801b2e0:	3303      	adds	r3, #3
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	db02      	blt.n	801b2ec <cat_service+0x4714>
 801b2e6:	2a00      	cmp	r2, #0
 801b2e8:	f044 8221 	bne.w	801f72e <cat_service+0x8b56>
 801b2ec:	9b04      	ldr	r3, [sp, #16]
        return CAT_STATUS_BUSY;
 801b2ee:	2501      	movs	r5, #1
                        self->var = &self->cmd->var[self->index];
 801b2f0:	62a3      	str	r3, [r4, #40]	; 0x28
                        break;
 801b2f2:	f7fb bf69 	b.w	80171c8 <cat_service+0x5f0>
                self->state = CAT_STATE_PARSE_PREFIX;
 801b2f6:	f7ee fd19 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b2fa:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 801b2fc:	4605      	mov	r5, r0
                self->state = CAT_STATE_PARSE_PREFIX;
 801b2fe:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
                break;
 801b302:	f7fb bf61 	b.w	80171c8 <cat_service+0x5f0>
                self->cr_flag = true;
 801b306:	f7ee fd11 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b30a:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801b30e:	08c3      	lsrs	r3, r0, #3
 801b310:	f000 0207 	and.w	r2, r0, #7
 801b314:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b318:	f993 3000 	ldrsb.w	r3, [r3]
 801b31c:	429a      	cmp	r2, r3
 801b31e:	db02      	blt.n	801b326 <cat_service+0x474e>
 801b320:	2b00      	cmp	r3, #0
 801b322:	f044 827a 	bne.w	801f81a <cat_service+0x8c42>
 801b326:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 801b328:	4605      	mov	r5, r0
                self->cr_flag = true;
 801b32a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 801b32e:	f7fb bf4b 	b.w	80171c8 <cat_service+0x5f0>
        self->index = 0;
 801b332:	f7ee fcfb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b336:	f104 000c 	add.w	r0, r4, #12
 801b33a:	08c3      	lsrs	r3, r0, #3
 801b33c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b340:	f993 2000 	ldrsb.w	r2, [r3]
 801b344:	f000 0307 	and.w	r3, r0, #7
 801b348:	3303      	adds	r3, #3
 801b34a:	4293      	cmp	r3, r2
 801b34c:	db02      	blt.n	801b354 <cat_service+0x477c>
 801b34e:	2a00      	cmp	r2, #0
 801b350:	f044 81c2 	bne.w	801f6d8 <cat_service+0x8b00>
        self->partial_cntr = 0;
 801b354:	f104 0010 	add.w	r0, r4, #16
        self->index = 0;
 801b358:	2300      	movs	r3, #0
 801b35a:	60e3      	str	r3, [r4, #12]
        self->partial_cntr = 0;
 801b35c:	08c3      	lsrs	r3, r0, #3
 801b35e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b362:	f993 2000 	ldrsb.w	r2, [r3]
 801b366:	f000 0307 	and.w	r3, r0, #7
 801b36a:	3303      	adds	r3, #3
 801b36c:	4293      	cmp	r3, r2
 801b36e:	db02      	blt.n	801b376 <cat_service+0x479e>
 801b370:	2a00      	cmp	r2, #0
 801b372:	f044 81b3 	bne.w	801f6dc <cat_service+0x8b04>
        self->cmd = NULL;
 801b376:	f104 0024 	add.w	r0, r4, #36	; 0x24
        self->partial_cntr = 0;
 801b37a:	2300      	movs	r3, #0
 801b37c:	6123      	str	r3, [r4, #16]
        self->cmd = NULL;
 801b37e:	08c3      	lsrs	r3, r0, #3
 801b380:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b384:	f993 2000 	ldrsb.w	r2, [r3]
 801b388:	f000 0307 	and.w	r3, r0, #7
 801b38c:	3303      	adds	r3, #3
 801b38e:	4293      	cmp	r3, r2
 801b390:	db02      	blt.n	801b398 <cat_service+0x47c0>
 801b392:	2a00      	cmp	r2, #0
 801b394:	f043 86f9 	bne.w	801f18a <cat_service+0x85b2>
 801b398:	2300      	movs	r3, #0
        return CAT_STATUS_BUSY;
 801b39a:	2501      	movs	r5, #1
        self->cmd = NULL;
 801b39c:	6263      	str	r3, [r4, #36]	; 0x24
                self->state = CAT_STATE_SEARCH_COMMAND;
 801b39e:	2305      	movs	r3, #5
 801b3a0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801b3a4:	f7fb bf10 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801b3a8:	f7ee fcc0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b3ac:	08e3      	lsrs	r3, r4, #3
 801b3ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b3b2:	f993 2000 	ldrsb.w	r2, [r3]
 801b3b6:	f004 0307 	and.w	r3, r4, #7
 801b3ba:	3303      	adds	r3, #3
 801b3bc:	4293      	cmp	r3, r2
 801b3be:	db02      	blt.n	801b3c6 <cat_service+0x47ee>
 801b3c0:	2a00      	cmp	r2, #0
 801b3c2:	f044 818d 	bne.w	801f6e0 <cat_service+0x8b08>
 801b3c6:	6826      	ldr	r6, [r4, #0]
 801b3c8:	f106 0008 	add.w	r0, r6, #8
 801b3cc:	08c3      	lsrs	r3, r0, #3
 801b3ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b3d2:	f993 2000 	ldrsb.w	r2, [r3]
 801b3d6:	f000 0307 	and.w	r3, r0, #7
 801b3da:	3303      	adds	r3, #3
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	db02      	blt.n	801b3e6 <cat_service+0x480e>
 801b3e0:	2a00      	cmp	r2, #0
 801b3e2:	f044 8180 	bne.w	801f6e6 <cat_service+0x8b0e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b3e6:	f106 0010 	add.w	r0, r6, #16
        return (char*)self->desc->buf;
 801b3ea:	68b5      	ldr	r5, [r6, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b3ec:	08c3      	lsrs	r3, r0, #3
 801b3ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b3f2:	f993 2000 	ldrsb.w	r2, [r3]
 801b3f6:	f000 0307 	and.w	r3, r0, #7
 801b3fa:	3303      	adds	r3, #3
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	db02      	blt.n	801b406 <cat_service+0x482e>
 801b400:	2a00      	cmp	r2, #0
 801b402:	f044 8176 	bne.w	801f6f2 <cat_service+0x8b1a>
 801b406:	6933      	ldr	r3, [r6, #16]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	f001 82e6 	beq.w	801c9da <cat_service+0x5e02>
 801b40e:	f7ee fc8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b412:	f106 000c 	add.w	r0, r6, #12
 801b416:	08c3      	lsrs	r3, r0, #3
 801b418:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b41c:	f993 2000 	ldrsb.w	r2, [r3]
 801b420:	f000 0307 	and.w	r3, r0, #7
 801b424:	3303      	adds	r3, #3
 801b426:	4293      	cmp	r3, r2
 801b428:	db02      	blt.n	801b430 <cat_service+0x4858>
 801b42a:	2a00      	cmp	r2, #0
 801b42c:	f044 8163 	bne.w	801f6f6 <cat_service+0x8b1e>
 801b430:	68f2      	ldr	r2, [r6, #12]
 801b432:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801b434:	f7ee fc7a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b438:	9a04      	ldr	r2, [sp, #16]
 801b43a:	4628      	mov	r0, r5
 801b43c:	4994      	ldr	r1, [pc, #592]	; (801b690 <cat_service+0x4ab8>)
 801b43e:	f007 faca 	bl	80229d6 <strncpy>
        self->position = 0;
 801b442:	f104 0018 	add.w	r0, r4, #24
 801b446:	08c3      	lsrs	r3, r0, #3
 801b448:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b44c:	f993 2000 	ldrsb.w	r2, [r3]
 801b450:	f000 0307 	and.w	r3, r0, #7
 801b454:	3303      	adds	r3, #3
 801b456:	4293      	cmp	r3, r2
 801b458:	db02      	blt.n	801b460 <cat_service+0x4888>
 801b45a:	2a00      	cmp	r2, #0
 801b45c:	f044 80cd 	bne.w	801f5fa <cat_service+0x8a22>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b460:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801b464:	2300      	movs	r3, #0
 801b466:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b468:	08c3      	lsrs	r3, r0, #3
 801b46a:	f000 0207 	and.w	r2, r0, #7
 801b46e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b472:	f993 3000 	ldrsb.w	r3, [r3]
 801b476:	429a      	cmp	r2, r3
 801b478:	db02      	blt.n	801b480 <cat_service+0x48a8>
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	f044 813d 	bne.w	801f6fa <cat_service+0x8b22>
        self->write_buf = get_new_line_chars(self);
 801b480:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b484:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801b488:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801b48c:	08c3      	lsrs	r3, r0, #3
 801b48e:	f000 0207 	and.w	r2, r0, #7
 801b492:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b496:	3203      	adds	r2, #3
 801b498:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b49c:	4b7d      	ldr	r3, [pc, #500]	; (801b694 <cat_service+0x4abc>)
        self->write_buf = get_new_line_chars(self);
 801b49e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b4a0:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801b4a2:	db02      	blt.n	801b4aa <cat_service+0x48d2>
 801b4a4:	2900      	cmp	r1, #0
 801b4a6:	f044 812a 	bne.w	801f6fe <cat_service+0x8b26>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801b4aa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801b4ae:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801b4b0:	08c3      	lsrs	r3, r0, #3
 801b4b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b4b6:	f993 2000 	ldrsb.w	r2, [r3]
 801b4ba:	f000 0307 	and.w	r3, r0, #7
 801b4be:	3303      	adds	r3, #3
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	db02      	blt.n	801b4ca <cat_service+0x48f2>
 801b4c4:	2a00      	cmp	r2, #0
 801b4c6:	f044 811c 	bne.w	801f702 <cat_service+0x8b2a>
        self->write_state_after = state_after;
 801b4ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801b4d2:	08c3      	lsrs	r3, r0, #3
 801b4d4:	f000 0207 	and.w	r2, r0, #7
 801b4d8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b4dc:	f993 3000 	ldrsb.w	r3, [r3]
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	db02      	blt.n	801b4ea <cat_service+0x4912>
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	f044 810e 	bne.w	801f706 <cat_service+0x8b2e>
 801b4ea:	2314      	movs	r3, #20
        return CAT_STATUS_BUSY;
 801b4ec:	2501      	movs	r5, #1
        self->write_state_after = state_after;
 801b4ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801b4f2:	2312      	movs	r3, #18
 801b4f4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801b4f8:	f7fb be66 	b.w	80171c8 <cat_service+0x5f0>
                self->cr_flag = true;
 801b4fc:	f7ee fc16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b500:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801b504:	08c3      	lsrs	r3, r0, #3
 801b506:	f000 0207 	and.w	r2, r0, #7
 801b50a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b50e:	f993 3000 	ldrsb.w	r3, [r3]
 801b512:	429a      	cmp	r2, r3
 801b514:	db02      	blt.n	801b51c <cat_service+0x4944>
 801b516:	2b00      	cmp	r3, #0
 801b518:	f044 8037 	bne.w	801f58a <cat_service+0x89b2>
 801b51c:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 801b51e:	4605      	mov	r5, r0
                self->cr_flag = true;
 801b520:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 801b524:	f7fb be50 	b.w	80171c8 <cat_service+0x5f0>
                start_processing_format_test_args(self, CAT_FSM_TYPE_ATCMD);
 801b528:	f7ee fc00 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b52c:	2100      	movs	r1, #0
 801b52e:	4620      	mov	r0, r4
        return CAT_STATUS_BUSY;
 801b530:	2501      	movs	r5, #1
                start_processing_format_test_args(self, CAT_FSM_TYPE_ATCMD);
 801b532:	f7f7 ffc5 	bl	80134c0 <start_processing_format_test_args>
                break;
 801b536:	f7fb be47 	b.w	80171c8 <cat_service+0x5f0>
                return CAT_STATUS_OK;
 801b53a:	4605      	mov	r5, r0
        if ((unsolicited_stat != CAT_STATUS_OK) || (is_unsolicited_fsm_busy(self) != false)) {
 801b53c:	f7ee fbf6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b540:	f7fb be46 	b.w	80171d0 <cat_service+0x5f8>
                        self->unsolicited_fsm.state = self->unsolicited_fsm.write_state_after;
 801b544:	f7ee fbf2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b548:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801b54c:	08c3      	lsrs	r3, r0, #3
 801b54e:	f000 0207 	and.w	r2, r0, #7
 801b552:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b556:	f993 3000 	ldrsb.w	r3, [r3]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	db02      	blt.n	801b564 <cat_service+0x498c>
 801b55e:	2b00      	cmp	r3, #0
 801b560:	f044 8190 	bne.w	801f884 <cat_service+0x8cac>
        switch (self->state) {
 801b564:	f104 062e 	add.w	r6, r4, #46	; 0x2e
                        self->unsolicited_fsm.state = self->unsolicited_fsm.write_state_after;
 801b568:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 801b56c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        switch (self->state) {
 801b570:	08f3      	lsrs	r3, r6, #3
 801b572:	f006 0207 	and.w	r2, r6, #7
 801b576:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b57a:	f993 3000 	ldrsb.w	r3, [r3]
 801b57e:	429a      	cmp	r2, r3
 801b580:	f6fb abb7 	blt.w	8016cf2 <cat_service+0x11a>
 801b584:	2b00      	cmp	r3, #0
 801b586:	f43b abb4 	beq.w	8016cf2 <cat_service+0x11a>
 801b58a:	4630      	mov	r0, r6
 801b58c:	f7ed ffec 	bl	8009568 <__asan_report_load1>
                        self->unsolicited_fsm.position = 0;
 801b590:	f7ee fbcc 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b594:	f104 002f 	add.w	r0, r4, #47	; 0x2f
                        self->unsolicited_fsm.position = 0;
 801b598:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b59a:	f000 0207 	and.w	r2, r0, #7
                        self->unsolicited_fsm.position = 0;
 801b59e:	64e3      	str	r3, [r4, #76]	; 0x4c
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b5a0:	08c3      	lsrs	r3, r0, #3
 801b5a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b5a6:	f993 3000 	ldrsb.w	r3, [r3]
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	db02      	blt.n	801b5b4 <cat_service+0x49dc>
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	f044 816a 	bne.w	801f888 <cat_service+0x8cb0>
        switch (self->state) {
 801b5b4:	f104 062e 	add.w	r6, r4, #46	; 0x2e
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b5b8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801b5bc:	f083 0201 	eor.w	r2, r3, #1
        switch (self->state) {
 801b5c0:	08f3      	lsrs	r3, r6, #3
 801b5c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b5c6:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801b5ca:	4b32      	ldr	r3, [pc, #200]	; (801b694 <cat_service+0x4abc>)
 801b5cc:	4413      	add	r3, r2
                        self->unsolicited_fsm.write_buf = get_new_line_chars(self);
 801b5ce:	65e3      	str	r3, [r4, #92]	; 0x5c
                        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_AFTER;
 801b5d0:	2302      	movs	r3, #2
 801b5d2:	6623      	str	r3, [r4, #96]	; 0x60
        switch (self->state) {
 801b5d4:	f006 0307 	and.w	r3, r6, #7
 801b5d8:	428b      	cmp	r3, r1
 801b5da:	f6fb ab8a 	blt.w	8016cf2 <cat_service+0x11a>
 801b5de:	2900      	cmp	r1, #0
 801b5e0:	f43b ab87 	beq.w	8016cf2 <cat_service+0x11a>
 801b5e4:	4630      	mov	r0, r6
 801b5e6:	f7ed ffbf 	bl	8009568 <__asan_report_load1>
                        self->unsolicited_fsm.position = 0;
 801b5ea:	f7ee fb9f 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801b5ee:	f004 0207 	and.w	r2, r4, #7
 801b5f2:	08e3      	lsrs	r3, r4, #3
                        self->unsolicited_fsm.position = 0;
 801b5f4:	64e5      	str	r5, [r4, #76]	; 0x4c
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801b5f6:	3203      	adds	r2, #3
 801b5f8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b5fc:	f993 3000 	ldrsb.w	r3, [r3]
 801b600:	429a      	cmp	r2, r3
 801b602:	db02      	blt.n	801b60a <cat_service+0x4a32>
 801b604:	2b00      	cmp	r3, #0
 801b606:	f043 856e 	bne.w	801f0e6 <cat_service+0x850e>
 801b60a:	6825      	ldr	r5, [r4, #0]
 801b60c:	f105 0010 	add.w	r0, r5, #16
 801b610:	08c3      	lsrs	r3, r0, #3
 801b612:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b616:	f993 2000 	ldrsb.w	r2, [r3]
 801b61a:	f000 0307 	and.w	r3, r0, #7
 801b61e:	3303      	adds	r3, #3
 801b620:	4293      	cmp	r3, r2
 801b622:	db02      	blt.n	801b62a <cat_service+0x4a52>
 801b624:	2a00      	cmp	r2, #0
 801b626:	f044 8124 	bne.w	801f872 <cat_service+0x8c9a>
 801b62a:	692e      	ldr	r6, [r5, #16]
 801b62c:	2e00      	cmp	r6, #0
 801b62e:	f001 8362 	beq.w	801ccf6 <cat_service+0x611e>
                        self->unsolicited_fsm.write_buf = get_unsolicited_buf(self);
 801b632:	f7ee fb7b 	bl	8009d2c <__sanitizer_cov_trace_pc>
                        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_MAIN_BUFFER;
 801b636:	2301      	movs	r3, #1
                        self->unsolicited_fsm.write_buf = get_unsolicited_buf(self);
 801b638:	65e6      	str	r6, [r4, #92]	; 0x5c
        switch (self->state) {
 801b63a:	f104 062e 	add.w	r6, r4, #46	; 0x2e
                        self->unsolicited_fsm.write_state = CAT_WRITE_STATE_MAIN_BUFFER;
 801b63e:	6623      	str	r3, [r4, #96]	; 0x60
        switch (self->state) {
 801b640:	08f3      	lsrs	r3, r6, #3
 801b642:	f006 0207 	and.w	r2, r6, #7
 801b646:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b64a:	f993 3000 	ldrsb.w	r3, [r3]
 801b64e:	429a      	cmp	r2, r3
 801b650:	f6fb ab4f 	blt.w	8016cf2 <cat_service+0x11a>
 801b654:	2b00      	cmp	r3, #0
 801b656:	f43b ab4c 	beq.w	8016cf2 <cat_service+0x11a>
 801b65a:	4630      	mov	r0, r6
 801b65c:	f7ed ff84 	bl	8009568 <__asan_report_load1>
        return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
 801b660:	f7ee fb64 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b664:	f7ee fb62 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b668:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
 801b66c:	2b05      	cmp	r3, #5
 801b66e:	f63e ade7 	bhi.w	801a240 <cat_service+0x3668>
                                val <<= 4;
 801b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b674:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801b678:	f7ee fb58 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return ((ch >= '0') && (ch <= '9')) ? (uint8_t)(ch - '0') : (uint8_t)(ch - 'A' + 10U);
 801b67c:	f1a5 0337 	sub.w	r3, r5, #55	; 0x37
                                val <<= 4;
 801b680:	9a08      	ldr	r2, [sp, #32]
        return ((ch >= '0') && (ch <= '9')) ? (uint8_t)(ch - '0') : (uint8_t)(ch - 'A' + 10U);
 801b682:	b2db      	uxtb	r3, r3
                                val <<= 4;
 801b684:	ea48 7812 	orr.w	r8, r8, r2, lsr #28
 801b688:	0115      	lsls	r5, r2, #4
        return ((ch >= '0') && (ch <= '9')) ? (uint8_t)(ch - '0') : (uint8_t)(ch - 'A' + 10U);
 801b68a:	930c      	str	r3, [sp, #48]	; 0x30
 801b68c:	f7fe bd43 	b.w	801a116 <cat_service+0x353e>
 801b690:	24009200 	.word	0x24009200
 801b694:	24009240 	.word	0x24009240
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 801b698:	f7ee fb48 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b69c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801b6a0:	08c3      	lsrs	r3, r0, #3
 801b6a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b6a6:	f993 2000 	ldrsb.w	r2, [r3]
 801b6aa:	f000 0307 	and.w	r3, r0, #7
 801b6ae:	3303      	adds	r3, #3
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	db02      	blt.n	801b6ba <cat_service+0x4ae2>
 801b6b4:	2a00      	cmp	r2, #0
 801b6b6:	f043 84fa 	bne.w	801f0ae <cat_service+0x84d6>
 801b6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	f002 8467 	beq.w	801df90 <cat_service+0x73b8>
 801b6c2:	f7ee fb33 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b6c6:	f104 0020 	add.w	r0, r4, #32
 801b6ca:	1c6a      	adds	r2, r5, #1
 801b6cc:	08c3      	lsrs	r3, r0, #3
 801b6ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b6d2:	f993 1000 	ldrsb.w	r1, [r3]
 801b6d6:	f000 0307 	and.w	r3, r0, #7
 801b6da:	3303      	adds	r3, #3
 801b6dc:	428b      	cmp	r3, r1
 801b6de:	db02      	blt.n	801b6e6 <cat_service+0x4b0e>
 801b6e0:	2900      	cmp	r1, #0
 801b6e2:	f043 87aa 	bne.w	801f63a <cat_service+0x8a62>
 801b6e6:	6a23      	ldr	r3, [r4, #32]
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	9304      	str	r3, [sp, #16]
 801b6ec:	f002 8426 	beq.w	801df3c <cat_service+0x7364>
        assert(index < self->commands_num);
 801b6f0:	f7ee fb1c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b6f4:	9b04      	ldr	r3, [sp, #16]
 801b6f6:	429d      	cmp	r5, r3
 801b6f8:	f084 81e6 	bcs.w	801fac8 <cat_service+0x8ef0>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801b6fc:	f7ee fb16 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b700:	08e3      	lsrs	r3, r4, #3
 801b702:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b706:	f993 2000 	ldrsb.w	r2, [r3]
 801b70a:	f004 0307 	and.w	r3, r4, #7
 801b70e:	3303      	adds	r3, #3
 801b710:	4293      	cmp	r3, r2
 801b712:	db02      	blt.n	801b71a <cat_service+0x4b42>
 801b714:	2a00      	cmp	r2, #0
 801b716:	f043 8446 	bne.w	801efa6 <cat_service+0x83ce>
 801b71a:	6823      	ldr	r3, [r4, #0]
 801b71c:	1d18      	adds	r0, r3, #4
 801b71e:	08c2      	lsrs	r2, r0, #3
 801b720:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801b724:	f992 1000 	ldrsb.w	r1, [r2]
 801b728:	f000 0207 	and.w	r2, r0, #7
 801b72c:	3203      	adds	r2, #3
 801b72e:	428a      	cmp	r2, r1
 801b730:	db02      	blt.n	801b738 <cat_service+0x4b60>
 801b732:	2900      	cmp	r1, #0
 801b734:	f043 843a 	bne.w	801efac <cat_service+0x83d4>
 801b738:	685a      	ldr	r2, [r3, #4]
 801b73a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 801b73e:	2a00      	cmp	r2, #0
 801b740:	f003 83ae 	beq.w	801eea0 <cat_service+0x82c8>
                cmd_group = self->desc->cmd_group[i];
 801b744:	f7ee faf2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b748:	9b07      	ldr	r3, [sp, #28]
 801b74a:	08da      	lsrs	r2, r3, #3
 801b74c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801b750:	f992 1000 	ldrsb.w	r1, [r2]
 801b754:	f003 0207 	and.w	r2, r3, #7
 801b758:	3203      	adds	r2, #3
 801b75a:	428a      	cmp	r2, r1
 801b75c:	db02      	blt.n	801b764 <cat_service+0x4b8c>
 801b75e:	2900      	cmp	r1, #0
 801b760:	f043 8426 	bne.w	801efb0 <cat_service+0x83d8>
 801b764:	681a      	ldr	r2, [r3, #0]
 801b766:	08d3      	lsrs	r3, r2, #3
 801b768:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b76c:	f993 1000 	ldrsb.w	r1, [r3]
 801b770:	f002 0307 	and.w	r3, r2, #7
 801b774:	3303      	adds	r3, #3
 801b776:	428b      	cmp	r3, r1
 801b778:	db02      	blt.n	801b780 <cat_service+0x4ba8>
 801b77a:	2900      	cmp	r1, #0
 801b77c:	f043 840a 	bne.w	801ef94 <cat_service+0x83bc>
 801b780:	6811      	ldr	r1, [r2, #0]
                if (index >= j + cmd_group->cmd_num) {
 801b782:	f101 0008 	add.w	r0, r1, #8
 801b786:	08c3      	lsrs	r3, r0, #3
 801b788:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b78c:	f993 c000 	ldrsb.w	ip, [r3]
 801b790:	f000 0307 	and.w	r3, r0, #7
 801b794:	3303      	adds	r3, #3
 801b796:	4563      	cmp	r3, ip
 801b798:	db03      	blt.n	801b7a2 <cat_service+0x4bca>
 801b79a:	f1bc 0f00 	cmp.w	ip, #0
 801b79e:	f043 83fc 	bne.w	801ef9a <cat_service+0x83c2>
 801b7a2:	688b      	ldr	r3, [r1, #8]
 801b7a4:	429d      	cmp	r5, r3
 801b7a6:	f081 849f 	bcs.w	801d0e8 <cat_service+0x6510>
 801b7aa:	462b      	mov	r3, r5
                return &cmd_group->cmd[index - j];
 801b7ac:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801b7b0:	f7ee fabc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b7b4:	9908      	ldr	r1, [sp, #32]
 801b7b6:	9b07      	ldr	r3, [sp, #28]
 801b7b8:	1d08      	adds	r0, r1, #4
 801b7ba:	08c2      	lsrs	r2, r0, #3
 801b7bc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801b7c0:	f992 c000 	ldrsb.w	ip, [r2]
 801b7c4:	f000 0207 	and.w	r2, r0, #7
 801b7c8:	3203      	adds	r2, #3
 801b7ca:	4562      	cmp	r2, ip
 801b7cc:	db03      	blt.n	801b7d6 <cat_service+0x4bfe>
 801b7ce:	f1bc 0f00 	cmp.w	ip, #0
 801b7d2:	f043 83e4 	bne.w	801ef9e <cat_service+0x83c6>
 801b7d6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 801b7da:	684b      	ldr	r3, [r1, #4]
 801b7dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b7e0:	9307      	str	r3, [sp, #28]
                        self->cmd = get_command_by_index(self, self->index);
 801b7e2:	f7ee faa3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b7e6:	9b07      	ldr	r3, [sp, #28]
                        self->partial_cntr++;
 801b7e8:	f104 0010 	add.w	r0, r4, #16
                        self->cmd = get_command_by_index(self, self->index);
 801b7ec:	6263      	str	r3, [r4, #36]	; 0x24
                        self->partial_cntr++;
 801b7ee:	08c3      	lsrs	r3, r0, #3
 801b7f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b7f4:	f993 2000 	ldrsb.w	r2, [r3]
 801b7f8:	f000 0307 	and.w	r3, r0, #7
 801b7fc:	3303      	adds	r3, #3
 801b7fe:	4293      	cmp	r3, r2
 801b800:	db02      	blt.n	801b808 <cat_service+0x4c30>
 801b802:	2a00      	cmp	r2, #0
 801b804:	f044 81b2 	bne.w	801fb6c <cat_service+0x8f94>
 801b808:	6923      	ldr	r3, [r4, #16]
 801b80a:	3301      	adds	r3, #1
 801b80c:	6123      	str	r3, [r4, #16]
 801b80e:	f7fc bb5c 	b.w	8017eca <cat_service+0x12f2>
                self->cr_flag = true;
 801b812:	f7ee fa8b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b816:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 801b81a:	08c3      	lsrs	r3, r0, #3
 801b81c:	f000 0207 	and.w	r2, r0, #7
 801b820:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b824:	f993 3000 	ldrsb.w	r3, [r3]
 801b828:	429a      	cmp	r2, r3
 801b82a:	db02      	blt.n	801b832 <cat_service+0x4c5a>
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	f043 83ca 	bne.w	801efc6 <cat_service+0x83ee>
 801b832:	2001      	movs	r0, #1
        return CAT_STATUS_BUSY;
 801b834:	4605      	mov	r5, r0
                self->cr_flag = true;
 801b836:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
                break;
 801b83a:	f7fb bcc5 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801b83e:	f7ee fa75 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b842:	08e3      	lsrs	r3, r4, #3
 801b844:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b848:	f993 2000 	ldrsb.w	r2, [r3]
 801b84c:	f004 0307 	and.w	r3, r4, #7
 801b850:	3303      	adds	r3, #3
 801b852:	4293      	cmp	r3, r2
 801b854:	db02      	blt.n	801b85c <cat_service+0x4c84>
 801b856:	2a00      	cmp	r2, #0
 801b858:	f043 83b7 	bne.w	801efca <cat_service+0x83f2>
 801b85c:	6826      	ldr	r6, [r4, #0]
 801b85e:	f106 0008 	add.w	r0, r6, #8
 801b862:	08c3      	lsrs	r3, r0, #3
 801b864:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b868:	f993 2000 	ldrsb.w	r2, [r3]
 801b86c:	f000 0307 	and.w	r3, r0, #7
 801b870:	3303      	adds	r3, #3
 801b872:	4293      	cmp	r3, r2
 801b874:	db02      	blt.n	801b87c <cat_service+0x4ca4>
 801b876:	2a00      	cmp	r2, #0
 801b878:	f043 83aa 	bne.w	801efd0 <cat_service+0x83f8>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b87c:	f106 0010 	add.w	r0, r6, #16
        return (char*)self->desc->buf;
 801b880:	68b5      	ldr	r5, [r6, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b882:	08c3      	lsrs	r3, r0, #3
 801b884:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b888:	f993 2000 	ldrsb.w	r2, [r3]
 801b88c:	f000 0307 	and.w	r3, r0, #7
 801b890:	3303      	adds	r3, #3
 801b892:	4293      	cmp	r3, r2
 801b894:	db02      	blt.n	801b89c <cat_service+0x4cc4>
 801b896:	2a00      	cmp	r2, #0
 801b898:	f043 839c 	bne.w	801efd4 <cat_service+0x83fc>
 801b89c:	6933      	ldr	r3, [r6, #16]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	f001 83f0 	beq.w	801d084 <cat_service+0x64ac>
 801b8a4:	f7ee fa42 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b8a8:	f106 000c 	add.w	r0, r6, #12
 801b8ac:	08c3      	lsrs	r3, r0, #3
 801b8ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b8b2:	f993 2000 	ldrsb.w	r2, [r3]
 801b8b6:	f000 0307 	and.w	r3, r0, #7
 801b8ba:	3303      	adds	r3, #3
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	db02      	blt.n	801b8c6 <cat_service+0x4cee>
 801b8c0:	2a00      	cmp	r2, #0
 801b8c2:	f043 837a 	bne.w	801efba <cat_service+0x83e2>
 801b8c6:	68f2      	ldr	r2, [r6, #12]
 801b8c8:	9204      	str	r2, [sp, #16]
        memset(get_atcmd_buf(self), val, get_atcmd_buf_size(self));
 801b8ca:	f7ee fa2f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b8ce:	9a04      	ldr	r2, [sp, #16]
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	2155      	movs	r1, #85	; 0x55
 801b8d4:	f006 fac4 	bl	8021e60 <memset>
        self->index = 0;
 801b8d8:	f104 000c 	add.w	r0, r4, #12
 801b8dc:	08c3      	lsrs	r3, r0, #3
 801b8de:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b8e2:	f993 2000 	ldrsb.w	r2, [r3]
 801b8e6:	f000 0307 	and.w	r3, r0, #7
 801b8ea:	3303      	adds	r3, #3
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	db02      	blt.n	801b8f6 <cat_service+0x4d1e>
 801b8f0:	2a00      	cmp	r2, #0
 801b8f2:	f043 8364 	bne.w	801efbe <cat_service+0x83e6>
        self->length = 0;
 801b8f6:	f104 0014 	add.w	r0, r4, #20
        self->index = 0;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	60e3      	str	r3, [r4, #12]
        self->length = 0;
 801b8fe:	08c3      	lsrs	r3, r0, #3
 801b900:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b904:	f993 2000 	ldrsb.w	r2, [r3]
 801b908:	f000 0307 	and.w	r3, r0, #7
 801b90c:	3303      	adds	r3, #3
 801b90e:	4293      	cmp	r3, r2
 801b910:	db02      	blt.n	801b918 <cat_service+0x4d40>
 801b912:	2a00      	cmp	r2, #0
 801b914:	f043 8355 	bne.w	801efc2 <cat_service+0x83ea>
        self->cmd_type = CAT_CMD_TYPE_RUN;
 801b918:	f104 002c 	add.w	r0, r4, #44	; 0x2c
        self->length = 0;
 801b91c:	2300      	movs	r3, #0
 801b91e:	6163      	str	r3, [r4, #20]
        self->cmd_type = CAT_CMD_TYPE_RUN;
 801b920:	08c3      	lsrs	r3, r0, #3
 801b922:	f000 0207 	and.w	r2, r0, #7
 801b926:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b92a:	f993 3000 	ldrsb.w	r3, [r3]
 801b92e:	429a      	cmp	r2, r3
 801b930:	db02      	blt.n	801b938 <cat_service+0x4d60>
 801b932:	2b00      	cmp	r3, #0
 801b934:	f044 811c 	bne.w	801fb70 <cat_service+0x8f98>
 801b938:	2300      	movs	r3, #0
        return CAT_STATUS_BUSY;
 801b93a:	2501      	movs	r5, #1
        self->cmd_type = CAT_CMD_TYPE_RUN;
 801b93c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801b940:	2302      	movs	r3, #2
 801b942:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801b946:	f7fb bc3f 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801b94a:	f7ee f9ef 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b94e:	08e3      	lsrs	r3, r4, #3
 801b950:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b954:	f993 2000 	ldrsb.w	r2, [r3]
 801b958:	f004 0307 	and.w	r3, r4, #7
 801b95c:	3303      	adds	r3, #3
 801b95e:	4293      	cmp	r3, r2
 801b960:	db02      	blt.n	801b968 <cat_service+0x4d90>
 801b962:	2a00      	cmp	r2, #0
 801b964:	f043 86e5 	bne.w	801f732 <cat_service+0x8b5a>
 801b968:	6826      	ldr	r6, [r4, #0]
 801b96a:	f106 0008 	add.w	r0, r6, #8
 801b96e:	08c3      	lsrs	r3, r0, #3
 801b970:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b974:	f993 2000 	ldrsb.w	r2, [r3]
 801b978:	f000 0307 	and.w	r3, r0, #7
 801b97c:	3303      	adds	r3, #3
 801b97e:	4293      	cmp	r3, r2
 801b980:	db02      	blt.n	801b988 <cat_service+0x4db0>
 801b982:	2a00      	cmp	r2, #0
 801b984:	f043 86d8 	bne.w	801f738 <cat_service+0x8b60>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b988:	f106 0010 	add.w	r0, r6, #16
        return (char*)self->desc->buf;
 801b98c:	68b5      	ldr	r5, [r6, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801b98e:	08c3      	lsrs	r3, r0, #3
 801b990:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b994:	f993 2000 	ldrsb.w	r2, [r3]
 801b998:	f000 0307 	and.w	r3, r0, #7
 801b99c:	3303      	adds	r3, #3
 801b99e:	4293      	cmp	r3, r2
 801b9a0:	db02      	blt.n	801b9a8 <cat_service+0x4dd0>
 801b9a2:	2a00      	cmp	r2, #0
 801b9a4:	f043 86ca 	bne.w	801f73c <cat_service+0x8b64>
 801b9a8:	6933      	ldr	r3, [r6, #16]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	f001 837f 	beq.w	801d0ae <cat_service+0x64d6>
 801b9b0:	f7ee f9bc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b9b4:	f106 000c 	add.w	r0, r6, #12
 801b9b8:	08c3      	lsrs	r3, r0, #3
 801b9ba:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b9be:	f993 2000 	ldrsb.w	r2, [r3]
 801b9c2:	f000 0307 	and.w	r3, r0, #7
 801b9c6:	3303      	adds	r3, #3
 801b9c8:	4293      	cmp	r3, r2
 801b9ca:	db02      	blt.n	801b9d2 <cat_service+0x4dfa>
 801b9cc:	2a00      	cmp	r2, #0
 801b9ce:	f043 86b7 	bne.w	801f740 <cat_service+0x8b68>
 801b9d2:	68f2      	ldr	r2, [r6, #12]
 801b9d4:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801b9d6:	f7ee f9a9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801b9da:	9a04      	ldr	r2, [sp, #16]
 801b9dc:	4628      	mov	r0, r5
 801b9de:	4980      	ldr	r1, [pc, #512]	; (801bbe0 <cat_service+0x5008>)
 801b9e0:	f006 fff9 	bl	80229d6 <strncpy>
        self->position = 0;
 801b9e4:	f104 0018 	add.w	r0, r4, #24
 801b9e8:	08c3      	lsrs	r3, r0, #3
 801b9ea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801b9ee:	f993 2000 	ldrsb.w	r2, [r3]
 801b9f2:	f000 0307 	and.w	r3, r0, #7
 801b9f6:	3303      	adds	r3, #3
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	db02      	blt.n	801ba02 <cat_service+0x4e2a>
 801b9fc:	2a00      	cmp	r2, #0
 801b9fe:	f043 835f 	bne.w	801f0c0 <cat_service+0x84e8>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ba02:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801ba06:	2300      	movs	r3, #0
 801ba08:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ba0a:	08c3      	lsrs	r3, r0, #3
 801ba0c:	f000 0207 	and.w	r2, r0, #7
 801ba10:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ba14:	f993 3000 	ldrsb.w	r3, [r3]
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	db02      	blt.n	801ba22 <cat_service+0x4e4a>
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	f043 8635 	bne.w	801f68c <cat_service+0x8ab4>
        self->write_buf = get_new_line_chars(self);
 801ba22:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ba26:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801ba2a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801ba2e:	08c3      	lsrs	r3, r0, #3
 801ba30:	f000 0207 	and.w	r2, r0, #7
 801ba34:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ba38:	3203      	adds	r2, #3
 801ba3a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ba3e:	4b69      	ldr	r3, [pc, #420]	; (801bbe4 <cat_service+0x500c>)
        self->write_buf = get_new_line_chars(self);
 801ba40:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ba42:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801ba44:	db02      	blt.n	801ba4c <cat_service+0x4e74>
 801ba46:	2900      	cmp	r1, #0
 801ba48:	f043 8622 	bne.w	801f690 <cat_service+0x8ab8>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ba4c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801ba50:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ba52:	08c3      	lsrs	r3, r0, #3
 801ba54:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ba58:	f993 2000 	ldrsb.w	r2, [r3]
 801ba5c:	f000 0307 	and.w	r3, r0, #7
 801ba60:	3303      	adds	r3, #3
 801ba62:	4293      	cmp	r3, r2
 801ba64:	db02      	blt.n	801ba6c <cat_service+0x4e94>
 801ba66:	2a00      	cmp	r2, #0
 801ba68:	f043 86c1 	bne.w	801f7ee <cat_service+0x8c16>
        self->write_state_after = state_after;
 801ba6c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ba70:	2300      	movs	r3, #0
 801ba72:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801ba74:	08c3      	lsrs	r3, r0, #3
 801ba76:	f000 0207 	and.w	r2, r0, #7
 801ba7a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ba7e:	f993 3000 	ldrsb.w	r3, [r3]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	db02      	blt.n	801ba8c <cat_service+0x4eb4>
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	f043 86b3 	bne.w	801f7f2 <cat_service+0x8c1a>
 801ba8c:	2314      	movs	r3, #20
        return CAT_STATUS_BUSY;
 801ba8e:	2501      	movs	r5, #1
        self->write_state_after = state_after;
 801ba90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ba94:	2312      	movs	r3, #18
 801ba96:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801ba9a:	f7fb bb95 	b.w	80171c8 <cat_service+0x5f0>
 801ba9e:	4689      	mov	r9, r1
 801baa0:	f7fe bd1e 	b.w	801a4e0 <cat_service+0x3908>
 801baa4:	460d      	mov	r5, r1
 801baa6:	f7fe bcdc 	b.w	801a462 <cat_service+0x388a>
                        self->state = (self->current_char == '\n') ? CAT_STATE_COMMAND_NOT_FOUND : CAT_STATE_ERROR;
 801baaa:	f7ee f93f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801baae:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801bab2:	08c3      	lsrs	r3, r0, #3
 801bab4:	f000 0207 	and.w	r2, r0, #7
 801bab8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801babc:	f993 3000 	ldrsb.w	r3, [r3]
 801bac0:	429a      	cmp	r2, r3
 801bac2:	db02      	blt.n	801baca <cat_service+0x4ef2>
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	f043 858f 	bne.w	801f5e8 <cat_service+0x8a10>
 801baca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801bace:	2b0a      	cmp	r3, #10
 801bad0:	bf0c      	ite	eq
 801bad2:	2507      	moveq	r5, #7
 801bad4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801bad8:	f7ee f928 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801badc:	f006 0207 	and.w	r2, r6, #7
 801bae0:	08f3      	lsrs	r3, r6, #3
 801bae2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bae6:	f993 3000 	ldrsb.w	r3, [r3]
 801baea:	429a      	cmp	r2, r3
 801baec:	db02      	blt.n	801baf4 <cat_service+0x4f1c>
 801baee:	2b00      	cmp	r3, #0
 801baf0:	f043 857c 	bne.w	801f5ec <cat_service+0x8a14>
 801baf4:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
                s = search_command(self);
 801baf8:	2501      	movs	r5, #1
 801bafa:	f7fb bb65 	b.w	80171c8 <cat_service+0x5f0>
                if (self->length != 0) {
 801bafe:	f7ee f915 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bb02:	f104 0014 	add.w	r0, r4, #20
 801bb06:	08c3      	lsrs	r3, r0, #3
 801bb08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bb0c:	f993 2000 	ldrsb.w	r2, [r3]
 801bb10:	f000 0307 	and.w	r3, r0, #7
 801bb14:	3303      	adds	r3, #3
 801bb16:	4293      	cmp	r3, r2
 801bb18:	db02      	blt.n	801bb20 <cat_service+0x4f48>
 801bb1a:	2a00      	cmp	r2, #0
 801bb1c:	f043 8500 	bne.w	801f520 <cat_service+0x8948>
 801bb20:	6963      	ldr	r3, [r4, #20]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	f001 8481 	beq.w	801d42a <cat_service+0x6852>
        self->index = 0;
 801bb28:	f7ee f900 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bb2c:	f104 000c 	add.w	r0, r4, #12
 801bb30:	08c3      	lsrs	r3, r0, #3
 801bb32:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bb36:	f993 2000 	ldrsb.w	r2, [r3]
 801bb3a:	f000 0307 	and.w	r3, r0, #7
 801bb3e:	3303      	adds	r3, #3
 801bb40:	4293      	cmp	r3, r2
 801bb42:	db02      	blt.n	801bb4a <cat_service+0x4f72>
 801bb44:	2a00      	cmp	r2, #0
 801bb46:	f043 8309 	bne.w	801f15c <cat_service+0x8584>
        self->partial_cntr = 0;
 801bb4a:	f104 0010 	add.w	r0, r4, #16
        self->index = 0;
 801bb4e:	2300      	movs	r3, #0
 801bb50:	60e3      	str	r3, [r4, #12]
        self->partial_cntr = 0;
 801bb52:	08c3      	lsrs	r3, r0, #3
 801bb54:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bb58:	f993 2000 	ldrsb.w	r2, [r3]
 801bb5c:	f000 0307 	and.w	r3, r0, #7
 801bb60:	3303      	adds	r3, #3
 801bb62:	4293      	cmp	r3, r2
 801bb64:	db02      	blt.n	801bb6c <cat_service+0x4f94>
 801bb66:	2a00      	cmp	r2, #0
 801bb68:	f043 82f4 	bne.w	801f154 <cat_service+0x857c>
        self->cmd = NULL;
 801bb6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
        self->partial_cntr = 0;
 801bb70:	2300      	movs	r3, #0
 801bb72:	6123      	str	r3, [r4, #16]
        self->cmd = NULL;
 801bb74:	08c3      	lsrs	r3, r0, #3
 801bb76:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bb7a:	f993 2000 	ldrsb.w	r2, [r3]
 801bb7e:	f000 0307 	and.w	r3, r0, #7
 801bb82:	3303      	adds	r3, #3
 801bb84:	4293      	cmp	r3, r2
 801bb86:	db02      	blt.n	801bb8e <cat_service+0x4fb6>
 801bb88:	2a00      	cmp	r2, #0
 801bb8a:	f043 82e5 	bne.w	801f158 <cat_service+0x8580>
 801bb8e:	2300      	movs	r3, #0
        return CAT_STATUS_BUSY;
 801bb90:	2501      	movs	r5, #1
        self->cmd = NULL;
 801bb92:	6263      	str	r3, [r4, #36]	; 0x24
                        self->state = CAT_STATE_SEARCH_COMMAND;
 801bb94:	2305      	movs	r3, #5
 801bb96:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 801bb9a:	f7fb bb15 	b.w	80171c8 <cat_service+0x5f0>
                if (self->length == 0) {
 801bb9e:	f7ee f8c5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bba2:	f104 0014 	add.w	r0, r4, #20
 801bba6:	08c3      	lsrs	r3, r0, #3
 801bba8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bbac:	f993 2000 	ldrsb.w	r2, [r3]
 801bbb0:	f000 0307 	and.w	r3, r0, #7
 801bbb4:	3303      	adds	r3, #3
 801bbb6:	4293      	cmp	r3, r2
 801bbb8:	db02      	blt.n	801bbc0 <cat_service+0x4fe8>
 801bbba:	2a00      	cmp	r2, #0
 801bbbc:	f043 849b 	bne.w	801f4f6 <cat_service+0x891e>
 801bbc0:	6963      	ldr	r3, [r4, #20]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	f040 86bd 	bne.w	801c942 <cat_service+0x5d6a>
                        self->state = CAT_STATE_ERROR;
 801bbc8:	f7ee f8b0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bbcc:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 801bbce:	2501      	movs	r5, #1
                        self->state = CAT_STATE_ERROR;
 801bbd0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 801bbd4:	f7fb baf8 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->current_char) {
 801bbd8:	2501      	movs	r5, #1
 801bbda:	f7fb baf5 	b.w	80171c8 <cat_service+0x5f0>
 801bbde:	bf00      	nop
 801bbe0:	24009200 	.word	0x24009200
 801bbe4:	24009240 	.word	0x24009240
                ch = get_atcmd_buf(self)[self->position++];
 801bbe8:	46c1      	mov	r9, r8
 801bbea:	4635      	mov	r5, r6
 801bbec:	9608      	str	r6, [sp, #32]
 801bbee:	9705      	str	r7, [sp, #20]
 801bbf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801bbf2:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
 801bbf6:	f7ee f899 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bbfa:	464b      	mov	r3, r9
 801bbfc:	18e8      	adds	r0, r5, r3
 801bbfe:	3301      	adds	r3, #1
 801bc00:	61a3      	str	r3, [r4, #24]
 801bc02:	08c3      	lsrs	r3, r0, #3
 801bc04:	f000 0207 	and.w	r2, r0, #7
 801bc08:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bc0c:	f993 3000 	ldrsb.w	r3, [r3]
 801bc10:	429a      	cmp	r2, r3
 801bc12:	db02      	blt.n	801bc1a <cat_service+0x5042>
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	f043 86e2 	bne.w	801f9de <cat_service+0x8e06>
 801bc1a:	7805      	ldrb	r5, [r0, #0]
                        if ((ch == 0) || (ch == ',')) {
 801bc1c:	2d00      	cmp	r5, #0
 801bc1e:	f000 8193 	beq.w	801bf48 <cat_service+0x5370>
 801bc22:	f7ee f883 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bc26:	2d2c      	cmp	r5, #44	; 0x2c
 801bc28:	f000 818e 	beq.w	801bf48 <cat_service+0x5370>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801bc2c:	f7ee f87e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bc30:	9b05      	ldr	r3, [sp, #20]
 801bc32:	f103 0010 	add.w	r0, r3, #16
 801bc36:	08c3      	lsrs	r3, r0, #3
 801bc38:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bc3c:	f993 2000 	ldrsb.w	r2, [r3]
 801bc40:	f000 0307 	and.w	r3, r0, #7
 801bc44:	3303      	adds	r3, #3
 801bc46:	4293      	cmp	r3, r2
 801bc48:	db02      	blt.n	801bc50 <cat_service+0x5078>
 801bc4a:	2a00      	cmp	r2, #0
 801bc4c:	f043 8321 	bne.w	801f292 <cat_service+0x86ba>
 801bc50:	9d05      	ldr	r5, [sp, #20]
 801bc52:	692b      	ldr	r3, [r5, #16]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f003 8126 	beq.w	801eea6 <cat_service+0x82ce>
 801bc5a:	f7ee f867 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bc5e:	f105 000c 	add.w	r0, r5, #12
 801bc62:	08c3      	lsrs	r3, r0, #3
 801bc64:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bc68:	f993 2000 	ldrsb.w	r2, [r3]
 801bc6c:	f000 0307 	and.w	r3, r0, #7
 801bc70:	3303      	adds	r3, #3
 801bc72:	4293      	cmp	r3, r2
 801bc74:	db02      	blt.n	801bc7c <cat_service+0x50a4>
 801bc76:	2a00      	cmp	r2, #0
 801bc78:	f043 8504 	bne.w	801f684 <cat_service+0x8aac>
 801bc7c:	9b05      	ldr	r3, [sp, #20]
 801bc7e:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801bc80:	f7ee f854 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bc84:	462a      	mov	r2, r5
 801bc86:	9808      	ldr	r0, [sp, #32]
 801bc88:	49ad      	ldr	r1, [pc, #692]	; (801bf40 <cat_service+0x5368>)
 801bc8a:	f006 fea4 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bc8e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801bc92:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bc94:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801bc98:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bc9a:	08c3      	lsrs	r3, r0, #3
 801bc9c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bca0:	f993 3000 	ldrsb.w	r3, [r3]
 801bca4:	429a      	cmp	r2, r3
 801bca6:	db02      	blt.n	801bcae <cat_service+0x50d6>
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	f043 839a 	bne.w	801f3e2 <cat_service+0x880a>
        self->write_buf = get_new_line_chars(self);
 801bcae:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bcb2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801bcb6:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801bcba:	08c3      	lsrs	r3, r0, #3
 801bcbc:	f000 0207 	and.w	r2, r0, #7
 801bcc0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bcc4:	3203      	adds	r2, #3
 801bcc6:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bcca:	4b9e      	ldr	r3, [pc, #632]	; (801bf44 <cat_service+0x536c>)
        self->write_buf = get_new_line_chars(self);
 801bccc:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bcce:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801bcd0:	db02      	blt.n	801bcd8 <cat_service+0x5100>
 801bcd2:	2900      	cmp	r1, #0
 801bcd4:	f043 8387 	bne.w	801f3e6 <cat_service+0x880e>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801bcd8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801bcdc:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801bcde:	08c3      	lsrs	r3, r0, #3
 801bce0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bce4:	f993 2000 	ldrsb.w	r2, [r3]
 801bce8:	f000 0307 	and.w	r3, r0, #7
 801bcec:	3303      	adds	r3, #3
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	db02      	blt.n	801bcf8 <cat_service+0x5120>
 801bcf2:	2a00      	cmp	r2, #0
 801bcf4:	f043 8379 	bne.w	801f3ea <cat_service+0x8812>
        self->write_state_after = state_after;
 801bcf8:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801bd00:	08c3      	lsrs	r3, r0, #3
 801bd02:	f000 0207 	and.w	r2, r0, #7
 801bd06:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bd0a:	f993 3000 	ldrsb.w	r3, [r3]
 801bd0e:	429a      	cmp	r2, r3
 801bd10:	db02      	blt.n	801bd18 <cat_service+0x5140>
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	f043 836b 	bne.w	801f3ee <cat_service+0x8816>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bd18:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801bd1a:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bd1c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801bd20:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bd24:	f006 0207 	and.w	r2, r6, #7
 801bd28:	f993 3000 	ldrsb.w	r3, [r3]
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	db02      	blt.n	801bd36 <cat_service+0x515e>
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	f043 858b 	bne.w	801f84c <cat_service+0x8c74>
 801bd36:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801bd38:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bd3a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801bd3e:	f7fb ba43 	b.w	80171c8 <cat_service+0x5f0>
                start_processing_format_read_args(self, CAT_FSM_TYPE_ATCMD);
 801bd42:	f7ed fff3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bd46:	4649      	mov	r1, r9
 801bd48:	4620      	mov	r0, r4
 801bd4a:	f7f7 fa0f 	bl	801316c <start_processing_format_read_args>
                break;
 801bd4e:	f7fb ba3b 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801bd52:	f7ed ffeb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bd56:	f109 000c 	add.w	r0, r9, #12
 801bd5a:	08c3      	lsrs	r3, r0, #3
 801bd5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bd60:	f993 2000 	ldrsb.w	r2, [r3]
 801bd64:	f000 0307 	and.w	r3, r0, #7
 801bd68:	3303      	adds	r3, #3
 801bd6a:	4293      	cmp	r3, r2
 801bd6c:	db02      	blt.n	801bd74 <cat_service+0x519c>
 801bd6e:	2a00      	cmp	r2, #0
 801bd70:	f043 8736 	bne.w	801fbe0 <cat_service+0x9008>
 801bd74:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bd78:	0852      	lsrs	r2, r2, #1
 801bd7a:	f7fc ba52 	b.w	8018222 <cat_service+0x164a>
        switch (self->current_char) {
 801bd7e:	2501      	movs	r5, #1
 801bd80:	f7fb ba22 	b.w	80171c8 <cat_service+0x5f0>
                self->var = &self->cmd->var[self->index];
 801bd84:	f7ed ffd2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bd88:	f109 0018 	add.w	r0, r9, #24
 801bd8c:	08c3      	lsrs	r3, r0, #3
 801bd8e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bd92:	f993 2000 	ldrsb.w	r2, [r3]
 801bd96:	f000 0307 	and.w	r3, r0, #7
 801bd9a:	3303      	adds	r3, #3
 801bd9c:	4293      	cmp	r3, r2
 801bd9e:	db02      	blt.n	801bda6 <cat_service+0x51ce>
 801bda0:	2a00      	cmp	r2, #0
 801bda2:	f043 85c8 	bne.w	801f936 <cat_service+0x8d5e>
 801bda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bda8:	f103 52dc 	add.w	r2, r3, #461373440	; 0x1b800000
 801bdac:	9b04      	ldr	r3, [sp, #16]
 801bdae:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 801bdb2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801bdb6:	f992 2000 	ldrsb.w	r2, [r2]
 801bdba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bdbe:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bdc0:	3103      	adds	r1, #3
 801bdc2:	4291      	cmp	r1, r2
 801bdc4:	db02      	blt.n	801bdcc <cat_service+0x51f4>
 801bdc6:	2a00      	cmp	r2, #0
 801bdc8:	f043 85b7 	bne.w	801f93a <cat_service+0x8d62>
 801bdcc:	62a3      	str	r3, [r4, #40]	; 0x28
                return CAT_STATUS_BUSY;
 801bdce:	f7fb b9fb 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801bdd2:	f7ed ffab 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bdd6:	9b07      	ldr	r3, [sp, #28]
 801bdd8:	9a06      	ldr	r2, [sp, #24]
 801bdda:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bdde:	3203      	adds	r2, #3
 801bde0:	f993 3000 	ldrsb.w	r3, [r3]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	db02      	blt.n	801bdee <cat_service+0x5216>
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	f043 8246 	bne.w	801f27a <cat_service+0x86a2>
 801bdee:	6821      	ldr	r1, [r4, #0]
 801bdf0:	f101 0008 	add.w	r0, r1, #8
 801bdf4:	08c3      	lsrs	r3, r0, #3
 801bdf6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bdfa:	f993 2000 	ldrsb.w	r2, [r3]
 801bdfe:	f000 0307 	and.w	r3, r0, #7
 801be02:	3303      	adds	r3, #3
 801be04:	4293      	cmp	r3, r2
 801be06:	db02      	blt.n	801be0e <cat_service+0x5236>
 801be08:	2a00      	cmp	r2, #0
 801be0a:	f043 822c 	bne.w	801f266 <cat_service+0x868e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801be0e:	f101 0010 	add.w	r0, r1, #16
        return (char*)self->desc->buf;
 801be12:	f8d1 9008 	ldr.w	r9, [r1, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801be16:	08c3      	lsrs	r3, r0, #3
 801be18:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801be1c:	f993 2000 	ldrsb.w	r2, [r3]
 801be20:	f000 0307 	and.w	r3, r0, #7
 801be24:	3303      	adds	r3, #3
 801be26:	4293      	cmp	r3, r2
 801be28:	db02      	blt.n	801be30 <cat_service+0x5258>
 801be2a:	2a00      	cmp	r2, #0
 801be2c:	f043 821d 	bne.w	801f26a <cat_service+0x8692>
 801be30:	690b      	ldr	r3, [r1, #16]
 801be32:	9104      	str	r1, [sp, #16]
 801be34:	2b00      	cmp	r3, #0
 801be36:	f002 806b 	beq.w	801df10 <cat_service+0x7338>
 801be3a:	f7ed ff77 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801be3e:	9904      	ldr	r1, [sp, #16]
 801be40:	f101 000c 	add.w	r0, r1, #12
 801be44:	08c3      	lsrs	r3, r0, #3
 801be46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801be4a:	f993 2000 	ldrsb.w	r2, [r3]
 801be4e:	f000 0307 	and.w	r3, r0, #7
 801be52:	3303      	adds	r3, #3
 801be54:	4293      	cmp	r3, r2
 801be56:	db02      	blt.n	801be5e <cat_service+0x5286>
 801be58:	2a00      	cmp	r2, #0
 801be5a:	f043 8202 	bne.w	801f262 <cat_service+0x868a>
 801be5e:	68ca      	ldr	r2, [r1, #12]
 801be60:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801be62:	f7ed ff63 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801be66:	9a04      	ldr	r2, [sp, #16]
 801be68:	4648      	mov	r0, r9
 801be6a:	4935      	ldr	r1, [pc, #212]	; (801bf40 <cat_service+0x5368>)
 801be6c:	f006 fdb3 	bl	80229d6 <strncpy>
        self->position = 0;
 801be70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801be72:	08cb      	lsrs	r3, r1, #3
 801be74:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801be78:	f993 2000 	ldrsb.w	r2, [r3]
 801be7c:	f001 0307 	and.w	r3, r1, #7
 801be80:	3303      	adds	r3, #3
 801be82:	4293      	cmp	r3, r2
 801be84:	db02      	blt.n	801be8c <cat_service+0x52b4>
 801be86:	2a00      	cmp	r2, #0
 801be88:	f043 81fa 	bne.w	801f280 <cat_service+0x86a8>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801be8c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801be90:	2300      	movs	r3, #0
 801be92:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801be94:	08c3      	lsrs	r3, r0, #3
 801be96:	f000 0207 	and.w	r2, r0, #7
 801be9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801be9e:	f993 3000 	ldrsb.w	r3, [r3]
 801bea2:	429a      	cmp	r2, r3
 801bea4:	db02      	blt.n	801beac <cat_service+0x52d4>
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	f043 81ed 	bne.w	801f286 <cat_service+0x86ae>
        self->write_buf = get_new_line_chars(self);
 801beac:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801beb0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801beb4:	f083 0c01 	eor.w	ip, r3, #1
        self->write_buf = get_new_line_chars(self);
 801beb8:	08c3      	lsrs	r3, r0, #3
 801beba:	f000 0207 	and.w	r2, r0, #7
 801bebe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bec2:	3203      	adds	r2, #3
 801bec4:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801bec8:	4b1e      	ldr	r3, [pc, #120]	; (801bf44 <cat_service+0x536c>)
        self->write_buf = get_new_line_chars(self);
 801beca:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801becc:	4463      	add	r3, ip
        self->write_buf = get_new_line_chars(self);
 801bece:	db02      	blt.n	801bed6 <cat_service+0x52fe>
 801bed0:	2900      	cmp	r1, #0
 801bed2:	f043 81da 	bne.w	801f28a <cat_service+0x86b2>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801bed6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801beda:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801bedc:	08c3      	lsrs	r3, r0, #3
 801bede:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bee2:	f993 2000 	ldrsb.w	r2, [r3]
 801bee6:	f000 0307 	and.w	r3, r0, #7
 801beea:	3303      	adds	r3, #3
 801beec:	4293      	cmp	r3, r2
 801beee:	db02      	blt.n	801bef6 <cat_service+0x531e>
 801bef0:	2a00      	cmp	r2, #0
 801bef2:	f043 81cc 	bne.w	801f28e <cat_service+0x86b6>
        self->write_state_after = state_after;
 801bef6:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801befa:	2300      	movs	r3, #0
 801befc:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801befe:	08c3      	lsrs	r3, r0, #3
 801bf00:	f000 0207 	and.w	r2, r0, #7
 801bf04:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bf08:	f993 3000 	ldrsb.w	r3, [r3]
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	db02      	blt.n	801bf16 <cat_service+0x533e>
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	f043 844a 	bne.w	801f7aa <cat_service+0x8bd2>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bf16:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801bf18:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bf1a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801bf1e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801bf22:	f006 0207 	and.w	r2, r6, #7
 801bf26:	f993 3000 	ldrsb.w	r3, [r3]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	db02      	blt.n	801bf34 <cat_service+0x535c>
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	f043 843d 	bne.w	801f7ae <cat_service+0x8bd6>
 801bf34:	2312      	movs	r3, #18
 801bf36:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801bf3a:	f7fb b945 	b.w	80171c8 <cat_service+0x5f0>
 801bf3e:	bf00      	nop
 801bf40:	24009200 	.word	0x24009200
 801bf44:	24009240 	.word	0x24009240
                                if (size >= self->var->data_size)
 801bf48:	f7ed fef0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf50:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bf54:	3203      	adds	r2, #3
 801bf56:	f993 3000 	ldrsb.w	r3, [r3]
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	db02      	blt.n	801bf64 <cat_service+0x538c>
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	f043 8199 	bne.w	801f296 <cat_service+0x86be>
 801bf64:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 801bf68:	f109 000c 	add.w	r0, r9, #12
 801bf6c:	08c3      	lsrs	r3, r0, #3
 801bf6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bf72:	f993 2000 	ldrsb.w	r2, [r3]
 801bf76:	f000 0307 	and.w	r3, r0, #7
 801bf7a:	3303      	adds	r3, #3
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	db02      	blt.n	801bf86 <cat_service+0x53ae>
 801bf80:	2a00      	cmp	r2, #0
 801bf82:	f043 818b 	bne.w	801f29c <cat_service+0x86c4>
 801bf86:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801bf8a:	9a04      	ldr	r2, [sp, #16]
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	f4bf ae4d 	bcs.w	801bc2c <cat_service+0x5054>
                                if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801bf92:	f7ed fecb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bf96:	f109 0010 	add.w	r0, r9, #16
 801bf9a:	08c3      	lsrs	r3, r0, #3
 801bf9c:	f000 0207 	and.w	r2, r0, #7
 801bfa0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bfa4:	f993 3000 	ldrsb.w	r3, [r3]
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	db02      	blt.n	801bfb2 <cat_service+0x53da>
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	f043 8177 	bne.w	801f2a0 <cat_service+0x86c8>
 801bfb2:	f899 3010 	ldrb.w	r3, [r9, #16]
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	f002 856b 	beq.w	801ea92 <cat_service+0x7eba>
                                        ((uint8_t *)(self->var->data))[size] = 0;
 801bfbc:	f7ed feb6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801bfc0:	f109 0008 	add.w	r0, r9, #8
 801bfc4:	08c3      	lsrs	r3, r0, #3
 801bfc6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bfca:	f993 2000 	ldrsb.w	r2, [r3]
 801bfce:	f000 0307 	and.w	r3, r0, #7
 801bfd2:	3303      	adds	r3, #3
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	db02      	blt.n	801bfde <cat_service+0x5406>
 801bfd8:	2a00      	cmp	r2, #0
 801bfda:	f043 847c 	bne.w	801f8d6 <cat_service+0x8cfe>
 801bfde:	9b04      	ldr	r3, [sp, #16]
 801bfe0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801bfe4:	4418      	add	r0, r3
 801bfe6:	08c3      	lsrs	r3, r0, #3
 801bfe8:	f000 0207 	and.w	r2, r0, #7
 801bfec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801bff0:	f993 3000 	ldrsb.w	r3, [r3]
 801bff4:	429a      	cmp	r2, r3
 801bff6:	db02      	blt.n	801bffe <cat_service+0x5426>
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	f043 8467 	bne.w	801f8cc <cat_service+0x8cf4>
                                        self->write_size = size;
 801bffe:	f104 091c 	add.w	r9, r4, #28
                                        ((uint8_t *)(self->var->data))[size] = 0;
 801c002:	2300      	movs	r3, #0
 801c004:	7003      	strb	r3, [r0, #0]
                                        self->write_size = size;
 801c006:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801c00a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c00e:	f993 2000 	ldrsb.w	r2, [r3]
 801c012:	f009 0307 	and.w	r3, r9, #7
 801c016:	3303      	adds	r3, #3
 801c018:	4293      	cmp	r3, r2
 801c01a:	db02      	blt.n	801c022 <cat_service+0x544a>
 801c01c:	2a00      	cmp	r2, #0
 801c01e:	f043 8457 	bne.w	801f8d0 <cat_service+0x8cf8>
 801c022:	9b04      	ldr	r3, [sp, #16]
 801c024:	61e3      	str	r3, [r4, #28]
                stat = parse_buffer_string(self);
 801c026:	f1a5 052c 	sub.w	r5, r5, #44	; 0x2c
                                return (ch == ',') ? 1 : 0;
 801c02a:	f7ed fe7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
        if ((self->var->write != NULL) && (self->var->write(self->var, self->write_size) != 0)) {
 801c02e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                stat = parse_buffer_string(self);
 801c030:	fab5 f585 	clz	r5, r5
        if ((self->var->write != NULL) && (self->var->write(self->var, self->write_size) != 0)) {
 801c034:	9304      	str	r3, [sp, #16]
                stat = parse_buffer_string(self);
 801c036:	096d      	lsrs	r5, r5, #5
                if (stat < 0) {
 801c038:	f7fe baf0 	b.w	801a61c <cat_service+0x3a44>
        return (char*)self->desc->buf;
 801c03c:	f7ed fe76 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c040:	f109 0008 	add.w	r0, r9, #8
 801c044:	08c3      	lsrs	r3, r0, #3
 801c046:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c04a:	f993 2000 	ldrsb.w	r2, [r3]
 801c04e:	f000 0307 	and.w	r3, r0, #7
 801c052:	3303      	adds	r3, #3
 801c054:	4293      	cmp	r3, r2
 801c056:	db02      	blt.n	801c05e <cat_service+0x5486>
 801c058:	2a00      	cmp	r2, #0
 801c05a:	f043 804a 	bne.w	801f0f2 <cat_service+0x851a>
 801c05e:	f8d9 2008 	ldr.w	r2, [r9, #8]
                get_atcmd_buf(self)[self->length++] = self->current_char;
 801c062:	1c73      	adds	r3, r6, #1
 801c064:	1990      	adds	r0, r2, r6
 801c066:	6163      	str	r3, [r4, #20]
 801c068:	08c3      	lsrs	r3, r0, #3
 801c06a:	f000 0107 	and.w	r1, r0, #7
 801c06e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c072:	f993 3000 	ldrsb.w	r3, [r3]
 801c076:	4299      	cmp	r1, r3
 801c078:	db02      	blt.n	801c080 <cat_service+0x54a8>
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	f043 803b 	bne.w	801f0f6 <cat_service+0x851e>
 801c080:	5595      	strb	r5, [r2, r6]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c082:	6826      	ldr	r6, [r4, #0]
                if (self->length < get_atcmd_buf_size(self)) {
 801c084:	6965      	ldr	r5, [r4, #20]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c086:	f106 0010 	add.w	r0, r6, #16
 801c08a:	08c3      	lsrs	r3, r0, #3
 801c08c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c090:	f993 2000 	ldrsb.w	r2, [r3]
 801c094:	f000 0307 	and.w	r3, r0, #7
 801c098:	3303      	adds	r3, #3
 801c09a:	4293      	cmp	r3, r2
 801c09c:	db02      	blt.n	801c0a4 <cat_service+0x54cc>
 801c09e:	2a00      	cmp	r2, #0
 801c0a0:	f043 802b 	bne.w	801f0fa <cat_service+0x8522>
 801c0a4:	6933      	ldr	r3, [r6, #16]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	f002 8040 	beq.w	801e12c <cat_service+0x7554>
 801c0ac:	f7ed fe3e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c0b0:	f106 000c 	add.w	r0, r6, #12
 801c0b4:	08c3      	lsrs	r3, r0, #3
 801c0b6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c0ba:	f993 2000 	ldrsb.w	r2, [r3]
 801c0be:	f000 0307 	and.w	r3, r0, #7
 801c0c2:	3303      	adds	r3, #3
 801c0c4:	4293      	cmp	r3, r2
 801c0c6:	db02      	blt.n	801c0ce <cat_service+0x54f6>
 801c0c8:	2a00      	cmp	r2, #0
 801c0ca:	f043 8018 	bne.w	801f0fe <cat_service+0x8526>
 801c0ce:	f8d6 900c 	ldr.w	r9, [r6, #12]
                if (self->length < get_atcmd_buf_size(self)) {
 801c0d2:	f7ed fe2b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c0d6:	454d      	cmp	r5, r9
 801c0d8:	f080 87fe 	bcs.w	801d0d8 <cat_service+0x6500>
        return (char*)self->desc->buf;
 801c0dc:	f7ed fe26 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c0e0:	f106 0008 	add.w	r0, r6, #8
 801c0e4:	08c3      	lsrs	r3, r0, #3
 801c0e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c0ea:	f993 2000 	ldrsb.w	r2, [r3]
 801c0ee:	f000 0307 	and.w	r3, r0, #7
 801c0f2:	3303      	adds	r3, #3
 801c0f4:	4293      	cmp	r3, r2
 801c0f6:	db02      	blt.n	801c0fe <cat_service+0x5526>
 801c0f8:	2a00      	cmp	r2, #0
 801c0fa:	f043 8535 	bne.w	801fb68 <cat_service+0x8f90>
                        get_atcmd_buf(self)[self->length] = 0;
 801c0fe:	68b2      	ldr	r2, [r6, #8]
 801c100:	1950      	adds	r0, r2, r5
 801c102:	08c3      	lsrs	r3, r0, #3
 801c104:	f000 0107 	and.w	r1, r0, #7
 801c108:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c10c:	f993 3000 	ldrsb.w	r3, [r3]
 801c110:	4299      	cmp	r1, r3
 801c112:	db02      	blt.n	801c11a <cat_service+0x5542>
 801c114:	2b00      	cmp	r3, #0
 801c116:	f042 87c1 	bne.w	801f09c <cat_service+0x84c4>
 801c11a:	2300      	movs	r3, #0
 801c11c:	5553      	strb	r3, [r2, r5]
        return CAT_STATUS_BUSY;
 801c11e:	2501      	movs	r5, #1
 801c120:	f7fb b852 	b.w	80171c8 <cat_service+0x5f0>
 801c124:	9e05      	ldr	r6, [sp, #20]
                if (self->cmd->write == NULL) {
 801c126:	f7ed fe01 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c12a:	f106 0008 	add.w	r0, r6, #8
 801c12e:	08c3      	lsrs	r3, r0, #3
 801c130:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c134:	f993 2000 	ldrsb.w	r2, [r3]
 801c138:	f000 0307 	and.w	r3, r0, #7
 801c13c:	3303      	adds	r3, #3
 801c13e:	4293      	cmp	r3, r2
 801c140:	db02      	blt.n	801c148 <cat_service+0x5570>
 801c142:	2a00      	cmp	r2, #0
 801c144:	f042 87c0 	bne.w	801f0c8 <cat_service+0x84f0>
 801c148:	68b3      	ldr	r3, [r6, #8]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	f002 84bf 	beq.w	801eace <cat_service+0x7ef6>
                self->index = 0;
 801c150:	f7ed fdec 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c154:	f104 000c 	add.w	r0, r4, #12
 801c158:	08c3      	lsrs	r3, r0, #3
 801c15a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c15e:	f993 2000 	ldrsb.w	r2, [r3]
 801c162:	f000 0307 	and.w	r3, r0, #7
 801c166:	3303      	adds	r3, #3
 801c168:	4293      	cmp	r3, r2
 801c16a:	db02      	blt.n	801c172 <cat_service+0x559a>
 801c16c:	2a00      	cmp	r2, #0
 801c16e:	f042 87ad 	bne.w	801f0cc <cat_service+0x84f4>
 801c172:	2300      	movs	r3, #0
        return CAT_STATUS_BUSY;
 801c174:	2501      	movs	r5, #1
                self->index = 0;
 801c176:	60e3      	str	r3, [r4, #12]
                self->state = CAT_STATE_WRITE_LOOP;
 801c178:	230d      	movs	r3, #13
 801c17a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801c17e:	f7fb b823 	b.w	80171c8 <cat_service+0x5f0>
                        self->position = 0;
 801c182:	f7ed fdd3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c186:	61a5      	str	r5, [r4, #24]
        return (char*)self->desc->buf;
 801c188:	08e3      	lsrs	r3, r4, #3
 801c18a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c18e:	f993 2000 	ldrsb.w	r2, [r3]
 801c192:	f004 0307 	and.w	r3, r4, #7
 801c196:	3303      	adds	r3, #3
 801c198:	4293      	cmp	r3, r2
 801c19a:	db02      	blt.n	801c1a2 <cat_service+0x55ca>
 801c19c:	2a00      	cmp	r2, #0
 801c19e:	f043 8453 	bne.w	801fa48 <cat_service+0x8e70>
 801c1a2:	6822      	ldr	r2, [r4, #0]
 801c1a4:	f102 0008 	add.w	r0, r2, #8
 801c1a8:	08c3      	lsrs	r3, r0, #3
 801c1aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c1ae:	f993 1000 	ldrsb.w	r1, [r3]
 801c1b2:	f000 0307 	and.w	r3, r0, #7
 801c1b6:	3303      	adds	r3, #3
 801c1b8:	428b      	cmp	r3, r1
 801c1ba:	db02      	blt.n	801c1c2 <cat_service+0x55ea>
 801c1bc:	2900      	cmp	r1, #0
 801c1be:	f043 8446 	bne.w	801fa4e <cat_service+0x8e76>
                        self->write_buf = get_atcmd_buf(self);
 801c1c2:	6893      	ldr	r3, [r2, #8]
                        self->write_state = CAT_WRITE_STATE_MAIN_BUFFER;
 801c1c4:	2501      	movs	r5, #1
                        self->write_buf = get_atcmd_buf(self);
 801c1c6:	63a3      	str	r3, [r4, #56]	; 0x38
                        self->write_state = CAT_WRITE_STATE_MAIN_BUFFER;
 801c1c8:	63e5      	str	r5, [r4, #60]	; 0x3c
                        break;
 801c1ca:	f7fa bffd 	b.w	80171c8 <cat_service+0x5f0>
                        self->state = self->write_state_after;
 801c1ce:	f7ed fdad 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c1d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801c1d6:	08c3      	lsrs	r3, r0, #3
 801c1d8:	f000 0207 	and.w	r2, r0, #7
 801c1dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c1e0:	f993 3000 	ldrsb.w	r3, [r3]
 801c1e4:	429a      	cmp	r2, r3
 801c1e6:	db02      	blt.n	801c1ee <cat_service+0x5616>
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	f042 8774 	bne.w	801f0d6 <cat_service+0x84fe>
 801c1ee:	08f3      	lsrs	r3, r6, #3
 801c1f0:	f994 1040 	ldrsb.w	r1, [r4, #64]	; 0x40
 801c1f4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c1f8:	f993 2000 	ldrsb.w	r2, [r3]
 801c1fc:	f006 0307 	and.w	r3, r6, #7
 801c200:	4293      	cmp	r3, r2
 801c202:	db02      	blt.n	801c20a <cat_service+0x5632>
 801c204:	2a00      	cmp	r2, #0
 801c206:	f042 8763 	bne.w	801f0d0 <cat_service+0x84f8>
                s = process_io_write(self);
 801c20a:	2501      	movs	r5, #1
                        self->state = self->write_state_after;
 801c20c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
                        break;
 801c210:	f7fa bfda 	b.w	80171c8 <cat_service+0x5f0>
                        self->position = 0;
 801c214:	f7ed fd8a 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c218:	f104 002f 	add.w	r0, r4, #47	; 0x2f
                        self->position = 0;
 801c21c:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c21e:	f000 0207 	and.w	r2, r0, #7
                        self->position = 0;
 801c222:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c224:	08c3      	lsrs	r3, r0, #3
 801c226:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c22a:	f993 3000 	ldrsb.w	r3, [r3]
 801c22e:	429a      	cmp	r2, r3
 801c230:	db02      	blt.n	801c238 <cat_service+0x5660>
 801c232:	2b00      	cmp	r3, #0
 801c234:	f043 8141 	bne.w	801f4ba <cat_service+0x88e2>
 801c238:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
                s = process_io_write(self);
 801c23c:	2501      	movs	r5, #1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c23e:	f083 0201 	eor.w	r2, r3, #1
 801c242:	4b95      	ldr	r3, [pc, #596]	; (801c498 <cat_service+0x58c0>)
 801c244:	4413      	add	r3, r2
                        self->write_buf = get_new_line_chars(self);
 801c246:	63a3      	str	r3, [r4, #56]	; 0x38
                        self->write_state = CAT_WRITE_STATE_AFTER;
 801c248:	2302      	movs	r3, #2
 801c24a:	63e3      	str	r3, [r4, #60]	; 0x3c
                        break;
 801c24c:	f7fa bfbc 	b.w	80171c8 <cat_service+0x5f0>
                } else if (self->length == cmd_name_len) {
 801c250:	f7ed fd6c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c254:	9b08      	ldr	r3, [sp, #32]
 801c256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c258:	4293      	cmp	r3, r2
 801c25a:	f47b ade0 	bne.w	8017e1e <cat_service+0x1246>
        n = i >> 2;
 801c25e:	f7ed fd65 	bl	8009d2c <__sanitizer_cov_trace_pc>
        return (char*)self->desc->buf;
 801c262:	9b04      	ldr	r3, [sp, #16]
        k = ((i % 4) << 1);
 801c264:	006a      	lsls	r2, r5, #1
        return (char*)self->desc->buf;
 801c266:	f103 0008 	add.w	r0, r3, #8
        n = i >> 2;
 801c26a:	08ad      	lsrs	r5, r5, #2
        k = ((i % 4) << 1);
 801c26c:	f002 0206 	and.w	r2, r2, #6
        return (char*)self->desc->buf;
 801c270:	08c3      	lsrs	r3, r0, #3
 801c272:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c276:	f993 1000 	ldrsb.w	r1, [r3]
 801c27a:	f000 0307 	and.w	r3, r0, #7
 801c27e:	3303      	adds	r3, #3
 801c280:	428b      	cmp	r3, r1
 801c282:	db02      	blt.n	801c28a <cat_service+0x56b2>
 801c284:	2900      	cmp	r1, #0
 801c286:	f042 8728 	bne.w	801f0da <cat_service+0x8502>
        s = get_atcmd_buf(self)[n];
 801c28a:	9b04      	ldr	r3, [sp, #16]
 801c28c:	6899      	ldr	r1, [r3, #8]
 801c28e:	1948      	adds	r0, r1, r5
 801c290:	08c3      	lsrs	r3, r0, #3
 801c292:	f000 0c07 	and.w	ip, r0, #7
 801c296:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c29a:	f993 3000 	ldrsb.w	r3, [r3]
 801c29e:	459c      	cmp	ip, r3
 801c2a0:	db02      	blt.n	801c2a8 <cat_service+0x56d0>
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	f042 871b 	bne.w	801f0de <cat_service+0x8506>
        s &= ~(0x03 << k);
 801c2a8:	2303      	movs	r3, #3
 801c2aa:	fa03 f002 	lsl.w	r0, r3, r2
 801c2ae:	5d4b      	ldrb	r3, [r1, r5]
 801c2b0:	ea23 0300 	bic.w	r3, r3, r0
        s |= (state & 0x03) << k;
 801c2b4:	2002      	movs	r0, #2
 801c2b6:	fa00 f202 	lsl.w	r2, r0, r2
 801c2ba:	4313      	orrs	r3, r2
        if (++self->index >= self->commands_num) {
 801c2bc:	9a06      	ldr	r2, [sp, #24]
        get_atcmd_buf(self)[n] = s;
 801c2be:	554b      	strb	r3, [r1, r5]
        if (++self->index >= self->commands_num) {
 801c2c0:	3203      	adds	r2, #3
 801c2c2:	9b07      	ldr	r3, [sp, #28]
 801c2c4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c2c8:	f993 3000 	ldrsb.w	r3, [r3]
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	db02      	blt.n	801c2d6 <cat_service+0x56fe>
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	f043 80df 	bne.w	801f494 <cat_service+0x88bc>
 801c2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2d8:	68e5      	ldr	r5, [r4, #12]
 801c2da:	f103 52dc 	add.w	r2, r3, #461373440	; 0x1b800000
 801c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2e0:	f992 2000 	ldrsb.w	r2, [r2]
 801c2e4:	3303      	adds	r3, #3
 801c2e6:	4293      	cmp	r3, r2
 801c2e8:	f6fb ad97 	blt.w	8017e1a <cat_service+0x1242>
 801c2ec:	2a00      	cmp	r2, #0
 801c2ee:	f43b ad94 	beq.w	8017e1a <cat_service+0x1242>
 801c2f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c2f4:	f7ed f940 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801c2f8:	f7ed fd18 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c2fc:	08e3      	lsrs	r3, r4, #3
 801c2fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c302:	f993 2000 	ldrsb.w	r2, [r3]
 801c306:	f004 0307 	and.w	r3, r4, #7
 801c30a:	3303      	adds	r3, #3
 801c30c:	4293      	cmp	r3, r2
 801c30e:	db02      	blt.n	801c316 <cat_service+0x573e>
 801c310:	2a00      	cmp	r2, #0
 801c312:	f043 8005 	bne.w	801f320 <cat_service+0x8748>
 801c316:	f8d4 9000 	ldr.w	r9, [r4]
 801c31a:	f109 0008 	add.w	r0, r9, #8
 801c31e:	08c3      	lsrs	r3, r0, #3
 801c320:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c324:	f993 2000 	ldrsb.w	r2, [r3]
 801c328:	f000 0307 	and.w	r3, r0, #7
 801c32c:	3303      	adds	r3, #3
 801c32e:	4293      	cmp	r3, r2
 801c330:	db02      	blt.n	801c338 <cat_service+0x5760>
 801c332:	2a00      	cmp	r2, #0
 801c334:	f042 87f7 	bne.w	801f326 <cat_service+0x874e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c338:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801c33c:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c340:	08c3      	lsrs	r3, r0, #3
 801c342:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c346:	f993 2000 	ldrsb.w	r2, [r3]
 801c34a:	f000 0307 	and.w	r3, r0, #7
 801c34e:	3303      	adds	r3, #3
 801c350:	4293      	cmp	r3, r2
 801c352:	db02      	blt.n	801c35a <cat_service+0x5782>
 801c354:	2a00      	cmp	r2, #0
 801c356:	f042 87e8 	bne.w	801f32a <cat_service+0x8752>
 801c35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	f001 87ce 	beq.w	801e300 <cat_service+0x7728>
 801c364:	f7ed fce2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c368:	f109 000c 	add.w	r0, r9, #12
 801c36c:	08c3      	lsrs	r3, r0, #3
 801c36e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c372:	f993 2000 	ldrsb.w	r2, [r3]
 801c376:	f000 0307 	and.w	r3, r0, #7
 801c37a:	3303      	adds	r3, #3
 801c37c:	4293      	cmp	r3, r2
 801c37e:	db02      	blt.n	801c386 <cat_service+0x57ae>
 801c380:	2a00      	cmp	r2, #0
 801c382:	f042 87d4 	bne.w	801f32e <cat_service+0x8756>
 801c386:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c38a:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801c38c:	f7ed fcce 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c390:	9a04      	ldr	r2, [sp, #16]
 801c392:	4628      	mov	r0, r5
 801c394:	4941      	ldr	r1, [pc, #260]	; (801c49c <cat_service+0x58c4>)
 801c396:	f006 fb1e 	bl	80229d6 <strncpy>
        self->position = 0;
 801c39a:	f104 0018 	add.w	r0, r4, #24
 801c39e:	08c3      	lsrs	r3, r0, #3
 801c3a0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c3a4:	f993 2000 	ldrsb.w	r2, [r3]
 801c3a8:	f000 0307 	and.w	r3, r0, #7
 801c3ac:	3303      	adds	r3, #3
 801c3ae:	4293      	cmp	r3, r2
 801c3b0:	db02      	blt.n	801c3b8 <cat_service+0x57e0>
 801c3b2:	2a00      	cmp	r2, #0
 801c3b4:	f042 879b 	bne.w	801f2ee <cat_service+0x8716>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c3b8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801c3bc:	2300      	movs	r3, #0
 801c3be:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c3c0:	08c3      	lsrs	r3, r0, #3
 801c3c2:	f000 0207 	and.w	r2, r0, #7
 801c3c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c3ca:	f993 3000 	ldrsb.w	r3, [r3]
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	db02      	blt.n	801c3d8 <cat_service+0x5800>
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	f042 87a0 	bne.w	801f318 <cat_service+0x8740>
        self->write_buf = get_new_line_chars(self);
 801c3d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c3dc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801c3e0:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801c3e4:	08c3      	lsrs	r3, r0, #3
 801c3e6:	f000 0207 	and.w	r2, r0, #7
 801c3ea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c3ee:	3203      	adds	r2, #3
 801c3f0:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c3f4:	4b28      	ldr	r3, [pc, #160]	; (801c498 <cat_service+0x58c0>)
        self->write_buf = get_new_line_chars(self);
 801c3f6:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c3f8:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801c3fa:	db02      	blt.n	801c402 <cat_service+0x582a>
 801c3fc:	2900      	cmp	r1, #0
 801c3fe:	f042 878d 	bne.w	801f31c <cat_service+0x8744>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c402:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801c406:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c408:	08c3      	lsrs	r3, r0, #3
 801c40a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c40e:	f993 2000 	ldrsb.w	r2, [r3]
 801c412:	f000 0307 	and.w	r3, r0, #7
 801c416:	3303      	adds	r3, #3
 801c418:	4293      	cmp	r3, r2
 801c41a:	db02      	blt.n	801c422 <cat_service+0x584a>
 801c41c:	2a00      	cmp	r2, #0
 801c41e:	f042 876e 	bne.w	801f2fe <cat_service+0x8726>
        self->write_state_after = state_after;
 801c422:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c426:	2300      	movs	r3, #0
 801c428:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801c42a:	08c3      	lsrs	r3, r0, #3
 801c42c:	f000 0207 	and.w	r2, r0, #7
 801c430:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c434:	f993 3000 	ldrsb.w	r3, [r3]
 801c438:	429a      	cmp	r2, r3
 801c43a:	db02      	blt.n	801c442 <cat_service+0x586a>
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	f042 8760 	bne.w	801f302 <cat_service+0x872a>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c442:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801c444:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c446:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801c44a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c44e:	f006 0207 	and.w	r2, r6, #7
 801c452:	f993 3000 	ldrsb.w	r3, [r3]
 801c456:	429a      	cmp	r2, r3
 801c458:	db02      	blt.n	801c460 <cat_service+0x5888>
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	f043 8007 	bne.w	801f46e <cat_service+0x8896>
 801c460:	2312      	movs	r3, #18
                s = command_found(self);
 801c462:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c464:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801c468:	f7fa beae 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c46c:	f7ed fc5e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c470:	f109 000c 	add.w	r0, r9, #12
 801c474:	08c3      	lsrs	r3, r0, #3
 801c476:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c47a:	f993 2000 	ldrsb.w	r2, [r3]
 801c47e:	f000 0307 	and.w	r3, r0, #7
 801c482:	3303      	adds	r3, #3
 801c484:	4293      	cmp	r3, r2
 801c486:	db02      	blt.n	801c48e <cat_service+0x58b6>
 801c488:	2a00      	cmp	r2, #0
 801c48a:	f043 81be 	bne.w	801f80a <cat_service+0x8c32>
 801c48e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c492:	0852      	lsrs	r2, r2, #1
 801c494:	f7fe ba84 	b.w	801a9a0 <cat_service+0x3dc8>
 801c498:	24009240 	.word	0x24009240
 801c49c:	24009200 	.word	0x24009200
        return (char*)self->desc->buf;
 801c4a0:	f7ed fc44 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c4a4:	9b07      	ldr	r3, [sp, #28]
 801c4a6:	9a06      	ldr	r2, [sp, #24]
 801c4a8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c4ac:	3203      	adds	r2, #3
 801c4ae:	f993 3000 	ldrsb.w	r3, [r3]
 801c4b2:	429a      	cmp	r2, r3
 801c4b4:	db02      	blt.n	801c4bc <cat_service+0x58e4>
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	f042 8725 	bne.w	801f306 <cat_service+0x872e>
 801c4bc:	f8d4 9000 	ldr.w	r9, [r4]
 801c4c0:	f109 0008 	add.w	r0, r9, #8
 801c4c4:	08c3      	lsrs	r3, r0, #3
 801c4c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c4ca:	f993 2000 	ldrsb.w	r2, [r3]
 801c4ce:	f000 0307 	and.w	r3, r0, #7
 801c4d2:	3303      	adds	r3, #3
 801c4d4:	4293      	cmp	r3, r2
 801c4d6:	db02      	blt.n	801c4de <cat_service+0x5906>
 801c4d8:	2a00      	cmp	r2, #0
 801c4da:	f042 8717 	bne.w	801f30c <cat_service+0x8734>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c4de:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801c4e2:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c4e6:	08c3      	lsrs	r3, r0, #3
 801c4e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c4ec:	f993 2000 	ldrsb.w	r2, [r3]
 801c4f0:	f000 0307 	and.w	r3, r0, #7
 801c4f4:	3303      	adds	r3, #3
 801c4f6:	4293      	cmp	r3, r2
 801c4f8:	db02      	blt.n	801c500 <cat_service+0x5928>
 801c4fa:	2a00      	cmp	r2, #0
 801c4fc:	f042 86fb 	bne.w	801f2f6 <cat_service+0x871e>
 801c500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c504:	2b00      	cmp	r3, #0
 801c506:	f001 8711 	beq.w	801e32c <cat_service+0x7754>
 801c50a:	f7ed fc0f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c50e:	f109 000c 	add.w	r0, r9, #12
 801c512:	08c3      	lsrs	r3, r0, #3
 801c514:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c518:	f993 2000 	ldrsb.w	r2, [r3]
 801c51c:	f000 0307 	and.w	r3, r0, #7
 801c520:	3303      	adds	r3, #3
 801c522:	4293      	cmp	r3, r2
 801c524:	db02      	blt.n	801c52c <cat_service+0x5954>
 801c526:	2a00      	cmp	r2, #0
 801c528:	f042 86e7 	bne.w	801f2fa <cat_service+0x8722>
 801c52c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c530:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801c532:	f7ed fbfb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c536:	9a04      	ldr	r2, [sp, #16]
 801c538:	4628      	mov	r0, r5
 801c53a:	49b8      	ldr	r1, [pc, #736]	; (801c81c <cat_service+0x5c44>)
 801c53c:	f006 fa4b 	bl	80229d6 <strncpy>
        self->position = 0;
 801c540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c542:	08cb      	lsrs	r3, r1, #3
 801c544:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c548:	f993 2000 	ldrsb.w	r2, [r3]
 801c54c:	f001 0307 	and.w	r3, r1, #7
 801c550:	3303      	adds	r3, #3
 801c552:	4293      	cmp	r3, r2
 801c554:	db02      	blt.n	801c55c <cat_service+0x5984>
 801c556:	2a00      	cmp	r2, #0
 801c558:	f042 86a4 	bne.w	801f2a4 <cat_service+0x86cc>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c55c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801c560:	2300      	movs	r3, #0
 801c562:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c564:	08c3      	lsrs	r3, r0, #3
 801c566:	f000 0207 	and.w	r2, r0, #7
 801c56a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c56e:	f993 3000 	ldrsb.w	r3, [r3]
 801c572:	429a      	cmp	r2, r3
 801c574:	db02      	blt.n	801c57c <cat_service+0x59a4>
 801c576:	2b00      	cmp	r3, #0
 801c578:	f043 831c 	bne.w	801fbb4 <cat_service+0x8fdc>
        self->write_buf = get_new_line_chars(self);
 801c57c:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c580:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801c584:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801c588:	08c3      	lsrs	r3, r0, #3
 801c58a:	f000 0207 	and.w	r2, r0, #7
 801c58e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c592:	3203      	adds	r2, #3
 801c594:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c598:	4ba1      	ldr	r3, [pc, #644]	; (801c820 <cat_service+0x5c48>)
        self->write_buf = get_new_line_chars(self);
 801c59a:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c59c:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801c59e:	db02      	blt.n	801c5a6 <cat_service+0x59ce>
 801c5a0:	2900      	cmp	r1, #0
 801c5a2:	f043 8309 	bne.w	801fbb8 <cat_service+0x8fe0>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c5a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801c5aa:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c5ac:	08c3      	lsrs	r3, r0, #3
 801c5ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c5b2:	f993 2000 	ldrsb.w	r2, [r3]
 801c5b6:	f000 0307 	and.w	r3, r0, #7
 801c5ba:	3303      	adds	r3, #3
 801c5bc:	4293      	cmp	r3, r2
 801c5be:	db02      	blt.n	801c5c6 <cat_service+0x59ee>
 801c5c0:	2a00      	cmp	r2, #0
 801c5c2:	f043 82fb 	bne.w	801fbbc <cat_service+0x8fe4>
        self->write_state_after = state_after;
 801c5c6:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801c5ce:	08c3      	lsrs	r3, r0, #3
 801c5d0:	f000 0207 	and.w	r2, r0, #7
 801c5d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c5d8:	f993 3000 	ldrsb.w	r3, [r3]
 801c5dc:	429a      	cmp	r2, r3
 801c5de:	db02      	blt.n	801c5e6 <cat_service+0x5a0e>
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	f043 82ed 	bne.w	801fbc0 <cat_service+0x8fe8>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c5e6:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801c5e8:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c5ea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801c5ee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c5f2:	f006 0207 	and.w	r2, r6, #7
 801c5f6:	f993 3000 	ldrsb.w	r3, [r3]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	db02      	blt.n	801c604 <cat_service+0x5a2c>
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	f043 8007 	bne.w	801f612 <cat_service+0x8a3a>
 801c604:	2312      	movs	r3, #18
                return CAT_STATUS_BUSY;
 801c606:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c608:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801c60c:	f7fa bddc 	b.w	80171c8 <cat_service+0x5f0>
 801c610:	4630      	mov	r0, r6
 801c612:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801c616:	9709      	str	r7, [sp, #36]	; 0x24
 801c618:	4605      	mov	r5, r0
 801c61a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 801c61e:	f7fc bd96 	b.w	801914e <cat_service+0x2576>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c622:	f7ed fb83 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c626:	f109 000c 	add.w	r0, r9, #12
 801c62a:	08c3      	lsrs	r3, r0, #3
 801c62c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c630:	f993 2000 	ldrsb.w	r2, [r3]
 801c634:	f000 0307 	and.w	r3, r0, #7
 801c638:	3303      	adds	r3, #3
 801c63a:	4293      	cmp	r3, r2
 801c63c:	db02      	blt.n	801c644 <cat_service+0x5a6c>
 801c63e:	2a00      	cmp	r2, #0
 801c640:	f042 864a 	bne.w	801f2d8 <cat_service+0x8700>
 801c644:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c648:	0852      	lsrs	r2, r2, #1
 801c64a:	f7fb b9f1 	b.w	8017a30 <cat_service+0xe58>
                                size++;
 801c64e:	3401      	adds	r4, #1
                        byte = 0;
 801c650:	f04f 0800 	mov.w	r8, #0
                                size++;
 801c654:	f7ed fb6a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c658:	f7fc bc71 	b.w	8018f3e <cat_service+0x2366>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c65c:	f7ed fb66 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c660:	f109 000c 	add.w	r0, r9, #12
 801c664:	08c3      	lsrs	r3, r0, #3
 801c666:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c66a:	f993 2000 	ldrsb.w	r2, [r3]
 801c66e:	f000 0307 	and.w	r3, r0, #7
 801c672:	3303      	adds	r3, #3
 801c674:	4293      	cmp	r3, r2
 801c676:	db02      	blt.n	801c67e <cat_service+0x5aa6>
 801c678:	2a00      	cmp	r2, #0
 801c67a:	f043 801c 	bne.w	801f6b6 <cat_service+0x8ade>
 801c67e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c682:	0852      	lsrs	r2, r2, #1
 801c684:	f7fc b90f 	b.w	80188a6 <cat_service+0x1cce>
        return (char*)self->desc->buf;
 801c688:	f7ed fb50 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c68c:	08e3      	lsrs	r3, r4, #3
 801c68e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c692:	f993 2000 	ldrsb.w	r2, [r3]
 801c696:	f004 0307 	and.w	r3, r4, #7
 801c69a:	3303      	adds	r3, #3
 801c69c:	4293      	cmp	r3, r2
 801c69e:	db02      	blt.n	801c6a6 <cat_service+0x5ace>
 801c6a0:	2a00      	cmp	r2, #0
 801c6a2:	f042 861f 	bne.w	801f2e4 <cat_service+0x870c>
 801c6a6:	6826      	ldr	r6, [r4, #0]
 801c6a8:	f106 0008 	add.w	r0, r6, #8
 801c6ac:	08c3      	lsrs	r3, r0, #3
 801c6ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c6b2:	f993 2000 	ldrsb.w	r2, [r3]
 801c6b6:	f000 0307 	and.w	r3, r0, #7
 801c6ba:	3303      	adds	r3, #3
 801c6bc:	4293      	cmp	r3, r2
 801c6be:	db02      	blt.n	801c6c6 <cat_service+0x5aee>
 801c6c0:	2a00      	cmp	r2, #0
 801c6c2:	f042 8612 	bne.w	801f2ea <cat_service+0x8712>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c6c6:	f106 0010 	add.w	r0, r6, #16
        return (char*)self->desc->buf;
 801c6ca:	68b5      	ldr	r5, [r6, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c6cc:	08c3      	lsrs	r3, r0, #3
 801c6ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c6d2:	f993 2000 	ldrsb.w	r2, [r3]
 801c6d6:	f000 0307 	and.w	r3, r0, #7
 801c6da:	3303      	adds	r3, #3
 801c6dc:	4293      	cmp	r3, r2
 801c6de:	db02      	blt.n	801c6e6 <cat_service+0x5b0e>
 801c6e0:	2a00      	cmp	r2, #0
 801c6e2:	f043 8137 	bne.w	801f954 <cat_service+0x8d7c>
 801c6e6:	6933      	ldr	r3, [r6, #16]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f002 81b3 	beq.w	801ea54 <cat_service+0x7e7c>
 801c6ee:	f7ed fb1d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c6f2:	f106 000c 	add.w	r0, r6, #12
 801c6f6:	08c3      	lsrs	r3, r0, #3
 801c6f8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c6fc:	f993 2000 	ldrsb.w	r2, [r3]
 801c700:	f000 0307 	and.w	r3, r0, #7
 801c704:	3303      	adds	r3, #3
 801c706:	4293      	cmp	r3, r2
 801c708:	db02      	blt.n	801c710 <cat_service+0x5b38>
 801c70a:	2a00      	cmp	r2, #0
 801c70c:	f043 8124 	bne.w	801f958 <cat_service+0x8d80>
 801c710:	68f2      	ldr	r2, [r6, #12]
 801c712:	9204      	str	r2, [sp, #16]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801c714:	f7ed fb0a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c718:	9a04      	ldr	r2, [sp, #16]
 801c71a:	4628      	mov	r0, r5
 801c71c:	493f      	ldr	r1, [pc, #252]	; (801c81c <cat_service+0x5c44>)
 801c71e:	f006 f95a 	bl	80229d6 <strncpy>
        self->position = 0;
 801c722:	f104 0018 	add.w	r0, r4, #24
 801c726:	08c3      	lsrs	r3, r0, #3
 801c728:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c72c:	f993 2000 	ldrsb.w	r2, [r3]
 801c730:	f000 0307 	and.w	r3, r0, #7
 801c734:	3303      	adds	r3, #3
 801c736:	4293      	cmp	r3, r2
 801c738:	db02      	blt.n	801c740 <cat_service+0x5b68>
 801c73a:	2a00      	cmp	r2, #0
 801c73c:	f043 803a 	bne.w	801f7b4 <cat_service+0x8bdc>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c740:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801c744:	2300      	movs	r3, #0
 801c746:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c748:	08c3      	lsrs	r3, r0, #3
 801c74a:	f000 0207 	and.w	r2, r0, #7
 801c74e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c752:	f993 3000 	ldrsb.w	r3, [r3]
 801c756:	429a      	cmp	r2, r3
 801c758:	db02      	blt.n	801c760 <cat_service+0x5b88>
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	f043 80fe 	bne.w	801f95c <cat_service+0x8d84>
        self->write_buf = get_new_line_chars(self);
 801c760:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c764:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801c768:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801c76c:	08c3      	lsrs	r3, r0, #3
 801c76e:	f000 0207 	and.w	r2, r0, #7
 801c772:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c776:	3203      	adds	r2, #3
 801c778:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c77c:	4b28      	ldr	r3, [pc, #160]	; (801c820 <cat_service+0x5c48>)
        self->write_buf = get_new_line_chars(self);
 801c77e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c780:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801c782:	db02      	blt.n	801c78a <cat_service+0x5bb2>
 801c784:	2900      	cmp	r1, #0
 801c786:	f043 80eb 	bne.w	801f960 <cat_service+0x8d88>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c78a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801c78e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c790:	08c3      	lsrs	r3, r0, #3
 801c792:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c796:	f993 2000 	ldrsb.w	r2, [r3]
 801c79a:	f000 0307 	and.w	r3, r0, #7
 801c79e:	3303      	adds	r3, #3
 801c7a0:	4293      	cmp	r3, r2
 801c7a2:	db02      	blt.n	801c7aa <cat_service+0x5bd2>
 801c7a4:	2a00      	cmp	r2, #0
 801c7a6:	f043 80dd 	bne.w	801f964 <cat_service+0x8d8c>
        self->write_state_after = state_after;
 801c7aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801c7b2:	08c3      	lsrs	r3, r0, #3
 801c7b4:	f000 0207 	and.w	r2, r0, #7
 801c7b8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c7bc:	f993 3000 	ldrsb.w	r3, [r3]
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	db02      	blt.n	801c7ca <cat_service+0x5bf2>
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	f043 80cf 	bne.w	801f968 <cat_service+0x8d90>
 801c7ca:	2314      	movs	r3, #20
        return CAT_STATUS_BUSY;
 801c7cc:	2501      	movs	r5, #1
        self->write_state_after = state_after;
 801c7ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c7d2:	2312      	movs	r3, #18
 801c7d4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801c7d8:	f7fa bcf6 	b.w	80171c8 <cat_service+0x5f0>
                self->cmd_type = (self->cmd->only_test != false) ? CAT_CMD_TYPE_TEST : CAT_CMD_TYPE_RUN;
 801c7dc:	9104      	str	r1, [sp, #16]
 801c7de:	f7ed faa5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c7e2:	9904      	ldr	r1, [sp, #16]
 801c7e4:	f101 0021 	add.w	r0, r1, #33	; 0x21
 801c7e8:	08c3      	lsrs	r3, r0, #3
 801c7ea:	f000 0207 	and.w	r2, r0, #7
 801c7ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c7f2:	f993 3000 	ldrsb.w	r3, [r3]
 801c7f6:	429a      	cmp	r2, r3
 801c7f8:	db02      	blt.n	801c800 <cat_service+0x5c28>
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	f043 8149 	bne.w	801fa92 <cat_service+0x8eba>
 801c800:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
                s = CAT_STATUS_BUSY;
 801c804:	2501      	movs	r5, #1
                self->cmd_type = (self->cmd->only_test != false) ? CAT_CMD_TYPE_TEST : CAT_CMD_TYPE_RUN;
 801c806:	2b00      	cmp	r3, #0
 801c808:	bf14      	ite	ne
 801c80a:	2603      	movne	r6, #3
 801c80c:	2600      	moveq	r6, #0
 801c80e:	f7ed fa8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c812:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
                break;
 801c816:	f7fa bcd7 	b.w	80171c8 <cat_service+0x5f0>
 801c81a:	bf00      	nop
 801c81c:	24009200 	.word	0x24009200
 801c820:	24009240 	.word	0x24009240
 801c824:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
 801c828:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c82a:	f7ed fa7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c82e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c830:	f103 0010 	add.w	r0, r3, #16
 801c834:	08c3      	lsrs	r3, r0, #3
 801c836:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c83a:	f993 2000 	ldrsb.w	r2, [r3]
 801c83e:	f000 0307 	and.w	r3, r0, #7
 801c842:	3303      	adds	r3, #3
 801c844:	4293      	cmp	r3, r2
 801c846:	db02      	blt.n	801c84e <cat_service+0x5c76>
 801c848:	2a00      	cmp	r2, #0
 801c84a:	f042 84b6 	bne.w	801f1ba <cat_service+0x85e2>
 801c84e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c850:	691b      	ldr	r3, [r3, #16]
 801c852:	2b00      	cmp	r3, #0
 801c854:	f002 8143 	beq.w	801eade <cat_service+0x7f06>
 801c858:	f7ed fa68 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c85c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c85e:	f103 000c 	add.w	r0, r3, #12
 801c862:	08c3      	lsrs	r3, r0, #3
 801c864:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c868:	f993 2000 	ldrsb.w	r2, [r3]
 801c86c:	f000 0307 	and.w	r3, r0, #7
 801c870:	3303      	adds	r3, #3
 801c872:	4293      	cmp	r3, r2
 801c874:	db02      	blt.n	801c87c <cat_service+0x5ca4>
 801c876:	2a00      	cmp	r2, #0
 801c878:	f042 8489 	bne.w	801f18e <cat_service+0x85b6>
 801c87c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c87e:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801c880:	f7ed fa54 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c884:	462a      	mov	r2, r5
 801c886:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c888:	49c5      	ldr	r1, [pc, #788]	; (801cba0 <cat_service+0x5fc8>)
 801c88a:	f006 f8a4 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c88e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801c892:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c894:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801c898:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c89a:	08c3      	lsrs	r3, r0, #3
 801c89c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c8a0:	f993 3000 	ldrsb.w	r3, [r3]
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	db02      	blt.n	801c8ae <cat_service+0x5cd6>
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	f042 8472 	bne.w	801f192 <cat_service+0x85ba>
        self->write_buf = get_new_line_chars(self);
 801c8ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c8b2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801c8b6:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801c8ba:	08c3      	lsrs	r3, r0, #3
 801c8bc:	f000 0207 	and.w	r2, r0, #7
 801c8c0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c8c4:	3203      	adds	r2, #3
 801c8c6:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c8ca:	4bb6      	ldr	r3, [pc, #728]	; (801cba4 <cat_service+0x5fcc>)
        self->write_buf = get_new_line_chars(self);
 801c8cc:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801c8ce:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801c8d0:	db02      	blt.n	801c8d8 <cat_service+0x5d00>
 801c8d2:	2900      	cmp	r1, #0
 801c8d4:	f042 845f 	bne.w	801f196 <cat_service+0x85be>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c8d8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801c8dc:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c8de:	08c3      	lsrs	r3, r0, #3
 801c8e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c8e4:	f993 2000 	ldrsb.w	r2, [r3]
 801c8e8:	f000 0307 	and.w	r3, r0, #7
 801c8ec:	3303      	adds	r3, #3
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	db02      	blt.n	801c8f8 <cat_service+0x5d20>
 801c8f2:	2a00      	cmp	r2, #0
 801c8f4:	f042 8451 	bne.w	801f19a <cat_service+0x85c2>
        self->write_state_after = state_after;
 801c8f8:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801c900:	08c3      	lsrs	r3, r0, #3
 801c902:	f000 0207 	and.w	r2, r0, #7
 801c906:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c90a:	f993 3000 	ldrsb.w	r3, [r3]
 801c90e:	429a      	cmp	r2, r3
 801c910:	db02      	blt.n	801c918 <cat_service+0x5d40>
 801c912:	2b00      	cmp	r3, #0
 801c914:	f042 8443 	bne.w	801f19e <cat_service+0x85c6>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c918:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801c91a:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c91c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801c920:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c924:	f006 0207 	and.w	r2, r6, #7
 801c928:	f993 3000 	ldrsb.w	r3, [r3]
 801c92c:	429a      	cmp	r2, r3
 801c92e:	db02      	blt.n	801c936 <cat_service+0x5d5e>
 801c930:	2b00      	cmp	r3, #0
 801c932:	f042 86f4 	bne.w	801f71e <cat_service+0x8b46>
 801c936:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801c938:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801c93a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801c93e:	f7fa bc43 	b.w	80171c8 <cat_service+0x5f0>
                self->cmd_type = CAT_CMD_TYPE_WRITE;
 801c942:	f7ed f9f3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c946:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801c94a:	08c3      	lsrs	r3, r0, #3
 801c94c:	f000 0207 	and.w	r2, r0, #7
 801c950:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c954:	f993 3000 	ldrsb.w	r3, [r3]
 801c958:	429a      	cmp	r2, r3
 801c95a:	db02      	blt.n	801c962 <cat_service+0x5d8a>
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f042 8420 	bne.w	801f1a2 <cat_service+0x85ca>
        self->index = 0;
 801c962:	f104 000c 	add.w	r0, r4, #12
                self->cmd_type = CAT_CMD_TYPE_WRITE;
 801c966:	2302      	movs	r3, #2
 801c968:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        self->index = 0;
 801c96c:	08c3      	lsrs	r3, r0, #3
 801c96e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c972:	f993 2000 	ldrsb.w	r2, [r3]
 801c976:	f000 0307 	and.w	r3, r0, #7
 801c97a:	3303      	adds	r3, #3
 801c97c:	4293      	cmp	r3, r2
 801c97e:	db02      	blt.n	801c986 <cat_service+0x5dae>
 801c980:	2a00      	cmp	r2, #0
 801c982:	f042 8410 	bne.w	801f1a6 <cat_service+0x85ce>
        self->partial_cntr = 0;
 801c986:	f104 0010 	add.w	r0, r4, #16
        self->index = 0;
 801c98a:	2300      	movs	r3, #0
 801c98c:	60e3      	str	r3, [r4, #12]
        self->partial_cntr = 0;
 801c98e:	08c3      	lsrs	r3, r0, #3
 801c990:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c994:	f993 2000 	ldrsb.w	r2, [r3]
 801c998:	f000 0307 	and.w	r3, r0, #7
 801c99c:	3303      	adds	r3, #3
 801c99e:	4293      	cmp	r3, r2
 801c9a0:	db02      	blt.n	801c9a8 <cat_service+0x5dd0>
 801c9a2:	2a00      	cmp	r2, #0
 801c9a4:	f042 86a1 	bne.w	801f6ea <cat_service+0x8b12>
        self->cmd = NULL;
 801c9a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
        self->partial_cntr = 0;
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	6123      	str	r3, [r4, #16]
        self->cmd = NULL;
 801c9b0:	08c3      	lsrs	r3, r0, #3
 801c9b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c9b6:	f993 2000 	ldrsb.w	r2, [r3]
 801c9ba:	f000 0307 	and.w	r3, r0, #7
 801c9be:	3303      	adds	r3, #3
 801c9c0:	4293      	cmp	r3, r2
 801c9c2:	db02      	blt.n	801c9ca <cat_service+0x5df2>
 801c9c4:	2a00      	cmp	r2, #0
 801c9c6:	f042 8692 	bne.w	801f6ee <cat_service+0x8b16>
 801c9ca:	2300      	movs	r3, #0
        return CAT_STATUS_BUSY;
 801c9cc:	2501      	movs	r5, #1
        self->cmd = NULL;
 801c9ce:	6263      	str	r3, [r4, #36]	; 0x24
                self->state = CAT_STATE_SEARCH_COMMAND;
 801c9d0:	2305      	movs	r3, #5
 801c9d2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801c9d6:	f7fa bbf7 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801c9da:	f7ed f9a7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801c9de:	f106 000c 	add.w	r0, r6, #12
 801c9e2:	08c3      	lsrs	r3, r0, #3
 801c9e4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801c9e8:	f993 2000 	ldrsb.w	r2, [r3]
 801c9ec:	f000 0307 	and.w	r3, r0, #7
 801c9f0:	3303      	adds	r3, #3
 801c9f2:	4293      	cmp	r3, r2
 801c9f4:	db02      	blt.n	801c9fc <cat_service+0x5e24>
 801c9f6:	2a00      	cmp	r2, #0
 801c9f8:	f042 8601 	bne.w	801f5fe <cat_service+0x8a26>
 801c9fc:	68f2      	ldr	r2, [r6, #12]
 801c9fe:	0852      	lsrs	r2, r2, #1
 801ca00:	f7fe bd17 	b.w	801b432 <cat_service+0x485a>
        return (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || (ch == '+') || (ch == '#') || (ch == '$') || (ch == '@') || (ch == '_');
 801ca04:	f7ed f992 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca08:	f7ed f990 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca0c:	f7ed f98e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca10:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 801ca14:	2b1a      	cmp	r3, #26
 801ca16:	f200 8127 	bhi.w	801cc68 <cat_service+0x6090>
                        self->length++;
 801ca1a:	f7ed f987 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca1e:	f104 0014 	add.w	r0, r4, #20
 801ca22:	08c3      	lsrs	r3, r0, #3
 801ca24:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ca28:	f993 2000 	ldrsb.w	r2, [r3]
 801ca2c:	f000 0307 	and.w	r3, r0, #7
 801ca30:	3303      	adds	r3, #3
 801ca32:	4293      	cmp	r3, r2
 801ca34:	db02      	blt.n	801ca3c <cat_service+0x5e64>
 801ca36:	2a00      	cmp	r2, #0
 801ca38:	f042 86c5 	bne.w	801f7c6 <cat_service+0x8bee>
 801ca3c:	6963      	ldr	r3, [r4, #20]
        return CAT_STATUS_BUSY;
 801ca3e:	2501      	movs	r5, #1
                        self->length++;
 801ca40:	3301      	adds	r3, #1
 801ca42:	6163      	str	r3, [r4, #20]
                        self->state = CAT_STATE_UPDATE_COMMAND_STATE;
 801ca44:	2303      	movs	r3, #3
 801ca46:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        break;
 801ca4a:	f7fa bbbd 	b.w	80171c8 <cat_service+0x5f0>
                self->cmd_type = CAT_CMD_TYPE_READ;
 801ca4e:	f7ed f96d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca52:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801ca56:	08c3      	lsrs	r3, r0, #3
 801ca58:	f000 0207 	and.w	r2, r0, #7
 801ca5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ca60:	f993 3000 	ldrsb.w	r3, [r3]
 801ca64:	429a      	cmp	r2, r3
 801ca66:	db02      	blt.n	801ca6e <cat_service+0x5e96>
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	f042 82d1 	bne.w	801f010 <cat_service+0x8438>
 801ca6e:	2001      	movs	r0, #1
                self->state = CAT_STATE_WAIT_READ_ACKNOWLEDGE;
 801ca70:	2304      	movs	r3, #4
        return CAT_STATUS_BUSY;
 801ca72:	4605      	mov	r5, r0
                self->cmd_type = CAT_CMD_TYPE_READ;
 801ca74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                self->state = CAT_STATE_WAIT_READ_ACKNOWLEDGE;
 801ca78:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801ca7c:	f7fa bba4 	b.w	80171c8 <cat_service+0x5f0>
        if (cmd->var == NULL)
 801ca80:	f7ed f954 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ca84:	9904      	ldr	r1, [sp, #16]
 801ca86:	f101 0018 	add.w	r0, r1, #24
 801ca8a:	08c3      	lsrs	r3, r0, #3
 801ca8c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ca90:	f993 2000 	ldrsb.w	r2, [r3]
 801ca94:	f000 0307 	and.w	r3, r0, #7
 801ca98:	3303      	adds	r3, #3
 801ca9a:	4293      	cmp	r3, r2
 801ca9c:	db02      	blt.n	801caa4 <cat_service+0x5ecc>
 801ca9e:	2a00      	cmp	r2, #0
 801caa0:	f042 8693 	bne.w	801f7ca <cat_service+0x8bf2>
 801caa4:	f8d1 9018 	ldr.w	r9, [r1, #24]
 801caa8:	9104      	str	r1, [sp, #16]
 801caaa:	f1b9 0f00 	cmp.w	r9, #0
 801caae:	f43c ad92 	beq.w	80195d6 <cat_service+0x29fe>
        for (i = 0; i < cmd->var_num; i++) {
 801cab2:	f7ed f93b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cab6:	9904      	ldr	r1, [sp, #16]
 801cab8:	f101 001c 	add.w	r0, r1, #28
 801cabc:	08c3      	lsrs	r3, r0, #3
 801cabe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cac2:	f993 2000 	ldrsb.w	r2, [r3]
 801cac6:	f000 0307 	and.w	r3, r0, #7
 801caca:	3303      	adds	r3, #3
 801cacc:	4293      	cmp	r3, r2
 801cace:	db02      	blt.n	801cad6 <cat_service+0x5efe>
 801cad0:	2a00      	cmp	r2, #0
 801cad2:	f042 867c 	bne.w	801f7ce <cat_service+0x8bf6>
 801cad6:	69cb      	ldr	r3, [r1, #28]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	f43c ad7c 	beq.w	80195d6 <cat_service+0x29fe>
 801cade:	f109 0910 	add.w	r9, r9, #16
 801cae2:	2200      	movs	r2, #0
 801cae4:	f8cd 8010 	str.w	r8, [sp, #16]
 801cae8:	9505      	str	r5, [sp, #20]
 801caea:	4690      	mov	r8, r2
 801caec:	464d      	mov	r5, r9
 801caee:	46b1      	mov	r9, r6
 801caf0:	4626      	mov	r6, r4
 801caf2:	461c      	mov	r4, r3
 801caf4:	e007      	b.n	801cb06 <cat_service+0x5f2e>
 801caf6:	f108 0801 	add.w	r8, r8, #1
 801cafa:	f7ed f917 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cafe:	351c      	adds	r5, #28
 801cb00:	4544      	cmp	r4, r8
 801cb02:	f001 87dc 	beq.w	801eabe <cat_service+0x7ee6>
                var = &cmd->var[i];
 801cb06:	f7ed f911 	bl	8009d2c <__sanitizer_cov_trace_pc>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801cb0a:	f005 0107 	and.w	r1, r5, #7
 801cb0e:	08ea      	lsrs	r2, r5, #3
 801cb10:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801cb14:	f992 2000 	ldrsb.w	r2, [r2]
 801cb18:	4291      	cmp	r1, r2
 801cb1a:	db02      	blt.n	801cb22 <cat_service+0x5f4a>
 801cb1c:	2a00      	cmp	r2, #0
 801cb1e:	f042 86cb 	bne.w	801f8b8 <cat_service+0x8ce0>
 801cb22:	782a      	ldrb	r2, [r5, #0]
 801cb24:	2a01      	cmp	r2, #1
 801cb26:	d8e6      	bhi.n	801caf6 <cat_service+0x5f1e>
 801cb28:	4634      	mov	r4, r6
 801cb2a:	464e      	mov	r6, r9
 801cb2c:	e9dd 8504 	ldrd	r8, r5, [sp, #16]
 801cb30:	f7fc bcc6 	b.w	80194c0 <cat_service+0x28e8>
        if (cmd->var == NULL)
 801cb34:	f7ed f8fa 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cb38:	9904      	ldr	r1, [sp, #16]
 801cb3a:	f101 0018 	add.w	r0, r1, #24
 801cb3e:	08c3      	lsrs	r3, r0, #3
 801cb40:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cb44:	f993 2000 	ldrsb.w	r2, [r3]
 801cb48:	f000 0307 	and.w	r3, r0, #7
 801cb4c:	3303      	adds	r3, #3
 801cb4e:	4293      	cmp	r3, r2
 801cb50:	db02      	blt.n	801cb58 <cat_service+0x5f80>
 801cb52:	2a00      	cmp	r2, #0
 801cb54:	f042 8640 	bne.w	801f7d8 <cat_service+0x8c00>
 801cb58:	698d      	ldr	r5, [r1, #24]
 801cb5a:	9104      	str	r1, [sp, #16]
 801cb5c:	2d00      	cmp	r5, #0
 801cb5e:	f43c ae90 	beq.w	8019882 <cat_service+0x2caa>
        for (i = 0; i < cmd->var_num; i++) {
 801cb62:	f7ed f8e3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cb66:	9904      	ldr	r1, [sp, #16]
 801cb68:	f101 001c 	add.w	r0, r1, #28
 801cb6c:	08c3      	lsrs	r3, r0, #3
 801cb6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cb72:	f993 2000 	ldrsb.w	r2, [r3]
 801cb76:	f000 0307 	and.w	r3, r0, #7
 801cb7a:	3303      	adds	r3, #3
 801cb7c:	4293      	cmp	r3, r2
 801cb7e:	db02      	blt.n	801cb86 <cat_service+0x5fae>
 801cb80:	2a00      	cmp	r2, #0
 801cb82:	f042 862b 	bne.w	801f7dc <cat_service+0x8c04>
 801cb86:	69cb      	ldr	r3, [r1, #28]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	f43c ae7a 	beq.w	8019882 <cat_service+0x2caa>
 801cb8e:	f105 0910 	add.w	r9, r5, #16
 801cb92:	9404      	str	r4, [sp, #16]
 801cb94:	461c      	mov	r4, r3
 801cb96:	4633      	mov	r3, r6
 801cb98:	2500      	movs	r5, #0
 801cb9a:	464e      	mov	r6, r9
 801cb9c:	4699      	mov	r9, r3
 801cb9e:	e00a      	b.n	801cbb6 <cat_service+0x5fde>
 801cba0:	24009200 	.word	0x24009200
 801cba4:	24009240 	.word	0x24009240
 801cba8:	3501      	adds	r5, #1
 801cbaa:	f7ed f8bf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cbae:	361c      	adds	r6, #28
 801cbb0:	42a5      	cmp	r5, r4
 801cbb2:	f001 8789 	beq.w	801eac8 <cat_service+0x7ef0>
                var = &cmd->var[i];
 801cbb6:	f7ed f8b9 	bl	8009d2c <__sanitizer_cov_trace_pc>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801cbba:	f006 0107 	and.w	r1, r6, #7
 801cbbe:	08f2      	lsrs	r2, r6, #3
 801cbc0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801cbc4:	f992 2000 	ldrsb.w	r2, [r2]
 801cbc8:	4291      	cmp	r1, r2
 801cbca:	db02      	blt.n	801cbd2 <cat_service+0x5ffa>
 801cbcc:	2a00      	cmp	r2, #0
 801cbce:	f042 8607 	bne.w	801f7e0 <cat_service+0x8c08>
 801cbd2:	7832      	ldrb	r2, [r6, #0]
 801cbd4:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 801cbd8:	d1e6      	bne.n	801cba8 <cat_service+0x5fd0>
 801cbda:	9c04      	ldr	r4, [sp, #16]
 801cbdc:	464e      	mov	r6, r9
 801cbde:	f7fc bdc7 	b.w	8019770 <cat_service+0x2b98>
                if (self->cmd->test != NULL || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801cbe2:	f7ed f8a3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cbe6:	9904      	ldr	r1, [sp, #16]
 801cbe8:	f101 0018 	add.w	r0, r1, #24
 801cbec:	08c3      	lsrs	r3, r0, #3
 801cbee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cbf2:	f993 2000 	ldrsb.w	r2, [r3]
 801cbf6:	f000 0307 	and.w	r3, r0, #7
 801cbfa:	3303      	adds	r3, #3
 801cbfc:	4293      	cmp	r3, r2
 801cbfe:	db02      	blt.n	801cc06 <cat_service+0x602e>
 801cc00:	2a00      	cmp	r2, #0
 801cc02:	f042 8474 	bne.w	801f4ee <cat_service+0x8916>
 801cc06:	698b      	ldr	r3, [r1, #24]
 801cc08:	9104      	str	r1, [sp, #16]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	f43c ad8b 	beq.w	8019726 <cat_service+0x2b4e>
 801cc10:	f7ed f88c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc14:	9904      	ldr	r1, [sp, #16]
 801cc16:	f101 001c 	add.w	r0, r1, #28
 801cc1a:	08c3      	lsrs	r3, r0, #3
 801cc1c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cc20:	f993 2000 	ldrsb.w	r2, [r3]
 801cc24:	f000 0307 	and.w	r3, r0, #7
 801cc28:	3303      	adds	r3, #3
 801cc2a:	4293      	cmp	r3, r2
 801cc2c:	db02      	blt.n	801cc34 <cat_service+0x605c>
 801cc2e:	2a00      	cmp	r2, #0
 801cc30:	f042 845f 	bne.w	801f4f2 <cat_service+0x891a>
 801cc34:	69cb      	ldr	r3, [r1, #28]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	f43c ad75 	beq.w	8019726 <cat_service+0x2b4e>
 801cc3c:	f7fc bcea 	b.w	8019614 <cat_service+0x2a3c>
        return (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || (ch == '+') || (ch == '#') || (ch == '$') || (ch == '@') || (ch == '_');
 801cc40:	f1a5 0623 	sub.w	r6, r5, #35	; 0x23
 801cc44:	f7ed f872 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc48:	b2f6      	uxtb	r6, r6
 801cc4a:	2e16      	cmp	r6, #22
 801cc4c:	f63f aedc 	bhi.w	801ca08 <cat_service+0x5e30>
 801cc50:	f7ed f86c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc54:	f7ed f86a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc58:	4bae      	ldr	r3, [pc, #696]	; (801cf14 <cat_service+0x633c>)
 801cc5a:	fa23 f606 	lsr.w	r6, r3, r6
 801cc5e:	07f3      	lsls	r3, r6, #31
 801cc60:	f53f aedb 	bmi.w	801ca1a <cat_service+0x5e42>
 801cc64:	f7ed f862 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc68:	f7ed f860 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc6c:	2d5f      	cmp	r5, #95	; 0x5f
 801cc6e:	f43f aed4 	beq.w	801ca1a <cat_service+0x5e42>
                self->state = CAT_STATE_ERROR;
 801cc72:	f7ed f85b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc76:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 801cc78:	2501      	movs	r5, #1
                self->state = CAT_STATE_ERROR;
 801cc7a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                break;
 801cc7e:	f7fa baa3 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801cc82:	f7ed f853 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cc86:	f109 000c 	add.w	r0, r9, #12
 801cc8a:	08c3      	lsrs	r3, r0, #3
 801cc8c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cc90:	f993 2000 	ldrsb.w	r2, [r3]
 801cc94:	f000 0307 	and.w	r3, r0, #7
 801cc98:	3303      	adds	r3, #3
 801cc9a:	4293      	cmp	r3, r2
 801cc9c:	db02      	blt.n	801cca4 <cat_service+0x60cc>
 801cc9e:	2a00      	cmp	r2, #0
 801cca0:	f042 8678 	bne.w	801f994 <cat_service+0x8dbc>
 801cca4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801cca8:	0852      	lsrs	r2, r2, #1
 801ccaa:	f7fb beb9 	b.w	8018a20 <cat_service+0x1e48>
 801ccae:	f7ed f83d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ccb2:	f109 000c 	add.w	r0, r9, #12
 801ccb6:	08c3      	lsrs	r3, r0, #3
 801ccb8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ccbc:	f993 2000 	ldrsb.w	r2, [r3]
 801ccc0:	f000 0307 	and.w	r3, r0, #7
 801ccc4:	3303      	adds	r3, #3
 801ccc6:	4293      	cmp	r3, r2
 801ccc8:	db02      	blt.n	801ccd0 <cat_service+0x60f8>
 801ccca:	2a00      	cmp	r2, #0
 801cccc:	f042 827b 	bne.w	801f1c6 <cat_service+0x85ee>
 801ccd0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ccd4:	0852      	lsrs	r2, r2, #1
 801ccd6:	f7fc bf50 	b.w	8019b7a <cat_service+0x2fa2>
 801ccda:	2100      	movs	r1, #0
                                sign = -1;
 801ccdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cce0:	4689      	mov	r9, r1
 801cce2:	9311      	str	r3, [sp, #68]	; 0x44
 801cce4:	9312      	str	r3, [sp, #72]	; 0x48
 801cce6:	9108      	str	r1, [sp, #32]
 801cce8:	f7fc bb56 	b.w	8019398 <cat_service+0x27c0>
                s = process_io_write_wait(self);
 801ccec:	2501      	movs	r5, #1
        if ((unsolicited_stat != CAT_STATUS_OK) || (is_unsolicited_fsm_busy(self) != false)) {
 801ccee:	f7ed f81d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ccf2:	f7fa ba6d 	b.w	80171d0 <cat_service+0x5f8>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801ccf6:	f7ed f819 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ccfa:	f105 0008 	add.w	r0, r5, #8
 801ccfe:	08c3      	lsrs	r3, r0, #3
 801cd00:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cd04:	f993 2000 	ldrsb.w	r2, [r3]
 801cd08:	f000 0307 	and.w	r3, r0, #7
 801cd0c:	3303      	adds	r3, #3
 801cd0e:	4293      	cmp	r3, r2
 801cd10:	db02      	blt.n	801cd18 <cat_service+0x6140>
 801cd12:	2a00      	cmp	r2, #0
 801cd14:	f042 8255 	bne.w	801f1c2 <cat_service+0x85ea>
 801cd18:	f105 000c 	add.w	r0, r5, #12
 801cd1c:	68ae      	ldr	r6, [r5, #8]
 801cd1e:	08c3      	lsrs	r3, r0, #3
 801cd20:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cd24:	f993 2000 	ldrsb.w	r2, [r3]
 801cd28:	f000 0307 	and.w	r3, r0, #7
 801cd2c:	3303      	adds	r3, #3
 801cd2e:	4293      	cmp	r3, r2
 801cd30:	db02      	blt.n	801cd38 <cat_service+0x6160>
 801cd32:	2a00      	cmp	r2, #0
 801cd34:	f042 848a 	bne.w	801f64c <cat_service+0x8a74>
 801cd38:	68eb      	ldr	r3, [r5, #12]
 801cd3a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 801cd3e:	f7fe bc78 	b.w	801b632 <cat_service+0x4a5a>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801cd42:	f7ec fff3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cd46:	f109 000c 	add.w	r0, r9, #12
 801cd4a:	08c3      	lsrs	r3, r0, #3
 801cd4c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cd50:	f993 2000 	ldrsb.w	r2, [r3]
 801cd54:	f000 0307 	and.w	r3, r0, #7
 801cd58:	3303      	adds	r3, #3
 801cd5a:	4293      	cmp	r3, r2
 801cd5c:	db02      	blt.n	801cd64 <cat_service+0x618c>
 801cd5e:	2a00      	cmp	r2, #0
 801cd60:	f042 850b 	bne.w	801f77a <cat_service+0x8ba2>
 801cd64:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cd68:	085b      	lsrs	r3, r3, #1
 801cd6a:	9304      	str	r3, [sp, #16]
 801cd6c:	f7fa bde8 	b.w	8017940 <cat_service+0xd68>
        return NULL;
 801cd70:	4629      	mov	r1, r5
 801cd72:	f7fb bc9b 	b.w	80186ac <cat_service+0x1ad4>
 801cd76:	9708      	str	r7, [sp, #32]
 801cd78:	2501      	movs	r5, #1
 801cd7a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801cd7e:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
                        val *= sign;
 801cd82:	f7ec ffd3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cd86:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cd88:	9b08      	ldr	r3, [sp, #32]
 801cd8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd8c:	fb01 f303 	mul.w	r3, r1, r3
 801cd90:	fb09 3202 	mla	r2, r9, r2, r3
 801cd94:	fba1 9309 	umull	r9, r3, r1, r9
 801cd98:	18d3      	adds	r3, r2, r3
 801cd9a:	9305      	str	r3, [sp, #20]
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801cd9c:	9b04      	ldr	r3, [sp, #16]
 801cd9e:	f103 0010 	add.w	r0, r3, #16
 801cda2:	08c3      	lsrs	r3, r0, #3
 801cda4:	f000 0207 	and.w	r2, r0, #7
 801cda8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cdac:	f993 3000 	ldrsb.w	r3, [r3]
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	db02      	blt.n	801cdba <cat_service+0x61e2>
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	f042 80fe 	bne.w	801efb6 <cat_service+0x83de>
 801cdba:	9b04      	ldr	r3, [sp, #16]
 801cdbc:	7c1b      	ldrb	r3, [r3, #16]
 801cdbe:	2b01      	cmp	r3, #1
 801cdc0:	f001 85b0 	beq.w	801e924 <cat_service+0x7d4c>
        switch (self->var->data_size) {
 801cdc4:	f7ec ffb2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cdc8:	9b04      	ldr	r3, [sp, #16]
 801cdca:	f103 000c 	add.w	r0, r3, #12
 801cdce:	08c3      	lsrs	r3, r0, #3
 801cdd0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cdd4:	f993 2000 	ldrsb.w	r2, [r3]
 801cdd8:	f000 0307 	and.w	r3, r0, #7
 801cddc:	3303      	adds	r3, #3
 801cdde:	4293      	cmp	r3, r2
 801cde0:	db02      	blt.n	801cde8 <cat_service+0x6210>
 801cde2:	2a00      	cmp	r2, #0
 801cde4:	f042 8491 	bne.w	801f70a <cat_service+0x8b32>
 801cde8:	9b04      	ldr	r3, [sp, #16]
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	2b02      	cmp	r3, #2
 801cdee:	f001 834d 	beq.w	801e48c <cat_service+0x78b4>
 801cdf2:	2b04      	cmp	r3, #4
 801cdf4:	f001 831c 	beq.w	801e430 <cat_service+0x7858>
 801cdf8:	2b01      	cmp	r3, #1
 801cdfa:	f001 82b3 	beq.w	801e364 <cat_service+0x778c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801cdfe:	f7ec ff95 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ce02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ce04:	f103 0010 	add.w	r0, r3, #16
 801ce08:	08c3      	lsrs	r3, r0, #3
 801ce0a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ce0e:	f993 2000 	ldrsb.w	r2, [r3]
 801ce12:	f000 0307 	and.w	r3, r0, #7
 801ce16:	3303      	adds	r3, #3
 801ce18:	4293      	cmp	r3, r2
 801ce1a:	db02      	blt.n	801ce22 <cat_service+0x624a>
 801ce1c:	2a00      	cmp	r2, #0
 801ce1e:	f042 8292 	bne.w	801f346 <cat_service+0x876e>
 801ce22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ce24:	692b      	ldr	r3, [r5, #16]
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	f001 87b3 	beq.w	801ed92 <cat_service+0x81ba>
 801ce2c:	f7ec ff7e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ce30:	f105 000c 	add.w	r0, r5, #12
 801ce34:	08c3      	lsrs	r3, r0, #3
 801ce36:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ce3a:	f993 2000 	ldrsb.w	r2, [r3]
 801ce3e:	f000 0307 	and.w	r3, r0, #7
 801ce42:	3303      	adds	r3, #3
 801ce44:	4293      	cmp	r3, r2
 801ce46:	db02      	blt.n	801ce4e <cat_service+0x6276>
 801ce48:	2a00      	cmp	r2, #0
 801ce4a:	f042 8274 	bne.w	801f336 <cat_service+0x875e>
 801ce4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ce50:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801ce52:	f7ec ff6b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ce56:	462a      	mov	r2, r5
 801ce58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce5a:	492f      	ldr	r1, [pc, #188]	; (801cf18 <cat_service+0x6340>)
 801ce5c:	f005 fdbb 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ce60:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801ce64:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ce66:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801ce6a:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ce6c:	08c3      	lsrs	r3, r0, #3
 801ce6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ce72:	f993 3000 	ldrsb.w	r3, [r3]
 801ce76:	429a      	cmp	r2, r3
 801ce78:	db02      	blt.n	801ce80 <cat_service+0x62a8>
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	f042 825d 	bne.w	801f33a <cat_service+0x8762>
        self->write_buf = get_new_line_chars(self);
 801ce80:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ce84:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801ce88:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801ce8c:	08c3      	lsrs	r3, r0, #3
 801ce8e:	f000 0207 	and.w	r2, r0, #7
 801ce92:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ce96:	3203      	adds	r2, #3
 801ce98:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ce9c:	4b1f      	ldr	r3, [pc, #124]	; (801cf1c <cat_service+0x6344>)
        self->write_buf = get_new_line_chars(self);
 801ce9e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801cea0:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801cea2:	db02      	blt.n	801ceaa <cat_service+0x62d2>
 801cea4:	2900      	cmp	r1, #0
 801cea6:	f042 824a 	bne.w	801f33e <cat_service+0x8766>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ceaa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801ceae:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ceb0:	08c3      	lsrs	r3, r0, #3
 801ceb2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ceb6:	f993 2000 	ldrsb.w	r2, [r3]
 801ceba:	f000 0307 	and.w	r3, r0, #7
 801cebe:	3303      	adds	r3, #3
 801cec0:	4293      	cmp	r3, r2
 801cec2:	db02      	blt.n	801ceca <cat_service+0x62f2>
 801cec4:	2a00      	cmp	r2, #0
 801cec6:	f042 8135 	bne.w	801f134 <cat_service+0x855c>
        self->write_state_after = state_after;
 801ceca:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801cece:	2300      	movs	r3, #0
 801ced0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801ced2:	08c3      	lsrs	r3, r0, #3
 801ced4:	f000 0207 	and.w	r2, r0, #7
 801ced8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cedc:	f993 3000 	ldrsb.w	r3, [r3]
 801cee0:	429a      	cmp	r2, r3
 801cee2:	db02      	blt.n	801ceea <cat_service+0x6312>
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	f042 8127 	bne.w	801f138 <cat_service+0x8560>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ceea:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801ceec:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ceee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801cef2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801cef6:	f006 0207 	and.w	r2, r6, #7
 801cefa:	f993 3000 	ldrsb.w	r3, [r3]
 801cefe:	429a      	cmp	r2, r3
 801cf00:	db02      	blt.n	801cf08 <cat_service+0x6330>
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	f042 8151 	bne.w	801f1aa <cat_service+0x85d2>
 801cf08:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801cf0a:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801cf0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801cf10:	f7fa b95a 	b.w	80171c8 <cat_service+0x5f0>
 801cf14:	007fe103 	.word	0x007fe103
 801cf18:	24009200 	.word	0x24009200
 801cf1c:	24009240 	.word	0x24009240
        return (char*)self->desc->buf;
 801cf20:	f7ec ff04 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cf24:	f109 0008 	add.w	r0, r9, #8
 801cf28:	08c3      	lsrs	r3, r0, #3
 801cf2a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cf2e:	f993 2000 	ldrsb.w	r2, [r3]
 801cf32:	f000 0307 	and.w	r3, r0, #7
 801cf36:	3303      	adds	r3, #3
 801cf38:	4293      	cmp	r3, r2
 801cf3a:	db02      	blt.n	801cf42 <cat_service+0x636a>
 801cf3c:	2a00      	cmp	r2, #0
 801cf3e:	f042 80fd 	bne.w	801f13c <cat_service+0x8564>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801cf42:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801cf46:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801cf4a:	08c3      	lsrs	r3, r0, #3
 801cf4c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cf50:	f993 2000 	ldrsb.w	r2, [r3]
 801cf54:	f000 0307 	and.w	r3, r0, #7
 801cf58:	3303      	adds	r3, #3
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	db02      	blt.n	801cf64 <cat_service+0x638c>
 801cf5e:	2a00      	cmp	r2, #0
 801cf60:	f042 80ee 	bne.w	801f140 <cat_service+0x8568>
 801cf64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	f001 85e4 	beq.w	801eb36 <cat_service+0x7f5e>
 801cf6e:	f7ec fedd 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cf72:	f109 000c 	add.w	r0, r9, #12
 801cf76:	08c3      	lsrs	r3, r0, #3
 801cf78:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cf7c:	f993 2000 	ldrsb.w	r2, [r3]
 801cf80:	f000 0307 	and.w	r3, r0, #7
 801cf84:	3303      	adds	r3, #3
 801cf86:	4293      	cmp	r3, r2
 801cf88:	db02      	blt.n	801cf90 <cat_service+0x63b8>
 801cf8a:	2a00      	cmp	r2, #0
 801cf8c:	f042 80cc 	bne.w	801f128 <cat_service+0x8550>
 801cf90:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801cf94:	f7ec feca 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801cf98:	464a      	mov	r2, r9
 801cf9a:	4628      	mov	r0, r5
 801cf9c:	49bb      	ldr	r1, [pc, #748]	; (801d28c <cat_service+0x66b4>)
 801cf9e:	f005 fd1a 	bl	80229d6 <strncpy>
        self->position = 0;
 801cfa2:	f104 0018 	add.w	r0, r4, #24
 801cfa6:	08c3      	lsrs	r3, r0, #3
 801cfa8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cfac:	f993 2000 	ldrsb.w	r2, [r3]
 801cfb0:	f000 0307 	and.w	r3, r0, #7
 801cfb4:	3303      	adds	r3, #3
 801cfb6:	4293      	cmp	r3, r2
 801cfb8:	db02      	blt.n	801cfc0 <cat_service+0x63e8>
 801cfba:	2a00      	cmp	r2, #0
 801cfbc:	f042 80b6 	bne.w	801f12c <cat_service+0x8554>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801cfc0:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801cfc8:	08c3      	lsrs	r3, r0, #3
 801cfca:	f000 0207 	and.w	r2, r0, #7
 801cfce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cfd2:	f993 3000 	ldrsb.w	r3, [r3]
 801cfd6:	429a      	cmp	r2, r3
 801cfd8:	db02      	blt.n	801cfe0 <cat_service+0x6408>
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	f042 80a8 	bne.w	801f130 <cat_service+0x8558>
        self->write_buf = get_new_line_chars(self);
 801cfe0:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801cfe4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801cfe8:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801cfec:	08c3      	lsrs	r3, r0, #3
 801cfee:	f000 0207 	and.w	r2, r0, #7
 801cff2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801cff6:	3203      	adds	r2, #3
 801cff8:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801cffc:	4ba4      	ldr	r3, [pc, #656]	; (801d290 <cat_service+0x66b8>)
        self->write_buf = get_new_line_chars(self);
 801cffe:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d000:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801d002:	db02      	blt.n	801d00a <cat_service+0x6432>
 801d004:	2900      	cmp	r1, #0
 801d006:	f042 80f3 	bne.w	801f1f0 <cat_service+0x8618>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d00a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801d00e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d010:	08c3      	lsrs	r3, r0, #3
 801d012:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d016:	f993 2000 	ldrsb.w	r2, [r3]
 801d01a:	f000 0307 	and.w	r3, r0, #7
 801d01e:	3303      	adds	r3, #3
 801d020:	4293      	cmp	r3, r2
 801d022:	db02      	blt.n	801d02a <cat_service+0x6452>
 801d024:	2a00      	cmp	r2, #0
 801d026:	f042 80e5 	bne.w	801f1f4 <cat_service+0x861c>
        self->write_state_after = state_after;
 801d02a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d02e:	2300      	movs	r3, #0
 801d030:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801d032:	08c3      	lsrs	r3, r0, #3
 801d034:	f000 0207 	and.w	r2, r0, #7
 801d038:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d03c:	f993 3000 	ldrsb.w	r3, [r3]
 801d040:	429a      	cmp	r2, r3
 801d042:	db02      	blt.n	801d04a <cat_service+0x6472>
 801d044:	2b00      	cmp	r3, #0
 801d046:	f042 80d7 	bne.w	801f1f8 <cat_service+0x8620>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d04a:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801d04c:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d04e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801d052:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d056:	f006 0207 	and.w	r2, r6, #7
 801d05a:	f993 3000 	ldrsb.w	r3, [r3]
 801d05e:	429a      	cmp	r2, r3
 801d060:	db02      	blt.n	801d068 <cat_service+0x6490>
 801d062:	2b00      	cmp	r3, #0
 801d064:	f042 80ca 	bne.w	801f1fc <cat_service+0x8624>
 801d068:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801d06a:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d06c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801d070:	f7fa b8aa 	b.w	80171c8 <cat_service+0x5f0>
 801d074:	4642      	mov	r2, r8
 801d076:	9708      	str	r7, [sp, #32]
 801d078:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801d07c:	4615      	mov	r5, r2
 801d07e:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
 801d082:	e67e      	b.n	801cd82 <cat_service+0x61aa>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d084:	f7ec fe52 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d088:	f106 000c 	add.w	r0, r6, #12
 801d08c:	08c3      	lsrs	r3, r0, #3
 801d08e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d092:	f993 2000 	ldrsb.w	r2, [r3]
 801d096:	f000 0307 	and.w	r3, r0, #7
 801d09a:	3303      	adds	r3, #3
 801d09c:	4293      	cmp	r3, r2
 801d09e:	db02      	blt.n	801d0a6 <cat_service+0x64ce>
 801d0a0:	2a00      	cmp	r2, #0
 801d0a2:	f042 8439 	bne.w	801f918 <cat_service+0x8d40>
 801d0a6:	68f2      	ldr	r2, [r6, #12]
 801d0a8:	0852      	lsrs	r2, r2, #1
 801d0aa:	f7fe bc0d 	b.w	801b8c8 <cat_service+0x4cf0>
 801d0ae:	f7ec fe3d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d0b2:	f106 000c 	add.w	r0, r6, #12
 801d0b6:	08c3      	lsrs	r3, r0, #3
 801d0b8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d0bc:	f993 2000 	ldrsb.w	r2, [r3]
 801d0c0:	f000 0307 	and.w	r3, r0, #7
 801d0c4:	3303      	adds	r3, #3
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	db02      	blt.n	801d0d0 <cat_service+0x64f8>
 801d0ca:	2a00      	cmp	r2, #0
 801d0cc:	f041 87fa 	bne.w	801f0c4 <cat_service+0x84ec>
 801d0d0:	68f2      	ldr	r2, [r6, #12]
 801d0d2:	0852      	lsrs	r2, r2, #1
 801d0d4:	f7fe bc7e 	b.w	801b9d4 <cat_service+0x4dfc>
                        self->state = CAT_STATE_ERROR;
 801d0d8:	f7ec fe28 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d0dc:	23ff      	movs	r3, #255	; 0xff
        return CAT_STATUS_BUSY;
 801d0de:	2501      	movs	r5, #1
                        self->state = CAT_STATE_ERROR;
 801d0e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801d0e4:	f7fa b870 	b.w	80171c8 <cat_service+0x5f0>
 801d0e8:	3204      	adds	r2, #4
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801d0ea:	2100      	movs	r1, #0
 801d0ec:	f8cd 801c 	str.w	r8, [sp, #28]
 801d0f0:	4698      	mov	r8, r3
 801d0f2:	9409      	str	r4, [sp, #36]	; 0x24
 801d0f4:	460c      	mov	r4, r1
 801d0f6:	960a      	str	r6, [sp, #40]	; 0x28
 801d0f8:	4616      	mov	r6, r2
 801d0fa:	f7ec fe17 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d0fe:	3401      	adds	r4, #1
 801d100:	9b08      	ldr	r3, [sp, #32]
 801d102:	429c      	cmp	r4, r3
 801d104:	f001 870e 	beq.w	801ef24 <cat_service+0x834c>
                cmd_group = self->desc->cmd_group[i];
 801d108:	f7ec fe10 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d10c:	08f3      	lsrs	r3, r6, #3
 801d10e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d112:	f993 1000 	ldrsb.w	r1, [r3]
 801d116:	f006 0307 	and.w	r3, r6, #7
 801d11a:	3303      	adds	r3, #3
 801d11c:	428b      	cmp	r3, r1
 801d11e:	db02      	blt.n	801d126 <cat_service+0x654e>
 801d120:	2900      	cmp	r1, #0
 801d122:	f041 87f0 	bne.w	801f106 <cat_service+0x852e>
 801d126:	f856 1b04 	ldr.w	r1, [r6], #4
                if (index >= j + cmd_group->cmd_num) {
 801d12a:	f101 0008 	add.w	r0, r1, #8
 801d12e:	08c3      	lsrs	r3, r0, #3
 801d130:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d134:	f993 2000 	ldrsb.w	r2, [r3]
 801d138:	f000 0307 	and.w	r3, r0, #7
 801d13c:	3303      	adds	r3, #3
 801d13e:	4293      	cmp	r3, r2
 801d140:	db02      	blt.n	801d148 <cat_service+0x6570>
 801d142:	2a00      	cmp	r2, #0
 801d144:	f041 87e2 	bne.w	801f10c <cat_service+0x8534>
 801d148:	688b      	ldr	r3, [r1, #8]
 801d14a:	4443      	add	r3, r8
 801d14c:	429d      	cmp	r5, r3
 801d14e:	f081 8496 	bcs.w	801ea7e <cat_service+0x7ea6>
                return &cmd_group->cmd[index - j];
 801d152:	4643      	mov	r3, r8
 801d154:	9108      	str	r1, [sp, #32]
 801d156:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d15a:	1aeb      	subs	r3, r5, r3
 801d15c:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
 801d160:	9307      	str	r3, [sp, #28]
 801d162:	f7ec fde3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d166:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801d16a:	f7fe bb1f 	b.w	801b7ac <cat_service+0x4bd4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d16e:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
 801d172:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801d174:	f7ec fdda 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d178:	9b05      	ldr	r3, [sp, #20]
 801d17a:	f103 0010 	add.w	r0, r3, #16
 801d17e:	08c3      	lsrs	r3, r0, #3
 801d180:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d184:	f993 2000 	ldrsb.w	r2, [r3]
 801d188:	f000 0307 	and.w	r3, r0, #7
 801d18c:	3303      	adds	r3, #3
 801d18e:	4293      	cmp	r3, r2
 801d190:	db02      	blt.n	801d198 <cat_service+0x65c0>
 801d192:	2a00      	cmp	r2, #0
 801d194:	f041 87bc 	bne.w	801f110 <cat_service+0x8538>
 801d198:	9b05      	ldr	r3, [sp, #20]
 801d19a:	691b      	ldr	r3, [r3, #16]
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	f001 84e1 	beq.w	801eb64 <cat_service+0x7f8c>
 801d1a2:	f7ec fdc3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d1a6:	9b05      	ldr	r3, [sp, #20]
 801d1a8:	f103 000c 	add.w	r0, r3, #12
 801d1ac:	08c3      	lsrs	r3, r0, #3
 801d1ae:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d1b2:	f993 2000 	ldrsb.w	r2, [r3]
 801d1b6:	f000 0307 	and.w	r3, r0, #7
 801d1ba:	3303      	adds	r3, #3
 801d1bc:	4293      	cmp	r3, r2
 801d1be:	db02      	blt.n	801d1c6 <cat_service+0x65ee>
 801d1c0:	2a00      	cmp	r2, #0
 801d1c2:	f041 87a9 	bne.w	801f118 <cat_service+0x8540>
 801d1c6:	9b05      	ldr	r3, [sp, #20]
 801d1c8:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801d1ca:	f7ec fdaf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d1ce:	462a      	mov	r2, r5
 801d1d0:	9808      	ldr	r0, [sp, #32]
 801d1d2:	4930      	ldr	r1, [pc, #192]	; (801d294 <cat_service+0x66bc>)
 801d1d4:	f005 fbff 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d1d8:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801d1dc:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d1de:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801d1e2:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d1e4:	08c3      	lsrs	r3, r0, #3
 801d1e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d1ea:	f993 3000 	ldrsb.w	r3, [r3]
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	db02      	blt.n	801d1f8 <cat_service+0x6620>
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	f041 8792 	bne.w	801f11c <cat_service+0x8544>
        self->write_buf = get_new_line_chars(self);
 801d1f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d1fc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801d200:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801d204:	08c3      	lsrs	r3, r0, #3
 801d206:	f000 0207 	and.w	r2, r0, #7
 801d20a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d20e:	3203      	adds	r2, #3
 801d210:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d214:	4b1e      	ldr	r3, [pc, #120]	; (801d290 <cat_service+0x66b8>)
        self->write_buf = get_new_line_chars(self);
 801d216:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d218:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801d21a:	db02      	blt.n	801d222 <cat_service+0x664a>
 801d21c:	2900      	cmp	r1, #0
 801d21e:	f041 877f 	bne.w	801f120 <cat_service+0x8548>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d222:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801d226:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d228:	08c3      	lsrs	r3, r0, #3
 801d22a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d22e:	f993 2000 	ldrsb.w	r2, [r3]
 801d232:	f000 0307 	and.w	r3, r0, #7
 801d236:	3303      	adds	r3, #3
 801d238:	4293      	cmp	r3, r2
 801d23a:	db02      	blt.n	801d242 <cat_service+0x666a>
 801d23c:	2a00      	cmp	r2, #0
 801d23e:	f041 879b 	bne.w	801f178 <cat_service+0x85a0>
        self->write_state_after = state_after;
 801d242:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d246:	2300      	movs	r3, #0
 801d248:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801d24a:	08c3      	lsrs	r3, r0, #3
 801d24c:	f000 0207 	and.w	r2, r0, #7
 801d250:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d254:	f993 3000 	ldrsb.w	r3, [r3]
 801d258:	429a      	cmp	r2, r3
 801d25a:	db02      	blt.n	801d262 <cat_service+0x668a>
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	f041 878d 	bne.w	801f17c <cat_service+0x85a4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d262:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801d264:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d266:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801d26a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d26e:	f006 0207 	and.w	r2, r6, #7
 801d272:	f993 3000 	ldrsb.w	r3, [r3]
 801d276:	429a      	cmp	r2, r3
 801d278:	db02      	blt.n	801d280 <cat_service+0x66a8>
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	f042 83ac 	bne.w	801f9d8 <cat_service+0x8e00>
 801d280:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801d282:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d284:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801d288:	f7f9 bf9e 	b.w	80171c8 <cat_service+0x5f0>
 801d28c:	24009300 	.word	0x24009300
 801d290:	24009240 	.word	0x24009240
 801d294:	24009200 	.word	0x24009200
 801d298:	9b04      	ldr	r3, [sp, #16]
 801d29a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801d29e:	3301      	adds	r3, #1
 801d2a0:	9304      	str	r3, [sp, #16]
                        if (size >= self->var->data_size)
 801d2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2a4:	3303      	adds	r3, #3
 801d2a6:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
 801d2aa:	9305      	str	r3, [sp, #20]
                ch = get_atcmd_buf(self)[self->position++];
 801d2ac:	f7ec fd3e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d2b0:	eb06 0008 	add.w	r0, r6, r8
 801d2b4:	f108 0501 	add.w	r5, r8, #1
 801d2b8:	9904      	ldr	r1, [sp, #16]
 801d2ba:	08c3      	lsrs	r3, r0, #3
 801d2bc:	f000 0207 	and.w	r2, r0, #7
 801d2c0:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 801d2c4:	61a5      	str	r5, [r4, #24]
 801d2c6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d2ca:	f993 3000 	ldrsb.w	r3, [r3]
 801d2ce:	429a      	cmp	r2, r3
 801d2d0:	db02      	blt.n	801d2d8 <cat_service+0x6700>
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	f041 8754 	bne.w	801f180 <cat_service+0x85a8>
 801d2d8:	f890 a000 	ldrb.w	sl, [r0]
                        switch (ch) {
 801d2dc:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 801d2e0:	d012      	beq.n	801d308 <cat_service+0x6730>
 801d2e2:	f1ba 0f6e 	cmp.w	sl, #110	; 0x6e
 801d2e6:	d00d      	beq.n	801d304 <cat_service+0x672c>
 801d2e8:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
 801d2ec:	d00c      	beq.n	801d308 <cat_service+0x6730>
 801d2ee:	9608      	str	r6, [sp, #32]
 801d2f0:	9705      	str	r7, [sp, #20]
 801d2f2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801d2f6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801d2fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801d2fc:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
 801d300:	f7fe bc94 	b.w	801bc2c <cat_service+0x5054>
                                ch = '\n';
 801d304:	f04f 0a0a 	mov.w	sl, #10
                        if (size >= self->var->data_size)
 801d308:	f7ec fd10 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d30e:	f103 52dc 	add.w	r2, r3, #461373440	; 0x1b800000
 801d312:	9b05      	ldr	r3, [sp, #20]
 801d314:	f992 2000 	ldrsb.w	r2, [r2]
 801d318:	4293      	cmp	r3, r2
 801d31a:	db02      	blt.n	801d322 <cat_service+0x674a>
 801d31c:	2a00      	cmp	r2, #0
 801d31e:	f041 8722 	bne.w	801f166 <cat_service+0x858e>
 801d322:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 801d326:	f10b 000c 	add.w	r0, fp, #12
 801d32a:	08c1      	lsrs	r1, r0, #3
 801d32c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801d330:	f991 3000 	ldrsb.w	r3, [r1]
 801d334:	f000 0107 	and.w	r1, r0, #7
 801d338:	3103      	adds	r1, #3
 801d33a:	4299      	cmp	r1, r3
 801d33c:	db02      	blt.n	801d344 <cat_service+0x676c>
 801d33e:	2b00      	cmp	r3, #0
 801d340:	f041 8714 	bne.w	801f16c <cat_service+0x8594>
 801d344:	f8db 100c 	ldr.w	r1, [fp, #12]
 801d348:	4589      	cmp	r9, r1
 801d34a:	d2d0      	bcs.n	801d2ee <cat_service+0x6716>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801d34c:	f7ec fcee 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d350:	f10b 0010 	add.w	r0, fp, #16
 801d354:	08c1      	lsrs	r1, r0, #3
 801d356:	f000 0c07 	and.w	ip, r0, #7
 801d35a:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801d35e:	f991 1000 	ldrsb.w	r1, [r1]
 801d362:	458c      	cmp	ip, r1
 801d364:	db02      	blt.n	801d36c <cat_service+0x6794>
 801d366:	2900      	cmp	r1, #0
 801d368:	f041 8702 	bne.w	801f170 <cat_service+0x8598>
 801d36c:	f89b 1010 	ldrb.w	r1, [fp, #16]
 801d370:	2901      	cmp	r1, #1
 801d372:	f000 85b7 	beq.w	801dee4 <cat_service+0x730c>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 801d376:	f7ec fcd9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d37a:	f10b 0008 	add.w	r0, fp, #8
 801d37e:	08c1      	lsrs	r1, r0, #3
 801d380:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801d384:	f991 5000 	ldrsb.w	r5, [r1]
 801d388:	f000 0107 	and.w	r1, r0, #7
 801d38c:	3103      	adds	r1, #3
 801d38e:	42a9      	cmp	r1, r5
 801d390:	db02      	blt.n	801d398 <cat_service+0x67c0>
 801d392:	2d00      	cmp	r5, #0
 801d394:	f041 86ee 	bne.w	801f174 <cat_service+0x859c>
 801d398:	f8db 1008 	ldr.w	r1, [fp, #8]
 801d39c:	eb01 0009 	add.w	r0, r1, r9
 801d3a0:	08c2      	lsrs	r2, r0, #3
 801d3a2:	f000 0507 	and.w	r5, r0, #7
 801d3a6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801d3aa:	f992 2000 	ldrsb.w	r2, [r2]
 801d3ae:	4295      	cmp	r5, r2
 801d3b0:	db02      	blt.n	801d3b8 <cat_service+0x67e0>
 801d3b2:	2a00      	cmp	r2, #0
 801d3b4:	f041 8753 	bne.w	801f25e <cat_service+0x8686>
 801d3b8:	f801 a009 	strb.w	sl, [r1, r9]
        return (char*)self->desc->buf;
 801d3bc:	6827      	ldr	r7, [r4, #0]
 801d3be:	f107 0008 	add.w	r0, r7, #8
 801d3c2:	08c3      	lsrs	r3, r0, #3
 801d3c4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d3c8:	f993 2000 	ldrsb.w	r2, [r3]
 801d3cc:	f000 0307 	and.w	r3, r0, #7
 801d3d0:	3303      	adds	r3, #3
 801d3d2:	4293      	cmp	r3, r2
 801d3d4:	db02      	blt.n	801d3dc <cat_service+0x6804>
 801d3d6:	2a00      	cmp	r2, #0
 801d3d8:	f041 85c2 	bne.w	801ef60 <cat_service+0x8388>
                ch = get_atcmd_buf(self)[self->position++];
 801d3dc:	69a3      	ldr	r3, [r4, #24]
        return (char*)self->desc->buf;
 801d3de:	68be      	ldr	r6, [r7, #8]
                ch = get_atcmd_buf(self)[self->position++];
 801d3e0:	f103 0801 	add.w	r8, r3, #1
 801d3e4:	18f0      	adds	r0, r6, r3
 801d3e6:	f8c4 8018 	str.w	r8, [r4, #24]
 801d3ea:	08c3      	lsrs	r3, r0, #3
 801d3ec:	f000 0207 	and.w	r2, r0, #7
 801d3f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d3f4:	f993 3000 	ldrsb.w	r3, [r3]
 801d3f8:	429a      	cmp	r2, r3
 801d3fa:	db02      	blt.n	801d402 <cat_service+0x682a>
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	f041 85b1 	bne.w	801ef64 <cat_service+0x838c>
 801d402:	7805      	ldrb	r5, [r0, #0]
                        if (ch == 0)
 801d404:	f7ec fc92 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d408:	2d00      	cmp	r5, #0
 801d40a:	f43f af70 	beq.w	801d2ee <cat_service+0x6716>
                        if (ch == '\\') {
 801d40e:	f7ec fc8d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d412:	9b04      	ldr	r3, [sp, #16]
 801d414:	2d5c      	cmp	r5, #92	; 0x5c
 801d416:	f103 0301 	add.w	r3, r3, #1
 801d41a:	f001 86b3 	beq.w	801f184 <cat_service+0x85ac>
 801d41e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801d422:	e9dd a911 	ldrd	sl, r9, [sp, #68]	; 0x44
 801d426:	f7fb bc24 	b.w	8018c72 <cat_service+0x209a>
        return (char*)self->desc->buf;
 801d42a:	f7ec fc7f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d42e:	08e3      	lsrs	r3, r4, #3
 801d430:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d434:	f993 2000 	ldrsb.w	r2, [r3]
 801d438:	f004 0307 	and.w	r3, r4, #7
 801d43c:	3303      	adds	r3, #3
 801d43e:	4293      	cmp	r3, r2
 801d440:	db02      	blt.n	801d448 <cat_service+0x6870>
 801d442:	2a00      	cmp	r2, #0
 801d444:	f041 868c 	bne.w	801f160 <cat_service+0x8588>
 801d448:	6826      	ldr	r6, [r4, #0]
 801d44a:	f106 0008 	add.w	r0, r6, #8
 801d44e:	08c3      	lsrs	r3, r0, #3
 801d450:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d454:	f993 2000 	ldrsb.w	r2, [r3]
 801d458:	f000 0307 	and.w	r3, r0, #7
 801d45c:	3303      	adds	r3, #3
 801d45e:	4293      	cmp	r3, r2
 801d460:	db02      	blt.n	801d468 <cat_service+0x6890>
 801d462:	2a00      	cmp	r2, #0
 801d464:	f041 8672 	bne.w	801f14c <cat_service+0x8574>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d468:	f106 0010 	add.w	r0, r6, #16
        return (char*)self->desc->buf;
 801d46c:	68b5      	ldr	r5, [r6, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d46e:	08c3      	lsrs	r3, r0, #3
 801d470:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d474:	f993 2000 	ldrsb.w	r2, [r3]
 801d478:	f000 0307 	and.w	r3, r0, #7
 801d47c:	3303      	adds	r3, #3
 801d47e:	4293      	cmp	r3, r2
 801d480:	db02      	blt.n	801d488 <cat_service+0x68b0>
 801d482:	2a00      	cmp	r2, #0
 801d484:	f041 8664 	bne.w	801f150 <cat_service+0x8578>
 801d488:	6933      	ldr	r3, [r6, #16]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	f001 833e 	beq.w	801eb0c <cat_service+0x7f34>
 801d490:	f7ec fc4c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d494:	f106 000c 	add.w	r0, r6, #12
 801d498:	08c3      	lsrs	r3, r0, #3
 801d49a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d49e:	f993 2000 	ldrsb.w	r2, [r3]
 801d4a2:	f000 0307 	and.w	r3, r0, #7
 801d4a6:	3303      	adds	r3, #3
 801d4a8:	4293      	cmp	r3, r2
 801d4aa:	db02      	blt.n	801d4b2 <cat_service+0x68da>
 801d4ac:	2a00      	cmp	r2, #0
 801d4ae:	f041 864b 	bne.w	801f148 <cat_service+0x8570>
 801d4b2:	68f6      	ldr	r6, [r6, #12]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801d4b4:	f7ec fc3a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d4b8:	4632      	mov	r2, r6
 801d4ba:	4628      	mov	r0, r5
 801d4bc:	4992      	ldr	r1, [pc, #584]	; (801d708 <cat_service+0x6b30>)
 801d4be:	f005 fa8a 	bl	80229d6 <strncpy>
        self->position = 0;
 801d4c2:	f104 0018 	add.w	r0, r4, #24
 801d4c6:	08c3      	lsrs	r3, r0, #3
 801d4c8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d4cc:	f993 2000 	ldrsb.w	r2, [r3]
 801d4d0:	f000 0307 	and.w	r3, r0, #7
 801d4d4:	3303      	adds	r3, #3
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	db02      	blt.n	801d4e0 <cat_service+0x6908>
 801d4da:	2a00      	cmp	r2, #0
 801d4dc:	f041 875d 	bne.w	801f39a <cat_service+0x87c2>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d4e0:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d4e8:	08c3      	lsrs	r3, r0, #3
 801d4ea:	f000 0207 	and.w	r2, r0, #7
 801d4ee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d4f2:	f993 3000 	ldrsb.w	r3, [r3]
 801d4f6:	429a      	cmp	r2, r3
 801d4f8:	db02      	blt.n	801d500 <cat_service+0x6928>
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f041 874f 	bne.w	801f39e <cat_service+0x87c6>
        self->write_buf = get_new_line_chars(self);
 801d500:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d504:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801d508:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801d50c:	08c3      	lsrs	r3, r0, #3
 801d50e:	f000 0207 	and.w	r2, r0, #7
 801d512:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d516:	3203      	adds	r2, #3
 801d518:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d51c:	4b7b      	ldr	r3, [pc, #492]	; (801d70c <cat_service+0x6b34>)
        self->write_buf = get_new_line_chars(self);
 801d51e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d520:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801d522:	db02      	blt.n	801d52a <cat_service+0x6952>
 801d524:	2900      	cmp	r1, #0
 801d526:	f041 873c 	bne.w	801f3a2 <cat_service+0x87ca>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d52a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801d52e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d530:	08c3      	lsrs	r3, r0, #3
 801d532:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d536:	f993 2000 	ldrsb.w	r2, [r3]
 801d53a:	f000 0307 	and.w	r3, r0, #7
 801d53e:	3303      	adds	r3, #3
 801d540:	4293      	cmp	r3, r2
 801d542:	db02      	blt.n	801d54a <cat_service+0x6972>
 801d544:	2a00      	cmp	r2, #0
 801d546:	f041 872e 	bne.w	801f3a6 <cat_service+0x87ce>
        self->write_state_after = state_after;
 801d54a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d54e:	2300      	movs	r3, #0
 801d550:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801d552:	08c3      	lsrs	r3, r0, #3
 801d554:	f000 0207 	and.w	r2, r0, #7
 801d558:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d55c:	f993 3000 	ldrsb.w	r3, [r3]
 801d560:	429a      	cmp	r2, r3
 801d562:	db02      	blt.n	801d56a <cat_service+0x6992>
 801d564:	2b00      	cmp	r3, #0
 801d566:	f042 8020 	bne.w	801f5aa <cat_service+0x89d2>
 801d56a:	2314      	movs	r3, #20
        return CAT_STATUS_BUSY;
 801d56c:	2501      	movs	r5, #1
        self->write_state_after = state_after;
 801d56e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d572:	2312      	movs	r3, #18
 801d574:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801d578:	f7f9 be26 	b.w	80171c8 <cat_service+0x5f0>
                        return (ch == ',') ? 1 : 0;
 801d57c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801d580:	f7ec fbd4 	bl	8009d2c <__sanitizer_cov_trace_pc>
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801d584:	9b04      	ldr	r3, [sp, #16]
                stat = parse_num_hexadecimal(self, (uint64_t *)&val);
 801d586:	f1a5 052c 	sub.w	r5, r5, #44	; 0x2c
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801d58a:	f103 0010 	add.w	r0, r3, #16
                stat = parse_num_hexadecimal(self, (uint64_t *)&val);
 801d58e:	fab5 f585 	clz	r5, r5
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801d592:	08c3      	lsrs	r3, r0, #3
 801d594:	f000 0207 	and.w	r2, r0, #7
                stat = parse_num_hexadecimal(self, (uint64_t *)&val);
 801d598:	096d      	lsrs	r5, r5, #5
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801d59a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d59e:	f993 3000 	ldrsb.w	r3, [r3]
 801d5a2:	429a      	cmp	r2, r3
 801d5a4:	db02      	blt.n	801d5ac <cat_service+0x69d4>
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	f041 86ff 	bne.w	801f3aa <cat_service+0x87d2>
 801d5ac:	9b04      	ldr	r3, [sp, #16]
 801d5ae:	7c1b      	ldrb	r3, [r3, #16]
 801d5b0:	2b01      	cmp	r3, #1
 801d5b2:	f000 85d5 	beq.w	801e160 <cat_service+0x7588>
        switch (self->var->data_size) {
 801d5b6:	f7ec fbb9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d5ba:	9b04      	ldr	r3, [sp, #16]
 801d5bc:	f103 000c 	add.w	r0, r3, #12
 801d5c0:	08c3      	lsrs	r3, r0, #3
 801d5c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d5c6:	f993 2000 	ldrsb.w	r2, [r3]
 801d5ca:	f000 0307 	and.w	r3, r0, #7
 801d5ce:	3303      	adds	r3, #3
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	db02      	blt.n	801d5da <cat_service+0x6a02>
 801d5d4:	2a00      	cmp	r2, #0
 801d5d6:	f041 86ea 	bne.w	801f3ae <cat_service+0x87d6>
 801d5da:	9b04      	ldr	r3, [sp, #16]
 801d5dc:	68db      	ldr	r3, [r3, #12]
 801d5de:	2b02      	cmp	r3, #2
 801d5e0:	f000 865f 	beq.w	801e2a2 <cat_service+0x76ca>
 801d5e4:	2b04      	cmp	r3, #4
 801d5e6:	f000 85d1 	beq.w	801e18c <cat_service+0x75b4>
 801d5ea:	2b01      	cmp	r3, #1
 801d5ec:	f000 862b 	beq.w	801e246 <cat_service+0x766e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d5f0:	f7ec fb9c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5f6:	f103 0010 	add.w	r0, r3, #16
 801d5fa:	08c3      	lsrs	r3, r0, #3
 801d5fc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d600:	f993 2000 	ldrsb.w	r2, [r3]
 801d604:	f000 0307 	and.w	r3, r0, #7
 801d608:	3303      	adds	r3, #3
 801d60a:	4293      	cmp	r3, r2
 801d60c:	db02      	blt.n	801d614 <cat_service+0x6a3c>
 801d60e:	2a00      	cmp	r2, #0
 801d610:	f041 86cf 	bne.w	801f3b2 <cat_service+0x87da>
 801d614:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d616:	692b      	ldr	r3, [r5, #16]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	f001 83d1 	beq.w	801edc0 <cat_service+0x81e8>
 801d61e:	f7ec fb85 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d622:	f105 000c 	add.w	r0, r5, #12
 801d626:	08c3      	lsrs	r3, r0, #3
 801d628:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d62c:	f993 2000 	ldrsb.w	r2, [r3]
 801d630:	f000 0307 	and.w	r3, r0, #7
 801d634:	3303      	adds	r3, #3
 801d636:	4293      	cmp	r3, r2
 801d638:	db02      	blt.n	801d640 <cat_service+0x6a68>
 801d63a:	2a00      	cmp	r2, #0
 801d63c:	f041 85cb 	bne.w	801f1d6 <cat_service+0x85fe>
 801d640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d642:	68dd      	ldr	r5, [r3, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801d644:	f7ec fb72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d648:	462a      	mov	r2, r5
 801d64a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d64c:	4930      	ldr	r1, [pc, #192]	; (801d710 <cat_service+0x6b38>)
 801d64e:	f005 f9c2 	bl	80229d6 <strncpy>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d652:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801d656:	2300      	movs	r3, #0
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d658:	f000 0207 	and.w	r2, r0, #7
        self->position = 0;
 801d65c:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d65e:	08c3      	lsrs	r3, r0, #3
 801d660:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d664:	f993 3000 	ldrsb.w	r3, [r3]
 801d668:	429a      	cmp	r2, r3
 801d66a:	db02      	blt.n	801d672 <cat_service+0x6a9a>
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	f041 8684 	bne.w	801f37a <cat_service+0x87a2>
        self->write_buf = get_new_line_chars(self);
 801d672:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d676:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801d67a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801d67e:	08c3      	lsrs	r3, r0, #3
 801d680:	f000 0207 	and.w	r2, r0, #7
 801d684:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d688:	3203      	adds	r2, #3
 801d68a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d68e:	4b1f      	ldr	r3, [pc, #124]	; (801d70c <cat_service+0x6b34>)
        self->write_buf = get_new_line_chars(self);
 801d690:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d692:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801d694:	db02      	blt.n	801d69c <cat_service+0x6ac4>
 801d696:	2900      	cmp	r1, #0
 801d698:	f041 8671 	bne.w	801f37e <cat_service+0x87a6>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d69c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801d6a0:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d6a2:	08c3      	lsrs	r3, r0, #3
 801d6a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d6a8:	f993 2000 	ldrsb.w	r2, [r3]
 801d6ac:	f000 0307 	and.w	r3, r0, #7
 801d6b0:	3303      	adds	r3, #3
 801d6b2:	4293      	cmp	r3, r2
 801d6b4:	db02      	blt.n	801d6bc <cat_service+0x6ae4>
 801d6b6:	2a00      	cmp	r2, #0
 801d6b8:	f041 8663 	bne.w	801f382 <cat_service+0x87aa>
        self->write_state_after = state_after;
 801d6bc:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801d6c4:	08c3      	lsrs	r3, r0, #3
 801d6c6:	f000 0207 	and.w	r2, r0, #7
 801d6ca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d6ce:	f993 3000 	ldrsb.w	r3, [r3]
 801d6d2:	429a      	cmp	r2, r3
 801d6d4:	db02      	blt.n	801d6dc <cat_service+0x6b04>
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	f042 8045 	bne.w	801f766 <cat_service+0x8b8e>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d6dc:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801d6de:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d6e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801d6e4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d6e8:	f006 0207 	and.w	r2, r6, #7
 801d6ec:	f993 3000 	ldrsb.w	r3, [r3]
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	db02      	blt.n	801d6fa <cat_service+0x6b22>
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f042 8038 	bne.w	801f76a <cat_service+0x8b92>
 801d6fa:	2312      	movs	r3, #18
                        return CAT_STATUS_BUSY;
 801d6fc:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d6fe:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801d702:	f7f9 bd61 	b.w	80171c8 <cat_service+0x5f0>
 801d706:	bf00      	nop
 801d708:	24009300 	.word	0x24009300
 801d70c:	24009240 	.word	0x24009240
 801d710:	24009200 	.word	0x24009200
        return (char*)self->desc->buf;
 801d714:	f7ec fb0a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d718:	08e3      	lsrs	r3, r4, #3
 801d71a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d71e:	f993 2000 	ldrsb.w	r2, [r3]
 801d722:	f004 0307 	and.w	r3, r4, #7
 801d726:	3303      	adds	r3, #3
 801d728:	4293      	cmp	r3, r2
 801d72a:	db02      	blt.n	801d732 <cat_service+0x6b5a>
 801d72c:	2a00      	cmp	r2, #0
 801d72e:	f041 8493 	bne.w	801f058 <cat_service+0x8480>
 801d732:	f8d4 9000 	ldr.w	r9, [r4]
 801d736:	f109 0008 	add.w	r0, r9, #8
 801d73a:	08c3      	lsrs	r3, r0, #3
 801d73c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d740:	f993 2000 	ldrsb.w	r2, [r3]
 801d744:	f000 0307 	and.w	r3, r0, #7
 801d748:	3303      	adds	r3, #3
 801d74a:	4293      	cmp	r3, r2
 801d74c:	db02      	blt.n	801d754 <cat_service+0x6b7c>
 801d74e:	2a00      	cmp	r2, #0
 801d750:	f041 8485 	bne.w	801f05e <cat_service+0x8486>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d754:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801d758:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801d75c:	08c3      	lsrs	r3, r0, #3
 801d75e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d762:	f993 2000 	ldrsb.w	r2, [r3]
 801d766:	f000 0307 	and.w	r3, r0, #7
 801d76a:	3303      	adds	r3, #3
 801d76c:	4293      	cmp	r3, r2
 801d76e:	db02      	blt.n	801d776 <cat_service+0x6b9e>
 801d770:	2a00      	cmp	r2, #0
 801d772:	f041 8476 	bne.w	801f062 <cat_service+0x848a>
 801d776:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	f001 823a 	beq.w	801ebf4 <cat_service+0x801c>
 801d780:	f7ec fad4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d784:	f109 000c 	add.w	r0, r9, #12
 801d788:	08c3      	lsrs	r3, r0, #3
 801d78a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d78e:	f993 2000 	ldrsb.w	r2, [r3]
 801d792:	f000 0307 	and.w	r3, r0, #7
 801d796:	3303      	adds	r3, #3
 801d798:	4293      	cmp	r3, r2
 801d79a:	db02      	blt.n	801d7a2 <cat_service+0x6bca>
 801d79c:	2a00      	cmp	r2, #0
 801d79e:	f041 8466 	bne.w	801f06e <cat_service+0x8496>
 801d7a2:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801d7a6:	f7ec fac1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d7aa:	464a      	mov	r2, r9
 801d7ac:	4628      	mov	r0, r5
 801d7ae:	49b8      	ldr	r1, [pc, #736]	; (801da90 <cat_service+0x6eb8>)
 801d7b0:	f005 f911 	bl	80229d6 <strncpy>
        self->position = 0;
 801d7b4:	f104 0018 	add.w	r0, r4, #24
 801d7b8:	08c3      	lsrs	r3, r0, #3
 801d7ba:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d7be:	f993 2000 	ldrsb.w	r2, [r3]
 801d7c2:	f000 0307 	and.w	r3, r0, #7
 801d7c6:	3303      	adds	r3, #3
 801d7c8:	4293      	cmp	r3, r2
 801d7ca:	db02      	blt.n	801d7d2 <cat_service+0x6bfa>
 801d7cc:	2a00      	cmp	r2, #0
 801d7ce:	f041 844a 	bne.w	801f066 <cat_service+0x848e>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d7d2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d7da:	08c3      	lsrs	r3, r0, #3
 801d7dc:	f000 0207 	and.w	r2, r0, #7
 801d7e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d7e4:	f993 3000 	ldrsb.w	r3, [r3]
 801d7e8:	429a      	cmp	r2, r3
 801d7ea:	db02      	blt.n	801d7f2 <cat_service+0x6c1a>
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f041 843c 	bne.w	801f06a <cat_service+0x8492>
        self->write_buf = get_new_line_chars(self);
 801d7f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d7f6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801d7fa:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801d7fe:	08c3      	lsrs	r3, r0, #3
 801d800:	f000 0207 	and.w	r2, r0, #7
 801d804:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d808:	3203      	adds	r2, #3
 801d80a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d80e:	4ba1      	ldr	r3, [pc, #644]	; (801da94 <cat_service+0x6ebc>)
        self->write_buf = get_new_line_chars(self);
 801d810:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801d812:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801d814:	db02      	blt.n	801d81c <cat_service+0x6c44>
 801d816:	2900      	cmp	r1, #0
 801d818:	f041 8755 	bne.w	801f6c6 <cat_service+0x8aee>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d81c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801d820:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d822:	08c3      	lsrs	r3, r0, #3
 801d824:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d828:	f993 2000 	ldrsb.w	r2, [r3]
 801d82c:	f000 0307 	and.w	r3, r0, #7
 801d830:	3303      	adds	r3, #3
 801d832:	4293      	cmp	r3, r2
 801d834:	db02      	blt.n	801d83c <cat_service+0x6c64>
 801d836:	2a00      	cmp	r2, #0
 801d838:	f041 8747 	bne.w	801f6ca <cat_service+0x8af2>
        self->write_state_after = state_after;
 801d83c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801d840:	2300      	movs	r3, #0
 801d842:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801d844:	08c3      	lsrs	r3, r0, #3
 801d846:	f000 0207 	and.w	r2, r0, #7
 801d84a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d84e:	f993 3000 	ldrsb.w	r3, [r3]
 801d852:	429a      	cmp	r2, r3
 801d854:	db02      	blt.n	801d85c <cat_service+0x6c84>
 801d856:	2b00      	cmp	r3, #0
 801d858:	f041 8739 	bne.w	801f6ce <cat_service+0x8af6>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d85c:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801d85e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d860:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801d864:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d868:	f006 0207 	and.w	r2, r6, #7
 801d86c:	f993 3000 	ldrsb.w	r3, [r3]
 801d870:	429a      	cmp	r2, r3
 801d872:	db02      	blt.n	801d87a <cat_service+0x6ca2>
 801d874:	2b00      	cmp	r3, #0
 801d876:	f041 872c 	bne.w	801f6d2 <cat_service+0x8afa>
 801d87a:	2312      	movs	r3, #18
                s = process_run_loop(self);
 801d87c:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801d87e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801d882:	f7f9 bca1 	b.w	80171c8 <cat_service+0x5f0>
                        if ((self->cmd->test != NULL) || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801d886:	f7ec fa51 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d88a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801d88e:	08c3      	lsrs	r3, r0, #3
 801d890:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d894:	f993 2000 	ldrsb.w	r2, [r3]
 801d898:	f000 0307 	and.w	r3, r0, #7
 801d89c:	3303      	adds	r3, #3
 801d89e:	4293      	cmp	r3, r2
 801d8a0:	db02      	blt.n	801d8a8 <cat_service+0x6cd0>
 801d8a2:	2a00      	cmp	r2, #0
 801d8a4:	f041 83ff 	bne.w	801f0a6 <cat_service+0x84ce>
 801d8a8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 801d8ac:	f109 0014 	add.w	r0, r9, #20
 801d8b0:	08c3      	lsrs	r3, r0, #3
 801d8b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d8b6:	f993 2000 	ldrsb.w	r2, [r3]
 801d8ba:	f000 0307 	and.w	r3, r0, #7
 801d8be:	3303      	adds	r3, #3
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	db02      	blt.n	801d8ca <cat_service+0x6cf2>
 801d8c4:	2a00      	cmp	r2, #0
 801d8c6:	f041 83f0 	bne.w	801f0aa <cat_service+0x84d2>
 801d8ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	f001 81f5 	beq.w	801ecbe <cat_service+0x80e6>
                                self->cmd_type = CAT_CMD_TYPE_TEST;
 801d8d4:	f7ec fa2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d8d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801d8dc:	08c3      	lsrs	r3, r0, #3
 801d8de:	f000 0207 	and.w	r2, r0, #7
 801d8e2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d8e6:	f993 3000 	ldrsb.w	r3, [r3]
 801d8ea:	429a      	cmp	r2, r3
 801d8ec:	db02      	blt.n	801d8f4 <cat_service+0x6d1c>
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	f041 8566 	bne.w	801f3c0 <cat_service+0x87e8>
 801d8f4:	2303      	movs	r3, #3
        return CAT_STATUS_BUSY;
 801d8f6:	2501      	movs	r5, #1
                                self->cmd_type = CAT_CMD_TYPE_TEST;
 801d8f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                                self->state = CAT_STATE_WAIT_TEST_ACKNOWLEDGE;
 801d8fc:	230b      	movs	r3, #11
 801d8fe:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                break;
 801d902:	f7f9 bc61 	b.w	80171c8 <cat_service+0x5f0>
        assert(index < self->commands_num);
 801d906:	f7ec fa11 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d90a:	f104 0020 	add.w	r0, r4, #32
 801d90e:	08c3      	lsrs	r3, r0, #3
 801d910:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d914:	f993 2000 	ldrsb.w	r2, [r3]
 801d918:	f000 0307 	and.w	r3, r0, #7
 801d91c:	3303      	adds	r3, #3
 801d91e:	4293      	cmp	r3, r2
 801d920:	db02      	blt.n	801d928 <cat_service+0x6d50>
 801d922:	2a00      	cmp	r2, #0
 801d924:	f041 83c5 	bne.w	801f0b2 <cat_service+0x84da>
 801d928:	6a23      	ldr	r3, [r4, #32]
 801d92a:	429d      	cmp	r5, r3
 801d92c:	f082 80cc 	bcs.w	801fac8 <cat_service+0x8ef0>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801d930:	f7ec f9fc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d934:	08e3      	lsrs	r3, r4, #3
 801d936:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d93a:	f993 2000 	ldrsb.w	r2, [r3]
 801d93e:	f004 0307 	and.w	r3, r4, #7
 801d942:	3303      	adds	r3, #3
 801d944:	4293      	cmp	r3, r2
 801d946:	db02      	blt.n	801d94e <cat_service+0x6d76>
 801d948:	2a00      	cmp	r2, #0
 801d94a:	f041 83b4 	bne.w	801f0b6 <cat_service+0x84de>
 801d94e:	f8d4 9000 	ldr.w	r9, [r4]
 801d952:	f109 0004 	add.w	r0, r9, #4
 801d956:	08c3      	lsrs	r3, r0, #3
 801d958:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d95c:	f993 2000 	ldrsb.w	r2, [r3]
 801d960:	f000 0307 	and.w	r3, r0, #7
 801d964:	3303      	adds	r3, #3
 801d966:	4293      	cmp	r3, r2
 801d968:	db02      	blt.n	801d970 <cat_service+0x6d98>
 801d96a:	2a00      	cmp	r2, #0
 801d96c:	f041 83a6 	bne.w	801f0bc <cat_service+0x84e4>
 801d970:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d974:	9306      	str	r3, [sp, #24]
 801d976:	2b00      	cmp	r3, #0
 801d978:	f001 82de 	beq.w	801ef38 <cat_service+0x8360>
                cmd_group = self->desc->cmd_group[i];
 801d97c:	f7ec f9d6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d980:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801d984:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d988:	f993 2000 	ldrsb.w	r2, [r3]
 801d98c:	f009 0307 	and.w	r3, r9, #7
 801d990:	3303      	adds	r3, #3
 801d992:	4293      	cmp	r3, r2
 801d994:	db02      	blt.n	801d99c <cat_service+0x6dc4>
 801d996:	2a00      	cmp	r2, #0
 801d998:	f041 82e8 	bne.w	801ef6c <cat_service+0x8394>
 801d99c:	f8d9 3000 	ldr.w	r3, [r9]
 801d9a0:	08da      	lsrs	r2, r3, #3
 801d9a2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801d9a6:	f992 1000 	ldrsb.w	r1, [r2]
 801d9aa:	f003 0207 	and.w	r2, r3, #7
 801d9ae:	3203      	adds	r2, #3
 801d9b0:	428a      	cmp	r2, r1
 801d9b2:	db02      	blt.n	801d9ba <cat_service+0x6de2>
 801d9b4:	2900      	cmp	r1, #0
 801d9b6:	f041 82dc 	bne.w	801ef72 <cat_service+0x839a>
 801d9ba:	6819      	ldr	r1, [r3, #0]
                if (index >= j + cmd_group->cmd_num) {
 801d9bc:	f101 0008 	add.w	r0, r1, #8
 801d9c0:	08c2      	lsrs	r2, r0, #3
 801d9c2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801d9c6:	f992 c000 	ldrsb.w	ip, [r2]
 801d9ca:	f000 0207 	and.w	r2, r0, #7
 801d9ce:	3203      	adds	r2, #3
 801d9d0:	4562      	cmp	r2, ip
 801d9d2:	db03      	blt.n	801d9dc <cat_service+0x6e04>
 801d9d4:	f1bc 0f00 	cmp.w	ip, #0
 801d9d8:	f041 82ce 	bne.w	801ef78 <cat_service+0x83a0>
 801d9dc:	688a      	ldr	r2, [r1, #8]
 801d9de:	4295      	cmp	r5, r2
 801d9e0:	9204      	str	r2, [sp, #16]
 801d9e2:	f081 819a 	bcs.w	801ed1a <cat_service+0x8142>
        j = 0;
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	9304      	str	r3, [sp, #16]
                return &cmd_group->cmd[index - j];
 801d9ea:	9105      	str	r1, [sp, #20]
 801d9ec:	f7ec f99e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801d9f0:	9905      	ldr	r1, [sp, #20]
 801d9f2:	1d08      	adds	r0, r1, #4
 801d9f4:	08c3      	lsrs	r3, r0, #3
 801d9f6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801d9fa:	f993 2000 	ldrsb.w	r2, [r3]
 801d9fe:	f000 0307 	and.w	r3, r0, #7
 801da02:	3303      	adds	r3, #3
 801da04:	4293      	cmp	r3, r2
 801da06:	db02      	blt.n	801da0e <cat_service+0x6e36>
 801da08:	2a00      	cmp	r2, #0
 801da0a:	f041 82bc 	bne.w	801ef86 <cat_service+0x83ae>
 801da0e:	9b04      	ldr	r3, [sp, #16]
 801da10:	1aeb      	subs	r3, r5, r3
 801da12:	684d      	ldr	r5, [r1, #4]
 801da14:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801da18:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                        self->cmd = get_command_by_index(self, self->index);
 801da1c:	f7ec f986 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801da20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801da24:	08c3      	lsrs	r3, r0, #3
 801da26:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801da2a:	f993 2000 	ldrsb.w	r2, [r3]
 801da2e:	f000 0307 	and.w	r3, r0, #7
 801da32:	3303      	adds	r3, #3
 801da34:	4293      	cmp	r3, r2
 801da36:	db02      	blt.n	801da3e <cat_service+0x6e66>
 801da38:	2a00      	cmp	r2, #0
 801da3a:	f041 829f 	bne.w	801ef7c <cat_service+0x83a4>
                        self->state = CAT_STATE_COMMAND_FOUND;
 801da3e:	08f3      	lsrs	r3, r6, #3
 801da40:	f006 0207 	and.w	r2, r6, #7
                        self->cmd = get_command_by_index(self, self->index);
 801da44:	6265      	str	r5, [r4, #36]	; 0x24
                        self->state = CAT_STATE_COMMAND_FOUND;
 801da46:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801da4a:	f993 3000 	ldrsb.w	r3, [r3]
 801da4e:	429a      	cmp	r2, r3
 801da50:	db02      	blt.n	801da58 <cat_service+0x6e80>
 801da52:	2b00      	cmp	r3, #0
 801da54:	f041 8294 	bne.w	801ef80 <cat_service+0x83a8>
 801da58:	2306      	movs	r3, #6
                s = search_command(self);
 801da5a:	2501      	movs	r5, #1
                        self->state = CAT_STATE_COMMAND_FOUND;
 801da5c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                        return CAT_STATUS_BUSY;
 801da60:	f7f9 bbb2 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801da64:	f7ec f962 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801da68:	9904      	ldr	r1, [sp, #16]
 801da6a:	f101 000c 	add.w	r0, r1, #12
 801da6e:	08c3      	lsrs	r3, r0, #3
 801da70:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801da74:	f993 2000 	ldrsb.w	r2, [r3]
 801da78:	f000 0307 	and.w	r3, r0, #7
 801da7c:	3303      	adds	r3, #3
 801da7e:	4293      	cmp	r3, r2
 801da80:	db02      	blt.n	801da88 <cat_service+0x6eb0>
 801da82:	2a00      	cmp	r2, #0
 801da84:	f041 8762 	bne.w	801f94c <cat_service+0x8d74>
 801da88:	68ca      	ldr	r2, [r1, #12]
 801da8a:	0852      	lsrs	r2, r2, #1
 801da8c:	f7fd b989 	b.w	801ada2 <cat_service+0x41ca>
 801da90:	24009300 	.word	0x24009300
 801da94:	24009240 	.word	0x24009240
        return (char*)self->desc->buf;
 801da98:	f7ec f948 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801da9c:	9b07      	ldr	r3, [sp, #28]
 801da9e:	9a06      	ldr	r2, [sp, #24]
 801daa0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801daa4:	3203      	adds	r2, #3
 801daa6:	f993 3000 	ldrsb.w	r3, [r3]
 801daaa:	429a      	cmp	r2, r3
 801daac:	db02      	blt.n	801dab4 <cat_service+0x6edc>
 801daae:	2b00      	cmp	r3, #0
 801dab0:	f041 82ba 	bne.w	801f028 <cat_service+0x8450>
 801dab4:	6823      	ldr	r3, [r4, #0]
 801dab6:	f103 0008 	add.w	r0, r3, #8
 801daba:	08c2      	lsrs	r2, r0, #3
 801dabc:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dac0:	f992 1000 	ldrsb.w	r1, [r2]
 801dac4:	f000 0207 	and.w	r2, r0, #7
 801dac8:	3203      	adds	r2, #3
 801daca:	428a      	cmp	r2, r1
 801dacc:	db02      	blt.n	801dad4 <cat_service+0x6efc>
 801dace:	2900      	cmp	r1, #0
 801dad0:	f041 84c5 	bne.w	801f45e <cat_service+0x8886>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801dad4:	f103 0010 	add.w	r0, r3, #16
        return (char*)self->desc->buf;
 801dad8:	689a      	ldr	r2, [r3, #8]
 801dada:	ee08 2a10 	vmov	s16, r2
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801dade:	08c2      	lsrs	r2, r0, #3
 801dae0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dae4:	f992 1000 	ldrsb.w	r1, [r2]
 801dae8:	f000 0207 	and.w	r2, r0, #7
 801daec:	3203      	adds	r2, #3
 801daee:	428a      	cmp	r2, r1
 801daf0:	db02      	blt.n	801daf8 <cat_service+0x6f20>
 801daf2:	2900      	cmp	r1, #0
 801daf4:	f041 84b5 	bne.w	801f462 <cat_service+0x888a>
 801daf8:	691a      	ldr	r2, [r3, #16]
 801dafa:	9306      	str	r3, [sp, #24]
 801dafc:	2a00      	cmp	r2, #0
 801dafe:	f001 80bc 	beq.w	801ec7a <cat_service+0x80a2>
 801db02:	f7ec f913 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801db06:	9b06      	ldr	r3, [sp, #24]
 801db08:	f103 000c 	add.w	r0, r3, #12
 801db0c:	08c2      	lsrs	r2, r0, #3
 801db0e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801db12:	f992 1000 	ldrsb.w	r1, [r2]
 801db16:	f000 0207 	and.w	r2, r0, #7
 801db1a:	3203      	adds	r2, #3
 801db1c:	428a      	cmp	r2, r1
 801db1e:	db02      	blt.n	801db26 <cat_service+0x6f4e>
 801db20:	2900      	cmp	r1, #0
 801db22:	f041 84a0 	bne.w	801f466 <cat_service+0x888e>
 801db26:	68da      	ldr	r2, [r3, #12]
 801db28:	9206      	str	r2, [sp, #24]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801db2a:	f7ec f8ff 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801db2e:	9a06      	ldr	r2, [sp, #24]
 801db30:	ee18 0a10 	vmov	r0, s16
 801db34:	498e      	ldr	r1, [pc, #568]	; (801dd70 <cat_service+0x7198>)
 801db36:	f004 ff4e 	bl	80229d6 <strncpy>
        self->position = 0;
 801db3a:	9b05      	ldr	r3, [sp, #20]
 801db3c:	9a04      	ldr	r2, [sp, #16]
 801db3e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801db42:	3203      	adds	r2, #3
 801db44:	f993 3000 	ldrsb.w	r3, [r3]
 801db48:	429a      	cmp	r2, r3
 801db4a:	db02      	blt.n	801db52 <cat_service+0x6f7a>
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	f041 847d 	bne.w	801f44c <cat_service+0x8874>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801db52:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801db56:	2300      	movs	r3, #0
 801db58:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801db5a:	08c3      	lsrs	r3, r0, #3
 801db5c:	f000 0207 	and.w	r2, r0, #7
 801db60:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801db64:	f993 3000 	ldrsb.w	r3, [r3]
 801db68:	429a      	cmp	r2, r3
 801db6a:	db02      	blt.n	801db72 <cat_service+0x6f9a>
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	f041 8470 	bne.w	801f452 <cat_service+0x887a>
        self->write_buf = get_new_line_chars(self);
 801db72:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801db76:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801db7a:	f083 0c01 	eor.w	ip, r3, #1
        self->write_buf = get_new_line_chars(self);
 801db7e:	08c3      	lsrs	r3, r0, #3
 801db80:	f000 0207 	and.w	r2, r0, #7
 801db84:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801db88:	3203      	adds	r2, #3
 801db8a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801db8e:	4b79      	ldr	r3, [pc, #484]	; (801dd74 <cat_service+0x719c>)
        self->write_buf = get_new_line_chars(self);
 801db90:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801db92:	4463      	add	r3, ip
        self->write_buf = get_new_line_chars(self);
 801db94:	db02      	blt.n	801db9c <cat_service+0x6fc4>
 801db96:	2900      	cmp	r1, #0
 801db98:	f041 845d 	bne.w	801f456 <cat_service+0x887e>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801db9c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801dba0:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801dba2:	08c3      	lsrs	r3, r0, #3
 801dba4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dba8:	f993 2000 	ldrsb.w	r2, [r3]
 801dbac:	f000 0307 	and.w	r3, r0, #7
 801dbb0:	3303      	adds	r3, #3
 801dbb2:	4293      	cmp	r3, r2
 801dbb4:	db02      	blt.n	801dbbc <cat_service+0x6fe4>
 801dbb6:	2a00      	cmp	r2, #0
 801dbb8:	f041 844f 	bne.w	801f45a <cat_service+0x8882>
        self->write_state_after = state_after;
 801dbbc:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801dbc4:	08c3      	lsrs	r3, r0, #3
 801dbc6:	f000 0207 	and.w	r2, r0, #7
 801dbca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dbce:	f993 3000 	ldrsb.w	r3, [r3]
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	db02      	blt.n	801dbdc <cat_service+0x7004>
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	f041 8731 	bne.w	801fa3e <cat_service+0x8e66>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dbdc:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801dbde:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dbe0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801dbe4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dbe8:	f006 0207 	and.w	r2, r6, #7
 801dbec:	f993 3000 	ldrsb.w	r3, [r3]
 801dbf0:	429a      	cmp	r2, r3
 801dbf2:	db02      	blt.n	801dbfa <cat_service+0x7022>
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	f041 8724 	bne.w	801fa42 <cat_service+0x8e6a>
 801dbfa:	2312      	movs	r3, #18
 801dbfc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801dc00:	f7f9 bae2 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801dc04:	f7ec f892 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dc08:	9b07      	ldr	r3, [sp, #28]
 801dc0a:	9a06      	ldr	r2, [sp, #24]
 801dc0c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dc10:	3203      	adds	r2, #3
 801dc12:	f993 3000 	ldrsb.w	r3, [r3]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	db02      	blt.n	801dc20 <cat_service+0x7048>
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	f041 81df 	bne.w	801efde <cat_service+0x8406>
 801dc20:	6823      	ldr	r3, [r4, #0]
 801dc22:	f103 0008 	add.w	r0, r3, #8
 801dc26:	08c2      	lsrs	r2, r0, #3
 801dc28:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dc2c:	f992 1000 	ldrsb.w	r1, [r2]
 801dc30:	f000 0207 	and.w	r2, r0, #7
 801dc34:	3203      	adds	r2, #3
 801dc36:	428a      	cmp	r2, r1
 801dc38:	db02      	blt.n	801dc40 <cat_service+0x7068>
 801dc3a:	2900      	cmp	r1, #0
 801dc3c:	f041 81d2 	bne.w	801efe4 <cat_service+0x840c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801dc40:	f103 0010 	add.w	r0, r3, #16
        return (char*)self->desc->buf;
 801dc44:	689a      	ldr	r2, [r3, #8]
 801dc46:	ee08 2a10 	vmov	s16, r2
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801dc4a:	08c2      	lsrs	r2, r0, #3
 801dc4c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dc50:	f992 1000 	ldrsb.w	r1, [r2]
 801dc54:	f000 0207 	and.w	r2, r0, #7
 801dc58:	3203      	adds	r2, #3
 801dc5a:	428a      	cmp	r2, r1
 801dc5c:	db02      	blt.n	801dc64 <cat_service+0x708c>
 801dc5e:	2900      	cmp	r1, #0
 801dc60:	f041 81c2 	bne.w	801efe8 <cat_service+0x8410>
 801dc64:	691a      	ldr	r2, [r3, #16]
 801dc66:	9305      	str	r3, [sp, #20]
 801dc68:	2a00      	cmp	r2, #0
 801dc6a:	f000 87f0 	beq.w	801ec4e <cat_service+0x8076>
 801dc6e:	f7ec f85d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dc72:	9b05      	ldr	r3, [sp, #20]
 801dc74:	f103 000c 	add.w	r0, r3, #12
 801dc78:	08c2      	lsrs	r2, r0, #3
 801dc7a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dc7e:	f992 1000 	ldrsb.w	r1, [r2]
 801dc82:	f000 0207 	and.w	r2, r0, #7
 801dc86:	3203      	adds	r2, #3
 801dc88:	428a      	cmp	r2, r1
 801dc8a:	db02      	blt.n	801dc92 <cat_service+0x70ba>
 801dc8c:	2900      	cmp	r1, #0
 801dc8e:	f041 81b2 	bne.w	801eff6 <cat_service+0x841e>
 801dc92:	68da      	ldr	r2, [r3, #12]
 801dc94:	9205      	str	r2, [sp, #20]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801dc96:	f7ec f849 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dc9a:	9a05      	ldr	r2, [sp, #20]
 801dc9c:	ee18 0a10 	vmov	r0, s16
 801dca0:	4933      	ldr	r1, [pc, #204]	; (801dd70 <cat_service+0x7198>)
        self->position = 0;
 801dca2:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801dca6:	f004 fe96 	bl	80229d6 <strncpy>
        self->position = 0;
 801dcaa:	9a04      	ldr	r2, [sp, #16]
 801dcac:	f999 3000 	ldrsb.w	r3, [r9]
 801dcb0:	3203      	adds	r2, #3
 801dcb2:	429a      	cmp	r2, r3
 801dcb4:	db02      	blt.n	801dcbc <cat_service+0x70e4>
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	f041 8198 	bne.w	801efec <cat_service+0x8414>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801dcbc:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801dcc4:	08c3      	lsrs	r3, r0, #3
 801dcc6:	f000 0207 	and.w	r2, r0, #7
 801dcca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dcce:	f993 3000 	ldrsb.w	r3, [r3]
 801dcd2:	429a      	cmp	r2, r3
 801dcd4:	db02      	blt.n	801dcdc <cat_service+0x7104>
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	f041 818b 	bne.w	801eff2 <cat_service+0x841a>
        self->write_buf = get_new_line_chars(self);
 801dcdc:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801dce0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801dce4:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801dce8:	08c3      	lsrs	r3, r0, #3
 801dcea:	f000 0207 	and.w	r2, r0, #7
 801dcee:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dcf2:	3203      	adds	r2, #3
 801dcf4:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801dcf8:	4b1e      	ldr	r3, [pc, #120]	; (801dd74 <cat_service+0x719c>)
        self->write_buf = get_new_line_chars(self);
 801dcfa:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801dcfc:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801dcfe:	db02      	blt.n	801dd06 <cat_service+0x712e>
 801dd00:	2900      	cmp	r1, #0
 801dd02:	f041 85ed 	bne.w	801f8e0 <cat_service+0x8d08>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801dd06:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801dd0a:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801dd0c:	08c3      	lsrs	r3, r0, #3
 801dd0e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dd12:	f993 2000 	ldrsb.w	r2, [r3]
 801dd16:	f000 0307 	and.w	r3, r0, #7
 801dd1a:	3303      	adds	r3, #3
 801dd1c:	4293      	cmp	r3, r2
 801dd1e:	db02      	blt.n	801dd26 <cat_service+0x714e>
 801dd20:	2a00      	cmp	r2, #0
 801dd22:	f041 85df 	bne.w	801f8e4 <cat_service+0x8d0c>
        self->write_state_after = state_after;
 801dd26:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801dd2e:	08c3      	lsrs	r3, r0, #3
 801dd30:	f000 0207 	and.w	r2, r0, #7
 801dd34:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dd38:	f993 3000 	ldrsb.w	r3, [r3]
 801dd3c:	429a      	cmp	r2, r3
 801dd3e:	db02      	blt.n	801dd46 <cat_service+0x716e>
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	f041 85d1 	bne.w	801f8e8 <cat_service+0x8d10>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dd46:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801dd48:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dd4a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801dd4e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dd52:	f006 0207 	and.w	r2, r6, #7
 801dd56:	f993 3000 	ldrsb.w	r3, [r3]
 801dd5a:	429a      	cmp	r2, r3
 801dd5c:	db02      	blt.n	801dd64 <cat_service+0x718c>
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	f041 85c4 	bne.w	801f8ec <cat_service+0x8d14>
 801dd64:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801dd66:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dd68:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801dd6c:	f7f9 ba2c 	b.w	80171c8 <cat_service+0x5f0>
 801dd70:	24009200 	.word	0x24009200
 801dd74:	24009240 	.word	0x24009240
        return (char*)self->desc->buf;
 801dd78:	f7eb ffd8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dd7c:	9b07      	ldr	r3, [sp, #28]
 801dd7e:	9a06      	ldr	r2, [sp, #24]
 801dd80:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dd84:	3203      	adds	r2, #3
 801dd86:	f993 3000 	ldrsb.w	r3, [r3]
 801dd8a:	429a      	cmp	r2, r3
 801dd8c:	db02      	blt.n	801dd94 <cat_service+0x71bc>
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	f041 8155 	bne.w	801f03e <cat_service+0x8466>
 801dd94:	6823      	ldr	r3, [r4, #0]
 801dd96:	f103 0008 	add.w	r0, r3, #8
 801dd9a:	08c2      	lsrs	r2, r0, #3
 801dd9c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801dda0:	f992 1000 	ldrsb.w	r1, [r2]
 801dda4:	f000 0207 	and.w	r2, r0, #7
 801dda8:	3203      	adds	r2, #3
 801ddaa:	428a      	cmp	r2, r1
 801ddac:	db02      	blt.n	801ddb4 <cat_service+0x71dc>
 801ddae:	2900      	cmp	r1, #0
 801ddb0:	f041 8148 	bne.w	801f044 <cat_service+0x846c>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ddb4:	f103 0010 	add.w	r0, r3, #16
        return (char*)self->desc->buf;
 801ddb8:	689a      	ldr	r2, [r3, #8]
 801ddba:	ee08 2a10 	vmov	s16, r2
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ddbe:	08c2      	lsrs	r2, r0, #3
 801ddc0:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ddc4:	f992 1000 	ldrsb.w	r1, [r2]
 801ddc8:	f000 0207 	and.w	r2, r0, #7
 801ddcc:	3203      	adds	r2, #3
 801ddce:	428a      	cmp	r2, r1
 801ddd0:	db02      	blt.n	801ddd8 <cat_service+0x7200>
 801ddd2:	2900      	cmp	r1, #0
 801ddd4:	f041 8138 	bne.w	801f048 <cat_service+0x8470>
 801ddd8:	691a      	ldr	r2, [r3, #16]
 801ddda:	9305      	str	r3, [sp, #20]
 801dddc:	2a00      	cmp	r2, #0
 801ddde:	f000 8720 	beq.w	801ec22 <cat_service+0x804a>
 801dde2:	f7eb ffa3 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dde6:	9b05      	ldr	r3, [sp, #20]
 801dde8:	f103 000c 	add.w	r0, r3, #12
 801ddec:	08c2      	lsrs	r2, r0, #3
 801ddee:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ddf2:	f992 1000 	ldrsb.w	r1, [r2]
 801ddf6:	f000 0207 	and.w	r2, r0, #7
 801ddfa:	3203      	adds	r2, #3
 801ddfc:	428a      	cmp	r2, r1
 801ddfe:	db02      	blt.n	801de06 <cat_service+0x722e>
 801de00:	2900      	cmp	r1, #0
 801de02:	f041 8123 	bne.w	801f04c <cat_service+0x8474>
 801de06:	68da      	ldr	r2, [r3, #12]
 801de08:	9205      	str	r2, [sp, #20]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801de0a:	f7eb ff8f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801de0e:	9a05      	ldr	r2, [sp, #20]
 801de10:	ee18 0a10 	vmov	r0, s16
 801de14:	49d0      	ldr	r1, [pc, #832]	; (801e158 <cat_service+0x7580>)
        self->position = 0;
 801de16:	f109 59dc 	add.w	r9, r9, #461373440	; 0x1b800000
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801de1a:	f004 fddc 	bl	80229d6 <strncpy>
        self->position = 0;
 801de1e:	9a04      	ldr	r2, [sp, #16]
 801de20:	f999 3000 	ldrsb.w	r3, [r9]
 801de24:	3203      	adds	r2, #3
 801de26:	429a      	cmp	r2, r3
 801de28:	db02      	blt.n	801de30 <cat_service+0x7258>
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	f041 8204 	bne.w	801f238 <cat_service+0x8660>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801de30:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801de34:	2300      	movs	r3, #0
 801de36:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801de38:	08c3      	lsrs	r3, r0, #3
 801de3a:	f000 0207 	and.w	r2, r0, #7
 801de3e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801de42:	f993 3000 	ldrsb.w	r3, [r3]
 801de46:	429a      	cmp	r2, r3
 801de48:	db02      	blt.n	801de50 <cat_service+0x7278>
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	f041 81f7 	bne.w	801f23e <cat_service+0x8666>
        self->write_buf = get_new_line_chars(self);
 801de50:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801de54:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801de58:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801de5c:	08c3      	lsrs	r3, r0, #3
 801de5e:	f000 0207 	and.w	r2, r0, #7
 801de62:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801de66:	3203      	adds	r2, #3
 801de68:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801de6c:	4bbb      	ldr	r3, [pc, #748]	; (801e15c <cat_service+0x7584>)
        self->write_buf = get_new_line_chars(self);
 801de6e:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801de70:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801de72:	db02      	blt.n	801de7a <cat_service+0x72a2>
 801de74:	2900      	cmp	r1, #0
 801de76:	f041 81e4 	bne.w	801f242 <cat_service+0x866a>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801de7a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801de7e:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801de80:	08c3      	lsrs	r3, r0, #3
 801de82:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801de86:	f993 2000 	ldrsb.w	r2, [r3]
 801de8a:	f000 0307 	and.w	r3, r0, #7
 801de8e:	3303      	adds	r3, #3
 801de90:	4293      	cmp	r3, r2
 801de92:	db02      	blt.n	801de9a <cat_service+0x72c2>
 801de94:	2a00      	cmp	r2, #0
 801de96:	f041 81d6 	bne.w	801f246 <cat_service+0x866e>
        self->write_state_after = state_after;
 801de9a:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801de9e:	2300      	movs	r3, #0
 801dea0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801dea2:	08c3      	lsrs	r3, r0, #3
 801dea4:	f000 0207 	and.w	r2, r0, #7
 801dea8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801deac:	f993 3000 	ldrsb.w	r3, [r3]
 801deb0:	429a      	cmp	r2, r3
 801deb2:	db02      	blt.n	801deba <cat_service+0x72e2>
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	f041 804e 	bne.w	801ef56 <cat_service+0x837e>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801deba:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801debc:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801debe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801dec2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dec6:	f006 0207 	and.w	r2, r6, #7
 801deca:	f993 3000 	ldrsb.w	r3, [r3]
 801dece:	429a      	cmp	r2, r3
 801ded0:	db02      	blt.n	801ded8 <cat_service+0x7300>
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	f041 8041 	bne.w	801ef5a <cat_service+0x8382>
 801ded8:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801deda:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801dedc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801dee0:	f7f9 b972 	b.w	80171c8 <cat_service+0x5f0>
                                size++;
 801dee4:	f7eb ff22 	bl	8009d2c <__sanitizer_cov_trace_pc>
                ch = get_atcmd_buf(self)[self->position++];
 801dee8:	1970      	adds	r0, r6, r5
 801deea:	f108 0802 	add.w	r8, r8, #2
 801deee:	08c3      	lsrs	r3, r0, #3
 801def0:	f000 0207 	and.w	r2, r0, #7
 801def4:	f8c4 8018 	str.w	r8, [r4, #24]
 801def8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801defc:	f993 3000 	ldrsb.w	r3, [r3]
 801df00:	429a      	cmp	r2, r3
 801df02:	f6ff aa7e 	blt.w	801d402 <cat_service+0x682a>
 801df06:	2b00      	cmp	r3, #0
 801df08:	f43f aa7b 	beq.w	801d402 <cat_service+0x682a>
 801df0c:	f7eb fb2c 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801df10:	f7eb ff0c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801df14:	9904      	ldr	r1, [sp, #16]
 801df16:	f101 000c 	add.w	r0, r1, #12
 801df1a:	08c3      	lsrs	r3, r0, #3
 801df1c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801df20:	f993 2000 	ldrsb.w	r2, [r3]
 801df24:	f000 0307 	and.w	r3, r0, #7
 801df28:	3303      	adds	r3, #3
 801df2a:	4293      	cmp	r3, r2
 801df2c:	db02      	blt.n	801df34 <cat_service+0x735c>
 801df2e:	2a00      	cmp	r2, #0
 801df30:	f041 8037 	bne.w	801efa2 <cat_service+0x83ca>
 801df34:	68ca      	ldr	r2, [r1, #12]
 801df36:	0852      	lsrs	r2, r2, #1
 801df38:	f7fd bf92 	b.w	801be60 <cat_service+0x5288>
                                self->state = (self->current_char == '\n') ? CAT_STATE_COMMAND_NOT_FOUND : CAT_STATE_ERROR;
 801df3c:	f7eb fef6 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801df40:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801df44:	08c3      	lsrs	r3, r0, #3
 801df46:	f000 0207 	and.w	r2, r0, #7
 801df4a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801df4e:	f993 3000 	ldrsb.w	r3, [r3]
 801df52:	429a      	cmp	r2, r3
 801df54:	db02      	blt.n	801df5c <cat_service+0x7384>
 801df56:	2b00      	cmp	r3, #0
 801df58:	f041 8234 	bne.w	801f3c4 <cat_service+0x87ec>
 801df5c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801df60:	2b0a      	cmp	r3, #10
 801df62:	bf0c      	ite	eq
 801df64:	2507      	moveq	r5, #7
 801df66:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801df6a:	f7eb fedf 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801df6e:	f006 0207 	and.w	r2, r6, #7
 801df72:	08f3      	lsrs	r3, r6, #3
 801df74:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801df78:	f993 3000 	ldrsb.w	r3, [r3]
 801df7c:	429a      	cmp	r2, r3
 801df7e:	db02      	blt.n	801df86 <cat_service+0x73ae>
 801df80:	2b00      	cmp	r3, #0
 801df82:	f041 8221 	bne.w	801f3c8 <cat_service+0x87f0>
 801df86:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
                s = search_command(self);
 801df8a:	2501      	movs	r5, #1
                                return CAT_STATUS_BUSY;
 801df8c:	f7f9 b91c 	b.w	80171c8 <cat_service+0x5f0>
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 801df90:	f7eb fecc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801df94:	f104 0020 	add.w	r0, r4, #32
 801df98:	08c3      	lsrs	r3, r0, #3
 801df9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801df9e:	f993 2000 	ldrsb.w	r2, [r3]
 801dfa2:	f000 0307 	and.w	r3, r0, #7
 801dfa6:	3303      	adds	r3, #3
 801dfa8:	4293      	cmp	r3, r2
 801dfaa:	db02      	blt.n	801dfb2 <cat_service+0x73da>
 801dfac:	2a00      	cmp	r2, #0
 801dfae:	f041 8346 	bne.w	801f63e <cat_service+0x8a66>
 801dfb2:	6a23      	ldr	r3, [r4, #32]
 801dfb4:	9304      	str	r3, [sp, #16]
 801dfb6:	f7fd bb9b 	b.w	801b6f0 <cat_service+0x4b18>
        return (char*)self->desc->buf;
 801dfba:	f7eb feb7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801dfbe:	08e3      	lsrs	r3, r4, #3
 801dfc0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dfc4:	f993 2000 	ldrsb.w	r2, [r3]
 801dfc8:	f004 0307 	and.w	r3, r4, #7
 801dfcc:	3303      	adds	r3, #3
 801dfce:	4293      	cmp	r3, r2
 801dfd0:	db02      	blt.n	801dfd8 <cat_service+0x7400>
 801dfd2:	2a00      	cmp	r2, #0
 801dfd4:	f041 813c 	bne.w	801f250 <cat_service+0x8678>
 801dfd8:	f8d4 9000 	ldr.w	r9, [r4]
 801dfdc:	f109 0008 	add.w	r0, r9, #8
 801dfe0:	08c3      	lsrs	r3, r0, #3
 801dfe2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801dfe6:	f993 2000 	ldrsb.w	r2, [r3]
 801dfea:	f000 0307 	and.w	r3, r0, #7
 801dfee:	3303      	adds	r3, #3
 801dff0:	4293      	cmp	r3, r2
 801dff2:	db02      	blt.n	801dffa <cat_service+0x7422>
 801dff4:	2a00      	cmp	r2, #0
 801dff6:	f041 812e 	bne.w	801f256 <cat_service+0x867e>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801dffa:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801dffe:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e002:	08c3      	lsrs	r3, r0, #3
 801e004:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e008:	f993 2000 	ldrsb.w	r2, [r3]
 801e00c:	f000 0307 	and.w	r3, r0, #7
 801e010:	3303      	adds	r3, #3
 801e012:	4293      	cmp	r3, r2
 801e014:	db02      	blt.n	801e01c <cat_service+0x7444>
 801e016:	2a00      	cmp	r2, #0
 801e018:	f041 811f 	bne.w	801f25a <cat_service+0x8682>
 801e01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e020:	2b00      	cmp	r3, #0
 801e022:	f000 86e4 	beq.w	801edee <cat_service+0x8216>
 801e026:	f7eb fe81 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e02a:	f109 000c 	add.w	r0, r9, #12
 801e02e:	08c3      	lsrs	r3, r0, #3
 801e030:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e034:	f993 2000 	ldrsb.w	r2, [r3]
 801e038:	f000 0307 	and.w	r3, r0, #7
 801e03c:	3303      	adds	r3, #3
 801e03e:	4293      	cmp	r3, r2
 801e040:	db02      	blt.n	801e048 <cat_service+0x7470>
 801e042:	2a00      	cmp	r2, #0
 801e044:	f041 80e9 	bne.w	801f21a <cat_service+0x8642>
 801e048:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801e04c:	f7eb fe6e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e050:	464a      	mov	r2, r9
 801e052:	4628      	mov	r0, r5
 801e054:	4940      	ldr	r1, [pc, #256]	; (801e158 <cat_service+0x7580>)
 801e056:	f004 fcbe 	bl	80229d6 <strncpy>
        self->position = 0;
 801e05a:	f104 0018 	add.w	r0, r4, #24
 801e05e:	08c3      	lsrs	r3, r0, #3
 801e060:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e064:	f993 2000 	ldrsb.w	r2, [r3]
 801e068:	f000 0307 	and.w	r3, r0, #7
 801e06c:	3303      	adds	r3, #3
 801e06e:	4293      	cmp	r3, r2
 801e070:	db02      	blt.n	801e078 <cat_service+0x74a0>
 801e072:	2a00      	cmp	r2, #0
 801e074:	f041 80d3 	bne.w	801f21e <cat_service+0x8646>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e078:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801e07c:	2300      	movs	r3, #0
 801e07e:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e080:	08c3      	lsrs	r3, r0, #3
 801e082:	f000 0207 	and.w	r2, r0, #7
 801e086:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e08a:	f993 3000 	ldrsb.w	r3, [r3]
 801e08e:	429a      	cmp	r2, r3
 801e090:	db02      	blt.n	801e098 <cat_service+0x74c0>
 801e092:	2b00      	cmp	r3, #0
 801e094:	f041 80c5 	bne.w	801f222 <cat_service+0x864a>
        self->write_buf = get_new_line_chars(self);
 801e098:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e09c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801e0a0:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801e0a4:	08c3      	lsrs	r3, r0, #3
 801e0a6:	f000 0207 	and.w	r2, r0, #7
 801e0aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e0ae:	3203      	adds	r2, #3
 801e0b0:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e0b4:	4b29      	ldr	r3, [pc, #164]	; (801e15c <cat_service+0x7584>)
        self->write_buf = get_new_line_chars(self);
 801e0b6:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e0b8:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801e0ba:	db02      	blt.n	801e0c2 <cat_service+0x74ea>
 801e0bc:	2900      	cmp	r1, #0
 801e0be:	f041 80b2 	bne.w	801f226 <cat_service+0x864e>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e0c2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801e0c6:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e0c8:	08c3      	lsrs	r3, r0, #3
 801e0ca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e0ce:	f993 2000 	ldrsb.w	r2, [r3]
 801e0d2:	f000 0307 	and.w	r3, r0, #7
 801e0d6:	3303      	adds	r3, #3
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	db02      	blt.n	801e0e2 <cat_service+0x750a>
 801e0dc:	2a00      	cmp	r2, #0
 801e0de:	f041 80a4 	bne.w	801f22a <cat_service+0x8652>
        self->write_state_after = state_after;
 801e0e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801e0ea:	08c3      	lsrs	r3, r0, #3
 801e0ec:	f000 0207 	and.w	r2, r0, #7
 801e0f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e0f4:	f993 3000 	ldrsb.w	r3, [r3]
 801e0f8:	429a      	cmp	r2, r3
 801e0fa:	db02      	blt.n	801e102 <cat_service+0x752a>
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	f041 8096 	bne.w	801f22e <cat_service+0x8656>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e102:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801e104:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e106:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801e10a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e10e:	f006 0207 	and.w	r2, r6, #7
 801e112:	f993 3000 	ldrsb.w	r3, [r3]
 801e116:	429a      	cmp	r2, r3
 801e118:	db02      	blt.n	801e120 <cat_service+0x7548>
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	f041 8089 	bne.w	801f232 <cat_service+0x865a>
 801e120:	2312      	movs	r3, #18
                s = command_found(self);
 801e122:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e124:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801e128:	f7f9 b84e 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e12c:	f7eb fdfe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e130:	f106 000c 	add.w	r0, r6, #12
 801e134:	08c3      	lsrs	r3, r0, #3
 801e136:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e13a:	f993 2000 	ldrsb.w	r2, [r3]
 801e13e:	f000 0307 	and.w	r3, r0, #7
 801e142:	3303      	adds	r3, #3
 801e144:	4293      	cmp	r3, r2
 801e146:	db02      	blt.n	801e14e <cat_service+0x7576>
 801e148:	2a00      	cmp	r2, #0
 801e14a:	f040 87da 	bne.w	801f102 <cat_service+0x852a>
 801e14e:	68f3      	ldr	r3, [r6, #12]
 801e150:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801e154:	f7fd bfbd 	b.w	801c0d2 <cat_service+0x54fa>
 801e158:	24009200 	.word	0x24009200
 801e15c:	24009240 	.word	0x24009240
                self->write_size = 0;
 801e160:	f104 091c 	add.w	r9, r4, #28
 801e164:	f7eb fde2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e168:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801e16c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e170:	f993 2000 	ldrsb.w	r2, [r3]
 801e174:	f009 0307 	and.w	r3, r9, #7
 801e178:	3303      	adds	r3, #3
 801e17a:	4293      	cmp	r3, r2
 801e17c:	db02      	blt.n	801e184 <cat_service+0x75ac>
 801e17e:	2a00      	cmp	r2, #0
 801e180:	f041 8119 	bne.w	801f3b6 <cat_service+0x87de>
 801e184:	2300      	movs	r3, #0
 801e186:	61e3      	str	r3, [r4, #28]
                return 0;
 801e188:	f7fc ba48 	b.w	801a61c <cat_service+0x3a44>
                if (val > UINT32_MAX)
 801e18c:	f7eb fdce 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e192:	2b00      	cmp	r3, #0
 801e194:	f47f aa2c 	bne.w	801d5f0 <cat_service+0x6a18>
                *(uint32_t *)(self->var->data) = val;
 801e198:	f7eb fdc8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e19c:	9b04      	ldr	r3, [sp, #16]
 801e19e:	f103 0008 	add.w	r0, r3, #8
 801e1a2:	08c3      	lsrs	r3, r0, #3
 801e1a4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e1a8:	f993 2000 	ldrsb.w	r2, [r3]
 801e1ac:	f000 0307 	and.w	r3, r0, #7
 801e1b0:	3303      	adds	r3, #3
 801e1b2:	4293      	cmp	r3, r2
 801e1b4:	db02      	blt.n	801e1bc <cat_service+0x75e4>
 801e1b6:	2a00      	cmp	r2, #0
 801e1b8:	f041 800b 	bne.w	801f1d2 <cat_service+0x85fa>
 801e1bc:	9b04      	ldr	r3, [sp, #16]
 801e1be:	6898      	ldr	r0, [r3, #8]
 801e1c0:	08c3      	lsrs	r3, r0, #3
 801e1c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e1c6:	f993 2000 	ldrsb.w	r2, [r3]
 801e1ca:	f000 0307 	and.w	r3, r0, #7
 801e1ce:	3303      	adds	r3, #3
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	db02      	blt.n	801e1da <cat_service+0x7602>
 801e1d4:	2a00      	cmp	r2, #0
 801e1d6:	f041 80d6 	bne.w	801f386 <cat_service+0x87ae>
 801e1da:	9b08      	ldr	r3, [sp, #32]
 801e1dc:	6003      	str	r3, [r0, #0]
        self->write_size = self->var->data_size;
 801e1de:	f7eb fda5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1e6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e1ea:	3203      	adds	r2, #3
 801e1ec:	f993 3000 	ldrsb.w	r3, [r3]
 801e1f0:	429a      	cmp	r2, r3
 801e1f2:	db02      	blt.n	801e1fa <cat_service+0x7622>
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	f041 80c8 	bne.w	801f38a <cat_service+0x87b2>
 801e1fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e1fc:	f103 000c 	add.w	r0, r3, #12
 801e200:	9304      	str	r3, [sp, #16]
 801e202:	08c3      	lsrs	r3, r0, #3
 801e204:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e208:	f993 2000 	ldrsb.w	r2, [r3]
 801e20c:	f000 0307 	and.w	r3, r0, #7
 801e210:	3303      	adds	r3, #3
 801e212:	4293      	cmp	r3, r2
 801e214:	db02      	blt.n	801e21c <cat_service+0x7644>
 801e216:	2a00      	cmp	r2, #0
 801e218:	f041 80ba 	bne.w	801f390 <cat_service+0x87b8>
 801e21c:	f104 091c 	add.w	r9, r4, #28
 801e220:	9b04      	ldr	r3, [sp, #16]
 801e222:	68da      	ldr	r2, [r3, #12]
 801e224:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801e228:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e22c:	f993 1000 	ldrsb.w	r1, [r3]
 801e230:	f009 0307 	and.w	r3, r9, #7
 801e234:	3303      	adds	r3, #3
 801e236:	428b      	cmp	r3, r1
 801e238:	db02      	blt.n	801e240 <cat_service+0x7668>
 801e23a:	2900      	cmp	r1, #0
 801e23c:	f041 80aa 	bne.w	801f394 <cat_service+0x87bc>
 801e240:	61e2      	str	r2, [r4, #28]
        return 0;
 801e242:	f7fc b9eb 	b.w	801a61c <cat_service+0x3a44>
                if (val > UINT8_MAX)
 801e246:	f7eb fd71 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e24a:	9b08      	ldr	r3, [sp, #32]
 801e24c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e252:	f173 0300 	sbcs.w	r3, r3, #0
 801e256:	f4bf a9cb 	bcs.w	801d5f0 <cat_service+0x6a18>
                *(uint8_t *)(self->var->data) = val;
 801e25a:	f7eb fd67 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e25e:	9b04      	ldr	r3, [sp, #16]
 801e260:	f103 0008 	add.w	r0, r3, #8
 801e264:	08c3      	lsrs	r3, r0, #3
 801e266:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e26a:	f993 2000 	ldrsb.w	r2, [r3]
 801e26e:	f000 0307 	and.w	r3, r0, #7
 801e272:	3303      	adds	r3, #3
 801e274:	4293      	cmp	r3, r2
 801e276:	db02      	blt.n	801e27e <cat_service+0x76a6>
 801e278:	2a00      	cmp	r2, #0
 801e27a:	f040 87ae 	bne.w	801f1da <cat_service+0x8602>
 801e27e:	9b04      	ldr	r3, [sp, #16]
 801e280:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801e284:	6898      	ldr	r0, [r3, #8]
 801e286:	08c3      	lsrs	r3, r0, #3
 801e288:	f000 0107 	and.w	r1, r0, #7
 801e28c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e290:	f993 3000 	ldrsb.w	r3, [r3]
 801e294:	4299      	cmp	r1, r3
 801e296:	db02      	blt.n	801e29e <cat_service+0x76c6>
 801e298:	2b00      	cmp	r3, #0
 801e29a:	f040 8798 	bne.w	801f1ce <cat_service+0x85f6>
 801e29e:	7002      	strb	r2, [r0, #0]
                break;
 801e2a0:	e79d      	b.n	801e1de <cat_service+0x7606>
                if (val > UINT16_MAX)
 801e2a2:	f7eb fd43 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e2a6:	9b08      	ldr	r3, [sp, #32]
 801e2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ae:	f173 0300 	sbcs.w	r3, r3, #0
 801e2b2:	f4bf a99d 	bcs.w	801d5f0 <cat_service+0x6a18>
                *(uint16_t *)(self->var->data) = val;
 801e2b6:	f7eb fd39 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e2ba:	9b04      	ldr	r3, [sp, #16]
 801e2bc:	f103 0008 	add.w	r0, r3, #8
 801e2c0:	08c3      	lsrs	r3, r0, #3
 801e2c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e2c6:	f993 2000 	ldrsb.w	r2, [r3]
 801e2ca:	f000 0307 	and.w	r3, r0, #7
 801e2ce:	3303      	adds	r3, #3
 801e2d0:	4293      	cmp	r3, r2
 801e2d2:	db02      	blt.n	801e2da <cat_service+0x7702>
 801e2d4:	2a00      	cmp	r2, #0
 801e2d6:	f041 801b 	bne.w	801f310 <cat_service+0x8738>
 801e2da:	9b04      	ldr	r3, [sp, #16]
 801e2dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e2e0:	6898      	ldr	r0, [r3, #8]
 801e2e2:	08c3      	lsrs	r3, r0, #3
 801e2e4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e2e8:	f993 1000 	ldrsb.w	r1, [r3]
 801e2ec:	f000 0307 	and.w	r3, r0, #7
 801e2f0:	3301      	adds	r3, #1
 801e2f2:	428b      	cmp	r3, r1
 801e2f4:	db02      	blt.n	801e2fc <cat_service+0x7724>
 801e2f6:	2900      	cmp	r1, #0
 801e2f8:	f041 800c 	bne.w	801f314 <cat_service+0x873c>
 801e2fc:	8002      	strh	r2, [r0, #0]
                break;
 801e2fe:	e76e      	b.n	801e1de <cat_service+0x7606>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e300:	f7eb fd14 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e304:	f109 000c 	add.w	r0, r9, #12
 801e308:	08c3      	lsrs	r3, r0, #3
 801e30a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e30e:	f993 2000 	ldrsb.w	r2, [r3]
 801e312:	f000 0307 	and.w	r3, r0, #7
 801e316:	3303      	adds	r3, #3
 801e318:	4293      	cmp	r3, r2
 801e31a:	db02      	blt.n	801e322 <cat_service+0x774a>
 801e31c:	2a00      	cmp	r2, #0
 801e31e:	f040 87e8 	bne.w	801f2f2 <cat_service+0x871a>
 801e322:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e326:	0852      	lsrs	r2, r2, #1
 801e328:	f7fe b82f 	b.w	801c38a <cat_service+0x57b2>
 801e32c:	f7eb fcfe 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e330:	f109 000c 	add.w	r0, r9, #12
 801e334:	08c3      	lsrs	r3, r0, #3
 801e336:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e33a:	f993 2000 	ldrsb.w	r2, [r3]
 801e33e:	f000 0307 	and.w	r3, r0, #7
 801e342:	3303      	adds	r3, #3
 801e344:	4293      	cmp	r3, r2
 801e346:	db02      	blt.n	801e34e <cat_service+0x7776>
 801e348:	2a00      	cmp	r2, #0
 801e34a:	f040 87ae 	bne.w	801f2aa <cat_service+0x86d2>
 801e34e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e352:	0852      	lsrs	r2, r2, #1
 801e354:	f7fe b8ec 	b.w	801c530 <cat_service+0x5958>
        return NULL;
 801e358:	9f05      	ldr	r7, [sp, #20]
 801e35a:	2100      	movs	r1, #0
 801e35c:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
 801e360:	f7fa b9a4 	b.w	80186ac <cat_service+0x1ad4>
                if ((val < INT8_MIN) || (val > INT8_MAX))
 801e364:	f7eb fce2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e368:	f119 0380 	adds.w	r3, r9, #128	; 0x80
 801e36c:	9a05      	ldr	r2, [sp, #20]
 801e36e:	f142 0200 	adc.w	r2, r2, #0
 801e372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e376:	f172 0300 	sbcs.w	r3, r2, #0
 801e37a:	f4be ad40 	bcs.w	801cdfe <cat_service+0x6226>
                *(int8_t *)(self->var->data) = val;
 801e37e:	f7eb fcd5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e382:	9b04      	ldr	r3, [sp, #16]
 801e384:	f103 0008 	add.w	r0, r3, #8
 801e388:	08c3      	lsrs	r3, r0, #3
 801e38a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e38e:	f993 2000 	ldrsb.w	r2, [r3]
 801e392:	f000 0307 	and.w	r3, r0, #7
 801e396:	3303      	adds	r3, #3
 801e398:	4293      	cmp	r3, r2
 801e39a:	db02      	blt.n	801e3a2 <cat_service+0x77ca>
 801e39c:	2a00      	cmp	r2, #0
 801e39e:	f040 871e 	bne.w	801f1de <cat_service+0x8606>
 801e3a2:	9b04      	ldr	r3, [sp, #16]
 801e3a4:	fa4f f989 	sxtb.w	r9, r9
 801e3a8:	6898      	ldr	r0, [r3, #8]
 801e3aa:	08c3      	lsrs	r3, r0, #3
 801e3ac:	f000 0207 	and.w	r2, r0, #7
 801e3b0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e3b4:	f993 3000 	ldrsb.w	r3, [r3]
 801e3b8:	429a      	cmp	r2, r3
 801e3ba:	db02      	blt.n	801e3c2 <cat_service+0x77ea>
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	f040 8710 	bne.w	801f1e2 <cat_service+0x860a>
 801e3c2:	f880 9000 	strb.w	r9, [r0]
        self->write_size = self->var->data_size;
 801e3c6:	f7eb fcb1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3ce:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e3d2:	3203      	adds	r2, #3
 801e3d4:	f993 3000 	ldrsb.w	r3, [r3]
 801e3d8:	429a      	cmp	r2, r3
 801e3da:	db02      	blt.n	801e3e2 <cat_service+0x780a>
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	f040 8702 	bne.w	801f1e6 <cat_service+0x860e>
 801e3e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e3e4:	f103 000c 	add.w	r0, r3, #12
 801e3e8:	9304      	str	r3, [sp, #16]
 801e3ea:	08c3      	lsrs	r3, r0, #3
 801e3ec:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e3f0:	f993 2000 	ldrsb.w	r2, [r3]
 801e3f4:	f000 0307 	and.w	r3, r0, #7
 801e3f8:	3303      	adds	r3, #3
 801e3fa:	4293      	cmp	r3, r2
 801e3fc:	db02      	blt.n	801e404 <cat_service+0x782c>
 801e3fe:	2a00      	cmp	r2, #0
 801e400:	f040 86f4 	bne.w	801f1ec <cat_service+0x8614>
 801e404:	f104 091c 	add.w	r9, r4, #28
 801e408:	9b04      	ldr	r3, [sp, #16]
 801e40a:	68da      	ldr	r2, [r3, #12]
 801e40c:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801e410:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e414:	f993 1000 	ldrsb.w	r1, [r3]
 801e418:	f009 0307 	and.w	r3, r9, #7
 801e41c:	3303      	adds	r3, #3
 801e41e:	428b      	cmp	r3, r1
 801e420:	f6ff af0e 	blt.w	801e240 <cat_service+0x7668>
 801e424:	2900      	cmp	r1, #0
 801e426:	f43f af0b 	beq.w	801e240 <cat_service+0x7668>
 801e42a:	4648      	mov	r0, r9
 801e42c:	f7eb f898 	bl	8009560 <__asan_report_store4>
                if ((val < INT32_MIN) || (val > INT32_MAX))
 801e430:	f7eb fc7c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e434:	f119 4300 	adds.w	r3, r9, #2147483648	; 0x80000000
 801e438:	9b05      	ldr	r3, [sp, #20]
 801e43a:	f143 0300 	adc.w	r3, r3, #0
 801e43e:	2b00      	cmp	r3, #0
 801e440:	f47e acdd 	bne.w	801cdfe <cat_service+0x6226>
                *(int32_t *)(self->var->data) = val;
 801e444:	f7eb fc72 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e448:	9b04      	ldr	r3, [sp, #16]
 801e44a:	f103 0008 	add.w	r0, r3, #8
 801e44e:	08c3      	lsrs	r3, r0, #3
 801e450:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e454:	f993 2000 	ldrsb.w	r2, [r3]
 801e458:	f000 0307 	and.w	r3, r0, #7
 801e45c:	3303      	adds	r3, #3
 801e45e:	4293      	cmp	r3, r2
 801e460:	db02      	blt.n	801e468 <cat_service+0x7890>
 801e462:	2a00      	cmp	r2, #0
 801e464:	f040 8773 	bne.w	801f34e <cat_service+0x8776>
 801e468:	9b04      	ldr	r3, [sp, #16]
 801e46a:	6898      	ldr	r0, [r3, #8]
 801e46c:	08c3      	lsrs	r3, r0, #3
 801e46e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e472:	f993 2000 	ldrsb.w	r2, [r3]
 801e476:	f000 0307 	and.w	r3, r0, #7
 801e47a:	3303      	adds	r3, #3
 801e47c:	4293      	cmp	r3, r2
 801e47e:	db02      	blt.n	801e486 <cat_service+0x78ae>
 801e480:	2a00      	cmp	r2, #0
 801e482:	f040 875e 	bne.w	801f342 <cat_service+0x876a>
 801e486:	f8c0 9000 	str.w	r9, [r0]
                break;
 801e48a:	e79c      	b.n	801e3c6 <cat_service+0x77ee>
                if ((val < INT16_MIN) || (val > INT16_MAX))
 801e48c:	f7eb fc4e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e490:	f519 4300 	adds.w	r3, r9, #32768	; 0x8000
 801e494:	9a05      	ldr	r2, [sp, #20]
 801e496:	f142 0200 	adc.w	r2, r2, #0
 801e49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e49e:	f172 0300 	sbcs.w	r3, r2, #0
 801e4a2:	f4be acac 	bcs.w	801cdfe <cat_service+0x6226>
                *(int16_t *)(self->var->data) = val;
 801e4a6:	f7eb fc41 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e4aa:	9b04      	ldr	r3, [sp, #16]
 801e4ac:	f103 0008 	add.w	r0, r3, #8
 801e4b0:	08c3      	lsrs	r3, r0, #3
 801e4b2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e4b6:	f993 2000 	ldrsb.w	r2, [r3]
 801e4ba:	f000 0307 	and.w	r3, r0, #7
 801e4be:	3303      	adds	r3, #3
 801e4c0:	4293      	cmp	r3, r2
 801e4c2:	db02      	blt.n	801e4ca <cat_service+0x78f2>
 801e4c4:	2a00      	cmp	r2, #0
 801e4c6:	f041 8145 	bne.w	801f754 <cat_service+0x8b7c>
 801e4ca:	9b04      	ldr	r3, [sp, #16]
 801e4cc:	fa0f f989 	sxth.w	r9, r9
 801e4d0:	6898      	ldr	r0, [r3, #8]
 801e4d2:	08c3      	lsrs	r3, r0, #3
 801e4d4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e4d8:	f993 2000 	ldrsb.w	r2, [r3]
 801e4dc:	f000 0307 	and.w	r3, r0, #7
 801e4e0:	3301      	adds	r3, #1
 801e4e2:	4293      	cmp	r3, r2
 801e4e4:	db02      	blt.n	801e4ec <cat_service+0x7914>
 801e4e6:	2a00      	cmp	r2, #0
 801e4e8:	f041 8136 	bne.w	801f758 <cat_service+0x8b80>
 801e4ec:	f8a0 9000 	strh.w	r9, [r0]
                break;
 801e4f0:	e769      	b.n	801e3c6 <cat_service+0x77ee>
        switch (self->state) {
 801e4f2:	f104 062e 	add.w	r6, r4, #46	; 0x2e
 801e4f6:	f7eb fc19 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e4fa:	08f3      	lsrs	r3, r6, #3
 801e4fc:	f006 0207 	and.w	r2, r6, #7
 801e500:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e504:	f993 3000 	ldrsb.w	r3, [r3]
 801e508:	429a      	cmp	r2, r3
 801e50a:	db02      	blt.n	801e512 <cat_service+0x793a>
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	f040 8722 	bne.w	801f356 <cat_service+0x877e>
 801e512:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 801e516:	3301      	adds	r3, #1
 801e518:	2b19      	cmp	r3, #25
 801e51a:	f201 8531 	bhi.w	801ff80 <cat_service+0x93a8>
 801e51e:	a201      	add	r2, pc, #4	; (adr r2, 801e524 <cat_service+0x794c>)
 801e520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e524:	08019e17 	.word	0x08019e17
 801e528:	08019d6b 	.word	0x08019d6b
 801e52c:	08019dc1 	.word	0x08019dc1
 801e530:	08019d15 	.word	0x08019d15
 801e534:	0801a039 	.word	0x0801a039
 801e538:	08019fe3 	.word	0x08019fe3
 801e53c:	08019fdb 	.word	0x08019fdb
 801e540:	08019fd3 	.word	0x08019fd3
 801e544:	08019fcb 	.word	0x08019fcb
 801e548:	08019f75 	.word	0x08019f75
 801e54c:	08019f0b 	.word	0x08019f0b
 801e550:	08019f03 	.word	0x08019f03
 801e554:	0801a059 	.word	0x0801a059
 801e558:	0801a051 	.word	0x0801a051
 801e55c:	0801a049 	.word	0x0801a049
 801e560:	0801a041 	.word	0x0801a041
 801e564:	0801a0b7 	.word	0x0801a0b7
 801e568:	0801a0af 	.word	0x0801a0af
 801e56c:	08019ea1 	.word	0x08019ea1
 801e570:	08019e6d 	.word	0x08019e6d
 801e574:	08019efb 	.word	0x08019efb
 801e578:	08019ef3 	.word	0x08019ef3
 801e57c:	08019eeb 	.word	0x08019eeb
 801e580:	08019ee3 	.word	0x08019ee3
 801e584:	08019edb 	.word	0x08019edb
 801e588:	08019ed3 	.word	0x08019ed3
                if (val > UINT16_MAX)
 801e58c:	f7eb fbce 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e590:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 801e594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e596:	f173 0300 	sbcs.w	r3, r3, #0
 801e59a:	f4ba ae0b 	bcs.w	80191b4 <cat_service+0x25dc>
                *(uint16_t *)(self->var->data) = val;
 801e59e:	f7eb fbc5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e5a2:	9b04      	ldr	r3, [sp, #16]
 801e5a4:	f103 0008 	add.w	r0, r3, #8
 801e5a8:	08c3      	lsrs	r3, r0, #3
 801e5aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e5ae:	f993 2000 	ldrsb.w	r2, [r3]
 801e5b2:	f000 0307 	and.w	r3, r0, #7
 801e5b6:	3303      	adds	r3, #3
 801e5b8:	4293      	cmp	r3, r2
 801e5ba:	db02      	blt.n	801e5c2 <cat_service+0x79ea>
 801e5bc:	2a00      	cmp	r2, #0
 801e5be:	f040 86cd 	bne.w	801f35c <cat_service+0x8784>
 801e5c2:	9b04      	ldr	r3, [sp, #16]
 801e5c4:	fa1f f989 	uxth.w	r9, r9
 801e5c8:	6898      	ldr	r0, [r3, #8]
 801e5ca:	08c3      	lsrs	r3, r0, #3
 801e5cc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e5d0:	f993 2000 	ldrsb.w	r2, [r3]
 801e5d4:	f000 0307 	and.w	r3, r0, #7
 801e5d8:	3301      	adds	r3, #1
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	db02      	blt.n	801e5e4 <cat_service+0x7a0c>
 801e5de:	2a00      	cmp	r2, #0
 801e5e0:	f040 86be 	bne.w	801f360 <cat_service+0x8788>
 801e5e4:	f8a0 9000 	strh.w	r9, [r0]
        self->write_size = self->var->data_size;
 801e5e8:	f7eb fba0 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e5f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e5f4:	3203      	adds	r2, #3
 801e5f6:	f993 3000 	ldrsb.w	r3, [r3]
 801e5fa:	429a      	cmp	r2, r3
 801e5fc:	db02      	blt.n	801e604 <cat_service+0x7a2c>
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	f041 8180 	bne.w	801f904 <cat_service+0x8d2c>
 801e604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e606:	f103 000c 	add.w	r0, r3, #12
 801e60a:	9304      	str	r3, [sp, #16]
 801e60c:	08c3      	lsrs	r3, r0, #3
 801e60e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e612:	f993 2000 	ldrsb.w	r2, [r3]
 801e616:	f000 0307 	and.w	r3, r0, #7
 801e61a:	3303      	adds	r3, #3
 801e61c:	4293      	cmp	r3, r2
 801e61e:	db02      	blt.n	801e626 <cat_service+0x7a4e>
 801e620:	2a00      	cmp	r2, #0
 801e622:	f041 8172 	bne.w	801f90a <cat_service+0x8d32>
 801e626:	f104 091c 	add.w	r9, r4, #28
 801e62a:	9b04      	ldr	r3, [sp, #16]
 801e62c:	68da      	ldr	r2, [r3, #12]
 801e62e:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801e632:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e636:	f993 1000 	ldrsb.w	r1, [r3]
 801e63a:	f009 0307 	and.w	r3, r9, #7
 801e63e:	3303      	adds	r3, #3
 801e640:	428b      	cmp	r3, r1
 801e642:	f6ff adfd 	blt.w	801e240 <cat_service+0x7668>
 801e646:	2900      	cmp	r1, #0
 801e648:	f43f adfa 	beq.w	801e240 <cat_service+0x7668>
 801e64c:	4648      	mov	r0, r9
 801e64e:	f7ea ff87 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801e652:	f7eb fb6b 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e656:	f109 0008 	add.w	r0, r9, #8
 801e65a:	08c3      	lsrs	r3, r0, #3
 801e65c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e660:	f993 2000 	ldrsb.w	r2, [r3]
 801e664:	f000 0307 	and.w	r3, r0, #7
 801e668:	3303      	adds	r3, #3
 801e66a:	4293      	cmp	r3, r2
 801e66c:	db02      	blt.n	801e674 <cat_service+0x7a9c>
 801e66e:	2a00      	cmp	r2, #0
 801e670:	f040 867b 	bne.w	801f36a <cat_service+0x8792>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e674:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801e678:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e67c:	08c3      	lsrs	r3, r0, #3
 801e67e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e682:	f993 2000 	ldrsb.w	r2, [r3]
 801e686:	f000 0307 	and.w	r3, r0, #7
 801e68a:	3303      	adds	r3, #3
 801e68c:	4293      	cmp	r3, r2
 801e68e:	db02      	blt.n	801e696 <cat_service+0x7abe>
 801e690:	2a00      	cmp	r2, #0
 801e692:	f040 866c 	bne.w	801f36e <cat_service+0x8796>
 801e696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	f000 83d5 	beq.w	801ee4a <cat_service+0x8272>
 801e6a0:	f7eb fb44 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e6a4:	f109 000c 	add.w	r0, r9, #12
 801e6a8:	08c3      	lsrs	r3, r0, #3
 801e6aa:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e6ae:	f993 2000 	ldrsb.w	r2, [r3]
 801e6b2:	f000 0307 	and.w	r3, r0, #7
 801e6b6:	3303      	adds	r3, #3
 801e6b8:	4293      	cmp	r3, r2
 801e6ba:	db02      	blt.n	801e6c2 <cat_service+0x7aea>
 801e6bc:	2a00      	cmp	r2, #0
 801e6be:	f040 8658 	bne.w	801f372 <cat_service+0x879a>
 801e6c2:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801e6c6:	f7eb fb31 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e6ca:	464a      	mov	r2, r9
 801e6cc:	4628      	mov	r0, r5
 801e6ce:	49d0      	ldr	r1, [pc, #832]	; (801ea10 <cat_service+0x7e38>)
 801e6d0:	f004 f981 	bl	80229d6 <strncpy>
        self->position = 0;
 801e6d4:	f104 0018 	add.w	r0, r4, #24
 801e6d8:	08c3      	lsrs	r3, r0, #3
 801e6da:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e6de:	f993 2000 	ldrsb.w	r2, [r3]
 801e6e2:	f000 0307 	and.w	r3, r0, #7
 801e6e6:	3303      	adds	r3, #3
 801e6e8:	4293      	cmp	r3, r2
 801e6ea:	db02      	blt.n	801e6f2 <cat_service+0x7b1a>
 801e6ec:	2a00      	cmp	r2, #0
 801e6ee:	f041 822b 	bne.w	801fb48 <cat_service+0x8f70>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e6f2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e6fa:	08c3      	lsrs	r3, r0, #3
 801e6fc:	f000 0207 	and.w	r2, r0, #7
 801e700:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e704:	f993 3000 	ldrsb.w	r3, [r3]
 801e708:	429a      	cmp	r2, r3
 801e70a:	db02      	blt.n	801e712 <cat_service+0x7b3a>
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	f041 821d 	bne.w	801fb4c <cat_service+0x8f74>
        self->write_buf = get_new_line_chars(self);
 801e712:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e716:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801e71a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801e71e:	08c3      	lsrs	r3, r0, #3
 801e720:	f000 0207 	and.w	r2, r0, #7
 801e724:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e728:	3203      	adds	r2, #3
 801e72a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e72e:	4bb9      	ldr	r3, [pc, #740]	; (801ea14 <cat_service+0x7e3c>)
        self->write_buf = get_new_line_chars(self);
 801e730:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e732:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801e734:	db02      	blt.n	801e73c <cat_service+0x7b64>
 801e736:	2900      	cmp	r1, #0
 801e738:	f041 820a 	bne.w	801fb50 <cat_service+0x8f78>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e73c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801e740:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e742:	08c3      	lsrs	r3, r0, #3
 801e744:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e748:	f993 2000 	ldrsb.w	r2, [r3]
 801e74c:	f000 0307 	and.w	r3, r0, #7
 801e750:	3303      	adds	r3, #3
 801e752:	4293      	cmp	r3, r2
 801e754:	db02      	blt.n	801e75c <cat_service+0x7b84>
 801e756:	2a00      	cmp	r2, #0
 801e758:	f041 8045 	bne.w	801f7e6 <cat_service+0x8c0e>
        self->write_state_after = state_after;
 801e75c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e760:	2300      	movs	r3, #0
 801e762:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801e764:	08c3      	lsrs	r3, r0, #3
 801e766:	f000 0207 	and.w	r2, r0, #7
 801e76a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e76e:	f993 3000 	ldrsb.w	r3, [r3]
 801e772:	429a      	cmp	r2, r3
 801e774:	db02      	blt.n	801e77c <cat_service+0x7ba4>
 801e776:	2b00      	cmp	r3, #0
 801e778:	f041 8037 	bne.w	801f7ea <cat_service+0x8c12>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e77c:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801e77e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e780:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801e784:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e788:	f006 0207 	and.w	r2, r6, #7
 801e78c:	f993 3000 	ldrsb.w	r3, [r3]
 801e790:	429a      	cmp	r2, r3
 801e792:	db02      	blt.n	801e79a <cat_service+0x7bc2>
 801e794:	2b00      	cmp	r3, #0
 801e796:	f041 80e9 	bne.w	801f96c <cat_service+0x8d94>
 801e79a:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801e79c:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e79e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801e7a2:	f7f8 bd11 	b.w	80171c8 <cat_service+0x5f0>
                                ack_error(self);
 801e7a6:	f7eb fac1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e7aa:	4620      	mov	r0, r4
                s = CAT_STATUS_BUSY;
 801e7ac:	2501      	movs	r5, #1
                                ack_error(self);
 801e7ae:	f7f3 f8fb 	bl	80119a8 <ack_error>
                                break;
 801e7b2:	f7f8 bd09 	b.w	80171c8 <cat_service+0x5f0>
        return (char*)self->desc->buf;
 801e7b6:	f7eb fab9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e7ba:	9b07      	ldr	r3, [sp, #28]
 801e7bc:	9a06      	ldr	r2, [sp, #24]
 801e7be:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e7c2:	3203      	adds	r2, #3
 801e7c4:	f993 3000 	ldrsb.w	r3, [r3]
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	db02      	blt.n	801e7d2 <cat_service+0x7bfa>
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	f041 81c4 	bne.w	801fb5a <cat_service+0x8f82>
 801e7d2:	f8d4 9000 	ldr.w	r9, [r4]
 801e7d6:	f109 0008 	add.w	r0, r9, #8
 801e7da:	08c3      	lsrs	r3, r0, #3
 801e7dc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e7e0:	f993 2000 	ldrsb.w	r2, [r3]
 801e7e4:	f000 0307 	and.w	r3, r0, #7
 801e7e8:	3303      	adds	r3, #3
 801e7ea:	4293      	cmp	r3, r2
 801e7ec:	db02      	blt.n	801e7f4 <cat_service+0x7c1c>
 801e7ee:	2a00      	cmp	r2, #0
 801e7f0:	f041 81b6 	bne.w	801fb60 <cat_service+0x8f88>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e7f4:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801e7f8:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801e7fc:	08c3      	lsrs	r3, r0, #3
 801e7fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e802:	f993 2000 	ldrsb.w	r2, [r3]
 801e806:	f000 0307 	and.w	r3, r0, #7
 801e80a:	3303      	adds	r3, #3
 801e80c:	4293      	cmp	r3, r2
 801e80e:	db02      	blt.n	801e816 <cat_service+0x7c3e>
 801e810:	2a00      	cmp	r2, #0
 801e812:	f041 81a7 	bne.w	801fb64 <cat_service+0x8f8c>
 801e816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	f000 832b 	beq.w	801ee76 <cat_service+0x829e>
 801e820:	f7eb fa84 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e824:	f109 000c 	add.w	r0, r9, #12
 801e828:	08c3      	lsrs	r3, r0, #3
 801e82a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e82e:	f993 2000 	ldrsb.w	r2, [r3]
 801e832:	f000 0307 	and.w	r3, r0, #7
 801e836:	3303      	adds	r3, #3
 801e838:	4293      	cmp	r3, r2
 801e83a:	db02      	blt.n	801e842 <cat_service+0x7c6a>
 801e83c:	2a00      	cmp	r2, #0
 801e83e:	f041 8171 	bne.w	801fb24 <cat_service+0x8f4c>
 801e842:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "OK", get_atcmd_buf_size(self));
 801e846:	f7eb fa71 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e84a:	464a      	mov	r2, r9
 801e84c:	4970      	ldr	r1, [pc, #448]	; (801ea10 <cat_service+0x7e38>)
 801e84e:	4628      	mov	r0, r5
 801e850:	f004 f8c1 	bl	80229d6 <strncpy>
        self->position = 0;
 801e854:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e856:	08cb      	lsrs	r3, r1, #3
 801e858:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e85c:	f993 2000 	ldrsb.w	r2, [r3]
 801e860:	f001 0307 	and.w	r3, r1, #7
 801e864:	3303      	adds	r3, #3
 801e866:	4293      	cmp	r3, r2
 801e868:	db02      	blt.n	801e870 <cat_service+0x7c98>
 801e86a:	2a00      	cmp	r2, #0
 801e86c:	f041 815c 	bne.w	801fb28 <cat_service+0x8f50>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e870:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801e874:	2300      	movs	r3, #0
 801e876:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e878:	08c3      	lsrs	r3, r0, #3
 801e87a:	f000 0207 	and.w	r2, r0, #7
 801e87e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e882:	f993 3000 	ldrsb.w	r3, [r3]
 801e886:	429a      	cmp	r2, r3
 801e888:	db02      	blt.n	801e890 <cat_service+0x7cb8>
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f041 814f 	bne.w	801fb2e <cat_service+0x8f56>
        self->write_buf = get_new_line_chars(self);
 801e890:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e894:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801e898:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801e89c:	08c3      	lsrs	r3, r0, #3
 801e89e:	f000 0207 	and.w	r2, r0, #7
 801e8a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e8a6:	3203      	adds	r2, #3
 801e8a8:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e8ac:	4b59      	ldr	r3, [pc, #356]	; (801ea14 <cat_service+0x7e3c>)
        self->write_buf = get_new_line_chars(self);
 801e8ae:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801e8b0:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801e8b2:	db02      	blt.n	801e8ba <cat_service+0x7ce2>
 801e8b4:	2900      	cmp	r1, #0
 801e8b6:	f041 813c 	bne.w	801fb32 <cat_service+0x8f5a>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e8ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801e8be:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e8c0:	08c3      	lsrs	r3, r0, #3
 801e8c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e8c6:	f993 2000 	ldrsb.w	r2, [r3]
 801e8ca:	f000 0307 	and.w	r3, r0, #7
 801e8ce:	3303      	adds	r3, #3
 801e8d0:	4293      	cmp	r3, r2
 801e8d2:	db02      	blt.n	801e8da <cat_service+0x7d02>
 801e8d4:	2a00      	cmp	r2, #0
 801e8d6:	f041 812e 	bne.w	801fb36 <cat_service+0x8f5e>
        self->write_state_after = state_after;
 801e8da:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801e8de:	2300      	movs	r3, #0
 801e8e0:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801e8e2:	08c3      	lsrs	r3, r0, #3
 801e8e4:	f000 0207 	and.w	r2, r0, #7
 801e8e8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e8ec:	f993 3000 	ldrsb.w	r3, [r3]
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	db02      	blt.n	801e8fa <cat_service+0x7d22>
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	f041 8120 	bne.w	801fb3a <cat_service+0x8f62>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e8fa:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801e8fc:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e8fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801e902:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e906:	f006 0207 	and.w	r2, r6, #7
 801e90a:	f993 3000 	ldrsb.w	r3, [r3]
 801e90e:	429a      	cmp	r2, r3
 801e910:	db02      	blt.n	801e918 <cat_service+0x7d40>
 801e912:	2b00      	cmp	r3, #0
 801e914:	f041 8113 	bne.w	801fb3e <cat_service+0x8f66>
 801e918:	2312      	movs	r3, #18
                return CAT_STATUS_BUSY;
 801e91a:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801e91c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801e920:	f7f8 bc52 	b.w	80171c8 <cat_service+0x5f0>
                self->write_size = 0;
 801e924:	f104 091c 	add.w	r9, r4, #28
 801e928:	f7eb fa00 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e92c:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801e930:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e934:	f993 2000 	ldrsb.w	r2, [r3]
 801e938:	f009 0307 	and.w	r3, r9, #7
 801e93c:	3303      	adds	r3, #3
 801e93e:	4293      	cmp	r3, r2
 801e940:	f6ff ac20 	blt.w	801e184 <cat_service+0x75ac>
 801e944:	2a00      	cmp	r2, #0
 801e946:	f43f ac1d 	beq.w	801e184 <cat_service+0x75ac>
 801e94a:	4648      	mov	r0, r9
 801e94c:	f7ea fe08 	bl	8009560 <__asan_report_store4>
        return NULL;
 801e950:	9f08      	ldr	r7, [sp, #32]
 801e952:	f04f 0900 	mov.w	r9, #0
 801e956:	e9dd 460d 	ldrd	r4, r6, [sp, #52]	; 0x34
 801e95a:	f7f9 b9e6 	b.w	8017d2a <cat_service+0x1152>
                if (val > UINT8_MAX)
 801e95e:	f7eb f9e5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e962:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 801e966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e968:	f173 0300 	sbcs.w	r3, r3, #0
 801e96c:	f4ba ac22 	bcs.w	80191b4 <cat_service+0x25dc>
                *(uint8_t *)(self->var->data) = val;
 801e970:	f7eb f9dc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e974:	9b04      	ldr	r3, [sp, #16]
 801e976:	f103 0008 	add.w	r0, r3, #8
 801e97a:	08c3      	lsrs	r3, r0, #3
 801e97c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e980:	f993 2000 	ldrsb.w	r2, [r3]
 801e984:	f000 0307 	and.w	r3, r0, #7
 801e988:	3303      	adds	r3, #3
 801e98a:	4293      	cmp	r3, r2
 801e98c:	db02      	blt.n	801e994 <cat_service+0x7dbc>
 801e98e:	2a00      	cmp	r2, #0
 801e990:	f040 86da 	bne.w	801f748 <cat_service+0x8b70>
 801e994:	9b04      	ldr	r3, [sp, #16]
 801e996:	fa5f f989 	uxtb.w	r9, r9
 801e99a:	6898      	ldr	r0, [r3, #8]
 801e99c:	08c3      	lsrs	r3, r0, #3
 801e99e:	f000 0207 	and.w	r2, r0, #7
 801e9a2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e9a6:	f993 3000 	ldrsb.w	r3, [r3]
 801e9aa:	429a      	cmp	r2, r3
 801e9ac:	db02      	blt.n	801e9b4 <cat_service+0x7ddc>
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	f040 86c8 	bne.w	801f744 <cat_service+0x8b6c>
 801e9b4:	f880 9000 	strb.w	r9, [r0]
                break;
 801e9b8:	e616      	b.n	801e5e8 <cat_service+0x7a10>
                if (val > UINT32_MAX)
 801e9ba:	f7eb f9b7 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	f47a abf7 	bne.w	80191b4 <cat_service+0x25dc>
                *(uint32_t *)(self->var->data) = val;
 801e9c6:	f7eb f9b1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801e9ca:	9b04      	ldr	r3, [sp, #16]
 801e9cc:	f103 0008 	add.w	r0, r3, #8
 801e9d0:	08c3      	lsrs	r3, r0, #3
 801e9d2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e9d6:	f993 2000 	ldrsb.w	r2, [r3]
 801e9da:	f000 0307 	and.w	r3, r0, #7
 801e9de:	3303      	adds	r3, #3
 801e9e0:	4293      	cmp	r3, r2
 801e9e2:	db02      	blt.n	801e9ea <cat_service+0x7e12>
 801e9e4:	2a00      	cmp	r2, #0
 801e9e6:	f040 86b1 	bne.w	801f74c <cat_service+0x8b74>
 801e9ea:	9b04      	ldr	r3, [sp, #16]
 801e9ec:	6898      	ldr	r0, [r3, #8]
 801e9ee:	08c3      	lsrs	r3, r0, #3
 801e9f0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801e9f4:	f993 2000 	ldrsb.w	r2, [r3]
 801e9f8:	f000 0307 	and.w	r3, r0, #7
 801e9fc:	3303      	adds	r3, #3
 801e9fe:	4293      	cmp	r3, r2
 801ea00:	db02      	blt.n	801ea08 <cat_service+0x7e30>
 801ea02:	2a00      	cmp	r2, #0
 801ea04:	f040 86a4 	bne.w	801f750 <cat_service+0x8b78>
 801ea08:	f8c0 9000 	str.w	r9, [r0]
                break;
 801ea0c:	e5ec      	b.n	801e5e8 <cat_service+0x7a10>
 801ea0e:	bf00      	nop
 801ea10:	24009300 	.word	0x24009300
 801ea14:	24009240 	.word	0x24009240
                self->write_size = 0;
 801ea18:	f104 091c 	add.w	r9, r4, #28
 801ea1c:	f7eb f986 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ea20:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801ea24:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ea28:	f993 2000 	ldrsb.w	r2, [r3]
 801ea2c:	f009 0307 	and.w	r3, r9, #7
 801ea30:	3303      	adds	r3, #3
 801ea32:	4293      	cmp	r3, r2
 801ea34:	f6ff aba6 	blt.w	801e184 <cat_service+0x75ac>
 801ea38:	2a00      	cmp	r2, #0
 801ea3a:	f43f aba3 	beq.w	801e184 <cat_service+0x75ac>
 801ea3e:	4648      	mov	r0, r9
 801ea40:	f7ea fd8e 	bl	8009560 <__asan_report_store4>
                } else if (state == 1) {
 801ea44:	f7eb f972 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ea48:	f1b8 0f01 	cmp.w	r8, #1
 801ea4c:	f43a aaea 	beq.w	8019024 <cat_service+0x244c>
 801ea50:	f7fb bb4e 	b.w	801a0f0 <cat_service+0x3518>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ea54:	f7eb f96a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ea58:	f106 000c 	add.w	r0, r6, #12
 801ea5c:	08c3      	lsrs	r3, r0, #3
 801ea5e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ea62:	f993 2000 	ldrsb.w	r2, [r3]
 801ea66:	f000 0307 	and.w	r3, r0, #7
 801ea6a:	3303      	adds	r3, #3
 801ea6c:	4293      	cmp	r3, r2
 801ea6e:	db02      	blt.n	801ea76 <cat_service+0x7e9e>
 801ea70:	2a00      	cmp	r2, #0
 801ea72:	f040 86a1 	bne.w	801f7b8 <cat_service+0x8be0>
 801ea76:	68f2      	ldr	r2, [r6, #12]
 801ea78:	0852      	lsrs	r2, r2, #1
 801ea7a:	f7fd be4a 	b.w	801c712 <cat_service+0x5b3a>
 801ea7e:	4698      	mov	r8, r3
 801ea80:	f7fe bb3b 	b.w	801d0fa <cat_service+0x6522>
                                size++;
 801ea84:	9b04      	ldr	r3, [sp, #16]
 801ea86:	3301      	adds	r3, #1
 801ea88:	9304      	str	r3, [sp, #16]
 801ea8a:	f7eb f94f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ea8e:	f7fa b953 	b.w	8018d38 <cat_service+0x2160>
                                        self->write_size = 0;
 801ea92:	f104 091c 	add.w	r9, r4, #28
 801ea96:	f7eb f949 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ea9a:	ea4f 03d9 	mov.w	r3, r9, lsr #3
 801ea9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eaa2:	f993 2000 	ldrsb.w	r2, [r3]
 801eaa6:	f009 0307 	and.w	r3, r9, #7
 801eaaa:	3303      	adds	r3, #3
 801eaac:	4293      	cmp	r3, r2
 801eaae:	db02      	blt.n	801eab6 <cat_service+0x7ede>
 801eab0:	2a00      	cmp	r2, #0
 801eab2:	f040 8712 	bne.w	801f8da <cat_service+0x8d02>
 801eab6:	2300      	movs	r3, #0
 801eab8:	61e3      	str	r3, [r4, #28]
 801eaba:	f7fd bab4 	b.w	801c026 <cat_service+0x544e>
 801eabe:	e9dd 8504 	ldrd	r8, r5, [sp, #16]
 801eac2:	4634      	mov	r4, r6
 801eac4:	f7fa bd87 	b.w	80195d6 <cat_service+0x29fe>
 801eac8:	9c04      	ldr	r4, [sp, #16]
 801eaca:	f7fa beda 	b.w	8019882 <cat_service+0x2caa>
                        ack_error(self);
 801eace:	f7eb f92d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ead2:	4620      	mov	r0, r4
        return CAT_STATUS_BUSY;
 801ead4:	2501      	movs	r5, #1
                        ack_error(self);
 801ead6:	f7f2 ff67 	bl	80119a8 <ack_error>
                        break;
 801eada:	f7f8 bb75 	b.w	80171c8 <cat_service+0x5f0>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801eade:	f7eb f925 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eae4:	f103 000c 	add.w	r0, r3, #12
 801eae8:	08c3      	lsrs	r3, r0, #3
 801eaea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eaee:	f993 2000 	ldrsb.w	r2, [r3]
 801eaf2:	f000 0307 	and.w	r3, r0, #7
 801eaf6:	3303      	adds	r3, #3
 801eaf8:	4293      	cmp	r3, r2
 801eafa:	db02      	blt.n	801eb02 <cat_service+0x7f2a>
 801eafc:	2a00      	cmp	r2, #0
 801eafe:	f040 8321 	bne.w	801f144 <cat_service+0x856c>
 801eb02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb04:	68dd      	ldr	r5, [r3, #12]
 801eb06:	086d      	lsrs	r5, r5, #1
 801eb08:	f7fd beba 	b.w	801c880 <cat_service+0x5ca8>
 801eb0c:	f7eb f90e 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eb10:	f106 000c 	add.w	r0, r6, #12
 801eb14:	08c3      	lsrs	r3, r0, #3
 801eb16:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eb1a:	f993 2000 	ldrsb.w	r2, [r3]
 801eb1e:	f000 0307 	and.w	r3, r0, #7
 801eb22:	3303      	adds	r3, #3
 801eb24:	4293      	cmp	r3, r2
 801eb26:	db02      	blt.n	801eb2e <cat_service+0x7f56>
 801eb28:	2a00      	cmp	r2, #0
 801eb2a:	f040 82fb 	bne.w	801f124 <cat_service+0x854c>
 801eb2e:	68f6      	ldr	r6, [r6, #12]
 801eb30:	0876      	lsrs	r6, r6, #1
 801eb32:	f7fe bcbf 	b.w	801d4b4 <cat_service+0x68dc>
 801eb36:	f7eb f8f9 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eb3a:	f109 000c 	add.w	r0, r9, #12
 801eb3e:	08c3      	lsrs	r3, r0, #3
 801eb40:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eb44:	f993 2000 	ldrsb.w	r2, [r3]
 801eb48:	f000 0307 	and.w	r3, r0, #7
 801eb4c:	3303      	adds	r3, #3
 801eb4e:	4293      	cmp	r3, r2
 801eb50:	db02      	blt.n	801eb58 <cat_service+0x7f80>
 801eb52:	2a00      	cmp	r2, #0
 801eb54:	f040 82de 	bne.w	801f114 <cat_service+0x853c>
 801eb58:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb5c:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801eb60:	f7fe ba18 	b.w	801cf94 <cat_service+0x63bc>
 801eb64:	f7eb f8e2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eb68:	9b05      	ldr	r3, [sp, #20]
 801eb6a:	f103 000c 	add.w	r0, r3, #12
 801eb6e:	08c3      	lsrs	r3, r0, #3
 801eb70:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eb74:	f993 2000 	ldrsb.w	r2, [r3]
 801eb78:	f000 0307 	and.w	r3, r0, #7
 801eb7c:	3303      	adds	r3, #3
 801eb7e:	4293      	cmp	r3, r2
 801eb80:	db02      	blt.n	801eb88 <cat_service+0x7fb0>
 801eb82:	2a00      	cmp	r2, #0
 801eb84:	f040 8535 	bne.w	801f5f2 <cat_service+0x8a1a>
 801eb88:	9b05      	ldr	r3, [sp, #20]
 801eb8a:	68dd      	ldr	r5, [r3, #12]
 801eb8c:	086d      	lsrs	r5, r5, #1
 801eb8e:	f7fe bb1c 	b.w	801d1ca <cat_service+0x65f2>
 801eb92:	f7eb f8cb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb98:	f103 000c 	add.w	r0, r3, #12
 801eb9c:	08c3      	lsrs	r3, r0, #3
 801eb9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eba2:	f993 2000 	ldrsb.w	r2, [r3]
 801eba6:	f000 0307 	and.w	r3, r0, #7
 801ebaa:	3303      	adds	r3, #3
 801ebac:	4293      	cmp	r3, r2
 801ebae:	db02      	blt.n	801ebb6 <cat_service+0x7fde>
 801ebb0:	2a00      	cmp	r2, #0
 801ebb2:	f040 83be 	bne.w	801f332 <cat_service+0x875a>
 801ebb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebb8:	68dd      	ldr	r5, [r3, #12]
 801ebba:	086d      	lsrs	r5, r5, #1
 801ebbc:	f7fb bb6d 	b.w	801a29a <cat_service+0x36c2>
        if ((self->mutex != NULL) && (self->mutex->unlock() != 0))
 801ebc0:	4640      	mov	r0, r8
 801ebc2:	f7ea fcd9 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ebc6:	f7eb f8b1 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ebca:	f109 000c 	add.w	r0, r9, #12
 801ebce:	08c3      	lsrs	r3, r0, #3
 801ebd0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ebd4:	f993 2000 	ldrsb.w	r2, [r3]
 801ebd8:	f000 0307 	and.w	r3, r0, #7
 801ebdc:	3303      	adds	r3, #3
 801ebde:	4293      	cmp	r3, r2
 801ebe0:	db02      	blt.n	801ebe8 <cat_service+0x8010>
 801ebe2:	2a00      	cmp	r2, #0
 801ebe4:	f040 8258 	bne.w	801f098 <cat_service+0x84c0>
 801ebe8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ebec:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ebf0:	f7fc b9b5 	b.w	801af5e <cat_service+0x4386>
 801ebf4:	f7eb f89a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ebf8:	f109 000c 	add.w	r0, r9, #12
 801ebfc:	08c3      	lsrs	r3, r0, #3
 801ebfe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ec02:	f993 2000 	ldrsb.w	r2, [r3]
 801ec06:	f000 0307 	and.w	r3, r0, #7
 801ec0a:	3303      	adds	r3, #3
 801ec0c:	4293      	cmp	r3, r2
 801ec0e:	db02      	blt.n	801ec16 <cat_service+0x803e>
 801ec10:	2a00      	cmp	r2, #0
 801ec12:	f040 822e 	bne.w	801f072 <cat_service+0x849a>
 801ec16:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ec1a:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ec1e:	f7fe bdc2 	b.w	801d7a6 <cat_service+0x6bce>
 801ec22:	f7eb f883 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ec26:	9b05      	ldr	r3, [sp, #20]
 801ec28:	f103 000c 	add.w	r0, r3, #12
 801ec2c:	08c2      	lsrs	r2, r0, #3
 801ec2e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ec32:	f992 1000 	ldrsb.w	r1, [r2]
 801ec36:	f000 0207 	and.w	r2, r0, #7
 801ec3a:	3203      	adds	r2, #3
 801ec3c:	428a      	cmp	r2, r1
 801ec3e:	db02      	blt.n	801ec46 <cat_service+0x806e>
 801ec40:	2900      	cmp	r1, #0
 801ec42:	f040 8205 	bne.w	801f050 <cat_service+0x8478>
 801ec46:	68da      	ldr	r2, [r3, #12]
 801ec48:	0852      	lsrs	r2, r2, #1
 801ec4a:	f7ff b8dd 	b.w	801de08 <cat_service+0x7230>
 801ec4e:	f7eb f86d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ec52:	9b05      	ldr	r3, [sp, #20]
 801ec54:	f103 000c 	add.w	r0, r3, #12
 801ec58:	08c2      	lsrs	r2, r0, #3
 801ec5a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ec5e:	f992 1000 	ldrsb.w	r1, [r2]
 801ec62:	f000 0207 	and.w	r2, r0, #7
 801ec66:	3203      	adds	r2, #3
 801ec68:	428a      	cmp	r2, r1
 801ec6a:	db02      	blt.n	801ec72 <cat_service+0x809a>
 801ec6c:	2900      	cmp	r1, #0
 801ec6e:	f040 81c4 	bne.w	801effa <cat_service+0x8422>
 801ec72:	68da      	ldr	r2, [r3, #12]
 801ec74:	0852      	lsrs	r2, r2, #1
 801ec76:	f7ff b80d 	b.w	801dc94 <cat_service+0x70bc>
 801ec7a:	f7eb f857 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ec7e:	9b06      	ldr	r3, [sp, #24]
 801ec80:	f103 000c 	add.w	r0, r3, #12
 801ec84:	08c2      	lsrs	r2, r0, #3
 801ec86:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 801ec8a:	f992 1000 	ldrsb.w	r1, [r2]
 801ec8e:	f000 0207 	and.w	r2, r0, #7
 801ec92:	3203      	adds	r2, #3
 801ec94:	428a      	cmp	r2, r1
 801ec96:	db02      	blt.n	801ec9e <cat_service+0x80c6>
 801ec98:	2900      	cmp	r1, #0
 801ec9a:	f040 83e6 	bne.w	801f46a <cat_service+0x8892>
 801ec9e:	68da      	ldr	r2, [r3, #12]
 801eca0:	0852      	lsrs	r2, r2, #1
 801eca2:	f7fe bf41 	b.w	801db28 <cat_service+0x6f50>
        assert(self != NULL);
 801eca6:	f7eb f841 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ecaa:	f7ea fc81 	bl	80095b0 <__asan_handle_no_return>
 801ecae:	4bd9      	ldr	r3, [pc, #868]	; (801f014 <cat_service+0x843c>)
 801ecb0:	4ad9      	ldr	r2, [pc, #868]	; (801f018 <cat_service+0x8440>)
 801ecb2:	f640 2108 	movw	r1, #2568	; 0xa08
 801ecb6:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
 801ecba:	f002 ff5f 	bl	8021b7c <__assert_func>
                        if ((self->cmd->test != NULL) || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801ecbe:	f7eb f835 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ecc2:	f109 0018 	add.w	r0, r9, #24
 801ecc6:	08c3      	lsrs	r3, r0, #3
 801ecc8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eccc:	f993 2000 	ldrsb.w	r2, [r3]
 801ecd0:	f000 0307 	and.w	r3, r0, #7
 801ecd4:	3303      	adds	r3, #3
 801ecd6:	4293      	cmp	r3, r2
 801ecd8:	db02      	blt.n	801ece0 <cat_service+0x8108>
 801ecda:	2a00      	cmp	r2, #0
 801ecdc:	f040 85b2 	bne.w	801f844 <cat_service+0x8c6c>
 801ece0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	f438 adf2 	beq.w	80178ce <cat_service+0xcf6>
 801ecea:	f7eb f81f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ecee:	f109 001c 	add.w	r0, r9, #28
 801ecf2:	08c3      	lsrs	r3, r0, #3
 801ecf4:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ecf8:	f993 2000 	ldrsb.w	r2, [r3]
 801ecfc:	f000 0307 	and.w	r3, r0, #7
 801ed00:	3303      	adds	r3, #3
 801ed02:	4293      	cmp	r3, r2
 801ed04:	db02      	blt.n	801ed0c <cat_service+0x8134>
 801ed06:	2a00      	cmp	r2, #0
 801ed08:	f040 859e 	bne.w	801f848 <cat_service+0x8c70>
 801ed0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	f438 addc 	beq.w	80178ce <cat_service+0xcf6>
 801ed16:	f7fe bddd 	b.w	801d8d4 <cat_service+0x6cfc>
 801ed1a:	f103 0904 	add.w	r9, r3, #4
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801ed1e:	2300      	movs	r3, #0
 801ed20:	9305      	str	r3, [sp, #20]
 801ed22:	4633      	mov	r3, r6
 801ed24:	4626      	mov	r6, r4
 801ed26:	464c      	mov	r4, r9
 801ed28:	4699      	mov	r9, r3
 801ed2a:	9b05      	ldr	r3, [sp, #20]
 801ed2c:	3301      	adds	r3, #1
 801ed2e:	9305      	str	r3, [sp, #20]
 801ed30:	f7ea fffc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ed34:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801ed38:	4293      	cmp	r3, r2
 801ed3a:	f000 852f 	beq.w	801f79c <cat_service+0x8bc4>
                cmd_group = self->desc->cmd_group[i];
 801ed3e:	f7ea fff5 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ed42:	08e3      	lsrs	r3, r4, #3
 801ed44:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ed48:	f993 1000 	ldrsb.w	r1, [r3]
 801ed4c:	f004 0307 	and.w	r3, r4, #7
 801ed50:	3303      	adds	r3, #3
 801ed52:	428b      	cmp	r3, r1
 801ed54:	db02      	blt.n	801ed5c <cat_service+0x8184>
 801ed56:	2900      	cmp	r1, #0
 801ed58:	f040 8117 	bne.w	801ef8a <cat_service+0x83b2>
 801ed5c:	f854 1b04 	ldr.w	r1, [r4], #4
                if (index >= j + cmd_group->cmd_num) {
 801ed60:	f101 0008 	add.w	r0, r1, #8
 801ed64:	08c3      	lsrs	r3, r0, #3
 801ed66:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ed6a:	f993 2000 	ldrsb.w	r2, [r3]
 801ed6e:	f000 0307 	and.w	r3, r0, #7
 801ed72:	3303      	adds	r3, #3
 801ed74:	4293      	cmp	r3, r2
 801ed76:	db02      	blt.n	801ed7e <cat_service+0x81a6>
 801ed78:	2a00      	cmp	r2, #0
 801ed7a:	f040 8514 	bne.w	801f7a6 <cat_service+0x8bce>
 801ed7e:	688b      	ldr	r3, [r1, #8]
 801ed80:	9a04      	ldr	r2, [sp, #16]
 801ed82:	4413      	add	r3, r2
 801ed84:	429d      	cmp	r5, r3
 801ed86:	f080 80be 	bcs.w	801ef06 <cat_service+0x832e>
 801ed8a:	4634      	mov	r4, r6
 801ed8c:	464e      	mov	r6, r9
 801ed8e:	f7fe be2c 	b.w	801d9ea <cat_service+0x6e12>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ed92:	f7ea ffcb 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ed96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed98:	f103 000c 	add.w	r0, r3, #12
 801ed9c:	08c3      	lsrs	r3, r0, #3
 801ed9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eda2:	f993 2000 	ldrsb.w	r2, [r3]
 801eda6:	f000 0307 	and.w	r3, r0, #7
 801edaa:	3303      	adds	r3, #3
 801edac:	4293      	cmp	r3, r2
 801edae:	db02      	blt.n	801edb6 <cat_service+0x81de>
 801edb0:	2a00      	cmp	r2, #0
 801edb2:	f040 82e0 	bne.w	801f376 <cat_service+0x879e>
 801edb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801edb8:	68dd      	ldr	r5, [r3, #12]
 801edba:	086d      	lsrs	r5, r5, #1
 801edbc:	f7fe b849 	b.w	801ce52 <cat_service+0x627a>
 801edc0:	f7ea ffb4 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801edc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edc6:	f103 000c 	add.w	r0, r3, #12
 801edca:	08c3      	lsrs	r3, r0, #3
 801edcc:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801edd0:	f993 2000 	ldrsb.w	r2, [r3]
 801edd4:	f000 0307 	and.w	r3, r0, #7
 801edd8:	3303      	adds	r3, #3
 801edda:	4293      	cmp	r3, r2
 801eddc:	db02      	blt.n	801ede4 <cat_service+0x820c>
 801edde:	2a00      	cmp	r2, #0
 801ede0:	f040 8219 	bne.w	801f216 <cat_service+0x863e>
 801ede4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ede6:	68dd      	ldr	r5, [r3, #12]
 801ede8:	086d      	lsrs	r5, r5, #1
 801edea:	f7fe bc2b 	b.w	801d644 <cat_service+0x6a6c>
 801edee:	f7ea ff9d 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801edf2:	f109 000c 	add.w	r0, r9, #12
 801edf6:	08c3      	lsrs	r3, r0, #3
 801edf8:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801edfc:	f993 2000 	ldrsb.w	r2, [r3]
 801ee00:	f000 0307 	and.w	r3, r0, #7
 801ee04:	3303      	adds	r3, #3
 801ee06:	4293      	cmp	r3, r2
 801ee08:	db02      	blt.n	801ee10 <cat_service+0x8238>
 801ee0a:	2a00      	cmp	r2, #0
 801ee0c:	f040 850e 	bne.w	801f82c <cat_service+0x8c54>
 801ee10:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ee14:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ee18:	f7ff b918 	b.w	801e04c <cat_service+0x7474>
 801ee1c:	f7ea ff86 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ee20:	9b04      	ldr	r3, [sp, #16]
 801ee22:	f103 000c 	add.w	r0, r3, #12
 801ee26:	08c3      	lsrs	r3, r0, #3
 801ee28:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ee2c:	f993 2000 	ldrsb.w	r2, [r3]
 801ee30:	f000 0307 	and.w	r3, r0, #7
 801ee34:	3303      	adds	r3, #3
 801ee36:	4293      	cmp	r3, r2
 801ee38:	db02      	blt.n	801ee40 <cat_service+0x8268>
 801ee3a:	2a00      	cmp	r2, #0
 801ee3c:	f040 8682 	bne.w	801fb44 <cat_service+0x8f6c>
 801ee40:	9b04      	ldr	r3, [sp, #16]
 801ee42:	68dd      	ldr	r5, [r3, #12]
 801ee44:	086d      	lsrs	r5, r5, #1
 801ee46:	f7fb bcd5 	b.w	801a7f4 <cat_service+0x3c1c>
 801ee4a:	f7ea ff6f 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ee4e:	f109 000c 	add.w	r0, r9, #12
 801ee52:	08c3      	lsrs	r3, r0, #3
 801ee54:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ee58:	f993 2000 	ldrsb.w	r2, [r3]
 801ee5c:	f000 0307 	and.w	r3, r0, #7
 801ee60:	3303      	adds	r3, #3
 801ee62:	4293      	cmp	r3, r2
 801ee64:	db02      	blt.n	801ee6c <cat_service+0x8294>
 801ee66:	2a00      	cmp	r2, #0
 801ee68:	f040 865a 	bne.w	801fb20 <cat_service+0x8f48>
 801ee6c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ee70:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ee74:	e427      	b.n	801e6c6 <cat_service+0x7aee>
 801ee76:	f7ea ff59 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ee7a:	f109 000c 	add.w	r0, r9, #12
 801ee7e:	08c3      	lsrs	r3, r0, #3
 801ee80:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ee84:	f993 2000 	ldrsb.w	r2, [r3]
 801ee88:	f000 0307 	and.w	r3, r0, #7
 801ee8c:	3303      	adds	r3, #3
 801ee8e:	4293      	cmp	r3, r2
 801ee90:	db01      	blt.n	801ee96 <cat_service+0x82be>
 801ee92:	2a00      	cmp	r2, #0
 801ee94:	d17c      	bne.n	801ef90 <cat_service+0x83b8>
 801ee96:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ee9a:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ee9e:	e4d2      	b.n	801e846 <cat_service+0x7c6e>
        return NULL;
 801eea0:	9b08      	ldr	r3, [sp, #32]
 801eea2:	f7fc bc9d 	b.w	801b7e0 <cat_service+0x4c08>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801eea6:	f7ea ff41 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eeaa:	9b05      	ldr	r3, [sp, #20]
 801eeac:	f103 000c 	add.w	r0, r3, #12
 801eeb0:	08c3      	lsrs	r3, r0, #3
 801eeb2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eeb6:	f993 2000 	ldrsb.w	r2, [r3]
 801eeba:	f000 0307 	and.w	r3, r0, #7
 801eebe:	3303      	adds	r3, #3
 801eec0:	4293      	cmp	r3, r2
 801eec2:	db02      	blt.n	801eeca <cat_service+0x82f2>
 801eec4:	2a00      	cmp	r2, #0
 801eec6:	f040 83df 	bne.w	801f688 <cat_service+0x8ab0>
 801eeca:	9b05      	ldr	r3, [sp, #20]
 801eecc:	68dd      	ldr	r5, [r3, #12]
 801eece:	086d      	lsrs	r5, r5, #1
 801eed0:	f7fc bed6 	b.w	801bc80 <cat_service+0x50a8>
 801eed4:	f7ea ff2a 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801eed8:	9b05      	ldr	r3, [sp, #20]
 801eeda:	f103 000c 	add.w	r0, r3, #12
 801eede:	08c3      	lsrs	r3, r0, #3
 801eee0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801eee4:	f993 2000 	ldrsb.w	r2, [r3]
 801eee8:	f000 0307 	and.w	r3, r0, #7
 801eeec:	3303      	adds	r3, #3
 801eeee:	4293      	cmp	r3, r2
 801eef0:	db02      	blt.n	801eef8 <cat_service+0x8320>
 801eef2:	2a00      	cmp	r2, #0
 801eef4:	f040 833a 	bne.w	801f56c <cat_service+0x8994>
 801eef8:	9b05      	ldr	r3, [sp, #20]
 801eefa:	68dd      	ldr	r5, [r3, #12]
 801eefc:	086d      	lsrs	r5, r5, #1
 801eefe:	f7fa b983 	b.w	8019208 <cat_service+0x2630>
        if ((self->mutex != NULL) && (self->mutex->unlock() != 0))
 801ef02:	f7ea fb39 	bl	8009578 <__asan_report_load4>
 801ef06:	9304      	str	r3, [sp, #16]
 801ef08:	e70f      	b.n	801ed2a <cat_service+0x8152>
 801ef0a:	9608      	str	r6, [sp, #32]
 801ef0c:	9705      	str	r7, [sp, #20]
 801ef0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801ef10:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
 801ef14:	f7fc be8a 	b.w	801bc2c <cat_service+0x5054>
        return (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_IDLE);
 801ef18:	4638      	mov	r0, r7
 801ef1a:	f7ea fb25 	bl	8009568 <__asan_report_load1>
        switch (self->state) {
 801ef1e:	4630      	mov	r0, r6
 801ef20:	f7ea fb22 	bl	8009568 <__asan_report_load1>
        return NULL;
 801ef24:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ef28:	2300      	movs	r3, #0
 801ef2a:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
 801ef2e:	f7fc bc57 	b.w	801b7e0 <cat_service+0x4c08>
                ch = get_atcmd_buf(self)[self->position++];
 801ef32:	4628      	mov	r0, r5
 801ef34:	f7ea fb18 	bl	8009568 <__asan_report_load1>
        return NULL;
 801ef38:	9d06      	ldr	r5, [sp, #24]
 801ef3a:	f7fe bd6f 	b.w	801da1c <cat_service+0x6e44>
        switch (self->state) {
 801ef3e:	4630      	mov	r0, r6
 801ef40:	f7ea fb12 	bl	8009568 <__asan_report_load1>
        self->unsolicited_fsm.cmd_type = CAT_CMD_TYPE_NONE;
 801ef44:	f7ea fb04 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.cmd = NULL;
 801ef48:	f7ea fb0a 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801ef4c:	f7ea fb14 	bl	8009578 <__asan_report_load4>
                ch = get_atcmd_buf(self)[self->position++];
 801ef50:	4608      	mov	r0, r1
 801ef52:	f7ea fb11 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801ef56:	f7ea fafb 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	f7ea faf8 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801ef60:	f7ea fb0a 	bl	8009578 <__asan_report_load4>
                ch = get_atcmd_buf(self)[self->position++];
 801ef64:	f7ea fb00 	bl	8009568 <__asan_report_load1>
                ch = get_atcmd_buf(self)[self->position++];
 801ef68:	f7ea fafe 	bl	8009568 <__asan_report_load1>
                cmd_group = self->desc->cmd_group[i];
 801ef6c:	4648      	mov	r0, r9
 801ef6e:	f7ea fb03 	bl	8009578 <__asan_report_load4>
 801ef72:	4618      	mov	r0, r3
 801ef74:	f7ea fb00 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801ef78:	f7ea fafe 	bl	8009578 <__asan_report_load4>
                        self->cmd = get_command_by_index(self, self->index);
 801ef7c:	f7ea faf0 	bl	8009560 <__asan_report_store4>
                        self->state = CAT_STATE_COMMAND_FOUND;
 801ef80:	4630      	mov	r0, r6
 801ef82:	f7ea fae5 	bl	8009550 <__asan_report_store1>
                return &cmd_group->cmd[index - j];
 801ef86:	f7ea faf7 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	f7ea faf4 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ef90:	f7ea faf2 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801ef94:	4610      	mov	r0, r2
 801ef96:	f7ea faef 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801ef9a:	f7ea faed 	bl	8009578 <__asan_report_load4>
                return &cmd_group->cmd[index - j];
 801ef9e:	f7ea faeb 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801efa2:	f7ea fae9 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801efa6:	4620      	mov	r0, r4
 801efa8:	f7ea fae6 	bl	8009578 <__asan_report_load4>
 801efac:	f7ea fae4 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801efb0:	4618      	mov	r0, r3
 801efb2:	f7ea fae1 	bl	8009578 <__asan_report_load4>
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801efb6:	f7ea fad7 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801efba:	f7ea fadd 	bl	8009578 <__asan_report_load4>
        self->index = 0;
 801efbe:	f7ea facf 	bl	8009560 <__asan_report_store4>
        self->length = 0;
 801efc2:	f7ea facd 	bl	8009560 <__asan_report_store4>
                self->cr_flag = true;
 801efc6:	f7ea fac3 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801efca:	4620      	mov	r0, r4
 801efcc:	f7ea fad4 	bl	8009578 <__asan_report_load4>
 801efd0:	f7ea fad2 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801efd4:	f7ea fad0 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801efd8:	4628      	mov	r0, r5
 801efda:	f7ea fac1 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801efde:	4620      	mov	r0, r4
 801efe0:	f7ea faca 	bl	8009578 <__asan_report_load4>
 801efe4:	f7ea fac8 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801efe8:	f7ea fac6 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801efec:	4628      	mov	r0, r5
 801efee:	f7ea fab7 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801eff2:	f7ea fab9 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801eff6:	f7ea fabf 	bl	8009578 <__asan_report_load4>
 801effa:	f7ea fabd 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801effe:	4620      	mov	r0, r4
 801f000:	f7ea faba 	bl	8009578 <__asan_report_load4>
 801f004:	f7ea fab8 	bl	8009578 <__asan_report_load4>
        self->write_buf = get_atcmd_buf(self);
 801f008:	f7ea faaa 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_AFTER;
 801f00c:	f7ea faa8 	bl	8009560 <__asan_report_store4>
                self->cmd_type = CAT_CMD_TYPE_READ;
 801f010:	f7ea fa9e 	bl	8009550 <__asan_report_store1>
 801f014:	24009180 	.word	0x24009180
 801f018:	2400a700 	.word	0x2400a700
                        self->position = 0;
 801f01c:	4648      	mov	r0, r9
 801f01e:	f7ea fa9f 	bl	8009560 <__asan_report_store4>
        self->position = 0;
 801f022:	4648      	mov	r0, r9
 801f024:	f7ea fa9c 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f028:	4620      	mov	r0, r4
 801f02a:	f7ea faa5 	bl	8009578 <__asan_report_load4>
 801f02e:	4620      	mov	r0, r4
 801f030:	f7ea faa2 	bl	8009578 <__asan_report_load4>
 801f034:	f7ea faa0 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f038:	4628      	mov	r0, r5
 801f03a:	f7ea fa91 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f03e:	4620      	mov	r0, r4
 801f040:	f7ea fa9a 	bl	8009578 <__asan_report_load4>
 801f044:	f7ea fa98 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f048:	f7ea fa96 	bl	8009578 <__asan_report_load4>
 801f04c:	f7ea fa94 	bl	8009578 <__asan_report_load4>
 801f050:	f7ea fa92 	bl	8009578 <__asan_report_load4>
        self->length = 0;
 801f054:	f7ea fa84 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f058:	4620      	mov	r0, r4
 801f05a:	f7ea fa8d 	bl	8009578 <__asan_report_load4>
 801f05e:	f7ea fa8b 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f062:	f7ea fa89 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f066:	f7ea fa7b 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f06a:	f7ea fa7d 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f06e:	f7ea fa83 	bl	8009578 <__asan_report_load4>
 801f072:	f7ea fa81 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f076:	4620      	mov	r0, r4
 801f078:	f7ea fa7e 	bl	8009578 <__asan_report_load4>
 801f07c:	f7ea fa7c 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_WRITE_LOOP;
 801f080:	4630      	mov	r0, r6
 801f082:	f7ea fa65 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f086:	4620      	mov	r0, r4
 801f088:	f7ea fa76 	bl	8009578 <__asan_report_load4>
 801f08c:	f7ea fa74 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f090:	f7ea fa72 	bl	8009578 <__asan_report_load4>
 801f094:	f7ea fa70 	bl	8009578 <__asan_report_load4>
 801f098:	f7ea fa6e 	bl	8009578 <__asan_report_load4>
                        get_atcmd_buf(self)[self->length] = 0;
 801f09c:	f7ea fa58 	bl	8009550 <__asan_report_store1>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801f0a0:	4648      	mov	r0, r9
 801f0a2:	f7ea fa61 	bl	8009568 <__asan_report_load1>
                        if ((self->cmd->test != NULL) || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801f0a6:	f7ea fa67 	bl	8009578 <__asan_report_load4>
 801f0aa:	f7ea fa65 	bl	8009578 <__asan_report_load4>
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 801f0ae:	f7ea fa63 	bl	8009578 <__asan_report_load4>
        assert(index < self->commands_num);
 801f0b2:	f7ea fa61 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801f0b6:	4620      	mov	r0, r4
 801f0b8:	f7ea fa5e 	bl	8009578 <__asan_report_load4>
 801f0bc:	f7ea fa5c 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f0c0:	f7ea fa4e 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f0c4:	f7ea fa58 	bl	8009578 <__asan_report_load4>
                if (self->cmd->write == NULL) {
 801f0c8:	f7ea fa56 	bl	8009578 <__asan_report_load4>
                self->index = 0;
 801f0cc:	f7ea fa48 	bl	8009560 <__asan_report_store4>
                        self->state = self->write_state_after;
 801f0d0:	4630      	mov	r0, r6
 801f0d2:	f7ea fa3d 	bl	8009550 <__asan_report_store1>
 801f0d6:	f7ea fa47 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f0da:	f7ea fa4d 	bl	8009578 <__asan_report_load4>
        s = get_atcmd_buf(self)[n];
 801f0de:	f7ea fa43 	bl	8009568 <__asan_report_load1>
                if (self->length == 0) {
 801f0e2:	f7ea fa49 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801f0e6:	4620      	mov	r0, r4
 801f0e8:	f7ea fa46 	bl	8009578 <__asan_report_load4>
        uint8_t cmd_state = get_cmd_state(self, self->index);
 801f0ec:	4648      	mov	r0, r9
 801f0ee:	f7ea fa43 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f0f2:	f7ea fa41 	bl	8009578 <__asan_report_load4>
                get_atcmd_buf(self)[self->length++] = self->current_char;
 801f0f6:	f7ea fa2b 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f0fa:	f7ea fa3d 	bl	8009578 <__asan_report_load4>
 801f0fe:	f7ea fa3b 	bl	8009578 <__asan_report_load4>
 801f102:	f7ea fa39 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f106:	4630      	mov	r0, r6
 801f108:	f7ea fa36 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801f10c:	f7ea fa34 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f110:	f7ea fa32 	bl	8009578 <__asan_report_load4>
 801f114:	f7ea fa30 	bl	8009578 <__asan_report_load4>
 801f118:	f7ea fa2e 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f11c:	f7ea fa24 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f120:	f7ea fa1e 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f124:	f7ea fa28 	bl	8009578 <__asan_report_load4>
 801f128:	f7ea fa26 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f12c:	f7ea fa18 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f130:	f7ea fa1a 	bl	8009568 <__asan_report_load1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f134:	f7ea fa14 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f138:	f7ea fa0a 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f13c:	f7ea fa1c 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f140:	f7ea fa1a 	bl	8009578 <__asan_report_load4>
 801f144:	f7ea fa18 	bl	8009578 <__asan_report_load4>
 801f148:	f7ea fa16 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f14c:	f7ea fa14 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f150:	f7ea fa12 	bl	8009578 <__asan_report_load4>
        self->partial_cntr = 0;
 801f154:	f7ea fa04 	bl	8009560 <__asan_report_store4>
        self->cmd = NULL;
 801f158:	f7ea fa02 	bl	8009560 <__asan_report_store4>
        self->index = 0;
 801f15c:	f7ea fa00 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f160:	4620      	mov	r0, r4
 801f162:	f7ea fa09 	bl	8009578 <__asan_report_load4>
                        if (size >= self->var->data_size)
 801f166:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f168:	f7ea fa06 	bl	8009578 <__asan_report_load4>
 801f16c:	f7ea fa04 	bl	8009578 <__asan_report_load4>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f170:	f7ea f9fa 	bl	8009568 <__asan_report_load1>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 801f174:	f7ea fa00 	bl	8009578 <__asan_report_load4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f178:	f7ea f9f2 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f17c:	f7ea f9e8 	bl	8009550 <__asan_report_store1>
                ch = get_atcmd_buf(self)[self->position++];
 801f180:	f7ea f9f2 	bl	8009568 <__asan_report_load1>
 801f184:	9304      	str	r3, [sp, #16]
 801f186:	f7fe b891 	b.w	801d2ac <cat_service+0x66d4>
        self->cmd = NULL;
 801f18a:	f7ea f9e9 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f18e:	f7ea f9f3 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f192:	f7ea f9e9 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f196:	f7ea f9e3 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f19a:	f7ea f9e1 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f19e:	f7ea f9d7 	bl	8009550 <__asan_report_store1>
                self->cmd_type = CAT_CMD_TYPE_WRITE;
 801f1a2:	f7ea f9d5 	bl	8009550 <__asan_report_store1>
        self->index = 0;
 801f1a6:	f7ea f9db 	bl	8009560 <__asan_report_store4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f1aa:	4630      	mov	r0, r6
 801f1ac:	f7ea f9d0 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_PRINT_CMD;
 801f1b0:	4630      	mov	r0, r6
 801f1b2:	f7ea f9cd 	bl	8009550 <__asan_report_store1>
        self->length = 0;
 801f1b6:	f7ea f9d3 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f1ba:	f7ea f9dd 	bl	8009578 <__asan_report_load4>
        if (self->io->read(&self->current_char) == 0)
 801f1be:	f7ea f9db 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801f1c2:	f7ea f9d9 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f1c6:	f7ea f9d7 	bl	8009578 <__asan_report_load4>
                if (self->cmd == NULL) {
 801f1ca:	f7ea f9d5 	bl	8009578 <__asan_report_load4>
                *(uint8_t *)(self->var->data) = val;
 801f1ce:	f7ea f9bf 	bl	8009550 <__asan_report_store1>
                *(uint32_t *)(self->var->data) = val;
 801f1d2:	f7ea f9d1 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f1d6:	f7ea f9cf 	bl	8009578 <__asan_report_load4>
                *(uint8_t *)(self->var->data) = val;
 801f1da:	f7ea f9cd 	bl	8009578 <__asan_report_load4>
                *(int8_t *)(self->var->data) = val;
 801f1de:	f7ea f9cb 	bl	8009578 <__asan_report_load4>
 801f1e2:	f7ea f9b5 	bl	8009550 <__asan_report_store1>
        self->write_size = self->var->data_size;
 801f1e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f1e8:	f7ea f9c6 	bl	8009578 <__asan_report_load4>
 801f1ec:	f7ea f9c4 	bl	8009578 <__asan_report_load4>
        self->write_buf = get_new_line_chars(self);
 801f1f0:	f7ea f9b6 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f1f4:	f7ea f9b4 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f1f8:	f7ea f9aa 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f1fc:	4630      	mov	r0, r6
 801f1fe:	f7ea f9a7 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f202:	4620      	mov	r0, r4
 801f204:	f7ea f9b8 	bl	8009578 <__asan_report_load4>
 801f208:	f7ea f9b6 	bl	8009578 <__asan_report_load4>
                ch = get_atcmd_buf(self)[self->position++];
 801f20c:	4608      	mov	r0, r1
 801f20e:	f7ea f9b3 	bl	8009578 <__asan_report_load4>
 801f212:	f7ea f9a9 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f216:	f7ea f9af 	bl	8009578 <__asan_report_load4>
 801f21a:	f7ea f9ad 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f21e:	f7ea f99f 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f222:	f7ea f9a1 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f226:	f7ea f99b 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f22a:	f7ea f999 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f22e:	f7ea f98f 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f232:	4630      	mov	r0, r6
 801f234:	f7ea f98c 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801f238:	4628      	mov	r0, r5
 801f23a:	f7ea f991 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f23e:	f7ea f993 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f242:	f7ea f98d 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f246:	f7ea f98b 	bl	8009560 <__asan_report_store4>
                self->state = CAT_STATE_RUN_LOOP;
 801f24a:	4630      	mov	r0, r6
 801f24c:	f7ea f980 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f250:	4620      	mov	r0, r4
 801f252:	f7ea f991 	bl	8009578 <__asan_report_load4>
 801f256:	f7ea f98f 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f25a:	f7ea f98d 	bl	8009578 <__asan_report_load4>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 801f25e:	f7ea f977 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f262:	f7ea f989 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f266:	f7ea f987 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f26a:	f7ea f985 	bl	8009578 <__asan_report_load4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f26e:	f7ea f977 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f272:	f7ea f96d 	bl	8009550 <__asan_report_store1>
        if ((self->cmd->need_all_vars != false) && (self->index != self->cmd->var_num)) {
 801f276:	f7ea f977 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f27a:	4620      	mov	r0, r4
 801f27c:	f7ea f97c 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f280:	4608      	mov	r0, r1
 801f282:	f7ea f96d 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f286:	f7ea f96f 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f28a:	f7ea f969 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f28e:	f7ea f967 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f292:	f7ea f971 	bl	8009578 <__asan_report_load4>
                                if (size >= self->var->data_size)
 801f296:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f298:	f7ea f96e 	bl	8009578 <__asan_report_load4>
 801f29c:	f7ea f96c 	bl	8009578 <__asan_report_load4>
                                if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f2a0:	f7ea f962 	bl	8009568 <__asan_report_load1>
        self->position = 0;
 801f2a4:	4608      	mov	r0, r1
 801f2a6:	f7ea f95b 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f2aa:	f7ea f965 	bl	8009578 <__asan_report_load4>
        self->cmd = get_command_by_index(self, self->index);
 801f2ae:	f7ea f957 	bl	8009560 <__asan_report_store4>
                cmd_group = self->desc->cmd_group[i];
 801f2b2:	4638      	mov	r0, r7
 801f2b4:	f7ea f960 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	f7ea f95d 	bl	8009578 <__asan_report_load4>
 801f2be:	f7ea f95b 	bl	8009578 <__asan_report_load4>
                ch = get_atcmd_buf(self)[self->position++];
 801f2c2:	4608      	mov	r0, r1
 801f2c4:	f7ea f958 	bl	8009578 <__asan_report_load4>
 801f2c8:	f7ea f94e 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f2cc:	f7ea f954 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f2d0:	f7ea f952 	bl	8009578 <__asan_report_load4>
 801f2d4:	f7ea f950 	bl	8009578 <__asan_report_load4>
 801f2d8:	f7ea f94e 	bl	8009578 <__asan_report_load4>
                                ((uint8_t *)(self->var->data))[size++] = byte;
 801f2dc:	f7ea f938 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f2e0:	f7ea f94a 	bl	8009578 <__asan_report_load4>
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	f7ea f947 	bl	8009578 <__asan_report_load4>
 801f2ea:	f7ea f945 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f2ee:	f7ea f937 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f2f2:	f7ea f941 	bl	8009578 <__asan_report_load4>
 801f2f6:	f7ea f93f 	bl	8009578 <__asan_report_load4>
 801f2fa:	f7ea f93d 	bl	8009578 <__asan_report_load4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f2fe:	f7ea f92f 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f302:	f7ea f925 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f306:	4620      	mov	r0, r4
 801f308:	f7ea f936 	bl	8009578 <__asan_report_load4>
 801f30c:	f7ea f934 	bl	8009578 <__asan_report_load4>
                *(uint16_t *)(self->var->data) = val;
 801f310:	f7ea f932 	bl	8009578 <__asan_report_load4>
 801f314:	f7ea f920 	bl	8009558 <__asan_report_store2>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f318:	f7ea f926 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f31c:	f7ea f920 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f320:	4620      	mov	r0, r4
 801f322:	f7ea f929 	bl	8009578 <__asan_report_load4>
 801f326:	f7ea f927 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f32a:	f7ea f925 	bl	8009578 <__asan_report_load4>
 801f32e:	f7ea f923 	bl	8009578 <__asan_report_load4>
 801f332:	f7ea f921 	bl	8009578 <__asan_report_load4>
 801f336:	f7ea f91f 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f33a:	f7ea f915 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f33e:	f7ea f90f 	bl	8009560 <__asan_report_store4>
                *(int32_t *)(self->var->data) = val;
 801f342:	f7ea f90d 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f346:	f7ea f917 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801f34a:	f7ea f915 	bl	8009578 <__asan_report_load4>
                *(int32_t *)(self->var->data) = val;
 801f34e:	f7ea f913 	bl	8009578 <__asan_report_load4>
        switch (self->var->data_size) {
 801f352:	f7ea f911 	bl	8009578 <__asan_report_load4>
        switch (self->state) {
 801f356:	4630      	mov	r0, r6
 801f358:	f7ea f906 	bl	8009568 <__asan_report_load1>
                *(uint16_t *)(self->var->data) = val;
 801f35c:	f7ea f90c 	bl	8009578 <__asan_report_load4>
 801f360:	f7ea f8fa 	bl	8009558 <__asan_report_store2>
        self->state = CAT_STATE_PRINT_CMD;
 801f364:	4630      	mov	r0, r6
 801f366:	f7ea f8f3 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f36a:	f7ea f905 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f36e:	f7ea f903 	bl	8009578 <__asan_report_load4>
 801f372:	f7ea f901 	bl	8009578 <__asan_report_load4>
 801f376:	f7ea f8ff 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f37a:	f7ea f8f5 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f37e:	f7ea f8ef 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f382:	f7ea f8ed 	bl	8009560 <__asan_report_store4>
                *(uint32_t *)(self->var->data) = val;
 801f386:	f7ea f8eb 	bl	8009560 <__asan_report_store4>
        self->write_size = self->var->data_size;
 801f38a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f38c:	f7ea f8f4 	bl	8009578 <__asan_report_load4>
 801f390:	f7ea f8f2 	bl	8009578 <__asan_report_load4>
 801f394:	4648      	mov	r0, r9
 801f396:	f7ea f8e3 	bl	8009560 <__asan_report_store4>
        self->position = 0;
 801f39a:	f7ea f8e1 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f39e:	f7ea f8e3 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f3a2:	f7ea f8dd 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f3a6:	f7ea f8db 	bl	8009560 <__asan_report_store4>
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f3aa:	f7ea f8dd 	bl	8009568 <__asan_report_load1>
        switch (self->var->data_size) {
 801f3ae:	f7ea f8e3 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f3b2:	f7ea f8e1 	bl	8009578 <__asan_report_load4>
                self->write_size = 0;
 801f3b6:	4648      	mov	r0, r9
 801f3b8:	f7ea f8d2 	bl	8009560 <__asan_report_store4>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f3bc:	f7ea f8d4 	bl	8009568 <__asan_report_load1>
                                self->cmd_type = CAT_CMD_TYPE_TEST;
 801f3c0:	f7ea f8c6 	bl	8009550 <__asan_report_store1>
                                self->state = (self->current_char == '\n') ? CAT_STATE_COMMAND_NOT_FOUND : CAT_STATE_ERROR;
 801f3c4:	f7ea f8d0 	bl	8009568 <__asan_report_load1>
 801f3c8:	4630      	mov	r0, r6
 801f3ca:	f7ea f8c1 	bl	8009550 <__asan_report_store1>
        self->write_state_after = state_after;
 801f3ce:	f7ea f8bf 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f3d2:	4630      	mov	r0, r6
 801f3d4:	f7ea f8bc 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f3d8:	4620      	mov	r0, r4
 801f3da:	f7ea f8cd 	bl	8009578 <__asan_report_load4>
 801f3de:	f7ea f8cb 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f3e2:	f7ea f8c1 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f3e6:	f7ea f8bb 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f3ea:	f7ea f8b9 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f3ee:	f7ea f8af 	bl	8009550 <__asan_report_store1>
                        if (size >= self->var->data_size)
 801f3f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f3f4:	f7ea f8c0 	bl	8009578 <__asan_report_load4>
        self->hold_state_flag = false;
 801f3f8:	f7ea f8aa 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801f3fc:	f7ea f8b0 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f400:	f7ea f8ba 	bl	8009578 <__asan_report_load4>
                                ((uint8_t *)(self->var->data))[size++] = byte;
 801f404:	f7ea f8b8 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f408:	f7ea f8aa 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f40c:	f7ea f8b4 	bl	8009578 <__asan_report_load4>
 801f410:	f7ea f8b2 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f414:	f7ea f8a8 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f418:	f7ea f8a2 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f41c:	f7ea f8a0 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f420:	f7ea f896 	bl	8009550 <__asan_report_store1>
                self->current_char = to_upper(self->current_char);
 801f424:	4648      	mov	r0, r9
 801f426:	f7ea f89f 	bl	8009568 <__asan_report_load1>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801f42a:	4630      	mov	r0, r6
 801f42c:	f7ea f89c 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 801f430:	f7ea f8a2 	bl	8009578 <__asan_report_load4>
 801f434:	f7ea f8a0 	bl	8009578 <__asan_report_load4>
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 801f438:	f7ea f89e 	bl	8009578 <__asan_report_load4>
 801f43c:	4660      	mov	r0, ip
 801f43e:	f7ea f89b 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f442:	f7ea f885 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f446:	4630      	mov	r0, r6
 801f448:	f7ea f882 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801f44c:	4648      	mov	r0, r9
 801f44e:	f7ea f887 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f452:	f7ea f889 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f456:	f7ea f883 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f45a:	f7ea f881 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f45e:	f7ea f88b 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f462:	f7ea f889 	bl	8009578 <__asan_report_load4>
 801f466:	f7ea f887 	bl	8009578 <__asan_report_load4>
 801f46a:	f7ea f885 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f46e:	4630      	mov	r0, r6
 801f470:	f7ea f86e 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f474:	f7ea f880 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f478:	f7ea f872 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f47c:	f7ea f874 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f480:	4620      	mov	r0, r4
 801f482:	f7ea f879 	bl	8009578 <__asan_report_load4>
 801f486:	4620      	mov	r0, r4
 801f488:	f7ea f876 	bl	8009578 <__asan_report_load4>
 801f48c:	f7ea f874 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f490:	f7ea f872 	bl	8009578 <__asan_report_load4>
        if (++self->index >= self->commands_num) {
 801f494:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f496:	f7ea f86f 	bl	8009578 <__asan_report_load4>
                if (self->cmd->run == NULL) {
 801f49a:	f7ea f86d 	bl	8009578 <__asan_report_load4>
                if (self->cmd->only_test != false) {
 801f49e:	f7ea f86b 	bl	8009578 <__asan_report_load4>
 801f4a2:	f7ea f861 	bl	8009568 <__asan_report_load1>
        if (++self->index >= self->commands_num) {
 801f4a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f4a8:	f7ea f866 	bl	8009578 <__asan_report_load4>
                self->length = 0;
 801f4ac:	f7ea f858 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	f7ea f861 	bl	8009578 <__asan_report_load4>
 801f4b6:	f7ea f85f 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f4ba:	f7ea f855 	bl	8009568 <__asan_report_load1>
        s = get_atcmd_buf(self)[n];
 801f4be:	f7ea f853 	bl	8009568 <__asan_report_load1>
                } else if (to_upper(cmd->name[self->length - 1]) != self->current_char) {
 801f4c2:	f7ea f851 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f4c6:	f7ea f857 	bl	8009578 <__asan_report_load4>
        s = get_atcmd_buf(self)[n];
 801f4ca:	f7ea f84d 	bl	8009568 <__asan_report_load1>
        if (++self->index >= self->commands_num) {
 801f4ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f4d0:	f7ea f852 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f4d4:	f7ea f850 	bl	8009578 <__asan_report_load4>
                } else if (to_upper(cmd->name[self->length - 1]) != self->current_char) {
 801f4d8:	f7ea f846 	bl	8009568 <__asan_report_load1>
                ch = get_atcmd_buf(self)[self->position++];
 801f4dc:	4628      	mov	r0, r5
 801f4de:	f7ea f843 	bl	8009568 <__asan_report_load1>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 801f4e2:	f7ea f849 	bl	8009578 <__asan_report_load4>
                        if (size >= self->var->data_size)
 801f4e6:	f7ea f847 	bl	8009578 <__asan_report_load4>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f4ea:	f7ea f83d 	bl	8009568 <__asan_report_load1>
                if (self->cmd->test != NULL || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801f4ee:	f7ea f843 	bl	8009578 <__asan_report_load4>
 801f4f2:	f7ea f841 	bl	8009578 <__asan_report_load4>
                if (self->length == 0) {
 801f4f6:	f7ea f83f 	bl	8009578 <__asan_report_load4>
                                ((uint8_t *)(self->var->data))[size++] = ch;
 801f4fa:	f7ea f829 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f4fe:	4620      	mov	r0, r4
 801f500:	f7ea f83a 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f504:	f7ea f824 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f508:	4630      	mov	r0, r6
 801f50a:	f7ea f821 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f50e:	f7ea f833 	bl	8009578 <__asan_report_load4>
                ch = get_atcmd_buf(self)[self->position++];
 801f512:	4648      	mov	r0, r9
 801f514:	f7ea f830 	bl	8009578 <__asan_report_load4>
 801f518:	f7ea f826 	bl	8009568 <__asan_report_load1>
 801f51c:	f7ea f824 	bl	8009568 <__asan_report_load1>
                if (self->length != 0) {
 801f520:	f7ea f82a 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f524:	f7ea f828 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f528:	f7ea f826 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f52c:	f7ea f824 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f530:	f7ea f816 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f534:	f7ea f818 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f538:	f7ea f812 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f53c:	f7ea f810 	bl	8009560 <__asan_report_store4>
                if (index >= j + cmd_group->cmd_num) {
 801f540:	f7ea f81a 	bl	8009578 <__asan_report_load4>
                return &cmd_group->cmd[index - j];
 801f544:	f7ea f818 	bl	8009578 <__asan_report_load4>
                if ((self->length == 0) && (self->current_char == '?')) {
 801f548:	f7ea f816 	bl	8009578 <__asan_report_load4>
        switch (self->current_char) {
 801f54c:	4648      	mov	r0, r9
 801f54e:	f7ea f80b 	bl	8009568 <__asan_report_load1>
        self->hold_exit_status = 0;
 801f552:	f7ea f805 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f556:	4620      	mov	r0, r4
 801f558:	f7ea f80e 	bl	8009578 <__asan_report_load4>
                        self->position = 0;
 801f55c:	4628      	mov	r0, r5
 801f55e:	f7e9 ffff 	bl	8009560 <__asan_report_store4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f562:	4630      	mov	r0, r6
 801f564:	f7e9 fff4 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f568:	f7ea f806 	bl	8009578 <__asan_report_load4>
 801f56c:	f7ea f804 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f570:	f7e9 ffee 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f574:	4630      	mov	r0, r6
 801f576:	f7e9 ffeb 	bl	8009550 <__asan_report_store1>
 801f57a:	4630      	mov	r0, r6
 801f57c:	f7e9 ffe8 	bl	8009550 <__asan_report_store1>
        switch (self->var->type) {
 801f580:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f582:	f7e9 fff9 	bl	8009578 <__asan_report_load4>
 801f586:	f7e9 ffef 	bl	8009568 <__asan_report_load1>
                self->cr_flag = true;
 801f58a:	f7e9 ffe1 	bl	8009550 <__asan_report_store1>
        if (self->io->read(&self->current_char) == 0)
 801f58e:	f7e9 fff3 	bl	8009578 <__asan_report_load4>
 801f592:	f7e9 fff1 	bl	8009578 <__asan_report_load4>
 801f596:	f7e9 ffef 	bl	8009578 <__asan_report_load4>
 801f59a:	f7e9 ffed 	bl	8009578 <__asan_report_load4>
 801f59e:	f7e9 ffeb 	bl	8009578 <__asan_report_load4>
 801f5a2:	f7e9 ffe9 	bl	8009578 <__asan_report_load4>
 801f5a6:	f7e9 ffe7 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f5aa:	f7e9 ffd1 	bl	8009550 <__asan_report_store1>
                self->cr_flag = false;
 801f5ae:	f7e9 ffcf 	bl	8009550 <__asan_report_store1>
        if (self->io->read(&self->current_char) == 0)
 801f5b2:	f7e9 ffe1 	bl	8009578 <__asan_report_load4>
 801f5b6:	f7e9 ffdf 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_HOLD;
 801f5ba:	4630      	mov	r0, r6
 801f5bc:	f7e9 ffc8 	bl	8009550 <__asan_report_store1>
        self->hold_state_flag = true;
 801f5c0:	f7e9 ffc6 	bl	8009550 <__asan_report_store1>
        self->hold_exit_status = 0;
 801f5c4:	f7e9 ffcc 	bl	8009560 <__asan_report_store4>
        if (++self->index >= self->commands_num) {
 801f5c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f5ca:	f7e9 ffd5 	bl	8009578 <__asan_report_load4>
                if (self->length > cmd_name_len) {
 801f5ce:	f7e9 ffd3 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f5d2:	4608      	mov	r0, r1
 801f5d4:	f7e9 ffd0 	bl	8009578 <__asan_report_load4>
                cmd_name_len = strlen(cmd->name);
 801f5d8:	4648      	mov	r0, r9
 801f5da:	f7e9 ffcd 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f5de:	4618      	mov	r0, r3
 801f5e0:	f7e9 ffca 	bl	8009578 <__asan_report_load4>
                if (index >= j + cmd_group->cmd_num) {
 801f5e4:	f7e9 ffc8 	bl	8009578 <__asan_report_load4>
                        self->state = (self->current_char == '\n') ? CAT_STATE_COMMAND_NOT_FOUND : CAT_STATE_ERROR;
 801f5e8:	f7e9 ffbe 	bl	8009568 <__asan_report_load1>
 801f5ec:	4630      	mov	r0, r6
 801f5ee:	f7e9 ffaf 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f5f2:	f7e9 ffc1 	bl	8009578 <__asan_report_load4>
 801f5f6:	f7e9 ffbf 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f5fa:	f7e9 ffb1 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f5fe:	f7e9 ffbb 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f602:	f7e9 ffb1 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f606:	f7e9 ffab 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f60a:	f7e9 ffa9 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f60e:	f7e9 ff9f 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f612:	4630      	mov	r0, r6
 801f614:	f7e9 ff9c 	bl	8009550 <__asan_report_store1>
        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f618:	f7e9 ffa6 	bl	8009568 <__asan_report_load1>
                ch = get_atcmd_buf(self)[self->position++];
 801f61c:	4608      	mov	r0, r1
 801f61e:	f7e9 ffab 	bl	8009578 <__asan_report_load4>
 801f622:	4648      	mov	r0, r9
 801f624:	f7e9 ffa0 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f628:	f7e9 ff9a 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f62c:	f7e9 ff98 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f630:	f7e9 ff8e 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f634:	4630      	mov	r0, r6
 801f636:	f7e9 ff8b 	bl	8009550 <__asan_report_store1>
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 801f63a:	f7e9 ff9d 	bl	8009578 <__asan_report_load4>
 801f63e:	f7e9 ff9b 	bl	8009578 <__asan_report_load4>
                get_atcmd_buf(self)[0] = 0;
 801f642:	f7e9 ff85 	bl	8009550 <__asan_report_store1>
                self->state = CAT_STATE_PARSE_COMMAND_ARGS;
 801f646:	4630      	mov	r0, r6
 801f648:	f7e9 ff82 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801f64c:	f7e9 ff94 	bl	8009578 <__asan_report_load4>
        switch (self->cmd_type) {
 801f650:	f7e9 ff8a 	bl	8009568 <__asan_report_load1>
                return &cmd_group->cmd[index - j];
 801f654:	f7e9 ff90 	bl	8009578 <__asan_report_load4>
                        self->state = (self->partial_cntr == 1) ? CAT_STATE_COMMAND_FOUND : CAT_STATE_COMMAND_NOT_FOUND;
 801f658:	f7e9 ff8e 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f65c:	4610      	mov	r0, r2
 801f65e:	f7e9 ff8b 	bl	8009578 <__asan_report_load4>
        switch (self->cmd->write(self->cmd, (uint8_t*)get_atcmd_buf(self), self->length, self->index)) {
 801f662:	4610      	mov	r0, r2
 801f664:	f7e9 ff88 	bl	8009578 <__asan_report_load4>
 801f668:	4610      	mov	r0, r2
 801f66a:	f7e9 ff85 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f66e:	4620      	mov	r0, r4
 801f670:	f7e9 ff82 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f674:	f7e9 ff74 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f678:	f7e9 ff76 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f67c:	f7e9 ff70 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f680:	f7e9 ff6e 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f684:	f7e9 ff78 	bl	8009578 <__asan_report_load4>
 801f688:	f7e9 ff76 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f68c:	f7e9 ff6c 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f690:	f7e9 ff66 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f694:	f7e9 ff68 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f698:	f7e9 ff62 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f69c:	f7e9 ff60 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f6a0:	f7e9 ff56 	bl	8009550 <__asan_report_store1>
                        self->position = 0;
 801f6a4:	f7e9 ff5c 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f6a8:	4620      	mov	r0, r4
 801f6aa:	f7e9 ff65 	bl	8009578 <__asan_report_load4>
                self->cr_flag = true;
 801f6ae:	f7e9 ff4f 	bl	8009550 <__asan_report_store1>
                if (self->cmd->only_test != false) {
 801f6b2:	f7e9 ff61 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f6b6:	f7e9 ff5f 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < cmd->var_num; i++) {
 801f6ba:	f7e9 ff5d 	bl	8009578 <__asan_report_load4>
                if (self->cmd->only_test != false) {
 801f6be:	f7e9 ff53 	bl	8009568 <__asan_report_load1>
        if (cmd->var == NULL)
 801f6c2:	f7e9 ff59 	bl	8009578 <__asan_report_load4>
        self->write_buf = get_new_line_chars(self);
 801f6c6:	f7e9 ff4b 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f6ca:	f7e9 ff49 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f6ce:	f7e9 ff3f 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f6d2:	4630      	mov	r0, r6
 801f6d4:	f7e9 ff3c 	bl	8009550 <__asan_report_store1>
        self->index = 0;
 801f6d8:	f7e9 ff42 	bl	8009560 <__asan_report_store4>
        self->partial_cntr = 0;
 801f6dc:	f7e9 ff40 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	f7e9 ff49 	bl	8009578 <__asan_report_load4>
 801f6e6:	f7e9 ff47 	bl	8009578 <__asan_report_load4>
        self->partial_cntr = 0;
 801f6ea:	f7e9 ff39 	bl	8009560 <__asan_report_store4>
        self->cmd = NULL;
 801f6ee:	f7e9 ff37 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f6f2:	f7e9 ff41 	bl	8009578 <__asan_report_load4>
 801f6f6:	f7e9 ff3f 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f6fa:	f7e9 ff35 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f6fe:	f7e9 ff2f 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f702:	f7e9 ff2d 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f706:	f7e9 ff23 	bl	8009550 <__asan_report_store1>
        switch (self->var->data_size) {
 801f70a:	f7e9 ff35 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f70e:	4638      	mov	r0, r7
 801f710:	f7e9 ff32 	bl	8009578 <__asan_report_load4>
        if (self->io->read(&self->current_char) == 0)
 801f714:	f7e9 ff30 	bl	8009578 <__asan_report_load4>
        switch (self->current_char) {
 801f718:	4648      	mov	r0, r9
 801f71a:	f7e9 ff25 	bl	8009568 <__asan_report_load1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f71e:	4630      	mov	r0, r6
 801f720:	f7e9 ff16 	bl	8009550 <__asan_report_store1>
        self->unsolicited_fsm.position++;
 801f724:	4628      	mov	r0, r5
 801f726:	f7e9 ff27 	bl	8009578 <__asan_report_load4>
                        self->index = 0;
 801f72a:	f7e9 ff19 	bl	8009560 <__asan_report_store4>
                        self->var = &self->cmd->var[self->index];
 801f72e:	f7e9 ff17 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f732:	4620      	mov	r0, r4
 801f734:	f7e9 ff20 	bl	8009578 <__asan_report_load4>
 801f738:	f7e9 ff1e 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f73c:	f7e9 ff1c 	bl	8009578 <__asan_report_load4>
 801f740:	f7e9 ff1a 	bl	8009578 <__asan_report_load4>
                *(uint8_t *)(self->var->data) = val;
 801f744:	f7e9 ff04 	bl	8009550 <__asan_report_store1>
 801f748:	f7e9 ff16 	bl	8009578 <__asan_report_load4>
                *(uint32_t *)(self->var->data) = val;
 801f74c:	f7e9 ff14 	bl	8009578 <__asan_report_load4>
 801f750:	f7e9 ff06 	bl	8009560 <__asan_report_store4>
                *(int16_t *)(self->var->data) = val;
 801f754:	f7e9 ff10 	bl	8009578 <__asan_report_load4>
 801f758:	f7e9 fefe 	bl	8009558 <__asan_report_store2>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f75c:	4630      	mov	r0, r6
 801f75e:	f7e9 fef7 	bl	8009550 <__asan_report_store1>
        switch (self->cmd->run(self->cmd)) {
 801f762:	f7e9 ff09 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f766:	f7e9 fef3 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f76a:	4630      	mov	r0, r6
 801f76c:	f7e9 fef0 	bl	8009550 <__asan_report_store1>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801f770:	f7e9 feee 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_PRINT_CMD;
 801f774:	4630      	mov	r0, r6
 801f776:	f7e9 feeb 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f77a:	f7e9 fefd 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f77e:	4618      	mov	r0, r3
 801f780:	f7e9 fefa 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801f784:	f7e9 fef8 	bl	8009578 <__asan_report_load4>
                cmd_group = self->desc->cmd_group[i];
 801f788:	4648      	mov	r0, r9
 801f78a:	f7e9 fef5 	bl	8009578 <__asan_report_load4>
        self->cmd = get_command_by_index(self, self->index);
 801f78e:	f7e9 fef3 	bl	8009578 <__asan_report_load4>
        assert(index < self->commands_num);
 801f792:	f7e9 fef1 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801f796:	4620      	mov	r0, r4
 801f798:	f7e9 feee 	bl	8009578 <__asan_report_load4>
        return NULL;
 801f79c:	4634      	mov	r4, r6
 801f79e:	2500      	movs	r5, #0
 801f7a0:	464e      	mov	r6, r9
 801f7a2:	f7fe b93b 	b.w	801da1c <cat_service+0x6e44>
                if (index >= j + cmd_group->cmd_num) {
 801f7a6:	f7e9 fee7 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f7aa:	f7e9 fed1 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f7ae:	4630      	mov	r0, r6
 801f7b0:	f7e9 fece 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801f7b4:	f7e9 fed4 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f7b8:	f7e9 fede 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f7bc:	4620      	mov	r0, r4
 801f7be:	f7e9 fedb 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f7c2:	f7e9 fed9 	bl	8009578 <__asan_report_load4>
                        self->length++;
 801f7c6:	f7e9 fed7 	bl	8009578 <__asan_report_load4>
        if (cmd->var == NULL)
 801f7ca:	f7e9 fed5 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < cmd->var_num; i++) {
 801f7ce:	f7e9 fed3 	bl	8009578 <__asan_report_load4>
                        self->position = 0;
 801f7d2:	4628      	mov	r0, r5
 801f7d4:	f7e9 fec4 	bl	8009560 <__asan_report_store4>
        if (cmd->var == NULL)
 801f7d8:	f7e9 fece 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < cmd->var_num; i++) {
 801f7dc:	f7e9 fecc 	bl	8009578 <__asan_report_load4>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801f7e0:	4630      	mov	r0, r6
 801f7e2:	f7e9 fec1 	bl	8009568 <__asan_report_load1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f7e6:	f7e9 febb 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f7ea:	f7e9 feb1 	bl	8009550 <__asan_report_store1>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f7ee:	f7e9 feb7 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f7f2:	f7e9 fead 	bl	8009550 <__asan_report_store1>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801f7f6:	f7e9 feb7 	bl	8009568 <__asan_report_load1>
                                self->write_size = 0;
 801f7fa:	4648      	mov	r0, r9
 801f7fc:	f7e9 feb0 	bl	8009560 <__asan_report_store4>
        if ((self->var->write != NULL) && (self->var->write(self->var, self->write_size) != 0)) {
 801f800:	f7e9 feba 	bl	8009578 <__asan_report_load4>
 801f804:	4648      	mov	r0, r9
 801f806:	f7e9 feb7 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f80a:	f7e9 feb5 	bl	8009578 <__asan_report_load4>
        if ((++self->index < self->cmd->var_num) && (stat > 0)) {
 801f80e:	f7e9 feb3 	bl	8009578 <__asan_report_load4>
 801f812:	f7e9 feb1 	bl	8009578 <__asan_report_load4>
 801f816:	f7e9 feaf 	bl	8009578 <__asan_report_load4>
                self->cr_flag = true;
 801f81a:	f7e9 fe99 	bl	8009550 <__asan_report_store1>
        if (self->cmd->write == NULL) {
 801f81e:	f7e9 feab 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f822:	4630      	mov	r0, r6
 801f824:	f7e9 fe94 	bl	8009550 <__asan_report_store1>
        if ((self->cmd->need_all_vars != false) && (self->index != self->cmd->var_num)) {
 801f828:	f7e9 fe9e 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f82c:	f7e9 fea4 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f830:	f7e9 fe9a 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f834:	f7e9 fe94 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f838:	f7e9 fe92 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f83c:	f7e9 fe9c 	bl	8009578 <__asan_report_load4>
 801f840:	f7e9 fe9a 	bl	8009578 <__asan_report_load4>
                        if ((self->cmd->test != NULL) || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801f844:	f7e9 fe98 	bl	8009578 <__asan_report_load4>
 801f848:	f7e9 fe96 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f84c:	4630      	mov	r0, r6
 801f84e:	f7e9 fe7f 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f852:	f7e9 fe91 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f856:	f7e9 fe8f 	bl	8009578 <__asan_report_load4>
 801f85a:	f7e9 fe8d 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801f85e:	4620      	mov	r0, r4
 801f860:	f7e9 fe8a 	bl	8009578 <__asan_report_load4>
                if (self->cmd->only_test != false) {
 801f864:	f7e9 fe88 	bl	8009578 <__asan_report_load4>
 801f868:	f7e9 fe7e 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801f86c:	4620      	mov	r0, r4
 801f86e:	f7e9 fe83 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? (char*)self->desc->unsolicited_buf : (char*)&self->desc->buf[self->desc->buf_size >> 1];
 801f872:	f7e9 fe81 	bl	8009578 <__asan_report_load4>
                        if (size >= self->var->data_size)
 801f876:	f7e9 fe7f 	bl	8009578 <__asan_report_load4>
                switch (self->unsolicited_fsm.write_state) {
 801f87a:	f7e9 fe7d 	bl	8009578 <__asan_report_load4>
        switch (self->state) {
 801f87e:	4630      	mov	r0, r6
 801f880:	f7e9 fe72 	bl	8009568 <__asan_report_load1>
                        self->unsolicited_fsm.state = self->unsolicited_fsm.write_state_after;
 801f884:	f7e9 fe70 	bl	8009568 <__asan_report_load1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f888:	f7e9 fe6e 	bl	8009568 <__asan_report_load1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f88c:	4630      	mov	r0, r6
 801f88e:	f7e9 fe5f 	bl	8009550 <__asan_report_store1>
        if (self->hold_exit_status == 0)
 801f892:	f7e9 fe71 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f896:	4608      	mov	r0, r1
 801f898:	f7e9 fe62 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f89c:	f7e9 fe64 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f8a0:	f7e9 fe5e 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f8a4:	f7e9 fe5c 	bl	8009560 <__asan_report_store4>
        if (self->io->read(&self->current_char) == 0)
 801f8a8:	f7e9 fe66 	bl	8009578 <__asan_report_load4>
 801f8ac:	f7e9 fe64 	bl	8009578 <__asan_report_load4>
 801f8b0:	f7e9 fe62 	bl	8009578 <__asan_report_load4>
 801f8b4:	f7e9 fe60 	bl	8009578 <__asan_report_load4>
                if ((var->access == CAT_VAR_ACCESS_READ_WRITE) || (var->access == access)) {
 801f8b8:	4628      	mov	r0, r5
 801f8ba:	f7e9 fe55 	bl	8009568 <__asan_report_load1>
                        self->position = 0;
 801f8be:	4628      	mov	r0, r5
 801f8c0:	f7e9 fe4e 	bl	8009560 <__asan_report_store4>
                if (self->cmd->test != NULL || ((self->cmd->var != NULL) && (self->cmd->var_num > 0))) {
 801f8c4:	f7e9 fe58 	bl	8009578 <__asan_report_load4>
                if (self->cmd->write != NULL || (is_variables_access_possible(self, self->cmd, CAT_VAR_ACCESS_WRITE_ONLY) != false)) {
 801f8c8:	f7e9 fe56 	bl	8009578 <__asan_report_load4>
                                        ((uint8_t *)(self->var->data))[size] = 0;
 801f8cc:	f7e9 fe40 	bl	8009550 <__asan_report_store1>
                                        self->write_size = size;
 801f8d0:	4648      	mov	r0, r9
 801f8d2:	f7e9 fe45 	bl	8009560 <__asan_report_store4>
                                        ((uint8_t *)(self->var->data))[size] = 0;
 801f8d6:	f7e9 fe4f 	bl	8009578 <__asan_report_load4>
                                        self->write_size = 0;
 801f8da:	4648      	mov	r0, r9
 801f8dc:	f7e9 fe40 	bl	8009560 <__asan_report_store4>
        self->write_buf = get_new_line_chars(self);
 801f8e0:	f7e9 fe3e 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f8e4:	f7e9 fe3c 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f8e8:	f7e9 fe32 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f8ec:	4630      	mov	r0, r6
 801f8ee:	f7e9 fe2f 	bl	8009550 <__asan_report_store1>
        self->write_buf = get_atcmd_buf(self);
 801f8f2:	f7e9 fe35 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_AFTER;
 801f8f6:	f7e9 fe33 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f8fa:	f7e9 fe29 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f8fe:	4630      	mov	r0, r6
 801f900:	f7e9 fe26 	bl	8009550 <__asan_report_store1>
        self->write_size = self->var->data_size;
 801f904:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f906:	f7e9 fe37 	bl	8009578 <__asan_report_load4>
 801f90a:	f7e9 fe35 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f90e:	f7e9 fe1f 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f912:	4630      	mov	r0, r6
 801f914:	f7e9 fe1c 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f918:	f7e9 fe2e 	bl	8009578 <__asan_report_load4>
        switch (self->cmd->run(self->cmd)) {
 801f91c:	4610      	mov	r0, r2
 801f91e:	f7e9 fe2b 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801f922:	f7e9 fe15 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f926:	4630      	mov	r0, r6
 801f928:	f7e9 fe12 	bl	8009550 <__asan_report_store1>
        if (self->io->read(&self->current_char) == 0)
 801f92c:	f7e9 fe24 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801f930:	4630      	mov	r0, r6
 801f932:	f7e9 fe19 	bl	8009568 <__asan_report_load1>
                self->var = &self->cmd->var[self->index];
 801f936:	f7e9 fe1f 	bl	8009578 <__asan_report_load4>
 801f93a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f93c:	f7e9 fe10 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f940:	f7e9 fe12 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f944:	f7e9 fe0c 	bl	8009560 <__asan_report_store4>
        self->position = 0;
 801f948:	f7e9 fe0a 	bl	8009560 <__asan_report_store4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f94c:	f7e9 fe14 	bl	8009578 <__asan_report_load4>
 801f950:	f7e9 fe12 	bl	8009578 <__asan_report_load4>
 801f954:	f7e9 fe10 	bl	8009578 <__asan_report_load4>
 801f958:	f7e9 fe0e 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f95c:	f7e9 fe04 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f960:	f7e9 fdfe 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f964:	f7e9 fdfc 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f968:	f7e9 fdf2 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f96c:	4630      	mov	r0, r6
 801f96e:	f7e9 fdef 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801f972:	4628      	mov	r0, r5
 801f974:	f7e9 fdf4 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801f978:	4620      	mov	r0, r4
 801f97a:	f7e9 fdfd 	bl	8009578 <__asan_report_load4>
 801f97e:	f7e9 fdfb 	bl	8009578 <__asan_report_load4>
        self->write_buf = get_atcmd_buf(self);
 801f982:	f7e9 fded 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_AFTER;
 801f986:	f7e9 fdeb 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f98a:	f7e9 fde1 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f98e:	4630      	mov	r0, r6
 801f990:	f7e9 fdde 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f994:	f7e9 fdf0 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801f998:	f7e9 fde2 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801f99c:	f7e9 fde4 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801f9a0:	f7e9 fdde 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801f9a4:	f7e9 fddc 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801f9a8:	f7e9 fdd2 	bl	8009550 <__asan_report_store1>
        if (self->commands_num == 0) {
 801f9ac:	f7e9 fde4 	bl	8009578 <__asan_report_load4>
        self->index = 0;
 801f9b0:	f7e9 fdd6 	bl	8009560 <__asan_report_store4>
                if ((self->cmd->read != NULL) || (is_variables_access_possible(self, self->cmd, CAT_VAR_ACCESS_READ_ONLY) != false)) {
 801f9b4:	f7e9 fde0 	bl	8009578 <__asan_report_load4>
                if (self->cmd->run != NULL) {
 801f9b8:	f7e9 fdde 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_HOLD;
 801f9bc:	4630      	mov	r0, r6
 801f9be:	f7e9 fdc7 	bl	8009550 <__asan_report_store1>
        self->hold_state_flag = true;
 801f9c2:	f7e9 fdc5 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801f9c6:	4620      	mov	r0, r4
 801f9c8:	f7e9 fdd6 	bl	8009578 <__asan_report_load4>
 801f9cc:	f7e9 fdd4 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801f9d0:	f7e9 fdd2 	bl	8009578 <__asan_report_load4>
 801f9d4:	f7e9 fdd0 	bl	8009578 <__asan_report_load4>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801f9d8:	4630      	mov	r0, r6
 801f9da:	f7e9 fdb9 	bl	8009550 <__asan_report_store1>
                ch = get_atcmd_buf(self)[self->position++];
 801f9de:	f7e9 fdc3 	bl	8009568 <__asan_report_load1>
                self->state = CAT_STATE_IDLE;
 801f9e2:	4630      	mov	r0, r6
 801f9e4:	f7e9 fdb4 	bl	8009550 <__asan_report_store1>
        self->cmd = NULL;
 801f9e8:	f7e9 fdba 	bl	8009560 <__asan_report_store4>
        switch (self->cmd_type) {
 801f9ec:	f7e9 fdbc 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 801f9f0:	f7e9 fdc2 	bl	8009578 <__asan_report_load4>
 801f9f4:	f7e9 fdc0 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801f9f8:	4630      	mov	r0, r6
 801f9fa:	f7e9 fdb5 	bl	8009568 <__asan_report_load1>
        struct cat_command const *cmd = get_command_by_index(self, self->index);
 801f9fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fa00:	f7e9 fdba 	bl	8009578 <__asan_report_load4>
        if (self->io->read(&self->current_char) == 0)
 801fa04:	f7e9 fdb8 	bl	8009578 <__asan_report_load4>
                self->cr_flag = true;
 801fa08:	f7e9 fda2 	bl	8009550 <__asan_report_store1>
        switch (self->current_char) {
 801fa0c:	4648      	mov	r0, r9
 801fa0e:	f7e9 fdab 	bl	8009568 <__asan_report_load1>
        if (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE)
 801fa12:	4638      	mov	r0, r7
 801fa14:	f7e9 fda8 	bl	8009568 <__asan_report_load1>
        if (self->hold_exit_status == 0)
 801fa18:	f7e9 fdae 	bl	8009578 <__asan_report_load4>
                self->current_char = to_upper(self->current_char);
 801fa1c:	4648      	mov	r0, r9
 801fa1e:	f7e9 fda3 	bl	8009568 <__asan_report_load1>
        switch (self->current_char) {
 801fa22:	4648      	mov	r0, r9
 801fa24:	f7e9 fda0 	bl	8009568 <__asan_report_load1>
                        if (size >= self->var->data_size)
 801fa28:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fa2a:	f7e9 fda5 	bl	8009578 <__asan_report_load4>
                self->current_char = to_upper(self->current_char);
 801fa2e:	4648      	mov	r0, r9
 801fa30:	f7e9 fd9a 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 801fa34:	f7e9 fda0 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801fa38:	4630      	mov	r0, r6
 801fa3a:	f7e9 fd95 	bl	8009568 <__asan_report_load1>
        self->write_state_after = state_after;
 801fa3e:	f7e9 fd87 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fa42:	4630      	mov	r0, r6
 801fa44:	f7e9 fd84 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801fa48:	4620      	mov	r0, r4
 801fa4a:	f7e9 fd95 	bl	8009578 <__asan_report_load4>
 801fa4e:	f7e9 fd93 	bl	8009578 <__asan_report_load4>
        if (self->io->read(&self->current_char) == 0)
 801fa52:	f7e9 fd91 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801fa56:	4630      	mov	r0, r6
 801fa58:	f7e9 fd86 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 801fa5c:	f7e9 fd8c 	bl	8009578 <__asan_report_load4>
        switch (self->current_char) {
 801fa60:	4648      	mov	r0, r9
 801fa62:	f7e9 fd81 	bl	8009568 <__asan_report_load1>
        return (char*)self->desc->buf;
 801fa66:	4620      	mov	r0, r4
 801fa68:	f7e9 fd86 	bl	8009578 <__asan_report_load4>
 801fa6c:	f7e9 fd84 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fa70:	f7e9 fd82 	bl	8009578 <__asan_report_load4>
 801fa74:	f7e9 fd80 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801fa78:	4620      	mov	r0, r4
 801fa7a:	f7e9 fd7d 	bl	8009578 <__asan_report_load4>
 801fa7e:	f7e9 fd7b 	bl	8009578 <__asan_report_load4>
        self->write_buf = get_atcmd_buf(self);
 801fa82:	f7e9 fd6d 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_AFTER;
 801fa86:	f7e9 fd6b 	bl	8009560 <__asan_report_store4>
                if (self->cmd->disable != false) {
 801fa8a:	f7e9 fd6d 	bl	8009568 <__asan_report_load1>
        self->length = 0;
 801fa8e:	f7e9 fd67 	bl	8009560 <__asan_report_store4>
                self->cmd_type = (self->cmd->only_test != false) ? CAT_CMD_TYPE_TEST : CAT_CMD_TYPE_RUN;
 801fa92:	f7e9 fd69 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fa96:	f7e9 fd6f 	bl	8009578 <__asan_report_load4>
 801fa9a:	f7e9 fd6d 	bl	8009578 <__asan_report_load4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fa9e:	f7e9 fd63 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801faa2:	f7e9 fd5d 	bl	8009560 <__asan_report_store4>
                self->current_char = to_upper(self->current_char);
 801faa6:	4648      	mov	r0, r9
 801faa8:	f7e9 fd5e 	bl	8009568 <__asan_report_load1>
                self->state = CAT_STATE_FLUSH_IO_WRITE;
 801faac:	4630      	mov	r0, r6
 801faae:	f7e9 fd4f 	bl	8009550 <__asan_report_store1>
        char ch = self->write_buf[self->position];
 801fab2:	f7e9 fd61 	bl	8009578 <__asan_report_load4>
        if (self->unsolicited_fsm.state != CAT_UNSOLICITED_STATE_FLUSH_IO_WRITE)
 801fab6:	4638      	mov	r0, r7
 801fab8:	f7e9 fd56 	bl	8009568 <__asan_report_load1>
        assert(index < self->commands_num);
 801fabc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fabe:	f7e9 fd5b 	bl	8009578 <__asan_report_load4>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801fac2:	4620      	mov	r0, r4
 801fac4:	f7e9 fd58 	bl	8009578 <__asan_report_load4>
        assert(index < self->commands_num);
 801fac8:	f7ea f930 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801facc:	f7e9 fd70 	bl	80095b0 <__asan_handle_no_return>
 801fad0:	4bb5      	ldr	r3, [pc, #724]	; (801fda8 <cat_service+0x91d0>)
 801fad2:	4ab6      	ldr	r2, [pc, #728]	; (801fdac <cat_service+0x91d4>)
 801fad4:	f240 11a9 	movw	r1, #425	; 0x1a9
 801fad8:	f5a3 6056 	sub.w	r0, r3, #3424	; 0xd60
 801fadc:	f002 f84e 	bl	8021b7c <__assert_func>
        for (i = 0; i < self->desc->cmd_group_num; i++) {
 801fae0:	f7e9 fd4a 	bl	8009578 <__asan_report_load4>
                        self->state = (self->partial_cntr == 1) ? CAT_STATE_COMMAND_FOUND : CAT_STATE_COMMAND_NOT_FOUND;
 801fae4:	4630      	mov	r0, r6
 801fae6:	f7e9 fd33 	bl	8009550 <__asan_report_store1>
        if (self->io->read(&self->current_char) == 0)
 801faea:	f7e9 fd45 	bl	8009578 <__asan_report_load4>
 801faee:	f7e9 fd43 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801faf2:	4630      	mov	r0, r6
 801faf4:	f7e9 fd38 	bl	8009568 <__asan_report_load1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801faf8:	4630      	mov	r0, r6
 801fafa:	f7e9 fd29 	bl	8009550 <__asan_report_store1>
        if (++self->index >= self->commands_num) {
 801fafe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fb00:	f7e9 fd2e 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801fb04:	f7e9 fd24 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fb08:	4630      	mov	r0, r6
 801fb0a:	f7e9 fd21 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fb0e:	f7e9 fd33 	bl	8009578 <__asan_report_load4>
 801fb12:	f7e9 fd31 	bl	8009578 <__asan_report_load4>
        switch (self->var->type) {
 801fb16:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fb18:	f7e9 fd2e 	bl	8009578 <__asan_report_load4>
 801fb1c:	f7e9 fd24 	bl	8009568 <__asan_report_load1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fb20:	f7e9 fd2a 	bl	8009578 <__asan_report_load4>
 801fb24:	f7e9 fd28 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801fb28:	4608      	mov	r0, r1
 801fb2a:	f7e9 fd19 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fb2e:	f7e9 fd1b 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801fb32:	f7e9 fd15 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fb36:	f7e9 fd13 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801fb3a:	f7e9 fd09 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fb3e:	4630      	mov	r0, r6
 801fb40:	f7e9 fd06 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fb44:	f7e9 fd18 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801fb48:	f7e9 fd0a 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fb4c:	f7e9 fd0c 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801fb50:	f7e9 fd06 	bl	8009560 <__asan_report_store4>
                        if (self->var->access == CAT_VAR_ACCESS_READ_ONLY) {
 801fb54:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fb56:	f7e9 fd0f 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	f7e9 fd0c 	bl	8009578 <__asan_report_load4>
 801fb60:	f7e9 fd0a 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fb64:	f7e9 fd08 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801fb68:	f7e9 fd06 	bl	8009578 <__asan_report_load4>
                        self->partial_cntr++;
 801fb6c:	f7e9 fd04 	bl	8009578 <__asan_report_load4>
        self->cmd_type = CAT_CMD_TYPE_RUN;
 801fb70:	f7e9 fcee 	bl	8009550 <__asan_report_store1>
        if (self->io->read(&self->current_char) == 0)
 801fb74:	f7e9 fd00 	bl	8009578 <__asan_report_load4>
                self->current_char = to_upper(self->current_char);
 801fb78:	4648      	mov	r0, r9
 801fb7a:	f7e9 fcf5 	bl	8009568 <__asan_report_load1>
 801fb7e:	4648      	mov	r0, r9
 801fb80:	f7e9 fcf2 	bl	8009568 <__asan_report_load1>
        if (self->io->read(&self->current_char) == 0)
 801fb84:	f7e9 fcf8 	bl	8009578 <__asan_report_load4>
        if (self->state != CAT_STATE_PARSE_COMMAND_ARGS)
 801fb88:	4630      	mov	r0, r6
 801fb8a:	f7e9 fced 	bl	8009568 <__asan_report_load1>
                        if ((self->cmd != NULL) && ((self->index + 1) == self->commands_num)) {
 801fb8e:	f7e9 fcf3 	bl	8009578 <__asan_report_load4>
        if (++self->index >= self->commands_num) {
 801fb92:	4648      	mov	r0, r9
 801fb94:	f7e9 fce4 	bl	8009560 <__asan_report_store4>
        if (self->io->write(ch) != 1)
 801fb98:	f7e9 fcee 	bl	8009578 <__asan_report_load4>
        self->position++;
 801fb9c:	4628      	mov	r0, r5
 801fb9e:	f7e9 fceb 	bl	8009578 <__asan_report_load4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fba2:	f7e9 fcdd 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801fba6:	f7e9 fcd3 	bl	8009550 <__asan_report_store1>
        char ch = self->write_buf[self->position];
 801fbaa:	4628      	mov	r0, r5
 801fbac:	f7e9 fce4 	bl	8009578 <__asan_report_load4>
 801fbb0:	f7e9 fcda 	bl	8009568 <__asan_report_load1>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fbb4:	f7e9 fcd8 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801fbb8:	f7e9 fcd2 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fbbc:	f7e9 fcd0 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801fbc0:	f7e9 fcc6 	bl	8009550 <__asan_report_store1>
        self->position = 0;
 801fbc4:	f7e9 fccc 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fbc8:	f7e9 fcce 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801fbcc:	f7e9 fcc8 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fbd0:	f7e9 fcc6 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801fbd4:	f7e9 fcd0 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fbd8:	f7e9 fcce 	bl	8009578 <__asan_report_load4>
 801fbdc:	f7e9 fccc 	bl	8009578 <__asan_report_load4>
 801fbe0:	f7e9 fcca 	bl	8009578 <__asan_report_load4>
                self->index = 0;
 801fbe4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fbe6:	f7e9 fcbb 	bl	8009560 <__asan_report_store4>
                self->state = CAT_STATE_PARSE_COMMAND_CHAR;
 801fbea:	4630      	mov	r0, r6
 801fbec:	f7e9 fcb0 	bl	8009550 <__asan_report_store1>
        if (self->hold_state_flag == false) {
 801fbf0:	f7e9 fcba 	bl	8009568 <__asan_report_load1>
        switch (self->current_char) {
 801fbf4:	4648      	mov	r0, r9
 801fbf6:	f7e9 fcb7 	bl	8009568 <__asan_report_load1>
        if (self->io->write(ch) != 1)
 801fbfa:	f7e9 fcbd 	bl	8009578 <__asan_report_load4>
                switch (self->write_state) {
 801fbfe:	f7e9 fcbb 	bl	8009578 <__asan_report_load4>
                self->cr_flag = true;
 801fc02:	f7e9 fca5 	bl	8009550 <__asan_report_store1>
        switch (self->current_char) {
 801fc06:	4648      	mov	r0, r9
 801fc08:	f7e9 fcae 	bl	8009568 <__asan_report_load1>
                if (index >= j + cmd_group->cmd_num) {
 801fc0c:	f7e9 fcb4 	bl	8009578 <__asan_report_load4>
                self->current_char = to_upper(self->current_char);
 801fc10:	4648      	mov	r0, r9
 801fc12:	f7e9 fca9 	bl	8009568 <__asan_report_load1>
        self->cmd_type = CAT_CMD_TYPE_NONE;
 801fc16:	f7e9 fc9b 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801fc1a:	4620      	mov	r0, r4
 801fc1c:	f7e9 fcac 	bl	8009578 <__asan_report_load4>
        self->write_state_after = state_after;
 801fc20:	f7e9 fc96 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fc24:	4630      	mov	r0, r6
 801fc26:	f7e9 fc93 	bl	8009550 <__asan_report_store1>
        return (char*)self->desc->buf;
 801fc2a:	f7e9 fca5 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fc2e:	f7e9 fca3 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801fc32:	f7e9 fc95 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fc36:	f7e9 fc97 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801fc3a:	f7e9 fc91 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fc3e:	f7e9 fc8f 	bl	8009560 <__asan_report_store4>
        return (char*)self->desc->buf;
 801fc42:	f7ea f873 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fc46:	f109 0008 	add.w	r0, r9, #8
 801fc4a:	08c3      	lsrs	r3, r0, #3
 801fc4c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fc50:	f993 2000 	ldrsb.w	r2, [r3]
 801fc54:	f000 0307 	and.w	r3, r0, #7
 801fc58:	3303      	adds	r3, #3
 801fc5a:	4293      	cmp	r3, r2
 801fc5c:	db02      	blt.n	801fc64 <cat_service+0x908c>
 801fc5e:	2a00      	cmp	r2, #0
 801fc60:	f040 8194 	bne.w	801ff8c <cat_service+0x93b4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fc64:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801fc68:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fc6c:	08c3      	lsrs	r3, r0, #3
 801fc6e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fc72:	f993 2000 	ldrsb.w	r2, [r3]
 801fc76:	f000 0307 	and.w	r3, r0, #7
 801fc7a:	3303      	adds	r3, #3
 801fc7c:	4293      	cmp	r3, r2
 801fc7e:	db02      	blt.n	801fc86 <cat_service+0x90ae>
 801fc80:	2a00      	cmp	r2, #0
 801fc82:	f040 8185 	bne.w	801ff90 <cat_service+0x93b8>
 801fc86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	f000 8182 	beq.w	801ff94 <cat_service+0x93bc>
 801fc90:	f7ea f84c 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fc94:	f109 000c 	add.w	r0, r9, #12
 801fc98:	08c3      	lsrs	r3, r0, #3
 801fc9a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fc9e:	f993 2000 	ldrsb.w	r2, [r3]
 801fca2:	f000 0307 	and.w	r3, r0, #7
 801fca6:	3303      	adds	r3, #3
 801fca8:	4293      	cmp	r3, r2
 801fcaa:	db02      	blt.n	801fcb2 <cat_service+0x90da>
 801fcac:	2a00      	cmp	r2, #0
 801fcae:	f040 8194 	bne.w	801ffda <cat_service+0x9402>
 801fcb2:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801fcb6:	f7ea f839 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fcba:	464a      	mov	r2, r9
 801fcbc:	4628      	mov	r0, r5
 801fcbe:	493c      	ldr	r1, [pc, #240]	; (801fdb0 <cat_service+0x91d8>)
 801fcc0:	f002 fe89 	bl	80229d6 <strncpy>
        self->position = 0;
 801fcc4:	f104 0018 	add.w	r0, r4, #24
 801fcc8:	08c3      	lsrs	r3, r0, #3
 801fcca:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fcce:	f993 2000 	ldrsb.w	r2, [r3]
 801fcd2:	f000 0307 	and.w	r3, r0, #7
 801fcd6:	3303      	adds	r3, #3
 801fcd8:	4293      	cmp	r3, r2
 801fcda:	db02      	blt.n	801fce2 <cat_service+0x910a>
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	f040 817e 	bne.w	801ffde <cat_service+0x9406>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fce2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801fce6:	2300      	movs	r3, #0
 801fce8:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fcea:	08c3      	lsrs	r3, r0, #3
 801fcec:	f000 0207 	and.w	r2, r0, #7
 801fcf0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fcf4:	f993 3000 	ldrsb.w	r3, [r3]
 801fcf8:	429a      	cmp	r2, r3
 801fcfa:	db02      	blt.n	801fd02 <cat_service+0x912a>
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	f040 8170 	bne.w	801ffe2 <cat_service+0x940a>
        self->write_buf = get_new_line_chars(self);
 801fd02:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fd06:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801fd0a:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801fd0e:	08c3      	lsrs	r3, r0, #3
 801fd10:	f000 0207 	and.w	r2, r0, #7
 801fd14:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fd18:	3203      	adds	r2, #3
 801fd1a:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fd1e:	4b25      	ldr	r3, [pc, #148]	; (801fdb4 <cat_service+0x91dc>)
        self->write_buf = get_new_line_chars(self);
 801fd20:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fd22:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801fd24:	db02      	blt.n	801fd2c <cat_service+0x9154>
 801fd26:	2900      	cmp	r1, #0
 801fd28:	f040 815d 	bne.w	801ffe6 <cat_service+0x940e>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fd2c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801fd30:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fd32:	08c3      	lsrs	r3, r0, #3
 801fd34:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fd38:	f993 2000 	ldrsb.w	r2, [r3]
 801fd3c:	f000 0307 	and.w	r3, r0, #7
 801fd40:	3303      	adds	r3, #3
 801fd42:	4293      	cmp	r3, r2
 801fd44:	db02      	blt.n	801fd4c <cat_service+0x9174>
 801fd46:	2a00      	cmp	r2, #0
 801fd48:	f040 814f 	bne.w	801ffea <cat_service+0x9412>
        self->write_state_after = state_after;
 801fd4c:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fd50:	2300      	movs	r3, #0
 801fd52:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801fd54:	08c3      	lsrs	r3, r0, #3
 801fd56:	f000 0207 	and.w	r2, r0, #7
 801fd5a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fd5e:	f993 3000 	ldrsb.w	r3, [r3]
 801fd62:	429a      	cmp	r2, r3
 801fd64:	db02      	blt.n	801fd6c <cat_service+0x9194>
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	f040 8141 	bne.w	801ffee <cat_service+0x9416>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fd6c:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801fd6e:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fd70:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801fd74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fd78:	f006 0207 	and.w	r2, r6, #7
 801fd7c:	f993 3000 	ldrsb.w	r3, [r3]
 801fd80:	429a      	cmp	r2, r3
 801fd82:	db02      	blt.n	801fd8a <cat_service+0x91b2>
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	f040 8134 	bne.w	801fff2 <cat_service+0x941a>
 801fd8a:	2312      	movs	r3, #18
                s = CAT_STATUS_BUSY;
 801fd8c:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fd8e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801fd92:	f7f7 ba19 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->unsolicited_fsm.state) {
 801fd96:	2300      	movs	r3, #0
 801fd98:	9301      	str	r3, [sp, #4]
 801fd9a:	f7f6 bfd7 	b.w	8016d4c <cat_service+0x174>
        switch (self->state) {
 801fd9e:	f06f 0503 	mvn.w	r5, #3
 801fda2:	f7f7 ba11 	b.w	80171c8 <cat_service+0x5f0>
 801fda6:	bf00      	nop
 801fda8:	24009e80 	.word	0x24009e80
 801fdac:	2400a7e0 	.word	0x2400a7e0
 801fdb0:	24009200 	.word	0x24009200
 801fdb4:	24009240 	.word	0x24009240
        return (char*)self->desc->buf;
 801fdb8:	f7e9 ffb8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fdbc:	9b07      	ldr	r3, [sp, #28]
 801fdbe:	9a06      	ldr	r2, [sp, #24]
 801fdc0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fdc4:	3203      	adds	r2, #3
 801fdc6:	f993 3000 	ldrsb.w	r3, [r3]
 801fdca:	429a      	cmp	r2, r3
 801fdcc:	db02      	blt.n	801fdd4 <cat_service+0x91fc>
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	f040 80ab 	bne.w	801ff2a <cat_service+0x9352>
 801fdd4:	f8d4 9000 	ldr.w	r9, [r4]
 801fdd8:	f109 0008 	add.w	r0, r9, #8
 801fddc:	08c3      	lsrs	r3, r0, #3
 801fdde:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fde2:	f993 2000 	ldrsb.w	r2, [r3]
 801fde6:	f000 0307 	and.w	r3, r0, #7
 801fdea:	3303      	adds	r3, #3
 801fdec:	4293      	cmp	r3, r2
 801fdee:	db02      	blt.n	801fdf6 <cat_service+0x921e>
 801fdf0:	2a00      	cmp	r2, #0
 801fdf2:	f040 809d 	bne.w	801ff30 <cat_service+0x9358>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fdf6:	f109 0010 	add.w	r0, r9, #16
        return (char*)self->desc->buf;
 801fdfa:	f8d9 5008 	ldr.w	r5, [r9, #8]
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801fdfe:	08c3      	lsrs	r3, r0, #3
 801fe00:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fe04:	f993 2000 	ldrsb.w	r2, [r3]
 801fe08:	f000 0307 	and.w	r3, r0, #7
 801fe0c:	3303      	adds	r3, #3
 801fe0e:	4293      	cmp	r3, r2
 801fe10:	db02      	blt.n	801fe18 <cat_service+0x9240>
 801fe12:	2a00      	cmp	r2, #0
 801fe14:	f040 808e 	bne.w	801ff34 <cat_service+0x935c>
 801fe18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	f000 808b 	beq.w	801ff38 <cat_service+0x9360>
 801fe22:	f7e9 ff83 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fe26:	f109 000c 	add.w	r0, r9, #12
 801fe2a:	08c3      	lsrs	r3, r0, #3
 801fe2c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fe30:	f993 2000 	ldrsb.w	r2, [r3]
 801fe34:	f000 0307 	and.w	r3, r0, #7
 801fe38:	3303      	adds	r3, #3
 801fe3a:	4293      	cmp	r3, r2
 801fe3c:	db02      	blt.n	801fe44 <cat_service+0x926c>
 801fe3e:	2a00      	cmp	r2, #0
 801fe40:	f040 80a2 	bne.w	801ff88 <cat_service+0x93b0>
 801fe44:	f8d9 900c 	ldr.w	r9, [r9, #12]
        strncpy(get_atcmd_buf(self), "ERROR", get_atcmd_buf_size(self));
 801fe48:	f7e9 ff70 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801fe4c:	464a      	mov	r2, r9
 801fe4e:	4628      	mov	r0, r5
 801fe50:	4969      	ldr	r1, [pc, #420]	; (801fff8 <cat_service+0x9420>)
 801fe52:	f002 fdc0 	bl	80229d6 <strncpy>
        self->position = 0;
 801fe56:	f104 0018 	add.w	r0, r4, #24
 801fe5a:	08c3      	lsrs	r3, r0, #3
 801fe5c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fe60:	f993 2000 	ldrsb.w	r2, [r3]
 801fe64:	f000 0307 	and.w	r3, r0, #7
 801fe68:	3303      	adds	r3, #3
 801fe6a:	4293      	cmp	r3, r2
 801fe6c:	db02      	blt.n	801fe74 <cat_service+0x929c>
 801fe6e:	2a00      	cmp	r2, #0
 801fe70:	f040 80a6 	bne.w	801ffc0 <cat_service+0x93e8>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fe74:	f104 002f 	add.w	r0, r4, #47	; 0x2f
        self->position = 0;
 801fe78:	2300      	movs	r3, #0
 801fe7a:	61a3      	str	r3, [r4, #24]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fe7c:	08c3      	lsrs	r3, r0, #3
 801fe7e:	f000 0207 	and.w	r2, r0, #7
 801fe82:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801fe86:	f993 3000 	ldrsb.w	r3, [r3]
 801fe8a:	429a      	cmp	r2, r3
 801fe8c:	db02      	blt.n	801fe94 <cat_service+0x92bc>
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	f040 8098 	bne.w	801ffc4 <cat_service+0x93ec>
        self->write_buf = get_new_line_chars(self);
 801fe94:	f104 0038 	add.w	r0, r4, #56	; 0x38
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801fe98:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801fe9c:	f083 0501 	eor.w	r5, r3, #1
        self->write_buf = get_new_line_chars(self);
 801fea0:	08c3      	lsrs	r3, r0, #3
 801fea2:	f000 0207 	and.w	r2, r0, #7
 801fea6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801feaa:	3203      	adds	r2, #3
 801feac:	f993 1000 	ldrsb.w	r1, [r3]
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801feb0:	4b52      	ldr	r3, [pc, #328]	; (801fffc <cat_service+0x9424>)
        self->write_buf = get_new_line_chars(self);
 801feb2:	428a      	cmp	r2, r1
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801feb4:	442b      	add	r3, r5
        self->write_buf = get_new_line_chars(self);
 801feb6:	db02      	blt.n	801febe <cat_service+0x92e6>
 801feb8:	2900      	cmp	r1, #0
 801feba:	f040 8085 	bne.w	801ffc8 <cat_service+0x93f0>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801febe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        self->write_buf = get_new_line_chars(self);
 801fec2:	63a3      	str	r3, [r4, #56]	; 0x38
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fec4:	08c3      	lsrs	r3, r0, #3
 801fec6:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801feca:	f993 2000 	ldrsb.w	r2, [r3]
 801fece:	f000 0307 	and.w	r3, r0, #7
 801fed2:	3303      	adds	r3, #3
 801fed4:	4293      	cmp	r3, r2
 801fed6:	db01      	blt.n	801fedc <cat_service+0x9304>
 801fed8:	2a00      	cmp	r2, #0
 801feda:	d177      	bne.n	801ffcc <cat_service+0x93f4>
        self->write_state_after = state_after;
 801fedc:	f104 0040 	add.w	r0, r4, #64	; 0x40
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801fee0:	2300      	movs	r3, #0
 801fee2:	63e3      	str	r3, [r4, #60]	; 0x3c
        self->write_state_after = state_after;
 801fee4:	08c3      	lsrs	r3, r0, #3
 801fee6:	f000 0207 	and.w	r2, r0, #7
 801feea:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801feee:	f993 3000 	ldrsb.w	r3, [r3]
 801fef2:	429a      	cmp	r2, r3
 801fef4:	db01      	blt.n	801fefa <cat_service+0x9322>
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d16a      	bne.n	801ffd0 <cat_service+0x93f8>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fefa:	08f3      	lsrs	r3, r6, #3
        self->write_state_after = state_after;
 801fefc:	2214      	movs	r2, #20
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fefe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
        self->write_state_after = state_after;
 801ff02:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ff06:	f006 0207 	and.w	r2, r6, #7
 801ff0a:	f993 3000 	ldrsb.w	r3, [r3]
 801ff0e:	429a      	cmp	r2, r3
 801ff10:	db01      	blt.n	801ff16 <cat_service+0x933e>
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	d15e      	bne.n	801ffd4 <cat_service+0x93fc>
 801ff16:	2312      	movs	r3, #18
                s = process_write_loop(self);
 801ff18:	2501      	movs	r5, #1
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ff1a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        return;
 801ff1e:	f7f7 b953 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 801ff22:	f06f 0503 	mvn.w	r5, #3
 801ff26:	f7f7 b953 	b.w	80171d0 <cat_service+0x5f8>
        return (char*)self->desc->buf;
 801ff2a:	4620      	mov	r0, r4
 801ff2c:	f7e9 fb24 	bl	8009578 <__asan_report_load4>
 801ff30:	f7e9 fb22 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ff34:	f7e9 fb20 	bl	8009578 <__asan_report_load4>
 801ff38:	f7e9 fef8 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ff3c:	f109 000c 	add.w	r0, r9, #12
 801ff40:	08c3      	lsrs	r3, r0, #3
 801ff42:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ff46:	f993 2000 	ldrsb.w	r2, [r3]
 801ff4a:	f000 0307 	and.w	r3, r0, #7
 801ff4e:	3303      	adds	r3, #3
 801ff50:	4293      	cmp	r3, r2
 801ff52:	db00      	blt.n	801ff56 <cat_service+0x937e>
 801ff54:	b922      	cbnz	r2, 801ff60 <cat_service+0x9388>
 801ff56:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ff5a:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ff5e:	e773      	b.n	801fe48 <cat_service+0x9270>
 801ff60:	f7e9 fb0a 	bl	8009578 <__asan_report_load4>
        if ((unsolicited_stat != CAT_STATUS_OK) || (is_unsolicited_fsm_busy(self) != false)) {
 801ff64:	f7e9 fee2 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ff68:	f7f7 b942 	b.w	80171f0 <cat_service+0x618>
 801ff6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ff70:	f7e9 fedc 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ff74:	f7f7 b92c 	b.w	80171d0 <cat_service+0x5f8>
        switch (self->var->type) {
 801ff78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ff7c:	f7f7 b924 	b.w	80171c8 <cat_service+0x5f0>
        switch (self->state) {
 801ff80:	f06f 0503 	mvn.w	r5, #3
 801ff84:	f7f7 b935 	b.w	80171f2 <cat_service+0x61a>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ff88:	f7e9 faf6 	bl	8009578 <__asan_report_load4>
        return (char*)self->desc->buf;
 801ff8c:	f7e9 faf4 	bl	8009578 <__asan_report_load4>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ff90:	f7e9 faf2 	bl	8009578 <__asan_report_load4>
 801ff94:	f7e9 feca 	bl	8009d2c <__sanitizer_cov_trace_pc>
 801ff98:	f109 000c 	add.w	r0, r9, #12
 801ff9c:	08c3      	lsrs	r3, r0, #3
 801ff9e:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801ffa2:	f993 2000 	ldrsb.w	r2, [r3]
 801ffa6:	f000 0307 	and.w	r3, r0, #7
 801ffaa:	3303      	adds	r3, #3
 801ffac:	4293      	cmp	r3, r2
 801ffae:	db00      	blt.n	801ffb2 <cat_service+0x93da>
 801ffb0:	b922      	cbnz	r2, 801ffbc <cat_service+0x93e4>
 801ffb2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ffb6:	ea4f 0953 	mov.w	r9, r3, lsr #1
 801ffba:	e67c      	b.n	801fcb6 <cat_service+0x90de>
 801ffbc:	f7e9 fadc 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801ffc0:	f7e9 face 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ffc4:	f7e9 fad0 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801ffc8:	f7e9 faca 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ffcc:	f7e9 fac8 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801ffd0:	f7e9 fabe 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801ffd4:	4630      	mov	r0, r6
 801ffd6:	f7e9 fabb 	bl	8009550 <__asan_report_store1>
        return (self->desc->unsolicited_buf != NULL) ? self->desc->buf_size : self->desc->buf_size >> 1;
 801ffda:	f7e9 facd 	bl	8009578 <__asan_report_load4>
        self->position = 0;
 801ffde:	f7e9 fabf 	bl	8009560 <__asan_report_store4>
        return &crlf[(self->cr_flag != false) ? 0 : 1];
 801ffe2:	f7e9 fac1 	bl	8009568 <__asan_report_load1>
        self->write_buf = get_new_line_chars(self);
 801ffe6:	f7e9 fabb 	bl	8009560 <__asan_report_store4>
        self->write_state = CAT_WRITE_STATE_BEFORE;
 801ffea:	f7e9 fab9 	bl	8009560 <__asan_report_store4>
        self->write_state_after = state_after;
 801ffee:	f7e9 faaf 	bl	8009550 <__asan_report_store1>
        self->state = CAT_STATE_FLUSH_IO_WRITE_WAIT;
 801fff2:	4630      	mov	r0, r6
 801fff4:	f7e9 faac 	bl	8009550 <__asan_report_store1>
 801fff8:	24009200 	.word	0x24009200
 801fffc:	24009240 	.word	0x24009240

08020000 <_sub_D_00099_0>:
 8020000:	b508      	push	{r3, lr}
 8020002:	f7e9 fe93 	bl	8009d2c <__sanitizer_cov_trace_pc>
 8020006:	215b      	movs	r1, #91	; 0x5b
 8020008:	4802      	ldr	r0, [pc, #8]	; (8020014 <_sub_D_00099_0+0x14>)
 802000a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802000e:	f7e9 bad3 	b.w	80095b8 <__asan_unregister_globals>
 8020012:	bf00      	nop
 8020014:	24008020 	.word	0x24008020

08020018 <_sub_I_00099_1>:
 8020018:	b508      	push	{r3, lr}
 802001a:	f7e9 fe87 	bl	8009d2c <__sanitizer_cov_trace_pc>
 802001e:	f7e9 faaf 	bl	8009580 <__asan_init>
 8020022:	f7e9 fac7 	bl	80095b4 <__asan_version_mismatch_check_v8>
 8020026:	215b      	movs	r1, #91	; 0x5b
 8020028:	4802      	ldr	r0, [pc, #8]	; (8020034 <_sub_I_00099_1+0x1c>)
 802002a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802002e:	f7e9 bac5 	b.w	80095bc <__asan_register_globals>
 8020032:	bf00      	nop
 8020034:	24008020 	.word	0x24008020

08020038 <set_read>:
}

int set_read(const struct cat_command *cmd, uint8_t *data, size_t *data_size, const size_t max_data_size)
{
        return 0;
}
 8020038:	2000      	movs	r0, #0
 802003a:	4770      	bx	lr

0802003c <print_cmd_list1>:
}

int print_cmd_list1(const struct cat_command *cmd)
{
        return CAT_RETURN_STATE_PRINT_CMD_LIST_OK;
}
 802003c:	2007      	movs	r0, #7
 802003e:	4770      	bx	lr

08020040 <read_char>:
unsigned int input_cursor = 0;

int read_char(char *ch)
{
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	if(input_cursor >= (pAFLfuzzer->inputAFL.u32availablenopad-4)){
 8020040:	4a0e      	ldr	r2, [pc, #56]	; (802007c <read_char+0x3c>)
 8020042:	490f      	ldr	r1, [pc, #60]	; (8020080 <read_char+0x40>)
 8020044:	f502 43c0 	add.w	r3, r2, #24576	; 0x6000
 8020048:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
{
 802004c:	b410      	push	{r4}
	if(input_cursor >= (pAFLfuzzer->inputAFL.u32availablenopad-4)){
 802004e:	3b04      	subs	r3, #4
 8020050:	680c      	ldr	r4, [r1, #0]
 8020052:	42a3      	cmp	r3, r4
 8020054:	d805      	bhi.n	8020062 <read_char+0x22>
		*ch = '\0';
 8020056:	2300      	movs	r3, #0
 8020058:	7003      	strb	r3, [r0, #0]
	}else{
		*ch = pAFLfuzzer->inputAFL.uxBuffer[input_cursor + 4];
		input_cursor ++;
	}
	return 1;
}
 802005a:	2001      	movs	r0, #1
 802005c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020060:	4770      	bx	lr
		*ch = pAFLfuzzer->inputAFL.uxBuffer[input_cursor + 4];
 8020062:	4422      	add	r2, r4
 8020064:	f246 0304 	movw	r3, #24580	; 0x6004
 8020068:	5cd3      	ldrb	r3, [r2, r3]
 802006a:	7003      	strb	r3, [r0, #0]
}
 802006c:	2001      	movs	r0, #1
		input_cursor ++;
 802006e:	680b      	ldr	r3, [r1, #0]
}
 8020070:	f85d 4b04 	ldr.w	r4, [sp], #4
		input_cursor ++;
 8020074:	3301      	adds	r3, #1
 8020076:	600b      	str	r3, [r1, #0]
}
 8020078:	4770      	bx	lr
 802007a:	bf00      	nop
 802007c:	24020000 	.word	0x24020000
 8020080:	24031338 	.word	0x24031338

08020084 <x_write>:
{
 8020084:	b508      	push	{r3, lr}
        printf("x variable updated internally to: %u\n", x);
 8020086:	4b03      	ldr	r3, [pc, #12]	; (8020094 <x_write+0x10>)
 8020088:	4803      	ldr	r0, [pc, #12]	; (8020098 <x_write+0x14>)
 802008a:	7819      	ldrb	r1, [r3, #0]
 802008c:	f002 fabe 	bl	802260c <iprintf>
}
 8020090:	2000      	movs	r0, #0
 8020092:	bd08      	pop	{r3, pc}
 8020094:	24033000 	.word	0x24033000
 8020098:	2400ab40 	.word	0x2400ab40

0802009c <y_write>:
{
 802009c:	b508      	push	{r3, lr}
        printf("y variable updated internally to: %u\n", y);
 802009e:	4b03      	ldr	r3, [pc, #12]	; (80200ac <y_write+0x10>)
 80200a0:	4803      	ldr	r0, [pc, #12]	; (80200b0 <y_write+0x14>)
 80200a2:	7819      	ldrb	r1, [r3, #0]
 80200a4:	f002 fab2 	bl	802260c <iprintf>
}
 80200a8:	2000      	movs	r0, #0
 80200aa:	bd08      	pop	{r3, pc}
 80200ac:	24033001 	.word	0x24033001
 80200b0:	2400ab68 	.word	0x2400ab68

080200b4 <msg_write>:
        printf("msg variable updated %lu bytes internally to: <%s>\n", write_size, msg);
 80200b4:	4a03      	ldr	r2, [pc, #12]	; (80200c4 <msg_write+0x10>)
 80200b6:	4804      	ldr	r0, [pc, #16]	; (80200c8 <msg_write+0x14>)
{
 80200b8:	b508      	push	{r3, lr}
        printf("msg variable updated %lu bytes internally to: <%s>\n", write_size, msg);
 80200ba:	f002 faa7 	bl	802260c <iprintf>
}
 80200be:	2000      	movs	r0, #0
 80200c0:	bd08      	pop	{r3, pc}
 80200c2:	bf00      	nop
 80200c4:	2403133c 	.word	0x2403133c
 80200c8:	2400ab90 	.word	0x2400ab90

080200cc <speed_write>:
{
 80200cc:	b508      	push	{r3, lr}
        printf("speed variable updated internally to: %d\n", speed);
 80200ce:	4b03      	ldr	r3, [pc, #12]	; (80200dc <speed_write+0x10>)
 80200d0:	4803      	ldr	r0, [pc, #12]	; (80200e0 <speed_write+0x14>)
 80200d2:	6819      	ldr	r1, [r3, #0]
 80200d4:	f002 fa9a 	bl	802260c <iprintf>
}
 80200d8:	2000      	movs	r0, #0
 80200da:	bd08      	pop	{r3, pc}
 80200dc:	24031350 	.word	0x24031350
 80200e0:	2400abc4 	.word	0x2400abc4

080200e4 <adr_write>:
{
 80200e4:	b508      	push	{r3, lr}
        printf("adr variable updated internally to: 0x%04X\n", adr);
 80200e6:	4b03      	ldr	r3, [pc, #12]	; (80200f4 <adr_write+0x10>)
 80200e8:	4803      	ldr	r0, [pc, #12]	; (80200f8 <adr_write+0x14>)
 80200ea:	8819      	ldrh	r1, [r3, #0]
 80200ec:	f002 fa8e 	bl	802260c <iprintf>
}
 80200f0:	2000      	movs	r0, #0
 80200f2:	bd08      	pop	{r3, pc}
 80200f4:	24031000 	.word	0x24031000
 80200f8:	2400abf0 	.word	0x2400abf0

080200fc <set_write>:
{
 80200fc:	b508      	push	{r3, lr}
        printf("<%s>: SET SPEED TO = %d\n",
 80200fe:	4a04      	ldr	r2, [pc, #16]	; (8020110 <set_write+0x14>)
{
 8020100:	4603      	mov	r3, r0
        printf("<%s>: SET SPEED TO = %d\n",
 8020102:	4804      	ldr	r0, [pc, #16]	; (8020114 <set_write+0x18>)
 8020104:	6812      	ldr	r2, [r2, #0]
 8020106:	6819      	ldr	r1, [r3, #0]
 8020108:	f002 fa80 	bl	802260c <iprintf>
}
 802010c:	2000      	movs	r0, #0
 802010e:	bd08      	pop	{r3, pc}
 8020110:	24031350 	.word	0x24031350
 8020114:	2400ac1c 	.word	0x2400ac1c

08020118 <test_run>:
{
 8020118:	b508      	push	{r3, lr}
 802011a:	4603      	mov	r3, r0
        printf("TEST: <%s>", cmd->name);
 802011c:	4802      	ldr	r0, [pc, #8]	; (8020128 <test_run+0x10>)
 802011e:	6819      	ldr	r1, [r3, #0]
 8020120:	f002 fa74 	bl	802260c <iprintf>
}
 8020124:	2000      	movs	r0, #0
 8020126:	bd08      	pop	{r3, pc}
 8020128:	2400ac38 	.word	0x2400ac38

0802012c <quit_run>:
{
 802012c:	b508      	push	{r3, lr}
 802012e:	4603      	mov	r3, r0
        printf("QUIT: <%s>", cmd->name);
 8020130:	4804      	ldr	r0, [pc, #16]	; (8020144 <quit_run+0x18>)
 8020132:	6819      	ldr	r1, [r3, #0]
 8020134:	f002 fa6a 	bl	802260c <iprintf>
        quit_flag = true;
 8020138:	4b03      	ldr	r3, [pc, #12]	; (8020148 <quit_run+0x1c>)
 802013a:	2201      	movs	r2, #1
}
 802013c:	2000      	movs	r0, #0
        quit_flag = true;
 802013e:	701a      	strb	r2, [r3, #0]
}
 8020140:	bd08      	pop	{r3, pc}
 8020142:	bf00      	nop
 8020144:	2400ac44 	.word	0x2400ac44
 8020148:	2403134c 	.word	0x2403134c

0802014c <bytesbuf_write>:
{
 802014c:	b570      	push	{r4, r5, r6, lr}
 802014e:	4c09      	ldr	r4, [pc, #36]	; (8020174 <bytesbuf_write+0x28>)
        printf("bytes_buf variable updated %lu bytes internally to: ", write_size);
 8020150:	4809      	ldr	r0, [pc, #36]	; (8020178 <bytesbuf_write+0x2c>)
                printf("%02X", bytes_buf[i]);
 8020152:	4e0a      	ldr	r6, [pc, #40]	; (802017c <bytesbuf_write+0x30>)
 8020154:	1d25      	adds	r5, r4, #4
        printf("bytes_buf variable updated %lu bytes internally to: ", write_size);
 8020156:	f002 fa59 	bl	802260c <iprintf>
                printf("%02X", bytes_buf[i]);
 802015a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802015e:	4630      	mov	r0, r6
 8020160:	f002 fa54 	bl	802260c <iprintf>
        for (i = 0; i < sizeof(bytes_buf); i++)
 8020164:	42ac      	cmp	r4, r5
 8020166:	d1f8      	bne.n	802015a <bytesbuf_write+0xe>
        printf("\n");
 8020168:	200a      	movs	r0, #10
 802016a:	f002 fab7 	bl	80226dc <putchar>
}
 802016e:	2000      	movs	r0, #0
 8020170:	bd70      	pop	{r4, r5, r6, pc}
 8020172:	bf00      	nop
 8020174:	240312ac 	.word	0x240312ac
 8020178:	2400ac50 	.word	0x2400ac50
 802017c:	2400ac88 	.word	0x2400ac88

08020180 <go_write>:
        printf("<%s>: x=%d y=%d msg=%s @ speed=%d\n",
 8020180:	4b11      	ldr	r3, [pc, #68]	; (80201c8 <go_write+0x48>)
 8020182:	6801      	ldr	r1, [r0, #0]
{
 8020184:	b570      	push	{r4, r5, r6, lr}
        printf("<%s>: x=%d y=%d msg=%s @ speed=%d\n",
 8020186:	681c      	ldr	r4, [r3, #0]
{
 8020188:	b082      	sub	sp, #8
                *(uint8_t*)(cmd->var[0].data),
 802018a:	6983      	ldr	r3, [r0, #24]
        printf("<%s>: x=%d y=%d msg=%s @ speed=%d\n",
 802018c:	4d0f      	ldr	r5, [pc, #60]	; (80201cc <go_write+0x4c>)
                *(uint8_t*)(cmd->var[1].data),
 802018e:	6a58      	ldr	r0, [r3, #36]	; 0x24
                *(uint8_t*)(cmd->var[0].data),
 8020190:	689a      	ldr	r2, [r3, #8]
        printf("<%s>: x=%d y=%d msg=%s @ speed=%d\n",
 8020192:	7803      	ldrb	r3, [r0, #0]
 8020194:	7812      	ldrb	r2, [r2, #0]
 8020196:	480e      	ldr	r0, [pc, #56]	; (80201d0 <go_write+0x50>)
 8020198:	9401      	str	r4, [sp, #4]
 802019a:	9500      	str	r5, [sp, #0]
 802019c:	4c0d      	ldr	r4, [pc, #52]	; (80201d4 <go_write+0x54>)
 802019e:	f002 fa35 	bl	802260c <iprintf>
        printf("<bytes>: ");
 80201a2:	480d      	ldr	r0, [pc, #52]	; (80201d8 <go_write+0x58>)
 80201a4:	1d26      	adds	r6, r4, #4
                printf("%02X", bytes_buf[i]);
 80201a6:	4d0d      	ldr	r5, [pc, #52]	; (80201dc <go_write+0x5c>)
        printf("<bytes>: ");
 80201a8:	f002 fa30 	bl	802260c <iprintf>
                printf("%02X", bytes_buf[i]);
 80201ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201b0:	4628      	mov	r0, r5
 80201b2:	f002 fa2b 	bl	802260c <iprintf>
        for (i = 0; i < sizeof(bytes_buf); i++)
 80201b6:	42b4      	cmp	r4, r6
 80201b8:	d1f8      	bne.n	80201ac <go_write+0x2c>
        printf("\n");
 80201ba:	200a      	movs	r0, #10
 80201bc:	f002 fa8e 	bl	80226dc <putchar>
}
 80201c0:	2000      	movs	r0, #0
 80201c2:	b002      	add	sp, #8
 80201c4:	bd70      	pop	{r4, r5, r6, pc}
 80201c6:	bf00      	nop
 80201c8:	24031350 	.word	0x24031350
 80201cc:	2403133c 	.word	0x2403133c
 80201d0:	2400ac90 	.word	0x2400ac90
 80201d4:	240312ac 	.word	0x240312ac
 80201d8:	2400acb4 	.word	0x2400acb4
 80201dc:	2400ac88 	.word	0x2400ac88

080201e0 <write_char>:
{
 80201e0:	b508      	push	{r3, lr}
        putc(ch, stdout);
 80201e2:	4b03      	ldr	r3, [pc, #12]	; (80201f0 <write_char+0x10>)
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	6899      	ldr	r1, [r3, #8]
 80201e8:	f002 fa70 	bl	80226cc <putc>
}
 80201ec:	2001      	movs	r0, #1
 80201ee:	bd08      	pop	{r3, pc}
 80201f0:	24009074 	.word	0x24009074

080201f4 <targetTask>:
    pointer = mallocMPU(32);

    */

    AFLfuzzer.xTypeEx = EX_NO_EX;
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80201f4:	2201      	movs	r2, #1
 80201f6:	482e      	ldr	r0, [pc, #184]	; (80202b0 <targetTask+0xbc>)
{
 80201f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    AFLfuzzer.xTypeEx = EX_NO_EX;
 80201fc:	2500      	movs	r5, #0
{
 80201fe:	b082      	sub	sp, #8
    AFLfuzzer.xTypeEx = EX_NO_EX;
 8020200:	4c2c      	ldr	r4, [pc, #176]	; (80202b4 <targetTask+0xc0>)
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8020202:	4611      	mov	r1, r2
 8020204:	4f2c      	ldr	r7, [pc, #176]	; (80202b8 <targetTask+0xc4>)
    AFLfuzzer.xTypeEx = EX_NO_EX;
 8020206:	f884 5874 	strb.w	r5, [r4, #2164]	; 0x874
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 802020a:	f7ec fbfb 	bl	800ca04 <HAL_GPIO_WritePin>
    uint8_t firstRun=1;

   	xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite); //notify the fuzzer task the target is ready
 802020e:	2201      	movs	r2, #1
 8020210:	2102      	movs	r1, #2
 8020212:	2303      	movs	r3, #3
 8020214:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 8020218:	9500      	str	r5, [sp, #0]
 802021a:	f7e8 f8df 	bl	80083dc <MPU_xTaskGenericNotify>
   	cat_init(&cat_obj, &desc, &iface, NULL);
 802021e:	462b      	mov	r3, r5
 8020220:	4a26      	ldr	r2, [pc, #152]	; (80202bc <targetTask+0xc8>)
 8020222:	4927      	ldr	r1, [pc, #156]	; (80202c0 <targetTask+0xcc>)
 8020224:	4827      	ldr	r0, [pc, #156]	; (80202c4 <targetTask+0xd0>)
 8020226:	f7f6 fa1d 	bl	8016664 <cat_init>
   	for( ; ; )
	{

    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 802022a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802022e:	2101      	movs	r1, #1
 8020230:	4628      	mov	r0, r5
 8020232:	f7e8 f913 	bl	800845c <MPU_ulTaskGenericNotifyTake>
    		memset(AFLfuzzer.afldiff,0, AFL_BITMAP_SIZE/4 *sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
    		AFLfuzzer.indexdif = 0;
    		firstRun=0;
    	}

		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8020236:	4e1e      	ldr	r6, [pc, #120]	; (80202b0 <targetTask+0xbc>)
    		memset(AFLfuzzer.aflbmp,0,AFL_BITMAP_SIZE*sizeof(uint16_t));
 8020238:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802023c:	4629      	mov	r1, r5
 802023e:	f5a4 40c0 	sub.w	r0, r4, #24576	; 0x6000
    		AFLfuzzer.previousGuard = 0;
 8020242:	f8a4 5858 	strh.w	r5, [r4, #2136]	; 0x858
    		memset(AFLfuzzer.aflbmp,0,AFL_BITMAP_SIZE*sizeof(uint16_t));
 8020246:	f001 fe0b 	bl	8021e60 <memset>
    		memset(AFLfuzzer.afldiff,0, AFL_BITMAP_SIZE/4 *sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 802024a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802024e:	4629      	mov	r1, r5
 8020250:	f5a4 5000 	sub.w	r0, r4, #8192	; 0x2000
 8020254:	f001 fe04 	bl	8021e60 <memset>
    		AFLfuzzer.indexdif = 0;
 8020258:	f8a4 5862 	strh.w	r5, [r4, #2146]	; 0x862
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 802025c:	2200      	movs	r2, #0
 802025e:	2101      	movs	r1, #1
 8020260:	4630      	mov	r0, r6
 8020262:	f7ec fbcf 	bl	800ca04 <HAL_GPIO_WritePin>
		}
		printf("\n");
		*/
		input_cursor = 0;
		// since if input_cursor goes beyond the input buffer, read will just return \n so the buffer won't overflow
		while(input_cursor < (pAFLfuzzer->inputAFL.u32availablenopad-4))
 8020266:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
		input_cursor = 0;
 802026a:	603d      	str	r5, [r7, #0]
		while(input_cursor < (pAFLfuzzer->inputAFL.u32availablenopad-4))
 802026c:	2b04      	cmp	r3, #4
 802026e:	d00a      	beq.n	8020286 <targetTask+0x92>
		{
			cat_service(&cat_obj);
 8020270:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80202c4 <targetTask+0xd0>
 8020274:	4640      	mov	r0, r8
 8020276:	f7f6 fcaf 	bl	8016bd8 <cat_service>
		while(input_cursor < (pAFLfuzzer->inputAFL.u32availablenopad-4))
 802027a:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
 802027e:	683a      	ldr	r2, [r7, #0]
 8020280:	3b04      	subs	r3, #4
 8020282:	4293      	cmp	r3, r2
 8020284:	d8f6      	bhi.n	8020274 <targetTask+0x80>
		}
		xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite);//notify that the test finished
 8020286:	2303      	movs	r3, #3
 8020288:	2208      	movs	r2, #8
 802028a:	2100      	movs	r1, #0
 802028c:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 8020290:	9500      	str	r5, [sp, #0]
 8020292:	f7e8 f8a3 	bl	80083dc <MPU_xTaskGenericNotify>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8020296:	2201      	movs	r2, #1
 8020298:	4630      	mov	r0, r6
 802029a:	4611      	mov	r1, r2
 802029c:	f7ec fbb2 	bl	800ca04 <HAL_GPIO_WritePin>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 80202a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80202a4:	2101      	movs	r1, #1
 80202a6:	2000      	movs	r0, #0
 80202a8:	f7e8 f8d8 	bl	800845c <MPU_ulTaskGenericNotifyTake>
    	if(firstRun)
 80202ac:	e7d6      	b.n	802025c <targetTask+0x68>
 80202ae:	bf00      	nop
 80202b0:	58020400 	.word	0x58020400
 80202b4:	24026000 	.word	0x24026000
 80202b8:	24031338 	.word	0x24031338
 80202bc:	24008ea4 	.word	0x24008ea4
 80202c0:	24008e38 	.word	0x24008e38
 80202c4:	240312b0 	.word	0x240312b0

080202c8 <fuzzerTask>:
}

uint16_t *indexdifP;
uint8_t  bufferDMA[550];
static void fuzzerTask( void * pvParameters )
{
 80202c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
    uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
    #endif

    indexdifP = &AFLfuzzer.indexdif;
 80202cc:	4bc0      	ldr	r3, [pc, #768]	; (80205d0 <fuzzerTask+0x308>)
{
 80202ce:	b0ad      	sub	sp, #180	; 0xb4
	 * 1: Notification from USB USART driver to the fuzzer task when data has arrived
	 * 2: Notification from target to fuzzer to signal readiness to execute the test
	 * ********/

	/**Lets poison the AFLfuzzer structure**/
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 80202d0:	4fc0      	ldr	r7, [pc, #768]	; (80205d4 <fuzzerTask+0x30c>)
	error_cnt = 0;
 80202d2:	2500      	movs	r5, #0
    indexdifP = &AFLfuzzer.indexdif;
 80202d4:	4ac0      	ldr	r2, [pc, #768]	; (80205d8 <fuzzerTask+0x310>)
	uint32_t HelperShadowSize = AFLINPUTREGION_SIZE>>3;
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
	// the only section that should be accessible by the target is the input buffer, so lets un-poison it
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 80202d6:	f507 44c0 	add.w	r4, r7, #24576	; 0x6000
 80202da:	4ec0      	ldr	r6, [pc, #768]	; (80205dc <fuzzerTask+0x314>)
    indexdifP = &AFLfuzzer.indexdif;
 80202dc:	601a      	str	r2, [r3, #0]
	MX_USB_DEVICE_Init();
 80202de:	f001 f92f 	bl	8021540 <MX_USB_DEVICE_Init>
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 80202e2:	08f8      	lsrs	r0, r7, #3
	error_cnt = 0;
 80202e4:	4bbe      	ldr	r3, [pc, #760]	; (80205e0 <fuzzerTask+0x318>)
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 80202e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80202ea:	21ff      	movs	r1, #255	; 0xff
 80202ec:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
	error_cnt = 0;
 80202f0:	601d      	str	r5, [r3, #0]
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 80202f2:	f001 fdb5 	bl	8021e60 <memset>
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 80202f6:	f44f 7280 	mov.w	r2, #256	; 0x100
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 80202fa:	08e0      	lsrs	r0, r4, #3
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 80202fc:	4629      	mov	r1, r5
			 tuple_t *auxdiff = AFLfuzzer.afldiff + 1; // the first tuple is empty so we can skip it
			 union ubytes_t *crcbytes;
			 crcbytes = (union ubytes_t *)(auxdiff + AFLfuzzer.indexdif); //set CRC bytes * at the end of the tuple array

			 //calculate the CRC of the return value and payload size
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 80202fe:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8020610 <fuzzerTask+0x348>
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 8020302:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 8020306:	f001 fdab 	bl	8021e60 <memset>
   TaskParameters_t targetTaskParameters =
 802030a:	2298      	movs	r2, #152	; 0x98
 802030c:	4629      	mov	r1, r5
 802030e:	a806      	add	r0, sp, #24
	numberofcycles = 0;
 8020310:	9503      	str	r5, [sp, #12]
   TaskParameters_t targetTaskParameters =
 8020312:	f001 fda5 	bl	8021e60 <memset>
 8020316:	4bb3      	ldr	r3, [pc, #716]	; (80205e4 <fuzzerTask+0x31c>)
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020318:	f504 6107 	add.w	r1, r4, #2160	; 0x870
   TaskParameters_t targetTaskParameters =
 802031c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020320:	a804      	add	r0, sp, #16
   TaskParameters_t targetTaskParameters =
 8020322:	9304      	str	r3, [sp, #16]
 8020324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020328:	f1a1 0a1c 	sub.w	sl, r1, #28
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 802032c:	f1a1 095c 	sub.w	r9, r1, #92	; 0x5c
   TaskParameters_t targetTaskParameters =
 8020330:	930b      	str	r3, [sp, #44]	; 0x2c
 8020332:	9311      	str	r3, [sp, #68]	; 0x44
 8020334:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8020338:	970a      	str	r7, [sp, #40]	; 0x28
 802033a:	930c      	str	r3, [sp, #48]	; 0x30
 802033c:	9312      	str	r3, [sp, #72]	; 0x48
 802033e:	4baa      	ldr	r3, [pc, #680]	; (80205e8 <fuzzerTask+0x320>)
 8020340:	9305      	str	r3, [sp, #20]
 8020342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020346:	f8ad 3018 	strh.w	r3, [sp, #24]
 802034a:	4ba8      	ldr	r3, [pc, #672]	; (80205ec <fuzzerTask+0x324>)
 802034c:	9308      	str	r3, [sp, #32]
 802034e:	4ba8      	ldr	r3, [pc, #672]	; (80205f0 <fuzzerTask+0x328>)
 8020350:	9309      	str	r3, [sp, #36]	; 0x24
 8020352:	4ba8      	ldr	r3, [pc, #672]	; (80205f4 <fuzzerTask+0x32c>)
 8020354:	930d      	str	r3, [sp, #52]	; 0x34
 8020356:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802035a:	9310      	str	r3, [sp, #64]	; 0x40
 802035c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8020360:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020364:	f7e2 fdbc 	bl	8002ee0 <xTaskCreateRestricted>
	ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8020368:	220a      	movs	r2, #10
 802036a:	2101      	movs	r1, #1
 802036c:	2002      	movs	r0, #2
 802036e:	f7e8 f875 	bl	800845c <MPU_ulTaskGenericNotifyTake>
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8020372:	2101      	movs	r1, #1
 8020374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020378:	4608      	mov	r0, r1
 802037a:	f7e8 f86f 	bl	800845c <MPU_ulTaskGenericNotifyTake>
			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 802037e:	2200      	movs	r2, #0
 8020380:	2303      	movs	r3, #3
 8020382:	9500      	str	r5, [sp, #0]
 8020384:	4611      	mov	r1, r2
 8020386:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 802038a:	f7e8 f827 	bl	80083dc <MPU_xTaskGenericNotify>
			 notificationvalue = ulTaskNotifyTakeIndexed(0,pdTRUE, TARGET_TIMEOUT);
 802038e:	2214      	movs	r2, #20
 8020390:	2101      	movs	r1, #1
 8020392:	2000      	movs	r0, #0
 8020394:	f7e8 f862 	bl	800845c <MPU_ulTaskGenericNotifyTake>
			 if (notificationvalue == 0) // TIMEOUT
 8020398:	4683      	mov	fp, r0
 802039a:	2800      	cmp	r0, #0
 802039c:	d05e      	beq.n	802045c <fuzzerTask+0x194>
			 else if(notificationvalue == FAULT_ASAN)
 802039e:	2809      	cmp	r0, #9
 80203a0:	f000 813a 	beq.w	8020618 <fuzzerTask+0x350>
			 else if(notificationvalue == FAULT_CRASH)
 80203a4:	2802      	cmp	r0, #2
 80203a6:	f000 80d0 	beq.w	802054a <fuzzerTask+0x282>
			 else if (notificationvalue == FAULT_NONE_RTOS)
 80203aa:	2808      	cmp	r0, #8
 80203ac:	f000 8092 	beq.w	80204d4 <fuzzerTask+0x20c>
			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 80203b0:	f8b4 3862 	ldrh.w	r3, [r4, #2146]	; 0x862
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 80203b4:	2202      	movs	r2, #2
 80203b6:	4649      	mov	r1, r9
 80203b8:	4640      	mov	r0, r8
			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 80203ba:	f103 0b01 	add.w	fp, r3, #1
 80203be:	fa0b f302 	lsl.w	r3, fp, r2
 80203c2:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 80203c6:	f7ea fd03 	bl	800add0 <HAL_CRC_Calculate>
			 //calculate the CRC of the tuples (payload)
			 uwCRCValue = HAL_CRC_Accumulate(&hcrc, (uint32_t *)auxdiff, AFLfuzzer.indexdif);
 80203ca:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 80203ce:	4631      	mov	r1, r6
 80203d0:	4640      	mov	r0, r8
 80203d2:	f7ea fcbb 	bl	800ad4c <HAL_CRC_Accumulate>

			 // invert the CRC to match the zlib method
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 80203d6:	4b88      	ldr	r3, [pc, #544]	; (80205f8 <fuzzerTask+0x330>)
 80203d8:	43c0      	mvns	r0, r0

			 AFLfuzzer.bTXcomplete = false;

			 #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 80203da:	2108      	movs	r1, #8
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 80203dc:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 80203e0:	4648      	mov	r0, r9
			 AFLfuzzer.bTXcomplete = false;
 80203e2:	f884 5865 	strb.w	r5, [r4, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 80203e6:	f001 f931 	bl	802164c <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)AFLfuzzer.aflheader, 8);
			 //HAL_UART_Transmit_DMA(&huart3,(uint8_t *)AFLfuzzer.aflheader, 8);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 80203ea:	2101      	movs	r1, #1
 80203ec:	220a      	movs	r2, #10
 80203ee:	4608      	mov	r0, r1
 80203f0:	f7e8 f834 	bl	800845c <MPU_ulTaskGenericNotifyTake>

			 AFLfuzzer.bTXcomplete = false;
             #if USARTHW == 0
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 80203f4:	f8b4 1818 	ldrh.w	r1, [r4, #2072]	; 0x818
 80203f8:	4630      	mov	r0, r6
			 AFLfuzzer.bTXcomplete = false;
 80203fa:	f884 5865 	strb.w	r5, [r4, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 80203fe:	f001 f925 	bl	802164c <CDC_Transmit_FS>
			 HAL_UART_Transmit_IT(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
			 //HAL_UART_Transmit_DMA(&huart3, (uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
             #endif

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8020402:	2101      	movs	r1, #1
 8020404:	220a      	movs	r2, #10
 8020406:	4608      	mov	r0, r1
 8020408:	f7e8 f828 	bl	800845c <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bRXcomplete = false;
			 AFLfuzzer.inputLength = 0;
			 AFLfuzzer.previousGuard = 0;
			 RingZeroes(&AFLfuzzer.inputAFL);
 802040c:	487b      	ldr	r0, [pc, #492]	; (80205fc <fuzzerTask+0x334>)
			 AFLfuzzer.bRXcomplete = false;
 802040e:	f884 5864 	strb.w	r5, [r4, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 8020412:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
			 AFLfuzzer.previousGuard = 0;
 8020416:	f8a4 5858 	strh.w	r5, [r4, #2136]	; 0x858
			 RingZeroes(&AFLfuzzer.inputAFL);
 802041a:	f7e9 ff05 	bl	800a228 <RingZeroes>

			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 802041e:	f8b4 3862 	ldrh.w	r3, [r4, #2146]	; 0x862
 8020422:	b1cb      	cbz	r3, 8020458 <fuzzerTask+0x190>
 8020424:	2300      	movs	r3, #0
			 {
				 paflbitmap[auxdiff[i].index]=0;
 8020426:	f836 2023 	ldrh.w	r2, [r6, r3, lsl #2]
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 802042a:	3301      	adds	r3, #1
				 paflbitmap[auxdiff[i].index]=0;
 802042c:	f827 5012 	strh.w	r5, [r7, r2, lsl #1]
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8020430:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 8020434:	429a      	cmp	r2, r3
 8020436:	d8f6      	bhi.n	8020426 <fuzzerTask+0x15e>
			 }
			 memset(AFLfuzzer.afldiff,0,(AFLfuzzer.indexdif+2)*sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 8020438:	3202      	adds	r2, #2
 802043a:	0092      	lsls	r2, r2, #2
 802043c:	2100      	movs	r1, #0
 802043e:	486e      	ldr	r0, [pc, #440]	; (80205f8 <fuzzerTask+0x330>)
 8020440:	f001 fd0e 	bl	8021e60 <memset>
			 AFLfuzzer.indexdif = 0;
 8020444:	f8a4 5862 	strh.w	r5, [r4, #2146]	; 0x862
			 AFLfuzzer.timespan = HAL_GetTick() - AFLfuzzer.timespan;
 8020448:	f7ea fb50 	bl	800aaec <HAL_GetTick>
 802044c:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
 8020450:	1ac0      	subs	r0, r0, r3
 8020452:	f8c4 082c 	str.w	r0, [r4, #2092]	; 0x82c
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8020456:	e78c      	b.n	8020372 <fuzzerTask+0xaa>
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 8020458:	2208      	movs	r2, #8
 802045a:	e7ef      	b.n	802043c <fuzzerTask+0x174>
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 802045c:	2301      	movs	r3, #1
				 printf("Target timeout, starting a new target process...\n");
 802045e:	4868      	ldr	r0, [pc, #416]	; (8020600 <fuzzerTask+0x338>)
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 8020460:	f8c4 3814 	str.w	r3, [r4, #2068]	; 0x814
				 printf("Target timeout, starting a new target process...\n");
 8020464:	f002 f9be 	bl	80227e4 <puts>
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 8020468:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 802046c:	f7e7 fe64 	bl	8008138 <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 8020470:	df01      	svc	1
   TaskParameters_t targetTaskParameters =
 8020472:	2298      	movs	r2, #152	; 0x98
 8020474:	4659      	mov	r1, fp
 8020476:	a806      	add	r0, sp, #24
				 numberofcycles = 0;
 8020478:	f8cd b00c 	str.w	fp, [sp, #12]
   TaskParameters_t targetTaskParameters =
 802047c:	f001 fcf0 	bl	8021e60 <memset>
 8020480:	4b58      	ldr	r3, [pc, #352]	; (80205e4 <fuzzerTask+0x31c>)
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020482:	4960      	ldr	r1, [pc, #384]	; (8020604 <fuzzerTask+0x33c>)
 8020484:	a804      	add	r0, sp, #16
   TaskParameters_t targetTaskParameters =
 8020486:	9304      	str	r3, [sp, #16]
 8020488:	4b57      	ldr	r3, [pc, #348]	; (80205e8 <fuzzerTask+0x320>)
 802048a:	9305      	str	r3, [sp, #20]
 802048c:	4b58      	ldr	r3, [pc, #352]	; (80205f0 <fuzzerTask+0x328>)
 802048e:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 8020492:	4b58      	ldr	r3, [pc, #352]	; (80205f4 <fuzzerTask+0x32c>)
 8020494:	930d      	str	r3, [sp, #52]	; 0x34
 8020496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802049a:	930b      	str	r3, [sp, #44]	; 0x2c
 802049c:	9311      	str	r3, [sp, #68]	; 0x44
 802049e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80204a2:	930c      	str	r3, [sp, #48]	; 0x30
 80204a4:	9312      	str	r3, [sp, #72]	; 0x48
 80204a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80204aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80204ae:	4b4f      	ldr	r3, [pc, #316]	; (80205ec <fuzzerTask+0x324>)
 80204b0:	9308      	str	r3, [sp, #32]
 80204b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80204b6:	9310      	str	r3, [sp, #64]	; 0x40
 80204b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80204bc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80204c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 80204c4:	f7e2 fd0c 	bl	8002ee0 <xTaskCreateRestricted>
					ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80204c8:	220a      	movs	r2, #10
 80204ca:	2101      	movs	r1, #1
 80204cc:	2002      	movs	r0, #2
 80204ce:	f7e7 ffc5 	bl	800845c <MPU_ulTaskGenericNotifyTake>
 80204d2:	e76d      	b.n	80203b0 <fuzzerTask+0xe8>
				numberofcycles++;
 80204d4:	9b03      	ldr	r3, [sp, #12]
				AFLfuzzer.aflheader[0] = notificationvalue;
 80204d6:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
				numberofcycles++;
 80204da:	3301      	adds	r3, #1
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS)
 80204dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
				numberofcycles++;
 80204e0:	9303      	str	r3, [sp, #12]
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS)
 80204e2:	f4ff af65 	bcc.w	80203b0 <fuzzerTask+0xe8>
 80204e6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8020614 <fuzzerTask+0x34c>
						 if(AFLfuzzer.allocs[i])
 80204ea:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80204ee:	b108      	cbz	r0, 80204f4 <fuzzerTask+0x22c>
							 free(AFLfuzzer.allocs[i]);
 80204f0:	f001 fca0 	bl	8021e34 <free>
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 80204f4:	45da      	cmp	sl, fp
 80204f6:	d1f8      	bne.n	80204ea <fuzzerTask+0x222>
					vTaskDelete(AFLfuzzer.xTaskTarget);
 80204f8:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 80204fc:	f7e7 fe1c 	bl	8008138 <MPU_vTaskDelete>
				    taskYIELD();
 8020500:	df01      	svc	1
   TaskParameters_t targetTaskParameters =
 8020502:	2100      	movs	r1, #0
 8020504:	2298      	movs	r2, #152	; 0x98
 8020506:	a806      	add	r0, sp, #24
 8020508:	f001 fcaa 	bl	8021e60 <memset>
 802050c:	4b35      	ldr	r3, [pc, #212]	; (80205e4 <fuzzerTask+0x31c>)
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 802050e:	493d      	ldr	r1, [pc, #244]	; (8020604 <fuzzerTask+0x33c>)
 8020510:	a804      	add	r0, sp, #16
   TaskParameters_t targetTaskParameters =
 8020512:	9304      	str	r3, [sp, #16]
 8020514:	4b34      	ldr	r3, [pc, #208]	; (80205e8 <fuzzerTask+0x320>)
 8020516:	9305      	str	r3, [sp, #20]
 8020518:	4b35      	ldr	r3, [pc, #212]	; (80205f0 <fuzzerTask+0x328>)
 802051a:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 802051e:	4b35      	ldr	r3, [pc, #212]	; (80205f4 <fuzzerTask+0x32c>)
 8020520:	930d      	str	r3, [sp, #52]	; 0x34
 8020522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020526:	930b      	str	r3, [sp, #44]	; 0x2c
 8020528:	9311      	str	r3, [sp, #68]	; 0x44
 802052a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 802052e:	930c      	str	r3, [sp, #48]	; 0x30
 8020530:	9312      	str	r3, [sp, #72]	; 0x48
 8020532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020536:	f8ad 3018 	strh.w	r3, [sp, #24]
 802053a:	4b2c      	ldr	r3, [pc, #176]	; (80205ec <fuzzerTask+0x324>)
 802053c:	9308      	str	r3, [sp, #32]
 802053e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8020542:	9310      	str	r3, [sp, #64]	; 0x40
					numberofcycles=0;
 8020544:	2300      	movs	r3, #0
 8020546:	9303      	str	r3, [sp, #12]
 8020548:	e7b6      	b.n	80204b8 <fuzzerTask+0x1f0>
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 802054a:	4b2f      	ldr	r3, [pc, #188]	; (8020608 <fuzzerTask+0x340>)
 802054c:	f894 2874 	ldrb.w	r2, [r4, #2164]	; 0x874
 8020550:	f8d4 1868 	ldr.w	r1, [r4, #2152]	; 0x868
 8020554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				 AFLfuzzer.aflheader[0] = notificationvalue;
 8020558:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 802055c:	482b      	ldr	r0, [pc, #172]	; (802060c <fuzzerTask+0x344>)
 802055e:	f002 f855 	bl	802260c <iprintf>
   TaskParameters_t targetTaskParameters =
 8020562:	2298      	movs	r2, #152	; 0x98
 8020564:	2100      	movs	r1, #0
 8020566:	a806      	add	r0, sp, #24
 8020568:	f001 fc7a 	bl	8021e60 <memset>
 802056c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8020570:	4b1c      	ldr	r3, [pc, #112]	; (80205e4 <fuzzerTask+0x31c>)
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020572:	a804      	add	r0, sp, #16
   TaskParameters_t targetTaskParameters =
 8020574:	920b      	str	r2, [sp, #44]	; 0x2c
 8020576:	9211      	str	r2, [sp, #68]	; 0x44
 8020578:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 802057c:	9304      	str	r3, [sp, #16]
 802057e:	920c      	str	r2, [sp, #48]	; 0x30
 8020580:	9212      	str	r2, [sp, #72]	; 0x48
 8020582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020586:	4b18      	ldr	r3, [pc, #96]	; (80205e8 <fuzzerTask+0x320>)
 8020588:	f8ad 2018 	strh.w	r2, [sp, #24]
 802058c:	9305      	str	r3, [sp, #20]
 802058e:	4a17      	ldr	r2, [pc, #92]	; (80205ec <fuzzerTask+0x324>)
 8020590:	4b17      	ldr	r3, [pc, #92]	; (80205f0 <fuzzerTask+0x328>)
 8020592:	9208      	str	r2, [sp, #32]
 8020594:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020598:	491a      	ldr	r1, [pc, #104]	; (8020604 <fuzzerTask+0x33c>)
   TaskParameters_t targetTaskParameters =
 802059a:	9210      	str	r2, [sp, #64]	; 0x40
 802059c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80205c8 <fuzzerTask+0x300>
 80205a0:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 80205a4:	4b13      	ldr	r3, [pc, #76]	; (80205f4 <fuzzerTask+0x32c>)
 80205a6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80205aa:	930d      	str	r3, [sp, #52]	; 0x34
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 80205ac:	f7e2 fc98 	bl	8002ee0 <xTaskCreateRestricted>
				 taskYIELD(); // let's the kernel clean the TCB
 80205b0:	df01      	svc	1
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80205b2:	220a      	movs	r2, #10
 80205b4:	4658      	mov	r0, fp
 80205b6:	2101      	movs	r1, #1
 80205b8:	f7e7 ff50 	bl	800845c <MPU_ulTaskGenericNotifyTake>
				 numberofcycles = 0;
 80205bc:	2300      	movs	r3, #0
 80205be:	9303      	str	r3, [sp, #12]
 80205c0:	e6f6      	b.n	80203b0 <fuzzerTask+0xe8>
 80205c2:	bf00      	nop
 80205c4:	f3af 8000 	nop.w
 80205c8:	00002000 	.word	0x00002000
 80205cc:	03000000 	.word	0x03000000
 80205d0:	24031334 	.word	0x24031334
 80205d4:	24020000 	.word	0x24020000
 80205d8:	24026862 	.word	0x24026862
 80205dc:	24024004 	.word	0x24024004
 80205e0:	2403132c 	.word	0x2403132c
 80205e4:	080201f5 	.word	0x080201f5
 80205e8:	2400acc0 	.word	0x2400acc0
 80205ec:	80000014 	.word	0x80000014
 80205f0:	24032000 	.word	0x24032000
 80205f4:	24036000 	.word	0x24036000
 80205f8:	24024000 	.word	0x24024000
 80205fc:	24026000 	.word	0x24026000
 8020600:	2400acc8 	.word	0x2400acc8
 8020604:	24026870 	.word	0x24026870
 8020608:	24008d38 	.word	0x24008d38
 802060c:	2400ad10 	.word	0x2400ad10
 8020610:	240116ac 	.word	0x240116ac
 8020614:	2402682c 	.word	0x2402682c
 8020618:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80206d0 <fuzzerTask+0x408>
					 if(AFLfuzzer.allocs[i])
 802061c:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8020620:	b108      	cbz	r0, 8020626 <fuzzerTask+0x35e>
						 free(AFLfuzzer.allocs[i]);
 8020622:	f001 fc07 	bl	8021e34 <free>
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 8020626:	45da      	cmp	sl, fp
 8020628:	d1f8      	bne.n	802061c <fuzzerTask+0x354>
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 802062a:	f894 3874 	ldrb.w	r3, [r4, #2164]	; 0x874
				  AFLfuzzer.aflheader[0] = notificationvalue;
 802062e:	f04f 0b02 	mov.w	fp, #2
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 8020632:	4a1f      	ldr	r2, [pc, #124]	; (80206b0 <fuzzerTask+0x3e8>)
				  AFLfuzzer.aflheader[0] = notificationvalue;
 8020634:	f8c4 b814 	str.w	fp, [r4, #2068]	; 0x814
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 8020638:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802063c:	481d      	ldr	r0, [pc, #116]	; (80206b4 <fuzzerTask+0x3ec>)
 802063e:	f001 ffe5 	bl	802260c <iprintf>
				  vTaskDelete(AFLfuzzer.xTaskTarget);
 8020642:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 8020646:	f7e7 fd77 	bl	8008138 <MPU_vTaskDelete>
				  taskYIELD();
 802064a:	df01      	svc	1
   TaskParameters_t targetTaskParameters =
 802064c:	2298      	movs	r2, #152	; 0x98
 802064e:	2100      	movs	r1, #0
 8020650:	a806      	add	r0, sp, #24
 8020652:	f001 fc05 	bl	8021e60 <memset>
 8020656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802065a:	4b17      	ldr	r3, [pc, #92]	; (80206b8 <fuzzerTask+0x3f0>)
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 802065c:	a804      	add	r0, sp, #16
   TaskParameters_t targetTaskParameters =
 802065e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020660:	9211      	str	r2, [sp, #68]	; 0x44
 8020662:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8020666:	9304      	str	r3, [sp, #16]
 8020668:	920c      	str	r2, [sp, #48]	; 0x30
 802066a:	9212      	str	r2, [sp, #72]	; 0x48
 802066c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020670:	4b12      	ldr	r3, [pc, #72]	; (80206bc <fuzzerTask+0x3f4>)
 8020672:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020676:	9305      	str	r3, [sp, #20]
 8020678:	4a11      	ldr	r2, [pc, #68]	; (80206c0 <fuzzerTask+0x3f8>)
 802067a:	4b12      	ldr	r3, [pc, #72]	; (80206c4 <fuzzerTask+0x3fc>)
 802067c:	9208      	str	r2, [sp, #32]
 802067e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020682:	4911      	ldr	r1, [pc, #68]	; (80206c8 <fuzzerTask+0x400>)
   TaskParameters_t targetTaskParameters =
 8020684:	9210      	str	r2, [sp, #64]	; 0x40
 8020686:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80206a8 <fuzzerTask+0x3e0>
 802068a:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 802068e:	4b0f      	ldr	r3, [pc, #60]	; (80206cc <fuzzerTask+0x404>)
 8020690:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8020694:	930d      	str	r3, [sp, #52]	; 0x34
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 8020696:	f7e2 fc23 	bl	8002ee0 <xTaskCreateRestricted>
 				  ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 802069a:	4658      	mov	r0, fp
 802069c:	220a      	movs	r2, #10
 802069e:	2101      	movs	r1, #1
 80206a0:	f7e7 fedc 	bl	800845c <MPU_ulTaskGenericNotifyTake>
 80206a4:	e684      	b.n	80203b0 <fuzzerTask+0xe8>
 80206a6:	bf00      	nop
 80206a8:	00002000 	.word	0x00002000
 80206ac:	03000000 	.word	0x03000000
 80206b0:	24008d38 	.word	0x24008d38
 80206b4:	2400acfc 	.word	0x2400acfc
 80206b8:	080201f5 	.word	0x080201f5
 80206bc:	2400acc0 	.word	0x2400acc0
 80206c0:	80000014 	.word	0x80000014
 80206c4:	24032000 	.word	0x24032000
 80206c8:	24026870 	.word	0x24026870
 80206cc:	24036000 	.word	0x24036000
 80206d0:	2402682c 	.word	0x2402682c

080206d4 <HAL_UART_TxCpltCallback>:
#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
#endif

	if(huart == &huart3)
 80206d4:	4b04      	ldr	r3, [pc, #16]	; (80206e8 <HAL_UART_TxCpltCallback+0x14>)
 80206d6:	4283      	cmp	r3, r0
 80206d8:	d000      	beq.n	80206dc <HAL_UART_TxCpltCallback+0x8>
    {
    	AFLfuzzer.bTXcomplete = true;
    }

}
 80206da:	4770      	bx	lr
    	AFLfuzzer.bTXcomplete = true;
 80206dc:	4b03      	ldr	r3, [pc, #12]	; (80206ec <HAL_UART_TxCpltCallback+0x18>)
 80206de:	2201      	movs	r2, #1
 80206e0:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
}
 80206e4:	4770      	bx	lr
 80206e6:	bf00      	nop
 80206e8:	240117d4 	.word	0x240117d4
 80206ec:	24026000 	.word	0x24026000

080206f0 <HAL_UART_ErrorCallback>:

uint32_t errors;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80206f0:	b538      	push	{r3, r4, r5, lr}

	 HAL_UART_Abort_IT(&huart3);
	 HAL_UART_Receive_IT(&huart3, data, 4);
*/

     HAL_UART_Abort(&huart3);
 80206f2:	4c19      	ldr	r4, [pc, #100]	; (8020758 <HAL_UART_ErrorCallback+0x68>)

    errors++;



	 AFLfuzzer.bRXcomplete = false;
 80206f4:	4d19      	ldr	r5, [pc, #100]	; (802075c <HAL_UART_ErrorCallback+0x6c>)
     HAL_UART_Abort(&huart3);
 80206f6:	4620      	mov	r0, r4
 80206f8:	f7ef f856 	bl	800f7a8 <HAL_UART_Abort>
 	 __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80206fc:	6823      	ldr	r3, [r4, #0]
     HAL_UART_DeInit(&huart3);
 80206fe:	4620      	mov	r0, r4
 	 __HAL_UART_FLUSH_DRREGISTER(&huart3);
 8020700:	699a      	ldr	r2, [r3, #24]
 8020702:	f042 0208 	orr.w	r2, r2, #8
 8020706:	619a      	str	r2, [r3, #24]
 8020708:	699a      	ldr	r2, [r3, #24]
 802070a:	f042 0210 	orr.w	r2, r2, #16
 802070e:	619a      	str	r2, [r3, #24]
     HAL_UART_DeInit(&huart3);
 8020710:	f7ee ff80 	bl	800f614 <HAL_UART_DeInit>
	 __HAL_UART_DISABLE(&huart3);
 8020714:	6823      	ldr	r3, [r4, #0]
	 HAL_UART_Init(&huart3);
 8020716:	4620      	mov	r0, r4
	 __HAL_UART_DISABLE(&huart3);
 8020718:	681a      	ldr	r2, [r3, #0]
 802071a:	f022 0201 	bic.w	r2, r2, #1
 802071e:	601a      	str	r2, [r3, #0]
	 __HAL_UART_ENABLE(&huart3);
 8020720:	681a      	ldr	r2, [r3, #0]
 8020722:	f042 0201 	orr.w	r2, r2, #1
 8020726:	601a      	str	r2, [r3, #0]
	 HAL_UART_Init(&huart3);
 8020728:	f7ef ffcc 	bl	80106c4 <HAL_UART_Init>
    errors++;
 802072c:	490c      	ldr	r1, [pc, #48]	; (8020760 <HAL_UART_ErrorCallback+0x70>)
	 AFLfuzzer.bRXcomplete = false;
 802072e:	2200      	movs	r2, #0
	 AFLfuzzer.inputLength = 0;
	 AFLfuzzer.previousGuard = 0;
	 RingZeroes(&AFLfuzzer.inputAFL);
 8020730:	4628      	mov	r0, r5
    errors++;
 8020732:	680b      	ldr	r3, [r1, #0]
	 AFLfuzzer.bRXcomplete = false;
 8020734:	f885 2864 	strb.w	r2, [r5, #2148]	; 0x864
    errors++;
 8020738:	3301      	adds	r3, #1
	 AFLfuzzer.inputLength = 0;
 802073a:	f8c5 2824 	str.w	r2, [r5, #2084]	; 0x824
	 AFLfuzzer.previousGuard = 0;
 802073e:	f8a5 2858 	strh.w	r2, [r5, #2136]	; 0x858
    errors++;
 8020742:	600b      	str	r3, [r1, #0]
	 RingZeroes(&AFLfuzzer.inputAFL);
 8020744:	f7e9 fd70 	bl	800a228 <RingZeroes>
	 HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
 8020748:	4629      	mov	r1, r5
 802074a:	4620      	mov	r0, r4
 802074c:	2204      	movs	r2, #4
	 //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);

}
 802074e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
 8020752:	f7ee bf7d 	b.w	800f650 <HAL_UART_Receive_IT>
 8020756:	bf00      	nop
 8020758:	240117d4 	.word	0x240117d4
 802075c:	24026000 	.word	0x24026000
 8020760:	24031330 	.word	0x24031330

08020764 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020764:	b510      	push	{r4, lr}
	union ubytes_t auxbytes;
	uint8_t *data;
	uint8_t padding;
	data = AFLfuzzer.inputAFL.uxBuffer;

    if(AFLfuzzer.breceiving == false)
 8020766:	4c21      	ldr	r4, [pc, #132]	; (80207ec <HAL_UART_RxCpltCallback+0x88>)
 8020768:	f894 3866 	ldrb.w	r3, [r4, #2150]	; 0x866
 802076c:	b9f3      	cbnz	r3, 80207ac <HAL_UART_RxCpltCallback+0x48>
    {
    	AFLfuzzer.breceiving = true;
 802076e:	6823      	ldr	r3, [r4, #0]
    	auxbytes.vbytes[0] = data[0];
    	auxbytes.vbytes[1] = data[1];
    	auxbytes.vbytes[2] = data[2];
    	auxbytes.vbytes[3] = data[3];
    	AFLfuzzer.inputLength = auxbytes.vint32;
        if(auxbytes.vint32 < 530)
 8020770:	f240 2211 	movw	r2, #529	; 0x211
    	AFLfuzzer.breceiving = true;
 8020774:	2101      	movs	r1, #1
        if(auxbytes.vint32 < 530)
 8020776:	4293      	cmp	r3, r2
    	AFLfuzzer.inputLength = auxbytes.vint32;
 8020778:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
    	AFLfuzzer.breceiving = true;
 802077c:	f884 1866 	strb.w	r1, [r4, #2150]	; 0x866
        if(auxbytes.vint32 < 530)
 8020780:	dc24      	bgt.n	80207cc <HAL_UART_RxCpltCallback+0x68>
        {
        	if (auxbytes.vint32 % 4)
        	{
        	     padding = 4 - auxbytes.vint32 % 4;
        	}
        	if (auxbytes.vint32 % 4)
 8020782:	f013 0203 	ands.w	r2, r3, #3
 8020786:	d008      	beq.n	802079a <HAL_UART_RxCpltCallback+0x36>
        	{
        	   padding = 4 - auxbytes.vint32 % 4;
 8020788:	4259      	negs	r1, r3
 802078a:	f001 0103 	and.w	r1, r1, #3
 802078e:	bf58      	it	pl
 8020790:	424a      	negpl	r2, r1
 8020792:	f1c2 0204 	rsb	r2, r2, #4
        	}
        	else
        	{
        	    padding = 0;
        	}
        	AFLfuzzer.inputLengthpadded = auxbytes.vint32 + padding;
 8020796:	fa53 f382 	uxtab	r3, r3, r2
 802079a:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
        	HAL_UART_Receive_IT(&huart3, data+4, AFLfuzzer.inputLengthpadded);
 802079e:	b29a      	uxth	r2, r3
 80207a0:	4913      	ldr	r1, [pc, #76]	; (80207f0 <HAL_UART_RxCpltCallback+0x8c>)
 80207a2:	4814      	ldr	r0, [pc, #80]	; (80207f4 <HAL_UART_RxCpltCallback+0x90>)

    	}

    }

}
 80207a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        	HAL_UART_Receive_IT(&huart3, data+4, AFLfuzzer.inputLengthpadded);
 80207a8:	f7ee bf52 	b.w	800f650 <HAL_UART_Receive_IT>
    	AFLfuzzer.inputAFL.u32available =  AFLfuzzer.inputLengthpadded  + 4;
 80207ac:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
    	AFLfuzzer.breceiving = false;
 80207b0:	2200      	movs	r2, #0
    	if(checkCRC(&AFLfuzzer.inputAFL))
 80207b2:	4620      	mov	r0, r4
    	AFLfuzzer.inputAFL.u32available =  AFLfuzzer.inputLengthpadded  + 4;
 80207b4:	3304      	adds	r3, #4
    	AFLfuzzer.breceiving = false;
 80207b6:	f884 2866 	strb.w	r2, [r4, #2150]	; 0x866
    	AFLfuzzer.inputAFL.u32available =  AFLfuzzer.inputLengthpadded  + 4;
 80207ba:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
    	if(checkCRC(&AFLfuzzer.inputAFL))
 80207be:	f7e9 fc39 	bl	800a034 <checkCRC>
 80207c2:	4603      	mov	r3, r0
 80207c4:	b118      	cbz	r0, 80207ce <HAL_UART_RxCpltCallback+0x6a>
    		AFLfuzzer.bRXcomplete = true;
 80207c6:	2301      	movs	r3, #1
 80207c8:	f884 3864 	strb.w	r3, [r4, #2148]	; 0x864
}
 80207cc:	bd10      	pop	{r4, pc}
			 RingZeroes(&AFLfuzzer.inputAFL);
 80207ce:	4620      	mov	r0, r4
			 AFLfuzzer.inputLength = 0;
 80207d0:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
			 AFLfuzzer.bRXcomplete = false;
 80207d4:	f884 3864 	strb.w	r3, [r4, #2148]	; 0x864
			 RingZeroes(&AFLfuzzer.inputAFL);
 80207d8:	f7e9 fd26 	bl	800a228 <RingZeroes>
			 HAL_UART_Receive_IT(&huart3, data, 4);
 80207dc:	4621      	mov	r1, r4
 80207de:	2204      	movs	r2, #4
 80207e0:	4804      	ldr	r0, [pc, #16]	; (80207f4 <HAL_UART_RxCpltCallback+0x90>)
}
 80207e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 HAL_UART_Receive_IT(&huart3, data, 4);
 80207e6:	f7ee bf33 	b.w	800f650 <HAL_UART_Receive_IT>
 80207ea:	bf00      	nop
 80207ec:	24026000 	.word	0x24026000
 80207f0:	24026004 	.word	0x24026004
 80207f4:	240117d4 	.word	0x240117d4

080207f8 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80207f8:	b500      	push	{lr}
 80207fa:	b083      	sub	sp, #12
 80207fc:	460b      	mov	r3, r1
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
#endif
	uint16_t len;

	len = Size;
	FuzzingInputHandler(bufferDMA, (uint32_t *)(&len));
 80207fe:	480b      	ldr	r0, [pc, #44]	; (802082c <HAL_UARTEx_RxEventCallback+0x34>)
 8020800:	f10d 0106 	add.w	r1, sp, #6
	len = Size;
 8020804:	f8ad 3006 	strh.w	r3, [sp, #6]
	FuzzingInputHandler(bufferDMA, (uint32_t *)(&len));
 8020808:	f7e9 fc2a 	bl	800a060 <FuzzingInputHandler>
	if(AFLfuzzer.bRXcomplete == false)
 802080c:	4b08      	ldr	r3, [pc, #32]	; (8020830 <HAL_UARTEx_RxEventCallback+0x38>)
 802080e:	f893 3864 	ldrb.w	r3, [r3, #2148]	; 0x864
 8020812:	b113      	cbz	r3, 802081a <HAL_UARTEx_RxEventCallback+0x22>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
	}

}
 8020814:	b003      	add	sp, #12
 8020816:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
 802081a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802081e:	4903      	ldr	r1, [pc, #12]	; (802082c <HAL_UARTEx_RxEventCallback+0x34>)
 8020820:	4804      	ldr	r0, [pc, #16]	; (8020834 <HAL_UARTEx_RxEventCallback+0x3c>)
 8020822:	f7f0 f96d 	bl	8010b00 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8020826:	b003      	add	sp, #12
 8020828:	f85d fb04 	ldr.w	pc, [sp], #4
 802082c:	24031084 	.word	0x24031084
 8020830:	24026000 	.word	0x24026000
 8020834:	240117d4 	.word	0x240117d4

08020838 <vStartMPUDemo>:



void vStartMPUDemo( void )
{
 8020838:	b500      	push	{lr}
 802083a:	b0a9      	sub	sp, #164	; 0xa4

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

TaskParameters_t fuzzerTaskParameters =
 802083c:	2100      	movs	r1, #0
 802083e:	2298      	movs	r2, #152	; 0x98
 8020840:	a802      	add	r0, sp, #8
 8020842:	f001 fb0d 	bl	8021e60 <memset>
 8020846:	4809      	ldr	r0, [pc, #36]	; (802086c <vStartMPUDemo+0x34>)
 8020848:	4909      	ldr	r1, [pc, #36]	; (8020870 <vStartMPUDemo+0x38>)
 802084a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 802084e:	4a09      	ldr	r2, [pc, #36]	; (8020874 <vStartMPUDemo+0x3c>)
 8020850:	4b09      	ldr	r3, [pc, #36]	; (8020878 <vStartMPUDemo+0x40>)
 8020852:	f8ad c008 	strh.w	ip, [sp, #8]
 8020856:	e9cd 0100 	strd	r0, r1, [sp]
							{ 0, 0, 0 },
					}
};

	/* Create the fuzzer task */
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 802085a:	4908      	ldr	r1, [pc, #32]	; (802087c <vStartMPUDemo+0x44>)
 802085c:	4668      	mov	r0, sp
TaskParameters_t fuzzerTaskParameters =
 802085e:	e9cd 2304 	strd	r2, r3, [sp, #16]
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 8020862:	f7e2 fb3d 	bl	8002ee0 <xTaskCreateRestricted>
	//spawnNewTarget();

}
 8020866:	b029      	add	sp, #164	; 0xa4
 8020868:	f85d fb04 	ldr.w	pc, [sp], #4
 802086c:	080202c9 	.word	0x080202c9
 8020870:	2400ad28 	.word	0x2400ad28
 8020874:	80000014 	.word	0x80000014
 8020878:	24030000 	.word	0x24030000
 802087c:	2402686c 	.word	0x2402686c

08020880 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020880:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020882:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8020886:	b194      	cbz	r4, 80208ae <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020888:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 802088c:	b16b      	cbz	r3, 80208aa <USBD_CDC_EP0_RxReady+0x2a>
 802088e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8020892:	28ff      	cmp	r0, #255	; 0xff
 8020894:	d009      	beq.n	80208aa <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020896:	689b      	ldr	r3, [r3, #8]
 8020898:	4621      	mov	r1, r4
 802089a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 802089e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80208a0:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 80208a2:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 80208a4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 80208a8:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 80208aa:	2000      	movs	r0, #0
}
 80208ac:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80208ae:	2003      	movs	r0, #3
}
 80208b0:	bd10      	pop	{r4, pc}
 80208b2:	bf00      	nop

080208b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80208b4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80208b6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 80208b8:	4801      	ldr	r0, [pc, #4]	; (80208c0 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80208ba:	801a      	strh	r2, [r3, #0]
}
 80208bc:	4770      	bx	lr
 80208be:	bf00      	nop
 80208c0:	24008f38 	.word	0x24008f38

080208c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80208c4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80208c6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 80208c8:	4801      	ldr	r0, [pc, #4]	; (80208d0 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80208ca:	801a      	strh	r2, [r3, #0]
}
 80208cc:	4770      	bx	lr
 80208ce:	bf00      	nop
 80208d0:	24008f7c 	.word	0x24008f7c

080208d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80208d4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80208d6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80208d8:	4801      	ldr	r0, [pc, #4]	; (80208e0 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80208da:	801a      	strh	r2, [r3, #0]
}
 80208dc:	4770      	bx	lr
 80208de:	bf00      	nop
 80208e0:	24008fcc 	.word	0x24008fcc

080208e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80208e4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80208e6:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 80208e8:	4801      	ldr	r0, [pc, #4]	; (80208f0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80208ea:	801a      	strh	r2, [r3, #0]
}
 80208ec:	4770      	bx	lr
 80208ee:	bf00      	nop
 80208f0:	24008fc0 	.word	0x24008fc0

080208f4 <USBD_CDC_DataOut>:
{
 80208f4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80208f6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80208fa:	b17d      	cbz	r5, 802091c <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80208fc:	4604      	mov	r4, r0
 80208fe:	f001 f933 	bl	8021b68 <USBD_LL_GetRxDataSize>
 8020902:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020904:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8020908:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 802090c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8020910:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020912:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020916:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8020918:	2000      	movs	r0, #0
}
 802091a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 802091c:	2003      	movs	r0, #3
}
 802091e:	bd38      	pop	{r3, r4, r5, pc}

08020920 <USBD_CDC_DataIn>:
{
 8020920:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8020922:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8020926:	b36d      	cbz	r5, 8020984 <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8020928:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 802092c:	4684      	mov	ip, r0
 802092e:	460a      	mov	r2, r1
 8020930:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8020934:	f8de 3018 	ldr.w	r3, [lr, #24]
 8020938:	b96b      	cbnz	r3, 8020956 <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 802093a:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 802093e:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8020940:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8020942:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8020946:	b1db      	cbz	r3, 8020980 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8020948:	f505 7104 	add.w	r1, r5, #528	; 0x210
 802094c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8020950:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8020952:	4620      	mov	r0, r4
}
 8020954:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020956:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 802095a:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 802095e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8020962:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8020964:	fbb3 f6f4 	udiv	r6, r3, r4
 8020968:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 802096c:	2c00      	cmp	r4, #0
 802096e:	d1e4      	bne.n	802093a <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020970:	4623      	mov	r3, r4
 8020972:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8020974:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020978:	f001 f8da 	bl	8021b30 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 802097c:	4620      	mov	r0, r4
}
 802097e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8020980:	4618      	mov	r0, r3
}
 8020982:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8020984:	2003      	movs	r0, #3
}
 8020986:	bd70      	pop	{r4, r5, r6, pc}

08020988 <USBD_CDC_Setup>:
{
 8020988:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 802098a:	2300      	movs	r3, #0
{
 802098c:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802098e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8020992:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8020996:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 802099a:	2d00      	cmp	r5, #0
 802099c:	d067      	beq.n	8020a6e <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802099e:	f891 c000 	ldrb.w	ip, [r1]
 80209a2:	4606      	mov	r6, r0
 80209a4:	460c      	mov	r4, r1
 80209a6:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 80209aa:	d01e      	beq.n	80209ea <USBD_CDC_Setup+0x62>
 80209ac:	2f20      	cmp	r7, #32
 80209ae:	d007      	beq.n	80209c0 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 80209b0:	4621      	mov	r1, r4
 80209b2:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 80209b4:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 80209b6:	f000 fd45 	bl	8021444 <USBD_CtlError>
}
 80209ba:	4638      	mov	r0, r7
 80209bc:	b003      	add	sp, #12
 80209be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 80209c0:	88ca      	ldrh	r2, [r1, #6]
 80209c2:	b38a      	cbz	r2, 8020a28 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 80209c4:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80209c8:	d055      	beq.n	8020a76 <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 80209ca:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80209cc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80209d0:	4629      	mov	r1, r5
 80209d2:	7860      	ldrb	r0, [r4, #1]
 80209d4:	689b      	ldr	r3, [r3, #8]
 80209d6:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80209d8:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80209da:	4629      	mov	r1, r5
 80209dc:	4630      	mov	r0, r6
 80209de:	2a07      	cmp	r2, #7
 80209e0:	bf28      	it	cs
 80209e2:	2207      	movcs	r2, #7
 80209e4:	f000 fd64 	bl	80214b0 <USBD_CtlSendData>
 80209e8:	e7e7      	b.n	80209ba <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 80209ea:	784b      	ldrb	r3, [r1, #1]
 80209ec:	2b0b      	cmp	r3, #11
 80209ee:	d8df      	bhi.n	80209b0 <USBD_CDC_Setup+0x28>
 80209f0:	a201      	add	r2, pc, #4	; (adr r2, 80209f8 <USBD_CDC_Setup+0x70>)
 80209f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209f6:	bf00      	nop
 80209f8:	08020a59 	.word	0x08020a59
 80209fc:	080209bb 	.word	0x080209bb
 8020a00:	080209b1 	.word	0x080209b1
 8020a04:	080209b1 	.word	0x080209b1
 8020a08:	080209b1 	.word	0x080209b1
 8020a0c:	080209b1 	.word	0x080209b1
 8020a10:	080209b1 	.word	0x080209b1
 8020a14:	080209b1 	.word	0x080209b1
 8020a18:	080209b1 	.word	0x080209b1
 8020a1c:	080209b1 	.word	0x080209b1
 8020a20:	08020a45 	.word	0x08020a45
 8020a24:	08020a3b 	.word	0x08020a3b
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020a28:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8020a2c:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020a2e:	7848      	ldrb	r0, [r1, #1]
 8020a30:	689b      	ldr	r3, [r3, #8]
 8020a32:	4798      	blx	r3
}
 8020a34:	4638      	mov	r0, r7
 8020a36:	b003      	add	sp, #12
 8020a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020a3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020a3e:	2b03      	cmp	r3, #3
 8020a40:	d0bb      	beq.n	80209ba <USBD_CDC_Setup+0x32>
 8020a42:	e7b5      	b.n	80209b0 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020a44:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020a48:	2b03      	cmp	r3, #3
 8020a4a:	d1b1      	bne.n	80209b0 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8020a4c:	2201      	movs	r2, #1
 8020a4e:	f10d 0105 	add.w	r1, sp, #5
 8020a52:	f000 fd2d 	bl	80214b0 <USBD_CtlSendData>
 8020a56:	e7b0      	b.n	80209ba <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020a58:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8020a5c:	2a03      	cmp	r2, #3
 8020a5e:	d1a7      	bne.n	80209b0 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8020a60:	2202      	movs	r2, #2
 8020a62:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8020a66:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8020a68:	f000 fd22 	bl	80214b0 <USBD_CtlSendData>
 8020a6c:	e7a5      	b.n	80209ba <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 8020a6e:	2703      	movs	r7, #3
}
 8020a70:	4638      	mov	r0, r7
 8020a72:	b003      	add	sp, #12
 8020a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 8020a76:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 8020a78:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 8020a7a:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 8020a7e:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8020a82:	4629      	mov	r1, r5
 8020a84:	f000 fd2c 	bl	80214e0 <USBD_CtlPrepareRx>
 8020a88:	e797      	b.n	80209ba <USBD_CDC_Setup+0x32>
 8020a8a:	bf00      	nop

08020a8c <USBD_CDC_DeInit>:
{
 8020a8c:	b538      	push	{r3, r4, r5, lr}
 8020a8e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8020a90:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8020a92:	2181      	movs	r1, #129	; 0x81
 8020a94:	f001 f800 	bl	8021a98 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020a98:	2101      	movs	r1, #1
 8020a9a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8020a9c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020a9e:	f000 fffb 	bl	8021a98 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8020aa2:	2182      	movs	r1, #130	; 0x82
 8020aa4:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8020aa6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8020aaa:	f000 fff5 	bl	8021a98 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8020aae:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8020ab2:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8020ab4:	b14b      	cbz	r3, 8020aca <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8020ab6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8020aba:	685b      	ldr	r3, [r3, #4]
 8020abc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8020abe:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8020ac2:	f001 f859 	bl	8021b78 <USBD_static_free>
    pdev->pClassData = NULL;
 8020ac6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8020aca:	2000      	movs	r0, #0
 8020acc:	bd38      	pop	{r3, r4, r5, pc}
 8020ace:	bf00      	nop

08020ad0 <USBD_CDC_Init>:
{
 8020ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ad4:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8020ad6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8020ada:	f001 f849 	bl	8021b70 <USBD_static_malloc>
  if (hcdc == NULL)
 8020ade:	4605      	mov	r5, r0
 8020ae0:	2800      	cmp	r0, #0
 8020ae2:	d04c      	beq.n	8020b7e <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ae4:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8020ae6:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020aea:	b393      	cbz	r3, 8020b52 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020aec:	2340      	movs	r3, #64	; 0x40
 8020aee:	2202      	movs	r2, #2
 8020af0:	2181      	movs	r1, #129	; 0x81
 8020af2:	4620      	mov	r0, r4
 8020af4:	f000 ffbe 	bl	8021a74 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020af8:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020afa:	2340      	movs	r3, #64	; 0x40
 8020afc:	4631      	mov	r1, r6
 8020afe:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020b00:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020b02:	4620      	mov	r0, r4
 8020b04:	f000 ffb6 	bl	8021a74 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8020b08:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020b0a:	2203      	movs	r2, #3
 8020b0c:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020b0e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020b12:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8020b14:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020b18:	2308      	movs	r3, #8
 8020b1a:	f000 ffab 	bl	8021a74 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8020b1e:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020b22:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8020b26:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8020b28:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	4798      	blx	r3
  hcdc->TxState = 0U;
 8020b30:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8020b34:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020b38:	7c26      	ldrb	r6, [r4, #16]
 8020b3a:	b9ae      	cbnz	r6, 8020b68 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020b40:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8020b44:	4641      	mov	r1, r8
 8020b46:	4620      	mov	r0, r4
 8020b48:	f001 f800 	bl	8021b4c <USBD_LL_PrepareReceive>
}
 8020b4c:	4630      	mov	r0, r6
 8020b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020b56:	2202      	movs	r2, #2
 8020b58:	2181      	movs	r1, #129	; 0x81
 8020b5a:	4620      	mov	r0, r4
 8020b5c:	f000 ff8a 	bl	8021a74 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020b60:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020b66:	e7c9      	b.n	8020afc <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8020b68:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020b6a:	2340      	movs	r3, #64	; 0x40
 8020b6c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8020b70:	4641      	mov	r1, r8
 8020b72:	4620      	mov	r0, r4
 8020b74:	f000 ffea 	bl	8021b4c <USBD_LL_PrepareReceive>
}
 8020b78:	4630      	mov	r0, r6
 8020b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8020b7e:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8020b80:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 8020b84:	4630      	mov	r0, r6
 8020b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b8a:	bf00      	nop

08020b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8020b8c:	4603      	mov	r3, r0
  if (fops == NULL)
 8020b8e:	b119      	cbz	r1, 8020b98 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8020b90:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8020b92:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8020b96:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8020b98:	2003      	movs	r0, #3
}
 8020b9a:	4770      	bx	lr

08020b9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020b9c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8020ba0:	b12b      	cbz	r3, 8020bae <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 8020ba2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8020ba4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8020ba8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 8020bac:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8020bae:	2003      	movs	r0, #3
}
 8020bb0:	4770      	bx	lr
 8020bb2:	bf00      	nop

08020bb4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020bb4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8020bb8:	b11b      	cbz	r3, 8020bc2 <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 8020bba:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8020bbc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 8020bc0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8020bc2:	2003      	movs	r0, #3
}
 8020bc4:	4770      	bx	lr
 8020bc6:	bf00      	nop

08020bc8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020bc8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8020bcc:	b192      	cbz	r2, 8020bf4 <USBD_CDC_TransmitPacket+0x2c>
{
 8020bce:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8020bd0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8020bd4:	b10c      	cbz	r4, 8020bda <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8020bd6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8020bd8:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8020bda:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8020bdc:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 8020bde:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020be2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8020be6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020bea:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8020bec:	f000 ffa0 	bl	8021b30 <USBD_LL_Transmit>
    ret = USBD_OK;
 8020bf0:	4620      	mov	r0, r4
}
 8020bf2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8020bf4:	2003      	movs	r0, #3
}
 8020bf6:	4770      	bx	lr

08020bf8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020bf8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8020bfc:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8020bfe:	b19a      	cbz	r2, 8020c28 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020c00:	7c04      	ldrb	r4, [r0, #16]
 8020c02:	b144      	cbz	r4, 8020c16 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8020c04:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020c06:	2340      	movs	r3, #64	; 0x40
 8020c08:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8020c0c:	2101      	movs	r1, #1
 8020c0e:	f000 ff9d 	bl	8021b4c <USBD_LL_PrepareReceive>
}
 8020c12:	4620      	mov	r0, r4
 8020c14:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020c1a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8020c1e:	2101      	movs	r1, #1
 8020c20:	f000 ff94 	bl	8021b4c <USBD_LL_PrepareReceive>
}
 8020c24:	4620      	mov	r0, r4
 8020c26:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8020c28:	2403      	movs	r4, #3
}
 8020c2a:	4620      	mov	r0, r4
 8020c2c:	bd10      	pop	{r4, pc}
 8020c2e:	bf00      	nop

08020c30 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020c30:	b178      	cbz	r0, 8020c52 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020c32:	2300      	movs	r3, #0
 8020c34:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020c38:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020c3c:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020c40:	b109      	cbz	r1, 8020c46 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8020c42:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020c46:	2301      	movs	r3, #1
  pdev->id = id;
 8020c48:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020c4a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020c4e:	f000 bebb 	b.w	80219c8 <USBD_LL_Init>

  return ret;
}
 8020c52:	2003      	movs	r0, #3
 8020c54:	4770      	bx	lr
 8020c56:	bf00      	nop

08020c58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020c58:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8020c5a:	2400      	movs	r4, #0
{
 8020c5c:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8020c5e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8020c62:	b181      	cbz	r1, 8020c86 <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020c64:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8020c66:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 8020c68:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020c6c:	b143      	cbz	r3, 8020c80 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020c6e:	f10d 0006 	add.w	r0, sp, #6
 8020c72:	4798      	blx	r3
 8020c74:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020c76:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020c78:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 8020c7c:	b003      	add	sp, #12
 8020c7e:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 8020c80:	4618      	mov	r0, r3
}
 8020c82:	b003      	add	sp, #12
 8020c84:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8020c86:	2003      	movs	r0, #3
}
 8020c88:	b003      	add	sp, #12
 8020c8a:	bd30      	pop	{r4, r5, pc}

08020c8c <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020c8c:	f000 bee4 	b.w	8021a58 <USBD_LL_Start>

08020c90 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8020c90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8020c94:	b10b      	cbz	r3, 8020c9a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	4718      	bx	r3
  }

  return ret;
}
 8020c9a:	2003      	movs	r0, #3
 8020c9c:	4770      	bx	lr
 8020c9e:	bf00      	nop

08020ca0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020ca0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020ca2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8020ca6:	b10b      	cbz	r3, 8020cac <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020ca8:	685b      	ldr	r3, [r3, #4]
 8020caa:	4798      	blx	r3
  }

  return USBD_OK;
}
 8020cac:	2000      	movs	r0, #0
 8020cae:	bd08      	pop	{r3, pc}

08020cb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020cb0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020cb2:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8020cb6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020cb8:	4628      	mov	r0, r5
 8020cba:	f000 fbb7 	bl	802142c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 8020cbe:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8020cc2:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8020cc6:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8020cc8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8020ccc:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 8020cd0:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8020cd4:	4293      	cmp	r3, r2
 8020cd6:	d009      	beq.n	8020cec <USBD_LL_SetupStage+0x3c>
 8020cd8:	2b02      	cmp	r3, #2
 8020cda:	d013      	beq.n	8020d04 <USBD_LL_SetupStage+0x54>
 8020cdc:	b163      	cbz	r3, 8020cf8 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020cde:	4620      	mov	r0, r4
 8020ce0:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8020ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020ce8:	f000 bee4 	b.w	8021ab4 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020cec:	4629      	mov	r1, r5
 8020cee:	4620      	mov	r0, r4
}
 8020cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020cf4:	f000 bac6 	b.w	8021284 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020cf8:	4629      	mov	r1, r5
 8020cfa:	4620      	mov	r0, r4
}
 8020cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020d00:	f000 b92a 	b.w	8020f58 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020d04:	4629      	mov	r1, r5
 8020d06:	4620      	mov	r0, r4
}
 8020d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020d0c:	f000 baf2 	b.w	80212f4 <USBD_StdEPReq>

08020d10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020d10:	b570      	push	{r4, r5, r6, lr}
 8020d12:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020d14:	b929      	cbnz	r1, 8020d22 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020d16:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8020d1a:	2b03      	cmp	r3, #3
 8020d1c:	d00d      	beq.n	8020d3a <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 8020d1e:	2000      	movs	r0, #0
 8020d20:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020d22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020d26:	2b03      	cmp	r3, #3
 8020d28:	d1f9      	bne.n	8020d1e <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 8020d2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8020d2e:	699b      	ldr	r3, [r3, #24]
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d0f4      	beq.n	8020d1e <USBD_LL_DataOutStage+0xe>
}
 8020d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8020d38:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8020d3a:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 8020d3e:	42ab      	cmp	r3, r5
 8020d40:	d808      	bhi.n	8020d54 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020d42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020d46:	2b03      	cmp	r3, #3
 8020d48:	d00f      	beq.n	8020d6a <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8020d4a:	4620      	mov	r0, r4
 8020d4c:	f000 fbe0 	bl	8021510 <USBD_CtlSendStatus>
}
 8020d50:	2000      	movs	r0, #0
 8020d52:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8020d54:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020d56:	4611      	mov	r1, r2
 8020d58:	462a      	mov	r2, r5
 8020d5a:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 8020d5c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020d60:	bf28      	it	cs
 8020d62:	461a      	movcs	r2, r3
 8020d64:	f000 fbca 	bl	80214fc <USBD_CtlContinueRx>
 8020d68:	e7d9      	b.n	8020d1e <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 8020d6a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8020d6e:	691b      	ldr	r3, [r3, #16]
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	d0ea      	beq.n	8020d4a <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 8020d74:	4798      	blx	r3
 8020d76:	e7e8      	b.n	8020d4a <USBD_LL_DataOutStage+0x3a>

08020d78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020d78:	b570      	push	{r4, r5, r6, lr}
 8020d7a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020d7c:	b949      	cbnz	r1, 8020d92 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020d7e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8020d82:	2b02      	cmp	r3, #2
 8020d84:	d011      	beq.n	8020daa <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8020d86:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8020d8a:	2b01      	cmp	r3, #1
 8020d8c:	d022      	beq.n	8020dd4 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 8020d8e:	2000      	movs	r0, #0
 8020d90:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020d92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020d96:	2b03      	cmp	r3, #3
 8020d98:	d1f9      	bne.n	8020d8e <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 8020d9a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8020d9e:	695b      	ldr	r3, [r3, #20]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d0f4      	beq.n	8020d8e <USBD_LL_DataInStage+0x16>
}
 8020da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8020da8:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8020daa:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8020dae:	460d      	mov	r5, r1
 8020db0:	42b3      	cmp	r3, r6
 8020db2:	d814      	bhi.n	8020dde <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 8020db4:	d020      	beq.n	8020df8 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020db6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8020dba:	2b03      	cmp	r3, #3
 8020dbc:	d02f      	beq.n	8020e1e <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8020dbe:	2180      	movs	r1, #128	; 0x80
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	f000 fe77 	bl	8021ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8020dc6:	4620      	mov	r0, r4
 8020dc8:	f000 fbae 	bl	8021528 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8020dcc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8020dd0:	2b01      	cmp	r3, #1
 8020dd2:	d1dc      	bne.n	8020d8e <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8020dd4:	2300      	movs	r3, #0
}
 8020dd6:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 8020dd8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8020ddc:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8020dde:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8020de0:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8020de2:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8020de4:	461a      	mov	r2, r3
 8020de6:	f000 fb71 	bl	80214cc <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020dea:	462b      	mov	r3, r5
 8020dec:	462a      	mov	r2, r5
 8020dee:	4629      	mov	r1, r5
 8020df0:	4620      	mov	r0, r4
 8020df2:	f000 feab 	bl	8021b4c <USBD_LL_PrepareReceive>
 8020df6:	e7c6      	b.n	8020d86 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 8020df8:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8020dfa:	4293      	cmp	r3, r2
 8020dfc:	d8db      	bhi.n	8020db6 <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 8020dfe:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8020e02:	429a      	cmp	r2, r3
 8020e04:	d2d7      	bcs.n	8020db6 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8020e06:	460a      	mov	r2, r1
 8020e08:	f000 fb60 	bl	80214cc <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020e0c:	462b      	mov	r3, r5
 8020e0e:	462a      	mov	r2, r5
 8020e10:	4629      	mov	r1, r5
 8020e12:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8020e14:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020e18:	f000 fe98 	bl	8021b4c <USBD_LL_PrepareReceive>
 8020e1c:	e7b3      	b.n	8020d86 <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 8020e1e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8020e22:	68db      	ldr	r3, [r3, #12]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d0ca      	beq.n	8020dbe <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 8020e28:	4620      	mov	r0, r4
 8020e2a:	4798      	blx	r3
 8020e2c:	e7c7      	b.n	8020dbe <USBD_LL_DataInStage+0x46>
 8020e2e:	bf00      	nop

08020e30 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8020e30:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020e32:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8020e34:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020e38:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8020e3c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8020e3e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8020e42:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8020e46:	b1eb      	cbz	r3, 8020e84 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8020e48:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8020e4c:	b570      	push	{r4, r5, r6, lr}
 8020e4e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 8020e50:	b112      	cbz	r2, 8020e58 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 8020e52:	685b      	ldr	r3, [r3, #4]
 8020e54:	b103      	cbz	r3, 8020e58 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020e56:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020e58:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020e5a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020e5c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020e5e:	4620      	mov	r0, r4
 8020e60:	462b      	mov	r3, r5
 8020e62:	4611      	mov	r1, r2
 8020e64:	f000 fe06 	bl	8021a74 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020e68:	462b      	mov	r3, r5
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	2180      	movs	r1, #128	; 0x80
 8020e6e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020e70:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020e74:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020e78:	f000 fdfc 	bl	8021a74 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 8020e7c:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8020e7e:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8020e80:	6225      	str	r5, [r4, #32]
}
 8020e82:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8020e84:	2003      	movs	r0, #3
}
 8020e86:	4770      	bx	lr

08020e88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020e88:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8020e8a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8020e8c:	7419      	strb	r1, [r3, #16]
}
 8020e8e:	4770      	bx	lr

08020e90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020e90:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8020e92:	2104      	movs	r1, #4

  return USBD_OK;
}
 8020e94:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8020e96:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8020e9a:	b2d2      	uxtb	r2, r2
 8020e9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8020ea0:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 8020ea4:	4770      	bx	lr
 8020ea6:	bf00      	nop

08020ea8 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020ea8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020eac:	2b04      	cmp	r3, #4
 8020eae:	d104      	bne.n	8020eba <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8020eb0:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8020eb4:	b2db      	uxtb	r3, r3
 8020eb6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8020eba:	2000      	movs	r0, #0
 8020ebc:	4770      	bx	lr
 8020ebe:	bf00      	nop

08020ec0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8020ec0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8020ec4:	b15a      	cbz	r2, 8020ede <USBD_LL_SOF+0x1e>
{
 8020ec6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020ec8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020ecc:	2b03      	cmp	r3, #3
 8020ece:	d001      	beq.n	8020ed4 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8020ed0:	2000      	movs	r0, #0
}
 8020ed2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8020ed4:	69d3      	ldr	r3, [r2, #28]
 8020ed6:	b123      	cbz	r3, 8020ee2 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8020ed8:	4798      	blx	r3
  return USBD_OK;
 8020eda:	2000      	movs	r0, #0
}
 8020edc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8020ede:	2003      	movs	r0, #3
}
 8020ee0:	4770      	bx	lr
  return USBD_OK;
 8020ee2:	4618      	mov	r0, r3
}
 8020ee4:	bd08      	pop	{r3, pc}
 8020ee6:	bf00      	nop

08020ee8 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8020ee8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8020eec:	b15a      	cbz	r2, 8020f06 <USBD_LL_IsoINIncomplete+0x1e>
{
 8020eee:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020ef0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020ef4:	2b03      	cmp	r3, #3
 8020ef6:	d001      	beq.n	8020efc <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8020ef8:	2000      	movs	r0, #0
}
 8020efa:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8020efc:	6a13      	ldr	r3, [r2, #32]
 8020efe:	b123      	cbz	r3, 8020f0a <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8020f00:	4798      	blx	r3
  return USBD_OK;
 8020f02:	2000      	movs	r0, #0
}
 8020f04:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8020f06:	2003      	movs	r0, #3
}
 8020f08:	4770      	bx	lr
  return USBD_OK;
 8020f0a:	4618      	mov	r0, r3
}
 8020f0c:	bd08      	pop	{r3, pc}
 8020f0e:	bf00      	nop

08020f10 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8020f10:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8020f14:	b15a      	cbz	r2, 8020f2e <USBD_LL_IsoOUTIncomplete+0x1e>
{
 8020f16:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020f1c:	2b03      	cmp	r3, #3
 8020f1e:	d001      	beq.n	8020f24 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8020f20:	2000      	movs	r0, #0
}
 8020f22:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8020f24:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8020f26:	b123      	cbz	r3, 8020f32 <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8020f28:	4798      	blx	r3
  return USBD_OK;
 8020f2a:	2000      	movs	r0, #0
}
 8020f2c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8020f2e:	2003      	movs	r0, #3
}
 8020f30:	4770      	bx	lr
  return USBD_OK;
 8020f32:	4618      	mov	r0, r3
}
 8020f34:	bd08      	pop	{r3, pc}
 8020f36:	bf00      	nop

08020f38 <USBD_LL_DevConnected>:
 8020f38:	2000      	movs	r0, #0
 8020f3a:	4770      	bx	lr

08020f3c <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020f3c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8020f3e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020f42:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8020f46:	b12a      	cbz	r2, 8020f54 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020f48:	6852      	ldr	r2, [r2, #4]
 8020f4a:	7901      	ldrb	r1, [r0, #4]
{
 8020f4c:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020f4e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8020f50:	2000      	movs	r0, #0
 8020f52:	bd08      	pop	{r3, pc}
 8020f54:	2000      	movs	r0, #0
 8020f56:	4770      	bx	lr

08020f58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020f58:	b570      	push	{r4, r5, r6, lr}
 8020f5a:	780c      	ldrb	r4, [r1, #0]
 8020f5c:	b082      	sub	sp, #8
 8020f5e:	460e      	mov	r6, r1
 8020f60:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020f62:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8020f66:	2c20      	cmp	r4, #32
 8020f68:	d00e      	beq.n	8020f88 <USBD_StdDevReq+0x30>
 8020f6a:	2c40      	cmp	r4, #64	; 0x40
 8020f6c:	d00c      	beq.n	8020f88 <USBD_StdDevReq+0x30>
 8020f6e:	b1a4      	cbz	r4, 8020f9a <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020f70:	2180      	movs	r1, #128	; 0x80
 8020f72:	4628      	mov	r0, r5
 8020f74:	f000 fd9e 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8020f78:	2100      	movs	r1, #0
 8020f7a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8020f7c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8020f7e:	f000 fd99 	bl	8021ab4 <USBD_LL_StallEP>
}
 8020f82:	4620      	mov	r0, r4
 8020f84:	b002      	add	sp, #8
 8020f86:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020f88:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8020f8c:	4631      	mov	r1, r6
 8020f8e:	4628      	mov	r0, r5
 8020f90:	689b      	ldr	r3, [r3, #8]
}
 8020f92:	b002      	add	sp, #8
 8020f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020f98:	4718      	bx	r3
      switch (req->bRequest)
 8020f9a:	784b      	ldrb	r3, [r1, #1]
 8020f9c:	2b09      	cmp	r3, #9
 8020f9e:	d8e7      	bhi.n	8020f70 <USBD_StdDevReq+0x18>
 8020fa0:	a201      	add	r2, pc, #4	; (adr r2, 8020fa8 <USBD_StdDevReq+0x50>)
 8020fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020fa6:	bf00      	nop
 8020fa8:	08021009 	.word	0x08021009
 8020fac:	08021037 	.word	0x08021037
 8020fb0:	08020f71 	.word	0x08020f71
 8020fb4:	08021055 	.word	0x08021055
 8020fb8:	08020f71 	.word	0x08020f71
 8020fbc:	0802105d 	.word	0x0802105d
 8020fc0:	08021095 	.word	0x08021095
 8020fc4:	08020f71 	.word	0x08020f71
 8020fc8:	080210b1 	.word	0x080210b1
 8020fcc:	08020fd1 	.word	0x08020fd1
  cfgidx = (uint8_t)(req->wValue);
 8020fd0:	7889      	ldrb	r1, [r1, #2]
 8020fd2:	4eab      	ldr	r6, [pc, #684]	; (8021280 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8020fd4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8020fd6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8020fd8:	f200 8140 	bhi.w	802125c <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 8020fdc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8020fe0:	2b02      	cmp	r3, #2
 8020fe2:	b2da      	uxtb	r2, r3
 8020fe4:	f000 8129 	beq.w	802123a <USBD_StdDevReq+0x2e2>
 8020fe8:	2a03      	cmp	r2, #3
 8020fea:	f000 8105 	beq.w	80211f8 <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020fee:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 8020ff0:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020ff2:	f000 fd5f 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8020ff6:	2100      	movs	r1, #0
 8020ff8:	4628      	mov	r0, r5
 8020ffa:	f000 fd5b 	bl	8021ab4 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8020ffe:	7831      	ldrb	r1, [r6, #0]
 8021000:	4628      	mov	r0, r5
 8021002:	f7ff fe4d 	bl	8020ca0 <USBD_ClrClassConfig>
      break;
 8021006:	e7bc      	b.n	8020f82 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8021008:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 802100c:	3a01      	subs	r2, #1
 802100e:	2a02      	cmp	r2, #2
 8021010:	d866      	bhi.n	80210e0 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 8021012:	88ca      	ldrh	r2, [r1, #6]
 8021014:	2a02      	cmp	r2, #2
 8021016:	d163      	bne.n	80210e0 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021018:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 802101a:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802101e:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8021020:	b10a      	cbz	r2, 8021026 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021022:	2203      	movs	r2, #3
 8021024:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021026:	2202      	movs	r2, #2
 8021028:	f105 010c 	add.w	r1, r5, #12
 802102c:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 802102e:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021030:	f000 fa3e 	bl	80214b0 <USBD_CtlSendData>
      break;
 8021034:	e7a5      	b.n	8020f82 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8021036:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 802103a:	3b01      	subs	r3, #1
 802103c:	2b02      	cmp	r3, #2
 802103e:	d84f      	bhi.n	80210e0 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021040:	884b      	ldrh	r3, [r1, #2]
 8021042:	2b01      	cmp	r3, #1
 8021044:	d19d      	bne.n	8020f82 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8021046:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8021048:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 802104a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 802104e:	f000 fa5f 	bl	8021510 <USBD_CtlSendStatus>
 8021052:	e796      	b.n	8020f82 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021054:	884b      	ldrh	r3, [r1, #2]
 8021056:	2b01      	cmp	r3, #1
 8021058:	d193      	bne.n	8020f82 <USBD_StdDevReq+0x2a>
 802105a:	e7f5      	b.n	8021048 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802105c:	888b      	ldrh	r3, [r1, #4]
 802105e:	2b00      	cmp	r3, #0
 8021060:	d13e      	bne.n	80210e0 <USBD_StdDevReq+0x188>
 8021062:	88cb      	ldrh	r3, [r1, #6]
 8021064:	2b00      	cmp	r3, #0
 8021066:	d13b      	bne.n	80210e0 <USBD_StdDevReq+0x188>
 8021068:	884e      	ldrh	r6, [r1, #2]
 802106a:	2e7f      	cmp	r6, #127	; 0x7f
 802106c:	d838      	bhi.n	80210e0 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802106e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8021072:	2b03      	cmp	r3, #3
 8021074:	d034      	beq.n	80210e0 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021076:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8021078:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 802107c:	f000 fd4a 	bl	8021b14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021080:	4628      	mov	r0, r5
 8021082:	f000 fa45 	bl	8021510 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8021086:	2e00      	cmp	r6, #0
 8021088:	f040 80d3 	bne.w	8021232 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 802108c:	2301      	movs	r3, #1
 802108e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8021092:	e776      	b.n	8020f82 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8021094:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8021096:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8021098:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 802109c:	0a13      	lsrs	r3, r2, #8
 802109e:	3b01      	subs	r3, #1
 80210a0:	2b06      	cmp	r3, #6
 80210a2:	d81d      	bhi.n	80210e0 <USBD_StdDevReq+0x188>
 80210a4:	e8df f003 	tbb	[pc, r3]
 80210a8:	1c624d5a 	.word	0x1c624d5a
 80210ac:	431c      	.short	0x431c
 80210ae:	27          	.byte	0x27
 80210af:	00          	.byte	0x00
  if (req->wLength != 1U)
 80210b0:	88ca      	ldrh	r2, [r1, #6]
 80210b2:	2a01      	cmp	r2, #1
 80210b4:	d114      	bne.n	80210e0 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 80210b6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80210ba:	2902      	cmp	r1, #2
 80210bc:	b2cb      	uxtb	r3, r1
 80210be:	f200 8094 	bhi.w	80211ea <USBD_StdDevReq+0x292>
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	f43f af54 	beq.w	8020f70 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80210c8:	4601      	mov	r1, r0
 80210ca:	2300      	movs	r3, #0
 80210cc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80210d0:	f000 f9ee 	bl	80214b0 <USBD_CtlSendData>
        break;
 80210d4:	e755      	b.n	8020f82 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80210d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80210da:	685b      	ldr	r3, [r3, #4]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d15c      	bne.n	802119a <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80210e0:	2180      	movs	r1, #128	; 0x80
 80210e2:	4628      	mov	r0, r5
 80210e4:	f000 fce6 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80210e8:	2100      	movs	r1, #0
 80210ea:	4628      	mov	r0, r5
 80210ec:	f000 fce2 	bl	8021ab4 <USBD_LL_StallEP>
}
 80210f0:	4620      	mov	r0, r4
 80210f2:	b002      	add	sp, #8
 80210f4:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80210f6:	7c03      	ldrb	r3, [r0, #16]
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d1f1      	bne.n	80210e0 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80210fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8021100:	f10d 0006 	add.w	r0, sp, #6
 8021104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021106:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021108:	2307      	movs	r3, #7
 802110a:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 802110c:	88f2      	ldrh	r2, [r6, #6]
 802110e:	2a00      	cmp	r2, #0
 8021110:	d067      	beq.n	80211e2 <USBD_StdDevReq+0x28a>
    if (len != 0U)
 8021112:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d0e2      	beq.n	80210e0 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 802111a:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802111c:	4601      	mov	r1, r0
 802111e:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8021120:	bf28      	it	cs
 8021122:	461a      	movcs	r2, r3
 8021124:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021128:	f000 f9c2 	bl	80214b0 <USBD_CtlSendData>
 802112c:	e729      	b.n	8020f82 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802112e:	7c03      	ldrb	r3, [r0, #16]
 8021130:	2b00      	cmp	r3, #0
 8021132:	d1d5      	bne.n	80210e0 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021134:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8021138:	f10d 0006 	add.w	r0, sp, #6
 802113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802113e:	4798      	blx	r3
  if (err != 0U)
 8021140:	e7e4      	b.n	802110c <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021142:	7c03      	ldrb	r3, [r0, #16]
 8021144:	2b00      	cmp	r3, #0
 8021146:	f040 8092 	bne.w	802126e <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802114a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 802114e:	f10d 0006 	add.w	r0, sp, #6
 8021152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021154:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021156:	2302      	movs	r3, #2
 8021158:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 802115a:	e7d7      	b.n	802110c <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802115c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8021160:	f10d 0106 	add.w	r1, sp, #6
 8021164:	7c00      	ldrb	r0, [r0, #16]
 8021166:	681b      	ldr	r3, [r3, #0]
 8021168:	4798      	blx	r3
  if (err != 0U)
 802116a:	e7cf      	b.n	802110c <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 802116c:	b2d2      	uxtb	r2, r2
 802116e:	2a05      	cmp	r2, #5
 8021170:	d8b6      	bhi.n	80210e0 <USBD_StdDevReq+0x188>
 8021172:	a301      	add	r3, pc, #4	; (adr r3, 8021178 <USBD_StdDevReq+0x220>)
 8021174:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8021178:	080210d7 	.word	0x080210d7
 802117c:	080211c9 	.word	0x080211c9
 8021180:	080211bd 	.word	0x080211bd
 8021184:	080211b1 	.word	0x080211b1
 8021188:	080211a5 	.word	0x080211a5
 802118c:	08021191 	.word	0x08021191
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021190:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8021194:	699b      	ldr	r3, [r3, #24]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d0a2      	beq.n	80210e0 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802119a:	f10d 0106 	add.w	r1, sp, #6
 802119e:	7c28      	ldrb	r0, [r5, #16]
 80211a0:	4798      	blx	r3
  if (err != 0U)
 80211a2:	e7b3      	b.n	802110c <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80211a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80211a8:	695b      	ldr	r3, [r3, #20]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d1f5      	bne.n	802119a <USBD_StdDevReq+0x242>
 80211ae:	e797      	b.n	80210e0 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80211b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80211b4:	691b      	ldr	r3, [r3, #16]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d1ef      	bne.n	802119a <USBD_StdDevReq+0x242>
 80211ba:	e791      	b.n	80210e0 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80211bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80211c0:	68db      	ldr	r3, [r3, #12]
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d1e9      	bne.n	802119a <USBD_StdDevReq+0x242>
 80211c6:	e78b      	b.n	80210e0 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80211c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80211cc:	689b      	ldr	r3, [r3, #8]
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d1e3      	bne.n	802119a <USBD_StdDevReq+0x242>
 80211d2:	e785      	b.n	80210e0 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80211d4:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80211d6:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80211d8:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80211da:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80211de:	f7ff fd5f 	bl	8020ca0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80211e2:	4628      	mov	r0, r5
 80211e4:	f000 f994 	bl	8021510 <USBD_CtlSendStatus>
 80211e8:	e6cb      	b.n	8020f82 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80211ea:	2b03      	cmp	r3, #3
 80211ec:	f47f aec0 	bne.w	8020f70 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80211f0:	1d01      	adds	r1, r0, #4
 80211f2:	f000 f95d 	bl	80214b0 <USBD_CtlSendData>
        break;
 80211f6:	e6c4      	b.n	8020f82 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 80211f8:	2900      	cmp	r1, #0
 80211fa:	d0eb      	beq.n	80211d4 <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 80211fc:	6841      	ldr	r1, [r0, #4]
 80211fe:	2901      	cmp	r1, #1
 8021200:	d0ef      	beq.n	80211e2 <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021202:	b2c9      	uxtb	r1, r1
 8021204:	f7ff fd4c 	bl	8020ca0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021208:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 802120a:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 802120c:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 802120e:	f7ff fd3f 	bl	8020c90 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8021212:	4606      	mov	r6, r0
 8021214:	2800      	cmp	r0, #0
 8021216:	d0e4      	beq.n	80211e2 <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021218:	2180      	movs	r1, #128	; 0x80
 802121a:	4628      	mov	r0, r5
 802121c:	f000 fc4a 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021220:	2100      	movs	r1, #0
 8021222:	4628      	mov	r0, r5
 8021224:	4634      	mov	r4, r6
 8021226:	f000 fc45 	bl	8021ab4 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802122a:	7929      	ldrb	r1, [r5, #4]
 802122c:	4628      	mov	r0, r5
 802122e:	f7ff fd37 	bl	8020ca0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021232:	2302      	movs	r3, #2
 8021234:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8021238:	e6a3      	b.n	8020f82 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 802123a:	2900      	cmp	r1, #0
 802123c:	d0d1      	beq.n	80211e2 <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 802123e:	2101      	movs	r1, #1
 8021240:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021242:	f7ff fd25 	bl	8020c90 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8021246:	4604      	mov	r4, r0
 8021248:	2800      	cmp	r0, #0
 802124a:	f47f af49 	bne.w	80210e0 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 802124e:	4628      	mov	r0, r5
 8021250:	f000 f95e 	bl	8021510 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021254:	2303      	movs	r3, #3
 8021256:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 802125a:	e692      	b.n	8020f82 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 802125c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 802125e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021260:	f000 fc28 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021264:	2100      	movs	r1, #0
 8021266:	4628      	mov	r0, r5
 8021268:	f000 fc24 	bl	8021ab4 <USBD_LL_StallEP>
    return USBD_FAIL;
 802126c:	e689      	b.n	8020f82 <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802126e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8021272:	f10d 0006 	add.w	r0, sp, #6
 8021276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021278:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802127a:	2302      	movs	r3, #2
 802127c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 802127e:	e745      	b.n	802110c <USBD_StdDevReq+0x1b4>
 8021280:	24033002 	.word	0x24033002

08021284 <USBD_StdItfReq>:
{
 8021284:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021286:	780b      	ldrb	r3, [r1, #0]
{
 8021288:	460d      	mov	r5, r1
 802128a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802128c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8021290:	2a40      	cmp	r2, #64	; 0x40
 8021292:	d00b      	beq.n	80212ac <USBD_StdItfReq+0x28>
 8021294:	065b      	lsls	r3, r3, #25
 8021296:	d509      	bpl.n	80212ac <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8021298:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 802129a:	2180      	movs	r1, #128	; 0x80
 802129c:	f000 fc0a 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80212a0:	4620      	mov	r0, r4
 80212a2:	4629      	mov	r1, r5
 80212a4:	f000 fc06 	bl	8021ab4 <USBD_LL_StallEP>
}
 80212a8:	4628      	mov	r0, r5
 80212aa:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80212ac:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80212b0:	3b01      	subs	r3, #1
 80212b2:	2b02      	cmp	r3, #2
 80212b4:	d812      	bhi.n	80212dc <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80212b6:	792b      	ldrb	r3, [r5, #4]
 80212b8:	2b01      	cmp	r3, #1
 80212ba:	d80f      	bhi.n	80212dc <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80212bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80212c0:	4629      	mov	r1, r5
 80212c2:	4620      	mov	r0, r4
 80212c4:	689b      	ldr	r3, [r3, #8]
 80212c6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80212c8:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80212ca:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d1eb      	bne.n	80212a8 <USBD_StdItfReq+0x24>
 80212d0:	2800      	cmp	r0, #0
 80212d2:	d1e9      	bne.n	80212a8 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80212d4:	4620      	mov	r0, r4
 80212d6:	f000 f91b 	bl	8021510 <USBD_CtlSendStatus>
 80212da:	e7e5      	b.n	80212a8 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80212dc:	2180      	movs	r1, #128	; 0x80
 80212de:	4620      	mov	r0, r4
 80212e0:	f000 fbe8 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80212e4:	2100      	movs	r1, #0
 80212e6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80212e8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80212ea:	f000 fbe3 	bl	8021ab4 <USBD_LL_StallEP>
}
 80212ee:	4628      	mov	r0, r5
 80212f0:	bd38      	pop	{r3, r4, r5, pc}
 80212f2:	bf00      	nop

080212f4 <USBD_StdEPReq>:
{
 80212f4:	b570      	push	{r4, r5, r6, lr}
 80212f6:	780b      	ldrb	r3, [r1, #0]
 80212f8:	460d      	mov	r5, r1
 80212fa:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80212fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021300:	2b20      	cmp	r3, #32
 8021302:	d01b      	beq.n	802133c <USBD_StdEPReq+0x48>
 8021304:	2b40      	cmp	r3, #64	; 0x40
 8021306:	d019      	beq.n	802133c <USBD_StdEPReq+0x48>
 8021308:	b303      	cbz	r3, 802134c <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 802130a:	2180      	movs	r1, #128	; 0x80
 802130c:	4620      	mov	r0, r4
 802130e:	f000 fbd1 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021312:	2100      	movs	r1, #0
 8021314:	4620      	mov	r0, r4
 8021316:	f000 fbcd 	bl	8021ab4 <USBD_LL_StallEP>
}
 802131a:	2000      	movs	r0, #0
 802131c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 802131e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8021322:	2b02      	cmp	r3, #2
 8021324:	b2da      	uxtb	r2, r3
 8021326:	d04e      	beq.n	80213c6 <USBD_StdEPReq+0xd2>
 8021328:	2a03      	cmp	r2, #3
 802132a:	d1ee      	bne.n	802130a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 802132c:	886b      	ldrh	r3, [r5, #2]
 802132e:	2b00      	cmp	r3, #0
 8021330:	d1f3      	bne.n	802131a <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8021332:	064e      	lsls	r6, r1, #25
 8021334:	d172      	bne.n	802141c <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 8021336:	4620      	mov	r0, r4
 8021338:	f000 f8ea 	bl	8021510 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802133c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8021340:	4629      	mov	r1, r5
 8021342:	4620      	mov	r0, r4
 8021344:	689b      	ldr	r3, [r3, #8]
}
 8021346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802134a:	4718      	bx	r3
      switch (req->bRequest)
 802134c:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 802134e:	888a      	ldrh	r2, [r1, #4]
 8021350:	2b01      	cmp	r3, #1
 8021352:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8021354:	d0e3      	beq.n	802131e <USBD_StdEPReq+0x2a>
 8021356:	2b03      	cmp	r3, #3
 8021358:	d024      	beq.n	80213a4 <USBD_StdEPReq+0xb0>
 802135a:	2b00      	cmp	r3, #0
 802135c:	d1d5      	bne.n	802130a <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 802135e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8021362:	2b02      	cmp	r3, #2
 8021364:	b2d8      	uxtb	r0, r3
 8021366:	d037      	beq.n	80213d8 <USBD_StdEPReq+0xe4>
 8021368:	2803      	cmp	r0, #3
 802136a:	d1ce      	bne.n	802130a <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802136c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8021370:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021376:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 802137a:	d43e      	bmi.n	80213fa <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802137c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8021380:	2b00      	cmp	r3, #0
 8021382:	d0c2      	beq.n	802130a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021384:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8021388:	2514      	movs	r5, #20
 802138a:	fb05 4503 	mla	r5, r5, r3, r4
 802138e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021392:	2b00      	cmp	r3, #0
 8021394:	d13c      	bne.n	8021410 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 8021396:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021398:	2202      	movs	r2, #2
 802139a:	4629      	mov	r1, r5
 802139c:	4620      	mov	r0, r4
 802139e:	f000 f887 	bl	80214b0 <USBD_CtlSendData>
              break;
 80213a2:	e7ba      	b.n	802131a <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 80213a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80213a8:	2b02      	cmp	r3, #2
 80213aa:	b2da      	uxtb	r2, r3
 80213ac:	d00b      	beq.n	80213c6 <USBD_StdEPReq+0xd2>
 80213ae:	2a03      	cmp	r2, #3
 80213b0:	d1ab      	bne.n	802130a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80213b2:	886b      	ldrh	r3, [r5, #2]
 80213b4:	b91b      	cbnz	r3, 80213be <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80213b6:	064a      	lsls	r2, r1, #25
 80213b8:	d001      	beq.n	80213be <USBD_StdEPReq+0xca>
 80213ba:	88eb      	ldrh	r3, [r5, #6]
 80213bc:	b39b      	cbz	r3, 8021426 <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 80213be:	4620      	mov	r0, r4
 80213c0:	f000 f8a6 	bl	8021510 <USBD_CtlSendStatus>
              break;
 80213c4:	e7a9      	b.n	802131a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80213c6:	064b      	lsls	r3, r1, #25
 80213c8:	d09f      	beq.n	802130a <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80213ca:	f000 fb73 	bl	8021ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80213ce:	2180      	movs	r1, #128	; 0x80
 80213d0:	4620      	mov	r0, r4
 80213d2:	f000 fb6f 	bl	8021ab4 <USBD_LL_StallEP>
 80213d6:	e7a0      	b.n	802131a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80213d8:	0648      	lsls	r0, r1, #25
 80213da:	d196      	bne.n	802130a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80213dc:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 80213de:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80213e2:	f04f 0202 	mov.w	r2, #2
 80213e6:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80213e8:	bf4c      	ite	mi
 80213ea:	f104 0114 	addmi.w	r1, r4, #20
 80213ee:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 80213f2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80213f4:	f000 f85c 	bl	80214b0 <USBD_CtlSendData>
              break;
 80213f8:	e78f      	b.n	802131a <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80213fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d084      	beq.n	802130a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021400:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8021404:	1c5d      	adds	r5, r3, #1
 8021406:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802140a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 802140e:	e7c0      	b.n	8021392 <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021410:	4620      	mov	r0, r4
 8021412:	f000 fb6b 	bl	8021aec <USBD_LL_IsStallEP>
 8021416:	b120      	cbz	r0, 8021422 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 8021418:	2301      	movs	r3, #1
 802141a:	e7bc      	b.n	8021396 <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802141c:	f000 fb58 	bl	8021ad0 <USBD_LL_ClearStallEP>
 8021420:	e789      	b.n	8021336 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 8021422:	6028      	str	r0, [r5, #0]
 8021424:	e7b8      	b.n	8021398 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021426:	f000 fb45 	bl	8021ab4 <USBD_LL_StallEP>
 802142a:	e7c8      	b.n	80213be <USBD_StdEPReq+0xca>

0802142c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 802142c:	780b      	ldrb	r3, [r1, #0]
 802142e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8021430:	784b      	ldrb	r3, [r1, #1]
 8021432:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8021434:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8021436:	8043      	strh	r3, [r0, #2]
 8021438:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 802143a:	8083      	strh	r3, [r0, #4]
 802143c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 802143e:	80c3      	strh	r3, [r0, #6]
}
 8021440:	4770      	bx	lr
 8021442:	bf00      	nop

08021444 <USBD_CtlError>:
{
 8021444:	b510      	push	{r4, lr}
 8021446:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021448:	2180      	movs	r1, #128	; 0x80
 802144a:	f000 fb33 	bl	8021ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 802144e:	2100      	movs	r1, #0
 8021450:	4620      	mov	r0, r4
}
 8021452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8021456:	f000 bb2d 	b.w	8021ab4 <USBD_LL_StallEP>
 802145a:	bf00      	nop

0802145c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 802145c:	b318      	cbz	r0, 80214a6 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 802145e:	7803      	ldrb	r3, [r0, #0]
{
 8021460:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8021462:	b30b      	cbz	r3, 80214a8 <USBD_GetString+0x4c>
 8021464:	4604      	mov	r4, r0
 8021466:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 802146a:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 802146e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8021472:	b2db      	uxtb	r3, r3
 8021474:	2d00      	cmp	r5, #0
 8021476:	d1f8      	bne.n	802146a <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021478:	3301      	adds	r3, #1
 802147a:	005b      	lsls	r3, r3, #1
 802147c:	b2dc      	uxtb	r4, r3
 802147e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021480:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8021482:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021484:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8021486:	7804      	ldrb	r4, [r0, #0]
 8021488:	b15c      	cbz	r4, 80214a2 <USBD_GetString+0x46>
  idx++;
 802148a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 802148c:	2500      	movs	r5, #0
    idx++;
 802148e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8021490:	54cc      	strb	r4, [r1, r3]
    idx++;
 8021492:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8021494:	b2d2      	uxtb	r2, r2
    idx++;
 8021496:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8021498:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 802149a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 802149e:	2c00      	cmp	r4, #0
 80214a0:	d1f5      	bne.n	802148e <USBD_GetString+0x32>
}
 80214a2:	bc30      	pop	{r4, r5}
 80214a4:	4770      	bx	lr
 80214a6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80214a8:	2402      	movs	r4, #2
 80214aa:	4623      	mov	r3, r4
 80214ac:	e7e7      	b.n	802147e <USBD_GetString+0x22>
 80214ae:	bf00      	nop

080214b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80214b0:	b510      	push	{r4, lr}
 80214b2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80214b4:	2402      	movs	r4, #2
{
 80214b6:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80214b8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80214ba:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80214be:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80214c2:	f000 fb35 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80214c6:	2000      	movs	r0, #0
 80214c8:	bd10      	pop	{r4, pc}
 80214ca:	bf00      	nop

080214cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80214cc:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80214ce:	2100      	movs	r1, #0
{
 80214d0:	b508      	push	{r3, lr}
 80214d2:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80214d4:	4662      	mov	r2, ip
 80214d6:	f000 fb2b 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80214da:	2000      	movs	r0, #0
 80214dc:	bd08      	pop	{r3, pc}
 80214de:	bf00      	nop

080214e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80214e0:	b510      	push	{r4, lr}
 80214e2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80214e4:	2403      	movs	r4, #3
{
 80214e6:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80214e8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80214ea:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80214ee:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80214f2:	f000 fb2b 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80214f6:	2000      	movs	r0, #0
 80214f8:	bd10      	pop	{r4, pc}
 80214fa:	bf00      	nop

080214fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80214fc:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80214fe:	2100      	movs	r1, #0
{
 8021500:	b508      	push	{r3, lr}
 8021502:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021504:	4662      	mov	r2, ip
 8021506:	f000 fb21 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 802150a:	2000      	movs	r0, #0
 802150c:	bd08      	pop	{r3, pc}
 802150e:	bf00      	nop

08021510 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021510:	2300      	movs	r3, #0
{
 8021512:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021514:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021516:	461a      	mov	r2, r3
 8021518:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802151a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802151e:	f000 fb07 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8021522:	2000      	movs	r0, #0
 8021524:	bd10      	pop	{r4, pc}
 8021526:	bf00      	nop

08021528 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021528:	2300      	movs	r3, #0
{
 802152a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802152c:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802152e:	461a      	mov	r2, r3
 8021530:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021532:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021536:	f000 fb09 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 802153a:	2000      	movs	r0, #0
 802153c:	bd10      	pop	{r4, pc}
 802153e:	bf00      	nop

08021540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021542:	2200      	movs	r2, #0
 8021544:	4919      	ldr	r1, [pc, #100]	; (80215ac <MX_USB_DEVICE_Init+0x6c>)
 8021546:	481a      	ldr	r0, [pc, #104]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 8021548:	f7ff fb72 	bl	8020c30 <USBD_Init>
 802154c:	b988      	cbnz	r0, 8021572 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802154e:	4919      	ldr	r1, [pc, #100]	; (80215b4 <MX_USB_DEVICE_Init+0x74>)
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 8021552:	f7ff fb81 	bl	8020c58 <USBD_RegisterClass>
 8021556:	b9a0      	cbnz	r0, 8021582 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021558:	4917      	ldr	r1, [pc, #92]	; (80215b8 <MX_USB_DEVICE_Init+0x78>)
 802155a:	4815      	ldr	r0, [pc, #84]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 802155c:	f7ff fb16 	bl	8020b8c <USBD_CDC_RegisterInterface>
 8021560:	b9b8      	cbnz	r0, 8021592 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021562:	4813      	ldr	r0, [pc, #76]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 8021564:	f7ff fb92 	bl	8020c8c <USBD_Start>
 8021568:	b9d0      	cbnz	r0, 80215a0 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 802156e:	f7ec b829 	b.w	800d5c4 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 8021572:	f7e9 f86d 	bl	800a650 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021576:	490f      	ldr	r1, [pc, #60]	; (80215b4 <MX_USB_DEVICE_Init+0x74>)
 8021578:	480d      	ldr	r0, [pc, #52]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 802157a:	f7ff fb6d 	bl	8020c58 <USBD_RegisterClass>
 802157e:	2800      	cmp	r0, #0
 8021580:	d0ea      	beq.n	8021558 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8021582:	f7e9 f865 	bl	800a650 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021586:	490c      	ldr	r1, [pc, #48]	; (80215b8 <MX_USB_DEVICE_Init+0x78>)
 8021588:	4809      	ldr	r0, [pc, #36]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 802158a:	f7ff faff 	bl	8020b8c <USBD_CDC_RegisterInterface>
 802158e:	2800      	cmp	r0, #0
 8021590:	d0e7      	beq.n	8021562 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8021592:	f7e9 f85d 	bl	800a650 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021596:	4806      	ldr	r0, [pc, #24]	; (80215b0 <MX_USB_DEVICE_Init+0x70>)
 8021598:	f7ff fb78 	bl	8020c8c <USBD_Start>
 802159c:	2800      	cmp	r0, #0
 802159e:	d0e4      	beq.n	802156a <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 80215a0:	f7e9 f856 	bl	800a650 <Error_Handler>
}
 80215a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 80215a8:	f7ec b80c 	b.w	800d5c4 <HAL_PWREx_EnableUSBVoltageDetector>
 80215ac:	24009024 	.word	0x24009024
 80215b0:	24033004 	.word	0x24033004
 80215b4:	24008f00 	.word	0x24008f00
 80215b8:	24009010 	.word	0x24009010

080215bc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80215bc:	2000      	movs	r0, #0
 80215be:	4770      	bx	lr

080215c0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80215c0:	2000      	movs	r0, #0
 80215c2:	4770      	bx	lr

080215c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80215c4:	b500      	push	{lr}
 80215c6:	b085      	sub	sp, #20
  BaseType_t xHigherPriorityTaskWoken;
  xHigherPriorityTaskWoken = pdFALSE;

  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

  AFLfuzzer.bTXcomplete = true;
 80215c8:	2301      	movs	r3, #1
  xHigherPriorityTaskWoken = pdFALSE;
 80215ca:	2100      	movs	r1, #0
  AFLfuzzer.bTXcomplete = true;
 80215cc:	4a0c      	ldr	r2, [pc, #48]	; (8021600 <CDC_TransmitCplt_FS+0x3c>)
  xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 80215ce:	a803      	add	r0, sp, #12
  xHigherPriorityTaskWoken = pdFALSE;
 80215d0:	9103      	str	r1, [sp, #12]
  xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 80215d2:	e9cd 1000 	strd	r1, r0, [sp]
  AFLfuzzer.bTXcomplete = true;
 80215d6:	f882 3865 	strb.w	r3, [r2, #2149]	; 0x865
  xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 80215da:	4619      	mov	r1, r3
 80215dc:	f8d2 086c 	ldr.w	r0, [r2, #2156]	; 0x86c
 80215e0:	2202      	movs	r2, #2
 80215e2:	f7e2 f8b9 	bl	8003758 <xTaskGenericNotifyFromISR>
	  	    				1, //index
							2, //value = 2 data TX complete
							eSetBits,
							&xHigherPriorityTaskWoken);

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80215e6:	9b03      	ldr	r3, [sp, #12]
 80215e8:	b12b      	cbz	r3, 80215f6 <CDC_TransmitCplt_FS+0x32>
 80215ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80215ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80215f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

  /* USER CODE END 13 */
  return result;
}
 80215f6:	2000      	movs	r0, #0
 80215f8:	b005      	add	sp, #20
 80215fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80215fe:	bf00      	nop
 8021600:	24026000 	.word	0x24026000

08021604 <CDC_Receive_FS>:
{
 8021604:	b538      	push	{r3, r4, r5, lr}
 8021606:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021608:	4d05      	ldr	r5, [pc, #20]	; (8021620 <CDC_Receive_FS+0x1c>)
  FuzzingInputHandler(Buf, Len);
 802160a:	f7e8 fd29 	bl	800a060 <FuzzingInputHandler>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802160e:	4621      	mov	r1, r4
 8021610:	4628      	mov	r0, r5
 8021612:	f7ff facf 	bl	8020bb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021616:	4628      	mov	r0, r5
 8021618:	f7ff faee 	bl	8020bf8 <USBD_CDC_ReceivePacket>
}
 802161c:	2000      	movs	r0, #0
 802161e:	bd38      	pop	{r3, r4, r5, pc}
 8021620:	24033004 	.word	0x24033004

08021624 <CDC_Init_FS>:
{
 8021624:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021626:	4c06      	ldr	r4, [pc, #24]	; (8021640 <CDC_Init_FS+0x1c>)
 8021628:	2200      	movs	r2, #0
 802162a:	4906      	ldr	r1, [pc, #24]	; (8021644 <CDC_Init_FS+0x20>)
 802162c:	4620      	mov	r0, r4
 802162e:	f7ff fab5 	bl	8020b9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8021632:	4905      	ldr	r1, [pc, #20]	; (8021648 <CDC_Init_FS+0x24>)
 8021634:	4620      	mov	r0, r4
 8021636:	f7ff fabd 	bl	8020bb4 <USBD_CDC_SetRxBuffer>
}
 802163a:	2000      	movs	r0, #0
 802163c:	bd10      	pop	{r4, pc}
 802163e:	bf00      	nop
 8021640:	24033004 	.word	0x24033004
 8021644:	24033ad4 	.word	0x24033ad4
 8021648:	240332d4 	.word	0x240332d4

0802164c <CDC_Transmit_FS>:
{
 802164c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802164e:	4c09      	ldr	r4, [pc, #36]	; (8021674 <CDC_Transmit_FS+0x28>)
 8021650:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8021654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8021658:	b10b      	cbz	r3, 802165e <CDC_Transmit_FS+0x12>
}
 802165a:	2001      	movs	r0, #1
 802165c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802165e:	460a      	mov	r2, r1
 8021660:	4601      	mov	r1, r0
 8021662:	4620      	mov	r0, r4
 8021664:	f7ff fa9a 	bl	8020b9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8021668:	4620      	mov	r0, r4
}
 802166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802166e:	f7ff baab 	b.w	8020bc8 <USBD_CDC_TransmitPacket>
 8021672:	bf00      	nop
 8021674:	24033004 	.word	0x24033004

08021678 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8021678:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 802167a:	4801      	ldr	r0, [pc, #4]	; (8021680 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 802167c:	800b      	strh	r3, [r1, #0]
}
 802167e:	4770      	bx	lr
 8021680:	24009040 	.word	0x24009040

08021684 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021684:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8021686:	4801      	ldr	r0, [pc, #4]	; (802168c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8021688:	800b      	strh	r3, [r1, #0]
}
 802168a:	4770      	bx	lr
 802168c:	24009054 	.word	0x24009054

08021690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021690:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021692:	4c04      	ldr	r4, [pc, #16]	; (80216a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8021694:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021696:	4804      	ldr	r0, [pc, #16]	; (80216a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8021698:	4621      	mov	r1, r4
 802169a:	f7ff fedf 	bl	802145c <USBD_GetString>
  return USBD_StrDesc;
}
 802169e:	4620      	mov	r0, r4
 80216a0:	bd10      	pop	{r4, pc}
 80216a2:	bf00      	nop
 80216a4:	240342d4 	.word	0x240342d4
 80216a8:	2400ae9c 	.word	0x2400ae9c

080216ac <USBD_FS_ProductStrDescriptor>:
{
 80216ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80216ae:	4c04      	ldr	r4, [pc, #16]	; (80216c0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80216b0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80216b2:	4804      	ldr	r0, [pc, #16]	; (80216c4 <USBD_FS_ProductStrDescriptor+0x18>)
 80216b4:	4621      	mov	r1, r4
 80216b6:	f7ff fed1 	bl	802145c <USBD_GetString>
}
 80216ba:	4620      	mov	r0, r4
 80216bc:	bd10      	pop	{r4, pc}
 80216be:	bf00      	nop
 80216c0:	240342d4 	.word	0x240342d4
 80216c4:	2400aeb0 	.word	0x2400aeb0

080216c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80216c8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80216ca:	4c04      	ldr	r4, [pc, #16]	; (80216dc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80216cc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80216ce:	4804      	ldr	r0, [pc, #16]	; (80216e0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80216d0:	4621      	mov	r1, r4
 80216d2:	f7ff fec3 	bl	802145c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80216d6:	4620      	mov	r0, r4
 80216d8:	bd10      	pop	{r4, pc}
 80216da:	bf00      	nop
 80216dc:	240342d4 	.word	0x240342d4
 80216e0:	2400aec8 	.word	0x2400aec8

080216e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80216e4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80216e6:	4c04      	ldr	r4, [pc, #16]	; (80216f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80216e8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80216ea:	4804      	ldr	r0, [pc, #16]	; (80216fc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80216ec:	4621      	mov	r1, r4
 80216ee:	f7ff feb5 	bl	802145c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80216f2:	4620      	mov	r0, r4
 80216f4:	bd10      	pop	{r4, pc}
 80216f6:	bf00      	nop
 80216f8:	240342d4 	.word	0x240342d4
 80216fc:	2400aed4 	.word	0x2400aed4

08021700 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021700:	4a46      	ldr	r2, [pc, #280]	; (802181c <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 8021702:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021706:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 802170a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 802170e:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8021712:	18c3      	adds	r3, r0, r3
 8021714:	d101      	bne.n	802171a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8021716:	4842      	ldr	r0, [pc, #264]	; (8021820 <USBD_FS_SerialStrDescriptor+0x120>)
 8021718:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 802171a:	0f18      	lsrs	r0, r3, #28
 802171c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021720:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8021724:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8021728:	4a3d      	ldr	r2, [pc, #244]	; (8021820 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802172a:	bf2c      	ite	cs
 802172c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 802172e:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8021730:	f882 c003 	strb.w	ip, [r2, #3]
 8021734:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8021738:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 802173a:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 802173e:	f882 c005 	strb.w	ip, [r2, #5]
 8021742:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8021746:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8021748:	f882 c007 	strb.w	ip, [r2, #7]
 802174c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021750:	bf8c      	ite	hi
 8021752:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021754:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8021756:	f882 c009 	strb.w	ip, [r2, #9]
 802175a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 802175e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8021760:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 8021764:	f882 c00b 	strb.w	ip, [r2, #11]
 8021768:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 802176c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 802176e:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021772:	bf8c      	ite	hi
 8021774:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021776:	3030      	addls	r0, #48	; 0x30
 8021778:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 802177a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 802177e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021780:	bf8c      	ite	hi
 8021782:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021784:	3030      	addls	r0, #48	; 0x30
 8021786:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8021788:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802178c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802178e:	bf8c      	ite	hi
 8021790:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021792:	3030      	addls	r0, #48	; 0x30
 8021794:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8021796:	f3c3 2003 	ubfx	r0, r3, #8, #4
 802179a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802179c:	bf8c      	ite	hi
 802179e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80217a0:	3030      	addls	r0, #48	; 0x30
 80217a2:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80217a4:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80217a8:	f003 030f 	and.w	r3, r3, #15
 80217ac:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80217ae:	bf8c      	ite	hi
 80217b0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80217b2:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80217b4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80217b6:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80217b8:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80217bc:	bf94      	ite	ls
 80217be:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80217c0:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80217c2:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80217c6:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80217c8:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 80217ca:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 80217ce:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80217d2:	bf2c      	ite	cs
 80217d4:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80217d6:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80217d8:	7450      	strb	r0, [r2, #17]
 80217da:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80217dc:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 80217de:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 80217e2:	74d0      	strb	r0, [r2, #19]
 80217e4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80217e6:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80217e8:	7550      	strb	r0, [r2, #21]
 80217ea:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80217ee:	bf8c      	ite	hi
 80217f0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80217f2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80217f4:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 80217f6:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80217f8:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 80217fc:	4808      	ldr	r0, [pc, #32]	; (8021820 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 80217fe:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021800:	bf8c      	ite	hi
 8021802:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021804:	3330      	addls	r3, #48	; 0x30
 8021806:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8021808:	f3c1 4303 	ubfx	r3, r1, #16, #4
 802180c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 802180e:	bf94      	ite	ls
 8021810:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021812:	3337      	addhi	r3, #55	; 0x37
 8021814:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8021816:	2300      	movs	r3, #0
 8021818:	7653      	strb	r3, [r2, #25]
}
 802181a:	4770      	bx	lr
 802181c:	1ff1e000 	.word	0x1ff1e000
 8021820:	24009058 	.word	0x24009058

08021824 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8021824:	b530      	push	{r4, r5, lr}
 8021826:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021828:	2100      	movs	r1, #0
{
 802182a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802182c:	22bc      	movs	r2, #188	; 0xbc
 802182e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021830:	9106      	str	r1, [sp, #24]
 8021832:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8021836:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802183a:	f000 fb11 	bl	8021e60 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 802183e:	4b2f      	ldr	r3, [pc, #188]	; (80218fc <HAL_PCD_MspInit+0xd8>)
 8021840:	6822      	ldr	r2, [r4, #0]
 8021842:	429a      	cmp	r2, r3
 8021844:	d001      	beq.n	802184a <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021846:	b037      	add	sp, #220	; 0xdc
 8021848:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802184a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 802184c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8021850:	2201      	movs	r2, #1
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8021852:	2418      	movs	r4, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8021854:	9107      	str	r1, [sp, #28]
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8021856:	2104      	movs	r1, #4
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8021858:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802185a:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 802185c:	9210      	str	r2, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 802185e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8021862:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8021864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8021868:	9411      	str	r4, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 802186a:	9113      	str	r1, [sp, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 802186c:	9215      	str	r2, [sp, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 802186e:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021870:	f7ec fdd2 	bl	800e418 <HAL_RCCEx_PeriphCLKConfig>
 8021874:	2800      	cmp	r0, #0
 8021876:	d13e      	bne.n	80218f6 <HAL_PCD_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021878:	4c21      	ldr	r4, [pc, #132]	; (8021900 <HAL_PCD_MspInit+0xdc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 802187a:	f7eb fea3 	bl	800d5c4 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 802187e:	220a      	movs	r2, #10
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8021880:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021884:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8021888:	2102      	movs	r1, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802188a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802188c:	f043 0301 	orr.w	r3, r3, #1
 8021890:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8021894:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8021898:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 802189a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802189c:	f003 0301 	and.w	r3, r3, #1
 80218a0:	9300      	str	r3, [sp, #0]
 80218a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80218a4:	2300      	movs	r3, #0
 80218a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218aa:	a902      	add	r1, sp, #8
 80218ac:	4815      	ldr	r0, [pc, #84]	; (8021904 <HAL_PCD_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80218ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218b2:	f7ea fe99 	bl	800c5e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80218b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80218ba:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218bc:	a902      	add	r1, sp, #8
 80218be:	4811      	ldr	r0, [pc, #68]	; (8021904 <HAL_PCD_MspInit+0xe0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218c0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80218c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218c6:	f7ea fe8f 	bl	800c5e8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218ca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80218ce:	462a      	mov	r2, r5
 80218d0:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80218d6:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218d8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80218dc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80218e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80218e4:	9301      	str	r3, [sp, #4]
 80218e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80218e8:	f7e9 f930 	bl	800ab4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80218ec:	2065      	movs	r0, #101	; 0x65
 80218ee:	f7e9 f96b 	bl	800abc8 <HAL_NVIC_EnableIRQ>
}
 80218f2:	b037      	add	sp, #220	; 0xdc
 80218f4:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80218f6:	f7e8 feab 	bl	800a650 <Error_Handler>
 80218fa:	e7bd      	b.n	8021878 <HAL_PCD_MspInit+0x54>
 80218fc:	40080000 	.word	0x40080000
 8021900:	58024400 	.word	0x58024400
 8021904:	58020000 	.word	0x58020000

08021908 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021908:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 802190c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021910:	f7ff b9ce 	b.w	8020cb0 <USBD_LL_SetupStage>

08021914 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021914:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8021918:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802191c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021920:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8021924:	f7ff b9f4 	b.w	8020d10 <USBD_LL_DataOutStage>

08021928 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8021928:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802192c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021930:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021936:	f7ff ba1f 	b.w	8020d78 <USBD_LL_DataInStage>
 802193a:	bf00      	nop

0802193c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802193c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021940:	f7ff babe 	b.w	8020ec0 <USBD_LL_SOF>

08021944 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021944:	68c1      	ldr	r1, [r0, #12]
{
 8021946:	b510      	push	{r4, lr}
 8021948:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802194a:	b111      	cbz	r1, 8021952 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802194c:	2902      	cmp	r1, #2
 802194e:	d10a      	bne.n	8021966 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8021950:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021952:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8021956:	f7ff fa97 	bl	8020e88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802195a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 802195e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021962:	f7ff ba65 	b.w	8020e30 <USBD_LL_Reset>
    Error_Handler();
 8021966:	f7e8 fe73 	bl	800a650 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802196a:	2101      	movs	r1, #1
 802196c:	e7f1      	b.n	8021952 <HAL_PCD_ResetCallback+0xe>
 802196e:	bf00      	nop

08021970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021970:	b510      	push	{r4, lr}
 8021972:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021974:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021978:	f7ff fa8a 	bl	8020e90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802197c:	6822      	ldr	r2, [r4, #0]
 802197e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021982:	f043 0301 	orr.w	r3, r3, #1
 8021986:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802198a:	6a23      	ldr	r3, [r4, #32]
 802198c:	b123      	cbz	r3, 8021998 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802198e:	4a03      	ldr	r2, [pc, #12]	; (802199c <HAL_PCD_SuspendCallback+0x2c>)
 8021990:	6913      	ldr	r3, [r2, #16]
 8021992:	f043 0306 	orr.w	r3, r3, #6
 8021996:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8021998:	bd10      	pop	{r4, pc}
 802199a:	bf00      	nop
 802199c:	e000ed00 	.word	0xe000ed00

080219a0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80219a0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219a4:	f7ff ba80 	b.w	8020ea8 <USBD_LL_Resume>

080219a8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219ac:	f7ff bab0 	b.w	8020f10 <USBD_LL_IsoOUTIncomplete>

080219b0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219b0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219b4:	f7ff ba98 	b.w	8020ee8 <USBD_LL_IsoINIncomplete>

080219b8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80219b8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219bc:	f7ff babc 	b.w	8020f38 <USBD_LL_DevConnected>

080219c0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80219c0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219c4:	f7ff baba 	b.w	8020f3c <USBD_LL_DevDisconnected>

080219c8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80219c8:	7802      	ldrb	r2, [r0, #0]
 80219ca:	b10a      	cbz	r2, 80219d0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 80219cc:	2000      	movs	r0, #0
 80219ce:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80219d0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8021a38 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.pData = pdev;
 80219d4:	4b1e      	ldr	r3, [pc, #120]	; (8021a50 <USBD_LL_Init+0x88>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80219d6:	491f      	ldr	r1, [pc, #124]	; (8021a54 <USBD_LL_Init+0x8c>)
{
 80219d8:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80219da:	ed83 7b06 	vstr	d7, [r3, #24]
 80219de:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8021a40 <USBD_LL_Init+0x78>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80219e2:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80219e4:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80219e6:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 80219e8:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80219ec:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80219f0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80219f2:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80219f4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80219f6:	ed83 7b08 	vstr	d7, [r3, #32]
 80219fa:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021a48 <USBD_LL_Init+0x80>
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80219fe:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021a02:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021a06:	f7eb f817 	bl	800ca38 <HAL_PCD_Init>
 8021a0a:	b978      	cbnz	r0, 8021a2c <USBD_LL_Init+0x64>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021a0c:	2180      	movs	r1, #128	; 0x80
 8021a0e:	4810      	ldr	r0, [pc, #64]	; (8021a50 <USBD_LL_Init+0x88>)
 8021a10:	f7eb fd7a 	bl	800d508 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8021a14:	2240      	movs	r2, #64	; 0x40
 8021a16:	2100      	movs	r1, #0
 8021a18:	480d      	ldr	r0, [pc, #52]	; (8021a50 <USBD_LL_Init+0x88>)
 8021a1a:	f7eb fd4b 	bl	800d4b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021a1e:	2280      	movs	r2, #128	; 0x80
 8021a20:	2101      	movs	r1, #1
 8021a22:	480b      	ldr	r0, [pc, #44]	; (8021a50 <USBD_LL_Init+0x88>)
 8021a24:	f7eb fd46 	bl	800d4b4 <HAL_PCDEx_SetTxFiFo>
}
 8021a28:	2000      	movs	r0, #0
 8021a2a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8021a2c:	f7e8 fe10 	bl	800a650 <Error_Handler>
 8021a30:	e7ec      	b.n	8021a0c <USBD_LL_Init+0x44>
 8021a32:	bf00      	nop
 8021a34:	f3af 8000 	nop.w
 8021a38:	00000002 	.word	0x00000002
	...
 8021a48:	00000001 	.word	0x00000001
 8021a4c:	00000001 	.word	0x00000001
 8021a50:	240344d8 	.word	0x240344d8
 8021a54:	40080000 	.word	0x40080000

08021a58 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8021a58:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021a5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021a5e:	f7eb f881 	bl	800cb64 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8021a62:	2803      	cmp	r0, #3
 8021a64:	d802      	bhi.n	8021a6c <USBD_LL_Start+0x14>
 8021a66:	4b02      	ldr	r3, [pc, #8]	; (8021a70 <USBD_LL_Start+0x18>)
 8021a68:	5c18      	ldrb	r0, [r3, r0]
}
 8021a6a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021a6c:	2003      	movs	r0, #3
}
 8021a6e:	bd08      	pop	{r3, pc}
 8021a70:	2400aee4 	.word	0x2400aee4

08021a74 <USBD_LL_OpenEP>:
{
 8021a74:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021a76:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021a7a:	461a      	mov	r2, r3
 8021a7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021a7e:	4663      	mov	r3, ip
 8021a80:	f7eb fbca 	bl	800d218 <HAL_PCD_EP_Open>
  switch (hal_status)
 8021a84:	2803      	cmp	r0, #3
 8021a86:	d802      	bhi.n	8021a8e <USBD_LL_OpenEP+0x1a>
 8021a88:	4b02      	ldr	r3, [pc, #8]	; (8021a94 <USBD_LL_OpenEP+0x20>)
 8021a8a:	5c18      	ldrb	r0, [r3, r0]
}
 8021a8c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021a8e:	2003      	movs	r0, #3
}
 8021a90:	bd08      	pop	{r3, pc}
 8021a92:	bf00      	nop
 8021a94:	2400aee4 	.word	0x2400aee4

08021a98 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021a98:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021a9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021a9e:	f7eb fbf9 	bl	800d294 <HAL_PCD_EP_Close>
  switch (hal_status)
 8021aa2:	2803      	cmp	r0, #3
 8021aa4:	d802      	bhi.n	8021aac <USBD_LL_CloseEP+0x14>
 8021aa6:	4b02      	ldr	r3, [pc, #8]	; (8021ab0 <USBD_LL_CloseEP+0x18>)
 8021aa8:	5c18      	ldrb	r0, [r3, r0]
}
 8021aaa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021aac:	2003      	movs	r0, #3
}
 8021aae:	bd08      	pop	{r3, pc}
 8021ab0:	2400aee4 	.word	0x2400aee4

08021ab4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021ab4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021ab8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021aba:	f7eb fc7b 	bl	800d3b4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8021abe:	2803      	cmp	r0, #3
 8021ac0:	d802      	bhi.n	8021ac8 <USBD_LL_StallEP+0x14>
 8021ac2:	4b02      	ldr	r3, [pc, #8]	; (8021acc <USBD_LL_StallEP+0x18>)
 8021ac4:	5c18      	ldrb	r0, [r3, r0]
}
 8021ac6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021ac8:	2003      	movs	r0, #3
}
 8021aca:	bd08      	pop	{r3, pc}
 8021acc:	2400aee4 	.word	0x2400aee4

08021ad0 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021ad0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021ad4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021ad6:	f7eb fcb1 	bl	800d43c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8021ada:	2803      	cmp	r0, #3
 8021adc:	d802      	bhi.n	8021ae4 <USBD_LL_ClearStallEP+0x14>
 8021ade:	4b02      	ldr	r3, [pc, #8]	; (8021ae8 <USBD_LL_ClearStallEP+0x18>)
 8021ae0:	5c18      	ldrb	r0, [r3, r0]
}
 8021ae2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021ae4:	2003      	movs	r0, #3
}
 8021ae6:	bd08      	pop	{r3, pc}
 8021ae8:	2400aee4 	.word	0x2400aee4

08021aec <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8021aec:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021aee:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8021af2:	d406      	bmi.n	8021b02 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021af4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021af8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021afc:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8021b00:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8021b02:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8021b06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021b0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021b0e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8021b12:	4770      	bx	lr

08021b14 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021b14:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021b18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021b1a:	f7eb fb67 	bl	800d1ec <HAL_PCD_SetAddress>
  switch (hal_status)
 8021b1e:	2803      	cmp	r0, #3
 8021b20:	d802      	bhi.n	8021b28 <USBD_LL_SetUSBAddress+0x14>
 8021b22:	4b02      	ldr	r3, [pc, #8]	; (8021b2c <USBD_LL_SetUSBAddress+0x18>)
 8021b24:	5c18      	ldrb	r0, [r3, r0]
}
 8021b26:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021b28:	2003      	movs	r0, #3
}
 8021b2a:	bd08      	pop	{r3, pc}
 8021b2c:	2400aee4 	.word	0x2400aee4

08021b30 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021b30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021b34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021b36:	f7eb fc15 	bl	800d364 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8021b3a:	2803      	cmp	r0, #3
 8021b3c:	d802      	bhi.n	8021b44 <USBD_LL_Transmit+0x14>
 8021b3e:	4b02      	ldr	r3, [pc, #8]	; (8021b48 <USBD_LL_Transmit+0x18>)
 8021b40:	5c18      	ldrb	r0, [r3, r0]
}
 8021b42:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021b44:	2003      	movs	r0, #3
}
 8021b46:	bd08      	pop	{r3, pc}
 8021b48:	2400aee4 	.word	0x2400aee4

08021b4c <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021b4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021b50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021b52:	f7eb fbd5 	bl	800d300 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8021b56:	2803      	cmp	r0, #3
 8021b58:	d802      	bhi.n	8021b60 <USBD_LL_PrepareReceive+0x14>
 8021b5a:	4b02      	ldr	r3, [pc, #8]	; (8021b64 <USBD_LL_PrepareReceive+0x18>)
 8021b5c:	5c18      	ldrb	r0, [r3, r0]
}
 8021b5e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021b60:	2003      	movs	r0, #3
}
 8021b62:	bd08      	pop	{r3, pc}
 8021b64:	2400aee4 	.word	0x2400aee4

08021b68 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021b68:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8021b6c:	f7eb bbf0 	b.w	800d350 <HAL_PCD_EP_GetRxCount>

08021b70 <USBD_static_malloc>:
}
 8021b70:	4800      	ldr	r0, [pc, #0]	; (8021b74 <USBD_static_malloc+0x4>)
 8021b72:	4770      	bx	lr
 8021b74:	240348e0 	.word	0x240348e0

08021b78 <USBD_static_free>:
}
 8021b78:	4770      	bx	lr
 8021b7a:	bf00      	nop

08021b7c <__assert_func>:
 8021b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021b7e:	4614      	mov	r4, r2
 8021b80:	461a      	mov	r2, r3
 8021b82:	4b09      	ldr	r3, [pc, #36]	; (8021ba8 <__assert_func+0x2c>)
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	4605      	mov	r5, r0
 8021b88:	68d8      	ldr	r0, [r3, #12]
 8021b8a:	b14c      	cbz	r4, 8021ba0 <__assert_func+0x24>
 8021b8c:	4b07      	ldr	r3, [pc, #28]	; (8021bac <__assert_func+0x30>)
 8021b8e:	9100      	str	r1, [sp, #0]
 8021b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021b94:	4906      	ldr	r1, [pc, #24]	; (8021bb0 <__assert_func+0x34>)
 8021b96:	462b      	mov	r3, r5
 8021b98:	f000 f8ea 	bl	8021d70 <fiprintf>
 8021b9c:	f001 f800 	bl	8022ba0 <abort>
 8021ba0:	4b04      	ldr	r3, [pc, #16]	; (8021bb4 <__assert_func+0x38>)
 8021ba2:	461c      	mov	r4, r3
 8021ba4:	e7f3      	b.n	8021b8e <__assert_func+0x12>
 8021ba6:	bf00      	nop
 8021ba8:	24009074 	.word	0x24009074
 8021bac:	2400aee8 	.word	0x2400aee8
 8021bb0:	2400aef5 	.word	0x2400aef5
 8021bb4:	2400af23 	.word	0x2400af23

08021bb8 <__errno>:
 8021bb8:	4b01      	ldr	r3, [pc, #4]	; (8021bc0 <__errno+0x8>)
 8021bba:	6818      	ldr	r0, [r3, #0]
 8021bbc:	4770      	bx	lr
 8021bbe:	bf00      	nop
 8021bc0:	24009074 	.word	0x24009074

08021bc4 <std>:
 8021bc4:	2300      	movs	r3, #0
 8021bc6:	b510      	push	{r4, lr}
 8021bc8:	4604      	mov	r4, r0
 8021bca:	e9c0 3300 	strd	r3, r3, [r0]
 8021bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021bd2:	6083      	str	r3, [r0, #8]
 8021bd4:	8181      	strh	r1, [r0, #12]
 8021bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8021bd8:	81c2      	strh	r2, [r0, #14]
 8021bda:	6183      	str	r3, [r0, #24]
 8021bdc:	4619      	mov	r1, r3
 8021bde:	2208      	movs	r2, #8
 8021be0:	305c      	adds	r0, #92	; 0x5c
 8021be2:	f000 f93d 	bl	8021e60 <memset>
 8021be6:	4b05      	ldr	r3, [pc, #20]	; (8021bfc <std+0x38>)
 8021be8:	6263      	str	r3, [r4, #36]	; 0x24
 8021bea:	4b05      	ldr	r3, [pc, #20]	; (8021c00 <std+0x3c>)
 8021bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8021bee:	4b05      	ldr	r3, [pc, #20]	; (8021c04 <std+0x40>)
 8021bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021bf2:	4b05      	ldr	r3, [pc, #20]	; (8021c08 <std+0x44>)
 8021bf4:	6224      	str	r4, [r4, #32]
 8021bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8021bf8:	bd10      	pop	{r4, pc}
 8021bfa:	bf00      	nop
 8021bfc:	08022951 	.word	0x08022951
 8021c00:	08022973 	.word	0x08022973
 8021c04:	080229ab 	.word	0x080229ab
 8021c08:	080229cf 	.word	0x080229cf

08021c0c <_cleanup_r>:
 8021c0c:	4901      	ldr	r1, [pc, #4]	; (8021c14 <_cleanup_r+0x8>)
 8021c0e:	f000 b8c1 	b.w	8021d94 <_fwalk_reent>
 8021c12:	bf00      	nop
 8021c14:	08022cdd 	.word	0x08022cdd

08021c18 <__sfmoreglue>:
 8021c18:	b570      	push	{r4, r5, r6, lr}
 8021c1a:	2268      	movs	r2, #104	; 0x68
 8021c1c:	1e4d      	subs	r5, r1, #1
 8021c1e:	4355      	muls	r5, r2
 8021c20:	460e      	mov	r6, r1
 8021c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021c26:	f000 f98f 	bl	8021f48 <_malloc_r>
 8021c2a:	4604      	mov	r4, r0
 8021c2c:	b140      	cbz	r0, 8021c40 <__sfmoreglue+0x28>
 8021c2e:	2100      	movs	r1, #0
 8021c30:	e9c0 1600 	strd	r1, r6, [r0]
 8021c34:	300c      	adds	r0, #12
 8021c36:	60a0      	str	r0, [r4, #8]
 8021c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021c3c:	f000 f910 	bl	8021e60 <memset>
 8021c40:	4620      	mov	r0, r4
 8021c42:	bd70      	pop	{r4, r5, r6, pc}

08021c44 <__sfp_lock_acquire>:
 8021c44:	4801      	ldr	r0, [pc, #4]	; (8021c4c <__sfp_lock_acquire+0x8>)
 8021c46:	f000 b8ea 	b.w	8021e1e <__retarget_lock_acquire_recursive>
 8021c4a:	bf00      	nop
 8021c4c:	24034b01 	.word	0x24034b01

08021c50 <__sfp_lock_release>:
 8021c50:	4801      	ldr	r0, [pc, #4]	; (8021c58 <__sfp_lock_release+0x8>)
 8021c52:	f000 b8e5 	b.w	8021e20 <__retarget_lock_release_recursive>
 8021c56:	bf00      	nop
 8021c58:	24034b01 	.word	0x24034b01

08021c5c <__sinit_lock_acquire>:
 8021c5c:	4801      	ldr	r0, [pc, #4]	; (8021c64 <__sinit_lock_acquire+0x8>)
 8021c5e:	f000 b8de 	b.w	8021e1e <__retarget_lock_acquire_recursive>
 8021c62:	bf00      	nop
 8021c64:	24034b02 	.word	0x24034b02

08021c68 <__sinit_lock_release>:
 8021c68:	4801      	ldr	r0, [pc, #4]	; (8021c70 <__sinit_lock_release+0x8>)
 8021c6a:	f000 b8d9 	b.w	8021e20 <__retarget_lock_release_recursive>
 8021c6e:	bf00      	nop
 8021c70:	24034b02 	.word	0x24034b02

08021c74 <__sinit>:
 8021c74:	b510      	push	{r4, lr}
 8021c76:	4604      	mov	r4, r0
 8021c78:	f7ff fff0 	bl	8021c5c <__sinit_lock_acquire>
 8021c7c:	69a3      	ldr	r3, [r4, #24]
 8021c7e:	b11b      	cbz	r3, 8021c88 <__sinit+0x14>
 8021c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c84:	f7ff bff0 	b.w	8021c68 <__sinit_lock_release>
 8021c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8021c8e:	4b13      	ldr	r3, [pc, #76]	; (8021cdc <__sinit+0x68>)
 8021c90:	4a13      	ldr	r2, [pc, #76]	; (8021ce0 <__sinit+0x6c>)
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8021c96:	42a3      	cmp	r3, r4
 8021c98:	bf04      	itt	eq
 8021c9a:	2301      	moveq	r3, #1
 8021c9c:	61a3      	streq	r3, [r4, #24]
 8021c9e:	4620      	mov	r0, r4
 8021ca0:	f000 f820 	bl	8021ce4 <__sfp>
 8021ca4:	6060      	str	r0, [r4, #4]
 8021ca6:	4620      	mov	r0, r4
 8021ca8:	f000 f81c 	bl	8021ce4 <__sfp>
 8021cac:	60a0      	str	r0, [r4, #8]
 8021cae:	4620      	mov	r0, r4
 8021cb0:	f000 f818 	bl	8021ce4 <__sfp>
 8021cb4:	2200      	movs	r2, #0
 8021cb6:	60e0      	str	r0, [r4, #12]
 8021cb8:	2104      	movs	r1, #4
 8021cba:	6860      	ldr	r0, [r4, #4]
 8021cbc:	f7ff ff82 	bl	8021bc4 <std>
 8021cc0:	68a0      	ldr	r0, [r4, #8]
 8021cc2:	2201      	movs	r2, #1
 8021cc4:	2109      	movs	r1, #9
 8021cc6:	f7ff ff7d 	bl	8021bc4 <std>
 8021cca:	68e0      	ldr	r0, [r4, #12]
 8021ccc:	2202      	movs	r2, #2
 8021cce:	2112      	movs	r1, #18
 8021cd0:	f7ff ff78 	bl	8021bc4 <std>
 8021cd4:	2301      	movs	r3, #1
 8021cd6:	61a3      	str	r3, [r4, #24]
 8021cd8:	e7d2      	b.n	8021c80 <__sinit+0xc>
 8021cda:	bf00      	nop
 8021cdc:	2400af84 	.word	0x2400af84
 8021ce0:	08021c0d 	.word	0x08021c0d

08021ce4 <__sfp>:
 8021ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ce6:	4607      	mov	r7, r0
 8021ce8:	f7ff ffac 	bl	8021c44 <__sfp_lock_acquire>
 8021cec:	4b1e      	ldr	r3, [pc, #120]	; (8021d68 <__sfp+0x84>)
 8021cee:	681e      	ldr	r6, [r3, #0]
 8021cf0:	69b3      	ldr	r3, [r6, #24]
 8021cf2:	b913      	cbnz	r3, 8021cfa <__sfp+0x16>
 8021cf4:	4630      	mov	r0, r6
 8021cf6:	f7ff ffbd 	bl	8021c74 <__sinit>
 8021cfa:	3648      	adds	r6, #72	; 0x48
 8021cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021d00:	3b01      	subs	r3, #1
 8021d02:	d503      	bpl.n	8021d0c <__sfp+0x28>
 8021d04:	6833      	ldr	r3, [r6, #0]
 8021d06:	b30b      	cbz	r3, 8021d4c <__sfp+0x68>
 8021d08:	6836      	ldr	r6, [r6, #0]
 8021d0a:	e7f7      	b.n	8021cfc <__sfp+0x18>
 8021d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021d10:	b9d5      	cbnz	r5, 8021d48 <__sfp+0x64>
 8021d12:	4b16      	ldr	r3, [pc, #88]	; (8021d6c <__sfp+0x88>)
 8021d14:	60e3      	str	r3, [r4, #12]
 8021d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8021d1c:	f000 f87e 	bl	8021e1c <__retarget_lock_init_recursive>
 8021d20:	f7ff ff96 	bl	8021c50 <__sfp_lock_release>
 8021d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021d2c:	6025      	str	r5, [r4, #0]
 8021d2e:	61a5      	str	r5, [r4, #24]
 8021d30:	2208      	movs	r2, #8
 8021d32:	4629      	mov	r1, r5
 8021d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021d38:	f000 f892 	bl	8021e60 <memset>
 8021d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021d44:	4620      	mov	r0, r4
 8021d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d48:	3468      	adds	r4, #104	; 0x68
 8021d4a:	e7d9      	b.n	8021d00 <__sfp+0x1c>
 8021d4c:	2104      	movs	r1, #4
 8021d4e:	4638      	mov	r0, r7
 8021d50:	f7ff ff62 	bl	8021c18 <__sfmoreglue>
 8021d54:	4604      	mov	r4, r0
 8021d56:	6030      	str	r0, [r6, #0]
 8021d58:	2800      	cmp	r0, #0
 8021d5a:	d1d5      	bne.n	8021d08 <__sfp+0x24>
 8021d5c:	f7ff ff78 	bl	8021c50 <__sfp_lock_release>
 8021d60:	230c      	movs	r3, #12
 8021d62:	603b      	str	r3, [r7, #0]
 8021d64:	e7ee      	b.n	8021d44 <__sfp+0x60>
 8021d66:	bf00      	nop
 8021d68:	2400af84 	.word	0x2400af84
 8021d6c:	ffff0001 	.word	0xffff0001

08021d70 <fiprintf>:
 8021d70:	b40e      	push	{r1, r2, r3}
 8021d72:	b503      	push	{r0, r1, lr}
 8021d74:	4601      	mov	r1, r0
 8021d76:	ab03      	add	r3, sp, #12
 8021d78:	4805      	ldr	r0, [pc, #20]	; (8021d90 <fiprintf+0x20>)
 8021d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d7e:	6800      	ldr	r0, [r0, #0]
 8021d80:	9301      	str	r3, [sp, #4]
 8021d82:	f000 f97f 	bl	8022084 <_vfiprintf_r>
 8021d86:	b002      	add	sp, #8
 8021d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8021d8c:	b003      	add	sp, #12
 8021d8e:	4770      	bx	lr
 8021d90:	24009074 	.word	0x24009074

08021d94 <_fwalk_reent>:
 8021d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d98:	4606      	mov	r6, r0
 8021d9a:	4688      	mov	r8, r1
 8021d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021da0:	2700      	movs	r7, #0
 8021da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021da6:	f1b9 0901 	subs.w	r9, r9, #1
 8021daa:	d505      	bpl.n	8021db8 <_fwalk_reent+0x24>
 8021dac:	6824      	ldr	r4, [r4, #0]
 8021dae:	2c00      	cmp	r4, #0
 8021db0:	d1f7      	bne.n	8021da2 <_fwalk_reent+0xe>
 8021db2:	4638      	mov	r0, r7
 8021db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021db8:	89ab      	ldrh	r3, [r5, #12]
 8021dba:	2b01      	cmp	r3, #1
 8021dbc:	d907      	bls.n	8021dce <_fwalk_reent+0x3a>
 8021dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021dc2:	3301      	adds	r3, #1
 8021dc4:	d003      	beq.n	8021dce <_fwalk_reent+0x3a>
 8021dc6:	4629      	mov	r1, r5
 8021dc8:	4630      	mov	r0, r6
 8021dca:	47c0      	blx	r8
 8021dcc:	4307      	orrs	r7, r0
 8021dce:	3568      	adds	r5, #104	; 0x68
 8021dd0:	e7e9      	b.n	8021da6 <_fwalk_reent+0x12>
	...

08021dd4 <__libc_init_array>:
 8021dd4:	b570      	push	{r4, r5, r6, lr}
 8021dd6:	4d0d      	ldr	r5, [pc, #52]	; (8021e0c <__libc_init_array+0x38>)
 8021dd8:	4c0d      	ldr	r4, [pc, #52]	; (8021e10 <__libc_init_array+0x3c>)
 8021dda:	1b64      	subs	r4, r4, r5
 8021ddc:	10a4      	asrs	r4, r4, #2
 8021dde:	2600      	movs	r6, #0
 8021de0:	42a6      	cmp	r6, r4
 8021de2:	d109      	bne.n	8021df8 <__libc_init_array+0x24>
 8021de4:	4d0b      	ldr	r5, [pc, #44]	; (8021e14 <__libc_init_array+0x40>)
 8021de6:	4c0c      	ldr	r4, [pc, #48]	; (8021e18 <__libc_init_array+0x44>)
 8021de8:	f001 fa5c 	bl	80232a4 <_init>
 8021dec:	1b64      	subs	r4, r4, r5
 8021dee:	10a4      	asrs	r4, r4, #2
 8021df0:	2600      	movs	r6, #0
 8021df2:	42a6      	cmp	r6, r4
 8021df4:	d105      	bne.n	8021e02 <__libc_init_array+0x2e>
 8021df6:	bd70      	pop	{r4, r5, r6, pc}
 8021df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8021dfc:	4798      	blx	r3
 8021dfe:	3601      	adds	r6, #1
 8021e00:	e7ee      	b.n	8021de0 <__libc_init_array+0xc>
 8021e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8021e06:	4798      	blx	r3
 8021e08:	3601      	adds	r6, #1
 8021e0a:	e7f2      	b.n	8021df2 <__libc_init_array+0x1e>
 8021e0c:	080232c4 	.word	0x080232c4
 8021e10:	080232c4 	.word	0x080232c4
 8021e14:	080232c4 	.word	0x080232c4
 8021e18:	080232cc 	.word	0x080232cc

08021e1c <__retarget_lock_init_recursive>:
 8021e1c:	4770      	bx	lr

08021e1e <__retarget_lock_acquire_recursive>:
 8021e1e:	4770      	bx	lr

08021e20 <__retarget_lock_release_recursive>:
 8021e20:	4770      	bx	lr
	...

08021e24 <malloc>:
 8021e24:	4b02      	ldr	r3, [pc, #8]	; (8021e30 <malloc+0xc>)
 8021e26:	4601      	mov	r1, r0
 8021e28:	6818      	ldr	r0, [r3, #0]
 8021e2a:	f000 b88d 	b.w	8021f48 <_malloc_r>
 8021e2e:	bf00      	nop
 8021e30:	24009074 	.word	0x24009074

08021e34 <free>:
 8021e34:	4b02      	ldr	r3, [pc, #8]	; (8021e40 <free+0xc>)
 8021e36:	4601      	mov	r1, r0
 8021e38:	6818      	ldr	r0, [r3, #0]
 8021e3a:	f000 b819 	b.w	8021e70 <_free_r>
 8021e3e:	bf00      	nop
 8021e40:	24009074 	.word	0x24009074

08021e44 <memcpy>:
 8021e44:	440a      	add	r2, r1
 8021e46:	4291      	cmp	r1, r2
 8021e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021e4c:	d100      	bne.n	8021e50 <memcpy+0xc>
 8021e4e:	4770      	bx	lr
 8021e50:	b510      	push	{r4, lr}
 8021e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021e5a:	4291      	cmp	r1, r2
 8021e5c:	d1f9      	bne.n	8021e52 <memcpy+0xe>
 8021e5e:	bd10      	pop	{r4, pc}

08021e60 <memset>:
 8021e60:	4402      	add	r2, r0
 8021e62:	4603      	mov	r3, r0
 8021e64:	4293      	cmp	r3, r2
 8021e66:	d100      	bne.n	8021e6a <memset+0xa>
 8021e68:	4770      	bx	lr
 8021e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8021e6e:	e7f9      	b.n	8021e64 <memset+0x4>

08021e70 <_free_r>:
 8021e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e72:	2900      	cmp	r1, #0
 8021e74:	d044      	beq.n	8021f00 <_free_r+0x90>
 8021e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e7a:	9001      	str	r0, [sp, #4]
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8021e82:	bfb8      	it	lt
 8021e84:	18e4      	addlt	r4, r4, r3
 8021e86:	f000 fff7 	bl	8022e78 <__malloc_lock>
 8021e8a:	4a1e      	ldr	r2, [pc, #120]	; (8021f04 <_free_r+0x94>)
 8021e8c:	9801      	ldr	r0, [sp, #4]
 8021e8e:	6813      	ldr	r3, [r2, #0]
 8021e90:	b933      	cbnz	r3, 8021ea0 <_free_r+0x30>
 8021e92:	6063      	str	r3, [r4, #4]
 8021e94:	6014      	str	r4, [r2, #0]
 8021e96:	b003      	add	sp, #12
 8021e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e9c:	f000 bff2 	b.w	8022e84 <__malloc_unlock>
 8021ea0:	42a3      	cmp	r3, r4
 8021ea2:	d908      	bls.n	8021eb6 <_free_r+0x46>
 8021ea4:	6825      	ldr	r5, [r4, #0]
 8021ea6:	1961      	adds	r1, r4, r5
 8021ea8:	428b      	cmp	r3, r1
 8021eaa:	bf01      	itttt	eq
 8021eac:	6819      	ldreq	r1, [r3, #0]
 8021eae:	685b      	ldreq	r3, [r3, #4]
 8021eb0:	1949      	addeq	r1, r1, r5
 8021eb2:	6021      	streq	r1, [r4, #0]
 8021eb4:	e7ed      	b.n	8021e92 <_free_r+0x22>
 8021eb6:	461a      	mov	r2, r3
 8021eb8:	685b      	ldr	r3, [r3, #4]
 8021eba:	b10b      	cbz	r3, 8021ec0 <_free_r+0x50>
 8021ebc:	42a3      	cmp	r3, r4
 8021ebe:	d9fa      	bls.n	8021eb6 <_free_r+0x46>
 8021ec0:	6811      	ldr	r1, [r2, #0]
 8021ec2:	1855      	adds	r5, r2, r1
 8021ec4:	42a5      	cmp	r5, r4
 8021ec6:	d10b      	bne.n	8021ee0 <_free_r+0x70>
 8021ec8:	6824      	ldr	r4, [r4, #0]
 8021eca:	4421      	add	r1, r4
 8021ecc:	1854      	adds	r4, r2, r1
 8021ece:	42a3      	cmp	r3, r4
 8021ed0:	6011      	str	r1, [r2, #0]
 8021ed2:	d1e0      	bne.n	8021e96 <_free_r+0x26>
 8021ed4:	681c      	ldr	r4, [r3, #0]
 8021ed6:	685b      	ldr	r3, [r3, #4]
 8021ed8:	6053      	str	r3, [r2, #4]
 8021eda:	4421      	add	r1, r4
 8021edc:	6011      	str	r1, [r2, #0]
 8021ede:	e7da      	b.n	8021e96 <_free_r+0x26>
 8021ee0:	d902      	bls.n	8021ee8 <_free_r+0x78>
 8021ee2:	230c      	movs	r3, #12
 8021ee4:	6003      	str	r3, [r0, #0]
 8021ee6:	e7d6      	b.n	8021e96 <_free_r+0x26>
 8021ee8:	6825      	ldr	r5, [r4, #0]
 8021eea:	1961      	adds	r1, r4, r5
 8021eec:	428b      	cmp	r3, r1
 8021eee:	bf04      	itt	eq
 8021ef0:	6819      	ldreq	r1, [r3, #0]
 8021ef2:	685b      	ldreq	r3, [r3, #4]
 8021ef4:	6063      	str	r3, [r4, #4]
 8021ef6:	bf04      	itt	eq
 8021ef8:	1949      	addeq	r1, r1, r5
 8021efa:	6021      	streq	r1, [r4, #0]
 8021efc:	6054      	str	r4, [r2, #4]
 8021efe:	e7ca      	b.n	8021e96 <_free_r+0x26>
 8021f00:	b003      	add	sp, #12
 8021f02:	bd30      	pop	{r4, r5, pc}
 8021f04:	24034b04 	.word	0x24034b04

08021f08 <sbrk_aligned>:
 8021f08:	b570      	push	{r4, r5, r6, lr}
 8021f0a:	4e0e      	ldr	r6, [pc, #56]	; (8021f44 <sbrk_aligned+0x3c>)
 8021f0c:	460c      	mov	r4, r1
 8021f0e:	6831      	ldr	r1, [r6, #0]
 8021f10:	4605      	mov	r5, r0
 8021f12:	b911      	cbnz	r1, 8021f1a <sbrk_aligned+0x12>
 8021f14:	f000 fcd8 	bl	80228c8 <_sbrk_r>
 8021f18:	6030      	str	r0, [r6, #0]
 8021f1a:	4621      	mov	r1, r4
 8021f1c:	4628      	mov	r0, r5
 8021f1e:	f000 fcd3 	bl	80228c8 <_sbrk_r>
 8021f22:	1c43      	adds	r3, r0, #1
 8021f24:	d00a      	beq.n	8021f3c <sbrk_aligned+0x34>
 8021f26:	1cc4      	adds	r4, r0, #3
 8021f28:	f024 0403 	bic.w	r4, r4, #3
 8021f2c:	42a0      	cmp	r0, r4
 8021f2e:	d007      	beq.n	8021f40 <sbrk_aligned+0x38>
 8021f30:	1a21      	subs	r1, r4, r0
 8021f32:	4628      	mov	r0, r5
 8021f34:	f000 fcc8 	bl	80228c8 <_sbrk_r>
 8021f38:	3001      	adds	r0, #1
 8021f3a:	d101      	bne.n	8021f40 <sbrk_aligned+0x38>
 8021f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8021f40:	4620      	mov	r0, r4
 8021f42:	bd70      	pop	{r4, r5, r6, pc}
 8021f44:	24034b08 	.word	0x24034b08

08021f48 <_malloc_r>:
 8021f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f4c:	1ccd      	adds	r5, r1, #3
 8021f4e:	f025 0503 	bic.w	r5, r5, #3
 8021f52:	3508      	adds	r5, #8
 8021f54:	2d0c      	cmp	r5, #12
 8021f56:	bf38      	it	cc
 8021f58:	250c      	movcc	r5, #12
 8021f5a:	2d00      	cmp	r5, #0
 8021f5c:	4607      	mov	r7, r0
 8021f5e:	db01      	blt.n	8021f64 <_malloc_r+0x1c>
 8021f60:	42a9      	cmp	r1, r5
 8021f62:	d905      	bls.n	8021f70 <_malloc_r+0x28>
 8021f64:	230c      	movs	r3, #12
 8021f66:	603b      	str	r3, [r7, #0]
 8021f68:	2600      	movs	r6, #0
 8021f6a:	4630      	mov	r0, r6
 8021f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f70:	4e2e      	ldr	r6, [pc, #184]	; (802202c <_malloc_r+0xe4>)
 8021f72:	f000 ff81 	bl	8022e78 <__malloc_lock>
 8021f76:	6833      	ldr	r3, [r6, #0]
 8021f78:	461c      	mov	r4, r3
 8021f7a:	bb34      	cbnz	r4, 8021fca <_malloc_r+0x82>
 8021f7c:	4629      	mov	r1, r5
 8021f7e:	4638      	mov	r0, r7
 8021f80:	f7ff ffc2 	bl	8021f08 <sbrk_aligned>
 8021f84:	1c43      	adds	r3, r0, #1
 8021f86:	4604      	mov	r4, r0
 8021f88:	d14d      	bne.n	8022026 <_malloc_r+0xde>
 8021f8a:	6834      	ldr	r4, [r6, #0]
 8021f8c:	4626      	mov	r6, r4
 8021f8e:	2e00      	cmp	r6, #0
 8021f90:	d140      	bne.n	8022014 <_malloc_r+0xcc>
 8021f92:	6823      	ldr	r3, [r4, #0]
 8021f94:	4631      	mov	r1, r6
 8021f96:	4638      	mov	r0, r7
 8021f98:	eb04 0803 	add.w	r8, r4, r3
 8021f9c:	f000 fc94 	bl	80228c8 <_sbrk_r>
 8021fa0:	4580      	cmp	r8, r0
 8021fa2:	d13a      	bne.n	802201a <_malloc_r+0xd2>
 8021fa4:	6821      	ldr	r1, [r4, #0]
 8021fa6:	3503      	adds	r5, #3
 8021fa8:	1a6d      	subs	r5, r5, r1
 8021faa:	f025 0503 	bic.w	r5, r5, #3
 8021fae:	3508      	adds	r5, #8
 8021fb0:	2d0c      	cmp	r5, #12
 8021fb2:	bf38      	it	cc
 8021fb4:	250c      	movcc	r5, #12
 8021fb6:	4629      	mov	r1, r5
 8021fb8:	4638      	mov	r0, r7
 8021fba:	f7ff ffa5 	bl	8021f08 <sbrk_aligned>
 8021fbe:	3001      	adds	r0, #1
 8021fc0:	d02b      	beq.n	802201a <_malloc_r+0xd2>
 8021fc2:	6823      	ldr	r3, [r4, #0]
 8021fc4:	442b      	add	r3, r5
 8021fc6:	6023      	str	r3, [r4, #0]
 8021fc8:	e00e      	b.n	8021fe8 <_malloc_r+0xa0>
 8021fca:	6822      	ldr	r2, [r4, #0]
 8021fcc:	1b52      	subs	r2, r2, r5
 8021fce:	d41e      	bmi.n	802200e <_malloc_r+0xc6>
 8021fd0:	2a0b      	cmp	r2, #11
 8021fd2:	d916      	bls.n	8022002 <_malloc_r+0xba>
 8021fd4:	1961      	adds	r1, r4, r5
 8021fd6:	42a3      	cmp	r3, r4
 8021fd8:	6025      	str	r5, [r4, #0]
 8021fda:	bf18      	it	ne
 8021fdc:	6059      	strne	r1, [r3, #4]
 8021fde:	6863      	ldr	r3, [r4, #4]
 8021fe0:	bf08      	it	eq
 8021fe2:	6031      	streq	r1, [r6, #0]
 8021fe4:	5162      	str	r2, [r4, r5]
 8021fe6:	604b      	str	r3, [r1, #4]
 8021fe8:	4638      	mov	r0, r7
 8021fea:	f104 060b 	add.w	r6, r4, #11
 8021fee:	f000 ff49 	bl	8022e84 <__malloc_unlock>
 8021ff2:	f026 0607 	bic.w	r6, r6, #7
 8021ff6:	1d23      	adds	r3, r4, #4
 8021ff8:	1af2      	subs	r2, r6, r3
 8021ffa:	d0b6      	beq.n	8021f6a <_malloc_r+0x22>
 8021ffc:	1b9b      	subs	r3, r3, r6
 8021ffe:	50a3      	str	r3, [r4, r2]
 8022000:	e7b3      	b.n	8021f6a <_malloc_r+0x22>
 8022002:	6862      	ldr	r2, [r4, #4]
 8022004:	42a3      	cmp	r3, r4
 8022006:	bf0c      	ite	eq
 8022008:	6032      	streq	r2, [r6, #0]
 802200a:	605a      	strne	r2, [r3, #4]
 802200c:	e7ec      	b.n	8021fe8 <_malloc_r+0xa0>
 802200e:	4623      	mov	r3, r4
 8022010:	6864      	ldr	r4, [r4, #4]
 8022012:	e7b2      	b.n	8021f7a <_malloc_r+0x32>
 8022014:	4634      	mov	r4, r6
 8022016:	6876      	ldr	r6, [r6, #4]
 8022018:	e7b9      	b.n	8021f8e <_malloc_r+0x46>
 802201a:	230c      	movs	r3, #12
 802201c:	603b      	str	r3, [r7, #0]
 802201e:	4638      	mov	r0, r7
 8022020:	f000 ff30 	bl	8022e84 <__malloc_unlock>
 8022024:	e7a1      	b.n	8021f6a <_malloc_r+0x22>
 8022026:	6025      	str	r5, [r4, #0]
 8022028:	e7de      	b.n	8021fe8 <_malloc_r+0xa0>
 802202a:	bf00      	nop
 802202c:	24034b04 	.word	0x24034b04

08022030 <__sfputc_r>:
 8022030:	6893      	ldr	r3, [r2, #8]
 8022032:	3b01      	subs	r3, #1
 8022034:	2b00      	cmp	r3, #0
 8022036:	b410      	push	{r4}
 8022038:	6093      	str	r3, [r2, #8]
 802203a:	da08      	bge.n	802204e <__sfputc_r+0x1e>
 802203c:	6994      	ldr	r4, [r2, #24]
 802203e:	42a3      	cmp	r3, r4
 8022040:	db01      	blt.n	8022046 <__sfputc_r+0x16>
 8022042:	290a      	cmp	r1, #10
 8022044:	d103      	bne.n	802204e <__sfputc_r+0x1e>
 8022046:	f85d 4b04 	ldr.w	r4, [sp], #4
 802204a:	f000 bcd7 	b.w	80229fc <__swbuf_r>
 802204e:	6813      	ldr	r3, [r2, #0]
 8022050:	1c58      	adds	r0, r3, #1
 8022052:	6010      	str	r0, [r2, #0]
 8022054:	7019      	strb	r1, [r3, #0]
 8022056:	4608      	mov	r0, r1
 8022058:	f85d 4b04 	ldr.w	r4, [sp], #4
 802205c:	4770      	bx	lr

0802205e <__sfputs_r>:
 802205e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022060:	4606      	mov	r6, r0
 8022062:	460f      	mov	r7, r1
 8022064:	4614      	mov	r4, r2
 8022066:	18d5      	adds	r5, r2, r3
 8022068:	42ac      	cmp	r4, r5
 802206a:	d101      	bne.n	8022070 <__sfputs_r+0x12>
 802206c:	2000      	movs	r0, #0
 802206e:	e007      	b.n	8022080 <__sfputs_r+0x22>
 8022070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022074:	463a      	mov	r2, r7
 8022076:	4630      	mov	r0, r6
 8022078:	f7ff ffda 	bl	8022030 <__sfputc_r>
 802207c:	1c43      	adds	r3, r0, #1
 802207e:	d1f3      	bne.n	8022068 <__sfputs_r+0xa>
 8022080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022084 <_vfiprintf_r>:
 8022084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022088:	460d      	mov	r5, r1
 802208a:	b09d      	sub	sp, #116	; 0x74
 802208c:	4614      	mov	r4, r2
 802208e:	4698      	mov	r8, r3
 8022090:	4606      	mov	r6, r0
 8022092:	b118      	cbz	r0, 802209c <_vfiprintf_r+0x18>
 8022094:	6983      	ldr	r3, [r0, #24]
 8022096:	b90b      	cbnz	r3, 802209c <_vfiprintf_r+0x18>
 8022098:	f7ff fdec 	bl	8021c74 <__sinit>
 802209c:	4b89      	ldr	r3, [pc, #548]	; (80222c4 <_vfiprintf_r+0x240>)
 802209e:	429d      	cmp	r5, r3
 80220a0:	d11b      	bne.n	80220da <_vfiprintf_r+0x56>
 80220a2:	6875      	ldr	r5, [r6, #4]
 80220a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80220a6:	07d9      	lsls	r1, r3, #31
 80220a8:	d405      	bmi.n	80220b6 <_vfiprintf_r+0x32>
 80220aa:	89ab      	ldrh	r3, [r5, #12]
 80220ac:	059a      	lsls	r2, r3, #22
 80220ae:	d402      	bmi.n	80220b6 <_vfiprintf_r+0x32>
 80220b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80220b2:	f7ff feb4 	bl	8021e1e <__retarget_lock_acquire_recursive>
 80220b6:	89ab      	ldrh	r3, [r5, #12]
 80220b8:	071b      	lsls	r3, r3, #28
 80220ba:	d501      	bpl.n	80220c0 <_vfiprintf_r+0x3c>
 80220bc:	692b      	ldr	r3, [r5, #16]
 80220be:	b9eb      	cbnz	r3, 80220fc <_vfiprintf_r+0x78>
 80220c0:	4629      	mov	r1, r5
 80220c2:	4630      	mov	r0, r6
 80220c4:	f000 fcfe 	bl	8022ac4 <__swsetup_r>
 80220c8:	b1c0      	cbz	r0, 80220fc <_vfiprintf_r+0x78>
 80220ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80220cc:	07dc      	lsls	r4, r3, #31
 80220ce:	d50e      	bpl.n	80220ee <_vfiprintf_r+0x6a>
 80220d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80220d4:	b01d      	add	sp, #116	; 0x74
 80220d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220da:	4b7b      	ldr	r3, [pc, #492]	; (80222c8 <_vfiprintf_r+0x244>)
 80220dc:	429d      	cmp	r5, r3
 80220de:	d101      	bne.n	80220e4 <_vfiprintf_r+0x60>
 80220e0:	68b5      	ldr	r5, [r6, #8]
 80220e2:	e7df      	b.n	80220a4 <_vfiprintf_r+0x20>
 80220e4:	4b79      	ldr	r3, [pc, #484]	; (80222cc <_vfiprintf_r+0x248>)
 80220e6:	429d      	cmp	r5, r3
 80220e8:	bf08      	it	eq
 80220ea:	68f5      	ldreq	r5, [r6, #12]
 80220ec:	e7da      	b.n	80220a4 <_vfiprintf_r+0x20>
 80220ee:	89ab      	ldrh	r3, [r5, #12]
 80220f0:	0598      	lsls	r0, r3, #22
 80220f2:	d4ed      	bmi.n	80220d0 <_vfiprintf_r+0x4c>
 80220f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80220f6:	f7ff fe93 	bl	8021e20 <__retarget_lock_release_recursive>
 80220fa:	e7e9      	b.n	80220d0 <_vfiprintf_r+0x4c>
 80220fc:	2300      	movs	r3, #0
 80220fe:	9309      	str	r3, [sp, #36]	; 0x24
 8022100:	2320      	movs	r3, #32
 8022102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022106:	f8cd 800c 	str.w	r8, [sp, #12]
 802210a:	2330      	movs	r3, #48	; 0x30
 802210c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80222d0 <_vfiprintf_r+0x24c>
 8022110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022114:	f04f 0901 	mov.w	r9, #1
 8022118:	4623      	mov	r3, r4
 802211a:	469a      	mov	sl, r3
 802211c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022120:	b10a      	cbz	r2, 8022126 <_vfiprintf_r+0xa2>
 8022122:	2a25      	cmp	r2, #37	; 0x25
 8022124:	d1f9      	bne.n	802211a <_vfiprintf_r+0x96>
 8022126:	ebba 0b04 	subs.w	fp, sl, r4
 802212a:	d00b      	beq.n	8022144 <_vfiprintf_r+0xc0>
 802212c:	465b      	mov	r3, fp
 802212e:	4622      	mov	r2, r4
 8022130:	4629      	mov	r1, r5
 8022132:	4630      	mov	r0, r6
 8022134:	f7ff ff93 	bl	802205e <__sfputs_r>
 8022138:	3001      	adds	r0, #1
 802213a:	f000 80aa 	beq.w	8022292 <_vfiprintf_r+0x20e>
 802213e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022140:	445a      	add	r2, fp
 8022142:	9209      	str	r2, [sp, #36]	; 0x24
 8022144:	f89a 3000 	ldrb.w	r3, [sl]
 8022148:	2b00      	cmp	r3, #0
 802214a:	f000 80a2 	beq.w	8022292 <_vfiprintf_r+0x20e>
 802214e:	2300      	movs	r3, #0
 8022150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022158:	f10a 0a01 	add.w	sl, sl, #1
 802215c:	9304      	str	r3, [sp, #16]
 802215e:	9307      	str	r3, [sp, #28]
 8022160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022164:	931a      	str	r3, [sp, #104]	; 0x68
 8022166:	4654      	mov	r4, sl
 8022168:	2205      	movs	r2, #5
 802216a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802216e:	4858      	ldr	r0, [pc, #352]	; (80222d0 <_vfiprintf_r+0x24c>)
 8022170:	f7e6 ff7e 	bl	8009070 <memchr>
 8022174:	9a04      	ldr	r2, [sp, #16]
 8022176:	b9d8      	cbnz	r0, 80221b0 <_vfiprintf_r+0x12c>
 8022178:	06d1      	lsls	r1, r2, #27
 802217a:	bf44      	itt	mi
 802217c:	2320      	movmi	r3, #32
 802217e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022182:	0713      	lsls	r3, r2, #28
 8022184:	bf44      	itt	mi
 8022186:	232b      	movmi	r3, #43	; 0x2b
 8022188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802218c:	f89a 3000 	ldrb.w	r3, [sl]
 8022190:	2b2a      	cmp	r3, #42	; 0x2a
 8022192:	d015      	beq.n	80221c0 <_vfiprintf_r+0x13c>
 8022194:	9a07      	ldr	r2, [sp, #28]
 8022196:	4654      	mov	r4, sl
 8022198:	2000      	movs	r0, #0
 802219a:	f04f 0c0a 	mov.w	ip, #10
 802219e:	4621      	mov	r1, r4
 80221a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80221a4:	3b30      	subs	r3, #48	; 0x30
 80221a6:	2b09      	cmp	r3, #9
 80221a8:	d94e      	bls.n	8022248 <_vfiprintf_r+0x1c4>
 80221aa:	b1b0      	cbz	r0, 80221da <_vfiprintf_r+0x156>
 80221ac:	9207      	str	r2, [sp, #28]
 80221ae:	e014      	b.n	80221da <_vfiprintf_r+0x156>
 80221b0:	eba0 0308 	sub.w	r3, r0, r8
 80221b4:	fa09 f303 	lsl.w	r3, r9, r3
 80221b8:	4313      	orrs	r3, r2
 80221ba:	9304      	str	r3, [sp, #16]
 80221bc:	46a2      	mov	sl, r4
 80221be:	e7d2      	b.n	8022166 <_vfiprintf_r+0xe2>
 80221c0:	9b03      	ldr	r3, [sp, #12]
 80221c2:	1d19      	adds	r1, r3, #4
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	9103      	str	r1, [sp, #12]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	bfbb      	ittet	lt
 80221cc:	425b      	neglt	r3, r3
 80221ce:	f042 0202 	orrlt.w	r2, r2, #2
 80221d2:	9307      	strge	r3, [sp, #28]
 80221d4:	9307      	strlt	r3, [sp, #28]
 80221d6:	bfb8      	it	lt
 80221d8:	9204      	strlt	r2, [sp, #16]
 80221da:	7823      	ldrb	r3, [r4, #0]
 80221dc:	2b2e      	cmp	r3, #46	; 0x2e
 80221de:	d10c      	bne.n	80221fa <_vfiprintf_r+0x176>
 80221e0:	7863      	ldrb	r3, [r4, #1]
 80221e2:	2b2a      	cmp	r3, #42	; 0x2a
 80221e4:	d135      	bne.n	8022252 <_vfiprintf_r+0x1ce>
 80221e6:	9b03      	ldr	r3, [sp, #12]
 80221e8:	1d1a      	adds	r2, r3, #4
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	9203      	str	r2, [sp, #12]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	bfb8      	it	lt
 80221f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80221f6:	3402      	adds	r4, #2
 80221f8:	9305      	str	r3, [sp, #20]
 80221fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80222e0 <_vfiprintf_r+0x25c>
 80221fe:	7821      	ldrb	r1, [r4, #0]
 8022200:	2203      	movs	r2, #3
 8022202:	4650      	mov	r0, sl
 8022204:	f7e6 ff34 	bl	8009070 <memchr>
 8022208:	b140      	cbz	r0, 802221c <_vfiprintf_r+0x198>
 802220a:	2340      	movs	r3, #64	; 0x40
 802220c:	eba0 000a 	sub.w	r0, r0, sl
 8022210:	fa03 f000 	lsl.w	r0, r3, r0
 8022214:	9b04      	ldr	r3, [sp, #16]
 8022216:	4303      	orrs	r3, r0
 8022218:	3401      	adds	r4, #1
 802221a:	9304      	str	r3, [sp, #16]
 802221c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022220:	482c      	ldr	r0, [pc, #176]	; (80222d4 <_vfiprintf_r+0x250>)
 8022222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022226:	2206      	movs	r2, #6
 8022228:	f7e6 ff22 	bl	8009070 <memchr>
 802222c:	2800      	cmp	r0, #0
 802222e:	d03f      	beq.n	80222b0 <_vfiprintf_r+0x22c>
 8022230:	4b29      	ldr	r3, [pc, #164]	; (80222d8 <_vfiprintf_r+0x254>)
 8022232:	bb1b      	cbnz	r3, 802227c <_vfiprintf_r+0x1f8>
 8022234:	9b03      	ldr	r3, [sp, #12]
 8022236:	3307      	adds	r3, #7
 8022238:	f023 0307 	bic.w	r3, r3, #7
 802223c:	3308      	adds	r3, #8
 802223e:	9303      	str	r3, [sp, #12]
 8022240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022242:	443b      	add	r3, r7
 8022244:	9309      	str	r3, [sp, #36]	; 0x24
 8022246:	e767      	b.n	8022118 <_vfiprintf_r+0x94>
 8022248:	fb0c 3202 	mla	r2, ip, r2, r3
 802224c:	460c      	mov	r4, r1
 802224e:	2001      	movs	r0, #1
 8022250:	e7a5      	b.n	802219e <_vfiprintf_r+0x11a>
 8022252:	2300      	movs	r3, #0
 8022254:	3401      	adds	r4, #1
 8022256:	9305      	str	r3, [sp, #20]
 8022258:	4619      	mov	r1, r3
 802225a:	f04f 0c0a 	mov.w	ip, #10
 802225e:	4620      	mov	r0, r4
 8022260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022264:	3a30      	subs	r2, #48	; 0x30
 8022266:	2a09      	cmp	r2, #9
 8022268:	d903      	bls.n	8022272 <_vfiprintf_r+0x1ee>
 802226a:	2b00      	cmp	r3, #0
 802226c:	d0c5      	beq.n	80221fa <_vfiprintf_r+0x176>
 802226e:	9105      	str	r1, [sp, #20]
 8022270:	e7c3      	b.n	80221fa <_vfiprintf_r+0x176>
 8022272:	fb0c 2101 	mla	r1, ip, r1, r2
 8022276:	4604      	mov	r4, r0
 8022278:	2301      	movs	r3, #1
 802227a:	e7f0      	b.n	802225e <_vfiprintf_r+0x1da>
 802227c:	ab03      	add	r3, sp, #12
 802227e:	9300      	str	r3, [sp, #0]
 8022280:	462a      	mov	r2, r5
 8022282:	4b16      	ldr	r3, [pc, #88]	; (80222dc <_vfiprintf_r+0x258>)
 8022284:	a904      	add	r1, sp, #16
 8022286:	4630      	mov	r0, r6
 8022288:	f3af 8000 	nop.w
 802228c:	4607      	mov	r7, r0
 802228e:	1c78      	adds	r0, r7, #1
 8022290:	d1d6      	bne.n	8022240 <_vfiprintf_r+0x1bc>
 8022292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022294:	07d9      	lsls	r1, r3, #31
 8022296:	d405      	bmi.n	80222a4 <_vfiprintf_r+0x220>
 8022298:	89ab      	ldrh	r3, [r5, #12]
 802229a:	059a      	lsls	r2, r3, #22
 802229c:	d402      	bmi.n	80222a4 <_vfiprintf_r+0x220>
 802229e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80222a0:	f7ff fdbe 	bl	8021e20 <__retarget_lock_release_recursive>
 80222a4:	89ab      	ldrh	r3, [r5, #12]
 80222a6:	065b      	lsls	r3, r3, #25
 80222a8:	f53f af12 	bmi.w	80220d0 <_vfiprintf_r+0x4c>
 80222ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222ae:	e711      	b.n	80220d4 <_vfiprintf_r+0x50>
 80222b0:	ab03      	add	r3, sp, #12
 80222b2:	9300      	str	r3, [sp, #0]
 80222b4:	462a      	mov	r2, r5
 80222b6:	4b09      	ldr	r3, [pc, #36]	; (80222dc <_vfiprintf_r+0x258>)
 80222b8:	a904      	add	r1, sp, #16
 80222ba:	4630      	mov	r0, r6
 80222bc:	f000 f880 	bl	80223c0 <_printf_i>
 80222c0:	e7e4      	b.n	802228c <_vfiprintf_r+0x208>
 80222c2:	bf00      	nop
 80222c4:	2400af44 	.word	0x2400af44
 80222c8:	2400af64 	.word	0x2400af64
 80222cc:	2400af24 	.word	0x2400af24
 80222d0:	2400af88 	.word	0x2400af88
 80222d4:	2400af92 	.word	0x2400af92
 80222d8:	00000000 	.word	0x00000000
 80222dc:	0802205f 	.word	0x0802205f
 80222e0:	2400af8e 	.word	0x2400af8e

080222e4 <_printf_common>:
 80222e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222e8:	4616      	mov	r6, r2
 80222ea:	4699      	mov	r9, r3
 80222ec:	688a      	ldr	r2, [r1, #8]
 80222ee:	690b      	ldr	r3, [r1, #16]
 80222f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80222f4:	4293      	cmp	r3, r2
 80222f6:	bfb8      	it	lt
 80222f8:	4613      	movlt	r3, r2
 80222fa:	6033      	str	r3, [r6, #0]
 80222fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022300:	4607      	mov	r7, r0
 8022302:	460c      	mov	r4, r1
 8022304:	b10a      	cbz	r2, 802230a <_printf_common+0x26>
 8022306:	3301      	adds	r3, #1
 8022308:	6033      	str	r3, [r6, #0]
 802230a:	6823      	ldr	r3, [r4, #0]
 802230c:	0699      	lsls	r1, r3, #26
 802230e:	bf42      	ittt	mi
 8022310:	6833      	ldrmi	r3, [r6, #0]
 8022312:	3302      	addmi	r3, #2
 8022314:	6033      	strmi	r3, [r6, #0]
 8022316:	6825      	ldr	r5, [r4, #0]
 8022318:	f015 0506 	ands.w	r5, r5, #6
 802231c:	d106      	bne.n	802232c <_printf_common+0x48>
 802231e:	f104 0a19 	add.w	sl, r4, #25
 8022322:	68e3      	ldr	r3, [r4, #12]
 8022324:	6832      	ldr	r2, [r6, #0]
 8022326:	1a9b      	subs	r3, r3, r2
 8022328:	42ab      	cmp	r3, r5
 802232a:	dc26      	bgt.n	802237a <_printf_common+0x96>
 802232c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022330:	1e13      	subs	r3, r2, #0
 8022332:	6822      	ldr	r2, [r4, #0]
 8022334:	bf18      	it	ne
 8022336:	2301      	movne	r3, #1
 8022338:	0692      	lsls	r2, r2, #26
 802233a:	d42b      	bmi.n	8022394 <_printf_common+0xb0>
 802233c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022340:	4649      	mov	r1, r9
 8022342:	4638      	mov	r0, r7
 8022344:	47c0      	blx	r8
 8022346:	3001      	adds	r0, #1
 8022348:	d01e      	beq.n	8022388 <_printf_common+0xa4>
 802234a:	6823      	ldr	r3, [r4, #0]
 802234c:	68e5      	ldr	r5, [r4, #12]
 802234e:	6832      	ldr	r2, [r6, #0]
 8022350:	f003 0306 	and.w	r3, r3, #6
 8022354:	2b04      	cmp	r3, #4
 8022356:	bf08      	it	eq
 8022358:	1aad      	subeq	r5, r5, r2
 802235a:	68a3      	ldr	r3, [r4, #8]
 802235c:	6922      	ldr	r2, [r4, #16]
 802235e:	bf0c      	ite	eq
 8022360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022364:	2500      	movne	r5, #0
 8022366:	4293      	cmp	r3, r2
 8022368:	bfc4      	itt	gt
 802236a:	1a9b      	subgt	r3, r3, r2
 802236c:	18ed      	addgt	r5, r5, r3
 802236e:	2600      	movs	r6, #0
 8022370:	341a      	adds	r4, #26
 8022372:	42b5      	cmp	r5, r6
 8022374:	d11a      	bne.n	80223ac <_printf_common+0xc8>
 8022376:	2000      	movs	r0, #0
 8022378:	e008      	b.n	802238c <_printf_common+0xa8>
 802237a:	2301      	movs	r3, #1
 802237c:	4652      	mov	r2, sl
 802237e:	4649      	mov	r1, r9
 8022380:	4638      	mov	r0, r7
 8022382:	47c0      	blx	r8
 8022384:	3001      	adds	r0, #1
 8022386:	d103      	bne.n	8022390 <_printf_common+0xac>
 8022388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802238c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022390:	3501      	adds	r5, #1
 8022392:	e7c6      	b.n	8022322 <_printf_common+0x3e>
 8022394:	18e1      	adds	r1, r4, r3
 8022396:	1c5a      	adds	r2, r3, #1
 8022398:	2030      	movs	r0, #48	; 0x30
 802239a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802239e:	4422      	add	r2, r4
 80223a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80223a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80223a8:	3302      	adds	r3, #2
 80223aa:	e7c7      	b.n	802233c <_printf_common+0x58>
 80223ac:	2301      	movs	r3, #1
 80223ae:	4622      	mov	r2, r4
 80223b0:	4649      	mov	r1, r9
 80223b2:	4638      	mov	r0, r7
 80223b4:	47c0      	blx	r8
 80223b6:	3001      	adds	r0, #1
 80223b8:	d0e6      	beq.n	8022388 <_printf_common+0xa4>
 80223ba:	3601      	adds	r6, #1
 80223bc:	e7d9      	b.n	8022372 <_printf_common+0x8e>
	...

080223c0 <_printf_i>:
 80223c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80223c4:	7e0f      	ldrb	r7, [r1, #24]
 80223c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80223c8:	2f78      	cmp	r7, #120	; 0x78
 80223ca:	4691      	mov	r9, r2
 80223cc:	4680      	mov	r8, r0
 80223ce:	460c      	mov	r4, r1
 80223d0:	469a      	mov	sl, r3
 80223d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80223d6:	d807      	bhi.n	80223e8 <_printf_i+0x28>
 80223d8:	2f62      	cmp	r7, #98	; 0x62
 80223da:	d80a      	bhi.n	80223f2 <_printf_i+0x32>
 80223dc:	2f00      	cmp	r7, #0
 80223de:	f000 80d8 	beq.w	8022592 <_printf_i+0x1d2>
 80223e2:	2f58      	cmp	r7, #88	; 0x58
 80223e4:	f000 80a3 	beq.w	802252e <_printf_i+0x16e>
 80223e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80223ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80223f0:	e03a      	b.n	8022468 <_printf_i+0xa8>
 80223f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80223f6:	2b15      	cmp	r3, #21
 80223f8:	d8f6      	bhi.n	80223e8 <_printf_i+0x28>
 80223fa:	a101      	add	r1, pc, #4	; (adr r1, 8022400 <_printf_i+0x40>)
 80223fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022400:	08022459 	.word	0x08022459
 8022404:	0802246d 	.word	0x0802246d
 8022408:	080223e9 	.word	0x080223e9
 802240c:	080223e9 	.word	0x080223e9
 8022410:	080223e9 	.word	0x080223e9
 8022414:	080223e9 	.word	0x080223e9
 8022418:	0802246d 	.word	0x0802246d
 802241c:	080223e9 	.word	0x080223e9
 8022420:	080223e9 	.word	0x080223e9
 8022424:	080223e9 	.word	0x080223e9
 8022428:	080223e9 	.word	0x080223e9
 802242c:	08022579 	.word	0x08022579
 8022430:	0802249d 	.word	0x0802249d
 8022434:	0802255b 	.word	0x0802255b
 8022438:	080223e9 	.word	0x080223e9
 802243c:	080223e9 	.word	0x080223e9
 8022440:	0802259b 	.word	0x0802259b
 8022444:	080223e9 	.word	0x080223e9
 8022448:	0802249d 	.word	0x0802249d
 802244c:	080223e9 	.word	0x080223e9
 8022450:	080223e9 	.word	0x080223e9
 8022454:	08022563 	.word	0x08022563
 8022458:	682b      	ldr	r3, [r5, #0]
 802245a:	1d1a      	adds	r2, r3, #4
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	602a      	str	r2, [r5, #0]
 8022460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022468:	2301      	movs	r3, #1
 802246a:	e0a3      	b.n	80225b4 <_printf_i+0x1f4>
 802246c:	6820      	ldr	r0, [r4, #0]
 802246e:	6829      	ldr	r1, [r5, #0]
 8022470:	0606      	lsls	r6, r0, #24
 8022472:	f101 0304 	add.w	r3, r1, #4
 8022476:	d50a      	bpl.n	802248e <_printf_i+0xce>
 8022478:	680e      	ldr	r6, [r1, #0]
 802247a:	602b      	str	r3, [r5, #0]
 802247c:	2e00      	cmp	r6, #0
 802247e:	da03      	bge.n	8022488 <_printf_i+0xc8>
 8022480:	232d      	movs	r3, #45	; 0x2d
 8022482:	4276      	negs	r6, r6
 8022484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022488:	485e      	ldr	r0, [pc, #376]	; (8022604 <_printf_i+0x244>)
 802248a:	230a      	movs	r3, #10
 802248c:	e019      	b.n	80224c2 <_printf_i+0x102>
 802248e:	680e      	ldr	r6, [r1, #0]
 8022490:	602b      	str	r3, [r5, #0]
 8022492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022496:	bf18      	it	ne
 8022498:	b236      	sxthne	r6, r6
 802249a:	e7ef      	b.n	802247c <_printf_i+0xbc>
 802249c:	682b      	ldr	r3, [r5, #0]
 802249e:	6820      	ldr	r0, [r4, #0]
 80224a0:	1d19      	adds	r1, r3, #4
 80224a2:	6029      	str	r1, [r5, #0]
 80224a4:	0601      	lsls	r1, r0, #24
 80224a6:	d501      	bpl.n	80224ac <_printf_i+0xec>
 80224a8:	681e      	ldr	r6, [r3, #0]
 80224aa:	e002      	b.n	80224b2 <_printf_i+0xf2>
 80224ac:	0646      	lsls	r6, r0, #25
 80224ae:	d5fb      	bpl.n	80224a8 <_printf_i+0xe8>
 80224b0:	881e      	ldrh	r6, [r3, #0]
 80224b2:	4854      	ldr	r0, [pc, #336]	; (8022604 <_printf_i+0x244>)
 80224b4:	2f6f      	cmp	r7, #111	; 0x6f
 80224b6:	bf0c      	ite	eq
 80224b8:	2308      	moveq	r3, #8
 80224ba:	230a      	movne	r3, #10
 80224bc:	2100      	movs	r1, #0
 80224be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80224c2:	6865      	ldr	r5, [r4, #4]
 80224c4:	60a5      	str	r5, [r4, #8]
 80224c6:	2d00      	cmp	r5, #0
 80224c8:	bfa2      	ittt	ge
 80224ca:	6821      	ldrge	r1, [r4, #0]
 80224cc:	f021 0104 	bicge.w	r1, r1, #4
 80224d0:	6021      	strge	r1, [r4, #0]
 80224d2:	b90e      	cbnz	r6, 80224d8 <_printf_i+0x118>
 80224d4:	2d00      	cmp	r5, #0
 80224d6:	d04d      	beq.n	8022574 <_printf_i+0x1b4>
 80224d8:	4615      	mov	r5, r2
 80224da:	fbb6 f1f3 	udiv	r1, r6, r3
 80224de:	fb03 6711 	mls	r7, r3, r1, r6
 80224e2:	5dc7      	ldrb	r7, [r0, r7]
 80224e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80224e8:	4637      	mov	r7, r6
 80224ea:	42bb      	cmp	r3, r7
 80224ec:	460e      	mov	r6, r1
 80224ee:	d9f4      	bls.n	80224da <_printf_i+0x11a>
 80224f0:	2b08      	cmp	r3, #8
 80224f2:	d10b      	bne.n	802250c <_printf_i+0x14c>
 80224f4:	6823      	ldr	r3, [r4, #0]
 80224f6:	07de      	lsls	r6, r3, #31
 80224f8:	d508      	bpl.n	802250c <_printf_i+0x14c>
 80224fa:	6923      	ldr	r3, [r4, #16]
 80224fc:	6861      	ldr	r1, [r4, #4]
 80224fe:	4299      	cmp	r1, r3
 8022500:	bfde      	ittt	le
 8022502:	2330      	movle	r3, #48	; 0x30
 8022504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022508:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802250c:	1b52      	subs	r2, r2, r5
 802250e:	6122      	str	r2, [r4, #16]
 8022510:	f8cd a000 	str.w	sl, [sp]
 8022514:	464b      	mov	r3, r9
 8022516:	aa03      	add	r2, sp, #12
 8022518:	4621      	mov	r1, r4
 802251a:	4640      	mov	r0, r8
 802251c:	f7ff fee2 	bl	80222e4 <_printf_common>
 8022520:	3001      	adds	r0, #1
 8022522:	d14c      	bne.n	80225be <_printf_i+0x1fe>
 8022524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022528:	b004      	add	sp, #16
 802252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802252e:	4835      	ldr	r0, [pc, #212]	; (8022604 <_printf_i+0x244>)
 8022530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022534:	6829      	ldr	r1, [r5, #0]
 8022536:	6823      	ldr	r3, [r4, #0]
 8022538:	f851 6b04 	ldr.w	r6, [r1], #4
 802253c:	6029      	str	r1, [r5, #0]
 802253e:	061d      	lsls	r5, r3, #24
 8022540:	d514      	bpl.n	802256c <_printf_i+0x1ac>
 8022542:	07df      	lsls	r7, r3, #31
 8022544:	bf44      	itt	mi
 8022546:	f043 0320 	orrmi.w	r3, r3, #32
 802254a:	6023      	strmi	r3, [r4, #0]
 802254c:	b91e      	cbnz	r6, 8022556 <_printf_i+0x196>
 802254e:	6823      	ldr	r3, [r4, #0]
 8022550:	f023 0320 	bic.w	r3, r3, #32
 8022554:	6023      	str	r3, [r4, #0]
 8022556:	2310      	movs	r3, #16
 8022558:	e7b0      	b.n	80224bc <_printf_i+0xfc>
 802255a:	6823      	ldr	r3, [r4, #0]
 802255c:	f043 0320 	orr.w	r3, r3, #32
 8022560:	6023      	str	r3, [r4, #0]
 8022562:	2378      	movs	r3, #120	; 0x78
 8022564:	4828      	ldr	r0, [pc, #160]	; (8022608 <_printf_i+0x248>)
 8022566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802256a:	e7e3      	b.n	8022534 <_printf_i+0x174>
 802256c:	0659      	lsls	r1, r3, #25
 802256e:	bf48      	it	mi
 8022570:	b2b6      	uxthmi	r6, r6
 8022572:	e7e6      	b.n	8022542 <_printf_i+0x182>
 8022574:	4615      	mov	r5, r2
 8022576:	e7bb      	b.n	80224f0 <_printf_i+0x130>
 8022578:	682b      	ldr	r3, [r5, #0]
 802257a:	6826      	ldr	r6, [r4, #0]
 802257c:	6961      	ldr	r1, [r4, #20]
 802257e:	1d18      	adds	r0, r3, #4
 8022580:	6028      	str	r0, [r5, #0]
 8022582:	0635      	lsls	r5, r6, #24
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	d501      	bpl.n	802258c <_printf_i+0x1cc>
 8022588:	6019      	str	r1, [r3, #0]
 802258a:	e002      	b.n	8022592 <_printf_i+0x1d2>
 802258c:	0670      	lsls	r0, r6, #25
 802258e:	d5fb      	bpl.n	8022588 <_printf_i+0x1c8>
 8022590:	8019      	strh	r1, [r3, #0]
 8022592:	2300      	movs	r3, #0
 8022594:	6123      	str	r3, [r4, #16]
 8022596:	4615      	mov	r5, r2
 8022598:	e7ba      	b.n	8022510 <_printf_i+0x150>
 802259a:	682b      	ldr	r3, [r5, #0]
 802259c:	1d1a      	adds	r2, r3, #4
 802259e:	602a      	str	r2, [r5, #0]
 80225a0:	681d      	ldr	r5, [r3, #0]
 80225a2:	6862      	ldr	r2, [r4, #4]
 80225a4:	2100      	movs	r1, #0
 80225a6:	4628      	mov	r0, r5
 80225a8:	f7e6 fd62 	bl	8009070 <memchr>
 80225ac:	b108      	cbz	r0, 80225b2 <_printf_i+0x1f2>
 80225ae:	1b40      	subs	r0, r0, r5
 80225b0:	6060      	str	r0, [r4, #4]
 80225b2:	6863      	ldr	r3, [r4, #4]
 80225b4:	6123      	str	r3, [r4, #16]
 80225b6:	2300      	movs	r3, #0
 80225b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225bc:	e7a8      	b.n	8022510 <_printf_i+0x150>
 80225be:	6923      	ldr	r3, [r4, #16]
 80225c0:	462a      	mov	r2, r5
 80225c2:	4649      	mov	r1, r9
 80225c4:	4640      	mov	r0, r8
 80225c6:	47d0      	blx	sl
 80225c8:	3001      	adds	r0, #1
 80225ca:	d0ab      	beq.n	8022524 <_printf_i+0x164>
 80225cc:	6823      	ldr	r3, [r4, #0]
 80225ce:	079b      	lsls	r3, r3, #30
 80225d0:	d413      	bmi.n	80225fa <_printf_i+0x23a>
 80225d2:	68e0      	ldr	r0, [r4, #12]
 80225d4:	9b03      	ldr	r3, [sp, #12]
 80225d6:	4298      	cmp	r0, r3
 80225d8:	bfb8      	it	lt
 80225da:	4618      	movlt	r0, r3
 80225dc:	e7a4      	b.n	8022528 <_printf_i+0x168>
 80225de:	2301      	movs	r3, #1
 80225e0:	4632      	mov	r2, r6
 80225e2:	4649      	mov	r1, r9
 80225e4:	4640      	mov	r0, r8
 80225e6:	47d0      	blx	sl
 80225e8:	3001      	adds	r0, #1
 80225ea:	d09b      	beq.n	8022524 <_printf_i+0x164>
 80225ec:	3501      	adds	r5, #1
 80225ee:	68e3      	ldr	r3, [r4, #12]
 80225f0:	9903      	ldr	r1, [sp, #12]
 80225f2:	1a5b      	subs	r3, r3, r1
 80225f4:	42ab      	cmp	r3, r5
 80225f6:	dcf2      	bgt.n	80225de <_printf_i+0x21e>
 80225f8:	e7eb      	b.n	80225d2 <_printf_i+0x212>
 80225fa:	2500      	movs	r5, #0
 80225fc:	f104 0619 	add.w	r6, r4, #25
 8022600:	e7f5      	b.n	80225ee <_printf_i+0x22e>
 8022602:	bf00      	nop
 8022604:	2400af99 	.word	0x2400af99
 8022608:	2400afaa 	.word	0x2400afaa

0802260c <iprintf>:
 802260c:	b40f      	push	{r0, r1, r2, r3}
 802260e:	4b0a      	ldr	r3, [pc, #40]	; (8022638 <iprintf+0x2c>)
 8022610:	b513      	push	{r0, r1, r4, lr}
 8022612:	681c      	ldr	r4, [r3, #0]
 8022614:	b124      	cbz	r4, 8022620 <iprintf+0x14>
 8022616:	69a3      	ldr	r3, [r4, #24]
 8022618:	b913      	cbnz	r3, 8022620 <iprintf+0x14>
 802261a:	4620      	mov	r0, r4
 802261c:	f7ff fb2a 	bl	8021c74 <__sinit>
 8022620:	ab05      	add	r3, sp, #20
 8022622:	9a04      	ldr	r2, [sp, #16]
 8022624:	68a1      	ldr	r1, [r4, #8]
 8022626:	9301      	str	r3, [sp, #4]
 8022628:	4620      	mov	r0, r4
 802262a:	f7ff fd2b 	bl	8022084 <_vfiprintf_r>
 802262e:	b002      	add	sp, #8
 8022630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022634:	b004      	add	sp, #16
 8022636:	4770      	bx	lr
 8022638:	24009074 	.word	0x24009074

0802263c <_putc_r>:
 802263c:	b570      	push	{r4, r5, r6, lr}
 802263e:	460d      	mov	r5, r1
 8022640:	4614      	mov	r4, r2
 8022642:	4606      	mov	r6, r0
 8022644:	b118      	cbz	r0, 802264e <_putc_r+0x12>
 8022646:	6983      	ldr	r3, [r0, #24]
 8022648:	b90b      	cbnz	r3, 802264e <_putc_r+0x12>
 802264a:	f7ff fb13 	bl	8021c74 <__sinit>
 802264e:	4b1c      	ldr	r3, [pc, #112]	; (80226c0 <_putc_r+0x84>)
 8022650:	429c      	cmp	r4, r3
 8022652:	d124      	bne.n	802269e <_putc_r+0x62>
 8022654:	6874      	ldr	r4, [r6, #4]
 8022656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022658:	07d8      	lsls	r0, r3, #31
 802265a:	d405      	bmi.n	8022668 <_putc_r+0x2c>
 802265c:	89a3      	ldrh	r3, [r4, #12]
 802265e:	0599      	lsls	r1, r3, #22
 8022660:	d402      	bmi.n	8022668 <_putc_r+0x2c>
 8022662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022664:	f7ff fbdb 	bl	8021e1e <__retarget_lock_acquire_recursive>
 8022668:	68a3      	ldr	r3, [r4, #8]
 802266a:	3b01      	subs	r3, #1
 802266c:	2b00      	cmp	r3, #0
 802266e:	60a3      	str	r3, [r4, #8]
 8022670:	da05      	bge.n	802267e <_putc_r+0x42>
 8022672:	69a2      	ldr	r2, [r4, #24]
 8022674:	4293      	cmp	r3, r2
 8022676:	db1c      	blt.n	80226b2 <_putc_r+0x76>
 8022678:	b2eb      	uxtb	r3, r5
 802267a:	2b0a      	cmp	r3, #10
 802267c:	d019      	beq.n	80226b2 <_putc_r+0x76>
 802267e:	6823      	ldr	r3, [r4, #0]
 8022680:	1c5a      	adds	r2, r3, #1
 8022682:	6022      	str	r2, [r4, #0]
 8022684:	701d      	strb	r5, [r3, #0]
 8022686:	b2ed      	uxtb	r5, r5
 8022688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802268a:	07da      	lsls	r2, r3, #31
 802268c:	d405      	bmi.n	802269a <_putc_r+0x5e>
 802268e:	89a3      	ldrh	r3, [r4, #12]
 8022690:	059b      	lsls	r3, r3, #22
 8022692:	d402      	bmi.n	802269a <_putc_r+0x5e>
 8022694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022696:	f7ff fbc3 	bl	8021e20 <__retarget_lock_release_recursive>
 802269a:	4628      	mov	r0, r5
 802269c:	bd70      	pop	{r4, r5, r6, pc}
 802269e:	4b09      	ldr	r3, [pc, #36]	; (80226c4 <_putc_r+0x88>)
 80226a0:	429c      	cmp	r4, r3
 80226a2:	d101      	bne.n	80226a8 <_putc_r+0x6c>
 80226a4:	68b4      	ldr	r4, [r6, #8]
 80226a6:	e7d6      	b.n	8022656 <_putc_r+0x1a>
 80226a8:	4b07      	ldr	r3, [pc, #28]	; (80226c8 <_putc_r+0x8c>)
 80226aa:	429c      	cmp	r4, r3
 80226ac:	bf08      	it	eq
 80226ae:	68f4      	ldreq	r4, [r6, #12]
 80226b0:	e7d1      	b.n	8022656 <_putc_r+0x1a>
 80226b2:	4629      	mov	r1, r5
 80226b4:	4622      	mov	r2, r4
 80226b6:	4630      	mov	r0, r6
 80226b8:	f000 f9a0 	bl	80229fc <__swbuf_r>
 80226bc:	4605      	mov	r5, r0
 80226be:	e7e3      	b.n	8022688 <_putc_r+0x4c>
 80226c0:	2400af44 	.word	0x2400af44
 80226c4:	2400af64 	.word	0x2400af64
 80226c8:	2400af24 	.word	0x2400af24

080226cc <putc>:
 80226cc:	4b02      	ldr	r3, [pc, #8]	; (80226d8 <putc+0xc>)
 80226ce:	460a      	mov	r2, r1
 80226d0:	4601      	mov	r1, r0
 80226d2:	6818      	ldr	r0, [r3, #0]
 80226d4:	f7ff bfb2 	b.w	802263c <_putc_r>
 80226d8:	24009074 	.word	0x24009074

080226dc <putchar>:
 80226dc:	4b09      	ldr	r3, [pc, #36]	; (8022704 <putchar+0x28>)
 80226de:	b513      	push	{r0, r1, r4, lr}
 80226e0:	681c      	ldr	r4, [r3, #0]
 80226e2:	4601      	mov	r1, r0
 80226e4:	b134      	cbz	r4, 80226f4 <putchar+0x18>
 80226e6:	69a3      	ldr	r3, [r4, #24]
 80226e8:	b923      	cbnz	r3, 80226f4 <putchar+0x18>
 80226ea:	9001      	str	r0, [sp, #4]
 80226ec:	4620      	mov	r0, r4
 80226ee:	f7ff fac1 	bl	8021c74 <__sinit>
 80226f2:	9901      	ldr	r1, [sp, #4]
 80226f4:	68a2      	ldr	r2, [r4, #8]
 80226f6:	4620      	mov	r0, r4
 80226f8:	b002      	add	sp, #8
 80226fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226fe:	f7ff bf9d 	b.w	802263c <_putc_r>
 8022702:	bf00      	nop
 8022704:	24009074 	.word	0x24009074

08022708 <_puts_r>:
 8022708:	b570      	push	{r4, r5, r6, lr}
 802270a:	460e      	mov	r6, r1
 802270c:	4605      	mov	r5, r0
 802270e:	b118      	cbz	r0, 8022718 <_puts_r+0x10>
 8022710:	6983      	ldr	r3, [r0, #24]
 8022712:	b90b      	cbnz	r3, 8022718 <_puts_r+0x10>
 8022714:	f7ff faae 	bl	8021c74 <__sinit>
 8022718:	69ab      	ldr	r3, [r5, #24]
 802271a:	68ac      	ldr	r4, [r5, #8]
 802271c:	b913      	cbnz	r3, 8022724 <_puts_r+0x1c>
 802271e:	4628      	mov	r0, r5
 8022720:	f7ff faa8 	bl	8021c74 <__sinit>
 8022724:	4b2c      	ldr	r3, [pc, #176]	; (80227d8 <_puts_r+0xd0>)
 8022726:	429c      	cmp	r4, r3
 8022728:	d120      	bne.n	802276c <_puts_r+0x64>
 802272a:	686c      	ldr	r4, [r5, #4]
 802272c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802272e:	07db      	lsls	r3, r3, #31
 8022730:	d405      	bmi.n	802273e <_puts_r+0x36>
 8022732:	89a3      	ldrh	r3, [r4, #12]
 8022734:	0598      	lsls	r0, r3, #22
 8022736:	d402      	bmi.n	802273e <_puts_r+0x36>
 8022738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802273a:	f7ff fb70 	bl	8021e1e <__retarget_lock_acquire_recursive>
 802273e:	89a3      	ldrh	r3, [r4, #12]
 8022740:	0719      	lsls	r1, r3, #28
 8022742:	d51d      	bpl.n	8022780 <_puts_r+0x78>
 8022744:	6923      	ldr	r3, [r4, #16]
 8022746:	b1db      	cbz	r3, 8022780 <_puts_r+0x78>
 8022748:	3e01      	subs	r6, #1
 802274a:	68a3      	ldr	r3, [r4, #8]
 802274c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022750:	3b01      	subs	r3, #1
 8022752:	60a3      	str	r3, [r4, #8]
 8022754:	bb39      	cbnz	r1, 80227a6 <_puts_r+0x9e>
 8022756:	2b00      	cmp	r3, #0
 8022758:	da38      	bge.n	80227cc <_puts_r+0xc4>
 802275a:	4622      	mov	r2, r4
 802275c:	210a      	movs	r1, #10
 802275e:	4628      	mov	r0, r5
 8022760:	f000 f94c 	bl	80229fc <__swbuf_r>
 8022764:	3001      	adds	r0, #1
 8022766:	d011      	beq.n	802278c <_puts_r+0x84>
 8022768:	250a      	movs	r5, #10
 802276a:	e011      	b.n	8022790 <_puts_r+0x88>
 802276c:	4b1b      	ldr	r3, [pc, #108]	; (80227dc <_puts_r+0xd4>)
 802276e:	429c      	cmp	r4, r3
 8022770:	d101      	bne.n	8022776 <_puts_r+0x6e>
 8022772:	68ac      	ldr	r4, [r5, #8]
 8022774:	e7da      	b.n	802272c <_puts_r+0x24>
 8022776:	4b1a      	ldr	r3, [pc, #104]	; (80227e0 <_puts_r+0xd8>)
 8022778:	429c      	cmp	r4, r3
 802277a:	bf08      	it	eq
 802277c:	68ec      	ldreq	r4, [r5, #12]
 802277e:	e7d5      	b.n	802272c <_puts_r+0x24>
 8022780:	4621      	mov	r1, r4
 8022782:	4628      	mov	r0, r5
 8022784:	f000 f99e 	bl	8022ac4 <__swsetup_r>
 8022788:	2800      	cmp	r0, #0
 802278a:	d0dd      	beq.n	8022748 <_puts_r+0x40>
 802278c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8022790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022792:	07da      	lsls	r2, r3, #31
 8022794:	d405      	bmi.n	80227a2 <_puts_r+0x9a>
 8022796:	89a3      	ldrh	r3, [r4, #12]
 8022798:	059b      	lsls	r3, r3, #22
 802279a:	d402      	bmi.n	80227a2 <_puts_r+0x9a>
 802279c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802279e:	f7ff fb3f 	bl	8021e20 <__retarget_lock_release_recursive>
 80227a2:	4628      	mov	r0, r5
 80227a4:	bd70      	pop	{r4, r5, r6, pc}
 80227a6:	2b00      	cmp	r3, #0
 80227a8:	da04      	bge.n	80227b4 <_puts_r+0xac>
 80227aa:	69a2      	ldr	r2, [r4, #24]
 80227ac:	429a      	cmp	r2, r3
 80227ae:	dc06      	bgt.n	80227be <_puts_r+0xb6>
 80227b0:	290a      	cmp	r1, #10
 80227b2:	d004      	beq.n	80227be <_puts_r+0xb6>
 80227b4:	6823      	ldr	r3, [r4, #0]
 80227b6:	1c5a      	adds	r2, r3, #1
 80227b8:	6022      	str	r2, [r4, #0]
 80227ba:	7019      	strb	r1, [r3, #0]
 80227bc:	e7c5      	b.n	802274a <_puts_r+0x42>
 80227be:	4622      	mov	r2, r4
 80227c0:	4628      	mov	r0, r5
 80227c2:	f000 f91b 	bl	80229fc <__swbuf_r>
 80227c6:	3001      	adds	r0, #1
 80227c8:	d1bf      	bne.n	802274a <_puts_r+0x42>
 80227ca:	e7df      	b.n	802278c <_puts_r+0x84>
 80227cc:	6823      	ldr	r3, [r4, #0]
 80227ce:	250a      	movs	r5, #10
 80227d0:	1c5a      	adds	r2, r3, #1
 80227d2:	6022      	str	r2, [r4, #0]
 80227d4:	701d      	strb	r5, [r3, #0]
 80227d6:	e7db      	b.n	8022790 <_puts_r+0x88>
 80227d8:	2400af44 	.word	0x2400af44
 80227dc:	2400af64 	.word	0x2400af64
 80227e0:	2400af24 	.word	0x2400af24

080227e4 <puts>:
 80227e4:	4b02      	ldr	r3, [pc, #8]	; (80227f0 <puts+0xc>)
 80227e6:	4601      	mov	r1, r0
 80227e8:	6818      	ldr	r0, [r3, #0]
 80227ea:	f7ff bf8d 	b.w	8022708 <_puts_r>
 80227ee:	bf00      	nop
 80227f0:	24009074 	.word	0x24009074

080227f4 <cleanup_glue>:
 80227f4:	b538      	push	{r3, r4, r5, lr}
 80227f6:	460c      	mov	r4, r1
 80227f8:	6809      	ldr	r1, [r1, #0]
 80227fa:	4605      	mov	r5, r0
 80227fc:	b109      	cbz	r1, 8022802 <cleanup_glue+0xe>
 80227fe:	f7ff fff9 	bl	80227f4 <cleanup_glue>
 8022802:	4621      	mov	r1, r4
 8022804:	4628      	mov	r0, r5
 8022806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802280a:	f7ff bb31 	b.w	8021e70 <_free_r>
	...

08022810 <_reclaim_reent>:
 8022810:	4b2c      	ldr	r3, [pc, #176]	; (80228c4 <_reclaim_reent+0xb4>)
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	4283      	cmp	r3, r0
 8022816:	b570      	push	{r4, r5, r6, lr}
 8022818:	4604      	mov	r4, r0
 802281a:	d051      	beq.n	80228c0 <_reclaim_reent+0xb0>
 802281c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802281e:	b143      	cbz	r3, 8022832 <_reclaim_reent+0x22>
 8022820:	68db      	ldr	r3, [r3, #12]
 8022822:	2b00      	cmp	r3, #0
 8022824:	d14a      	bne.n	80228bc <_reclaim_reent+0xac>
 8022826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022828:	6819      	ldr	r1, [r3, #0]
 802282a:	b111      	cbz	r1, 8022832 <_reclaim_reent+0x22>
 802282c:	4620      	mov	r0, r4
 802282e:	f7ff fb1f 	bl	8021e70 <_free_r>
 8022832:	6961      	ldr	r1, [r4, #20]
 8022834:	b111      	cbz	r1, 802283c <_reclaim_reent+0x2c>
 8022836:	4620      	mov	r0, r4
 8022838:	f7ff fb1a 	bl	8021e70 <_free_r>
 802283c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802283e:	b111      	cbz	r1, 8022846 <_reclaim_reent+0x36>
 8022840:	4620      	mov	r0, r4
 8022842:	f7ff fb15 	bl	8021e70 <_free_r>
 8022846:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022848:	b111      	cbz	r1, 8022850 <_reclaim_reent+0x40>
 802284a:	4620      	mov	r0, r4
 802284c:	f7ff fb10 	bl	8021e70 <_free_r>
 8022850:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8022852:	b111      	cbz	r1, 802285a <_reclaim_reent+0x4a>
 8022854:	4620      	mov	r0, r4
 8022856:	f7ff fb0b 	bl	8021e70 <_free_r>
 802285a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802285c:	b111      	cbz	r1, 8022864 <_reclaim_reent+0x54>
 802285e:	4620      	mov	r0, r4
 8022860:	f7ff fb06 	bl	8021e70 <_free_r>
 8022864:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8022866:	b111      	cbz	r1, 802286e <_reclaim_reent+0x5e>
 8022868:	4620      	mov	r0, r4
 802286a:	f7ff fb01 	bl	8021e70 <_free_r>
 802286e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8022870:	b111      	cbz	r1, 8022878 <_reclaim_reent+0x68>
 8022872:	4620      	mov	r0, r4
 8022874:	f7ff fafc 	bl	8021e70 <_free_r>
 8022878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802287a:	b111      	cbz	r1, 8022882 <_reclaim_reent+0x72>
 802287c:	4620      	mov	r0, r4
 802287e:	f7ff faf7 	bl	8021e70 <_free_r>
 8022882:	69a3      	ldr	r3, [r4, #24]
 8022884:	b1e3      	cbz	r3, 80228c0 <_reclaim_reent+0xb0>
 8022886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022888:	4620      	mov	r0, r4
 802288a:	4798      	blx	r3
 802288c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802288e:	b1b9      	cbz	r1, 80228c0 <_reclaim_reent+0xb0>
 8022890:	4620      	mov	r0, r4
 8022892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022896:	f7ff bfad 	b.w	80227f4 <cleanup_glue>
 802289a:	5949      	ldr	r1, [r1, r5]
 802289c:	b941      	cbnz	r1, 80228b0 <_reclaim_reent+0xa0>
 802289e:	3504      	adds	r5, #4
 80228a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80228a2:	2d80      	cmp	r5, #128	; 0x80
 80228a4:	68d9      	ldr	r1, [r3, #12]
 80228a6:	d1f8      	bne.n	802289a <_reclaim_reent+0x8a>
 80228a8:	4620      	mov	r0, r4
 80228aa:	f7ff fae1 	bl	8021e70 <_free_r>
 80228ae:	e7ba      	b.n	8022826 <_reclaim_reent+0x16>
 80228b0:	680e      	ldr	r6, [r1, #0]
 80228b2:	4620      	mov	r0, r4
 80228b4:	f7ff fadc 	bl	8021e70 <_free_r>
 80228b8:	4631      	mov	r1, r6
 80228ba:	e7ef      	b.n	802289c <_reclaim_reent+0x8c>
 80228bc:	2500      	movs	r5, #0
 80228be:	e7ef      	b.n	80228a0 <_reclaim_reent+0x90>
 80228c0:	bd70      	pop	{r4, r5, r6, pc}
 80228c2:	bf00      	nop
 80228c4:	24009074 	.word	0x24009074

080228c8 <_sbrk_r>:
 80228c8:	b538      	push	{r3, r4, r5, lr}
 80228ca:	4d06      	ldr	r5, [pc, #24]	; (80228e4 <_sbrk_r+0x1c>)
 80228cc:	2300      	movs	r3, #0
 80228ce:	4604      	mov	r4, r0
 80228d0:	4608      	mov	r0, r1
 80228d2:	602b      	str	r3, [r5, #0]
 80228d4:	f7e8 f880 	bl	800a9d8 <_sbrk>
 80228d8:	1c43      	adds	r3, r0, #1
 80228da:	d102      	bne.n	80228e2 <_sbrk_r+0x1a>
 80228dc:	682b      	ldr	r3, [r5, #0]
 80228de:	b103      	cbz	r3, 80228e2 <_sbrk_r+0x1a>
 80228e0:	6023      	str	r3, [r4, #0]
 80228e2:	bd38      	pop	{r3, r4, r5, pc}
 80228e4:	24034b0c 	.word	0x24034b0c

080228e8 <sniprintf>:
 80228e8:	b40c      	push	{r2, r3}
 80228ea:	b530      	push	{r4, r5, lr}
 80228ec:	4b17      	ldr	r3, [pc, #92]	; (802294c <sniprintf+0x64>)
 80228ee:	1e0c      	subs	r4, r1, #0
 80228f0:	681d      	ldr	r5, [r3, #0]
 80228f2:	b09d      	sub	sp, #116	; 0x74
 80228f4:	da08      	bge.n	8022908 <sniprintf+0x20>
 80228f6:	238b      	movs	r3, #139	; 0x8b
 80228f8:	602b      	str	r3, [r5, #0]
 80228fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80228fe:	b01d      	add	sp, #116	; 0x74
 8022900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022904:	b002      	add	sp, #8
 8022906:	4770      	bx	lr
 8022908:	f44f 7302 	mov.w	r3, #520	; 0x208
 802290c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022910:	bf14      	ite	ne
 8022912:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8022916:	4623      	moveq	r3, r4
 8022918:	9304      	str	r3, [sp, #16]
 802291a:	9307      	str	r3, [sp, #28]
 802291c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022920:	9002      	str	r0, [sp, #8]
 8022922:	9006      	str	r0, [sp, #24]
 8022924:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802292a:	ab21      	add	r3, sp, #132	; 0x84
 802292c:	a902      	add	r1, sp, #8
 802292e:	4628      	mov	r0, r5
 8022930:	9301      	str	r3, [sp, #4]
 8022932:	f000 fb37 	bl	8022fa4 <_svfiprintf_r>
 8022936:	1c43      	adds	r3, r0, #1
 8022938:	bfbc      	itt	lt
 802293a:	238b      	movlt	r3, #139	; 0x8b
 802293c:	602b      	strlt	r3, [r5, #0]
 802293e:	2c00      	cmp	r4, #0
 8022940:	d0dd      	beq.n	80228fe <sniprintf+0x16>
 8022942:	9b02      	ldr	r3, [sp, #8]
 8022944:	2200      	movs	r2, #0
 8022946:	701a      	strb	r2, [r3, #0]
 8022948:	e7d9      	b.n	80228fe <sniprintf+0x16>
 802294a:	bf00      	nop
 802294c:	24009074 	.word	0x24009074

08022950 <__sread>:
 8022950:	b510      	push	{r4, lr}
 8022952:	460c      	mov	r4, r1
 8022954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022958:	f000 fc24 	bl	80231a4 <_read_r>
 802295c:	2800      	cmp	r0, #0
 802295e:	bfab      	itete	ge
 8022960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022962:	89a3      	ldrhlt	r3, [r4, #12]
 8022964:	181b      	addge	r3, r3, r0
 8022966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802296a:	bfac      	ite	ge
 802296c:	6563      	strge	r3, [r4, #84]	; 0x54
 802296e:	81a3      	strhlt	r3, [r4, #12]
 8022970:	bd10      	pop	{r4, pc}

08022972 <__swrite>:
 8022972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022976:	461f      	mov	r7, r3
 8022978:	898b      	ldrh	r3, [r1, #12]
 802297a:	05db      	lsls	r3, r3, #23
 802297c:	4605      	mov	r5, r0
 802297e:	460c      	mov	r4, r1
 8022980:	4616      	mov	r6, r2
 8022982:	d505      	bpl.n	8022990 <__swrite+0x1e>
 8022984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022988:	2302      	movs	r3, #2
 802298a:	2200      	movs	r2, #0
 802298c:	f000 f9e2 	bl	8022d54 <_lseek_r>
 8022990:	89a3      	ldrh	r3, [r4, #12]
 8022992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802299a:	81a3      	strh	r3, [r4, #12]
 802299c:	4632      	mov	r2, r6
 802299e:	463b      	mov	r3, r7
 80229a0:	4628      	mov	r0, r5
 80229a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80229a6:	f000 b87b 	b.w	8022aa0 <_write_r>

080229aa <__sseek>:
 80229aa:	b510      	push	{r4, lr}
 80229ac:	460c      	mov	r4, r1
 80229ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80229b2:	f000 f9cf 	bl	8022d54 <_lseek_r>
 80229b6:	1c43      	adds	r3, r0, #1
 80229b8:	89a3      	ldrh	r3, [r4, #12]
 80229ba:	bf15      	itete	ne
 80229bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80229be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80229c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80229c6:	81a3      	strheq	r3, [r4, #12]
 80229c8:	bf18      	it	ne
 80229ca:	81a3      	strhne	r3, [r4, #12]
 80229cc:	bd10      	pop	{r4, pc}

080229ce <__sclose>:
 80229ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80229d2:	f000 b8ed 	b.w	8022bb0 <_close_r>

080229d6 <strncpy>:
 80229d6:	b510      	push	{r4, lr}
 80229d8:	3901      	subs	r1, #1
 80229da:	4603      	mov	r3, r0
 80229dc:	b132      	cbz	r2, 80229ec <strncpy+0x16>
 80229de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80229e2:	f803 4b01 	strb.w	r4, [r3], #1
 80229e6:	3a01      	subs	r2, #1
 80229e8:	2c00      	cmp	r4, #0
 80229ea:	d1f7      	bne.n	80229dc <strncpy+0x6>
 80229ec:	441a      	add	r2, r3
 80229ee:	2100      	movs	r1, #0
 80229f0:	4293      	cmp	r3, r2
 80229f2:	d100      	bne.n	80229f6 <strncpy+0x20>
 80229f4:	bd10      	pop	{r4, pc}
 80229f6:	f803 1b01 	strb.w	r1, [r3], #1
 80229fa:	e7f9      	b.n	80229f0 <strncpy+0x1a>

080229fc <__swbuf_r>:
 80229fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229fe:	460e      	mov	r6, r1
 8022a00:	4614      	mov	r4, r2
 8022a02:	4605      	mov	r5, r0
 8022a04:	b118      	cbz	r0, 8022a0e <__swbuf_r+0x12>
 8022a06:	6983      	ldr	r3, [r0, #24]
 8022a08:	b90b      	cbnz	r3, 8022a0e <__swbuf_r+0x12>
 8022a0a:	f7ff f933 	bl	8021c74 <__sinit>
 8022a0e:	4b21      	ldr	r3, [pc, #132]	; (8022a94 <__swbuf_r+0x98>)
 8022a10:	429c      	cmp	r4, r3
 8022a12:	d12b      	bne.n	8022a6c <__swbuf_r+0x70>
 8022a14:	686c      	ldr	r4, [r5, #4]
 8022a16:	69a3      	ldr	r3, [r4, #24]
 8022a18:	60a3      	str	r3, [r4, #8]
 8022a1a:	89a3      	ldrh	r3, [r4, #12]
 8022a1c:	071a      	lsls	r2, r3, #28
 8022a1e:	d52f      	bpl.n	8022a80 <__swbuf_r+0x84>
 8022a20:	6923      	ldr	r3, [r4, #16]
 8022a22:	b36b      	cbz	r3, 8022a80 <__swbuf_r+0x84>
 8022a24:	6923      	ldr	r3, [r4, #16]
 8022a26:	6820      	ldr	r0, [r4, #0]
 8022a28:	1ac0      	subs	r0, r0, r3
 8022a2a:	6963      	ldr	r3, [r4, #20]
 8022a2c:	b2f6      	uxtb	r6, r6
 8022a2e:	4283      	cmp	r3, r0
 8022a30:	4637      	mov	r7, r6
 8022a32:	dc04      	bgt.n	8022a3e <__swbuf_r+0x42>
 8022a34:	4621      	mov	r1, r4
 8022a36:	4628      	mov	r0, r5
 8022a38:	f000 f950 	bl	8022cdc <_fflush_r>
 8022a3c:	bb30      	cbnz	r0, 8022a8c <__swbuf_r+0x90>
 8022a3e:	68a3      	ldr	r3, [r4, #8]
 8022a40:	3b01      	subs	r3, #1
 8022a42:	60a3      	str	r3, [r4, #8]
 8022a44:	6823      	ldr	r3, [r4, #0]
 8022a46:	1c5a      	adds	r2, r3, #1
 8022a48:	6022      	str	r2, [r4, #0]
 8022a4a:	701e      	strb	r6, [r3, #0]
 8022a4c:	6963      	ldr	r3, [r4, #20]
 8022a4e:	3001      	adds	r0, #1
 8022a50:	4283      	cmp	r3, r0
 8022a52:	d004      	beq.n	8022a5e <__swbuf_r+0x62>
 8022a54:	89a3      	ldrh	r3, [r4, #12]
 8022a56:	07db      	lsls	r3, r3, #31
 8022a58:	d506      	bpl.n	8022a68 <__swbuf_r+0x6c>
 8022a5a:	2e0a      	cmp	r6, #10
 8022a5c:	d104      	bne.n	8022a68 <__swbuf_r+0x6c>
 8022a5e:	4621      	mov	r1, r4
 8022a60:	4628      	mov	r0, r5
 8022a62:	f000 f93b 	bl	8022cdc <_fflush_r>
 8022a66:	b988      	cbnz	r0, 8022a8c <__swbuf_r+0x90>
 8022a68:	4638      	mov	r0, r7
 8022a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a6c:	4b0a      	ldr	r3, [pc, #40]	; (8022a98 <__swbuf_r+0x9c>)
 8022a6e:	429c      	cmp	r4, r3
 8022a70:	d101      	bne.n	8022a76 <__swbuf_r+0x7a>
 8022a72:	68ac      	ldr	r4, [r5, #8]
 8022a74:	e7cf      	b.n	8022a16 <__swbuf_r+0x1a>
 8022a76:	4b09      	ldr	r3, [pc, #36]	; (8022a9c <__swbuf_r+0xa0>)
 8022a78:	429c      	cmp	r4, r3
 8022a7a:	bf08      	it	eq
 8022a7c:	68ec      	ldreq	r4, [r5, #12]
 8022a7e:	e7ca      	b.n	8022a16 <__swbuf_r+0x1a>
 8022a80:	4621      	mov	r1, r4
 8022a82:	4628      	mov	r0, r5
 8022a84:	f000 f81e 	bl	8022ac4 <__swsetup_r>
 8022a88:	2800      	cmp	r0, #0
 8022a8a:	d0cb      	beq.n	8022a24 <__swbuf_r+0x28>
 8022a8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8022a90:	e7ea      	b.n	8022a68 <__swbuf_r+0x6c>
 8022a92:	bf00      	nop
 8022a94:	2400af44 	.word	0x2400af44
 8022a98:	2400af64 	.word	0x2400af64
 8022a9c:	2400af24 	.word	0x2400af24

08022aa0 <_write_r>:
 8022aa0:	b538      	push	{r3, r4, r5, lr}
 8022aa2:	4d07      	ldr	r5, [pc, #28]	; (8022ac0 <_write_r+0x20>)
 8022aa4:	4604      	mov	r4, r0
 8022aa6:	4608      	mov	r0, r1
 8022aa8:	4611      	mov	r1, r2
 8022aaa:	2200      	movs	r2, #0
 8022aac:	602a      	str	r2, [r5, #0]
 8022aae:	461a      	mov	r2, r3
 8022ab0:	f7e7 ff76 	bl	800a9a0 <_write>
 8022ab4:	1c43      	adds	r3, r0, #1
 8022ab6:	d102      	bne.n	8022abe <_write_r+0x1e>
 8022ab8:	682b      	ldr	r3, [r5, #0]
 8022aba:	b103      	cbz	r3, 8022abe <_write_r+0x1e>
 8022abc:	6023      	str	r3, [r4, #0]
 8022abe:	bd38      	pop	{r3, r4, r5, pc}
 8022ac0:	24034b0c 	.word	0x24034b0c

08022ac4 <__swsetup_r>:
 8022ac4:	4b32      	ldr	r3, [pc, #200]	; (8022b90 <__swsetup_r+0xcc>)
 8022ac6:	b570      	push	{r4, r5, r6, lr}
 8022ac8:	681d      	ldr	r5, [r3, #0]
 8022aca:	4606      	mov	r6, r0
 8022acc:	460c      	mov	r4, r1
 8022ace:	b125      	cbz	r5, 8022ada <__swsetup_r+0x16>
 8022ad0:	69ab      	ldr	r3, [r5, #24]
 8022ad2:	b913      	cbnz	r3, 8022ada <__swsetup_r+0x16>
 8022ad4:	4628      	mov	r0, r5
 8022ad6:	f7ff f8cd 	bl	8021c74 <__sinit>
 8022ada:	4b2e      	ldr	r3, [pc, #184]	; (8022b94 <__swsetup_r+0xd0>)
 8022adc:	429c      	cmp	r4, r3
 8022ade:	d10f      	bne.n	8022b00 <__swsetup_r+0x3c>
 8022ae0:	686c      	ldr	r4, [r5, #4]
 8022ae2:	89a3      	ldrh	r3, [r4, #12]
 8022ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ae8:	0719      	lsls	r1, r3, #28
 8022aea:	d42c      	bmi.n	8022b46 <__swsetup_r+0x82>
 8022aec:	06dd      	lsls	r5, r3, #27
 8022aee:	d411      	bmi.n	8022b14 <__swsetup_r+0x50>
 8022af0:	2309      	movs	r3, #9
 8022af2:	6033      	str	r3, [r6, #0]
 8022af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022af8:	81a3      	strh	r3, [r4, #12]
 8022afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022afe:	e03e      	b.n	8022b7e <__swsetup_r+0xba>
 8022b00:	4b25      	ldr	r3, [pc, #148]	; (8022b98 <__swsetup_r+0xd4>)
 8022b02:	429c      	cmp	r4, r3
 8022b04:	d101      	bne.n	8022b0a <__swsetup_r+0x46>
 8022b06:	68ac      	ldr	r4, [r5, #8]
 8022b08:	e7eb      	b.n	8022ae2 <__swsetup_r+0x1e>
 8022b0a:	4b24      	ldr	r3, [pc, #144]	; (8022b9c <__swsetup_r+0xd8>)
 8022b0c:	429c      	cmp	r4, r3
 8022b0e:	bf08      	it	eq
 8022b10:	68ec      	ldreq	r4, [r5, #12]
 8022b12:	e7e6      	b.n	8022ae2 <__swsetup_r+0x1e>
 8022b14:	0758      	lsls	r0, r3, #29
 8022b16:	d512      	bpl.n	8022b3e <__swsetup_r+0x7a>
 8022b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b1a:	b141      	cbz	r1, 8022b2e <__swsetup_r+0x6a>
 8022b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022b20:	4299      	cmp	r1, r3
 8022b22:	d002      	beq.n	8022b2a <__swsetup_r+0x66>
 8022b24:	4630      	mov	r0, r6
 8022b26:	f7ff f9a3 	bl	8021e70 <_free_r>
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8022b2e:	89a3      	ldrh	r3, [r4, #12]
 8022b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022b34:	81a3      	strh	r3, [r4, #12]
 8022b36:	2300      	movs	r3, #0
 8022b38:	6063      	str	r3, [r4, #4]
 8022b3a:	6923      	ldr	r3, [r4, #16]
 8022b3c:	6023      	str	r3, [r4, #0]
 8022b3e:	89a3      	ldrh	r3, [r4, #12]
 8022b40:	f043 0308 	orr.w	r3, r3, #8
 8022b44:	81a3      	strh	r3, [r4, #12]
 8022b46:	6923      	ldr	r3, [r4, #16]
 8022b48:	b94b      	cbnz	r3, 8022b5e <__swsetup_r+0x9a>
 8022b4a:	89a3      	ldrh	r3, [r4, #12]
 8022b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022b54:	d003      	beq.n	8022b5e <__swsetup_r+0x9a>
 8022b56:	4621      	mov	r1, r4
 8022b58:	4630      	mov	r0, r6
 8022b5a:	f000 f933 	bl	8022dc4 <__smakebuf_r>
 8022b5e:	89a0      	ldrh	r0, [r4, #12]
 8022b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022b64:	f010 0301 	ands.w	r3, r0, #1
 8022b68:	d00a      	beq.n	8022b80 <__swsetup_r+0xbc>
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	60a3      	str	r3, [r4, #8]
 8022b6e:	6963      	ldr	r3, [r4, #20]
 8022b70:	425b      	negs	r3, r3
 8022b72:	61a3      	str	r3, [r4, #24]
 8022b74:	6923      	ldr	r3, [r4, #16]
 8022b76:	b943      	cbnz	r3, 8022b8a <__swsetup_r+0xc6>
 8022b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022b7c:	d1ba      	bne.n	8022af4 <__swsetup_r+0x30>
 8022b7e:	bd70      	pop	{r4, r5, r6, pc}
 8022b80:	0781      	lsls	r1, r0, #30
 8022b82:	bf58      	it	pl
 8022b84:	6963      	ldrpl	r3, [r4, #20]
 8022b86:	60a3      	str	r3, [r4, #8]
 8022b88:	e7f4      	b.n	8022b74 <__swsetup_r+0xb0>
 8022b8a:	2000      	movs	r0, #0
 8022b8c:	e7f7      	b.n	8022b7e <__swsetup_r+0xba>
 8022b8e:	bf00      	nop
 8022b90:	24009074 	.word	0x24009074
 8022b94:	2400af44 	.word	0x2400af44
 8022b98:	2400af64 	.word	0x2400af64
 8022b9c:	2400af24 	.word	0x2400af24

08022ba0 <abort>:
 8022ba0:	b508      	push	{r3, lr}
 8022ba2:	2006      	movs	r0, #6
 8022ba4:	f000 fb38 	bl	8023218 <raise>
 8022ba8:	2001      	movs	r0, #1
 8022baa:	f7e7 fee5 	bl	800a978 <_exit>
	...

08022bb0 <_close_r>:
 8022bb0:	b538      	push	{r3, r4, r5, lr}
 8022bb2:	4d06      	ldr	r5, [pc, #24]	; (8022bcc <_close_r+0x1c>)
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	4604      	mov	r4, r0
 8022bb8:	4608      	mov	r0, r1
 8022bba:	602b      	str	r3, [r5, #0]
 8022bbc:	f7e7 fefe 	bl	800a9bc <_close>
 8022bc0:	1c43      	adds	r3, r0, #1
 8022bc2:	d102      	bne.n	8022bca <_close_r+0x1a>
 8022bc4:	682b      	ldr	r3, [r5, #0]
 8022bc6:	b103      	cbz	r3, 8022bca <_close_r+0x1a>
 8022bc8:	6023      	str	r3, [r4, #0]
 8022bca:	bd38      	pop	{r3, r4, r5, pc}
 8022bcc:	24034b0c 	.word	0x24034b0c

08022bd0 <__sflush_r>:
 8022bd0:	898a      	ldrh	r2, [r1, #12]
 8022bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bd6:	4605      	mov	r5, r0
 8022bd8:	0710      	lsls	r0, r2, #28
 8022bda:	460c      	mov	r4, r1
 8022bdc:	d458      	bmi.n	8022c90 <__sflush_r+0xc0>
 8022bde:	684b      	ldr	r3, [r1, #4]
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	dc05      	bgt.n	8022bf0 <__sflush_r+0x20>
 8022be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	dc02      	bgt.n	8022bf0 <__sflush_r+0x20>
 8022bea:	2000      	movs	r0, #0
 8022bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022bf2:	2e00      	cmp	r6, #0
 8022bf4:	d0f9      	beq.n	8022bea <__sflush_r+0x1a>
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022bfc:	682f      	ldr	r7, [r5, #0]
 8022bfe:	602b      	str	r3, [r5, #0]
 8022c00:	d032      	beq.n	8022c68 <__sflush_r+0x98>
 8022c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022c04:	89a3      	ldrh	r3, [r4, #12]
 8022c06:	075a      	lsls	r2, r3, #29
 8022c08:	d505      	bpl.n	8022c16 <__sflush_r+0x46>
 8022c0a:	6863      	ldr	r3, [r4, #4]
 8022c0c:	1ac0      	subs	r0, r0, r3
 8022c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022c10:	b10b      	cbz	r3, 8022c16 <__sflush_r+0x46>
 8022c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c14:	1ac0      	subs	r0, r0, r3
 8022c16:	2300      	movs	r3, #0
 8022c18:	4602      	mov	r2, r0
 8022c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022c1c:	6a21      	ldr	r1, [r4, #32]
 8022c1e:	4628      	mov	r0, r5
 8022c20:	47b0      	blx	r6
 8022c22:	1c43      	adds	r3, r0, #1
 8022c24:	89a3      	ldrh	r3, [r4, #12]
 8022c26:	d106      	bne.n	8022c36 <__sflush_r+0x66>
 8022c28:	6829      	ldr	r1, [r5, #0]
 8022c2a:	291d      	cmp	r1, #29
 8022c2c:	d82c      	bhi.n	8022c88 <__sflush_r+0xb8>
 8022c2e:	4a2a      	ldr	r2, [pc, #168]	; (8022cd8 <__sflush_r+0x108>)
 8022c30:	40ca      	lsrs	r2, r1
 8022c32:	07d6      	lsls	r6, r2, #31
 8022c34:	d528      	bpl.n	8022c88 <__sflush_r+0xb8>
 8022c36:	2200      	movs	r2, #0
 8022c38:	6062      	str	r2, [r4, #4]
 8022c3a:	04d9      	lsls	r1, r3, #19
 8022c3c:	6922      	ldr	r2, [r4, #16]
 8022c3e:	6022      	str	r2, [r4, #0]
 8022c40:	d504      	bpl.n	8022c4c <__sflush_r+0x7c>
 8022c42:	1c42      	adds	r2, r0, #1
 8022c44:	d101      	bne.n	8022c4a <__sflush_r+0x7a>
 8022c46:	682b      	ldr	r3, [r5, #0]
 8022c48:	b903      	cbnz	r3, 8022c4c <__sflush_r+0x7c>
 8022c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8022c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022c4e:	602f      	str	r7, [r5, #0]
 8022c50:	2900      	cmp	r1, #0
 8022c52:	d0ca      	beq.n	8022bea <__sflush_r+0x1a>
 8022c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c58:	4299      	cmp	r1, r3
 8022c5a:	d002      	beq.n	8022c62 <__sflush_r+0x92>
 8022c5c:	4628      	mov	r0, r5
 8022c5e:	f7ff f907 	bl	8021e70 <_free_r>
 8022c62:	2000      	movs	r0, #0
 8022c64:	6360      	str	r0, [r4, #52]	; 0x34
 8022c66:	e7c1      	b.n	8022bec <__sflush_r+0x1c>
 8022c68:	6a21      	ldr	r1, [r4, #32]
 8022c6a:	2301      	movs	r3, #1
 8022c6c:	4628      	mov	r0, r5
 8022c6e:	47b0      	blx	r6
 8022c70:	1c41      	adds	r1, r0, #1
 8022c72:	d1c7      	bne.n	8022c04 <__sflush_r+0x34>
 8022c74:	682b      	ldr	r3, [r5, #0]
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	d0c4      	beq.n	8022c04 <__sflush_r+0x34>
 8022c7a:	2b1d      	cmp	r3, #29
 8022c7c:	d001      	beq.n	8022c82 <__sflush_r+0xb2>
 8022c7e:	2b16      	cmp	r3, #22
 8022c80:	d101      	bne.n	8022c86 <__sflush_r+0xb6>
 8022c82:	602f      	str	r7, [r5, #0]
 8022c84:	e7b1      	b.n	8022bea <__sflush_r+0x1a>
 8022c86:	89a3      	ldrh	r3, [r4, #12]
 8022c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c8c:	81a3      	strh	r3, [r4, #12]
 8022c8e:	e7ad      	b.n	8022bec <__sflush_r+0x1c>
 8022c90:	690f      	ldr	r7, [r1, #16]
 8022c92:	2f00      	cmp	r7, #0
 8022c94:	d0a9      	beq.n	8022bea <__sflush_r+0x1a>
 8022c96:	0793      	lsls	r3, r2, #30
 8022c98:	680e      	ldr	r6, [r1, #0]
 8022c9a:	bf08      	it	eq
 8022c9c:	694b      	ldreq	r3, [r1, #20]
 8022c9e:	600f      	str	r7, [r1, #0]
 8022ca0:	bf18      	it	ne
 8022ca2:	2300      	movne	r3, #0
 8022ca4:	eba6 0807 	sub.w	r8, r6, r7
 8022ca8:	608b      	str	r3, [r1, #8]
 8022caa:	f1b8 0f00 	cmp.w	r8, #0
 8022cae:	dd9c      	ble.n	8022bea <__sflush_r+0x1a>
 8022cb0:	6a21      	ldr	r1, [r4, #32]
 8022cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022cb4:	4643      	mov	r3, r8
 8022cb6:	463a      	mov	r2, r7
 8022cb8:	4628      	mov	r0, r5
 8022cba:	47b0      	blx	r6
 8022cbc:	2800      	cmp	r0, #0
 8022cbe:	dc06      	bgt.n	8022cce <__sflush_r+0xfe>
 8022cc0:	89a3      	ldrh	r3, [r4, #12]
 8022cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022cc6:	81a3      	strh	r3, [r4, #12]
 8022cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ccc:	e78e      	b.n	8022bec <__sflush_r+0x1c>
 8022cce:	4407      	add	r7, r0
 8022cd0:	eba8 0800 	sub.w	r8, r8, r0
 8022cd4:	e7e9      	b.n	8022caa <__sflush_r+0xda>
 8022cd6:	bf00      	nop
 8022cd8:	20400001 	.word	0x20400001

08022cdc <_fflush_r>:
 8022cdc:	b538      	push	{r3, r4, r5, lr}
 8022cde:	690b      	ldr	r3, [r1, #16]
 8022ce0:	4605      	mov	r5, r0
 8022ce2:	460c      	mov	r4, r1
 8022ce4:	b913      	cbnz	r3, 8022cec <_fflush_r+0x10>
 8022ce6:	2500      	movs	r5, #0
 8022ce8:	4628      	mov	r0, r5
 8022cea:	bd38      	pop	{r3, r4, r5, pc}
 8022cec:	b118      	cbz	r0, 8022cf6 <_fflush_r+0x1a>
 8022cee:	6983      	ldr	r3, [r0, #24]
 8022cf0:	b90b      	cbnz	r3, 8022cf6 <_fflush_r+0x1a>
 8022cf2:	f7fe ffbf 	bl	8021c74 <__sinit>
 8022cf6:	4b14      	ldr	r3, [pc, #80]	; (8022d48 <_fflush_r+0x6c>)
 8022cf8:	429c      	cmp	r4, r3
 8022cfa:	d11b      	bne.n	8022d34 <_fflush_r+0x58>
 8022cfc:	686c      	ldr	r4, [r5, #4]
 8022cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d0ef      	beq.n	8022ce6 <_fflush_r+0xa>
 8022d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022d08:	07d0      	lsls	r0, r2, #31
 8022d0a:	d404      	bmi.n	8022d16 <_fflush_r+0x3a>
 8022d0c:	0599      	lsls	r1, r3, #22
 8022d0e:	d402      	bmi.n	8022d16 <_fflush_r+0x3a>
 8022d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d12:	f7ff f884 	bl	8021e1e <__retarget_lock_acquire_recursive>
 8022d16:	4628      	mov	r0, r5
 8022d18:	4621      	mov	r1, r4
 8022d1a:	f7ff ff59 	bl	8022bd0 <__sflush_r>
 8022d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022d20:	07da      	lsls	r2, r3, #31
 8022d22:	4605      	mov	r5, r0
 8022d24:	d4e0      	bmi.n	8022ce8 <_fflush_r+0xc>
 8022d26:	89a3      	ldrh	r3, [r4, #12]
 8022d28:	059b      	lsls	r3, r3, #22
 8022d2a:	d4dd      	bmi.n	8022ce8 <_fflush_r+0xc>
 8022d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d2e:	f7ff f877 	bl	8021e20 <__retarget_lock_release_recursive>
 8022d32:	e7d9      	b.n	8022ce8 <_fflush_r+0xc>
 8022d34:	4b05      	ldr	r3, [pc, #20]	; (8022d4c <_fflush_r+0x70>)
 8022d36:	429c      	cmp	r4, r3
 8022d38:	d101      	bne.n	8022d3e <_fflush_r+0x62>
 8022d3a:	68ac      	ldr	r4, [r5, #8]
 8022d3c:	e7df      	b.n	8022cfe <_fflush_r+0x22>
 8022d3e:	4b04      	ldr	r3, [pc, #16]	; (8022d50 <_fflush_r+0x74>)
 8022d40:	429c      	cmp	r4, r3
 8022d42:	bf08      	it	eq
 8022d44:	68ec      	ldreq	r4, [r5, #12]
 8022d46:	e7da      	b.n	8022cfe <_fflush_r+0x22>
 8022d48:	2400af44 	.word	0x2400af44
 8022d4c:	2400af64 	.word	0x2400af64
 8022d50:	2400af24 	.word	0x2400af24

08022d54 <_lseek_r>:
 8022d54:	b538      	push	{r3, r4, r5, lr}
 8022d56:	4d07      	ldr	r5, [pc, #28]	; (8022d74 <_lseek_r+0x20>)
 8022d58:	4604      	mov	r4, r0
 8022d5a:	4608      	mov	r0, r1
 8022d5c:	4611      	mov	r1, r2
 8022d5e:	2200      	movs	r2, #0
 8022d60:	602a      	str	r2, [r5, #0]
 8022d62:	461a      	mov	r2, r3
 8022d64:	f7e7 fe36 	bl	800a9d4 <_lseek>
 8022d68:	1c43      	adds	r3, r0, #1
 8022d6a:	d102      	bne.n	8022d72 <_lseek_r+0x1e>
 8022d6c:	682b      	ldr	r3, [r5, #0]
 8022d6e:	b103      	cbz	r3, 8022d72 <_lseek_r+0x1e>
 8022d70:	6023      	str	r3, [r4, #0]
 8022d72:	bd38      	pop	{r3, r4, r5, pc}
 8022d74:	24034b0c 	.word	0x24034b0c

08022d78 <__swhatbuf_r>:
 8022d78:	b570      	push	{r4, r5, r6, lr}
 8022d7a:	460e      	mov	r6, r1
 8022d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d80:	2900      	cmp	r1, #0
 8022d82:	b096      	sub	sp, #88	; 0x58
 8022d84:	4614      	mov	r4, r2
 8022d86:	461d      	mov	r5, r3
 8022d88:	da08      	bge.n	8022d9c <__swhatbuf_r+0x24>
 8022d8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022d8e:	2200      	movs	r2, #0
 8022d90:	602a      	str	r2, [r5, #0]
 8022d92:	061a      	lsls	r2, r3, #24
 8022d94:	d410      	bmi.n	8022db8 <__swhatbuf_r+0x40>
 8022d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022d9a:	e00e      	b.n	8022dba <__swhatbuf_r+0x42>
 8022d9c:	466a      	mov	r2, sp
 8022d9e:	f000 fa57 	bl	8023250 <_fstat_r>
 8022da2:	2800      	cmp	r0, #0
 8022da4:	dbf1      	blt.n	8022d8a <__swhatbuf_r+0x12>
 8022da6:	9a01      	ldr	r2, [sp, #4]
 8022da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022db0:	425a      	negs	r2, r3
 8022db2:	415a      	adcs	r2, r3
 8022db4:	602a      	str	r2, [r5, #0]
 8022db6:	e7ee      	b.n	8022d96 <__swhatbuf_r+0x1e>
 8022db8:	2340      	movs	r3, #64	; 0x40
 8022dba:	2000      	movs	r0, #0
 8022dbc:	6023      	str	r3, [r4, #0]
 8022dbe:	b016      	add	sp, #88	; 0x58
 8022dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08022dc4 <__smakebuf_r>:
 8022dc4:	898b      	ldrh	r3, [r1, #12]
 8022dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022dc8:	079d      	lsls	r5, r3, #30
 8022dca:	4606      	mov	r6, r0
 8022dcc:	460c      	mov	r4, r1
 8022dce:	d507      	bpl.n	8022de0 <__smakebuf_r+0x1c>
 8022dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022dd4:	6023      	str	r3, [r4, #0]
 8022dd6:	6123      	str	r3, [r4, #16]
 8022dd8:	2301      	movs	r3, #1
 8022dda:	6163      	str	r3, [r4, #20]
 8022ddc:	b002      	add	sp, #8
 8022dde:	bd70      	pop	{r4, r5, r6, pc}
 8022de0:	ab01      	add	r3, sp, #4
 8022de2:	466a      	mov	r2, sp
 8022de4:	f7ff ffc8 	bl	8022d78 <__swhatbuf_r>
 8022de8:	9900      	ldr	r1, [sp, #0]
 8022dea:	4605      	mov	r5, r0
 8022dec:	4630      	mov	r0, r6
 8022dee:	f7ff f8ab 	bl	8021f48 <_malloc_r>
 8022df2:	b948      	cbnz	r0, 8022e08 <__smakebuf_r+0x44>
 8022df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022df8:	059a      	lsls	r2, r3, #22
 8022dfa:	d4ef      	bmi.n	8022ddc <__smakebuf_r+0x18>
 8022dfc:	f023 0303 	bic.w	r3, r3, #3
 8022e00:	f043 0302 	orr.w	r3, r3, #2
 8022e04:	81a3      	strh	r3, [r4, #12]
 8022e06:	e7e3      	b.n	8022dd0 <__smakebuf_r+0xc>
 8022e08:	4b0d      	ldr	r3, [pc, #52]	; (8022e40 <__smakebuf_r+0x7c>)
 8022e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8022e0c:	89a3      	ldrh	r3, [r4, #12]
 8022e0e:	6020      	str	r0, [r4, #0]
 8022e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022e14:	81a3      	strh	r3, [r4, #12]
 8022e16:	9b00      	ldr	r3, [sp, #0]
 8022e18:	6163      	str	r3, [r4, #20]
 8022e1a:	9b01      	ldr	r3, [sp, #4]
 8022e1c:	6120      	str	r0, [r4, #16]
 8022e1e:	b15b      	cbz	r3, 8022e38 <__smakebuf_r+0x74>
 8022e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e24:	4630      	mov	r0, r6
 8022e26:	f000 fa25 	bl	8023274 <_isatty_r>
 8022e2a:	b128      	cbz	r0, 8022e38 <__smakebuf_r+0x74>
 8022e2c:	89a3      	ldrh	r3, [r4, #12]
 8022e2e:	f023 0303 	bic.w	r3, r3, #3
 8022e32:	f043 0301 	orr.w	r3, r3, #1
 8022e36:	81a3      	strh	r3, [r4, #12]
 8022e38:	89a0      	ldrh	r0, [r4, #12]
 8022e3a:	4305      	orrs	r5, r0
 8022e3c:	81a5      	strh	r5, [r4, #12]
 8022e3e:	e7cd      	b.n	8022ddc <__smakebuf_r+0x18>
 8022e40:	08021c0d 	.word	0x08021c0d

08022e44 <memmove>:
 8022e44:	4288      	cmp	r0, r1
 8022e46:	b510      	push	{r4, lr}
 8022e48:	eb01 0402 	add.w	r4, r1, r2
 8022e4c:	d902      	bls.n	8022e54 <memmove+0x10>
 8022e4e:	4284      	cmp	r4, r0
 8022e50:	4623      	mov	r3, r4
 8022e52:	d807      	bhi.n	8022e64 <memmove+0x20>
 8022e54:	1e43      	subs	r3, r0, #1
 8022e56:	42a1      	cmp	r1, r4
 8022e58:	d008      	beq.n	8022e6c <memmove+0x28>
 8022e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022e62:	e7f8      	b.n	8022e56 <memmove+0x12>
 8022e64:	4402      	add	r2, r0
 8022e66:	4601      	mov	r1, r0
 8022e68:	428a      	cmp	r2, r1
 8022e6a:	d100      	bne.n	8022e6e <memmove+0x2a>
 8022e6c:	bd10      	pop	{r4, pc}
 8022e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022e76:	e7f7      	b.n	8022e68 <memmove+0x24>

08022e78 <__malloc_lock>:
 8022e78:	4801      	ldr	r0, [pc, #4]	; (8022e80 <__malloc_lock+0x8>)
 8022e7a:	f7fe bfd0 	b.w	8021e1e <__retarget_lock_acquire_recursive>
 8022e7e:	bf00      	nop
 8022e80:	24034b00 	.word	0x24034b00

08022e84 <__malloc_unlock>:
 8022e84:	4801      	ldr	r0, [pc, #4]	; (8022e8c <__malloc_unlock+0x8>)
 8022e86:	f7fe bfcb 	b.w	8021e20 <__retarget_lock_release_recursive>
 8022e8a:	bf00      	nop
 8022e8c:	24034b00 	.word	0x24034b00

08022e90 <_realloc_r>:
 8022e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e94:	4680      	mov	r8, r0
 8022e96:	4614      	mov	r4, r2
 8022e98:	460e      	mov	r6, r1
 8022e9a:	b921      	cbnz	r1, 8022ea6 <_realloc_r+0x16>
 8022e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022ea0:	4611      	mov	r1, r2
 8022ea2:	f7ff b851 	b.w	8021f48 <_malloc_r>
 8022ea6:	b92a      	cbnz	r2, 8022eb4 <_realloc_r+0x24>
 8022ea8:	f7fe ffe2 	bl	8021e70 <_free_r>
 8022eac:	4625      	mov	r5, r4
 8022eae:	4628      	mov	r0, r5
 8022eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022eb4:	f000 f9ee 	bl	8023294 <_malloc_usable_size_r>
 8022eb8:	4284      	cmp	r4, r0
 8022eba:	4607      	mov	r7, r0
 8022ebc:	d802      	bhi.n	8022ec4 <_realloc_r+0x34>
 8022ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022ec2:	d812      	bhi.n	8022eea <_realloc_r+0x5a>
 8022ec4:	4621      	mov	r1, r4
 8022ec6:	4640      	mov	r0, r8
 8022ec8:	f7ff f83e 	bl	8021f48 <_malloc_r>
 8022ecc:	4605      	mov	r5, r0
 8022ece:	2800      	cmp	r0, #0
 8022ed0:	d0ed      	beq.n	8022eae <_realloc_r+0x1e>
 8022ed2:	42bc      	cmp	r4, r7
 8022ed4:	4622      	mov	r2, r4
 8022ed6:	4631      	mov	r1, r6
 8022ed8:	bf28      	it	cs
 8022eda:	463a      	movcs	r2, r7
 8022edc:	f7fe ffb2 	bl	8021e44 <memcpy>
 8022ee0:	4631      	mov	r1, r6
 8022ee2:	4640      	mov	r0, r8
 8022ee4:	f7fe ffc4 	bl	8021e70 <_free_r>
 8022ee8:	e7e1      	b.n	8022eae <_realloc_r+0x1e>
 8022eea:	4635      	mov	r5, r6
 8022eec:	e7df      	b.n	8022eae <_realloc_r+0x1e>

08022eee <__ssputs_r>:
 8022eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ef2:	688e      	ldr	r6, [r1, #8]
 8022ef4:	429e      	cmp	r6, r3
 8022ef6:	4682      	mov	sl, r0
 8022ef8:	460c      	mov	r4, r1
 8022efa:	4690      	mov	r8, r2
 8022efc:	461f      	mov	r7, r3
 8022efe:	d838      	bhi.n	8022f72 <__ssputs_r+0x84>
 8022f00:	898a      	ldrh	r2, [r1, #12]
 8022f02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022f06:	d032      	beq.n	8022f6e <__ssputs_r+0x80>
 8022f08:	6825      	ldr	r5, [r4, #0]
 8022f0a:	6909      	ldr	r1, [r1, #16]
 8022f0c:	eba5 0901 	sub.w	r9, r5, r1
 8022f10:	6965      	ldr	r5, [r4, #20]
 8022f12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022f1a:	3301      	adds	r3, #1
 8022f1c:	444b      	add	r3, r9
 8022f1e:	106d      	asrs	r5, r5, #1
 8022f20:	429d      	cmp	r5, r3
 8022f22:	bf38      	it	cc
 8022f24:	461d      	movcc	r5, r3
 8022f26:	0553      	lsls	r3, r2, #21
 8022f28:	d531      	bpl.n	8022f8e <__ssputs_r+0xa0>
 8022f2a:	4629      	mov	r1, r5
 8022f2c:	f7ff f80c 	bl	8021f48 <_malloc_r>
 8022f30:	4606      	mov	r6, r0
 8022f32:	b950      	cbnz	r0, 8022f4a <__ssputs_r+0x5c>
 8022f34:	230c      	movs	r3, #12
 8022f36:	f8ca 3000 	str.w	r3, [sl]
 8022f3a:	89a3      	ldrh	r3, [r4, #12]
 8022f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f40:	81a3      	strh	r3, [r4, #12]
 8022f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f4a:	6921      	ldr	r1, [r4, #16]
 8022f4c:	464a      	mov	r2, r9
 8022f4e:	f7fe ff79 	bl	8021e44 <memcpy>
 8022f52:	89a3      	ldrh	r3, [r4, #12]
 8022f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022f5c:	81a3      	strh	r3, [r4, #12]
 8022f5e:	6126      	str	r6, [r4, #16]
 8022f60:	6165      	str	r5, [r4, #20]
 8022f62:	444e      	add	r6, r9
 8022f64:	eba5 0509 	sub.w	r5, r5, r9
 8022f68:	6026      	str	r6, [r4, #0]
 8022f6a:	60a5      	str	r5, [r4, #8]
 8022f6c:	463e      	mov	r6, r7
 8022f6e:	42be      	cmp	r6, r7
 8022f70:	d900      	bls.n	8022f74 <__ssputs_r+0x86>
 8022f72:	463e      	mov	r6, r7
 8022f74:	6820      	ldr	r0, [r4, #0]
 8022f76:	4632      	mov	r2, r6
 8022f78:	4641      	mov	r1, r8
 8022f7a:	f7ff ff63 	bl	8022e44 <memmove>
 8022f7e:	68a3      	ldr	r3, [r4, #8]
 8022f80:	1b9b      	subs	r3, r3, r6
 8022f82:	60a3      	str	r3, [r4, #8]
 8022f84:	6823      	ldr	r3, [r4, #0]
 8022f86:	4433      	add	r3, r6
 8022f88:	6023      	str	r3, [r4, #0]
 8022f8a:	2000      	movs	r0, #0
 8022f8c:	e7db      	b.n	8022f46 <__ssputs_r+0x58>
 8022f8e:	462a      	mov	r2, r5
 8022f90:	f7ff ff7e 	bl	8022e90 <_realloc_r>
 8022f94:	4606      	mov	r6, r0
 8022f96:	2800      	cmp	r0, #0
 8022f98:	d1e1      	bne.n	8022f5e <__ssputs_r+0x70>
 8022f9a:	6921      	ldr	r1, [r4, #16]
 8022f9c:	4650      	mov	r0, sl
 8022f9e:	f7fe ff67 	bl	8021e70 <_free_r>
 8022fa2:	e7c7      	b.n	8022f34 <__ssputs_r+0x46>

08022fa4 <_svfiprintf_r>:
 8022fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fa8:	4698      	mov	r8, r3
 8022faa:	898b      	ldrh	r3, [r1, #12]
 8022fac:	061b      	lsls	r3, r3, #24
 8022fae:	b09d      	sub	sp, #116	; 0x74
 8022fb0:	4607      	mov	r7, r0
 8022fb2:	460d      	mov	r5, r1
 8022fb4:	4614      	mov	r4, r2
 8022fb6:	d50e      	bpl.n	8022fd6 <_svfiprintf_r+0x32>
 8022fb8:	690b      	ldr	r3, [r1, #16]
 8022fba:	b963      	cbnz	r3, 8022fd6 <_svfiprintf_r+0x32>
 8022fbc:	2140      	movs	r1, #64	; 0x40
 8022fbe:	f7fe ffc3 	bl	8021f48 <_malloc_r>
 8022fc2:	6028      	str	r0, [r5, #0]
 8022fc4:	6128      	str	r0, [r5, #16]
 8022fc6:	b920      	cbnz	r0, 8022fd2 <_svfiprintf_r+0x2e>
 8022fc8:	230c      	movs	r3, #12
 8022fca:	603b      	str	r3, [r7, #0]
 8022fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022fd0:	e0d1      	b.n	8023176 <_svfiprintf_r+0x1d2>
 8022fd2:	2340      	movs	r3, #64	; 0x40
 8022fd4:	616b      	str	r3, [r5, #20]
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8022fda:	2320      	movs	r3, #32
 8022fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8022fe4:	2330      	movs	r3, #48	; 0x30
 8022fe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023190 <_svfiprintf_r+0x1ec>
 8022fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022fee:	f04f 0901 	mov.w	r9, #1
 8022ff2:	4623      	mov	r3, r4
 8022ff4:	469a      	mov	sl, r3
 8022ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022ffa:	b10a      	cbz	r2, 8023000 <_svfiprintf_r+0x5c>
 8022ffc:	2a25      	cmp	r2, #37	; 0x25
 8022ffe:	d1f9      	bne.n	8022ff4 <_svfiprintf_r+0x50>
 8023000:	ebba 0b04 	subs.w	fp, sl, r4
 8023004:	d00b      	beq.n	802301e <_svfiprintf_r+0x7a>
 8023006:	465b      	mov	r3, fp
 8023008:	4622      	mov	r2, r4
 802300a:	4629      	mov	r1, r5
 802300c:	4638      	mov	r0, r7
 802300e:	f7ff ff6e 	bl	8022eee <__ssputs_r>
 8023012:	3001      	adds	r0, #1
 8023014:	f000 80aa 	beq.w	802316c <_svfiprintf_r+0x1c8>
 8023018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802301a:	445a      	add	r2, fp
 802301c:	9209      	str	r2, [sp, #36]	; 0x24
 802301e:	f89a 3000 	ldrb.w	r3, [sl]
 8023022:	2b00      	cmp	r3, #0
 8023024:	f000 80a2 	beq.w	802316c <_svfiprintf_r+0x1c8>
 8023028:	2300      	movs	r3, #0
 802302a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802302e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023032:	f10a 0a01 	add.w	sl, sl, #1
 8023036:	9304      	str	r3, [sp, #16]
 8023038:	9307      	str	r3, [sp, #28]
 802303a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802303e:	931a      	str	r3, [sp, #104]	; 0x68
 8023040:	4654      	mov	r4, sl
 8023042:	2205      	movs	r2, #5
 8023044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023048:	4851      	ldr	r0, [pc, #324]	; (8023190 <_svfiprintf_r+0x1ec>)
 802304a:	f7e6 f811 	bl	8009070 <memchr>
 802304e:	9a04      	ldr	r2, [sp, #16]
 8023050:	b9d8      	cbnz	r0, 802308a <_svfiprintf_r+0xe6>
 8023052:	06d0      	lsls	r0, r2, #27
 8023054:	bf44      	itt	mi
 8023056:	2320      	movmi	r3, #32
 8023058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802305c:	0711      	lsls	r1, r2, #28
 802305e:	bf44      	itt	mi
 8023060:	232b      	movmi	r3, #43	; 0x2b
 8023062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023066:	f89a 3000 	ldrb.w	r3, [sl]
 802306a:	2b2a      	cmp	r3, #42	; 0x2a
 802306c:	d015      	beq.n	802309a <_svfiprintf_r+0xf6>
 802306e:	9a07      	ldr	r2, [sp, #28]
 8023070:	4654      	mov	r4, sl
 8023072:	2000      	movs	r0, #0
 8023074:	f04f 0c0a 	mov.w	ip, #10
 8023078:	4621      	mov	r1, r4
 802307a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802307e:	3b30      	subs	r3, #48	; 0x30
 8023080:	2b09      	cmp	r3, #9
 8023082:	d94e      	bls.n	8023122 <_svfiprintf_r+0x17e>
 8023084:	b1b0      	cbz	r0, 80230b4 <_svfiprintf_r+0x110>
 8023086:	9207      	str	r2, [sp, #28]
 8023088:	e014      	b.n	80230b4 <_svfiprintf_r+0x110>
 802308a:	eba0 0308 	sub.w	r3, r0, r8
 802308e:	fa09 f303 	lsl.w	r3, r9, r3
 8023092:	4313      	orrs	r3, r2
 8023094:	9304      	str	r3, [sp, #16]
 8023096:	46a2      	mov	sl, r4
 8023098:	e7d2      	b.n	8023040 <_svfiprintf_r+0x9c>
 802309a:	9b03      	ldr	r3, [sp, #12]
 802309c:	1d19      	adds	r1, r3, #4
 802309e:	681b      	ldr	r3, [r3, #0]
 80230a0:	9103      	str	r1, [sp, #12]
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	bfbb      	ittet	lt
 80230a6:	425b      	neglt	r3, r3
 80230a8:	f042 0202 	orrlt.w	r2, r2, #2
 80230ac:	9307      	strge	r3, [sp, #28]
 80230ae:	9307      	strlt	r3, [sp, #28]
 80230b0:	bfb8      	it	lt
 80230b2:	9204      	strlt	r2, [sp, #16]
 80230b4:	7823      	ldrb	r3, [r4, #0]
 80230b6:	2b2e      	cmp	r3, #46	; 0x2e
 80230b8:	d10c      	bne.n	80230d4 <_svfiprintf_r+0x130>
 80230ba:	7863      	ldrb	r3, [r4, #1]
 80230bc:	2b2a      	cmp	r3, #42	; 0x2a
 80230be:	d135      	bne.n	802312c <_svfiprintf_r+0x188>
 80230c0:	9b03      	ldr	r3, [sp, #12]
 80230c2:	1d1a      	adds	r2, r3, #4
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	9203      	str	r2, [sp, #12]
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	bfb8      	it	lt
 80230cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80230d0:	3402      	adds	r4, #2
 80230d2:	9305      	str	r3, [sp, #20]
 80230d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80231a0 <_svfiprintf_r+0x1fc>
 80230d8:	7821      	ldrb	r1, [r4, #0]
 80230da:	2203      	movs	r2, #3
 80230dc:	4650      	mov	r0, sl
 80230de:	f7e5 ffc7 	bl	8009070 <memchr>
 80230e2:	b140      	cbz	r0, 80230f6 <_svfiprintf_r+0x152>
 80230e4:	2340      	movs	r3, #64	; 0x40
 80230e6:	eba0 000a 	sub.w	r0, r0, sl
 80230ea:	fa03 f000 	lsl.w	r0, r3, r0
 80230ee:	9b04      	ldr	r3, [sp, #16]
 80230f0:	4303      	orrs	r3, r0
 80230f2:	3401      	adds	r4, #1
 80230f4:	9304      	str	r3, [sp, #16]
 80230f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230fa:	4826      	ldr	r0, [pc, #152]	; (8023194 <_svfiprintf_r+0x1f0>)
 80230fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023100:	2206      	movs	r2, #6
 8023102:	f7e5 ffb5 	bl	8009070 <memchr>
 8023106:	2800      	cmp	r0, #0
 8023108:	d038      	beq.n	802317c <_svfiprintf_r+0x1d8>
 802310a:	4b23      	ldr	r3, [pc, #140]	; (8023198 <_svfiprintf_r+0x1f4>)
 802310c:	bb1b      	cbnz	r3, 8023156 <_svfiprintf_r+0x1b2>
 802310e:	9b03      	ldr	r3, [sp, #12]
 8023110:	3307      	adds	r3, #7
 8023112:	f023 0307 	bic.w	r3, r3, #7
 8023116:	3308      	adds	r3, #8
 8023118:	9303      	str	r3, [sp, #12]
 802311a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802311c:	4433      	add	r3, r6
 802311e:	9309      	str	r3, [sp, #36]	; 0x24
 8023120:	e767      	b.n	8022ff2 <_svfiprintf_r+0x4e>
 8023122:	fb0c 3202 	mla	r2, ip, r2, r3
 8023126:	460c      	mov	r4, r1
 8023128:	2001      	movs	r0, #1
 802312a:	e7a5      	b.n	8023078 <_svfiprintf_r+0xd4>
 802312c:	2300      	movs	r3, #0
 802312e:	3401      	adds	r4, #1
 8023130:	9305      	str	r3, [sp, #20]
 8023132:	4619      	mov	r1, r3
 8023134:	f04f 0c0a 	mov.w	ip, #10
 8023138:	4620      	mov	r0, r4
 802313a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802313e:	3a30      	subs	r2, #48	; 0x30
 8023140:	2a09      	cmp	r2, #9
 8023142:	d903      	bls.n	802314c <_svfiprintf_r+0x1a8>
 8023144:	2b00      	cmp	r3, #0
 8023146:	d0c5      	beq.n	80230d4 <_svfiprintf_r+0x130>
 8023148:	9105      	str	r1, [sp, #20]
 802314a:	e7c3      	b.n	80230d4 <_svfiprintf_r+0x130>
 802314c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023150:	4604      	mov	r4, r0
 8023152:	2301      	movs	r3, #1
 8023154:	e7f0      	b.n	8023138 <_svfiprintf_r+0x194>
 8023156:	ab03      	add	r3, sp, #12
 8023158:	9300      	str	r3, [sp, #0]
 802315a:	462a      	mov	r2, r5
 802315c:	4b0f      	ldr	r3, [pc, #60]	; (802319c <_svfiprintf_r+0x1f8>)
 802315e:	a904      	add	r1, sp, #16
 8023160:	4638      	mov	r0, r7
 8023162:	f3af 8000 	nop.w
 8023166:	1c42      	adds	r2, r0, #1
 8023168:	4606      	mov	r6, r0
 802316a:	d1d6      	bne.n	802311a <_svfiprintf_r+0x176>
 802316c:	89ab      	ldrh	r3, [r5, #12]
 802316e:	065b      	lsls	r3, r3, #25
 8023170:	f53f af2c 	bmi.w	8022fcc <_svfiprintf_r+0x28>
 8023174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023176:	b01d      	add	sp, #116	; 0x74
 8023178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802317c:	ab03      	add	r3, sp, #12
 802317e:	9300      	str	r3, [sp, #0]
 8023180:	462a      	mov	r2, r5
 8023182:	4b06      	ldr	r3, [pc, #24]	; (802319c <_svfiprintf_r+0x1f8>)
 8023184:	a904      	add	r1, sp, #16
 8023186:	4638      	mov	r0, r7
 8023188:	f7ff f91a 	bl	80223c0 <_printf_i>
 802318c:	e7eb      	b.n	8023166 <_svfiprintf_r+0x1c2>
 802318e:	bf00      	nop
 8023190:	2400af88 	.word	0x2400af88
 8023194:	2400af92 	.word	0x2400af92
 8023198:	00000000 	.word	0x00000000
 802319c:	08022eef 	.word	0x08022eef
 80231a0:	2400af8e 	.word	0x2400af8e

080231a4 <_read_r>:
 80231a4:	b538      	push	{r3, r4, r5, lr}
 80231a6:	4d07      	ldr	r5, [pc, #28]	; (80231c4 <_read_r+0x20>)
 80231a8:	4604      	mov	r4, r0
 80231aa:	4608      	mov	r0, r1
 80231ac:	4611      	mov	r1, r2
 80231ae:	2200      	movs	r2, #0
 80231b0:	602a      	str	r2, [r5, #0]
 80231b2:	461a      	mov	r2, r3
 80231b4:	f7e7 fbe6 	bl	800a984 <_read>
 80231b8:	1c43      	adds	r3, r0, #1
 80231ba:	d102      	bne.n	80231c2 <_read_r+0x1e>
 80231bc:	682b      	ldr	r3, [r5, #0]
 80231be:	b103      	cbz	r3, 80231c2 <_read_r+0x1e>
 80231c0:	6023      	str	r3, [r4, #0]
 80231c2:	bd38      	pop	{r3, r4, r5, pc}
 80231c4:	24034b0c 	.word	0x24034b0c

080231c8 <_raise_r>:
 80231c8:	291f      	cmp	r1, #31
 80231ca:	b538      	push	{r3, r4, r5, lr}
 80231cc:	4604      	mov	r4, r0
 80231ce:	460d      	mov	r5, r1
 80231d0:	d904      	bls.n	80231dc <_raise_r+0x14>
 80231d2:	2316      	movs	r3, #22
 80231d4:	6003      	str	r3, [r0, #0]
 80231d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80231da:	bd38      	pop	{r3, r4, r5, pc}
 80231dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80231de:	b112      	cbz	r2, 80231e6 <_raise_r+0x1e>
 80231e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80231e4:	b94b      	cbnz	r3, 80231fa <_raise_r+0x32>
 80231e6:	4620      	mov	r0, r4
 80231e8:	f000 f830 	bl	802324c <_getpid_r>
 80231ec:	462a      	mov	r2, r5
 80231ee:	4601      	mov	r1, r0
 80231f0:	4620      	mov	r0, r4
 80231f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80231f6:	f000 b817 	b.w	8023228 <_kill_r>
 80231fa:	2b01      	cmp	r3, #1
 80231fc:	d00a      	beq.n	8023214 <_raise_r+0x4c>
 80231fe:	1c59      	adds	r1, r3, #1
 8023200:	d103      	bne.n	802320a <_raise_r+0x42>
 8023202:	2316      	movs	r3, #22
 8023204:	6003      	str	r3, [r0, #0]
 8023206:	2001      	movs	r0, #1
 8023208:	e7e7      	b.n	80231da <_raise_r+0x12>
 802320a:	2400      	movs	r4, #0
 802320c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023210:	4628      	mov	r0, r5
 8023212:	4798      	blx	r3
 8023214:	2000      	movs	r0, #0
 8023216:	e7e0      	b.n	80231da <_raise_r+0x12>

08023218 <raise>:
 8023218:	4b02      	ldr	r3, [pc, #8]	; (8023224 <raise+0xc>)
 802321a:	4601      	mov	r1, r0
 802321c:	6818      	ldr	r0, [r3, #0]
 802321e:	f7ff bfd3 	b.w	80231c8 <_raise_r>
 8023222:	bf00      	nop
 8023224:	24009074 	.word	0x24009074

08023228 <_kill_r>:
 8023228:	b538      	push	{r3, r4, r5, lr}
 802322a:	4d07      	ldr	r5, [pc, #28]	; (8023248 <_kill_r+0x20>)
 802322c:	2300      	movs	r3, #0
 802322e:	4604      	mov	r4, r0
 8023230:	4608      	mov	r0, r1
 8023232:	4611      	mov	r1, r2
 8023234:	602b      	str	r3, [r5, #0]
 8023236:	f7e7 fb95 	bl	800a964 <_kill>
 802323a:	1c43      	adds	r3, r0, #1
 802323c:	d102      	bne.n	8023244 <_kill_r+0x1c>
 802323e:	682b      	ldr	r3, [r5, #0]
 8023240:	b103      	cbz	r3, 8023244 <_kill_r+0x1c>
 8023242:	6023      	str	r3, [r4, #0]
 8023244:	bd38      	pop	{r3, r4, r5, pc}
 8023246:	bf00      	nop
 8023248:	24034b0c 	.word	0x24034b0c

0802324c <_getpid_r>:
 802324c:	f7e7 bb88 	b.w	800a960 <_getpid>

08023250 <_fstat_r>:
 8023250:	b538      	push	{r3, r4, r5, lr}
 8023252:	4d07      	ldr	r5, [pc, #28]	; (8023270 <_fstat_r+0x20>)
 8023254:	2300      	movs	r3, #0
 8023256:	4604      	mov	r4, r0
 8023258:	4608      	mov	r0, r1
 802325a:	4611      	mov	r1, r2
 802325c:	602b      	str	r3, [r5, #0]
 802325e:	f7e7 fbb1 	bl	800a9c4 <_fstat>
 8023262:	1c43      	adds	r3, r0, #1
 8023264:	d102      	bne.n	802326c <_fstat_r+0x1c>
 8023266:	682b      	ldr	r3, [r5, #0]
 8023268:	b103      	cbz	r3, 802326c <_fstat_r+0x1c>
 802326a:	6023      	str	r3, [r4, #0]
 802326c:	bd38      	pop	{r3, r4, r5, pc}
 802326e:	bf00      	nop
 8023270:	24034b0c 	.word	0x24034b0c

08023274 <_isatty_r>:
 8023274:	b538      	push	{r3, r4, r5, lr}
 8023276:	4d06      	ldr	r5, [pc, #24]	; (8023290 <_isatty_r+0x1c>)
 8023278:	2300      	movs	r3, #0
 802327a:	4604      	mov	r4, r0
 802327c:	4608      	mov	r0, r1
 802327e:	602b      	str	r3, [r5, #0]
 8023280:	f7e7 fba6 	bl	800a9d0 <_isatty>
 8023284:	1c43      	adds	r3, r0, #1
 8023286:	d102      	bne.n	802328e <_isatty_r+0x1a>
 8023288:	682b      	ldr	r3, [r5, #0]
 802328a:	b103      	cbz	r3, 802328e <_isatty_r+0x1a>
 802328c:	6023      	str	r3, [r4, #0]
 802328e:	bd38      	pop	{r3, r4, r5, pc}
 8023290:	24034b0c 	.word	0x24034b0c

08023294 <_malloc_usable_size_r>:
 8023294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023298:	1f18      	subs	r0, r3, #4
 802329a:	2b00      	cmp	r3, #0
 802329c:	bfbc      	itt	lt
 802329e:	580b      	ldrlt	r3, [r1, r0]
 80232a0:	18c0      	addlt	r0, r0, r3
 80232a2:	4770      	bx	lr

080232a4 <_init>:
 80232a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232a6:	bf00      	nop
 80232a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232aa:	bc08      	pop	{r3}
 80232ac:	469e      	mov	lr, r3
 80232ae:	4770      	bx	lr

080232b0 <_fini>:
 80232b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232b2:	bf00      	nop
 80232b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232b6:	bc08      	pop	{r3}
 80232b8:	469e      	mov	lr, r3
 80232ba:	4770      	bx	lr
