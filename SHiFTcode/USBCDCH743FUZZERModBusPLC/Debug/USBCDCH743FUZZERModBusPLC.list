
USBCDCH743FUZZERModBusPLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000ea28  08008000  08008000  00018000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  08016a28  08016a28  00047404  2**0
                  CONTENTS
  3 .ARM          00000008  08016a28  08016a28  00026a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  08016a30  08016a30  00047404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   0000000c  08016a30  08016a30  00026a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08016a3c  08016a3c  00026a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .privileged_data 00008000  24000000  08016a40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011b8  24008000  0801ea40  00038000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025b44  24010000  0801fbf8  00040000  2**16
                  ALLOC
 10 ._user_heap_stack 00001400  24036000  24036000  00046000  2**13
                  ALLOC
 11 ._asan_var    00000004  24037400  24037400  00047400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00047404  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f6d1  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007bae  00000000  00000000  00086b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000262fe  00000000  00000000  0008e6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002528  00000000  00000000  000b49b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b98  00000000  00000000  000b6ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d84  00000000  00000000  000b9a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cdf5  00000000  00000000  000df7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  000ec5e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b3c  00000000  00000000  000ec634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 08 24 f5 a2 00 08 f5 98 00 08 15 99 00 08     ...$............
 8000010:	d5 98 00 08 35 99 00 08 55 99 00 08 00 00 00 00     ....5...U.......
	...
 800002c:	93 48 00 08 39 a1 00 08 00 00 00 00 bd 47 00 08     .H..9........G..
 800003c:	65 48 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     eH..E...E...E...
 800004c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800005c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800006c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800007c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800008c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800009c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80000ac:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80000bc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80000cc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80000dc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 00 00 00 00     E...E...E.......
 80000ec:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80000fc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800010c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800011c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800012c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800013c:	45 a3 00 08 00 00 00 00 00 00 00 00 00 00 00 00     E...............
 800014c:	00 00 00 00 45 a3 00 08 45 a3 00 08 45 a3 00 08     ....E...E...E...
 800015c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800016c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800017c:	00 00 00 00 3d a1 00 08 45 a3 00 08 45 a3 00 08     ....=...E...E...
 800018c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800019c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80001ac:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80001bc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80001cc:	45 a3 00 08 45 a3 00 08 4d a1 00 08 45 a3 00 08     E...E...M...E...
 80001dc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80001ec:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 80001fc:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800020c:	45 a3 00 08 45 a3 00 08 5d a1 00 08 45 a3 00 08     E...E...]...E...
 800021c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800022c:	00 00 00 00 45 a3 00 08 45 a3 00 08 00 00 00 00     ....E...E.......
 800023c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800024c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800025c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800026c:	45 a3 00 08 45 a3 00 08 45 a3 00 08 45 a3 00 08     E...E...E...E...
 800027c:	00 00 00 00 45 a3 00 08 45 a3 00 08 45 a3 00 08     ....E...E...E...
	...
 8000294:	45 a3 00 08                                         E...

08000298 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000298:	b538      	push	{r3, r4, r5, lr}
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800029a:	2020      	movs	r0, #32
 800029c:	f004 fc18 	bl	8004ad0 <pvPortMalloc>

        if( pxEventBits != NULL )
 80002a0:	4604      	mov	r4, r0
 80002a2:	b128      	cbz	r0, 80002b0 <xEventGroupCreate+0x18>
        {
            pxEventBits->uxEventBits = 0;
 80002a4:	2500      	movs	r5, #0
 80002a6:	f840 5b04 	str.w	r5, [r0], #4
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80002aa:	f000 f9e7 	bl	800067c <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 80002ae:	7725      	strb	r5, [r4, #28]
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    }
 80002b0:	4620      	mov	r0, r4
 80002b2:	bd38      	pop	{r3, r4, r5, pc}

080002b4 <xEventGroupCreateStatic>:
        configASSERT( pxEventGroupBuffer );
 80002b4:	b180      	cbz	r0, 80002d8 <xEventGroupCreateStatic+0x24>
    {
 80002b6:	b510      	push	{r4, lr}
 80002b8:	b082      	sub	sp, #8
 80002ba:	4604      	mov	r4, r0
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 80002bc:	2320      	movs	r3, #32
 80002be:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 80002c0:	9b01      	ldr	r3, [sp, #4]
 80002c2:	2b20      	cmp	r3, #32
 80002c4:	d011      	beq.n	80002ea <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ca:	f383 8811 	msr	BASEPRI, r3
 80002ce:	f3bf 8f6f 	isb	sy
 80002d2:	f3bf 8f4f 	dsb	sy
 80002d6:	e7fe      	b.n	80002d6 <xEventGroupCreateStatic+0x22>
 80002d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002dc:	f383 8811 	msr	BASEPRI, r3
 80002e0:	f3bf 8f6f 	isb	sy
 80002e4:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventGroupBuffer );
 80002e8:	e7fe      	b.n	80002e8 <xEventGroupCreateStatic+0x34>
            pxEventBits->uxEventBits = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80002f0:	f000 f9c4 	bl	800067c <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	7723      	strb	r3, [r4, #28]
    }
 80002f8:	4620      	mov	r0, r4
 80002fa:	b002      	add	sp, #8
 80002fc:	bd10      	pop	{r4, pc}

080002fe <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80002fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8000302:	b178      	cbz	r0, 8000324 <xEventGroupWaitBits+0x26>
 8000304:	460c      	mov	r4, r1
 8000306:	4616      	mov	r6, r2
 8000308:	461d      	mov	r5, r3
 800030a:	4607      	mov	r7, r0
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800030c:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8000310:	d011      	beq.n	8000336 <xEventGroupWaitBits+0x38>
 8000312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000316:	f383 8811 	msr	BASEPRI, r3
 800031a:	f3bf 8f6f 	isb	sy
 800031e:	f3bf 8f4f 	dsb	sy
 8000322:	e7fe      	b.n	8000322 <xEventGroupWaitBits+0x24>
 8000324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000328:	f383 8811 	msr	BASEPRI, r3
 800032c:	f3bf 8f6f 	isb	sy
 8000330:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 8000334:	e7fe      	b.n	8000334 <xEventGroupWaitBits+0x36>
    configASSERT( uxBitsToWaitFor != 0 );
 8000336:	b941      	cbnz	r1, 800034a <xEventGroupWaitBits+0x4c>
 8000338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800033c:	f383 8811 	msr	BASEPRI, r3
 8000340:	f3bf 8f6f 	isb	sy
 8000344:	f3bf 8f4f 	dsb	sy
 8000348:	e7fe      	b.n	8000348 <xEventGroupWaitBits+0x4a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800034a:	f003 fc5b 	bl	8003c04 <xTaskGetSchedulerState>
 800034e:	b950      	cbnz	r0, 8000366 <xEventGroupWaitBits+0x68>
 8000350:	9b08      	ldr	r3, [sp, #32]
 8000352:	b143      	cbz	r3, 8000366 <xEventGroupWaitBits+0x68>
 8000354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000358:	f383 8811 	msr	BASEPRI, r3
 800035c:	f3bf 8f6f 	isb	sy
 8000360:	f3bf 8f4f 	dsb	sy
 8000364:	e7fe      	b.n	8000364 <xEventGroupWaitBits+0x66>
        }
    #endif

    vTaskSuspendAll();
 8000366:	f002 faff 	bl	8002968 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800036a:	f8d7 9000 	ldr.w	r9, [r7]
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
    BaseType_t xWaitConditionMet = pdFALSE;

    if( xWaitForAllBits == pdFALSE )
 800036e:	bb4d      	cbnz	r5, 80003c4 <xEventGroupWaitBits+0xc6>
        if( xWaitConditionMet != pdFALSE )
 8000370:	ea14 0f09 	tst.w	r4, r9
 8000374:	d129      	bne.n	80003ca <xEventGroupWaitBits+0xcc>
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000376:	9b08      	ldr	r3, [sp, #32]
 8000378:	b35b      	cbz	r3, 80003d2 <xEventGroupWaitBits+0xd4>
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800037a:	2e00      	cmp	r6, #0
 800037c:	bf18      	it	ne
 800037e:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
            if( xWaitForAllBits != pdFALSE )
 8000382:	b10d      	cbz	r5, 8000388 <xEventGroupWaitBits+0x8a>
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8000384:	f048 6880 	orr.w	r8, r8, #67108864	; 0x4000000
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000388:	9a08      	ldr	r2, [sp, #32]
 800038a:	ea48 0104 	orr.w	r1, r8, r4
 800038e:	1d38      	adds	r0, r7, #4
 8000390:	f003 f9c2 	bl	8003718 <vTaskPlaceOnUnorderedEventList>
    xAlreadyYielded = xTaskResumeAll();
 8000394:	f002 ff7e 	bl	8003294 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8000398:	b948      	cbnz	r0, 80003ae <xEventGroupWaitBits+0xb0>
            portYIELD_WITHIN_API();
 800039a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800039e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80003a6:	f3bf 8f4f 	dsb	sy
 80003aa:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80003ae:	f003 fc0b 	bl	8003bc8 <uxTaskResetEventItemValue>
 80003b2:	4681      	mov	r9, r0
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80003b4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80003b8:	d00e      	beq.n	80003d8 <xEventGroupWaitBits+0xda>
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80003ba:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80003be:	4648      	mov	r0, r9
 80003c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( xWaitConditionMet != pdFALSE )
 80003c4:	ea34 0309 	bics.w	r3, r4, r9
 80003c8:	d1d5      	bne.n	8000376 <xEventGroupWaitBits+0x78>
            if( xClearOnExit != pdFALSE )
 80003ca:	b116      	cbz	r6, 80003d2 <xEventGroupWaitBits+0xd4>
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80003cc:	ea29 0404 	bic.w	r4, r9, r4
 80003d0:	603c      	str	r4, [r7, #0]
    xAlreadyYielded = xTaskResumeAll();
 80003d2:	f002 ff5f 	bl	8003294 <xTaskResumeAll>
    if( xTicksToWait != ( TickType_t ) 0 )
 80003d6:	e7f2      	b.n	80003be <xEventGroupWaitBits+0xc0>
            taskENTER_CRITICAL();
 80003d8:	f009 f8b8 	bl	800954c <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80003dc:	f8d7 9000 	ldr.w	r9, [r7]
    if( xWaitForAllBits == pdFALSE )
 80003e0:	b94d      	cbnz	r5, 80003f6 <xEventGroupWaitBits+0xf8>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80003e2:	ea14 0f09 	tst.w	r4, r9
 80003e6:	bf14      	ite	ne
 80003e8:	2301      	movne	r3, #1
 80003ea:	2300      	moveq	r3, #0
                    if( xClearOnExit != pdFALSE )
 80003ec:	b106      	cbz	r6, 80003f0 <xEventGroupWaitBits+0xf2>
 80003ee:	b943      	cbnz	r3, 8000402 <xEventGroupWaitBits+0x104>
            taskEXIT_CRITICAL();
 80003f0:	f009 f8c0 	bl	8009574 <vPortExitCritical>
 80003f4:	e7e1      	b.n	80003ba <xEventGroupWaitBits+0xbc>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80003f6:	ea34 0309 	bics.w	r3, r4, r9
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	e7f4      	b.n	80003ec <xEventGroupWaitBits+0xee>
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000402:	ea29 0404 	bic.w	r4, r9, r4
 8000406:	603c      	str	r4, [r7, #0]
 8000408:	e7f2      	b.n	80003f0 <xEventGroupWaitBits+0xf2>

0800040a <xEventGroupClearBits>:
    configASSERT( xEventGroup );
 800040a:	b170      	cbz	r0, 800042a <xEventGroupClearBits+0x20>
{
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	460c      	mov	r4, r1
 8000410:	4605      	mov	r5, r0
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000412:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8000416:	d011      	beq.n	800043c <xEventGroupClearBits+0x32>
 8000418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800041c:	f383 8811 	msr	BASEPRI, r3
 8000420:	f3bf 8f6f 	isb	sy
 8000424:	f3bf 8f4f 	dsb	sy
 8000428:	e7fe      	b.n	8000428 <xEventGroupClearBits+0x1e>
 800042a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800042e:	f383 8811 	msr	BASEPRI, r3
 8000432:	f3bf 8f6f 	isb	sy
 8000436:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 800043a:	e7fe      	b.n	800043a <xEventGroupClearBits+0x30>
    taskENTER_CRITICAL();
 800043c:	f009 f886 	bl	800954c <vPortEnterCritical>
        uxReturn = pxEventBits->uxEventBits;
 8000440:	682e      	ldr	r6, [r5, #0]
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000442:	ea26 0404 	bic.w	r4, r6, r4
 8000446:	602c      	str	r4, [r5, #0]
    taskEXIT_CRITICAL();
 8000448:	f009 f894 	bl	8009574 <vPortExitCritical>
}
 800044c:	4630      	mov	r0, r6
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <vEventGroupClearBitsCallback>:
{
 8000450:	b508      	push	{r3, lr}
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000452:	f7ff ffda 	bl	800040a <xEventGroupClearBits>
}
 8000456:	bd08      	pop	{r3, pc}

08000458 <xEventGroupClearBitsFromISR>:
    {
 8000458:	b508      	push	{r3, lr}
 800045a:	460a      	mov	r2, r1
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800045c:	2300      	movs	r3, #0
 800045e:	4601      	mov	r1, r0
 8000460:	4801      	ldr	r0, [pc, #4]	; (8000468 <xEventGroupClearBitsFromISR+0x10>)
 8000462:	f003 ffb5 	bl	80043d0 <xTimerPendFunctionCallFromISR>
    }
 8000466:	bd08      	pop	{r3, pc}
 8000468:	08000451 	.word	0x08000451

0800046c <xEventGroupSetBits>:
    configASSERT( xEventGroup );
 800046c:	b178      	cbz	r0, 800048e <xEventGroupSetBits+0x22>
{
 800046e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000472:	460e      	mov	r6, r1
 8000474:	4605      	mov	r5, r0
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000476:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 800047a:	d011      	beq.n	80004a0 <xEventGroupSetBits+0x34>
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
 800048c:	e7fe      	b.n	800048c <xEventGroupSetBits+0x20>
 800048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
    configASSERT( xEventGroup );
 800049e:	e7fe      	b.n	800049e <xEventGroupSetBits+0x32>
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a0:	f100 070c 	add.w	r7, r0, #12
    vTaskSuspendAll();
 80004a4:	f002 fa60 	bl	8002968 <vTaskSuspendAll>
        pxListItem = listGET_HEAD_ENTRY( pxList );
 80004a8:	692c      	ldr	r4, [r5, #16]
        pxEventBits->uxEventBits |= uxBitsToSet;
 80004aa:	682b      	ldr	r3, [r5, #0]
 80004ac:	4333      	orrs	r3, r6
 80004ae:	602b      	str	r3, [r5, #0]
        while( pxListItem != pxListEnd )
 80004b0:	42a7      	cmp	r7, r4
 80004b2:	d118      	bne.n	80004e6 <xEventGroupSetBits+0x7a>
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	ea23 0308 	bic.w	r3, r3, r8
 80004ba:	602b      	str	r3, [r5, #0]
    ( void ) xTaskResumeAll();
 80004bc:	f002 feea 	bl	8003294 <xTaskResumeAll>
}
 80004c0:	6828      	ldr	r0, [r5, #0]
 80004c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80004c6:	6829      	ldr	r1, [r5, #0]
 80004c8:	ea32 0101 	bics.w	r1, r2, r1
 80004cc:	d109      	bne.n	80004e2 <xEventGroupSetBits+0x76>
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80004ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
                    uxBitsToClear |= uxBitsWaitedFor;
 80004d2:	bf18      	it	ne
 80004d4:	ea48 0802 	orrne.w	r8, r8, r2
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80004d8:	6829      	ldr	r1, [r5, #0]
 80004da:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80004de:	f003 fa15 	bl	800390c <vTaskRemoveFromUnorderedEventList>
        while( pxListItem != pxListEnd )
 80004e2:	42a7      	cmp	r7, r4
 80004e4:	d0e6      	beq.n	80004b4 <xEventGroupSetBits+0x48>
            pxNext = listGET_NEXT( pxListItem );
 80004e6:	4620      	mov	r0, r4
 80004e8:	6864      	ldr	r4, [r4, #4]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80004ea:	6803      	ldr	r3, [r0, #0]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004ec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80004f0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80004f4:	d1e7      	bne.n	80004c6 <xEventGroupSetBits+0x5a>
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80004f6:	6829      	ldr	r1, [r5, #0]
 80004f8:	420a      	tst	r2, r1
 80004fa:	d1e8      	bne.n	80004ce <xEventGroupSetBits+0x62>
 80004fc:	e7f1      	b.n	80004e2 <xEventGroupSetBits+0x76>

080004fe <vEventGroupSetBitsCallback>:
{
 80004fe:	b508      	push	{r3, lr}
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000500:	f7ff ffb4 	bl	800046c <xEventGroupSetBits>
}
 8000504:	bd08      	pop	{r3, pc}

08000506 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8000506:	b508      	push	{r3, lr}
 8000508:	4613      	mov	r3, r2
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800050a:	460a      	mov	r2, r1
 800050c:	4601      	mov	r1, r0
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <xEventGroupSetBitsFromISR+0x12>)
 8000510:	f003 ff5e 	bl	80043d0 <xTimerPendFunctionCallFromISR>

        return xReturn;
    }
 8000514:	bd08      	pop	{r3, pc}
 8000516:	bf00      	nop
 8000518:	080004ff 	.word	0x080004ff

0800051c <xEventGroupSync>:
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800051c:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000520:	d008      	beq.n	8000534 <xEventGroupSync+0x18>
 8000522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000526:	f383 8811 	msr	BASEPRI, r3
 800052a:	f3bf 8f6f 	isb	sy
 800052e:	f3bf 8f4f 	dsb	sy
 8000532:	e7fe      	b.n	8000532 <xEventGroupSync+0x16>
{
 8000534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000538:	4607      	mov	r7, r0
 800053a:	460e      	mov	r6, r1
 800053c:	4614      	mov	r4, r2
 800053e:	461d      	mov	r5, r3
    configASSERT( uxBitsToWaitFor != 0 );
 8000540:	b942      	cbnz	r2, 8000554 <xEventGroupSync+0x38>
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	e7fe      	b.n	8000552 <xEventGroupSync+0x36>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000554:	f003 fb56 	bl	8003c04 <xTaskGetSchedulerState>
 8000558:	b14d      	cbz	r5, 800056e <xEventGroupSync+0x52>
 800055a:	b940      	cbnz	r0, 800056e <xEventGroupSync+0x52>
 800055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000560:	f383 8811 	msr	BASEPRI, r3
 8000564:	f3bf 8f6f 	isb	sy
 8000568:	f3bf 8f4f 	dsb	sy
 800056c:	e7fe      	b.n	800056c <xEventGroupSync+0x50>
    vTaskSuspendAll();
 800056e:	f002 f9fb 	bl	8002968 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000572:	f8d7 8000 	ldr.w	r8, [r7]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000576:	4631      	mov	r1, r6
 8000578:	4638      	mov	r0, r7
 800057a:	f7ff ff77 	bl	800046c <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800057e:	ea48 0606 	orr.w	r6, r8, r6
 8000582:	ea34 0306 	bics.w	r3, r4, r6
 8000586:	d004      	beq.n	8000592 <xEventGroupSync+0x76>
            if( xTicksToWait != ( TickType_t ) 0 )
 8000588:	b945      	cbnz	r5, 800059c <xEventGroupSync+0x80>
                uxReturn = pxEventBits->uxEventBits;
 800058a:	683e      	ldr	r6, [r7, #0]
    xAlreadyYielded = xTaskResumeAll();
 800058c:	f002 fe82 	bl	8003294 <xTaskResumeAll>
    if( xTicksToWait != ( TickType_t ) 0 )
 8000590:	e015      	b.n	80005be <xEventGroupSync+0xa2>
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	ea23 0304 	bic.w	r3, r3, r4
 8000598:	603b      	str	r3, [r7, #0]
            xTicksToWait = 0;
 800059a:	e7f7      	b.n	800058c <xEventGroupSync+0x70>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 800059c:	462a      	mov	r2, r5
 800059e:	f044 61a0 	orr.w	r1, r4, #83886080	; 0x5000000
 80005a2:	1d38      	adds	r0, r7, #4
 80005a4:	f003 f8b8 	bl	8003718 <vTaskPlaceOnUnorderedEventList>
    xAlreadyYielded = xTaskResumeAll();
 80005a8:	f002 fe74 	bl	8003294 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80005ac:	b150      	cbz	r0, 80005c4 <xEventGroupSync+0xa8>
        uxReturn = uxTaskResetEventItemValue();
 80005ae:	f003 fb0b 	bl	8003bc8 <uxTaskResetEventItemValue>
 80005b2:	4606      	mov	r6, r0
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80005b4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80005b8:	d00f      	beq.n	80005da <xEventGroupSync+0xbe>
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80005ba:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
}
 80005be:	4630      	mov	r0, r6
 80005c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            portYIELD_WITHIN_API();
 80005c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80005c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	e7e9      	b.n	80005ae <xEventGroupSync+0x92>
            taskENTER_CRITICAL();
 80005da:	f008 ffb7 	bl	800954c <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80005de:	683e      	ldr	r6, [r7, #0]
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80005e0:	ea34 0306 	bics.w	r3, r4, r6
 80005e4:	d002      	beq.n	80005ec <xEventGroupSync+0xd0>
            taskEXIT_CRITICAL();
 80005e6:	f008 ffc5 	bl	8009574 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 80005ea:	e7e6      	b.n	80005ba <xEventGroupSync+0x9e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80005ec:	ea26 0404 	bic.w	r4, r6, r4
 80005f0:	603c      	str	r4, [r7, #0]
 80005f2:	e7f8      	b.n	80005e6 <xEventGroupSync+0xca>

080005f4 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80005f4:	f3ef 8311 	mrs	r3, BASEPRI
 80005f8:	f04f 0250 	mov.w	r2, #80	; 0x50
 80005fc:	f382 8811 	msr	BASEPRI, r2
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
        uxReturn = pxEventBits->uxEventBits;
 8000608:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800060a:	f383 8811 	msr	BASEPRI, r3
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800060e:	4770      	bx	lr

08000610 <vEventGroupDelete>:
    configASSERT( pxEventBits );
 8000610:	b1b8      	cbz	r0, 8000642 <vEventGroupDelete+0x32>
{
 8000612:	b570      	push	{r4, r5, r6, lr}
 8000614:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8000616:	f002 f9a7 	bl	8002968 <vTaskSuspendAll>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800061a:	6863      	ldr	r3, [r4, #4]
 800061c:	b163      	cbz	r3, 8000638 <vEventGroupDelete+0x28>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800061e:	f104 050c 	add.w	r5, r4, #12
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000622:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000626:	6920      	ldr	r0, [r4, #16]
 8000628:	42a8      	cmp	r0, r5
 800062a:	d013      	beq.n	8000654 <vEventGroupDelete+0x44>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800062c:	4631      	mov	r1, r6
 800062e:	f003 f96d 	bl	800390c <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f6      	bne.n	8000626 <vEventGroupDelete+0x16>
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8000638:	7f23      	ldrb	r3, [r4, #28]
 800063a:	b1a3      	cbz	r3, 8000666 <vEventGroupDelete+0x56>
    ( void ) xTaskResumeAll();
 800063c:	f002 fe2a 	bl	8003294 <xTaskResumeAll>
}
 8000640:	bd70      	pop	{r4, r5, r6, pc}
    __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventBits );
 8000652:	e7fe      	b.n	8000652 <vEventGroupDelete+0x42>
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000664:	e7fe      	b.n	8000664 <vEventGroupDelete+0x54>
                    vPortFree( pxEventBits );
 8000666:	4620      	mov	r0, r4
 8000668:	f004 fad0 	bl	8004c0c <vPortFree>
 800066c:	e7e6      	b.n	800063c <vEventGroupDelete+0x2c>

0800066e <uxEventGroupGetNumber>:
    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */

        if( xEventGroup == NULL )
 800066e:	b108      	cbz	r0, 8000674 <uxEventGroupGetNumber+0x6>
        {
            xReturn = 0;
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000670:	6980      	ldr	r0, [r0, #24]
 8000672:	4770      	bx	lr
            xReturn = 0;
 8000674:	2000      	movs	r0, #0
        }

        return xReturn;
    }
 8000676:	4770      	bx	lr

08000678 <vEventGroupSetNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000678:	6181      	str	r1, [r0, #24]
    }
 800067a:	4770      	bx	lr

0800067c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800067c:	f100 0308 	add.w	r3, r0, #8
 8000680:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000686:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000688:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800068a:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000690:	4770      	bx	lr

08000692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000692:	2300      	movs	r3, #0
 8000694:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000696:	4770      	bx	lr

08000698 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000698:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800069a:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800069c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80006a0:	d011      	beq.n	80006c6 <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006a2:	f100 0308 	add.w	r3, r0, #8
 80006a6:	461c      	mov	r4, r3
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	42aa      	cmp	r2, r5
 80006ae:	d9fa      	bls.n	80006a6 <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006b0:	6863      	ldr	r3, [r4, #4]
 80006b2:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006b4:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006b6:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80006b8:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006ba:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 80006bc:	6803      	ldr	r3, [r0, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	6003      	str	r3, [r0, #0]
}
 80006c2:	bc30      	pop	{r4, r5}
 80006c4:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80006c6:	6904      	ldr	r4, [r0, #16]
 80006c8:	e7f2      	b.n	80006b0 <vListInsert+0x18>

080006ca <vListInsertEnd>:
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006ca:	6843      	ldr	r3, [r0, #4]
    pxNewListItem->pxNext = pxIndex;
 80006cc:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	608a      	str	r2, [r1, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006d2:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006d4:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 80006d6:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80006d8:	6803      	ldr	r3, [r0, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	6003      	str	r3, [r0, #0]
}
 80006de:	4770      	bx	lr

080006e0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006e0:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006e2:	6841      	ldr	r1, [r0, #4]
 80006e4:	6882      	ldr	r2, [r0, #8]
 80006e6:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006e8:	6841      	ldr	r1, [r0, #4]
 80006ea:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ec:	685a      	ldr	r2, [r3, #4]
 80006ee:	4282      	cmp	r2, r0
 80006f0:	d006      	beq.n	8000700 <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006f2:	2200      	movs	r2, #0
 80006f4:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	3a01      	subs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006fc:	6818      	ldr	r0, [r3, #0]
}
 80006fe:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000700:	6882      	ldr	r2, [r0, #8]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	e7f5      	b.n	80006f2 <uxListRemove+0x12>
	...

08000708 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	4605      	mov	r5, r0

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800070c:	f008 ff1e 	bl	800954c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000710:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8000714:	b264      	sxtb	r4, r4

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000716:	2c00      	cmp	r4, #0
 8000718:	dd0f      	ble.n	800073a <prvUnlockQueue+0x32>
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800071a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800071e:	e002      	b.n	8000726 <prvUnlockQueue+0x1e>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000720:	3c01      	subs	r4, #1
 8000722:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000724:	b14c      	cbz	r4, 800073a <prvUnlockQueue+0x32>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000728:	b13b      	cbz	r3, 800073a <prvUnlockQueue+0x32>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800072a:	4630      	mov	r0, r6
 800072c:	f003 f85c 	bl	80037e8 <xTaskRemoveFromEventList>
 8000730:	2800      	cmp	r0, #0
 8000732:	d0f5      	beq.n	8000720 <prvUnlockQueue+0x18>
                            vTaskMissedYield();
 8000734:	f003 fa5e 	bl	8003bf4 <vTaskMissedYield>
 8000738:	e7f2      	b.n	8000720 <prvUnlockQueue+0x18>
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800073a:	23ff      	movs	r3, #255	; 0xff
 800073c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000740:	f008 ff18 	bl	8009574 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000744:	f008 ff02 	bl	800954c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000748:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800074c:	b264      	sxtb	r4, r4

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800074e:	2c00      	cmp	r4, #0
 8000750:	dd0f      	ble.n	8000772 <prvUnlockQueue+0x6a>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000752:	f105 0610 	add.w	r6, r5, #16
 8000756:	e002      	b.n	800075e <prvUnlockQueue+0x56>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000758:	3c01      	subs	r4, #1
 800075a:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800075c:	b14c      	cbz	r4, 8000772 <prvUnlockQueue+0x6a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800075e:	692b      	ldr	r3, [r5, #16]
 8000760:	b13b      	cbz	r3, 8000772 <prvUnlockQueue+0x6a>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000762:	4630      	mov	r0, r6
 8000764:	f003 f840 	bl	80037e8 <xTaskRemoveFromEventList>
 8000768:	2800      	cmp	r0, #0
 800076a:	d0f5      	beq.n	8000758 <prvUnlockQueue+0x50>
                    vTaskMissedYield();
 800076c:	f003 fa42 	bl	8003bf4 <vTaskMissedYield>
 8000770:	e7f2      	b.n	8000758 <prvUnlockQueue+0x50>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000772:	23ff      	movs	r3, #255	; 0xff
 8000774:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000778:	f008 fefc 	bl	8009574 <vPortExitCritical>
}
 800077c:	bd70      	pop	{r4, r5, r6, pc}

0800077e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800077e:	b510      	push	{r4, lr}
 8000780:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000782:	f008 fee3 	bl	800954c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000786:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8000788:	f008 fef4 	bl	8009574 <vPortExitCritical>

    return xReturn;
}
 800078c:	fab4 f084 	clz	r0, r4
 8000790:	0940      	lsrs	r0, r0, #5
 8000792:	bd10      	pop	{r4, pc}

08000794 <prvCopyDataToQueue>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
 8000798:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800079a:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800079c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800079e:	b95a      	cbnz	r2, 80007b8 <prvCopyDataToQueue+0x24>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007a0:	6803      	ldr	r3, [r0, #0]
 80007a2:	b11b      	cbz	r3, 80007ac <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
 80007a4:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80007a6:	3601      	adds	r6, #1
 80007a8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80007ac:	6880      	ldr	r0, [r0, #8]
 80007ae:	f003 faa5 	bl	8003cfc <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	e7f6      	b.n	80007a6 <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
 80007b8:	b96d      	cbnz	r5, 80007d6 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007ba:	6840      	ldr	r0, [r0, #4]
 80007bc:	f008 f9c4 	bl	8008b48 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007c0:	6863      	ldr	r3, [r4, #4]
 80007c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007c4:	4413      	add	r3, r2
 80007c6:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80007c8:	68a2      	ldr	r2, [r4, #8]
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d319      	bcc.n	8000802 <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7e7      	b.n	80007a6 <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80007d6:	68c0      	ldr	r0, [r0, #12]
 80007d8:	f008 f9b6 	bl	8008b48 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80007dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007de:	4251      	negs	r1, r2
 80007e0:	68e3      	ldr	r3, [r4, #12]
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d202      	bcs.n	80007f2 <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80007ec:	68a3      	ldr	r3, [r4, #8]
 80007ee:	440b      	add	r3, r1
 80007f0:	60e3      	str	r3, [r4, #12]
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80007f2:	b10e      	cbz	r6, 80007f8 <prvCopyDataToQueue+0x64>
 80007f4:	2d02      	cmp	r5, #2
 80007f6:	d001      	beq.n	80007fc <prvCopyDataToQueue+0x68>
    BaseType_t xReturn = pdFALSE;
 80007f8:	2000      	movs	r0, #0
 80007fa:	e7d4      	b.n	80007a6 <prvCopyDataToQueue+0x12>
                --uxMessagesWaiting;
 80007fc:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 80007fe:	2000      	movs	r0, #0
 8000800:	e7d1      	b.n	80007a6 <prvCopyDataToQueue+0x12>
 8000802:	4628      	mov	r0, r5
 8000804:	e7cf      	b.n	80007a6 <prvCopyDataToQueue+0x12>

08000806 <prvCopyDataFromQueue>:
{
 8000806:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000808:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800080a:	b16a      	cbz	r2, 8000828 <prvCopyDataFromQueue+0x22>
{
 800080c:	b510      	push	{r4, lr}
 800080e:	4608      	mov	r0, r1
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	4411      	add	r1, r2
 8000814:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000816:	689c      	ldr	r4, [r3, #8]
 8000818:	42a1      	cmp	r1, r4
 800081a:	d301      	bcc.n	8000820 <prvCopyDataFromQueue+0x1a>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800081c:	6819      	ldr	r1, [r3, #0]
 800081e:	60d9      	str	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000820:	68d9      	ldr	r1, [r3, #12]
 8000822:	f008 f991 	bl	8008b48 <memcpy>
}
 8000826:	bd10      	pop	{r4, pc}
 8000828:	4770      	bx	lr

0800082a <xQueueGenericSend>:
{
 800082a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8000832:	b188      	cbz	r0, 8000858 <xQueueGenericSend+0x2e>
 8000834:	460e      	mov	r6, r1
 8000836:	461d      	mov	r5, r3
 8000838:	4604      	mov	r4, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800083a:	b1b1      	cbz	r1, 800086a <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800083c:	2d02      	cmp	r5, #2
 800083e:	d120      	bne.n	8000882 <xQueueGenericSend+0x58>
 8000840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000842:	2b01      	cmp	r3, #1
 8000844:	d01d      	beq.n	8000882 <xQueueGenericSend+0x58>
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	e7fe      	b.n	8000856 <xQueueGenericSend+0x2c>
 8000858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085c:	f383 8811 	msr	BASEPRI, r3
 8000860:	f3bf 8f6f 	isb	sy
 8000864:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000868:	e7fe      	b.n	8000868 <xQueueGenericSend+0x3e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800086a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0e5      	beq.n	800083c <xQueueGenericSend+0x12>
 8000870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	e7fe      	b.n	8000880 <xQueueGenericSend+0x56>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000882:	f003 f9bf 	bl	8003c04 <xTaskGetSchedulerState>
 8000886:	b950      	cbnz	r0, 800089e <xQueueGenericSend+0x74>
 8000888:	9b01      	ldr	r3, [sp, #4]
 800088a:	b163      	cbz	r3, 80008a6 <xQueueGenericSend+0x7c>
 800088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000890:	f383 8811 	msr	BASEPRI, r3
 8000894:	f3bf 8f6f 	isb	sy
 8000898:	f3bf 8f4f 	dsb	sy
 800089c:	e7fe      	b.n	800089c <xQueueGenericSend+0x72>
 800089e:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 80008a2:	2700      	movs	r7, #0
 80008a4:	e040      	b.n	8000928 <xQueueGenericSend+0xfe>
 80008a6:	f04f 0800 	mov.w	r8, #0
 80008aa:	e7fa      	b.n	80008a2 <xQueueGenericSend+0x78>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008ac:	462a      	mov	r2, r5
 80008ae:	4631      	mov	r1, r6
 80008b0:	4620      	mov	r0, r4
 80008b2:	f7ff ff6f 	bl	8000794 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008b8:	b983      	cbnz	r3, 80008dc <xQueueGenericSend+0xb2>
                        else if( xYieldRequired != pdFALSE )
 80008ba:	b148      	cbz	r0, 80008d0 <xQueueGenericSend+0xa6>
                            queueYIELD_IF_USING_PREEMPTION();
 80008bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80008c8:	f3bf 8f4f 	dsb	sy
 80008cc:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80008d0:	f008 fe50 	bl	8009574 <vPortExitCritical>
                return pdPASS;
 80008d4:	2001      	movs	r0, #1
}
 80008d6:	b005      	add	sp, #20
 80008d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80008e0:	f002 ff82 	bl	80037e8 <xTaskRemoveFromEventList>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0f3      	beq.n	80008d0 <xQueueGenericSend+0xa6>
                                queueYIELD_IF_USING_PREEMPTION();
 80008e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80008f4:	f3bf 8f4f 	dsb	sy
 80008f8:	f3bf 8f6f 	isb	sy
 80008fc:	e7e8      	b.n	80008d0 <xQueueGenericSend+0xa6>
                    taskEXIT_CRITICAL();
 80008fe:	f008 fe39 	bl	8009574 <vPortExitCritical>
                    return errQUEUE_FULL;
 8000902:	2000      	movs	r0, #0
 8000904:	e7e7      	b.n	80008d6 <xQueueGenericSend+0xac>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000906:	a802      	add	r0, sp, #8
 8000908:	f003 fae4 	bl	8003ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800090c:	e01a      	b.n	8000944 <xQueueGenericSend+0x11a>
        prvLockQueue( pxQueue );
 800090e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000912:	e023      	b.n	800095c <xQueueGenericSend+0x132>
 8000914:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000918:	e026      	b.n	8000968 <xQueueGenericSend+0x13e>
                prvUnlockQueue( pxQueue );
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff fef4 	bl	8000708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000920:	f002 fcb8 	bl	8003294 <xTaskResumeAll>
 8000924:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 8000928:	f008 fe10 	bl	800954c <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800092c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800092e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000930:	429a      	cmp	r2, r3
 8000932:	d3bb      	bcc.n	80008ac <xQueueGenericSend+0x82>
 8000934:	2d02      	cmp	r5, #2
 8000936:	d0b9      	beq.n	80008ac <xQueueGenericSend+0x82>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000938:	9b01      	ldr	r3, [sp, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0df      	beq.n	80008fe <xQueueGenericSend+0xd4>
                else if( xEntryTimeSet == pdFALSE )
 800093e:	f1b8 0f00 	cmp.w	r8, #0
 8000942:	d0e0      	beq.n	8000906 <xQueueGenericSend+0xdc>
        taskEXIT_CRITICAL();
 8000944:	f008 fe16 	bl	8009574 <vPortExitCritical>
        vTaskSuspendAll();
 8000948:	f002 f80e 	bl	8002968 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800094c:	f008 fdfe 	bl	800954c <vPortEnterCritical>
 8000950:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8000954:	b252      	sxtb	r2, r2
 8000956:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800095a:	d0d8      	beq.n	800090e <xQueueGenericSend+0xe4>
 800095c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8000960:	b252      	sxtb	r2, r2
 8000962:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000966:	d0d5      	beq.n	8000914 <xQueueGenericSend+0xea>
 8000968:	f008 fe04 	bl	8009574 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800096c:	a901      	add	r1, sp, #4
 800096e:	a802      	add	r0, sp, #8
 8000970:	f003 faba 	bl	8003ee8 <xTaskCheckForTimeOut>
 8000974:	bb00      	cbnz	r0, 80009b8 <xQueueGenericSend+0x18e>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000976:	f008 fde9 	bl	800954c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800097a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800097e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8000982:	f008 fdf7 	bl	8009574 <vPortExitCritical>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000986:	45c1      	cmp	r9, r8
 8000988:	d1c7      	bne.n	800091a <xQueueGenericSend+0xf0>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800098a:	9901      	ldr	r1, [sp, #4]
 800098c:	f104 0010 	add.w	r0, r4, #16
 8000990:	f002 feaa 	bl	80036e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000994:	4620      	mov	r0, r4
 8000996:	f7ff feb7 	bl	8000708 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800099a:	f002 fc7b 	bl	8003294 <xTaskResumeAll>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1c0      	bne.n	8000924 <xQueueGenericSend+0xfa>
                    portYIELD_WITHIN_API();
 80009a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80009a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80009ae:	f3bf 8f4f 	dsb	sy
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	e7b5      	b.n	8000924 <xQueueGenericSend+0xfa>
            prvUnlockQueue( pxQueue );
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fea5 	bl	8000708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009be:	f002 fc69 	bl	8003294 <xTaskResumeAll>
            return errQUEUE_FULL;
 80009c2:	2000      	movs	r0, #0
 80009c4:	e787      	b.n	80008d6 <xQueueGenericSend+0xac>

080009c6 <prvInitialiseMutex>:
        if( pxNewQueue != NULL )
 80009c6:	b148      	cbz	r0, 80009dc <prvInitialiseMutex+0x16>
    {
 80009c8:	b508      	push	{r3, lr}
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80009ca:	2100      	movs	r1, #0
 80009cc:	6081      	str	r1, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80009ce:	6001      	str	r1, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80009d0:	60c1      	str	r1, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80009d2:	460b      	mov	r3, r1
 80009d4:	460a      	mov	r2, r1
 80009d6:	f7ff ff28 	bl	800082a <xQueueGenericSend>
    }
 80009da:	bd08      	pop	{r3, pc}
 80009dc:	4770      	bx	lr

080009de <xQueuePeek>:
{
 80009de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e0:	b085      	sub	sp, #20
 80009e2:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 80009e4:	b180      	cbz	r0, 8000a08 <xQueuePeek+0x2a>
 80009e6:	460d      	mov	r5, r1
 80009e8:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009ea:	b1b1      	cbz	r1, 8000a1a <xQueuePeek+0x3c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009ec:	f003 f90a 	bl	8003c04 <xTaskGetSchedulerState>
 80009f0:	b9f8      	cbnz	r0, 8000a32 <xQueuePeek+0x54>
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	b303      	cbz	r3, 8000a38 <xQueuePeek+0x5a>
 80009f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fa:	f383 8811 	msr	BASEPRI, r3
 80009fe:	f3bf 8f6f 	isb	sy
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	e7fe      	b.n	8000a06 <xQueuePeek+0x28>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 8000a18:	e7fe      	b.n	8000a18 <xQueuePeek+0x3a>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0e5      	beq.n	80009ec <xQueuePeek+0xe>
 8000a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	e7fe      	b.n	8000a30 <xQueuePeek+0x52>
 8000a32:	2700      	movs	r7, #0
        prvLockQueue( pxQueue );
 8000a34:	2600      	movs	r6, #0
 8000a36:	e03e      	b.n	8000ab6 <xQueuePeek+0xd8>
 8000a38:	2700      	movs	r7, #0
 8000a3a:	e7fb      	b.n	8000a34 <xQueuePeek+0x56>
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000a3c:	68e6      	ldr	r6, [r4, #12]
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a3e:	4629      	mov	r1, r5
 8000a40:	4620      	mov	r0, r4
 8000a42:	f7ff fee0 	bl	8000806 <prvCopyDataFromQueue>
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000a46:	60e6      	str	r6, [r4, #12]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a4a:	b923      	cbnz	r3, 8000a56 <xQueuePeek+0x78>
                taskEXIT_CRITICAL();
 8000a4c:	f008 fd92 	bl	8009574 <vPortExitCritical>
                return pdPASS;
 8000a50:	2001      	movs	r0, #1
}
 8000a52:	b005      	add	sp, #20
 8000a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000a5a:	f002 fec5 	bl	80037e8 <xTaskRemoveFromEventList>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d0f4      	beq.n	8000a4c <xQueuePeek+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8000a62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	f3bf 8f6f 	isb	sy
 8000a76:	e7e9      	b.n	8000a4c <xQueuePeek+0x6e>
                    taskEXIT_CRITICAL();
 8000a78:	f008 fd7c 	bl	8009574 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	e7e8      	b.n	8000a52 <xQueuePeek+0x74>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a80:	a802      	add	r0, sp, #8
 8000a82:	f003 fa27 	bl	8003ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a86:	e020      	b.n	8000aca <xQueuePeek+0xec>
        prvLockQueue( pxQueue );
 8000a88:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 8000a8c:	e029      	b.n	8000ae2 <xQueuePeek+0x104>
 8000a8e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8000a92:	e02c      	b.n	8000aee <xQueuePeek+0x110>
                prvUnlockQueue( pxQueue );
 8000a94:	4620      	mov	r0, r4
 8000a96:	f7ff fe37 	bl	8000708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a9a:	f002 fbfb 	bl	8003294 <xTaskResumeAll>
 8000a9e:	e009      	b.n	8000ab4 <xQueuePeek+0xd6>
            prvUnlockQueue( pxQueue );
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	f7ff fe31 	bl	8000708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aa6:	f002 fbf5 	bl	8003294 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff fe67 	bl	800077e <prvIsQueueEmpty>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d140      	bne.n	8000b36 <xQueuePeek+0x158>
 8000ab4:	2701      	movs	r7, #1
        taskENTER_CRITICAL();
 8000ab6:	f008 fd49 	bl	800954c <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1bd      	bne.n	8000a3c <xQueuePeek+0x5e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0d8      	beq.n	8000a78 <xQueuePeek+0x9a>
                else if( xEntryTimeSet == pdFALSE )
 8000ac6:	2f00      	cmp	r7, #0
 8000ac8:	d0da      	beq.n	8000a80 <xQueuePeek+0xa2>
        taskEXIT_CRITICAL();
 8000aca:	f008 fd53 	bl	8009574 <vPortExitCritical>
        vTaskSuspendAll();
 8000ace:	f001 ff4b 	bl	8002968 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ad2:	f008 fd3b 	bl	800954c <vPortEnterCritical>
 8000ad6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ae0:	d0d2      	beq.n	8000a88 <xQueuePeek+0xaa>
 8000ae2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aec:	d0cf      	beq.n	8000a8e <xQueuePeek+0xb0>
 8000aee:	f008 fd41 	bl	8009574 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000af2:	a901      	add	r1, sp, #4
 8000af4:	a802      	add	r0, sp, #8
 8000af6:	f003 f9f7 	bl	8003ee8 <xTaskCheckForTimeOut>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d1d0      	bne.n	8000aa0 <xQueuePeek+0xc2>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000afe:	4620      	mov	r0, r4
 8000b00:	f7ff fe3d 	bl	800077e <prvIsQueueEmpty>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d0c5      	beq.n	8000a94 <xQueuePeek+0xb6>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b08:	9901      	ldr	r1, [sp, #4]
 8000b0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000b0e:	f002 fdeb 	bl	80036e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff fdf8 	bl	8000708 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000b18:	f002 fbbc 	bl	8003294 <xTaskResumeAll>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1c9      	bne.n	8000ab4 <xQueuePeek+0xd6>
                    portYIELD_WITHIN_API();
 8000b20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	f3bf 8f6f 	isb	sy
 8000b34:	e7be      	b.n	8000ab4 <xQueuePeek+0xd6>
                return errQUEUE_EMPTY;
 8000b36:	2000      	movs	r0, #0
 8000b38:	e78b      	b.n	8000a52 <xQueuePeek+0x74>

08000b3a <xQueuePeekFromISR>:
{
 8000b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxQueue );
 8000b3c:	b168      	cbz	r0, 8000b5a <xQueuePeekFromISR+0x20>
 8000b3e:	460c      	mov	r4, r1
 8000b40:	4605      	mov	r5, r0
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b42:	b199      	cbz	r1, 8000b6c <xQueuePeekFromISR+0x32>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000b44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b46:	b9eb      	cbnz	r3, 8000b84 <xQueuePeekFromISR+0x4a>
 8000b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4c:	f383 8811 	msr	BASEPRI, r3
 8000b50:	f3bf 8f6f 	isb	sy
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	e7fe      	b.n	8000b58 <xQueuePeekFromISR+0x1e>
 8000b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5e:	f383 8811 	msr	BASEPRI, r3
 8000b62:	f3bf 8f6f 	isb	sy
 8000b66:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000b6a:	e7fe      	b.n	8000b6a <xQueuePeekFromISR+0x30>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0ea      	beq.n	8000b48 <xQueuePeekFromISR+0xe>
 8000b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	e7fe      	b.n	8000b82 <xQueuePeekFromISR+0x48>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b84:	f008 fd34 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8000b88:	f3ef 8611 	mrs	r6, BASEPRI
 8000b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b90:	f383 8811 	msr	BASEPRI, r3
 8000b94:	f3bf 8f6f 	isb	sy
 8000b98:	f3bf 8f4f 	dsb	sy
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b9e:	b91b      	cbnz	r3, 8000ba8 <xQueuePeekFromISR+0x6e>
            xReturn = pdFAIL;
 8000ba0:	2000      	movs	r0, #0
    __asm volatile
 8000ba2:	f386 8811 	msr	BASEPRI, r6
}
 8000ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000ba8:	68ef      	ldr	r7, [r5, #12]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000baa:	4621      	mov	r1, r4
 8000bac:	4628      	mov	r0, r5
 8000bae:	f7ff fe2a 	bl	8000806 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000bb2:	60ef      	str	r7, [r5, #12]
            xReturn = pdPASS;
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	e7f4      	b.n	8000ba2 <xQueuePeekFromISR+0x68>

08000bb8 <xQueueReceive>:
{
 8000bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8000bc0:	b180      	cbz	r0, 8000be4 <xQueueReceive+0x2c>
 8000bc2:	460e      	mov	r6, r1
 8000bc4:	4604      	mov	r4, r0
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bc6:	b1b1      	cbz	r1, 8000bf6 <xQueueReceive+0x3e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000bc8:	f003 f81c 	bl	8003c04 <xTaskGetSchedulerState>
 8000bcc:	b9f8      	cbnz	r0, 8000c0e <xQueueReceive+0x56>
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	b30b      	cbz	r3, 8000c16 <xQueueReceive+0x5e>
    __asm volatile
 8000bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd6:	f383 8811 	msr	BASEPRI, r3
 8000bda:	f3bf 8f6f 	isb	sy
 8000bde:	f3bf 8f4f 	dsb	sy
 8000be2:	e7fe      	b.n	8000be2 <xQueueReceive+0x2a>
 8000be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be8:	f383 8811 	msr	BASEPRI, r3
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 8000bf4:	e7fe      	b.n	8000bf4 <xQueueReceive+0x3c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e5      	beq.n	8000bc8 <xQueueReceive+0x10>
 8000bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c00:	f383 8811 	msr	BASEPRI, r3
 8000c04:	f3bf 8f6f 	isb	sy
 8000c08:	f3bf 8f4f 	dsb	sy
 8000c0c:	e7fe      	b.n	8000c0c <xQueueReceive+0x54>
 8000c0e:	f04f 0800 	mov.w	r8, #0
        prvLockQueue( pxQueue );
 8000c12:	2700      	movs	r7, #0
 8000c14:	e041      	b.n	8000c9a <xQueueReceive+0xe2>
 8000c16:	f04f 0800 	mov.w	r8, #0
 8000c1a:	e7fa      	b.n	8000c12 <xQueueReceive+0x5a>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff fdf1 	bl	8000806 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c24:	3d01      	subs	r5, #1
 8000c26:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c28:	6923      	ldr	r3, [r4, #16]
 8000c2a:	b92b      	cbnz	r3, 8000c38 <xQueueReceive+0x80>
                taskEXIT_CRITICAL();
 8000c2c:	f008 fca2 	bl	8009574 <vPortExitCritical>
                return pdPASS;
 8000c30:	2001      	movs	r0, #1
}
 8000c32:	b004      	add	sp, #16
 8000c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c38:	f104 0010 	add.w	r0, r4, #16
 8000c3c:	f002 fdd4 	bl	80037e8 <xTaskRemoveFromEventList>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d0f3      	beq.n	8000c2c <xQueueReceive+0x74>
                        queueYIELD_IF_USING_PREEMPTION();
 8000c44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	f3bf 8f6f 	isb	sy
 8000c58:	e7e8      	b.n	8000c2c <xQueueReceive+0x74>
                    taskEXIT_CRITICAL();
 8000c5a:	f008 fc8b 	bl	8009574 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e7e7      	b.n	8000c32 <xQueueReceive+0x7a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c62:	a802      	add	r0, sp, #8
 8000c64:	f003 f936 	bl	8003ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c68:	e022      	b.n	8000cb0 <xQueueReceive+0xf8>
        prvLockQueue( pxQueue );
 8000c6a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000c6e:	e02b      	b.n	8000cc8 <xQueueReceive+0x110>
 8000c70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000c74:	e02e      	b.n	8000cd4 <xQueueReceive+0x11c>
                prvUnlockQueue( pxQueue );
 8000c76:	4620      	mov	r0, r4
 8000c78:	f7ff fd46 	bl	8000708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c7c:	f002 fb0a 	bl	8003294 <xTaskResumeAll>
 8000c80:	e009      	b.n	8000c96 <xQueueReceive+0xde>
            prvUnlockQueue( pxQueue );
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fd40 	bl	8000708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c88:	f002 fb04 	bl	8003294 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fd76 	bl	800077e <prvIsQueueEmpty>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d142      	bne.n	8000d1c <xQueueReceive+0x164>
 8000c96:	f04f 0801 	mov.w	r8, #1
        taskENTER_CRITICAL();
 8000c9a:	f008 fc57 	bl	800954c <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d1bb      	bne.n	8000c1c <xQueueReceive+0x64>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ca4:	9b01      	ldr	r3, [sp, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0d7      	beq.n	8000c5a <xQueueReceive+0xa2>
                else if( xEntryTimeSet == pdFALSE )
 8000caa:	f1b8 0f00 	cmp.w	r8, #0
 8000cae:	d0d8      	beq.n	8000c62 <xQueueReceive+0xaa>
        taskEXIT_CRITICAL();
 8000cb0:	f008 fc60 	bl	8009574 <vPortExitCritical>
        vTaskSuspendAll();
 8000cb4:	f001 fe58 	bl	8002968 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cb8:	f008 fc48 	bl	800954c <vPortEnterCritical>
 8000cbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc6:	d0d0      	beq.n	8000c6a <xQueueReceive+0xb2>
 8000cc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd2:	d0cd      	beq.n	8000c70 <xQueueReceive+0xb8>
 8000cd4:	f008 fc4e 	bl	8009574 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cd8:	a901      	add	r1, sp, #4
 8000cda:	a802      	add	r0, sp, #8
 8000cdc:	f003 f904 	bl	8003ee8 <xTaskCheckForTimeOut>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d1ce      	bne.n	8000c82 <xQueueReceive+0xca>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fd4a 	bl	800077e <prvIsQueueEmpty>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d0c3      	beq.n	8000c76 <xQueueReceive+0xbe>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000cee:	9901      	ldr	r1, [sp, #4]
 8000cf0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000cf4:	f002 fcf8 	bl	80036e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fd05 	bl	8000708 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000cfe:	f002 fac9 	bl	8003294 <xTaskResumeAll>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d1c7      	bne.n	8000c96 <xQueueReceive+0xde>
                    portYIELD_WITHIN_API();
 8000d06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d12:	f3bf 8f4f 	dsb	sy
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	e7bc      	b.n	8000c96 <xQueueReceive+0xde>
                return errQUEUE_EMPTY;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	e788      	b.n	8000c32 <xQueueReceive+0x7a>

08000d20 <uxQueueMessagesWaiting>:
    configASSERT( xQueue );
 8000d20:	b140      	cbz	r0, 8000d34 <uxQueueMessagesWaiting+0x14>
{
 8000d22:	b510      	push	{r4, lr}
 8000d24:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000d26:	f008 fc11 	bl	800954c <vPortEnterCritical>
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000d2a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
 8000d2c:	f008 fc22 	bl	8009574 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000d30:	4620      	mov	r0, r4
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d38:	f383 8811 	msr	BASEPRI, r3
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f3bf 8f4f 	dsb	sy
    configASSERT( xQueue );
 8000d44:	e7fe      	b.n	8000d44 <uxQueueMessagesWaiting+0x24>

08000d46 <uxQueueSpacesAvailable>:
    configASSERT( pxQueue );
 8000d46:	b150      	cbz	r0, 8000d5e <uxQueueSpacesAvailable+0x18>
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000d4c:	f008 fbfe 	bl	800954c <vPortEnterCritical>
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8000d50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d52:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8000d54:	1ae4      	subs	r4, r4, r3
    taskEXIT_CRITICAL();
 8000d56:	f008 fc0d 	bl	8009574 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000d6e:	e7fe      	b.n	8000d6e <uxQueueSpacesAvailable+0x28>

08000d70 <xQueueGenericSendFromISR>:
{
 8000d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( pxQueue );
 8000d74:	b190      	cbz	r0, 8000d9c <xQueueGenericSendFromISR+0x2c>
 8000d76:	460f      	mov	r7, r1
 8000d78:	4616      	mov	r6, r2
 8000d7a:	461c      	mov	r4, r3
 8000d7c:	4605      	mov	r5, r0
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d7e:	b1b1      	cbz	r1, 8000dae <xQueueGenericSendFromISR+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d80:	2c02      	cmp	r4, #2
 8000d82:	d120      	bne.n	8000dc6 <xQueueGenericSendFromISR+0x56>
 8000d84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d01d      	beq.n	8000dc6 <xQueueGenericSendFromISR+0x56>
 8000d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8e:	f383 8811 	msr	BASEPRI, r3
 8000d92:	f3bf 8f6f 	isb	sy
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	e7fe      	b.n	8000d9a <xQueueGenericSendFromISR+0x2a>
 8000d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da0:	f383 8811 	msr	BASEPRI, r3
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000dac:	e7fe      	b.n	8000dac <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0e5      	beq.n	8000d80 <xQueueGenericSendFromISR+0x10>
 8000db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	e7fe      	b.n	8000dc4 <xQueueGenericSendFromISR+0x54>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000dc6:	f008 fc13 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8000dca:	f3ef 8911 	mrs	r9, BASEPRI
 8000dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd2:	f383 8811 	msr	BASEPRI, r3
 8000dd6:	f3bf 8f6f 	isb	sy
 8000dda:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dde:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000de0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d306      	bcc.n	8000df4 <xQueueGenericSendFromISR+0x84>
 8000de6:	2c02      	cmp	r4, #2
 8000de8:	d004      	beq.n	8000df4 <xQueueGenericSendFromISR+0x84>
            xReturn = errQUEUE_FULL;
 8000dea:	2000      	movs	r0, #0
    __asm volatile
 8000dec:	f389 8811 	msr	BASEPRI, r9
}
 8000df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            const int8_t cTxLock = pxQueue->cTxLock;
 8000df4:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8000df8:	fa4f f888 	sxtb.w	r8, r8
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dfc:	6bab      	ldr	r3, [r5, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000dfe:	4622      	mov	r2, r4
 8000e00:	4639      	mov	r1, r7
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff fcc6 	bl	8000794 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8000e08:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8000e0c:	d009      	beq.n	8000e22 <xQueueGenericSendFromISR+0xb2>
                configASSERT( cTxLock != queueINT8_MAX );
 8000e0e:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8000e12:	d013      	beq.n	8000e3c <xQueueGenericSendFromISR+0xcc>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000e14:	f108 0301 	add.w	r3, r8, #1
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
            xReturn = pdPASS;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e7e4      	b.n	8000dec <xQueueGenericSendFromISR+0x7c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e24:	b90b      	cbnz	r3, 8000e2a <xQueueGenericSendFromISR+0xba>
            xReturn = pdPASS;
 8000e26:	2001      	movs	r0, #1
 8000e28:	e7e0      	b.n	8000dec <xQueueGenericSendFromISR+0x7c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e2a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000e2e:	f002 fcdb 	bl	80037e8 <xTaskRemoveFromEventList>
                                if( pxHigherPriorityTaskWoken != NULL )
 8000e32:	b166      	cbz	r6, 8000e4e <xQueueGenericSendFromISR+0xde>
 8000e34:	b158      	cbz	r0, 8000e4e <xQueueGenericSendFromISR+0xde>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000e36:	2001      	movs	r0, #1
 8000e38:	6030      	str	r0, [r6, #0]
 8000e3a:	e7d7      	b.n	8000dec <xQueueGenericSendFromISR+0x7c>
    __asm volatile
 8000e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e40:	f383 8811 	msr	BASEPRI, r3
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 8000e4c:	e7fe      	b.n	8000e4c <xQueueGenericSendFromISR+0xdc>
            xReturn = pdPASS;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	e7cc      	b.n	8000dec <xQueueGenericSendFromISR+0x7c>

08000e52 <xQueueGiveFromISR>:
    configASSERT( pxQueue );
 8000e52:	b168      	cbz	r0, 8000e70 <xQueueGiveFromISR+0x1e>
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	460c      	mov	r4, r1
 8000e58:	4605      	mov	r5, r0
    configASSERT( pxQueue->uxItemSize == 0 );
 8000e5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e5c:	b18b      	cbz	r3, 8000e82 <xQueueGiveFromISR+0x30>
 8000e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	e7fe      	b.n	8000e6e <xQueueGiveFromISR+0x1c>
 8000e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e74:	f383 8811 	msr	BASEPRI, r3
 8000e78:	f3bf 8f6f 	isb	sy
 8000e7c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000e80:	e7fe      	b.n	8000e80 <xQueueGiveFromISR+0x2e>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000e82:	6803      	ldr	r3, [r0, #0]
 8000e84:	b1fb      	cbz	r3, 8000ec6 <xQueueGiveFromISR+0x74>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e86:	f008 fbb3 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8000e8a:	f3ef 8611 	mrs	r6, BASEPRI
 8000e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000ea0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d931      	bls.n	8000f0a <xQueueGiveFromISR+0xb8>
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ea6:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
 8000eaa:	b252      	sxtb	r2, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000eac:	3301      	adds	r3, #1
 8000eae:	63ab      	str	r3, [r5, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 8000eb0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000eb4:	d013      	beq.n	8000ede <xQueueGiveFromISR+0x8c>
                configASSERT( cTxLock != queueINT8_MAX );
 8000eb6:	2a7f      	cmp	r2, #127	; 0x7f
 8000eb8:	d01e      	beq.n	8000ef8 <xQueueGiveFromISR+0xa6>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000eba:	1c53      	adds	r3, r2, #1
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
            xReturn = pdPASS;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e022      	b.n	8000f0c <xQueueGiveFromISR+0xba>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000ec6:	6883      	ldr	r3, [r0, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0dc      	beq.n	8000e86 <xQueueGiveFromISR+0x34>
    __asm volatile
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	e7fe      	b.n	8000edc <xQueueGiveFromISR+0x8a>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ee0:	b90b      	cbnz	r3, 8000ee6 <xQueueGiveFromISR+0x94>
            xReturn = pdPASS;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e012      	b.n	8000f0c <xQueueGiveFromISR+0xba>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ee6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000eea:	f002 fc7d 	bl	80037e8 <xTaskRemoveFromEventList>
                                if( pxHigherPriorityTaskWoken != NULL )
 8000eee:	b184      	cbz	r4, 8000f12 <xQueueGiveFromISR+0xc0>
 8000ef0:	b178      	cbz	r0, 8000f12 <xQueueGiveFromISR+0xc0>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	6020      	str	r0, [r4, #0]
 8000ef6:	e009      	b.n	8000f0c <xQueueGiveFromISR+0xba>
 8000ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efc:	f383 8811 	msr	BASEPRI, r3
 8000f00:	f3bf 8f6f 	isb	sy
 8000f04:	f3bf 8f4f 	dsb	sy
                configASSERT( cTxLock != queueINT8_MAX );
 8000f08:	e7fe      	b.n	8000f08 <xQueueGiveFromISR+0xb6>
            xReturn = errQUEUE_FULL;
 8000f0a:	2000      	movs	r0, #0
    __asm volatile
 8000f0c:	f386 8811 	msr	BASEPRI, r6
}
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
            xReturn = pdPASS;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e7fa      	b.n	8000f0c <xQueueGiveFromISR+0xba>

08000f16 <xQueueReceiveFromISR>:
{
 8000f16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    configASSERT( pxQueue );
 8000f1a:	b1b0      	cbz	r0, 8000f4a <xQueueReceiveFromISR+0x34>
 8000f1c:	460d      	mov	r5, r1
 8000f1e:	4616      	mov	r6, r2
 8000f20:	4604      	mov	r4, r0
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f22:	b1d9      	cbz	r1, 8000f5c <xQueueReceiveFromISR+0x46>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f008 fb64 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8000f28:	f3ef 8811 	mrs	r8, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f3c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f3e:	b9cf      	cbnz	r7, 8000f74 <xQueueReceiveFromISR+0x5e>
            xReturn = pdFAIL;
 8000f40:	2000      	movs	r0, #0
    __asm volatile
 8000f42:	f388 8811 	msr	BASEPRI, r8
}
 8000f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __asm volatile
 8000f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 8000f52:	f3bf 8f6f 	isb	sy
 8000f56:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000f5a:	e7fe      	b.n	8000f5a <xQueueReceiveFromISR+0x44>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0e0      	beq.n	8000f24 <xQueueReceiveFromISR+0xe>
 8000f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f66:	f383 8811 	msr	BASEPRI, r3
 8000f6a:	f3bf 8f6f 	isb	sy
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	e7fe      	b.n	8000f72 <xQueueReceiveFromISR+0x5c>
            const int8_t cRxLock = pxQueue->cRxLock;
 8000f74:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8000f78:	fa4f f989 	sxtb.w	r9, r9
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff fc41 	bl	8000806 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f84:	3f01      	subs	r7, #1
 8000f86:	63a7      	str	r7, [r4, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 8000f88:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000f8c:	d009      	beq.n	8000fa2 <xQueueReceiveFromISR+0x8c>
                configASSERT( cRxLock != queueINT8_MAX );
 8000f8e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8000f92:	d013      	beq.n	8000fbc <xQueueReceiveFromISR+0xa6>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000f94:	f109 0301 	add.w	r3, r9, #1
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            xReturn = pdPASS;
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7cf      	b.n	8000f42 <xQueueReceiveFromISR+0x2c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fa2:	6923      	ldr	r3, [r4, #16]
 8000fa4:	b90b      	cbnz	r3, 8000faa <xQueueReceiveFromISR+0x94>
            xReturn = pdPASS;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e7cb      	b.n	8000f42 <xQueueReceiveFromISR+0x2c>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000faa:	f104 0010 	add.w	r0, r4, #16
 8000fae:	f002 fc1b 	bl	80037e8 <xTaskRemoveFromEventList>
                        if( pxHigherPriorityTaskWoken != NULL )
 8000fb2:	b166      	cbz	r6, 8000fce <xQueueReceiveFromISR+0xb8>
 8000fb4:	b158      	cbz	r0, 8000fce <xQueueReceiveFromISR+0xb8>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	6030      	str	r0, [r6, #0]
 8000fba:	e7c2      	b.n	8000f42 <xQueueReceiveFromISR+0x2c>
 8000fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
                configASSERT( cRxLock != queueINT8_MAX );
 8000fcc:	e7fe      	b.n	8000fcc <xQueueReceiveFromISR+0xb6>
            xReturn = pdPASS;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e7b7      	b.n	8000f42 <xQueueReceiveFromISR+0x2c>

08000fd2 <xQueueIsQueueEmptyFromISR>:
    configASSERT( pxQueue );
 8000fd2:	b120      	cbz	r0, 8000fde <xQueueIsQueueEmptyFromISR+0xc>
    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8000fd6:	fab0 f080 	clz	r0, r0
 8000fda:	0940      	lsrs	r0, r0, #5
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8000fee:	e7fe      	b.n	8000fee <xQueueIsQueueEmptyFromISR+0x1c>

08000ff0 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;

    configASSERT( pxQueue );
 8000ff0:	b130      	cbz	r0, 8001000 <xQueueIsQueueFullFromISR+0x10>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ff2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000ff4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	bf14      	ite	ne
 8000ffa:	2000      	movne	r0, #0
 8000ffc:	2001      	moveq	r0, #1
 8000ffe:	4770      	bx	lr
 8001000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001004:	f383 8811 	msr	BASEPRI, r3
 8001008:	f3bf 8f6f 	isb	sy
 800100c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001010:	e7fe      	b.n	8001010 <xQueueIsQueueFullFromISR+0x20>

08001012 <uxQueueMessagesWaitingFromISR>:
    configASSERT( pxQueue );
 8001012:	b108      	cbz	r0, 8001018 <uxQueueMessagesWaitingFromISR+0x6>
    uxReturn = pxQueue->uxMessagesWaiting;
 8001014:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001016:	4770      	bx	lr
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001028:	e7fe      	b.n	8001028 <uxQueueMessagesWaitingFromISR+0x16>

0800102a <xQueueSemaphoreTake>:
{
 800102a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102c:	b085      	sub	sp, #20
 800102e:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8001030:	b158      	cbz	r0, 800104a <xQueueSemaphoreTake+0x20>
 8001032:	4604      	mov	r4, r0
    configASSERT( pxQueue->uxItemSize == 0 );
 8001034:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001036:	b18b      	cbz	r3, 800105c <xQueueSemaphoreTake+0x32>
 8001038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103c:	f383 8811 	msr	BASEPRI, r3
 8001040:	f3bf 8f6f 	isb	sy
 8001044:	f3bf 8f4f 	dsb	sy
 8001048:	e7fe      	b.n	8001048 <xQueueSemaphoreTake+0x1e>
 800104a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800104e:	f383 8811 	msr	BASEPRI, r3
 8001052:	f3bf 8f6f 	isb	sy
 8001056:	f3bf 8f4f 	dsb	sy
    configASSERT( ( pxQueue ) );
 800105a:	e7fe      	b.n	800105a <xQueueSemaphoreTake+0x30>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800105c:	f002 fdd2 	bl	8003c04 <xTaskGetSchedulerState>
 8001060:	b950      	cbnz	r0, 8001078 <xQueueSemaphoreTake+0x4e>
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	b163      	cbz	r3, 8001080 <xQueueSemaphoreTake+0x56>
 8001066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106a:	f383 8811 	msr	BASEPRI, r3
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	f3bf 8f4f 	dsb	sy
 8001076:	e7fe      	b.n	8001076 <xQueueSemaphoreTake+0x4c>
 8001078:	2600      	movs	r6, #0
 800107a:	4637      	mov	r7, r6
        prvLockQueue( pxQueue );
 800107c:	2500      	movs	r5, #0
 800107e:	e054      	b.n	800112a <xQueueSemaphoreTake+0x100>
 8001080:	2600      	movs	r6, #0
 8001082:	4637      	mov	r7, r6
 8001084:	e7fa      	b.n	800107c <xQueueSemaphoreTake+0x52>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001086:	3b01      	subs	r3, #1
 8001088:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	b13b      	cbz	r3, 800109e <xQueueSemaphoreTake+0x74>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	b94b      	cbnz	r3, 80010a6 <xQueueSemaphoreTake+0x7c>
                taskEXIT_CRITICAL();
 8001092:	f008 fa6f 	bl	8009574 <vPortExitCritical>
                return pdPASS;
 8001096:	2601      	movs	r6, #1
}
 8001098:	4630      	mov	r0, r6
 800109a:	b005      	add	sp, #20
 800109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800109e:	f002 ff09 	bl	8003eb4 <pvTaskIncrementMutexHeldCount>
 80010a2:	60a0      	str	r0, [r4, #8]
 80010a4:	e7f3      	b.n	800108e <xQueueSemaphoreTake+0x64>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010a6:	f104 0010 	add.w	r0, r4, #16
 80010aa:	f002 fb9d 	bl	80037e8 <xTaskRemoveFromEventList>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0ef      	beq.n	8001092 <xQueueSemaphoreTake+0x68>
                        queueYIELD_IF_USING_PREEMPTION();
 80010b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	e7e4      	b.n	8001092 <xQueueSemaphoreTake+0x68>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80010c8:	b146      	cbz	r6, 80010dc <xQueueSemaphoreTake+0xb2>
 80010ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ce:	f383 8811 	msr	BASEPRI, r3
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	f3bf 8f4f 	dsb	sy
 80010da:	e7fe      	b.n	80010da <xQueueSemaphoreTake+0xb0>
                    taskEXIT_CRITICAL();
 80010dc:	f008 fa4a 	bl	8009574 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80010e0:	e7da      	b.n	8001098 <xQueueSemaphoreTake+0x6e>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80010e2:	a802      	add	r0, sp, #8
 80010e4:	f002 fef6 	bl	8003ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80010e8:	e029      	b.n	800113e <xQueueSemaphoreTake+0x114>
        prvLockQueue( pxQueue );
 80010ea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 80010ee:	e032      	b.n	8001156 <xQueueSemaphoreTake+0x12c>
 80010f0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80010f4:	e035      	b.n	8001162 <xQueueSemaphoreTake+0x138>
                            taskENTER_CRITICAL();
 80010f6:	f008 fa29 	bl	800954c <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010fa:	68a0      	ldr	r0, [r4, #8]
 80010fc:	f002 fd92 	bl	8003c24 <xTaskPriorityInherit>
 8001100:	4606      	mov	r6, r0
                            taskEXIT_CRITICAL();
 8001102:	f008 fa37 	bl	8009574 <vPortExitCritical>
 8001106:	e03c      	b.n	8001182 <xQueueSemaphoreTake+0x158>
                prvUnlockQueue( pxQueue );
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff fafd 	bl	8000708 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800110e:	f002 f8c1 	bl	8003294 <xTaskResumeAll>
 8001112:	e009      	b.n	8001128 <xQueueSemaphoreTake+0xfe>
            prvUnlockQueue( pxQueue );
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff faf7 	bl	8000708 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800111a:	f002 f8bb 	bl	8003294 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff fb2d 	bl	800077e <prvIsQueueEmpty>
 8001124:	2800      	cmp	r0, #0
 8001126:	d143      	bne.n	80011b0 <xQueueSemaphoreTake+0x186>
 8001128:	2701      	movs	r7, #1
        taskENTER_CRITICAL();
 800112a:	f008 fa0f 	bl	800954c <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800112e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1a8      	bne.n	8001086 <xQueueSemaphoreTake+0x5c>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001134:	9b01      	ldr	r3, [sp, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0c6      	beq.n	80010c8 <xQueueSemaphoreTake+0x9e>
                else if( xEntryTimeSet == pdFALSE )
 800113a:	2f00      	cmp	r7, #0
 800113c:	d0d1      	beq.n	80010e2 <xQueueSemaphoreTake+0xb8>
        taskEXIT_CRITICAL();
 800113e:	f008 fa19 	bl	8009574 <vPortExitCritical>
        vTaskSuspendAll();
 8001142:	f001 fc11 	bl	8002968 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001146:	f008 fa01 	bl	800954c <vPortEnterCritical>
 800114a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800114e:	b25b      	sxtb	r3, r3
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001154:	d0c9      	beq.n	80010ea <xQueueSemaphoreTake+0xc0>
 8001156:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800115a:	b25b      	sxtb	r3, r3
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001160:	d0c6      	beq.n	80010f0 <xQueueSemaphoreTake+0xc6>
 8001162:	f008 fa07 	bl	8009574 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001166:	a901      	add	r1, sp, #4
 8001168:	a802      	add	r0, sp, #8
 800116a:	f002 febd 	bl	8003ee8 <xTaskCheckForTimeOut>
 800116e:	2800      	cmp	r0, #0
 8001170:	d1d0      	bne.n	8001114 <xQueueSemaphoreTake+0xea>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff fb03 	bl	800077e <prvIsQueueEmpty>
 8001178:	2800      	cmp	r0, #0
 800117a:	d0c5      	beq.n	8001108 <xQueueSemaphoreTake+0xde>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0b9      	beq.n	80010f6 <xQueueSemaphoreTake+0xcc>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001182:	9901      	ldr	r1, [sp, #4]
 8001184:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001188:	f002 faae 	bl	80036e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff fabb 	bl	8000708 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001192:	f002 f87f 	bl	8003294 <xTaskResumeAll>
 8001196:	2800      	cmp	r0, #0
 8001198:	d1c6      	bne.n	8001128 <xQueueSemaphoreTake+0xfe>
                    portYIELD_WITHIN_API();
 800119a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	e7bb      	b.n	8001128 <xQueueSemaphoreTake+0xfe>
                        if( xInheritanceOccurred != pdFALSE )
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	f43f af71 	beq.w	8001098 <xQueueSemaphoreTake+0x6e>
                            taskENTER_CRITICAL();
 80011b6:	f008 f9c9 	bl	800954c <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80011ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011bc:	b119      	cbz	r1, 80011c6 <xQueueSemaphoreTake+0x19c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80011be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80011c6:	68a0      	ldr	r0, [r4, #8]
 80011c8:	f002 fdfa 	bl	8003dc0 <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 80011cc:	f008 f9d2 	bl	8009574 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80011d0:	2600      	movs	r6, #0
 80011d2:	e761      	b.n	8001098 <xQueueSemaphoreTake+0x6e>

080011d4 <xQueueGetMutexHolder>:
        configASSERT( xSemaphore );
 80011d4:	b150      	cbz	r0, 80011ec <xQueueGetMutexHolder+0x18>
    {
 80011d6:	b510      	push	{r4, lr}
 80011d8:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 80011da:	f008 f9b7 	bl	800954c <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	b96b      	cbnz	r3, 80011fe <xQueueGetMutexHolder+0x2a>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 80011e2:	68a4      	ldr	r4, [r4, #8]
        taskEXIT_CRITICAL();
 80011e4:	f008 f9c6 	bl	8009574 <vPortExitCritical>
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 80011e8:	4620      	mov	r0, r4
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
        configASSERT( xSemaphore );
 80011fc:	e7fe      	b.n	80011fc <xQueueGetMutexHolder+0x28>
                pxReturn = NULL;
 80011fe:	2400      	movs	r4, #0
 8001200:	e7f0      	b.n	80011e4 <xQueueGetMutexHolder+0x10>

08001202 <xQueueGetMutexHolderFromISR>:
        configASSERT( xSemaphore );
 8001202:	b118      	cbz	r0, 800120c <xQueueGetMutexHolderFromISR+0xa>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001204:	6802      	ldr	r2, [r0, #0]
 8001206:	b952      	cbnz	r2, 800121e <xQueueGetMutexHolderFromISR+0x1c>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001208:	6880      	ldr	r0, [r0, #8]
 800120a:	4770      	bx	lr
 800120c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f3bf 8f4f 	dsb	sy
        configASSERT( xSemaphore );
 800121c:	e7fe      	b.n	800121c <xQueueGetMutexHolderFromISR+0x1a>
            pxReturn = NULL;
 800121e:	2000      	movs	r0, #0
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001220:	4770      	bx	lr

08001222 <xQueueTakeMutexRecursive>:
        configASSERT( pxMutex );
 8001222:	b180      	cbz	r0, 8001246 <xQueueTakeMutexRecursive+0x24>
    {
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	460c      	mov	r4, r1
 8001228:	4605      	mov	r5, r0
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800122a:	6886      	ldr	r6, [r0, #8]
 800122c:	f002 fcdc 	bl	8003be8 <xTaskGetCurrentTaskHandle>
 8001230:	4286      	cmp	r6, r0
 8001232:	d011      	beq.n	8001258 <xQueueTakeMutexRecursive+0x36>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001234:	4621      	mov	r1, r4
 8001236:	4628      	mov	r0, r5
 8001238:	f7ff fef7 	bl	800102a <xQueueSemaphoreTake>
            if( xReturn != pdFAIL )
 800123c:	b180      	cbz	r0, 8001260 <xQueueTakeMutexRecursive+0x3e>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800123e:	68eb      	ldr	r3, [r5, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60eb      	str	r3, [r5, #12]
        return xReturn;
 8001244:	e00c      	b.n	8001260 <xQueueTakeMutexRecursive+0x3e>
 8001246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124a:	f383 8811 	msr	BASEPRI, r3
 800124e:	f3bf 8f6f 	isb	sy
 8001252:	f3bf 8f4f 	dsb	sy
        configASSERT( pxMutex );
 8001256:	e7fe      	b.n	8001256 <xQueueTakeMutexRecursive+0x34>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001258:	68eb      	ldr	r3, [r5, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60eb      	str	r3, [r5, #12]
            xReturn = pdPASS;
 800125e:	2001      	movs	r0, #1
    }
 8001260:	bd70      	pop	{r4, r5, r6, pc}

08001262 <xQueueGiveMutexRecursive>:
    {
 8001262:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxMutex );
 8001264:	b138      	cbz	r0, 8001276 <xQueueGiveMutexRecursive+0x14>
 8001266:	4604      	mov	r4, r0
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001268:	6885      	ldr	r5, [r0, #8]
 800126a:	f002 fcbd 	bl	8003be8 <xTaskGetCurrentTaskHandle>
 800126e:	4285      	cmp	r5, r0
 8001270:	d00a      	beq.n	8001288 <xQueueGiveMutexRecursive+0x26>
            xReturn = pdFAIL;
 8001272:	2000      	movs	r0, #0
    }
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
        configASSERT( pxMutex );
 8001286:	e7fe      	b.n	8001286 <xQueueGiveMutexRecursive+0x24>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001288:	68e3      	ldr	r3, [r4, #12]
 800128a:	3b01      	subs	r3, #1
 800128c:	60e3      	str	r3, [r4, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800128e:	b10b      	cbz	r3, 8001294 <xQueueGiveMutexRecursive+0x32>
            xReturn = pdPASS;
 8001290:	2001      	movs	r0, #1
        return xReturn;
 8001292:	e7ef      	b.n	8001274 <xQueueGiveMutexRecursive+0x12>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001294:	461a      	mov	r2, r3
 8001296:	4619      	mov	r1, r3
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fac6 	bl	800082a <xQueueGenericSend>
            xReturn = pdPASS;
 800129e:	2001      	movs	r0, #1
 80012a0:	e7e8      	b.n	8001274 <xQueueGiveMutexRecursive+0x12>

080012a2 <vQueueAddToRegistry>:
    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
        UBaseType_t ux;

        configASSERT( xQueue );
 80012a2:	b138      	cbz	r0, 80012b4 <vQueueAddToRegistry+0x12>
    {
 80012a4:	b430      	push	{r4, r5}
 80012a6:	460c      	mov	r4, r1
 80012a8:	4601      	mov	r1, r0

        QueueRegistryItem_t * pxEntryToWrite = NULL;

        if( pcQueueName != NULL )
 80012aa:	b30c      	cbz	r4, 80012f0 <vQueueAddToRegistry+0x4e>
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <vQueueAddToRegistry+0x52>)
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80012ae:	2000      	movs	r0, #0
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012b0:	4602      	mov	r2, r0
 80012b2:	e010      	b.n	80012d6 <vQueueAddToRegistry+0x34>
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 80012c4:	e7fe      	b.n	80012c4 <vQueueAddToRegistry+0x22>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <vQueueAddToRegistry+0x52>)
 80012c8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80012cc:	e00e      	b.n	80012ec <vQueueAddToRegistry+0x4a>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012ce:	3201      	adds	r2, #1
 80012d0:	3308      	adds	r3, #8
 80012d2:	2a08      	cmp	r2, #8
 80012d4:	d009      	beq.n	80012ea <vQueueAddToRegistry+0x48>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80012d6:	685d      	ldr	r5, [r3, #4]
 80012d8:	428d      	cmp	r5, r1
 80012da:	d0f4      	beq.n	80012c6 <vQueueAddToRegistry+0x24>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f6      	bne.n	80012ce <vQueueAddToRegistry+0x2c>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80012e0:	681d      	ldr	r5, [r3, #0]
 80012e2:	2d00      	cmp	r5, #0
 80012e4:	bf08      	it	eq
 80012e6:	4618      	moveq	r0, r3
 80012e8:	e7f1      	b.n	80012ce <vQueueAddToRegistry+0x2c>
        if( pxEntryToWrite != NULL )
 80012ea:	b108      	cbz	r0, 80012f0 <vQueueAddToRegistry+0x4e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80012ec:	6004      	str	r4, [r0, #0]
            pxEntryToWrite->xHandle = xQueue;
 80012ee:	6041      	str	r1, [r0, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80012f0:	bc30      	pop	{r4, r5}
 80012f2:	4770      	bx	lr
 80012f4:	24000000 	.word	0x24000000

080012f8 <vQueueUnregisterQueue>:

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
        UBaseType_t ux;

        configASSERT( xQueue );
 80012f8:	4601      	mov	r1, r0
 80012fa:	b150      	cbz	r0, 8001312 <vQueueUnregisterQueue+0x1a>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012fc:	2300      	movs	r3, #0
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <vQueueUnregisterQueue+0x3c>)
 8001300:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8001304:	6852      	ldr	r2, [r2, #4]
 8001306:	428a      	cmp	r2, r1
 8001308:	d00c      	beq.n	8001324 <vQueueUnregisterQueue+0x2c>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800130a:	3301      	adds	r3, #1
 800130c:	2b08      	cmp	r3, #8
 800130e:	d1f7      	bne.n	8001300 <vQueueUnregisterQueue+0x8>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001310:	4770      	bx	lr
 8001312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8001322:	e7fe      	b.n	8001322 <vQueueUnregisterQueue+0x2a>
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <vQueueUnregisterQueue+0x3c>)
 8001326:	2100      	movs	r1, #0
 8001328:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800132c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001330:	6059      	str	r1, [r3, #4]
                break;
 8001332:	4770      	bx	lr
 8001334:	24000000 	.word	0x24000000

08001338 <vQueueDelete>:
    configASSERT( pxQueue );
 8001338:	b138      	cbz	r0, 800134a <vQueueDelete+0x12>
{
 800133a:	b510      	push	{r4, lr}
 800133c:	4604      	mov	r4, r0
            vQueueUnregisterQueue( pxQueue );
 800133e:	f7ff ffdb 	bl	80012f8 <vQueueUnregisterQueue>
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001342:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001346:	b14b      	cbz	r3, 800135c <vQueueDelete+0x24>
}
 8001348:	bd10      	pop	{r4, pc}
 800134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134e:	f383 8811 	msr	BASEPRI, r3
 8001352:	f3bf 8f6f 	isb	sy
 8001356:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 800135a:	e7fe      	b.n	800135a <vQueueDelete+0x22>
                vPortFree( pxQueue );
 800135c:	4620      	mov	r0, r4
 800135e:	f003 fc55 	bl	8004c0c <vPortFree>
}
 8001362:	e7f1      	b.n	8001348 <vQueueDelete+0x10>

08001364 <pcQueueGetName>:
        configASSERT( xQueue );
 8001364:	4601      	mov	r1, r0
 8001366:	b158      	cbz	r0, 8001380 <pcQueueGetName+0x1c>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001368:	2300      	movs	r3, #0
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <pcQueueGetName+0x38>)
 800136c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8001370:	6852      	ldr	r2, [r2, #4]
 8001372:	428a      	cmp	r2, r1
 8001374:	d00d      	beq.n	8001392 <pcQueueGetName+0x2e>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001376:	3301      	adds	r3, #1
 8001378:	2b08      	cmp	r3, #8
 800137a:	d1f7      	bne.n	800136c <pcQueueGetName+0x8>
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800137c:	2000      	movs	r0, #0
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 800137e:	4770      	bx	lr
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	f383 8811 	msr	BASEPRI, r3
 8001388:	f3bf 8f6f 	isb	sy
 800138c:	f3bf 8f4f 	dsb	sy
        configASSERT( xQueue );
 8001390:	e7fe      	b.n	8001390 <pcQueueGetName+0x2c>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001392:	4a02      	ldr	r2, [pc, #8]	; (800139c <pcQueueGetName+0x38>)
 8001394:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                break;
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	24000000 	.word	0x24000000

080013a0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80013a8:	f008 f8d0 	bl	800954c <vPortEnterCritical>
 80013ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b6:	d00d      	beq.n	80013d4 <vQueueWaitForMessageRestricted+0x34>
 80013b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c2:	d00b      	beq.n	80013dc <vQueueWaitForMessageRestricted+0x3c>
 80013c4:	f008 f8d6 	bl	8009574 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80013c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013ca:	b15b      	cbz	r3, 80013e4 <vQueueWaitForMessageRestricted+0x44>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff f99b 	bl	8000708 <prvUnlockQueue>
    }
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
        prvLockQueue( pxQueue );
 80013d4:	2300      	movs	r3, #0
 80013d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80013da:	e7ed      	b.n	80013b8 <vQueueWaitForMessageRestricted+0x18>
 80013dc:	2300      	movs	r3, #0
 80013de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80013e2:	e7ef      	b.n	80013c4 <vQueueWaitForMessageRestricted+0x24>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80013e4:	4632      	mov	r2, r6
 80013e6:	4629      	mov	r1, r5
 80013e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80013ec:	f002 f9ce 	bl	800378c <vTaskPlaceOnEventListRestricted>
 80013f0:	e7ec      	b.n	80013cc <vQueueWaitForMessageRestricted+0x2c>

080013f2 <xQueueGenericReset>:
{
 80013f2:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxQueue );
 80013f4:	b180      	cbz	r0, 8001418 <xQueueGenericReset+0x26>
 80013f6:	460d      	mov	r5, r1
 80013f8:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 80013fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80013fc:	b11b      	cbz	r3, 8001406 <xQueueGenericReset+0x14>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80013fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
        ( pxQueue->uxLength >= 1U ) &&
 8001404:	b18b      	cbz	r3, 800142a <xQueueGenericReset+0x38>
 8001406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140a:	f383 8811 	msr	BASEPRI, r3
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8001416:	e7fe      	b.n	8001416 <xQueueGenericReset+0x24>
 8001418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141c:	f383 8811 	msr	BASEPRI, r3
 8001420:	f3bf 8f6f 	isb	sy
 8001424:	f3bf 8f4f 	dsb	sy
    configASSERT( pxQueue );
 8001428:	e7fe      	b.n	8001428 <xQueueGenericReset+0x36>
        taskENTER_CRITICAL();
 800142a:	f008 f88f 	bl	800954c <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	18d0      	adds	r0, r2, r3
 800143a:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800143c:	2000      	movs	r0, #0
 800143e:	63a0      	str	r0, [r4, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001440:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001442:	1a5b      	subs	r3, r3, r1
 8001444:	4413      	add	r3, r2
 8001446:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001448:	23ff      	movs	r3, #255	; 0xff
 800144a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800144e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001452:	b9b5      	cbnz	r5, 8001482 <xQueueGenericReset+0x90>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	b91b      	cbnz	r3, 8001460 <xQueueGenericReset+0x6e>
        taskEXIT_CRITICAL();
 8001458:	f008 f88c 	bl	8009574 <vPortExitCritical>
}
 800145c:	2001      	movs	r0, #1
 800145e:	bd38      	pop	{r3, r4, r5, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001460:	f104 0010 	add.w	r0, r4, #16
 8001464:	f002 f9c0 	bl	80037e8 <xTaskRemoveFromEventList>
 8001468:	2800      	cmp	r0, #0
 800146a:	d0f5      	beq.n	8001458 <xQueueGenericReset+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
 800146c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001474:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001478:	f3bf 8f4f 	dsb	sy
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	e7ea      	b.n	8001458 <xQueueGenericReset+0x66>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001482:	f104 0010 	add.w	r0, r4, #16
 8001486:	f7ff f8f9 	bl	800067c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800148a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800148e:	f7ff f8f5 	bl	800067c <vListInitialise>
 8001492:	e7e1      	b.n	8001458 <xQueueGenericReset+0x66>

08001494 <xQueueGenericCreate>:
    {
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001496:	b150      	cbz	r0, 80014ae <xQueueGenericCreate+0x1a>
 8001498:	460d      	mov	r5, r1
 800149a:	4614      	mov	r4, r2
 800149c:	4606      	mov	r6, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800149e:	fba0 2301 	umull	r2, r3, r0, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80014a2:	b923      	cbnz	r3, 80014ae <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80014a4:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80014a8:	f110 0f51 	cmn.w	r0, #81	; 0x51
 80014ac:	d908      	bls.n	80014c0 <xQueueGenericCreate+0x2c>
 80014ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 80014be:	e7fe      	b.n	80014be <xQueueGenericCreate+0x2a>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80014c0:	3050      	adds	r0, #80	; 0x50
 80014c2:	f003 fb05 	bl	8004ad0 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80014c6:	4607      	mov	r7, r0
 80014c8:	b170      	cbz	r0, 80014e8 <xQueueGenericCreate+0x54>
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 80014d0:	b165      	cbz	r5, 80014ec <xQueueGenericCreate+0x58>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014d2:	f100 0350 	add.w	r3, r0, #80	; 0x50
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80014d6:	603b      	str	r3, [r7, #0]
    pxNewQueue->uxLength = uxQueueLength;
 80014d8:	63fe      	str	r6, [r7, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80014da:	643d      	str	r5, [r7, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80014dc:	2101      	movs	r1, #1
 80014de:	4638      	mov	r0, r7
 80014e0:	f7ff ff87 	bl	80013f2 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80014e4:	f887 404c 	strb.w	r4, [r7, #76]	; 0x4c
    }
 80014e8:	4638      	mov	r0, r7
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014ec:	4603      	mov	r3, r0
 80014ee:	e7f2      	b.n	80014d6 <xQueueGenericCreate+0x42>

080014f0 <xQueueCreateMutex>:
    {
 80014f0:	b510      	push	{r4, lr}
 80014f2:	4602      	mov	r2, r0
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80014f4:	2100      	movs	r1, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff ffcc 	bl	8001494 <xQueueGenericCreate>
 80014fc:	4604      	mov	r4, r0
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80014fe:	f7ff fa62 	bl	80009c6 <prvInitialiseMutex>
    }
 8001502:	4620      	mov	r0, r4
 8001504:	bd10      	pop	{r4, pc}

08001506 <xQueueCreateCountingSemaphore>:
    {
 8001506:	b510      	push	{r4, lr}
        if( ( uxMaxCount != 0 ) &&
 8001508:	b110      	cbz	r0, 8001510 <xQueueCreateCountingSemaphore+0xa>
 800150a:	460c      	mov	r4, r1
 800150c:	4288      	cmp	r0, r1
 800150e:	d208      	bcs.n	8001522 <xQueueCreateCountingSemaphore+0x1c>
 8001510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001514:	f383 8811 	msr	BASEPRI, r3
 8001518:	f3bf 8f6f 	isb	sy
 800151c:	f3bf 8f4f 	dsb	sy
            configASSERT( xHandle );
 8001520:	e7fe      	b.n	8001520 <xQueueCreateCountingSemaphore+0x1a>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001522:	2202      	movs	r2, #2
 8001524:	2100      	movs	r1, #0
 8001526:	f7ff ffb5 	bl	8001494 <xQueueGenericCreate>
            if( xHandle != NULL )
 800152a:	b100      	cbz	r0, 800152e <xQueueCreateCountingSemaphore+0x28>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800152c:	6384      	str	r4, [r0, #56]	; 0x38
    }
 800152e:	bd10      	pop	{r4, pc}

08001530 <xQueueGenericCreateStatic>:
        configASSERT( pxStaticQueue );
 8001530:	b173      	cbz	r3, 8001550 <xQueueGenericCreateStatic+0x20>
    {
 8001532:	b510      	push	{r4, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	461c      	mov	r4, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001538:	b108      	cbz	r0, 800153e <xQueueGenericCreateStatic+0xe>
            ( pxStaticQueue != NULL ) &&
 800153a:	b192      	cbz	r2, 8001562 <xQueueGenericCreateStatic+0x32>
 800153c:	b989      	cbnz	r1, 8001562 <xQueueGenericCreateStatic+0x32>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 800154e:	e7fe      	b.n	800154e <xQueueGenericCreateStatic+0x1e>
 8001550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	f3bf 8f6f 	isb	sy
 800155c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticQueue );
 8001560:	e7fe      	b.n	8001560 <xQueueGenericCreateStatic+0x30>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001562:	b90a      	cbnz	r2, 8001568 <xQueueGenericCreateStatic+0x38>
 8001564:	2900      	cmp	r1, #0
 8001566:	d1ea      	bne.n	800153e <xQueueGenericCreateStatic+0xe>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001568:	2350      	movs	r3, #80	; 0x50
 800156a:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800156c:	9b01      	ldr	r3, [sp, #4]
 800156e:	2b50      	cmp	r3, #80	; 0x50
 8001570:	d008      	beq.n	8001584 <xQueueGenericCreateStatic+0x54>
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	e7fe      	b.n	8001582 <xQueueGenericCreateStatic+0x52>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001584:	9b01      	ldr	r3, [sp, #4]
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800158c:	2900      	cmp	r1, #0
 800158e:	bf08      	it	eq
 8001590:	4622      	moveq	r2, r4
 8001592:	6022      	str	r2, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8001594:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001596:	6421      	str	r1, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff ff29 	bl	80013f2 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80015a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80015a4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    }
 80015a8:	4620      	mov	r0, r4
 80015aa:	b002      	add	sp, #8
 80015ac:	bd10      	pop	{r4, pc}

080015ae <xQueueCreateMutexStatic>:
    {
 80015ae:	b510      	push	{r4, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	460b      	mov	r3, r1
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80015b4:	9000      	str	r0, [sp, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4611      	mov	r1, r2
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff ffb8 	bl	8001530 <xQueueGenericCreateStatic>
 80015c0:	4604      	mov	r4, r0
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80015c2:	f7ff fa00 	bl	80009c6 <prvInitialiseMutex>
    }
 80015c6:	4620      	mov	r0, r4
 80015c8:	b002      	add	sp, #8
 80015ca:	bd10      	pop	{r4, pc}

080015cc <xQueueCreateCountingSemaphoreStatic>:
    {
 80015cc:	b510      	push	{r4, lr}
 80015ce:	b082      	sub	sp, #8
        if( ( uxMaxCount != 0 ) &&
 80015d0:	b110      	cbz	r0, 80015d8 <xQueueCreateCountingSemaphoreStatic+0xc>
 80015d2:	460c      	mov	r4, r1
 80015d4:	4288      	cmp	r0, r1
 80015d6:	d208      	bcs.n	80015ea <xQueueCreateCountingSemaphoreStatic+0x1e>
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
            configASSERT( xHandle );
 80015e8:	e7fe      	b.n	80015e8 <xQueueCreateCountingSemaphoreStatic+0x1c>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80015ea:	2302      	movs	r3, #2
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	2200      	movs	r2, #0
 80015f2:	4611      	mov	r1, r2
 80015f4:	f7ff ff9c 	bl	8001530 <xQueueGenericCreateStatic>
            if( xHandle != NULL )
 80015f8:	b100      	cbz	r0, 80015fc <xQueueCreateCountingSemaphoreStatic+0x30>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80015fa:	6384      	str	r4, [r0, #56]	; 0x38
    }
 80015fc:	b002      	add	sp, #8
 80015fe:	bd10      	pop	{r4, pc}

08001600 <vQueueSetQueueNumber>:
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001600:	6481      	str	r1, [r0, #72]	; 0x48
    }
 8001602:	4770      	bx	lr

08001604 <uxQueueGetQueueNumber>:
    }
 8001604:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001606:	4770      	bx	lr

08001608 <ucQueueGetQueueType>:
    }
 8001608:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <prvBytesInBuffer>:
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001610:	6882      	ldr	r2, [r0, #8]
 8001612:	6843      	ldr	r3, [r0, #4]
 8001614:	4413      	add	r3, r2
    xCount -= pxStreamBuffer->xTail;
 8001616:	6800      	ldr	r0, [r0, #0]
 8001618:	1a18      	subs	r0, r3, r0

    if( xCount >= pxStreamBuffer->xLength )
 800161a:	4282      	cmp	r2, r0
    {
        xCount -= pxStreamBuffer->xLength;
 800161c:	bf98      	it	ls
 800161e:	1a80      	subls	r0, r0, r2
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
}
 8001620:	4770      	bx	lr

08001622 <prvWriteBytesToBuffer>:
    configASSERT( xCount > ( size_t ) 0 );
 8001622:	b942      	cbnz	r2, 8001636 <prvWriteBytesToBuffer+0x14>
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	e7fe      	b.n	8001634 <prvWriteBytesToBuffer+0x12>
{
 8001636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163a:	4606      	mov	r6, r0
 800163c:	4688      	mov	r8, r1
 800163e:	461c      	mov	r4, r3
 8001640:	4617      	mov	r7, r2
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 8001642:	6883      	ldr	r3, [r0, #8]
 8001644:	1b1d      	subs	r5, r3, r4
 8001646:	4295      	cmp	r5, r2
 8001648:	bf28      	it	cs
 800164a:	4615      	movcs	r5, r2
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800164c:	1962      	adds	r2, r4, r5
 800164e:	4293      	cmp	r3, r2
 8001650:	d208      	bcs.n	8001664 <prvWriteBytesToBuffer+0x42>
 8001652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	e7fe      	b.n	8001662 <prvWriteBytesToBuffer+0x40>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001664:	6980      	ldr	r0, [r0, #24]
 8001666:	462a      	mov	r2, r5
 8001668:	4420      	add	r0, r4
 800166a:	f007 fa6d 	bl	8008b48 <memcpy>
    if( xCount > xFirstLength )
 800166e:	42af      	cmp	r7, r5
 8001670:	d911      	bls.n	8001696 <prvWriteBytesToBuffer+0x74>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8001672:	1b7a      	subs	r2, r7, r5
 8001674:	68b3      	ldr	r3, [r6, #8]
 8001676:	429a      	cmp	r2, r3
 8001678:	d908      	bls.n	800168c <prvWriteBytesToBuffer+0x6a>
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	e7fe      	b.n	800168a <prvWriteBytesToBuffer+0x68>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800168c:	eb08 0105 	add.w	r1, r8, r5
 8001690:	69b0      	ldr	r0, [r6, #24]
 8001692:	f007 fa59 	bl	8008b48 <memcpy>
    xHead += xCount;
 8001696:	1938      	adds	r0, r7, r4
    if( xHead >= pxStreamBuffer->xLength )
 8001698:	68b3      	ldr	r3, [r6, #8]
 800169a:	4283      	cmp	r3, r0
        xHead -= pxStreamBuffer->xLength;
 800169c:	bf98      	it	ls
 800169e:	1ac0      	subls	r0, r0, r3
}
 80016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016a4 <prvWriteMessageToBuffer>:
{
 80016a4:	b530      	push	{r4, r5, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	461a      	mov	r2, r3
    size_t xNextHead = pxStreamBuffer->xHead;
 80016b0:	6843      	ldr	r3, [r0, #4]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80016b2:	f890 c01c 	ldrb.w	ip, [r0, #28]
 80016b6:	f01c 0f01 	tst.w	ip, #1
 80016ba:	d00e      	beq.n	80016da <prvWriteMessageToBuffer+0x36>
        if( xSpace >= xRequiredSpace )
 80016bc:	9906      	ldr	r1, [sp, #24]
 80016be:	428a      	cmp	r2, r1
 80016c0:	d204      	bcs.n	80016cc <prvWriteMessageToBuffer+0x28>
            xDataLengthBytes = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	9301      	str	r3, [sp, #4]
}
 80016c6:	9801      	ldr	r0, [sp, #4]
 80016c8:	b003      	add	sp, #12
 80016ca:	bd30      	pop	{r4, r5, pc}
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 80016cc:	2204      	movs	r2, #4
 80016ce:	eb0d 0102 	add.w	r1, sp, r2
 80016d2:	f7ff ffa6 	bl	8001622 <prvWriteBytesToBuffer>
 80016d6:	4603      	mov	r3, r0
 80016d8:	e004      	b.n	80016e4 <prvWriteMessageToBuffer+0x40>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80016da:	9901      	ldr	r1, [sp, #4]
 80016dc:	428a      	cmp	r2, r1
 80016de:	bf28      	it	cs
 80016e0:	460a      	movcs	r2, r1
 80016e2:	9201      	str	r2, [sp, #4]
    if( xDataLengthBytes != ( size_t ) 0 )
 80016e4:	9a01      	ldr	r2, [sp, #4]
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d0ed      	beq.n	80016c6 <prvWriteMessageToBuffer+0x22>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 80016ea:	4629      	mov	r1, r5
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff98 	bl	8001622 <prvWriteBytesToBuffer>
 80016f2:	6060      	str	r0, [r4, #4]
 80016f4:	e7e7      	b.n	80016c6 <prvWriteMessageToBuffer+0x22>

080016f6 <prvReadBytesFromBuffer>:
    configASSERT( xCount != ( size_t ) 0 );
 80016f6:	b942      	cbnz	r2, 800170a <prvReadBytesFromBuffer+0x14>
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	e7fe      	b.n	8001708 <prvReadBytesFromBuffer+0x12>
{
 800170a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800170e:	4606      	mov	r6, r0
 8001710:	4688      	mov	r8, r1
 8001712:	461d      	mov	r5, r3
 8001714:	4617      	mov	r7, r2
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 8001716:	6883      	ldr	r3, [r0, #8]
 8001718:	1b5c      	subs	r4, r3, r5
 800171a:	4294      	cmp	r4, r2
 800171c:	bf28      	it	cs
 800171e:	4614      	movcs	r4, r2
    configASSERT( xFirstLength <= xCount );
 8001720:	42a2      	cmp	r2, r4
 8001722:	d208      	bcs.n	8001736 <prvReadBytesFromBuffer+0x40>
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	e7fe      	b.n	8001734 <prvReadBytesFromBuffer+0x3e>
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8001736:	192a      	adds	r2, r5, r4
 8001738:	4293      	cmp	r3, r2
 800173a:	d208      	bcs.n	800174e <prvReadBytesFromBuffer+0x58>
 800173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001740:	f383 8811 	msr	BASEPRI, r3
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	f3bf 8f4f 	dsb	sy
 800174c:	e7fe      	b.n	800174c <prvReadBytesFromBuffer+0x56>
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800174e:	6981      	ldr	r1, [r0, #24]
 8001750:	4622      	mov	r2, r4
 8001752:	4429      	add	r1, r5
 8001754:	4640      	mov	r0, r8
 8001756:	f007 f9f7 	bl	8008b48 <memcpy>
    if( xCount > xFirstLength )
 800175a:	42a7      	cmp	r7, r4
 800175c:	d806      	bhi.n	800176c <prvReadBytesFromBuffer+0x76>
    xTail += xCount;
 800175e:	1978      	adds	r0, r7, r5
    if( xTail >= pxStreamBuffer->xLength )
 8001760:	68b2      	ldr	r2, [r6, #8]
 8001762:	4282      	cmp	r2, r0
        xTail -= pxStreamBuffer->xLength;
 8001764:	bf98      	it	ls
 8001766:	1a80      	subls	r0, r0, r2
}
 8001768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800176c:	1b3a      	subs	r2, r7, r4
 800176e:	69b1      	ldr	r1, [r6, #24]
 8001770:	eb08 0004 	add.w	r0, r8, r4
 8001774:	f007 f9e8 	bl	8008b48 <memcpy>
 8001778:	e7f1      	b.n	800175e <prvReadBytesFromBuffer+0x68>

0800177a <prvReadMessageFromBuffer>:
{
 800177a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177c:	b083      	sub	sp, #12
 800177e:	4605      	mov	r5, r0
 8001780:	460f      	mov	r7, r1
 8001782:	4616      	mov	r6, r2
 8001784:	461c      	mov	r4, r3
    size_t xNextTail = pxStreamBuffer->xTail;
 8001786:	6803      	ldr	r3, [r0, #0]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001788:	7f02      	ldrb	r2, [r0, #28]
 800178a:	f012 0f01 	tst.w	r2, #1
 800178e:	d106      	bne.n	800179e <prvReadMessageFromBuffer+0x24>
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 8001790:	42b4      	cmp	r4, r6
 8001792:	bf28      	it	cs
 8001794:	4634      	movcs	r4, r6
    if( xCount != ( size_t ) 0 )
 8001796:	b974      	cbnz	r4, 80017b6 <prvReadMessageFromBuffer+0x3c>
}
 8001798:	4620      	mov	r0, r4
 800179a:	b003      	add	sp, #12
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 800179e:	2204      	movs	r2, #4
 80017a0:	eb0d 0102 	add.w	r1, sp, r2
 80017a4:	f7ff ffa7 	bl	80016f6 <prvReadBytesFromBuffer>
 80017a8:	4603      	mov	r3, r0
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80017aa:	9a01      	ldr	r2, [sp, #4]
        if( xNextMessageLength > xBufferLengthBytes )
 80017ac:	4296      	cmp	r6, r2
 80017ae:	d309      	bcc.n	80017c4 <prvReadMessageFromBuffer+0x4a>
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80017b0:	3c04      	subs	r4, #4
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80017b2:	4616      	mov	r6, r2
 80017b4:	e7ec      	b.n	8001790 <prvReadMessageFromBuffer+0x16>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80017b6:	4622      	mov	r2, r4
 80017b8:	4639      	mov	r1, r7
 80017ba:	4628      	mov	r0, r5
 80017bc:	f7ff ff9b 	bl	80016f6 <prvReadBytesFromBuffer>
 80017c0:	6028      	str	r0, [r5, #0]
 80017c2:	e7e9      	b.n	8001798 <prvReadMessageFromBuffer+0x1e>
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 80017c4:	2400      	movs	r4, #0
    return xCount;
 80017c6:	e7e7      	b.n	8001798 <prvReadMessageFromBuffer+0x1e>

080017c8 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	4607      	mov	r7, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	4616      	mov	r6, r2
 80017d0:	461d      	mov	r5, r3
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80017d2:	2155      	movs	r1, #85	; 0x55
 80017d4:	4620      	mov	r0, r4
 80017d6:	f00f fc85 	bl	80110e4 <memset>
 80017da:	4284      	cmp	r4, r0
 80017dc:	d008      	beq.n	80017f0 <prvInitialiseNewStreamBuffer+0x28>
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	e7fe      	b.n	80017ee <prvInitialiseNewStreamBuffer+0x26>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80017f0:	2224      	movs	r2, #36	; 0x24
 80017f2:	2100      	movs	r1, #0
 80017f4:	4638      	mov	r0, r7
 80017f6:	f00f fc75 	bl	80110e4 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 80017fa:	61bc      	str	r4, [r7, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 80017fc:	60be      	str	r6, [r7, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80017fe:	60fd      	str	r5, [r7, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8001800:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001804:	773b      	strb	r3, [r7, #28]
}
 8001806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001808 <xStreamBufferReceive>:
    configASSERT( pvRxData );
 8001808:	b349      	cbz	r1, 800185e <xStreamBufferReceive+0x56>
{
 800180a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	4604      	mov	r4, r0
 8001812:	4616      	mov	r6, r2
 8001814:	4699      	mov	r9, r3
 8001816:	460f      	mov	r7, r1
    configASSERT( pxStreamBuffer );
 8001818:	b350      	cbz	r0, 8001870 <xStreamBufferReceive+0x68>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800181a:	7f03      	ldrb	r3, [r0, #28]
        xBytesToStoreMessageLength = 0;
 800181c:	f013 0f01 	tst.w	r3, #1
 8001820:	bf14      	ite	ne
 8001822:	f04f 0804 	movne.w	r8, #4
 8001826:	f04f 0800 	moveq.w	r8, #0
    if( xTicksToWait != ( TickType_t ) 0 )
 800182a:	f1b9 0f00 	cmp.w	r9, #0
 800182e:	d03c      	beq.n	80018aa <xStreamBufferReceive+0xa2>
        taskENTER_CRITICAL();
 8001830:	f007 fe8c 	bl	800954c <vPortEnterCritical>
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff feeb 	bl	8001610 <prvBytesInBuffer>
 800183a:	4605      	mov	r5, r0
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 800183c:	4580      	cmp	r8, r0
 800183e:	d33e      	bcc.n	80018be <xStreamBufferReceive+0xb6>
                ( void ) xTaskNotifyStateClear( NULL );
 8001840:	2100      	movs	r1, #0
 8001842:	4608      	mov	r0, r1
 8001844:	f001 fc02 	bl	800304c <xTaskGenericNotifyStateClear>
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8001848:	6923      	ldr	r3, [r4, #16]
 800184a:	b1d3      	cbz	r3, 8001882 <xStreamBufferReceive+0x7a>
 800184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	e7fe      	b.n	800185c <xStreamBufferReceive+0x54>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
    configASSERT( pvRxData );
 800186e:	e7fe      	b.n	800186e <xStreamBufferReceive+0x66>
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001880:	e7fe      	b.n	8001880 <xStreamBufferReceive+0x78>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001882:	f002 f9b1 	bl	8003be8 <xTaskGetCurrentTaskHandle>
 8001886:	6120      	str	r0, [r4, #16]
        taskEXIT_CRITICAL();
 8001888:	f007 fe74 	bl	8009574 <vPortExitCritical>
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800188c:	f8cd 9000 	str.w	r9, [sp]
 8001890:	2300      	movs	r3, #0
 8001892:	461a      	mov	r2, r3
 8001894:	4619      	mov	r1, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fa68 	bl	8002d6c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800189c:	2300      	movs	r3, #0
 800189e:	6123      	str	r3, [r4, #16]
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff feb5 	bl	8001610 <prvBytesInBuffer>
 80018a6:	4605      	mov	r5, r0
 80018a8:	e002      	b.n	80018b0 <xStreamBufferReceive+0xa8>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80018aa:	f7ff feb1 	bl	8001610 <prvBytesInBuffer>
 80018ae:	4605      	mov	r5, r0
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80018b0:	4545      	cmp	r5, r8
 80018b2:	d806      	bhi.n	80018c2 <xStreamBufferReceive+0xba>
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80018b4:	2500      	movs	r5, #0
}
 80018b6:	4628      	mov	r0, r5
 80018b8:	b003      	add	sp, #12
 80018ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        taskEXIT_CRITICAL();
 80018be:	f007 fe59 	bl	8009574 <vPortExitCritical>
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 80018c2:	462b      	mov	r3, r5
 80018c4:	4632      	mov	r2, r6
 80018c6:	4639      	mov	r1, r7
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff ff56 	bl	800177a <prvReadMessageFromBuffer>
        if( xReceivedLength != ( size_t ) 0 )
 80018ce:	4605      	mov	r5, r0
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d0f0      	beq.n	80018b6 <xStreamBufferReceive+0xae>
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 80018d4:	f001 f848 	bl	8002968 <vTaskSuspendAll>
 80018d8:	6963      	ldr	r3, [r4, #20]
 80018da:	b143      	cbz	r3, 80018ee <xStreamBufferReceive+0xe6>
 80018dc:	6960      	ldr	r0, [r4, #20]
 80018de:	2600      	movs	r6, #0
 80018e0:	9600      	str	r6, [sp, #0]
 80018e2:	4633      	mov	r3, r6
 80018e4:	4632      	mov	r2, r6
 80018e6:	4631      	mov	r1, r6
 80018e8:	f001 f88a 	bl	8002a00 <xTaskGenericNotify>
 80018ec:	6166      	str	r6, [r4, #20]
 80018ee:	f001 fcd1 	bl	8003294 <xTaskResumeAll>
 80018f2:	e7e0      	b.n	80018b6 <xStreamBufferReceive+0xae>

080018f4 <xStreamBufferReceiveFromISR>:
    configASSERT( pvRxData );
 80018f4:	b1c1      	cbz	r1, 8001928 <xStreamBufferReceiveFromISR+0x34>
{
 80018f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	4604      	mov	r4, r0
 80018fe:	4616      	mov	r6, r2
 8001900:	461d      	mov	r5, r3
 8001902:	460f      	mov	r7, r1
    configASSERT( pxStreamBuffer );
 8001904:	b1c8      	cbz	r0, 800193a <xStreamBufferReceiveFromISR+0x46>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001906:	7f03      	ldrb	r3, [r0, #28]
        xBytesToStoreMessageLength = 0;
 8001908:	f013 0f01 	tst.w	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	f04f 0804 	movne.w	r8, #4
 8001912:	f04f 0800 	moveq.w	r8, #0
    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001916:	f7ff fe7b 	bl	8001610 <prvBytesInBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
 800191a:	4580      	cmp	r8, r0
 800191c:	d316      	bcc.n	800194c <xStreamBufferReceiveFromISR+0x58>
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800191e:	2600      	movs	r6, #0
}
 8001920:	4630      	mov	r0, r6
 8001922:	b002      	add	sp, #8
 8001924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192c:	f383 8811 	msr	BASEPRI, r3
 8001930:	f3bf 8f6f 	isb	sy
 8001934:	f3bf 8f4f 	dsb	sy
    configASSERT( pvRxData );
 8001938:	e7fe      	b.n	8001938 <xStreamBufferReceiveFromISR+0x44>
 800193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 800194a:	e7fe      	b.n	800194a <xStreamBufferReceiveFromISR+0x56>
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 800194c:	4603      	mov	r3, r0
 800194e:	4632      	mov	r2, r6
 8001950:	4639      	mov	r1, r7
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ff11 	bl	800177a <prvReadMessageFromBuffer>
        if( xReceivedLength != ( size_t ) 0 )
 8001958:	4606      	mov	r6, r0
 800195a:	2800      	cmp	r0, #0
 800195c:	d0e0      	beq.n	8001920 <xStreamBufferReceiveFromISR+0x2c>
    __asm volatile
 800195e:	f3ef 8711 	mrs	r7, BASEPRI
 8001962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001966:	f383 8811 	msr	BASEPRI, r3
 800196a:	f3bf 8f6f 	isb	sy
 800196e:	f3bf 8f4f 	dsb	sy
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8001972:	6963      	ldr	r3, [r4, #20]
 8001974:	b14b      	cbz	r3, 800198a <xStreamBufferReceiveFromISR+0x96>
 8001976:	6960      	ldr	r0, [r4, #20]
 8001978:	9501      	str	r5, [sp, #4]
 800197a:	2500      	movs	r5, #0
 800197c:	9500      	str	r5, [sp, #0]
 800197e:	462b      	mov	r3, r5
 8001980:	462a      	mov	r2, r5
 8001982:	4629      	mov	r1, r5
 8001984:	f001 f908 	bl	8002b98 <xTaskGenericNotifyFromISR>
 8001988:	6165      	str	r5, [r4, #20]
    __asm volatile
 800198a:	f387 8811 	msr	BASEPRI, r7
    (
        "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800198e:	e7c7      	b.n	8001920 <xStreamBufferReceiveFromISR+0x2c>

08001990 <vStreamBufferDelete>:
{
 8001990:	b508      	push	{r3, lr}
    configASSERT( pxStreamBuffer );
 8001992:	b130      	cbz	r0, 80019a2 <vStreamBufferDelete+0x12>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8001994:	7f02      	ldrb	r2, [r0, #28]
 8001996:	f012 0f02 	tst.w	r2, #2
 800199a:	d10b      	bne.n	80019b4 <vStreamBufferDelete+0x24>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 800199c:	f003 f936 	bl	8004c0c <vPortFree>
}
 80019a0:	bd08      	pop	{r3, pc}
    __asm volatile
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80019b2:	e7fe      	b.n	80019b2 <vStreamBufferDelete+0x22>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 80019b4:	2224      	movs	r2, #36	; 0x24
 80019b6:	2100      	movs	r1, #0
 80019b8:	f00f fb94 	bl	80110e4 <memset>
}
 80019bc:	e7f0      	b.n	80019a0 <vStreamBufferDelete+0x10>

080019be <xStreamBufferIsEmpty>:
    configASSERT( pxStreamBuffer );
 80019be:	b130      	cbz	r0, 80019ce <xStreamBufferIsEmpty+0x10>
    xTail = pxStreamBuffer->xTail;
 80019c0:	6802      	ldr	r2, [r0, #0]
    if( pxStreamBuffer->xHead == xTail )
 80019c2:	6840      	ldr	r0, [r0, #4]
}
 80019c4:	4290      	cmp	r0, r2
 80019c6:	bf14      	ite	ne
 80019c8:	2000      	movne	r0, #0
 80019ca:	2001      	moveq	r0, #1
 80019cc:	4770      	bx	lr
 80019ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 80019de:	e7fe      	b.n	80019de <xStreamBufferIsEmpty+0x20>

080019e0 <xStreamBufferReset>:
    configASSERT( pxStreamBuffer );
 80019e0:	b168      	cbz	r0, 80019fe <xStreamBufferReset+0x1e>
{
 80019e2:	b530      	push	{r4, r5, lr}
 80019e4:	b083      	sub	sp, #12
 80019e6:	4604      	mov	r4, r0
            uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 80019e8:	6a05      	ldr	r5, [r0, #32]
    taskENTER_CRITICAL();
 80019ea:	f007 fdaf 	bl	800954c <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 80019ee:	6923      	ldr	r3, [r4, #16]
 80019f0:	b173      	cbz	r3, 8001a10 <xStreamBufferReset+0x30>
    BaseType_t xReturn = pdFAIL;
 80019f2:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80019f4:	f007 fdbe 	bl	8009574 <vPortExitCritical>
}
 80019f8:	4620      	mov	r0, r4
 80019fa:	b003      	add	sp, #12
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001a0e:	e7fe      	b.n	8001a0e <xStreamBufferReset+0x2e>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8001a10:	6963      	ldr	r3, [r4, #20]
 8001a12:	b10b      	cbz	r3, 8001a18 <xStreamBufferReset+0x38>
    BaseType_t xReturn = pdFAIL;
 8001a14:	2400      	movs	r4, #0
 8001a16:	e7ed      	b.n	80019f4 <xStreamBufferReset+0x14>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8001a18:	7f23      	ldrb	r3, [r4, #28]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	68e3      	ldr	r3, [r4, #12]
 8001a1e:	68a2      	ldr	r2, [r4, #8]
 8001a20:	69a1      	ldr	r1, [r4, #24]
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff fed0 	bl	80017c8 <prvInitialiseNewStreamBuffer>
                        pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8001a28:	6225      	str	r5, [r4, #32]
                xReturn = pdPASS;
 8001a2a:	2401      	movs	r4, #1
 8001a2c:	e7e2      	b.n	80019f4 <xStreamBufferReset+0x14>

08001a2e <xStreamBufferSpacesAvailable>:
    configASSERT( pxStreamBuffer );
 8001a2e:	b180      	cbz	r0, 8001a52 <xStreamBufferSpacesAvailable+0x24>
{
 8001a30:	b430      	push	{r4, r5}
 8001a32:	4603      	mov	r3, r0
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001a34:	6885      	ldr	r5, [r0, #8]
        xOriginalTail = pxStreamBuffer->xTail;
 8001a36:	681a      	ldr	r2, [r3, #0]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001a38:	681c      	ldr	r4, [r3, #0]
        xSpace -= pxStreamBuffer->xHead;
 8001a3a:	6858      	ldr	r0, [r3, #4]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	4291      	cmp	r1, r2
 8001a40:	d1f9      	bne.n	8001a36 <xStreamBufferSpacesAvailable+0x8>
    xSpace -= ( size_t ) 1;
 8001a42:	1e6b      	subs	r3, r5, #1
 8001a44:	441c      	add	r4, r3
 8001a46:	1a20      	subs	r0, r4, r0
    if( xSpace >= pxStreamBuffer->xLength )
 8001a48:	4285      	cmp	r5, r0
        xSpace -= pxStreamBuffer->xLength;
 8001a4a:	bf98      	it	ls
 8001a4c:	1b40      	subls	r0, r0, r5
}
 8001a4e:	bc30      	pop	{r4, r5}
 8001a50:	4770      	bx	lr
 8001a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a56:	f383 8811 	msr	BASEPRI, r3
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001a62:	e7fe      	b.n	8001a62 <xStreamBufferSpacesAvailable+0x34>

08001a64 <xStreamBufferSend>:
{
 8001a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a68:	b087      	sub	sp, #28
 8001a6a:	9303      	str	r3, [sp, #12]
    configASSERT( pvTxData );
 8001a6c:	b1b1      	cbz	r1, 8001a9c <xStreamBufferSend+0x38>
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4617      	mov	r7, r2
 8001a72:	4689      	mov	r9, r1
    configASSERT( pxStreamBuffer );
 8001a74:	b1d8      	cbz	r0, 8001aae <xStreamBufferSend+0x4a>
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8001a76:	6883      	ldr	r3, [r0, #8]
 8001a78:	3b01      	subs	r3, #1
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001a7a:	7f02      	ldrb	r2, [r0, #28]
 8001a7c:	f012 0f01 	tst.w	r2, #1
 8001a80:	d023      	beq.n	8001aca <xStreamBufferSend+0x66>
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001a82:	f107 0804 	add.w	r8, r7, #4
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8001a86:	4547      	cmp	r7, r8
 8001a88:	d31a      	bcc.n	8001ac0 <xStreamBufferSend+0x5c>
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	e7fe      	b.n	8001a9a <xStreamBufferSend+0x36>
 8001a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
    configASSERT( pvTxData );
 8001aac:	e7fe      	b.n	8001aac <xStreamBufferSend+0x48>
 8001aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab2:	f383 8811 	msr	BASEPRI, r3
 8001ab6:	f3bf 8f6f 	isb	sy
 8001aba:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001abe:	e7fe      	b.n	8001abe <xStreamBufferSend+0x5a>
        if( xRequiredSpace > xMaxReportedSpace )
 8001ac0:	4543      	cmp	r3, r8
 8001ac2:	d206      	bcs.n	8001ad2 <xStreamBufferSend+0x6e>
            xTicksToWait = ( TickType_t ) 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9303      	str	r3, [sp, #12]
    if( xTicksToWait != ( TickType_t ) 0 )
 8001ac8:	e038      	b.n	8001b3c <xStreamBufferSend+0xd8>
        if( xRequiredSpace > xMaxReportedSpace )
 8001aca:	42bb      	cmp	r3, r7
 8001acc:	bf28      	it	cs
 8001ace:	463b      	movcs	r3, r7
 8001ad0:	4698      	mov	r8, r3
    if( xTicksToWait != ( TickType_t ) 0 )
 8001ad2:	9b03      	ldr	r3, [sp, #12]
 8001ad4:	b393      	cbz	r3, 8001b3c <xStreamBufferSend+0xd8>
        vTaskSetTimeOutState( &xTimeOut );
 8001ad6:	a804      	add	r0, sp, #16
 8001ad8:	f001 fafa 	bl	80030d0 <vTaskSetTimeOutState>
                    ( void ) xTaskNotifyStateClear( NULL );
 8001adc:	2600      	movs	r6, #0
            taskENTER_CRITICAL();
 8001ade:	f007 fd35 	bl	800954c <vPortEnterCritical>
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ffa3 	bl	8001a2e <xStreamBufferSpacesAvailable>
 8001ae8:	4605      	mov	r5, r0
                if( xSpace < xRequiredSpace )
 8001aea:	4580      	cmp	r8, r0
 8001aec:	d923      	bls.n	8001b36 <xStreamBufferSend+0xd2>
                    ( void ) xTaskNotifyStateClear( NULL );
 8001aee:	4631      	mov	r1, r6
 8001af0:	4630      	mov	r0, r6
 8001af2:	f001 faab 	bl	800304c <xTaskGenericNotifyStateClear>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8001af6:	6963      	ldr	r3, [r4, #20]
 8001af8:	b9a3      	cbnz	r3, 8001b24 <xStreamBufferSend+0xc0>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8001afa:	f002 f875 	bl	8003be8 <xTaskGetCurrentTaskHandle>
 8001afe:	6160      	str	r0, [r4, #20]
            taskEXIT_CRITICAL();
 8001b00:	f007 fd38 	bl	8009574 <vPortExitCritical>
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001b04:	9b03      	ldr	r3, [sp, #12]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4633      	mov	r3, r6
 8001b0a:	4632      	mov	r2, r6
 8001b0c:	4631      	mov	r1, r6
 8001b0e:	4630      	mov	r0, r6
 8001b10:	f001 f92c 	bl	8002d6c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8001b14:	6166      	str	r6, [r4, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8001b16:	a903      	add	r1, sp, #12
 8001b18:	a804      	add	r0, sp, #16
 8001b1a:	f002 f9e5 	bl	8003ee8 <xTaskCheckForTimeOut>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d0dd      	beq.n	8001ade <xStreamBufferSend+0x7a>
 8001b22:	e00a      	b.n	8001b3a <xStreamBufferSend+0xd6>
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8001b34:	e7fe      	b.n	8001b34 <xStreamBufferSend+0xd0>
                    taskEXIT_CRITICAL();
 8001b36:	f007 fd1d 	bl	8009574 <vPortExitCritical>
    if( xSpace == ( size_t ) 0 )
 8001b3a:	b91d      	cbnz	r5, 8001b44 <xStreamBufferSend+0xe0>
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff ff76 	bl	8001a2e <xStreamBufferSpacesAvailable>
 8001b42:	4605      	mov	r5, r0
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001b44:	f8cd 8000 	str.w	r8, [sp]
 8001b48:	462b      	mov	r3, r5
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fda8 	bl	80016a4 <prvWriteMessageToBuffer>
    if( xReturn > ( size_t ) 0 )
 8001b54:	4605      	mov	r5, r0
 8001b56:	b918      	cbnz	r0, 8001b60 <xStreamBufferSend+0xfc>
}
 8001b58:	4628      	mov	r0, r5
 8001b5a:	b007      	add	sp, #28
 8001b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff fd55 	bl	8001610 <prvBytesInBuffer>
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	4298      	cmp	r0, r3
 8001b6a:	d3f5      	bcc.n	8001b58 <xStreamBufferSend+0xf4>
            sbSEND_COMPLETED( pxStreamBuffer );
 8001b6c:	f000 fefc 	bl	8002968 <vTaskSuspendAll>
 8001b70:	6923      	ldr	r3, [r4, #16]
 8001b72:	b143      	cbz	r3, 8001b86 <xStreamBufferSend+0x122>
 8001b74:	6920      	ldr	r0, [r4, #16]
 8001b76:	2600      	movs	r6, #0
 8001b78:	9600      	str	r6, [sp, #0]
 8001b7a:	4633      	mov	r3, r6
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	4631      	mov	r1, r6
 8001b80:	f000 ff3e 	bl	8002a00 <xTaskGenericNotify>
 8001b84:	6126      	str	r6, [r4, #16]
 8001b86:	f001 fb85 	bl	8003294 <xTaskResumeAll>
    return xReturn;
 8001b8a:	e7e5      	b.n	8001b58 <xStreamBufferSend+0xf4>

08001b8c <xStreamBufferSendFromISR>:
    configASSERT( pvTxData );
 8001b8c:	b1f1      	cbz	r1, 8001bcc <xStreamBufferSendFromISR+0x40>
{
 8001b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	4604      	mov	r4, r0
 8001b96:	4615      	mov	r5, r2
 8001b98:	461e      	mov	r6, r3
 8001b9a:	460f      	mov	r7, r1
    configASSERT( pxStreamBuffer );
 8001b9c:	b1f8      	cbz	r0, 8001bde <xStreamBufferSendFromISR+0x52>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001b9e:	7f03      	ldrb	r3, [r0, #28]
 8001ba0:	f013 0f01 	tst.w	r3, #1
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001ba4:	bf14      	ite	ne
 8001ba6:	f102 0804 	addne.w	r8, r2, #4
    size_t xRequiredSpace = xDataLengthBytes;
 8001baa:	4690      	moveq	r8, r2
    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001bac:	f7ff ff3f 	bl	8001a2e <xStreamBufferSpacesAvailable>
 8001bb0:	4603      	mov	r3, r0
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001bb2:	f8cd 8000 	str.w	r8, [sp]
 8001bb6:	462a      	mov	r2, r5
 8001bb8:	4639      	mov	r1, r7
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fd72 	bl	80016a4 <prvWriteMessageToBuffer>
    if( xReturn > ( size_t ) 0 )
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	b9a8      	cbnz	r0, 8001bf0 <xStreamBufferSendFromISR+0x64>
}
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	b002      	add	sp, #8
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	f3bf 8f4f 	dsb	sy
    configASSERT( pvTxData );
 8001bdc:	e7fe      	b.n	8001bdc <xStreamBufferSendFromISR+0x50>
 8001bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001bee:	e7fe      	b.n	8001bee <xStreamBufferSendFromISR+0x62>
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fd0d 	bl	8001610 <prvBytesInBuffer>
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	d3e3      	bcc.n	8001bc4 <xStreamBufferSendFromISR+0x38>
    __asm volatile
 8001bfc:	f3ef 8711 	mrs	r7, BASEPRI
 8001c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8001c10:	6923      	ldr	r3, [r4, #16]
 8001c12:	b14b      	cbz	r3, 8001c28 <xStreamBufferSendFromISR+0x9c>
 8001c14:	6920      	ldr	r0, [r4, #16]
 8001c16:	9601      	str	r6, [sp, #4]
 8001c18:	2600      	movs	r6, #0
 8001c1a:	9600      	str	r6, [sp, #0]
 8001c1c:	4633      	mov	r3, r6
 8001c1e:	4632      	mov	r2, r6
 8001c20:	4631      	mov	r1, r6
 8001c22:	f000 ffb9 	bl	8002b98 <xTaskGenericNotifyFromISR>
 8001c26:	6126      	str	r6, [r4, #16]
    __asm volatile
 8001c28:	f387 8811 	msr	BASEPRI, r7
    return xReturn;
 8001c2c:	e7ca      	b.n	8001bc4 <xStreamBufferSendFromISR+0x38>

08001c2e <xStreamBufferIsFull>:
    configASSERT( pxStreamBuffer );
 8001c2e:	b168      	cbz	r0, 8001c4c <xStreamBufferIsFull+0x1e>
{
 8001c30:	b510      	push	{r4, lr}
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001c32:	7f02      	ldrb	r2, [r0, #28]
        xBytesToStoreMessageLength = 0;
 8001c34:	f012 0f01 	tst.w	r2, #1
 8001c38:	bf14      	ite	ne
 8001c3a:	2404      	movne	r4, #4
 8001c3c:	2400      	moveq	r4, #0
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 8001c3e:	f7ff fef6 	bl	8001a2e <xStreamBufferSpacesAvailable>
}
 8001c42:	42a0      	cmp	r0, r4
 8001c44:	bf8c      	ite	hi
 8001c46:	2000      	movhi	r0, #0
 8001c48:	2001      	movls	r0, #1
 8001c4a:	bd10      	pop	{r4, pc}
    __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001c5c:	e7fe      	b.n	8001c5c <xStreamBufferIsFull+0x2e>

08001c5e <xStreamBufferBytesAvailable>:
{
 8001c5e:	b508      	push	{r3, lr}
    configASSERT( pxStreamBuffer );
 8001c60:	b110      	cbz	r0, 8001c68 <xStreamBufferBytesAvailable+0xa>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8001c62:	f7ff fcd5 	bl	8001610 <prvBytesInBuffer>
}
 8001c66:	bd08      	pop	{r3, pc}
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001c78:	e7fe      	b.n	8001c78 <xStreamBufferBytesAvailable+0x1a>

08001c7a <xStreamBufferSetTriggerLevel>:
    configASSERT( pxStreamBuffer );
 8001c7a:	b140      	cbz	r0, 8001c8e <xStreamBufferSetTriggerLevel+0x14>
    if( xTriggerLevel == ( size_t ) 0 )
 8001c7c:	2901      	cmp	r1, #1
 8001c7e:	bf38      	it	cc
 8001c80:	2101      	movcc	r1, #1
    if( xTriggerLevel < pxStreamBuffer->xLength )
 8001c82:	6882      	ldr	r2, [r0, #8]
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d90b      	bls.n	8001ca0 <xStreamBufferSetTriggerLevel+0x26>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8001c88:	60c1      	str	r1, [r0, #12]
        xReturn = pdPASS;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	4770      	bx	lr
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001c9e:	e7fe      	b.n	8001c9e <xStreamBufferSetTriggerLevel+0x24>
        xReturn = pdFALSE;
 8001ca0:	2000      	movs	r0, #0
}
 8001ca2:	4770      	bx	lr

08001ca4 <xStreamBufferSendCompletedFromISR>:
    configASSERT( pxStreamBuffer );
 8001ca4:	b1e8      	cbz	r0, 8001ce2 <xStreamBufferSendCompletedFromISR+0x3e>
{
 8001ca6:	b570      	push	{r4, r5, r6, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	4604      	mov	r4, r0
    __asm volatile
 8001cac:	f3ef 8611 	mrs	r6, BASEPRI
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8001cc0:	6903      	ldr	r3, [r0, #16]
 8001cc2:	b1bb      	cbz	r3, 8001cf4 <xStreamBufferSendCompletedFromISR+0x50>
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8001cc4:	6900      	ldr	r0, [r0, #16]
 8001cc6:	9101      	str	r1, [sp, #4]
 8001cc8:	2500      	movs	r5, #0
 8001cca:	9500      	str	r5, [sp, #0]
 8001ccc:	462b      	mov	r3, r5
 8001cce:	462a      	mov	r2, r5
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f000 ff61 	bl	8002b98 <xTaskGenericNotifyFromISR>
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8001cd6:	6125      	str	r5, [r4, #16]
            xReturn = pdTRUE;
 8001cd8:	2001      	movs	r0, #1
    __asm volatile
 8001cda:	f386 8811 	msr	BASEPRI, r6
}
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
    __asm volatile
 8001ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001cf2:	e7fe      	b.n	8001cf2 <xStreamBufferSendCompletedFromISR+0x4e>
            xReturn = pdFALSE;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e7f0      	b.n	8001cda <xStreamBufferSendCompletedFromISR+0x36>

08001cf8 <xStreamBufferReceiveCompletedFromISR>:
    configASSERT( pxStreamBuffer );
 8001cf8:	b1e8      	cbz	r0, 8001d36 <xStreamBufferReceiveCompletedFromISR+0x3e>
{
 8001cfa:	b570      	push	{r4, r5, r6, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	4604      	mov	r4, r0
    __asm volatile
 8001d00:	f3ef 8611 	mrs	r6, BASEPRI
 8001d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8001d14:	6943      	ldr	r3, [r0, #20]
 8001d16:	b1bb      	cbz	r3, 8001d48 <xStreamBufferReceiveCompletedFromISR+0x50>
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8001d18:	6940      	ldr	r0, [r0, #20]
 8001d1a:	9101      	str	r1, [sp, #4]
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	9500      	str	r5, [sp, #0]
 8001d20:	462b      	mov	r3, r5
 8001d22:	462a      	mov	r2, r5
 8001d24:	4629      	mov	r1, r5
 8001d26:	f000 ff37 	bl	8002b98 <xTaskGenericNotifyFromISR>
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8001d2a:	6165      	str	r5, [r4, #20]
            xReturn = pdTRUE;
 8001d2c:	2001      	movs	r0, #1
    __asm volatile
 8001d2e:	f386 8811 	msr	BASEPRI, r6
}
 8001d32:	b002      	add	sp, #8
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
    __asm volatile
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001d46:	e7fe      	b.n	8001d46 <xStreamBufferReceiveCompletedFromISR+0x4e>
            xReturn = pdFALSE;
 8001d48:	2000      	movs	r0, #0
 8001d4a:	e7f0      	b.n	8001d2e <xStreamBufferReceiveCompletedFromISR+0x36>

08001d4c <xStreamBufferGenericCreate>:
    {
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	4604      	mov	r4, r0
 8001d52:	460d      	mov	r5, r1
        if( xIsMessageBuffer == pdTRUE )
 8001d54:	2a01      	cmp	r2, #1
 8001d56:	d009      	beq.n	8001d6c <xStreamBufferGenericCreate+0x20>
            configASSERT( xBufferSizeBytes > 0 );
 8001d58:	b9a8      	cbnz	r0, 8001d86 <xStreamBufferGenericCreate+0x3a>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	e7fe      	b.n	8001d6a <xStreamBufferGenericCreate+0x1e>
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001d6c:	2804      	cmp	r0, #4
 8001d6e:	d808      	bhi.n	8001d82 <xStreamBufferGenericCreate+0x36>
 8001d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	e7fe      	b.n	8001d80 <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8001d82:	2701      	movs	r7, #1
 8001d84:	e000      	b.n	8001d88 <xStreamBufferGenericCreate+0x3c>
            ucFlags = 0;
 8001d86:	2700      	movs	r7, #0
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001d88:	42ac      	cmp	r4, r5
 8001d8a:	d208      	bcs.n	8001d9e <xStreamBufferGenericCreate+0x52>
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	e7fe      	b.n	8001d9c <xStreamBufferGenericCreate+0x50>
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8001d9e:	f114 0f26 	cmn.w	r4, #38	; 0x26
 8001da2:	d810      	bhi.n	8001dc6 <xStreamBufferGenericCreate+0x7a>
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8001da4:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8001da8:	f002 fe92 	bl	8004ad0 <pvPortMalloc>
        if( pucAllocatedMemory != NULL )
 8001dac:	4606      	mov	r6, r0
 8001dae:	b158      	cbz	r0, 8001dc8 <xStreamBufferGenericCreate+0x7c>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8001db0:	9700      	str	r7, [sp, #0]
 8001db2:	462b      	mov	r3, r5
 8001db4:	2d01      	cmp	r5, #1
 8001db6:	bf38      	it	cc
 8001db8:	2301      	movcc	r3, #1
 8001dba:	1c62      	adds	r2, r4, #1
 8001dbc:	f100 0124 	add.w	r1, r0, #36	; 0x24
 8001dc0:	f7ff fd02 	bl	80017c8 <prvInitialiseNewStreamBuffer>
            traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 8001dc4:	e000      	b.n	8001dc8 <xStreamBufferGenericCreate+0x7c>
            pucAllocatedMemory = NULL;
 8001dc6:	2600      	movs	r6, #0
    }
 8001dc8:	4630      	mov	r0, r6
 8001dca:	b003      	add	sp, #12
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dce <xStreamBufferGenericCreateStatic>:
        configASSERT( pucStreamBufferStorageArea );
 8001dce:	b17b      	cbz	r3, 8001df0 <xStreamBufferGenericCreateStatic+0x22>
    {
 8001dd0:	b500      	push	{lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	469c      	mov	ip, r3
        configASSERT( pxStaticStreamBuffer );
 8001dd6:	9b06      	ldr	r3, [sp, #24]
 8001dd8:	b19b      	cbz	r3, 8001e02 <xStreamBufferGenericCreateStatic+0x34>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001dda:	4281      	cmp	r1, r0
 8001ddc:	d91a      	bls.n	8001e14 <xStreamBufferGenericCreateStatic+0x46>
 8001dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de2:	f383 8811 	msr	BASEPRI, r3
 8001de6:	f3bf 8f6f 	isb	sy
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	e7fe      	b.n	8001dee <xStreamBufferGenericCreateStatic+0x20>
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
        configASSERT( pucStreamBufferStorageArea );
 8001e00:	e7fe      	b.n	8001e00 <xStreamBufferGenericCreateStatic+0x32>
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
        configASSERT( pxStaticStreamBuffer );
 8001e12:	e7fe      	b.n	8001e12 <xStreamBufferGenericCreateStatic+0x44>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	bf14      	ite	ne
 8001e18:	2303      	movne	r3, #3
 8001e1a:	2302      	moveq	r3, #2
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001e1c:	2804      	cmp	r0, #4
 8001e1e:	d808      	bhi.n	8001e32 <xStreamBufferGenericCreateStatic+0x64>
 8001e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	e7fe      	b.n	8001e30 <xStreamBufferGenericCreateStatic+0x62>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	9203      	str	r2, [sp, #12]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8001e36:	9a03      	ldr	r2, [sp, #12]
 8001e38:	2a24      	cmp	r2, #36	; 0x24
 8001e3a:	d008      	beq.n	8001e4e <xStreamBufferGenericCreateStatic+0x80>
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	e7fe      	b.n	8001e4c <xStreamBufferGenericCreateStatic+0x7e>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	2901      	cmp	r1, #1
 8001e54:	bf38      	it	cc
 8001e56:	2301      	movcc	r3, #1
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	9806      	ldr	r0, [sp, #24]
 8001e5e:	f7ff fcb3 	bl	80017c8 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8001e62:	9b06      	ldr	r3, [sp, #24]
 8001e64:	7f1b      	ldrb	r3, [r3, #28]
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	9a06      	ldr	r2, [sp, #24]
 8001e6c:	7713      	strb	r3, [r2, #28]
    }
 8001e6e:	4610      	mov	r0, r2
 8001e70:	b005      	add	sp, #20
 8001e72:	f85d fb04 	ldr.w	pc, [sp], #4

08001e76 <xStreamBufferNextMessageLengthBytes>:
    configASSERT( pxStreamBuffer );
 8001e76:	b148      	cbz	r0, 8001e8c <xStreamBufferNextMessageLengthBytes+0x16>
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	4604      	mov	r4, r0
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001e7e:	7f03      	ldrb	r3, [r0, #28]
 8001e80:	f013 0f01 	tst.w	r3, #1
 8001e84:	d10b      	bne.n	8001e9e <xStreamBufferNextMessageLengthBytes+0x28>
        xReturn = 0;
 8001e86:	2000      	movs	r0, #0
}
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
    configASSERT( pxStreamBuffer );
 8001e9c:	e7fe      	b.n	8001e9c <xStreamBufferNextMessageLengthBytes+0x26>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001e9e:	f7ff fbb7 	bl	8001610 <prvBytesInBuffer>
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8001ea2:	2804      	cmp	r0, #4
 8001ea4:	d80a      	bhi.n	8001ebc <xStreamBufferNextMessageLengthBytes+0x46>
            configASSERT( xBytesAvailable == 0 );
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d0ee      	beq.n	8001e88 <xStreamBufferNextMessageLengthBytes+0x12>
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	e7fe      	b.n	8001eba <xStreamBufferNextMessageLengthBytes+0x44>
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	eb0d 0102 	add.w	r1, sp, r2
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff fc16 	bl	80016f6 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8001eca:	9801      	ldr	r0, [sp, #4]
 8001ecc:	e7dc      	b.n	8001e88 <xStreamBufferNextMessageLengthBytes+0x12>

08001ece <vStreamBufferSetStreamBufferNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,
                                             UBaseType_t uxStreamBufferNumber )
    {
        xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8001ece:	6201      	str	r1, [r0, #32]
    }
 8001ed0:	4770      	bx	lr

08001ed2 <uxStreamBufferGetStreamBufferNumber>:
    }
 8001ed2:	6a00      	ldr	r0, [r0, #32]
 8001ed4:	4770      	bx	lr

08001ed6 <ucStreamBufferGetStreamBufferType>:

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
    {
        return( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 8001ed6:	7f00      	ldrb	r0, [r0, #28]
    }
 8001ed8:	f000 0001 	and.w	r0, r0, #1
 8001edc:	4770      	bx	lr
	...

08001ee0 <prvTaskIsTaskSuspended>:

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8001ee0:	b130      	cbz	r0, 8001ef0 <prvTaskIsTaskSuspended+0x10>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ee2:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <prvTaskIsTaskSuspended+0x38>)
 8001ee8:	4291      	cmp	r1, r2
 8001eea:	d00a      	beq.n	8001f02 <prvTaskIsTaskSuspended+0x22>
        BaseType_t xReturn = pdFALSE;
 8001eec:	2000      	movs	r0, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001eee:	4770      	bx	lr
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
        configASSERT( xTask );
 8001f00:	e7fe      	b.n	8001f00 <prvTaskIsTaskSuspended+0x20>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001f02:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
        BaseType_t xReturn = pdFALSE;
 8001f06:	3214      	adds	r2, #20
 8001f08:	fab3 f083 	clz	r0, r3
 8001f0c:	0940      	lsrs	r0, r0, #5
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	bf08      	it	eq
 8001f12:	2000      	moveq	r0, #0
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	24000040 	.word	0x24000040

08001f1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4604      	mov	r4, r0
 8001f20:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f24:	6a9e      	ldr	r6, [r3, #40]	; 0x28
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f28:	3084      	adds	r0, #132	; 0x84
 8001f2a:	f7fe fbd9 	bl	80006e0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001f32:	d116      	bne.n	8001f62 <prvAddCurrentTaskToDelayedList+0x46>
 8001f34:	b1ad      	cbz	r5, 8001f62 <prvAddCurrentTaskToDelayedList+0x46>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8001f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f42:	6890      	ldr	r0, [r2, #8]
 8001f44:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
 8001f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4a:	3184      	adds	r1, #132	; 0x84
 8001f4c:	6041      	str	r1, [r0, #4]
 8001f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f50:	3184      	adds	r1, #132	; 0x84
 8001f52:	6091      	str	r1, [r2, #8]
 8001f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001f62:	4434      	add	r4, r6
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 8001f6c:	42a6      	cmp	r6, r4
 8001f6e:	d906      	bls.n	8001f7e <prvAddCurrentTaskToDelayedList+0x62>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	3184      	adds	r1, #132	; 0x84
 8001f78:	f7fe fb8e 	bl	8000698 <vListInsert>
 8001f7c:	e7f0      	b.n	8001f60 <prvAddCurrentTaskToDelayedList+0x44>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f7e:	4d05      	ldr	r5, [pc, #20]	; (8001f94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f80:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001f82:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001f84:	3184      	adds	r1, #132	; 0x84
 8001f86:	f7fe fb87 	bl	8000698 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001f8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001f8c:	42a3      	cmp	r3, r4
 8001f8e:	d9e7      	bls.n	8001f60 <prvAddCurrentTaskToDelayedList+0x44>
                        xNextTaskUnblockTime = xTimeToWake;
 8001f90:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8001f92:	e7e5      	b.n	8001f60 <prvAddCurrentTaskToDelayedList+0x44>
 8001f94:	24000040 	.word	0x24000040

08001f98 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <prvResetNextTaskUnblockTime+0x20>)
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b923      	cbnz	r3, 8001faa <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <prvResetNextTaskUnblockTime+0x20>)
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <prvResetNextTaskUnblockTime+0x20>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	68d2      	ldr	r2, [r2, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	24000040 	.word	0x24000040

08001fbc <prvInitialiseNewTask>:
{
 8001fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	4680      	mov	r8, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	4616      	mov	r6, r2
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        uxPriority &= ~portPRIVILEGE_BIT;
 8001fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fcc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fd0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8001fd4:	4652      	mov	r2, sl
 8001fd6:	21a5      	movs	r1, #165	; 0xa5
 8001fd8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001fdc:	f00f f882 	bl	80110e4 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fe0:	f8d4 b0b0 	ldr.w	fp, [r4, #176]	; 0xb0
    if( pcName != NULL )
 8001fe4:	b1c5      	cbz	r5, 8002018 <prvInitialiseNewTask+0x5c>
 8001fe6:	1e6b      	subs	r3, r5, #1
 8001fe8:	f104 01b3 	add.w	r1, r4, #179	; 0xb3
 8001fec:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001ff2:	f801 2f01 	strb.w	r2, [r1, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8001ff6:	b10a      	cbz	r2, 8001ffc <prvInitialiseNewTask+0x40>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ff8:	42ab      	cmp	r3, r5
 8001ffa:	d1f8      	bne.n	8001fee <prvInitialiseNewTask+0x32>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002002:	2f37      	cmp	r7, #55	; 0x37
 8002004:	d90c      	bls.n	8002020 <prvInitialiseNewTask+0x64>
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	e7fe      	b.n	8002016 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002018:	2300      	movs	r3, #0
 800201a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800201e:	e7f0      	b.n	8002002 <prvInitialiseNewTask+0x46>
    pxNewTCB->uxPriority = uxPriority;
 8002020:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
            pxNewTCB->uxBasePriority = uxPriority;
 8002024:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
            pxNewTCB->uxMutexesHeld = 0;
 8002028:	2500      	movs	r5, #0
 800202a:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800202e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002032:	f7fe fb2e 	bl	8000692 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002036:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800203a:	f7fe fb2a 	bl	8000692 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800203e:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002042:	f1c7 0738 	rsb	r7, r7, #56	; 0x38
 8002046:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800204a:	f8c4 40a4 	str.w	r4, [r4, #164]	; 0xa4
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 800204e:	4633      	mov	r3, r6
 8002050:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002054:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002056:	1d20      	adds	r0, r4, #4
 8002058:	f002 fb54 	bl	8004704 <vPortStoreTaskMPUSettings>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800205c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
 8002060:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
 8002064:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002068:	f8a4 550c 	strh.w	r5, [r4, #1292]	; 0x50c
 800206c:	f884 550e 	strb.w	r5, [r4, #1294]	; 0x50e
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002070:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8002074:	4629      	mov	r1, r5
 8002076:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800207a:	f00f f833 	bl	80110e4 <memset>
 800207e:	f504 7371 	add.w	r3, r4, #964	; 0x3c4
 8002082:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8002086:	f204 432c 	addw	r3, r4, #1068	; 0x42c
 800208a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800208e:	f204 4394 	addw	r3, r4, #1172	; 0x494
 8002092:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8002096:	2201      	movs	r2, #1
 8002098:	2300      	movs	r3, #0
 800209a:	e9c4 2360 	strd	r2, r3, [r4, #384]	; 0x180
 800209e:	f243 330e 	movw	r3, #13070	; 0x330e
 80020a2:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
 80020a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80020aa:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
 80020ae:	f241 2334 	movw	r3, #4660	; 0x1234
 80020b2:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
 80020b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80020ba:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
 80020be:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80020c2:	f8a4 3190 	strh.w	r3, [r4, #400]	; 0x190
 80020c6:	2305      	movs	r3, #5
 80020c8:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
 80020cc:	230b      	movs	r3, #11
 80020ce:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020d2:	f1aa 0a04 	sub.w	sl, sl, #4
 80020d6:	44da      	add	sl, fp
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 80020d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020da:	0fdb      	lsrs	r3, r3, #31
 80020dc:	464a      	mov	r2, r9
 80020de:	4641      	mov	r1, r8
 80020e0:	f02a 0007 	bic.w	r0, sl, #7
 80020e4:	f002 fae0 	bl	80046a8 <pxPortInitialiseStack>
 80020e8:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80020ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020ec:	b103      	cbz	r3, 80020f0 <prvInitialiseNewTask+0x134>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020ee:	601c      	str	r4, [r3, #0]
}
 80020f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020f4 <prvAddNewTaskToReadyList>:
{
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 80020f8:	f007 fa28 	bl	800954c <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 80020fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002100:	3201      	adds	r2, #1
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
        if( pxCurrentTCB == NULL )
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	b173      	cbz	r3, 8002126 <prvAddNewTaskToReadyList+0x32>
            if( xSchedulerRunning == pdFALSE )
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 800210a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 800210e:	b97b      	cbnz	r3, 8002130 <prvAddNewTaskToReadyList+0x3c>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002118:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800211c:	429a      	cmp	r2, r3
 800211e:	d807      	bhi.n	8002130 <prvAddNewTaskToReadyList+0x3c>
                    pxCurrentTCB = pxNewTCB;
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 8002122:	62dd      	str	r5, [r3, #44]	; 0x2c
 8002124:	e004      	b.n	8002130 <prvAddNewTaskToReadyList+0x3c>
            pxCurrentTCB = pxNewTCB;
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 8002128:	62dd      	str	r5, [r3, #44]	; 0x2c
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d047      	beq.n	80021c0 <prvAddNewTaskToReadyList+0xcc>
        uxTaskNumber++;
 8002130:	4a35      	ldr	r2, [pc, #212]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 8002132:	f8d2 34e0 	ldr.w	r3, [r2, #1248]	; 0x4e0
 8002136:	3301      	adds	r3, #1
 8002138:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800213c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
        prvAddTaskToReadyList( pxNewTCB );
 8002140:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002144:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002148:	4293      	cmp	r3, r2
 800214a:	d902      	bls.n	8002152 <prvAddNewTaskToReadyList+0x5e>
 800214c:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 800214e:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8002152:	4c2d      	ldr	r4, [pc, #180]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 8002154:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002158:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	f8c5 108c 	str.w	r1, [r5, #140]	; 0x8c
 8002168:	f105 0284 	add.w	r2, r5, #132	; 0x84
 800216c:	604a      	str	r2, [r1, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8002174:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8002178:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800217c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002180:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8002184:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8002188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218a:	3201      	adds	r2, #1
 800218c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    taskEXIT_CRITICAL();
 8002192:	f007 f9ef 	bl	8009574 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8002196:	f8d4 34dc 	ldr.w	r3, [r4, #1244]	; 0x4dc
 800219a:	b183      	cbz	r3, 80021be <prvAddNewTaskToReadyList+0xca>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800219c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800219e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80021a2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d209      	bcs.n	80021be <prvAddNewTaskToReadyList+0xca>
            taskYIELD_IF_USING_PREEMPTION();
 80021aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	f3bf 8f6f 	isb	sy
}
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c0:	4e11      	ldr	r6, [pc, #68]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 80021c2:	f106 0440 	add.w	r4, r6, #64	; 0x40
 80021c6:	f506 6694 	add.w	r6, r6, #1184	; 0x4a0
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe fa56 	bl	800067c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021d0:	3414      	adds	r4, #20
 80021d2:	42b4      	cmp	r4, r6
 80021d4:	d1f9      	bne.n	80021ca <prvAddNewTaskToReadyList+0xd6>
    vListInitialise( &xDelayedTaskList1 );
 80021d6:	4c0c      	ldr	r4, [pc, #48]	; (8002208 <prvAddNewTaskToReadyList+0x114>)
 80021d8:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
 80021dc:	4638      	mov	r0, r7
 80021de:	f7fe fa4d 	bl	800067c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80021e2:	f204 46b4 	addw	r6, r4, #1204	; 0x4b4
 80021e6:	4630      	mov	r0, r6
 80021e8:	f7fe fa48 	bl	800067c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80021ec:	f104 0014 	add.w	r0, r4, #20
 80021f0:	f7fe fa44 	bl	800067c <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 80021f4:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80021f8:	f7fe fa40 	bl	800067c <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe fa3d 	bl	800067c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8002202:	6367      	str	r7, [r4, #52]	; 0x34
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002204:	6326      	str	r6, [r4, #48]	; 0x30
}
 8002206:	e793      	b.n	8002130 <prvAddNewTaskToReadyList+0x3c>
 8002208:	24000040 	.word	0x24000040

0800220c <prvDeleteTCB>:
    {
 800220c:	b510      	push	{r4, lr}
 800220e:	4604      	mov	r4, r0
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002210:	30d8      	adds	r0, #216	; 0xd8
 8002212:	f00f f853 	bl	80112bc <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002216:	f894 350f 	ldrb.w	r3, [r4, #1295]	; 0x50f
 800221a:	b163      	cbz	r3, 8002236 <prvDeleteTCB+0x2a>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800221c:	2b01      	cmp	r3, #1
 800221e:	d012      	beq.n	8002246 <prvDeleteTCB+0x3a>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002220:	2b02      	cmp	r3, #2
 8002222:	d00f      	beq.n	8002244 <prvDeleteTCB+0x38>
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	e7fe      	b.n	8002234 <prvDeleteTCB+0x28>
                    vPortFreeStack( pxTCB->pxStack );
 8002236:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800223a:	f002 fce7 	bl	8004c0c <vPortFree>
                    vPortFree( pxTCB );
 800223e:	4620      	mov	r0, r4
 8002240:	f002 fce4 	bl	8004c0c <vPortFree>
    }
 8002244:	bd10      	pop	{r4, pc}
                    vPortFree( pxTCB );
 8002246:	4620      	mov	r0, r4
 8002248:	f002 fce0 	bl	8004c0c <vPortFree>
 800224c:	e7fa      	b.n	8002244 <prvDeleteTCB+0x38>

0800224e <prvIdleTask>:
{
 800224e:	b508      	push	{r3, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002250:	4c11      	ldr	r4, [pc, #68]	; (8002298 <prvIdleTask+0x4a>)
 8002252:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002256:	b1cb      	cbz	r3, 800228c <prvIdleTask+0x3e>
                taskENTER_CRITICAL();
 8002258:	f007 f978 	bl	800954c <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800225c:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 8002260:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002262:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8002266:	f7fe fa3b 	bl	80006e0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800226a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800226c:	3b01      	subs	r3, #1
 800226e:	63e3      	str	r3, [r4, #60]	; 0x3c
                    --uxDeletedTasksWaitingCleanUp;
 8002270:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002274:	3b01      	subs	r3, #1
 8002276:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
                taskEXIT_CRITICAL();
 800227a:	f007 f97b 	bl	8009574 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 800227e:	4628      	mov	r0, r5
 8002280:	f7ff ffc4 	bl	800220c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002284:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e5      	bne.n	8002258 <prvIdleTask+0xa>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800228c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800228e:	2b01      	cmp	r3, #1
 8002290:	d9df      	bls.n	8002252 <prvIdleTask+0x4>
                    taskYIELD();
 8002292:	df01      	svc	1
 8002294:	e7dd      	b.n	8002252 <prvIdleTask+0x4>
 8002296:	bf00      	nop
 8002298:	24000040 	.word	0x24000040

0800229c <xTaskCreate>:
    {
 800229c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	4607      	mov	r7, r0
 80022a4:	4688      	mov	r8, r1
 80022a6:	4614      	mov	r4, r2
 80022a8:	461e      	mov	r6, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022aa:	0090      	lsls	r0, r2, #2
 80022ac:	f002 fc10 	bl	8004ad0 <pvPortMalloc>
                if( pxStack != NULL )
 80022b0:	b310      	cbz	r0, 80022f8 <xTaskCreate+0x5c>
 80022b2:	4681      	mov	r9, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022b4:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 80022b8:	f002 fc0a 	bl	8004ad0 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 80022bc:	4605      	mov	r5, r0
 80022be:	b1a8      	cbz	r0, 80022ec <xTaskCreate+0x50>
                        pxNewTCB->pxStack = pxStack;
 80022c0:	f8c0 90b0 	str.w	r9, [r0, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f880 350f 	strb.w	r3, [r0, #1295]	; 0x50f
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022ca:	9303      	str	r3, [sp, #12]
 80022cc:	9002      	str	r0, [sp, #8]
 80022ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4633      	mov	r3, r6
 80022d8:	4622      	mov	r2, r4
 80022da:	4641      	mov	r1, r8
 80022dc:	4638      	mov	r0, r7
 80022de:	f7ff fe6d 	bl	8001fbc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff ff06 	bl	80020f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e007      	b.n	80022fc <xTaskCreate+0x60>
                        vPortFreeStack( pxStack );
 80022ec:	4648      	mov	r0, r9
 80022ee:	f002 fc8d 	bl	8004c0c <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f6:	e001      	b.n	80022fc <xTaskCreate+0x60>
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 80022fc:	b005      	add	sp, #20
 80022fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002302 <xTaskCreateStatic>:
    {
 8002302:	b530      	push	{r4, r5, lr}
 8002304:	b087      	sub	sp, #28
 8002306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        configASSERT( puxStackBuffer != NULL );
 8002308:	b18c      	cbz	r4, 800232e <xTaskCreateStatic+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 800230a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800230c:	b1c5      	cbz	r5, 8002340 <xTaskCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticTask_t );
 800230e:	f44f 65a2 	mov.w	r5, #1296	; 0x510
 8002312:	9504      	str	r5, [sp, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8002314:	9d04      	ldr	r5, [sp, #16]
 8002316:	f5b5 6fa2 	cmp.w	r5, #1296	; 0x510
 800231a:	d01a      	beq.n	8002352 <xTaskCreateStatic+0x50>
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	e7fe      	b.n	800232c <xTaskCreateStatic+0x2a>
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
        configASSERT( puxStackBuffer != NULL );
 800233e:	e7fe      	b.n	800233e <xTaskCreateStatic+0x3c>
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskBuffer != NULL );
 8002350:	e7fe      	b.n	8002350 <xTaskCreateStatic+0x4e>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002352:	9d04      	ldr	r5, [sp, #16]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002354:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002356:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800235a:	2402      	movs	r4, #2
 800235c:	f885 450f 	strb.w	r4, [r5, #1295]	; 0x50f
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002360:	2400      	movs	r4, #0
 8002362:	9403      	str	r4, [sp, #12]
 8002364:	9502      	str	r5, [sp, #8]
 8002366:	ac05      	add	r4, sp, #20
 8002368:	9401      	str	r4, [sp, #4]
 800236a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800236c:	9400      	str	r4, [sp, #0]
 800236e:	f7ff fe25 	bl	8001fbc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002372:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002374:	f7ff febe 	bl	80020f4 <prvAddNewTaskToReadyList>
    }
 8002378:	9805      	ldr	r0, [sp, #20]
 800237a:	b007      	add	sp, #28
 800237c:	bd30      	pop	{r4, r5, pc}

0800237e <xTaskCreateRestricted>:
        configASSERT( pxTaskDefinition->puxStackBuffer );
 800237e:	6943      	ldr	r3, [r0, #20]
 8002380:	b313      	cbz	r3, 80023c8 <xTaskCreateRestricted+0x4a>
    {
 8002382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002384:	b085      	sub	sp, #20
 8002386:	4604      	mov	r4, r0
 8002388:	460d      	mov	r5, r1
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800238a:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 800238e:	f002 fb9f 	bl	8004ad0 <pvPortMalloc>
            if( pxNewTCB != NULL )
 8002392:	4607      	mov	r7, r0
 8002394:	b308      	cbz	r0, 80023da <xTaskCreateRestricted+0x5c>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8002396:	6963      	ldr	r3, [r4, #20]
 8002398:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 800239c:	2601      	movs	r6, #1
 800239e:	f880 650f 	strb.w	r6, [r0, #1295]	; 0x50f
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80023a2:	4623      	mov	r3, r4
 80023a4:	f853 0b18 	ldr.w	r0, [r3], #24
 80023a8:	9303      	str	r3, [sp, #12]
 80023aa:	9702      	str	r7, [sp, #8]
 80023ac:	9501      	str	r5, [sp, #4]
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	68e3      	ldr	r3, [r4, #12]
 80023b4:	8922      	ldrh	r2, [r4, #8]
 80023b6:	6861      	ldr	r1, [r4, #4]
 80023b8:	f7ff fe00 	bl	8001fbc <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 80023bc:	4638      	mov	r0, r7
 80023be:	f7ff fe99 	bl	80020f4 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 80023c2:	4630      	mov	r0, r6
    }
 80023c4:	b005      	add	sp, #20
 80023c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->puxStackBuffer );
 80023d8:	e7fe      	b.n	80023d8 <xTaskCreateRestricted+0x5a>
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return xReturn;
 80023de:	e7f1      	b.n	80023c4 <xTaskCreateRestricted+0x46>

080023e0 <xTaskCreateRestrictedStatic>:
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 80023e0:	6943      	ldr	r3, [r0, #20]
 80023e2:	b30b      	cbz	r3, 8002428 <xTaskCreateRestrictedStatic+0x48>
    {
 80023e4:	b510      	push	{r4, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	4684      	mov	ip, r0
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 80023ea:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80023ee:	b324      	cbz	r4, 800243a <xTaskCreateRestrictedStatic+0x5a>
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 80023f0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f884 350f 	strb.w	r3, [r4, #1295]	; 0x50f
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80023fa:	4603      	mov	r3, r0
 80023fc:	f853 0b18 	ldr.w	r0, [r3], #24
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	9402      	str	r4, [sp, #8]
 8002404:	9101      	str	r1, [sp, #4]
 8002406:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8002410:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002414:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002418:	f7ff fdd0 	bl	8001fbc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fe69 	bl	80020f4 <prvAddNewTaskToReadyList>
    }
 8002422:	2001      	movs	r0, #1
 8002424:	b004      	add	sp, #16
 8002426:	bd10      	pop	{r4, pc}
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 8002438:	e7fe      	b.n	8002438 <xTaskCreateRestrictedStatic+0x58>
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 800244a:	e7fe      	b.n	800244a <xTaskCreateRestrictedStatic+0x6a>

0800244c <vTaskAllocateMPURegions>:
    {
 800244c:	b510      	push	{r4, lr}
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800244e:	4604      	mov	r4, r0
 8002450:	b128      	cbz	r0, 800245e <vTaskAllocateMPURegions+0x12>
        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 8002452:	2300      	movs	r3, #0
 8002454:	461a      	mov	r2, r3
 8002456:	1d20      	adds	r0, r4, #4
 8002458:	f002 f954 	bl	8004704 <vPortStoreTaskMPUSettings>
    }
 800245c:	bd10      	pop	{r4, pc}
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800245e:	4b01      	ldr	r3, [pc, #4]	; (8002464 <vTaskAllocateMPURegions+0x18>)
 8002460:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002462:	e7f6      	b.n	8002452 <vTaskAllocateMPURegions+0x6>
 8002464:	24000040 	.word	0x24000040

08002468 <vTaskDelete>:
    {
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 800246c:	f007 f86e 	bl	800954c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002470:	b364      	cbz	r4, 80024cc <vTaskDelete+0x64>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002472:	f104 0584 	add.w	r5, r4, #132	; 0x84
 8002476:	4628      	mov	r0, r5
 8002478:	f7fe f932 	bl	80006e0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800247c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002480:	b11b      	cbz	r3, 800248a <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002482:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8002486:	f7fe f92b 	bl	80006e0 <uxListRemove>
            uxTaskNumber++;
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <vTaskDelete+0xb4>)
 800248c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8002490:	3201      	adds	r2, #1
 8002492:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
            if( pxTCB == pxCurrentTCB )
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	42a3      	cmp	r3, r4
 800249a:	d01a      	beq.n	80024d2 <vTaskDelete+0x6a>
                --uxCurrentNumberOfTasks;
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <vTaskDelete+0xb4>)
 800249e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80024a0:	3b01      	subs	r3, #1
 80024a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                prvResetNextTaskUnblockTime();
 80024a4:	f7ff fd78 	bl	8001f98 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80024a8:	f007 f864 	bl	8009574 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <vTaskDelete+0xb4>)
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	d002      	beq.n	80024ba <vTaskDelete+0x52>
            prvDeleteTCB( pxTCB );
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff fea9 	bl	800220c <prvDeleteTCB>
        if( xSchedulerRunning != pdFALSE )
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <vTaskDelete+0xb4>)
 80024bc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 80024c0:	b11b      	cbz	r3, 80024ca <vTaskDelete+0x62>
            if( pxTCB == pxCurrentTCB )
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <vTaskDelete+0xb4>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	d00f      	beq.n	80024ea <vTaskDelete+0x82>
    }
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <vTaskDelete+0xb4>)
 80024ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80024d0:	e7cf      	b.n	8002472 <vTaskDelete+0xa>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80024d2:	4e12      	ldr	r6, [pc, #72]	; (800251c <vTaskDelete+0xb4>)
 80024d4:	4629      	mov	r1, r5
 80024d6:	f506 6099 	add.w	r0, r6, #1224	; 0x4c8
 80024da:	f7fe f8f6 	bl	80006ca <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80024de:	f8d6 34e8 	ldr.w	r3, [r6, #1256]	; 0x4e8
 80024e2:	3301      	adds	r3, #1
 80024e4:	f8c6 34e8 	str.w	r3, [r6, #1256]	; 0x4e8
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 80024e8:	e7de      	b.n	80024a8 <vTaskDelete+0x40>
                configASSERT( uxSchedulerSuspended == 0 );
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <vTaskDelete+0xb4>)
 80024ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80024f0:	b143      	cbz	r3, 8002504 <vTaskDelete+0x9c>
 80024f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	e7fe      	b.n	8002502 <vTaskDelete+0x9a>
                portYIELD_WITHIN_API();
 8002504:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	f3bf 8f6f 	isb	sy
    }
 8002518:	e7d7      	b.n	80024ca <vTaskDelete+0x62>
 800251a:	bf00      	nop
 800251c:	24000040 	.word	0x24000040

08002520 <uxTaskPriorityGet>:
    {
 8002520:	b510      	push	{r4, lr}
 8002522:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 8002524:	f007 f812 	bl	800954c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8002528:	b12c      	cbz	r4, 8002536 <uxTaskPriorityGet+0x16>
            uxReturn = pxTCB->uxPriority;
 800252a:	f8d4 40ac 	ldr.w	r4, [r4, #172]	; 0xac
        taskEXIT_CRITICAL();
 800252e:	f007 f821 	bl	8009574 <vPortExitCritical>
    }
 8002532:	4620      	mov	r0, r4
 8002534:	bd10      	pop	{r4, pc}
            pxTCB = prvGetTCBFromHandle( xTask );
 8002536:	4b01      	ldr	r3, [pc, #4]	; (800253c <uxTaskPriorityGet+0x1c>)
 8002538:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800253a:	e7f6      	b.n	800252a <uxTaskPriorityGet+0xa>
 800253c:	24000040 	.word	0x24000040

08002540 <uxTaskPriorityGetFromISR>:
    {
 8002540:	b510      	push	{r4, lr}
 8002542:	4604      	mov	r4, r0
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002544:	f007 f854 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8002548:	f3ef 8311 	mrs	r3, BASEPRI
 800254c:	f04f 0250 	mov.w	r2, #80	; 0x50
 8002550:	f382 8811 	msr	BASEPRI, r2
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
            pxTCB = prvGetTCBFromHandle( xTask );
 800255c:	b124      	cbz	r4, 8002568 <uxTaskPriorityGetFromISR+0x28>
            uxReturn = pxTCB->uxPriority;
 800255e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    __asm volatile
 8002562:	f383 8811 	msr	BASEPRI, r3
    }
 8002566:	bd10      	pop	{r4, pc}
            pxTCB = prvGetTCBFromHandle( xTask );
 8002568:	4a01      	ldr	r2, [pc, #4]	; (8002570 <uxTaskPriorityGetFromISR+0x30>)
 800256a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800256c:	e7f7      	b.n	800255e <uxTaskPriorityGetFromISR+0x1e>
 800256e:	bf00      	nop
 8002570:	24000040 	.word	0x24000040

08002574 <eTaskGetState>:
    {
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( pxTCB );
 8002576:	b1d0      	cbz	r0, 80025ae <eTaskGetState+0x3a>
 8002578:	4604      	mov	r4, r0
        if( pxTCB == pxCurrentTCB )
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <eTaskGetState+0x90>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	4283      	cmp	r3, r0
 8002580:	d035      	beq.n	80025ee <eTaskGetState+0x7a>
            taskENTER_CRITICAL();
 8002582:	f006 ffe3 	bl	800954c <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002586:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
                pxDelayedList = pxDelayedTaskList;
 800258a:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <eTaskGetState+0x90>)
 800258c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800258e:	6b1f      	ldr	r7, [r3, #48]	; 0x30
            taskEXIT_CRITICAL();
 8002590:	f006 fff0 	bl	8009574 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002594:	42b5      	cmp	r5, r6
 8002596:	d02c      	beq.n	80025f2 <eTaskGetState+0x7e>
 8002598:	42bd      	cmp	r5, r7
 800259a:	d02a      	beq.n	80025f2 <eTaskGetState+0x7e>
                else if( pxStateList == &xSuspendedTaskList )
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <eTaskGetState+0x90>)
 800259e:	429d      	cmp	r5, r3
 80025a0:	d00e      	beq.n	80025c0 <eTaskGetState+0x4c>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80025a2:	b365      	cbz	r5, 80025fe <eTaskGetState+0x8a>
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <eTaskGetState+0x94>)
 80025a6:	429d      	cmp	r5, r3
 80025a8:	d029      	beq.n	80025fe <eTaskGetState+0x8a>
                eReturn = eReady;
 80025aa:	2001      	movs	r0, #1
 80025ac:	e020      	b.n	80025f0 <eTaskGetState+0x7c>
    __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
        configASSERT( pxTCB );
 80025be:	e7fe      	b.n	80025be <eTaskGetState+0x4a>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80025c0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80025c4:	b10b      	cbz	r3, 80025ca <eTaskGetState+0x56>
                        eReturn = eBlocked;
 80025c6:	2002      	movs	r0, #2
 80025c8:	e012      	b.n	80025f0 <eTaskGetState+0x7c>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80025ca:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d010      	beq.n	80025f6 <eTaskGetState+0x82>
 80025d4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00d      	beq.n	80025fa <eTaskGetState+0x86>
 80025de:	f894 350e 	ldrb.w	r3, [r4, #1294]	; 0x50e
 80025e2:	b2db      	uxtb	r3, r3
                                        eReturn = eBlocked;
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	bf14      	ite	ne
 80025e8:	2003      	movne	r0, #3
 80025ea:	2002      	moveq	r0, #2
 80025ec:	e000      	b.n	80025f0 <eTaskGetState+0x7c>
            eReturn = eRunning;
 80025ee:	2000      	movs	r0, #0
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80025f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                eReturn = eBlocked;
 80025f2:	2002      	movs	r0, #2
 80025f4:	e7fc      	b.n	80025f0 <eTaskGetState+0x7c>
                                        eReturn = eBlocked;
 80025f6:	2002      	movs	r0, #2
 80025f8:	e7fa      	b.n	80025f0 <eTaskGetState+0x7c>
 80025fa:	2002      	movs	r0, #2
 80025fc:	e7f8      	b.n	80025f0 <eTaskGetState+0x7c>
                    eReturn = eDeleted;
 80025fe:	2004      	movs	r0, #4
 8002600:	e7f6      	b.n	80025f0 <eTaskGetState+0x7c>
 8002602:	bf00      	nop
 8002604:	24000040 	.word	0x24000040
 8002608:	24000508 	.word	0x24000508

0800260c <vTaskPrioritySet>:
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800260c:	2937      	cmp	r1, #55	; 0x37
 800260e:	d908      	bls.n	8002622 <vTaskPrioritySet+0x16>
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	e7fe      	b.n	8002620 <vTaskPrioritySet+0x14>
    {
 8002622:	b570      	push	{r4, r5, r6, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	460d      	mov	r5, r1
        taskENTER_CRITICAL();
 8002628:	f006 ff90 	bl	800954c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 800262c:	b18c      	cbz	r4, 8002652 <vTaskPrioritySet+0x46>
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800262e:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
            if( uxCurrentBasePriority != uxNewPriority )
 8002632:	4295      	cmp	r5, r2
 8002634:	d03a      	beq.n	80026ac <vTaskPrioritySet+0xa0>
                if( uxNewPriority > uxCurrentBasePriority )
 8002636:	d90f      	bls.n	8002658 <vTaskPrioritySet+0x4c>
                    if( pxTCB != pxCurrentTCB )
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <vTaskPrioritySet+0x108>)
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	42a3      	cmp	r3, r4
 800263e:	d038      	beq.n	80026b2 <vTaskPrioritySet+0xa6>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002640:	4b34      	ldr	r3, [pc, #208]	; (8002714 <vTaskPrioritySet+0x108>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8002648:	42ae      	cmp	r6, r5
 800264a:	bf8c      	ite	hi
 800264c:	2600      	movhi	r6, #0
 800264e:	2601      	movls	r6, #1
 8002650:	e008      	b.n	8002664 <vTaskPrioritySet+0x58>
            pxTCB = prvGetTCBFromHandle( xTask );
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <vTaskPrioritySet+0x108>)
 8002654:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002656:	e7ea      	b.n	800262e <vTaskPrioritySet+0x22>
                else if( pxTCB == pxCurrentTCB )
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <vTaskPrioritySet+0x108>)
 800265a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800265c:	42a6      	cmp	r6, r4
 800265e:	bf14      	ite	ne
 8002660:	2600      	movne	r6, #0
 8002662:	2601      	moveq	r6, #1
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002664:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002668:	429a      	cmp	r2, r3
                            pxTCB->uxPriority = uxNewPriority;
 800266a:	bf08      	it	eq
 800266c:	f8c4 50ac 	streq.w	r5, [r4, #172]	; 0xac
                        pxTCB->uxBasePriority = uxNewPriority;
 8002670:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002674:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002678:	2a00      	cmp	r2, #0
 800267a:	db03      	blt.n	8002684 <vTaskPrioritySet+0x78>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 8002680:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <vTaskPrioritySet+0x10c>)
 800268a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800268e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8002692:	429a      	cmp	r2, r3
 8002694:	d00f      	beq.n	80026b6 <vTaskPrioritySet+0xaa>
                if( xYieldRequired != pdFALSE )
 8002696:	b14e      	cbz	r6, 80026ac <vTaskPrioritySet+0xa0>
                    taskYIELD_IF_USING_PREEMPTION();
 8002698:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800269c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80026ac:	f006 ff62 	bl	8009574 <vPortExitCritical>
    }
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xYieldRequired = pdFALSE;
 80026b2:	2600      	movs	r6, #0
 80026b4:	e7d6      	b.n	8002664 <vTaskPrioritySet+0x58>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b6:	f104 0584 	add.w	r5, r4, #132	; 0x84
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7fe f810 	bl	80006e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026c0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <vTaskPrioritySet+0x108>)
 80026c6:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d902      	bls.n	80026d4 <vTaskPrioritySet+0xc8>
 80026ce:	4a11      	ldr	r2, [pc, #68]	; (8002714 <vTaskPrioritySet+0x108>)
 80026d0:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <vTaskPrioritySet+0x108>)
 80026d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 80026ea:	604d      	str	r5, [r1, #4]
 80026ec:	609d      	str	r5, [r3, #8]
 80026ee:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80026f2:	f102 0140 	add.w	r1, r2, #64	; 0x40
 80026f6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80026fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80026fe:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8002702:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 8002706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002708:	3101      	adds	r1, #1
 800270a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 800270e:	6419      	str	r1, [r3, #64]	; 0x40
 8002710:	e7c1      	b.n	8002696 <vTaskPrioritySet+0x8a>
 8002712:	bf00      	nop
 8002714:	24000040 	.word	0x24000040
 8002718:	24000080 	.word	0x24000080

0800271c <vTaskResume>:
    {
 800271c:	b538      	push	{r3, r4, r5, lr}
        configASSERT( xTaskToResume );
 800271e:	b168      	cbz	r0, 800273c <vTaskResume+0x20>
 8002720:	4604      	mov	r4, r0
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <vTaskResume+0xb0>)
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	4283      	cmp	r3, r0
 8002728:	d007      	beq.n	800273a <vTaskResume+0x1e>
            taskENTER_CRITICAL();
 800272a:	f006 ff0f 	bl	800954c <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fbd6 	bl	8001ee0 <prvTaskIsTaskSuspended>
 8002734:	b958      	cbnz	r0, 800274e <vTaskResume+0x32>
            taskEXIT_CRITICAL();
 8002736:	f006 ff1d 	bl	8009574 <vPortExitCritical>
    }
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToResume );
 800274c:	e7fe      	b.n	800274c <vTaskResume+0x30>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800274e:	f104 0584 	add.w	r5, r4, #132	; 0x84
 8002752:	4628      	mov	r0, r5
 8002754:	f7fd ffc4 	bl	80006e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002758:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <vTaskResume+0xb0>)
 800275e:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002762:	4293      	cmp	r3, r2
 8002764:	d902      	bls.n	800276c <vTaskResume+0x50>
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <vTaskResume+0xb0>)
 8002768:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <vTaskResume+0xb0>)
 800276e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8002782:	604d      	str	r5, [r1, #4]
 8002784:	609d      	str	r5, [r3, #8]
 8002786:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800278a:	f102 0140 	add.w	r1, r2, #64	; 0x40
 800278e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002792:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002796:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 800279a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 800279e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027a0:	3101      	adds	r1, #1
 80027a2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80027a6:	6419      	str	r1, [r3, #64]	; 0x40
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027aa:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80027ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3bf      	bcc.n	8002736 <vTaskResume+0x1a>
                        taskYIELD_IF_USING_PREEMPTION();
 80027b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	e7b4      	b.n	8002736 <vTaskResume+0x1a>
 80027cc:	24000040 	.word	0x24000040

080027d0 <xTaskResumeFromISR>:
    {
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( xTaskToResume );
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d054      	beq.n	8002880 <xTaskResumeFromISR+0xb0>
 80027d6:	4604      	mov	r4, r0
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027d8:	f006 ff0a 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 80027dc:	f3ef 8611 	mrs	r6, BASEPRI
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fb75 	bl	8001ee0 <prvTaskIsTaskSuspended>
 80027f6:	4605      	mov	r5, r0
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d03d      	beq.n	8002878 <xTaskResumeFromISR+0xa8>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 80027fe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002802:	2b00      	cmp	r3, #0
 8002804:	d147      	bne.n	8002896 <xTaskResumeFromISR+0xc6>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800280e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002812:	429a      	cmp	r2, r3
 8002814:	d33d      	bcc.n	8002892 <xTaskResumeFromISR+0xc2>
                        xYieldPending = pdTRUE;
 8002816:	2501      	movs	r5, #1
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 800281a:	f8c3 54f0 	str.w	r5, [r3, #1264]	; 0x4f0
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800281e:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8002822:	4638      	mov	r0, r7
 8002824:	f7fd ff5c 	bl	80006e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002828:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 800282e:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002832:	4293      	cmp	r3, r2
 8002834:	d902      	bls.n	800283c <xTaskResumeFromISR+0x6c>
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 8002838:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <xTaskResumeFromISR+0xd4>)
 800283e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800284c:	6899      	ldr	r1, [r3, #8]
 800284e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8002852:	604f      	str	r7, [r1, #4]
 8002854:	609f      	str	r7, [r3, #8]
 8002856:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800285a:	f102 0140 	add.w	r1, r2, #64	; 0x40
 800285e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002862:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002866:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 800286a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 800286e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002870:	3101      	adds	r1, #1
 8002872:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8002876:	6419      	str	r1, [r3, #64]	; 0x40
    __asm volatile
 8002878:	f386 8811 	msr	BASEPRI, r6
    }
 800287c:	4628      	mov	r0, r5
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToResume );
 8002890:	e7fe      	b.n	8002890 <xTaskResumeFromISR+0xc0>
        BaseType_t xYieldRequired = pdFALSE;
 8002892:	2500      	movs	r5, #0
 8002894:	e7c3      	b.n	800281e <xTaskResumeFromISR+0x4e>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002896:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <xTaskResumeFromISR+0xd8>)
 800289c:	f7fd ff15 	bl	80006ca <vListInsertEnd>
        BaseType_t xYieldRequired = pdFALSE;
 80028a0:	2500      	movs	r5, #0
 80028a2:	e7e9      	b.n	8002878 <xTaskResumeFromISR+0xa8>
 80028a4:	24000040 	.word	0x24000040
 80028a8:	24000054 	.word	0x24000054

080028ac <vTaskStartScheduler>:
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	b088      	sub	sp, #32
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80028b0:	2400      	movs	r4, #0
 80028b2:	9405      	str	r4, [sp, #20]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80028b4:	9406      	str	r4, [sp, #24]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028b6:	aa07      	add	r2, sp, #28
 80028b8:	a906      	add	r1, sp, #24
 80028ba:	a805      	add	r0, sp, #20
 80028bc:	f006 ff10 	bl	80096e0 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80028c0:	9b05      	ldr	r3, [sp, #20]
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	9b06      	ldr	r3, [sp, #24]
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4623      	mov	r3, r4
 80028d0:	9a07      	ldr	r2, [sp, #28]
 80028d2:	4917      	ldr	r1, [pc, #92]	; (8002930 <vTaskStartScheduler+0x84>)
 80028d4:	4817      	ldr	r0, [pc, #92]	; (8002934 <vTaskStartScheduler+0x88>)
 80028d6:	f7ff fd14 	bl	8002302 <xTaskCreateStatic>
            if( xIdleTaskHandle != NULL )
 80028da:	b328      	cbz	r0, 8002928 <vTaskStartScheduler+0x7c>
                xReturn = xTimerCreateTimerTask();
 80028dc:	f001 fe04 	bl	80044e8 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 80028e0:	2801      	cmp	r0, #1
 80028e2:	d00b      	beq.n	80028fc <vTaskStartScheduler+0x50>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80028e8:	d11e      	bne.n	8002928 <vTaskStartScheduler+0x7c>
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	e7fe      	b.n	80028fa <vTaskStartScheduler+0x4e>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <vTaskStartScheduler+0x8c>)
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	32d8      	adds	r2, #216	; 0xd8
 8002912:	490a      	ldr	r1, [pc, #40]	; (800293c <vTaskStartScheduler+0x90>)
 8002914:	600a      	str	r2, [r1, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8002916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
        xSchedulerRunning = pdTRUE;
 800291c:	2201      	movs	r2, #1
 800291e:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002922:	629c      	str	r4, [r3, #40]	; 0x28
        if( xPortStartScheduler() != pdFALSE )
 8002924:	f001 ffbd 	bl	80048a2 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <vTaskStartScheduler+0x94>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	b008      	add	sp, #32
 800292e:	bd10      	pop	{r4, pc}
 8002930:	24008b78 	.word	0x24008b78
 8002934:	0800224f 	.word	0x0800224f
 8002938:	24000040 	.word	0x24000040
 800293c:	240081cc 	.word	0x240081cc
 8002940:	24008008 	.word	0x24008008

08002944 <vTaskEndScheduler>:
{
 8002944:	b508      	push	{r3, lr}
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
    xSchedulerRunning = pdFALSE;
 8002956:	4b03      	ldr	r3, [pc, #12]	; (8002964 <vTaskEndScheduler+0x20>)
 8002958:	2200      	movs	r2, #0
 800295a:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
    vPortEndScheduler();
 800295e:	f001 febf 	bl	80046e0 <vPortEndScheduler>
}
 8002962:	bd08      	pop	{r3, pc}
 8002964:	24000040 	.word	0x24000040

08002968 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <vTaskSuspendAll+0x10>)
 800296a:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800296e:	3301      	adds	r3, #1
 8002970:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	24000040 	.word	0x24000040

0800297c <xTaskGetTickCount>:
        xTicks = xTickCount;
 800297c:	4b01      	ldr	r3, [pc, #4]	; (8002984 <xTaskGetTickCount+0x8>)
 800297e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	24000040 	.word	0x24000040

08002988 <xTaskGetTickCountFromISR>:
{
 8002988:	b508      	push	{r3, lr}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800298a:	f006 fe31 	bl	80095f0 <vPortValidateInterruptPriority>
        xReturn = xTickCount;
 800298e:	4b01      	ldr	r3, [pc, #4]	; (8002994 <xTaskGetTickCountFromISR+0xc>)
 8002990:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002992:	bd08      	pop	{r3, pc}
 8002994:	24000040 	.word	0x24000040

08002998 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8002998:	4b01      	ldr	r3, [pc, #4]	; (80029a0 <uxTaskGetNumberOfTasks+0x8>)
 800299a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	24000040 	.word	0x24000040

080029a4 <pcTaskGetName>:
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80029a4:	4603      	mov	r3, r0
 80029a6:	b110      	cbz	r0, 80029ae <pcTaskGetName+0xa>
}
 80029a8:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 80029ac:	4770      	bx	lr
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <pcTaskGetName+0x24>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    configASSERT( pxTCB );
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f8      	bne.n	80029a8 <pcTaskGetName+0x4>
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	e7fe      	b.n	80029c6 <pcTaskGetName+0x22>
 80029c8:	24000040 	.word	0x24000040

080029cc <uxTaskGetStackHighWaterMark>:
        pxTCB = prvGetTCBFromHandle( xTask );
 80029cc:	4603      	mov	r3, r0
 80029ce:	b178      	cbz	r0, 80029f0 <uxTaskGetStackHighWaterMark+0x24>
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80029d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80029d4:	780b      	ldrb	r3, [r1, #0]
 80029d6:	2ba5      	cmp	r3, #165	; 0xa5
 80029d8:	d10d      	bne.n	80029f6 <uxTaskGetStackHighWaterMark+0x2a>
 80029da:	460b      	mov	r3, r1
 80029dc:	f1c1 0101 	rsb	r1, r1, #1
            ulCount++;
 80029e0:	18c8      	adds	r0, r1, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80029e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80029e6:	2aa5      	cmp	r2, #165	; 0xa5
 80029e8:	d0fa      	beq.n	80029e0 <uxTaskGetStackHighWaterMark+0x14>
    }
 80029ea:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80029ee:	4770      	bx	lr
        pxTCB = prvGetTCBFromHandle( xTask );
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <uxTaskGetStackHighWaterMark+0x30>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	e7ec      	b.n	80029d0 <uxTaskGetStackHighWaterMark+0x4>
        uint32_t ulCount = 0U;
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7f7      	b.n	80029ea <uxTaskGetStackHighWaterMark+0x1e>
 80029fa:	bf00      	nop
 80029fc:	24000040 	.word	0x24000040

08002a00 <xTaskGenericNotify>:
    {
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002a02:	2902      	cmp	r1, #2
 8002a04:	d908      	bls.n	8002a18 <xTaskGenericNotify+0x18>
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	e7fe      	b.n	8002a16 <xTaskGenericNotify+0x16>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	4617      	mov	r7, r2
 8002a1e:	461e      	mov	r6, r3
        configASSERT( xTaskToNotify );
 8002a20:	b1b8      	cbz	r0, 8002a52 <xTaskGenericNotify+0x52>
        taskENTER_CRITICAL();
 8002a22:	f006 fd93 	bl	800954c <vPortEnterCritical>
            if( pulPreviousNotificationValue != NULL )
 8002a26:	9b06      	ldr	r3, [sp, #24]
 8002a28:	b12b      	cbz	r3, 8002a36 <xTaskGenericNotify+0x36>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002a2a:	f505 73a0 	add.w	r3, r5, #320	; 0x140
 8002a2e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002a32:	9a06      	ldr	r2, [sp, #24]
 8002a34:	6013      	str	r3, [r2, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002a36:	1962      	adds	r2, r4, r5
 8002a38:	f892 350c 	ldrb.w	r3, [r2, #1292]	; 0x50c
 8002a3c:	b2db      	uxtb	r3, r3
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002a3e:	2102      	movs	r1, #2
 8002a40:	f882 150c 	strb.w	r1, [r2, #1292]	; 0x50c
            switch( eAction )
 8002a44:	2e04      	cmp	r6, #4
 8002a46:	d876      	bhi.n	8002b36 <xTaskGenericNotify+0x136>
 8002a48:	e8df f006 	tbb	[pc, r6]
 8002a4c:	69610c13 	.word	0x69610c13
 8002a50:	6e          	.byte	0x6e
 8002a51:	00          	.byte	0x00
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 8002a62:	e7fe      	b.n	8002a62 <xTaskGenericNotify+0x62>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002a64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002a68:	f8d5 2500 	ldr.w	r2, [r5, #1280]	; 0x500
 8002a6c:	433a      	orrs	r2, r7
 8002a6e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	f040 8086 	bne.w	8002b84 <xTaskGenericNotify+0x184>
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002a7c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002a80:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002a84:	6091      	str	r1, [r2, #8]
 8002a86:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002a8a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002a8e:	6051      	str	r1, [r2, #4]
 8002a90:	f104 0184 	add.w	r1, r4, #132	; 0x84
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d05a      	beq.n	8002b50 <xTaskGenericNotify+0x150>
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002aa6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <xTaskGenericNotify+0x194>)
 8002aac:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d902      	bls.n	8002aba <xTaskGenericNotify+0xba>
 8002ab4:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <xTaskGenericNotify+0x194>)
 8002ab6:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8002aba:	4a36      	ldr	r2, [pc, #216]	; (8002b94 <xTaskGenericNotify+0x194>)
 8002abc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ac0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8002ad0:	6041      	str	r1, [r0, #4]
 8002ad2:	6099      	str	r1, [r3, #8]
 8002ad4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8002ad8:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8002adc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002ae0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002ae4:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8002ae8:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 8002aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aee:	3101      	adds	r1, #1
 8002af0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8002af4:	6419      	str	r1, [r3, #64]	; 0x40
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002af6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002afa:	b36b      	cbz	r3, 8002b58 <xTaskGenericNotify+0x158>
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	e7fe      	b.n	8002b0c <xTaskGenericNotify+0x10c>
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002b0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002b12:	f8d5 2500 	ldr.w	r2, [r5, #1280]	; 0x500
 8002b16:	3201      	adds	r2, #1
 8002b18:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
                    break;
 8002b1c:	e7a9      	b.n	8002a72 <xTaskGenericNotify+0x72>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002b1e:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8002b22:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
                    break;
 8002b26:	e7a4      	b.n	8002a72 <xTaskGenericNotify+0x72>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d029      	beq.n	8002b80 <xTaskGenericNotify+0x180>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002b2c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8002b30:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8002b34:	e79d      	b.n	8002a72 <xTaskGenericNotify+0x72>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <xTaskGenericNotify+0x194>)
 8002b38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d099      	beq.n	8002a72 <xTaskGenericNotify+0x72>
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	e7fe      	b.n	8002b4e <xTaskGenericNotify+0x14e>
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b50:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	e7a0      	b.n	8002a9a <xTaskGenericNotify+0x9a>
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <xTaskGenericNotify+0x194>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8002b60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d912      	bls.n	8002b8e <xTaskGenericNotify+0x18e>
                    taskYIELD_IF_USING_PREEMPTION();
 8002b68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	2401      	movs	r4, #1
 8002b7e:	e002      	b.n	8002b86 <xTaskGenericNotify+0x186>
                        xReturn = pdFAIL;
 8002b80:	2400      	movs	r4, #0
 8002b82:	e000      	b.n	8002b86 <xTaskGenericNotify+0x186>
 8002b84:	2401      	movs	r4, #1
        taskEXIT_CRITICAL();
 8002b86:	f006 fcf5 	bl	8009574 <vPortExitCritical>
    }
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8e:	2401      	movs	r4, #1
 8002b90:	e7f9      	b.n	8002b86 <xTaskGenericNotify+0x186>
 8002b92:	bf00      	nop
 8002b94:	24000040 	.word	0x24000040

08002b98 <xTaskGenericNotifyFromISR>:
    {
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( xTaskToNotify );
 8002b9a:	b170      	cbz	r0, 8002bba <xTaskGenericNotifyFromISR+0x22>
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	4617      	mov	r7, r2
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	4606      	mov	r6, r0
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002ba4:	2902      	cmp	r1, #2
 8002ba6:	d911      	bls.n	8002bcc <xTaskGenericNotifyFromISR+0x34>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	e7fe      	b.n	8002bb8 <xTaskGenericNotifyFromISR+0x20>
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 8002bca:	e7fe      	b.n	8002bca <xTaskGenericNotifyFromISR+0x32>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bcc:	f006 fd10 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8002bd0:	f3ef 8111 	mrs	r1, BASEPRI
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
            if( pulPreviousNotificationValue != NULL )
 8002be4:	9b06      	ldr	r3, [sp, #24]
 8002be6:	b12b      	cbz	r3, 8002bf4 <xTaskGenericNotifyFromISR+0x5c>
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002be8:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8002bec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002bf0:	9a06      	ldr	r2, [sp, #24]
 8002bf2:	6013      	str	r3, [r2, #0]
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002bf4:	1932      	adds	r2, r6, r4
 8002bf6:	f892 350c 	ldrb.w	r3, [r2, #1292]	; 0x50c
 8002bfa:	b2db      	uxtb	r3, r3
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f882 050c 	strb.w	r0, [r2, #1292]	; 0x50c
            switch( eAction )
 8002c02:	2d04      	cmp	r5, #4
 8002c04:	d826      	bhi.n	8002c54 <xTaskGenericNotifyFromISR+0xbc>
 8002c06:	e8df f005 	tbb	[pc, r5]
 8002c0a:	030a      	.short	0x030a
 8002c0c:	1810      	.short	0x1810
 8002c0e:	1d          	.byte	0x1d
 8002c0f:	00          	.byte	0x00
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002c10:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8002c14:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 8002c18:	433a      	orrs	r2, r7
 8002c1a:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d025      	beq.n	8002c6e <xTaskGenericNotifyFromISR+0xd6>
 8002c22:	2001      	movs	r0, #1
    __asm volatile
 8002c24:	f381 8811 	msr	BASEPRI, r1
    }
 8002c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002c2a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8002c2e:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 8002c32:	3201      	adds	r2, #1
 8002c34:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
                    break;
 8002c38:	e7f1      	b.n	8002c1e <xTaskGenericNotifyFromISR+0x86>
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002c3a:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 8002c3e:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
                    break;
 8002c42:	e7ec      	b.n	8002c1e <xTaskGenericNotifyFromISR+0x86>
                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f000 808b 	beq.w	8002d60 <xTaskGenericNotifyFromISR+0x1c8>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002c4a:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 8002c4e:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8002c52:	e7e4      	b.n	8002c1e <xTaskGenericNotifyFromISR+0x86>
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002c54:	4a44      	ldr	r2, [pc, #272]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002c56:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d0e0      	beq.n	8002c1e <xTaskGenericNotifyFromISR+0x86>
    __asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	e7fe      	b.n	8002c6c <xTaskGenericNotifyFromISR+0xd4>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002c6e:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8002c72:	b143      	cbz	r3, 8002c86 <xTaskGenericNotifyFromISR+0xee>
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	e7fe      	b.n	8002c84 <xTaskGenericNotifyFromISR+0xec>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002c88:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d154      	bne.n	8002d3a <xTaskGenericNotifyFromISR+0x1a2>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c90:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002c94:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8002c98:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 8002c9c:	6090      	str	r0, [r2, #8]
 8002c9e:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002ca2:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8002ca6:	6050      	str	r0, [r2, #4]
 8002ca8:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4282      	cmp	r2, r0
 8002cb0:	d03f      	beq.n	8002d32 <xTaskGenericNotifyFromISR+0x19a>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cbe:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002cc2:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002cc4:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <xTaskGenericNotifyFromISR+0x13a>
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002cce:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8002ce2:	689c      	ldr	r4, [r3, #8]
 8002ce4:	f8c6 408c 	str.w	r4, [r6, #140]	; 0x8c
 8002ce8:	6060      	str	r0, [r4, #4]
 8002cea:	6098      	str	r0, [r3, #8]
 8002cec:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002cf0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8002cf4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8002cf8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002cfc:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
 8002d00:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8002d04:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002d06:	3001      	adds	r0, #1
 8002d08:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d0c:	6418      	str	r0, [r3, #64]	; 0x40
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8002d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d922      	bls.n	8002d64 <xTaskGenericNotifyFromISR+0x1cc>
                    if( pxHigherPriorityTaskWoken != NULL )
 8002d1e:	9b07      	ldr	r3, [sp, #28]
 8002d20:	b113      	cbz	r3, 8002d28 <xTaskGenericNotifyFromISR+0x190>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	9a07      	ldr	r2, [sp, #28]
 8002d26:	6013      	str	r3, [r2, #0]
                    xYieldPending = pdTRUE;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002d2c:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
 8002d30:	e778      	b.n	8002c24 <xTaskGenericNotifyFromISR+0x8c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d32:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e7bb      	b.n	8002cb2 <xTaskGenericNotifyFromISR+0x11a>
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <xTaskGenericNotifyFromISR+0x1d0>)
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	f8c6 209c 	str.w	r2, [r6, #156]	; 0x9c
 8002d42:	6894      	ldr	r4, [r2, #8]
 8002d44:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
 8002d48:	f106 0098 	add.w	r0, r6, #152	; 0x98
 8002d4c:	6060      	str	r0, [r4, #4]
 8002d4e:	6090      	str	r0, [r2, #8]
 8002d50:	f103 0214 	add.w	r2, r3, #20
 8002d54:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	3201      	adds	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]
 8002d5e:	e7d6      	b.n	8002d0e <xTaskGenericNotifyFromISR+0x176>
                        xReturn = pdFAIL;
 8002d60:	2000      	movs	r0, #0
 8002d62:	e75f      	b.n	8002c24 <xTaskGenericNotifyFromISR+0x8c>
 8002d64:	2001      	movs	r0, #1
 8002d66:	e75d      	b.n	8002c24 <xTaskGenericNotifyFromISR+0x8c>
 8002d68:	24000040 	.word	0x24000040

08002d6c <xTaskGenericNotifyWait>:
    {
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d908      	bls.n	8002d84 <xTaskGenericNotifyWait+0x18>
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	e7fe      	b.n	8002d82 <xTaskGenericNotifyWait+0x16>
 8002d84:	4604      	mov	r4, r0
 8002d86:	460e      	mov	r6, r1
 8002d88:	4617      	mov	r7, r2
 8002d8a:	461d      	mov	r5, r3
        taskENTER_CRITICAL();
 8002d8c:	f006 fbde 	bl	800954c <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4423      	add	r3, r4
 8002d96:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d010      	beq.n	8002dc2 <xTaskGenericNotifyWait+0x56>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002da2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002da4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002da8:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
 8002dac:	ea21 0106 	bic.w	r1, r1, r6
 8002db0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002db4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002db6:	4423      	add	r3, r4
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
                if( xTicksToWait > ( TickType_t ) 0 )
 8002dbe:	9b06      	ldr	r3, [sp, #24]
 8002dc0:	b9f3      	cbnz	r3, 8002e00 <xTaskGenericNotifyWait+0x94>
        taskEXIT_CRITICAL();
 8002dc2:	f006 fbd7 	bl	8009574 <vPortExitCritical>
        taskENTER_CRITICAL();
 8002dc6:	f006 fbc1 	bl	800954c <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 8002dca:	b135      	cbz	r5, 8002dda <xTaskGenericNotifyWait+0x6e>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	602b      	str	r3, [r5, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4423      	add	r3, r4
 8002de0:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d019      	beq.n	8002e1e <xTaskGenericNotifyWait+0xb2>
                xReturn = pdFALSE;
 8002dea:	2500      	movs	r5, #0
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	441c      	add	r4, r3
 8002df2:	2300      	movs	r3, #0
 8002df4:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
        taskEXIT_CRITICAL();
 8002df8:	f006 fbbc 	bl	8009574 <vPortExitCritical>
    }
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f88a 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8002e08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	e7d1      	b.n	8002dc2 <xTaskGenericNotifyWait+0x56>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <xTaskGenericNotifyWait+0xcc>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e26:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8002e2a:	ea22 0207 	bic.w	r2, r2, r7
 8002e2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
                xReturn = pdTRUE;
 8002e32:	2501      	movs	r5, #1
 8002e34:	e7da      	b.n	8002dec <xTaskGenericNotifyWait+0x80>
 8002e36:	bf00      	nop
 8002e38:	24000040 	.word	0x24000040

08002e3c <vTaskGenericNotifyGiveFromISR>:
        configASSERT( xTaskToNotify );
 8002e3c:	b170      	cbz	r0, 8002e5c <vTaskGenericNotifyGiveFromISR+0x20>
    {
 8002e3e:	b570      	push	{r4, r5, r6, lr}
 8002e40:	460c      	mov	r4, r1
 8002e42:	4615      	mov	r5, r2
 8002e44:	4606      	mov	r6, r0
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e46:	2902      	cmp	r1, #2
 8002e48:	d911      	bls.n	8002e6e <vTaskGenericNotifyGiveFromISR+0x32>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <vTaskGenericNotifyGiveFromISR+0x1e>
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
        configASSERT( xTaskToNotify );
 8002e6c:	e7fe      	b.n	8002e6c <vTaskGenericNotifyGiveFromISR+0x30>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e6e:	f006 fbbf 	bl	80095f0 <vPortValidateInterruptPriority>
    __asm volatile
 8002e72:	f3ef 8111 	mrs	r1, BASEPRI
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002e86:	1932      	adds	r2, r6, r4
 8002e88:	f892 350c 	ldrb.w	r3, [r2, #1292]	; 0x50c
 8002e8c:	b2db      	uxtb	r3, r3
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f882 050c 	strb.w	r0, [r2, #1292]	; 0x50c
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002e94:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8002e98:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 8002e9c:	3201      	adds	r2, #1
 8002e9e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <vTaskGenericNotifyGiveFromISR+0x70>
    __asm volatile
 8002ea6:	f381 8811 	msr	BASEPRI, r1
    }
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002eac:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8002eb0:	b143      	cbz	r3, 8002ec4 <vTaskGenericNotifyGiveFromISR+0x88>
    __asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <vTaskGenericNotifyGiveFromISR+0x86>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002ec6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d152      	bne.n	8002f74 <vTaskGenericNotifyGiveFromISR+0x138>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ece:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002ed2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8002ed6:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 8002eda:	6090      	str	r0, [r2, #8]
 8002edc:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002ee0:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8002ee4:	6050      	str	r0, [r2, #4]
 8002ee6:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4282      	cmp	r2, r0
 8002eee:	d03d      	beq.n	8002f6c <vTaskGenericNotifyGiveFromISR+0x130>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002efc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f02:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d902      	bls.n	8002f10 <vTaskGenericNotifyGiveFromISR+0xd4>
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f0c:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8002f20:	689c      	ldr	r4, [r3, #8]
 8002f22:	f8c6 408c 	str.w	r4, [r6, #140]	; 0x8c
 8002f26:	6060      	str	r0, [r4, #4]
 8002f28:	6098      	str	r0, [r3, #8]
 8002f2a:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8002f2e:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8002f32:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8002f36:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002f3a:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
 8002f3e:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8002f42:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002f44:	3001      	adds	r0, #1
 8002f46:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002f4a:	6418      	str	r0, [r3, #64]	; 0x40
                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8002f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d9a4      	bls.n	8002ea6 <vTaskGenericNotifyGiveFromISR+0x6a>
                    if( pxHigherPriorityTaskWoken != NULL )
 8002f5c:	b10d      	cbz	r5, 8002f62 <vTaskGenericNotifyGiveFromISR+0x126>
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	602b      	str	r3, [r5, #0]
                    xYieldPending = pdTRUE;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002f6a:	e79c      	b.n	8002ea6 <vTaskGenericNotifyGiveFromISR+0x6a>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f6c:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e7bd      	b.n	8002ef0 <vTaskGenericNotifyGiveFromISR+0xb4>
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <vTaskGenericNotifyGiveFromISR+0x160>)
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	f8c6 209c 	str.w	r2, [r6, #156]	; 0x9c
 8002f7c:	6894      	ldr	r4, [r2, #8]
 8002f7e:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
 8002f82:	f106 0098 	add.w	r0, r6, #152	; 0x98
 8002f86:	6060      	str	r0, [r4, #4]
 8002f88:	6090      	str	r0, [r2, #8]
 8002f8a:	f103 0214 	add.w	r2, r3, #20
 8002f8e:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	3201      	adds	r2, #1
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	e7d8      	b.n	8002f4c <vTaskGenericNotifyGiveFromISR+0x110>
 8002f9a:	bf00      	nop
 8002f9c:	24000040 	.word	0x24000040

08002fa0 <ulTaskGenericNotifyTake>:
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002fa0:	2802      	cmp	r0, #2
 8002fa2:	d908      	bls.n	8002fb6 <ulTaskGenericNotifyTake+0x16>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	e7fe      	b.n	8002fb4 <ulTaskGenericNotifyTake+0x14>
    {
 8002fb6:	b570      	push	{r4, r5, r6, lr}
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460e      	mov	r6, r1
 8002fbc:	4615      	mov	r5, r2
        taskENTER_CRITICAL();
 8002fbe:	f006 fac5 	bl	800954c <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 8002fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fce:	b933      	cbnz	r3, 8002fde <ulTaskGenericNotifyTake+0x3e>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4423      	add	r3, r4
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
                if( xTicksToWait > ( TickType_t ) 0 )
 8002fdc:	b9e5      	cbnz	r5, 8003018 <ulTaskGenericNotifyTake+0x78>
        taskEXIT_CRITICAL();
 8002fde:	f006 fac9 	bl	8009574 <vPortExitCritical>
        taskENTER_CRITICAL();
 8002fe2:	f006 fab3 	bl	800954c <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 8002fee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            if( ulReturn != 0UL )
 8002ff2:	b13d      	cbz	r5, 8003004 <ulTaskGenericNotifyTake+0x64>
                if( xClearCountOnExit != pdFALSE )
 8002ff4:	b1fe      	cbz	r6, 8003036 <ulTaskGenericNotifyTake+0x96>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8002ffe:	2100      	movs	r1, #0
 8003000:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	441c      	add	r4, r3
 800300a:	2300      	movs	r3, #0
 800300c:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
        taskEXIT_CRITICAL();
 8003010:	f006 fab0 	bl	8009574 <vPortExitCritical>
    }
 8003014:	4628      	mov	r0, r5
 8003016:	bd70      	pop	{r4, r5, r6, pc}
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003018:	4611      	mov	r1, r2
 800301a:	4628      	mov	r0, r5
 800301c:	f7fe ff7e 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8003020:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e7d3      	b.n	8002fde <ulTaskGenericNotifyTake+0x3e>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <ulTaskGenericNotifyTake+0xa8>)
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	1e6b      	subs	r3, r5, #1
 800303c:	f504 71a0 	add.w	r1, r4, #320	; 0x140
 8003040:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003044:	e7de      	b.n	8003004 <ulTaskGenericNotifyTake+0x64>
 8003046:	bf00      	nop
 8003048:	24000040 	.word	0x24000040

0800304c <xTaskGenericNotifyStateClear>:
    {
 800304c:	b538      	push	{r3, r4, r5, lr}
        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800304e:	2902      	cmp	r1, #2
 8003050:	d908      	bls.n	8003064 <xTaskGenericNotifyStateClear+0x18>
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	e7fe      	b.n	8003062 <xTaskGenericNotifyStateClear+0x16>
 8003064:	4605      	mov	r5, r0
 8003066:	460c      	mov	r4, r1
        pxTCB = prvGetTCBFromHandle( xTask );
 8003068:	b160      	cbz	r0, 8003084 <xTaskGenericNotifyStateClear+0x38>
        taskENTER_CRITICAL();
 800306a:	f006 fa6f 	bl	800954c <vPortEnterCritical>
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 800306e:	192b      	adds	r3, r5, r4
 8003070:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d007      	beq.n	800308a <xTaskGenericNotifyStateClear+0x3e>
                xReturn = pdFAIL;
 800307a:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 800307c:	f006 fa7a 	bl	8009574 <vPortExitCritical>
    }
 8003080:	4620      	mov	r0, r4
 8003082:	bd38      	pop	{r3, r4, r5, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <xTaskGenericNotifyStateClear+0x4c>)
 8003086:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003088:	e7ef      	b.n	800306a <xTaskGenericNotifyStateClear+0x1e>
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 800308a:	442c      	add	r4, r5
 800308c:	2300      	movs	r3, #0
 800308e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
                xReturn = pdPASS;
 8003092:	2401      	movs	r4, #1
 8003094:	e7f2      	b.n	800307c <xTaskGenericNotifyStateClear+0x30>
 8003096:	bf00      	nop
 8003098:	24000040 	.word	0x24000040

0800309c <ulTaskGenericNotifyValueClear>:
    {
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	460e      	mov	r6, r1
 80030a0:	4615      	mov	r5, r2
        pxTCB = prvGetTCBFromHandle( xTask );
 80030a2:	4604      	mov	r4, r0
 80030a4:	b178      	cbz	r0, 80030c6 <ulTaskGenericNotifyValueClear+0x2a>
        taskENTER_CRITICAL();
 80030a6:	f006 fa51 	bl	800954c <vPortEnterCritical>
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 80030aa:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 80030ae:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 80030b2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80030b6:	ea23 0305 	bic.w	r3, r3, r5
 80030ba:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        taskEXIT_CRITICAL();
 80030be:	f006 fa59 	bl	8009574 <vPortExitCritical>
    }
 80030c2:	4620      	mov	r0, r4
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 80030c6:	4b01      	ldr	r3, [pc, #4]	; (80030cc <ulTaskGenericNotifyValueClear+0x30>)
 80030c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80030ca:	e7ec      	b.n	80030a6 <ulTaskGenericNotifyValueClear+0xa>
 80030cc:	24000040 	.word	0x24000040

080030d0 <vTaskSetTimeOutState>:
    configASSERT( pxTimeOut );
 80030d0:	b160      	cbz	r0, 80030ec <vTaskSetTimeOutState+0x1c>
{
 80030d2:	b510      	push	{r4, lr}
 80030d4:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80030d6:	f006 fa39 	bl	800954c <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <vTaskSetTimeOutState+0x30>)
 80030dc:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 80030e0:	6022      	str	r2, [r4, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	6063      	str	r3, [r4, #4]
    taskEXIT_CRITICAL();
 80030e6:	f006 fa45 	bl	8009574 <vPortExitCritical>
}
 80030ea:	bd10      	pop	{r4, pc}
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 80030fc:	e7fe      	b.n	80030fc <vTaskSetTimeOutState+0x2c>
 80030fe:	bf00      	nop
 8003100:	24000040 	.word	0x24000040

08003104 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003104:	4b62      	ldr	r3, [pc, #392]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003106:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 80b7 	bne.w	800327e <xTaskIncrementTick+0x17a>
{
 8003110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003114:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003116:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003118:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800311a:	629c      	str	r4, [r3, #40]	; 0x28
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800311c:	b9bc      	cbnz	r4, 800314e <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b143      	cbz	r3, 8003136 <xTaskIncrementTick+0x32>
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	e7fe      	b.n	8003134 <xTaskIncrementTick+0x30>
 8003136:	4b56      	ldr	r3, [pc, #344]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313c:	6359      	str	r1, [r3, #52]	; 0x34
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003144:	3201      	adds	r2, #1
 8003146:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 800314a:	f7fe ff25 	bl	8001f98 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 800314e:	4b50      	ldr	r3, [pc, #320]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	42a3      	cmp	r3, r4
 8003154:	d87e      	bhi.n	8003254 <xTaskIncrementTick+0x150>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b12b      	cbz	r3, 800316a <xTaskIncrementTick+0x66>
    BaseType_t xSwitchRequired = pdFALSE;
 800315e:	2000      	movs	r0, #0
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003160:	494b      	ldr	r1, [pc, #300]	; (8003290 <xTaskIncrementTick+0x18c>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003162:	4680      	mov	r8, r0
                    prvAddTaskToReadyList( pxTCB );
 8003164:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8003168:	e044      	b.n	80031f4 <xTaskIncrementTick+0xf0>
    BaseType_t xSwitchRequired = pdFALSE;
 800316a:	2000      	movs	r0, #0
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316c:	4b48      	ldr	r3, [pc, #288]	; (8003290 <xTaskIncrementTick+0x18c>)
 800316e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
                    break;
 8003174:	e06f      	b.n	8003256 <xTaskIncrementTick+0x152>
                        xNextTaskUnblockTime = xItemValue;
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800317a:	e06c      	b.n	8003256 <xTaskIncrementTick+0x152>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800317c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	e04d      	b.n	8003220 <xTaskIncrementTick+0x11c>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003184:	f8c3 80a8 	str.w	r8, [r3, #168]	; 0xa8
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	3a01      	subs	r2, #1
 800318c:	603a      	str	r2, [r7, #0]
                    prvAddTaskToReadyList( pxTCB );
 800318e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003192:	f8d1 74e4 	ldr.w	r7, [r1, #1252]	; 0x4e4
 8003196:	42ba      	cmp	r2, r7
 8003198:	d901      	bls.n	800319e <xTaskIncrementTick+0x9a>
 800319a:	f8c1 24e4 	str.w	r2, [r1, #1252]	; 0x4e4
 800319e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031a2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80031a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80031ac:	6897      	ldr	r7, [r2, #8]
 80031ae:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
 80031b2:	607d      	str	r5, [r7, #4]
 80031b4:	6095      	str	r5, [r2, #8]
 80031b6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80031ba:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80031be:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80031c2:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
 80031c6:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80031ca:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80031ce:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 80031d0:	3501      	adds	r5, #1
 80031d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80031da:	6415      	str	r5, [r2, #64]	; 0x40
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031dc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80031de:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80031e2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
                                xSwitchRequired = pdTRUE;
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bf28      	it	cs
 80031ea:	2001      	movcs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0bb      	beq.n	800316c <xTaskIncrementTick+0x68>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
                    if( xConstTickCount < xItemValue )
 80031fe:	4294      	cmp	r4, r2
 8003200:	d3b9      	bcc.n	8003176 <xTaskIncrementTick+0x72>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003202:	f8d3 7094 	ldr.w	r7, [r3, #148]	; 0x94
 8003206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800320a:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800320e:	6095      	str	r5, [r2, #8]
 8003210:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003214:	606a      	str	r2, [r5, #4]
 8003216:	f103 0584 	add.w	r5, r3, #132	; 0x84
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	42aa      	cmp	r2, r5
 800321e:	d0ad      	beq.n	800317c <xTaskIncrementTick+0x78>
 8003220:	f8c3 8094 	str.w	r8, [r3, #148]	; 0x94
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	3a01      	subs	r2, #1
 8003228:	603a      	str	r2, [r7, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800322a:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 800322e:	2f00      	cmp	r7, #0
 8003230:	d0ad      	beq.n	800318e <xTaskIncrementTick+0x8a>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003232:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003236:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 800323a:	60b2      	str	r2, [r6, #8]
 800323c:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8003240:	6056      	str	r6, [r2, #4]
 8003242:	f103 0e98 	add.w	lr, r3, #152	; 0x98
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4572      	cmp	r2, lr
 800324a:	d19b      	bne.n	8003184 <xTaskIncrementTick+0x80>
 800324c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	e797      	b.n	8003184 <xTaskIncrementTick+0x80>
    BaseType_t xSwitchRequired = pdFALSE;
 8003254:	2000      	movs	r0, #0
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800325e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003262:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    xSwitchRequired = pdTRUE;
 8003268:	2b02      	cmp	r3, #2
 800326a:	bf28      	it	cs
 800326c:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003270:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
                    xSwitchRequired = pdTRUE;
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf18      	it	ne
 8003278:	2001      	movne	r0, #1
}
 800327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++xPendedTicks;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <xTaskIncrementTick+0x18c>)
 8003280:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 8003284:	3301      	adds	r3, #1
 8003286:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    BaseType_t xSwitchRequired = pdFALSE;
 800328a:	2000      	movs	r0, #0
}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	24000040 	.word	0x24000040

08003294 <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
 8003294:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <xTaskResumeAll+0x180>)
 8003296:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800329a:	b943      	cbnz	r3, 80032ae <xTaskResumeAll+0x1a>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	e7fe      	b.n	80032ac <xTaskResumeAll+0x18>
{
 80032ae:	b570      	push	{r4, r5, r6, lr}
    taskENTER_CRITICAL();
 80032b0:	f006 f94c 	bl	800954c <vPortEnterCritical>
        --uxSchedulerSuspended;
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <xTaskResumeAll+0x180>)
 80032b6:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 80032ba:	3a01      	subs	r2, #1
 80032bc:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8093 	bne.w	80033f0 <xTaskResumeAll+0x15c>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ca:	4b52      	ldr	r3, [pc, #328]	; (8003414 <xTaskResumeAll+0x180>)
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8093 	beq.w	80033fa <xTaskResumeAll+0x166>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d4:	4b4f      	ldr	r3, [pc, #316]	; (8003414 <xTaskResumeAll+0x180>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8092 	beq.w	8003402 <xTaskResumeAll+0x16e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032de:	494d      	ldr	r1, [pc, #308]	; (8003414 <xTaskResumeAll+0x180>)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032e0:	2400      	movs	r4, #0
                    prvAddTaskToReadyList( pxTCB );
 80032e2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
                        xYieldPending = pdTRUE;
 80032e6:	2601      	movs	r6, #1
 80032e8:	e00a      	b.n	8003300 <xTaskResumeAll+0x6c>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032ea:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80032ee:	6050      	str	r0, [r2, #4]
 80032f0:	e017      	b.n	8003322 <xTaskResumeAll+0x8e>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032f2:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 80032f6:	6055      	str	r5, [r2, #4]
 80032f8:	e027      	b.n	800334a <xTaskResumeAll+0xb6>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032fa:	694b      	ldr	r3, [r1, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d07e      	beq.n	80033fe <xTaskResumeAll+0x16a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003300:	6a0b      	ldr	r3, [r1, #32]
 8003302:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003304:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003308:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800330c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003310:	60a8      	str	r0, [r5, #8]
 8003312:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8003316:	6045      	str	r5, [r0, #4]
 8003318:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800331c:	6855      	ldr	r5, [r2, #4]
 800331e:	4285      	cmp	r5, r0
 8003320:	d0e3      	beq.n	80032ea <xTaskResumeAll+0x56>
 8003322:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 8003326:	6810      	ldr	r0, [r2, #0]
 8003328:	3801      	subs	r0, #1
 800332a:	6010      	str	r0, [r2, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800332c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003330:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8003334:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8003338:	60a8      	str	r0, [r5, #8]
 800333a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800333e:	6045      	str	r5, [r0, #4]
 8003340:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8003344:	6855      	ldr	r5, [r2, #4]
 8003346:	4285      	cmp	r5, r0
 8003348:	d0d3      	beq.n	80032f2 <xTaskResumeAll+0x5e>
 800334a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 800334e:	6815      	ldr	r5, [r2, #0]
 8003350:	3d01      	subs	r5, #1
 8003352:	6015      	str	r5, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003354:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003358:	f8d1 54e4 	ldr.w	r5, [r1, #1252]	; 0x4e4
 800335c:	42aa      	cmp	r2, r5
 800335e:	d901      	bls.n	8003364 <xTaskResumeAll+0xd0>
 8003360:	f8c1 24e4 	str.w	r2, [r1, #1252]	; 0x4e4
 8003364:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003368:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800336c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800336e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003372:	6895      	ldr	r5, [r2, #8]
 8003374:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
 8003378:	6068      	str	r0, [r5, #4]
 800337a:	6090      	str	r0, [r2, #8]
 800337c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003380:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8003384:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8003388:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 800338c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8003390:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8003394:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003396:	3001      	adds	r0, #1
 8003398:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800339c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80033a0:	6410      	str	r0, [r2, #64]	; 0x40
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033a2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80033a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80033a8:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3a4      	bcc.n	80032fa <xTaskResumeAll+0x66>
                        xYieldPending = pdTRUE;
 80033b0:	f8c1 64f0 	str.w	r6, [r1, #1264]	; 0x4f0
 80033b4:	e7a1      	b.n	80032fa <xTaskResumeAll+0x66>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033b6:	3c01      	subs	r4, #1
 80033b8:	d006      	beq.n	80033c8 <xTaskResumeAll+0x134>
                            if( xTaskIncrementTick() != pdFALSE )
 80033ba:	f7ff fea3 	bl	8003104 <xTaskIncrementTick>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d0f9      	beq.n	80033b6 <xTaskResumeAll+0x122>
                                xYieldPending = pdTRUE;
 80033c2:	f8c6 54f0 	str.w	r5, [r6, #1264]	; 0x4f0
 80033c6:	e7f6      	b.n	80033b6 <xTaskResumeAll+0x122>
                        xPendedTicks = 0;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <xTaskResumeAll+0x180>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
                if( xYieldPending != pdFALSE )
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <xTaskResumeAll+0x180>)
 80033d2:	f8d3 44f0 	ldr.w	r4, [r3, #1264]	; 0x4f0
 80033d6:	b164      	cbz	r4, 80033f2 <xTaskResumeAll+0x15e>
                    taskYIELD_IF_USING_PREEMPTION();
 80033d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80033dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 80033ec:	2401      	movs	r4, #1
 80033ee:	e000      	b.n	80033f2 <xTaskResumeAll+0x15e>
    BaseType_t xAlreadyYielded = pdFALSE;
 80033f0:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80033f2:	f006 f8bf 	bl	8009574 <vPortExitCritical>
}
 80033f6:	4620      	mov	r0, r4
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
    BaseType_t xAlreadyYielded = pdFALSE;
 80033fa:	2400      	movs	r4, #0
 80033fc:	e7f9      	b.n	80033f2 <xTaskResumeAll+0x15e>
                    prvResetNextTaskUnblockTime();
 80033fe:	f7fe fdcb 	bl	8001f98 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <xTaskResumeAll+0x180>)
 8003404:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
                    if( xPendedCounts > ( TickType_t ) 0U )
 8003408:	2c00      	cmp	r4, #0
 800340a:	d0e1      	beq.n	80033d0 <xTaskResumeAll+0x13c>
                                xYieldPending = pdTRUE;
 800340c:	461e      	mov	r6, r3
 800340e:	2501      	movs	r5, #1
 8003410:	e7d3      	b.n	80033ba <xTaskResumeAll+0x126>
 8003412:	bf00      	nop
 8003414:	24000040 	.word	0x24000040

08003418 <vTaskDelay>:
    {
 8003418:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 800341a:	b1b0      	cbz	r0, 800344a <vTaskDelay+0x32>
 800341c:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <vTaskDelay+0x48>)
 8003420:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003424:	b143      	cbz	r3, 8003438 <vTaskDelay+0x20>
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	e7fe      	b.n	8003436 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8003438:	f7ff fa96 	bl	8002968 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800343c:	2100      	movs	r1, #0
 800343e:	4620      	mov	r0, r4
 8003440:	f7fe fd6c 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8003444:	f7ff ff26 	bl	8003294 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8003448:	b948      	cbnz	r0, 800345e <vTaskDelay+0x46>
            portYIELD_WITHIN_API();
 800344a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003452:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	f3bf 8f6f 	isb	sy
    }
 800345e:	bd10      	pop	{r4, pc}
 8003460:	24000040 	.word	0x24000040

08003464 <xTaskDelayUntil>:
    {
 8003464:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxPreviousWakeTime );
 8003466:	b158      	cbz	r0, 8003480 <xTaskDelayUntil+0x1c>
 8003468:	460c      	mov	r4, r1
 800346a:	4605      	mov	r5, r0
        configASSERT( ( xTimeIncrement > 0U ) );
 800346c:	b989      	cbnz	r1, 8003492 <xTaskDelayUntil+0x2e>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	e7fe      	b.n	800347e <xTaskDelayUntil+0x1a>
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
        configASSERT( pxPreviousWakeTime );
 8003490:	e7fe      	b.n	8003490 <xTaskDelayUntil+0x2c>
        configASSERT( uxSchedulerSuspended == 0 );
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <xTaskDelayUntil+0xa8>)
 8003494:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003498:	b143      	cbz	r3, 80034ac <xTaskDelayUntil+0x48>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	e7fe      	b.n	80034aa <xTaskDelayUntil+0x46>
        vTaskSuspendAll();
 80034ac:	f7ff fa5c 	bl	8002968 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <xTaskDelayUntil+0xa8>)
 80034b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	441c      	add	r4, r3
            if( xConstTickCount < *pxPreviousWakeTime )
 80034b8:	4283      	cmp	r3, r0
 80034ba:	d90b      	bls.n	80034d4 <xTaskDelayUntil+0x70>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d802      	bhi.n	80034c6 <xTaskDelayUntil+0x62>
            *pxPreviousWakeTime = xTimeToWake;
 80034c0:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034c2:	2400      	movs	r4, #0
 80034c4:	e010      	b.n	80034e8 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80034c6:	42a0      	cmp	r0, r4
 80034c8:	d302      	bcc.n	80034d0 <xTaskDelayUntil+0x6c>
            *pxPreviousWakeTime = xTimeToWake;
 80034ca:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034cc:	2400      	movs	r4, #0
 80034ce:	e00b      	b.n	80034e8 <xTaskDelayUntil+0x84>
            *pxPreviousWakeTime = xTimeToWake;
 80034d0:	602c      	str	r4, [r5, #0]
            if( xShouldDelay != pdFALSE )
 80034d2:	e004      	b.n	80034de <xTaskDelayUntil+0x7a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d301      	bcc.n	80034dc <xTaskDelayUntil+0x78>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d914      	bls.n	8003506 <xTaskDelayUntil+0xa2>
            *pxPreviousWakeTime = xTimeToWake;
 80034dc:	602c      	str	r4, [r5, #0]
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80034de:	2100      	movs	r1, #0
 80034e0:	1a20      	subs	r0, r4, r0
 80034e2:	f7fe fd1b 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
 80034e6:	2401      	movs	r4, #1
        xAlreadyYielded = xTaskResumeAll();
 80034e8:	f7ff fed4 	bl	8003294 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80034ec:	b948      	cbnz	r0, 8003502 <xTaskDelayUntil+0x9e>
            portYIELD_WITHIN_API();
 80034ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	f3bf 8f6f 	isb	sy
    }
 8003502:	4620      	mov	r0, r4
 8003504:	bd38      	pop	{r3, r4, r5, pc}
            *pxPreviousWakeTime = xTimeToWake;
 8003506:	602c      	str	r4, [r5, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003508:	2400      	movs	r4, #0
 800350a:	e7ed      	b.n	80034e8 <xTaskDelayUntil+0x84>
 800350c:	24000040 	.word	0x24000040

08003510 <vTaskGetInfo>:
    {
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	460c      	mov	r4, r1
 8003514:	4616      	mov	r6, r2
        pxTCB = prvGetTCBFromHandle( xTask );
 8003516:	4605      	mov	r5, r0
 8003518:	b1f0      	cbz	r0, 8003558 <vTaskGetInfo+0x48>
        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800351a:	6025      	str	r5, [r4, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800351c:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
 8003520:	6062      	str	r2, [r4, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003522:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8003526:	6122      	str	r2, [r4, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003528:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 800352c:	61e2      	str	r2, [r4, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800352e:	f8d5 20c4 	ldr.w	r2, [r5, #196]	; 0xc4
 8003532:	60a2      	str	r2, [r4, #8]
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003534:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
 8003538:	6162      	str	r2, [r4, #20]
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 800353a:	2200      	movs	r2, #0
 800353c:	61a2      	str	r2, [r4, #24]
        if( eState != eInvalid )
 800353e:	2b05      	cmp	r3, #5
 8003540:	d01a      	beq.n	8003578 <vTaskGetInfo+0x68>
            if( pxTCB == pxCurrentTCB )
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <vTaskGetInfo+0x98>)
 8003544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003546:	42aa      	cmp	r2, r5
 8003548:	d009      	beq.n	800355e <vTaskGetInfo+0x4e>
                pxTaskStatus->eCurrentState = eState;
 800354a:	7323      	strb	r3, [r4, #12]
                        if( eState == eSuspended )
 800354c:	2b03      	cmp	r3, #3
 800354e:	d009      	beq.n	8003564 <vTaskGetInfo+0x54>
        if( xGetFreeStackSpace != pdFALSE )
 8003550:	b9be      	cbnz	r6, 8003582 <vTaskGetInfo+0x72>
            pxTaskStatus->usStackHighWaterMark = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	8423      	strh	r3, [r4, #32]
    }
 8003556:	bd70      	pop	{r4, r5, r6, pc}
        pxTCB = prvGetTCBFromHandle( xTask );
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <vTaskGetInfo+0x98>)
 800355a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800355c:	e7dd      	b.n	800351a <vTaskGetInfo+0xa>
                pxTaskStatus->eCurrentState = eRunning;
 800355e:	2300      	movs	r3, #0
 8003560:	7323      	strb	r3, [r4, #12]
 8003562:	e7f5      	b.n	8003550 <vTaskGetInfo+0x40>
                            vTaskSuspendAll();
 8003564:	f7ff fa00 	bl	8002968 <vTaskSuspendAll>
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003568:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800356c:	b10b      	cbz	r3, 8003572 <vTaskGetInfo+0x62>
                                    pxTaskStatus->eCurrentState = eBlocked;
 800356e:	2302      	movs	r3, #2
 8003570:	7323      	strb	r3, [r4, #12]
                            ( void ) xTaskResumeAll();
 8003572:	f7ff fe8f 	bl	8003294 <xTaskResumeAll>
 8003576:	e7eb      	b.n	8003550 <vTaskGetInfo+0x40>
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003578:	4628      	mov	r0, r5
 800357a:	f7fe fffb 	bl	8002574 <eTaskGetState>
 800357e:	7320      	strb	r0, [r4, #12]
 8003580:	e7e6      	b.n	8003550 <vTaskGetInfo+0x40>
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003582:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003586:	780b      	ldrb	r3, [r1, #0]
 8003588:	2ba5      	cmp	r3, #165	; 0xa5
 800358a:	d10a      	bne.n	80035a2 <vTaskGetInfo+0x92>
 800358c:	460b      	mov	r3, r1
 800358e:	f1c1 0101 	rsb	r1, r1, #1
            ulCount++;
 8003592:	18c8      	adds	r0, r1, r3
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003594:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003598:	2aa5      	cmp	r2, #165	; 0xa5
 800359a:	d0fa      	beq.n	8003592 <vTaskGetInfo+0x82>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800359c:	0880      	lsrs	r0, r0, #2
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800359e:	8420      	strh	r0, [r4, #32]
 80035a0:	e7d9      	b.n	8003556 <vTaskGetInfo+0x46>
        uint32_t ulCount = 0U;
 80035a2:	2000      	movs	r0, #0
 80035a4:	e7fa      	b.n	800359c <vTaskGetInfo+0x8c>
 80035a6:	bf00      	nop
 80035a8:	24000040 	.word	0x24000040

080035ac <prvListTasksWithinSingleList>:
    {
 80035ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80035b0:	680e      	ldr	r6, [r1, #0]
 80035b2:	b346      	cbz	r6, 8003606 <prvListTasksWithinSingleList+0x5a>
 80035b4:	460c      	mov	r4, r1
 80035b6:	4617      	mov	r7, r2
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	684b      	ldr	r3, [r1, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	604b      	str	r3, [r1, #4]
 80035be:	f101 0808 	add.w	r8, r1, #8
 80035c2:	4543      	cmp	r3, r8
 80035c4:	d007      	beq.n	80035d6 <prvListTasksWithinSingleList+0x2a>
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80035cc:	4605      	mov	r5, r0
        UBaseType_t uxTask = 0;
 80035ce:	2600      	movs	r6, #0
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80035d0:	f04f 0901 	mov.w	r9, #1
 80035d4:	e00f      	b.n	80035f6 <prvListTasksWithinSingleList+0x4a>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d6:	68cb      	ldr	r3, [r1, #12]
 80035d8:	604b      	str	r3, [r1, #4]
 80035da:	e7f4      	b.n	80035c6 <prvListTasksWithinSingleList+0x1a>
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	f8d3 b00c 	ldr.w	fp, [r3, #12]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80035e2:	463b      	mov	r3, r7
 80035e4:	464a      	mov	r2, r9
 80035e6:	4629      	mov	r1, r5
 80035e8:	4658      	mov	r0, fp
 80035ea:	f7ff ff91 	bl	8003510 <vTaskGetInfo>
                uxTask++;
 80035ee:	3601      	adds	r6, #1
            } while( pxNextTCB != pxFirstTCB );
 80035f0:	3524      	adds	r5, #36	; 0x24
 80035f2:	45da      	cmp	sl, fp
 80035f4:	d007      	beq.n	8003606 <prvListTasksWithinSingleList+0x5a>
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	6061      	str	r1, [r4, #4]
 80035fc:	4588      	cmp	r8, r1
 80035fe:	d1ed      	bne.n	80035dc <prvListTasksWithinSingleList+0x30>
 8003600:	684b      	ldr	r3, [r1, #4]
 8003602:	6063      	str	r3, [r4, #4]
 8003604:	e7ea      	b.n	80035dc <prvListTasksWithinSingleList+0x30>
    }
 8003606:	4630      	mov	r0, r6
 8003608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800360c <uxTaskGetSystemState>:
    {
 800360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003610:	4607      	mov	r7, r0
 8003612:	460c      	mov	r4, r1
 8003614:	4616      	mov	r6, r2
        vTaskSuspendAll();
 8003616:	f7ff f9a7 	bl	8002968 <vTaskSuspendAll>
            if( uxArraySize >= uxCurrentNumberOfTasks )
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <uxTaskGetSystemState+0xa0>)
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	42a3      	cmp	r3, r4
 8003620:	d83e      	bhi.n	80036a0 <uxTaskGetSystemState+0x94>
 8003622:	4d22      	ldr	r5, [pc, #136]	; (80036ac <uxTaskGetSystemState+0xa0>)
 8003624:	f105 0940 	add.w	r9, r5, #64	; 0x40
 8003628:	f205 458c 	addw	r5, r5, #1164	; 0x48c
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800362c:	2400      	movs	r4, #0
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800362e:	f04f 0801 	mov.w	r8, #1
 8003632:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8003636:	4642      	mov	r2, r8
 8003638:	4629      	mov	r1, r5
 800363a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800363e:	f7ff ffb5 	bl	80035ac <prvListTasksWithinSingleList>
 8003642:	4404      	add	r4, r0
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003644:	454d      	cmp	r5, r9
 8003646:	f1a5 0514 	sub.w	r5, r5, #20
 800364a:	d1f2      	bne.n	8003632 <uxTaskGetSystemState+0x26>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800364c:	4d17      	ldr	r5, [pc, #92]	; (80036ac <uxTaskGetSystemState+0xa0>)
 800364e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003650:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8003654:	2202      	movs	r2, #2
 8003656:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800365a:	f7ff ffa7 	bl	80035ac <prvListTasksWithinSingleList>
 800365e:	4404      	add	r4, r0
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003660:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003662:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8003666:	2202      	movs	r2, #2
 8003668:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800366c:	f7ff ff9e 	bl	80035ac <prvListTasksWithinSingleList>
 8003670:	4404      	add	r4, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003672:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8003676:	2204      	movs	r2, #4
 8003678:	f505 6199 	add.w	r1, r5, #1224	; 0x4c8
 800367c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003680:	f7ff ff94 	bl	80035ac <prvListTasksWithinSingleList>
 8003684:	4404      	add	r4, r0
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003686:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800368a:	2203      	movs	r2, #3
 800368c:	4629      	mov	r1, r5
 800368e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003692:	f7ff ff8b 	bl	80035ac <prvListTasksWithinSingleList>
 8003696:	4404      	add	r4, r0
                        if( pulTotalRunTime != NULL )
 8003698:	b11e      	cbz	r6, 80036a2 <uxTaskGetSystemState+0x96>
                            *pulTotalRunTime = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	e000      	b.n	80036a2 <uxTaskGetSystemState+0x96>
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80036a0:	2400      	movs	r4, #0
        ( void ) xTaskResumeAll();
 80036a2:	f7ff fdf7 	bl	8003294 <xTaskResumeAll>
    }
 80036a6:	4620      	mov	r0, r4
 80036a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ac:	24000040 	.word	0x24000040

080036b0 <xTaskCatchUpTicks>:
    configASSERT( uxSchedulerSuspended == 0 );
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <xTaskCatchUpTicks+0x34>)
 80036b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036b6:	b143      	cbz	r3, 80036ca <xTaskCatchUpTicks+0x1a>
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	e7fe      	b.n	80036c8 <xTaskCatchUpTicks+0x18>
{
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
    vTaskSuspendAll();
 80036ce:	f7ff f94b 	bl	8002968 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <xTaskCatchUpTicks+0x34>)
 80036d4:	f8d3 04f8 	ldr.w	r0, [r3, #1272]	; 0x4f8
 80036d8:	4420      	add	r0, r4
 80036da:	f8c3 04f8 	str.w	r0, [r3, #1272]	; 0x4f8
    xYieldOccurred = xTaskResumeAll();
 80036de:	f7ff fdd9 	bl	8003294 <xTaskResumeAll>
}
 80036e2:	bd10      	pop	{r4, pc}
 80036e4:	24000040 	.word	0x24000040

080036e8 <vTaskPlaceOnEventList>:
    configASSERT( pxEventList );
 80036e8:	b158      	cbz	r0, 8003702 <vTaskPlaceOnEventList+0x1a>
{
 80036ea:	b510      	push	{r4, lr}
 80036ec:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <vTaskPlaceOnEventList+0x2c>)
 80036f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036f2:	3198      	adds	r1, #152	; 0x98
 80036f4:	f7fc ffd0 	bl	8000698 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036f8:	2101      	movs	r1, #1
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7fe fc0e 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
}
 8003700:	bd10      	pop	{r4, pc}
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 8003712:	e7fe      	b.n	8003712 <vTaskPlaceOnEventList+0x2a>
 8003714:	24000040 	.word	0x24000040

08003718 <vTaskPlaceOnUnorderedEventList>:
{
 8003718:	b538      	push	{r3, r4, r5, lr}
    configASSERT( pxEventList );
 800371a:	b168      	cbz	r0, 8003738 <vTaskPlaceOnUnorderedEventList+0x20>
 800371c:	4603      	mov	r3, r0
    configASSERT( uxSchedulerSuspended != 0 );
 800371e:	481a      	ldr	r0, [pc, #104]	; (8003788 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003720:	f8d0 04ec 	ldr.w	r0, [r0, #1260]	; 0x4ec
 8003724:	b988      	cbnz	r0, 800374a <vTaskPlaceOnUnorderedEventList+0x32>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	e7fe      	b.n	8003736 <vTaskPlaceOnUnorderedEventList+0x1e>
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
    configASSERT( pxEventList );
 8003748:	e7fe      	b.n	8003748 <vTaskPlaceOnUnorderedEventList+0x30>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800374a:	480f      	ldr	r0, [pc, #60]	; (8003788 <vTaskPlaceOnUnorderedEventList+0x70>)
 800374c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800374e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003752:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800375a:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
 800375e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003760:	688c      	ldr	r4, [r1, #8]
 8003762:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
 8003766:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8003768:	3598      	adds	r5, #152	; 0x98
 800376a:	6065      	str	r5, [r4, #4]
 800376c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800376e:	3498      	adds	r4, #152	; 0x98
 8003770:	608c      	str	r4, [r1, #8]
 8003772:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003774:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	3101      	adds	r1, #1
 800377c:	6019      	str	r1, [r3, #0]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800377e:	2101      	movs	r1, #1
 8003780:	4610      	mov	r0, r2
 8003782:	f7fe fbcb 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
}
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	24000040 	.word	0x24000040

0800378c <vTaskPlaceOnEventListRestricted>:
    {
 800378c:	b538      	push	{r3, r4, r5, lr}
        configASSERT( pxEventList );
 800378e:	b1f8      	cbz	r0, 80037d0 <vTaskPlaceOnEventListRestricted+0x44>
 8003790:	468c      	mov	ip, r1
 8003792:	4611      	mov	r1, r2
 8003794:	4605      	mov	r5, r0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003796:	6842      	ldr	r2, [r0, #4]
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <vTaskPlaceOnEventListRestricted+0x58>)
 800379a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800379c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 80037a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037a2:	6894      	ldr	r4, [r2, #8]
 80037a4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
 80037a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037aa:	3098      	adds	r0, #152	; 0x98
 80037ac:	6060      	str	r0, [r4, #4]
 80037ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037b0:	3098      	adds	r0, #152	; 0x98
 80037b2:	6090      	str	r0, [r2, #8]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	602b      	str	r3, [r5, #0]
            xTicksToWait = portMAX_DELAY;
 80037c0:	2900      	cmp	r1, #0
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c2:	bf0c      	ite	eq
 80037c4:	4660      	moveq	r0, ip
 80037c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80037ca:	f7fe fba7 	bl	8001f1c <prvAddCurrentTaskToDelayedList>
    }
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
        configASSERT( pxEventList );
 80037e0:	e7fe      	b.n	80037e0 <vTaskPlaceOnEventListRestricted+0x54>
 80037e2:	bf00      	nop
 80037e4:	24000040 	.word	0x24000040

080037e8 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e8:	68c3      	ldr	r3, [r0, #12]
 80037ea:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d066      	beq.n	80038be <xTaskRemoveFromEventList+0xd6>
{
 80037f0:	b410      	push	{r4}
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80037f2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80037f6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 80037fa:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80037fe:	6081      	str	r1, [r0, #8]
 8003800:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 8003804:	6048      	str	r0, [r1, #4]
 8003806:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800380a:	6851      	ldr	r1, [r2, #4]
 800380c:	4281      	cmp	r1, r0
 800380e:	d05f      	beq.n	80038d0 <xTaskRemoveFromEventList+0xe8>
 8003810:	2100      	movs	r1, #0
 8003812:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8003816:	6811      	ldr	r1, [r2, #0]
 8003818:	3901      	subs	r1, #1
 800381a:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381c:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 800381e:	f8d2 24ec 	ldr.w	r2, [r2, #1260]	; 0x4ec
 8003822:	2a00      	cmp	r2, #0
 8003824:	d15c      	bne.n	80038e0 <xTaskRemoveFromEventList+0xf8>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003826:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800382a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800382e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003832:	6081      	str	r1, [r0, #8]
 8003834:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8003838:	6048      	str	r0, [r1, #4]
 800383a:	f103 0084 	add.w	r0, r3, #132	; 0x84
 800383e:	6851      	ldr	r1, [r2, #4]
 8003840:	4281      	cmp	r1, r0
 8003842:	d049      	beq.n	80038d8 <xTaskRemoveFromEventList+0xf0>
 8003844:	2100      	movs	r1, #0
 8003846:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 800384a:	6811      	ldr	r1, [r2, #0]
 800384c:	3901      	subs	r1, #1
 800384e:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003850:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003854:	492c      	ldr	r1, [pc, #176]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 8003856:	f8d1 14e4 	ldr.w	r1, [r1, #1252]	; 0x4e4
 800385a:	428a      	cmp	r2, r1
 800385c:	d902      	bls.n	8003864 <xTaskRemoveFromEventList+0x7c>
 800385e:	492a      	ldr	r1, [pc, #168]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 8003860:	f8c1 24e4 	str.w	r2, [r1, #1252]	; 0x4e4
 8003864:	4928      	ldr	r1, [pc, #160]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 8003866:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800386a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800386e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003874:	6894      	ldr	r4, [r2, #8]
 8003876:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 800387a:	6060      	str	r0, [r4, #4]
 800387c:	6090      	str	r0, [r2, #8]
 800387e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003882:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8003886:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800388a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800388e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8003892:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003896:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003898:	3001      	adds	r0, #1
 800389a:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800389e:	6410      	str	r0, [r2, #64]	; 0x40
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038a0:	4a19      	ldr	r2, [pc, #100]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 80038a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80038a8:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d928      	bls.n	8003902 <xTaskRemoveFromEventList+0x11a>
        xYieldPending = pdTRUE;
 80038b0:	2001      	movs	r0, #1
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 80038b4:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
}
 80038b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80038ce:	e7fe      	b.n	80038ce <xTaskRemoveFromEventList+0xe6>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80038d0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80038d4:	6051      	str	r1, [r2, #4]
 80038d6:	e79b      	b.n	8003810 <xTaskRemoveFromEventList+0x28>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80038d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80038dc:	6051      	str	r1, [r2, #4]
 80038de:	e7b1      	b.n	8003844 <xTaskRemoveFromEventList+0x5c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038e0:	4a09      	ldr	r2, [pc, #36]	; (8003908 <xTaskRemoveFromEventList+0x120>)
 80038e2:	6991      	ldr	r1, [r2, #24]
 80038e4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 80038e8:	688c      	ldr	r4, [r1, #8]
 80038ea:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 80038ee:	6060      	str	r0, [r4, #4]
 80038f0:	6088      	str	r0, [r1, #8]
 80038f2:	f102 0114 	add.w	r1, r2, #20
 80038f6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 80038fa:	6951      	ldr	r1, [r2, #20]
 80038fc:	3101      	adds	r1, #1
 80038fe:	6151      	str	r1, [r2, #20]
 8003900:	e7ce      	b.n	80038a0 <xTaskRemoveFromEventList+0xb8>
        xReturn = pdFALSE;
 8003902:	2000      	movs	r0, #0
    return xReturn;
 8003904:	e7d8      	b.n	80038b8 <xTaskRemoveFromEventList+0xd0>
 8003906:	bf00      	nop
 8003908:	24000040 	.word	0x24000040

0800390c <vTaskRemoveFromUnorderedEventList>:
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <vTaskRemoveFromUnorderedEventList+0xfc>)
 800390e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003912:	b943      	cbnz	r3, 8003926 <vTaskRemoveFromUnorderedEventList+0x1a>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	e7fe      	b.n	8003924 <vTaskRemoveFromUnorderedEventList+0x18>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003926:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800392a:	6001      	str	r1, [r0, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392c:	68c2      	ldr	r2, [r0, #12]
    configASSERT( pxUnblockedTCB );
 800392e:	2a00      	cmp	r2, #0
 8003930:	d059      	beq.n	80039e6 <vTaskRemoveFromUnorderedEventList+0xda>
{
 8003932:	b410      	push	{r4}
    listREMOVE_ITEM( pxEventListItem );
 8003934:	6903      	ldr	r3, [r0, #16]
 8003936:	6841      	ldr	r1, [r0, #4]
 8003938:	6884      	ldr	r4, [r0, #8]
 800393a:	608c      	str	r4, [r1, #8]
 800393c:	6881      	ldr	r1, [r0, #8]
 800393e:	6844      	ldr	r4, [r0, #4]
 8003940:	604c      	str	r4, [r1, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	4281      	cmp	r1, r0
 8003946:	d057      	beq.n	80039f8 <vTaskRemoveFromUnorderedEventList+0xec>
 8003948:	2100      	movs	r1, #0
 800394a:	6101      	str	r1, [r0, #16]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	3901      	subs	r1, #1
 8003950:	6019      	str	r1, [r3, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003952:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003956:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800395a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800395e:	6081      	str	r1, [r0, #8]
 8003960:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8003964:	6048      	str	r0, [r1, #4]
 8003966:	f102 0084 	add.w	r0, r2, #132	; 0x84
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	4281      	cmp	r1, r0
 800396e:	d046      	beq.n	80039fe <vTaskRemoveFromUnorderedEventList+0xf2>
 8003970:	2100      	movs	r1, #0
 8003972:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	3901      	subs	r1, #1
 800397a:	6019      	str	r1, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800397c:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8003980:	4921      	ldr	r1, [pc, #132]	; (8003a08 <vTaskRemoveFromUnorderedEventList+0xfc>)
 8003982:	f8d1 14e4 	ldr.w	r1, [r1, #1252]	; 0x4e4
 8003986:	428b      	cmp	r3, r1
 8003988:	d902      	bls.n	8003990 <vTaskRemoveFromUnorderedEventList+0x84>
 800398a:	491f      	ldr	r1, [pc, #124]	; (8003a08 <vTaskRemoveFromUnorderedEventList+0xfc>)
 800398c:	f8c1 34e4 	str.w	r3, [r1, #1252]	; 0x4e4
 8003990:	491d      	ldr	r1, [pc, #116]	; (8003a08 <vTaskRemoveFromUnorderedEventList+0xfc>)
 8003992:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003996:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80039a0:	689c      	ldr	r4, [r3, #8]
 80039a2:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 80039a6:	6060      	str	r0, [r4, #4]
 80039a8:	6098      	str	r0, [r3, #8]
 80039aa:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80039ae:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80039b2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80039b6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80039ba:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
 80039be:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80039c2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80039c4:	3001      	adds	r0, #1
 80039c6:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 80039ca:	6418      	str	r0, [r3, #64]	; 0x40
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80039ce:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80039d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d902      	bls.n	80039e0 <vTaskRemoveFromUnorderedEventList+0xd4>
        xYieldPending = pdTRUE;
 80039da:	2201      	movs	r2, #1
 80039dc:	f8c1 24f0 	str.w	r2, [r1, #1264]	; 0x4f0
}
 80039e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
    configASSERT( pxUnblockedTCB );
 80039f6:	e7fe      	b.n	80039f6 <vTaskRemoveFromUnorderedEventList+0xea>
    listREMOVE_ITEM( pxEventListItem );
 80039f8:	6881      	ldr	r1, [r0, #8]
 80039fa:	6059      	str	r1, [r3, #4]
 80039fc:	e7a4      	b.n	8003948 <vTaskRemoveFromUnorderedEventList+0x3c>
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80039fe:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003a02:	6059      	str	r1, [r3, #4]
 8003a04:	e7b4      	b.n	8003970 <vTaskRemoveFromUnorderedEventList+0x64>
 8003a06:	bf00      	nop
 8003a08:	24000040 	.word	0x24000040

08003a0c <vTaskSwitchContext>:
{
 8003a0c:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a10:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003a14:	b123      	cbz	r3, 8003a20 <vTaskSwitchContext+0x14>
        xYieldPending = pdTRUE;
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 8003a1e:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
        taskCHECK_FOR_STACK_OVERFLOW();
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8003a34:	d103      	bne.n	8003a3e <vTaskSwitchContext+0x32>
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8003a3c:	d022      	beq.n	8003a84 <vTaskSwitchContext+0x78>
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a44:	31b4      	adds	r1, #180	; 0xb4
 8003a46:	f005 fe49 	bl	80096dc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4a:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a4c:	f8d2 34e4 	ldr.w	r3, [r2, #1252]	; 0x4e4
 8003a50:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003a54:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003a58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a5a:	b9e2      	cbnz	r2, 8003a96 <vTaskSwitchContext+0x8a>
 8003a5c:	b14b      	cbz	r3, 8003a72 <vTaskSwitchContext+0x66>
 8003a5e:	4920      	ldr	r1, [pc, #128]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a60:	3b01      	subs	r3, #1
 8003a62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003a66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003a6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a6c:	b99a      	cbnz	r2, 8003a96 <vTaskSwitchContext+0x8a>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f6      	bne.n	8003a60 <vTaskSwitchContext+0x54>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	e7fe      	b.n	8003a82 <vTaskSwitchContext+0x76>
        taskCHECK_FOR_STACK_OVERFLOW();
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8003a8a:	d1d8      	bne.n	8003a3e <vTaskSwitchContext+0x32>
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8003a92:	d1d4      	bne.n	8003a3e <vTaskSwitchContext+0x32>
 8003a94:	e7d9      	b.n	8003a4a <vTaskSwitchContext+0x3e>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003a98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003a9c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8003aa0:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8003aa2:	6840      	ldr	r0, [r0, #4]
 8003aa4:	6448      	str	r0, [r1, #68]	; 0x44
 8003aa6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003aaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003aae:	3248      	adds	r2, #72	; 0x48
 8003ab0:	4290      	cmp	r0, r2
 8003ab2:	d00e      	beq.n	8003ad2 <vTaskSwitchContext+0xc6>
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003ab6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003aba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8003abe:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003ac0:	68c9      	ldr	r1, [r1, #12]
 8003ac2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ac4:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ac8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aca:	33d8      	adds	r3, #216	; 0xd8
 8003acc:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <vTaskSwitchContext+0xd8>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	e7a5      	b.n	8003a1e <vTaskSwitchContext+0x12>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad2:	6840      	ldr	r0, [r0, #4]
 8003ad4:	4a02      	ldr	r2, [pc, #8]	; (8003ae0 <vTaskSwitchContext+0xd4>)
 8003ad6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003ada:	6450      	str	r0, [r2, #68]	; 0x44
 8003adc:	e7ea      	b.n	8003ab4 <vTaskSwitchContext+0xa8>
 8003ade:	bf00      	nop
 8003ae0:	24000040 	.word	0x24000040
 8003ae4:	240081cc 	.word	0x240081cc

08003ae8 <vTaskSuspend>:
    {
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 8003aec:	f005 fd2e 	bl	800954c <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003af0:	b34c      	cbz	r4, 8003b46 <vTaskSuspend+0x5e>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af2:	f104 0584 	add.w	r5, r4, #132	; 0x84
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7fc fdf2 	bl	80006e0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003afc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003b00:	b11b      	cbz	r3, 8003b0a <vTaskSuspend+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b02:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003b06:	f7fc fdeb 	bl	80006e0 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	482d      	ldr	r0, [pc, #180]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b0e:	f7fc fddc 	bl	80006ca <vListInsertEnd>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003b12:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d017      	beq.n	8003b4c <vTaskSuspend+0x64>
 8003b1c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d016      	beq.n	8003b54 <vTaskSuspend+0x6c>
 8003b26:	f894 350e 	ldrb.w	r3, [r4, #1294]	; 0x50e
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d015      	beq.n	8003b5c <vTaskSuspend+0x74>
        taskEXIT_CRITICAL();
 8003b30:	f005 fd20 	bl	8009574 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8003b34:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b36:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8003b3a:	b99b      	cbnz	r3, 8003b64 <vTaskSuspend+0x7c>
        if( pxTCB == pxCurrentTCB )
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d016      	beq.n	8003b72 <vTaskSuspend+0x8a>
    }
 8003b44:	bd38      	pop	{r3, r4, r5, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003b46:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b48:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003b4a:	e7d2      	b.n	8003af2 <vTaskSuspend+0xa>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 8003b52:	e7e3      	b.n	8003b1c <vTaskSuspend+0x34>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 8003b5a:	e7e4      	b.n	8003b26 <vTaskSuspend+0x3e>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
 8003b62:	e7e5      	b.n	8003b30 <vTaskSuspend+0x48>
            taskENTER_CRITICAL();
 8003b64:	f005 fcf2 	bl	800954c <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003b68:	f7fe fa16 	bl	8001f98 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8003b6c:	f005 fd02 	bl	8009574 <vPortExitCritical>
 8003b70:	e7e4      	b.n	8003b3c <vTaskSuspend+0x54>
            if( xSchedulerRunning != pdFALSE )
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b74:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8003b78:	b1bb      	cbz	r3, 8003baa <vTaskSuspend+0xc2>
                configASSERT( uxSchedulerSuspended == 0 );
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003b7c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003b80:	b143      	cbz	r3, 8003b94 <vTaskSuspend+0xac>
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	e7fe      	b.n	8003b92 <vTaskSuspend+0xaa>
                portYIELD_WITHIN_API();
 8003b94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	e7cc      	b.n	8003b44 <vTaskSuspend+0x5c>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d103      	bne.n	8003bbc <vTaskSuspend+0xd4>
                    pxCurrentTCB = NULL;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <vTaskSuspend+0xdc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bba:	e7c3      	b.n	8003b44 <vTaskSuspend+0x5c>
                    vTaskSwitchContext();
 8003bbc:	f7ff ff26 	bl	8003a0c <vTaskSwitchContext>
    }
 8003bc0:	e7c0      	b.n	8003b44 <vTaskSuspend+0x5c>
 8003bc2:	bf00      	nop
 8003bc4:	24000040 	.word	0x24000040

08003bc8 <uxTaskResetEventItemValue>:
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <uxTaskResetEventItemValue+0x1c>)
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 8003bd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	24000040 	.word	0x24000040

08003be8 <xTaskGetCurrentTaskHandle>:
        xReturn = pxCurrentTCB;
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <xTaskGetCurrentTaskHandle+0x8>)
 8003bea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    }
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	24000040 	.word	0x24000040

08003bf4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <vTaskMissedYield+0xc>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	24000040 	.word	0x24000040

08003c04 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <xTaskGetSchedulerState+0x1c>)
 8003c06:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	; 0x4dc
 8003c0a:	b13b      	cbz	r3, 8003c1c <xTaskGetSchedulerState+0x18>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <xTaskGetSchedulerState+0x1c>)
 8003c0e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2002      	moveq	r0, #2
 8003c18:	2000      	movne	r0, #0
 8003c1a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c1c:	2001      	movs	r0, #1
    }
 8003c1e:	4770      	bx	lr
 8003c20:	24000040 	.word	0x24000040

08003c24 <xTaskPriorityInherit>:
        if( pxMutexHolder != NULL )
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d063      	beq.n	8003cf0 <xTaskPriorityInherit+0xcc>
    {
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4604      	mov	r4, r0
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c2c:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8003c30:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c34:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d24e      	bcs.n	8003cda <xTaskPriorityInherit+0xb6>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c3c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	db07      	blt.n	8003c54 <xTaskPriorityInherit+0x30>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c48:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003c4c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8003c50:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <xTaskPriorityInherit+0xd4>)
 8003c5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c5e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d007      	beq.n	8003c76 <xTaskPriorityInherit+0x52>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c6e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                xReturn = pdTRUE;
 8003c72:	2001      	movs	r0, #1
 8003c74:	e03b      	b.n	8003cee <xTaskPriorityInherit+0xca>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c76:	f104 0584 	add.w	r5, r4, #132	; 0x84
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7fc fd30 	bl	80006e0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c80:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c88:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c8c:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d902      	bls.n	8003c9a <xTaskPriorityInherit+0x76>
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c96:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8003cb0:	604d      	str	r5, [r1, #4]
 8003cb2:	609d      	str	r5, [r3, #8]
 8003cb4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003cb8:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8003cbc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003cc0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003cc4:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8003cc8:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 8003ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cce:	3101      	adds	r1, #1
 8003cd0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8003cd4:	6419      	str	r1, [r3, #64]	; 0x40
                xReturn = pdTRUE;
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	e009      	b.n	8003cee <xTaskPriorityInherit+0xca>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <xTaskPriorityInherit+0xd0>)
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8003ce2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	bf2c      	ite	cs
 8003cea:	2000      	movcs	r0, #0
 8003cec:	2001      	movcc	r0, #1
    }
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
        BaseType_t xReturn = pdFALSE;
 8003cf0:	2000      	movs	r0, #0
    }
 8003cf2:	4770      	bx	lr
 8003cf4:	24000040 	.word	0x24000040
 8003cf8:	24000080 	.word	0x24000080

08003cfc <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d05b      	beq.n	8003db8 <xTaskPriorityDisinherit+0xbc>
    {
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4604      	mov	r4, r0
            configASSERT( pxTCB == pxCurrentTCB );
 8003d04:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <xTaskPriorityDisinherit+0xc0>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4283      	cmp	r3, r0
 8003d0a:	d008      	beq.n	8003d1e <xTaskPriorityDisinherit+0x22>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	e7fe      	b.n	8003d1c <xTaskPriorityDisinherit+0x20>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d1e:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8003d22:	b943      	cbnz	r3, 8003d36 <xTaskPriorityDisinherit+0x3a>
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	e7fe      	b.n	8003d34 <xTaskPriorityDisinherit+0x38>
            ( pxTCB->uxMutexesHeld )--;
 8003d36:	3b01      	subs	r3, #1
 8003d38:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d3c:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 8003d40:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d44:	4291      	cmp	r1, r2
 8003d46:	d000      	beq.n	8003d4a <xTaskPriorityDisinherit+0x4e>
 8003d48:	b10b      	cbz	r3, 8003d4e <xTaskPriorityDisinherit+0x52>
        BaseType_t xReturn = pdFALSE;
 8003d4a:	2000      	movs	r0, #0
    }
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d4e:	f100 0584 	add.w	r5, r0, #132	; 0x84
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc fcc4 	bl	80006e0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d58:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003d5c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d64:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
                    prvAddTaskToReadyList( pxTCB );
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <xTaskPriorityDisinherit+0xc0>)
 8003d6a:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d902      	bls.n	8003d78 <xTaskPriorityDisinherit+0x7c>
 8003d72:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <xTaskPriorityDisinherit+0xc0>)
 8003d74:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <xTaskPriorityDisinherit+0xc0>)
 8003d7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8003d8e:	604d      	str	r5, [r1, #4]
 8003d90:	609d      	str	r5, [r3, #8]
 8003d92:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d96:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8003d9a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003d9e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003da2:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8003da6:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 8003daa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dac:	3101      	adds	r1, #1
 8003dae:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8003db2:	6419      	str	r1, [r3, #64]	; 0x40
                    xReturn = pdTRUE;
 8003db4:	2001      	movs	r0, #1
 8003db6:	e7c9      	b.n	8003d4c <xTaskPriorityDisinherit+0x50>
        BaseType_t xReturn = pdFALSE;
 8003db8:	2000      	movs	r0, #0
    }
 8003dba:	4770      	bx	lr
 8003dbc:	24000040 	.word	0x24000040

08003dc0 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d067      	beq.n	8003e94 <vTaskPriorityDisinheritAfterTimeout+0xd4>
    {
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4604      	mov	r4, r0
            configASSERT( pxTCB->uxMutexesHeld );
 8003dc8:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8003dcc:	b943      	cbnz	r3, 8003de0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	e7fe      	b.n	8003dde <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003de0:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 8003de4:	4291      	cmp	r1, r2
 8003de6:	bf38      	it	cc
 8003de8:	4611      	movcc	r1, r2
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003dea:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003df2:	428a      	cmp	r2, r1
 8003df4:	d100      	bne.n	8003df8 <vTaskPriorityDisinheritAfterTimeout+0x38>
    }
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4283      	cmp	r3, r0
 8003dfe:	d040      	beq.n	8003e82 <vTaskPriorityDisinheritAfterTimeout+0xc2>
                    pxTCB->uxPriority = uxPriorityToUse;
 8003e00:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e04:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	db03      	blt.n	8003e14 <vTaskPriorityDisinheritAfterTimeout+0x54>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8003e10:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8003e1a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003e1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d1e7      	bne.n	8003df6 <vTaskPriorityDisinheritAfterTimeout+0x36>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e26:	f104 0584 	add.w	r5, r4, #132	; 0x84
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7fc fc58 	bl	80006e0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8003e30:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8003e36:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d902      	bls.n	8003e44 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8003e40:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8003e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8003e5a:	604d      	str	r5, [r1, #4]
 8003e5c:	609d      	str	r5, [r3, #8]
 8003e5e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003e62:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8003e66:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003e6a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8003e6e:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 8003e72:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 8003e76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e78:	3101      	adds	r1, #1
 8003e7a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8003e7e:	6419      	str	r1, [r3, #64]	; 0x40
    }
 8003e80:	e7b9      	b.n	8003df6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
                    configASSERT( pxTCB != pxCurrentTCB );
 8003e92:	e7fe      	b.n	8003e92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	24000040 	.word	0x24000040
 8003e9c:	24000080 	.word	0x24000080

08003ea0 <uxTaskGetTaskNumber>:
        if( xTask != NULL )
 8003ea0:	b110      	cbz	r0, 8003ea8 <uxTaskGetTaskNumber+0x8>
            uxReturn = pxTCB->uxTaskNumber;
 8003ea2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8003ea6:	4770      	bx	lr
            uxReturn = 0U;
 8003ea8:	2000      	movs	r0, #0
    }
 8003eaa:	4770      	bx	lr

08003eac <vTaskSetTaskNumber>:
        if( xTask != NULL )
 8003eac:	b108      	cbz	r0, 8003eb2 <vTaskSetTaskNumber+0x6>
            pxTCB->uxTaskNumber = uxHandle;
 8003eae:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    }
 8003eb2:	4770      	bx	lr

08003eb4 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x1c>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	b133      	cbz	r3, 8003ec8 <pvTaskIncrementMutexHeldCount+0x14>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x1c>)
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        return pxCurrentTCB;
 8003ec8:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <pvTaskIncrementMutexHeldCount+0x1c>)
 8003eca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    }
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	24000040 	.word	0x24000040

08003ed4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <vTaskInternalSetTimeOutState+0x10>)
 8003ed6:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003eda:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	6043      	str	r3, [r0, #4]
}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	24000040 	.word	0x24000040

08003ee8 <xTaskCheckForTimeOut>:
    configASSERT( pxTimeOut );
 8003ee8:	b1d8      	cbz	r0, 8003f22 <xTaskCheckForTimeOut+0x3a>
{
 8003eea:	b570      	push	{r4, r5, r6, lr}
 8003eec:	460c      	mov	r4, r1
 8003eee:	4605      	mov	r5, r0
    configASSERT( pxTicksToWait );
 8003ef0:	b301      	cbz	r1, 8003f34 <xTaskCheckForTimeOut+0x4c>
    taskENTER_CRITICAL();
 8003ef2:	f005 fb2b 	bl	800954c <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <xTaskCheckForTimeOut+0x80>)
 8003ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            if( *pxTicksToWait == portMAX_DELAY )
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f00:	d02d      	beq.n	8003f5e <xTaskCheckForTimeOut+0x76>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f02:	6869      	ldr	r1, [r5, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f04:	4818      	ldr	r0, [pc, #96]	; (8003f68 <xTaskCheckForTimeOut+0x80>)
 8003f06:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8003f0a:	682e      	ldr	r6, [r5, #0]
 8003f0c:	4286      	cmp	r6, r0
 8003f0e:	d001      	beq.n	8003f14 <xTaskCheckForTimeOut+0x2c>
 8003f10:	4291      	cmp	r1, r2
 8003f12:	d918      	bls.n	8003f46 <xTaskCheckForTimeOut+0x5e>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f14:	1a50      	subs	r0, r2, r1
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f16:	4283      	cmp	r3, r0
 8003f18:	d819      	bhi.n	8003f4e <xTaskCheckForTimeOut+0x66>
            *pxTicksToWait = ( TickType_t ) 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 8003f1e:	2401      	movs	r4, #1
 8003f20:	e01e      	b.n	8003f60 <xTaskCheckForTimeOut+0x78>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTimeOut );
 8003f32:	e7fe      	b.n	8003f32 <xTaskCheckForTimeOut+0x4a>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
    configASSERT( pxTicksToWait );
 8003f44:	e7fe      	b.n	8003f44 <xTaskCheckForTimeOut+0x5c>
            *pxTicksToWait = ( TickType_t ) 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	6023      	str	r3, [r4, #0]
            xReturn = pdTRUE;
 8003f4a:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8003f4c:	e008      	b.n	8003f60 <xTaskCheckForTimeOut+0x78>
            *pxTicksToWait -= xElapsedTime;
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	6023      	str	r3, [r4, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f54:	4628      	mov	r0, r5
 8003f56:	f7ff ffbd 	bl	8003ed4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	e000      	b.n	8003f60 <xTaskCheckForTimeOut+0x78>
                xReturn = pdFALSE;
 8003f5e:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8003f60:	f005 fb08 	bl	8009574 <vPortExitCritical>
}
 8003f64:	4620      	mov	r0, r4
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	24000040 	.word	0x24000040

08003f6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f6c:	b508      	push	{r3, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f6e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f70:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f72:	4291      	cmp	r1, r2
 8003f74:	d80c      	bhi.n	8003f90 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	6983      	ldr	r3, [r0, #24]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d301      	bcc.n	8003f82 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f7e:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 8003f80:	bd08      	pop	{r3, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f82:	1d01      	adds	r1, r0, #4
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <prvInsertTimerInActiveList+0x40>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	f7fc fb86 	bl	8000698 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e7f7      	b.n	8003f80 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d203      	bcs.n	8003f9c <prvInsertTimerInActiveList+0x30>
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d301      	bcc.n	8003f9c <prvInsertTimerInActiveList+0x30>
                xProcessTimerNow = pdTRUE;
 8003f98:	2001      	movs	r0, #1
        return xProcessTimerNow;
 8003f9a:	e7f1      	b.n	8003f80 <prvInsertTimerInActiveList+0x14>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f9c:	1d01      	adds	r1, r0, #4
 8003f9e:	4b03      	ldr	r3, [pc, #12]	; (8003fac <prvInsertTimerInActiveList+0x40>)
 8003fa0:	6858      	ldr	r0, [r3, #4]
 8003fa2:	f7fc fb79 	bl	8000698 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7ea      	b.n	8003f80 <prvInsertTimerInActiveList+0x14>
 8003faa:	bf00      	nop
 8003fac:	2400053c 	.word	0x2400053c

08003fb0 <prvReloadTimer>:
    {
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fb8:	e004      	b.n	8003fc4 <prvReloadTimer+0x14>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fba:	69a3      	ldr	r3, [r4, #24]
 8003fbc:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fbe:	6a23      	ldr	r3, [r4, #32]
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fc4:	69a1      	ldr	r1, [r4, #24]
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	4632      	mov	r2, r6
 8003fca:	4429      	add	r1, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff ffcd 	bl	8003f6c <prvInsertTimerInActiveList>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1f1      	bne.n	8003fba <prvReloadTimer+0xa>
    }
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}

08003fd8 <prvProcessExpiredTimer>:
    {
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4605      	mov	r5, r0
 8003fdc:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <prvProcessExpiredTimer+0x3c>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe6:	1d20      	adds	r0, r4, #4
 8003fe8:	f7fc fb7a 	bl	80006e0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003ff0:	f013 0f04 	tst.w	r3, #4
 8003ff4:	d107      	bne.n	8004006 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ffe:	6a23      	ldr	r3, [r4, #32]
 8004000:	4620      	mov	r0, r4
 8004002:	4798      	blx	r3
    }
 8004004:	bd70      	pop	{r4, r5, r6, pc}
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004006:	4632      	mov	r2, r6
 8004008:	4629      	mov	r1, r5
 800400a:	4620      	mov	r0, r4
 800400c:	f7ff ffd0 	bl	8003fb0 <prvReloadTimer>
 8004010:	e7f5      	b.n	8003ffe <prvProcessExpiredTimer+0x26>
 8004012:	bf00      	nop
 8004014:	2400053c 	.word	0x2400053c

08004018 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004018:	b538      	push	{r3, r4, r5, lr}

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <prvSwitchTimerLists+0x2c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	b15a      	cbz	r2, 800403a <prvSwitchTimerLists+0x22>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004022:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004026:	4c07      	ldr	r4, [pc, #28]	; (8004044 <prvSwitchTimerLists+0x2c>)
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004028:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800402a:	4629      	mov	r1, r5
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	f7ff ffd3 	bl	8003fd8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2a00      	cmp	r2, #0
 8004038:	d1f6      	bne.n	8004028 <prvSwitchTimerLists+0x10>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 800403a:	4a02      	ldr	r2, [pc, #8]	; (8004044 <prvSwitchTimerLists+0x2c>)
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	6051      	str	r1, [r2, #4]
        pxOverflowTimerList = pxTemp;
 8004040:	6013      	str	r3, [r2, #0]
    }
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	2400053c 	.word	0x2400053c

08004048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	b082      	sub	sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800404c:	f005 fa7e 	bl	800954c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	b11b      	cbz	r3, 800405e <prvCheckForValidListAndQueue+0x16>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004056:	f005 fa8d 	bl	8009574 <vPortExitCritical>
    }
 800405a:	b002      	add	sp, #8
 800405c:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
 800405e:	4c0f      	ldr	r4, [pc, #60]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 8004060:	f104 060c 	add.w	r6, r4, #12
 8004064:	4630      	mov	r0, r6
 8004066:	f7fc fb09 	bl	800067c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800406a:	f104 0520 	add.w	r5, r4, #32
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc fb04 	bl	800067c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004074:	6066      	str	r6, [r4, #4]
                pxOverflowTimerList = &xActiveTimerList2;
 8004076:	4623      	mov	r3, r4
 8004078:	f843 5b34 	str.w	r5, [r3], #52
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800407c:	2200      	movs	r2, #0
 800407e:	9200      	str	r2, [sp, #0]
 8004080:	f104 0284 	add.w	r2, r4, #132	; 0x84
 8004084:	2110      	movs	r1, #16
 8004086:	200a      	movs	r0, #10
 8004088:	f7fd fa52 	bl	8001530 <xQueueGenericCreateStatic>
 800408c:	60a0      	str	r0, [r4, #8]
                        if( xTimerQueue != NULL )
 800408e:	2800      	cmp	r0, #0
 8004090:	d0e1      	beq.n	8004056 <prvCheckForValidListAndQueue+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004092:	4903      	ldr	r1, [pc, #12]	; (80040a0 <prvCheckForValidListAndQueue+0x58>)
 8004094:	f7fd f905 	bl	80012a2 <vQueueAddToRegistry>
 8004098:	e7dd      	b.n	8004056 <prvCheckForValidListAndQueue+0xe>
 800409a:	bf00      	nop
 800409c:	2400053c 	.word	0x2400053c
 80040a0:	24008b80 	.word	0x24008b80

080040a4 <prvTimerTask>:
    {
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b085      	sub	sp, #20
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040a8:	4c67      	ldr	r4, [pc, #412]	; (8004248 <prvTimerTask+0x1a4>)
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	681e      	ldr	r6, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 80040ae:	2e00      	cmp	r6, #0
 80040b0:	f000 80b9 	beq.w	8004226 <prvTimerTask+0x182>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681f      	ldr	r7, [r3, #0]
        vTaskSuspendAll();
 80040b8:	f7fe fc56 	bl	8002968 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 80040bc:	f7fe fc5e 	bl	800297c <xTaskGetTickCount>
 80040c0:	4605      	mov	r5, r0
        if( xTimeNow < xLastTime )
 80040c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80040c6:	4298      	cmp	r0, r3
 80040c8:	f0c0 80b6 	bcc.w	8004238 <prvTimerTask+0x194>
        xLastTime = xTimeNow;
 80040cc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040d0:	b146      	cbz	r6, 80040e4 <prvTimerTask+0x40>
 80040d2:	4287      	cmp	r7, r0
 80040d4:	d806      	bhi.n	80040e4 <prvTimerTask+0x40>
                    ( void ) xTaskResumeAll();
 80040d6:	f7ff f8dd 	bl	8003294 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040da:	4629      	mov	r1, r5
 80040dc:	4638      	mov	r0, r7
 80040de:	f7ff ff7b 	bl	8003fd8 <prvProcessExpiredTimer>
 80040e2:	e0af      	b.n	8004244 <prvTimerTask+0x1a0>
                    if( xListWasEmpty != pdFALSE )
 80040e4:	b1a6      	cbz	r6, 8004110 <prvTimerTask+0x6c>
 80040e6:	2200      	movs	r2, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e8:	1b79      	subs	r1, r7, r5
 80040ea:	68a0      	ldr	r0, [r4, #8]
 80040ec:	f7fd f958 	bl	80013a0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040f0:	f7ff f8d0 	bl	8003294 <xTaskResumeAll>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f040 80a5 	bne.w	8004244 <prvTimerTask+0x1a0>
                        portYIELD_WITHIN_API();
 80040fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	e099      	b.n	8004244 <prvTimerTask+0x1a0>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004110:	463e      	mov	r6, r7
 8004112:	e081      	b.n	8004218 <prvTimerTask+0x174>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004114:	9903      	ldr	r1, [sp, #12]
 8004116:	9802      	ldr	r0, [sp, #8]
 8004118:	9b01      	ldr	r3, [sp, #4]
 800411a:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800411c:	9b00      	ldr	r3, [sp, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	da09      	bge.n	8004136 <prvTimerTask+0x92>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004122:	462a      	mov	r2, r5
 8004124:	4669      	mov	r1, sp
 8004126:	68a0      	ldr	r0, [r4, #8]
 8004128:	f7fc fd46 	bl	8000bb8 <xQueueReceive>
 800412c:	2800      	cmp	r0, #0
 800412e:	d0bc      	beq.n	80040aa <prvTimerTask+0x6>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004130:	9b00      	ldr	r3, [sp, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dbee      	blt.n	8004114 <prvTimerTask+0x70>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004136:	9e02      	ldr	r6, [sp, #8]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004138:	6973      	ldr	r3, [r6, #20]
 800413a:	b113      	cbz	r3, 8004142 <prvTimerTask+0x9e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800413c:	1d30      	adds	r0, r6, #4
 800413e:	f7fc facf 	bl	80006e0 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 8004142:	f7fe fc1b 	bl	800297c <xTaskGetTickCount>
 8004146:	4607      	mov	r7, r0
        if( xTimeNow < xLastTime )
 8004148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800414c:	4298      	cmp	r0, r3
 800414e:	d30c      	bcc.n	800416a <prvTimerTask+0xc6>
        xLastTime = xTimeNow;
 8004150:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
                switch( xMessage.xMessageID )
 8004154:	9b00      	ldr	r3, [sp, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	2b08      	cmp	r3, #8
 800415a:	d8e2      	bhi.n	8004122 <prvTimerTask+0x7e>
 800415c:	e8df f003 	tbb	[pc, r3]
 8004160:	332c0808 	.word	0x332c0808
 8004164:	2c08084c 	.word	0x2c08084c
 8004168:	33          	.byte	0x33
 8004169:	00          	.byte	0x00
            prvSwitchTimerLists();
 800416a:	f7ff ff55 	bl	8004018 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800416e:	e7ef      	b.n	8004150 <prvTimerTask+0xac>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004170:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800417c:	9b01      	ldr	r3, [sp, #4]
 800417e:	69b1      	ldr	r1, [r6, #24]
 8004180:	463a      	mov	r2, r7
 8004182:	4419      	add	r1, r3
 8004184:	4630      	mov	r0, r6
 8004186:	f7ff fef1 	bl	8003f6c <prvInsertTimerInActiveList>
 800418a:	2800      	cmp	r0, #0
 800418c:	d05a      	beq.n	8004244 <prvTimerTask+0x1a0>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800418e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8004192:	f013 0f04 	tst.w	r3, #4
 8004196:	d107      	bne.n	80041a8 <prvTimerTask+0x104>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a0:	6a33      	ldr	r3, [r6, #32]
 80041a2:	4630      	mov	r0, r6
 80041a4:	4798      	blx	r3
 80041a6:	e04d      	b.n	8004244 <prvTimerTask+0x1a0>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041a8:	69b3      	ldr	r3, [r6, #24]
 80041aa:	463a      	mov	r2, r7
 80041ac:	9901      	ldr	r1, [sp, #4]
 80041ae:	4419      	add	r1, r3
 80041b0:	4630      	mov	r0, r6
 80041b2:	f7ff fefd 	bl	8003fb0 <prvReloadTimer>
 80041b6:	e7f3      	b.n	80041a0 <prvTimerTask+0xfc>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041b8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        break;
 80041c4:	e03e      	b.n	8004244 <prvTimerTask+0x1a0>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041c6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041d2:	9901      	ldr	r1, [sp, #4]
 80041d4:	61b1      	str	r1, [r6, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041d6:	b131      	cbz	r1, 80041e6 <prvTimerTask+0x142>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d8:	463b      	mov	r3, r7
 80041da:	463a      	mov	r2, r7
 80041dc:	4439      	add	r1, r7
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff fec4 	bl	8003f6c <prvInsertTimerInActiveList>
                        break;
 80041e4:	e02e      	b.n	8004244 <prvTimerTask+0x1a0>
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041f6:	e7fe      	b.n	80041f6 <prvTimerTask+0x152>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041f8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80041fc:	f013 0f02 	tst.w	r3, #2
 8004200:	d004      	beq.n	800420c <prvTimerTask+0x168>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800420a:	e01b      	b.n	8004244 <prvTimerTask+0x1a0>
                                    vPortFree( pxTimer );
 800420c:	4630      	mov	r0, r6
 800420e:	f000 fcfd 	bl	8004c0c <vPortFree>
 8004212:	e017      	b.n	8004244 <prvTimerTask+0x1a0>
        xLastTime = xTimeNow;
 8004214:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	0952      	lsrs	r2, r2, #5
 8004222:	4637      	mov	r7, r6
 8004224:	e760      	b.n	80040e8 <prvTimerTask+0x44>
        vTaskSuspendAll();
 8004226:	f7fe fb9f 	bl	8002968 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800422a:	f7fe fba7 	bl	800297c <xTaskGetTickCount>
 800422e:	4605      	mov	r5, r0
        if( xTimeNow < xLastTime )
 8004230:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004234:	4298      	cmp	r0, r3
 8004236:	d2ed      	bcs.n	8004214 <prvTimerTask+0x170>
            prvSwitchTimerLists();
 8004238:	f7ff feee 	bl	8004018 <prvSwitchTimerLists>
        xLastTime = xTimeNow;
 800423c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
                ( void ) xTaskResumeAll();
 8004240:	f7ff f828 	bl	8003294 <xTaskResumeAll>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004244:	2500      	movs	r5, #0
 8004246:	e76c      	b.n	8004122 <prvTimerTask+0x7e>
 8004248:	2400053c 	.word	0x2400053c

0800424c <xTimerCreate>:
        {
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004250:	4607      	mov	r7, r0
 8004252:	4688      	mov	r8, r1
 8004254:	4615      	mov	r5, r2
 8004256:	461c      	mov	r4, r3
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004258:	202c      	movs	r0, #44	; 0x2c
 800425a:	f000 fc39 	bl	8004ad0 <pvPortMalloc>
            if( pxNewTimer != NULL )
 800425e:	4606      	mov	r6, r0
 8004260:	b300      	cbz	r0, 80042a4 <xTimerCreate+0x58>
                pxNewTimer->ucStatus = 0x00;
 8004262:	2300      	movs	r3, #0
 8004264:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004268:	f1b8 0f00 	cmp.w	r8, #0
 800426c:	d108      	bne.n	8004280 <xTimerCreate+0x34>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	e7fe      	b.n	800427e <xTimerCreate+0x32>
        prvCheckForValidListAndQueue();
 8004280:	f7ff fee2 	bl	8004048 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 8004284:	6037      	str	r7, [r6, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004286:	f8c6 8018 	str.w	r8, [r6, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800428a:	61f4      	str	r4, [r6, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800428c:	9b06      	ldr	r3, [sp, #24]
 800428e:	6233      	str	r3, [r6, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004290:	1d30      	adds	r0, r6, #4
 8004292:	f7fc f9fe 	bl	8000692 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 8004296:	b12d      	cbz	r5, 80042a4 <xTimerCreate+0x58>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004298:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
        }
 80042a4:	4630      	mov	r0, r6
 80042a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042aa <xTimerCreateStatic>:
        {
 80042aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ac:	b083      	sub	sp, #12
 80042ae:	461c      	mov	r4, r3
                    volatile size_t xSize = sizeof( StaticTimer_t );
 80042b0:	232c      	movs	r3, #44	; 0x2c
 80042b2:	9301      	str	r3, [sp, #4]
                    configASSERT( xSize == sizeof( Timer_t ) );
 80042b4:	9b01      	ldr	r3, [sp, #4]
 80042b6:	2b2c      	cmp	r3, #44	; 0x2c
 80042b8:	d008      	beq.n	80042cc <xTimerCreateStatic+0x22>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	e7fe      	b.n	80042ca <xTimerCreateStatic+0x20>
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	4615      	mov	r5, r2
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042d2:	9b01      	ldr	r3, [sp, #4]
            configASSERT( pxTimerBuffer );
 80042d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d6:	b16b      	cbz	r3, 80042f4 <xTimerCreateStatic+0x4a>
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80042d8:	2302      	movs	r3, #2
 80042da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042dc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80042e0:	b989      	cbnz	r1, 8004306 <xTimerCreateStatic+0x5c>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	e7fe      	b.n	80042f2 <xTimerCreateStatic+0x48>
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
            configASSERT( pxTimerBuffer );
 8004304:	e7fe      	b.n	8004304 <xTimerCreateStatic+0x5a>
        prvCheckForValidListAndQueue();
 8004306:	f7ff fe9f 	bl	8004048 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 800430a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430c:	601e      	str	r6, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800430e:	619f      	str	r7, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8004310:	61dc      	str	r4, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004312:	9b08      	ldr	r3, [sp, #32]
 8004314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004316:	6213      	str	r3, [r2, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004318:	1d10      	adds	r0, r2, #4
 800431a:	f7fc f9ba 	bl	8000692 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 800431e:	b13d      	cbz	r5, 8004330 <xTimerCreateStatic+0x86>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004326:	f043 0304 	orr.w	r3, r3, #4
 800432a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
 8004330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004332:	b003      	add	sp, #12
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004336 <pvTimerGetTimerID>:
    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
        Timer_t * const pxTimer = xTimer;
        void * pvReturn;

        configASSERT( xTimer );
 8004336:	b140      	cbz	r0, 800434a <pvTimerGetTimerID+0x14>
    {
 8004338:	b510      	push	{r4, lr}
 800433a:	4604      	mov	r4, r0

        taskENTER_CRITICAL();
 800433c:	f005 f906 	bl	800954c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8004340:	69e4      	ldr	r4, [r4, #28]
        }
        taskEXIT_CRITICAL();
 8004342:	f005 f917 	bl	8009574 <vPortExitCritical>

        return pvReturn;
    }
 8004346:	4620      	mov	r0, r4
 8004348:	bd10      	pop	{r4, pc}
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800435a:	e7fe      	b.n	800435a <pvTimerGetTimerID+0x24>

0800435c <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 800435c:	b538      	push	{r3, r4, r5, lr}
        Timer_t * const pxTimer = xTimer;

        configASSERT( xTimer );
 800435e:	b138      	cbz	r0, 8004370 <vTimerSetTimerID+0x14>
 8004360:	460c      	mov	r4, r1
 8004362:	4605      	mov	r5, r0

        taskENTER_CRITICAL();
 8004364:	f005 f8f2 	bl	800954c <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8004368:	61ec      	str	r4, [r5, #28]
        }
        taskEXIT_CRITICAL();
 800436a:	f005 f903 	bl	8009574 <vPortExitCritical>
    }
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8004380:	e7fe      	b.n	8004380 <vTimerSetTimerID+0x24>

08004382 <xTimerIsTimerActive>:
        configASSERT( xTimer );
 8004382:	b158      	cbz	r0, 800439c <xTimerIsTimerActive+0x1a>
    {
 8004384:	b510      	push	{r4, lr}
 8004386:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 8004388:	f005 f8e0 	bl	800954c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800438c:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 8004390:	f004 0401 	and.w	r4, r4, #1
        taskEXIT_CRITICAL();
 8004394:	f005 f8ee 	bl	8009574 <vPortExitCritical>
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8004398:	4620      	mov	r0, r4
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 80043ac:	e7fe      	b.n	80043ac <xTimerIsTimerActive+0x2a>

080043ae <xTimerGetTimerDaemonTaskHandle>:
        configASSERT( ( xTimerTaskHandle != NULL ) );
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <xTimerGetTimerDaemonTaskHandle+0x1e>)
 80043b0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80043b4:	b100      	cbz	r0, 80043b8 <xTimerGetTimerDaemonTaskHandle+0xa>
    }
 80043b6:	4770      	bx	lr
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
        configASSERT( ( xTimerTaskHandle != NULL ) );
 80043c8:	e7fe      	b.n	80043c8 <xTimerGetTimerDaemonTaskHandle+0x1a>
 80043ca:	bf00      	nop
 80043cc:	2400053c 	.word	0x2400053c

080043d0 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 80043d0:	b510      	push	{r4, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	4614      	mov	r4, r2
 80043d6:	461a      	mov	r2, r3
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80043d8:	f06f 0301 	mvn.w	r3, #1
 80043dc:	9300      	str	r3, [sp, #0]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80043de:	9001      	str	r0, [sp, #4]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80043e0:	9102      	str	r1, [sp, #8]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80043e2:	9403      	str	r4, [sp, #12]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043e4:	2300      	movs	r3, #0
 80043e6:	4669      	mov	r1, sp
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <xTimerPendFunctionCallFromISR+0x24>)
 80043ea:	6880      	ldr	r0, [r0, #8]
 80043ec:	f7fc fcc0 	bl	8000d70 <xQueueGenericSendFromISR>

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
        }
 80043f0:	b004      	add	sp, #16
 80043f2:	bd10      	pop	{r4, pc}
 80043f4:	2400053c 	.word	0x2400053c

080043f8 <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 80043f8:	b530      	push	{r4, r5, lr}
 80043fa:	b085      	sub	sp, #20
 80043fc:	460c      	mov	r4, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <xTimerPendFunctionCall+0x3c>)
 8004404:	689d      	ldr	r5, [r3, #8]
 8004406:	b165      	cbz	r5, 8004422 <xTimerPendFunctionCall+0x2a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800440c:	9300      	str	r3, [sp, #0]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800440e:	9001      	str	r0, [sp, #4]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004410:	9402      	str	r4, [sp, #8]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004412:	9103      	str	r1, [sp, #12]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004414:	2300      	movs	r3, #0
 8004416:	4669      	mov	r1, sp
 8004418:	4628      	mov	r0, r5
 800441a:	f7fc fa06 	bl	800082a <xQueueGenericSend>

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
        }
 800441e:	b005      	add	sp, #20
 8004420:	bd30      	pop	{r4, r5, pc}
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
            configASSERT( xTimerQueue );
 8004432:	e7fe      	b.n	8004432 <xTimerPendFunctionCall+0x3a>
 8004434:	2400053c 	.word	0x2400053c

08004438 <pcTimerGetName>:
        configASSERT( xTimer );
 8004438:	b108      	cbz	r0, 800443e <pcTimerGetName+0x6>
    }
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	4770      	bx	lr
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800444e:	e7fe      	b.n	800444e <pcTimerGetName+0x16>

08004450 <vTimerSetReloadMode>:
    {
 8004450:	b538      	push	{r3, r4, r5, lr}
        configASSERT( xTimer );
 8004452:	b168      	cbz	r0, 8004470 <vTimerSetReloadMode+0x20>
 8004454:	460c      	mov	r4, r1
 8004456:	4605      	mov	r5, r0
        taskENTER_CRITICAL();
 8004458:	f005 f878 	bl	800954c <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 800445c:	b18c      	cbz	r4, 8004482 <vTimerSetReloadMode+0x32>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800445e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        taskEXIT_CRITICAL();
 800446a:	f005 f883 	bl	8009574 <vPortExitCritical>
    }
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 8004480:	e7fe      	b.n	8004480 <vTimerSetReloadMode+0x30>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 8004482:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004486:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800448a:	e7ec      	b.n	8004466 <vTimerSetReloadMode+0x16>

0800448c <uxTimerGetReloadMode>:
        configASSERT( xTimer );
 800448c:	b158      	cbz	r0, 80044a6 <uxTimerGetReloadMode+0x1a>
    {
 800448e:	b510      	push	{r4, lr}
 8004490:	4604      	mov	r4, r0
        taskENTER_CRITICAL();
 8004492:	f005 f85b 	bl	800954c <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 8004496:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800449a:	f3c4 0480 	ubfx	r4, r4, #2, #1
        taskEXIT_CRITICAL();
 800449e:	f005 f869 	bl	8009574 <vPortExitCritical>
    }
 80044a2:	4620      	mov	r0, r4
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 80044b6:	e7fe      	b.n	80044b6 <uxTimerGetReloadMode+0x2a>

080044b8 <xTimerGetPeriod>:
        configASSERT( xTimer );
 80044b8:	b108      	cbz	r0, 80044be <xTimerGetPeriod+0x6>
    }
 80044ba:	6980      	ldr	r0, [r0, #24]
 80044bc:	4770      	bx	lr
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 80044ce:	e7fe      	b.n	80044ce <xTimerGetPeriod+0x16>

080044d0 <xTimerGetExpiryTime>:
        configASSERT( xTimer );
 80044d0:	b108      	cbz	r0, 80044d6 <xTimerGetExpiryTime+0x6>
    }
 80044d2:	6840      	ldr	r0, [r0, #4]
 80044d4:	4770      	bx	lr
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 80044e6:	e7fe      	b.n	80044e6 <xTimerGetExpiryTime+0x16>

080044e8 <xTimerCreateTimerTask>:
    {
 80044e8:	b510      	push	{r4, lr}
 80044ea:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 80044ec:	f7ff fdac 	bl	8004048 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <xTimerCreateTimerTask+0x58>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	b1d3      	cbz	r3, 800452c <xTimerCreateTimerTask+0x44>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80044f6:	2400      	movs	r4, #0
 80044f8:	9405      	str	r4, [sp, #20]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80044fa:	9406      	str	r4, [sp, #24]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044fc:	aa07      	add	r2, sp, #28
 80044fe:	a906      	add	r1, sp, #24
 8004500:	a805      	add	r0, sp, #20
 8004502:	f005 f8f9 	bl	80096f8 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8004506:	9b05      	ldr	r3, [sp, #20]
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	9b06      	ldr	r3, [sp, #24]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <xTimerCreateTimerTask+0x5c>)
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	4623      	mov	r3, r4
 8004514:	9a07      	ldr	r2, [sp, #28]
 8004516:	490c      	ldr	r1, [pc, #48]	; (8004548 <xTimerCreateTimerTask+0x60>)
 8004518:	480c      	ldr	r0, [pc, #48]	; (800454c <xTimerCreateTimerTask+0x64>)
 800451a:	f7fd fef2 	bl	8002302 <xTaskCreateStatic>
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <xTimerCreateTimerTask+0x58>)
 8004520:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
                    if( xTimerTaskHandle != NULL )
 8004524:	b110      	cbz	r0, 800452c <xTimerCreateTimerTask+0x44>
    }
 8004526:	2001      	movs	r0, #1
 8004528:	b008      	add	sp, #32
 800452a:	bd10      	pop	{r4, pc}
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 800453c:	e7fe      	b.n	800453c <xTimerCreateTimerTask+0x54>
 800453e:	bf00      	nop
 8004540:	2400053c 	.word	0x2400053c
 8004544:	80000002 	.word	0x80000002
 8004548:	24008b88 	.word	0x24008b88
 800454c:	080040a5 	.word	0x080040a5

08004550 <xTimerGenericCommand>:
        configASSERT( xTimer );
 8004550:	b1d8      	cbz	r0, 800458a <xTimerGenericCommand+0x3a>
 8004552:	469c      	mov	ip, r3
 8004554:	4603      	mov	r3, r0
        if( xTimerQueue != NULL )
 8004556:	4815      	ldr	r0, [pc, #84]	; (80045ac <xTimerGenericCommand+0x5c>)
 8004558:	6880      	ldr	r0, [r0, #8]
 800455a:	b328      	cbz	r0, 80045a8 <xTimerGenericCommand+0x58>
    {
 800455c:	b500      	push	{lr}
 800455e:	b085      	sub	sp, #20
            xMessage.xMessageID = xCommandID;
 8004560:	9100      	str	r1, [sp, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004562:	9201      	str	r2, [sp, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004564:	9302      	str	r3, [sp, #8]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004566:	2905      	cmp	r1, #5
 8004568:	dc18      	bgt.n	800459c <xTimerGenericCommand+0x4c>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800456a:	f7ff fb4b 	bl	8003c04 <xTaskGetSchedulerState>
 800456e:	2802      	cmp	r0, #2
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	9a06      	ldreq	r2, [sp, #24]
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004578:	461a      	movne	r2, r3
 800457a:	4669      	mov	r1, sp
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <xTimerGenericCommand+0x5c>)
 800457e:	6880      	ldr	r0, [r0, #8]
 8004580:	f7fc f953 	bl	800082a <xQueueGenericSend>
    }
 8004584:	b005      	add	sp, #20
 8004586:	f85d fb04 	ldr.w	pc, [sp], #4
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
        configASSERT( xTimer );
 800459a:	e7fe      	b.n	800459a <xTimerGenericCommand+0x4a>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800459c:	2300      	movs	r3, #0
 800459e:	4662      	mov	r2, ip
 80045a0:	4669      	mov	r1, sp
 80045a2:	f7fc fbe5 	bl	8000d70 <xQueueGenericSendFromISR>
 80045a6:	e7ed      	b.n	8004584 <xTimerGenericCommand+0x34>
        BaseType_t xReturn = pdFAIL;
 80045a8:	2000      	movs	r0, #0
    }
 80045aa:	4770      	bx	lr
 80045ac:	2400053c 	.word	0x2400053c

080045b0 <vTimerSetTimerNumber>:
    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 80045b0:	6241      	str	r1, [r0, #36]	; 0x24
        }
 80045b2:	4770      	bx	lr

080045b4 <uxTimerGetTimerNumber>:
        }
 80045b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80045b6:	4770      	bx	lr
	...

080045c0 <prvGetMPURegionSizeSetting>:

    /* 32 is the smallest region size, 31 is the largest valid value for
     * ulReturnValue. */
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
    {
        if( ulActualSizeInBytes <= ulRegionSize )
 80045c0:	2820      	cmp	r0, #32
 80045c2:	d909      	bls.n	80045d8 <prvGetMPURegionSizeSetting+0x18>
    uint32_t ulRegionSize, ulReturnValue = 4;
 80045c4:	2304      	movs	r3, #4
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80045c6:	2220      	movs	r2, #32
        {
            break;
        }
        else
        {
            ulReturnValue++;
 80045c8:	3301      	adds	r3, #1
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 80045ca:	0052      	lsls	r2, r2, #1
        if( ulActualSizeInBytes <= ulRegionSize )
 80045cc:	4290      	cmp	r0, r2
 80045ce:	d901      	bls.n	80045d4 <prvGetMPURegionSizeSetting+0x14>
 80045d0:	2b1e      	cmp	r3, #30
 80045d2:	d9f9      	bls.n	80045c8 <prvGetMPURegionSizeSetting+0x8>
    }

    /* Shift the code by one before returning so it can be written directly
     * into the the correct bit position of the attribute register. */
    return( ulReturnValue << 1UL );
}
 80045d4:	0058      	lsls	r0, r3, #1
 80045d6:	4770      	bx	lr
    uint32_t ulRegionSize, ulReturnValue = 4;
 80045d8:	2304      	movs	r3, #4
 80045da:	e7fb      	b.n	80045d4 <prvGetMPURegionSizeSetting+0x14>

080045dc <prvRestoreContextOfFirstTask>:
    __asm volatile
 80045dc:	48f1      	ldr	r0, [pc, #964]	; (80049a4 <xPortStartScheduler+0x102>)
 80045de:	6800      	ldr	r0, [r0, #0]
 80045e0:	6800      	ldr	r0, [r0, #0]
 80045e2:	f380 8808 	msr	MSP, r0
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <pxCurrentTCBConst2>)
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	6808      	ldr	r0, [r1, #0]
 80045ec:	f101 0104 	add.w	r1, r1, #4
 80045f0:	f3bf 8f5f 	dmb	sy
 80045f4:	4aec      	ldr	r2, [pc, #944]	; (80049a8 <xPortStartScheduler+0x106>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4aeb      	ldr	r2, [pc, #940]	; (80049ac <xPortStartScheduler+0x10a>)
 8004600:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004604:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004608:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800460c:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004610:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004614:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004618:	4ae3      	ldr	r2, [pc, #908]	; (80049a8 <xPortStartScheduler+0x106>)
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f383 8814 	msr	CONTROL, r3
 800462e:	f380 8809 	msr	PSP, r0
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	4770      	bx	lr
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst2>:
 8004640:	2400006c 	.word	0x2400006c

08004644 <prvSVCHandler>:
{
 8004644:	b508      	push	{r3, lr}
    ulPC = pulParam[ portOFFSET_TO_PC ];
 8004646:	6982      	ldr	r2, [r0, #24]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8004648:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    switch( ucSVCNumber )
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00e      	beq.n	800466e <prvSVCHandler+0x2a>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d017      	beq.n	8004684 <prvSVCHandler+0x40>
 8004654:	b103      	cbz	r3, 8004658 <prvSVCHandler+0x14>
}
 8004656:	bd08      	pop	{r3, pc}
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 8004658:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800465c:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
 8004660:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 8004664:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
            prvRestoreContextOfFirstTask();
 8004668:	f7ff ffb8 	bl	80045dc <prvRestoreContextOfFirstTask>
            break;
 800466c:	e7f3      	b.n	8004656 <prvSVCHandler+0x12>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800466e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
            __asm volatile ( "dsb" ::: "memory" );
 800467a:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800467e:	f3bf 8f6f 	isb	sy
            break;
 8004682:	e7e8      	b.n	8004656 <prvSVCHandler+0x12>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <prvSVCHandler+0x5c>)
 8004686:	429a      	cmp	r2, r3
 8004688:	d3e5      	bcc.n	8004656 <prvSVCHandler+0x12>
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <prvSVCHandler+0x60>)
 800468c:	429a      	cmp	r2, r3
 800468e:	d8e2      	bhi.n	8004656 <prvSVCHandler+0x12>
                        __asm volatile
 8004690:	f3ef 8114 	mrs	r1, CONTROL
 8004694:	f021 0101 	bic.w	r1, r1, #1
 8004698:	f381 8814 	msr	CONTROL, r1
}
 800469c:	e7db      	b.n	8004656 <prvSVCHandler+0x12>
 800469e:	bf00      	nop
 80046a0:	08008000 	.word	0x08008000
 80046a4:	08008b06 	.word	0x08008b06

080046a8 <pxPortInitialiseStack>:
{
 80046a8:	b410      	push	{r4}
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80046aa:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80046ae:	f840 4c04 	str.w	r4, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80046b2:	f021 0101 	bic.w	r1, r1, #1
 80046b6:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = 0;                                                   /* LR */
 80046ba:	2100      	movs	r1, #0
 80046bc:	f840 1c0c 	str.w	r1, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80046c0:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	f840 2c24 	str.w	r2, [r0, #-36]
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf0c      	ite	eq
 80046d0:	2302      	moveq	r3, #2
 80046d2:	2303      	movne	r3, #3
 80046d4:	f840 3c48 	str.w	r3, [r0, #-72]
}
 80046d8:	3848      	subs	r0, #72	; 0x48
 80046da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <vPortEndScheduler>:
    configASSERT( uxCriticalNesting == 1000UL );
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <vPortEndScheduler+0x20>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e8:	d008      	beq.n	80046fc <vPortEndScheduler+0x1c>
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	e7fe      	b.n	80046fa <vPortEndScheduler+0x1a>
}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2400800c 	.word	0x2400800c

08004704 <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	4604      	mov	r4, r0
    #endif /* if defined( __ARMCC_VERSION ) */

    int32_t lIndex;
    uint32_t ul;

    if( xRegions == NULL )
 8004708:	b169      	cbz	r1, 8004726 <vPortStoreTaskMPUSettings+0x22>
 800470a:	460d      	mov	r5, r1
    {
        /* This function is called automatically when the task is created - in
         * which case the stack region parameters will be valid.  At all other
         * times the stack parameters will not be valid and it is assumed that the
         * stack region has already been configured. */
        if( ulStackDepth > 0 )
 800470c:	b143      	cbz	r3, 8004720 <vPortStoreTaskMPUSettings+0x1c>
        {
            /* Define the region that allows access to the stack. */
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
                ( ( uint32_t ) pxBottomOfStack ) |
                ( portMPU_REGION_VALID ) |
 800470e:	f042 0214 	orr.w	r2, r2, #20
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8004712:	6002      	str	r2, [r0, #0]
                ( portSTACK_REGION ); /* Region number. */

            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
                ( portMPU_REGION_READ_WRITE ) | /* Read and write. */
                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 8004714:	0098      	lsls	r0, r3, #2
 8004716:	f7ff ff53 	bl	80045c0 <prvGetMPURegionSizeSetting>
                ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <vPortStoreTaskMPUSettings+0xa0>)
 800471c:	4303      	orrs	r3, r0
            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800471e:	6063      	str	r3, [r4, #4]
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8004720:	2605      	movs	r6, #5
            }
            else
            {
                /* Invalidate the region. */
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8004722:	2700      	movs	r7, #0
 8004724:	e02d      	b.n	8004782 <vPortStoreTaskMPUSettings+0x7e>
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <vPortStoreTaskMPUSettings+0xa4>)
            ( portMPU_REGION_VALID ) |
 8004728:	f043 0214 	orr.w	r2, r3, #20
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 800472c:	6002      	str	r2, [r0, #0]
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 800472e:	481f      	ldr	r0, [pc, #124]	; (80047ac <vPortStoreTaskMPUSettings+0xa8>)
 8004730:	1ac0      	subs	r0, r0, r3
 8004732:	f7ff ff45 	bl	80045c0 <prvGetMPURegionSizeSetting>
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <vPortStoreTaskMPUSettings+0xa0>)
 8004738:	4303      	orrs	r3, r0
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800473a:	6063      	str	r3, [r4, #4]
            ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <vPortStoreTaskMPUSettings+0xac>)
            ( portMPU_REGION_VALID ) |
 800473e:	f043 0215 	orr.w	r2, r3, #21
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8004742:	60a2      	str	r2, [r4, #8]
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8004744:	481b      	ldr	r0, [pc, #108]	; (80047b4 <vPortStoreTaskMPUSettings+0xb0>)
 8004746:	1ac0      	subs	r0, r0, r3
 8004748:	f7ff ff3a 	bl	80045c0 <prvGetMPURegionSizeSetting>
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <vPortStoreTaskMPUSettings+0xb4>)
 800474e:	4303      	orrs	r3, r0
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8004750:	60e3      	str	r3, [r4, #12]
 8004752:	2306      	movs	r3, #6
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8004754:	f1a4 0020 	sub.w	r0, r4, #32
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8004758:	3c1c      	subs	r4, #28
 800475a:	2100      	movs	r1, #0
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 800475c:	f043 0210 	orr.w	r2, r3, #16
 8004760:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8004764:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8004768:	3301      	adds	r3, #1
 800476a:	2b10      	cmp	r3, #16
 800476c:	d1f6      	bne.n	800475c <vPortStoreTaskMPUSettings+0x58>
            }

            lIndex++;
        }
    }
}
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8004770:	f046 0310 	orr.w	r3, r6, #16
 8004774:	60a3      	str	r3, [r4, #8]
                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8004776:	60e7      	str	r7, [r4, #12]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8004778:	350c      	adds	r5, #12
 800477a:	3601      	adds	r6, #1
 800477c:	3408      	adds	r4, #8
 800477e:	2e10      	cmp	r6, #16
 8004780:	d0f5      	beq.n	800476e <vPortStoreTaskMPUSettings+0x6a>
            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 8004782:	686b      	ldr	r3, [r5, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f3      	beq.n	8004770 <vPortStoreTaskMPUSettings+0x6c>
                    ( portMPU_REGION_VALID ) |
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	4333      	orrs	r3, r6
 800478c:	f043 0310 	orr.w	r3, r3, #16
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 8004790:	60a3      	str	r3, [r4, #8]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8004792:	6868      	ldr	r0, [r5, #4]
 8004794:	f7ff ff14 	bl	80045c0 <prvGetMPURegionSizeSetting>
 8004798:	68ab      	ldr	r3, [r5, #8]
 800479a:	4318      	orrs	r0, r3
                    ( xRegions[ lIndex ].ulParameters ) |
 800479c:	f040 0001 	orr.w	r0, r0, #1
                xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 80047a0:	60e0      	str	r0, [r4, #12]
 80047a2:	e7e9      	b.n	8004778 <vPortStoreTaskMPUSettings+0x74>
 80047a4:	03030001 	.word	0x03030001
 80047a8:	24000000 	.word	0x24000000
 80047ac:	24080000 	.word	0x24080000
 80047b0:	24000000 	.word	0x24000000
 80047b4:	24008000 	.word	0x24008000
 80047b8:	01030001 	.word	0x01030001

080047bc <PendSV_Handler>:
    __asm volatile
 80047bc:	f3ef 8009 	mrs	r0, PSP
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <pxCurrentTCBConst>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f01e 0f10 	tst.w	lr, #16
 80047cc:	bf08      	it	eq
 80047ce:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d2:	f3ef 8114 	mrs	r1, CONTROL
 80047d6:	e920 4ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7ff f90c 	bl	8003a0c <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	f101 0104 	add.w	r1, r1, #4
 8004806:	f3bf 8f5f 	dmb	sy
 800480a:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <xPortStartScheduler+0x106>)
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <xPortStartScheduler+0x10a>)
 8004816:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800481a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800481e:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004822:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004826:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800482a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800482e:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <xPortStartScheduler+0x106>)
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	f383 8814 	msr	CONTROL, r3
 8004844:	f01e 0f10 	tst.w	lr, #16
 8004848:	bf08      	it	eq
 800484a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800484e:	f380 8809 	msr	PSP, r0
 8004852:	4770      	bx	lr
 8004854:	f3af 8000 	nop.w
 8004858:	f3af 8000 	nop.w
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	2400006c 	.word	0x2400006c

08004864 <SysTick_Handler>:
{
 8004864:	b510      	push	{r4, lr}
    __asm volatile
 8004866:	f3ef 8411 	mrs	r4, BASEPRI
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
        if( xTaskIncrementTick() != pdFALSE )
 800487a:	f7fe fc43 	bl	8003104 <xTaskIncrementTick>
 800487e:	b128      	cbz	r0, 800488c <SysTick_Handler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004880:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004888:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    __asm volatile
 800488c:	f384 8811 	msr	BASEPRI, r4
}
 8004890:	bd10      	pop	{r4, pc}

08004892 <SVC_Handler>:
    __asm volatile
 8004892:	f01e 0f04 	tst.w	lr, #4
 8004896:	bf0c      	ite	eq
 8004898:	f3ef 8008 	mrseq	r0, MSP
 800489c:	f3ef 8009 	mrsne	r0, PSP
 80048a0:	e6d0      	b.n	8004644 <prvSVCHandler>

080048a2 <xPortStartScheduler>:
{
 80048a2:	b510      	push	{r4, lr}
 80048a4:	b082      	sub	sp, #8
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048a6:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <xPortStartScheduler+0x196>)
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ae:	22ff      	movs	r2, #255	; 0xff
 80048b0:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048c2:	4a5e      	ldr	r2, [pc, #376]	; (8004a3c <xPortStartScheduler+0x19a>)
 80048c4:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048c6:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <xPortStartScheduler+0x19e>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048d4:	d011      	beq.n	80048fa <xPortStartScheduler+0x58>
 80048d6:	2206      	movs	r2, #6
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048e8:	4611      	mov	r1, r2
 80048ea:	3a01      	subs	r2, #1
 80048ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048f0:	d1f2      	bne.n	80048d8 <xPortStartScheduler+0x36>
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <xPortStartScheduler+0x19e>)
 80048f4:	6019      	str	r1, [r3, #0]
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048f6:	2903      	cmp	r1, #3
 80048f8:	d008      	beq.n	800490c <xPortStartScheduler+0x6a>
    __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	e7fe      	b.n	800490a <xPortStartScheduler+0x68>
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800490c:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <xPortStartScheduler+0x19e>)
 800490e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004912:	601a      	str	r2, [r3, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004914:	9b01      	ldr	r3, [sp, #4]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4a47      	ldr	r2, [pc, #284]	; (8004a38 <xPortStartScheduler+0x196>)
 800491a:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800491c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004920:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004924:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004928:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800492c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004930:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004934:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 8004938:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d008      	beq.n	8004954 <xPortStartScheduler+0xb2>
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	e7fe      	b.n	8004952 <xPortStartScheduler+0xb0>
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 8004954:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004958:	f8d3 3d90 	ldr.w	r3, [r3, #3472]	; 0xd90
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004960:	d029      	beq.n	80049b6 <xPortStartScheduler+0x114>
    vPortSetupTimerInterrupt();
 8004962:	f004 fe21 	bl	80095a8 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8004966:	2400      	movs	r4, #0
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <xPortStartScheduler+0x1a2>)
 800496a:	601c      	str	r4, [r3, #0]
    vPortEnableVFP();
 800496c:	f004 fde4 	bl	8009538 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004970:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004974:	f8d2 3f34 	ldr.w	r3, [r2, #3892]	; 0xf34
 8004978:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800497c:	f8c2 3f34 	str.w	r3, [r2, #3892]	; 0xf34
    __asm volatile (
 8004980:	4808      	ldr	r0, [pc, #32]	; (80049a4 <xPortStartScheduler+0x102>)
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	6800      	ldr	r0, [r0, #0]
 8004986:	f380 8808 	msr	MSP, r0
 800498a:	f04f 0000 	mov.w	r0, #0
 800498e:	f380 8814 	msr	CONTROL, r0
 8004992:	b662      	cpsie	i
 8004994:	b661      	cpsie	f
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	df00      	svc	0
 80049a0:	bf00      	nop
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed08 	.word	0xe000ed08
 80049a8:	e000ed94 	.word	0xe000ed94
 80049ac:	e000ed9c 	.word	0xe000ed9c
}
 80049b0:	4620      	mov	r0, r4
 80049b2:	b002      	add	sp, #8
 80049b4:	bd10      	pop	{r4, pc}
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <xPortStartScheduler+0x1a6>)
                                          ( portMPU_REGION_VALID ) |
 80049b8:	f043 0210 	orr.w	r2, r3, #16
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 80049bc:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80049c0:	f8c4 2d9c 	str.w	r2, [r4, #3484]	; 0xd9c
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 80049c4:	4821      	ldr	r0, [pc, #132]	; (8004a4c <xPortStartScheduler+0x1aa>)
 80049c6:	1ac0      	subs	r0, r0, r3
 80049c8:	f7ff fdfa 	bl	80045c0 <prvGetMPURegionSizeSetting>
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <xPortStartScheduler+0x1ae>)
 80049ce:	4303      	orrs	r3, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80049d0:	f8c4 3da0 	str.w	r3, [r4, #3488]	; 0xda0
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80049d4:	4b1f      	ldr	r3, [pc, #124]	; (8004a54 <xPortStartScheduler+0x1b2>)
                                          ( portMPU_REGION_VALID ) |
 80049d6:	f043 0211 	orr.w	r2, r3, #17
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80049da:	f8c4 2d9c 	str.w	r2, [r4, #3484]	; 0xd9c
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80049de:	481e      	ldr	r0, [pc, #120]	; (8004a58 <xPortStartScheduler+0x1b6>)
 80049e0:	1ac0      	subs	r0, r0, r3
 80049e2:	f7ff fded 	bl	80045c0 <prvGetMPURegionSizeSetting>
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <xPortStartScheduler+0x1ba>)
 80049e8:	4303      	orrs	r3, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80049ea:	f8c4 3da0 	str.w	r3, [r4, #3488]	; 0xda0
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80049ee:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <xPortStartScheduler+0x1be>)
                                          ( portMPU_REGION_VALID ) |
 80049f0:	f043 0212 	orr.w	r2, r3, #18
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80049f4:	f8c4 2d9c 	str.w	r2, [r4, #3484]	; 0xd9c
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80049f8:	481a      	ldr	r0, [pc, #104]	; (8004a64 <xPortStartScheduler+0x1c2>)
 80049fa:	1ac0      	subs	r0, r0, r3
 80049fc:	f7ff fde0 	bl	80045c0 <prvGetMPURegionSizeSetting>
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <xPortStartScheduler+0x1c6>)
 8004a02:	4303      	orrs	r3, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 8004a04:	f8c4 3da0 	str.w	r3, [r4, #3488]	; 0xda0
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <xPortStartScheduler+0x1ca>)
 8004a0a:	f8c4 3d9c 	str.w	r3, [r4, #3484]	; 0xd9c
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 8004a0e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8004a12:	f7ff fdd5 	bl	80045c0 <prvGetMPURegionSizeSetting>
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <xPortStartScheduler+0x1ce>)
 8004a18:	4303      	orrs	r3, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 8004a1a:	f8c4 3da0 	str.w	r3, [r4, #3488]	; 0xda0
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 8004a1e:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a26:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8004a2a:	f8d4 3d94 	ldr.w	r3, [r4, #3476]	; 0xd94
 8004a2e:	f043 0305 	orr.w	r3, r3, #5
 8004a32:	f8c4 3d94 	str.w	r3, [r4, #3476]	; 0xd94
 8004a36:	e794      	b.n	8004962 <xPortStartScheduler+0xc0>
 8004a38:	e000e400 	.word	0xe000e400
 8004a3c:	2401001d 	.word	0x2401001d
 8004a40:	24010020 	.word	0x24010020
 8004a44:	2400800c 	.word	0x2400800c
 8004a48:	08000000 	.word	0x08000000
 8004a4c:	08100000 	.word	0x08100000
 8004a50:	06070001 	.word	0x06070001
 8004a54:	08000000 	.word	0x08000000
 8004a58:	08008000 	.word	0x08008000
 8004a5c:	05070001 	.word	0x05070001
 8004a60:	24000000 	.word	0x24000000
 8004a64:	24008000 	.word	0x24008000
 8004a68:	01030001 	.word	0x01030001
 8004a6c:	40000013 	.word	0x40000013
 8004a70:	13000001 	.word	0x13000001

08004a74 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <prvInsertBlockIntoFreeList+0x58>)
 8004a76:	461a      	mov	r2, r3
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4283      	cmp	r3, r0
 8004a7c:	d3fb      	bcc.n	8004a76 <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a7e:	6851      	ldr	r1, [r2, #4]
 8004a80:	eb02 0c01 	add.w	ip, r2, r1
 8004a84:	4560      	cmp	r0, ip
 8004a86:	d009      	beq.n	8004a9c <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a88:	6841      	ldr	r1, [r0, #4]
 8004a8a:	eb00 0c01 	add.w	ip, r0, r1
 8004a8e:	4563      	cmp	r3, ip
 8004a90:	d009      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a92:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a94:	4290      	cmp	r0, r2
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a96:	bf18      	it	ne
 8004a98:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 8004a9a:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a9c:	6840      	ldr	r0, [r0, #4]
 8004a9e:	4401      	add	r1, r0
 8004aa0:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	e7f0      	b.n	8004a88 <prvInsertBlockIntoFreeList+0x14>
{
 8004aa6:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa8:	4c08      	ldr	r4, [pc, #32]	; (8004acc <prvInsertBlockIntoFreeList+0x58>)
 8004aaa:	68a4      	ldr	r4, [r4, #8]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d00b      	beq.n	8004ac8 <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4419      	add	r1, r3
 8004ab4:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8004abc:	4290      	cmp	r0, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004abe:	bf18      	it	ne
 8004ac0:	6010      	strne	r0, [r2, #0]
    }
}
 8004ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ac6:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ac8:	6004      	str	r4, [r0, #0]
 8004aca:	e7f7      	b.n	8004abc <prvInsertBlockIntoFreeList+0x48>
 8004acc:	24000668 	.word	0x24000668

08004ad0 <pvPortMalloc>:
{
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8004ad4:	f7fd ff48 	bl	8002968 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8004ad8:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <pvPortMalloc+0x134>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	b1a3      	cbz	r3, 8004b08 <pvPortMalloc+0x38>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <pvPortMalloc+0x134>)
 8004ae0:	695d      	ldr	r5, [r3, #20]
 8004ae2:	4225      	tst	r5, r4
 8004ae4:	d132      	bne.n	8004b4c <pvPortMalloc+0x7c>
            if( ( xWantedSize > 0 ) &&
 8004ae6:	1e63      	subs	r3, r4, #1
 8004ae8:	f113 0f0a 	cmn.w	r3, #10
 8004aec:	d831      	bhi.n	8004b52 <pvPortMalloc+0x82>
                xWantedSize += xHeapStructSize;
 8004aee:	f104 0208 	add.w	r2, r4, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004af2:	f014 0f07 	tst.w	r4, #7
 8004af6:	d034      	beq.n	8004b62 <pvPortMalloc+0x92>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004af8:	f022 0307 	bic.w	r3, r2, #7
 8004afc:	3308      	adds	r3, #8
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d82e      	bhi.n	8004b60 <pvPortMalloc+0x90>
    ( void ) xTaskResumeAll();
 8004b02:	f7fe fbc7 	bl	8003294 <xTaskResumeAll>
            if( pvReturn == NULL )
 8004b06:	e026      	b.n	8004b56 <pvPortMalloc+0x86>
    uxAddress = ( size_t ) ucHeap;
 8004b08:	4a3f      	ldr	r2, [pc, #252]	; (8004c08 <pvPortMalloc+0x138>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b0a:	f012 0f07 	tst.w	r2, #7
 8004b0e:	d01a      	beq.n	8004b46 <pvPortMalloc+0x76>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b10:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b12:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b16:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8004b1a:	1a5b      	subs	r3, r3, r1
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b1c:	460a      	mov	r2, r1
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b1e:	4939      	ldr	r1, [pc, #228]	; (8004c04 <pvPortMalloc+0x134>)
 8004b20:	600a      	str	r2, [r1, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b22:	2000      	movs	r0, #0
 8004b24:	6048      	str	r0, [r1, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b26:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8004b28:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b2a:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( void * ) uxAddress;
 8004b2e:	608b      	str	r3, [r1, #8]
    pxEnd->xBlockSize = 0;
 8004b30:	6058      	str	r0, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b32:	6018      	str	r0, [r3, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b34:	1a98      	subs	r0, r3, r2
 8004b36:	6050      	str	r0, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b38:	6013      	str	r3, [r2, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3a:	60c8      	str	r0, [r1, #12]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3c:	6108      	str	r0, [r1, #16]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b42:	614b      	str	r3, [r1, #20]
}
 8004b44:	e7cb      	b.n	8004ade <pvPortMalloc+0xe>
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b4a:	e7e8      	b.n	8004b1e <pvPortMalloc+0x4e>
    ( void ) xTaskResumeAll();
 8004b4c:	f7fe fba2 	bl	8003294 <xTaskResumeAll>
            if( pvReturn == NULL )
 8004b50:	e001      	b.n	8004b56 <pvPortMalloc+0x86>
    ( void ) xTaskResumeAll();
 8004b52:	f7fe fb9f 	bl	8003294 <xTaskResumeAll>
                vApplicationMallocFailedHook();
 8004b56:	f004 fdc2 	bl	80096de <vApplicationMallocFailedHook>
 8004b5a:	2600      	movs	r6, #0
}
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b60:	461a      	mov	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <pvPortMalloc+0x134>)
 8004b64:	691f      	ldr	r7, [r3, #16]
 8004b66:	4297      	cmp	r7, r2
 8004b68:	d302      	bcc.n	8004b70 <pvPortMalloc+0xa0>
                pxBlock = xStart.pxNextFreeBlock;
 8004b6a:	4926      	ldr	r1, [pc, #152]	; (8004c04 <pvPortMalloc+0x134>)
 8004b6c:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b6e:	e004      	b.n	8004b7a <pvPortMalloc+0xaa>
    ( void ) xTaskResumeAll();
 8004b70:	f7fe fb90 	bl	8003294 <xTaskResumeAll>
            if( pvReturn == NULL )
 8004b74:	e7ef      	b.n	8004b56 <pvPortMalloc+0x86>
 8004b76:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b78:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d202      	bcs.n	8004b86 <pvPortMalloc+0xb6>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f7      	bne.n	8004b76 <pvPortMalloc+0xa6>
                if( pxBlock != pxEnd )
 8004b86:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <pvPortMalloc+0x134>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	d014      	beq.n	8004bb8 <pvPortMalloc+0xe8>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b8e:	680e      	ldr	r6, [r1, #0]
 8004b90:	3608      	adds	r6, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d913      	bls.n	8004bc6 <pvPortMalloc+0xf6>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b9e:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	f010 0f07 	tst.w	r0, #7
 8004ba4:	d00b      	beq.n	8004bbe <pvPortMalloc+0xee>
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	e7fe      	b.n	8004bb6 <pvPortMalloc+0xe6>
    ( void ) xTaskResumeAll();
 8004bb8:	f7fe fb6c 	bl	8003294 <xTaskResumeAll>
            if( pvReturn == NULL )
 8004bbc:	e7cb      	b.n	8004b56 <pvPortMalloc+0x86>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bbe:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bc0:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bc2:	f7ff ff57 	bl	8004a74 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	1aff      	subs	r7, r7, r3
 8004bca:	4a0e      	ldr	r2, [pc, #56]	; (8004c04 <pvPortMalloc+0x134>)
 8004bcc:	6117      	str	r7, [r2, #16]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bce:	68d2      	ldr	r2, [r2, #12]
 8004bd0:	4297      	cmp	r7, r2
 8004bd2:	d201      	bcs.n	8004bd8 <pvPortMalloc+0x108>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <pvPortMalloc+0x134>)
 8004bd6:	60d7      	str	r7, [r2, #12]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bd8:	431d      	orrs	r5, r3
 8004bda:	6065      	str	r5, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <pvPortMalloc+0x134>)
 8004be2:	6993      	ldr	r3, [r2, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	6193      	str	r3, [r2, #24]
    ( void ) xTaskResumeAll();
 8004be8:	f7fe fb54 	bl	8003294 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bec:	f016 0f07 	tst.w	r6, #7
 8004bf0:	d0b4      	beq.n	8004b5c <pvPortMalloc+0x8c>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0x132>
 8004c04:	24000668 	.word	0x24000668
 8004c08:	24000688 	.word	0x24000688

08004c0c <vPortFree>:
    if( pv != NULL )
 8004c0c:	b390      	cbz	r0, 8004c74 <vPortFree+0x68>
{
 8004c0e:	b538      	push	{r3, r4, r5, lr}
 8004c10:	4604      	mov	r4, r0
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c12:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <vPortFree+0x6c>)
 8004c18:	6952      	ldr	r2, [r2, #20]
 8004c1a:	4213      	tst	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <vPortFree+0x24>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	e7fe      	b.n	8004c2e <vPortFree+0x22>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c30:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004c34:	b141      	cbz	r1, 8004c48 <vPortFree+0x3c>
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	e7fe      	b.n	8004c46 <vPortFree+0x3a>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c48:	ea23 0302 	bic.w	r3, r3, r2
 8004c4c:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8004c50:	f7fd fe8a 	bl	8002968 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c54:	4d08      	ldr	r5, [pc, #32]	; (8004c78 <vPortFree+0x6c>)
 8004c56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c5a:	692a      	ldr	r2, [r5, #16]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	612b      	str	r3, [r5, #16]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c60:	f1a4 0008 	sub.w	r0, r4, #8
 8004c64:	f7ff ff06 	bl	8004a74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c68:	69eb      	ldr	r3, [r5, #28]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61eb      	str	r3, [r5, #28]
                ( void ) xTaskResumeAll();
 8004c6e:	f7fe fb11 	bl	8003294 <xTaskResumeAll>
}
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	24000668 	.word	0x24000668

08004c7c <vPortInitialiseBlocks>:
}
 8004c7c:	4770      	bx	lr

08004c7e <xPortGetFreeHeapSize>:
}
 8004c7e:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <xPortGetFreeHeapSize+0x6>)
 8004c80:	6918      	ldr	r0, [r3, #16]
 8004c82:	4770      	bx	lr
 8004c84:	24000668 	.word	0x24000668

08004c88 <xPortGetMinimumEverFreeHeapSize>:
}
 8004c88:	4b01      	ldr	r3, [pc, #4]	; (8004c90 <xPortGetMinimumEverFreeHeapSize+0x8>)
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	24000668 	.word	0x24000668
 8004c94:	addeadde 	.word	0xaddeadde
 8004c98:	addeadde 	.word	0xaddeadde
 8004c9c:	addeadde 	.word	0xaddeadde
 8004ca0:	addeadde 	.word	0xaddeadde
 8004ca4:	addeadde 	.word	0xaddeadde
 8004ca8:	addeadde 	.word	0xaddeadde
 8004cac:	addeadde 	.word	0xaddeadde
 8004cb0:	addeadde 	.word	0xaddeadde
 8004cb4:	addeadde 	.word	0xaddeadde
 8004cb8:	addeadde 	.word	0xaddeadde
 8004cbc:	addeadde 	.word	0xaddeadde
 8004cc0:	addeadde 	.word	0xaddeadde
 8004cc4:	addeadde 	.word	0xaddeadde
 8004cc8:	addeadde 	.word	0xaddeadde
 8004ccc:	addeadde 	.word	0xaddeadde
 8004cd0:	addeadde 	.word	0xaddeadde
 8004cd4:	addeadde 	.word	0xaddeadde
 8004cd8:	addeadde 	.word	0xaddeadde
 8004cdc:	addeadde 	.word	0xaddeadde
 8004ce0:	addeadde 	.word	0xaddeadde
 8004ce4:	addeadde 	.word	0xaddeadde
 8004ce8:	addeadde 	.word	0xaddeadde
 8004cec:	addeadde 	.word	0xaddeadde
 8004cf0:	addeadde 	.word	0xaddeadde
 8004cf4:	addeadde 	.word	0xaddeadde
 8004cf8:	addeadde 	.word	0xaddeadde
 8004cfc:	addeadde 	.word	0xaddeadde
 8004d00:	addeadde 	.word	0xaddeadde
 8004d04:	addeadde 	.word	0xaddeadde
 8004d08:	addeadde 	.word	0xaddeadde
 8004d0c:	addeadde 	.word	0xaddeadde
 8004d10:	addeadde 	.word	0xaddeadde
 8004d14:	addeadde 	.word	0xaddeadde
 8004d18:	addeadde 	.word	0xaddeadde
 8004d1c:	addeadde 	.word	0xaddeadde
 8004d20:	addeadde 	.word	0xaddeadde
 8004d24:	addeadde 	.word	0xaddeadde
 8004d28:	addeadde 	.word	0xaddeadde
 8004d2c:	addeadde 	.word	0xaddeadde
 8004d30:	addeadde 	.word	0xaddeadde
 8004d34:	addeadde 	.word	0xaddeadde
 8004d38:	addeadde 	.word	0xaddeadde
 8004d3c:	addeadde 	.word	0xaddeadde
 8004d40:	addeadde 	.word	0xaddeadde
 8004d44:	addeadde 	.word	0xaddeadde
 8004d48:	addeadde 	.word	0xaddeadde
 8004d4c:	addeadde 	.word	0xaddeadde
 8004d50:	addeadde 	.word	0xaddeadde
 8004d54:	addeadde 	.word	0xaddeadde
 8004d58:	addeadde 	.word	0xaddeadde
 8004d5c:	addeadde 	.word	0xaddeadde
 8004d60:	addeadde 	.word	0xaddeadde
 8004d64:	addeadde 	.word	0xaddeadde
 8004d68:	addeadde 	.word	0xaddeadde
 8004d6c:	addeadde 	.word	0xaddeadde
 8004d70:	addeadde 	.word	0xaddeadde
 8004d74:	addeadde 	.word	0xaddeadde
 8004d78:	addeadde 	.word	0xaddeadde
 8004d7c:	addeadde 	.word	0xaddeadde
 8004d80:	addeadde 	.word	0xaddeadde
 8004d84:	addeadde 	.word	0xaddeadde
 8004d88:	addeadde 	.word	0xaddeadde
 8004d8c:	addeadde 	.word	0xaddeadde
 8004d90:	addeadde 	.word	0xaddeadde
 8004d94:	addeadde 	.word	0xaddeadde
 8004d98:	addeadde 	.word	0xaddeadde
 8004d9c:	addeadde 	.word	0xaddeadde
 8004da0:	addeadde 	.word	0xaddeadde
 8004da4:	addeadde 	.word	0xaddeadde
 8004da8:	addeadde 	.word	0xaddeadde
 8004dac:	addeadde 	.word	0xaddeadde
 8004db0:	addeadde 	.word	0xaddeadde
 8004db4:	addeadde 	.word	0xaddeadde
 8004db8:	addeadde 	.word	0xaddeadde
 8004dbc:	addeadde 	.word	0xaddeadde
 8004dc0:	addeadde 	.word	0xaddeadde
 8004dc4:	addeadde 	.word	0xaddeadde
 8004dc8:	addeadde 	.word	0xaddeadde
 8004dcc:	addeadde 	.word	0xaddeadde
 8004dd0:	addeadde 	.word	0xaddeadde
 8004dd4:	addeadde 	.word	0xaddeadde
 8004dd8:	addeadde 	.word	0xaddeadde
 8004ddc:	addeadde 	.word	0xaddeadde
 8004de0:	addeadde 	.word	0xaddeadde
 8004de4:	addeadde 	.word	0xaddeadde
 8004de8:	addeadde 	.word	0xaddeadde
 8004dec:	addeadde 	.word	0xaddeadde
 8004df0:	addeadde 	.word	0xaddeadde
 8004df4:	addeadde 	.word	0xaddeadde
 8004df8:	addeadde 	.word	0xaddeadde
 8004dfc:	addeadde 	.word	0xaddeadde
 8004e00:	addeadde 	.word	0xaddeadde
 8004e04:	addeadde 	.word	0xaddeadde
 8004e08:	addeadde 	.word	0xaddeadde
 8004e0c:	addeadde 	.word	0xaddeadde
 8004e10:	addeadde 	.word	0xaddeadde
 8004e14:	addeadde 	.word	0xaddeadde
 8004e18:	addeadde 	.word	0xaddeadde
 8004e1c:	addeadde 	.word	0xaddeadde
 8004e20:	addeadde 	.word	0xaddeadde
 8004e24:	addeadde 	.word	0xaddeadde
 8004e28:	addeadde 	.word	0xaddeadde
 8004e2c:	addeadde 	.word	0xaddeadde
 8004e30:	addeadde 	.word	0xaddeadde
 8004e34:	addeadde 	.word	0xaddeadde
 8004e38:	addeadde 	.word	0xaddeadde
 8004e3c:	addeadde 	.word	0xaddeadde
 8004e40:	addeadde 	.word	0xaddeadde
 8004e44:	addeadde 	.word	0xaddeadde
 8004e48:	addeadde 	.word	0xaddeadde
 8004e4c:	addeadde 	.word	0xaddeadde
 8004e50:	addeadde 	.word	0xaddeadde
 8004e54:	addeadde 	.word	0xaddeadde
 8004e58:	addeadde 	.word	0xaddeadde
 8004e5c:	addeadde 	.word	0xaddeadde
 8004e60:	addeadde 	.word	0xaddeadde
 8004e64:	addeadde 	.word	0xaddeadde
 8004e68:	addeadde 	.word	0xaddeadde
 8004e6c:	addeadde 	.word	0xaddeadde
 8004e70:	addeadde 	.word	0xaddeadde
 8004e74:	addeadde 	.word	0xaddeadde
 8004e78:	addeadde 	.word	0xaddeadde
 8004e7c:	addeadde 	.word	0xaddeadde
 8004e80:	addeadde 	.word	0xaddeadde
 8004e84:	addeadde 	.word	0xaddeadde
 8004e88:	addeadde 	.word	0xaddeadde
 8004e8c:	addeadde 	.word	0xaddeadde
 8004e90:	addeadde 	.word	0xaddeadde
 8004e94:	addeadde 	.word	0xaddeadde
 8004e98:	addeadde 	.word	0xaddeadde
 8004e9c:	addeadde 	.word	0xaddeadde
 8004ea0:	addeadde 	.word	0xaddeadde
 8004ea4:	addeadde 	.word	0xaddeadde
 8004ea8:	addeadde 	.word	0xaddeadde
 8004eac:	addeadde 	.word	0xaddeadde
 8004eb0:	addeadde 	.word	0xaddeadde
 8004eb4:	addeadde 	.word	0xaddeadde
 8004eb8:	addeadde 	.word	0xaddeadde
 8004ebc:	addeadde 	.word	0xaddeadde
 8004ec0:	addeadde 	.word	0xaddeadde
 8004ec4:	addeadde 	.word	0xaddeadde
 8004ec8:	addeadde 	.word	0xaddeadde
 8004ecc:	addeadde 	.word	0xaddeadde
 8004ed0:	addeadde 	.word	0xaddeadde
 8004ed4:	addeadde 	.word	0xaddeadde
 8004ed8:	addeadde 	.word	0xaddeadde
 8004edc:	addeadde 	.word	0xaddeadde
 8004ee0:	addeadde 	.word	0xaddeadde
 8004ee4:	addeadde 	.word	0xaddeadde
 8004ee8:	addeadde 	.word	0xaddeadde
 8004eec:	addeadde 	.word	0xaddeadde
 8004ef0:	addeadde 	.word	0xaddeadde
 8004ef4:	addeadde 	.word	0xaddeadde
 8004ef8:	addeadde 	.word	0xaddeadde
 8004efc:	addeadde 	.word	0xaddeadde
 8004f00:	addeadde 	.word	0xaddeadde
 8004f04:	addeadde 	.word	0xaddeadde
 8004f08:	addeadde 	.word	0xaddeadde
 8004f0c:	addeadde 	.word	0xaddeadde
 8004f10:	addeadde 	.word	0xaddeadde
 8004f14:	addeadde 	.word	0xaddeadde
 8004f18:	addeadde 	.word	0xaddeadde
 8004f1c:	addeadde 	.word	0xaddeadde
 8004f20:	addeadde 	.word	0xaddeadde
 8004f24:	addeadde 	.word	0xaddeadde
 8004f28:	addeadde 	.word	0xaddeadde
 8004f2c:	addeadde 	.word	0xaddeadde
 8004f30:	addeadde 	.word	0xaddeadde
 8004f34:	addeadde 	.word	0xaddeadde
 8004f38:	addeadde 	.word	0xaddeadde
 8004f3c:	addeadde 	.word	0xaddeadde
 8004f40:	addeadde 	.word	0xaddeadde
 8004f44:	addeadde 	.word	0xaddeadde
 8004f48:	addeadde 	.word	0xaddeadde
 8004f4c:	addeadde 	.word	0xaddeadde
 8004f50:	addeadde 	.word	0xaddeadde
 8004f54:	addeadde 	.word	0xaddeadde
 8004f58:	addeadde 	.word	0xaddeadde
 8004f5c:	addeadde 	.word	0xaddeadde
 8004f60:	addeadde 	.word	0xaddeadde
 8004f64:	addeadde 	.word	0xaddeadde
 8004f68:	addeadde 	.word	0xaddeadde
 8004f6c:	addeadde 	.word	0xaddeadde
 8004f70:	addeadde 	.word	0xaddeadde
 8004f74:	addeadde 	.word	0xaddeadde
 8004f78:	addeadde 	.word	0xaddeadde
 8004f7c:	addeadde 	.word	0xaddeadde
 8004f80:	addeadde 	.word	0xaddeadde
 8004f84:	addeadde 	.word	0xaddeadde
 8004f88:	addeadde 	.word	0xaddeadde
 8004f8c:	addeadde 	.word	0xaddeadde
 8004f90:	addeadde 	.word	0xaddeadde
 8004f94:	addeadde 	.word	0xaddeadde
 8004f98:	addeadde 	.word	0xaddeadde
 8004f9c:	addeadde 	.word	0xaddeadde
 8004fa0:	addeadde 	.word	0xaddeadde
 8004fa4:	addeadde 	.word	0xaddeadde
 8004fa8:	addeadde 	.word	0xaddeadde
 8004fac:	addeadde 	.word	0xaddeadde
 8004fb0:	addeadde 	.word	0xaddeadde
 8004fb4:	addeadde 	.word	0xaddeadde
 8004fb8:	addeadde 	.word	0xaddeadde
 8004fbc:	addeadde 	.word	0xaddeadde
 8004fc0:	addeadde 	.word	0xaddeadde
 8004fc4:	addeadde 	.word	0xaddeadde
 8004fc8:	addeadde 	.word	0xaddeadde
 8004fcc:	addeadde 	.word	0xaddeadde
 8004fd0:	addeadde 	.word	0xaddeadde
 8004fd4:	addeadde 	.word	0xaddeadde
 8004fd8:	addeadde 	.word	0xaddeadde
 8004fdc:	addeadde 	.word	0xaddeadde
 8004fe0:	addeadde 	.word	0xaddeadde
 8004fe4:	addeadde 	.word	0xaddeadde
 8004fe8:	addeadde 	.word	0xaddeadde
 8004fec:	addeadde 	.word	0xaddeadde
 8004ff0:	addeadde 	.word	0xaddeadde
 8004ff4:	addeadde 	.word	0xaddeadde
 8004ff8:	addeadde 	.word	0xaddeadde
 8004ffc:	addeadde 	.word	0xaddeadde
 8005000:	addeadde 	.word	0xaddeadde
 8005004:	addeadde 	.word	0xaddeadde
 8005008:	addeadde 	.word	0xaddeadde
 800500c:	addeadde 	.word	0xaddeadde
 8005010:	addeadde 	.word	0xaddeadde
 8005014:	addeadde 	.word	0xaddeadde
 8005018:	addeadde 	.word	0xaddeadde
 800501c:	addeadde 	.word	0xaddeadde
 8005020:	addeadde 	.word	0xaddeadde
 8005024:	addeadde 	.word	0xaddeadde
 8005028:	addeadde 	.word	0xaddeadde
 800502c:	addeadde 	.word	0xaddeadde
 8005030:	addeadde 	.word	0xaddeadde
 8005034:	addeadde 	.word	0xaddeadde
 8005038:	addeadde 	.word	0xaddeadde
 800503c:	addeadde 	.word	0xaddeadde
 8005040:	addeadde 	.word	0xaddeadde
 8005044:	addeadde 	.word	0xaddeadde
 8005048:	addeadde 	.word	0xaddeadde
 800504c:	addeadde 	.word	0xaddeadde
 8005050:	addeadde 	.word	0xaddeadde
 8005054:	addeadde 	.word	0xaddeadde
 8005058:	addeadde 	.word	0xaddeadde
 800505c:	addeadde 	.word	0xaddeadde
 8005060:	addeadde 	.word	0xaddeadde
 8005064:	addeadde 	.word	0xaddeadde
 8005068:	addeadde 	.word	0xaddeadde
 800506c:	addeadde 	.word	0xaddeadde
 8005070:	addeadde 	.word	0xaddeadde
 8005074:	addeadde 	.word	0xaddeadde
 8005078:	addeadde 	.word	0xaddeadde
 800507c:	addeadde 	.word	0xaddeadde
 8005080:	addeadde 	.word	0xaddeadde
 8005084:	addeadde 	.word	0xaddeadde
 8005088:	addeadde 	.word	0xaddeadde
 800508c:	addeadde 	.word	0xaddeadde
 8005090:	addeadde 	.word	0xaddeadde
 8005094:	addeadde 	.word	0xaddeadde
 8005098:	addeadde 	.word	0xaddeadde
 800509c:	addeadde 	.word	0xaddeadde
 80050a0:	addeadde 	.word	0xaddeadde
 80050a4:	addeadde 	.word	0xaddeadde
 80050a8:	addeadde 	.word	0xaddeadde
 80050ac:	addeadde 	.word	0xaddeadde
 80050b0:	addeadde 	.word	0xaddeadde
 80050b4:	addeadde 	.word	0xaddeadde
 80050b8:	addeadde 	.word	0xaddeadde
 80050bc:	addeadde 	.word	0xaddeadde
 80050c0:	addeadde 	.word	0xaddeadde
 80050c4:	addeadde 	.word	0xaddeadde
 80050c8:	addeadde 	.word	0xaddeadde
 80050cc:	addeadde 	.word	0xaddeadde
 80050d0:	addeadde 	.word	0xaddeadde
 80050d4:	addeadde 	.word	0xaddeadde
 80050d8:	addeadde 	.word	0xaddeadde
 80050dc:	addeadde 	.word	0xaddeadde
 80050e0:	addeadde 	.word	0xaddeadde
 80050e4:	addeadde 	.word	0xaddeadde
 80050e8:	addeadde 	.word	0xaddeadde
 80050ec:	addeadde 	.word	0xaddeadde
 80050f0:	addeadde 	.word	0xaddeadde
 80050f4:	addeadde 	.word	0xaddeadde
 80050f8:	addeadde 	.word	0xaddeadde
 80050fc:	addeadde 	.word	0xaddeadde
 8005100:	addeadde 	.word	0xaddeadde
 8005104:	addeadde 	.word	0xaddeadde
 8005108:	addeadde 	.word	0xaddeadde
 800510c:	addeadde 	.word	0xaddeadde
 8005110:	addeadde 	.word	0xaddeadde
 8005114:	addeadde 	.word	0xaddeadde
 8005118:	addeadde 	.word	0xaddeadde
 800511c:	addeadde 	.word	0xaddeadde
 8005120:	addeadde 	.word	0xaddeadde
 8005124:	addeadde 	.word	0xaddeadde
 8005128:	addeadde 	.word	0xaddeadde
 800512c:	addeadde 	.word	0xaddeadde
 8005130:	addeadde 	.word	0xaddeadde
 8005134:	addeadde 	.word	0xaddeadde
 8005138:	addeadde 	.word	0xaddeadde
 800513c:	addeadde 	.word	0xaddeadde
 8005140:	addeadde 	.word	0xaddeadde
 8005144:	addeadde 	.word	0xaddeadde
 8005148:	addeadde 	.word	0xaddeadde
 800514c:	addeadde 	.word	0xaddeadde
 8005150:	addeadde 	.word	0xaddeadde
 8005154:	addeadde 	.word	0xaddeadde
 8005158:	addeadde 	.word	0xaddeadde
 800515c:	addeadde 	.word	0xaddeadde
 8005160:	addeadde 	.word	0xaddeadde
 8005164:	addeadde 	.word	0xaddeadde
 8005168:	addeadde 	.word	0xaddeadde
 800516c:	addeadde 	.word	0xaddeadde
 8005170:	addeadde 	.word	0xaddeadde
 8005174:	addeadde 	.word	0xaddeadde
 8005178:	addeadde 	.word	0xaddeadde
 800517c:	addeadde 	.word	0xaddeadde
 8005180:	addeadde 	.word	0xaddeadde
 8005184:	addeadde 	.word	0xaddeadde
 8005188:	addeadde 	.word	0xaddeadde
 800518c:	addeadde 	.word	0xaddeadde
 8005190:	addeadde 	.word	0xaddeadde
 8005194:	addeadde 	.word	0xaddeadde
 8005198:	addeadde 	.word	0xaddeadde
 800519c:	addeadde 	.word	0xaddeadde
 80051a0:	addeadde 	.word	0xaddeadde
 80051a4:	addeadde 	.word	0xaddeadde
 80051a8:	addeadde 	.word	0xaddeadde
 80051ac:	addeadde 	.word	0xaddeadde
 80051b0:	addeadde 	.word	0xaddeadde
 80051b4:	addeadde 	.word	0xaddeadde
 80051b8:	addeadde 	.word	0xaddeadde
 80051bc:	addeadde 	.word	0xaddeadde
 80051c0:	addeadde 	.word	0xaddeadde
 80051c4:	addeadde 	.word	0xaddeadde
 80051c8:	addeadde 	.word	0xaddeadde
 80051cc:	addeadde 	.word	0xaddeadde
 80051d0:	addeadde 	.word	0xaddeadde
 80051d4:	addeadde 	.word	0xaddeadde
 80051d8:	addeadde 	.word	0xaddeadde
 80051dc:	addeadde 	.word	0xaddeadde
 80051e0:	addeadde 	.word	0xaddeadde
 80051e4:	addeadde 	.word	0xaddeadde
 80051e8:	addeadde 	.word	0xaddeadde
 80051ec:	addeadde 	.word	0xaddeadde
 80051f0:	addeadde 	.word	0xaddeadde
 80051f4:	addeadde 	.word	0xaddeadde
 80051f8:	addeadde 	.word	0xaddeadde
 80051fc:	addeadde 	.word	0xaddeadde
 8005200:	addeadde 	.word	0xaddeadde
 8005204:	addeadde 	.word	0xaddeadde
 8005208:	addeadde 	.word	0xaddeadde
 800520c:	addeadde 	.word	0xaddeadde
 8005210:	addeadde 	.word	0xaddeadde
 8005214:	addeadde 	.word	0xaddeadde
 8005218:	addeadde 	.word	0xaddeadde
 800521c:	addeadde 	.word	0xaddeadde
 8005220:	addeadde 	.word	0xaddeadde
 8005224:	addeadde 	.word	0xaddeadde
 8005228:	addeadde 	.word	0xaddeadde
 800522c:	addeadde 	.word	0xaddeadde
 8005230:	addeadde 	.word	0xaddeadde
 8005234:	addeadde 	.word	0xaddeadde
 8005238:	addeadde 	.word	0xaddeadde
 800523c:	addeadde 	.word	0xaddeadde
 8005240:	addeadde 	.word	0xaddeadde
 8005244:	addeadde 	.word	0xaddeadde
 8005248:	addeadde 	.word	0xaddeadde
 800524c:	addeadde 	.word	0xaddeadde
 8005250:	addeadde 	.word	0xaddeadde
 8005254:	addeadde 	.word	0xaddeadde
 8005258:	addeadde 	.word	0xaddeadde
 800525c:	addeadde 	.word	0xaddeadde
 8005260:	addeadde 	.word	0xaddeadde
 8005264:	addeadde 	.word	0xaddeadde
 8005268:	addeadde 	.word	0xaddeadde
 800526c:	addeadde 	.word	0xaddeadde
 8005270:	addeadde 	.word	0xaddeadde
 8005274:	addeadde 	.word	0xaddeadde
 8005278:	addeadde 	.word	0xaddeadde
 800527c:	addeadde 	.word	0xaddeadde
 8005280:	addeadde 	.word	0xaddeadde
 8005284:	addeadde 	.word	0xaddeadde
 8005288:	addeadde 	.word	0xaddeadde
 800528c:	addeadde 	.word	0xaddeadde
 8005290:	addeadde 	.word	0xaddeadde
 8005294:	addeadde 	.word	0xaddeadde
 8005298:	addeadde 	.word	0xaddeadde
 800529c:	addeadde 	.word	0xaddeadde
 80052a0:	addeadde 	.word	0xaddeadde
 80052a4:	addeadde 	.word	0xaddeadde
 80052a8:	addeadde 	.word	0xaddeadde
 80052ac:	addeadde 	.word	0xaddeadde
 80052b0:	addeadde 	.word	0xaddeadde
 80052b4:	addeadde 	.word	0xaddeadde
 80052b8:	addeadde 	.word	0xaddeadde
 80052bc:	addeadde 	.word	0xaddeadde
 80052c0:	addeadde 	.word	0xaddeadde
 80052c4:	addeadde 	.word	0xaddeadde
 80052c8:	addeadde 	.word	0xaddeadde
 80052cc:	addeadde 	.word	0xaddeadde
 80052d0:	addeadde 	.word	0xaddeadde
 80052d4:	addeadde 	.word	0xaddeadde
 80052d8:	addeadde 	.word	0xaddeadde
 80052dc:	addeadde 	.word	0xaddeadde
 80052e0:	addeadde 	.word	0xaddeadde
 80052e4:	addeadde 	.word	0xaddeadde
 80052e8:	addeadde 	.word	0xaddeadde
 80052ec:	addeadde 	.word	0xaddeadde
 80052f0:	addeadde 	.word	0xaddeadde
 80052f4:	addeadde 	.word	0xaddeadde
 80052f8:	addeadde 	.word	0xaddeadde
 80052fc:	addeadde 	.word	0xaddeadde
 8005300:	addeadde 	.word	0xaddeadde
 8005304:	addeadde 	.word	0xaddeadde
 8005308:	addeadde 	.word	0xaddeadde
 800530c:	addeadde 	.word	0xaddeadde
 8005310:	addeadde 	.word	0xaddeadde
 8005314:	addeadde 	.word	0xaddeadde
 8005318:	addeadde 	.word	0xaddeadde
 800531c:	addeadde 	.word	0xaddeadde
 8005320:	addeadde 	.word	0xaddeadde
 8005324:	addeadde 	.word	0xaddeadde
 8005328:	addeadde 	.word	0xaddeadde
 800532c:	addeadde 	.word	0xaddeadde
 8005330:	addeadde 	.word	0xaddeadde
 8005334:	addeadde 	.word	0xaddeadde
 8005338:	addeadde 	.word	0xaddeadde
 800533c:	addeadde 	.word	0xaddeadde
 8005340:	addeadde 	.word	0xaddeadde
 8005344:	addeadde 	.word	0xaddeadde
 8005348:	addeadde 	.word	0xaddeadde
 800534c:	addeadde 	.word	0xaddeadde
 8005350:	addeadde 	.word	0xaddeadde
 8005354:	addeadde 	.word	0xaddeadde
 8005358:	addeadde 	.word	0xaddeadde
 800535c:	addeadde 	.word	0xaddeadde
 8005360:	addeadde 	.word	0xaddeadde
 8005364:	addeadde 	.word	0xaddeadde
 8005368:	addeadde 	.word	0xaddeadde
 800536c:	addeadde 	.word	0xaddeadde
 8005370:	addeadde 	.word	0xaddeadde
 8005374:	addeadde 	.word	0xaddeadde
 8005378:	addeadde 	.word	0xaddeadde
 800537c:	addeadde 	.word	0xaddeadde
 8005380:	addeadde 	.word	0xaddeadde
 8005384:	addeadde 	.word	0xaddeadde
 8005388:	addeadde 	.word	0xaddeadde
 800538c:	addeadde 	.word	0xaddeadde
 8005390:	addeadde 	.word	0xaddeadde
 8005394:	addeadde 	.word	0xaddeadde
 8005398:	addeadde 	.word	0xaddeadde
 800539c:	addeadde 	.word	0xaddeadde
 80053a0:	addeadde 	.word	0xaddeadde
 80053a4:	addeadde 	.word	0xaddeadde
 80053a8:	addeadde 	.word	0xaddeadde
 80053ac:	addeadde 	.word	0xaddeadde
 80053b0:	addeadde 	.word	0xaddeadde
 80053b4:	addeadde 	.word	0xaddeadde
 80053b8:	addeadde 	.word	0xaddeadde
 80053bc:	addeadde 	.word	0xaddeadde
 80053c0:	addeadde 	.word	0xaddeadde
 80053c4:	addeadde 	.word	0xaddeadde
 80053c8:	addeadde 	.word	0xaddeadde
 80053cc:	addeadde 	.word	0xaddeadde
 80053d0:	addeadde 	.word	0xaddeadde
 80053d4:	addeadde 	.word	0xaddeadde
 80053d8:	addeadde 	.word	0xaddeadde
 80053dc:	addeadde 	.word	0xaddeadde
 80053e0:	addeadde 	.word	0xaddeadde
 80053e4:	addeadde 	.word	0xaddeadde
 80053e8:	addeadde 	.word	0xaddeadde
 80053ec:	addeadde 	.word	0xaddeadde
 80053f0:	addeadde 	.word	0xaddeadde
 80053f4:	addeadde 	.word	0xaddeadde
 80053f8:	addeadde 	.word	0xaddeadde
 80053fc:	addeadde 	.word	0xaddeadde
 8005400:	addeadde 	.word	0xaddeadde
 8005404:	addeadde 	.word	0xaddeadde
 8005408:	addeadde 	.word	0xaddeadde
 800540c:	addeadde 	.word	0xaddeadde
 8005410:	addeadde 	.word	0xaddeadde
 8005414:	addeadde 	.word	0xaddeadde
 8005418:	addeadde 	.word	0xaddeadde
 800541c:	addeadde 	.word	0xaddeadde
 8005420:	addeadde 	.word	0xaddeadde
 8005424:	addeadde 	.word	0xaddeadde
 8005428:	addeadde 	.word	0xaddeadde
 800542c:	addeadde 	.word	0xaddeadde
 8005430:	addeadde 	.word	0xaddeadde
 8005434:	addeadde 	.word	0xaddeadde
 8005438:	addeadde 	.word	0xaddeadde
 800543c:	addeadde 	.word	0xaddeadde
 8005440:	addeadde 	.word	0xaddeadde
 8005444:	addeadde 	.word	0xaddeadde
 8005448:	addeadde 	.word	0xaddeadde
 800544c:	addeadde 	.word	0xaddeadde
 8005450:	addeadde 	.word	0xaddeadde
 8005454:	addeadde 	.word	0xaddeadde
 8005458:	addeadde 	.word	0xaddeadde
 800545c:	addeadde 	.word	0xaddeadde
 8005460:	addeadde 	.word	0xaddeadde
 8005464:	addeadde 	.word	0xaddeadde
 8005468:	addeadde 	.word	0xaddeadde
 800546c:	addeadde 	.word	0xaddeadde
 8005470:	addeadde 	.word	0xaddeadde
 8005474:	addeadde 	.word	0xaddeadde
 8005478:	addeadde 	.word	0xaddeadde
 800547c:	addeadde 	.word	0xaddeadde
 8005480:	addeadde 	.word	0xaddeadde
 8005484:	addeadde 	.word	0xaddeadde
 8005488:	addeadde 	.word	0xaddeadde
 800548c:	addeadde 	.word	0xaddeadde
 8005490:	addeadde 	.word	0xaddeadde
 8005494:	addeadde 	.word	0xaddeadde
 8005498:	addeadde 	.word	0xaddeadde
 800549c:	addeadde 	.word	0xaddeadde
 80054a0:	addeadde 	.word	0xaddeadde
 80054a4:	addeadde 	.word	0xaddeadde
 80054a8:	addeadde 	.word	0xaddeadde
 80054ac:	addeadde 	.word	0xaddeadde
 80054b0:	addeadde 	.word	0xaddeadde
 80054b4:	addeadde 	.word	0xaddeadde
 80054b8:	addeadde 	.word	0xaddeadde
 80054bc:	addeadde 	.word	0xaddeadde
 80054c0:	addeadde 	.word	0xaddeadde
 80054c4:	addeadde 	.word	0xaddeadde
 80054c8:	addeadde 	.word	0xaddeadde
 80054cc:	addeadde 	.word	0xaddeadde
 80054d0:	addeadde 	.word	0xaddeadde
 80054d4:	addeadde 	.word	0xaddeadde
 80054d8:	addeadde 	.word	0xaddeadde
 80054dc:	addeadde 	.word	0xaddeadde
 80054e0:	addeadde 	.word	0xaddeadde
 80054e4:	addeadde 	.word	0xaddeadde
 80054e8:	addeadde 	.word	0xaddeadde
 80054ec:	addeadde 	.word	0xaddeadde
 80054f0:	addeadde 	.word	0xaddeadde
 80054f4:	addeadde 	.word	0xaddeadde
 80054f8:	addeadde 	.word	0xaddeadde
 80054fc:	addeadde 	.word	0xaddeadde
 8005500:	addeadde 	.word	0xaddeadde
 8005504:	addeadde 	.word	0xaddeadde
 8005508:	addeadde 	.word	0xaddeadde
 800550c:	addeadde 	.word	0xaddeadde
 8005510:	addeadde 	.word	0xaddeadde
 8005514:	addeadde 	.word	0xaddeadde
 8005518:	addeadde 	.word	0xaddeadde
 800551c:	addeadde 	.word	0xaddeadde
 8005520:	addeadde 	.word	0xaddeadde
 8005524:	addeadde 	.word	0xaddeadde
 8005528:	addeadde 	.word	0xaddeadde
 800552c:	addeadde 	.word	0xaddeadde
 8005530:	addeadde 	.word	0xaddeadde
 8005534:	addeadde 	.word	0xaddeadde
 8005538:	addeadde 	.word	0xaddeadde
 800553c:	addeadde 	.word	0xaddeadde
 8005540:	addeadde 	.word	0xaddeadde
 8005544:	addeadde 	.word	0xaddeadde
 8005548:	addeadde 	.word	0xaddeadde
 800554c:	addeadde 	.word	0xaddeadde
 8005550:	addeadde 	.word	0xaddeadde
 8005554:	addeadde 	.word	0xaddeadde
 8005558:	addeadde 	.word	0xaddeadde
 800555c:	addeadde 	.word	0xaddeadde
 8005560:	addeadde 	.word	0xaddeadde
 8005564:	addeadde 	.word	0xaddeadde
 8005568:	addeadde 	.word	0xaddeadde
 800556c:	addeadde 	.word	0xaddeadde
 8005570:	addeadde 	.word	0xaddeadde
 8005574:	addeadde 	.word	0xaddeadde
 8005578:	addeadde 	.word	0xaddeadde
 800557c:	addeadde 	.word	0xaddeadde
 8005580:	addeadde 	.word	0xaddeadde
 8005584:	addeadde 	.word	0xaddeadde
 8005588:	addeadde 	.word	0xaddeadde
 800558c:	addeadde 	.word	0xaddeadde
 8005590:	addeadde 	.word	0xaddeadde
 8005594:	addeadde 	.word	0xaddeadde
 8005598:	addeadde 	.word	0xaddeadde
 800559c:	addeadde 	.word	0xaddeadde
 80055a0:	addeadde 	.word	0xaddeadde
 80055a4:	addeadde 	.word	0xaddeadde
 80055a8:	addeadde 	.word	0xaddeadde
 80055ac:	addeadde 	.word	0xaddeadde
 80055b0:	addeadde 	.word	0xaddeadde
 80055b4:	addeadde 	.word	0xaddeadde
 80055b8:	addeadde 	.word	0xaddeadde
 80055bc:	addeadde 	.word	0xaddeadde
 80055c0:	addeadde 	.word	0xaddeadde
 80055c4:	addeadde 	.word	0xaddeadde
 80055c8:	addeadde 	.word	0xaddeadde
 80055cc:	addeadde 	.word	0xaddeadde
 80055d0:	addeadde 	.word	0xaddeadde
 80055d4:	addeadde 	.word	0xaddeadde
 80055d8:	addeadde 	.word	0xaddeadde
 80055dc:	addeadde 	.word	0xaddeadde
 80055e0:	addeadde 	.word	0xaddeadde
 80055e4:	addeadde 	.word	0xaddeadde
 80055e8:	addeadde 	.word	0xaddeadde
 80055ec:	addeadde 	.word	0xaddeadde
 80055f0:	addeadde 	.word	0xaddeadde
 80055f4:	addeadde 	.word	0xaddeadde
 80055f8:	addeadde 	.word	0xaddeadde
 80055fc:	addeadde 	.word	0xaddeadde
 8005600:	addeadde 	.word	0xaddeadde
 8005604:	addeadde 	.word	0xaddeadde
 8005608:	addeadde 	.word	0xaddeadde
 800560c:	addeadde 	.word	0xaddeadde
 8005610:	addeadde 	.word	0xaddeadde
 8005614:	addeadde 	.word	0xaddeadde
 8005618:	addeadde 	.word	0xaddeadde
 800561c:	addeadde 	.word	0xaddeadde
 8005620:	addeadde 	.word	0xaddeadde
 8005624:	addeadde 	.word	0xaddeadde
 8005628:	addeadde 	.word	0xaddeadde
 800562c:	addeadde 	.word	0xaddeadde
 8005630:	addeadde 	.word	0xaddeadde
 8005634:	addeadde 	.word	0xaddeadde
 8005638:	addeadde 	.word	0xaddeadde
 800563c:	addeadde 	.word	0xaddeadde
 8005640:	addeadde 	.word	0xaddeadde
 8005644:	addeadde 	.word	0xaddeadde
 8005648:	addeadde 	.word	0xaddeadde
 800564c:	addeadde 	.word	0xaddeadde
 8005650:	addeadde 	.word	0xaddeadde
 8005654:	addeadde 	.word	0xaddeadde
 8005658:	addeadde 	.word	0xaddeadde
 800565c:	addeadde 	.word	0xaddeadde
 8005660:	addeadde 	.word	0xaddeadde
 8005664:	addeadde 	.word	0xaddeadde
 8005668:	addeadde 	.word	0xaddeadde
 800566c:	addeadde 	.word	0xaddeadde
 8005670:	addeadde 	.word	0xaddeadde
 8005674:	addeadde 	.word	0xaddeadde
 8005678:	addeadde 	.word	0xaddeadde
 800567c:	addeadde 	.word	0xaddeadde
 8005680:	addeadde 	.word	0xaddeadde
 8005684:	addeadde 	.word	0xaddeadde
 8005688:	addeadde 	.word	0xaddeadde
 800568c:	addeadde 	.word	0xaddeadde
 8005690:	addeadde 	.word	0xaddeadde
 8005694:	addeadde 	.word	0xaddeadde
 8005698:	addeadde 	.word	0xaddeadde
 800569c:	addeadde 	.word	0xaddeadde
 80056a0:	addeadde 	.word	0xaddeadde
 80056a4:	addeadde 	.word	0xaddeadde
 80056a8:	addeadde 	.word	0xaddeadde
 80056ac:	addeadde 	.word	0xaddeadde
 80056b0:	addeadde 	.word	0xaddeadde
 80056b4:	addeadde 	.word	0xaddeadde
 80056b8:	addeadde 	.word	0xaddeadde
 80056bc:	addeadde 	.word	0xaddeadde
 80056c0:	addeadde 	.word	0xaddeadde
 80056c4:	addeadde 	.word	0xaddeadde
 80056c8:	addeadde 	.word	0xaddeadde
 80056cc:	addeadde 	.word	0xaddeadde
 80056d0:	addeadde 	.word	0xaddeadde
 80056d4:	addeadde 	.word	0xaddeadde
 80056d8:	addeadde 	.word	0xaddeadde
 80056dc:	addeadde 	.word	0xaddeadde
 80056e0:	addeadde 	.word	0xaddeadde
 80056e4:	addeadde 	.word	0xaddeadde
 80056e8:	addeadde 	.word	0xaddeadde
 80056ec:	addeadde 	.word	0xaddeadde
 80056f0:	addeadde 	.word	0xaddeadde
 80056f4:	addeadde 	.word	0xaddeadde
 80056f8:	addeadde 	.word	0xaddeadde
 80056fc:	addeadde 	.word	0xaddeadde
 8005700:	addeadde 	.word	0xaddeadde
 8005704:	addeadde 	.word	0xaddeadde
 8005708:	addeadde 	.word	0xaddeadde
 800570c:	addeadde 	.word	0xaddeadde
 8005710:	addeadde 	.word	0xaddeadde
 8005714:	addeadde 	.word	0xaddeadde
 8005718:	addeadde 	.word	0xaddeadde
 800571c:	addeadde 	.word	0xaddeadde
 8005720:	addeadde 	.word	0xaddeadde
 8005724:	addeadde 	.word	0xaddeadde
 8005728:	addeadde 	.word	0xaddeadde
 800572c:	addeadde 	.word	0xaddeadde
 8005730:	addeadde 	.word	0xaddeadde
 8005734:	addeadde 	.word	0xaddeadde
 8005738:	addeadde 	.word	0xaddeadde
 800573c:	addeadde 	.word	0xaddeadde
 8005740:	addeadde 	.word	0xaddeadde
 8005744:	addeadde 	.word	0xaddeadde
 8005748:	addeadde 	.word	0xaddeadde
 800574c:	addeadde 	.word	0xaddeadde
 8005750:	addeadde 	.word	0xaddeadde
 8005754:	addeadde 	.word	0xaddeadde
 8005758:	addeadde 	.word	0xaddeadde
 800575c:	addeadde 	.word	0xaddeadde
 8005760:	addeadde 	.word	0xaddeadde
 8005764:	addeadde 	.word	0xaddeadde
 8005768:	addeadde 	.word	0xaddeadde
 800576c:	addeadde 	.word	0xaddeadde
 8005770:	addeadde 	.word	0xaddeadde
 8005774:	addeadde 	.word	0xaddeadde
 8005778:	addeadde 	.word	0xaddeadde
 800577c:	addeadde 	.word	0xaddeadde
 8005780:	addeadde 	.word	0xaddeadde
 8005784:	addeadde 	.word	0xaddeadde
 8005788:	addeadde 	.word	0xaddeadde
 800578c:	addeadde 	.word	0xaddeadde
 8005790:	addeadde 	.word	0xaddeadde
 8005794:	addeadde 	.word	0xaddeadde
 8005798:	addeadde 	.word	0xaddeadde
 800579c:	addeadde 	.word	0xaddeadde
 80057a0:	addeadde 	.word	0xaddeadde
 80057a4:	addeadde 	.word	0xaddeadde
 80057a8:	addeadde 	.word	0xaddeadde
 80057ac:	addeadde 	.word	0xaddeadde
 80057b0:	addeadde 	.word	0xaddeadde
 80057b4:	addeadde 	.word	0xaddeadde
 80057b8:	addeadde 	.word	0xaddeadde
 80057bc:	addeadde 	.word	0xaddeadde
 80057c0:	addeadde 	.word	0xaddeadde
 80057c4:	addeadde 	.word	0xaddeadde
 80057c8:	addeadde 	.word	0xaddeadde
 80057cc:	addeadde 	.word	0xaddeadde
 80057d0:	addeadde 	.word	0xaddeadde
 80057d4:	addeadde 	.word	0xaddeadde
 80057d8:	addeadde 	.word	0xaddeadde
 80057dc:	addeadde 	.word	0xaddeadde
 80057e0:	addeadde 	.word	0xaddeadde
 80057e4:	addeadde 	.word	0xaddeadde
 80057e8:	addeadde 	.word	0xaddeadde
 80057ec:	addeadde 	.word	0xaddeadde
 80057f0:	addeadde 	.word	0xaddeadde
 80057f4:	addeadde 	.word	0xaddeadde
 80057f8:	addeadde 	.word	0xaddeadde
 80057fc:	addeadde 	.word	0xaddeadde
 8005800:	addeadde 	.word	0xaddeadde
 8005804:	addeadde 	.word	0xaddeadde
 8005808:	addeadde 	.word	0xaddeadde
 800580c:	addeadde 	.word	0xaddeadde
 8005810:	addeadde 	.word	0xaddeadde
 8005814:	addeadde 	.word	0xaddeadde
 8005818:	addeadde 	.word	0xaddeadde
 800581c:	addeadde 	.word	0xaddeadde
 8005820:	addeadde 	.word	0xaddeadde
 8005824:	addeadde 	.word	0xaddeadde
 8005828:	addeadde 	.word	0xaddeadde
 800582c:	addeadde 	.word	0xaddeadde
 8005830:	addeadde 	.word	0xaddeadde
 8005834:	addeadde 	.word	0xaddeadde
 8005838:	addeadde 	.word	0xaddeadde
 800583c:	addeadde 	.word	0xaddeadde
 8005840:	addeadde 	.word	0xaddeadde
 8005844:	addeadde 	.word	0xaddeadde
 8005848:	addeadde 	.word	0xaddeadde
 800584c:	addeadde 	.word	0xaddeadde
 8005850:	addeadde 	.word	0xaddeadde
 8005854:	addeadde 	.word	0xaddeadde
 8005858:	addeadde 	.word	0xaddeadde
 800585c:	addeadde 	.word	0xaddeadde
 8005860:	addeadde 	.word	0xaddeadde
 8005864:	addeadde 	.word	0xaddeadde
 8005868:	addeadde 	.word	0xaddeadde
 800586c:	addeadde 	.word	0xaddeadde
 8005870:	addeadde 	.word	0xaddeadde
 8005874:	addeadde 	.word	0xaddeadde
 8005878:	addeadde 	.word	0xaddeadde
 800587c:	addeadde 	.word	0xaddeadde
 8005880:	addeadde 	.word	0xaddeadde
 8005884:	addeadde 	.word	0xaddeadde
 8005888:	addeadde 	.word	0xaddeadde
 800588c:	addeadde 	.word	0xaddeadde
 8005890:	addeadde 	.word	0xaddeadde
 8005894:	addeadde 	.word	0xaddeadde
 8005898:	addeadde 	.word	0xaddeadde
 800589c:	addeadde 	.word	0xaddeadde
 80058a0:	addeadde 	.word	0xaddeadde
 80058a4:	addeadde 	.word	0xaddeadde
 80058a8:	addeadde 	.word	0xaddeadde
 80058ac:	addeadde 	.word	0xaddeadde
 80058b0:	addeadde 	.word	0xaddeadde
 80058b4:	addeadde 	.word	0xaddeadde
 80058b8:	addeadde 	.word	0xaddeadde
 80058bc:	addeadde 	.word	0xaddeadde
 80058c0:	addeadde 	.word	0xaddeadde
 80058c4:	addeadde 	.word	0xaddeadde
 80058c8:	addeadde 	.word	0xaddeadde
 80058cc:	addeadde 	.word	0xaddeadde
 80058d0:	addeadde 	.word	0xaddeadde
 80058d4:	addeadde 	.word	0xaddeadde
 80058d8:	addeadde 	.word	0xaddeadde
 80058dc:	addeadde 	.word	0xaddeadde
 80058e0:	addeadde 	.word	0xaddeadde
 80058e4:	addeadde 	.word	0xaddeadde
 80058e8:	addeadde 	.word	0xaddeadde
 80058ec:	addeadde 	.word	0xaddeadde
 80058f0:	addeadde 	.word	0xaddeadde
 80058f4:	addeadde 	.word	0xaddeadde
 80058f8:	addeadde 	.word	0xaddeadde
 80058fc:	addeadde 	.word	0xaddeadde
 8005900:	addeadde 	.word	0xaddeadde
 8005904:	addeadde 	.word	0xaddeadde
 8005908:	addeadde 	.word	0xaddeadde
 800590c:	addeadde 	.word	0xaddeadde
 8005910:	addeadde 	.word	0xaddeadde
 8005914:	addeadde 	.word	0xaddeadde
 8005918:	addeadde 	.word	0xaddeadde
 800591c:	addeadde 	.word	0xaddeadde
 8005920:	addeadde 	.word	0xaddeadde
 8005924:	addeadde 	.word	0xaddeadde
 8005928:	addeadde 	.word	0xaddeadde
 800592c:	addeadde 	.word	0xaddeadde
 8005930:	addeadde 	.word	0xaddeadde
 8005934:	addeadde 	.word	0xaddeadde
 8005938:	addeadde 	.word	0xaddeadde
 800593c:	addeadde 	.word	0xaddeadde
 8005940:	addeadde 	.word	0xaddeadde
 8005944:	addeadde 	.word	0xaddeadde
 8005948:	addeadde 	.word	0xaddeadde
 800594c:	addeadde 	.word	0xaddeadde
 8005950:	addeadde 	.word	0xaddeadde
 8005954:	addeadde 	.word	0xaddeadde
 8005958:	addeadde 	.word	0xaddeadde
 800595c:	addeadde 	.word	0xaddeadde
 8005960:	addeadde 	.word	0xaddeadde
 8005964:	addeadde 	.word	0xaddeadde
 8005968:	addeadde 	.word	0xaddeadde
 800596c:	addeadde 	.word	0xaddeadde
 8005970:	addeadde 	.word	0xaddeadde
 8005974:	addeadde 	.word	0xaddeadde
 8005978:	addeadde 	.word	0xaddeadde
 800597c:	addeadde 	.word	0xaddeadde
 8005980:	addeadde 	.word	0xaddeadde
 8005984:	addeadde 	.word	0xaddeadde
 8005988:	addeadde 	.word	0xaddeadde
 800598c:	addeadde 	.word	0xaddeadde
 8005990:	addeadde 	.word	0xaddeadde
 8005994:	addeadde 	.word	0xaddeadde
 8005998:	addeadde 	.word	0xaddeadde
 800599c:	addeadde 	.word	0xaddeadde
 80059a0:	addeadde 	.word	0xaddeadde
 80059a4:	addeadde 	.word	0xaddeadde
 80059a8:	addeadde 	.word	0xaddeadde
 80059ac:	addeadde 	.word	0xaddeadde
 80059b0:	addeadde 	.word	0xaddeadde
 80059b4:	addeadde 	.word	0xaddeadde
 80059b8:	addeadde 	.word	0xaddeadde
 80059bc:	addeadde 	.word	0xaddeadde
 80059c0:	addeadde 	.word	0xaddeadde
 80059c4:	addeadde 	.word	0xaddeadde
 80059c8:	addeadde 	.word	0xaddeadde
 80059cc:	addeadde 	.word	0xaddeadde
 80059d0:	addeadde 	.word	0xaddeadde
 80059d4:	addeadde 	.word	0xaddeadde
 80059d8:	addeadde 	.word	0xaddeadde
 80059dc:	addeadde 	.word	0xaddeadde
 80059e0:	addeadde 	.word	0xaddeadde
 80059e4:	addeadde 	.word	0xaddeadde
 80059e8:	addeadde 	.word	0xaddeadde
 80059ec:	addeadde 	.word	0xaddeadde
 80059f0:	addeadde 	.word	0xaddeadde
 80059f4:	addeadde 	.word	0xaddeadde
 80059f8:	addeadde 	.word	0xaddeadde
 80059fc:	addeadde 	.word	0xaddeadde
 8005a00:	addeadde 	.word	0xaddeadde
 8005a04:	addeadde 	.word	0xaddeadde
 8005a08:	addeadde 	.word	0xaddeadde
 8005a0c:	addeadde 	.word	0xaddeadde
 8005a10:	addeadde 	.word	0xaddeadde
 8005a14:	addeadde 	.word	0xaddeadde
 8005a18:	addeadde 	.word	0xaddeadde
 8005a1c:	addeadde 	.word	0xaddeadde
 8005a20:	addeadde 	.word	0xaddeadde
 8005a24:	addeadde 	.word	0xaddeadde
 8005a28:	addeadde 	.word	0xaddeadde
 8005a2c:	addeadde 	.word	0xaddeadde
 8005a30:	addeadde 	.word	0xaddeadde
 8005a34:	addeadde 	.word	0xaddeadde
 8005a38:	addeadde 	.word	0xaddeadde
 8005a3c:	addeadde 	.word	0xaddeadde
 8005a40:	addeadde 	.word	0xaddeadde
 8005a44:	addeadde 	.word	0xaddeadde
 8005a48:	addeadde 	.word	0xaddeadde
 8005a4c:	addeadde 	.word	0xaddeadde
 8005a50:	addeadde 	.word	0xaddeadde
 8005a54:	addeadde 	.word	0xaddeadde
 8005a58:	addeadde 	.word	0xaddeadde
 8005a5c:	addeadde 	.word	0xaddeadde
 8005a60:	addeadde 	.word	0xaddeadde
 8005a64:	addeadde 	.word	0xaddeadde
 8005a68:	addeadde 	.word	0xaddeadde
 8005a6c:	addeadde 	.word	0xaddeadde
 8005a70:	addeadde 	.word	0xaddeadde
 8005a74:	addeadde 	.word	0xaddeadde
 8005a78:	addeadde 	.word	0xaddeadde
 8005a7c:	addeadde 	.word	0xaddeadde
 8005a80:	addeadde 	.word	0xaddeadde
 8005a84:	addeadde 	.word	0xaddeadde
 8005a88:	addeadde 	.word	0xaddeadde
 8005a8c:	addeadde 	.word	0xaddeadde
 8005a90:	addeadde 	.word	0xaddeadde
 8005a94:	addeadde 	.word	0xaddeadde
 8005a98:	addeadde 	.word	0xaddeadde
 8005a9c:	addeadde 	.word	0xaddeadde
 8005aa0:	addeadde 	.word	0xaddeadde
 8005aa4:	addeadde 	.word	0xaddeadde
 8005aa8:	addeadde 	.word	0xaddeadde
 8005aac:	addeadde 	.word	0xaddeadde
 8005ab0:	addeadde 	.word	0xaddeadde
 8005ab4:	addeadde 	.word	0xaddeadde
 8005ab8:	addeadde 	.word	0xaddeadde
 8005abc:	addeadde 	.word	0xaddeadde
 8005ac0:	addeadde 	.word	0xaddeadde
 8005ac4:	addeadde 	.word	0xaddeadde
 8005ac8:	addeadde 	.word	0xaddeadde
 8005acc:	addeadde 	.word	0xaddeadde
 8005ad0:	addeadde 	.word	0xaddeadde
 8005ad4:	addeadde 	.word	0xaddeadde
 8005ad8:	addeadde 	.word	0xaddeadde
 8005adc:	addeadde 	.word	0xaddeadde
 8005ae0:	addeadde 	.word	0xaddeadde
 8005ae4:	addeadde 	.word	0xaddeadde
 8005ae8:	addeadde 	.word	0xaddeadde
 8005aec:	addeadde 	.word	0xaddeadde
 8005af0:	addeadde 	.word	0xaddeadde
 8005af4:	addeadde 	.word	0xaddeadde
 8005af8:	addeadde 	.word	0xaddeadde
 8005afc:	addeadde 	.word	0xaddeadde
 8005b00:	addeadde 	.word	0xaddeadde
 8005b04:	addeadde 	.word	0xaddeadde
 8005b08:	addeadde 	.word	0xaddeadde
 8005b0c:	addeadde 	.word	0xaddeadde
 8005b10:	addeadde 	.word	0xaddeadde
 8005b14:	addeadde 	.word	0xaddeadde
 8005b18:	addeadde 	.word	0xaddeadde
 8005b1c:	addeadde 	.word	0xaddeadde
 8005b20:	addeadde 	.word	0xaddeadde
 8005b24:	addeadde 	.word	0xaddeadde
 8005b28:	addeadde 	.word	0xaddeadde
 8005b2c:	addeadde 	.word	0xaddeadde
 8005b30:	addeadde 	.word	0xaddeadde
 8005b34:	addeadde 	.word	0xaddeadde
 8005b38:	addeadde 	.word	0xaddeadde
 8005b3c:	addeadde 	.word	0xaddeadde
 8005b40:	addeadde 	.word	0xaddeadde
 8005b44:	addeadde 	.word	0xaddeadde
 8005b48:	addeadde 	.word	0xaddeadde
 8005b4c:	addeadde 	.word	0xaddeadde
 8005b50:	addeadde 	.word	0xaddeadde
 8005b54:	addeadde 	.word	0xaddeadde
 8005b58:	addeadde 	.word	0xaddeadde
 8005b5c:	addeadde 	.word	0xaddeadde
 8005b60:	addeadde 	.word	0xaddeadde
 8005b64:	addeadde 	.word	0xaddeadde
 8005b68:	addeadde 	.word	0xaddeadde
 8005b6c:	addeadde 	.word	0xaddeadde
 8005b70:	addeadde 	.word	0xaddeadde
 8005b74:	addeadde 	.word	0xaddeadde
 8005b78:	addeadde 	.word	0xaddeadde
 8005b7c:	addeadde 	.word	0xaddeadde
 8005b80:	addeadde 	.word	0xaddeadde
 8005b84:	addeadde 	.word	0xaddeadde
 8005b88:	addeadde 	.word	0xaddeadde
 8005b8c:	addeadde 	.word	0xaddeadde
 8005b90:	addeadde 	.word	0xaddeadde
 8005b94:	addeadde 	.word	0xaddeadde
 8005b98:	addeadde 	.word	0xaddeadde
 8005b9c:	addeadde 	.word	0xaddeadde
 8005ba0:	addeadde 	.word	0xaddeadde
 8005ba4:	addeadde 	.word	0xaddeadde
 8005ba8:	addeadde 	.word	0xaddeadde
 8005bac:	addeadde 	.word	0xaddeadde
 8005bb0:	addeadde 	.word	0xaddeadde
 8005bb4:	addeadde 	.word	0xaddeadde
 8005bb8:	addeadde 	.word	0xaddeadde
 8005bbc:	addeadde 	.word	0xaddeadde
 8005bc0:	addeadde 	.word	0xaddeadde
 8005bc4:	addeadde 	.word	0xaddeadde
 8005bc8:	addeadde 	.word	0xaddeadde
 8005bcc:	addeadde 	.word	0xaddeadde
 8005bd0:	addeadde 	.word	0xaddeadde
 8005bd4:	addeadde 	.word	0xaddeadde
 8005bd8:	addeadde 	.word	0xaddeadde
 8005bdc:	addeadde 	.word	0xaddeadde
 8005be0:	addeadde 	.word	0xaddeadde
 8005be4:	addeadde 	.word	0xaddeadde
 8005be8:	addeadde 	.word	0xaddeadde
 8005bec:	addeadde 	.word	0xaddeadde
 8005bf0:	addeadde 	.word	0xaddeadde
 8005bf4:	addeadde 	.word	0xaddeadde
 8005bf8:	addeadde 	.word	0xaddeadde
 8005bfc:	addeadde 	.word	0xaddeadde
 8005c00:	addeadde 	.word	0xaddeadde
 8005c04:	addeadde 	.word	0xaddeadde
 8005c08:	addeadde 	.word	0xaddeadde
 8005c0c:	addeadde 	.word	0xaddeadde
 8005c10:	addeadde 	.word	0xaddeadde
 8005c14:	addeadde 	.word	0xaddeadde
 8005c18:	addeadde 	.word	0xaddeadde
 8005c1c:	addeadde 	.word	0xaddeadde
 8005c20:	addeadde 	.word	0xaddeadde
 8005c24:	addeadde 	.word	0xaddeadde
 8005c28:	addeadde 	.word	0xaddeadde
 8005c2c:	addeadde 	.word	0xaddeadde
 8005c30:	addeadde 	.word	0xaddeadde
 8005c34:	addeadde 	.word	0xaddeadde
 8005c38:	addeadde 	.word	0xaddeadde
 8005c3c:	addeadde 	.word	0xaddeadde
 8005c40:	addeadde 	.word	0xaddeadde
 8005c44:	addeadde 	.word	0xaddeadde
 8005c48:	addeadde 	.word	0xaddeadde
 8005c4c:	addeadde 	.word	0xaddeadde
 8005c50:	addeadde 	.word	0xaddeadde
 8005c54:	addeadde 	.word	0xaddeadde
 8005c58:	addeadde 	.word	0xaddeadde
 8005c5c:	addeadde 	.word	0xaddeadde
 8005c60:	addeadde 	.word	0xaddeadde
 8005c64:	addeadde 	.word	0xaddeadde
 8005c68:	addeadde 	.word	0xaddeadde
 8005c6c:	addeadde 	.word	0xaddeadde
 8005c70:	addeadde 	.word	0xaddeadde
 8005c74:	addeadde 	.word	0xaddeadde
 8005c78:	addeadde 	.word	0xaddeadde
 8005c7c:	addeadde 	.word	0xaddeadde
 8005c80:	addeadde 	.word	0xaddeadde
 8005c84:	addeadde 	.word	0xaddeadde
 8005c88:	addeadde 	.word	0xaddeadde
 8005c8c:	addeadde 	.word	0xaddeadde
 8005c90:	addeadde 	.word	0xaddeadde
 8005c94:	addeadde 	.word	0xaddeadde
 8005c98:	addeadde 	.word	0xaddeadde
 8005c9c:	addeadde 	.word	0xaddeadde
 8005ca0:	addeadde 	.word	0xaddeadde
 8005ca4:	addeadde 	.word	0xaddeadde
 8005ca8:	addeadde 	.word	0xaddeadde
 8005cac:	addeadde 	.word	0xaddeadde
 8005cb0:	addeadde 	.word	0xaddeadde
 8005cb4:	addeadde 	.word	0xaddeadde
 8005cb8:	addeadde 	.word	0xaddeadde
 8005cbc:	addeadde 	.word	0xaddeadde
 8005cc0:	addeadde 	.word	0xaddeadde
 8005cc4:	addeadde 	.word	0xaddeadde
 8005cc8:	addeadde 	.word	0xaddeadde
 8005ccc:	addeadde 	.word	0xaddeadde
 8005cd0:	addeadde 	.word	0xaddeadde
 8005cd4:	addeadde 	.word	0xaddeadde
 8005cd8:	addeadde 	.word	0xaddeadde
 8005cdc:	addeadde 	.word	0xaddeadde
 8005ce0:	addeadde 	.word	0xaddeadde
 8005ce4:	addeadde 	.word	0xaddeadde
 8005ce8:	addeadde 	.word	0xaddeadde
 8005cec:	addeadde 	.word	0xaddeadde
 8005cf0:	addeadde 	.word	0xaddeadde
 8005cf4:	addeadde 	.word	0xaddeadde
 8005cf8:	addeadde 	.word	0xaddeadde
 8005cfc:	addeadde 	.word	0xaddeadde
 8005d00:	addeadde 	.word	0xaddeadde
 8005d04:	addeadde 	.word	0xaddeadde
 8005d08:	addeadde 	.word	0xaddeadde
 8005d0c:	addeadde 	.word	0xaddeadde
 8005d10:	addeadde 	.word	0xaddeadde
 8005d14:	addeadde 	.word	0xaddeadde
 8005d18:	addeadde 	.word	0xaddeadde
 8005d1c:	addeadde 	.word	0xaddeadde
 8005d20:	addeadde 	.word	0xaddeadde
 8005d24:	addeadde 	.word	0xaddeadde
 8005d28:	addeadde 	.word	0xaddeadde
 8005d2c:	addeadde 	.word	0xaddeadde
 8005d30:	addeadde 	.word	0xaddeadde
 8005d34:	addeadde 	.word	0xaddeadde
 8005d38:	addeadde 	.word	0xaddeadde
 8005d3c:	addeadde 	.word	0xaddeadde
 8005d40:	addeadde 	.word	0xaddeadde
 8005d44:	addeadde 	.word	0xaddeadde
 8005d48:	addeadde 	.word	0xaddeadde
 8005d4c:	addeadde 	.word	0xaddeadde
 8005d50:	addeadde 	.word	0xaddeadde
 8005d54:	addeadde 	.word	0xaddeadde
 8005d58:	addeadde 	.word	0xaddeadde
 8005d5c:	addeadde 	.word	0xaddeadde
 8005d60:	addeadde 	.word	0xaddeadde
 8005d64:	addeadde 	.word	0xaddeadde
 8005d68:	addeadde 	.word	0xaddeadde
 8005d6c:	addeadde 	.word	0xaddeadde
 8005d70:	addeadde 	.word	0xaddeadde
 8005d74:	addeadde 	.word	0xaddeadde
 8005d78:	addeadde 	.word	0xaddeadde
 8005d7c:	addeadde 	.word	0xaddeadde
 8005d80:	addeadde 	.word	0xaddeadde
 8005d84:	addeadde 	.word	0xaddeadde
 8005d88:	addeadde 	.word	0xaddeadde
 8005d8c:	addeadde 	.word	0xaddeadde
 8005d90:	addeadde 	.word	0xaddeadde
 8005d94:	addeadde 	.word	0xaddeadde
 8005d98:	addeadde 	.word	0xaddeadde
 8005d9c:	addeadde 	.word	0xaddeadde
 8005da0:	addeadde 	.word	0xaddeadde
 8005da4:	addeadde 	.word	0xaddeadde
 8005da8:	addeadde 	.word	0xaddeadde
 8005dac:	addeadde 	.word	0xaddeadde
 8005db0:	addeadde 	.word	0xaddeadde
 8005db4:	addeadde 	.word	0xaddeadde
 8005db8:	addeadde 	.word	0xaddeadde
 8005dbc:	addeadde 	.word	0xaddeadde
 8005dc0:	addeadde 	.word	0xaddeadde
 8005dc4:	addeadde 	.word	0xaddeadde
 8005dc8:	addeadde 	.word	0xaddeadde
 8005dcc:	addeadde 	.word	0xaddeadde
 8005dd0:	addeadde 	.word	0xaddeadde
 8005dd4:	addeadde 	.word	0xaddeadde
 8005dd8:	addeadde 	.word	0xaddeadde
 8005ddc:	addeadde 	.word	0xaddeadde
 8005de0:	addeadde 	.word	0xaddeadde
 8005de4:	addeadde 	.word	0xaddeadde
 8005de8:	addeadde 	.word	0xaddeadde
 8005dec:	addeadde 	.word	0xaddeadde
 8005df0:	addeadde 	.word	0xaddeadde
 8005df4:	addeadde 	.word	0xaddeadde
 8005df8:	addeadde 	.word	0xaddeadde
 8005dfc:	addeadde 	.word	0xaddeadde
 8005e00:	addeadde 	.word	0xaddeadde
 8005e04:	addeadde 	.word	0xaddeadde
 8005e08:	addeadde 	.word	0xaddeadde
 8005e0c:	addeadde 	.word	0xaddeadde
 8005e10:	addeadde 	.word	0xaddeadde
 8005e14:	addeadde 	.word	0xaddeadde
 8005e18:	addeadde 	.word	0xaddeadde
 8005e1c:	addeadde 	.word	0xaddeadde
 8005e20:	addeadde 	.word	0xaddeadde
 8005e24:	addeadde 	.word	0xaddeadde
 8005e28:	addeadde 	.word	0xaddeadde
 8005e2c:	addeadde 	.word	0xaddeadde
 8005e30:	addeadde 	.word	0xaddeadde
 8005e34:	addeadde 	.word	0xaddeadde
 8005e38:	addeadde 	.word	0xaddeadde
 8005e3c:	addeadde 	.word	0xaddeadde
 8005e40:	addeadde 	.word	0xaddeadde
 8005e44:	addeadde 	.word	0xaddeadde
 8005e48:	addeadde 	.word	0xaddeadde
 8005e4c:	addeadde 	.word	0xaddeadde
 8005e50:	addeadde 	.word	0xaddeadde
 8005e54:	addeadde 	.word	0xaddeadde
 8005e58:	addeadde 	.word	0xaddeadde
 8005e5c:	addeadde 	.word	0xaddeadde
 8005e60:	addeadde 	.word	0xaddeadde
 8005e64:	addeadde 	.word	0xaddeadde
 8005e68:	addeadde 	.word	0xaddeadde
 8005e6c:	addeadde 	.word	0xaddeadde
 8005e70:	addeadde 	.word	0xaddeadde
 8005e74:	addeadde 	.word	0xaddeadde
 8005e78:	addeadde 	.word	0xaddeadde
 8005e7c:	addeadde 	.word	0xaddeadde
 8005e80:	addeadde 	.word	0xaddeadde
 8005e84:	addeadde 	.word	0xaddeadde
 8005e88:	addeadde 	.word	0xaddeadde
 8005e8c:	addeadde 	.word	0xaddeadde
 8005e90:	addeadde 	.word	0xaddeadde
 8005e94:	addeadde 	.word	0xaddeadde
 8005e98:	addeadde 	.word	0xaddeadde
 8005e9c:	addeadde 	.word	0xaddeadde
 8005ea0:	addeadde 	.word	0xaddeadde
 8005ea4:	addeadde 	.word	0xaddeadde
 8005ea8:	addeadde 	.word	0xaddeadde
 8005eac:	addeadde 	.word	0xaddeadde
 8005eb0:	addeadde 	.word	0xaddeadde
 8005eb4:	addeadde 	.word	0xaddeadde
 8005eb8:	addeadde 	.word	0xaddeadde
 8005ebc:	addeadde 	.word	0xaddeadde
 8005ec0:	addeadde 	.word	0xaddeadde
 8005ec4:	addeadde 	.word	0xaddeadde
 8005ec8:	addeadde 	.word	0xaddeadde
 8005ecc:	addeadde 	.word	0xaddeadde
 8005ed0:	addeadde 	.word	0xaddeadde
 8005ed4:	addeadde 	.word	0xaddeadde
 8005ed8:	addeadde 	.word	0xaddeadde
 8005edc:	addeadde 	.word	0xaddeadde
 8005ee0:	addeadde 	.word	0xaddeadde
 8005ee4:	addeadde 	.word	0xaddeadde
 8005ee8:	addeadde 	.word	0xaddeadde
 8005eec:	addeadde 	.word	0xaddeadde
 8005ef0:	addeadde 	.word	0xaddeadde
 8005ef4:	addeadde 	.word	0xaddeadde
 8005ef8:	addeadde 	.word	0xaddeadde
 8005efc:	addeadde 	.word	0xaddeadde
 8005f00:	addeadde 	.word	0xaddeadde
 8005f04:	addeadde 	.word	0xaddeadde
 8005f08:	addeadde 	.word	0xaddeadde
 8005f0c:	addeadde 	.word	0xaddeadde
 8005f10:	addeadde 	.word	0xaddeadde
 8005f14:	addeadde 	.word	0xaddeadde
 8005f18:	addeadde 	.word	0xaddeadde
 8005f1c:	addeadde 	.word	0xaddeadde
 8005f20:	addeadde 	.word	0xaddeadde
 8005f24:	addeadde 	.word	0xaddeadde
 8005f28:	addeadde 	.word	0xaddeadde
 8005f2c:	addeadde 	.word	0xaddeadde
 8005f30:	addeadde 	.word	0xaddeadde
 8005f34:	addeadde 	.word	0xaddeadde
 8005f38:	addeadde 	.word	0xaddeadde
 8005f3c:	addeadde 	.word	0xaddeadde
 8005f40:	addeadde 	.word	0xaddeadde
 8005f44:	addeadde 	.word	0xaddeadde
 8005f48:	addeadde 	.word	0xaddeadde
 8005f4c:	addeadde 	.word	0xaddeadde
 8005f50:	addeadde 	.word	0xaddeadde
 8005f54:	addeadde 	.word	0xaddeadde
 8005f58:	addeadde 	.word	0xaddeadde
 8005f5c:	addeadde 	.word	0xaddeadde
 8005f60:	addeadde 	.word	0xaddeadde
 8005f64:	addeadde 	.word	0xaddeadde
 8005f68:	addeadde 	.word	0xaddeadde
 8005f6c:	addeadde 	.word	0xaddeadde
 8005f70:	addeadde 	.word	0xaddeadde
 8005f74:	addeadde 	.word	0xaddeadde
 8005f78:	addeadde 	.word	0xaddeadde
 8005f7c:	addeadde 	.word	0xaddeadde
 8005f80:	addeadde 	.word	0xaddeadde
 8005f84:	addeadde 	.word	0xaddeadde
 8005f88:	addeadde 	.word	0xaddeadde
 8005f8c:	addeadde 	.word	0xaddeadde
 8005f90:	addeadde 	.word	0xaddeadde
 8005f94:	addeadde 	.word	0xaddeadde
 8005f98:	addeadde 	.word	0xaddeadde
 8005f9c:	addeadde 	.word	0xaddeadde
 8005fa0:	addeadde 	.word	0xaddeadde
 8005fa4:	addeadde 	.word	0xaddeadde
 8005fa8:	addeadde 	.word	0xaddeadde
 8005fac:	addeadde 	.word	0xaddeadde
 8005fb0:	addeadde 	.word	0xaddeadde
 8005fb4:	addeadde 	.word	0xaddeadde
 8005fb8:	addeadde 	.word	0xaddeadde
 8005fbc:	addeadde 	.word	0xaddeadde
 8005fc0:	addeadde 	.word	0xaddeadde
 8005fc4:	addeadde 	.word	0xaddeadde
 8005fc8:	addeadde 	.word	0xaddeadde
 8005fcc:	addeadde 	.word	0xaddeadde
 8005fd0:	addeadde 	.word	0xaddeadde
 8005fd4:	addeadde 	.word	0xaddeadde
 8005fd8:	addeadde 	.word	0xaddeadde
 8005fdc:	addeadde 	.word	0xaddeadde
 8005fe0:	addeadde 	.word	0xaddeadde
 8005fe4:	addeadde 	.word	0xaddeadde
 8005fe8:	addeadde 	.word	0xaddeadde
 8005fec:	addeadde 	.word	0xaddeadde
 8005ff0:	addeadde 	.word	0xaddeadde
 8005ff4:	addeadde 	.word	0xaddeadde
 8005ff8:	addeadde 	.word	0xaddeadde
 8005ffc:	addeadde 	.word	0xaddeadde
 8006000:	addeadde 	.word	0xaddeadde
 8006004:	addeadde 	.word	0xaddeadde
 8006008:	addeadde 	.word	0xaddeadde
 800600c:	addeadde 	.word	0xaddeadde
 8006010:	addeadde 	.word	0xaddeadde
 8006014:	addeadde 	.word	0xaddeadde
 8006018:	addeadde 	.word	0xaddeadde
 800601c:	addeadde 	.word	0xaddeadde
 8006020:	addeadde 	.word	0xaddeadde
 8006024:	addeadde 	.word	0xaddeadde
 8006028:	addeadde 	.word	0xaddeadde
 800602c:	addeadde 	.word	0xaddeadde
 8006030:	addeadde 	.word	0xaddeadde
 8006034:	addeadde 	.word	0xaddeadde
 8006038:	addeadde 	.word	0xaddeadde
 800603c:	addeadde 	.word	0xaddeadde
 8006040:	addeadde 	.word	0xaddeadde
 8006044:	addeadde 	.word	0xaddeadde
 8006048:	addeadde 	.word	0xaddeadde
 800604c:	addeadde 	.word	0xaddeadde
 8006050:	addeadde 	.word	0xaddeadde
 8006054:	addeadde 	.word	0xaddeadde
 8006058:	addeadde 	.word	0xaddeadde
 800605c:	addeadde 	.word	0xaddeadde
 8006060:	addeadde 	.word	0xaddeadde
 8006064:	addeadde 	.word	0xaddeadde
 8006068:	addeadde 	.word	0xaddeadde
 800606c:	addeadde 	.word	0xaddeadde
 8006070:	addeadde 	.word	0xaddeadde
 8006074:	addeadde 	.word	0xaddeadde
 8006078:	addeadde 	.word	0xaddeadde
 800607c:	addeadde 	.word	0xaddeadde
 8006080:	addeadde 	.word	0xaddeadde
 8006084:	addeadde 	.word	0xaddeadde
 8006088:	addeadde 	.word	0xaddeadde
 800608c:	addeadde 	.word	0xaddeadde
 8006090:	addeadde 	.word	0xaddeadde
 8006094:	addeadde 	.word	0xaddeadde
 8006098:	addeadde 	.word	0xaddeadde
 800609c:	addeadde 	.word	0xaddeadde
 80060a0:	addeadde 	.word	0xaddeadde
 80060a4:	addeadde 	.word	0xaddeadde
 80060a8:	addeadde 	.word	0xaddeadde
 80060ac:	addeadde 	.word	0xaddeadde
 80060b0:	addeadde 	.word	0xaddeadde
 80060b4:	addeadde 	.word	0xaddeadde
 80060b8:	addeadde 	.word	0xaddeadde
 80060bc:	addeadde 	.word	0xaddeadde
 80060c0:	addeadde 	.word	0xaddeadde
 80060c4:	addeadde 	.word	0xaddeadde
 80060c8:	addeadde 	.word	0xaddeadde
 80060cc:	addeadde 	.word	0xaddeadde
 80060d0:	addeadde 	.word	0xaddeadde
 80060d4:	addeadde 	.word	0xaddeadde
 80060d8:	addeadde 	.word	0xaddeadde
 80060dc:	addeadde 	.word	0xaddeadde
 80060e0:	addeadde 	.word	0xaddeadde
 80060e4:	addeadde 	.word	0xaddeadde
 80060e8:	addeadde 	.word	0xaddeadde
 80060ec:	addeadde 	.word	0xaddeadde
 80060f0:	addeadde 	.word	0xaddeadde
 80060f4:	addeadde 	.word	0xaddeadde
 80060f8:	addeadde 	.word	0xaddeadde
 80060fc:	addeadde 	.word	0xaddeadde
 8006100:	addeadde 	.word	0xaddeadde
 8006104:	addeadde 	.word	0xaddeadde
 8006108:	addeadde 	.word	0xaddeadde
 800610c:	addeadde 	.word	0xaddeadde
 8006110:	addeadde 	.word	0xaddeadde
 8006114:	addeadde 	.word	0xaddeadde
 8006118:	addeadde 	.word	0xaddeadde
 800611c:	addeadde 	.word	0xaddeadde
 8006120:	addeadde 	.word	0xaddeadde
 8006124:	addeadde 	.word	0xaddeadde
 8006128:	addeadde 	.word	0xaddeadde
 800612c:	addeadde 	.word	0xaddeadde
 8006130:	addeadde 	.word	0xaddeadde
 8006134:	addeadde 	.word	0xaddeadde
 8006138:	addeadde 	.word	0xaddeadde
 800613c:	addeadde 	.word	0xaddeadde
 8006140:	addeadde 	.word	0xaddeadde
 8006144:	addeadde 	.word	0xaddeadde
 8006148:	addeadde 	.word	0xaddeadde
 800614c:	addeadde 	.word	0xaddeadde
 8006150:	addeadde 	.word	0xaddeadde
 8006154:	addeadde 	.word	0xaddeadde
 8006158:	addeadde 	.word	0xaddeadde
 800615c:	addeadde 	.word	0xaddeadde
 8006160:	addeadde 	.word	0xaddeadde
 8006164:	addeadde 	.word	0xaddeadde
 8006168:	addeadde 	.word	0xaddeadde
 800616c:	addeadde 	.word	0xaddeadde
 8006170:	addeadde 	.word	0xaddeadde
 8006174:	addeadde 	.word	0xaddeadde
 8006178:	addeadde 	.word	0xaddeadde
 800617c:	addeadde 	.word	0xaddeadde
 8006180:	addeadde 	.word	0xaddeadde
 8006184:	addeadde 	.word	0xaddeadde
 8006188:	addeadde 	.word	0xaddeadde
 800618c:	addeadde 	.word	0xaddeadde
 8006190:	addeadde 	.word	0xaddeadde
 8006194:	addeadde 	.word	0xaddeadde
 8006198:	addeadde 	.word	0xaddeadde
 800619c:	addeadde 	.word	0xaddeadde
 80061a0:	addeadde 	.word	0xaddeadde
 80061a4:	addeadde 	.word	0xaddeadde
 80061a8:	addeadde 	.word	0xaddeadde
 80061ac:	addeadde 	.word	0xaddeadde
 80061b0:	addeadde 	.word	0xaddeadde
 80061b4:	addeadde 	.word	0xaddeadde
 80061b8:	addeadde 	.word	0xaddeadde
 80061bc:	addeadde 	.word	0xaddeadde
 80061c0:	addeadde 	.word	0xaddeadde
 80061c4:	addeadde 	.word	0xaddeadde
 80061c8:	addeadde 	.word	0xaddeadde
 80061cc:	addeadde 	.word	0xaddeadde
 80061d0:	addeadde 	.word	0xaddeadde
 80061d4:	addeadde 	.word	0xaddeadde
 80061d8:	addeadde 	.word	0xaddeadde
 80061dc:	addeadde 	.word	0xaddeadde
 80061e0:	addeadde 	.word	0xaddeadde
 80061e4:	addeadde 	.word	0xaddeadde
 80061e8:	addeadde 	.word	0xaddeadde
 80061ec:	addeadde 	.word	0xaddeadde
 80061f0:	addeadde 	.word	0xaddeadde
 80061f4:	addeadde 	.word	0xaddeadde
 80061f8:	addeadde 	.word	0xaddeadde
 80061fc:	addeadde 	.word	0xaddeadde
 8006200:	addeadde 	.word	0xaddeadde
 8006204:	addeadde 	.word	0xaddeadde
 8006208:	addeadde 	.word	0xaddeadde
 800620c:	addeadde 	.word	0xaddeadde
 8006210:	addeadde 	.word	0xaddeadde
 8006214:	addeadde 	.word	0xaddeadde
 8006218:	addeadde 	.word	0xaddeadde
 800621c:	addeadde 	.word	0xaddeadde
 8006220:	addeadde 	.word	0xaddeadde
 8006224:	addeadde 	.word	0xaddeadde
 8006228:	addeadde 	.word	0xaddeadde
 800622c:	addeadde 	.word	0xaddeadde
 8006230:	addeadde 	.word	0xaddeadde
 8006234:	addeadde 	.word	0xaddeadde
 8006238:	addeadde 	.word	0xaddeadde
 800623c:	addeadde 	.word	0xaddeadde
 8006240:	addeadde 	.word	0xaddeadde
 8006244:	addeadde 	.word	0xaddeadde
 8006248:	addeadde 	.word	0xaddeadde
 800624c:	addeadde 	.word	0xaddeadde
 8006250:	addeadde 	.word	0xaddeadde
 8006254:	addeadde 	.word	0xaddeadde
 8006258:	addeadde 	.word	0xaddeadde
 800625c:	addeadde 	.word	0xaddeadde
 8006260:	addeadde 	.word	0xaddeadde
 8006264:	addeadde 	.word	0xaddeadde
 8006268:	addeadde 	.word	0xaddeadde
 800626c:	addeadde 	.word	0xaddeadde
 8006270:	addeadde 	.word	0xaddeadde
 8006274:	addeadde 	.word	0xaddeadde
 8006278:	addeadde 	.word	0xaddeadde
 800627c:	addeadde 	.word	0xaddeadde
 8006280:	addeadde 	.word	0xaddeadde
 8006284:	addeadde 	.word	0xaddeadde
 8006288:	addeadde 	.word	0xaddeadde
 800628c:	addeadde 	.word	0xaddeadde
 8006290:	addeadde 	.word	0xaddeadde
 8006294:	addeadde 	.word	0xaddeadde
 8006298:	addeadde 	.word	0xaddeadde
 800629c:	addeadde 	.word	0xaddeadde
 80062a0:	addeadde 	.word	0xaddeadde
 80062a4:	addeadde 	.word	0xaddeadde
 80062a8:	addeadde 	.word	0xaddeadde
 80062ac:	addeadde 	.word	0xaddeadde
 80062b0:	addeadde 	.word	0xaddeadde
 80062b4:	addeadde 	.word	0xaddeadde
 80062b8:	addeadde 	.word	0xaddeadde
 80062bc:	addeadde 	.word	0xaddeadde
 80062c0:	addeadde 	.word	0xaddeadde
 80062c4:	addeadde 	.word	0xaddeadde
 80062c8:	addeadde 	.word	0xaddeadde
 80062cc:	addeadde 	.word	0xaddeadde
 80062d0:	addeadde 	.word	0xaddeadde
 80062d4:	addeadde 	.word	0xaddeadde
 80062d8:	addeadde 	.word	0xaddeadde
 80062dc:	addeadde 	.word	0xaddeadde
 80062e0:	addeadde 	.word	0xaddeadde
 80062e4:	addeadde 	.word	0xaddeadde
 80062e8:	addeadde 	.word	0xaddeadde
 80062ec:	addeadde 	.word	0xaddeadde
 80062f0:	addeadde 	.word	0xaddeadde
 80062f4:	addeadde 	.word	0xaddeadde
 80062f8:	addeadde 	.word	0xaddeadde
 80062fc:	addeadde 	.word	0xaddeadde
 8006300:	addeadde 	.word	0xaddeadde
 8006304:	addeadde 	.word	0xaddeadde
 8006308:	addeadde 	.word	0xaddeadde
 800630c:	addeadde 	.word	0xaddeadde
 8006310:	addeadde 	.word	0xaddeadde
 8006314:	addeadde 	.word	0xaddeadde
 8006318:	addeadde 	.word	0xaddeadde
 800631c:	addeadde 	.word	0xaddeadde
 8006320:	addeadde 	.word	0xaddeadde
 8006324:	addeadde 	.word	0xaddeadde
 8006328:	addeadde 	.word	0xaddeadde
 800632c:	addeadde 	.word	0xaddeadde
 8006330:	addeadde 	.word	0xaddeadde
 8006334:	addeadde 	.word	0xaddeadde
 8006338:	addeadde 	.word	0xaddeadde
 800633c:	addeadde 	.word	0xaddeadde
 8006340:	addeadde 	.word	0xaddeadde
 8006344:	addeadde 	.word	0xaddeadde
 8006348:	addeadde 	.word	0xaddeadde
 800634c:	addeadde 	.word	0xaddeadde
 8006350:	addeadde 	.word	0xaddeadde
 8006354:	addeadde 	.word	0xaddeadde
 8006358:	addeadde 	.word	0xaddeadde
 800635c:	addeadde 	.word	0xaddeadde
 8006360:	addeadde 	.word	0xaddeadde
 8006364:	addeadde 	.word	0xaddeadde
 8006368:	addeadde 	.word	0xaddeadde
 800636c:	addeadde 	.word	0xaddeadde
 8006370:	addeadde 	.word	0xaddeadde
 8006374:	addeadde 	.word	0xaddeadde
 8006378:	addeadde 	.word	0xaddeadde
 800637c:	addeadde 	.word	0xaddeadde
 8006380:	addeadde 	.word	0xaddeadde
 8006384:	addeadde 	.word	0xaddeadde
 8006388:	addeadde 	.word	0xaddeadde
 800638c:	addeadde 	.word	0xaddeadde
 8006390:	addeadde 	.word	0xaddeadde
 8006394:	addeadde 	.word	0xaddeadde
 8006398:	addeadde 	.word	0xaddeadde
 800639c:	addeadde 	.word	0xaddeadde
 80063a0:	addeadde 	.word	0xaddeadde
 80063a4:	addeadde 	.word	0xaddeadde
 80063a8:	addeadde 	.word	0xaddeadde
 80063ac:	addeadde 	.word	0xaddeadde
 80063b0:	addeadde 	.word	0xaddeadde
 80063b4:	addeadde 	.word	0xaddeadde
 80063b8:	addeadde 	.word	0xaddeadde
 80063bc:	addeadde 	.word	0xaddeadde
 80063c0:	addeadde 	.word	0xaddeadde
 80063c4:	addeadde 	.word	0xaddeadde
 80063c8:	addeadde 	.word	0xaddeadde
 80063cc:	addeadde 	.word	0xaddeadde
 80063d0:	addeadde 	.word	0xaddeadde
 80063d4:	addeadde 	.word	0xaddeadde
 80063d8:	addeadde 	.word	0xaddeadde
 80063dc:	addeadde 	.word	0xaddeadde
 80063e0:	addeadde 	.word	0xaddeadde
 80063e4:	addeadde 	.word	0xaddeadde
 80063e8:	addeadde 	.word	0xaddeadde
 80063ec:	addeadde 	.word	0xaddeadde
 80063f0:	addeadde 	.word	0xaddeadde
 80063f4:	addeadde 	.word	0xaddeadde
 80063f8:	addeadde 	.word	0xaddeadde
 80063fc:	addeadde 	.word	0xaddeadde
 8006400:	addeadde 	.word	0xaddeadde
 8006404:	addeadde 	.word	0xaddeadde
 8006408:	addeadde 	.word	0xaddeadde
 800640c:	addeadde 	.word	0xaddeadde
 8006410:	addeadde 	.word	0xaddeadde
 8006414:	addeadde 	.word	0xaddeadde
 8006418:	addeadde 	.word	0xaddeadde
 800641c:	addeadde 	.word	0xaddeadde
 8006420:	addeadde 	.word	0xaddeadde
 8006424:	addeadde 	.word	0xaddeadde
 8006428:	addeadde 	.word	0xaddeadde
 800642c:	addeadde 	.word	0xaddeadde
 8006430:	addeadde 	.word	0xaddeadde
 8006434:	addeadde 	.word	0xaddeadde
 8006438:	addeadde 	.word	0xaddeadde
 800643c:	addeadde 	.word	0xaddeadde
 8006440:	addeadde 	.word	0xaddeadde
 8006444:	addeadde 	.word	0xaddeadde
 8006448:	addeadde 	.word	0xaddeadde
 800644c:	addeadde 	.word	0xaddeadde
 8006450:	addeadde 	.word	0xaddeadde
 8006454:	addeadde 	.word	0xaddeadde
 8006458:	addeadde 	.word	0xaddeadde
 800645c:	addeadde 	.word	0xaddeadde
 8006460:	addeadde 	.word	0xaddeadde
 8006464:	addeadde 	.word	0xaddeadde
 8006468:	addeadde 	.word	0xaddeadde
 800646c:	addeadde 	.word	0xaddeadde
 8006470:	addeadde 	.word	0xaddeadde
 8006474:	addeadde 	.word	0xaddeadde
 8006478:	addeadde 	.word	0xaddeadde
 800647c:	addeadde 	.word	0xaddeadde
 8006480:	addeadde 	.word	0xaddeadde
 8006484:	addeadde 	.word	0xaddeadde
 8006488:	addeadde 	.word	0xaddeadde
 800648c:	addeadde 	.word	0xaddeadde
 8006490:	addeadde 	.word	0xaddeadde
 8006494:	addeadde 	.word	0xaddeadde
 8006498:	addeadde 	.word	0xaddeadde
 800649c:	addeadde 	.word	0xaddeadde
 80064a0:	addeadde 	.word	0xaddeadde
 80064a4:	addeadde 	.word	0xaddeadde
 80064a8:	addeadde 	.word	0xaddeadde
 80064ac:	addeadde 	.word	0xaddeadde
 80064b0:	addeadde 	.word	0xaddeadde
 80064b4:	addeadde 	.word	0xaddeadde
 80064b8:	addeadde 	.word	0xaddeadde
 80064bc:	addeadde 	.word	0xaddeadde
 80064c0:	addeadde 	.word	0xaddeadde
 80064c4:	addeadde 	.word	0xaddeadde
 80064c8:	addeadde 	.word	0xaddeadde
 80064cc:	addeadde 	.word	0xaddeadde
 80064d0:	addeadde 	.word	0xaddeadde
 80064d4:	addeadde 	.word	0xaddeadde
 80064d8:	addeadde 	.word	0xaddeadde
 80064dc:	addeadde 	.word	0xaddeadde
 80064e0:	addeadde 	.word	0xaddeadde
 80064e4:	addeadde 	.word	0xaddeadde
 80064e8:	addeadde 	.word	0xaddeadde
 80064ec:	addeadde 	.word	0xaddeadde
 80064f0:	addeadde 	.word	0xaddeadde
 80064f4:	addeadde 	.word	0xaddeadde
 80064f8:	addeadde 	.word	0xaddeadde
 80064fc:	addeadde 	.word	0xaddeadde
 8006500:	addeadde 	.word	0xaddeadde
 8006504:	addeadde 	.word	0xaddeadde
 8006508:	addeadde 	.word	0xaddeadde
 800650c:	addeadde 	.word	0xaddeadde
 8006510:	addeadde 	.word	0xaddeadde
 8006514:	addeadde 	.word	0xaddeadde
 8006518:	addeadde 	.word	0xaddeadde
 800651c:	addeadde 	.word	0xaddeadde
 8006520:	addeadde 	.word	0xaddeadde
 8006524:	addeadde 	.word	0xaddeadde
 8006528:	addeadde 	.word	0xaddeadde
 800652c:	addeadde 	.word	0xaddeadde
 8006530:	addeadde 	.word	0xaddeadde
 8006534:	addeadde 	.word	0xaddeadde
 8006538:	addeadde 	.word	0xaddeadde
 800653c:	addeadde 	.word	0xaddeadde
 8006540:	addeadde 	.word	0xaddeadde
 8006544:	addeadde 	.word	0xaddeadde
 8006548:	addeadde 	.word	0xaddeadde
 800654c:	addeadde 	.word	0xaddeadde
 8006550:	addeadde 	.word	0xaddeadde
 8006554:	addeadde 	.word	0xaddeadde
 8006558:	addeadde 	.word	0xaddeadde
 800655c:	addeadde 	.word	0xaddeadde
 8006560:	addeadde 	.word	0xaddeadde
 8006564:	addeadde 	.word	0xaddeadde
 8006568:	addeadde 	.word	0xaddeadde
 800656c:	addeadde 	.word	0xaddeadde
 8006570:	addeadde 	.word	0xaddeadde
 8006574:	addeadde 	.word	0xaddeadde
 8006578:	addeadde 	.word	0xaddeadde
 800657c:	addeadde 	.word	0xaddeadde
 8006580:	addeadde 	.word	0xaddeadde
 8006584:	addeadde 	.word	0xaddeadde
 8006588:	addeadde 	.word	0xaddeadde
 800658c:	addeadde 	.word	0xaddeadde
 8006590:	addeadde 	.word	0xaddeadde
 8006594:	addeadde 	.word	0xaddeadde
 8006598:	addeadde 	.word	0xaddeadde
 800659c:	addeadde 	.word	0xaddeadde
 80065a0:	addeadde 	.word	0xaddeadde
 80065a4:	addeadde 	.word	0xaddeadde
 80065a8:	addeadde 	.word	0xaddeadde
 80065ac:	addeadde 	.word	0xaddeadde
 80065b0:	addeadde 	.word	0xaddeadde
 80065b4:	addeadde 	.word	0xaddeadde
 80065b8:	addeadde 	.word	0xaddeadde
 80065bc:	addeadde 	.word	0xaddeadde
 80065c0:	addeadde 	.word	0xaddeadde
 80065c4:	addeadde 	.word	0xaddeadde
 80065c8:	addeadde 	.word	0xaddeadde
 80065cc:	addeadde 	.word	0xaddeadde
 80065d0:	addeadde 	.word	0xaddeadde
 80065d4:	addeadde 	.word	0xaddeadde
 80065d8:	addeadde 	.word	0xaddeadde
 80065dc:	addeadde 	.word	0xaddeadde
 80065e0:	addeadde 	.word	0xaddeadde
 80065e4:	addeadde 	.word	0xaddeadde
 80065e8:	addeadde 	.word	0xaddeadde
 80065ec:	addeadde 	.word	0xaddeadde
 80065f0:	addeadde 	.word	0xaddeadde
 80065f4:	addeadde 	.word	0xaddeadde
 80065f8:	addeadde 	.word	0xaddeadde
 80065fc:	addeadde 	.word	0xaddeadde
 8006600:	addeadde 	.word	0xaddeadde
 8006604:	addeadde 	.word	0xaddeadde
 8006608:	addeadde 	.word	0xaddeadde
 800660c:	addeadde 	.word	0xaddeadde
 8006610:	addeadde 	.word	0xaddeadde
 8006614:	addeadde 	.word	0xaddeadde
 8006618:	addeadde 	.word	0xaddeadde
 800661c:	addeadde 	.word	0xaddeadde
 8006620:	addeadde 	.word	0xaddeadde
 8006624:	addeadde 	.word	0xaddeadde
 8006628:	addeadde 	.word	0xaddeadde
 800662c:	addeadde 	.word	0xaddeadde
 8006630:	addeadde 	.word	0xaddeadde
 8006634:	addeadde 	.word	0xaddeadde
 8006638:	addeadde 	.word	0xaddeadde
 800663c:	addeadde 	.word	0xaddeadde
 8006640:	addeadde 	.word	0xaddeadde
 8006644:	addeadde 	.word	0xaddeadde
 8006648:	addeadde 	.word	0xaddeadde
 800664c:	addeadde 	.word	0xaddeadde
 8006650:	addeadde 	.word	0xaddeadde
 8006654:	addeadde 	.word	0xaddeadde
 8006658:	addeadde 	.word	0xaddeadde
 800665c:	addeadde 	.word	0xaddeadde
 8006660:	addeadde 	.word	0xaddeadde
 8006664:	addeadde 	.word	0xaddeadde
 8006668:	addeadde 	.word	0xaddeadde
 800666c:	addeadde 	.word	0xaddeadde
 8006670:	addeadde 	.word	0xaddeadde
 8006674:	addeadde 	.word	0xaddeadde
 8006678:	addeadde 	.word	0xaddeadde
 800667c:	addeadde 	.word	0xaddeadde
 8006680:	addeadde 	.word	0xaddeadde
 8006684:	addeadde 	.word	0xaddeadde
 8006688:	addeadde 	.word	0xaddeadde
 800668c:	addeadde 	.word	0xaddeadde
 8006690:	addeadde 	.word	0xaddeadde
 8006694:	addeadde 	.word	0xaddeadde
 8006698:	addeadde 	.word	0xaddeadde
 800669c:	addeadde 	.word	0xaddeadde
 80066a0:	addeadde 	.word	0xaddeadde
 80066a4:	addeadde 	.word	0xaddeadde
 80066a8:	addeadde 	.word	0xaddeadde
 80066ac:	addeadde 	.word	0xaddeadde
 80066b0:	addeadde 	.word	0xaddeadde
 80066b4:	addeadde 	.word	0xaddeadde
 80066b8:	addeadde 	.word	0xaddeadde
 80066bc:	addeadde 	.word	0xaddeadde
 80066c0:	addeadde 	.word	0xaddeadde
 80066c4:	addeadde 	.word	0xaddeadde
 80066c8:	addeadde 	.word	0xaddeadde
 80066cc:	addeadde 	.word	0xaddeadde
 80066d0:	addeadde 	.word	0xaddeadde
 80066d4:	addeadde 	.word	0xaddeadde
 80066d8:	addeadde 	.word	0xaddeadde
 80066dc:	addeadde 	.word	0xaddeadde
 80066e0:	addeadde 	.word	0xaddeadde
 80066e4:	addeadde 	.word	0xaddeadde
 80066e8:	addeadde 	.word	0xaddeadde
 80066ec:	addeadde 	.word	0xaddeadde
 80066f0:	addeadde 	.word	0xaddeadde
 80066f4:	addeadde 	.word	0xaddeadde
 80066f8:	addeadde 	.word	0xaddeadde
 80066fc:	addeadde 	.word	0xaddeadde
 8006700:	addeadde 	.word	0xaddeadde
 8006704:	addeadde 	.word	0xaddeadde
 8006708:	addeadde 	.word	0xaddeadde
 800670c:	addeadde 	.word	0xaddeadde
 8006710:	addeadde 	.word	0xaddeadde
 8006714:	addeadde 	.word	0xaddeadde
 8006718:	addeadde 	.word	0xaddeadde
 800671c:	addeadde 	.word	0xaddeadde
 8006720:	addeadde 	.word	0xaddeadde
 8006724:	addeadde 	.word	0xaddeadde
 8006728:	addeadde 	.word	0xaddeadde
 800672c:	addeadde 	.word	0xaddeadde
 8006730:	addeadde 	.word	0xaddeadde
 8006734:	addeadde 	.word	0xaddeadde
 8006738:	addeadde 	.word	0xaddeadde
 800673c:	addeadde 	.word	0xaddeadde
 8006740:	addeadde 	.word	0xaddeadde
 8006744:	addeadde 	.word	0xaddeadde
 8006748:	addeadde 	.word	0xaddeadde
 800674c:	addeadde 	.word	0xaddeadde
 8006750:	addeadde 	.word	0xaddeadde
 8006754:	addeadde 	.word	0xaddeadde
 8006758:	addeadde 	.word	0xaddeadde
 800675c:	addeadde 	.word	0xaddeadde
 8006760:	addeadde 	.word	0xaddeadde
 8006764:	addeadde 	.word	0xaddeadde
 8006768:	addeadde 	.word	0xaddeadde
 800676c:	addeadde 	.word	0xaddeadde
 8006770:	addeadde 	.word	0xaddeadde
 8006774:	addeadde 	.word	0xaddeadde
 8006778:	addeadde 	.word	0xaddeadde
 800677c:	addeadde 	.word	0xaddeadde
 8006780:	addeadde 	.word	0xaddeadde
 8006784:	addeadde 	.word	0xaddeadde
 8006788:	addeadde 	.word	0xaddeadde
 800678c:	addeadde 	.word	0xaddeadde
 8006790:	addeadde 	.word	0xaddeadde
 8006794:	addeadde 	.word	0xaddeadde
 8006798:	addeadde 	.word	0xaddeadde
 800679c:	addeadde 	.word	0xaddeadde
 80067a0:	addeadde 	.word	0xaddeadde
 80067a4:	addeadde 	.word	0xaddeadde
 80067a8:	addeadde 	.word	0xaddeadde
 80067ac:	addeadde 	.word	0xaddeadde
 80067b0:	addeadde 	.word	0xaddeadde
 80067b4:	addeadde 	.word	0xaddeadde
 80067b8:	addeadde 	.word	0xaddeadde
 80067bc:	addeadde 	.word	0xaddeadde
 80067c0:	addeadde 	.word	0xaddeadde
 80067c4:	addeadde 	.word	0xaddeadde
 80067c8:	addeadde 	.word	0xaddeadde
 80067cc:	addeadde 	.word	0xaddeadde
 80067d0:	addeadde 	.word	0xaddeadde
 80067d4:	addeadde 	.word	0xaddeadde
 80067d8:	addeadde 	.word	0xaddeadde
 80067dc:	addeadde 	.word	0xaddeadde
 80067e0:	addeadde 	.word	0xaddeadde
 80067e4:	addeadde 	.word	0xaddeadde
 80067e8:	addeadde 	.word	0xaddeadde
 80067ec:	addeadde 	.word	0xaddeadde
 80067f0:	addeadde 	.word	0xaddeadde
 80067f4:	addeadde 	.word	0xaddeadde
 80067f8:	addeadde 	.word	0xaddeadde
 80067fc:	addeadde 	.word	0xaddeadde
 8006800:	addeadde 	.word	0xaddeadde
 8006804:	addeadde 	.word	0xaddeadde
 8006808:	addeadde 	.word	0xaddeadde
 800680c:	addeadde 	.word	0xaddeadde
 8006810:	addeadde 	.word	0xaddeadde
 8006814:	addeadde 	.word	0xaddeadde
 8006818:	addeadde 	.word	0xaddeadde
 800681c:	addeadde 	.word	0xaddeadde
 8006820:	addeadde 	.word	0xaddeadde
 8006824:	addeadde 	.word	0xaddeadde
 8006828:	addeadde 	.word	0xaddeadde
 800682c:	addeadde 	.word	0xaddeadde
 8006830:	addeadde 	.word	0xaddeadde
 8006834:	addeadde 	.word	0xaddeadde
 8006838:	addeadde 	.word	0xaddeadde
 800683c:	addeadde 	.word	0xaddeadde
 8006840:	addeadde 	.word	0xaddeadde
 8006844:	addeadde 	.word	0xaddeadde
 8006848:	addeadde 	.word	0xaddeadde
 800684c:	addeadde 	.word	0xaddeadde
 8006850:	addeadde 	.word	0xaddeadde
 8006854:	addeadde 	.word	0xaddeadde
 8006858:	addeadde 	.word	0xaddeadde
 800685c:	addeadde 	.word	0xaddeadde
 8006860:	addeadde 	.word	0xaddeadde
 8006864:	addeadde 	.word	0xaddeadde
 8006868:	addeadde 	.word	0xaddeadde
 800686c:	addeadde 	.word	0xaddeadde
 8006870:	addeadde 	.word	0xaddeadde
 8006874:	addeadde 	.word	0xaddeadde
 8006878:	addeadde 	.word	0xaddeadde
 800687c:	addeadde 	.word	0xaddeadde
 8006880:	addeadde 	.word	0xaddeadde
 8006884:	addeadde 	.word	0xaddeadde
 8006888:	addeadde 	.word	0xaddeadde
 800688c:	addeadde 	.word	0xaddeadde
 8006890:	addeadde 	.word	0xaddeadde
 8006894:	addeadde 	.word	0xaddeadde
 8006898:	addeadde 	.word	0xaddeadde
 800689c:	addeadde 	.word	0xaddeadde
 80068a0:	addeadde 	.word	0xaddeadde
 80068a4:	addeadde 	.word	0xaddeadde
 80068a8:	addeadde 	.word	0xaddeadde
 80068ac:	addeadde 	.word	0xaddeadde
 80068b0:	addeadde 	.word	0xaddeadde
 80068b4:	addeadde 	.word	0xaddeadde
 80068b8:	addeadde 	.word	0xaddeadde
 80068bc:	addeadde 	.word	0xaddeadde
 80068c0:	addeadde 	.word	0xaddeadde
 80068c4:	addeadde 	.word	0xaddeadde
 80068c8:	addeadde 	.word	0xaddeadde
 80068cc:	addeadde 	.word	0xaddeadde
 80068d0:	addeadde 	.word	0xaddeadde
 80068d4:	addeadde 	.word	0xaddeadde
 80068d8:	addeadde 	.word	0xaddeadde
 80068dc:	addeadde 	.word	0xaddeadde
 80068e0:	addeadde 	.word	0xaddeadde
 80068e4:	addeadde 	.word	0xaddeadde
 80068e8:	addeadde 	.word	0xaddeadde
 80068ec:	addeadde 	.word	0xaddeadde
 80068f0:	addeadde 	.word	0xaddeadde
 80068f4:	addeadde 	.word	0xaddeadde
 80068f8:	addeadde 	.word	0xaddeadde
 80068fc:	addeadde 	.word	0xaddeadde
 8006900:	addeadde 	.word	0xaddeadde
 8006904:	addeadde 	.word	0xaddeadde
 8006908:	addeadde 	.word	0xaddeadde
 800690c:	addeadde 	.word	0xaddeadde
 8006910:	addeadde 	.word	0xaddeadde
 8006914:	addeadde 	.word	0xaddeadde
 8006918:	addeadde 	.word	0xaddeadde
 800691c:	addeadde 	.word	0xaddeadde
 8006920:	addeadde 	.word	0xaddeadde
 8006924:	addeadde 	.word	0xaddeadde
 8006928:	addeadde 	.word	0xaddeadde
 800692c:	addeadde 	.word	0xaddeadde
 8006930:	addeadde 	.word	0xaddeadde
 8006934:	addeadde 	.word	0xaddeadde
 8006938:	addeadde 	.word	0xaddeadde
 800693c:	addeadde 	.word	0xaddeadde
 8006940:	addeadde 	.word	0xaddeadde
 8006944:	addeadde 	.word	0xaddeadde
 8006948:	addeadde 	.word	0xaddeadde
 800694c:	addeadde 	.word	0xaddeadde
 8006950:	addeadde 	.word	0xaddeadde
 8006954:	addeadde 	.word	0xaddeadde
 8006958:	addeadde 	.word	0xaddeadde
 800695c:	addeadde 	.word	0xaddeadde
 8006960:	addeadde 	.word	0xaddeadde
 8006964:	addeadde 	.word	0xaddeadde
 8006968:	addeadde 	.word	0xaddeadde
 800696c:	addeadde 	.word	0xaddeadde
 8006970:	addeadde 	.word	0xaddeadde
 8006974:	addeadde 	.word	0xaddeadde
 8006978:	addeadde 	.word	0xaddeadde
 800697c:	addeadde 	.word	0xaddeadde
 8006980:	addeadde 	.word	0xaddeadde
 8006984:	addeadde 	.word	0xaddeadde
 8006988:	addeadde 	.word	0xaddeadde
 800698c:	addeadde 	.word	0xaddeadde
 8006990:	addeadde 	.word	0xaddeadde
 8006994:	addeadde 	.word	0xaddeadde
 8006998:	addeadde 	.word	0xaddeadde
 800699c:	addeadde 	.word	0xaddeadde
 80069a0:	addeadde 	.word	0xaddeadde
 80069a4:	addeadde 	.word	0xaddeadde
 80069a8:	addeadde 	.word	0xaddeadde
 80069ac:	addeadde 	.word	0xaddeadde
 80069b0:	addeadde 	.word	0xaddeadde
 80069b4:	addeadde 	.word	0xaddeadde
 80069b8:	addeadde 	.word	0xaddeadde
 80069bc:	addeadde 	.word	0xaddeadde
 80069c0:	addeadde 	.word	0xaddeadde
 80069c4:	addeadde 	.word	0xaddeadde
 80069c8:	addeadde 	.word	0xaddeadde
 80069cc:	addeadde 	.word	0xaddeadde
 80069d0:	addeadde 	.word	0xaddeadde
 80069d4:	addeadde 	.word	0xaddeadde
 80069d8:	addeadde 	.word	0xaddeadde
 80069dc:	addeadde 	.word	0xaddeadde
 80069e0:	addeadde 	.word	0xaddeadde
 80069e4:	addeadde 	.word	0xaddeadde
 80069e8:	addeadde 	.word	0xaddeadde
 80069ec:	addeadde 	.word	0xaddeadde
 80069f0:	addeadde 	.word	0xaddeadde
 80069f4:	addeadde 	.word	0xaddeadde
 80069f8:	addeadde 	.word	0xaddeadde
 80069fc:	addeadde 	.word	0xaddeadde
 8006a00:	addeadde 	.word	0xaddeadde
 8006a04:	addeadde 	.word	0xaddeadde
 8006a08:	addeadde 	.word	0xaddeadde
 8006a0c:	addeadde 	.word	0xaddeadde
 8006a10:	addeadde 	.word	0xaddeadde
 8006a14:	addeadde 	.word	0xaddeadde
 8006a18:	addeadde 	.word	0xaddeadde
 8006a1c:	addeadde 	.word	0xaddeadde
 8006a20:	addeadde 	.word	0xaddeadde
 8006a24:	addeadde 	.word	0xaddeadde
 8006a28:	addeadde 	.word	0xaddeadde
 8006a2c:	addeadde 	.word	0xaddeadde
 8006a30:	addeadde 	.word	0xaddeadde
 8006a34:	addeadde 	.word	0xaddeadde
 8006a38:	addeadde 	.word	0xaddeadde
 8006a3c:	addeadde 	.word	0xaddeadde
 8006a40:	addeadde 	.word	0xaddeadde
 8006a44:	addeadde 	.word	0xaddeadde
 8006a48:	addeadde 	.word	0xaddeadde
 8006a4c:	addeadde 	.word	0xaddeadde
 8006a50:	addeadde 	.word	0xaddeadde
 8006a54:	addeadde 	.word	0xaddeadde
 8006a58:	addeadde 	.word	0xaddeadde
 8006a5c:	addeadde 	.word	0xaddeadde
 8006a60:	addeadde 	.word	0xaddeadde
 8006a64:	addeadde 	.word	0xaddeadde
 8006a68:	addeadde 	.word	0xaddeadde
 8006a6c:	addeadde 	.word	0xaddeadde
 8006a70:	addeadde 	.word	0xaddeadde
 8006a74:	addeadde 	.word	0xaddeadde
 8006a78:	addeadde 	.word	0xaddeadde
 8006a7c:	addeadde 	.word	0xaddeadde
 8006a80:	addeadde 	.word	0xaddeadde
 8006a84:	addeadde 	.word	0xaddeadde
 8006a88:	addeadde 	.word	0xaddeadde
 8006a8c:	addeadde 	.word	0xaddeadde
 8006a90:	addeadde 	.word	0xaddeadde
 8006a94:	addeadde 	.word	0xaddeadde
 8006a98:	addeadde 	.word	0xaddeadde
 8006a9c:	addeadde 	.word	0xaddeadde
 8006aa0:	addeadde 	.word	0xaddeadde
 8006aa4:	addeadde 	.word	0xaddeadde
 8006aa8:	addeadde 	.word	0xaddeadde
 8006aac:	addeadde 	.word	0xaddeadde
 8006ab0:	addeadde 	.word	0xaddeadde
 8006ab4:	addeadde 	.word	0xaddeadde
 8006ab8:	addeadde 	.word	0xaddeadde
 8006abc:	addeadde 	.word	0xaddeadde
 8006ac0:	addeadde 	.word	0xaddeadde
 8006ac4:	addeadde 	.word	0xaddeadde
 8006ac8:	addeadde 	.word	0xaddeadde
 8006acc:	addeadde 	.word	0xaddeadde
 8006ad0:	addeadde 	.word	0xaddeadde
 8006ad4:	addeadde 	.word	0xaddeadde
 8006ad8:	addeadde 	.word	0xaddeadde
 8006adc:	addeadde 	.word	0xaddeadde
 8006ae0:	addeadde 	.word	0xaddeadde
 8006ae4:	addeadde 	.word	0xaddeadde
 8006ae8:	addeadde 	.word	0xaddeadde
 8006aec:	addeadde 	.word	0xaddeadde
 8006af0:	addeadde 	.word	0xaddeadde
 8006af4:	addeadde 	.word	0xaddeadde
 8006af8:	addeadde 	.word	0xaddeadde
 8006afc:	addeadde 	.word	0xaddeadde
 8006b00:	addeadde 	.word	0xaddeadde
 8006b04:	addeadde 	.word	0xaddeadde
 8006b08:	addeadde 	.word	0xaddeadde
 8006b0c:	addeadde 	.word	0xaddeadde
 8006b10:	addeadde 	.word	0xaddeadde
 8006b14:	addeadde 	.word	0xaddeadde
 8006b18:	addeadde 	.word	0xaddeadde
 8006b1c:	addeadde 	.word	0xaddeadde
 8006b20:	addeadde 	.word	0xaddeadde
 8006b24:	addeadde 	.word	0xaddeadde
 8006b28:	addeadde 	.word	0xaddeadde
 8006b2c:	addeadde 	.word	0xaddeadde
 8006b30:	addeadde 	.word	0xaddeadde
 8006b34:	addeadde 	.word	0xaddeadde
 8006b38:	addeadde 	.word	0xaddeadde
 8006b3c:	addeadde 	.word	0xaddeadde
 8006b40:	addeadde 	.word	0xaddeadde
 8006b44:	addeadde 	.word	0xaddeadde
 8006b48:	addeadde 	.word	0xaddeadde
 8006b4c:	addeadde 	.word	0xaddeadde
 8006b50:	addeadde 	.word	0xaddeadde
 8006b54:	addeadde 	.word	0xaddeadde
 8006b58:	addeadde 	.word	0xaddeadde
 8006b5c:	addeadde 	.word	0xaddeadde
 8006b60:	addeadde 	.word	0xaddeadde
 8006b64:	addeadde 	.word	0xaddeadde
 8006b68:	addeadde 	.word	0xaddeadde
 8006b6c:	addeadde 	.word	0xaddeadde
 8006b70:	addeadde 	.word	0xaddeadde
 8006b74:	addeadde 	.word	0xaddeadde
 8006b78:	addeadde 	.word	0xaddeadde
 8006b7c:	addeadde 	.word	0xaddeadde
 8006b80:	addeadde 	.word	0xaddeadde
 8006b84:	addeadde 	.word	0xaddeadde
 8006b88:	addeadde 	.word	0xaddeadde
 8006b8c:	addeadde 	.word	0xaddeadde
 8006b90:	addeadde 	.word	0xaddeadde
 8006b94:	addeadde 	.word	0xaddeadde
 8006b98:	addeadde 	.word	0xaddeadde
 8006b9c:	addeadde 	.word	0xaddeadde
 8006ba0:	addeadde 	.word	0xaddeadde
 8006ba4:	addeadde 	.word	0xaddeadde
 8006ba8:	addeadde 	.word	0xaddeadde
 8006bac:	addeadde 	.word	0xaddeadde
 8006bb0:	addeadde 	.word	0xaddeadde
 8006bb4:	addeadde 	.word	0xaddeadde
 8006bb8:	addeadde 	.word	0xaddeadde
 8006bbc:	addeadde 	.word	0xaddeadde
 8006bc0:	addeadde 	.word	0xaddeadde
 8006bc4:	addeadde 	.word	0xaddeadde
 8006bc8:	addeadde 	.word	0xaddeadde
 8006bcc:	addeadde 	.word	0xaddeadde
 8006bd0:	addeadde 	.word	0xaddeadde
 8006bd4:	addeadde 	.word	0xaddeadde
 8006bd8:	addeadde 	.word	0xaddeadde
 8006bdc:	addeadde 	.word	0xaddeadde
 8006be0:	addeadde 	.word	0xaddeadde
 8006be4:	addeadde 	.word	0xaddeadde
 8006be8:	addeadde 	.word	0xaddeadde
 8006bec:	addeadde 	.word	0xaddeadde
 8006bf0:	addeadde 	.word	0xaddeadde
 8006bf4:	addeadde 	.word	0xaddeadde
 8006bf8:	addeadde 	.word	0xaddeadde
 8006bfc:	addeadde 	.word	0xaddeadde
 8006c00:	addeadde 	.word	0xaddeadde
 8006c04:	addeadde 	.word	0xaddeadde
 8006c08:	addeadde 	.word	0xaddeadde
 8006c0c:	addeadde 	.word	0xaddeadde
 8006c10:	addeadde 	.word	0xaddeadde
 8006c14:	addeadde 	.word	0xaddeadde
 8006c18:	addeadde 	.word	0xaddeadde
 8006c1c:	addeadde 	.word	0xaddeadde
 8006c20:	addeadde 	.word	0xaddeadde
 8006c24:	addeadde 	.word	0xaddeadde
 8006c28:	addeadde 	.word	0xaddeadde
 8006c2c:	addeadde 	.word	0xaddeadde
 8006c30:	addeadde 	.word	0xaddeadde
 8006c34:	addeadde 	.word	0xaddeadde
 8006c38:	addeadde 	.word	0xaddeadde
 8006c3c:	addeadde 	.word	0xaddeadde
 8006c40:	addeadde 	.word	0xaddeadde
 8006c44:	addeadde 	.word	0xaddeadde
 8006c48:	addeadde 	.word	0xaddeadde
 8006c4c:	addeadde 	.word	0xaddeadde
 8006c50:	addeadde 	.word	0xaddeadde
 8006c54:	addeadde 	.word	0xaddeadde
 8006c58:	addeadde 	.word	0xaddeadde
 8006c5c:	addeadde 	.word	0xaddeadde
 8006c60:	addeadde 	.word	0xaddeadde
 8006c64:	addeadde 	.word	0xaddeadde
 8006c68:	addeadde 	.word	0xaddeadde
 8006c6c:	addeadde 	.word	0xaddeadde
 8006c70:	addeadde 	.word	0xaddeadde
 8006c74:	addeadde 	.word	0xaddeadde
 8006c78:	addeadde 	.word	0xaddeadde
 8006c7c:	addeadde 	.word	0xaddeadde
 8006c80:	addeadde 	.word	0xaddeadde
 8006c84:	addeadde 	.word	0xaddeadde
 8006c88:	addeadde 	.word	0xaddeadde
 8006c8c:	addeadde 	.word	0xaddeadde
 8006c90:	addeadde 	.word	0xaddeadde
 8006c94:	addeadde 	.word	0xaddeadde
 8006c98:	addeadde 	.word	0xaddeadde
 8006c9c:	addeadde 	.word	0xaddeadde
 8006ca0:	addeadde 	.word	0xaddeadde
 8006ca4:	addeadde 	.word	0xaddeadde
 8006ca8:	addeadde 	.word	0xaddeadde
 8006cac:	addeadde 	.word	0xaddeadde
 8006cb0:	addeadde 	.word	0xaddeadde
 8006cb4:	addeadde 	.word	0xaddeadde
 8006cb8:	addeadde 	.word	0xaddeadde
 8006cbc:	addeadde 	.word	0xaddeadde
 8006cc0:	addeadde 	.word	0xaddeadde
 8006cc4:	addeadde 	.word	0xaddeadde
 8006cc8:	addeadde 	.word	0xaddeadde
 8006ccc:	addeadde 	.word	0xaddeadde
 8006cd0:	addeadde 	.word	0xaddeadde
 8006cd4:	addeadde 	.word	0xaddeadde
 8006cd8:	addeadde 	.word	0xaddeadde
 8006cdc:	addeadde 	.word	0xaddeadde
 8006ce0:	addeadde 	.word	0xaddeadde
 8006ce4:	addeadde 	.word	0xaddeadde
 8006ce8:	addeadde 	.word	0xaddeadde
 8006cec:	addeadde 	.word	0xaddeadde
 8006cf0:	addeadde 	.word	0xaddeadde
 8006cf4:	addeadde 	.word	0xaddeadde
 8006cf8:	addeadde 	.word	0xaddeadde
 8006cfc:	addeadde 	.word	0xaddeadde
 8006d00:	addeadde 	.word	0xaddeadde
 8006d04:	addeadde 	.word	0xaddeadde
 8006d08:	addeadde 	.word	0xaddeadde
 8006d0c:	addeadde 	.word	0xaddeadde
 8006d10:	addeadde 	.word	0xaddeadde
 8006d14:	addeadde 	.word	0xaddeadde
 8006d18:	addeadde 	.word	0xaddeadde
 8006d1c:	addeadde 	.word	0xaddeadde
 8006d20:	addeadde 	.word	0xaddeadde
 8006d24:	addeadde 	.word	0xaddeadde
 8006d28:	addeadde 	.word	0xaddeadde
 8006d2c:	addeadde 	.word	0xaddeadde
 8006d30:	addeadde 	.word	0xaddeadde
 8006d34:	addeadde 	.word	0xaddeadde
 8006d38:	addeadde 	.word	0xaddeadde
 8006d3c:	addeadde 	.word	0xaddeadde
 8006d40:	addeadde 	.word	0xaddeadde
 8006d44:	addeadde 	.word	0xaddeadde
 8006d48:	addeadde 	.word	0xaddeadde
 8006d4c:	addeadde 	.word	0xaddeadde
 8006d50:	addeadde 	.word	0xaddeadde
 8006d54:	addeadde 	.word	0xaddeadde
 8006d58:	addeadde 	.word	0xaddeadde
 8006d5c:	addeadde 	.word	0xaddeadde
 8006d60:	addeadde 	.word	0xaddeadde
 8006d64:	addeadde 	.word	0xaddeadde
 8006d68:	addeadde 	.word	0xaddeadde
 8006d6c:	addeadde 	.word	0xaddeadde
 8006d70:	addeadde 	.word	0xaddeadde
 8006d74:	addeadde 	.word	0xaddeadde
 8006d78:	addeadde 	.word	0xaddeadde
 8006d7c:	addeadde 	.word	0xaddeadde
 8006d80:	addeadde 	.word	0xaddeadde
 8006d84:	addeadde 	.word	0xaddeadde
 8006d88:	addeadde 	.word	0xaddeadde
 8006d8c:	addeadde 	.word	0xaddeadde
 8006d90:	addeadde 	.word	0xaddeadde
 8006d94:	addeadde 	.word	0xaddeadde
 8006d98:	addeadde 	.word	0xaddeadde
 8006d9c:	addeadde 	.word	0xaddeadde
 8006da0:	addeadde 	.word	0xaddeadde
 8006da4:	addeadde 	.word	0xaddeadde
 8006da8:	addeadde 	.word	0xaddeadde
 8006dac:	addeadde 	.word	0xaddeadde
 8006db0:	addeadde 	.word	0xaddeadde
 8006db4:	addeadde 	.word	0xaddeadde
 8006db8:	addeadde 	.word	0xaddeadde
 8006dbc:	addeadde 	.word	0xaddeadde
 8006dc0:	addeadde 	.word	0xaddeadde
 8006dc4:	addeadde 	.word	0xaddeadde
 8006dc8:	addeadde 	.word	0xaddeadde
 8006dcc:	addeadde 	.word	0xaddeadde
 8006dd0:	addeadde 	.word	0xaddeadde
 8006dd4:	addeadde 	.word	0xaddeadde
 8006dd8:	addeadde 	.word	0xaddeadde
 8006ddc:	addeadde 	.word	0xaddeadde
 8006de0:	addeadde 	.word	0xaddeadde
 8006de4:	addeadde 	.word	0xaddeadde
 8006de8:	addeadde 	.word	0xaddeadde
 8006dec:	addeadde 	.word	0xaddeadde
 8006df0:	addeadde 	.word	0xaddeadde
 8006df4:	addeadde 	.word	0xaddeadde
 8006df8:	addeadde 	.word	0xaddeadde
 8006dfc:	addeadde 	.word	0xaddeadde
 8006e00:	addeadde 	.word	0xaddeadde
 8006e04:	addeadde 	.word	0xaddeadde
 8006e08:	addeadde 	.word	0xaddeadde
 8006e0c:	addeadde 	.word	0xaddeadde
 8006e10:	addeadde 	.word	0xaddeadde
 8006e14:	addeadde 	.word	0xaddeadde
 8006e18:	addeadde 	.word	0xaddeadde
 8006e1c:	addeadde 	.word	0xaddeadde
 8006e20:	addeadde 	.word	0xaddeadde
 8006e24:	addeadde 	.word	0xaddeadde
 8006e28:	addeadde 	.word	0xaddeadde
 8006e2c:	addeadde 	.word	0xaddeadde
 8006e30:	addeadde 	.word	0xaddeadde
 8006e34:	addeadde 	.word	0xaddeadde
 8006e38:	addeadde 	.word	0xaddeadde
 8006e3c:	addeadde 	.word	0xaddeadde
 8006e40:	addeadde 	.word	0xaddeadde
 8006e44:	addeadde 	.word	0xaddeadde
 8006e48:	addeadde 	.word	0xaddeadde
 8006e4c:	addeadde 	.word	0xaddeadde
 8006e50:	addeadde 	.word	0xaddeadde
 8006e54:	addeadde 	.word	0xaddeadde
 8006e58:	addeadde 	.word	0xaddeadde
 8006e5c:	addeadde 	.word	0xaddeadde
 8006e60:	addeadde 	.word	0xaddeadde
 8006e64:	addeadde 	.word	0xaddeadde
 8006e68:	addeadde 	.word	0xaddeadde
 8006e6c:	addeadde 	.word	0xaddeadde
 8006e70:	addeadde 	.word	0xaddeadde
 8006e74:	addeadde 	.word	0xaddeadde
 8006e78:	addeadde 	.word	0xaddeadde
 8006e7c:	addeadde 	.word	0xaddeadde
 8006e80:	addeadde 	.word	0xaddeadde
 8006e84:	addeadde 	.word	0xaddeadde
 8006e88:	addeadde 	.word	0xaddeadde
 8006e8c:	addeadde 	.word	0xaddeadde
 8006e90:	addeadde 	.word	0xaddeadde
 8006e94:	addeadde 	.word	0xaddeadde
 8006e98:	addeadde 	.word	0xaddeadde
 8006e9c:	addeadde 	.word	0xaddeadde
 8006ea0:	addeadde 	.word	0xaddeadde
 8006ea4:	addeadde 	.word	0xaddeadde
 8006ea8:	addeadde 	.word	0xaddeadde
 8006eac:	addeadde 	.word	0xaddeadde
 8006eb0:	addeadde 	.word	0xaddeadde
 8006eb4:	addeadde 	.word	0xaddeadde
 8006eb8:	addeadde 	.word	0xaddeadde
 8006ebc:	addeadde 	.word	0xaddeadde
 8006ec0:	addeadde 	.word	0xaddeadde
 8006ec4:	addeadde 	.word	0xaddeadde
 8006ec8:	addeadde 	.word	0xaddeadde
 8006ecc:	addeadde 	.word	0xaddeadde
 8006ed0:	addeadde 	.word	0xaddeadde
 8006ed4:	addeadde 	.word	0xaddeadde
 8006ed8:	addeadde 	.word	0xaddeadde
 8006edc:	addeadde 	.word	0xaddeadde
 8006ee0:	addeadde 	.word	0xaddeadde
 8006ee4:	addeadde 	.word	0xaddeadde
 8006ee8:	addeadde 	.word	0xaddeadde
 8006eec:	addeadde 	.word	0xaddeadde
 8006ef0:	addeadde 	.word	0xaddeadde
 8006ef4:	addeadde 	.word	0xaddeadde
 8006ef8:	addeadde 	.word	0xaddeadde
 8006efc:	addeadde 	.word	0xaddeadde
 8006f00:	addeadde 	.word	0xaddeadde
 8006f04:	addeadde 	.word	0xaddeadde
 8006f08:	addeadde 	.word	0xaddeadde
 8006f0c:	addeadde 	.word	0xaddeadde
 8006f10:	addeadde 	.word	0xaddeadde
 8006f14:	addeadde 	.word	0xaddeadde
 8006f18:	addeadde 	.word	0xaddeadde
 8006f1c:	addeadde 	.word	0xaddeadde
 8006f20:	addeadde 	.word	0xaddeadde
 8006f24:	addeadde 	.word	0xaddeadde
 8006f28:	addeadde 	.word	0xaddeadde
 8006f2c:	addeadde 	.word	0xaddeadde
 8006f30:	addeadde 	.word	0xaddeadde
 8006f34:	addeadde 	.word	0xaddeadde
 8006f38:	addeadde 	.word	0xaddeadde
 8006f3c:	addeadde 	.word	0xaddeadde
 8006f40:	addeadde 	.word	0xaddeadde
 8006f44:	addeadde 	.word	0xaddeadde
 8006f48:	addeadde 	.word	0xaddeadde
 8006f4c:	addeadde 	.word	0xaddeadde
 8006f50:	addeadde 	.word	0xaddeadde
 8006f54:	addeadde 	.word	0xaddeadde
 8006f58:	addeadde 	.word	0xaddeadde
 8006f5c:	addeadde 	.word	0xaddeadde
 8006f60:	addeadde 	.word	0xaddeadde
 8006f64:	addeadde 	.word	0xaddeadde
 8006f68:	addeadde 	.word	0xaddeadde
 8006f6c:	addeadde 	.word	0xaddeadde
 8006f70:	addeadde 	.word	0xaddeadde
 8006f74:	addeadde 	.word	0xaddeadde
 8006f78:	addeadde 	.word	0xaddeadde
 8006f7c:	addeadde 	.word	0xaddeadde
 8006f80:	addeadde 	.word	0xaddeadde
 8006f84:	addeadde 	.word	0xaddeadde
 8006f88:	addeadde 	.word	0xaddeadde
 8006f8c:	addeadde 	.word	0xaddeadde
 8006f90:	addeadde 	.word	0xaddeadde
 8006f94:	addeadde 	.word	0xaddeadde
 8006f98:	addeadde 	.word	0xaddeadde
 8006f9c:	addeadde 	.word	0xaddeadde
 8006fa0:	addeadde 	.word	0xaddeadde
 8006fa4:	addeadde 	.word	0xaddeadde
 8006fa8:	addeadde 	.word	0xaddeadde
 8006fac:	addeadde 	.word	0xaddeadde
 8006fb0:	addeadde 	.word	0xaddeadde
 8006fb4:	addeadde 	.word	0xaddeadde
 8006fb8:	addeadde 	.word	0xaddeadde
 8006fbc:	addeadde 	.word	0xaddeadde
 8006fc0:	addeadde 	.word	0xaddeadde
 8006fc4:	addeadde 	.word	0xaddeadde
 8006fc8:	addeadde 	.word	0xaddeadde
 8006fcc:	addeadde 	.word	0xaddeadde
 8006fd0:	addeadde 	.word	0xaddeadde
 8006fd4:	addeadde 	.word	0xaddeadde
 8006fd8:	addeadde 	.word	0xaddeadde
 8006fdc:	addeadde 	.word	0xaddeadde
 8006fe0:	addeadde 	.word	0xaddeadde
 8006fe4:	addeadde 	.word	0xaddeadde
 8006fe8:	addeadde 	.word	0xaddeadde
 8006fec:	addeadde 	.word	0xaddeadde
 8006ff0:	addeadde 	.word	0xaddeadde
 8006ff4:	addeadde 	.word	0xaddeadde
 8006ff8:	addeadde 	.word	0xaddeadde
 8006ffc:	addeadde 	.word	0xaddeadde
 8007000:	addeadde 	.word	0xaddeadde
 8007004:	addeadde 	.word	0xaddeadde
 8007008:	addeadde 	.word	0xaddeadde
 800700c:	addeadde 	.word	0xaddeadde
 8007010:	addeadde 	.word	0xaddeadde
 8007014:	addeadde 	.word	0xaddeadde
 8007018:	addeadde 	.word	0xaddeadde
 800701c:	addeadde 	.word	0xaddeadde
 8007020:	addeadde 	.word	0xaddeadde
 8007024:	addeadde 	.word	0xaddeadde
 8007028:	addeadde 	.word	0xaddeadde
 800702c:	addeadde 	.word	0xaddeadde
 8007030:	addeadde 	.word	0xaddeadde
 8007034:	addeadde 	.word	0xaddeadde
 8007038:	addeadde 	.word	0xaddeadde
 800703c:	addeadde 	.word	0xaddeadde
 8007040:	addeadde 	.word	0xaddeadde
 8007044:	addeadde 	.word	0xaddeadde
 8007048:	addeadde 	.word	0xaddeadde
 800704c:	addeadde 	.word	0xaddeadde
 8007050:	addeadde 	.word	0xaddeadde
 8007054:	addeadde 	.word	0xaddeadde
 8007058:	addeadde 	.word	0xaddeadde
 800705c:	addeadde 	.word	0xaddeadde
 8007060:	addeadde 	.word	0xaddeadde
 8007064:	addeadde 	.word	0xaddeadde
 8007068:	addeadde 	.word	0xaddeadde
 800706c:	addeadde 	.word	0xaddeadde
 8007070:	addeadde 	.word	0xaddeadde
 8007074:	addeadde 	.word	0xaddeadde
 8007078:	addeadde 	.word	0xaddeadde
 800707c:	addeadde 	.word	0xaddeadde
 8007080:	addeadde 	.word	0xaddeadde
 8007084:	addeadde 	.word	0xaddeadde
 8007088:	addeadde 	.word	0xaddeadde
 800708c:	addeadde 	.word	0xaddeadde
 8007090:	addeadde 	.word	0xaddeadde
 8007094:	addeadde 	.word	0xaddeadde
 8007098:	addeadde 	.word	0xaddeadde
 800709c:	addeadde 	.word	0xaddeadde
 80070a0:	addeadde 	.word	0xaddeadde
 80070a4:	addeadde 	.word	0xaddeadde
 80070a8:	addeadde 	.word	0xaddeadde
 80070ac:	addeadde 	.word	0xaddeadde
 80070b0:	addeadde 	.word	0xaddeadde
 80070b4:	addeadde 	.word	0xaddeadde
 80070b8:	addeadde 	.word	0xaddeadde
 80070bc:	addeadde 	.word	0xaddeadde
 80070c0:	addeadde 	.word	0xaddeadde
 80070c4:	addeadde 	.word	0xaddeadde
 80070c8:	addeadde 	.word	0xaddeadde
 80070cc:	addeadde 	.word	0xaddeadde
 80070d0:	addeadde 	.word	0xaddeadde
 80070d4:	addeadde 	.word	0xaddeadde
 80070d8:	addeadde 	.word	0xaddeadde
 80070dc:	addeadde 	.word	0xaddeadde
 80070e0:	addeadde 	.word	0xaddeadde
 80070e4:	addeadde 	.word	0xaddeadde
 80070e8:	addeadde 	.word	0xaddeadde
 80070ec:	addeadde 	.word	0xaddeadde
 80070f0:	addeadde 	.word	0xaddeadde
 80070f4:	addeadde 	.word	0xaddeadde
 80070f8:	addeadde 	.word	0xaddeadde
 80070fc:	addeadde 	.word	0xaddeadde
 8007100:	addeadde 	.word	0xaddeadde
 8007104:	addeadde 	.word	0xaddeadde
 8007108:	addeadde 	.word	0xaddeadde
 800710c:	addeadde 	.word	0xaddeadde
 8007110:	addeadde 	.word	0xaddeadde
 8007114:	addeadde 	.word	0xaddeadde
 8007118:	addeadde 	.word	0xaddeadde
 800711c:	addeadde 	.word	0xaddeadde
 8007120:	addeadde 	.word	0xaddeadde
 8007124:	addeadde 	.word	0xaddeadde
 8007128:	addeadde 	.word	0xaddeadde
 800712c:	addeadde 	.word	0xaddeadde
 8007130:	addeadde 	.word	0xaddeadde
 8007134:	addeadde 	.word	0xaddeadde
 8007138:	addeadde 	.word	0xaddeadde
 800713c:	addeadde 	.word	0xaddeadde
 8007140:	addeadde 	.word	0xaddeadde
 8007144:	addeadde 	.word	0xaddeadde
 8007148:	addeadde 	.word	0xaddeadde
 800714c:	addeadde 	.word	0xaddeadde
 8007150:	addeadde 	.word	0xaddeadde
 8007154:	addeadde 	.word	0xaddeadde
 8007158:	addeadde 	.word	0xaddeadde
 800715c:	addeadde 	.word	0xaddeadde
 8007160:	addeadde 	.word	0xaddeadde
 8007164:	addeadde 	.word	0xaddeadde
 8007168:	addeadde 	.word	0xaddeadde
 800716c:	addeadde 	.word	0xaddeadde
 8007170:	addeadde 	.word	0xaddeadde
 8007174:	addeadde 	.word	0xaddeadde
 8007178:	addeadde 	.word	0xaddeadde
 800717c:	addeadde 	.word	0xaddeadde
 8007180:	addeadde 	.word	0xaddeadde
 8007184:	addeadde 	.word	0xaddeadde
 8007188:	addeadde 	.word	0xaddeadde
 800718c:	addeadde 	.word	0xaddeadde
 8007190:	addeadde 	.word	0xaddeadde
 8007194:	addeadde 	.word	0xaddeadde
 8007198:	addeadde 	.word	0xaddeadde
 800719c:	addeadde 	.word	0xaddeadde
 80071a0:	addeadde 	.word	0xaddeadde
 80071a4:	addeadde 	.word	0xaddeadde
 80071a8:	addeadde 	.word	0xaddeadde
 80071ac:	addeadde 	.word	0xaddeadde
 80071b0:	addeadde 	.word	0xaddeadde
 80071b4:	addeadde 	.word	0xaddeadde
 80071b8:	addeadde 	.word	0xaddeadde
 80071bc:	addeadde 	.word	0xaddeadde
 80071c0:	addeadde 	.word	0xaddeadde
 80071c4:	addeadde 	.word	0xaddeadde
 80071c8:	addeadde 	.word	0xaddeadde
 80071cc:	addeadde 	.word	0xaddeadde
 80071d0:	addeadde 	.word	0xaddeadde
 80071d4:	addeadde 	.word	0xaddeadde
 80071d8:	addeadde 	.word	0xaddeadde
 80071dc:	addeadde 	.word	0xaddeadde
 80071e0:	addeadde 	.word	0xaddeadde
 80071e4:	addeadde 	.word	0xaddeadde
 80071e8:	addeadde 	.word	0xaddeadde
 80071ec:	addeadde 	.word	0xaddeadde
 80071f0:	addeadde 	.word	0xaddeadde
 80071f4:	addeadde 	.word	0xaddeadde
 80071f8:	addeadde 	.word	0xaddeadde
 80071fc:	addeadde 	.word	0xaddeadde
 8007200:	addeadde 	.word	0xaddeadde
 8007204:	addeadde 	.word	0xaddeadde
 8007208:	addeadde 	.word	0xaddeadde
 800720c:	addeadde 	.word	0xaddeadde
 8007210:	addeadde 	.word	0xaddeadde
 8007214:	addeadde 	.word	0xaddeadde
 8007218:	addeadde 	.word	0xaddeadde
 800721c:	addeadde 	.word	0xaddeadde
 8007220:	addeadde 	.word	0xaddeadde
 8007224:	addeadde 	.word	0xaddeadde
 8007228:	addeadde 	.word	0xaddeadde
 800722c:	addeadde 	.word	0xaddeadde
 8007230:	addeadde 	.word	0xaddeadde
 8007234:	addeadde 	.word	0xaddeadde
 8007238:	addeadde 	.word	0xaddeadde
 800723c:	addeadde 	.word	0xaddeadde
 8007240:	addeadde 	.word	0xaddeadde
 8007244:	addeadde 	.word	0xaddeadde
 8007248:	addeadde 	.word	0xaddeadde
 800724c:	addeadde 	.word	0xaddeadde
 8007250:	addeadde 	.word	0xaddeadde
 8007254:	addeadde 	.word	0xaddeadde
 8007258:	addeadde 	.word	0xaddeadde
 800725c:	addeadde 	.word	0xaddeadde
 8007260:	addeadde 	.word	0xaddeadde
 8007264:	addeadde 	.word	0xaddeadde
 8007268:	addeadde 	.word	0xaddeadde
 800726c:	addeadde 	.word	0xaddeadde
 8007270:	addeadde 	.word	0xaddeadde
 8007274:	addeadde 	.word	0xaddeadde
 8007278:	addeadde 	.word	0xaddeadde
 800727c:	addeadde 	.word	0xaddeadde
 8007280:	addeadde 	.word	0xaddeadde
 8007284:	addeadde 	.word	0xaddeadde
 8007288:	addeadde 	.word	0xaddeadde
 800728c:	addeadde 	.word	0xaddeadde
 8007290:	addeadde 	.word	0xaddeadde
 8007294:	addeadde 	.word	0xaddeadde
 8007298:	addeadde 	.word	0xaddeadde
 800729c:	addeadde 	.word	0xaddeadde
 80072a0:	addeadde 	.word	0xaddeadde
 80072a4:	addeadde 	.word	0xaddeadde
 80072a8:	addeadde 	.word	0xaddeadde
 80072ac:	addeadde 	.word	0xaddeadde
 80072b0:	addeadde 	.word	0xaddeadde
 80072b4:	addeadde 	.word	0xaddeadde
 80072b8:	addeadde 	.word	0xaddeadde
 80072bc:	addeadde 	.word	0xaddeadde
 80072c0:	addeadde 	.word	0xaddeadde
 80072c4:	addeadde 	.word	0xaddeadde
 80072c8:	addeadde 	.word	0xaddeadde
 80072cc:	addeadde 	.word	0xaddeadde
 80072d0:	addeadde 	.word	0xaddeadde
 80072d4:	addeadde 	.word	0xaddeadde
 80072d8:	addeadde 	.word	0xaddeadde
 80072dc:	addeadde 	.word	0xaddeadde
 80072e0:	addeadde 	.word	0xaddeadde
 80072e4:	addeadde 	.word	0xaddeadde
 80072e8:	addeadde 	.word	0xaddeadde
 80072ec:	addeadde 	.word	0xaddeadde
 80072f0:	addeadde 	.word	0xaddeadde
 80072f4:	addeadde 	.word	0xaddeadde
 80072f8:	addeadde 	.word	0xaddeadde
 80072fc:	addeadde 	.word	0xaddeadde
 8007300:	addeadde 	.word	0xaddeadde
 8007304:	addeadde 	.word	0xaddeadde
 8007308:	addeadde 	.word	0xaddeadde
 800730c:	addeadde 	.word	0xaddeadde
 8007310:	addeadde 	.word	0xaddeadde
 8007314:	addeadde 	.word	0xaddeadde
 8007318:	addeadde 	.word	0xaddeadde
 800731c:	addeadde 	.word	0xaddeadde
 8007320:	addeadde 	.word	0xaddeadde
 8007324:	addeadde 	.word	0xaddeadde
 8007328:	addeadde 	.word	0xaddeadde
 800732c:	addeadde 	.word	0xaddeadde
 8007330:	addeadde 	.word	0xaddeadde
 8007334:	addeadde 	.word	0xaddeadde
 8007338:	addeadde 	.word	0xaddeadde
 800733c:	addeadde 	.word	0xaddeadde
 8007340:	addeadde 	.word	0xaddeadde
 8007344:	addeadde 	.word	0xaddeadde
 8007348:	addeadde 	.word	0xaddeadde
 800734c:	addeadde 	.word	0xaddeadde
 8007350:	addeadde 	.word	0xaddeadde
 8007354:	addeadde 	.word	0xaddeadde
 8007358:	addeadde 	.word	0xaddeadde
 800735c:	addeadde 	.word	0xaddeadde
 8007360:	addeadde 	.word	0xaddeadde
 8007364:	addeadde 	.word	0xaddeadde
 8007368:	addeadde 	.word	0xaddeadde
 800736c:	addeadde 	.word	0xaddeadde
 8007370:	addeadde 	.word	0xaddeadde
 8007374:	addeadde 	.word	0xaddeadde
 8007378:	addeadde 	.word	0xaddeadde
 800737c:	addeadde 	.word	0xaddeadde
 8007380:	addeadde 	.word	0xaddeadde
 8007384:	addeadde 	.word	0xaddeadde
 8007388:	addeadde 	.word	0xaddeadde
 800738c:	addeadde 	.word	0xaddeadde
 8007390:	addeadde 	.word	0xaddeadde
 8007394:	addeadde 	.word	0xaddeadde
 8007398:	addeadde 	.word	0xaddeadde
 800739c:	addeadde 	.word	0xaddeadde
 80073a0:	addeadde 	.word	0xaddeadde
 80073a4:	addeadde 	.word	0xaddeadde
 80073a8:	addeadde 	.word	0xaddeadde
 80073ac:	addeadde 	.word	0xaddeadde
 80073b0:	addeadde 	.word	0xaddeadde
 80073b4:	addeadde 	.word	0xaddeadde
 80073b8:	addeadde 	.word	0xaddeadde
 80073bc:	addeadde 	.word	0xaddeadde
 80073c0:	addeadde 	.word	0xaddeadde
 80073c4:	addeadde 	.word	0xaddeadde
 80073c8:	addeadde 	.word	0xaddeadde
 80073cc:	addeadde 	.word	0xaddeadde
 80073d0:	addeadde 	.word	0xaddeadde
 80073d4:	addeadde 	.word	0xaddeadde
 80073d8:	addeadde 	.word	0xaddeadde
 80073dc:	addeadde 	.word	0xaddeadde
 80073e0:	addeadde 	.word	0xaddeadde
 80073e4:	addeadde 	.word	0xaddeadde
 80073e8:	addeadde 	.word	0xaddeadde
 80073ec:	addeadde 	.word	0xaddeadde
 80073f0:	addeadde 	.word	0xaddeadde
 80073f4:	addeadde 	.word	0xaddeadde
 80073f8:	addeadde 	.word	0xaddeadde
 80073fc:	addeadde 	.word	0xaddeadde
 8007400:	addeadde 	.word	0xaddeadde
 8007404:	addeadde 	.word	0xaddeadde
 8007408:	addeadde 	.word	0xaddeadde
 800740c:	addeadde 	.word	0xaddeadde
 8007410:	addeadde 	.word	0xaddeadde
 8007414:	addeadde 	.word	0xaddeadde
 8007418:	addeadde 	.word	0xaddeadde
 800741c:	addeadde 	.word	0xaddeadde
 8007420:	addeadde 	.word	0xaddeadde
 8007424:	addeadde 	.word	0xaddeadde
 8007428:	addeadde 	.word	0xaddeadde
 800742c:	addeadde 	.word	0xaddeadde
 8007430:	addeadde 	.word	0xaddeadde
 8007434:	addeadde 	.word	0xaddeadde
 8007438:	addeadde 	.word	0xaddeadde
 800743c:	addeadde 	.word	0xaddeadde
 8007440:	addeadde 	.word	0xaddeadde
 8007444:	addeadde 	.word	0xaddeadde
 8007448:	addeadde 	.word	0xaddeadde
 800744c:	addeadde 	.word	0xaddeadde
 8007450:	addeadde 	.word	0xaddeadde
 8007454:	addeadde 	.word	0xaddeadde
 8007458:	addeadde 	.word	0xaddeadde
 800745c:	addeadde 	.word	0xaddeadde
 8007460:	addeadde 	.word	0xaddeadde
 8007464:	addeadde 	.word	0xaddeadde
 8007468:	addeadde 	.word	0xaddeadde
 800746c:	addeadde 	.word	0xaddeadde
 8007470:	addeadde 	.word	0xaddeadde
 8007474:	addeadde 	.word	0xaddeadde
 8007478:	addeadde 	.word	0xaddeadde
 800747c:	addeadde 	.word	0xaddeadde
 8007480:	addeadde 	.word	0xaddeadde
 8007484:	addeadde 	.word	0xaddeadde
 8007488:	addeadde 	.word	0xaddeadde
 800748c:	addeadde 	.word	0xaddeadde
 8007490:	addeadde 	.word	0xaddeadde
 8007494:	addeadde 	.word	0xaddeadde
 8007498:	addeadde 	.word	0xaddeadde
 800749c:	addeadde 	.word	0xaddeadde
 80074a0:	addeadde 	.word	0xaddeadde
 80074a4:	addeadde 	.word	0xaddeadde
 80074a8:	addeadde 	.word	0xaddeadde
 80074ac:	addeadde 	.word	0xaddeadde
 80074b0:	addeadde 	.word	0xaddeadde
 80074b4:	addeadde 	.word	0xaddeadde
 80074b8:	addeadde 	.word	0xaddeadde
 80074bc:	addeadde 	.word	0xaddeadde
 80074c0:	addeadde 	.word	0xaddeadde
 80074c4:	addeadde 	.word	0xaddeadde
 80074c8:	addeadde 	.word	0xaddeadde
 80074cc:	addeadde 	.word	0xaddeadde
 80074d0:	addeadde 	.word	0xaddeadde
 80074d4:	addeadde 	.word	0xaddeadde
 80074d8:	addeadde 	.word	0xaddeadde
 80074dc:	addeadde 	.word	0xaddeadde
 80074e0:	addeadde 	.word	0xaddeadde
 80074e4:	addeadde 	.word	0xaddeadde
 80074e8:	addeadde 	.word	0xaddeadde
 80074ec:	addeadde 	.word	0xaddeadde
 80074f0:	addeadde 	.word	0xaddeadde
 80074f4:	addeadde 	.word	0xaddeadde
 80074f8:	addeadde 	.word	0xaddeadde
 80074fc:	addeadde 	.word	0xaddeadde
 8007500:	addeadde 	.word	0xaddeadde
 8007504:	addeadde 	.word	0xaddeadde
 8007508:	addeadde 	.word	0xaddeadde
 800750c:	addeadde 	.word	0xaddeadde
 8007510:	addeadde 	.word	0xaddeadde
 8007514:	addeadde 	.word	0xaddeadde
 8007518:	addeadde 	.word	0xaddeadde
 800751c:	addeadde 	.word	0xaddeadde
 8007520:	addeadde 	.word	0xaddeadde
 8007524:	addeadde 	.word	0xaddeadde
 8007528:	addeadde 	.word	0xaddeadde
 800752c:	addeadde 	.word	0xaddeadde
 8007530:	addeadde 	.word	0xaddeadde
 8007534:	addeadde 	.word	0xaddeadde
 8007538:	addeadde 	.word	0xaddeadde
 800753c:	addeadde 	.word	0xaddeadde
 8007540:	addeadde 	.word	0xaddeadde
 8007544:	addeadde 	.word	0xaddeadde
 8007548:	addeadde 	.word	0xaddeadde
 800754c:	addeadde 	.word	0xaddeadde
 8007550:	addeadde 	.word	0xaddeadde
 8007554:	addeadde 	.word	0xaddeadde
 8007558:	addeadde 	.word	0xaddeadde
 800755c:	addeadde 	.word	0xaddeadde
 8007560:	addeadde 	.word	0xaddeadde
 8007564:	addeadde 	.word	0xaddeadde
 8007568:	addeadde 	.word	0xaddeadde
 800756c:	addeadde 	.word	0xaddeadde
 8007570:	addeadde 	.word	0xaddeadde
 8007574:	addeadde 	.word	0xaddeadde
 8007578:	addeadde 	.word	0xaddeadde
 800757c:	addeadde 	.word	0xaddeadde
 8007580:	addeadde 	.word	0xaddeadde
 8007584:	addeadde 	.word	0xaddeadde
 8007588:	addeadde 	.word	0xaddeadde
 800758c:	addeadde 	.word	0xaddeadde
 8007590:	addeadde 	.word	0xaddeadde
 8007594:	addeadde 	.word	0xaddeadde
 8007598:	addeadde 	.word	0xaddeadde
 800759c:	addeadde 	.word	0xaddeadde
 80075a0:	addeadde 	.word	0xaddeadde
 80075a4:	addeadde 	.word	0xaddeadde
 80075a8:	addeadde 	.word	0xaddeadde
 80075ac:	addeadde 	.word	0xaddeadde
 80075b0:	addeadde 	.word	0xaddeadde
 80075b4:	addeadde 	.word	0xaddeadde
 80075b8:	addeadde 	.word	0xaddeadde
 80075bc:	addeadde 	.word	0xaddeadde
 80075c0:	addeadde 	.word	0xaddeadde
 80075c4:	addeadde 	.word	0xaddeadde
 80075c8:	addeadde 	.word	0xaddeadde
 80075cc:	addeadde 	.word	0xaddeadde
 80075d0:	addeadde 	.word	0xaddeadde
 80075d4:	addeadde 	.word	0xaddeadde
 80075d8:	addeadde 	.word	0xaddeadde
 80075dc:	addeadde 	.word	0xaddeadde
 80075e0:	addeadde 	.word	0xaddeadde
 80075e4:	addeadde 	.word	0xaddeadde
 80075e8:	addeadde 	.word	0xaddeadde
 80075ec:	addeadde 	.word	0xaddeadde
 80075f0:	addeadde 	.word	0xaddeadde
 80075f4:	addeadde 	.word	0xaddeadde
 80075f8:	addeadde 	.word	0xaddeadde
 80075fc:	addeadde 	.word	0xaddeadde
 8007600:	addeadde 	.word	0xaddeadde
 8007604:	addeadde 	.word	0xaddeadde
 8007608:	addeadde 	.word	0xaddeadde
 800760c:	addeadde 	.word	0xaddeadde
 8007610:	addeadde 	.word	0xaddeadde
 8007614:	addeadde 	.word	0xaddeadde
 8007618:	addeadde 	.word	0xaddeadde
 800761c:	addeadde 	.word	0xaddeadde
 8007620:	addeadde 	.word	0xaddeadde
 8007624:	addeadde 	.word	0xaddeadde
 8007628:	addeadde 	.word	0xaddeadde
 800762c:	addeadde 	.word	0xaddeadde
 8007630:	addeadde 	.word	0xaddeadde
 8007634:	addeadde 	.word	0xaddeadde
 8007638:	addeadde 	.word	0xaddeadde
 800763c:	addeadde 	.word	0xaddeadde
 8007640:	addeadde 	.word	0xaddeadde
 8007644:	addeadde 	.word	0xaddeadde
 8007648:	addeadde 	.word	0xaddeadde
 800764c:	addeadde 	.word	0xaddeadde
 8007650:	addeadde 	.word	0xaddeadde
 8007654:	addeadde 	.word	0xaddeadde
 8007658:	addeadde 	.word	0xaddeadde
 800765c:	addeadde 	.word	0xaddeadde
 8007660:	addeadde 	.word	0xaddeadde
 8007664:	addeadde 	.word	0xaddeadde
 8007668:	addeadde 	.word	0xaddeadde
 800766c:	addeadde 	.word	0xaddeadde
 8007670:	addeadde 	.word	0xaddeadde
 8007674:	addeadde 	.word	0xaddeadde
 8007678:	addeadde 	.word	0xaddeadde
 800767c:	addeadde 	.word	0xaddeadde
 8007680:	addeadde 	.word	0xaddeadde
 8007684:	addeadde 	.word	0xaddeadde
 8007688:	addeadde 	.word	0xaddeadde
 800768c:	addeadde 	.word	0xaddeadde
 8007690:	addeadde 	.word	0xaddeadde
 8007694:	addeadde 	.word	0xaddeadde
 8007698:	addeadde 	.word	0xaddeadde
 800769c:	addeadde 	.word	0xaddeadde
 80076a0:	addeadde 	.word	0xaddeadde
 80076a4:	addeadde 	.word	0xaddeadde
 80076a8:	addeadde 	.word	0xaddeadde
 80076ac:	addeadde 	.word	0xaddeadde
 80076b0:	addeadde 	.word	0xaddeadde
 80076b4:	addeadde 	.word	0xaddeadde
 80076b8:	addeadde 	.word	0xaddeadde
 80076bc:	addeadde 	.word	0xaddeadde
 80076c0:	addeadde 	.word	0xaddeadde
 80076c4:	addeadde 	.word	0xaddeadde
 80076c8:	addeadde 	.word	0xaddeadde
 80076cc:	addeadde 	.word	0xaddeadde
 80076d0:	addeadde 	.word	0xaddeadde
 80076d4:	addeadde 	.word	0xaddeadde
 80076d8:	addeadde 	.word	0xaddeadde
 80076dc:	addeadde 	.word	0xaddeadde
 80076e0:	addeadde 	.word	0xaddeadde
 80076e4:	addeadde 	.word	0xaddeadde
 80076e8:	addeadde 	.word	0xaddeadde
 80076ec:	addeadde 	.word	0xaddeadde
 80076f0:	addeadde 	.word	0xaddeadde
 80076f4:	addeadde 	.word	0xaddeadde
 80076f8:	addeadde 	.word	0xaddeadde
 80076fc:	addeadde 	.word	0xaddeadde
 8007700:	addeadde 	.word	0xaddeadde
 8007704:	addeadde 	.word	0xaddeadde
 8007708:	addeadde 	.word	0xaddeadde
 800770c:	addeadde 	.word	0xaddeadde
 8007710:	addeadde 	.word	0xaddeadde
 8007714:	addeadde 	.word	0xaddeadde
 8007718:	addeadde 	.word	0xaddeadde
 800771c:	addeadde 	.word	0xaddeadde
 8007720:	addeadde 	.word	0xaddeadde
 8007724:	addeadde 	.word	0xaddeadde
 8007728:	addeadde 	.word	0xaddeadde
 800772c:	addeadde 	.word	0xaddeadde
 8007730:	addeadde 	.word	0xaddeadde
 8007734:	addeadde 	.word	0xaddeadde
 8007738:	addeadde 	.word	0xaddeadde
 800773c:	addeadde 	.word	0xaddeadde
 8007740:	addeadde 	.word	0xaddeadde
 8007744:	addeadde 	.word	0xaddeadde
 8007748:	addeadde 	.word	0xaddeadde
 800774c:	addeadde 	.word	0xaddeadde
 8007750:	addeadde 	.word	0xaddeadde
 8007754:	addeadde 	.word	0xaddeadde
 8007758:	addeadde 	.word	0xaddeadde
 800775c:	addeadde 	.word	0xaddeadde
 8007760:	addeadde 	.word	0xaddeadde
 8007764:	addeadde 	.word	0xaddeadde
 8007768:	addeadde 	.word	0xaddeadde
 800776c:	addeadde 	.word	0xaddeadde
 8007770:	addeadde 	.word	0xaddeadde
 8007774:	addeadde 	.word	0xaddeadde
 8007778:	addeadde 	.word	0xaddeadde
 800777c:	addeadde 	.word	0xaddeadde
 8007780:	addeadde 	.word	0xaddeadde
 8007784:	addeadde 	.word	0xaddeadde
 8007788:	addeadde 	.word	0xaddeadde
 800778c:	addeadde 	.word	0xaddeadde
 8007790:	addeadde 	.word	0xaddeadde
 8007794:	addeadde 	.word	0xaddeadde
 8007798:	addeadde 	.word	0xaddeadde
 800779c:	addeadde 	.word	0xaddeadde
 80077a0:	addeadde 	.word	0xaddeadde
 80077a4:	addeadde 	.word	0xaddeadde
 80077a8:	addeadde 	.word	0xaddeadde
 80077ac:	addeadde 	.word	0xaddeadde
 80077b0:	addeadde 	.word	0xaddeadde
 80077b4:	addeadde 	.word	0xaddeadde
 80077b8:	addeadde 	.word	0xaddeadde
 80077bc:	addeadde 	.word	0xaddeadde
 80077c0:	addeadde 	.word	0xaddeadde
 80077c4:	addeadde 	.word	0xaddeadde
 80077c8:	addeadde 	.word	0xaddeadde
 80077cc:	addeadde 	.word	0xaddeadde
 80077d0:	addeadde 	.word	0xaddeadde
 80077d4:	addeadde 	.word	0xaddeadde
 80077d8:	addeadde 	.word	0xaddeadde
 80077dc:	addeadde 	.word	0xaddeadde
 80077e0:	addeadde 	.word	0xaddeadde
 80077e4:	addeadde 	.word	0xaddeadde
 80077e8:	addeadde 	.word	0xaddeadde
 80077ec:	addeadde 	.word	0xaddeadde
 80077f0:	addeadde 	.word	0xaddeadde
 80077f4:	addeadde 	.word	0xaddeadde
 80077f8:	addeadde 	.word	0xaddeadde
 80077fc:	addeadde 	.word	0xaddeadde
 8007800:	addeadde 	.word	0xaddeadde
 8007804:	addeadde 	.word	0xaddeadde
 8007808:	addeadde 	.word	0xaddeadde
 800780c:	addeadde 	.word	0xaddeadde
 8007810:	addeadde 	.word	0xaddeadde
 8007814:	addeadde 	.word	0xaddeadde
 8007818:	addeadde 	.word	0xaddeadde
 800781c:	addeadde 	.word	0xaddeadde
 8007820:	addeadde 	.word	0xaddeadde
 8007824:	addeadde 	.word	0xaddeadde
 8007828:	addeadde 	.word	0xaddeadde
 800782c:	addeadde 	.word	0xaddeadde
 8007830:	addeadde 	.word	0xaddeadde
 8007834:	addeadde 	.word	0xaddeadde
 8007838:	addeadde 	.word	0xaddeadde
 800783c:	addeadde 	.word	0xaddeadde
 8007840:	addeadde 	.word	0xaddeadde
 8007844:	addeadde 	.word	0xaddeadde
 8007848:	addeadde 	.word	0xaddeadde
 800784c:	addeadde 	.word	0xaddeadde
 8007850:	addeadde 	.word	0xaddeadde
 8007854:	addeadde 	.word	0xaddeadde
 8007858:	addeadde 	.word	0xaddeadde
 800785c:	addeadde 	.word	0xaddeadde
 8007860:	addeadde 	.word	0xaddeadde
 8007864:	addeadde 	.word	0xaddeadde
 8007868:	addeadde 	.word	0xaddeadde
 800786c:	addeadde 	.word	0xaddeadde
 8007870:	addeadde 	.word	0xaddeadde
 8007874:	addeadde 	.word	0xaddeadde
 8007878:	addeadde 	.word	0xaddeadde
 800787c:	addeadde 	.word	0xaddeadde
 8007880:	addeadde 	.word	0xaddeadde
 8007884:	addeadde 	.word	0xaddeadde
 8007888:	addeadde 	.word	0xaddeadde
 800788c:	addeadde 	.word	0xaddeadde
 8007890:	addeadde 	.word	0xaddeadde
 8007894:	addeadde 	.word	0xaddeadde
 8007898:	addeadde 	.word	0xaddeadde
 800789c:	addeadde 	.word	0xaddeadde
 80078a0:	addeadde 	.word	0xaddeadde
 80078a4:	addeadde 	.word	0xaddeadde
 80078a8:	addeadde 	.word	0xaddeadde
 80078ac:	addeadde 	.word	0xaddeadde
 80078b0:	addeadde 	.word	0xaddeadde
 80078b4:	addeadde 	.word	0xaddeadde
 80078b8:	addeadde 	.word	0xaddeadde
 80078bc:	addeadde 	.word	0xaddeadde
 80078c0:	addeadde 	.word	0xaddeadde
 80078c4:	addeadde 	.word	0xaddeadde
 80078c8:	addeadde 	.word	0xaddeadde
 80078cc:	addeadde 	.word	0xaddeadde
 80078d0:	addeadde 	.word	0xaddeadde
 80078d4:	addeadde 	.word	0xaddeadde
 80078d8:	addeadde 	.word	0xaddeadde
 80078dc:	addeadde 	.word	0xaddeadde
 80078e0:	addeadde 	.word	0xaddeadde
 80078e4:	addeadde 	.word	0xaddeadde
 80078e8:	addeadde 	.word	0xaddeadde
 80078ec:	addeadde 	.word	0xaddeadde
 80078f0:	addeadde 	.word	0xaddeadde
 80078f4:	addeadde 	.word	0xaddeadde
 80078f8:	addeadde 	.word	0xaddeadde
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <xPortRaisePrivilege>:
 */
void vPortResetPrivilege( BaseType_t xRunningPrivileged );
/*-----------------------------------------------------------*/

BaseType_t xPortRaisePrivilege( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008000:	b508      	push	{r3, lr}
    BaseType_t xRunningPrivileged;

    /* Check whether the processor is already privileged. */
    xRunningPrivileged = portIS_PRIVILEGED();
 8008002:	f001 fae5 	bl	80095d0 <xIsPrivileged>

    /* If the processor is not already privileged, raise privilege. */
    if( xRunningPrivileged == pdFALSE )
 8008006:	b900      	cbnz	r0, 800800a <xPortRaisePrivilege+0xa>
    {
        portRAISE_PRIVILEGE();
 8008008:	df02      	svc	2
    }

    return xRunningPrivileged;
}
 800800a:	bd08      	pop	{r3, pc}

0800800c <MPU_SytemCall_1>:
}



void MPU_SytemCall_1()
{
 800800c:	b510      	push	{r4, lr}

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800800e:	f7ff fff7 	bl	8008000 <xPortRaisePrivilege>
 8008012:	4604      	mov	r4, r0

	SytemCall_1_code();
 8008014:	f001 f876 	bl	8009104 <SytemCall_1_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008018:	4620      	mov	r0, r4
 800801a:	f001 fa87 	bl	800952c <vPortResetPrivilege>

}
 800801e:	bd10      	pop	{r4, pc}

08008020 <MPU_SytemCall_2>:


void MPU_SytemCall_2()
{
 8008020:	b510      	push	{r4, lr}

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008022:	f7ff ffed 	bl	8008000 <xPortRaisePrivilege>
 8008026:	4604      	mov	r4, r0

	SytemCall_2_code();
 8008028:	f001 f86d 	bl	8009106 <SytemCall_2_code>

	vPortResetPrivilege( xRunningPrivileged );
 800802c:	4620      	mov	r0, r4
 800802e:	f001 fa7d 	bl	800952c <vPortResetPrivilege>

}
 8008032:	bd10      	pop	{r4, pc}

08008034 <MPU_SytemCall_3>:


void MPU_SytemCall_3()
{
 8008034:	b510      	push	{r4, lr}

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008036:	f7ff ffe3 	bl	8008000 <xPortRaisePrivilege>
 800803a:	4604      	mov	r4, r0

	SytemCall_3_code();
 800803c:	f001 f864 	bl	8009108 <SytemCall_3_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008040:	4620      	mov	r0, r4
 8008042:	f001 fa73 	bl	800952c <vPortResetPrivilege>

}
 8008046:	bd10      	pop	{r4, pc}

08008048 <MPU_SytemCall_4>:



void MPU_SytemCall_4(void *val)
{
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4605      	mov	r5, r0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800804c:	f7ff ffd8 	bl	8008000 <xPortRaisePrivilege>
 8008050:	4604      	mov	r4, r0

	SytemCall_4_code(val);
 8008052:	4628      	mov	r0, r5
 8008054:	f001 f859 	bl	800910a <SytemCall_4_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008058:	4620      	mov	r0, r4
 800805a:	f001 fa67 	bl	800952c <vPortResetPrivilege>

}
 800805e:	bd38      	pop	{r3, r4, r5, pc}

08008060 <MPU_SytemCall_5>:

void MPU_SytemCall_5(void *val)
{
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4605      	mov	r5, r0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008064:	f7ff ffcc 	bl	8008000 <xPortRaisePrivilege>
 8008068:	4604      	mov	r4, r0

	SytemCall_5_code(val);
 800806a:	4628      	mov	r0, r5
 800806c:	f001 faee 	bl	800964c <SytemCall_5_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008070:	4620      	mov	r0, r4
 8008072:	f001 fa5b 	bl	800952c <vPortResetPrivilege>

}
 8008076:	bd38      	pop	{r3, r4, r5, pc}

08008078 <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	4604      	mov	r4, r0
 8008080:	460e      	mov	r6, r1
 8008082:	4617      	mov	r7, r2
 8008084:	4698      	mov	r8, r3
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008086:	f7ff ffbb 	bl	8008000 <xPortRaisePrivilege>
 800808a:	4605      	mov	r5, r0

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800808c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4643      	mov	r3, r8
 8008096:	463a      	mov	r2, r7
 8008098:	4631      	mov	r1, r6
 800809a:	4620      	mov	r0, r4
 800809c:	f7fa f8fe 	bl	800229c <xTaskCreate>
 80080a0:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80080a2:	4628      	mov	r0, r5
 80080a4:	f001 fa42 	bl	800952c <vPortResetPrivilege>
        return xReturn;
    }
 80080a8:	4620      	mov	r0, r4
 80080aa:	b002      	add	sp, #8
 80080ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080b0 <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	4604      	mov	r4, r0
 80080b8:	460e      	mov	r6, r1
 80080ba:	4617      	mov	r7, r2
 80080bc:	4698      	mov	r8, r3
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080be:	f7ff ff9f 	bl	8008000 <xPortRaisePrivilege>
 80080c2:	4605      	mov	r5, r0

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 80080c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	4643      	mov	r3, r8
 80080d2:	463a      	mov	r2, r7
 80080d4:	4631      	mov	r1, r6
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7fa f913 	bl	8002302 <xTaskCreateStatic>
 80080dc:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80080de:	4628      	mov	r0, r5
 80080e0:	f001 fa24 	bl	800952c <vPortResetPrivilege>
        return xReturn;
    }
 80080e4:	4620      	mov	r0, r4
 80080e6:	b004      	add	sp, #16
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080ec <MPU_vTaskDelete>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4605      	mov	r5, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080f0:	f7ff ff86 	bl	8008000 <xPortRaisePrivilege>
 80080f4:	4604      	mov	r4, r0

        vTaskDelete( pxTaskToDelete );
 80080f6:	4628      	mov	r0, r5
 80080f8:	f7fa f9b6 	bl	8002468 <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 80080fc:	4620      	mov	r0, r4
 80080fe:	f001 fa15 	bl	800952c <vPortResetPrivilege>
    }
 8008102:	bd38      	pop	{r3, r4, r5, pc}

08008104 <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4605      	mov	r5, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008108:	f7ff ff7a 	bl	8008000 <xPortRaisePrivilege>
 800810c:	4604      	mov	r4, r0

        vTaskDelay( xTicksToDelay );
 800810e:	4628      	mov	r0, r5
 8008110:	f7fb f982 	bl	8003418 <vTaskDelay>
        vPortResetPrivilege( xRunningPrivileged );
 8008114:	4620      	mov	r0, r4
 8008116:	f001 fa09 	bl	800952c <vPortResetPrivilege>
    }
 800811a:	bd38      	pop	{r3, r4, r5, pc}

0800811c <MPU_xTaskDelayUntil>:
    {
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008122:	f7ff ff6d 	bl	8008000 <xPortRaisePrivilege>
 8008126:	4605      	mov	r5, r0
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 8008128:	4631      	mov	r1, r6
 800812a:	4620      	mov	r0, r4
 800812c:	f7fb f99a 	bl	8003464 <xTaskDelayUntil>
 8008130:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008132:	4628      	mov	r0, r5
 8008134:	f001 f9fa 	bl	800952c <vPortResetPrivilege>
    }
 8008138:	4620      	mov	r0, r4
 800813a:	bd70      	pop	{r4, r5, r6, pc}

0800813c <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4604      	mov	r4, r0
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008140:	f7ff ff5e 	bl	8008000 <xPortRaisePrivilege>
 8008144:	4605      	mov	r5, r0

        uxReturn = uxTaskPriorityGet( pxTask );
 8008146:	4620      	mov	r0, r4
 8008148:	f7fa f9ea 	bl	8002520 <uxTaskPriorityGet>
 800814c:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800814e:	4628      	mov	r0, r5
 8008150:	f001 f9ec 	bl	800952c <vPortResetPrivilege>
        return uxReturn;
    }
 8008154:	4620      	mov	r0, r4
 8008156:	bd38      	pop	{r3, r4, r5, pc}

08008158 <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800815c:	f7ff ff50 	bl	8008000 <xPortRaisePrivilege>
 8008160:	4605      	mov	r5, r0
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 8008162:	4620      	mov	r0, r4
 8008164:	f7fa fa06 	bl	8002574 <eTaskGetState>
 8008168:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800816a:	4628      	mov	r0, r5
 800816c:	f001 f9de 	bl	800952c <vPortResetPrivilege>
        return eReturn;
    }
 8008170:	4620      	mov	r0, r4
 8008172:	bd38      	pop	{r3, r4, r5, pc}

08008174 <MPU_vTaskGetInfo>:
#if ( configUSE_TRACE_FACILITY == 1 )
    void MPU_vTaskGetInfo( TaskHandle_t xTask,
                           TaskStatus_t * pxTaskStatus,
                           BaseType_t xGetFreeStackSpace,
                           eTaskState eState ) /* FREERTOS_SYSTEM_CALL */
    {
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	4605      	mov	r5, r0
 800817a:	460e      	mov	r6, r1
 800817c:	4617      	mov	r7, r2
 800817e:	4698      	mov	r8, r3
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008180:	f7ff ff3e 	bl	8008000 <xPortRaisePrivilege>
 8008184:	4604      	mov	r4, r0

        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 8008186:	4643      	mov	r3, r8
 8008188:	463a      	mov	r2, r7
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	f7fb f9bf 	bl	8003510 <vTaskGetInfo>
        vPortResetPrivilege( xRunningPrivileged );
 8008192:	4620      	mov	r0, r4
 8008194:	f001 f9ca 	bl	800952c <vPortResetPrivilege>
    }
 8008198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800819c <MPU_vTaskPrioritySet>:
    {
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	4605      	mov	r5, r0
 80081a0:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081a2:	f7ff ff2d 	bl	8008000 <xPortRaisePrivilege>
 80081a6:	4604      	mov	r4, r0
        vTaskPrioritySet( pxTask, uxNewPriority );
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7fa fa2e 	bl	800260c <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 80081b0:	4620      	mov	r0, r4
 80081b2:	f001 f9bb 	bl	800952c <vPortResetPrivilege>
    }
 80081b6:	bd70      	pop	{r4, r5, r6, pc}

080081b8 <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081bc:	f7ff ff20 	bl	8008000 <xPortRaisePrivilege>
 80081c0:	4604      	mov	r4, r0

        vTaskSuspend( pxTaskToSuspend );
 80081c2:	4628      	mov	r0, r5
 80081c4:	f7fb fc90 	bl	8003ae8 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 80081c8:	4620      	mov	r0, r4
 80081ca:	f001 f9af 	bl	800952c <vPortResetPrivilege>
    }
 80081ce:	bd38      	pop	{r3, r4, r5, pc}

080081d0 <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4605      	mov	r5, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081d4:	f7ff ff14 	bl	8008000 <xPortRaisePrivilege>
 80081d8:	4604      	mov	r4, r0

        vTaskResume( pxTaskToResume );
 80081da:	4628      	mov	r0, r5
 80081dc:	f7fa fa9e 	bl	800271c <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 f9a3 	bl	800952c <vPortResetPrivilege>
    }
 80081e6:	bd38      	pop	{r3, r4, r5, pc}

080081e8 <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 80081e8:	b510      	push	{r4, lr}
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081ea:	f7ff ff09 	bl	8008000 <xPortRaisePrivilege>
 80081ee:	4604      	mov	r4, r0

    vTaskSuspendAll();
 80081f0:	f7fa fbba 	bl	8002968 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 80081f4:	4620      	mov	r0, r4
 80081f6:	f001 f999 	bl	800952c <vPortResetPrivilege>
}
 80081fa:	bd10      	pop	{r4, pc}

080081fc <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 80081fc:	b538      	push	{r3, r4, r5, lr}
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081fe:	f7ff feff 	bl	8008000 <xPortRaisePrivilege>
 8008202:	4605      	mov	r5, r0

    xReturn = xTaskResumeAll();
 8008204:	f7fb f846 	bl	8003294 <xTaskResumeAll>
 8008208:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800820a:	4628      	mov	r0, r5
 800820c:	f001 f98e 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 8008210:	4620      	mov	r0, r4
 8008212:	bd38      	pop	{r3, r4, r5, pc}

08008214 <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 8008214:	b538      	push	{r3, r4, r5, lr}
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008216:	f7ff fef3 	bl	8008000 <xPortRaisePrivilege>
 800821a:	4605      	mov	r5, r0

    xReturn = xTaskGetTickCount();
 800821c:	f7fa fbae 	bl	800297c <xTaskGetTickCount>
 8008220:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008222:	4628      	mov	r0, r5
 8008224:	f001 f982 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 8008228:	4620      	mov	r0, r4
 800822a:	bd38      	pop	{r3, r4, r5, pc}

0800822c <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 800822c:	b538      	push	{r3, r4, r5, lr}
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800822e:	f7ff fee7 	bl	8008000 <xPortRaisePrivilege>
 8008232:	4605      	mov	r5, r0

    uxReturn = uxTaskGetNumberOfTasks();
 8008234:	f7fa fbb0 	bl	8002998 <uxTaskGetNumberOfTasks>
 8008238:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800823a:	4628      	mov	r0, r5
 800823c:	f001 f976 	bl	800952c <vPortResetPrivilege>
    return uxReturn;
}
 8008240:	4620      	mov	r0, r4
 8008242:	bd38      	pop	{r3, r4, r5, pc}

08008244 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4604      	mov	r4, r0
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008248:	f7ff feda 	bl	8008000 <xPortRaisePrivilege>
 800824c:	4605      	mov	r5, r0

    pcReturn = pcTaskGetName( xTaskToQuery );
 800824e:	4620      	mov	r0, r4
 8008250:	f7fa fba8 	bl	80029a4 <pcTaskGetName>
 8008254:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008256:	4628      	mov	r0, r5
 8008258:	f001 f968 	bl	800952c <vPortResetPrivilege>
    return pcReturn;
}
 800825c:	4620      	mov	r0, r4
 800825e:	bd38      	pop	{r3, r4, r5, pc}

08008260 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4604      	mov	r4, r0
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008264:	f7ff fecc 	bl	8008000 <xPortRaisePrivilege>
 8008268:	4605      	mov	r5, r0

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 800826a:	4620      	mov	r0, r4
 800826c:	f7fa fbae 	bl	80029cc <uxTaskGetStackHighWaterMark>
 8008270:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008272:	4628      	mov	r0, r5
 8008274:	f001 f95a 	bl	800952c <vPortResetPrivilege>
        return uxReturn;
    }
 8008278:	4620      	mov	r0, r4
 800827a:	bd38      	pop	{r3, r4, r5, pc}

0800827c <MPU_uxTaskGetSystemState>:
    {
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	460e      	mov	r6, r1
 8008282:	4617      	mov	r7, r2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008284:	f7ff febc 	bl	8008000 <xPortRaisePrivilege>
 8008288:	4605      	mov	r5, r0
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 800828a:	463a      	mov	r2, r7
 800828c:	4631      	mov	r1, r6
 800828e:	4620      	mov	r0, r4
 8008290:	f7fb f9bc 	bl	800360c <uxTaskGetSystemState>
 8008294:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008296:	4628      	mov	r0, r5
 8008298:	f001 f948 	bl	800952c <vPortResetPrivilege>
    }
 800829c:	4620      	mov	r0, r4
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082a0 <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 80082a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	4604      	mov	r4, r0
 80082a8:	460e      	mov	r6, r1
 80082aa:	4617      	mov	r7, r2
 80082ac:	4698      	mov	r8, r3
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082ae:	f7ff fea7 	bl	8008000 <xPortRaisePrivilege>
 80082b2:	4605      	mov	r5, r0

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	4643      	mov	r3, r8
 80082ba:	463a      	mov	r2, r7
 80082bc:	4631      	mov	r1, r6
 80082be:	4620      	mov	r0, r4
 80082c0:	f7fa fb9e 	bl	8002a00 <xTaskGenericNotify>
 80082c4:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80082c6:	4628      	mov	r0, r5
 80082c8:	f001 f930 	bl	800952c <vPortResetPrivilege>
        return xReturn;
    }
 80082cc:	4620      	mov	r0, r4
 80082ce:	b002      	add	sp, #8
 80082d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082d4 <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	4604      	mov	r4, r0
 80082dc:	460e      	mov	r6, r1
 80082de:	4617      	mov	r7, r2
 80082e0:	4698      	mov	r8, r3
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082e2:	f7ff fe8d 	bl	8008000 <xPortRaisePrivilege>
 80082e6:	4605      	mov	r5, r0

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4643      	mov	r3, r8
 80082ee:	463a      	mov	r2, r7
 80082f0:	4631      	mov	r1, r6
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fa fd3a 	bl	8002d6c <xTaskGenericNotifyWait>
 80082f8:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80082fa:	4628      	mov	r0, r5
 80082fc:	f001 f916 	bl	800952c <vPortResetPrivilege>
        return xReturn;
    }
 8008300:	4620      	mov	r0, r4
 8008302:	b002      	add	sp, #8
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008308 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	460e      	mov	r6, r1
 800830e:	4617      	mov	r7, r2
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008310:	f7ff fe76 	bl	8008000 <xPortRaisePrivilege>
 8008314:	4605      	mov	r5, r0

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 8008316:	463a      	mov	r2, r7
 8008318:	4631      	mov	r1, r6
 800831a:	4620      	mov	r0, r4
 800831c:	f7fa fe40 	bl	8002fa0 <ulTaskGenericNotifyTake>
 8008320:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008322:	4628      	mov	r0, r5
 8008324:	f001 f902 	bl	800952c <vPortResetPrivilege>
        return ulReturn;
    }
 8008328:	4620      	mov	r0, r4
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800832c <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	460e      	mov	r6, r1
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008332:	f7ff fe65 	bl	8008000 <xPortRaisePrivilege>
 8008336:	4605      	mov	r5, r0

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 8008338:	4631      	mov	r1, r6
 800833a:	4620      	mov	r0, r4
 800833c:	f7fa fe86 	bl	800304c <xTaskGenericNotifyStateClear>
 8008340:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008342:	4628      	mov	r0, r5
 8008344:	f001 f8f2 	bl	800952c <vPortResetPrivilege>
        return xReturn;
    }
 8008348:	4620      	mov	r0, r4
 800834a:	bd70      	pop	{r4, r5, r6, pc}

0800834c <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	4604      	mov	r4, r0
 8008350:	460e      	mov	r6, r1
 8008352:	4617      	mov	r7, r2
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008354:	f7ff fe54 	bl	8008000 <xPortRaisePrivilege>
 8008358:	4605      	mov	r5, r0

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 800835a:	463a      	mov	r2, r7
 800835c:	4631      	mov	r1, r6
 800835e:	4620      	mov	r0, r4
 8008360:	f7fa fe9c 	bl	800309c <ulTaskGenericNotifyValueClear>
 8008364:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008366:	4628      	mov	r0, r5
 8008368:	f001 f8e0 	bl	800952c <vPortResetPrivilege>
        return ulReturn;
    }
 800836c:	4620      	mov	r0, r4
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008370 <MPU_xTaskGetCurrentTaskHandle>:
    {
 8008370:	b538      	push	{r3, r4, r5, lr}
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008372:	f7ff fe45 	bl	8008000 <xPortRaisePrivilege>
 8008376:	4605      	mov	r5, r0
        xReturn = xTaskGetCurrentTaskHandle();
 8008378:	f7fb fc36 	bl	8003be8 <xTaskGetCurrentTaskHandle>
 800837c:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800837e:	4628      	mov	r0, r5
 8008380:	f001 f8d4 	bl	800952c <vPortResetPrivilege>
    }
 8008384:	4620      	mov	r0, r4
 8008386:	bd38      	pop	{r3, r4, r5, pc}

08008388 <MPU_vTaskSetTimeOutState>:
{
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4605      	mov	r5, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800838c:	f7ff fe38 	bl	8008000 <xPortRaisePrivilege>
 8008390:	4604      	mov	r4, r0
    vTaskSetTimeOutState( pxTimeOut );
 8008392:	4628      	mov	r0, r5
 8008394:	f7fa fe9c 	bl	80030d0 <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 8008398:	4620      	mov	r0, r4
 800839a:	f001 f8c7 	bl	800952c <vPortResetPrivilege>
}
 800839e:	bd38      	pop	{r3, r4, r5, pc}

080083a0 <MPU_xTaskCheckForTimeOut>:
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4604      	mov	r4, r0
 80083a4:	460e      	mov	r6, r1
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083a6:	f7ff fe2b 	bl	8008000 <xPortRaisePrivilege>
 80083aa:	4605      	mov	r5, r0
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 80083ac:	4631      	mov	r1, r6
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7fb fd9a 	bl	8003ee8 <xTaskCheckForTimeOut>
 80083b4:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80083b6:	4628      	mov	r0, r5
 80083b8:	f001 f8b8 	bl	800952c <vPortResetPrivilege>
}
 80083bc:	4620      	mov	r0, r4
 80083be:	bd70      	pop	{r4, r5, r6, pc}

080083c0 <MPU_xTaskGetSchedulerState>:
    {
 80083c0:	b538      	push	{r3, r4, r5, lr}
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083c2:	f7ff fe1d 	bl	8008000 <xPortRaisePrivilege>
 80083c6:	4605      	mov	r5, r0
        xReturn = xTaskGetSchedulerState();
 80083c8:	f7fb fc1c 	bl	8003c04 <xTaskGetSchedulerState>
 80083cc:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80083ce:	4628      	mov	r0, r5
 80083d0:	f001 f8ac 	bl	800952c <vPortResetPrivilege>
    }
 80083d4:	4620      	mov	r0, r4
 80083d6:	bd38      	pop	{r3, r4, r5, pc}

080083d8 <MPU_xTaskCatchUpTicks>:
{
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4604      	mov	r4, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083dc:	f7ff fe10 	bl	8008000 <xPortRaisePrivilege>
 80083e0:	4605      	mov	r5, r0
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80083e2:	4620      	mov	r0, r4
 80083e4:	f7fb f964 	bl	80036b0 <xTaskCatchUpTicks>
 80083e8:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80083ea:	4628      	mov	r0, r5
 80083ec:	f001 f89e 	bl	800952c <vPortResetPrivilege>
}
 80083f0:	4620      	mov	r0, r4
 80083f2:	bd38      	pop	{r3, r4, r5, pc}

080083f4 <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	4604      	mov	r4, r0
 80083fa:	460e      	mov	r6, r1
 80083fc:	4617      	mov	r7, r2
 80083fe:	4698      	mov	r8, r3
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008400:	f7ff fdfe 	bl	8008000 <xPortRaisePrivilege>
 8008404:	4605      	mov	r5, r0

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008406:	4643      	mov	r3, r8
 8008408:	463a      	mov	r2, r7
 800840a:	4631      	mov	r1, r6
 800840c:	4620      	mov	r0, r4
 800840e:	f7f8 fa0c 	bl	800082a <xQueueGenericSend>
 8008412:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008414:	4628      	mov	r0, r5
 8008416:	f001 f889 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 800841a:	4620      	mov	r0, r4
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008420 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	4604      	mov	r4, r0
 8008424:	460e      	mov	r6, r1
 8008426:	4617      	mov	r7, r2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008428:	f7ff fdea 	bl	8008000 <xPortRaisePrivilege>
 800842c:	4605      	mov	r5, r0
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 800842e:	463a      	mov	r2, r7
 8008430:	4631      	mov	r1, r6
 8008432:	4620      	mov	r0, r4
 8008434:	f7f8 fbc0 	bl	8000bb8 <xQueueReceive>
 8008438:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800843a:	4628      	mov	r0, r5
 800843c:	f001 f876 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 8008440:	4620      	mov	r0, r4
 8008442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008444 <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	4604      	mov	r4, r0
 8008448:	460e      	mov	r6, r1
 800844a:	4617      	mov	r7, r2
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800844c:	f7ff fdd8 	bl	8008000 <xPortRaisePrivilege>
 8008450:	4605      	mov	r5, r0
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008452:	463a      	mov	r2, r7
 8008454:	4631      	mov	r1, r6
 8008456:	4620      	mov	r0, r4
 8008458:	f7f8 fac1 	bl	80009de <xQueuePeek>
 800845c:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800845e:	4628      	mov	r0, r5
 8008460:	f001 f864 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 8008464:	4620      	mov	r0, r4
 8008466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008468 <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4604      	mov	r4, r0
 800846c:	460e      	mov	r6, r1
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800846e:	f7ff fdc7 	bl	8008000 <xPortRaisePrivilege>
 8008472:	4605      	mov	r5, r0
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 8008474:	4631      	mov	r1, r6
 8008476:	4620      	mov	r0, r4
 8008478:	f7f8 fdd7 	bl	800102a <xQueueSemaphoreTake>
 800847c:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800847e:	4628      	mov	r0, r5
 8008480:	f001 f854 	bl	800952c <vPortResetPrivilege>
    return xReturn;
}
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}

08008488 <MPU_uxQueueMessagesWaiting>:
{
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4604      	mov	r4, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800848c:	f7ff fdb8 	bl	8008000 <xPortRaisePrivilege>
 8008490:	4605      	mov	r5, r0
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 8008492:	4620      	mov	r0, r4
 8008494:	f7f8 fc44 	bl	8000d20 <uxQueueMessagesWaiting>
 8008498:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800849a:	4628      	mov	r0, r5
 800849c:	f001 f846 	bl	800952c <vPortResetPrivilege>
}
 80084a0:	4620      	mov	r0, r4
 80084a2:	bd38      	pop	{r3, r4, r5, pc}

080084a4 <MPU_uxQueueSpacesAvailable>:
{
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4604      	mov	r4, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084a8:	f7ff fdaa 	bl	8008000 <xPortRaisePrivilege>
 80084ac:	4605      	mov	r5, r0
    uxReturn = uxQueueSpacesAvailable( xQueue );
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7f8 fc49 	bl	8000d46 <uxQueueSpacesAvailable>
 80084b4:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80084b6:	4628      	mov	r0, r5
 80084b8:	f001 f838 	bl	800952c <vPortResetPrivilege>
}
 80084bc:	4620      	mov	r0, r4
 80084be:	bd38      	pop	{r3, r4, r5, pc}

080084c0 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4605      	mov	r5, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084c4:	f7ff fd9c 	bl	8008000 <xPortRaisePrivilege>
 80084c8:	4604      	mov	r4, r0

    vQueueDelete( xQueue );
 80084ca:	4628      	mov	r0, r5
 80084cc:	f7f8 ff34 	bl	8001338 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 80084d0:	4620      	mov	r0, r4
 80084d2:	f001 f82b 	bl	800952c <vPortResetPrivilege>
}
 80084d6:	bd38      	pop	{r3, r4, r5, pc}

080084d8 <MPU_xQueueCreateMutex>:
    {
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084dc:	f7ff fd90 	bl	8008000 <xPortRaisePrivilege>
 80084e0:	4605      	mov	r5, r0
        xReturn = xQueueCreateMutex( ucQueueType );
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7f9 f804 	bl	80014f0 <xQueueCreateMutex>
 80084e8:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80084ea:	4628      	mov	r0, r5
 80084ec:	f001 f81e 	bl	800952c <vPortResetPrivilege>
    }
 80084f0:	4620      	mov	r0, r4
 80084f2:	bd38      	pop	{r3, r4, r5, pc}

080084f4 <MPU_xQueueCreateMutexStatic>:
    {
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4604      	mov	r4, r0
 80084f8:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084fa:	f7ff fd81 	bl	8008000 <xPortRaisePrivilege>
 80084fe:	4605      	mov	r5, r0
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008500:	4631      	mov	r1, r6
 8008502:	4620      	mov	r0, r4
 8008504:	f7f9 f853 	bl	80015ae <xQueueCreateMutexStatic>
 8008508:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800850a:	4628      	mov	r0, r5
 800850c:	f001 f80e 	bl	800952c <vPortResetPrivilege>
    }
 8008510:	4620      	mov	r0, r4
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <MPU_xQueueCreateCountingSemaphore>:
    {
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800851a:	f7ff fd71 	bl	8008000 <xPortRaisePrivilege>
 800851e:	4605      	mov	r5, r0
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 8008520:	4631      	mov	r1, r6
 8008522:	4620      	mov	r0, r4
 8008524:	f7f8 ffef 	bl	8001506 <xQueueCreateCountingSemaphore>
 8008528:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800852a:	4628      	mov	r0, r5
 800852c:	f000 fffe 	bl	800952c <vPortResetPrivilege>
    }
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}

08008534 <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	4604      	mov	r4, r0
 8008538:	460e      	mov	r6, r1
 800853a:	4617      	mov	r7, r2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800853c:	f7ff fd60 	bl	8008000 <xPortRaisePrivilege>
 8008540:	4605      	mov	r5, r0
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 8008542:	463a      	mov	r2, r7
 8008544:	4631      	mov	r1, r6
 8008546:	4620      	mov	r0, r4
 8008548:	f7f9 f840 	bl	80015cc <xQueueCreateCountingSemaphoreStatic>
 800854c:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800854e:	4628      	mov	r0, r5
 8008550:	f000 ffec 	bl	800952c <vPortResetPrivilege>
    }
 8008554:	4620      	mov	r0, r4
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008558 <MPU_xQueueGetMutexHolder>:
    {
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800855c:	f7ff fd50 	bl	8008000 <xPortRaisePrivilege>
 8008560:	4605      	mov	r5, r0
        xReturn = xQueueGetMutexHolder( xSemaphore );
 8008562:	4620      	mov	r0, r4
 8008564:	f7f8 fe36 	bl	80011d4 <xQueueGetMutexHolder>
 8008568:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800856a:	4628      	mov	r0, r5
 800856c:	f000 ffde 	bl	800952c <vPortResetPrivilege>
    }
 8008570:	4620      	mov	r0, r4
 8008572:	bd38      	pop	{r3, r4, r5, pc}

08008574 <MPU_xQueueTakeMutexRecursive>:
    {
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4604      	mov	r4, r0
 8008578:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800857a:	f7ff fd41 	bl	8008000 <xPortRaisePrivilege>
 800857e:	4605      	mov	r5, r0
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 8008580:	4631      	mov	r1, r6
 8008582:	4620      	mov	r0, r4
 8008584:	f7f8 fe4d 	bl	8001222 <xQueueTakeMutexRecursive>
 8008588:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800858a:	4628      	mov	r0, r5
 800858c:	f000 ffce 	bl	800952c <vPortResetPrivilege>
    }
 8008590:	4620      	mov	r0, r4
 8008592:	bd70      	pop	{r4, r5, r6, pc}

08008594 <MPU_xQueueGiveMutexRecursive>:
    {
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008598:	f7ff fd32 	bl	8008000 <xPortRaisePrivilege>
 800859c:	4605      	mov	r5, r0
        xReturn = xQueueGiveMutexRecursive( xMutex );
 800859e:	4620      	mov	r0, r4
 80085a0:	f7f8 fe5f 	bl	8001262 <xQueueGiveMutexRecursive>
 80085a4:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 ffc0 	bl	800952c <vPortResetPrivilege>
    }
 80085ac:	4620      	mov	r0, r4
 80085ae:	bd38      	pop	{r3, r4, r5, pc}

080085b0 <MPU_vQueueAddToRegistry>:
    {
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4605      	mov	r5, r0
 80085b4:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085b6:	f7ff fd23 	bl	8008000 <xPortRaisePrivilege>
 80085ba:	4604      	mov	r4, r0
        vQueueAddToRegistry( xQueue, pcName );
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	f7f8 fe6f 	bl	80012a2 <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 ffb1 	bl	800952c <vPortResetPrivilege>
    }
 80085ca:	bd70      	pop	{r4, r5, r6, pc}

080085cc <MPU_vQueueUnregisterQueue>:
    {
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4605      	mov	r5, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d0:	f7ff fd16 	bl	8008000 <xPortRaisePrivilege>
 80085d4:	4604      	mov	r4, r0
        vQueueUnregisterQueue( xQueue );
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7f8 fe8e 	bl	80012f8 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 ffa5 	bl	800952c <vPortResetPrivilege>
    }
 80085e2:	bd38      	pop	{r3, r4, r5, pc}

080085e4 <MPU_pcQueueGetName>:
    {
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085e8:	f7ff fd0a 	bl	8008000 <xPortRaisePrivilege>
 80085ec:	4605      	mov	r5, r0
        pcReturn = pcQueueGetName( xQueue );
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7f8 feb8 	bl	8001364 <pcQueueGetName>
 80085f4:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 ff98 	bl	800952c <vPortResetPrivilege>
    }
 80085fc:	4620      	mov	r0, r4
 80085fe:	bd38      	pop	{r3, r4, r5, pc}

08008600 <MPU_xQueueGenericCreate>:
    {
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	460e      	mov	r6, r1
 8008606:	4617      	mov	r7, r2
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008608:	f7ff fcfa 	bl	8008000 <xPortRaisePrivilege>
 800860c:	4605      	mov	r5, r0
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 800860e:	463a      	mov	r2, r7
 8008610:	4631      	mov	r1, r6
 8008612:	4620      	mov	r0, r4
 8008614:	f7f8 ff3e 	bl	8001494 <xQueueGenericCreate>
 8008618:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800861a:	4628      	mov	r0, r5
 800861c:	f000 ff86 	bl	800952c <vPortResetPrivilege>
    }
 8008620:	4620      	mov	r0, r4
 8008622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008624 <MPU_xQueueGenericCreateStatic>:
    {
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	4604      	mov	r4, r0
 800862c:	460e      	mov	r6, r1
 800862e:	4617      	mov	r7, r2
 8008630:	4698      	mov	r8, r3
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008632:	f7ff fce5 	bl	8008000 <xPortRaisePrivilege>
 8008636:	4605      	mov	r5, r0
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008638:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	4643      	mov	r3, r8
 8008640:	463a      	mov	r2, r7
 8008642:	4631      	mov	r1, r6
 8008644:	4620      	mov	r0, r4
 8008646:	f7f8 ff73 	bl	8001530 <xQueueGenericCreateStatic>
 800864a:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800864c:	4628      	mov	r0, r5
 800864e:	f000 ff6d 	bl	800952c <vPortResetPrivilege>
    }
 8008652:	4620      	mov	r0, r4
 8008654:	b002      	add	sp, #8
 8008656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800865a <MPU_xQueueGenericReset>:
{
 800865a:	b570      	push	{r4, r5, r6, lr}
 800865c:	4604      	mov	r4, r0
 800865e:	460e      	mov	r6, r1
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008660:	f7ff fcce 	bl	8008000 <xPortRaisePrivilege>
 8008664:	4605      	mov	r5, r0
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 8008666:	4631      	mov	r1, r6
 8008668:	4620      	mov	r0, r4
 800866a:	f7f8 fec2 	bl	80013f2 <xQueueGenericReset>
 800866e:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008670:	4628      	mov	r0, r5
 8008672:	f000 ff5b 	bl	800952c <vPortResetPrivilege>
}
 8008676:	4620      	mov	r0, r4
 8008678:	bd70      	pop	{r4, r5, r6, pc}

0800867a <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 800867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	4604      	mov	r4, r0
 8008682:	460e      	mov	r6, r1
 8008684:	4617      	mov	r7, r2
 8008686:	4698      	mov	r8, r3
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008688:	f7ff fcba 	bl	8008000 <xPortRaisePrivilege>
 800868c:	4605      	mov	r5, r0

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4643      	mov	r3, r8
 8008694:	463a      	mov	r2, r7
 8008696:	4631      	mov	r1, r6
 8008698:	4620      	mov	r0, r4
 800869a:	f7fb fdd7 	bl	800424c <xTimerCreate>
 800869e:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 ff43 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 80086a6:	4620      	mov	r0, r4
 80086a8:	b002      	add	sp, #8
 80086aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086ae <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	4604      	mov	r4, r0
 80086b6:	460e      	mov	r6, r1
 80086b8:	4617      	mov	r7, r2
 80086ba:	4698      	mov	r8, r3
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086bc:	f7ff fca0 	bl	8008000 <xPortRaisePrivilege>
 80086c0:	4605      	mov	r5, r0

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	4643      	mov	r3, r8
 80086cc:	463a      	mov	r2, r7
 80086ce:	4631      	mov	r1, r6
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7fb fdea 	bl	80042aa <xTimerCreateStatic>
 80086d6:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 ff27 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 80086de:	4620      	mov	r0, r4
 80086e0:	b002      	add	sp, #8
 80086e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086e6 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80086e6:	b538      	push	{r3, r4, r5, lr}
 80086e8:	4604      	mov	r4, r0
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086ea:	f7ff fc89 	bl	8008000 <xPortRaisePrivilege>
 80086ee:	4605      	mov	r5, r0

        pvReturn = pvTimerGetTimerID( xTimer );
 80086f0:	4620      	mov	r0, r4
 80086f2:	f7fb fe20 	bl	8004336 <pvTimerGetTimerID>
 80086f6:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 ff17 	bl	800952c <vPortResetPrivilege>

        return pvReturn;
    }
 80086fe:	4620      	mov	r0, r4
 8008700:	bd38      	pop	{r3, r4, r5, pc}

08008702 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 8008702:	b570      	push	{r4, r5, r6, lr}
 8008704:	4605      	mov	r5, r0
 8008706:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008708:	f7ff fc7a 	bl	8008000 <xPortRaisePrivilege>
 800870c:	4604      	mov	r4, r0

        vTimerSetTimerID( xTimer, pvNewID );
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	f7fb fe23 	bl	800435c <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008716:	4620      	mov	r0, r4
 8008718:	f000 ff08 	bl	800952c <vPortResetPrivilege>
    }
 800871c:	bd70      	pop	{r4, r5, r6, pc}

0800871e <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 800871e:	b538      	push	{r3, r4, r5, lr}
 8008720:	4604      	mov	r4, r0
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008722:	f7ff fc6d 	bl	8008000 <xPortRaisePrivilege>
 8008726:	4605      	mov	r5, r0

        xReturn = xTimerIsTimerActive( xTimer );
 8008728:	4620      	mov	r0, r4
 800872a:	f7fb fe2a 	bl	8004382 <xTimerIsTimerActive>
 800872e:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008730:	4628      	mov	r0, r5
 8008732:	f000 fefb 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008736:	4620      	mov	r0, r4
 8008738:	bd38      	pop	{r3, r4, r5, pc}

0800873a <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 800873a:	b538      	push	{r3, r4, r5, lr}
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800873c:	f7ff fc60 	bl	8008000 <xPortRaisePrivilege>
 8008740:	4605      	mov	r5, r0

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008742:	f7fb fe34 	bl	80043ae <xTimerGetTimerDaemonTaskHandle>
 8008746:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008748:	4628      	mov	r0, r5
 800874a:	f000 feef 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 800874e:	4620      	mov	r0, r4
 8008750:	bd38      	pop	{r3, r4, r5, pc}

08008752 <MPU_xTimerPendFunctionCall>:
#if ( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
    BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	4604      	mov	r4, r0
 8008758:	460e      	mov	r6, r1
 800875a:	4617      	mov	r7, r2
 800875c:	4698      	mov	r8, r3
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800875e:	f7ff fc4f 	bl	8008000 <xPortRaisePrivilege>
 8008762:	4605      	mov	r5, r0

        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 8008764:	4643      	mov	r3, r8
 8008766:	463a      	mov	r2, r7
 8008768:	4631      	mov	r1, r6
 800876a:	4620      	mov	r0, r4
 800876c:	f7fb fe44 	bl	80043f8 <xTimerPendFunctionCall>
 8008770:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008772:	4628      	mov	r0, r5
 8008774:	f000 feda 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008778:	4620      	mov	r0, r4
 800877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800877e <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 800877e:	b538      	push	{r3, r4, r5, lr}
 8008780:	4604      	mov	r4, r0
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008782:	f7ff fc3d 	bl	8008000 <xPortRaisePrivilege>
 8008786:	4605      	mov	r5, r0

        pcReturn = pcTimerGetName( xTimer );
 8008788:	4620      	mov	r0, r4
 800878a:	f7fb fe55 	bl	8004438 <pcTimerGetName>
 800878e:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008790:	4628      	mov	r0, r5
 8008792:	f000 fecb 	bl	800952c <vPortResetPrivilege>

        return pcReturn;
    }
 8008796:	4620      	mov	r0, r4
 8008798:	bd38      	pop	{r3, r4, r5, pc}

0800879a <MPU_vTimerSetReloadMode>:
    {
 800879a:	b570      	push	{r4, r5, r6, lr}
 800879c:	4605      	mov	r5, r0
 800879e:	460e      	mov	r6, r1
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087a0:	f7ff fc2e 	bl	8008000 <xPortRaisePrivilege>
 80087a4:	4604      	mov	r4, r0
        vTimerSetReloadMode( xTimer, uxAutoReload );
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	f7fb fe51 	bl	8004450 <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 febc 	bl	800952c <vPortResetPrivilege>
    }
 80087b4:	bd70      	pop	{r4, r5, r6, pc}

080087b6 <MPU_uxTimerGetReloadMode>:
    {
 80087b6:	b538      	push	{r3, r4, r5, lr}
 80087b8:	4604      	mov	r4, r0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087ba:	f7ff fc21 	bl	8008000 <xPortRaisePrivilege>
 80087be:	4605      	mov	r5, r0
        uxReturn = uxTimerGetReloadMode( xTimer );
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7fb fe63 	bl	800448c <uxTimerGetReloadMode>
 80087c6:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 feaf 	bl	800952c <vPortResetPrivilege>
    }
 80087ce:	4620      	mov	r0, r4
 80087d0:	bd38      	pop	{r3, r4, r5, pc}

080087d2 <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80087d2:	b538      	push	{r3, r4, r5, lr}
 80087d4:	4604      	mov	r4, r0
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087d6:	f7ff fc13 	bl	8008000 <xPortRaisePrivilege>
 80087da:	4605      	mov	r5, r0

        xReturn = xTimerGetPeriod( xTimer );
 80087dc:	4620      	mov	r0, r4
 80087de:	f7fb fe6b 	bl	80044b8 <xTimerGetPeriod>
 80087e2:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 fea1 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 80087ea:	4620      	mov	r0, r4
 80087ec:	bd38      	pop	{r3, r4, r5, pc}

080087ee <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80087ee:	b538      	push	{r3, r4, r5, lr}
 80087f0:	4604      	mov	r4, r0
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087f2:	f7ff fc05 	bl	8008000 <xPortRaisePrivilege>
 80087f6:	4605      	mov	r5, r0

        xReturn = xTimerGetExpiryTime( xTimer );
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7fb fe69 	bl	80044d0 <xTimerGetExpiryTime>
 80087fe:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008800:	4628      	mov	r0, r5
 8008802:	f000 fe93 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008806:	4620      	mov	r0, r4
 8008808:	bd38      	pop	{r3, r4, r5, pc}

0800880a <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 800880a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	4604      	mov	r4, r0
 8008812:	460e      	mov	r6, r1
 8008814:	4617      	mov	r7, r2
 8008816:	4698      	mov	r8, r3
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008818:	f7ff fbf2 	bl	8008000 <xPortRaisePrivilege>
 800881c:	4605      	mov	r5, r0

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 800881e:	9b08      	ldr	r3, [sp, #32]
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4643      	mov	r3, r8
 8008824:	463a      	mov	r2, r7
 8008826:	4631      	mov	r1, r6
 8008828:	4620      	mov	r0, r4
 800882a:	f7fb fe91 	bl	8004550 <xTimerGenericCommand>
 800882e:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008830:	4628      	mov	r0, r5
 8008832:	f000 fe7b 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008836:	4620      	mov	r0, r4
 8008838:	b002      	add	sp, #8
 800883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800883e <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 800883e:	b538      	push	{r3, r4, r5, lr}
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008840:	f7ff fbde 	bl	8008000 <xPortRaisePrivilege>
 8008844:	4605      	mov	r5, r0

        xReturn = xEventGroupCreate();
 8008846:	f7f7 fd27 	bl	8000298 <xEventGroupCreate>
 800884a:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 800884c:	4628      	mov	r0, r5
 800884e:	f000 fe6d 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008852:	4620      	mov	r0, r4
 8008854:	bd38      	pop	{r3, r4, r5, pc}

08008856 <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008856:	b538      	push	{r3, r4, r5, lr}
 8008858:	4604      	mov	r4, r0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800885a:	f7ff fbd1 	bl	8008000 <xPortRaisePrivilege>
 800885e:	4605      	mov	r5, r0

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008860:	4620      	mov	r0, r4
 8008862:	f7f7 fd27 	bl	80002b4 <xEventGroupCreateStatic>
 8008866:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008868:	4628      	mov	r0, r5
 800886a:	f000 fe5f 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 800886e:	4620      	mov	r0, r4
 8008870:	bd38      	pop	{r3, r4, r5, pc}

08008872 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	4604      	mov	r4, r0
 800887a:	460e      	mov	r6, r1
 800887c:	4617      	mov	r7, r2
 800887e:	4698      	mov	r8, r3
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008880:	f7ff fbbe 	bl	8008000 <xPortRaisePrivilege>
 8008884:	4605      	mov	r5, r0

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4643      	mov	r3, r8
 800888c:	463a      	mov	r2, r7
 800888e:	4631      	mov	r1, r6
 8008890:	4620      	mov	r0, r4
 8008892:	f7f7 fd34 	bl	80002fe <xEventGroupWaitBits>
 8008896:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008898:	4628      	mov	r0, r5
 800889a:	f000 fe47 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 800889e:	4620      	mov	r0, r4
 80088a0:	b002      	add	sp, #8
 80088a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088a6 <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	460e      	mov	r6, r1
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088ac:	f7ff fba8 	bl	8008000 <xPortRaisePrivilege>
 80088b0:	4605      	mov	r5, r0

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 80088b2:	4631      	mov	r1, r6
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7f7 fda8 	bl	800040a <xEventGroupClearBits>
 80088ba:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 fe35 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 80088c2:	4620      	mov	r0, r4
 80088c4:	bd70      	pop	{r4, r5, r6, pc}

080088c6 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	460e      	mov	r6, r1
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088cc:	f7ff fb98 	bl	8008000 <xPortRaisePrivilege>
 80088d0:	4605      	mov	r5, r0

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 80088d2:	4631      	mov	r1, r6
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7f7 fdc9 	bl	800046c <xEventGroupSetBits>
 80088da:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 fe25 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 80088e2:	4620      	mov	r0, r4
 80088e4:	bd70      	pop	{r4, r5, r6, pc}

080088e6 <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 80088e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	4604      	mov	r4, r0
 80088ec:	460e      	mov	r6, r1
 80088ee:	4617      	mov	r7, r2
 80088f0:	4698      	mov	r8, r3
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088f2:	f7ff fb85 	bl	8008000 <xPortRaisePrivilege>
 80088f6:	4605      	mov	r5, r0

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 80088f8:	4643      	mov	r3, r8
 80088fa:	463a      	mov	r2, r7
 80088fc:	4631      	mov	r1, r6
 80088fe:	4620      	mov	r0, r4
 8008900:	f7f7 fe0c 	bl	800051c <xEventGroupSync>
 8008904:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008906:	4628      	mov	r0, r5
 8008908:	f000 fe10 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 800890c:	4620      	mov	r0, r4
 800890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008912 <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008912:	b538      	push	{r3, r4, r5, lr}
 8008914:	4605      	mov	r5, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008916:	f7ff fb73 	bl	8008000 <xPortRaisePrivilege>
 800891a:	4604      	mov	r4, r0

    vEventGroupDelete( xEventGroup );
 800891c:	4628      	mov	r0, r5
 800891e:	f7f7 fe77 	bl	8000610 <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008922:	4620      	mov	r0, r4
 8008924:	f000 fe02 	bl	800952c <vPortResetPrivilege>
}
 8008928:	bd38      	pop	{r3, r4, r5, pc}

0800892a <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 800892a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892e:	4604      	mov	r4, r0
 8008930:	460e      	mov	r6, r1
 8008932:	4617      	mov	r7, r2
 8008934:	4698      	mov	r8, r3
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008936:	f7ff fb63 	bl	8008000 <xPortRaisePrivilege>
 800893a:	4605      	mov	r5, r0

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 800893c:	4643      	mov	r3, r8
 800893e:	463a      	mov	r2, r7
 8008940:	4631      	mov	r1, r6
 8008942:	4620      	mov	r0, r4
 8008944:	f7f9 f88e 	bl	8001a64 <xStreamBufferSend>
 8008948:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 800894a:	4628      	mov	r0, r5
 800894c:	f000 fdee 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 8008950:	4620      	mov	r0, r4
 8008952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008956 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	4604      	mov	r4, r0
 800895c:	460e      	mov	r6, r1
 800895e:	4617      	mov	r7, r2
 8008960:	4698      	mov	r8, r3
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008962:	f7ff fb4d 	bl	8008000 <xPortRaisePrivilege>
 8008966:	4605      	mov	r5, r0

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008968:	4643      	mov	r3, r8
 800896a:	463a      	mov	r2, r7
 800896c:	4631      	mov	r1, r6
 800896e:	4620      	mov	r0, r4
 8008970:	f7f8 ff4a 	bl	8001808 <xStreamBufferReceive>
 8008974:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008976:	4628      	mov	r0, r5
 8008978:	f000 fdd8 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 800897c:	4620      	mov	r0, r4
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008982 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008982:	b538      	push	{r3, r4, r5, lr}
 8008984:	4604      	mov	r4, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008986:	f7ff fb3b 	bl	8008000 <xPortRaisePrivilege>
 800898a:	4605      	mov	r5, r0
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 800898c:	4620      	mov	r0, r4
 800898e:	f7f9 fa72 	bl	8001e76 <xStreamBufferNextMessageLengthBytes>
 8008992:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008994:	4628      	mov	r0, r5
 8008996:	f000 fdc9 	bl	800952c <vPortResetPrivilege>
}
 800899a:	4620      	mov	r0, r4
 800899c:	bd38      	pop	{r3, r4, r5, pc}

0800899e <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 800899e:	b538      	push	{r3, r4, r5, lr}
 80089a0:	4605      	mov	r5, r0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089a2:	f7ff fb2d 	bl	8008000 <xPortRaisePrivilege>
 80089a6:	4604      	mov	r4, r0

    vStreamBufferDelete( xStreamBuffer );
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7f8 fff1 	bl	8001990 <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fdbc 	bl	800952c <vPortResetPrivilege>
}
 80089b4:	bd38      	pop	{r3, r4, r5, pc}

080089b6 <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 80089b6:	b538      	push	{r3, r4, r5, lr}
 80089b8:	4604      	mov	r4, r0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ba:	f7ff fb21 	bl	8008000 <xPortRaisePrivilege>
 80089be:	4605      	mov	r5, r0

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7f9 f934 	bl	8001c2e <xStreamBufferIsFull>
 80089c6:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 fdaf 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 80089ce:	4620      	mov	r0, r4
 80089d0:	bd38      	pop	{r3, r4, r5, pc}

080089d2 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 80089d2:	b538      	push	{r3, r4, r5, lr}
 80089d4:	4604      	mov	r4, r0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089d6:	f7ff fb13 	bl	8008000 <xPortRaisePrivilege>
 80089da:	4605      	mov	r5, r0

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 80089dc:	4620      	mov	r0, r4
 80089de:	f7f8 ffee 	bl	80019be <xStreamBufferIsEmpty>
 80089e2:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 80089e4:	4628      	mov	r0, r5
 80089e6:	f000 fda1 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 80089ea:	4620      	mov	r0, r4
 80089ec:	bd38      	pop	{r3, r4, r5, pc}

080089ee <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 80089ee:	b538      	push	{r3, r4, r5, lr}
 80089f0:	4604      	mov	r4, r0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089f2:	f7ff fb05 	bl	8008000 <xPortRaisePrivilege>
 80089f6:	4605      	mov	r5, r0

    xReturn = xStreamBufferReset( xStreamBuffer );
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7f8 fff1 	bl	80019e0 <xStreamBufferReset>
 80089fe:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 fd93 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 8008a06:	4620      	mov	r0, r4
 8008a08:	bd38      	pop	{r3, r4, r5, pc}

08008a0a <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008a0a:	b538      	push	{r3, r4, r5, lr}
 8008a0c:	4604      	mov	r4, r0
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a0e:	f7ff faf7 	bl	8008000 <xPortRaisePrivilege>
 8008a12:	4605      	mov	r5, r0

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7f9 f80a 	bl	8001a2e <xStreamBufferSpacesAvailable>
 8008a1a:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f000 fd85 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 8008a22:	4620      	mov	r0, r4
 8008a24:	bd38      	pop	{r3, r4, r5, pc}

08008a26 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008a26:	b538      	push	{r3, r4, r5, lr}
 8008a28:	4604      	mov	r4, r0
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a2a:	f7ff fae9 	bl	8008000 <xPortRaisePrivilege>
 8008a2e:	4605      	mov	r5, r0

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7f9 f914 	bl	8001c5e <xStreamBufferBytesAvailable>
 8008a36:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 fd77 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 8008a3e:	4620      	mov	r0, r4
 8008a40:	bd38      	pop	{r3, r4, r5, pc}

08008a42 <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	460e      	mov	r6, r1
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a48:	f7ff fada 	bl	8008000 <xPortRaisePrivilege>
 8008a4c:	4605      	mov	r5, r0

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4620      	mov	r0, r4
 8008a52:	f7f9 f912 	bl	8001c7a <xStreamBufferSetTriggerLevel>
 8008a56:	4604      	mov	r4, r0
    vPortResetPrivilege( xRunningPrivileged );
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 fd67 	bl	800952c <vPortResetPrivilege>

    return xReturn;
}
 8008a5e:	4620      	mov	r0, r4
 8008a60:	bd70      	pop	{r4, r5, r6, pc}

08008a62 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a64:	4604      	mov	r4, r0
 8008a66:	460e      	mov	r6, r1
 8008a68:	4617      	mov	r7, r2
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a6a:	f7ff fac9 	bl	8008000 <xPortRaisePrivilege>
 8008a6e:	4605      	mov	r5, r0

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008a70:	463a      	mov	r2, r7
 8008a72:	4631      	mov	r1, r6
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7f9 f969 	bl	8001d4c <xStreamBufferGenericCreate>
 8008a7a:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 fd55 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008a82:	4620      	mov	r0, r4
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a86 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460e      	mov	r6, r1
 8008a90:	4617      	mov	r7, r2
 8008a92:	4698      	mov	r8, r3
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a94:	f7ff fab4 	bl	8008000 <xPortRaisePrivilege>
 8008a98:	4605      	mov	r5, r0

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4643      	mov	r3, r8
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7f9 f992 	bl	8001dce <xStreamBufferGenericCreateStatic>
 8008aaa:	4604      	mov	r4, r0
        vPortResetPrivilege( xRunningPrivileged );
 8008aac:	4628      	mov	r0, r5
 8008aae:	f000 fd3d 	bl	800952c <vPortResetPrivilege>

        return xReturn;
    }
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	b002      	add	sp, #8
 8008ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008aba <MPU_ASAN_malloc>:
{
 8008aba:	b538      	push	{r3, r4, r5, lr}
 8008abc:	4604      	mov	r4, r0
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008abe:	f7ff fa9f 	bl	8008000 <xPortRaisePrivilege>
 8008ac2:	4605      	mov	r5, r0
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	2108      	movs	r1, #8
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fbd8 	bl	8009280 <Allocate>
 8008ad0:	4604      	mov	r4, r0
	vPortResetPrivilege( xRunningPrivileged );
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fd2a 	bl	800952c <vPortResetPrivilege>
}
 8008ad8:	4620      	mov	r0, r4
 8008ada:	bd38      	pop	{r3, r4, r5, pc}

08008adc <MPU_ASAN_free>:
{
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4605      	mov	r5, r0
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ae0:	f7ff fa8e 	bl	8008000 <xPortRaisePrivilege>
 8008ae4:	4604      	mov	r4, r0
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4611      	mov	r1, r2
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 fcfd 	bl	80094ec <Deallocate>
	vPortResetPrivilege( xRunningPrivileged );
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fd1a 	bl	800952c <vPortResetPrivilege>
}
 8008af8:	bd38      	pop	{r3, r4, r5, pc}

08008afa <MPU_ASAN_flush_alloc>:
{
 8008afa:	b508      	push	{r3, lr}
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008afc:	f7ff fa80 	bl	8008000 <xPortRaisePrivilege>
	vPortResetPrivilege( xRunningPrivileged );
 8008b00:	f000 fd14 	bl	800952c <vPortResetPrivilege>
}
 8008b04:	bd08      	pop	{r3, pc}

08008b06 <__syscalls_flash_end__>:
	...

08008b08 <__do_global_dtors_aux>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4c05      	ldr	r4, [pc, #20]	; (8008b20 <__do_global_dtors_aux+0x18>)
 8008b0c:	7823      	ldrb	r3, [r4, #0]
 8008b0e:	b933      	cbnz	r3, 8008b1e <__do_global_dtors_aux+0x16>
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <__do_global_dtors_aux+0x1c>)
 8008b12:	b113      	cbz	r3, 8008b1a <__do_global_dtors_aux+0x12>
 8008b14:	4804      	ldr	r0, [pc, #16]	; (8008b28 <__do_global_dtors_aux+0x20>)
 8008b16:	f3af 8000 	nop.w
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	7023      	strb	r3, [r4, #0]
 8008b1e:	bd10      	pop	{r4, pc}
 8008b20:	24010000 	.word	0x24010000
 8008b24:	00000000 	.word	0x00000000
 8008b28:	08016a10 	.word	0x08016a10

08008b2c <frame_dummy>:
 8008b2c:	b508      	push	{r3, lr}
 8008b2e:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <frame_dummy+0x10>)
 8008b30:	b11b      	cbz	r3, 8008b3a <frame_dummy+0xe>
 8008b32:	4903      	ldr	r1, [pc, #12]	; (8008b40 <frame_dummy+0x14>)
 8008b34:	4803      	ldr	r0, [pc, #12]	; (8008b44 <frame_dummy+0x18>)
 8008b36:	f3af 8000 	nop.w
 8008b3a:	bd08      	pop	{r3, pc}
 8008b3c:	00000000 	.word	0x00000000
 8008b40:	24010004 	.word	0x24010004
 8008b44:	08016a10 	.word	0x08016a10

08008b48 <memcpy>:
 8008b48:	4684      	mov	ip, r0
 8008b4a:	ea41 0300 	orr.w	r3, r1, r0
 8008b4e:	f013 0303 	ands.w	r3, r3, #3
 8008b52:	d16d      	bne.n	8008c30 <memcpy+0xe8>
 8008b54:	3a40      	subs	r2, #64	; 0x40
 8008b56:	d341      	bcc.n	8008bdc <memcpy+0x94>
 8008b58:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b5c:	f840 3b04 	str.w	r3, [r0], #4
 8008b60:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b64:	f840 3b04 	str.w	r3, [r0], #4
 8008b68:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b6c:	f840 3b04 	str.w	r3, [r0], #4
 8008b70:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b74:	f840 3b04 	str.w	r3, [r0], #4
 8008b78:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b7c:	f840 3b04 	str.w	r3, [r0], #4
 8008b80:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b84:	f840 3b04 	str.w	r3, [r0], #4
 8008b88:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b8c:	f840 3b04 	str.w	r3, [r0], #4
 8008b90:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b94:	f840 3b04 	str.w	r3, [r0], #4
 8008b98:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008ba4:	f840 3b04 	str.w	r3, [r0], #4
 8008ba8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bac:	f840 3b04 	str.w	r3, [r0], #4
 8008bb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bb4:	f840 3b04 	str.w	r3, [r0], #4
 8008bb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bbc:	f840 3b04 	str.w	r3, [r0], #4
 8008bc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bc4:	f840 3b04 	str.w	r3, [r0], #4
 8008bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bcc:	f840 3b04 	str.w	r3, [r0], #4
 8008bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bd4:	f840 3b04 	str.w	r3, [r0], #4
 8008bd8:	3a40      	subs	r2, #64	; 0x40
 8008bda:	d2bd      	bcs.n	8008b58 <memcpy+0x10>
 8008bdc:	3230      	adds	r2, #48	; 0x30
 8008bde:	d311      	bcc.n	8008c04 <memcpy+0xbc>
 8008be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bec:	f840 3b04 	str.w	r3, [r0], #4
 8008bf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bf4:	f840 3b04 	str.w	r3, [r0], #4
 8008bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8008bfc:	f840 3b04 	str.w	r3, [r0], #4
 8008c00:	3a10      	subs	r2, #16
 8008c02:	d2ed      	bcs.n	8008be0 <memcpy+0x98>
 8008c04:	320c      	adds	r2, #12
 8008c06:	d305      	bcc.n	8008c14 <memcpy+0xcc>
 8008c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8008c0c:	f840 3b04 	str.w	r3, [r0], #4
 8008c10:	3a04      	subs	r2, #4
 8008c12:	d2f9      	bcs.n	8008c08 <memcpy+0xc0>
 8008c14:	3204      	adds	r2, #4
 8008c16:	d008      	beq.n	8008c2a <memcpy+0xe2>
 8008c18:	07d2      	lsls	r2, r2, #31
 8008c1a:	bf1c      	itt	ne
 8008c1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8008c20:	f800 3b01 	strbne.w	r3, [r0], #1
 8008c24:	d301      	bcc.n	8008c2a <memcpy+0xe2>
 8008c26:	880b      	ldrh	r3, [r1, #0]
 8008c28:	8003      	strh	r3, [r0, #0]
 8008c2a:	4660      	mov	r0, ip
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	2a08      	cmp	r2, #8
 8008c32:	d313      	bcc.n	8008c5c <memcpy+0x114>
 8008c34:	078b      	lsls	r3, r1, #30
 8008c36:	d08d      	beq.n	8008b54 <memcpy+0xc>
 8008c38:	f010 0303 	ands.w	r3, r0, #3
 8008c3c:	d08a      	beq.n	8008b54 <memcpy+0xc>
 8008c3e:	f1c3 0304 	rsb	r3, r3, #4
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	07db      	lsls	r3, r3, #31
 8008c46:	bf1c      	itt	ne
 8008c48:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8008c4c:	f800 3b01 	strbne.w	r3, [r0], #1
 8008c50:	d380      	bcc.n	8008b54 <memcpy+0xc>
 8008c52:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008c56:	f820 3b02 	strh.w	r3, [r0], #2
 8008c5a:	e77b      	b.n	8008b54 <memcpy+0xc>
 8008c5c:	3a04      	subs	r2, #4
 8008c5e:	d3d9      	bcc.n	8008c14 <memcpy+0xcc>
 8008c60:	3a01      	subs	r2, #1
 8008c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c66:	f800 3b01 	strb.w	r3, [r0], #1
 8008c6a:	d2f9      	bcs.n	8008c60 <memcpy+0x118>
 8008c6c:	780b      	ldrb	r3, [r1, #0]
 8008c6e:	7003      	strb	r3, [r0, #0]
 8008c70:	784b      	ldrb	r3, [r1, #1]
 8008c72:	7043      	strb	r3, [r0, #1]
 8008c74:	788b      	ldrb	r3, [r1, #2]
 8008c76:	7083      	strb	r3, [r0, #2]
 8008c78:	4660      	mov	r0, ip
 8008c7a:	4770      	bx	lr
 8008c7c:	0000      	movs	r0, r0
	...

08008c80 <strlen>:
 8008c80:	f890 f000 	pld	[r0]
 8008c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8008c88:	f020 0107 	bic.w	r1, r0, #7
 8008c8c:	f06f 0c00 	mvn.w	ip, #0
 8008c90:	f010 0407 	ands.w	r4, r0, #7
 8008c94:	f891 f020 	pld	[r1, #32]
 8008c98:	f040 8049 	bne.w	8008d2e <strlen+0xae>
 8008c9c:	f04f 0400 	mov.w	r4, #0
 8008ca0:	f06f 0007 	mvn.w	r0, #7
 8008ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008ca8:	f891 f040 	pld	[r1, #64]	; 0x40
 8008cac:	f100 0008 	add.w	r0, r0, #8
 8008cb0:	fa82 f24c 	uadd8	r2, r2, ip
 8008cb4:	faa4 f28c 	sel	r2, r4, ip
 8008cb8:	fa83 f34c 	uadd8	r3, r3, ip
 8008cbc:	faa2 f38c 	sel	r3, r2, ip
 8008cc0:	bb4b      	cbnz	r3, 8008d16 <strlen+0x96>
 8008cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008cc6:	fa82 f24c 	uadd8	r2, r2, ip
 8008cca:	f100 0008 	add.w	r0, r0, #8
 8008cce:	faa4 f28c 	sel	r2, r4, ip
 8008cd2:	fa83 f34c 	uadd8	r3, r3, ip
 8008cd6:	faa2 f38c 	sel	r3, r2, ip
 8008cda:	b9e3      	cbnz	r3, 8008d16 <strlen+0x96>
 8008cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8008ce0:	fa82 f24c 	uadd8	r2, r2, ip
 8008ce4:	f100 0008 	add.w	r0, r0, #8
 8008ce8:	faa4 f28c 	sel	r2, r4, ip
 8008cec:	fa83 f34c 	uadd8	r3, r3, ip
 8008cf0:	faa2 f38c 	sel	r3, r2, ip
 8008cf4:	b97b      	cbnz	r3, 8008d16 <strlen+0x96>
 8008cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8008cfa:	f101 0120 	add.w	r1, r1, #32
 8008cfe:	fa82 f24c 	uadd8	r2, r2, ip
 8008d02:	f100 0008 	add.w	r0, r0, #8
 8008d06:	faa4 f28c 	sel	r2, r4, ip
 8008d0a:	fa83 f34c 	uadd8	r3, r3, ip
 8008d0e:	faa2 f38c 	sel	r3, r2, ip
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c6      	beq.n	8008ca4 <strlen+0x24>
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	bf04      	itt	eq
 8008d1a:	3004      	addeq	r0, #4
 8008d1c:	461a      	moveq	r2, r3
 8008d1e:	ba12      	rev	r2, r2
 8008d20:	fab2 f282 	clz	r2, r2
 8008d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8008d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8008d2c:	4770      	bx	lr
 8008d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008d32:	f004 0503 	and.w	r5, r4, #3
 8008d36:	f1c4 0000 	rsb	r0, r4, #0
 8008d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8008d3e:	f014 0f04 	tst.w	r4, #4
 8008d42:	f891 f040 	pld	[r1, #64]	; 0x40
 8008d46:	fa0c f505 	lsl.w	r5, ip, r5
 8008d4a:	ea62 0205 	orn	r2, r2, r5
 8008d4e:	bf1c      	itt	ne
 8008d50:	ea63 0305 	ornne	r3, r3, r5
 8008d54:	4662      	movne	r2, ip
 8008d56:	f04f 0400 	mov.w	r4, #0
 8008d5a:	e7a9      	b.n	8008cb0 <strlen+0x30>
 8008d5c:	0000      	movs	r0, r0
	...

08008d60 <memchr>:
 8008d60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008d64:	2a10      	cmp	r2, #16
 8008d66:	db2b      	blt.n	8008dc0 <memchr+0x60>
 8008d68:	f010 0f07 	tst.w	r0, #7
 8008d6c:	d008      	beq.n	8008d80 <memchr+0x20>
 8008d6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d72:	3a01      	subs	r2, #1
 8008d74:	428b      	cmp	r3, r1
 8008d76:	d02d      	beq.n	8008dd4 <memchr+0x74>
 8008d78:	f010 0f07 	tst.w	r0, #7
 8008d7c:	b342      	cbz	r2, 8008dd0 <memchr+0x70>
 8008d7e:	d1f6      	bne.n	8008d6e <memchr+0xe>
 8008d80:	b4f0      	push	{r4, r5, r6, r7}
 8008d82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008d86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008d8a:	f022 0407 	bic.w	r4, r2, #7
 8008d8e:	f07f 0700 	mvns.w	r7, #0
 8008d92:	2300      	movs	r3, #0
 8008d94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008d98:	3c08      	subs	r4, #8
 8008d9a:	ea85 0501 	eor.w	r5, r5, r1
 8008d9e:	ea86 0601 	eor.w	r6, r6, r1
 8008da2:	fa85 f547 	uadd8	r5, r5, r7
 8008da6:	faa3 f587 	sel	r5, r3, r7
 8008daa:	fa86 f647 	uadd8	r6, r6, r7
 8008dae:	faa5 f687 	sel	r6, r5, r7
 8008db2:	b98e      	cbnz	r6, 8008dd8 <memchr+0x78>
 8008db4:	d1ee      	bne.n	8008d94 <memchr+0x34>
 8008db6:	bcf0      	pop	{r4, r5, r6, r7}
 8008db8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008dbc:	f002 0207 	and.w	r2, r2, #7
 8008dc0:	b132      	cbz	r2, 8008dd0 <memchr+0x70>
 8008dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008dc6:	3a01      	subs	r2, #1
 8008dc8:	ea83 0301 	eor.w	r3, r3, r1
 8008dcc:	b113      	cbz	r3, 8008dd4 <memchr+0x74>
 8008dce:	d1f8      	bne.n	8008dc2 <memchr+0x62>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	4770      	bx	lr
 8008dd4:	3801      	subs	r0, #1
 8008dd6:	4770      	bx	lr
 8008dd8:	2d00      	cmp	r5, #0
 8008dda:	bf06      	itte	eq
 8008ddc:	4635      	moveq	r5, r6
 8008dde:	3803      	subeq	r0, #3
 8008de0:	3807      	subne	r0, #7
 8008de2:	f015 0f01 	tst.w	r5, #1
 8008de6:	d107      	bne.n	8008df8 <memchr+0x98>
 8008de8:	3001      	adds	r0, #1
 8008dea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008dee:	bf02      	ittt	eq
 8008df0:	3001      	addeq	r0, #1
 8008df2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008df6:	3001      	addeq	r0, #1
 8008df8:	bcf0      	pop	{r4, r5, r6, r7}
 8008dfa:	3801      	subs	r0, #1
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop

08008e00 <__aeabi_uldivmod>:
 8008e00:	b953      	cbnz	r3, 8008e18 <__aeabi_uldivmod+0x18>
 8008e02:	b94a      	cbnz	r2, 8008e18 <__aeabi_uldivmod+0x18>
 8008e04:	2900      	cmp	r1, #0
 8008e06:	bf08      	it	eq
 8008e08:	2800      	cmpeq	r0, #0
 8008e0a:	bf1c      	itt	ne
 8008e0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008e10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008e14:	f000 b974 	b.w	8009100 <__aeabi_idiv0>
 8008e18:	f1ad 0c08 	sub.w	ip, sp, #8
 8008e1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008e20:	f000 f806 	bl	8008e30 <__udivmoddi4>
 8008e24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e2c:	b004      	add	sp, #16
 8008e2e:	4770      	bx	lr

08008e30 <__udivmoddi4>:
 8008e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	9d08      	ldr	r5, [sp, #32]
 8008e36:	4604      	mov	r4, r0
 8008e38:	468e      	mov	lr, r1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d14d      	bne.n	8008eda <__udivmoddi4+0xaa>
 8008e3e:	428a      	cmp	r2, r1
 8008e40:	4694      	mov	ip, r2
 8008e42:	d969      	bls.n	8008f18 <__udivmoddi4+0xe8>
 8008e44:	fab2 f282 	clz	r2, r2
 8008e48:	b152      	cbz	r2, 8008e60 <__udivmoddi4+0x30>
 8008e4a:	fa01 f302 	lsl.w	r3, r1, r2
 8008e4e:	f1c2 0120 	rsb	r1, r2, #32
 8008e52:	fa20 f101 	lsr.w	r1, r0, r1
 8008e56:	fa0c fc02 	lsl.w	ip, ip, r2
 8008e5a:	ea41 0e03 	orr.w	lr, r1, r3
 8008e5e:	4094      	lsls	r4, r2
 8008e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008e64:	0c21      	lsrs	r1, r4, #16
 8008e66:	fbbe f6f8 	udiv	r6, lr, r8
 8008e6a:	fa1f f78c 	uxth.w	r7, ip
 8008e6e:	fb08 e316 	mls	r3, r8, r6, lr
 8008e72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e76:	fb06 f107 	mul.w	r1, r6, r7
 8008e7a:	4299      	cmp	r1, r3
 8008e7c:	d90a      	bls.n	8008e94 <__udivmoddi4+0x64>
 8008e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8008e82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008e86:	f080 811f 	bcs.w	80090c8 <__udivmoddi4+0x298>
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	f240 811c 	bls.w	80090c8 <__udivmoddi4+0x298>
 8008e90:	3e02      	subs	r6, #2
 8008e92:	4463      	add	r3, ip
 8008e94:	1a5b      	subs	r3, r3, r1
 8008e96:	b2a4      	uxth	r4, r4
 8008e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8008e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8008ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008ea4:	fb00 f707 	mul.w	r7, r0, r7
 8008ea8:	42a7      	cmp	r7, r4
 8008eaa:	d90a      	bls.n	8008ec2 <__udivmoddi4+0x92>
 8008eac:	eb1c 0404 	adds.w	r4, ip, r4
 8008eb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008eb4:	f080 810a 	bcs.w	80090cc <__udivmoddi4+0x29c>
 8008eb8:	42a7      	cmp	r7, r4
 8008eba:	f240 8107 	bls.w	80090cc <__udivmoddi4+0x29c>
 8008ebe:	4464      	add	r4, ip
 8008ec0:	3802      	subs	r0, #2
 8008ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008ec6:	1be4      	subs	r4, r4, r7
 8008ec8:	2600      	movs	r6, #0
 8008eca:	b11d      	cbz	r5, 8008ed4 <__udivmoddi4+0xa4>
 8008ecc:	40d4      	lsrs	r4, r2
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eda:	428b      	cmp	r3, r1
 8008edc:	d909      	bls.n	8008ef2 <__udivmoddi4+0xc2>
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	f000 80ef 	beq.w	80090c2 <__udivmoddi4+0x292>
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	e9c5 0100 	strd	r0, r1, [r5]
 8008eea:	4630      	mov	r0, r6
 8008eec:	4631      	mov	r1, r6
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	fab3 f683 	clz	r6, r3
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d14a      	bne.n	8008f90 <__udivmoddi4+0x160>
 8008efa:	428b      	cmp	r3, r1
 8008efc:	d302      	bcc.n	8008f04 <__udivmoddi4+0xd4>
 8008efe:	4282      	cmp	r2, r0
 8008f00:	f200 80f9 	bhi.w	80090f6 <__udivmoddi4+0x2c6>
 8008f04:	1a84      	subs	r4, r0, r2
 8008f06:	eb61 0303 	sbc.w	r3, r1, r3
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	d0e0      	beq.n	8008ed4 <__udivmoddi4+0xa4>
 8008f12:	e9c5 4e00 	strd	r4, lr, [r5]
 8008f16:	e7dd      	b.n	8008ed4 <__udivmoddi4+0xa4>
 8008f18:	b902      	cbnz	r2, 8008f1c <__udivmoddi4+0xec>
 8008f1a:	deff      	udf	#255	; 0xff
 8008f1c:	fab2 f282 	clz	r2, r2
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	f040 8092 	bne.w	800904a <__udivmoddi4+0x21a>
 8008f26:	eba1 010c 	sub.w	r1, r1, ip
 8008f2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008f2e:	fa1f fe8c 	uxth.w	lr, ip
 8008f32:	2601      	movs	r6, #1
 8008f34:	0c20      	lsrs	r0, r4, #16
 8008f36:	fbb1 f3f7 	udiv	r3, r1, r7
 8008f3a:	fb07 1113 	mls	r1, r7, r3, r1
 8008f3e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008f42:	fb0e f003 	mul.w	r0, lr, r3
 8008f46:	4288      	cmp	r0, r1
 8008f48:	d908      	bls.n	8008f5c <__udivmoddi4+0x12c>
 8008f4a:	eb1c 0101 	adds.w	r1, ip, r1
 8008f4e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008f52:	d202      	bcs.n	8008f5a <__udivmoddi4+0x12a>
 8008f54:	4288      	cmp	r0, r1
 8008f56:	f200 80cb 	bhi.w	80090f0 <__udivmoddi4+0x2c0>
 8008f5a:	4643      	mov	r3, r8
 8008f5c:	1a09      	subs	r1, r1, r0
 8008f5e:	b2a4      	uxth	r4, r4
 8008f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8008f64:	fb07 1110 	mls	r1, r7, r0, r1
 8008f68:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008f6c:	fb0e fe00 	mul.w	lr, lr, r0
 8008f70:	45a6      	cmp	lr, r4
 8008f72:	d908      	bls.n	8008f86 <__udivmoddi4+0x156>
 8008f74:	eb1c 0404 	adds.w	r4, ip, r4
 8008f78:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8008f7c:	d202      	bcs.n	8008f84 <__udivmoddi4+0x154>
 8008f7e:	45a6      	cmp	lr, r4
 8008f80:	f200 80bb 	bhi.w	80090fa <__udivmoddi4+0x2ca>
 8008f84:	4608      	mov	r0, r1
 8008f86:	eba4 040e 	sub.w	r4, r4, lr
 8008f8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008f8e:	e79c      	b.n	8008eca <__udivmoddi4+0x9a>
 8008f90:	f1c6 0720 	rsb	r7, r6, #32
 8008f94:	40b3      	lsls	r3, r6
 8008f96:	fa22 fc07 	lsr.w	ip, r2, r7
 8008f9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8008f9e:	fa20 f407 	lsr.w	r4, r0, r7
 8008fa2:	fa01 f306 	lsl.w	r3, r1, r6
 8008fa6:	431c      	orrs	r4, r3
 8008fa8:	40f9      	lsrs	r1, r7
 8008faa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008fae:	fa00 f306 	lsl.w	r3, r0, r6
 8008fb2:	fbb1 f8f9 	udiv	r8, r1, r9
 8008fb6:	0c20      	lsrs	r0, r4, #16
 8008fb8:	fa1f fe8c 	uxth.w	lr, ip
 8008fbc:	fb09 1118 	mls	r1, r9, r8, r1
 8008fc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008fc4:	fb08 f00e 	mul.w	r0, r8, lr
 8008fc8:	4288      	cmp	r0, r1
 8008fca:	fa02 f206 	lsl.w	r2, r2, r6
 8008fce:	d90b      	bls.n	8008fe8 <__udivmoddi4+0x1b8>
 8008fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8008fd4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008fd8:	f080 8088 	bcs.w	80090ec <__udivmoddi4+0x2bc>
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	f240 8085 	bls.w	80090ec <__udivmoddi4+0x2bc>
 8008fe2:	f1a8 0802 	sub.w	r8, r8, #2
 8008fe6:	4461      	add	r1, ip
 8008fe8:	1a09      	subs	r1, r1, r0
 8008fea:	b2a4      	uxth	r4, r4
 8008fec:	fbb1 f0f9 	udiv	r0, r1, r9
 8008ff0:	fb09 1110 	mls	r1, r9, r0, r1
 8008ff4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008ff8:	fb00 fe0e 	mul.w	lr, r0, lr
 8008ffc:	458e      	cmp	lr, r1
 8008ffe:	d908      	bls.n	8009012 <__udivmoddi4+0x1e2>
 8009000:	eb1c 0101 	adds.w	r1, ip, r1
 8009004:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8009008:	d26c      	bcs.n	80090e4 <__udivmoddi4+0x2b4>
 800900a:	458e      	cmp	lr, r1
 800900c:	d96a      	bls.n	80090e4 <__udivmoddi4+0x2b4>
 800900e:	3802      	subs	r0, #2
 8009010:	4461      	add	r1, ip
 8009012:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8009016:	fba0 9402 	umull	r9, r4, r0, r2
 800901a:	eba1 010e 	sub.w	r1, r1, lr
 800901e:	42a1      	cmp	r1, r4
 8009020:	46c8      	mov	r8, r9
 8009022:	46a6      	mov	lr, r4
 8009024:	d356      	bcc.n	80090d4 <__udivmoddi4+0x2a4>
 8009026:	d053      	beq.n	80090d0 <__udivmoddi4+0x2a0>
 8009028:	b15d      	cbz	r5, 8009042 <__udivmoddi4+0x212>
 800902a:	ebb3 0208 	subs.w	r2, r3, r8
 800902e:	eb61 010e 	sbc.w	r1, r1, lr
 8009032:	fa01 f707 	lsl.w	r7, r1, r7
 8009036:	fa22 f306 	lsr.w	r3, r2, r6
 800903a:	40f1      	lsrs	r1, r6
 800903c:	431f      	orrs	r7, r3
 800903e:	e9c5 7100 	strd	r7, r1, [r5]
 8009042:	2600      	movs	r6, #0
 8009044:	4631      	mov	r1, r6
 8009046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904a:	f1c2 0320 	rsb	r3, r2, #32
 800904e:	40d8      	lsrs	r0, r3
 8009050:	fa0c fc02 	lsl.w	ip, ip, r2
 8009054:	fa21 f303 	lsr.w	r3, r1, r3
 8009058:	4091      	lsls	r1, r2
 800905a:	4301      	orrs	r1, r0
 800905c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009060:	fa1f fe8c 	uxth.w	lr, ip
 8009064:	fbb3 f0f7 	udiv	r0, r3, r7
 8009068:	fb07 3610 	mls	r6, r7, r0, r3
 800906c:	0c0b      	lsrs	r3, r1, #16
 800906e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009072:	fb00 f60e 	mul.w	r6, r0, lr
 8009076:	429e      	cmp	r6, r3
 8009078:	fa04 f402 	lsl.w	r4, r4, r2
 800907c:	d908      	bls.n	8009090 <__udivmoddi4+0x260>
 800907e:	eb1c 0303 	adds.w	r3, ip, r3
 8009082:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8009086:	d22f      	bcs.n	80090e8 <__udivmoddi4+0x2b8>
 8009088:	429e      	cmp	r6, r3
 800908a:	d92d      	bls.n	80090e8 <__udivmoddi4+0x2b8>
 800908c:	3802      	subs	r0, #2
 800908e:	4463      	add	r3, ip
 8009090:	1b9b      	subs	r3, r3, r6
 8009092:	b289      	uxth	r1, r1
 8009094:	fbb3 f6f7 	udiv	r6, r3, r7
 8009098:	fb07 3316 	mls	r3, r7, r6, r3
 800909c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80090a0:	fb06 f30e 	mul.w	r3, r6, lr
 80090a4:	428b      	cmp	r3, r1
 80090a6:	d908      	bls.n	80090ba <__udivmoddi4+0x28a>
 80090a8:	eb1c 0101 	adds.w	r1, ip, r1
 80090ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80090b0:	d216      	bcs.n	80090e0 <__udivmoddi4+0x2b0>
 80090b2:	428b      	cmp	r3, r1
 80090b4:	d914      	bls.n	80090e0 <__udivmoddi4+0x2b0>
 80090b6:	3e02      	subs	r6, #2
 80090b8:	4461      	add	r1, ip
 80090ba:	1ac9      	subs	r1, r1, r3
 80090bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80090c0:	e738      	b.n	8008f34 <__udivmoddi4+0x104>
 80090c2:	462e      	mov	r6, r5
 80090c4:	4628      	mov	r0, r5
 80090c6:	e705      	b.n	8008ed4 <__udivmoddi4+0xa4>
 80090c8:	4606      	mov	r6, r0
 80090ca:	e6e3      	b.n	8008e94 <__udivmoddi4+0x64>
 80090cc:	4618      	mov	r0, r3
 80090ce:	e6f8      	b.n	8008ec2 <__udivmoddi4+0x92>
 80090d0:	454b      	cmp	r3, r9
 80090d2:	d2a9      	bcs.n	8009028 <__udivmoddi4+0x1f8>
 80090d4:	ebb9 0802 	subs.w	r8, r9, r2
 80090d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80090dc:	3801      	subs	r0, #1
 80090de:	e7a3      	b.n	8009028 <__udivmoddi4+0x1f8>
 80090e0:	4646      	mov	r6, r8
 80090e2:	e7ea      	b.n	80090ba <__udivmoddi4+0x28a>
 80090e4:	4620      	mov	r0, r4
 80090e6:	e794      	b.n	8009012 <__udivmoddi4+0x1e2>
 80090e8:	4640      	mov	r0, r8
 80090ea:	e7d1      	b.n	8009090 <__udivmoddi4+0x260>
 80090ec:	46d0      	mov	r8, sl
 80090ee:	e77b      	b.n	8008fe8 <__udivmoddi4+0x1b8>
 80090f0:	3b02      	subs	r3, #2
 80090f2:	4461      	add	r1, ip
 80090f4:	e732      	b.n	8008f5c <__udivmoddi4+0x12c>
 80090f6:	4630      	mov	r0, r6
 80090f8:	e709      	b.n	8008f0e <__udivmoddi4+0xde>
 80090fa:	4464      	add	r4, ip
 80090fc:	3802      	subs	r0, #2
 80090fe:	e742      	b.n	8008f86 <__udivmoddi4+0x156>

08009100 <__aeabi_idiv0>:
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop

08009104 <SytemCall_1_code>:
// helpers system calls prototypes must be implemented in user space

__weak void SytemCall_1_code()
{

}
 8009104:	4770      	bx	lr

08009106 <SytemCall_2_code>:

__weak void SytemCall_2_code()
{

}
 8009106:	4770      	bx	lr

08009108 <SytemCall_3_code>:

__weak  void SytemCall_3_code()
{

}
 8009108:	4770      	bx	lr

0800910a <SytemCall_4_code>:


__weak  void SytemCall_4_code(void *val)
{

}
 800910a:	4770      	bx	lr

0800910c <__asan_init>:
static void NYI(void) {
  __asm volatile("bkpt #0"); /* stop application */
  for(;;){}
}

void __asan_init(void) {
 800910c:	b508      	push	{r3, lr}

	   if(!asan_inited)
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <__asan_init+0x24>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	b103      	cbz	r3, 8009116 <__asan_init+0xa>
				   McuASAN_CONFIG_APP_MEM_SIZE>>3 );
		   asan_inited = true;

	   }

}
 8009114:	bd08      	pop	{r3, pc}
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 8009116:	2100      	movs	r1, #0
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <__asan_init+0x28>)
 800911a:	6019      	str	r1, [r3, #0]
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 800911c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009120:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009124:	f007 ffde 	bl	80110e4 <memset>
		   asan_inited = true;
 8009128:	4b01      	ldr	r3, [pc, #4]	; (8009130 <__asan_init+0x24>)
 800912a:	2201      	movs	r2, #1
 800912c:	701a      	strb	r2, [r3, #0]
}
 800912e:	e7f1      	b.n	8009114 <__asan_init+0x8>
 8009130:	2401001c 	.word	0x2401001c
 8009134:	24037400 	.word	0x24037400

08009138 <FastPoisonShadow>:
uptr MEM_TO_SHADOW(uptr address) {
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
}

void FastPoisonShadow(uptr aligned_beg, uptr aligned_size, uint8_t value)
{
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4603      	mov	r3, r0
 800913c:	4615      	mov	r5, r2
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 800913e:	08c2      	lsrs	r2, r0, #3
 8009140:	f102 50dc 	add.w	r0, r2, #461373440	; 0x1b800000

  uptr shadow_beg = MEM_TO_SHADOW(aligned_beg);
  uptr shadow_end = MEM_TO_SHADOW(
 8009144:	3908      	subs	r1, #8
 8009146:	440b      	add	r3, r1
 8009148:	4e0f      	ldr	r6, [pc, #60]	; (8009188 <FastPoisonShadow+0x50>)
 800914a:	eb06 06d3 	add.w	r6, r6, r3, lsr #3
  return (size + boundary - 1) & ~(boundary - 1);
 800914e:	4b0f      	ldr	r3, [pc, #60]	; (800918c <FastPoisonShadow+0x54>)
 8009150:	4413      	add	r3, r2
 8009152:	4c0f      	ldr	r4, [pc, #60]	; (8009190 <FastPoisonShadow+0x58>)
 8009154:	4023      	ands	r3, r4
  return x & ~(boundary - 1);
 8009156:	4034      	ands	r4, r6

    uptr page_size = 1024; // we don't have paging so lets set to 1024
    uptr page_beg = RoundUpTo(shadow_beg, page_size);
    uptr page_end = RoundDownTo(shadow_end, page_size);

    if (page_beg >= page_end) {
 8009158:	429c      	cmp	r4, r3
 800915a:	d904      	bls.n	8009166 <FastPoisonShadow+0x2e>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
    } else {
      if (page_beg != shadow_beg) {
 800915c:	4283      	cmp	r3, r0
 800915e:	d107      	bne.n	8009170 <FastPoisonShadow+0x38>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
      }
      if (page_end != shadow_end) {
 8009160:	42a6      	cmp	r6, r4
 8009162:	d10a      	bne.n	800917a <FastPoisonShadow+0x42>
        memset((void *)page_end, value, shadow_end - page_end);
      }
      //ReserveShadowMemoryRange(page_beg, page_end - 1, nullptr);
    }

}
 8009164:	bd70      	pop	{r4, r5, r6, pc}
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 8009166:	1a32      	subs	r2, r6, r0
 8009168:	4629      	mov	r1, r5
 800916a:	f007 ffbb 	bl	80110e4 <memset>
 800916e:	e7f9      	b.n	8009164 <FastPoisonShadow+0x2c>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009170:	1a1a      	subs	r2, r3, r0
 8009172:	4629      	mov	r1, r5
 8009174:	f007 ffb6 	bl	80110e4 <memset>
 8009178:	e7f2      	b.n	8009160 <FastPoisonShadow+0x28>
        memset((void *)page_end, value, shadow_end - page_end);
 800917a:	1b32      	subs	r2, r6, r4
 800917c:	4629      	mov	r1, r5
 800917e:	4620      	mov	r0, r4
 8009180:	f007 ffb0 	bl	80110e4 <memset>
}
 8009184:	e7ee      	b.n	8009164 <FastPoisonShadow+0x2c>
 8009186:	bf00      	nop
 8009188:	1b800001 	.word	0x1b800001
 800918c:	1b8003ff 	.word	0x1b8003ff
 8009190:	fffffc00 	.word	0xfffffc00

08009194 <__asan_version_mismatch_check_v8>:
*/


}

void __asan_version_mismatch_check_v8(void) {  }
 8009194:	4770      	bx	lr

08009196 <ComputeRZLog>:
  return res;
}

uptr ComputeRZLog(uptr user_requested_size) {
    uint32_t rz_log =
    user_requested_size <= 64        - 16   ? 0 :
 8009196:	2830      	cmp	r0, #48	; 0x30
 8009198:	d913      	bls.n	80091c2 <ComputeRZLog+0x2c>
 800919a:	2860      	cmp	r0, #96	; 0x60
 800919c:	d919      	bls.n	80091d2 <ComputeRZLog+0x3c>
 800919e:	f5b0 7fe0 	cmp.w	r0, #448	; 0x1c0
 80091a2:	d918      	bls.n	80091d6 <ComputeRZLog+0x40>
 80091a4:	f5b0 6f78 	cmp.w	r0, #3968	; 0xf80
 80091a8:	d917      	bls.n	80091da <ComputeRZLog+0x44>
 80091aa:	f5b0 5f7c 	cmp.w	r0, #16128	; 0x3f00
 80091ae:	d916      	bls.n	80091de <ComputeRZLog+0x48>
 80091b0:	f5b0 4ffc 	cmp.w	r0, #32256	; 0x7e00
 80091b4:	d915      	bls.n	80091e2 <ComputeRZLog+0x4c>
 80091b6:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
 80091ba:	bf94      	ite	ls
 80091bc:	2006      	movls	r0, #6
 80091be:	2007      	movhi	r0, #7
 80091c0:	e000      	b.n	80091c4 <ComputeRZLog+0x2e>
 80091c2:	2000      	movs	r0, #0
    user_requested_size <= (1 << 14) - 256  ? 4 :
    user_requested_size <= (1 << 15) - 512  ? 5 :
    user_requested_size <= (1 << 16) - 1024 ? 6 : 7;
    uint32_t min_rz =  McuASAN_FLAG_REDZONE;  //atomic_load(&min_redzone, memory_order_acquire);
    uint32_t max_rz =  McuASAN_FLAG_MAX_REDZONE;  //atomic_load(&max_redzone, memory_order_acquire);
  return Min(Max(rz_log, RZSize2Log(min_rz)), RZSize2Log(max_rz));
 80091c4:	2801      	cmp	r0, #1
 80091c6:	bf38      	it	cc
 80091c8:	2001      	movcc	r0, #1
}
 80091ca:	2803      	cmp	r0, #3
 80091cc:	bf28      	it	cs
 80091ce:	2003      	movcs	r0, #3
 80091d0:	4770      	bx	lr
    user_requested_size <= 64        - 16   ? 0 :
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7f6      	b.n	80091c4 <ComputeRZLog+0x2e>
 80091d6:	2002      	movs	r0, #2
 80091d8:	e7f4      	b.n	80091c4 <ComputeRZLog+0x2e>
 80091da:	2003      	movs	r0, #3
 80091dc:	e7f2      	b.n	80091c4 <ComputeRZLog+0x2e>
 80091de:	2004      	movs	r0, #4
 80091e0:	e7f0      	b.n	80091c4 <ComputeRZLog+0x2e>
 80091e2:	2005      	movs	r0, #5
 80091e4:	e7ee      	b.n	80091c4 <ComputeRZLog+0x2e>

080091e6 <AllocBeg>:
}

uptr AllocBeg(AsanChunk *m)
{

	if (m->from_memalign)
 80091e6:	79c3      	ldrb	r3, [r0, #7]
 80091e8:	f013 0f01 	tst.w	r3, #1
 80091ec:	d000      	beq.n	80091f0 <AllocBeg+0xa>
	{
	     //return get_allocator().GetBlockBegin(reinterpret_cast<void *>(this));
		while(1); // this is a special case that we do not support since we do not control the allocator, the code should not reach this point
 80091ee:	e7fe      	b.n	80091ee <AllocBeg+0x8>
	return (uptr)(m) + kChunkHeaderSize;
 80091f0:	f100 0110 	add.w	r1, r0, #16
				  // unless the allocation of malloc is unnaligned TODO check what happens during testing
	}
	return (Beg(m) - RZLog2Size(m->rz_log));
 80091f4:	79c3      	ldrb	r3, [r0, #7]
 80091f6:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  return 16 << rz_log;
 80091fa:	2310      	movs	r3, #16
 80091fc:	4093      	lsls	r3, r2
}
 80091fe:	1ac8      	subs	r0, r1, r3
 8009200:	4770      	bx	lr
	...

08009204 <FreeRTOSReportFailure>:




void FreeRTOSReportFailure(type_exception_t  tEX)
{
 8009204:	b510      	push	{r4, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	4604      	mov	r4, r0

	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;



	  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800920a:	f7ff f8b1 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 800920e:	4b0b      	ldr	r3, [pc, #44]	; (800923c <FreeRTOSReportFailure+0x38>)
 8009210:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009214:	4283      	cmp	r3, r0
 8009216:	d000      	beq.n	800921a <FreeRTOSReportFailure+0x16>
		  // port yield should be called and nothing else should be executed
	  }
	  else
	  {
		  //printf("Fuzzer crashed");
		  for( ; ; )
 8009218:	e7fe      	b.n	8009218 <FreeRTOSReportFailure+0x14>
		  AFLfuzzer.xTypeEx = tEX;
 800921a:	4808      	ldr	r0, [pc, #32]	; (800923c <FreeRTOSReportFailure+0x38>)
 800921c:	f880 4874 	strb.w	r4, [r0, #2164]	; 0x874
		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 8009220:	2400      	movs	r4, #0
 8009222:	9400      	str	r4, [sp, #0]
 8009224:	2303      	movs	r3, #3
 8009226:	2209      	movs	r2, #9
 8009228:	4621      	mov	r1, r4
 800922a:	f8d0 086c 	ldr.w	r0, [r0, #2156]	; 0x86c
 800922e:	f7ff f837 	bl	80082a0 <MPU_xTaskGenericNotify>
		  vTaskDelay(0);
 8009232:	4620      	mov	r0, r4
 8009234:	f7fe ff66 	bl	8008104 <MPU_vTaskDelay>
		  while(1);
 8009238:	e7fe      	b.n	8009238 <FreeRTOSReportFailure+0x34>
 800923a:	bf00      	nop
 800923c:	24026000 	.word	0x24026000

08009240 <__asan_ReportGenericError>:
{
 8009240:	b508      	push	{r3, lr}
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 8009242:	2004      	movs	r0, #4
 8009244:	f7ff ffde 	bl	8009204 <FreeRTOSReportFailure>

08009248 <__asan_report_store1>:
{
 8009248:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r7}");
 800924a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
	__asan_ReportGenericError();
 800924c:	f7ff fff8 	bl	8009240 <__asan_ReportGenericError>

08009250 <__asan_report_store2>:
{
 8009250:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r7}");
 8009252:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    __asan_ReportGenericError();
 8009254:	f7ff fff4 	bl	8009240 <__asan_ReportGenericError>

08009258 <__asan_report_load1>:
{
 8009258:	b508      	push	{r3, lr}
	    __asm volatile("push {r0-r7}");
 800925a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
		__asan_ReportGenericError();
 800925c:	f7ff fff0 	bl	8009240 <__asan_ReportGenericError>

08009260 <__asan_report_load2>:
void __asan_report_load2(void *address) {
 8009260:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r7}");
 8009262:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
	__asan_ReportGenericError();
 8009264:	f7ff ffec 	bl	8009240 <__asan_ReportGenericError>

08009268 <PoisonShadow>:
void PoisonShadow(uptr addr, uptr size, uint8_t value) {
 8009268:	b508      	push	{r3, lr}
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 800926a:	f100 435c 	add.w	r3, r0, #3690987520	; 0xdc000000
 800926e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009272:	d202      	bcs.n	800927a <PoisonShadow+0x12>
	   FastPoisonShadow(addr, size, value);
 8009274:	f7ff ff60 	bl	8009138 <FastPoisonShadow>
}
 8009278:	bd08      	pop	{r3, pc}
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 800927a:	2007      	movs	r0, #7
 800927c:	f7ff ffc2 	bl	8009204 <FreeRTOSReportFailure>

08009280 <Allocate>:
                 AllocType alloc_type, bool can_fill) {
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	b085      	sub	sp, #20
 8009286:	4607      	mov	r7, r0
 8009288:	460e      	mov	r6, r1
 800928a:	9202      	str	r2, [sp, #8]
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009292:	bf94      	ite	ls
 8009294:	f04f 0b00 	movls.w	fp, #0
 8009298:	f04f 0b01 	movhi.w	fp, #1
    if (user_requested_alignment < 8)
 800929c:	2907      	cmp	r1, #7
 800929e:	f240 8091 	bls.w	80093c4 <Allocate+0x144>
  return (uptr) ffs(x);
 80092a2:	460a      	mov	r2, r1
 80092a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092a8:	bf28      	it	cs
 80092aa:	f44f 7200 	movcs.w	r2, #512	; 0x200
 80092ae:	fa92 f3a2 	rbit	r3, r2
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	2a00      	cmp	r2, #0
 80092b8:	bf08      	it	eq
 80092ba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    return Log2(user_requested_alignment) - 2;
 80092be:	3b01      	subs	r3, #1
 80092c0:	9301      	str	r3, [sp, #4]
    if (alignment < min_alignment)
 80092c2:	4634      	mov	r4, r6
 80092c4:	2e08      	cmp	r6, #8
 80092c6:	bf38      	it	cc
 80092c8:	2408      	movcc	r4, #8
    if (size == 0) {
 80092ca:	46b9      	mov	r9, r7
 80092cc:	2f01      	cmp	r7, #1
 80092ce:	bf38      	it	cc
 80092d0:	f04f 0901 	movcc.w	r9, #1
    uptr rz_log = ComputeRZLog(size);
 80092d4:	4648      	mov	r0, r9
 80092d6:	f7ff ff5e 	bl	8009196 <ComputeRZLog>
 80092da:	4680      	mov	r8, r0
  return 16 << rz_log;
 80092dc:	2510      	movs	r5, #16
 80092de:	4085      	lsls	r5, r0
  return (size + boundary - 1) & ~(boundary - 1);
 80092e0:	f1c4 0a00 	rsb	sl, r4, #0
 80092e4:	2f04      	cmp	r7, #4
 80092e6:	bf2c      	ite	cs
 80092e8:	19e3      	addcs	r3, r4, r7
 80092ea:	1d23      	addcc	r3, r4, #4
 80092ec:	3b01      	subs	r3, #1
 80092ee:	ea03 030a 	and.w	r3, r3, sl
    uptr needed_size = rounded_size + rz_size;
 80092f2:	442b      	add	r3, r5
    if (alignment > min_alignment)
 80092f4:	2e08      	cmp	r6, #8
      needed_size += alignment;
 80092f6:	bf88      	it	hi
 80092f8:	191b      	addhi	r3, r3, r4
    needed_size += rz_size; // manually adding the right red zone
 80092fa:	195e      	adds	r6, r3, r5
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 80092fc:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8009300:	d87f      	bhi.n	8009402 <Allocate+0x182>
 8009302:	f1bb 0f00 	cmp.w	fp, #0
 8009306:	d17c      	bne.n	8009402 <Allocate+0x182>
    allocated = malloc(needed_size);
 8009308:	4630      	mov	r0, r6
 800930a:	f007 fc2b 	bl	8010b64 <malloc>
    if(!allocated)
 800930e:	4607      	mov	r7, r0
 8009310:	2800      	cmp	r0, #0
 8009312:	d053      	beq.n	80093bc <Allocate+0x13c>
 8009314:	4a3c      	ldr	r2, [pc, #240]	; (8009408 <Allocate+0x188>)
	int i=0;
 8009316:	2300      	movs	r3, #0
  		    if(pAFLfuzzer->allocs[i]==0)
 8009318:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800931c:	2900      	cmp	r1, #0
 800931e:	d054      	beq.n	80093ca <Allocate+0x14a>
  		    i++;
 8009320:	3301      	adds	r3, #1
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8009322:	2b0a      	cmp	r3, #10
 8009324:	d1f8      	bne.n	8009318 <Allocate+0x98>
      PoisonShadow((uptr)allocated, allocated_size, kAsanHeapLeftRedzoneMagic);
 8009326:	46bb      	mov	fp, r7
 8009328:	22fa      	movs	r2, #250	; 0xfa
 800932a:	4631      	mov	r1, r6
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff ff9b 	bl	8009268 <PoisonShadow>
    uptr beg_plus_redzone = alloc_beg + rz_size;
 8009332:	443d      	add	r5, r7
  return (a & (alignment - 1)) == 0;
 8009334:	3c01      	subs	r4, #1
    if (!IsAligned(user_beg, alignment))
 8009336:	422c      	tst	r4, r5
 8009338:	d04e      	beq.n	80093d8 <Allocate+0x158>
  return (size + boundary - 1) & ~(boundary - 1);
 800933a:	442c      	add	r4, r5
 800933c:	ea04 0a0a 	and.w	sl, r4, sl
    uptr chunk_beg = user_beg - kChunkHeaderSize;
 8009340:	f1aa 0410 	sub.w	r4, sl, #16
    m->alloc_type = alloc_type;
 8009344:	f81a 3c09 	ldrb.w	r3, [sl, #-9]
 8009348:	9a02      	ldr	r2, [sp, #8]
 800934a:	f362 0342 	bfi	r3, r2, #1, #2
    m->rz_log = rz_log;
 800934e:	f368 03c5 	bfi	r3, r8, #3, #3
 8009352:	71e3      	strb	r3, [r4, #7]
    m->alloc_tid = alloc_tid;
 8009354:	f85a 3c10 	ldr.w	r3, [sl, #-16]
 8009358:	f36f 231f 	bfc	r3, #8, #24
 800935c:	f84a 3c10 	str.w	r3, [sl, #-16]
    m->free_tid = kInvalidTid;
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009366:	f362 0317 	bfi	r3, r2, #0, #24
 800936a:	6063      	str	r3, [r4, #4]
    m->from_memalign = user_beg != beg_plus_redzone;
 800936c:	ebba 0505 	subs.w	r5, sl, r5
 8009370:	bf18      	it	ne
 8009372:	2501      	movne	r5, #1
 8009374:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8009378:	f365 0300 	bfi	r3, r5, #0, #1
 800937c:	71e3      	strb	r3, [r4, #7]
    if (alloc_beg != chunk_beg) {
 800937e:	45a3      	cmp	fp, r4
 8009380:	d003      	beq.n	800938a <Allocate+0x10a>
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 8009382:	4b22      	ldr	r3, [pc, #136]	; (800940c <Allocate+0x18c>)
 8009384:	603b      	str	r3, [r7, #0]
      ((uptr *)alloc_beg)[1] = chunk_beg;
 8009386:	f8cb 4004 	str.w	r4, [fp, #4]
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	f369 031c 	bfi	r3, r9, #0, #29
 8009390:	60a3      	str	r3, [r4, #8]
    m->user_requested_alignment_log = user_requested_alignment_log;
 8009392:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8009396:	9a01      	ldr	r2, [sp, #4]
 8009398:	f362 1347 	bfi	r3, r2, #5, #3
 800939c:	72e3      	strb	r3, [r4, #11]
    if (size_rounded_down_to_granularity)
 800939e:	f039 0507 	bics.w	r5, r9, #7
 80093a2:	d11b      	bne.n	80093dc <Allocate+0x15c>
          (uint8_t *)MEM_TO_SHADOW(user_beg + size_rounded_down_to_granularity);
 80093a4:	4455      	add	r5, sl
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 80093a6:	08ed      	lsrs	r5, r5, #3
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 80093a8:	f105 55dc 	add.w	r5, r5, #461373440	; 0x1b800000
 80093ac:	f009 0307 	and.w	r3, r9, #7
 80093b0:	702b      	strb	r3, [r5, #0]
    void *res = (void *)(user_beg);
 80093b2:	4657      	mov	r7, sl
    if (can_fill && McuASAN_FLAG_MAX_MALLOC_FILL_SIZE) {
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	b9cb      	cbnz	r3, 80093ec <Allocate+0x16c>
    *(uint8_t *)m = CHUNK_ALLOCATED;
 80093b8:	2302      	movs	r3, #2
 80093ba:	7023      	strb	r3, [r4, #0]
  }
 80093bc:	4638      	mov	r0, r7
 80093be:	b005      	add	sp, #20
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	e77b      	b.n	80092c2 <Allocate+0x42>
  		    	pAFLfuzzer->allocs[i] = ptr;
 80093ca:	f641 220c 	movw	r2, #6668	; 0x1a0c
 80093ce:	441a      	add	r2, r3
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <Allocate+0x190>)
 80093d2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  			    break;
 80093d6:	e7a6      	b.n	8009326 <Allocate+0xa6>
    uptr user_beg = beg_plus_redzone;
 80093d8:	46aa      	mov	sl, r5
 80093da:	e7b1      	b.n	8009340 <Allocate+0xc0>
      PoisonShadow(user_beg, size_rounded_down_to_granularity, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	4629      	mov	r1, r5
 80093e0:	4650      	mov	r0, sl
 80093e2:	f7ff ff41 	bl	8009268 <PoisonShadow>
    if (size != size_rounded_down_to_granularity ) {
 80093e6:	45a9      	cmp	r9, r5
 80093e8:	d0e3      	beq.n	80093b2 <Allocate+0x132>
 80093ea:	e7db      	b.n	80093a4 <Allocate+0x124>
      memset(res, McuASAN_FLAG_MALLOC_FILL_BYTE, fill_size);
 80093ec:	464a      	mov	r2, r9
 80093ee:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 80093f2:	bf28      	it	cs
 80093f4:	f44f 7200 	movcs.w	r2, #512	; 0x200
 80093f8:	21be      	movs	r1, #190	; 0xbe
 80093fa:	4650      	mov	r0, sl
 80093fc:	f007 fe72 	bl	80110e4 <memset>
 8009400:	e7da      	b.n	80093b8 <Allocate+0x138>
        return NULL;
 8009402:	2700      	movs	r7, #0
 8009404:	e7da      	b.n	80093bc <Allocate+0x13c>
 8009406:	bf00      	nop
 8009408:	2402682c 	.word	0x2402682c
 800940c:	cc6e96b9 	.word	0xcc6e96b9
 8009410:	24020000 	.word	0x24020000

08009414 <Recycle>:
void Recycle(AsanChunk *m) {
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
  *(uint8_t*)m = CHUNK_AVAILABLE;
 8009418:	2300      	movs	r3, #0
 800941a:	7003      	strb	r3, [r0, #0]
               RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 800941c:	6881      	ldr	r1, [r0, #8]
 800941e:	f3c1 011c 	ubfx	r1, r1, #0, #29
  return (size + boundary - 1) & ~(boundary - 1);
 8009422:	3107      	adds	r1, #7
  PoisonShadow(Beg(m),
 8009424:	22fa      	movs	r2, #250	; 0xfa
 8009426:	f021 0107 	bic.w	r1, r1, #7
 800942a:	3010      	adds	r0, #16
 800942c:	f7ff ff1c 	bl	8009268 <PoisonShadow>
  void *p = (void *)(AllocBeg(m));
 8009430:	4620      	mov	r0, r4
 8009432:	f7ff fed8 	bl	80091e6 <AllocBeg>
  if (p != m) {
 8009436:	4284      	cmp	r4, r0
 8009438:	d001      	beq.n	800943e <Recycle+0x2a>
    alloc_magic[0] = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	6003      	str	r3, [r0, #0]
  	if(ptr)
 800943e:	b140      	cbz	r0, 8009452 <Recycle+0x3e>
 8009440:	4a09      	ldr	r2, [pc, #36]	; (8009468 <Recycle+0x54>)
	int i=0;
 8009442:	2300      	movs	r3, #0
  		    if(pAFLfuzzer->allocs[i]==ptr)
 8009444:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8009448:	4288      	cmp	r0, r1
 800944a:	d005      	beq.n	8009458 <Recycle+0x44>
  		    i++;
 800944c:	3301      	adds	r3, #1
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800944e:	2b0a      	cmp	r3, #10
 8009450:	d1f8      	bne.n	8009444 <Recycle+0x30>
  free(p);
 8009452:	f007 fb8f 	bl	8010b74 <free>
}
 8009456:	bd10      	pop	{r4, pc}
  		    	pAFLfuzzer->allocs[i]= NULL;
 8009458:	f641 220c 	movw	r2, #6668	; 0x1a0c
 800945c:	441a      	add	r2, r3
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <Recycle+0x58>)
 8009460:	2100      	movs	r1, #0
 8009462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  			    break;
 8009466:	e7f4      	b.n	8009452 <Recycle+0x3e>
 8009468:	2402682c 	.word	0x2402682c
 800946c:	24020000 	.word	0x24020000

08009470 <QuarantineChunk>:
void QuarantineChunk(AsanChunk *m, void *ptr) {
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	460d      	mov	r5, r1
      uptr size_to_fill = m->user_requested_size;
 8009476:	6882      	ldr	r2, [r0, #8]
 8009478:	f3c2 021c 	ubfx	r2, r2, #0, #29
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <QuarantineChunk+0x3c>)
 800947e:	681b      	ldr	r3, [r3, #0]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009480:	429a      	cmp	r2, r3
 8009482:	bf28      	it	cs
 8009484:	461a      	movcs	r2, r3
 8009486:	2155      	movs	r1, #85	; 0x55
 8009488:	4628      	mov	r0, r5
 800948a:	f007 fe2b 	bl	80110e4 <memset>
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	f3c3 031c 	ubfx	r3, r3, #0, #29
  return (size + boundary - 1) & ~(boundary - 1);
 8009494:	3307      	adds	r3, #7
    PoisonShadow((uptr)ptr ,
 8009496:	22fd      	movs	r2, #253	; 0xfd
 8009498:	f023 0107 	bic.w	r1, r3, #7
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff fee3 	bl	8009268 <PoisonShadow>
    Recycle(m);
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7ff ffb6 	bl	8009414 <Recycle>
}
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	bf00      	nop
 80094ac:	24008004 	.word	0x24008004

080094b0 <ReportDoubleFree>:
void ReportDoubleFree(uptr addr) {
 80094b0:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r7}");
 80094b2:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  FreeRTOSReportFailure(EX_ASAN_DOUBLE_FREE);
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7ff fea5 	bl	8009204 <FreeRTOSReportFailure>

080094ba <ReportFreeNotMalloced>:
void ReportFreeNotMalloced(uptr addr) {
 80094ba:	b508      	push	{r3, lr}
	__asm volatile("push {r0-r7}");
 80094bc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  FreeRTOSReportFailure(EX_ASAN_INVALID_FREE);
 80094be:	2003      	movs	r0, #3
 80094c0:	f7ff fea0 	bl	8009204 <FreeRTOSReportFailure>

080094c4 <ReportInvalidFree>:
void ReportInvalidFree(void *ptr, uint8_t chunk_state) {
 80094c4:	b508      	push	{r3, lr}
    if (chunk_state == CHUNK_QUARANTINE)
 80094c6:	2903      	cmp	r1, #3
 80094c8:	d001      	beq.n	80094ce <ReportInvalidFree+0xa>
      ReportFreeNotMalloced((uptr)ptr);
 80094ca:	f7ff fff6 	bl	80094ba <ReportFreeNotMalloced>
      ReportDoubleFree((uptr)ptr);
 80094ce:	f7ff ffef 	bl	80094b0 <ReportDoubleFree>

080094d2 <AtomicallySetQuarantineFlagIfAllocated>:
bool AtomicallySetQuarantineFlagIfAllocated(AsanChunk *m, void *ptr) {
 80094d2:	b508      	push	{r3, lr}
 80094d4:	460b      	mov	r3, r1
  if(*state == CHUNK_ALLOCATED)
 80094d6:	7801      	ldrb	r1, [r0, #0]
 80094d8:	2902      	cmp	r1, #2
 80094da:	d103      	bne.n	80094e4 <AtomicallySetQuarantineFlagIfAllocated+0x12>
	  *state = CHUNK_QUARANTINE;
 80094dc:	2303      	movs	r3, #3
 80094de:	7003      	strb	r3, [r0, #0]
}
 80094e0:	2001      	movs	r0, #1
 80094e2:	bd08      	pop	{r3, pc}
	  ReportInvalidFree(ptr, *state);
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff ffed 	bl	80094c4 <ReportInvalidFree>
	...

080094ec <Deallocate>:
    if (p == 0) return;
 80094ec:	b1d0      	cbz	r0, 8009524 <Deallocate+0x38>
{
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	461c      	mov	r4, r3
 80094f2:	4605      	mov	r5, r0
    uptr chunk_beg = p - kChunkHeaderSize;
 80094f4:	f1a0 0610 	sub.w	r6, r0, #16
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 80094f8:	4601      	mov	r1, r0
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ffe9 	bl	80094d2 <AtomicallySetQuarantineFlagIfAllocated>
 8009500:	b158      	cbz	r0, 800951a <Deallocate+0x2e>
    if (m->alloc_type != alloc_type) {
 8009502:	79f3      	ldrb	r3, [r6, #7]
 8009504:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009508:	42a3      	cmp	r3, r4
 800950a:	d002      	beq.n	8009512 <Deallocate+0x26>
      if (alloc_dealloc_mismatch) {
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <Deallocate+0x3c>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b923      	cbnz	r3, 800951c <Deallocate+0x30>
    QuarantineChunk(m, ptr);
 8009512:	4629      	mov	r1, r5
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffab 	bl	8009470 <QuarantineChunk>
 }
 800951a:	bd70      	pop	{r4, r5, r6, pc}
  __asm volatile("push {r0-r7}");
 800951c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  FreeRTOSReportFailure(EX_ASAN_REALLOC_MISMATCH);
 800951e:	2006      	movs	r0, #6
 8009520:	f7ff fe70 	bl	8009204 <FreeRTOSReportFailure>
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	24008000 	.word	0x24008000

0800952c <vPortResetPrivilege>:
    if( xRunningPrivileged == pdFALSE )
 800952c:	b100      	cbz	r0, 8009530 <vPortResetPrivilege+0x4>
 800952e:	4770      	bx	lr
{
 8009530:	b508      	push	{r3, lr}
        portRESET_PRIVILEGE();
 8009532:	f000 f855 	bl	80095e0 <vResetPrivilege>
}
 8009536:	bd08      	pop	{r3, pc}

08009538 <vPortEnableVFP>:
    __asm volatile
 8009538:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009548 <vPortEnableVFP+0x10>
 800953c:	6801      	ldr	r1, [r0, #0]
 800953e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009542:	6001      	str	r1, [r0, #0]
 8009544:	4770      	bx	lr
 8009546:	0000      	.short	0x0000
 8009548:	e000ed88 	.word	0xe000ed88

0800954c <vPortEnterCritical>:
{
 800954c:	b508      	push	{r3, lr}
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800954e:	f7fe fd57 	bl	8008000 <xPortRaisePrivilege>
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8009562:	4a03      	ldr	r2, [pc, #12]	; (8009570 <vPortEnterCritical+0x24>)
 8009564:	6813      	ldr	r3, [r2, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800956a:	f7ff ffdf 	bl	800952c <vPortResetPrivilege>
}
 800956e:	bd08      	pop	{r3, pc}
 8009570:	2400800c 	.word	0x2400800c

08009574 <vPortExitCritical>:
{
 8009574:	b508      	push	{r3, lr}
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009576:	f7fe fd43 	bl	8008000 <xPortRaisePrivilege>
    configASSERT( uxCriticalNesting );
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <vPortExitCritical+0x30>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	b943      	cbnz	r3, 8009592 <vPortExitCritical+0x1e>
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	e7fe      	b.n	8009590 <vPortExitCritical+0x1c>
    uxCriticalNesting--;
 8009592:	3b01      	subs	r3, #1
 8009594:	4a03      	ldr	r2, [pc, #12]	; (80095a4 <vPortExitCritical+0x30>)
 8009596:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009598:	b90b      	cbnz	r3, 800959e <vPortExitCritical+0x2a>
    __asm volatile
 800959a:	f383 8811 	msr	BASEPRI, r3
    vPortResetPrivilege( xRunningPrivileged );
 800959e:	f7ff ffc5 	bl	800952c <vPortResetPrivilege>
}
 80095a2:	bd08      	pop	{r3, pc}
 80095a4:	2400800c 	.word	0x2400800c

080095a8 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095a8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80095ac:	2300      	movs	r3, #0
 80095ae:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095b0:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <vPortSetupTimerInterrupt+0x20>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4905      	ldr	r1, [pc, #20]	; (80095cc <vPortSetupTimerInterrupt+0x24>)
 80095b8:	fba1 1303 	umull	r1, r3, r1, r3
 80095bc:	099b      	lsrs	r3, r3, #6
 80095be:	3b01      	subs	r3, #1
 80095c0:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 80095c2:	2307      	movs	r3, #7
 80095c4:	6113      	str	r3, [r2, #16]
}
 80095c6:	4770      	bx	lr
 80095c8:	24008010 	.word	0x24008010
 80095cc:	10624dd3 	.word	0x10624dd3

080095d0 <xIsPrivileged>:
    __asm volatile
 80095d0:	f3ef 8014 	mrs	r0, CONTROL
 80095d4:	f010 0f01 	tst.w	r0, #1
 80095d8:	bf14      	ite	ne
 80095da:	2000      	movne	r0, #0
 80095dc:	2001      	moveq	r0, #1
 80095de:	4770      	bx	lr

080095e0 <vResetPrivilege>:
    __asm volatile
 80095e0:	f3ef 8014 	mrs	r0, CONTROL
 80095e4:	f040 0001 	orr.w	r0, r0, #1
 80095e8:	f380 8814 	msr	CONTROL, r0
 80095ec:	4770      	bx	lr
	...

080095f0 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80095f0:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095f4:	2b0f      	cmp	r3, #15
 80095f6:	d90f      	bls.n	8009618 <vPortValidateInterruptPriority+0x28>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095f8:	4a11      	ldr	r2, [pc, #68]	; (8009640 <vPortValidateInterruptPriority+0x50>)
 80095fa:	5c9b      	ldrb	r3, [r3, r2]
 80095fc:	b2db      	uxtb	r3, r3
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095fe:	4a11      	ldr	r2, [pc, #68]	; (8009644 <vPortValidateInterruptPriority+0x54>)
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d908      	bls.n	8009618 <vPortValidateInterruptPriority+0x28>
    __asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	e7fe      	b.n	8009616 <vPortValidateInterruptPriority+0x26>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009618:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800961c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009624:	4a08      	ldr	r2, [pc, #32]	; (8009648 <vPortValidateInterruptPriority+0x58>)
 8009626:	6812      	ldr	r2, [r2, #0]
 8009628:	4293      	cmp	r3, r2
 800962a:	d908      	bls.n	800963e <vPortValidateInterruptPriority+0x4e>
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	e7fe      	b.n	800963c <vPortValidateInterruptPriority+0x4c>
    }
 800963e:	4770      	bx	lr
 8009640:	e000e3f0 	.word	0xe000e3f0
 8009644:	2401001d 	.word	0x2401001d
 8009648:	24010020 	.word	0x24010020

0800964c <SytemCall_5_code>:
#include "stdint.h"

#if PRINTBB == 1

void SytemCall_5_code(void *val)
{
 800964c:	b508      	push	{r3, lr}

	printf("#%08X\n",*(uint32_t *)val);
 800964e:	6801      	ldr	r1, [r0, #0]
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <SytemCall_5_code+0xc>)
 8009652:	f007 fda5 	bl	80111a0 <printf>
}
 8009656:	bd08      	pop	{r3, pc}
 8009658:	24008b90 	.word	0x24008b90

0800965c <__sanitizer_cov_trace_pc>:

#endif

void __sanitizer_cov_trace_pc(void)
{
 800965c:	b510      	push	{r4, lr}
 800965e:	b082      	sub	sp, #8

	register uint32_t R14 asm("r14");

#if PRINTBB == 1
	uint32_t bb;
	bb = R14;
 8009660:	4674      	mov	r4, lr
 8009662:	f8cd e004 	str.w	lr, [sp, #4]
	MPU_SytemCall_5(&bb);
 8009666:	a801      	add	r0, sp, #4
 8009668:	f7fe fcfa 	bl	8008060 <MPU_SytemCall_5>
#endif

	uint16_t guard;

	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);
 800966c:	f3c4 0e0c 	ubfx	lr, r4, #0, #13

	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009670:	4916      	ldr	r1, [pc, #88]	; (80096cc <__sanitizer_cov_trace_pc+0x70>)
 8009672:	f501 43c0 	add.w	r3, r1, #24576	; 0x6000
 8009676:	f8b3 3858 	ldrh.w	r3, [r3, #2136]	; 0x858
 800967a:	ea8e 0303 	eor.w	r3, lr, r3
	bitmapindex &=AFL_BITMAP_MASK;
 800967e:	f3c3 030c 	ubfx	r3, r3, #0, #13

	if(!paflbitmap[bitmapindex])
 8009682:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009686:	b96a      	cbnz	r2, 80096a4 <__sanitizer_cov_trace_pc+0x48>
	{
		  AFLfuzzer.indexdif++; // since we need to start the index in 1 the first tuple is empty,
 8009688:	f501 44c0 	add.w	r4, r1, #24576	; 0x6000
 800968c:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 8009690:	3201      	adds	r2, #1
 8009692:	b292      	uxth	r2, r2
 8009694:	f8a4 2862 	strh.w	r2, [r4, #2146]	; 0x862
		              // we will correct the pointer
		  	  	  	  // when sending the data to the PC
		  paflbitmap[bitmapindex] =  AFLfuzzer.indexdif;
 8009698:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  AFLfuzzer.afldiff[AFLfuzzer.indexdif].index = bitmapindex;
 800969c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096a0:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]

	 }
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 80096a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80096a8:	4908      	ldr	r1, [pc, #32]	; (80096cc <__sanitizer_cov_trace_pc+0x70>)
 80096aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80096b2:	885a      	ldrh	r2, [r3, #2]
 80096b4:	3201      	adds	r2, #1
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	805a      	strh	r2, [r3, #2]

	 AFLfuzzer.previousGuard = guard>>1;
 80096ba:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 80096be:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 80096c2:	f8a1 e858 	strh.w	lr, [r1, #2136]	; 0x858



}
 80096c6:	b002      	add	sp, #8
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	bf00      	nop
 80096cc:	24020000 	.word	0x24020000

080096d0 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 80096d0:	b508      	push	{r3, lr}
	/* Start the MPU demo. */
	vStartMPUDemo();
 80096d2:	f006 f8b7 	bl	800f844 <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 80096d6:	f7f9 f8e9 	bl	80028ac <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 80096da:	e7fe      	b.n	80096da <app_main+0xa>

080096dc <vApplicationStackOverflowHook>:
{
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 80096dc:	e7fe      	b.n	80096dc <vApplicationStackOverflowHook>

080096de <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void )
{
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 80096de:	e7fe      	b.n	80096de <vApplicationMallocFailedHook>

080096e0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 80096e0:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <vApplicationGetIdleTaskMemory+0x10>)
 80096e2:	6003      	str	r3, [r0, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 80096e4:	4b03      	ldr	r3, [pc, #12]	; (80096f4 <vApplicationGetIdleTaskMemory+0x14>)
 80096e6:	600b      	str	r3, [r1, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80096e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ec:	6013      	str	r3, [r2, #0]
}
 80096ee:	4770      	bx	lr
 80096f0:	24011428 	.word	0x24011428
 80096f4:	24010024 	.word	0x24010024

080096f8 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <vApplicationGetTimerTaskMemory+0x10>)
 80096fa:	6003      	str	r3, [r0, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <vApplicationGetTimerTaskMemory+0x14>)
 80096fe:	600b      	str	r3, [r1, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	6013      	str	r3, [r2, #0]
}
 8009706:	4770      	bx	lr
 8009708:	24011938 	.word	0x24011938
 800970c:	24011024 	.word	0x24011024

08009710 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009710:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009714:	4905      	ldr	r1, [pc, #20]	; (800972c <__NVIC_SystemReset+0x1c>)
 8009716:	68ca      	ldr	r2, [r1, #12]
 8009718:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800971c:	4b04      	ldr	r3, [pc, #16]	; (8009730 <__NVIC_SystemReset+0x20>)
 800971e:	4313      	orrs	r3, r2
 8009720:	60cb      	str	r3, [r1, #12]
 8009722:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009726:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009728:	e7fd      	b.n	8009726 <__NVIC_SystemReset+0x16>
 800972a:	bf00      	nop
 800972c:	e000ed00 	.word	0xe000ed00
 8009730:	05fa0004 	.word	0x05fa0004

08009734 <deleteTask>:
extern uint8_t AFLfuzzerRegion[AFLINPUTREGION_SIZE ] __attribute__( ( aligned( AFLINPUTREGION_SIZE ) ) );
#endif


void deleteTask()
{
 8009734:	b510      	push	{r4, lr}
 8009736:	b084      	sub	sp, #16

	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009738:	2100      	movs	r1, #0
 800973a:	9103      	str	r1, [sp, #12]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800973c:	4c07      	ldr	r4, [pc, #28]	; (800975c <deleteTask+0x28>)
 800973e:	ab03      	add	r3, sp, #12
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	9100      	str	r1, [sp, #0]
 8009744:	2303      	movs	r3, #3
 8009746:	2202      	movs	r2, #2
 8009748:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 800974c:	f7f9 fa24 	bl	8002b98 <xTaskGenericNotifyFromISR>
	//HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	vTaskDelete(AFLfuzzer.xTaskTarget);
 8009750:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 8009754:	f7fe fcca 	bl	80080ec <MPU_vTaskDelete>

}
 8009758:	b004      	add	sp, #16
 800975a:	bd10      	pop	{r4, pc}
 800975c:	24026000 	.word	0x24026000

08009760 <vHandleMemoryFault>:


portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 8009760:	b510      	push	{r4, lr}
 8009762:	4604      	mov	r4, r0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009764:	f7fe fe04 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <vHandleMemoryFault+0x28>)
 800976a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800976e:	4283      	cmp	r3, r0
 8009770:	d000      	beq.n	8009774 <vHandleMemoryFault+0x14>

  }
  else
  {
	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 8009772:	e7fe      	b.n	8009772 <vHandleMemoryFault+0x12>
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 8009774:	69a2      	ldr	r2, [r4, #24]
 8009776:	4b04      	ldr	r3, [pc, #16]	; (8009788 <vHandleMemoryFault+0x28>)
 8009778:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800977c:	2208      	movs	r2, #8
 800977e:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 8009782:	f7ff ffd7 	bl	8009734 <deleteTask>
	  }

  }


}
 8009786:	bd10      	pop	{r4, pc}
 8009788:	24026000 	.word	0x24026000

0800978c <vNMI_Handler>:



portDONT_DISCARD void vNMI_Handler( uint32_t * pulFaultStackAddress )
{
 800978c:	b510      	push	{r4, lr}
 800978e:	4604      	mov	r4, r0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009790:	f7fe fdee 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <vNMI_Handler+0x28>)
 8009796:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800979a:	4283      	cmp	r3, r0
 800979c:	d000      	beq.n	80097a0 <vNMI_Handler+0x14>
		  deleteTask();
  }
  else
  {
	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 800979e:	e7fe      	b.n	800979e <vNMI_Handler+0x12>
		  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 80097a0:	69a2      	ldr	r2, [r4, #24]
 80097a2:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <vNMI_Handler+0x28>)
 80097a4:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
		  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 80097a8:	2208      	movs	r2, #8
 80097aa:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  deleteTask();
 80097ae:	f7ff ffc1 	bl	8009734 <deleteTask>
	  }

  }


}
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	24026000 	.word	0x24026000

080097b8 <vHardFault_Handler>:


portDONT_DISCARD void vHardFault_Handler( uint32_t * pulFaultStackAddress )
{
 80097b8:	b508      	push	{r3, lr}

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

  //this exception is not recoverable
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 80097ba:	f7fe fdd9 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <vHardFault_Handler+0x14>)
 80097c0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80097c4:	4283      	cmp	r3, r0
 80097c6:	d000      	beq.n	80097ca <vHardFault_Handler+0x12>
	  }

  }


}
 80097c8:	bd08      	pop	{r3, pc}
	  for( ; ; )
 80097ca:	e7fe      	b.n	80097ca <vHardFault_Handler+0x12>
 80097cc:	24026000 	.word	0x24026000

080097d0 <vBusFault_Handler>:


portDONT_DISCARD void vBusFault_Handler( uint32_t * pulFaultStackAddress )
{
 80097d0:	b510      	push	{r4, lr}
 80097d2:	4604      	mov	r4, r0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;



  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 80097d4:	f7fe fdcc 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <vBusFault_Handler+0x30>)
 80097da:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80097de:	4283      	cmp	r3, r0
 80097e0:	d109      	bne.n	80097f6 <vBusFault_Handler+0x26>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 80097e2:	69a2      	ldr	r2, [r4, #24]
 80097e4:	4b06      	ldr	r3, [pc, #24]	; (8009800 <vBusFault_Handler+0x30>)
 80097e6:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 80097ea:	220b      	movs	r2, #11
 80097ec:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 80097f0:	f7ff ffa0 	bl	8009734 <deleteTask>
	  }

  }


}
 80097f4:	bd10      	pop	{r4, pc}
		  printf("Fuzzer crash bus fault!\n");
 80097f6:	4803      	ldr	r0, [pc, #12]	; (8009804 <vBusFault_Handler+0x34>)
 80097f8:	f007 fd34 	bl	8011264 <puts>
		  NVIC_SystemReset();
 80097fc:	f7ff ff88 	bl	8009710 <__NVIC_SystemReset>
 8009800:	24026000 	.word	0x24026000
 8009804:	24008b98 	.word	0x24008b98

08009808 <vUsageFault_Handler>:

portDONT_DISCARD void vUsageFault_Handler( uint32_t * pulFaultStackAddress )
{
 8009808:	b510      	push	{r4, lr}
 800980a:	4604      	mov	r4, r0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800980c:	f7fe fdb0 	bl	8008370 <MPU_xTaskGetCurrentTaskHandle>
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <vUsageFault_Handler+0xb4>)
 8009812:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009816:	4283      	cmp	r3, r0
 8009818:	d130      	bne.n	800987c <vUsageFault_Handler+0x74>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800981a:	69a2      	ldr	r2, [r4, #24]
 800981c:	4b27      	ldr	r3, [pc, #156]	; (80098bc <vUsageFault_Handler+0xb4>)
 800981e:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009826:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800982a:	d008      	beq.n	800983e <vUsageFault_Handler+0x36>
	  {
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 800982c:	4b23      	ldr	r3, [pc, #140]	; (80098bc <vUsageFault_Handler+0xb4>)
 800982e:	2209      	movs	r2, #9
 8009830:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 8009834:	4a22      	ldr	r2, [pc, #136]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009836:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800983c:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk)
 800983e:	4b20      	ldr	r3, [pc, #128]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009846:	d008      	beq.n	800985a <vUsageFault_Handler+0x52>
	  {
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 8009848:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <vUsageFault_Handler+0xb4>)
 800984a:	220a      	movs	r2, #10
 800984c:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 8009850:	4a1b      	ldr	r2, [pc, #108]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009852:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009858:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk)
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <vUsageFault_Handler+0xb8>)
 800985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009862:	d008      	beq.n	8009876 <vUsageFault_Handler+0x6e>
	  {
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 8009864:	4b15      	ldr	r3, [pc, #84]	; (80098bc <vUsageFault_Handler+0xb4>)
 8009866:	220c      	movs	r2, #12
 8009868:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 800986c:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <vUsageFault_Handler+0xb8>)
 800986e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009874:	6293      	str	r3, [r2, #40]	; 0x28

	  }
	  deleteTask();
 8009876:	f7ff ff5d 	bl	8009734 <deleteTask>
	  }

  }


}
 800987a:	bd10      	pop	{r4, pc}
		  printf("Fuzzer crash usage fault!: ");
 800987c:	4811      	ldr	r0, [pc, #68]	; (80098c4 <vUsageFault_Handler+0xbc>)
 800987e:	f007 fc8f 	bl	80111a0 <printf>
		  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) printf("EX_CORTEX_DIV0 \n");
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800988a:	d10b      	bne.n	80098a4 <vUsageFault_Handler+0x9c>
		  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) printf("EX_CORTEX_UNA_ACCESS \n");
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <vUsageFault_Handler+0xb8>)
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009894:	d10a      	bne.n	80098ac <vUsageFault_Handler+0xa4>
		  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) printf("EX_CORTEX_UNDEF_INST \n");
 8009896:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <vUsageFault_Handler+0xb8>)
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800989e:	d109      	bne.n	80098b4 <vUsageFault_Handler+0xac>
		  NVIC_SystemReset();
 80098a0:	f7ff ff36 	bl	8009710 <__NVIC_SystemReset>
		  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) printf("EX_CORTEX_DIV0 \n");
 80098a4:	4808      	ldr	r0, [pc, #32]	; (80098c8 <vUsageFault_Handler+0xc0>)
 80098a6:	f007 fcdd 	bl	8011264 <puts>
 80098aa:	e7ef      	b.n	800988c <vUsageFault_Handler+0x84>
		  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) printf("EX_CORTEX_UNA_ACCESS \n");
 80098ac:	4807      	ldr	r0, [pc, #28]	; (80098cc <vUsageFault_Handler+0xc4>)
 80098ae:	f007 fcd9 	bl	8011264 <puts>
 80098b2:	e7f0      	b.n	8009896 <vUsageFault_Handler+0x8e>
		  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) printf("EX_CORTEX_UNDEF_INST \n");
 80098b4:	4806      	ldr	r0, [pc, #24]	; (80098d0 <vUsageFault_Handler+0xc8>)
 80098b6:	f007 fcd5 	bl	8011264 <puts>
 80098ba:	e7f1      	b.n	80098a0 <vUsageFault_Handler+0x98>
 80098bc:	24026000 	.word	0x24026000
 80098c0:	e000ed00 	.word	0xe000ed00
 80098c4:	24008bb0 	.word	0x24008bb0
 80098c8:	24008bcc 	.word	0x24008bcc
 80098cc:	24008bdc 	.word	0x24008bdc
 80098d0:	24008bf4 	.word	0x24008bf4

080098d4 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 80098d4:	f01e 0f04 	tst.w	lr, #4
 80098d8:	bf0c      	ite	eq
 80098da:	f3ef 8008 	mrseq	r0, MSP
 80098de:	f3ef 8009 	mrsne	r0, PSP
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	f382 8814 	msr	CONTROL, r2
 80098ea:	f8df 1004 	ldr.w	r1, [pc, #4]	; 80098f0 <handler_address_const>
 80098ee:	4708      	bx	r1

080098f0 <handler_address_const>:
 80098f0:	08009761 	.word	0x08009761

080098f4 <NMI_Handler>:
  */
void NMI_Handler( void ) __attribute__ (( naked ));
void NMI_Handler(void)
{

		__asm volatile
 80098f4:	f01e 0f04 	tst.w	lr, #4
 80098f8:	bf0c      	ite	eq
 80098fa:	f3ef 8008 	mrseq	r0, MSP
 80098fe:	f3ef 8009 	mrsne	r0, PSP
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	f382 8814 	msr	CONTROL, r2
 800990a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009910 <handler_address_const1>
 800990e:	4708      	bx	r1

08009910 <handler_address_const1>:
 8009910:	0800978d 	.word	0x0800978d

08009914 <HardFault_Handler>:
  */
void HardFault_Handler( void ) __attribute__ (( naked ));
void HardFault_Handler(void)
{

		__asm volatile
 8009914:	f01e 0f04 	tst.w	lr, #4
 8009918:	bf0c      	ite	eq
 800991a:	f3ef 8008 	mrseq	r0, MSP
 800991e:	f3ef 8009 	mrsne	r0, PSP
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	f382 8814 	msr	CONTROL, r2
 800992a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009930 <handler_address_const2>
 800992e:	4708      	bx	r1

08009930 <handler_address_const2>:
 8009930:	080097b9 	.word	0x080097b9

08009934 <BusFault_Handler>:
  */
void BusFault_Handler( void ) __attribute__ (( naked ));
void BusFault_Handler(void)
{

		__asm volatile
 8009934:	f01e 0f04 	tst.w	lr, #4
 8009938:	bf0c      	ite	eq
 800993a:	f3ef 8008 	mrseq	r0, MSP
 800993e:	f3ef 8009 	mrsne	r0, PSP
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f382 8814 	msr	CONTROL, r2
 800994a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009950 <handler_address_const3>
 800994e:	4708      	bx	r1

08009950 <handler_address_const3>:
 8009950:	080097d1 	.word	0x080097d1

08009954 <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void ) __attribute__ (( naked ));
void UsageFault_Handler(void)
{
		__asm volatile
 8009954:	f01e 0f04 	tst.w	lr, #4
 8009958:	bf0c      	ite	eq
 800995a:	f3ef 8008 	mrseq	r0, MSP
 800995e:	f3ef 8009 	mrsne	r0, PSP
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f382 8814 	msr	CONTROL, r2
 800996a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 8009970 <handler_address_const5>
 800996e:	4708      	bx	r1

08009970 <handler_address_const5>:
 8009970:	08009809 	.word	0x08009809

08009974 <checkCRC>:




bool checkCRC(RingBuffer_t *input)
{
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4605      	mov	r5, r0
	uint32_t numberwords;
	uint32_t *crcreceived;

	numberwords = (input->u32available-4)/4;
 8009978:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800997c:	3c04      	subs	r4, #4

#if defined(STM32H743xx) || defined(STM32L552xx)  || defined(STM32L552xx) || defined(STM32H745xx) || defined(STM32L152xE)
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800997e:	08a2      	lsrs	r2, r4, #2
 8009980:	4601      	mov	r1, r0
 8009982:	4806      	ldr	r0, [pc, #24]	; (800999c <checkCRC+0x28>)
 8009984:	f000 fe5c 	bl	800a640 <HAL_CRC_Calculate>



	crcreceived = (uint32_t *)(input->uxBuffer);

	if (crcreceived[numberwords] == uwCRCValue)
 8009988:	f024 0403 	bic.w	r4, r4, #3
	uwCRCValue = ~uwCRCValue;
 800998c:	43c0      	mvns	r0, r0
	if (crcreceived[numberwords] == uwCRCValue)
 800998e:	592b      	ldr	r3, [r5, r4]
	{
		return true;
	}
	return false;

}
 8009990:	4283      	cmp	r3, r0
 8009992:	bf14      	ite	ne
 8009994:	2000      	movne	r0, #0
 8009996:	2001      	moveq	r0, #1
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	bf00      	nop
 800999c:	24011e48 	.word	0x24011e48

080099a0 <SendBackFault>:

extern uint8_t  bufferDMA[512];
void SendBackFault(uint32_t faultcode)
{
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4606      	mov	r6, r0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
//#endif


	RingClear(&AFLfuzzer.inputAFL);
 80099a4:	4c14      	ldr	r4, [pc, #80]	; (80099f8 <SendBackFault+0x58>)
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 f8e7 	bl	8009b7a <RingClear>
	AFLfuzzer.inputLength = 0;
 80099ac:	2500      	movs	r5, #0
 80099ae:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
	AFLfuzzer.inputLengthpadded = 0;
 80099b2:	f8c4 5828 	str.w	r5, [r4, #2088]	; 0x828


	AFLfuzzer.aflheader[0] = faultcode;
 80099b6:	f8c4 6814 	str.w	r6, [r4, #2068]	; 0x814
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 80099ba:	2304      	movs	r3, #4
 80099bc:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
#if defined(STM32H743xx) || defined(STM32L552xx)  || defined(STM32L552xx) || defined(STM32H745xx) || defined(STM32L152xE)
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 80099c0:	f604 0614 	addw	r6, r4, #2068	; 0x814
 80099c4:	2202      	movs	r2, #2
 80099c6:	4631      	mov	r1, r6
 80099c8:	480c      	ldr	r0, [pc, #48]	; (80099fc <SendBackFault+0x5c>)
 80099ca:	f000 fe39 	bl	800a640 <HAL_CRC_Calculate>
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 80099ce:	43c0      	mvns	r0, r0
 80099d0:	f8c4 081c 	str.w	r0, [r4, #2076]	; 0x81c

#endif



	AFLfuzzer.bRXcomplete = false;
 80099d4:	f884 5864 	strb.w	r5, [r4, #2148]	; 0x864
	AFLfuzzer.inputLength = 0;
 80099d8:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
	AFLfuzzer.previousGuard = 0;
 80099dc:	f8a4 5858 	strh.w	r5, [r4, #2136]	; 0x858
	AFLfuzzer.faultcom = true;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f884 3861 	strb.w	r3, [r4, #2145]	; 0x861
	RingZeroes(&AFLfuzzer.inputAFL);
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 f8d3 	bl	8009b92 <RingZeroes>

#if USARTHW == 0
    #ifdef STM32H723xx
	    CDC_Transmit_HS((uint8_t *)AFLfuzzer.aflheader, 12);
    #else
        CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 12);
 80099ec:	210c      	movs	r1, #12
 80099ee:	4630      	mov	r0, r6
 80099f0:	f006 fe8e 	bl	8010710 <CDC_Transmit_FS>

#endif

#endif

}
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	bf00      	nop
 80099f8:	24026000 	.word	0x24026000
 80099fc:	24011e48 	.word	0x24011e48

08009a00 <FuzzingInputHandler>:



void FuzzingInputHandler(uint8_t* Buf, uint32_t *Len)
{
 8009a00:	b510      	push	{r4, lr}
 8009a02:	b084      	sub	sp, #16

	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	  BaseType_t xHigherPriorityTaskWoken;

	  xHigherPriorityTaskWoken = pdFALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	9303      	str	r3, [sp, #12]
	  uint8_t error;


	  error = 0;

	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 8009a08:	4b40      	ldr	r3, [pc, #256]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a0a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8009a0e:	b1fb      	cbz	r3, 8009a50 <FuzzingInputHandler+0x50>
 8009a10:	4a3e      	ldr	r2, [pc, #248]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a12:	f8d2 2828 	ldr.w	r2, [r2, #2088]	; 0x828
 8009a16:	b112      	cbz	r2, 8009a1e <FuzzingInputHandler+0x1e>
 8009a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a1c:	d96e      	bls.n	8009afc <FuzzingInputHandler+0xfc>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
	  {
	    	  //this is a wrong condition that should never happens,
	    	  //however fuzzing is stressing the whole system so we should clean the whole thing here
	    	  SendBackFault(FAULT_INLEGTH);
 8009a1e:	2007      	movs	r0, #7
 8009a20:	f7ff ffbe 	bl	80099a0 <SendBackFault>

	  	     }


      }
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	b12b      	cbz	r3, 8009a34 <FuzzingInputHandler+0x34>
 8009a28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

}
 8009a34:	b004      	add	sp, #16
 8009a36:	bd10      	pop	{r4, pc}
        	  SendBackFault(FAULT_INLEGTH);
 8009a38:	2007      	movs	r0, #7
 8009a3a:	f7ff ffb1 	bl	80099a0 <SendBackFault>
      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 8009a3e:	e7f1      	b.n	8009a24 <FuzzingInputHandler+0x24>
	  	    		AFLfuzzer.faultcom = true;
 8009a40:	4b32      	ldr	r3, [pc, #200]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
	  	    		SendBackFault(FAULT_COMM);
 8009a48:	2006      	movs	r0, #6
 8009a4a:	f7ff ffa9 	bl	80099a0 <SendBackFault>
 8009a4e:	e7e9      	b.n	8009a24 <FuzzingInputHandler+0x24>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 8009a50:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a52:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 8009a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5a:	d8e0      	bhi.n	8009a1e <FuzzingInputHandler+0x1e>
	      auxbytes.vbytes[0]=Buf[0];
 8009a5c:	7802      	ldrb	r2, [r0, #0]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f362 0307 	bfi	r3, r2, #0, #8
	      auxbytes.vbytes[1]=Buf[1];
 8009a64:	7842      	ldrb	r2, [r0, #1]
 8009a66:	f362 230f 	bfi	r3, r2, #8, #8
	      auxbytes.vbytes[2]=Buf[2];
 8009a6a:	7882      	ldrb	r2, [r0, #2]
 8009a6c:	f362 4317 	bfi	r3, r2, #16, #8
	      auxbytes.vbytes[3]=Buf[3];
 8009a70:	78c2      	ldrb	r2, [r0, #3]
 8009a72:	f362 631f 	bfi	r3, r2, #24, #8
	      AFLfuzzer.inputLength = auxbytes.vint32;
 8009a76:	461a      	mov	r2, r3
 8009a78:	4c24      	ldr	r4, [pc, #144]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a7a:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	      if(AFLfuzzer.inputLength % 4)
 8009a7e:	f013 0f03 	tst.w	r3, #3
 8009a82:	d002      	beq.n	8009a8a <FuzzingInputHandler+0x8a>
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength + 4 - AFLfuzzer.inputLength % 4;
 8009a84:	f023 0303 	bic.w	r3, r3, #3
 8009a88:	1d1a      	adds	r2, r3, #4
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a8c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
	      if((AFLfuzzer.inputLengthpadded + 4 )> MAX_BUFFER_INPUT)
 8009a90:	1d13      	adds	r3, r2, #4
 8009a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a96:	d8cf      	bhi.n	8009a38 <FuzzingInputHandler+0x38>
      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009a9a:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d0c0      	beq.n	8009a24 <FuzzingInputHandler+0x24>
	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 8009aa2:	3204      	adds	r2, #4
 8009aa4:	461c      	mov	r4, r3
 8009aa6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009aaa:	1ad2      	subs	r2, r2, r3
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 8009aac:	680b      	ldr	r3, [r1, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	bf28      	it	cs
 8009ab2:	461a      	movcs	r2, r3
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 f836 	bl	8009b28 <RingCopy>
	  	     if( (AFLfuzzer.inputLengthpadded + 4) == AFLfuzzer.inputAFL.u32available)
 8009abc:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d1ac      	bne.n	8009a24 <FuzzingInputHandler+0x24>
	  	    	if( checkCRC(&AFLfuzzer.inputAFL) )
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7ff ff52 	bl	8009974 <checkCRC>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d0b5      	beq.n	8009a40 <FuzzingInputHandler+0x40>
	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 8009ad4:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
 8009ad8:	f8c4 380c 	str.w	r3, [r4, #2060]	; 0x80c
	  	    		AFLfuzzer.bRXcomplete = 1;
 8009adc:	2101      	movs	r1, #1
 8009ade:	f884 1864 	strb.w	r1, [r4, #2148]	; 0x864
	  	    		AFLfuzzer.faultcom = false;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f884 3861 	strb.w	r3, [r4, #2145]	; 0x861
	  	    		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 8009ae8:	aa03      	add	r2, sp, #12
 8009aea:	9201      	str	r2, [sp, #4]
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	460b      	mov	r3, r1
 8009af0:	460a      	mov	r2, r1
 8009af2:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 8009af6:	f7f9 f84f 	bl	8002b98 <xTaskGenericNotifyFromISR>
 8009afa:	e793      	b.n	8009a24 <FuzzingInputHandler+0x24>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 8009afc:	4b03      	ldr	r3, [pc, #12]	; (8009b0c <FuzzingInputHandler+0x10c>)
 8009afe:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 8009b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b06:	d88a      	bhi.n	8009a1e <FuzzingInputHandler+0x1e>
 8009b08:	e7c6      	b.n	8009a98 <FuzzingInputHandler+0x98>
 8009b0a:	bf00      	nop
 8009b0c:	24026000 	.word	0x24026000

08009b10 <activateCortexMtrapsUNA>:


// Activate the Cortex-M traps including unaligned access
void activateCortexMtrapsUNA()
{
	 SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 8009b10:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <activateCortexMtrapsUNA+0x14>)
 8009b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b14:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8009b18:	625a      	str	r2, [r3, #36]	; 0x24
	  | SCB_SHCSR_BUSFAULTENA_Msk
	  | SCB_SHCSR_MEMFAULTENA_Msk; // enable Usage-/Bus-/MPU Fault

	  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk |  // enable div by zero trap
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	f042 0218 	orr.w	r2, r2, #24
 8009b20:	615a      	str	r2, [r3, #20]
			   SCB_CCR_UNALIGN_TRP_Msk;    // enable unaligned access trap

}
 8009b22:	4770      	bx	lr
 8009b24:	e000ed00 	.word	0xe000ed00

08009b28 <RingCopy>:


/* Ring Buffer functions */

void RingCopy(RingBuffer_t *xRingBuffer, uint8_t* u8Buff, uint32_t len)
{
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4604      	mov	r4, r0
	uint32_t u32Free=0;


	u32Free = MAX_BUFFER_INPUT - xRingBuffer->u32end;
 8009b2c:	f8d0 0804 	ldr.w	r0, [r0, #2052]	; 0x804
 8009b30:	f5c0 6600 	rsb	r6, r0, #2048	; 0x800

	if(u32Free > len)
 8009b34:	4296      	cmp	r6, r2
 8009b36:	d911      	bls.n	8009b5c <RingCopy+0x34>
 8009b38:	4615      	mov	r5, r2
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, len );
 8009b3a:	4420      	add	r0, r4
 8009b3c:	f7ff f804 	bl	8008b48 <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 8009b40:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8009b44:	442b      	add	r3, r5
 8009b46:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
		xRingBuffer->u32available += len;
 8009b4a:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
 8009b4e:	442a      	add	r2, r5
 8009b50:	f8c4 2808 	str.w	r2, [r4, #2056]	; 0x808
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
		xRingBuffer->u32available += u32Free;
	}

	xRingBuffer->overflow = false;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f884 3810 	strb.w	r3, [r4, #2064]	; 0x810

}
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	4420      	add	r0, r4
 8009b60:	f7fe fff2 	bl	8008b48 <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 8009b64:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8009b68:	4433      	add	r3, r6
 8009b6a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
		xRingBuffer->u32available += u32Free;
 8009b6e:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
 8009b72:	4433      	add	r3, r6
 8009b74:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
 8009b78:	e7ec      	b.n	8009b54 <RingCopy+0x2c>

08009b7a <RingClear>:
return xRingBuffer->u32available;
}

void RingClear(RingBuffer_t *xRingBuffer)
{
xRingBuffer->u32start = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
xRingBuffer->u32end = 0;
 8009b80:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
xRingBuffer->u32available = 0;
 8009b84:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
xRingBuffer->u32availablenopad = 0;
 8009b88:	f8c0 380c 	str.w	r3, [r0, #2060]	; 0x80c
xRingBuffer->overflow = false;
 8009b8c:	f880 3810 	strb.w	r3, [r0, #2064]	; 0x810
}
 8009b90:	4770      	bx	lr

08009b92 <RingZeroes>:


void RingZeroes(RingBuffer_t *xRingBuffer)
{
 8009b92:	b508      	push	{r3, lr}
	RingClear(xRingBuffer);
 8009b94:	f7ff fff1 	bl	8009b7a <RingClear>
	{
		xRingBuffer->uxBuffer[i]=0;
	}
*/

}
 8009b98:	bd08      	pop	{r3, pc}
	...

08009b9c <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_RNG_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch) {
 8009b9c:	b500      	push	{lr}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	f88d 0007 	strb.w	r0, [sp, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f10d 0107 	add.w	r1, sp, #7
 8009bac:	4802      	ldr	r0, [pc, #8]	; (8009bb8 <__io_putchar+0x1c>)
 8009bae:	f004 f8b7 	bl	800dd20 <HAL_UART_Transmit>
}
 8009bb2:	b003      	add	sp, #12
 8009bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bb8:	24011e80 	.word	0x24011e80

08009bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009bbc:	b500      	push	{lr}
 8009bbe:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bc0:	224c      	movs	r2, #76	; 0x4c
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	a809      	add	r0, sp, #36	; 0x24
 8009bc6:	f007 fa8d 	bl	80110e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bca:	2220      	movs	r2, #32
 8009bcc:	2100      	movs	r1, #0
 8009bce:	a801      	add	r0, sp, #4
 8009bd0:	f007 fa88 	bl	80110e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8009bd4:	2002      	movs	r0, #2
 8009bd6:	f001 fc7f 	bl	800b4d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4b26      	ldr	r3, [pc, #152]	; (8009c78 <SystemClock_Config+0xbc>)
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009be6:	619a      	str	r2, [r3, #24]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4b22      	ldr	r3, [pc, #136]	; (8009c7c <SystemClock_Config+0xc0>)
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	f042 0201 	orr.w	r2, r2, #1
 8009bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009c04:	4a1c      	ldr	r2, [pc, #112]	; (8009c78 <SystemClock_Config+0xbc>)
 8009c06:	6993      	ldr	r3, [r2, #24]
 8009c08:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009c0c:	d0fb      	beq.n	8009c06 <SystemClock_Config+0x4a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8009c0e:	2321      	movs	r3, #33	; 0x21
 8009c10:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009c12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009c16:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009c18:	2201      	movs	r2, #1
 8009c1a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c20:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009c22:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8009c24:	2278      	movs	r2, #120	; 0x78
 8009c26:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8009c28:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009c2a:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009c2c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8009c2e:	230c      	movs	r3, #12
 8009c30:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009c32:	2300      	movs	r3, #0
 8009c34:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8009c36:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c38:	a809      	add	r0, sp, #36	; 0x24
 8009c3a:	f001 fc7d 	bl	800b538 <HAL_RCC_OscConfig>
 8009c3e:	b9b8      	cbnz	r0, 8009c70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c40:	233f      	movs	r3, #63	; 0x3f
 8009c42:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c44:	2303      	movs	r3, #3
 8009c46:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8009c50:	2340      	movs	r3, #64	; 0x40
 8009c52:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009c54:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c5a:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8009c5c:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009c5e:	2104      	movs	r1, #4
 8009c60:	eb0d 0001 	add.w	r0, sp, r1
 8009c64:	f002 f882 	bl	800bd6c <HAL_RCC_ClockConfig>
 8009c68:	b920      	cbnz	r0, 8009c74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
  }
}
 8009c6a:	b01d      	add	sp, #116	; 0x74
 8009c6c:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8009c70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009c72:	e7fe      	b.n	8009c72 <SystemClock_Config+0xb6>
 8009c74:	b672      	cpsid	i
 8009c76:	e7fe      	b.n	8009c76 <SystemClock_Config+0xba>
 8009c78:	58024800 	.word	0x58024800
 8009c7c:	58000400 	.word	0x58000400

08009c80 <main>:
{
 8009c80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8009c84:	b08d      	sub	sp, #52	; 0x34
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8009c86:	4b9f      	ldr	r3, [pc, #636]	; (8009f04 <main+0x284>)
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009c8e:	d113      	bne.n	8009cb8 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8009c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c94:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009c98:	4b9a      	ldr	r3, [pc, #616]	; (8009f04 <main+0x284>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009ca4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009ca8:	695a      	ldr	r2, [r3, #20]
 8009caa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009cae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009cb4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8009cb8:	f000 fb46 	bl	800a348 <HAL_Init>
  SystemClock_Config();
 8009cbc:	f7ff ff7e 	bl	8009bbc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	9407      	str	r4, [sp, #28]
 8009cc4:	9408      	str	r4, [sp, #32]
 8009cc6:	9409      	str	r4, [sp, #36]	; 0x24
 8009cc8:	940a      	str	r4, [sp, #40]	; 0x28
 8009cca:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ccc:	4b8e      	ldr	r3, [pc, #568]	; (8009f08 <main+0x288>)
 8009cce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009cd2:	f042 0204 	orr.w	r2, r2, #4
 8009cd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009cda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009cde:	f002 0204 	and.w	r2, r2, #4
 8009ce2:	9200      	str	r2, [sp, #0]
 8009ce4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009ce6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009cf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009cf6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009cfa:	9201      	str	r2, [sp, #4]
 8009cfc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009d0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d0e:	f002 0201 	and.w	r2, r2, #1
 8009d12:	9202      	str	r2, [sp, #8]
 8009d14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d1a:	f042 0202 	orr.w	r2, r2, #2
 8009d1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009d22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d26:	f002 0202 	and.w	r2, r2, #2
 8009d2a:	9203      	str	r2, [sp, #12]
 8009d2c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009d2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d32:	f042 0208 	orr.w	r2, r2, #8
 8009d36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009d3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d3e:	f002 0208 	and.w	r2, r2, #8
 8009d42:	9204      	str	r2, [sp, #16]
 8009d44:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009d46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009d52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d56:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009d5a:	9205      	str	r2, [sp, #20]
 8009d5c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009d62:	f042 0210 	orr.w	r2, r2, #16
 8009d66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	9306      	str	r3, [sp, #24]
 8009d74:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8009d76:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8009f30 <main+0x2b0>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8009d80:	4640      	mov	r0, r8
 8009d82:	f000 fdfd 	bl	800a980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8009d86:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8009f34 <main+0x2b4>
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009d90:	4650      	mov	r0, sl
 8009d92:	f000 fdf5 	bl	800a980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009d96:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8009f38 <main+0x2b8>
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	4648      	mov	r0, r9
 8009da0:	f000 fdee 	bl	800a980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8009da4:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8009da8:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dac:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dae:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009db0:	4f56      	ldr	r7, [pc, #344]	; (8009f0c <main+0x28c>)
 8009db2:	a907      	add	r1, sp, #28
 8009db4:	4638      	mov	r0, r7
 8009db6:	f000 fcb1 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009dba:	2332      	movs	r3, #50	; 0x32
 8009dbc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dbe:	2502      	movs	r5, #2
 8009dc0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dc4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dc6:	260b      	movs	r6, #11
 8009dc8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dca:	a907      	add	r1, sp, #28
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f000 fca5 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009dd2:	2386      	movs	r3, #134	; 0x86
 8009dd4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dda:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009ddc:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dde:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
 8009de2:	a907      	add	r1, sp, #28
 8009de4:	4638      	mov	r0, r7
 8009de6:	f000 fc99 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009dea:	2320      	movs	r3, #32
 8009dec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dee:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df2:	a907      	add	r1, sp, #28
 8009df4:	4638      	mov	r0, r7
 8009df6:	f000 fc91 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8009dfa:	f244 0301 	movw	r3, #16385	; 0x4001
 8009dfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e00:	2701      	movs	r7, #1
 8009e02:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e04:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e06:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e08:	a907      	add	r1, sp, #28
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	f000 fc86 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009e10:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e14:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e16:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e18:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e1a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e1c:	a907      	add	r1, sp, #28
 8009e1e:	4640      	mov	r0, r8
 8009e20:	f000 fc7c 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8009e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e2a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e2c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e2e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009e30:	a907      	add	r1, sp, #28
 8009e32:	4650      	mov	r0, sl
 8009e34:	f000 fc72 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009e3c:	4b34      	ldr	r3, [pc, #208]	; (8009f10 <main+0x290>)
 8009e3e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e40:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8009e42:	f508 58a0 	add.w	r8, r8, #5120	; 0x1400
 8009e46:	a907      	add	r1, sp, #28
 8009e48:	4640      	mov	r0, r8
 8009e4a:	f000 fc67 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009e4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e52:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e54:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e56:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e58:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e5a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009e5c:	a907      	add	r1, sp, #28
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f000 fc5c 	bl	800a71c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8009e64:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e66:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e68:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e6a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8009e6c:	a907      	add	r1, sp, #28
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fc54 	bl	800a71c <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8009e74:	4827      	ldr	r0, [pc, #156]	; (8009f14 <main+0x294>)
 8009e76:	4b28      	ldr	r3, [pc, #160]	; (8009f18 <main+0x298>)
 8009e78:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 7500000;
 8009e7a:	4b28      	ldr	r3, [pc, #160]	; (8009f1c <main+0x29c>)
 8009e7c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009e7e:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009e80:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009e82:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009e84:	230c      	movs	r3, #12
 8009e86:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e88:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e8a:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e8c:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e8e:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e90:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009e92:	f003 fff3 	bl	800de7c <HAL_UART_Init>
 8009e96:	bb48      	cbnz	r0, 8009eec <main+0x26c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e98:	2100      	movs	r1, #0
 8009e9a:	481e      	ldr	r0, [pc, #120]	; (8009f14 <main+0x294>)
 8009e9c:	f004 f867 	bl	800df6e <HAL_UARTEx_SetTxFifoThreshold>
 8009ea0:	bb30      	cbnz	r0, 8009ef0 <main+0x270>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	481b      	ldr	r0, [pc, #108]	; (8009f14 <main+0x294>)
 8009ea6:	f004 f887 	bl	800dfb8 <HAL_UARTEx_SetRxFifoThreshold>
 8009eaa:	bb18      	cbnz	r0, 8009ef4 <main+0x274>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8009eac:	4819      	ldr	r0, [pc, #100]	; (8009f14 <main+0x294>)
 8009eae:	f004 f83f 	bl	800df30 <HAL_UARTEx_DisableFifoMode>
 8009eb2:	bb08      	cbnz	r0, 8009ef8 <main+0x278>
  hrng.Instance = RNG;
 8009eb4:	481a      	ldr	r0, [pc, #104]	; (8009f20 <main+0x2a0>)
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <main+0x2a4>)
 8009eb8:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009ebe:	f003 f911 	bl	800d0e4 <HAL_RNG_Init>
 8009ec2:	b9d8      	cbnz	r0, 8009efc <main+0x27c>
  hcrc.Instance = CRC;
 8009ec4:	4818      	ldr	r0, [pc, #96]	; (8009f28 <main+0x2a8>)
 8009ec6:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <main+0x2ac>)
 8009ec8:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009ece:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 8009ed0:	2360      	movs	r3, #96	; 0x60
 8009ed2:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8009ed4:	2380      	movs	r3, #128	; 0x80
 8009ed6:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009edc:	f000 fb4e 	bl	800a57c <HAL_CRC_Init>
 8009ee0:	b970      	cbnz	r0, 8009f00 <main+0x280>
  activateCortexMtrapsUNA();
 8009ee2:	f7ff fe15 	bl	8009b10 <activateCortexMtrapsUNA>
  app_main();
 8009ee6:	f7ff fbf3 	bl	80096d0 <app_main>
     while (1)
 8009eea:	e7fe      	b.n	8009eea <main+0x26a>
  __ASM volatile ("cpsid i" : : : "memory");
 8009eec:	b672      	cpsid	i
  while (1)
 8009eee:	e7fe      	b.n	8009eee <main+0x26e>
 8009ef0:	b672      	cpsid	i
 8009ef2:	e7fe      	b.n	8009ef2 <main+0x272>
 8009ef4:	b672      	cpsid	i
 8009ef6:	e7fe      	b.n	8009ef6 <main+0x276>
 8009ef8:	b672      	cpsid	i
 8009efa:	e7fe      	b.n	8009efa <main+0x27a>
 8009efc:	b672      	cpsid	i
 8009efe:	e7fe      	b.n	8009efe <main+0x27e>
 8009f00:	b672      	cpsid	i
 8009f02:	e7fe      	b.n	8009f02 <main+0x282>
 8009f04:	e000ed00 	.word	0xe000ed00
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	58020800 	.word	0x58020800
 8009f10:	11110000 	.word	0x11110000
 8009f14:	24011e80 	.word	0x24011e80
 8009f18:	40004800 	.word	0x40004800
 8009f1c:	007270e0 	.word	0x007270e0
 8009f20:	24011e6c 	.word	0x24011e6c
 8009f24:	48021800 	.word	0x48021800
 8009f28:	24011e48 	.word	0x24011e48
 8009f2c:	58024c00 	.word	0x58024c00
 8009f30:	58020400 	.word	0x58020400
 8009f34:	58020c00 	.word	0x58020c00
 8009f38:	58021000 	.word	0x58021000

08009f3c <HAL_TIM_PeriodElapsedCallback>:
{
 8009f3c:	b508      	push	{r3, lr}
  if (htim->Instance == TIM16) {
 8009f3e:	6802      	ldr	r2, [r0, #0]
 8009f40:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d000      	beq.n	8009f48 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8009f46:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8009f48:	f000 fa2c 	bl	800a3a4 <HAL_IncTick>
}
 8009f4c:	e7fb      	b.n	8009f46 <HAL_TIM_PeriodElapsedCallback+0xa>
 8009f4e:	bf00      	nop
 8009f50:	40014400 	.word	0x40014400

08009f54 <Error_Handler>:
 8009f54:	b672      	cpsid	i
  while (1)
 8009f56:	e7fe      	b.n	8009f56 <Error_Handler+0x2>

08009f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f58:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <HAL_MspInit+0x20>)
 8009f5c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8009f60:	f042 0202 	orr.w	r2, r2, #2
 8009f64:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8009f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f74:	b002      	add	sp, #8
 8009f76:	4770      	bx	lr
 8009f78:	58024400 	.word	0x58024400

08009f7c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8009f7c:	6802      	ldr	r2, [r0, #0]
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <HAL_CRC_MspInit+0x2c>)
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d000      	beq.n	8009f86 <HAL_CRC_MspInit+0xa>
 8009f84:	4770      	bx	lr
{
 8009f86:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009f88:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009f8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009f90:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009f94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009fa4:	b002      	add	sp, #8
 8009fa6:	4770      	bx	lr
 8009fa8:	58024c00 	.word	0x58024c00

08009fac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8009fac:	b510      	push	{r4, lr}
 8009fae:	b0b0      	sub	sp, #192	; 0xc0
 8009fb0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009fb2:	22bc      	movs	r2, #188	; 0xbc
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	a801      	add	r0, sp, #4
 8009fb8:	f007 f894 	bl	80110e4 <memset>
  if(hrng->Instance==RNG)
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	4b12      	ldr	r3, [pc, #72]	; (800a008 <HAL_RNG_MspInit+0x5c>)
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d001      	beq.n	8009fc8 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8009fc4:	b030      	add	sp, #192	; 0xc0
 8009fc6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8009fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fcc:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fce:	a801      	add	r0, sp, #4
 8009fd0:	f002 f998 	bl	800c304 <HAL_RCCEx_PeriphCLKConfig>
 8009fd4:	b9a8      	cbnz	r0, 800a002 <HAL_RNG_MspInit+0x56>
    __HAL_RCC_RNG_CLK_ENABLE();
 8009fd6:	4b0d      	ldr	r3, [pc, #52]	; (800a00c <HAL_RNG_MspInit+0x60>)
 8009fd8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8009fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fe0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009fe4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	2050      	movs	r0, #80	; 0x50
 8009ff6:	f000 fa13 	bl	800a420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8009ffa:	2050      	movs	r0, #80	; 0x50
 8009ffc:	f000 fa44 	bl	800a488 <HAL_NVIC_EnableIRQ>
}
 800a000:	e7e0      	b.n	8009fc4 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 800a002:	f7ff ffa7 	bl	8009f54 <Error_Handler>
 800a006:	e7e6      	b.n	8009fd6 <HAL_RNG_MspInit+0x2a>
 800a008:	48021800 	.word	0x48021800
 800a00c:	58024400 	.word	0x58024400

0800a010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a010:	b510      	push	{r4, lr}
 800a012:	b0b6      	sub	sp, #216	; 0xd8
 800a014:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a016:	2100      	movs	r1, #0
 800a018:	9131      	str	r1, [sp, #196]	; 0xc4
 800a01a:	9132      	str	r1, [sp, #200]	; 0xc8
 800a01c:	9133      	str	r1, [sp, #204]	; 0xcc
 800a01e:	9134      	str	r1, [sp, #208]	; 0xd0
 800a020:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a022:	22bc      	movs	r2, #188	; 0xbc
 800a024:	a802      	add	r0, sp, #8
 800a026:	f007 f85d 	bl	80110e4 <memset>
  if(huart->Instance==USART3)
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	4b1a      	ldr	r3, [pc, #104]	; (800a098 <HAL_UART_MspInit+0x88>)
 800a02e:	429a      	cmp	r2, r3
 800a030:	d001      	beq.n	800a036 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a032:	b036      	add	sp, #216	; 0xd8
 800a034:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a036:	2302      	movs	r3, #2
 800a038:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a03a:	a802      	add	r0, sp, #8
 800a03c:	f002 f962 	bl	800c304 <HAL_RCCEx_PeriphCLKConfig>
 800a040:	bb38      	cbnz	r0, 800a092 <HAL_UART_MspInit+0x82>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a042:	4b16      	ldr	r3, [pc, #88]	; (800a09c <HAL_UART_MspInit+0x8c>)
 800a044:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800a048:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a04c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800a050:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800a054:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a058:	9200      	str	r2, [sp, #0]
 800a05a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a05c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a060:	f042 0208 	orr.w	r2, r2, #8
 800a064:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800a074:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a078:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a07a:	2302      	movs	r3, #2
 800a07c:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a082:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a084:	2307      	movs	r3, #7
 800a086:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a088:	a931      	add	r1, sp, #196	; 0xc4
 800a08a:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <HAL_UART_MspInit+0x90>)
 800a08c:	f000 fb46 	bl	800a71c <HAL_GPIO_Init>
}
 800a090:	e7cf      	b.n	800a032 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800a092:	f7ff ff5f 	bl	8009f54 <Error_Handler>
 800a096:	e7d4      	b.n	800a042 <HAL_UART_MspInit+0x32>
 800a098:	40004800 	.word	0x40004800
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	58020c00 	.word	0x58020c00

0800a0a4 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a0a4:	280f      	cmp	r0, #15
 800a0a6:	d901      	bls.n	800a0ac <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800a0a8:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim16);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800a0aa:	4770      	bx	lr
{
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	b08a      	sub	sp, #40	; 0x28
 800a0b0:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4601      	mov	r1, r0
 800a0b6:	2075      	movs	r0, #117	; 0x75
 800a0b8:	f000 f9b2 	bl	800a420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800a0bc:	2075      	movs	r0, #117	; 0x75
 800a0be:	f000 f9e3 	bl	800a488 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800a0c2:	4b18      	ldr	r3, [pc, #96]	; (800a124 <HAL_InitTick+0x80>)
 800a0c4:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM16_CLK_ENABLE();
 800a0c6:	4b18      	ldr	r3, [pc, #96]	; (800a128 <HAL_InitTick+0x84>)
 800a0c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a0cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a0d0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800a0d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a0e0:	a901      	add	r1, sp, #4
 800a0e2:	a802      	add	r0, sp, #8
 800a0e4:	f001 ffe0 	bl	800c0a8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a0e8:	f001 ffcc 	bl	800c084 <HAL_RCC_GetPCLK2Freq>
 800a0ec:	4603      	mov	r3, r0
  htim16.Instance = TIM16;
 800a0ee:	480f      	ldr	r0, [pc, #60]	; (800a12c <HAL_InitTick+0x88>)
 800a0f0:	4a0f      	ldr	r2, [pc, #60]	; (800a130 <HAL_InitTick+0x8c>)
 800a0f2:	6002      	str	r2, [r0, #0]
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800a0f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0f8:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a0fa:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a0fc:	4a0d      	ldr	r2, [pc, #52]	; (800a134 <HAL_InitTick+0x90>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0c9b      	lsrs	r3, r3, #18
 800a104:	3b01      	subs	r3, #1
  htim16.Init.Prescaler = uwPrescalerValue;
 800a106:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a10c:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800a10e:	f003 f9fb 	bl	800d508 <HAL_TIM_Base_Init>
 800a112:	b110      	cbz	r0, 800a11a <HAL_InitTick+0x76>
  return HAL_ERROR;
 800a114:	2001      	movs	r0, #1
}
 800a116:	b00a      	add	sp, #40	; 0x28
 800a118:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim16);
 800a11a:	4804      	ldr	r0, [pc, #16]	; (800a12c <HAL_InitTick+0x88>)
 800a11c:	f003 f85e 	bl	800d1dc <HAL_TIM_Base_Start_IT>
 800a120:	e7f9      	b.n	800a116 <HAL_InitTick+0x72>
 800a122:	bf00      	nop
 800a124:	2400801c 	.word	0x2400801c
 800a128:	58024400 	.word	0x58024400
 800a12c:	24011f10 	.word	0x24011f10
 800a130:	40014400 	.word	0x40014400
 800a134:	431bde83 	.word	0x431bde83

0800a138 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a138:	4770      	bx	lr
	...

0800a13c <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800a13c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800a13e:	4802      	ldr	r0, [pc, #8]	; (800a148 <RNG_IRQHandler+0xc>)
 800a140:	f003 f80d 	bl	800d15e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800a144:	bd08      	pop	{r3, pc}
 800a146:	bf00      	nop
 800a148:	24011e6c 	.word	0x24011e6c

0800a14c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a14c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a14e:	4802      	ldr	r0, [pc, #8]	; (800a158 <OTG_FS_IRQHandler+0xc>)
 800a150:	f000 fcdc 	bl	800ab0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a154:	bd08      	pop	{r3, pc}
 800a156:	bf00      	nop
 800a158:	240354d4 	.word	0x240354d4

0800a15c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800a15c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800a15e:	4802      	ldr	r0, [pc, #8]	; (800a168 <TIM16_IRQHandler+0xc>)
 800a160:	f003 f892 	bl	800d288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800a164:	bd08      	pop	{r3, pc}
 800a166:	bf00      	nop
 800a168:	24011f10 	.word	0x24011f10

0800a16c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800a16c:	2001      	movs	r0, #1
 800a16e:	4770      	bx	lr

0800a170 <_kill>:

int _kill(int pid, int sig)
{
 800a170:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a172:	f006 fccd 	bl	8010b10 <__errno>
 800a176:	2316      	movs	r3, #22
 800a178:	6003      	str	r3, [r0, #0]
	return -1;
}
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17e:	bd08      	pop	{r3, pc}

0800a180 <_exit>:

void _exit (int status)
{
 800a180:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a182:	f006 fcc5 	bl	8010b10 <__errno>
 800a186:	2316      	movs	r3, #22
 800a188:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800a18a:	e7fe      	b.n	800a18a <_exit+0xa>

0800a18c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a18c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a18e:	1e16      	subs	r6, r2, #0
 800a190:	dd07      	ble.n	800a1a2 <_read+0x16>
 800a192:	460c      	mov	r4, r1
 800a194:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800a196:	f3af 8000 	nop.w
 800a19a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a19e:	42a5      	cmp	r5, r4
 800a1a0:	d1f9      	bne.n	800a196 <_read+0xa>
	}

return len;
}
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}

0800a1a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a1a6:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a1a8:	1e16      	subs	r6, r2, #0
 800a1aa:	dd07      	ble.n	800a1bc <_write+0x16>
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800a1b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1b4:	f7ff fcf2 	bl	8009b9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d1f9      	bne.n	800a1b0 <_write+0xa>
	}
	return len;
}
 800a1bc:	4630      	mov	r0, r6
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <_close>:

int _close(int file)
{
	return -1;
}
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c4:	4770      	bx	lr

0800a1c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a1c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	4770      	bx	lr

0800a1d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	4770      	bx	lr

0800a1d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4770      	bx	lr

0800a1d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a1d8:	b508      	push	{r3, lr}
 800a1da:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a1dc:	4a0c      	ldr	r2, [pc, #48]	; (800a210 <_sbrk+0x38>)
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	b152      	cbz	r2, 800a1f8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a1e2:	4a0b      	ldr	r2, [pc, #44]	; (800a210 <_sbrk+0x38>)
 800a1e4:	6810      	ldr	r0, [r2, #0]
 800a1e6:	4403      	add	r3, r0
 800a1e8:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <_sbrk+0x3c>)
 800a1ea:	490b      	ldr	r1, [pc, #44]	; (800a218 <_sbrk+0x40>)
 800a1ec:	1a52      	subs	r2, r2, r1
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d806      	bhi.n	800a200 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800a1f2:	4a07      	ldr	r2, [pc, #28]	; (800a210 <_sbrk+0x38>)
 800a1f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800a1f6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800a1f8:	4a05      	ldr	r2, [pc, #20]	; (800a210 <_sbrk+0x38>)
 800a1fa:	4908      	ldr	r1, [pc, #32]	; (800a21c <_sbrk+0x44>)
 800a1fc:	6011      	str	r1, [r2, #0]
 800a1fe:	e7f0      	b.n	800a1e2 <_sbrk+0xa>
    errno = ENOMEM;
 800a200:	f006 fc86 	bl	8010b10 <__errno>
 800a204:	230c      	movs	r3, #12
 800a206:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800a208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a20c:	e7f3      	b.n	800a1f6 <_sbrk+0x1e>
 800a20e:	bf00      	nop
 800a210:	24011f5c 	.word	0x24011f5c
 800a214:	24080000 	.word	0x24080000
 800a218:	00000400 	.word	0x00000400
 800a21c:	24036000 	.word	0x24036000

0800a220 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a220:	4a29      	ldr	r2, [pc, #164]	; (800a2c8 <SystemInit+0xa8>)
 800a222:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a22a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a22e:	4b27      	ldr	r3, [pc, #156]	; (800a2cc <SystemInit+0xac>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 030f 	and.w	r3, r3, #15
 800a236:	2b06      	cmp	r3, #6
 800a238:	d806      	bhi.n	800a248 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a23a:	4a24      	ldr	r2, [pc, #144]	; (800a2cc <SystemInit+0xac>)
 800a23c:	6813      	ldr	r3, [r2, #0]
 800a23e:	f023 030f 	bic.w	r3, r3, #15
 800a242:	f043 0307 	orr.w	r3, r3, #7
 800a246:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a248:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <SystemInit+0xb0>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a252:	2200      	movs	r2, #0
 800a254:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a256:	6819      	ldr	r1, [r3, #0]
 800a258:	4a1e      	ldr	r2, [pc, #120]	; (800a2d4 <SystemInit+0xb4>)
 800a25a:	400a      	ands	r2, r1
 800a25c:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a25e:	4b1b      	ldr	r3, [pc, #108]	; (800a2cc <SystemInit+0xac>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f013 0f08 	tst.w	r3, #8
 800a266:	d006      	beq.n	800a276 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a268:	4a18      	ldr	r2, [pc, #96]	; (800a2cc <SystemInit+0xac>)
 800a26a:	6813      	ldr	r3, [r2, #0]
 800a26c:	f023 030f 	bic.w	r3, r3, #15
 800a270:	f043 0307 	orr.w	r3, r3, #7
 800a274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a276:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <SystemInit+0xb0>)
 800a278:	2200      	movs	r2, #0
 800a27a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a27c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a27e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a280:	4915      	ldr	r1, [pc, #84]	; (800a2d8 <SystemInit+0xb8>)
 800a282:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a284:	4915      	ldr	r1, [pc, #84]	; (800a2dc <SystemInit+0xbc>)
 800a286:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a288:	4915      	ldr	r1, [pc, #84]	; (800a2e0 <SystemInit+0xc0>)
 800a28a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a28c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a28e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a290:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a292:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a294:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a296:	6819      	ldr	r1, [r3, #0]
 800a298:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a29c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a29e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a2a0:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <SystemInit+0xc4>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <SystemInit+0xc8>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ac:	d203      	bcs.n	800a2b6 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <SystemInit+0xcc>)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <SystemInit+0xd0>)
 800a2b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a2be:	4b02      	ldr	r3, [pc, #8]	; (800a2c8 <SystemInit+0xa8>)
 800a2c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a2c6:	4770      	bx	lr
 800a2c8:	e000ed00 	.word	0xe000ed00
 800a2cc:	52002000 	.word	0x52002000
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	eaf6ed7f 	.word	0xeaf6ed7f
 800a2d8:	02020200 	.word	0x02020200
 800a2dc:	01ff0000 	.word	0x01ff0000
 800a2e0:	01010280 	.word	0x01010280
 800a2e4:	5c001000 	.word	0x5c001000
 800a2e8:	ffff0000 	.word	0xffff0000
 800a2ec:	51008000 	.word	0x51008000
 800a2f0:	52004000 	.word	0x52004000

0800a2f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a2f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a32c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a2f8:	f7ff ff92 	bl	800a220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a2fc:	480c      	ldr	r0, [pc, #48]	; (800a330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a2fe:	490d      	ldr	r1, [pc, #52]	; (800a334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a300:	4a0d      	ldr	r2, [pc, #52]	; (800a338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a304:	e002      	b.n	800a30c <LoopCopyDataInit>

0800a306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a30a:	3304      	adds	r3, #4

0800a30c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a30c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a30e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a310:	d3f9      	bcc.n	800a306 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a312:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a314:	4c0a      	ldr	r4, [pc, #40]	; (800a340 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a316:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a318:	e001      	b.n	800a31e <LoopFillZerobss>

0800a31a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a31a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a31c:	3204      	adds	r2, #4

0800a31e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a31e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a320:	d3fb      	bcc.n	800a31a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a322:	f006 fbfb 	bl	8010b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a326:	f7ff fcab 	bl	8009c80 <main>
  bx  lr
 800a32a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a32c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800a330:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a334:	240091b8 	.word	0x240091b8
  ldr r2, =_sidata
 800a338:	08016a40 	.word	0x08016a40
  ldr r2, =_sbss
 800a33c:	24010000 	.word	0x24010000
  ldr r4, =_ebss
 800a340:	24035b44 	.word	0x24035b44

0800a344 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a344:	e7fe      	b.n	800a344 <ADC3_IRQHandler>
	...

0800a348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a348:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a34a:	2003      	movs	r0, #3
 800a34c:	f000 f856 	bl	800a3fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a350:	f001 fc14 	bl	800bb7c <HAL_RCC_GetSysClockFreq>
 800a354:	490f      	ldr	r1, [pc, #60]	; (800a394 <HAL_Init+0x4c>)
 800a356:	698b      	ldr	r3, [r1, #24]
 800a358:	4a0f      	ldr	r2, [pc, #60]	; (800a398 <HAL_Init+0x50>)
 800a35a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a35e:	5cd3      	ldrb	r3, [r2, r3]
 800a360:	f003 031f 	and.w	r3, r3, #31
 800a364:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a366:	698b      	ldr	r3, [r1, #24]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	5cd3      	ldrb	r3, [r2, r3]
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	fa20 f303 	lsr.w	r3, r0, r3
 800a376:	4a09      	ldr	r2, [pc, #36]	; (800a39c <HAL_Init+0x54>)
 800a378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <HAL_Init+0x58>)
 800a37c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a37e:	200f      	movs	r0, #15
 800a380:	f7ff fe90 	bl	800a0a4 <HAL_InitTick>
 800a384:	b110      	cbz	r0, 800a38c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800a386:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800a388:	4620      	mov	r0, r4
 800a38a:	bd10      	pop	{r4, pc}
 800a38c:	4604      	mov	r4, r0
  HAL_MspInit();
 800a38e:	f7ff fde3 	bl	8009f58 <HAL_MspInit>
  return HAL_OK;
 800a392:	e7f9      	b.n	800a388 <HAL_Init+0x40>
 800a394:	58024400 	.word	0x58024400
 800a398:	24008c0c 	.word	0x24008c0c
 800a39c:	24008014 	.word	0x24008014
 800a3a0:	24008010 	.word	0x24008010

0800a3a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a3a4:	4a03      	ldr	r2, [pc, #12]	; (800a3b4 <HAL_IncTick+0x10>)
 800a3a6:	6811      	ldr	r1, [r2, #0]
 800a3a8:	4b03      	ldr	r3, [pc, #12]	; (800a3b8 <HAL_IncTick+0x14>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	440b      	add	r3, r1
 800a3ae:	6013      	str	r3, [r2, #0]
}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	24011f60 	.word	0x24011f60
 800a3b8:	24008018 	.word	0x24008018

0800a3bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a3bc:	4b01      	ldr	r3, [pc, #4]	; (800a3c4 <HAL_GetTick+0x8>)
 800a3be:	6818      	ldr	r0, [r3, #0]
}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	24011f60 	.word	0x24011f60

0800a3c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a3cc:	f7ff fff6 	bl	800a3bc <HAL_GetTick>
 800a3d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3d2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a3d6:	d002      	beq.n	800a3de <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <HAL_Delay+0x24>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a3de:	f7ff ffed 	bl	800a3bc <HAL_GetTick>
 800a3e2:	1b40      	subs	r0, r0, r5
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d3fa      	bcc.n	800a3de <HAL_Delay+0x16>
  {
  }
}
 800a3e8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ea:	bf00      	nop
 800a3ec:	24008018 	.word	0x24008018

0800a3f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a3f0:	4b01      	ldr	r3, [pc, #4]	; (800a3f8 <HAL_GetREVID+0x8>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
}
 800a3f4:	0c00      	lsrs	r0, r0, #16
 800a3f6:	4770      	bx	lr
 800a3f8:	5c001000 	.word	0x5c001000

0800a3fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a3fc:	4a06      	ldr	r2, [pc, #24]	; (800a418 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800a3fe:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a400:	0200      	lsls	r0, r0, #8
 800a402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a40a:	041b      	lsls	r3, r3, #16
 800a40c:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a40e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800a410:	4b02      	ldr	r3, [pc, #8]	; (800a41c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a412:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800a414:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a416:	4770      	bx	lr
 800a418:	e000ed00 	.word	0xe000ed00
 800a41c:	05fa0000 	.word	0x05fa0000

0800a420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a420:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a422:	4b16      	ldr	r3, [pc, #88]	; (800a47c <HAL_NVIC_SetPriority+0x5c>)
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a42a:	f1c3 0c07 	rsb	ip, r3, #7
 800a42e:	f1bc 0f04 	cmp.w	ip, #4
 800a432:	bf28      	it	cs
 800a434:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a438:	f103 0e04 	add.w	lr, r3, #4
 800a43c:	f1be 0f06 	cmp.w	lr, #6
 800a440:	bf8c      	ite	hi
 800a442:	3b03      	subhi	r3, #3
 800a444:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a446:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a44a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800a44e:	ea21 010c 	bic.w	r1, r1, ip
 800a452:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a454:	fa0e f303 	lsl.w	r3, lr, r3
 800a458:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a45c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800a45e:	2800      	cmp	r0, #0
 800a460:	db05      	blt.n	800a46e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a462:	0109      	lsls	r1, r1, #4
 800a464:	b2c9      	uxtb	r1, r1
 800a466:	4b06      	ldr	r3, [pc, #24]	; (800a480 <HAL_NVIC_SetPriority+0x60>)
 800a468:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a46a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a46e:	f000 000f 	and.w	r0, r0, #15
 800a472:	0109      	lsls	r1, r1, #4
 800a474:	b2c9      	uxtb	r1, r1
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <HAL_NVIC_SetPriority+0x64>)
 800a478:	5419      	strb	r1, [r3, r0]
 800a47a:	e7f6      	b.n	800a46a <HAL_NVIC_SetPriority+0x4a>
 800a47c:	e000ed00 	.word	0xe000ed00
 800a480:	e000e400 	.word	0xe000e400
 800a484:	e000ed14 	.word	0xe000ed14

0800a488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a488:	2800      	cmp	r0, #0
 800a48a:	db08      	blt.n	800a49e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a48c:	0942      	lsrs	r2, r0, #5
 800a48e:	f000 001f 	and.w	r0, r0, #31
 800a492:	2301      	movs	r3, #1
 800a494:	fa03 f000 	lsl.w	r0, r3, r0
 800a498:	4b01      	ldr	r3, [pc, #4]	; (800a4a0 <HAL_NVIC_EnableIRQ+0x18>)
 800a49a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a49e:	4770      	bx	lr
 800a4a0:	e000e100 	.word	0xe000e100

0800a4a4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800a4a4:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a4a6:	2a03      	cmp	r2, #3
 800a4a8:	d92d      	bls.n	800a506 <CRC_Handle_8+0x62>
 800a4aa:	0895      	lsrs	r5, r2, #2
 800a4ac:	468c      	mov	ip, r1
 800a4ae:	f04f 0e00 	mov.w	lr, #0
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a4b2:	f89c 4000 	ldrb.w	r4, [ip]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a4b6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800a4ba:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a4bc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800a4c0:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a4c4:	4323      	orrs	r3, r4
 800a4c6:	f89c 4002 	ldrb.w	r4, [ip, #2]
 800a4ca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a4ce:	6804      	ldr	r4, [r0, #0]
 800a4d0:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a4d2:	f10e 0e01 	add.w	lr, lr, #1
 800a4d6:	f10c 0c04 	add.w	ip, ip, #4
 800a4da:	45ae      	cmp	lr, r5
 800a4dc:	d3e9      	bcc.n	800a4b2 <CRC_Handle_8+0xe>
 800a4de:	2a03      	cmp	r2, #3
 800a4e0:	bf98      	it	ls
 800a4e2:	2501      	movls	r5, #1
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800a4e4:	f012 0203 	ands.w	r2, r2, #3
 800a4e8:	d013      	beq.n	800a512 <CRC_Handle_8+0x6e>
  {
    if ((BufferLength % 4U) == 1U)
 800a4ea:	2a01      	cmp	r2, #1
 800a4ec:	d00d      	beq.n	800a50a <CRC_Handle_8+0x66>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 800a4ee:	2a02      	cmp	r2, #2
 800a4f0:	d112      	bne.n	800a518 <CRC_Handle_8+0x74>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a4f2:	f811 2025 	ldrb.w	r2, [r1, r5, lsl #2]
 800a4f6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800a4fa:	786b      	ldrb	r3, [r5, #1]
 800a4fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a500:	6802      	ldr	r2, [r0, #0]
      *pReg = data;
 800a502:	8013      	strh	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800a504:	e005      	b.n	800a512 <CRC_Handle_8+0x6e>
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a506:	2500      	movs	r5, #0
 800a508:	e7ec      	b.n	800a4e4 <CRC_Handle_8+0x40>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a50a:	6803      	ldr	r3, [r0, #0]
 800a50c:	f811 2025 	ldrb.w	r2, [r1, r5, lsl #2]
 800a510:	701a      	strb	r2, [r3, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a512:	6803      	ldr	r3, [r0, #0]
 800a514:	6818      	ldr	r0, [r3, #0]
}
 800a516:	bd30      	pop	{r4, r5, pc}
    if ((BufferLength % 4U) == 3U)
 800a518:	2a03      	cmp	r2, #3
 800a51a:	d1fa      	bne.n	800a512 <CRC_Handle_8+0x6e>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a51c:	f811 2025 	ldrb.w	r2, [r1, r5, lsl #2]
 800a520:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800a524:	786b      	ldrb	r3, [r5, #1]
 800a526:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a52a:	6802      	ldr	r2, [r0, #0]
      *pReg = data;
 800a52c:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800a52e:	6803      	ldr	r3, [r0, #0]
 800a530:	78aa      	ldrb	r2, [r5, #2]
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	e7ed      	b.n	800a512 <CRC_Handle_8+0x6e>

0800a536 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800a536:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a538:	2a01      	cmp	r2, #1
 800a53a:	d91c      	bls.n	800a576 <CRC_Handle_16+0x40>
 800a53c:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800a540:	2300      	movs	r3, #0
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a542:	1c8d      	adds	r5, r1, #2
 800a544:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 800a548:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 800a54c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a550:	6806      	ldr	r6, [r0, #0]
 800a552:	6034      	str	r4, [r6, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a554:	3301      	adds	r3, #1
 800a556:	4573      	cmp	r3, lr
 800a558:	d3f4      	bcc.n	800a544 <CRC_Handle_16+0xe>
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	bf98      	it	ls
 800a55e:	f04f 0e01 	movls.w	lr, #1
  }
  if ((BufferLength % 2U) != 0U)
 800a562:	f012 0f01 	tst.w	r2, #1
 800a566:	d003      	beq.n	800a570 <CRC_Handle_16+0x3a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800a568:	6803      	ldr	r3, [r0, #0]
    *pReg = pBuffer[2U * i];
 800a56a:	f831 202e 	ldrh.w	r2, [r1, lr, lsl #2]
 800a56e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a570:	6803      	ldr	r3, [r0, #0]
 800a572:	6818      	ldr	r0, [r3, #0]
}
 800a574:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a576:	f04f 0e00 	mov.w	lr, #0
 800a57a:	e7f2      	b.n	800a562 <CRC_Handle_16+0x2c>

0800a57c <HAL_CRC_Init>:
  if (hcrc == NULL)
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d038      	beq.n	800a5f2 <HAL_CRC_Init+0x76>
{
 800a580:	b510      	push	{r4, lr}
 800a582:	4604      	mov	r4, r0
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a584:	7f43      	ldrb	r3, [r0, #29]
 800a586:	b31b      	cbz	r3, 800a5d0 <HAL_CRC_Init+0x54>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a588:	2302      	movs	r3, #2
 800a58a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a58c:	7923      	ldrb	r3, [r4, #4]
 800a58e:	bb1b      	cbnz	r3, 800a5d8 <HAL_CRC_Init+0x5c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <HAL_CRC_Init+0x7c>)
 800a594:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	6893      	ldr	r3, [r2, #8]
 800a59a:	f023 0318 	bic.w	r3, r3, #24
 800a59e:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a5a0:	7963      	ldrb	r3, [r4, #5]
 800a5a2:	bb13      	cbnz	r3, 800a5ea <HAL_CRC_Init+0x6e>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5aa:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a5ac:	6822      	ldr	r2, [r4, #0]
 800a5ae:	6893      	ldr	r3, [r2, #8]
 800a5b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a5b4:	6961      	ldr	r1, [r4, #20]
 800a5b6:	430b      	orrs	r3, r1
 800a5b8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	6893      	ldr	r3, [r2, #8]
 800a5be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c2:	69a1      	ldr	r1, [r4, #24]
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a5cc:	2000      	movs	r0, #0
}
 800a5ce:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a5d0:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a5d2:	f7ff fcd3 	bl	8009f7c <HAL_CRC_MspInit>
 800a5d6:	e7d7      	b.n	800a588 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a5d8:	68e2      	ldr	r2, [r4, #12]
 800a5da:	68a1      	ldr	r1, [r4, #8]
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 f858 	bl	800a692 <HAL_CRCEx_Polynomial_Set>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d0dc      	beq.n	800a5a0 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	e7f1      	b.n	800a5ce <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	611a      	str	r2, [r3, #16]
 800a5f0:	e7dc      	b.n	800a5ac <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800a5f2:	2001      	movs	r0, #1
}
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	04c11db7 	.word	0x04c11db7

0800a5fc <HAL_CRC_Accumulate>:
{
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a600:	2302      	movs	r3, #2
 800a602:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800a604:	6a03      	ldr	r3, [r0, #32]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d017      	beq.n	800a63a <HAL_CRC_Accumulate+0x3e>
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d005      	beq.n	800a61a <HAL_CRC_Accumulate+0x1e>
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d010      	beq.n	800a634 <HAL_CRC_Accumulate+0x38>
 800a612:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800a614:	2301      	movs	r3, #1
 800a616:	7763      	strb	r3, [r4, #29]
}
 800a618:	bd10      	pop	{r4, pc}
      for (index = 0U; index < BufferLength; index++)
 800a61a:	b142      	cbz	r2, 800a62e <HAL_CRC_Accumulate+0x32>
 800a61c:	3904      	subs	r1, #4
 800a61e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800a628:	6018      	str	r0, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800a62a:	4291      	cmp	r1, r2
 800a62c:	d1f9      	bne.n	800a622 <HAL_CRC_Accumulate+0x26>
      temp = hcrc->Instance->DR;
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	6818      	ldr	r0, [r3, #0]
      break;
 800a632:	e7ef      	b.n	800a614 <HAL_CRC_Accumulate+0x18>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800a634:	f7ff ff36 	bl	800a4a4 <CRC_Handle_8>
      break;
 800a638:	e7ec      	b.n	800a614 <HAL_CRC_Accumulate+0x18>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800a63a:	f7ff ff7c 	bl	800a536 <CRC_Handle_16>
      break;
 800a63e:	e7e9      	b.n	800a614 <HAL_CRC_Accumulate+0x18>

0800a640 <HAL_CRC_Calculate>:
{
 800a640:	b510      	push	{r4, lr}
 800a642:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a644:	2302      	movs	r3, #2
 800a646:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800a648:	6800      	ldr	r0, [r0, #0]
 800a64a:	6883      	ldr	r3, [r0, #8]
 800a64c:	f043 0301 	orr.w	r3, r3, #1
 800a650:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800a652:	6a23      	ldr	r3, [r4, #32]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d018      	beq.n	800a68a <HAL_CRC_Calculate+0x4a>
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d005      	beq.n	800a668 <HAL_CRC_Calculate+0x28>
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d010      	beq.n	800a682 <HAL_CRC_Calculate+0x42>
 800a660:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800a662:	2301      	movs	r3, #1
 800a664:	7763      	strb	r3, [r4, #29]
}
 800a666:	bd10      	pop	{r4, pc}
      for (index = 0U; index < BufferLength; index++)
 800a668:	b142      	cbz	r2, 800a67c <HAL_CRC_Calculate+0x3c>
 800a66a:	3904      	subs	r1, #4
 800a66c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800a676:	6018      	str	r0, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800a678:	4291      	cmp	r1, r2
 800a67a:	d1f9      	bne.n	800a670 <HAL_CRC_Calculate+0x30>
      temp = hcrc->Instance->DR;
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	6818      	ldr	r0, [r3, #0]
      break;
 800a680:	e7ef      	b.n	800a662 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff ff0e 	bl	800a4a4 <CRC_Handle_8>
      break;
 800a688:	e7eb      	b.n	800a662 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff ff53 	bl	800a536 <CRC_Handle_16>
      break;
 800a690:	e7e7      	b.n	800a662 <HAL_CRC_Calculate+0x22>

0800a692 <HAL_CRCEx_Polynomial_Set>:
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a692:	f04f 0c1e 	mov.w	ip, #30
 800a696:	f00c 031f 	and.w	r3, ip, #31
 800a69a:	fa21 f303 	lsr.w	r3, r1, r3
 800a69e:	f013 0f01 	tst.w	r3, #1
 800a6a2:	d10b      	bne.n	800a6bc <HAL_CRCEx_Polynomial_Set+0x2a>
 800a6a4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a6a8:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 800a6ac:	d1f3      	bne.n	800a696 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a6ae:	2a10      	cmp	r2, #16
 800a6b0:	d030      	beq.n	800a714 <HAL_CRCEx_Polynomial_Set+0x82>
 800a6b2:	2a18      	cmp	r2, #24
 800a6b4:	d030      	beq.n	800a718 <HAL_CRCEx_Polynomial_Set+0x86>
 800a6b6:	b1aa      	cbz	r2, 800a6e4 <HAL_CRCEx_Polynomial_Set+0x52>
 800a6b8:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800a6ba:	4770      	bx	lr
  switch (PolyLength)
 800a6bc:	2a18      	cmp	r2, #24
 800a6be:	d825      	bhi.n	800a70c <HAL_CRCEx_Polynomial_Set+0x7a>
 800a6c0:	e8df f002 	tbb	[pc, r2]
 800a6c4:	24242410 	.word	0x24242410
 800a6c8:	24242424 	.word	0x24242424
 800a6cc:	2424241f 	.word	0x2424241f
 800a6d0:	24242424 	.word	0x24242424
 800a6d4:	2424241a 	.word	0x2424241a
 800a6d8:	24242424 	.word	0x24242424
 800a6dc:	0d          	.byte	0x0d
 800a6dd:	00          	.byte	0x00
      if (msb >= HAL_CRC_LENGTH_7B)
 800a6de:	f1bc 0f06 	cmp.w	ip, #6
 800a6e2:	d815      	bhi.n	800a710 <HAL_CRCEx_Polynomial_Set+0x7e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a6e4:	6803      	ldr	r3, [r0, #0]
 800a6e6:	6159      	str	r1, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a6e8:	6801      	ldr	r1, [r0, #0]
 800a6ea:	688b      	ldr	r3, [r1, #8]
 800a6ec:	f023 0318 	bic.w	r3, r3, #24
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	608a      	str	r2, [r1, #8]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 800a6f8:	f1bc 0f07 	cmp.w	ip, #7
 800a6fc:	d9f2      	bls.n	800a6e4 <HAL_CRCEx_Polynomial_Set+0x52>
        status =   HAL_ERROR;
 800a6fe:	2001      	movs	r0, #1
 800a700:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800a702:	f1bc 0f0f 	cmp.w	ip, #15
 800a706:	d9ed      	bls.n	800a6e4 <HAL_CRCEx_Polynomial_Set+0x52>
        status =   HAL_ERROR;
 800a708:	2001      	movs	r0, #1
 800a70a:	4770      	bx	lr
  switch (PolyLength)
 800a70c:	2001      	movs	r0, #1
 800a70e:	4770      	bx	lr
        status =   HAL_ERROR;
 800a710:	2001      	movs	r0, #1
 800a712:	4770      	bx	lr
        status =   HAL_ERROR;
 800a714:	2001      	movs	r0, #1
 800a716:	4770      	bx	lr
        status =   HAL_ERROR;
 800a718:	2001      	movs	r0, #1
 800a71a:	4770      	bx	lr

0800a71c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8123 	beq.w	800a96a <HAL_GPIO_Init+0x24e>
{
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a72a:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800a72e:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a730:	4c8e      	ldr	r4, [pc, #568]	; (800a96c <HAL_GPIO_Init+0x250>)
 800a732:	4d8f      	ldr	r5, [pc, #572]	; (800a970 <HAL_GPIO_Init+0x254>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a734:	4e8f      	ldr	r6, [pc, #572]	; (800a974 <HAL_GPIO_Init+0x258>)
 800a736:	e04b      	b.n	800a7d0 <HAL_GPIO_Init+0xb4>
 800a738:	f04f 0e00 	mov.w	lr, #0
 800a73c:	fa0e fe0b 	lsl.w	lr, lr, fp
 800a740:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a744:	f8c9 e008 	str.w	lr, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a748:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 800a74c:	f8de 8080 	ldr.w	r8, [lr, #128]	; 0x80
        temp &= ~(iocurrent);
 800a750:	ea6f 0e03 	mvn.w	lr, r3
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a754:	684f      	ldr	r7, [r1, #4]
 800a756:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 800a75a:	bf0c      	ite	eq
 800a75c:	ea0e 0808 	andeq.w	r8, lr, r8
        {
          temp |= iocurrent;
 800a760:	ea43 0808 	orrne.w	r8, r3, r8
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a764:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
 800a768:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80

        temp = EXTI_CurrentCPU->EMR1;
 800a76c:	f8d9 8084 	ldr.w	r8, [r9, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a770:	684f      	ldr	r7, [r1, #4]
 800a772:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 800a776:	bf0c      	ite	eq
 800a778:	ea0e 0808 	andeq.w	r8, lr, r8
        {
          temp |= iocurrent;
 800a77c:	ea43 0808 	orrne.w	r8, r3, r8
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a780:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
 800a784:	f8c9 8084 	str.w	r8, [r9, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a788:	f8d9 8000 	ldr.w	r8, [r9]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a78c:	684f      	ldr	r7, [r1, #4]
 800a78e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800a792:	bf0c      	ite	eq
 800a794:	ea0e 0808 	andeq.w	r8, lr, r8
        {
          temp |= iocurrent;
 800a798:	ea43 0808 	orrne.w	r8, r3, r8
        }
        EXTI->RTSR1 = temp;
 800a79c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
 800a7a0:	f8c9 8000 	str.w	r8, [r9]

        temp = EXTI->FTSR1;
 800a7a4:	f8d9 8004 	ldr.w	r8, [r9, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a7a8:	684f      	ldr	r7, [r1, #4]
 800a7aa:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800a7ae:	bf0c      	ite	eq
 800a7b0:	ea0e 0308 	andeq.w	r3, lr, r8
        {
          temp |= iocurrent;
 800a7b4:	ea43 0308 	orrne.w	r3, r3, r8
        }
        EXTI->FTSR1 = temp;
 800a7b8:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 800a7bc:	f8ce 3004 	str.w	r3, [lr, #4]
      }
    }

    position++;
 800a7c0:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7c2:	680b      	ldr	r3, [r1, #0]
 800a7c4:	f10c 0c02 	add.w	ip, ip, #2
 800a7c8:	fa33 f702 	lsrs.w	r7, r3, r2
 800a7cc:	f000 80ca 	beq.w	800a964 <HAL_GPIO_Init+0x248>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7d0:	f04f 0e01 	mov.w	lr, #1
 800a7d4:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00U)
 800a7d8:	ea1e 0303 	ands.w	r3, lr, r3
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a7de:	684f      	ldr	r7, [r1, #4]
 800a7e0:	f027 0810 	bic.w	r8, r7, #16
 800a7e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7e8:	f1b8 0f01 	cmp.w	r8, #1
 800a7ec:	d81b      	bhi.n	800a826 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 800a7ee:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7f2:	f04f 0903 	mov.w	r9, #3
 800a7f6:	fa09 f90c 	lsl.w	r9, r9, ip
 800a7fa:	ea28 0909 	bic.w	r9, r8, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7fe:	68cf      	ldr	r7, [r1, #12]
 800a800:	fa07 f80c 	lsl.w	r8, r7, ip
 800a804:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800a808:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800a80c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a810:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a814:	684f      	ldr	r7, [r1, #4]
 800a816:	f3c7 1e00 	ubfx	lr, r7, #4, #1
 800a81a:	fa0e fe02 	lsl.w	lr, lr, r2
 800a81e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 800a822:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 800a826:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a82a:	f04f 0803 	mov.w	r8, #3
 800a82e:	fa08 f80c 	lsl.w	r8, r8, ip
 800a832:	ea6f 0e08 	mvn.w	lr, r8
 800a836:	ea29 0908 	bic.w	r9, r9, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a83a:	688f      	ldr	r7, [r1, #8]
 800a83c:	fa07 f80c 	lsl.w	r8, r7, ip
 800a840:	ea48 0809 	orr.w	r8, r8, r9
      GPIOx->PUPDR = temp;
 800a844:	f8c0 800c 	str.w	r8, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a848:	684f      	ldr	r7, [r1, #4]
 800a84a:	f027 0810 	bic.w	r8, r7, #16
 800a84e:	f1b8 0f02 	cmp.w	r8, #2
 800a852:	d116      	bne.n	800a882 <HAL_GPIO_Init+0x166>
        temp = GPIOx->AFR[position >> 3U];
 800a854:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 800a858:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a85c:	f8d9 b020 	ldr.w	fp, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a860:	f002 0807 	and.w	r8, r2, #7
 800a864:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a868:	f04f 0a0f 	mov.w	sl, #15
 800a86c:	fa0a fa08 	lsl.w	sl, sl, r8
 800a870:	ea2b 0a0a 	bic.w	sl, fp, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a874:	690f      	ldr	r7, [r1, #16]
 800a876:	fa07 f808 	lsl.w	r8, r7, r8
 800a87a:	ea48 080a 	orr.w	r8, r8, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a87e:	f8c9 8020 	str.w	r8, [r9, #32]
      temp = GPIOx->MODER;
 800a882:	f8d0 8000 	ldr.w	r8, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a886:	ea0e 0808 	and.w	r8, lr, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a88a:	684f      	ldr	r7, [r1, #4]
 800a88c:	f007 0e03 	and.w	lr, r7, #3
 800a890:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a894:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->MODER = temp;
 800a898:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a89c:	684f      	ldr	r7, [r1, #4]
 800a89e:	f017 5f80 	tst.w	r7, #268435456	; 0x10000000
 800a8a2:	d08d      	beq.n	800a7c0 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8a4:	f8d4 e0f4 	ldr.w	lr, [r4, #244]	; 0xf4
 800a8a8:	f04e 0e02 	orr.w	lr, lr, #2
 800a8ac:	f8c4 e0f4 	str.w	lr, [r4, #244]	; 0xf4
 800a8b0:	f8d4 e0f4 	ldr.w	lr, [r4, #244]	; 0xf4
 800a8b4:	f00e 0e02 	and.w	lr, lr, #2
 800a8b8:	f8cd e004 	str.w	lr, [sp, #4]
 800a8bc:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a8c0:	f022 0903 	bic.w	r9, r2, #3
 800a8c4:	44a9      	add	r9, r5
 800a8c6:	f8d9 a008 	ldr.w	sl, [r9, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a8ca:	f002 0e03 	and.w	lr, r2, #3
 800a8ce:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 800a8d2:	f04f 0e0f 	mov.w	lr, #15
 800a8d6:	fa0e fe0b 	lsl.w	lr, lr, fp
 800a8da:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a8de:	42b0      	cmp	r0, r6
 800a8e0:	f43f af2a 	beq.w	800a738 <HAL_GPIO_Init+0x1c>
 800a8e4:	4f24      	ldr	r7, [pc, #144]	; (800a978 <HAL_GPIO_Init+0x25c>)
 800a8e6:	42b8      	cmp	r0, r7
 800a8e8:	d024      	beq.n	800a934 <HAL_GPIO_Init+0x218>
 800a8ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800a8ee:	42b8      	cmp	r0, r7
 800a8f0:	d023      	beq.n	800a93a <HAL_GPIO_Init+0x21e>
 800a8f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800a8f6:	42b8      	cmp	r0, r7
 800a8f8:	d022      	beq.n	800a940 <HAL_GPIO_Init+0x224>
 800a8fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800a8fe:	42b8      	cmp	r0, r7
 800a900:	d021      	beq.n	800a946 <HAL_GPIO_Init+0x22a>
 800a902:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800a906:	42b8      	cmp	r0, r7
 800a908:	d020      	beq.n	800a94c <HAL_GPIO_Init+0x230>
 800a90a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800a90e:	42b8      	cmp	r0, r7
 800a910:	d01f      	beq.n	800a952 <HAL_GPIO_Init+0x236>
 800a912:	f8df e068 	ldr.w	lr, [pc, #104]	; 800a97c <HAL_GPIO_Init+0x260>
 800a916:	4570      	cmp	r0, lr
 800a918:	d01e      	beq.n	800a958 <HAL_GPIO_Init+0x23c>
 800a91a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800a91e:	4570      	cmp	r0, lr
 800a920:	d01d      	beq.n	800a95e <HAL_GPIO_Init+0x242>
 800a922:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800a926:	4570      	cmp	r0, lr
 800a928:	bf0c      	ite	eq
 800a92a:	f04f 0e09 	moveq.w	lr, #9
 800a92e:	f04f 0e0a 	movne.w	lr, #10
 800a932:	e703      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a934:	f04f 0e01 	mov.w	lr, #1
 800a938:	e700      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a93a:	f04f 0e02 	mov.w	lr, #2
 800a93e:	e6fd      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a940:	f04f 0e03 	mov.w	lr, #3
 800a944:	e6fa      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a946:	f04f 0e04 	mov.w	lr, #4
 800a94a:	e6f7      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a94c:	f04f 0e05 	mov.w	lr, #5
 800a950:	e6f4      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a952:	f04f 0e06 	mov.w	lr, #6
 800a956:	e6f1      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a958:	f04f 0e07 	mov.w	lr, #7
 800a95c:	e6ee      	b.n	800a73c <HAL_GPIO_Init+0x20>
 800a95e:	f04f 0e08 	mov.w	lr, #8
 800a962:	e6eb      	b.n	800a73c <HAL_GPIO_Init+0x20>
  }
}
 800a964:	b003      	add	sp, #12
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	4770      	bx	lr
 800a96c:	58024400 	.word	0x58024400
 800a970:	58000400 	.word	0x58000400
 800a974:	58020000 	.word	0x58020000
 800a978:	58020400 	.word	0x58020400
 800a97c:	58021c00 	.word	0x58021c00

0800a980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a980:	b10a      	cbz	r2, 800a986 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a982:	6181      	str	r1, [r0, #24]
 800a984:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a986:	0409      	lsls	r1, r1, #16
 800a988:	6181      	str	r1, [r0, #24]
  }
}
 800a98a:	4770      	bx	lr

0800a98c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a990:	2800      	cmp	r0, #0
 800a992:	f000 8097 	beq.w	800aac4 <HAL_PCD_Init+0x138>
 800a996:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a998:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a99a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800a99e:	b33b      	cbz	r3, 800a9f0 <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a9a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a9ac:	d101      	bne.n	800a9b2 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	612b      	str	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a9b2:	6828      	ldr	r0, [r5, #0]
 800a9b4:	f003 fc06 	bl	800e1c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9b8:	462c      	mov	r4, r5
 800a9ba:	f854 6b10 	ldr.w	r6, [r4], #16
 800a9be:	46ec      	mov	ip, sp
 800a9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a9d4:	1d2b      	adds	r3, r5, #4
 800a9d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f003 fb2d 	bl	800e038 <USB_CoreInit>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	b158      	cbz	r0, 800a9fa <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800a9e8:	2401      	movs	r4, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	b00a      	add	sp, #40	; 0x28
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800a9f0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800a9f4:	f005 ff1a 	bl	801082c <HAL_PCD_MspInit>
 800a9f8:	e7d2      	b.n	800a9a0 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	6828      	ldr	r0, [r5, #0]
 800a9fe:	f003 fbe7 	bl	800e1d0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa02:	6868      	ldr	r0, [r5, #4]
 800aa04:	b398      	cbz	r0, 800aa6e <HAL_PCD_Init+0xe2>
 800aa06:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 800aa08:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa0c:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 800aa0e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800aa12:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800aa16:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800aa1a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa1e:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa22:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa26:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa28:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa2a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800aa2e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800aa32:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa34:	3301      	adds	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4283      	cmp	r3, r0
 800aa3a:	d3e8      	bcc.n	800aa0e <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800aa42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa46:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800aa4a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aa4e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aa52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa5a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800aa5e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa66:	3401      	adds	r4, #1
 800aa68:	b2e4      	uxtb	r4, r4
 800aa6a:	4284      	cmp	r4, r0
 800aa6c:	d3e7      	bcc.n	800aa3e <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa6e:	462c      	mov	r4, r5
 800aa70:	f854 6b10 	ldr.w	r6, [r4], #16
 800aa74:	46ec      	mov	ip, sp
 800aa76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aa82:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa86:	e88c 0003 	stmia.w	ip, {r0, r1}
 800aa8a:	1d2b      	adds	r3, r5, #4
 800aa8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f003 fbe0 	bl	800e254 <USB_DevInit>
 800aa94:	4604      	mov	r4, r0
 800aa96:	b960      	cbnz	r0, 800aab2 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800aaa4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d008      	beq.n	800aabc <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 800aaaa:	6828      	ldr	r0, [r5, #0]
 800aaac:	f003 ffaa 	bl	800ea04 <USB_DevDisconnect>
  return HAL_OK;
 800aab0:	e79b      	b.n	800a9ea <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aab2:	2302      	movs	r3, #2
 800aab4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800aab8:	2401      	movs	r4, #1
 800aaba:	e796      	b.n	800a9ea <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aabc:	4628      	mov	r0, r5
 800aabe:	f000 fcf5 	bl	800b4ac <HAL_PCDEx_ActivateLPM>
 800aac2:	e7f2      	b.n	800aaaa <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 800aac4:	2401      	movs	r4, #1
 800aac6:	e790      	b.n	800a9ea <HAL_PCD_Init+0x5e>

0800aac8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aac8:	6802      	ldr	r2, [r0, #0]

  __HAL_LOCK(hpcd);
 800aaca:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d019      	beq.n	800ab06 <HAL_PCD_Start+0x3e>
{
 800aad2:	b510      	push	{r4, lr}
 800aad4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800aad6:	2301      	movs	r3, #1
 800aad8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aadc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d009      	beq.n	800aaf6 <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	f003 fb68 	bl	800e1b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aae8:	6820      	ldr	r0, [r4, #0]
 800aaea:	f003 ff7d 	bl	800e9e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800aaf4:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aaf6:	6983      	ldr	r3, [r0, #24]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d0f2      	beq.n	800aae2 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aafc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800aafe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab02:	6393      	str	r3, [r2, #56]	; 0x38
 800ab04:	e7ed      	b.n	800aae2 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 800ab06:	2002      	movs	r0, #2
}
 800ab08:	4770      	bx	lr
	...

0800ab0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	b089      	sub	sp, #36	; 0x24
 800ab12:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab14:	6806      	ldr	r6, [r0, #0]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ab16:	4630      	mov	r0, r6
 800ab18:	f003 ffb3 	bl	800ea82 <USB_GetMode>
 800ab1c:	b110      	cbz	r0, 800ab24 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800ab1e:	b009      	add	sp, #36	; 0x24
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ab26:	6820      	ldr	r0, [r4, #0]
 800ab28:	f003 ff7a 	bl	800ea20 <USB_ReadInterrupts>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d0f6      	beq.n	800ab1e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ab30:	6820      	ldr	r0, [r4, #0]
 800ab32:	f003 ff75 	bl	800ea20 <USB_ReadInterrupts>
 800ab36:	f010 0f02 	tst.w	r0, #2
 800ab3a:	d004      	beq.n	800ab46 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ab3c:	6822      	ldr	r2, [r4, #0]
 800ab3e:	6953      	ldr	r3, [r2, #20]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ab46:	6820      	ldr	r0, [r4, #0]
 800ab48:	f003 ff6a 	bl	800ea20 <USB_ReadInterrupts>
 800ab4c:	f010 0f10 	tst.w	r0, #16
 800ab50:	d014      	beq.n	800ab7c <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	6993      	ldr	r3, [r2, #24]
 800ab56:	f023 0310 	bic.w	r3, r3, #16
 800ab5a:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800ab5c:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ab5e:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ab62:	f3c5 4343 	ubfx	r3, r5, #17, #4
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	f000 8085 	beq.w	800ac76 <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ab6c:	2b06      	cmp	r3, #6
 800ab6e:	f000 80a1 	beq.w	800acb4 <HAL_PCD_IRQHandler+0x1a8>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	6993      	ldr	r3, [r2, #24]
 800ab76:	f043 0310 	orr.w	r3, r3, #16
 800ab7a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	f003 ff4f 	bl	800ea20 <USB_ReadInterrupts>
 800ab82:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800ab86:	f040 80a7 	bne.w	800acd8 <HAL_PCD_IRQHandler+0x1cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	f003 ff48 	bl	800ea20 <USB_ReadInterrupts>
 800ab90:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800ab94:	f040 816b 	bne.w	800ae6e <HAL_PCD_IRQHandler+0x362>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ab98:	6820      	ldr	r0, [r4, #0]
 800ab9a:	f003 ff41 	bl	800ea20 <USB_ReadInterrupts>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f2c0 822c 	blt.w	800affc <HAL_PCD_IRQHandler+0x4f0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800aba4:	6820      	ldr	r0, [r4, #0]
 800aba6:	f003 ff3b 	bl	800ea20 <USB_ReadInterrupts>
 800abaa:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800abae:	d00a      	beq.n	800abc6 <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800abb0:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800abb4:	f013 0f01 	tst.w	r3, #1
 800abb8:	f040 823a 	bne.w	800b030 <HAL_PCD_IRQHandler+0x524>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	6953      	ldr	r3, [r2, #20]
 800abc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800abc6:	6820      	ldr	r0, [r4, #0]
 800abc8:	f003 ff2a 	bl	800ea20 <USB_ReadInterrupts>
 800abcc:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800abd0:	d015      	beq.n	800abfe <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	6953      	ldr	r3, [r2, #20]
 800abd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abda:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800abdc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f040 8229 	bne.w	800b038 <HAL_PCD_IRQHandler+0x52c>
        hpcd->LPM_State = LPM_L1;
 800abe6:	2101      	movs	r1, #1
 800abe8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800abf4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fc6b 	bl	800b4d4 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800abfe:	6820      	ldr	r0, [r4, #0]
 800ac00:	f003 ff0e 	bl	800ea20 <USB_ReadInterrupts>
 800ac04:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800ac08:	f040 821a 	bne.w	800b040 <HAL_PCD_IRQHandler+0x534>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ac0c:	6820      	ldr	r0, [r4, #0]
 800ac0e:	f003 ff07 	bl	800ea20 <USB_ReadInterrupts>
 800ac12:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800ac16:	f040 826c 	bne.w	800b0f2 <HAL_PCD_IRQHandler+0x5e6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ac1a:	6820      	ldr	r0, [r4, #0]
 800ac1c:	f003 ff00 	bl	800ea20 <USB_ReadInterrupts>
 800ac20:	f010 0f08 	tst.w	r0, #8
 800ac24:	f040 827d 	bne.w	800b122 <HAL_PCD_IRQHandler+0x616>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ac28:	6820      	ldr	r0, [r4, #0]
 800ac2a:	f003 fef9 	bl	800ea20 <USB_ReadInterrupts>
 800ac2e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800ac32:	f040 827f 	bne.w	800b134 <HAL_PCD_IRQHandler+0x628>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ac36:	6820      	ldr	r0, [r4, #0]
 800ac38:	f003 fef2 	bl	800ea20 <USB_ReadInterrupts>
 800ac3c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800ac40:	f040 8282 	bne.w	800b148 <HAL_PCD_IRQHandler+0x63c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ac44:	6820      	ldr	r0, [r4, #0]
 800ac46:	f003 feeb 	bl	800ea20 <USB_ReadInterrupts>
 800ac4a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac4e:	f040 8285 	bne.w	800b15c <HAL_PCD_IRQHandler+0x650>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ac52:	6820      	ldr	r0, [r4, #0]
 800ac54:	f003 fee4 	bl	800ea20 <USB_ReadInterrupts>
 800ac58:	f010 0f04 	tst.w	r0, #4
 800ac5c:	f43f af5f 	beq.w	800ab1e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ac64:	f015 0f04 	tst.w	r5, #4
 800ac68:	f040 8281 	bne.w	800b16e <HAL_PCD_IRQHandler+0x662>
      hpcd->Instance->GOTGINT |= temp;
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	6853      	ldr	r3, [r2, #4]
 800ac70:	432b      	orrs	r3, r5
 800ac72:	6053      	str	r3, [r2, #4]
 800ac74:	e753      	b.n	800ab1e <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ac76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ac7a:	421d      	tst	r5, r3
 800ac7c:	f43f af79 	beq.w	800ab72 <HAL_PCD_IRQHandler+0x66>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ac80:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ac84:	ebc7 08c7 	rsb	r8, r7, r7, lsl #3
 800ac88:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800ac8c:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800ac90:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 800ac94:	4630      	mov	r0, r6
 800ac96:	f003 fe15 	bl	800e8c4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ac9a:	f3ca 020a 	ubfx	r2, sl, #0, #11
 800ac9e:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800aca2:	4413      	add	r3, r2
 800aca4:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aca8:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800acac:	441a      	add	r2, r3
 800acae:	f8c8 2214 	str.w	r2, [r8, #532]	; 0x214
 800acb2:	e75e      	b.n	800ab72 <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800acb4:	2208      	movs	r2, #8
 800acb6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800acba:	4630      	mov	r0, r6
 800acbc:	f003 fe02 	bl	800e8c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acc0:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
 800acc4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800acc8:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800accc:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
 800acd0:	4413      	add	r3, r2
 800acd2:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
 800acd6:	e74c      	b.n	800ab72 <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	f003 fea5 	bl	800ea28 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800acde:	4605      	mov	r5, r0
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f43f af52 	beq.w	800ab8a <HAL_PCD_IRQHandler+0x7e>
 800ace6:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 800acea:	46a2      	mov	sl, r4
      epnum = 0U;
 800acec:	46d8      	mov	r8, fp
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800acee:	9603      	str	r6, [sp, #12]
 800acf0:	e099      	b.n	800ae26 <HAL_PCD_IRQHandler+0x31a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800acf2:	2301      	movs	r3, #1
 800acf4:	60bb      	str	r3, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800acf6:	6820      	ldr	r0, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acf8:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800acfc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800ad00:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800ad04:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800ad06:	6921      	ldr	r1, [r4, #16]
 800ad08:	2901      	cmp	r1, #1
 800ad0a:	d00e      	beq.n	800ad2a <HAL_PCD_IRQHandler+0x21e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ad0c:	49af      	ldr	r1, [pc, #700]	; (800afcc <HAL_PCD_IRQHandler+0x4c0>)
 800ad0e:	458c      	cmp	ip, r1
 800ad10:	d04b      	beq.n	800adaa <HAL_PCD_IRQHandler+0x29e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ad12:	f1b8 0f00 	cmp.w	r8, #0
 800ad16:	d103      	bne.n	800ad20 <HAL_PCD_IRQHandler+0x214>
 800ad18:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d055      	beq.n	800adcc <HAL_PCD_IRQHandler+0x2c0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad20:	4649      	mov	r1, r9
 800ad22:	4620      	mov	r0, r4
 800ad24:	f005 fdee 	bl	8010904 <HAL_PCD_DataOutStageCallback>
 800ad28:	e08b      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ad2a:	f012 0f08 	tst.w	r2, #8
 800ad2e:	d00b      	beq.n	800ad48 <HAL_PCD_IRQHandler+0x23c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad30:	49a7      	ldr	r1, [pc, #668]	; (800afd0 <HAL_PCD_IRQHandler+0x4c4>)
 800ad32:	458c      	cmp	ip, r1
 800ad34:	f240 8085 	bls.w	800ae42 <HAL_PCD_IRQHandler+0x336>
 800ad38:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ad3c:	f000 8081 	beq.w	800ae42 <HAL_PCD_IRQHandler+0x336>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ad44:	609a      	str	r2, [r3, #8]
 800ad46:	e07c      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ad48:	f012 0f20 	tst.w	r2, #32
 800ad4c:	d002      	beq.n	800ad54 <HAL_PCD_IRQHandler+0x248>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad4e:	2220      	movs	r2, #32
 800ad50:	609a      	str	r2, [r3, #8]
 800ad52:	e076      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ad54:	f012 0f28 	tst.w	r2, #40	; 0x28
 800ad58:	d173      	bne.n	800ae42 <HAL_PCD_IRQHandler+0x336>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad5a:	499d      	ldr	r1, [pc, #628]	; (800afd0 <HAL_PCD_IRQHandler+0x4c4>)
 800ad5c:	458c      	cmp	ip, r1
 800ad5e:	d906      	bls.n	800ad6e <HAL_PCD_IRQHandler+0x262>
 800ad60:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ad64:	d003      	beq.n	800ad6e <HAL_PCD_IRQHandler+0x262>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ad6a:	609a      	str	r2, [r3, #8]
 800ad6c:	e069      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
          hpcd->OUT_ep[epnum].maxpacket -
 800ad6e:	f8da 2204 	ldr.w	r2, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ad78:	1ad3      	subs	r3, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ad7a:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ad7e:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 800ad82:	4413      	add	r3, r2
 800ad84:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	d102      	bne.n	800ad94 <HAL_PCD_IRQHandler+0x288>
 800ad8e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800ad92:	b123      	cbz	r3, 800ad9e <HAL_PCD_IRQHandler+0x292>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad94:	4649      	mov	r1, r9
 800ad96:	4620      	mov	r0, r4
 800ad98:	f005 fdb4 	bl	8010904 <HAL_PCD_DataOutStageCallback>
 800ad9c:	e051      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ad9e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ada2:	2101      	movs	r1, #1
 800ada4:	f003 fe82 	bl	800eaac <USB_EP0_OutStart>
 800ada8:	e7f4      	b.n	800ad94 <HAL_PCD_IRQHandler+0x288>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800adaa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800adae:	d003      	beq.n	800adb8 <HAL_PCD_IRQHandler+0x2ac>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800adb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	e044      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800adb8:	f012 0f20 	tst.w	r2, #32
 800adbc:	d001      	beq.n	800adc2 <HAL_PCD_IRQHandler+0x2b6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800adbe:	2220      	movs	r2, #32
 800adc0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800adc2:	4649      	mov	r1, r9
 800adc4:	4620      	mov	r0, r4
 800adc6:	f005 fd9d 	bl	8010904 <HAL_PCD_DataOutStageCallback>
 800adca:	e03a      	b.n	800ae42 <HAL_PCD_IRQHandler+0x336>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800adcc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800add0:	2100      	movs	r1, #0
 800add2:	f003 fe6b 	bl	800eaac <USB_EP0_OutStart>
 800add6:	e7a3      	b.n	800ad20 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800add8:	2308      	movs	r3, #8
 800adda:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800addc:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800ade8:	6899      	ldr	r1, [r3, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adea:	4879      	ldr	r0, [pc, #484]	; (800afd0 <HAL_PCD_IRQHandler+0x4c4>)
 800adec:	4282      	cmp	r2, r0
 800adee:	f240 81c2 	bls.w	800b176 <HAL_PCD_IRQHandler+0x66a>
 800adf2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800adf6:	d002      	beq.n	800adfe <HAL_PCD_IRQHandler+0x2f2>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800adf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800adfc:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800adfe:	4620      	mov	r0, r4
 800ae00:	f005 fd78 	bl	80108f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d11e      	bne.n	800ae48 <HAL_PCD_IRQHandler+0x33c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae0a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ae0e:	2101      	movs	r1, #1
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	f003 fe4b 	bl	800eaac <USB_EP0_OutStart>
 800ae16:	e017      	b.n	800ae48 <HAL_PCD_IRQHandler+0x33c>
        epnum++;
 800ae18:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	f10a 0a1c 	add.w	sl, sl, #28
 800ae22:	086d      	lsrs	r5, r5, #1
 800ae24:	d021      	beq.n	800ae6a <HAL_PCD_IRQHandler+0x35e>
        if ((ep_intr & 0x1U) != 0U)
 800ae26:	f015 0f01 	tst.w	r5, #1
 800ae2a:	d0f5      	beq.n	800ae18 <HAL_PCD_IRQHandler+0x30c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ae2c:	fa5f f988 	uxtb.w	r9, r8
 800ae30:	4649      	mov	r1, r9
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	f003 fe08 	bl	800ea48 <USB_ReadDevOutEPInterrupt>
 800ae38:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ae3a:	f010 0f01 	tst.w	r0, #1
 800ae3e:	f47f af58 	bne.w	800acf2 <HAL_PCD_IRQHandler+0x1e6>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ae42:	f016 0f08 	tst.w	r6, #8
 800ae46:	d1c7      	bne.n	800add8 <HAL_PCD_IRQHandler+0x2cc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ae48:	f016 0f10 	tst.w	r6, #16
 800ae4c:	d001      	beq.n	800ae52 <HAL_PCD_IRQHandler+0x346>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ae4e:	2310      	movs	r3, #16
 800ae50:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae52:	f016 0f20 	tst.w	r6, #32
 800ae56:	d001      	beq.n	800ae5c <HAL_PCD_IRQHandler+0x350>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae58:	2320      	movs	r3, #32
 800ae5a:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ae5c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800ae60:	d0da      	beq.n	800ae18 <HAL_PCD_IRQHandler+0x30c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ae62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae66:	60bb      	str	r3, [r7, #8]
 800ae68:	e7d6      	b.n	800ae18 <HAL_PCD_IRQHandler+0x30c>
 800ae6a:	9e03      	ldr	r6, [sp, #12]
 800ae6c:	e68d      	b.n	800ab8a <HAL_PCD_IRQHandler+0x7e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	f003 fde2 	bl	800ea38 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800ae74:	4680      	mov	r8, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f43f ae8e 	beq.w	800ab98 <HAL_PCD_IRQHandler+0x8c>
 800ae7c:	46a2      	mov	sl, r4
 800ae7e:	f506 6910 	add.w	r9, r6, #2304	; 0x900
      epnum = 0U;
 800ae82:	465f      	mov	r7, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ae84:	9603      	str	r6, [sp, #12]
 800ae86:	f8cd b010 	str.w	fp, [sp, #16]
 800ae8a:	e02d      	b.n	800aee8 <HAL_PCD_IRQHandler+0x3dc>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae8c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ae90:	4601      	mov	r1, r0
 800ae92:	6820      	ldr	r0, [r4, #0]
 800ae94:	f003 fe0a 	bl	800eaac <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ae98:	4659      	mov	r1, fp
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f005 fd3e 	bl	801091c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800aea0:	f015 0f08 	tst.w	r5, #8
 800aea4:	d002      	beq.n	800aeac <HAL_PCD_IRQHandler+0x3a0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800aea6:	2308      	movs	r3, #8
 800aea8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800aeac:	f015 0f10 	tst.w	r5, #16
 800aeb0:	d002      	beq.n	800aeb8 <HAL_PCD_IRQHandler+0x3ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800aeb8:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aebc:	d002      	beq.n	800aec4 <HAL_PCD_IRQHandler+0x3b8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800aebe:	2340      	movs	r3, #64	; 0x40
 800aec0:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800aec4:	f015 0f02 	tst.w	r5, #2
 800aec8:	d002      	beq.n	800aed0 <HAL_PCD_IRQHandler+0x3c4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800aeca:	2302      	movs	r3, #2
 800aecc:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800aed0:	f015 0f80 	tst.w	r5, #128	; 0x80
 800aed4:	d134      	bne.n	800af40 <HAL_PCD_IRQHandler+0x434>
        epnum++;
 800aed6:	3701      	adds	r7, #1
      while (ep_intr != 0U)
 800aed8:	f10a 0a1c 	add.w	sl, sl, #28
 800aedc:	f109 0920 	add.w	r9, r9, #32
 800aee0:	ea5f 0858 	movs.w	r8, r8, lsr #1
 800aee4:	f000 8086 	beq.w	800aff4 <HAL_PCD_IRQHandler+0x4e8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800aee8:	f018 0f01 	tst.w	r8, #1
 800aeec:	d0f3      	beq.n	800aed6 <HAL_PCD_IRQHandler+0x3ca>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aeee:	fa5f fb87 	uxtb.w	fp, r7
 800aef2:	4659      	mov	r1, fp
 800aef4:	6820      	ldr	r0, [r4, #0]
 800aef6:	f003 fdb0 	bl	800ea5a <USB_ReadDevInEPInterrupt>
 800aefa:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800aefc:	f010 0f01 	tst.w	r0, #1
 800af00:	d0ce      	beq.n	800aea0 <HAL_PCD_IRQHandler+0x394>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 800af08:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800af0c:	f007 020f 	and.w	r2, r7, #15
 800af10:	2001      	movs	r0, #1
 800af12:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800af16:	ea23 0302 	bic.w	r3, r3, r2
 800af1a:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800af1c:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	4283      	cmp	r3, r0
 800af24:	d1b8      	bne.n	800ae98 <HAL_PCD_IRQHandler+0x38c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800af26:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800af2a:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800af2e:	4413      	add	r3, r2
 800af30:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800af34:	2f00      	cmp	r7, #0
 800af36:	d1af      	bne.n	800ae98 <HAL_PCD_IRQHandler+0x38c>
 800af38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1ac      	bne.n	800ae98 <HAL_PCD_IRQHandler+0x38c>
 800af3e:	e7a5      	b.n	800ae8c <HAL_PCD_IRQHandler+0x380>
  if (ep->xfer_count > ep->xfer_len)
 800af40:	4656      	mov	r6, sl
 800af42:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800af46:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d8c3      	bhi.n	800aed6 <HAL_PCD_IRQHandler+0x3ca>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af4e:	6821      	ldr	r1, [r4, #0]
 800af50:	9105      	str	r1, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800af52:	1a9b      	subs	r3, r3, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af54:	f501 6210 	add.w	r2, r1, #2304	; 0x900
 800af58:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 800af5c:	4610      	mov	r0, r2
 800af5e:	6992      	ldr	r2, [r2, #24]
  len32b = (len + 3U) / 4U;
 800af60:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 800af64:	428b      	cmp	r3, r1
 800af66:	bf28      	it	cs
 800af68:	460b      	movcs	r3, r1
 800af6a:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af6c:	b292      	uxth	r2, r2
 800af6e:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 800af72:	d325      	bcc.n	800afc0 <HAL_PCD_IRQHandler+0x4b4>
 800af74:	f8cd a018 	str.w	sl, [sp, #24]
 800af78:	4682      	mov	sl, r0
 800af7a:	9707      	str	r7, [sp, #28]
 800af7c:	9f05      	ldr	r7, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800af7e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800af80:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800af82:	429d      	cmp	r5, r3
 800af84:	d926      	bls.n	800afd4 <HAL_PCD_IRQHandler+0x4c8>
    len = ep->xfer_len - ep->xfer_count;
 800af86:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 800af88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800af8a:	429d      	cmp	r5, r3
 800af8c:	bf28      	it	cs
 800af8e:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800af90:	7c23      	ldrb	r3, [r4, #16]
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	b2ab      	uxth	r3, r5
 800af96:	465a      	mov	r2, fp
 800af98:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800af9a:	4638      	mov	r0, r7
 800af9c:	f003 fb74 	bl	800e688 <USB_WritePacket>
    ep->xfer_buff  += len;
 800afa0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800afa2:	442b      	add	r3, r5
 800afa4:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800afa6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800afa8:	442b      	add	r3, r5
 800afaa:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afac:	f8da 3018 	ldr.w	r3, [sl, #24]
    len32b = (len + 3U) / 4U;
 800afb0:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 800afb8:	d2e1      	bcs.n	800af7e <HAL_PCD_IRQHandler+0x472>
 800afba:	f8dd a018 	ldr.w	sl, [sp, #24]
 800afbe:	9f07      	ldr	r7, [sp, #28]
  if (ep->xfer_len <= ep->xfer_count)
 800afc0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800afc2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d886      	bhi.n	800aed6 <HAL_PCD_IRQHandler+0x3ca>
 800afc8:	e007      	b.n	800afda <HAL_PCD_IRQHandler+0x4ce>
 800afca:	bf00      	nop
 800afcc:	4f54310a 	.word	0x4f54310a
 800afd0:	4f54300a 	.word	0x4f54300a
 800afd4:	f8dd a018 	ldr.w	sl, [sp, #24]
 800afd8:	9f07      	ldr	r7, [sp, #28]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800afe0:	f007 010f 	and.w	r1, r7, #15
 800afe4:	2001      	movs	r0, #1
 800afe6:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800afea:	ea22 0201 	bic.w	r2, r2, r1
 800afee:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800aff2:	e770      	b.n	800aed6 <HAL_PCD_IRQHandler+0x3ca>
 800aff4:	9e03      	ldr	r6, [sp, #12]
 800aff6:	f8dd b010 	ldr.w	fp, [sp, #16]
 800affa:	e5cd      	b.n	800ab98 <HAL_PCD_IRQHandler+0x8c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800affc:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800b000:	f023 0301 	bic.w	r3, r3, #1
 800b004:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800b008:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d008      	beq.n	800b022 <HAL_PCD_IRQHandler+0x516>
        HAL_PCD_ResumeCallback(hpcd);
 800b010:	4620      	mov	r0, r4
 800b012:	f005 fcc3 	bl	801099c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	6953      	ldr	r3, [r2, #20]
 800b01a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b01e:	6153      	str	r3, [r2, #20]
 800b020:	e5c0      	b.n	800aba4 <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 800b022:	2100      	movs	r1, #0
 800b024:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fa53 	bl	800b4d4 <HAL_PCDEx_LPM_Callback>
 800b02e:	e7f2      	b.n	800b016 <HAL_PCD_IRQHandler+0x50a>
        HAL_PCD_SuspendCallback(hpcd);
 800b030:	4620      	mov	r0, r4
 800b032:	f005 fc9b 	bl	801096c <HAL_PCD_SuspendCallback>
 800b036:	e5c1      	b.n	800abbc <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 800b038:	4620      	mov	r0, r4
 800b03a:	f005 fc97 	bl	801096c <HAL_PCD_SuspendCallback>
 800b03e:	e5de      	b.n	800abfe <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b040:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800b044:	686b      	ldr	r3, [r5, #4]
 800b046:	f023 0301 	bic.w	r3, r3, #1
 800b04a:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b04c:	2110      	movs	r1, #16
 800b04e:	6820      	ldr	r0, [r4, #0]
 800b050:	f003 f8d6 	bl	800e200 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b054:	6863      	ldr	r3, [r4, #4]
 800b056:	b303      	cbz	r3, 800b09a <HAL_PCD_IRQHandler+0x58e>
 800b058:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b05c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800b060:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b068:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b070:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b072:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b076:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b07a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b07e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b082:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b086:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b08a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b08e:	f10b 0b01 	add.w	fp, fp, #1
 800b092:	3320      	adds	r3, #32
 800b094:	6862      	ldr	r2, [r4, #4]
 800b096:	455a      	cmp	r2, fp
 800b098:	d8e2      	bhi.n	800b060 <HAL_PCD_IRQHandler+0x554>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b09a:	69eb      	ldr	r3, [r5, #28]
 800b09c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b0a0:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b0a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0a4:	b1db      	cbz	r3, 800b0de <HAL_PCD_IRQHandler+0x5d2>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b0a6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800b0aa:	f043 030b 	orr.w	r3, r3, #11
 800b0ae:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b0b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b0b4:	f043 030b 	orr.w	r3, r3, #11
 800b0b8:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b0ba:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 800b0be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b0c2:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b0c6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b0ca:	7c21      	ldrb	r1, [r4, #16]
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	f003 fced 	bl	800eaac <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	6953      	ldr	r3, [r2, #20]
 800b0d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0da:	6153      	str	r3, [r2, #20]
 800b0dc:	e596      	b.n	800ac0c <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b0de:	696a      	ldr	r2, [r5, #20]
 800b0e0:	f242 032b 	movw	r3, #8235	; 0x202b
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b0e8:	692b      	ldr	r3, [r5, #16]
 800b0ea:	f043 030b 	orr.w	r3, r3, #11
 800b0ee:	612b      	str	r3, [r5, #16]
 800b0f0:	e7e3      	b.n	800b0ba <HAL_PCD_IRQHandler+0x5ae>
      (void)USB_ActivateSetup(hpcd->Instance);
 800b0f2:	6820      	ldr	r0, [r4, #0]
 800b0f4:	f003 fcca 	bl	800ea8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	f003 f973 	bl	800e3e4 <USB_GetDevSpeed>
 800b0fe:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b100:	6825      	ldr	r5, [r4, #0]
 800b102:	f000 ff8b 	bl	800c01c <HAL_RCC_GetHCLKFreq>
 800b106:	4601      	mov	r1, r0
 800b108:	7b22      	ldrb	r2, [r4, #12]
 800b10a:	4628      	mov	r0, r5
 800b10c:	f002 ffe2 	bl	800e0d4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800b110:	4620      	mov	r0, r4
 800b112:	f005 fc14 	bl	801093e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	6953      	ldr	r3, [r2, #20]
 800b11a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b11e:	6153      	str	r3, [r2, #20]
 800b120:	e57b      	b.n	800ac1a <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 800b122:	4620      	mov	r0, r4
 800b124:	f005 fc05 	bl	8010932 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	6953      	ldr	r3, [r2, #20]
 800b12c:	f003 0308 	and.w	r3, r3, #8
 800b130:	6153      	str	r3, [r2, #20]
 800b132:	e579      	b.n	800ac28 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b134:	2100      	movs	r1, #0
 800b136:	4620      	mov	r0, r4
 800b138:	f005 fc3c 	bl	80109b4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	6953      	ldr	r3, [r2, #20]
 800b140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b144:	6153      	str	r3, [r2, #20]
 800b146:	e576      	b.n	800ac36 <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b148:	2100      	movs	r1, #0
 800b14a:	4620      	mov	r0, r4
 800b14c:	f005 fc2c 	bl	80109a8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b150:	6822      	ldr	r2, [r4, #0]
 800b152:	6953      	ldr	r3, [r2, #20]
 800b154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b158:	6153      	str	r3, [r2, #20]
 800b15a:	e573      	b.n	800ac44 <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 800b15c:	4620      	mov	r0, r4
 800b15e:	f005 fc2f 	bl	80109c0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	6953      	ldr	r3, [r2, #20]
 800b166:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b16a:	6153      	str	r3, [r2, #20]
 800b16c:	e571      	b.n	800ac52 <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 800b16e:	4620      	mov	r0, r4
 800b170:	f005 fc2c 	bl	80109cc <HAL_PCD_DisconnectCallback>
 800b174:	e57a      	b.n	800ac6c <HAL_PCD_IRQHandler+0x160>
  HAL_PCD_SetupStageCallback(hpcd);
 800b176:	4620      	mov	r0, r4
 800b178:	f005 fbbc 	bl	80108f4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b17c:	e664      	b.n	800ae48 <HAL_PCD_IRQHandler+0x33c>
 800b17e:	bf00      	nop

0800b180 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800b180:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800b184:	2b01      	cmp	r3, #1
 800b186:	d00d      	beq.n	800b1a4 <HAL_PCD_SetAddress+0x24>
{
 800b188:	b510      	push	{r4, lr}
 800b18a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800b18c:	2301      	movs	r3, #1
 800b18e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b192:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b196:	6800      	ldr	r0, [r0, #0]
 800b198:	f003 fc16 	bl	800e9c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b19c:	2000      	movs	r0, #0
 800b19e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b1a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b1a4:	2002      	movs	r0, #2
}
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_PCD_EP_Open>:
{
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800b1ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b1b2:	d126      	bne.n	800b202 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b1b4:	f001 000f 	and.w	r0, r1, #15
 800b1b8:	ebc0 0ec0 	rsb	lr, r0, r0, lsl #3
 800b1bc:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800b1c0:	f50e 71fe 	add.w	r1, lr, #508	; 0x1fc
    ep->is_in = 0U;
 800b1c4:	4670      	mov	r0, lr
 800b1c6:	f04f 0e00 	mov.w	lr, #0
 800b1ca:	f880 e1fd 	strb.w	lr, [r0, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800b1ce:	f00c 0c0f 	and.w	ip, ip, #15
 800b1d2:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800b1d6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800b1d8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800b1da:	784a      	ldrb	r2, [r1, #1]
 800b1dc:	b10a      	cbz	r2, 800b1e2 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 800b1de:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d01d      	beq.n	800b222 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 800b1e6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d01c      	beq.n	800b228 <HAL_PCD_EP_Open+0x80>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	f003 f905 	bl	800e404 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b200:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b202:	f001 000f 	and.w	r0, r1, #15
 800b206:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800b20a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b20e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b210:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b214:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800b218:	f04f 0e01 	mov.w	lr, #1
 800b21c:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
 800b220:	e7d5      	b.n	800b1ce <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	710b      	strb	r3, [r1, #4]
 800b226:	e7de      	b.n	800b1e6 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 800b228:	2002      	movs	r0, #2
 800b22a:	e7e9      	b.n	800b200 <HAL_PCD_EP_Open+0x58>

0800b22c <HAL_PCD_EP_Close>:
{
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4604      	mov	r4, r0
 800b230:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800b232:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b236:	d11f      	bne.n	800b278 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b238:	f001 020f 	and.w	r2, r1, #15
 800b23c:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 800b240:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b244:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b248:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b24c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b250:	2000      	movs	r0, #0
 800b252:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800b25c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b260:	2b01      	cmp	r3, #1
 800b262:	d018      	beq.n	800b296 <HAL_PCD_EP_Close+0x6a>
 800b264:	2301      	movs	r3, #1
 800b266:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b26a:	6820      	ldr	r0, [r4, #0]
 800b26c:	f003 f912 	bl	800e494 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b270:	2000      	movs	r0, #0
 800b272:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b276:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b278:	f001 020f 	and.w	r2, r1, #15
 800b27c:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 800b280:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b284:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b286:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b28a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b28e:	2001      	movs	r0, #1
 800b290:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800b294:	e7df      	b.n	800b256 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800b296:	2002      	movs	r0, #2
 800b298:	e7ed      	b.n	800b276 <HAL_PCD_EP_Close+0x4a>

0800b29a <HAL_PCD_EP_Receive>:
{
 800b29a:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b29c:	f001 040f 	and.w	r4, r1, #15
 800b2a0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800b2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2a8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 800b2ac:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 800b2b0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b2b4:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 800b2b8:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800b2c2:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2c6:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 800b2ca:	6903      	ldr	r3, [r0, #16]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d006      	beq.n	800b2de <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b2d0:	b964      	cbnz	r4, 800b2ec <HAL_PCD_EP_Receive+0x52>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	6800      	ldr	r0, [r0, #0]
 800b2d6:	f003 f94b 	bl	800e570 <USB_EP0StartXfer>
}
 800b2da:	2000      	movs	r0, #0
 800b2dc:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800b2de:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 800b2e2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b2e6:	f8cc 220c 	str.w	r2, [ip, #524]	; 0x20c
 800b2ea:	e7f1      	b.n	800b2d0 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	6800      	ldr	r0, [r0, #0]
 800b2f0:	f003 f9e2 	bl	800e6b8 <USB_EPStartXfer>
 800b2f4:	e7f1      	b.n	800b2da <HAL_PCD_EP_Receive+0x40>

0800b2f6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b2f6:	f001 010f 	and.w	r1, r1, #15
 800b2fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b2fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800b302:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800b306:	4770      	bx	lr

0800b308 <HAL_PCD_EP_Transmit>:
{
 800b308:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b30a:	f001 040f 	and.w	r4, r1, #15
 800b30e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800b312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b316:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800b318:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 800b31c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b320:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 800b324:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800b32e:	2301      	movs	r3, #1
 800b330:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800b334:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800b338:	6903      	ldr	r3, [r0, #16]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d006      	beq.n	800b34c <HAL_PCD_EP_Transmit+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b33e:	b964      	cbnz	r4, 800b35a <HAL_PCD_EP_Transmit+0x52>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b340:	b2da      	uxtb	r2, r3
 800b342:	6800      	ldr	r0, [r0, #0]
 800b344:	f003 f914 	bl	800e570 <USB_EP0StartXfer>
}
 800b348:	2000      	movs	r0, #0
 800b34a:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800b34c:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 800b350:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b354:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
 800b358:	e7f1      	b.n	800b33e <HAL_PCD_EP_Transmit+0x36>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	6800      	ldr	r0, [r0, #0]
 800b35e:	f003 f9ab 	bl	800e6b8 <USB_EPStartXfer>
 800b362:	e7f1      	b.n	800b348 <HAL_PCD_EP_Transmit+0x40>

0800b364 <HAL_PCD_EP_SetStall>:
{
 800b364:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b366:	f001 050f 	and.w	r5, r1, #15
 800b36a:	6842      	ldr	r2, [r0, #4]
 800b36c:	4295      	cmp	r5, r2
 800b36e:	d837      	bhi.n	800b3e0 <HAL_PCD_EP_SetStall+0x7c>
 800b370:	4604      	mov	r4, r0
 800b372:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800b374:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b378:	d11e      	bne.n	800b3b8 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800b37a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b37e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b382:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b38a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800b394:	2301      	movs	r3, #1
 800b396:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b398:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800b39a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d020      	beq.n	800b3e4 <HAL_PCD_EP_SetStall+0x80>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	f003 fab0 	bl	800e90e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b3ae:	b185      	cbz	r5, 800b3d2 <HAL_PCD_EP_SetStall+0x6e>
  __HAL_UNLOCK(hpcd);
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3b8:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800b3bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3c0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b3c2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800b3c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b3d0:	e7e0      	b.n	800b394 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b3d2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b3d6:	7c21      	ldrb	r1, [r4, #16]
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	f003 fb67 	bl	800eaac <USB_EP0_OutStart>
 800b3de:	e7e7      	b.n	800b3b0 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	e7e8      	b.n	800b3b6 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800b3e4:	2002      	movs	r0, #2
 800b3e6:	e7e6      	b.n	800b3b6 <HAL_PCD_EP_SetStall+0x52>

0800b3e8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b3e8:	f001 030f 	and.w	r3, r1, #15
 800b3ec:	6842      	ldr	r2, [r0, #4]
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d82f      	bhi.n	800b452 <HAL_PCD_EP_ClrStall+0x6a>
{
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800b3f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b3fa:	d11d      	bne.n	800b438 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b3fc:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b404:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b408:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b40c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b410:	2000      	movs	r0, #0
 800b412:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800b416:	2200      	movs	r2, #0
 800b418:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b41a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800b41c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b420:	2b01      	cmp	r3, #1
 800b422:	d018      	beq.n	800b456 <HAL_PCD_EP_ClrStall+0x6e>
 800b424:	2301      	movs	r3, #1
 800b426:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b42a:	6820      	ldr	r0, [r4, #0]
 800b42c:	f003 fa9e 	bl	800e96c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b430:	2000      	movs	r0, #0
 800b432:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b436:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b438:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b43c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b440:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b442:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b446:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b44a:	2001      	movs	r0, #1
 800b44c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800b450:	e7e1      	b.n	800b416 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 800b452:	2001      	movs	r0, #1
}
 800b454:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800b456:	2002      	movs	r0, #2
 800b458:	e7ed      	b.n	800b436 <HAL_PCD_EP_ClrStall+0x4e>

0800b45a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b45a:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b45c:	6804      	ldr	r4, [r0, #0]
 800b45e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800b460:	b931      	cbnz	r1, 800b470 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b462:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b466:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800b468:	2000      	movs	r0, #0
 800b46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46e:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b472:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800b476:	f1b1 0c01 	subs.w	ip, r1, #1
 800b47a:	d00b      	beq.n	800b494 <HAL_PCDEx_SetTxFiFo+0x3a>
 800b47c:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b47e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b482:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b486:	6849      	ldr	r1, [r1, #4]
 800b488:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800b48c:	3301      	adds	r3, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	4563      	cmp	r3, ip
 800b492:	d3f4      	bcc.n	800b47e <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b494:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b498:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800b49c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800b4a0:	6060      	str	r0, [r4, #4]
 800b4a2:	e7e1      	b.n	800b468 <HAL_PCDEx_SetTxFiFo+0xe>

0800b4a4 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800b4a4:	6803      	ldr	r3, [r0, #0]
 800b4a6:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b4ac:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4ae:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b4bc:	6993      	ldr	r3, [r2, #24]
 800b4be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4c2:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b4c4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800b4c6:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <HAL_PCDEx_ActivateLPM+0x24>)
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	10000003 	.word	0x10000003

0800b4d4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b4d4:	4770      	bx	lr
	...

0800b4d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b4d8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b4da:	4b12      	ldr	r3, [pc, #72]	; (800b524 <HAL_PWREx_ConfigSupply+0x4c>)
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f013 0f04 	tst.w	r3, #4
 800b4e2:	d107      	bne.n	800b4f4 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b4e4:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <HAL_PWREx_ConfigSupply+0x4c>)
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b4ec:	1a18      	subs	r0, r3, r0
 800b4ee:	bf18      	it	ne
 800b4f0:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b4f4:	4a0b      	ldr	r2, [pc, #44]	; (800b524 <HAL_PWREx_ConfigSupply+0x4c>)
 800b4f6:	68d3      	ldr	r3, [r2, #12]
 800b4f8:	f023 0307 	bic.w	r3, r3, #7
 800b4fc:	4318      	orrs	r0, r3
 800b4fe:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 800b500:	f7fe ff5c 	bl	800a3bc <HAL_GetTick>
 800b504:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b506:	4d07      	ldr	r5, [pc, #28]	; (800b524 <HAL_PWREx_ConfigSupply+0x4c>)
 800b508:	686b      	ldr	r3, [r5, #4]
 800b50a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b50e:	d107      	bne.n	800b520 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b510:	f7fe ff54 	bl	800a3bc <HAL_GetTick>
 800b514:	1b00      	subs	r0, r0, r4
 800b516:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b51a:	d9f5      	bls.n	800b508 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 800b51c:	2001      	movs	r0, #1
 800b51e:	e7e8      	b.n	800b4f2 <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 800b520:	2000      	movs	r0, #0
 800b522:	e7e6      	b.n	800b4f2 <HAL_PWREx_ConfigSupply+0x1a>
 800b524:	58024800 	.word	0x58024800

0800b528 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b528:	4a02      	ldr	r2, [pc, #8]	; (800b534 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800b52a:	68d3      	ldr	r3, [r2, #12]
 800b52c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b530:	60d3      	str	r3, [r2, #12]
}
 800b532:	4770      	bx	lr
 800b534:	58024800 	.word	0x58024800

0800b538 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b538:	2800      	cmp	r0, #0
 800b53a:	f000 8302 	beq.w	800bb42 <HAL_RCC_OscConfig+0x60a>
{
 800b53e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b540:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b542:	6803      	ldr	r3, [r0, #0]
 800b544:	f013 0f01 	tst.w	r3, #1
 800b548:	d025      	beq.n	800b596 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b54a:	4a9c      	ldr	r2, [pc, #624]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b54c:	6913      	ldr	r3, [r2, #16]
 800b54e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b552:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b554:	2b10      	cmp	r3, #16
 800b556:	d015      	beq.n	800b584 <HAL_RCC_OscConfig+0x4c>
 800b558:	2b18      	cmp	r3, #24
 800b55a:	d00f      	beq.n	800b57c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b562:	d03f      	beq.n	800b5e4 <HAL_RCC_OscConfig+0xac>
 800b564:	2b00      	cmp	r3, #0
 800b566:	d153      	bne.n	800b610 <HAL_RCC_OscConfig+0xd8>
 800b568:	4b94      	ldr	r3, [pc, #592]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	e038      	b.n	800b5ee <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b57c:	f002 0203 	and.w	r2, r2, #3
 800b580:	2a02      	cmp	r2, #2
 800b582:	d1eb      	bne.n	800b55c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b584:	4b8d      	ldr	r3, [pc, #564]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b58c:	d003      	beq.n	800b596 <HAL_RCC_OscConfig+0x5e>
 800b58e:	6863      	ldr	r3, [r4, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 82d8 	beq.w	800bb46 <HAL_RCC_OscConfig+0x60e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f013 0f02 	tst.w	r3, #2
 800b59c:	f000 808b 	beq.w	800b6b6 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5a0:	4a86      	ldr	r2, [pc, #536]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b5a2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b5a6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b5aa:	d05a      	beq.n	800b662 <HAL_RCC_OscConfig+0x12a>
 800b5ac:	2b18      	cmp	r3, #24
 800b5ae:	d055      	beq.n	800b65c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b5b0:	68e2      	ldr	r2, [r4, #12]
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	f000 80c8 	beq.w	800b748 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5b8:	4980      	ldr	r1, [pc, #512]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b5ba:	680b      	ldr	r3, [r1, #0]
 800b5bc:	f023 0319 	bic.w	r3, r3, #25
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c4:	f7fe fefa 	bl	800a3bc <HAL_GetTick>
 800b5c8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5ca:	4e7c      	ldr	r6, [pc, #496]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b5cc:	6833      	ldr	r3, [r6, #0]
 800b5ce:	f013 0f04 	tst.w	r3, #4
 800b5d2:	f040 8097 	bne.w	800b704 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5d6:	f7fe fef1 	bl	800a3bc <HAL_GetTick>
 800b5da:	1b40      	subs	r0, r0, r5
 800b5dc:	2802      	cmp	r0, #2
 800b5de:	d9f5      	bls.n	800b5cc <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 800b5e0:	2003      	movs	r0, #3
 800b5e2:	e2b7      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5e4:	4a75      	ldr	r2, [pc, #468]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b5e6:	6813      	ldr	r3, [r2, #0]
 800b5e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5ec:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5ee:	6863      	ldr	r3, [r4, #4]
 800b5f0:	b32b      	cbz	r3, 800b63e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800b5f2:	f7fe fee3 	bl	800a3bc <HAL_GetTick>
 800b5f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5f8:	4e70      	ldr	r6, [pc, #448]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b5fa:	6833      	ldr	r3, [r6, #0]
 800b5fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b600:	d1c9      	bne.n	800b596 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b602:	f7fe fedb 	bl	800a3bc <HAL_GetTick>
 800b606:	1b40      	subs	r0, r0, r5
 800b608:	2864      	cmp	r0, #100	; 0x64
 800b60a:	d9f6      	bls.n	800b5fa <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 800b60c:	2003      	movs	r0, #3
 800b60e:	e2a1      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b614:	d009      	beq.n	800b62a <HAL_RCC_OscConfig+0xf2>
 800b616:	4b69      	ldr	r3, [pc, #420]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	e7e1      	b.n	800b5ee <HAL_RCC_OscConfig+0xb6>
 800b62a:	4b64      	ldr	r3, [pc, #400]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e7d7      	b.n	800b5ee <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800b63e:	f7fe febd 	bl	800a3bc <HAL_GetTick>
 800b642:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b644:	4e5d      	ldr	r6, [pc, #372]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b646:	6833      	ldr	r3, [r6, #0]
 800b648:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b64c:	d0a3      	beq.n	800b596 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b64e:	f7fe feb5 	bl	800a3bc <HAL_GetTick>
 800b652:	1b40      	subs	r0, r0, r5
 800b654:	2864      	cmp	r0, #100	; 0x64
 800b656:	d9f6      	bls.n	800b646 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800b658:	2003      	movs	r0, #3
 800b65a:	e27b      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b65c:	f012 0f03 	tst.w	r2, #3
 800b660:	d1a6      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b662:	4b56      	ldr	r3, [pc, #344]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f013 0f04 	tst.w	r3, #4
 800b66a:	d003      	beq.n	800b674 <HAL_RCC_OscConfig+0x13c>
 800b66c:	68e3      	ldr	r3, [r4, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 826b 	beq.w	800bb4a <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b674:	f7fe febc 	bl	800a3f0 <HAL_GetREVID>
 800b678:	f241 0303 	movw	r3, #4099	; 0x1003
 800b67c:	4298      	cmp	r0, r3
 800b67e:	d812      	bhi.n	800b6a6 <HAL_RCC_OscConfig+0x16e>
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	2a40      	cmp	r2, #64	; 0x40
 800b684:	d007      	beq.n	800b696 <HAL_RCC_OscConfig+0x15e>
 800b686:	494d      	ldr	r1, [pc, #308]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b688:	684b      	ldr	r3, [r1, #4]
 800b68a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b68e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b692:	604b      	str	r3, [r1, #4]
 800b694:	e00f      	b.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
 800b696:	4a49      	ldr	r2, [pc, #292]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b698:	6853      	ldr	r3, [r2, #4]
 800b69a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b69e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a2:	6053      	str	r3, [r2, #4]
 800b6a4:	e007      	b.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
 800b6a6:	4a45      	ldr	r2, [pc, #276]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b6a8:	6853      	ldr	r3, [r2, #4]
 800b6aa:	6921      	ldr	r1, [r4, #16]
 800b6ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b6b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b6b4:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	f013 0f10 	tst.w	r3, #16
 800b6bc:	f000 8088 	beq.w	800b7d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6c0:	4a3e      	ldr	r2, [pc, #248]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b6c2:	6913      	ldr	r3, [r2, #16]
 800b6c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d054      	beq.n	800b778 <HAL_RCC_OscConfig+0x240>
 800b6ce:	2b18      	cmp	r3, #24
 800b6d0:	d04e      	beq.n	800b770 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b6d2:	69e3      	ldr	r3, [r4, #28]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80b8 	beq.w	800b84a <HAL_RCC_OscConfig+0x312>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b6da:	4a38      	ldr	r2, [pc, #224]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b6dc:	6813      	ldr	r3, [r2, #0]
 800b6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e4:	f7fe fe6a 	bl	800a3bc <HAL_GetTick>
 800b6e8:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b6ea:	4e34      	ldr	r6, [pc, #208]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b6f2:	f040 8088 	bne.w	800b806 <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b6f6:	f7fe fe61 	bl	800a3bc <HAL_GetTick>
 800b6fa:	1b40      	subs	r0, r0, r5
 800b6fc:	2802      	cmp	r0, #2
 800b6fe:	d9f5      	bls.n	800b6ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b700:	2003      	movs	r0, #3
 800b702:	e227      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b704:	f7fe fe74 	bl	800a3f0 <HAL_GetREVID>
 800b708:	f241 0303 	movw	r3, #4099	; 0x1003
 800b70c:	4298      	cmp	r0, r3
 800b70e:	d812      	bhi.n	800b736 <HAL_RCC_OscConfig+0x1fe>
 800b710:	6922      	ldr	r2, [r4, #16]
 800b712:	2a40      	cmp	r2, #64	; 0x40
 800b714:	d007      	beq.n	800b726 <HAL_RCC_OscConfig+0x1ee>
 800b716:	4929      	ldr	r1, [pc, #164]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b718:	684b      	ldr	r3, [r1, #4]
 800b71a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b71e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b722:	604b      	str	r3, [r1, #4]
 800b724:	e7c7      	b.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
 800b726:	4a25      	ldr	r2, [pc, #148]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b728:	6853      	ldr	r3, [r2, #4]
 800b72a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b72e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b732:	6053      	str	r3, [r2, #4]
 800b734:	e7bf      	b.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
 800b736:	4a21      	ldr	r2, [pc, #132]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b738:	6853      	ldr	r3, [r2, #4]
 800b73a:	6921      	ldr	r1, [r4, #16]
 800b73c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b740:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b744:	6053      	str	r3, [r2, #4]
 800b746:	e7b6      	b.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800b748:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b74a:	6813      	ldr	r3, [r2, #0]
 800b74c:	f023 0301 	bic.w	r3, r3, #1
 800b750:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b752:	f7fe fe33 	bl	800a3bc <HAL_GetTick>
 800b756:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b758:	4e18      	ldr	r6, [pc, #96]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b75a:	6833      	ldr	r3, [r6, #0]
 800b75c:	f013 0f04 	tst.w	r3, #4
 800b760:	d0a9      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b762:	f7fe fe2b 	bl	800a3bc <HAL_GetTick>
 800b766:	1b40      	subs	r0, r0, r5
 800b768:	2802      	cmp	r0, #2
 800b76a:	d9f6      	bls.n	800b75a <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 800b76c:	2003      	movs	r0, #3
 800b76e:	e1f1      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b770:	f002 0203 	and.w	r2, r2, #3
 800b774:	2a01      	cmp	r2, #1
 800b776:	d1ac      	bne.n	800b6d2 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b778:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b780:	d003      	beq.n	800b78a <HAL_RCC_OscConfig+0x252>
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	2b80      	cmp	r3, #128	; 0x80
 800b786:	f040 81e2 	bne.w	800bb4e <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b78a:	f7fe fe31 	bl	800a3f0 <HAL_GetREVID>
 800b78e:	f241 0303 	movw	r3, #4099	; 0x1003
 800b792:	4298      	cmp	r0, r3
 800b794:	d814      	bhi.n	800b7c0 <HAL_RCC_OscConfig+0x288>
 800b796:	6a22      	ldr	r2, [r4, #32]
 800b798:	2a20      	cmp	r2, #32
 800b79a:	d007      	beq.n	800b7ac <HAL_RCC_OscConfig+0x274>
 800b79c:	4907      	ldr	r1, [pc, #28]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b79e:	684b      	ldr	r3, [r1, #4]
 800b7a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b7a4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b7a8:	604b      	str	r3, [r1, #4]
 800b7aa:	e011      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b7ac:	4a03      	ldr	r2, [pc, #12]	; (800b7bc <HAL_RCC_OscConfig+0x284>)
 800b7ae:	6853      	ldr	r3, [r2, #4]
 800b7b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b7b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7b8:	6053      	str	r3, [r2, #4]
 800b7ba:	e009      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b7bc:	58024400 	.word	0x58024400
 800b7c0:	4a9a      	ldr	r2, [pc, #616]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b7c2:	68d3      	ldr	r3, [r2, #12]
 800b7c4:	6a21      	ldr	r1, [r4, #32]
 800b7c6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b7ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b7ce:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	f013 0f08 	tst.w	r3, #8
 800b7d6:	d060      	beq.n	800b89a <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d049      	beq.n	800b872 <HAL_RCC_OscConfig+0x33a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7de:	4a93      	ldr	r2, [pc, #588]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b7e0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7e8:	f7fe fde8 	bl	800a3bc <HAL_GetTick>
 800b7ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b7ee:	4e8f      	ldr	r6, [pc, #572]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b7f0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b7f2:	f013 0f02 	tst.w	r3, #2
 800b7f6:	d150      	bne.n	800b89a <HAL_RCC_OscConfig+0x362>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b7f8:	f7fe fde0 	bl	800a3bc <HAL_GetTick>
 800b7fc:	1b40      	subs	r0, r0, r5
 800b7fe:	2802      	cmp	r0, #2
 800b800:	d9f6      	bls.n	800b7f0 <HAL_RCC_OscConfig+0x2b8>
        {
          return HAL_TIMEOUT;
 800b802:	2003      	movs	r0, #3
 800b804:	e1a6      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b806:	f7fe fdf3 	bl	800a3f0 <HAL_GetREVID>
 800b80a:	f241 0303 	movw	r3, #4099	; 0x1003
 800b80e:	4298      	cmp	r0, r3
 800b810:	d812      	bhi.n	800b838 <HAL_RCC_OscConfig+0x300>
 800b812:	6a22      	ldr	r2, [r4, #32]
 800b814:	2a20      	cmp	r2, #32
 800b816:	d007      	beq.n	800b828 <HAL_RCC_OscConfig+0x2f0>
 800b818:	4984      	ldr	r1, [pc, #528]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b81a:	684b      	ldr	r3, [r1, #4]
 800b81c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b820:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b824:	604b      	str	r3, [r1, #4]
 800b826:	e7d3      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b828:	4a80      	ldr	r2, [pc, #512]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b82a:	6853      	ldr	r3, [r2, #4]
 800b82c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b834:	6053      	str	r3, [r2, #4]
 800b836:	e7cb      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
 800b838:	4a7c      	ldr	r2, [pc, #496]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b83a:	68d3      	ldr	r3, [r2, #12]
 800b83c:	6a21      	ldr	r1, [r4, #32]
 800b83e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b842:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b846:	60d3      	str	r3, [r2, #12]
 800b848:	e7c2      	b.n	800b7d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_DISABLE();
 800b84a:	4a78      	ldr	r2, [pc, #480]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b84c:	6813      	ldr	r3, [r2, #0]
 800b84e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b852:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b854:	f7fe fdb2 	bl	800a3bc <HAL_GetTick>
 800b858:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b85a:	4e74      	ldr	r6, [pc, #464]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b85c:	6833      	ldr	r3, [r6, #0]
 800b85e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b862:	d0b5      	beq.n	800b7d0 <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b864:	f7fe fdaa 	bl	800a3bc <HAL_GetTick>
 800b868:	1b40      	subs	r0, r0, r5
 800b86a:	2802      	cmp	r0, #2
 800b86c:	d9f6      	bls.n	800b85c <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 800b86e:	2003      	movs	r0, #3
 800b870:	e170      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b872:	4a6e      	ldr	r2, [pc, #440]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b874:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800b876:	f023 0301 	bic.w	r3, r3, #1
 800b87a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87c:	f7fe fd9e 	bl	800a3bc <HAL_GetTick>
 800b880:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b882:	4e6a      	ldr	r6, [pc, #424]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b884:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b886:	f013 0f02 	tst.w	r3, #2
 800b88a:	d006      	beq.n	800b89a <HAL_RCC_OscConfig+0x362>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b88c:	f7fe fd96 	bl	800a3bc <HAL_GetTick>
 800b890:	1b40      	subs	r0, r0, r5
 800b892:	2802      	cmp	r0, #2
 800b894:	d9f6      	bls.n	800b884 <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 800b896:	2003      	movs	r0, #3
 800b898:	e15c      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	f013 0f20 	tst.w	r3, #32
 800b8a0:	d029      	beq.n	800b8f6 <HAL_RCC_OscConfig+0x3be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b8a2:	69a3      	ldr	r3, [r4, #24]
 800b8a4:	b19b      	cbz	r3, 800b8ce <HAL_RCC_OscConfig+0x396>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8a6:	4a61      	ldr	r2, [pc, #388]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b8a8:	6813      	ldr	r3, [r2, #0]
 800b8aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8b0:	f7fe fd84 	bl	800a3bc <HAL_GetTick>
 800b8b4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b8b6:	4e5d      	ldr	r6, [pc, #372]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b8b8:	6833      	ldr	r3, [r6, #0]
 800b8ba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b8be:	d11a      	bne.n	800b8f6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8c0:	f7fe fd7c 	bl	800a3bc <HAL_GetTick>
 800b8c4:	1b40      	subs	r0, r0, r5
 800b8c6:	2802      	cmp	r0, #2
 800b8c8:	d9f6      	bls.n	800b8b8 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 800b8ca:	2003      	movs	r0, #3
 800b8cc:	e142      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b8ce:	4a57      	ldr	r2, [pc, #348]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b8d0:	6813      	ldr	r3, [r2, #0]
 800b8d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8d8:	f7fe fd70 	bl	800a3bc <HAL_GetTick>
 800b8dc:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b8de:	4e53      	ldr	r6, [pc, #332]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b8e0:	6833      	ldr	r3, [r6, #0]
 800b8e2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b8e6:	d006      	beq.n	800b8f6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8e8:	f7fe fd68 	bl	800a3bc <HAL_GetTick>
 800b8ec:	1b40      	subs	r0, r0, r5
 800b8ee:	2802      	cmp	r0, #2
 800b8f0:	d9f6      	bls.n	800b8e0 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 800b8f2:	2003      	movs	r0, #3
 800b8f4:	e12e      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	f013 0f04 	tst.w	r3, #4
 800b8fc:	d121      	bne.n	800b942 <HAL_RCC_OscConfig+0x40a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b900:	2a00      	cmp	r2, #0
 800b902:	f000 8126 	beq.w	800bb52 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b906:	4b49      	ldr	r3, [pc, #292]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b90e:	2b18      	cmp	r3, #24
 800b910:	f000 80ee 	beq.w	800baf0 <HAL_RCC_OscConfig+0x5b8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b914:	2a02      	cmp	r2, #2
 800b916:	d075      	beq.n	800ba04 <HAL_RCC_OscConfig+0x4cc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b918:	4a44      	ldr	r2, [pc, #272]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b922:	f7fe fd4b 	bl	800a3bc <HAL_GetTick>
 800b926:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b928:	4d40      	ldr	r5, [pc, #256]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b92a:	682b      	ldr	r3, [r5, #0]
 800b92c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b930:	f000 80dc 	beq.w	800baec <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b934:	f7fe fd42 	bl	800a3bc <HAL_GetTick>
 800b938:	1b00      	subs	r0, r0, r4
 800b93a:	2802      	cmp	r0, #2
 800b93c:	d9f5      	bls.n	800b92a <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800b93e:	2003      	movs	r0, #3
 800b940:	e108      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    PWR->CR1 |= PWR_CR1_DBP;
 800b942:	4a3b      	ldr	r2, [pc, #236]	; (800ba30 <HAL_RCC_OscConfig+0x4f8>)
 800b944:	6813      	ldr	r3, [r2, #0]
 800b946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b94a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b94c:	f7fe fd36 	bl	800a3bc <HAL_GetTick>
 800b950:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b952:	4e37      	ldr	r6, [pc, #220]	; (800ba30 <HAL_RCC_OscConfig+0x4f8>)
 800b954:	6833      	ldr	r3, [r6, #0]
 800b956:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b95a:	d106      	bne.n	800b96a <HAL_RCC_OscConfig+0x432>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b95c:	f7fe fd2e 	bl	800a3bc <HAL_GetTick>
 800b960:	1b40      	subs	r0, r0, r5
 800b962:	2864      	cmp	r0, #100	; 0x64
 800b964:	d9f6      	bls.n	800b954 <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 800b966:	2003      	movs	r0, #3
 800b968:	e0f4      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d00a      	beq.n	800b986 <HAL_RCC_OscConfig+0x44e>
 800b970:	bb0b      	cbnz	r3, 800b9b6 <HAL_RCC_OscConfig+0x47e>
 800b972:	4b2e      	ldr	r3, [pc, #184]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b976:	f022 0201 	bic.w	r2, r2, #1
 800b97a:	671a      	str	r2, [r3, #112]	; 0x70
 800b97c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b97e:	f022 0204 	bic.w	r2, r2, #4
 800b982:	671a      	str	r2, [r3, #112]	; 0x70
 800b984:	e004      	b.n	800b990 <HAL_RCC_OscConfig+0x458>
 800b986:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b988:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b98a:	f043 0301 	orr.w	r3, r3, #1
 800b98e:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b990:	68a3      	ldr	r3, [r4, #8]
 800b992:	b333      	cbz	r3, 800b9e2 <HAL_RCC_OscConfig+0x4aa>
      tickstart = HAL_GetTick();
 800b994:	f7fe fd12 	bl	800a3bc <HAL_GetTick>
 800b998:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b99a:	4e24      	ldr	r6, [pc, #144]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b99c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9a0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b9a2:	f013 0f02 	tst.w	r3, #2
 800b9a6:	d1aa      	bne.n	800b8fe <HAL_RCC_OscConfig+0x3c6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9a8:	f7fe fd08 	bl	800a3bc <HAL_GetTick>
 800b9ac:	1b40      	subs	r0, r0, r5
 800b9ae:	42b8      	cmp	r0, r7
 800b9b0:	d9f6      	bls.n	800b9a0 <HAL_RCC_OscConfig+0x468>
          return HAL_TIMEOUT;
 800b9b2:	2003      	movs	r0, #3
 800b9b4:	e0ce      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	d009      	beq.n	800b9ce <HAL_RCC_OscConfig+0x496>
 800b9ba:	4b1c      	ldr	r3, [pc, #112]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b9bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9be:	f022 0201 	bic.w	r2, r2, #1
 800b9c2:	671a      	str	r2, [r3, #112]	; 0x70
 800b9c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9c6:	f022 0204 	bic.w	r2, r2, #4
 800b9ca:	671a      	str	r2, [r3, #112]	; 0x70
 800b9cc:	e7e0      	b.n	800b990 <HAL_RCC_OscConfig+0x458>
 800b9ce:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800b9d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9d2:	f042 0204 	orr.w	r2, r2, #4
 800b9d6:	671a      	str	r2, [r3, #112]	; 0x70
 800b9d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	671a      	str	r2, [r3, #112]	; 0x70
 800b9e0:	e7d6      	b.n	800b990 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 800b9e2:	f7fe fceb 	bl	800a3bc <HAL_GetTick>
 800b9e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b9e8:	4e10      	ldr	r6, [pc, #64]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9ea:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b9ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b9f0:	f013 0f02 	tst.w	r3, #2
 800b9f4:	d083      	beq.n	800b8fe <HAL_RCC_OscConfig+0x3c6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9f6:	f7fe fce1 	bl	800a3bc <HAL_GetTick>
 800b9fa:	1b40      	subs	r0, r0, r5
 800b9fc:	42b8      	cmp	r0, r7
 800b9fe:	d9f6      	bls.n	800b9ee <HAL_RCC_OscConfig+0x4b6>
          return HAL_TIMEOUT;
 800ba00:	2003      	movs	r0, #3
 800ba02:	e0a7      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_PLL_DISABLE();
 800ba04:	4a09      	ldr	r2, [pc, #36]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800ba06:	6813      	ldr	r3, [r2, #0]
 800ba08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba0c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ba0e:	f7fe fcd5 	bl	800a3bc <HAL_GetTick>
 800ba12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba14:	4e05      	ldr	r6, [pc, #20]	; (800ba2c <HAL_RCC_OscConfig+0x4f4>)
 800ba16:	6833      	ldr	r3, [r6, #0]
 800ba18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ba1c:	d00a      	beq.n	800ba34 <HAL_RCC_OscConfig+0x4fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba1e:	f7fe fccd 	bl	800a3bc <HAL_GetTick>
 800ba22:	1b40      	subs	r0, r0, r5
 800ba24:	2802      	cmp	r0, #2
 800ba26:	d9f6      	bls.n	800ba16 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 800ba28:	2003      	movs	r0, #3
 800ba2a:	e093      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800ba2c:	58024400 	.word	0x58024400
 800ba30:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba34:	4b4e      	ldr	r3, [pc, #312]	; (800bb70 <HAL_RCC_OscConfig+0x638>)
 800ba36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ba38:	4a4e      	ldr	r2, [pc, #312]	; (800bb74 <HAL_RCC_OscConfig+0x63c>)
 800ba3a:	400a      	ands	r2, r1
 800ba3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ba42:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ba46:	629a      	str	r2, [r3, #40]	; 0x28
 800ba48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ba4a:	3a01      	subs	r2, #1
 800ba4c:	0252      	lsls	r2, r2, #9
 800ba4e:	b292      	uxth	r2, r2
 800ba50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba52:	3901      	subs	r1, #1
 800ba54:	0409      	lsls	r1, r1, #16
 800ba56:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ba5e:	3901      	subs	r1, #1
 800ba60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800ba64:	430a      	orrs	r2, r1
 800ba66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ba68:	3901      	subs	r1, #1
 800ba6a:	0609      	lsls	r1, r1, #24
 800ba6c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800ba70:	430a      	orrs	r2, r1
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba76:	f022 0201 	bic.w	r2, r2, #1
 800ba7a:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ba7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ba7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba80:	4a3d      	ldr	r2, [pc, #244]	; (800bb78 <HAL_RCC_OscConfig+0x640>)
 800ba82:	4002      	ands	r2, r0
 800ba84:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800ba88:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	f022 020c 	bic.w	r2, r2, #12
 800ba90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ba92:	430a      	orrs	r2, r1
 800ba94:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ba96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba98:	f022 0202 	bic.w	r2, r2, #2
 800ba9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800baa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800baa8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bab0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800bab8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	f042 0201 	orr.w	r2, r2, #1
 800bac0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800bac8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800baca:	f7fe fc77 	bl	800a3bc <HAL_GetTick>
 800bace:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bad0:	4d27      	ldr	r5, [pc, #156]	; (800bb70 <HAL_RCC_OscConfig+0x638>)
 800bad2:	682b      	ldr	r3, [r5, #0]
 800bad4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bad8:	d106      	bne.n	800bae8 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bada:	f7fe fc6f 	bl	800a3bc <HAL_GetTick>
 800bade:	1b00      	subs	r0, r0, r4
 800bae0:	2802      	cmp	r0, #2
 800bae2:	d9f6      	bls.n	800bad2 <HAL_RCC_OscConfig+0x59a>
            return HAL_TIMEOUT;
 800bae4:	2003      	movs	r0, #3
 800bae6:	e035      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800bae8:	2000      	movs	r0, #0
 800baea:	e033      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800baec:	2000      	movs	r0, #0
 800baee:	e031      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800baf0:	4b1f      	ldr	r3, [pc, #124]	; (800bb70 <HAL_RCC_OscConfig+0x638>)
 800baf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baf6:	2a01      	cmp	r2, #1
 800baf8:	d02d      	beq.n	800bb56 <HAL_RCC_OscConfig+0x61e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bafa:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bafe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bb00:	4282      	cmp	r2, r0
 800bb02:	d12a      	bne.n	800bb5a <HAL_RCC_OscConfig+0x622>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb04:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb0a:	4291      	cmp	r1, r2
 800bb0c:	d127      	bne.n	800bb5e <HAL_RCC_OscConfig+0x626>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb0e:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800bb12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bb14:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb16:	4291      	cmp	r1, r2
 800bb18:	d123      	bne.n	800bb62 <HAL_RCC_OscConfig+0x62a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb1a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800bb1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bb20:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb22:	4291      	cmp	r1, r2
 800bb24:	d11f      	bne.n	800bb66 <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb26:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800bb2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb2c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb2e:	4291      	cmp	r1, r2
 800bb30:	d11b      	bne.n	800bb6a <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bb32:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bb36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bb38:	3801      	subs	r0, #1
  return HAL_OK;
 800bb3a:	1a18      	subs	r0, r3, r0
 800bb3c:	bf18      	it	ne
 800bb3e:	2001      	movne	r0, #1
 800bb40:	e008      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
    return HAL_ERROR;
 800bb42:	2001      	movs	r0, #1
}
 800bb44:	4770      	bx	lr
        return HAL_ERROR;
 800bb46:	2001      	movs	r0, #1
 800bb48:	e004      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        return HAL_ERROR;
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	e002      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
        return HAL_ERROR;
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e000      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
  return HAL_OK;
 800bb52:	2000      	movs	r0, #0
}
 800bb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800bb56:	2001      	movs	r0, #1
 800bb58:	e7fc      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	e7fa      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb5e:	2001      	movs	r0, #1
 800bb60:	e7f8      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7f6      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb66:	2001      	movs	r0, #1
 800bb68:	e7f4      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	e7f2      	b.n	800bb54 <HAL_RCC_OscConfig+0x61c>
 800bb6e:	bf00      	nop
 800bb70:	58024400 	.word	0x58024400
 800bb74:	fffffc0c 	.word	0xfffffc0c
 800bb78:	ffff0007 	.word	0xffff0007

0800bb7c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb7c:	4b73      	ldr	r3, [pc, #460]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb84:	2b10      	cmp	r3, #16
 800bb86:	f000 80dc 	beq.w	800bd42 <HAL_RCC_GetSysClockFreq+0x1c6>
 800bb8a:	2b18      	cmp	r3, #24
 800bb8c:	d010      	beq.n	800bbb0 <HAL_RCC_GetSysClockFreq+0x34>
 800bb8e:	b10b      	cbz	r3, 800bb94 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bb90:	486f      	ldr	r0, [pc, #444]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800bb92:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb94:	4b6d      	ldr	r3, [pc, #436]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f013 0f20 	tst.w	r3, #32
 800bb9c:	f000 80d3 	beq.w	800bd46 <HAL_RCC_GetSysClockFreq+0x1ca>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bba0:	4b6a      	ldr	r3, [pc, #424]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800bba8:	4b6a      	ldr	r3, [pc, #424]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800bbaa:	fa23 f000 	lsr.w	r0, r3, r0
 800bbae:	4770      	bx	lr
{
 800bbb0:	b430      	push	{r4, r5}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbb2:	4a66      	ldr	r2, [pc, #408]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bbb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bbb6:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800bbb8:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bbbc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bbbe:	6b53      	ldr	r3, [r2, #52]	; 0x34

    if (pllm != 0U)
 800bbc0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800bbc4:	f000 809e 	beq.w	800bd04 <HAL_RCC_GetSysClockFreq+0x188>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bbc8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bbcc:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bbd0:	fb05 f303 	mul.w	r3, r5, r3
 800bbd4:	ee07 3a90 	vmov	s15, r3
 800bbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbdc:	f001 0103 	and.w	r1, r1, #3
 800bbe0:	2901      	cmp	r1, #1
 800bbe2:	d064      	beq.n	800bcae <HAL_RCC_GetSysClockFreq+0x132>
 800bbe4:	2902      	cmp	r1, #2
 800bbe6:	f000 808f 	beq.w	800bd08 <HAL_RCC_GetSysClockFreq+0x18c>
 800bbea:	b1e1      	cbz	r1, 800bc26 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbec:	4b57      	ldr	r3, [pc, #348]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf4:	ee07 3a10 	vmov	s14, r3
 800bbf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bbfc:	eddf 6a56 	vldr	s13, [pc, #344]	; 800bd58 <HAL_RCC_GetSysClockFreq+0x1dc>
 800bc00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc10:	ee07 0a10 	vmov	s14, r0
 800bc14:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bc18:	ed9f 6a50 	vldr	s12, [pc, #320]	; 800bd5c <HAL_RCC_GetSysClockFreq+0x1e0>
 800bc1c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bc20:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800bc24:	e05f      	b.n	800bce6 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc26:	6813      	ldr	r3, [r2, #0]
 800bc28:	f013 0f20 	tst.w	r3, #32
 800bc2c:	d022      	beq.n	800bc74 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc2e:	6811      	ldr	r1, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc30:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc32:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800bc36:	4a47      	ldr	r2, [pc, #284]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800bc38:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc3a:	ee07 2a10 	vmov	s14, r2
 800bc3e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bc42:	ee07 0a10 	vmov	s14, r0
 800bc46:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800bc4a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800bc4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc52:	ee06 3a90 	vmov	s13, r3
 800bc56:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bc5a:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800bd58 <HAL_RCC_GetSysClockFreq+0x1dc>
 800bc5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc72:	e038      	b.n	800bce6 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc74:	4b35      	ldr	r3, [pc, #212]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7c:	ee07 3a10 	vmov	s14, r3
 800bc80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bc84:	eddf 6a34 	vldr	s13, [pc, #208]	; 800bd58 <HAL_RCC_GetSysClockFreq+0x1dc>
 800bc88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc98:	ee07 0a10 	vmov	s14, r0
 800bc9c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bca0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800bd60 <HAL_RCC_GetSysClockFreq+0x1e4>
 800bca4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcac:	e01b      	b.n	800bce6 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcae:	4b27      	ldr	r3, [pc, #156]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a10 	vmov	s14, r3
 800bcba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bcbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bd58 <HAL_RCC_GetSysClockFreq+0x1dc>
 800bcc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcd2:	ee07 0a10 	vmov	s14, r0
 800bcd6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bcda:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800bd5c <HAL_RCC_GetSysClockFreq+0x1e0>
 800bcde:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bce2:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcea:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bcee:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bcf0:	ee07 3a10 	vmov	s14, r3
 800bcf4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bcf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bcfc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800bd00:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800bd04:	bc30      	pop	{r4, r5}
 800bd06:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd08:	4b10      	ldr	r3, [pc, #64]	; (800bd4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 800bd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd10:	ee07 3a10 	vmov	s14, r3
 800bd14:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bd18:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800bd58 <HAL_RCC_GetSysClockFreq+0x1dc>
 800bd1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd2c:	ee07 0a10 	vmov	s14, r0
 800bd30:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bd34:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800bd64 <HAL_RCC_GetSysClockFreq+0x1e8>
 800bd38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bd3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800bd40:	e7d1      	b.n	800bce6 <HAL_RCC_GetSysClockFreq+0x16a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd42:	4809      	ldr	r0, [pc, #36]	; (800bd68 <HAL_RCC_GetSysClockFreq+0x1ec>)
 800bd44:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bd46:	4803      	ldr	r0, [pc, #12]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1d8>)
}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	003d0900 	.word	0x003d0900
 800bd54:	03d09000 	.word	0x03d09000
 800bd58:	39000000 	.word	0x39000000
 800bd5c:	4a742400 	.word	0x4a742400
 800bd60:	4c742400 	.word	0x4c742400
 800bd64:	4af42400 	.word	0x4af42400
 800bd68:	007a1200 	.word	0x007a1200

0800bd6c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f000 80c3 	beq.w	800bef8 <HAL_RCC_ClockConfig+0x18c>
{
 800bd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd76:	460d      	mov	r5, r1
 800bd78:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd7a:	4b65      	ldr	r3, [pc, #404]	; (800bf10 <HAL_RCC_ClockConfig+0x1a4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	428b      	cmp	r3, r1
 800bd84:	d20b      	bcs.n	800bd9e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd86:	4a62      	ldr	r2, [pc, #392]	; (800bf10 <HAL_RCC_ClockConfig+0x1a4>)
 800bd88:	6813      	ldr	r3, [r2, #0]
 800bd8a:	f023 030f 	bic.w	r3, r3, #15
 800bd8e:	430b      	orrs	r3, r1
 800bd90:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	f003 030f 	and.w	r3, r3, #15
 800bd98:	428b      	cmp	r3, r1
 800bd9a:	f040 80af 	bne.w	800befc <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f013 0f04 	tst.w	r3, #4
 800bda4:	d00c      	beq.n	800bdc0 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bda6:	6922      	ldr	r2, [r4, #16]
 800bda8:	4b5a      	ldr	r3, [pc, #360]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d905      	bls.n	800bdc0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bdb4:	4957      	ldr	r1, [pc, #348]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdb6:	698b      	ldr	r3, [r1, #24]
 800bdb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	f013 0f08 	tst.w	r3, #8
 800bdc6:	d00c      	beq.n	800bde2 <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bdc8:	6962      	ldr	r2, [r4, #20]
 800bdca:	4b52      	ldr	r3, [pc, #328]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d905      	bls.n	800bde2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bdd6:	494f      	ldr	r1, [pc, #316]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdd8:	69cb      	ldr	r3, [r1, #28]
 800bdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdde:	4313      	orrs	r3, r2
 800bde0:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	f013 0f10 	tst.w	r3, #16
 800bde8:	d00c      	beq.n	800be04 <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bdea:	69a2      	ldr	r2, [r4, #24]
 800bdec:	4b49      	ldr	r3, [pc, #292]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d905      	bls.n	800be04 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bdf8:	4946      	ldr	r1, [pc, #280]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bdfa:	69cb      	ldr	r3, [r1, #28]
 800bdfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800be00:	4313      	orrs	r3, r2
 800be02:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	f013 0f20 	tst.w	r3, #32
 800be0a:	d00c      	beq.n	800be26 <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be0c:	69e2      	ldr	r2, [r4, #28]
 800be0e:	4b41      	ldr	r3, [pc, #260]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be16:	429a      	cmp	r2, r3
 800be18:	d905      	bls.n	800be26 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800be1a:	493e      	ldr	r1, [pc, #248]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be1c:	6a0b      	ldr	r3, [r1, #32]
 800be1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be22:	4313      	orrs	r3, r2
 800be24:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	f013 0f02 	tst.w	r3, #2
 800be2c:	d074      	beq.n	800bf18 <HAL_RCC_ClockConfig+0x1ac>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800be2e:	68e1      	ldr	r1, [r4, #12]
 800be30:	4a38      	ldr	r2, [pc, #224]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be32:	6992      	ldr	r2, [r2, #24]
 800be34:	f002 020f 	and.w	r2, r2, #15
 800be38:	4291      	cmp	r1, r2
 800be3a:	d965      	bls.n	800bf08 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be3c:	4a35      	ldr	r2, [pc, #212]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be3e:	6993      	ldr	r3, [r2, #24]
 800be40:	f023 030f 	bic.w	r3, r3, #15
 800be44:	430b      	orrs	r3, r1
 800be46:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	f013 0f01 	tst.w	r3, #1
 800be4e:	d041      	beq.n	800bed4 <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800be50:	4a30      	ldr	r2, [pc, #192]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be52:	6993      	ldr	r3, [r2, #24]
 800be54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be58:	68a1      	ldr	r1, [r4, #8]
 800be5a:	430b      	orrs	r3, r1
 800be5c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be5e:	6862      	ldr	r2, [r4, #4]
 800be60:	2a02      	cmp	r2, #2
 800be62:	d00a      	beq.n	800be7a <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be64:	2a03      	cmp	r2, #3
 800be66:	d027      	beq.n	800beb8 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800be68:	2a01      	cmp	r2, #1
 800be6a:	d02c      	beq.n	800bec6 <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be6c:	4b29      	ldr	r3, [pc, #164]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f013 0f04 	tst.w	r3, #4
 800be74:	d106      	bne.n	800be84 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 800be76:	2001      	movs	r0, #1
 800be78:	e0c1      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be7a:	4b26      	ldr	r3, [pc, #152]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800be82:	d03d      	beq.n	800bf00 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be84:	4923      	ldr	r1, [pc, #140]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800be86:	690b      	ldr	r3, [r1, #16]
 800be88:	f023 0307 	bic.w	r3, r3, #7
 800be8c:	4313      	orrs	r3, r2
 800be8e:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800be90:	f7fe fa94 	bl	800a3bc <HAL_GetTick>
 800be94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be96:	4f1f      	ldr	r7, [pc, #124]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be98:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bea2:	6862      	ldr	r2, [r4, #4]
 800bea4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800bea8:	d014      	beq.n	800bed4 <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800beaa:	f7fe fa87 	bl	800a3bc <HAL_GetTick>
 800beae:	1b80      	subs	r0, r0, r6
 800beb0:	4540      	cmp	r0, r8
 800beb2:	d9f3      	bls.n	800be9c <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 800beb4:	2003      	movs	r0, #3
 800beb6:	e0a2      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800beb8:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800bec0:	d1e0      	bne.n	800be84 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 800bec2:	2001      	movs	r0, #1
 800bec4:	e09b      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bec6:	4b13      	ldr	r3, [pc, #76]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bece:	d1d9      	bne.n	800be84 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 800bed0:	2001      	movs	r0, #1
 800bed2:	e094      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	f013 0f02 	tst.w	r3, #2
 800beda:	d020      	beq.n	800bf1e <HAL_RCC_ClockConfig+0x1b2>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bedc:	68e2      	ldr	r2, [r4, #12]
 800bede:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d219      	bcs.n	800bf1e <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beea:	490a      	ldr	r1, [pc, #40]	; (800bf14 <HAL_RCC_ClockConfig+0x1a8>)
 800beec:	698b      	ldr	r3, [r1, #24]
 800beee:	f023 030f 	bic.w	r3, r3, #15
 800bef2:	4313      	orrs	r3, r2
 800bef4:	618b      	str	r3, [r1, #24]
 800bef6:	e012      	b.n	800bf1e <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 800bef8:	2001      	movs	r0, #1
}
 800befa:	4770      	bx	lr
      return HAL_ERROR;
 800befc:	2001      	movs	r0, #1
 800befe:	e07e      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
          return HAL_ERROR;
 800bf00:	2001      	movs	r0, #1
 800bf02:	e07c      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 800bf04:	2001      	movs	r0, #1
 800bf06:	e07a      	b.n	800bffe <HAL_RCC_ClockConfig+0x292>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf08:	f013 0f01 	tst.w	r3, #1
 800bf0c:	d1a0      	bne.n	800be50 <HAL_RCC_ClockConfig+0xe4>
 800bf0e:	e7e5      	b.n	800bedc <HAL_RCC_ClockConfig+0x170>
 800bf10:	52002000 	.word	0x52002000
 800bf14:	58024400 	.word	0x58024400
 800bf18:	f013 0f01 	tst.w	r3, #1
 800bf1c:	d198      	bne.n	800be50 <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf1e:	4b39      	ldr	r3, [pc, #228]	; (800c004 <HAL_RCC_ClockConfig+0x298>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	42ab      	cmp	r3, r5
 800bf28:	d90a      	bls.n	800bf40 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf2a:	4a36      	ldr	r2, [pc, #216]	; (800c004 <HAL_RCC_ClockConfig+0x298>)
 800bf2c:	6813      	ldr	r3, [r2, #0]
 800bf2e:	f023 030f 	bic.w	r3, r3, #15
 800bf32:	432b      	orrs	r3, r5
 800bf34:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf36:	6813      	ldr	r3, [r2, #0]
 800bf38:	f003 030f 	and.w	r3, r3, #15
 800bf3c:	42ab      	cmp	r3, r5
 800bf3e:	d1e1      	bne.n	800bf04 <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	f013 0f04 	tst.w	r3, #4
 800bf46:	d00c      	beq.n	800bf62 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf48:	6922      	ldr	r2, [r4, #16]
 800bf4a:	4b2f      	ldr	r3, [pc, #188]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d205      	bcs.n	800bf62 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf56:	492c      	ldr	r1, [pc, #176]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf58:	698b      	ldr	r3, [r1, #24]
 800bf5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	f013 0f08 	tst.w	r3, #8
 800bf68:	d00c      	beq.n	800bf84 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf6a:	6962      	ldr	r2, [r4, #20]
 800bf6c:	4b26      	ldr	r3, [pc, #152]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf6e:	69db      	ldr	r3, [r3, #28]
 800bf70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d205      	bcs.n	800bf84 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf78:	4923      	ldr	r1, [pc, #140]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf7a:	69cb      	ldr	r3, [r1, #28]
 800bf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf80:	4313      	orrs	r3, r2
 800bf82:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	f013 0f10 	tst.w	r3, #16
 800bf8a:	d00c      	beq.n	800bfa6 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf8c:	69a2      	ldr	r2, [r4, #24]
 800bf8e:	4b1e      	ldr	r3, [pc, #120]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d205      	bcs.n	800bfa6 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf9a:	491b      	ldr	r1, [pc, #108]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bf9c:	69cb      	ldr	r3, [r1, #28]
 800bf9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	f013 0f20 	tst.w	r3, #32
 800bfac:	d00c      	beq.n	800bfc8 <HAL_RCC_ClockConfig+0x25c>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bfae:	69e2      	ldr	r2, [r4, #28]
 800bfb0:	4b15      	ldr	r3, [pc, #84]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d205      	bcs.n	800bfc8 <HAL_RCC_ClockConfig+0x25c>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bfbc:	4912      	ldr	r1, [pc, #72]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bfbe:	6a0b      	ldr	r3, [r1, #32]
 800bfc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfc8:	f7ff fdd8 	bl	800bb7c <HAL_RCC_GetSysClockFreq>
 800bfcc:	490e      	ldr	r1, [pc, #56]	; (800c008 <HAL_RCC_ClockConfig+0x29c>)
 800bfce:	698b      	ldr	r3, [r1, #24]
 800bfd0:	4a0e      	ldr	r2, [pc, #56]	; (800c00c <HAL_RCC_ClockConfig+0x2a0>)
 800bfd2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800bfd6:	5cd3      	ldrb	r3, [r2, r3]
 800bfd8:	f003 031f 	and.w	r3, r3, #31
 800bfdc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfde:	698b      	ldr	r3, [r1, #24]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	5cd3      	ldrb	r3, [r2, r3]
 800bfe6:	f003 031f 	and.w	r3, r3, #31
 800bfea:	fa20 f303 	lsr.w	r3, r0, r3
 800bfee:	4a08      	ldr	r2, [pc, #32]	; (800c010 <HAL_RCC_ClockConfig+0x2a4>)
 800bff0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800bff2:	4b08      	ldr	r3, [pc, #32]	; (800c014 <HAL_RCC_ClockConfig+0x2a8>)
 800bff4:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800bff6:	4b08      	ldr	r3, [pc, #32]	; (800c018 <HAL_RCC_ClockConfig+0x2ac>)
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	f7fe f853 	bl	800a0a4 <HAL_InitTick>
}
 800bffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c002:	bf00      	nop
 800c004:	52002000 	.word	0x52002000
 800c008:	58024400 	.word	0x58024400
 800c00c:	24008c0c 	.word	0x24008c0c
 800c010:	24008014 	.word	0x24008014
 800c014:	24008010 	.word	0x24008010
 800c018:	2400801c 	.word	0x2400801c

0800c01c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c01c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c01e:	f7ff fdad 	bl	800bb7c <HAL_RCC_GetSysClockFreq>
 800c022:	4a0b      	ldr	r2, [pc, #44]	; (800c050 <HAL_RCC_GetHCLKFreq+0x34>)
 800c024:	6993      	ldr	r3, [r2, #24]
 800c026:	490b      	ldr	r1, [pc, #44]	; (800c054 <HAL_RCC_GetHCLKFreq+0x38>)
 800c028:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c02c:	5ccb      	ldrb	r3, [r1, r3]
 800c02e:	f003 031f 	and.w	r3, r3, #31
 800c032:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c036:	6992      	ldr	r2, [r2, #24]
 800c038:	f002 020f 	and.w	r2, r2, #15
 800c03c:	5c88      	ldrb	r0, [r1, r2]
 800c03e:	f000 001f 	and.w	r0, r0, #31
 800c042:	fa23 f000 	lsr.w	r0, r3, r0
 800c046:	4a04      	ldr	r2, [pc, #16]	; (800c058 <HAL_RCC_GetHCLKFreq+0x3c>)
 800c048:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c04a:	4a04      	ldr	r2, [pc, #16]	; (800c05c <HAL_RCC_GetHCLKFreq+0x40>)
 800c04c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c04e:	bd08      	pop	{r3, pc}
 800c050:	58024400 	.word	0x58024400
 800c054:	24008c0c 	.word	0x24008c0c
 800c058:	24008014 	.word	0x24008014
 800c05c:	24008010 	.word	0x24008010

0800c060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c060:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c062:	f7ff ffdb 	bl	800c01c <HAL_RCC_GetHCLKFreq>
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c06e:	4a04      	ldr	r2, [pc, #16]	; (800c080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c070:	5cd3      	ldrb	r3, [r2, r3]
 800c072:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c076:	40d8      	lsrs	r0, r3
 800c078:	bd08      	pop	{r3, pc}
 800c07a:	bf00      	nop
 800c07c:	58024400 	.word	0x58024400
 800c080:	24008c0c 	.word	0x24008c0c

0800c084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c084:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c086:	f7ff ffc9 	bl	800c01c <HAL_RCC_GetHCLKFreq>
 800c08a:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c092:	4a04      	ldr	r2, [pc, #16]	; (800c0a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c094:	5cd3      	ldrb	r3, [r2, r3]
 800c096:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c09a:	40d8      	lsrs	r0, r3
 800c09c:	bd08      	pop	{r3, pc}
 800c09e:	bf00      	nop
 800c0a0:	58024400 	.word	0x58024400
 800c0a4:	24008c0c 	.word	0x24008c0c

0800c0a8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c0a8:	233f      	movs	r3, #63	; 0x3f
 800c0aa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c0ac:	4b11      	ldr	r3, [pc, #68]	; (800c0f4 <HAL_RCC_GetClockConfig+0x4c>)
 800c0ae:	691a      	ldr	r2, [r3, #16]
 800c0b0:	f002 0207 	and.w	r2, r2, #7
 800c0b4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c0b6:	699a      	ldr	r2, [r3, #24]
 800c0b8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800c0bc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c0be:	699a      	ldr	r2, [r3, #24]
 800c0c0:	f002 020f 	and.w	r2, r2, #15
 800c0c4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c0c6:	699a      	ldr	r2, [r3, #24]
 800c0c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c0cc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c0ce:	69da      	ldr	r2, [r3, #28]
 800c0d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c0d4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c0d6:	69da      	ldr	r2, [r3, #28]
 800c0d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800c0dc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0e4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c0e6:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <HAL_RCC_GetClockConfig+0x50>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 030f 	and.w	r3, r3, #15
 800c0ee:	600b      	str	r3, [r1, #0]
}
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	58024400 	.word	0x58024400
 800c0f8:	52002000 	.word	0x52002000

0800c0fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0fe:	4b3e      	ldr	r3, [pc, #248]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	2b03      	cmp	r3, #3
 800c108:	d074      	beq.n	800c1f4 <RCCEx_PLL2_Config+0xf8>
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c10e:	4a3a      	ldr	r2, [pc, #232]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c110:	6813      	ldr	r3, [r2, #0]
 800c112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c118:	f7fe f950 	bl	800a3bc <HAL_GetTick>
 800c11c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c11e:	4d36      	ldr	r5, [pc, #216]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c126:	d006      	beq.n	800c136 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c128:	f7fe f948 	bl	800a3bc <HAL_GetTick>
 800c12c:	1b03      	subs	r3, r0, r4
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d9f6      	bls.n	800c120 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 800c132:	2003      	movs	r0, #3
 800c134:	e05f      	b.n	800c1f6 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c136:	4b30      	ldr	r3, [pc, #192]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c13a:	6831      	ldr	r1, [r6, #0]
 800c13c:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800c140:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800c144:	629a      	str	r2, [r3, #40]	; 0x28
 800c146:	68b2      	ldr	r2, [r6, #8]
 800c148:	3a01      	subs	r2, #1
 800c14a:	0252      	lsls	r2, r2, #9
 800c14c:	b292      	uxth	r2, r2
 800c14e:	68f1      	ldr	r1, [r6, #12]
 800c150:	3901      	subs	r1, #1
 800c152:	0409      	lsls	r1, r1, #16
 800c154:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c158:	430a      	orrs	r2, r1
 800c15a:	6871      	ldr	r1, [r6, #4]
 800c15c:	3901      	subs	r1, #1
 800c15e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c162:	430a      	orrs	r2, r1
 800c164:	6931      	ldr	r1, [r6, #16]
 800c166:	3901      	subs	r1, #1
 800c168:	0609      	lsls	r1, r1, #24
 800c16a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c16e:	430a      	orrs	r2, r1
 800c170:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c174:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c178:	6971      	ldr	r1, [r6, #20]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c180:	f022 0220 	bic.w	r2, r2, #32
 800c184:	69b1      	ldr	r1, [r6, #24]
 800c186:	430a      	orrs	r2, r1
 800c188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	f022 0210 	bic.w	r2, r2, #16
 800c190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c192:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c194:	69f1      	ldr	r1, [r6, #28]
 800c196:	4a19      	ldr	r2, [pc, #100]	; (800c1fc <RCCEx_PLL2_Config+0x100>)
 800c198:	4002      	ands	r2, r0
 800c19a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c19e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a2:	f042 0210 	orr.w	r2, r2, #16
 800c1a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c1a8:	b9c7      	cbnz	r7, 800c1dc <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1b4:	4a10      	ldr	r2, [pc, #64]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c1b6:	6813      	ldr	r3, [r2, #0]
 800c1b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1be:	f7fe f8fd 	bl	800a3bc <HAL_GetTick>
 800c1c2:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1c4:	4d0c      	ldr	r5, [pc, #48]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c1c6:	682b      	ldr	r3, [r5, #0]
 800c1c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c1cc:	d110      	bne.n	800c1f0 <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1ce:	f7fe f8f5 	bl	800a3bc <HAL_GetTick>
 800c1d2:	1b00      	subs	r0, r0, r4
 800c1d4:	2802      	cmp	r0, #2
 800c1d6:	d9f6      	bls.n	800c1c6 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 800c1d8:	2003      	movs	r0, #3
 800c1da:	e00c      	b.n	800c1f6 <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1dc:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1de:	4a06      	ldr	r2, [pc, #24]	; (800c1f8 <RCCEx_PLL2_Config+0xfc>)
 800c1e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c1e2:	bf0c      	ite	eq
 800c1e4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1e8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800c1ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1ee:	e7e1      	b.n	800c1b4 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e000      	b.n	800c1f6 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 800c1f4:	2001      	movs	r0, #1
}
 800c1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f8:	58024400 	.word	0x58024400
 800c1fc:	ffff0007 	.word	0xffff0007

0800c200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c202:	4b3e      	ldr	r3, [pc, #248]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d074      	beq.n	800c2f8 <RCCEx_PLL3_Config+0xf8>
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c212:	4a3a      	ldr	r2, [pc, #232]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c214:	6813      	ldr	r3, [r2, #0]
 800c216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c21a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21c:	f7fe f8ce 	bl	800a3bc <HAL_GetTick>
 800c220:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c222:	4d36      	ldr	r5, [pc, #216]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c22a:	d006      	beq.n	800c23a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c22c:	f7fe f8c6 	bl	800a3bc <HAL_GetTick>
 800c230:	1b03      	subs	r3, r0, r4
 800c232:	2b02      	cmp	r3, #2
 800c234:	d9f6      	bls.n	800c224 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 800c236:	2003      	movs	r0, #3
 800c238:	e05f      	b.n	800c2fa <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c23a:	4b30      	ldr	r3, [pc, #192]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c23c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c23e:	6831      	ldr	r1, [r6, #0]
 800c240:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800c244:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c248:	629a      	str	r2, [r3, #40]	; 0x28
 800c24a:	68b2      	ldr	r2, [r6, #8]
 800c24c:	3a01      	subs	r2, #1
 800c24e:	0252      	lsls	r2, r2, #9
 800c250:	b292      	uxth	r2, r2
 800c252:	68f1      	ldr	r1, [r6, #12]
 800c254:	3901      	subs	r1, #1
 800c256:	0409      	lsls	r1, r1, #16
 800c258:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800c25c:	430a      	orrs	r2, r1
 800c25e:	6871      	ldr	r1, [r6, #4]
 800c260:	3901      	subs	r1, #1
 800c262:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c266:	430a      	orrs	r2, r1
 800c268:	6931      	ldr	r1, [r6, #16]
 800c26a:	3901      	subs	r1, #1
 800c26c:	0609      	lsls	r1, r1, #24
 800c26e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800c272:	430a      	orrs	r2, r1
 800c274:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c278:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c27c:	6971      	ldr	r1, [r6, #20]
 800c27e:	430a      	orrs	r2, r1
 800c280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c288:	69b1      	ldr	r1, [r6, #24]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c296:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c298:	69f1      	ldr	r1, [r6, #28]
 800c29a:	4a19      	ldr	r2, [pc, #100]	; (800c300 <RCCEx_PLL3_Config+0x100>)
 800c29c:	4002      	ands	r2, r0
 800c29e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800c2a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c2ac:	b9c7      	cbnz	r7, 800c2e0 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c2b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c2b8:	4a10      	ldr	r2, [pc, #64]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2c2:	f7fe f87b 	bl	800a3bc <HAL_GetTick>
 800c2c6:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2c8:	4d0c      	ldr	r5, [pc, #48]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c2d0:	d110      	bne.n	800c2f4 <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2d2:	f7fe f873 	bl	800a3bc <HAL_GetTick>
 800c2d6:	1b00      	subs	r0, r0, r4
 800c2d8:	2802      	cmp	r0, #2
 800c2da:	d9f6      	bls.n	800c2ca <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 800c2dc:	2003      	movs	r0, #3
 800c2de:	e00c      	b.n	800c2fa <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2e0:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c2e2:	4a06      	ldr	r2, [pc, #24]	; (800c2fc <RCCEx_PLL3_Config+0xfc>)
 800c2e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c2e6:	bf0c      	ite	eq
 800c2e8:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c2ec:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800c2f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2f2:	e7e1      	b.n	800c2b8 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e000      	b.n	800c2fa <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 800c2f8:	2001      	movs	r0, #1
}
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fc:	58024400 	.word	0x58024400
 800c300:	ffff0007 	.word	0xffff0007

0800c304 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c30a:	6803      	ldr	r3, [r0, #0]
 800c30c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c310:	d02b      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c312:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c318:	d021      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800c31a:	d80c      	bhi.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800c31c:	b1cb      	cbz	r3, 800c352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c322:	d106      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c324:	2102      	movs	r1, #2
 800c326:	3004      	adds	r0, #4
 800c328:	f7ff fee8 	bl	800c0fc <RCCEx_PLL2_Config>
 800c32c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800c32e:	b9ee      	cbnz	r6, 800c36c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800c330:	e004      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c332:	2601      	movs	r6, #1
 800c334:	e01a      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800c336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c33a:	d108      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c33c:	4a96      	ldr	r2, [pc, #600]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c33e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c340:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c344:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c346:	430b      	orrs	r3, r1
 800c348:	6513      	str	r3, [r2, #80]	; 0x50
 800c34a:	2600      	movs	r6, #0
 800c34c:	e00e      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800c34e:	2601      	movs	r6, #1
 800c350:	e00c      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c352:	4a91      	ldr	r2, [pc, #580]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c354:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c35a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c35c:	e7ee      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c35e:	2102      	movs	r1, #2
 800c360:	3024      	adds	r0, #36	; 0x24
 800c362:	f7ff ff4d 	bl	800c200 <RCCEx_PLL3_Config>
 800c366:	4606      	mov	r6, r0
      break;
 800c368:	e7e1      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c36a:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c372:	d025      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c374:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c376:	2b04      	cmp	r3, #4
 800c378:	d834      	bhi.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800c37a:	e8df f003 	tbb	[pc, r3]
 800c37e:	0a03      	.short	0x0a03
 800c380:	1710      	.short	0x1710
 800c382:	17          	.byte	0x17
 800c383:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c384:	4a84      	ldr	r2, [pc, #528]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c386:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c38c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c38e:	4635      	mov	r5, r6
 800c390:	e00d      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c392:	2100      	movs	r1, #0
 800c394:	1d20      	adds	r0, r4, #4
 800c396:	f7ff feb1 	bl	800c0fc <RCCEx_PLL2_Config>
 800c39a:	4605      	mov	r5, r0
      break;
 800c39c:	e007      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c39e:	2100      	movs	r1, #0
 800c3a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c3a4:	f7ff ff2c 	bl	800c200 <RCCEx_PLL3_Config>
 800c3a8:	4605      	mov	r5, r0
      break;
 800c3aa:	e000      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c3ac:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800c3ae:	b9e5      	cbnz	r5, 800c3ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3b0:	4a79      	ldr	r2, [pc, #484]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c3b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c3b4:	f023 0307 	bic.w	r3, r3, #7
 800c3b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c3ba:	430b      	orrs	r3, r1
 800c3bc:	6513      	str	r3, [r2, #80]	; 0x50
 800c3be:	e000      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800c3c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	f413 7f00 	tst.w	r3, #512	; 0x200
 800c3c8:	d021      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 800c3ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3cc:	2b80      	cmp	r3, #128	; 0x80
 800c3ce:	d03b      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800c3d0:	d810      	bhi.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800c3d2:	b39b      	cbz	r3, 800c43c <HAL_RCCEx_PeriphCLKConfig+0x138>
 800c3d4:	2b40      	cmp	r3, #64	; 0x40
 800c3d6:	d10a      	bne.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3d8:	2100      	movs	r1, #0
 800c3da:	1d20      	adds	r0, r4, #4
 800c3dc:	f7ff fe8e 	bl	800c0fc <RCCEx_PLL2_Config>
 800c3e0:	4605      	mov	r5, r0
      break;
 800c3e2:	e00c      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c3e4:	2601      	movs	r6, #1
 800c3e6:	4635      	mov	r5, r6
 800c3e8:	e7eb      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800c3ea:	462e      	mov	r6, r5
 800c3ec:	e7e9      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 800c3ee:	2601      	movs	r6, #1
 800c3f0:	4635      	mov	r5, r6
 800c3f2:	e00c      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800c3f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c3f6:	d002      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800c3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fc:	d11b      	bne.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 800c3fe:	bb55      	cbnz	r5, 800c456 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c400:	4a65      	ldr	r2, [pc, #404]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c402:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c404:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800c408:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c40a:	430b      	orrs	r3, r1
 800c40c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800c414:	d045      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 800c416:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c41e:	d038      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800c420:	d81e      	bhi.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800c422:	b383      	cbz	r3, 800c486 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c428:	d117      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c42a:	2100      	movs	r1, #0
 800c42c:	1d20      	adds	r0, r4, #4
 800c42e:	f7ff fe65 	bl	800c0fc <RCCEx_PLL2_Config>
 800c432:	4605      	mov	r5, r0
      break;
 800c434:	e01a      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch(PeriphClkInit->Sai23ClockSelection)
 800c436:	2601      	movs	r6, #1
 800c438:	4635      	mov	r5, r6
 800c43a:	e7e8      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c43c:	4a56      	ldr	r2, [pc, #344]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c43e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c444:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c446:	e7da      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c448:	2100      	movs	r1, #0
 800c44a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c44e:	f7ff fed7 	bl	800c200 <RCCEx_PLL3_Config>
 800c452:	4605      	mov	r5, r0
      break;
 800c454:	e7d3      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800c456:	462e      	mov	r6, r5
 800c458:	e7d9      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 800c45a:	2601      	movs	r6, #1
 800c45c:	4635      	mov	r5, r6
 800c45e:	e020      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800c460:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c464:	d002      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c46a:	d109      	bne.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 800c46c:	b9c5      	cbnz	r5, 800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c46e:	4a4a      	ldr	r2, [pc, #296]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c470:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c472:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800c476:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c47a:	430b      	orrs	r3, r1
 800c47c:	6593      	str	r3, [r2, #88]	; 0x58
 800c47e:	e010      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 800c480:	2601      	movs	r6, #1
 800c482:	4635      	mov	r5, r6
 800c484:	e00d      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c486:	4a44      	ldr	r2, [pc, #272]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c488:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c48a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c48e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c490:	e7ec      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x168>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c492:	2100      	movs	r1, #0
 800c494:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c498:	f7ff feb2 	bl	800c200 <RCCEx_PLL3_Config>
 800c49c:	4605      	mov	r5, r0
      break;
 800c49e:	e7e5      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c4a0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c4a2:	6823      	ldr	r3, [r4, #0]
 800c4a4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800c4a8:	d023      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Sai4BClockSelection)
 800c4aa:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800c4ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4b2:	d041      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c4b4:	d80d      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d038      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c4ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4be:	d105      	bne.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	1d20      	adds	r0, r4, #4
 800c4c4:	f7ff fe1a 	bl	800c0fc <RCCEx_PLL2_Config>
 800c4c8:	4605      	mov	r5, r0
      break;
 800c4ca:	e008      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai4BClockSelection)
 800c4cc:	2601      	movs	r6, #1
 800c4ce:	4635      	mov	r5, r6
 800c4d0:	e00f      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c4d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c4d6:	d002      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x1da>
 800c4d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4dc:	d123      	bne.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x222>
    if(ret == HAL_OK)
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	d131      	bne.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c4e2:	4a2d      	ldr	r2, [pc, #180]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c4e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c4e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800c4ea:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800c4ee:	430b      	orrs	r3, r1
 800c4f0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c4f8:	d02e      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->QspiClockSelection)
 800c4fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c4fc:	2b20      	cmp	r3, #32
 800c4fe:	d03f      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c500:	d826      	bhi.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800c502:	b133      	cbz	r3, 800c512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800c504:	2b10      	cmp	r3, #16
 800c506:	d120      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c508:	4a23      	ldr	r2, [pc, #140]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c50a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c510:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c512:	2d00      	cmp	r5, #0
 800c514:	d13a      	bne.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c516:	4a20      	ldr	r2, [pc, #128]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c518:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c51a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c51e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c520:	430b      	orrs	r3, r1
 800c522:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c524:	e018      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4BClockSelection)
 800c526:	2601      	movs	r6, #1
 800c528:	4635      	mov	r5, r6
 800c52a:	e7e2      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c52c:	4a1a      	ldr	r2, [pc, #104]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c52e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c534:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c536:	e7d2      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c538:	2100      	movs	r1, #0
 800c53a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c53e:	f7ff fe5f 	bl	800c200 <RCCEx_PLL3_Config>
 800c542:	4605      	mov	r5, r0
      break;
 800c544:	e7cb      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x1da>
 800c546:	462e      	mov	r6, r5
 800c548:	e7d3      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->QspiClockSelection)
 800c54a:	2601      	movs	r6, #1
 800c54c:	4635      	mov	r5, r6
 800c54e:	e003      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c550:	2b30      	cmp	r3, #48	; 0x30
 800c552:	d0de      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800c554:	2601      	movs	r6, #1
 800c556:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800c55e:	d02c      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c560:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c566:	d04d      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800c568:	d818      	bhi.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d044      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800c56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c572:	d10d      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c574:	2100      	movs	r1, #0
 800c576:	1d20      	adds	r0, r4, #4
 800c578:	f7ff fdc0 	bl	800c0fc <RCCEx_PLL2_Config>
 800c57c:	4605      	mov	r5, r0
      break;
 800c57e:	e013      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c580:	2102      	movs	r1, #2
 800c582:	1d20      	adds	r0, r4, #4
 800c584:	f7ff fdba 	bl	800c0fc <RCCEx_PLL2_Config>
 800c588:	4605      	mov	r5, r0
      break;
 800c58a:	e7c2      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800c58c:	462e      	mov	r6, r5
 800c58e:	e7e3      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c590:	2601      	movs	r6, #1
 800c592:	4635      	mov	r5, r6
 800c594:	e011      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800c596:	bf00      	nop
 800c598:	58024400 	.word	0x58024400
 800c59c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5a0:	d002      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800c5a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5a6:	d124      	bne.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 800c5a8:	2d00      	cmp	r5, #0
 800c5aa:	d132      	bne.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5ac:	4a80      	ldr	r2, [pc, #512]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c5b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c5b6:	430b      	orrs	r3, r1
 800c5b8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c5c0:	d036      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c5c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5c8:	d050      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x368>
 800c5ca:	d827      	bhi.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800c5cc:	b13b      	cbz	r3, 800c5de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5d2:	d120      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	1d20      	adds	r0, r4, #4
 800c5d8:	f7ff fd90 	bl	800c0fc <RCCEx_PLL2_Config>
 800c5dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	d14b      	bne.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c5e2:	4a73      	ldr	r2, [pc, #460]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c5e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c5ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	6513      	str	r3, [r2, #80]	; 0x50
 800c5f0:	e01e      	b.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800c5f2:	2601      	movs	r6, #1
 800c5f4:	4635      	mov	r5, r6
 800c5f6:	e7e0      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5f8:	4a6d      	ldr	r2, [pc, #436]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c5fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c600:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800c602:	e7d1      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c604:	2100      	movs	r1, #0
 800c606:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c60a:	f7ff fdf9 	bl	800c200 <RCCEx_PLL3_Config>
 800c60e:	4605      	mov	r5, r0
      break;
 800c610:	e7ca      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800c612:	462e      	mov	r6, r5
 800c614:	e7d1      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800c616:	2601      	movs	r6, #1
 800c618:	4635      	mov	r5, r6
 800c61a:	e009      	b.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800c61c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c620:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800c624:	d0db      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c62a:	d0d8      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c62c:	2601      	movs	r6, #1
 800c62e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c636:	d02f      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c638:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c640:	d043      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800c642:	d81f      	bhi.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800c644:	b13b      	cbz	r3, 800c656 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800c646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c64a:	d118      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c64c:	2101      	movs	r1, #1
 800c64e:	1d20      	adds	r0, r4, #4
 800c650:	f7ff fd54 	bl	800c0fc <RCCEx_PLL2_Config>
 800c654:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c656:	2d00      	cmp	r5, #0
 800c658:	d13e      	bne.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c65a:	4a55      	ldr	r2, [pc, #340]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c65c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c65e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c662:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c666:	430b      	orrs	r3, r1
 800c668:	6593      	str	r3, [r2, #88]	; 0x58
 800c66a:	e015      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c66c:	2101      	movs	r1, #1
 800c66e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c672:	f7ff fdc5 	bl	800c200 <RCCEx_PLL3_Config>
 800c676:	4605      	mov	r5, r0
      break;
 800c678:	e7b1      	b.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c67a:	462e      	mov	r6, r5
 800c67c:	e7d8      	b.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 800c67e:	2601      	movs	r6, #1
 800c680:	4635      	mov	r5, r6
 800c682:	e009      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800c684:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c688:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c68c:	d0e3      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800c68e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c692:	d0e0      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800c694:	2601      	movs	r6, #1
 800c696:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c69e:	d009      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 800c6a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c6a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6a6:	d019      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800c6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ac:	d024      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c6ae:	b1d3      	cbz	r3, 800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800c6b0:	2601      	movs	r6, #1
 800c6b2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c6ba:	d032      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->FmcClockSelection)
 800c6bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d859      	bhi.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x472>
 800c6c2:	e8df f003 	tbb	[pc, r3]
 800c6c6:	2126      	.short	0x2126
 800c6c8:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c6d0:	f7ff fd96 	bl	800c200 <RCCEx_PLL3_Config>
 800c6d4:	4605      	mov	r5, r0
      break;
 800c6d6:	e7be      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800c6d8:	462e      	mov	r6, r5
 800c6da:	e7dd      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6dc:	4a34      	ldr	r2, [pc, #208]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c6e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c6e6:	b96d      	cbnz	r5, 800c704 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c6e8:	4a31      	ldr	r2, [pc, #196]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c6ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c6f0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c6f2:	430b      	orrs	r3, r1
 800c6f4:	6513      	str	r3, [r2, #80]	; 0x50
 800c6f6:	e7dd      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	1d20      	adds	r0, r4, #4
 800c6fc:	f7ff fcfe 	bl	800c0fc <RCCEx_PLL2_Config>
 800c700:	4605      	mov	r5, r0
      break;
 800c702:	e7f0      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800c704:	462e      	mov	r6, r5
 800c706:	e7d5      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c708:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c70a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c710:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800c712:	bb9d      	cbnz	r5, 800c77c <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c714:	4a26      	ldr	r2, [pc, #152]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c716:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c718:	f023 0303 	bic.w	r3, r3, #3
 800c71c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c71e:	430b      	orrs	r3, r1
 800c720:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c728:	d12a      	bne.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	f013 0f01 	tst.w	r3, #1
 800c730:	f000 80aa 	beq.w	800c888 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c734:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c736:	2b28      	cmp	r3, #40	; 0x28
 800c738:	f200 80a4 	bhi.w	800c884 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800c73c:	e8df f003 	tbb	[pc, r3]
 800c740:	a2a2a292 	.word	0xa2a2a292
 800c744:	a2a2a2a2 	.word	0xa2a2a2a2
 800c748:	a2a2a28d 	.word	0xa2a2a28d
 800c74c:	a2a2a2a2 	.word	0xa2a2a2a2
 800c750:	a2a2a29b 	.word	0xa2a2a29b
 800c754:	a2a2a2a2 	.word	0xa2a2a2a2
 800c758:	a2a2a292 	.word	0xa2a2a292
 800c75c:	a2a2a2a2 	.word	0xa2a2a2a2
 800c760:	a2a2a292 	.word	0xa2a2a292
 800c764:	a2a2a2a2 	.word	0xa2a2a2a2
 800c768:	92          	.byte	0x92
 800c769:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c76a:	2102      	movs	r1, #2
 800c76c:	1d20      	adds	r0, r4, #4
 800c76e:	f7ff fcc5 	bl	800c0fc <RCCEx_PLL2_Config>
 800c772:	4605      	mov	r5, r0
      break;
 800c774:	e7cd      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 800c776:	2601      	movs	r6, #1
 800c778:	4635      	mov	r5, r6
 800c77a:	e7d2      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800c77c:	462e      	mov	r6, r5
 800c77e:	e7d0      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c780:	4a0c      	ldr	r2, [pc, #48]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800c782:	6813      	ldr	r3, [r2, #0]
 800c784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c788:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c78a:	f7fd fe17 	bl	800a3bc <HAL_GetTick>
 800c78e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c790:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800c794:	f8d8 3000 	ldr.w	r3, [r8]
 800c798:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c79c:	d10c      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c79e:	f7fd fe0d 	bl	800a3bc <HAL_GetTick>
 800c7a2:	1bc0      	subs	r0, r0, r7
 800c7a4:	2864      	cmp	r0, #100	; 0x64
 800c7a6:	d9f5      	bls.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 800c7a8:	2603      	movs	r6, #3
 800c7aa:	4635      	mov	r5, r6
 800c7ac:	e7bd      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c7ae:	bf00      	nop
 800c7b0:	58024400 	.word	0x58024400
 800c7b4:	58024800 	.word	0x58024800
    if(ret == HAL_OK)
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	d14c      	bne.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c7bc:	4b9f      	ldr	r3, [pc, #636]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800c7c4:	4053      	eors	r3, r2
 800c7c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c7ca:	d00c      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c7cc:	4b9b      	ldr	r3, [pc, #620]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c7ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c7d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c7d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c7d6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800c7da:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c7dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c7de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c7e2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c7e4:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c7e6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ee:	d014      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c7f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c7f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c7fc:	d021      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800c7fe:	4a8f      	ldr	r2, [pc, #572]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c800:	6913      	ldr	r3, [r2, #16]
 800c802:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c806:	6113      	str	r3, [r2, #16]
 800c808:	4a8c      	ldr	r2, [pc, #560]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c80a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c80c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c814:	430b      	orrs	r3, r1
 800c816:	6713      	str	r3, [r2, #112]	; 0x70
 800c818:	e787      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x426>
        tickstart = HAL_GetTick();
 800c81a:	f7fd fdcf 	bl	800a3bc <HAL_GetTick>
 800c81e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c820:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c824:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c828:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c82c:	f013 0f02 	tst.w	r3, #2
 800c830:	d1de      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c832:	f7fd fdc3 	bl	800a3bc <HAL_GetTick>
 800c836:	1bc0      	subs	r0, r0, r7
 800c838:	4548      	cmp	r0, r9
 800c83a:	d9f5      	bls.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x524>
            ret = HAL_TIMEOUT;
 800c83c:	2603      	movs	r6, #3
 800c83e:	4635      	mov	r5, r6
 800c840:	e773      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x426>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c842:	487e      	ldr	r0, [pc, #504]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c844:	6901      	ldr	r1, [r0, #16]
 800c846:	4a7e      	ldr	r2, [pc, #504]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800c848:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 800c84c:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 800c850:	4313      	orrs	r3, r2
 800c852:	6103      	str	r3, [r0, #16]
 800c854:	e7d8      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c856:	462e      	mov	r6, r5
 800c858:	e767      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c85a:	2101      	movs	r1, #1
 800c85c:	1d20      	adds	r0, r4, #4
 800c85e:	f7ff fc4d 	bl	800c0fc <RCCEx_PLL2_Config>
 800c862:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c864:	b9e5      	cbnz	r5, 800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c866:	4a75      	ldr	r2, [pc, #468]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c868:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c86a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c86e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c870:	430b      	orrs	r3, r1
 800c872:	6553      	str	r3, [r2, #84]	; 0x54
 800c874:	e008      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c876:	2101      	movs	r1, #1
 800c878:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c87c:	f7ff fcc0 	bl	800c200 <RCCEx_PLL3_Config>
 800c880:	4605      	mov	r5, r0
      break;
 800c882:	e7ef      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 800c884:	2601      	movs	r6, #1
 800c886:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	f013 0f02 	tst.w	r3, #2
 800c88e:	d016      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c890:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c892:	2b05      	cmp	r3, #5
 800c894:	d827      	bhi.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 800c896:	e8df f003 	tbb	[pc, r3]
 800c89a:	050a      	.short	0x050a
 800c89c:	0a0a0a1f 	.word	0x0a0a0a1f
 800c8a0:	462e      	mov	r6, r5
 800c8a2:	e7f1      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	1d20      	adds	r0, r4, #4
 800c8a8:	f7ff fc28 	bl	800c0fc <RCCEx_PLL2_Config>
 800c8ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c8ae:	b9ed      	cbnz	r5, 800c8ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c8b0:	4a62      	ldr	r2, [pc, #392]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c8b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c8b4:	f023 0307 	bic.w	r3, r3, #7
 800c8b8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c8ba:	430b      	orrs	r3, r1
 800c8bc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	f013 0f04 	tst.w	r3, #4
 800c8c4:	d022      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c8c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c8ca:	2b05      	cmp	r3, #5
 800c8cc:	d843      	bhi.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800c8ce:	e8df f003 	tbb	[pc, r3]
 800c8d2:	0f14      	.short	0x0f14
 800c8d4:	1414143b 	.word	0x1414143b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c8d8:	2101      	movs	r1, #1
 800c8da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c8de:	f7ff fc8f 	bl	800c200 <RCCEx_PLL3_Config>
 800c8e2:	4605      	mov	r5, r0
      break;
 800c8e4:	e7e3      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c8e6:	2601      	movs	r6, #1
 800c8e8:	4635      	mov	r5, r6
 800c8ea:	e7e8      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800c8ec:	462e      	mov	r6, r5
 800c8ee:	e7e6      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	1d20      	adds	r0, r4, #4
 800c8f4:	f7ff fc02 	bl	800c0fc <RCCEx_PLL2_Config>
 800c8f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c8fa:	bb7d      	cbnz	r5, 800c95c <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c8fc:	4a4f      	ldr	r2, [pc, #316]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c8fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c900:	f023 0307 	bic.w	r3, r3, #7
 800c904:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c908:	430b      	orrs	r3, r1
 800c90a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	f013 0f20 	tst.w	r3, #32
 800c912:	d032      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c914:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c91c:	d04b      	beq.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800c91e:	d822      	bhi.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c920:	b13b      	cbz	r3, 800c932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800c922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c926:	d11b      	bne.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c928:	2100      	movs	r1, #0
 800c92a:	1d20      	adds	r0, r4, #4
 800c92c:	f7ff fbe6 	bl	800c0fc <RCCEx_PLL2_Config>
 800c930:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c932:	2d00      	cmp	r5, #0
 800c934:	d146      	bne.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c936:	4a41      	ldr	r2, [pc, #260]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c938:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c93a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c93e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c942:	430b      	orrs	r3, r1
 800c944:	6553      	str	r3, [r2, #84]	; 0x54
 800c946:	e018      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x676>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c948:	2101      	movs	r1, #1
 800c94a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c94e:	f7ff fc57 	bl	800c200 <RCCEx_PLL3_Config>
 800c952:	4605      	mov	r5, r0
      break;
 800c954:	e7d1      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c956:	2601      	movs	r6, #1
 800c958:	4635      	mov	r5, r6
 800c95a:	e7d7      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c95c:	462e      	mov	r6, r5
 800c95e:	e7d5      	b.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c960:	2601      	movs	r6, #1
 800c962:	4635      	mov	r5, r6
 800c964:	e009      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800c966:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c96a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c96e:	d0e0      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800c970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c974:	d0dd      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800c976:	2601      	movs	r6, #1
 800c978:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c980:	d02f      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c982:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c98a:	d04a      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800c98c:	d81f      	bhi.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 800c98e:	b13b      	cbz	r3, 800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800c990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c994:	d118      	bne.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c996:	2100      	movs	r1, #0
 800c998:	1d20      	adds	r0, r4, #4
 800c99a:	f7ff fbaf 	bl	800c0fc <RCCEx_PLL2_Config>
 800c99e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	d145      	bne.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c9a4:	4a25      	ldr	r2, [pc, #148]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800c9a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c9a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c9ac:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	6593      	str	r3, [r2, #88]	; 0x58
 800c9b4:	e015      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c9b6:	2102      	movs	r1, #2
 800c9b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c9bc:	f7ff fc20 	bl	800c200 <RCCEx_PLL3_Config>
 800c9c0:	4605      	mov	r5, r0
      break;
 800c9c2:	e7b6      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800c9c4:	462e      	mov	r6, r5
 800c9c6:	e7d8      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c9c8:	2601      	movs	r6, #1
 800c9ca:	4635      	mov	r5, r6
 800c9cc:	e009      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800c9ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c9d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c9d6:	d0e3      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800c9d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9dc:	d0e0      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800c9de:	2601      	movs	r6, #1
 800c9e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9e8:	d036      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c9ea:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800c9ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9f2:	f000 80e6 	beq.w	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800c9f6:	d825      	bhi.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800c9f8:	b13b      	cbz	r3, 800ca0a <HAL_RCCEx_PeriphCLKConfig+0x706>
 800c9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9fe:	d119      	bne.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x730>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ca00:	2100      	movs	r1, #0
 800ca02:	1d20      	adds	r0, r4, #4
 800ca04:	f7ff fb7a 	bl	800c0fc <RCCEx_PLL2_Config>
 800ca08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	f040 80e0 	bne.w	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ca10:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800ca12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ca18:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6593      	str	r3, [r2, #88]	; 0x58
 800ca20:	e01a      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca22:	2102      	movs	r1, #2
 800ca24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca28:	f7ff fbea 	bl	800c200 <RCCEx_PLL3_Config>
 800ca2c:	4605      	mov	r5, r0
      break;
 800ca2e:	e7b7      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800ca30:	462e      	mov	r6, r5
 800ca32:	e7d6      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ca34:	2601      	movs	r6, #1
 800ca36:	4635      	mov	r5, r6
 800ca38:	e00e      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800ca3a:	bf00      	nop
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	00ffffcf 	.word	0x00ffffcf
 800ca44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ca4c:	d0dd      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x706>
 800ca4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ca52:	d0da      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x706>
 800ca54:	2601      	movs	r6, #1
 800ca56:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	f013 0f08 	tst.w	r3, #8
 800ca5e:	d00d      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ca60:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ca64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca68:	f000 80b4 	beq.w	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ca6c:	4a97      	ldr	r2, [pc, #604]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800ca6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ca70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ca74:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	f013 0f10 	tst.w	r3, #16
 800ca82:	d00d      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ca84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ca88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8c:	f000 80ab 	beq.w	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca90:	4a8e      	ldr	r2, [pc, #568]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800ca92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca98:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ca9c:	430b      	orrs	r3, r1
 800ca9e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800caa6:	d00e      	beq.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 800caa8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800caac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cab0:	f000 80b1 	beq.w	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800cab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cab8:	f000 80a3 	beq.w	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 809b 	beq.w	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800cac2:	2601      	movs	r6, #1
 800cac4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800cacc:	d00f      	beq.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch(PeriphClkInit->UsbClockSelection)
 800cace:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cad6:	f000 80b6 	beq.w	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800cada:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cade:	f000 80a8 	beq.w	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800cae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cae6:	f000 809f 	beq.w	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800caea:	2601      	movs	r6, #1
 800caec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800caf4:	d009      	beq.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch(PeriphClkInit->SdmmcClockSelection)
 800caf6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 80ad 	beq.w	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800cafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb02:	f000 80b7 	beq.w	800cc74 <HAL_RCCEx_PeriphCLKConfig+0x970>
 800cb06:	2601      	movs	r6, #1
 800cb08:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800cb10:	f040 80b8 	bne.w	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x980>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800cb1a:	d00d      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch(PeriphClkInit->RngClockSelection)
 800cb1c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800cb1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb22:	f000 80bb 	beq.w	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800cb26:	f240 80b6 	bls.w	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x992>
 800cb2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb32:	f000 80b8 	beq.w	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800cb36:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800cb3e:	d006      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb40:	4a62      	ldr	r2, [pc, #392]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cb42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb48:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cb4a:	430b      	orrs	r3, r1
 800cb4c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800cb54:	d007      	beq.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x862>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cb56:	4a5d      	ldr	r2, [pc, #372]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cb58:	6913      	ldr	r3, [r2, #16]
 800cb5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb5e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800cb62:	430b      	orrs	r3, r1
 800cb64:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800cb6c:	d006      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb6e:	4a57      	ldr	r2, [pc, #348]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cb70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb76:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cb82:	d009      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x894>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb84:	4b51      	ldr	r3, [pc, #324]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cb86:	691a      	ldr	r2, [r3, #16]
 800cb88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb8c:	611a      	str	r2, [r3, #16]
 800cb8e:	691a      	ldr	r2, [r3, #16]
 800cb90:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800cb94:	430a      	orrs	r2, r1
 800cb96:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f2c0 808e 	blt.w	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800cba6:	d007      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cba8:	4a48      	ldr	r2, [pc, #288]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cbaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800cbb0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800cbb4:	430b      	orrs	r3, r1
 800cbb6:	6553      	str	r3, [r2, #84]	; 0x54
}
 800cbb8:	1e30      	subs	r0, r6, #0
 800cbba:	bf18      	it	ne
 800cbbc:	2001      	movne	r0, #1
 800cbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cbc2:	2102      	movs	r1, #2
 800cbc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbc8:	f7ff fb1a 	bl	800c200 <RCCEx_PLL3_Config>
 800cbcc:	4605      	mov	r5, r0
      break;
 800cbce:	e71c      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x706>
 800cbd0:	462e      	mov	r6, r5
 800cbd2:	e741      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cbd4:	2102      	movs	r1, #2
 800cbd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbda:	f7ff fb11 	bl	800c200 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	bf18      	it	ne
 800cbe2:	2601      	movne	r6, #1
 800cbe4:	e742      	b.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x768>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cbe6:	2102      	movs	r1, #2
 800cbe8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbec:	f7ff fb08 	bl	800c200 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	bf18      	it	ne
 800cbf4:	2601      	movne	r6, #1
 800cbf6:	e74b      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	1d20      	adds	r0, r4, #4
 800cbfc:	f7ff fa7e 	bl	800c0fc <RCCEx_PLL2_Config>
 800cc00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800cc02:	b97d      	cbnz	r5, 800cc24 <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cc04:	4a31      	ldr	r2, [pc, #196]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc08:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cc0c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800cc10:	430b      	orrs	r3, r1
 800cc12:	6593      	str	r3, [r2, #88]	; 0x58
 800cc14:	e757      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc16:	2102      	movs	r1, #2
 800cc18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc1c:	f7ff faf0 	bl	800c200 <RCCEx_PLL3_Config>
 800cc20:	4605      	mov	r5, r0
      break;
 800cc22:	e7ee      	b.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800cc24:	462e      	mov	r6, r5
 800cc26:	e74e      	b.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc28:	4a28      	ldr	r2, [pc, #160]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc30:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800cc32:	b97d      	cbnz	r5, 800cc54 <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc34:	4a25      	ldr	r2, [pc, #148]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc36:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cc38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc3c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800cc40:	430b      	orrs	r3, r1
 800cc42:	6553      	str	r3, [r2, #84]	; 0x54
 800cc44:	e753      	b.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cc46:	2101      	movs	r1, #1
 800cc48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc4c:	f7ff fad8 	bl	800c200 <RCCEx_PLL3_Config>
 800cc50:	4605      	mov	r5, r0
      break;
 800cc52:	e7ee      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800cc54:	462e      	mov	r6, r5
 800cc56:	e74a      	b.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc58:	4a1c      	ldr	r2, [pc, #112]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc60:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800cc62:	b96d      	cbnz	r5, 800cc80 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cc64:	4a19      	ldr	r2, [pc, #100]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800cc68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cc6e:	430b      	orrs	r3, r1
 800cc70:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc72:	e74a      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cc74:	2102      	movs	r1, #2
 800cc76:	1d20      	adds	r0, r4, #4
 800cc78:	f7ff fa40 	bl	800c0fc <RCCEx_PLL2_Config>
 800cc7c:	4605      	mov	r5, r0
      break;
 800cc7e:	e7f0      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 800cc80:	462e      	mov	r6, r5
 800cc82:	e742      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x806>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cc84:	2102      	movs	r1, #2
 800cc86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc8a:	f7ff fab9 	bl	800c200 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	bf18      	it	ne
 800cc92:	2601      	movne	r6, #1
 800cc94:	e73e      	b.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch(PeriphClkInit->RngClockSelection)
 800cc96:	b133      	cbz	r3, 800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800cc98:	2601      	movs	r6, #1
 800cc9a:	e74d      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc9c:	4a0b      	ldr	r2, [pc, #44]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800cc9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800cca6:	b93d      	cbnz	r5, 800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cca8:	4a08      	ldr	r2, [pc, #32]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800ccaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ccac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccb0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800ccb2:	430b      	orrs	r3, r1
 800ccb4:	6553      	str	r3, [r2, #84]	; 0x54
 800ccb6:	e73f      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800ccb8:	462e      	mov	r6, r5
 800ccba:	e73d      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x834>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ccbc:	4a03      	ldr	r2, [pc, #12]	; (800cccc <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800ccbe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ccc0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ccc4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ccc6:	430b      	orrs	r3, r1
 800ccc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ccca:	e769      	b.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800cccc:	58024400 	.word	0x58024400

0800ccd0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ccd0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ccd2:	f7ff f9a3 	bl	800c01c <HAL_RCC_GetHCLKFreq>
 800ccd6:	4b05      	ldr	r3, [pc, #20]	; (800ccec <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ccde:	4a04      	ldr	r2, [pc, #16]	; (800ccf0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800cce0:	5cd3      	ldrb	r3, [r2, r3]
 800cce2:	f003 031f 	and.w	r3, r3, #31
}
 800cce6:	40d8      	lsrs	r0, r3
 800cce8:	bd08      	pop	{r3, pc}
 800ccea:	bf00      	nop
 800ccec:	58024400 	.word	0x58024400
 800ccf0:	24008c0c 	.word	0x24008c0c

0800ccf4 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800ccf4:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccf6:	4a77      	ldr	r2, [pc, #476]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800ccf8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ccfa:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800ccfc:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd00:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cd02:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800cd04:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 800cd08:	f000 80de 	beq.w	800cec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cd0c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd10:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cd14:	fb06 f303 	mul.w	r3, r6, r3
 800cd18:	ee07 3a90 	vmov	s15, r3
 800cd1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd20:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800cd24:	2c01      	cmp	r4, #1
 800cd26:	d064      	beq.n	800cdf2 <HAL_RCCEx_GetPLL2ClockFreq+0xfe>
 800cd28:	2c02      	cmp	r4, #2
 800cd2a:	f000 80b0 	beq.w	800ce8e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800cd2e:	b1e4      	cbz	r4, 800cd6a <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd30:	4b68      	ldr	r3, [pc, #416]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd38:	ee07 3a90 	vmov	s15, r3
 800cd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd40:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800cd44:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd54:	ee07 1a10 	vmov	s14, r1
 800cd58:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800cd5c:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800cd60:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800cd64:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 800cd68:	e05f      	b.n	800ce2a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd6a:	6813      	ldr	r3, [r2, #0]
 800cd6c:	f013 0f20 	tst.w	r3, #32
 800cd70:	d022      	beq.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd72:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd74:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd76:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800cd7a:	4a59      	ldr	r2, [pc, #356]	; (800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 800cd7c:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd7e:	ee07 2a90 	vmov	s15, r2
 800cd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd86:	ee07 1a10 	vmov	s14, r1
 800cd8a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800cd8e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800cd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9e:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800cda2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cda6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800cdaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cdae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb6:	e038      	b.n	800ce2a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdb8:	4b46      	ldr	r3, [pc, #280]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800cdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc0:	ee07 3a90 	vmov	s15, r3
 800cdc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cdc8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800cdcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cddc:	ee07 1a10 	vmov	s14, r1
 800cde0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cde4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800cee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 800cde8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cdec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cdf0:	e01b      	b.n	800ce2a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdf2:	4b38      	ldr	r3, [pc, #224]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800ce06:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ce0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce16:	ee07 1a10 	vmov	s14, r1
 800ce1a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800ce1e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800ce22:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ce26:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ce2a:	4a2a      	ldr	r2, [pc, #168]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800ce2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ce2e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ce32:	ee06 3a90 	vmov	s13, r3
 800ce36:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ce3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ce3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ce42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ce46:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ce4a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ce4e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ce50:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ce54:	ee06 3a90 	vmov	s13, r3
 800ce58:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ce5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ce60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ce64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ce68:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ce6c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ce6e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ce72:	ee07 3a10 	vmov	s14, r3
 800ce76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ce7a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ce7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ce82:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ce86:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800ce8a:	bc70      	pop	{r4, r5, r6}
 800ce8c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce8e:	4b11      	ldr	r3, [pc, #68]	; (800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800cea2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ceb2:	ee07 1a10 	vmov	s14, r1
 800ceb6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800ceba:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800cebe:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cec2:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 800cec6:	e7b0      	b.n	800ce2a <HAL_RCCEx_GetPLL2ClockFreq+0x136>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cecc:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cece:	6083      	str	r3, [r0, #8]
}
 800ced0:	e7db      	b.n	800ce8a <HAL_RCCEx_GetPLL2ClockFreq+0x196>
 800ced2:	bf00      	nop
 800ced4:	58024400 	.word	0x58024400
 800ced8:	39000000 	.word	0x39000000
 800cedc:	4a742400 	.word	0x4a742400
 800cee0:	03d09000 	.word	0x03d09000
 800cee4:	4c742400 	.word	0x4c742400
 800cee8:	4af42400 	.word	0x4af42400

0800ceec <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800ceec:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceee:	4a77      	ldr	r2, [pc, #476]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800cef0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cef2:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800cef4:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cef8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cefa:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800cefc:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 800cf00:	f000 80de 	beq.w	800d0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cf04:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf08:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cf0c:	fb06 f303 	mul.w	r3, r6, r3
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf18:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 800cf1c:	2c01      	cmp	r4, #1
 800cf1e:	d064      	beq.n	800cfea <HAL_RCCEx_GetPLL3ClockFreq+0xfe>
 800cf20:	2c02      	cmp	r4, #2
 800cf22:	f000 80b0 	beq.w	800d086 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800cf26:	b1e4      	cbz	r4, 800cf62 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf28:	4b68      	ldr	r3, [pc, #416]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf30:	ee07 3a90 	vmov	s15, r3
 800cf34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf38:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800cf3c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cf40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf4c:	ee07 1a10 	vmov	s14, r1
 800cf50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800cf54:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800cf58:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800cf5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 800cf60:	e05f      	b.n	800d022 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf62:	6813      	ldr	r3, [r2, #0]
 800cf64:	f013 0f20 	tst.w	r3, #32
 800cf68:	d022      	beq.n	800cfb0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf6a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf6e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800cf72:	4a59      	ldr	r2, [pc, #356]	; (800d0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 800cf74:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf76:	ee07 2a90 	vmov	s15, r2
 800cf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7e:	ee07 1a10 	vmov	s14, r1
 800cf82:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800cf86:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800cf8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf96:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800d0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800cf9a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cf9e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800cfa2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfae:	e038      	b.n	800d022 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfb0:	4b46      	ldr	r3, [pc, #280]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800cfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb8:	ee07 3a90 	vmov	s15, r3
 800cfbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cfc0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800cfc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cfc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfd4:	ee07 1a10 	vmov	s14, r1
 800cfd8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cfdc:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800d0dc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 800cfe0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cfe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfe8:	e01b      	b.n	800d022 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfea:	4b38      	ldr	r3, [pc, #224]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff2:	ee07 3a90 	vmov	s15, r3
 800cff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800cffe:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d00a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d00e:	ee07 1a10 	vmov	s14, r1
 800d012:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d016:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800d01a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d01e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d022:	4a2a      	ldr	r2, [pc, #168]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800d024:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d026:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d02a:	ee06 3a90 	vmov	s13, r3
 800d02e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d032:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d036:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d03a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d03e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d042:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d046:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d048:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d04c:	ee06 3a90 	vmov	s13, r3
 800d050:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d054:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d058:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d05c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d060:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d064:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d066:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d06a:	ee07 3a10 	vmov	s14, r3
 800d06e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d072:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d076:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d07a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800d07e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800d082:	bc70      	pop	{r4, r5, r6}
 800d084:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d086:	4b11      	ldr	r3, [pc, #68]	; (800d0cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800d088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800d09a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0aa:	ee07 1a10 	vmov	s14, r1
 800d0ae:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d0b2:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800d0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800d0b6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d0ba:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 800d0be:	e7b0      	b.n	800d022 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d0c4:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d0c6:	6083      	str	r3, [r0, #8]
}
 800d0c8:	e7db      	b.n	800d082 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
 800d0ca:	bf00      	nop
 800d0cc:	58024400 	.word	0x58024400
 800d0d0:	39000000 	.word	0x39000000
 800d0d4:	4a742400 	.word	0x4a742400
 800d0d8:	03d09000 	.word	0x03d09000
 800d0dc:	4c742400 	.word	0x4c742400
 800d0e0:	4af42400 	.word	0x4af42400

0800d0e4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d036      	beq.n	800d156 <HAL_RNG_Init+0x72>
{
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d0ec:	7a43      	ldrb	r3, [r0, #9]
 800d0ee:	b1b3      	cbz	r3, 800d11e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d0f4:	6822      	ldr	r2, [r4, #0]
 800d0f6:	6813      	ldr	r3, [r2, #0]
 800d0f8:	f023 0320 	bic.w	r3, r3, #32
 800d0fc:	6861      	ldr	r1, [r4, #4]
 800d0fe:	430b      	orrs	r3, r1
 800d100:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d102:	6822      	ldr	r2, [r4, #0]
 800d104:	6813      	ldr	r3, [r2, #0]
 800d106:	f043 0304 	orr.w	r3, r3, #4
 800d10a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d114:	d007      	beq.n	800d126 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d116:	2304      	movs	r3, #4
 800d118:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800d11a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800d11c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800d11e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800d120:	f7fc ff44 	bl	8009fac <HAL_RNG_MspInit>
 800d124:	e7e4      	b.n	800d0f0 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 800d126:	f7fd f949 	bl	800a3bc <HAL_GetTick>
 800d12a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f013 0f04 	tst.w	r3, #4
 800d134:	d00a      	beq.n	800d14c <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d136:	f7fd f941 	bl	800a3bc <HAL_GetTick>
 800d13a:	1b40      	subs	r0, r0, r5
 800d13c:	2802      	cmp	r0, #2
 800d13e:	d9f5      	bls.n	800d12c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 800d140:	2304      	movs	r3, #4
 800d142:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d144:	2302      	movs	r3, #2
 800d146:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 800d148:	2001      	movs	r0, #1
 800d14a:	e7e7      	b.n	800d11c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800d14c:	2301      	movs	r3, #1
 800d14e:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d150:	2000      	movs	r0, #0
 800d152:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 800d154:	e7e2      	b.n	800d11c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 800d156:	2001      	movs	r0, #1
}
 800d158:	4770      	bx	lr

0800d15a <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800d15a:	4770      	bx	lr

0800d15c <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d15c:	4770      	bx	lr

0800d15e <HAL_RNG_IRQHandler>:
{
 800d15e:	b510      	push	{r4, lr}
 800d160:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800d162:	6803      	ldr	r3, [r0, #0]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	f012 0f20 	tst.w	r2, #32
 800d16a:	d123      	bne.n	800d1b4 <HAL_RNG_IRQHandler+0x56>
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d172:	d007      	beq.n	800d184 <HAL_RNG_IRQHandler+0x26>
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	f012 0f04 	tst.w	r2, #4
 800d17a:	d127      	bne.n	800d1cc <HAL_RNG_IRQHandler+0x6e>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d182:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	685a      	ldr	r2, [r3, #4]
 800d188:	f012 0f01 	tst.w	r2, #1
 800d18c:	d01d      	beq.n	800d1ca <HAL_RNG_IRQHandler+0x6c>
    __HAL_RNG_DISABLE_IT(hrng);
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	f022 0208 	bic.w	r2, r2, #8
 800d194:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	6899      	ldr	r1, [r3, #8]
 800d19a:	6121      	str	r1, [r4, #16]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 800d19c:	7a63      	ldrb	r3, [r4, #9]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	d012      	beq.n	800d1ca <HAL_RNG_IRQHandler+0x6c>
      hrng->State = HAL_RNG_STATE_READY;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	7263      	strb	r3, [r4, #9]
      __HAL_UNLOCK(hrng);
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	7223      	strb	r3, [r4, #8]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f7ff ffd4 	bl	800d15a <HAL_RNG_ReadyDataCallback>
 800d1b2:	e00a      	b.n	800d1ca <HAL_RNG_IRQHandler+0x6c>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	60c3      	str	r3, [r0, #12]
    hrng->State = HAL_RNG_STATE_ERROR;
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	7263      	strb	r3, [r4, #9]
    HAL_RNG_ErrorCallback(hrng);
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f7ff ffcd 	bl	800d15c <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800d1c8:	605a      	str	r2, [r3, #4]
}
 800d1ca:	bd10      	pop	{r4, pc}
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d1cc:	2208      	movs	r2, #8
 800d1ce:	60c2      	str	r2, [r0, #12]
      __HAL_RNG_DISABLE_IT(hrng);
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	f022 0208 	bic.w	r2, r2, #8
 800d1d6:	601a      	str	r2, [r3, #0]
  if (rngclockerror == 1U)
 800d1d8:	e7ee      	b.n	800d1b8 <HAL_RNG_IRQHandler+0x5a>

0800d1da <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d1da:	4770      	bx	lr

0800d1dc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d13f      	bne.n	800d266 <HAL_TIM_Base_Start_IT+0x8a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1ec:	6802      	ldr	r2, [r0, #0]
 800d1ee:	68d3      	ldr	r3, [r2, #12]
 800d1f0:	f043 0301 	orr.w	r3, r3, #1
 800d1f4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f6:	6802      	ldr	r2, [r0, #0]
 800d1f8:	4b1d      	ldr	r3, [pc, #116]	; (800d270 <HAL_TIM_Base_Start_IT+0x94>)
 800d1fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d1fe:	bf18      	it	ne
 800d200:	429a      	cmpne	r2, r3
 800d202:	bf0c      	ite	eq
 800d204:	2301      	moveq	r3, #1
 800d206:	2300      	movne	r3, #0
 800d208:	491a      	ldr	r1, [pc, #104]	; (800d274 <HAL_TIM_Base_Start_IT+0x98>)
 800d20a:	428a      	cmp	r2, r1
 800d20c:	bf08      	it	eq
 800d20e:	f043 0301 	orreq.w	r3, r3, #1
 800d212:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d216:	428a      	cmp	r2, r1
 800d218:	bf08      	it	eq
 800d21a:	f043 0301 	orreq.w	r3, r3, #1
 800d21e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d222:	428a      	cmp	r2, r1
 800d224:	bf08      	it	eq
 800d226:	f043 0301 	orreq.w	r3, r3, #1
 800d22a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800d22e:	428a      	cmp	r2, r1
 800d230:	bf08      	it	eq
 800d232:	f043 0301 	orreq.w	r3, r3, #1
 800d236:	b913      	cbnz	r3, 800d23e <HAL_TIM_Base_Start_IT+0x62>
 800d238:	4b0f      	ldr	r3, [pc, #60]	; (800d278 <HAL_TIM_Base_Start_IT+0x9c>)
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d10d      	bne.n	800d25a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d23e:	6891      	ldr	r1, [r2, #8]
 800d240:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <HAL_TIM_Base_Start_IT+0xa0>)
 800d242:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d244:	2b06      	cmp	r3, #6
 800d246:	d010      	beq.n	800d26a <HAL_TIM_Base_Start_IT+0x8e>
 800d248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d24c:	d00d      	beq.n	800d26a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800d24e:	6813      	ldr	r3, [r2, #0]
 800d250:	f043 0301 	orr.w	r3, r3, #1
 800d254:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800d256:	2000      	movs	r0, #0
 800d258:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d25a:	6813      	ldr	r3, [r2, #0]
 800d25c:	f043 0301 	orr.w	r3, r3, #1
 800d260:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800d262:	2000      	movs	r0, #0
 800d264:	4770      	bx	lr
    return HAL_ERROR;
 800d266:	2001      	movs	r0, #1
 800d268:	4770      	bx	lr
  return HAL_OK;
 800d26a:	2000      	movs	r0, #0
}
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	40010000 	.word	0x40010000
 800d274:	40000400 	.word	0x40000400
 800d278:	40001800 	.word	0x40001800
 800d27c:	00010007 	.word	0x00010007

0800d280 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d280:	4770      	bx	lr

0800d282 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d282:	4770      	bx	lr

0800d284 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d284:	4770      	bx	lr

0800d286 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d286:	4770      	bx	lr

0800d288 <HAL_TIM_IRQHandler>:
{
 800d288:	b510      	push	{r4, lr}
 800d28a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d28c:	6803      	ldr	r3, [r0, #0]
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	f012 0f02 	tst.w	r2, #2
 800d294:	d011      	beq.n	800d2ba <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d296:	68da      	ldr	r2, [r3, #12]
 800d298:	f012 0f02 	tst.w	r2, #2
 800d29c:	d00d      	beq.n	800d2ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d29e:	f06f 0202 	mvn.w	r2, #2
 800d2a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2a8:	6803      	ldr	r3, [r0, #0]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	f013 0f03 	tst.w	r3, #3
 800d2b0:	d079      	beq.n	800d3a6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800d2b2:	f7ff ffe6 	bl	800d282 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	691a      	ldr	r2, [r3, #16]
 800d2be:	f012 0f04 	tst.w	r2, #4
 800d2c2:	d012      	beq.n	800d2ea <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	f012 0f04 	tst.w	r2, #4
 800d2ca:	d00e      	beq.n	800d2ea <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2cc:	f06f 0204 	mvn.w	r2, #4
 800d2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d2de:	d068      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f7ff ffce 	bl	800d282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	f012 0f08 	tst.w	r2, #8
 800d2f2:	d012      	beq.n	800d31a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d2f4:	68da      	ldr	r2, [r3, #12]
 800d2f6:	f012 0f08 	tst.w	r2, #8
 800d2fa:	d00e      	beq.n	800d31a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d2fc:	f06f 0208 	mvn.w	r2, #8
 800d300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d302:	2304      	movs	r3, #4
 800d304:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	f013 0f03 	tst.w	r3, #3
 800d30e:	d057      	beq.n	800d3c0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800d310:	4620      	mov	r0, r4
 800d312:	f7ff ffb6 	bl	800d282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d316:	2300      	movs	r3, #0
 800d318:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	691a      	ldr	r2, [r3, #16]
 800d31e:	f012 0f10 	tst.w	r2, #16
 800d322:	d012      	beq.n	800d34a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d324:	68da      	ldr	r2, [r3, #12]
 800d326:	f012 0f10 	tst.w	r2, #16
 800d32a:	d00e      	beq.n	800d34a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d32c:	f06f 0210 	mvn.w	r2, #16
 800d330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d332:	2308      	movs	r3, #8
 800d334:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d33e:	d046      	beq.n	800d3ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff ff9e 	bl	800d282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d346:	2300      	movs	r3, #0
 800d348:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	691a      	ldr	r2, [r3, #16]
 800d34e:	f012 0f01 	tst.w	r2, #1
 800d352:	d003      	beq.n	800d35c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d354:	68da      	ldr	r2, [r3, #12]
 800d356:	f012 0f01 	tst.w	r2, #1
 800d35a:	d13f      	bne.n	800d3dc <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	691a      	ldr	r2, [r3, #16]
 800d360:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d364:	d003      	beq.n	800d36e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d36c:	d13d      	bne.n	800d3ea <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	691a      	ldr	r2, [r3, #16]
 800d372:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d376:	d003      	beq.n	800d380 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d378:	68da      	ldr	r2, [r3, #12]
 800d37a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d37e:	d13b      	bne.n	800d3f8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	691a      	ldr	r2, [r3, #16]
 800d384:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d388:	d003      	beq.n	800d392 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d390:	d139      	bne.n	800d406 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	691a      	ldr	r2, [r3, #16]
 800d396:	f012 0f20 	tst.w	r2, #32
 800d39a:	d003      	beq.n	800d3a4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d39c:	68da      	ldr	r2, [r3, #12]
 800d39e:	f012 0f20 	tst.w	r2, #32
 800d3a2:	d137      	bne.n	800d414 <HAL_TIM_IRQHandler+0x18c>
}
 800d3a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3a6:	f7ff ff6b 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff ff6a 	bl	800d284 <HAL_TIM_PWM_PulseFinishedCallback>
 800d3b0:	e781      	b.n	800d2b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f7ff ff64 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7ff ff63 	bl	800d284 <HAL_TIM_PWM_PulseFinishedCallback>
 800d3be:	e792      	b.n	800d2e6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7ff ff5d 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f7ff ff5c 	bl	800d284 <HAL_TIM_PWM_PulseFinishedCallback>
 800d3cc:	e7a3      	b.n	800d316 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f7ff ff56 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f7ff ff55 	bl	800d284 <HAL_TIM_PWM_PulseFinishedCallback>
 800d3da:	e7b4      	b.n	800d346 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3dc:	f06f 0201 	mvn.w	r2, #1
 800d3e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7fc fdaa 	bl	8009f3c <HAL_TIM_PeriodElapsedCallback>
 800d3e8:	e7b8      	b.n	800d35c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d3ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d3ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 f8ba 	bl	800d56a <HAL_TIMEx_BreakCallback>
 800d3f6:	e7ba      	b.n	800d36e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d3fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 f8b4 	bl	800d56c <HAL_TIMEx_Break2Callback>
 800d404:	e7bc      	b.n	800d380 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d40a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d40c:	4620      	mov	r0, r4
 800d40e:	f7ff ff3a 	bl	800d286 <HAL_TIM_TriggerCallback>
 800d412:	e7be      	b.n	800d392 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d414:	f06f 0220 	mvn.w	r2, #32
 800d418:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 f8a4 	bl	800d568 <HAL_TIMEx_CommutCallback>
}
 800d420:	e7c0      	b.n	800d3a4 <HAL_TIM_IRQHandler+0x11c>
	...

0800d424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d424:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d426:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d428:	4a32      	ldr	r2, [pc, #200]	; (800d4f4 <TIM_Base_SetConfig+0xd0>)
 800d42a:	4290      	cmp	r0, r2
 800d42c:	bf14      	ite	ne
 800d42e:	2200      	movne	r2, #0
 800d430:	2201      	moveq	r2, #1
 800d432:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d436:	d037      	beq.n	800d4a8 <TIM_Base_SetConfig+0x84>
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d135      	bne.n	800d4a8 <TIM_Base_SetConfig+0x84>
 800d43c:	4c2e      	ldr	r4, [pc, #184]	; (800d4f8 <TIM_Base_SetConfig+0xd4>)
 800d43e:	42a0      	cmp	r0, r4
 800d440:	d00b      	beq.n	800d45a <TIM_Base_SetConfig+0x36>
 800d442:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800d446:	42a0      	cmp	r0, r4
 800d448:	d007      	beq.n	800d45a <TIM_Base_SetConfig+0x36>
 800d44a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800d44e:	42a0      	cmp	r0, r4
 800d450:	d003      	beq.n	800d45a <TIM_Base_SetConfig+0x36>
 800d452:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800d456:	42a0      	cmp	r0, r4
 800d458:	d10a      	bne.n	800d470 <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d45e:	684c      	ldr	r4, [r1, #4]
 800d460:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d462:	4c25      	ldr	r4, [pc, #148]	; (800d4f8 <TIM_Base_SetConfig+0xd4>)
 800d464:	42a0      	cmp	r0, r4
 800d466:	d023      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
 800d468:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800d46c:	42a0      	cmp	r0, r4
 800d46e:	d01f      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
 800d470:	4c22      	ldr	r4, [pc, #136]	; (800d4fc <TIM_Base_SetConfig+0xd8>)
 800d472:	42a0      	cmp	r0, r4
 800d474:	d01c      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
 800d476:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800d47a:	42a0      	cmp	r0, r4
 800d47c:	d018      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
 800d47e:	4d20      	ldr	r5, [pc, #128]	; (800d500 <TIM_Base_SetConfig+0xdc>)
 800d480:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 800d484:	42a0      	cmp	r0, r4
 800d486:	bf18      	it	ne
 800d488:	42a8      	cmpne	r0, r5
 800d48a:	d011      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
 800d48c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800d490:	42a0      	cmp	r0, r4
 800d492:	d00d      	beq.n	800d4b0 <TIM_Base_SetConfig+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d498:	694a      	ldr	r2, [r1, #20]
 800d49a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800d49c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d49e:	688b      	ldr	r3, [r1, #8]
 800d4a0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4a2:	680b      	ldr	r3, [r1, #0]
 800d4a4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4a6:	e021      	b.n	800d4ec <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d4ac:	684c      	ldr	r4, [r1, #4]
 800d4ae:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4b4:	68cc      	ldr	r4, [r1, #12]
 800d4b6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4bc:	694c      	ldr	r4, [r1, #20]
 800d4be:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800d4c0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4c2:	688b      	ldr	r3, [r1, #8]
 800d4c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d4c6:	680b      	ldr	r3, [r1, #0]
 800d4c8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4ca:	4b0e      	ldr	r3, [pc, #56]	; (800d504 <TIM_Base_SetConfig+0xe0>)
 800d4cc:	4298      	cmp	r0, r3
 800d4ce:	d00b      	beq.n	800d4e8 <TIM_Base_SetConfig+0xc4>
 800d4d0:	b952      	cbnz	r2, 800d4e8 <TIM_Base_SetConfig+0xc4>
 800d4d2:	4a0b      	ldr	r2, [pc, #44]	; (800d500 <TIM_Base_SetConfig+0xdc>)
 800d4d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d4d8:	4298      	cmp	r0, r3
 800d4da:	bf18      	it	ne
 800d4dc:	4290      	cmpne	r0, r2
 800d4de:	d003      	beq.n	800d4e8 <TIM_Base_SetConfig+0xc4>
 800d4e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4e4:	4298      	cmp	r0, r3
 800d4e6:	d101      	bne.n	800d4ec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4e8:	690b      	ldr	r3, [r1, #16]
 800d4ea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	6143      	str	r3, [r0, #20]
}
 800d4f0:	bc30      	pop	{r4, r5}
 800d4f2:	4770      	bx	lr
 800d4f4:	40010000 	.word	0x40010000
 800d4f8:	40000400 	.word	0x40000400
 800d4fc:	40000c00 	.word	0x40000c00
 800d500:	40014000 	.word	0x40014000
 800d504:	40010400 	.word	0x40010400

0800d508 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800d508:	b360      	cbz	r0, 800d564 <HAL_TIM_Base_Init+0x5c>
{
 800d50a:	b510      	push	{r4, lr}
 800d50c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800d50e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d512:	b313      	cbz	r3, 800d55a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800d514:	2302      	movs	r3, #2
 800d516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d51a:	4621      	mov	r1, r4
 800d51c:	f851 0b04 	ldr.w	r0, [r1], #4
 800d520:	f7ff ff80 	bl	800d424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d524:	2301      	movs	r3, #1
 800d526:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d52a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d52e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d53a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d54a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d54e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d552:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800d556:	2000      	movs	r0, #0
}
 800d558:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800d55a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d55e:	f7ff fe3c 	bl	800d1da <HAL_TIM_Base_MspInit>
 800d562:	e7d7      	b.n	800d514 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800d564:	2001      	movs	r0, #1
}
 800d566:	4770      	bx	lr

0800d568 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d568:	4770      	bx	lr

0800d56a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d56a:	4770      	bx	lr

0800d56c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d56c:	4770      	bx	lr
	...

0800d570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d576:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d578:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	6922      	ldr	r2, [r4, #16]
 800d57e:	4313      	orrs	r3, r2
 800d580:	6962      	ldr	r2, [r4, #20]
 800d582:	4313      	orrs	r3, r2
 800d584:	69e2      	ldr	r2, [r4, #28]
 800d586:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d588:	4a84      	ldr	r2, [pc, #528]	; (800d79c <UART_SetConfig+0x22c>)
 800d58a:	4002      	ands	r2, r0
 800d58c:	4313      	orrs	r3, r2
 800d58e:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d590:	6822      	ldr	r2, [r4, #0]
 800d592:	6853      	ldr	r3, [r2, #4]
 800d594:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d598:	68e1      	ldr	r1, [r4, #12]
 800d59a:	430b      	orrs	r3, r1
 800d59c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d59e:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5a0:	6822      	ldr	r2, [r4, #0]
 800d5a2:	4b7f      	ldr	r3, [pc, #508]	; (800d7a0 <UART_SetConfig+0x230>)
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d001      	beq.n	800d5ac <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5a8:	6a23      	ldr	r3, [r4, #32]
 800d5aa:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5ac:	6890      	ldr	r0, [r2, #8]
 800d5ae:	4b7d      	ldr	r3, [pc, #500]	; (800d7a4 <UART_SetConfig+0x234>)
 800d5b0:	4003      	ands	r3, r0
 800d5b2:	430b      	orrs	r3, r1
 800d5b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5b6:	6822      	ldr	r2, [r4, #0]
 800d5b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d5ba:	f023 030f 	bic.w	r3, r3, #15
 800d5be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5c0:	430b      	orrs	r3, r1
 800d5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5c4:	6822      	ldr	r2, [r4, #0]
 800d5c6:	4b78      	ldr	r3, [pc, #480]	; (800d7a8 <UART_SetConfig+0x238>)
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d021      	beq.n	800d610 <UART_SetConfig+0xa0>
 800d5cc:	4b77      	ldr	r3, [pc, #476]	; (800d7ac <UART_SetConfig+0x23c>)
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	f000 8084 	beq.w	800d6dc <UART_SetConfig+0x16c>
 800d5d4:	4b76      	ldr	r3, [pc, #472]	; (800d7b0 <UART_SetConfig+0x240>)
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	f000 8098 	beq.w	800d70c <UART_SetConfig+0x19c>
 800d5dc:	4b75      	ldr	r3, [pc, #468]	; (800d7b4 <UART_SetConfig+0x244>)
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	f000 80ac 	beq.w	800d73c <UART_SetConfig+0x1cc>
 800d5e4:	4b74      	ldr	r3, [pc, #464]	; (800d7b8 <UART_SetConfig+0x248>)
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	f000 80c0 	beq.w	800d76c <UART_SetConfig+0x1fc>
 800d5ec:	4b73      	ldr	r3, [pc, #460]	; (800d7bc <UART_SetConfig+0x24c>)
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	f000 80ec 	beq.w	800d7cc <UART_SetConfig+0x25c>
 800d5f4:	4b72      	ldr	r3, [pc, #456]	; (800d7c0 <UART_SetConfig+0x250>)
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	f000 8123 	beq.w	800d842 <UART_SetConfig+0x2d2>
 800d5fc:	4b71      	ldr	r3, [pc, #452]	; (800d7c4 <UART_SetConfig+0x254>)
 800d5fe:	429a      	cmp	r2, r3
 800d600:	f000 8137 	beq.w	800d872 <UART_SetConfig+0x302>
 800d604:	4b66      	ldr	r3, [pc, #408]	; (800d7a0 <UART_SetConfig+0x230>)
 800d606:	429a      	cmp	r2, r3
 800d608:	f000 814b 	beq.w	800d8a2 <UART_SetConfig+0x332>
 800d60c:	2380      	movs	r3, #128	; 0x80
 800d60e:	e033      	b.n	800d678 <UART_SetConfig+0x108>
 800d610:	4b6d      	ldr	r3, [pc, #436]	; (800d7c8 <UART_SetConfig+0x258>)
 800d612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d618:	2b28      	cmp	r3, #40	; 0x28
 800d61a:	d85d      	bhi.n	800d6d8 <UART_SetConfig+0x168>
 800d61c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d620:	005c0151 	.word	0x005c0151
 800d624:	005c005c 	.word	0x005c005c
 800d628:	005c005c 	.word	0x005c005c
 800d62c:	005c005c 	.word	0x005c005c
 800d630:	005c02a0 	.word	0x005c02a0
 800d634:	005c005c 	.word	0x005c005c
 800d638:	005c005c 	.word	0x005c005c
 800d63c:	005c005c 	.word	0x005c005c
 800d640:	005c0029 	.word	0x005c0029
 800d644:	005c005c 	.word	0x005c005c
 800d648:	005c005c 	.word	0x005c005c
 800d64c:	005c005c 	.word	0x005c005c
 800d650:	005c02a2 	.word	0x005c02a2
 800d654:	005c005c 	.word	0x005c005c
 800d658:	005c005c 	.word	0x005c005c
 800d65c:	005c005c 	.word	0x005c005c
 800d660:	005c002b 	.word	0x005c002b
 800d664:	005c005c 	.word	0x005c005c
 800d668:	005c005c 	.word	0x005c005c
 800d66c:	005c005c 	.word	0x005c005c
 800d670:	005a      	.short	0x005a
 800d672:	2308      	movs	r3, #8
 800d674:	e000      	b.n	800d678 <UART_SetConfig+0x108>
 800d676:	2320      	movs	r3, #32
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d678:	69e0      	ldr	r0, [r4, #28]
 800d67a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d67e:	f000 81b7 	beq.w	800d9f0 <UART_SetConfig+0x480>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d682:	2b20      	cmp	r3, #32
 800d684:	f200 8210 	bhi.w	800daa8 <UART_SetConfig+0x538>
 800d688:	2b20      	cmp	r3, #32
 800d68a:	f200 825c 	bhi.w	800db46 <UART_SetConfig+0x5d6>
 800d68e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d692:	0227      	.short	0x0227
 800d694:	025a022d 	.word	0x025a022d
 800d698:	0230025a 	.word	0x0230025a
 800d69c:	025a025a 	.word	0x025a025a
 800d6a0:	0235025a 	.word	0x0235025a
 800d6a4:	025a025a 	.word	0x025a025a
 800d6a8:	025a025a 	.word	0x025a025a
 800d6ac:	025a025a 	.word	0x025a025a
 800d6b0:	023a025a 	.word	0x023a025a
 800d6b4:	025a025a 	.word	0x025a025a
 800d6b8:	025a025a 	.word	0x025a025a
 800d6bc:	025a025a 	.word	0x025a025a
 800d6c0:	025a025a 	.word	0x025a025a
 800d6c4:	025a025a 	.word	0x025a025a
 800d6c8:	025a025a 	.word	0x025a025a
 800d6cc:	025a025a 	.word	0x025a025a
 800d6d0:	0246025a 	.word	0x0246025a
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6d4:	2340      	movs	r3, #64	; 0x40
 800d6d6:	e7cf      	b.n	800d678 <UART_SetConfig+0x108>
 800d6d8:	2380      	movs	r3, #128	; 0x80
 800d6da:	e7cd      	b.n	800d678 <UART_SetConfig+0x108>
 800d6dc:	4b3a      	ldr	r3, [pc, #232]	; (800d7c8 <UART_SetConfig+0x258>)
 800d6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e0:	f003 0307 	and.w	r3, r3, #7
 800d6e4:	2b05      	cmp	r3, #5
 800d6e6:	d80f      	bhi.n	800d708 <UART_SetConfig+0x198>
 800d6e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d6ec:	023e00ed 	.word	0x023e00ed
 800d6f0:	00080006 	.word	0x00080006
 800d6f4:	000c000a 	.word	0x000c000a
 800d6f8:	2308      	movs	r3, #8
 800d6fa:	e7bd      	b.n	800d678 <UART_SetConfig+0x108>
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	e7bb      	b.n	800d678 <UART_SetConfig+0x108>
 800d700:	2320      	movs	r3, #32
 800d702:	e7b9      	b.n	800d678 <UART_SetConfig+0x108>
 800d704:	2340      	movs	r3, #64	; 0x40
 800d706:	e7b7      	b.n	800d678 <UART_SetConfig+0x108>
 800d708:	2380      	movs	r3, #128	; 0x80
 800d70a:	e7b5      	b.n	800d678 <UART_SetConfig+0x108>
 800d70c:	4b2e      	ldr	r3, [pc, #184]	; (800d7c8 <UART_SetConfig+0x258>)
 800d70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	2b05      	cmp	r3, #5
 800d716:	d80f      	bhi.n	800d738 <UART_SetConfig+0x1c8>
 800d718:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d71c:	02280104 	.word	0x02280104
 800d720:	00080006 	.word	0x00080006
 800d724:	000c000a 	.word	0x000c000a
 800d728:	2308      	movs	r3, #8
 800d72a:	e7a5      	b.n	800d678 <UART_SetConfig+0x108>
 800d72c:	2310      	movs	r3, #16
 800d72e:	e7a3      	b.n	800d678 <UART_SetConfig+0x108>
 800d730:	2320      	movs	r3, #32
 800d732:	e7a1      	b.n	800d678 <UART_SetConfig+0x108>
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	e79f      	b.n	800d678 <UART_SetConfig+0x108>
 800d738:	2380      	movs	r3, #128	; 0x80
 800d73a:	e79d      	b.n	800d678 <UART_SetConfig+0x108>
 800d73c:	4b22      	ldr	r3, [pc, #136]	; (800d7c8 <UART_SetConfig+0x258>)
 800d73e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d740:	f003 0307 	and.w	r3, r3, #7
 800d744:	2b05      	cmp	r3, #5
 800d746:	d80f      	bhi.n	800d768 <UART_SetConfig+0x1f8>
 800d748:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d74c:	021200ee 	.word	0x021200ee
 800d750:	00080006 	.word	0x00080006
 800d754:	000c000a 	.word	0x000c000a
 800d758:	2308      	movs	r3, #8
 800d75a:	e78d      	b.n	800d678 <UART_SetConfig+0x108>
 800d75c:	2310      	movs	r3, #16
 800d75e:	e78b      	b.n	800d678 <UART_SetConfig+0x108>
 800d760:	2320      	movs	r3, #32
 800d762:	e789      	b.n	800d678 <UART_SetConfig+0x108>
 800d764:	2340      	movs	r3, #64	; 0x40
 800d766:	e787      	b.n	800d678 <UART_SetConfig+0x108>
 800d768:	2380      	movs	r3, #128	; 0x80
 800d76a:	e785      	b.n	800d678 <UART_SetConfig+0x108>
 800d76c:	4b16      	ldr	r3, [pc, #88]	; (800d7c8 <UART_SetConfig+0x258>)
 800d76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d770:	f003 0307 	and.w	r3, r3, #7
 800d774:	2b05      	cmp	r3, #5
 800d776:	d80f      	bhi.n	800d798 <UART_SetConfig+0x228>
 800d778:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d77c:	01fc00d8 	.word	0x01fc00d8
 800d780:	00080006 	.word	0x00080006
 800d784:	000c000a 	.word	0x000c000a
 800d788:	2308      	movs	r3, #8
 800d78a:	e775      	b.n	800d678 <UART_SetConfig+0x108>
 800d78c:	2310      	movs	r3, #16
 800d78e:	e773      	b.n	800d678 <UART_SetConfig+0x108>
 800d790:	2320      	movs	r3, #32
 800d792:	e771      	b.n	800d678 <UART_SetConfig+0x108>
 800d794:	2340      	movs	r3, #64	; 0x40
 800d796:	e76f      	b.n	800d678 <UART_SetConfig+0x108>
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	e76d      	b.n	800d678 <UART_SetConfig+0x108>
 800d79c:	cfff69f3 	.word	0xcfff69f3
 800d7a0:	58000c00 	.word	0x58000c00
 800d7a4:	11fff4ff 	.word	0x11fff4ff
 800d7a8:	40011000 	.word	0x40011000
 800d7ac:	40004400 	.word	0x40004400
 800d7b0:	40004800 	.word	0x40004800
 800d7b4:	40004c00 	.word	0x40004c00
 800d7b8:	40005000 	.word	0x40005000
 800d7bc:	40011400 	.word	0x40011400
 800d7c0:	40007800 	.word	0x40007800
 800d7c4:	40007c00 	.word	0x40007c00
 800d7c8:	58024400 	.word	0x58024400
 800d7cc:	4b82      	ldr	r3, [pc, #520]	; (800d9d8 <UART_SetConfig+0x468>)
 800d7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7d4:	2b28      	cmp	r3, #40	; 0x28
 800d7d6:	d832      	bhi.n	800d83e <UART_SetConfig+0x2ce>
 800d7d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d7dc:	003100aa 	.word	0x003100aa
 800d7e0:	00310031 	.word	0x00310031
 800d7e4:	00310031 	.word	0x00310031
 800d7e8:	00310031 	.word	0x00310031
 800d7ec:	003101ce 	.word	0x003101ce
 800d7f0:	00310031 	.word	0x00310031
 800d7f4:	00310031 	.word	0x00310031
 800d7f8:	00310031 	.word	0x00310031
 800d7fc:	00310029 	.word	0x00310029
 800d800:	00310031 	.word	0x00310031
 800d804:	00310031 	.word	0x00310031
 800d808:	00310031 	.word	0x00310031
 800d80c:	0031002b 	.word	0x0031002b
 800d810:	00310031 	.word	0x00310031
 800d814:	00310031 	.word	0x00310031
 800d818:	00310031 	.word	0x00310031
 800d81c:	0031002d 	.word	0x0031002d
 800d820:	00310031 	.word	0x00310031
 800d824:	00310031 	.word	0x00310031
 800d828:	00310031 	.word	0x00310031
 800d82c:	002f      	.short	0x002f
 800d82e:	2308      	movs	r3, #8
 800d830:	e722      	b.n	800d678 <UART_SetConfig+0x108>
 800d832:	2310      	movs	r3, #16
 800d834:	e720      	b.n	800d678 <UART_SetConfig+0x108>
 800d836:	2320      	movs	r3, #32
 800d838:	e71e      	b.n	800d678 <UART_SetConfig+0x108>
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	e71c      	b.n	800d678 <UART_SetConfig+0x108>
 800d83e:	2380      	movs	r3, #128	; 0x80
 800d840:	e71a      	b.n	800d678 <UART_SetConfig+0x108>
 800d842:	4b65      	ldr	r3, [pc, #404]	; (800d9d8 <UART_SetConfig+0x468>)
 800d844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b05      	cmp	r3, #5
 800d84c:	d80f      	bhi.n	800d86e <UART_SetConfig+0x2fe>
 800d84e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d852:	0071      	.short	0x0071
 800d854:	00060195 	.word	0x00060195
 800d858:	000a0008 	.word	0x000a0008
 800d85c:	000c      	.short	0x000c
 800d85e:	2308      	movs	r3, #8
 800d860:	e70a      	b.n	800d678 <UART_SetConfig+0x108>
 800d862:	2310      	movs	r3, #16
 800d864:	e708      	b.n	800d678 <UART_SetConfig+0x108>
 800d866:	2320      	movs	r3, #32
 800d868:	e706      	b.n	800d678 <UART_SetConfig+0x108>
 800d86a:	2340      	movs	r3, #64	; 0x40
 800d86c:	e704      	b.n	800d678 <UART_SetConfig+0x108>
 800d86e:	2380      	movs	r3, #128	; 0x80
 800d870:	e702      	b.n	800d678 <UART_SetConfig+0x108>
 800d872:	4b59      	ldr	r3, [pc, #356]	; (800d9d8 <UART_SetConfig+0x468>)
 800d874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d876:	f003 0307 	and.w	r3, r3, #7
 800d87a:	2b05      	cmp	r3, #5
 800d87c:	d80f      	bhi.n	800d89e <UART_SetConfig+0x32e>
 800d87e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d882:	005b      	.short	0x005b
 800d884:	0006017f 	.word	0x0006017f
 800d888:	000a0008 	.word	0x000a0008
 800d88c:	000c      	.short	0x000c
 800d88e:	2308      	movs	r3, #8
 800d890:	e6f2      	b.n	800d678 <UART_SetConfig+0x108>
 800d892:	2310      	movs	r3, #16
 800d894:	e6f0      	b.n	800d678 <UART_SetConfig+0x108>
 800d896:	2320      	movs	r3, #32
 800d898:	e6ee      	b.n	800d678 <UART_SetConfig+0x108>
 800d89a:	2340      	movs	r3, #64	; 0x40
 800d89c:	e6ec      	b.n	800d678 <UART_SetConfig+0x108>
 800d89e:	2380      	movs	r3, #128	; 0x80
 800d8a0:	e6ea      	b.n	800d678 <UART_SetConfig+0x108>
 800d8a2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800d8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a8:	f003 0307 	and.w	r3, r3, #7
 800d8ac:	2b05      	cmp	r3, #5
 800d8ae:	f200 813a 	bhi.w	800db26 <UART_SetConfig+0x5b6>
 800d8b2:	e8df f003 	tbb	[pc, r3]
 800d8b6:	4a43      	.short	0x4a43
 800d8b8:	038a544f 	.word	0x038a544f
 800d8bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d8c0:	e058      	b.n	800d974 <UART_SetConfig+0x404>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d8c6:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8c8:	4944      	ldr	r1, [pc, #272]	; (800d9dc <UART_SetConfig+0x46c>)
 800d8ca:	428a      	cmp	r2, r1
 800d8cc:	f040 815a 	bne.w	800db84 <UART_SetConfig+0x614>
    switch (clocksource)
 800d8d0:	1e9a      	subs	r2, r3, #2
 800d8d2:	b2d2      	uxtb	r2, r2
 800d8d4:	2a1e      	cmp	r2, #30
 800d8d6:	f200 8128 	bhi.w	800db2a <UART_SetConfig+0x5ba>
 800d8da:	3b02      	subs	r3, #2
 800d8dc:	2b1e      	cmp	r3, #30
 800d8de:	f200 8126 	bhi.w	800db2e <UART_SetConfig+0x5be>
 800d8e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d8e6:	002d      	.short	0x002d
 800d8e8:	00320124 	.word	0x00320124
 800d8ec:	01240124 	.word	0x01240124
 800d8f0:	00370124 	.word	0x00370124
 800d8f4:	01240124 	.word	0x01240124
 800d8f8:	01240124 	.word	0x01240124
 800d8fc:	01240124 	.word	0x01240124
 800d900:	003c0124 	.word	0x003c0124
 800d904:	01240124 	.word	0x01240124
 800d908:	01240124 	.word	0x01240124
 800d90c:	01240124 	.word	0x01240124
 800d910:	01240124 	.word	0x01240124
 800d914:	01240124 	.word	0x01240124
 800d918:	01240124 	.word	0x01240124
 800d91c:	01240124 	.word	0x01240124
 800d920:	00740124 	.word	0x00740124
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d924:	2300      	movs	r3, #0
 800d926:	e7cf      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d928:	2300      	movs	r3, #0
 800d92a:	e7cd      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d92c:	2300      	movs	r3, #0
 800d92e:	e7cb      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d930:	2301      	movs	r3, #1
 800d932:	e7c9      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d934:	2300      	movs	r3, #0
 800d936:	e7c7      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d938:	2300      	movs	r3, #0
 800d93a:	e7c5      	b.n	800d8c8 <UART_SetConfig+0x358>
 800d93c:	2302      	movs	r3, #2
 800d93e:	e7c3      	b.n	800d8c8 <UART_SetConfig+0x358>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d940:	f7ff f9c6 	bl	800ccd0 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800d944:	b9b0      	cbnz	r0, 800d974 <UART_SetConfig+0x404>
 800d946:	2000      	movs	r0, #0
 800d948:	e0fe      	b.n	800db48 <UART_SetConfig+0x5d8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94a:	a803      	add	r0, sp, #12
 800d94c:	f7ff f9d2 	bl	800ccf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d950:	9804      	ldr	r0, [sp, #16]
        break;
 800d952:	e7f7      	b.n	800d944 <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d954:	4668      	mov	r0, sp
 800d956:	f7ff fac9 	bl	800ceec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d95a:	9801      	ldr	r0, [sp, #4]
        break;
 800d95c:	e7f2      	b.n	800d944 <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d95e:	4b1e      	ldr	r3, [pc, #120]	; (800d9d8 <UART_SetConfig+0x468>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f013 0f20 	tst.w	r3, #32
 800d966:	d034      	beq.n	800d9d2 <UART_SetConfig+0x462>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d968:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <UART_SetConfig+0x468>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d970:	481b      	ldr	r0, [pc, #108]	; (800d9e0 <UART_SetConfig+0x470>)
 800d972:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d976:	4b1b      	ldr	r3, [pc, #108]	; (800d9e4 <UART_SetConfig+0x474>)
 800d978:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d97c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d980:	6865      	ldr	r5, [r4, #4]
 800d982:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d986:	4299      	cmp	r1, r3
 800d988:	f200 80d3 	bhi.w	800db32 <UART_SetConfig+0x5c2>
 800d98c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d990:	f200 80d1 	bhi.w	800db36 <UART_SetConfig+0x5c6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d994:	2600      	movs	r6, #0
 800d996:	4633      	mov	r3, r6
 800d998:	4631      	mov	r1, r6
 800d99a:	f7fb fa31 	bl	8008e00 <__aeabi_uldivmod>
 800d99e:	0209      	lsls	r1, r1, #8
 800d9a0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d9a4:	0200      	lsls	r0, r0, #8
 800d9a6:	086b      	lsrs	r3, r5, #1
 800d9a8:	18c0      	adds	r0, r0, r3
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	4633      	mov	r3, r6
 800d9ae:	f141 0100 	adc.w	r1, r1, #0
 800d9b2:	f7fb fa25 	bl	8008e00 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9b6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <UART_SetConfig+0x478>)
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	f200 80bc 	bhi.w	800db3a <UART_SetConfig+0x5ca>
          huart->Instance->BRR = usartdiv;
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	60d8      	str	r0, [r3, #12]
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	e0be      	b.n	800db48 <UART_SetConfig+0x5d8>
        pclk = (uint32_t) CSI_VALUE;
 800d9ca:	4808      	ldr	r0, [pc, #32]	; (800d9ec <UART_SetConfig+0x47c>)
 800d9cc:	e7d2      	b.n	800d974 <UART_SetConfig+0x404>
    switch (clocksource)
 800d9ce:	4807      	ldr	r0, [pc, #28]	; (800d9ec <UART_SetConfig+0x47c>)
 800d9d0:	e7d0      	b.n	800d974 <UART_SetConfig+0x404>
          pclk = (uint32_t) HSI_VALUE;
 800d9d2:	4803      	ldr	r0, [pc, #12]	; (800d9e0 <UART_SetConfig+0x470>)
 800d9d4:	e7ce      	b.n	800d974 <UART_SetConfig+0x404>
 800d9d6:	bf00      	nop
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	58000c00 	.word	0x58000c00
 800d9e0:	03d09000 	.word	0x03d09000
 800d9e4:	24008c1c 	.word	0x24008c1c
 800d9e8:	000ffcff 	.word	0x000ffcff
 800d9ec:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800d9f0:	2b20      	cmp	r3, #32
 800d9f2:	d815      	bhi.n	800da20 <UART_SetConfig+0x4b0>
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	f200 80a2 	bhi.w	800db3e <UART_SetConfig+0x5ce>
 800d9fa:	e8df f003 	tbb	[pc, r3]
 800d9fe:	3832      	.short	0x3832
 800da00:	a03ba0a0 	.word	0xa03ba0a0
 800da04:	a040a0a0 	.word	0xa040a0a0
 800da08:	a0a0a0a0 	.word	0xa0a0a0a0
 800da0c:	a045a0a0 	.word	0xa045a0a0
 800da10:	a0a0a0a0 	.word	0xa0a0a0a0
 800da14:	a0a0a0a0 	.word	0xa0a0a0a0
 800da18:	a0a0a0a0 	.word	0xa0a0a0a0
 800da1c:	a0a0      	.short	0xa0a0
 800da1e:	51          	.byte	0x51
 800da1f:	00          	.byte	0x00
 800da20:	2b40      	cmp	r3, #64	; 0x40
 800da22:	d11c      	bne.n	800da5e <UART_SetConfig+0x4ee>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da24:	6862      	ldr	r2, [r4, #4]
 800da26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da28:	4b59      	ldr	r3, [pc, #356]	; (800db90 <UART_SetConfig+0x620>)
 800da2a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800da2e:	fbb0 f0f3 	udiv	r0, r0, r3
 800da32:	0853      	lsrs	r3, r2, #1
 800da34:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800da38:	fbb0 f0f2 	udiv	r0, r0, r2
 800da3c:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da3e:	f1a3 0110 	sub.w	r1, r3, #16
 800da42:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800da46:	4291      	cmp	r1, r2
 800da48:	d87b      	bhi.n	800db42 <UART_SetConfig+0x5d2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da4a:	f020 000f 	bic.w	r0, r0, #15
 800da4e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800da50:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da52:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800da56:	4318      	orrs	r0, r3
 800da58:	60d0      	str	r0, [r2, #12]
 800da5a:	2000      	movs	r0, #0
 800da5c:	e074      	b.n	800db48 <UART_SetConfig+0x5d8>
    switch (clocksource)
 800da5e:	2001      	movs	r0, #1
 800da60:	e072      	b.n	800db48 <UART_SetConfig+0x5d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800da62:	f7fe fafd 	bl	800c060 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800da66:	2800      	cmp	r0, #0
 800da68:	d1dc      	bne.n	800da24 <UART_SetConfig+0x4b4>
 800da6a:	2000      	movs	r0, #0
 800da6c:	e06c      	b.n	800db48 <UART_SetConfig+0x5d8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800da6e:	f7fe fb09 	bl	800c084 <HAL_RCC_GetPCLK2Freq>
        break;
 800da72:	e7f8      	b.n	800da66 <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da74:	a803      	add	r0, sp, #12
 800da76:	f7ff f93d 	bl	800ccf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da7a:	9804      	ldr	r0, [sp, #16]
        break;
 800da7c:	e7f3      	b.n	800da66 <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da7e:	4668      	mov	r0, sp
 800da80:	f7ff fa34 	bl	800ceec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da84:	9801      	ldr	r0, [sp, #4]
        break;
 800da86:	e7ee      	b.n	800da66 <UART_SetConfig+0x4f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da88:	4b42      	ldr	r3, [pc, #264]	; (800db94 <UART_SetConfig+0x624>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f013 0f20 	tst.w	r3, #32
 800da90:	d008      	beq.n	800daa4 <UART_SetConfig+0x534>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da92:	4b40      	ldr	r3, [pc, #256]	; (800db94 <UART_SetConfig+0x624>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800da9a:	483f      	ldr	r0, [pc, #252]	; (800db98 <UART_SetConfig+0x628>)
 800da9c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800da9e:	e7c1      	b.n	800da24 <UART_SetConfig+0x4b4>
        pclk = (uint32_t) CSI_VALUE;
 800daa0:	483e      	ldr	r0, [pc, #248]	; (800db9c <UART_SetConfig+0x62c>)
 800daa2:	e7bf      	b.n	800da24 <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 800daa4:	483c      	ldr	r0, [pc, #240]	; (800db98 <UART_SetConfig+0x628>)
 800daa6:	e7bd      	b.n	800da24 <UART_SetConfig+0x4b4>
    switch (clocksource)
 800daa8:	2b40      	cmp	r3, #64	; 0x40
 800daaa:	d117      	bne.n	800dadc <UART_SetConfig+0x56c>
 800daac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dab0:	6863      	ldr	r3, [r4, #4]
 800dab2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dab4:	4a36      	ldr	r2, [pc, #216]	; (800db90 <UART_SetConfig+0x620>)
 800dab6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800daba:	fbb0 f0f2 	udiv	r0, r0, r2
 800dabe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800dac2:	fbb0 f0f3 	udiv	r0, r0, r3
 800dac6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dac8:	f1a0 0210 	sub.w	r2, r0, #16
 800dacc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d843      	bhi.n	800db5c <UART_SetConfig+0x5ec>
      {
        huart->Instance->BRR = usartdiv;
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	60d8      	str	r0, [r3, #12]
 800dad8:	2000      	movs	r0, #0
 800dada:	e035      	b.n	800db48 <UART_SetConfig+0x5d8>
    switch (clocksource)
 800dadc:	2001      	movs	r0, #1
 800dade:	e033      	b.n	800db48 <UART_SetConfig+0x5d8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800dae0:	f7fe fabe 	bl	800c060 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d1e3      	bne.n	800dab0 <UART_SetConfig+0x540>
 800dae8:	2000      	movs	r0, #0
 800daea:	e02d      	b.n	800db48 <UART_SetConfig+0x5d8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800daec:	f7fe faca 	bl	800c084 <HAL_RCC_GetPCLK2Freq>
        break;
 800daf0:	e7f8      	b.n	800dae4 <UART_SetConfig+0x574>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daf2:	a803      	add	r0, sp, #12
 800daf4:	f7ff f8fe 	bl	800ccf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800daf8:	9804      	ldr	r0, [sp, #16]
        break;
 800dafa:	e7f3      	b.n	800dae4 <UART_SetConfig+0x574>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dafc:	4668      	mov	r0, sp
 800dafe:	f7ff f9f5 	bl	800ceec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db02:	9801      	ldr	r0, [sp, #4]
        break;
 800db04:	e7ee      	b.n	800dae4 <UART_SetConfig+0x574>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db06:	4b23      	ldr	r3, [pc, #140]	; (800db94 <UART_SetConfig+0x624>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f013 0f20 	tst.w	r3, #32
 800db0e:	d008      	beq.n	800db22 <UART_SetConfig+0x5b2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db10:	4b20      	ldr	r3, [pc, #128]	; (800db94 <UART_SetConfig+0x624>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800db18:	481f      	ldr	r0, [pc, #124]	; (800db98 <UART_SetConfig+0x628>)
 800db1a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800db1c:	e7c8      	b.n	800dab0 <UART_SetConfig+0x540>
        pclk = (uint32_t) CSI_VALUE;
 800db1e:	481f      	ldr	r0, [pc, #124]	; (800db9c <UART_SetConfig+0x62c>)
 800db20:	e7c6      	b.n	800dab0 <UART_SetConfig+0x540>
          pclk = (uint32_t) HSI_VALUE;
 800db22:	481d      	ldr	r0, [pc, #116]	; (800db98 <UART_SetConfig+0x628>)
 800db24:	e7c4      	b.n	800dab0 <UART_SetConfig+0x540>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db26:	2001      	movs	r0, #1
 800db28:	e00e      	b.n	800db48 <UART_SetConfig+0x5d8>
    switch (clocksource)
 800db2a:	2001      	movs	r0, #1
 800db2c:	e00c      	b.n	800db48 <UART_SetConfig+0x5d8>
 800db2e:	2001      	movs	r0, #1
 800db30:	e00a      	b.n	800db48 <UART_SetConfig+0x5d8>
        ret = HAL_ERROR;
 800db32:	2001      	movs	r0, #1
 800db34:	e008      	b.n	800db48 <UART_SetConfig+0x5d8>
 800db36:	2001      	movs	r0, #1
 800db38:	e006      	b.n	800db48 <UART_SetConfig+0x5d8>
          ret = HAL_ERROR;
 800db3a:	2001      	movs	r0, #1
 800db3c:	e004      	b.n	800db48 <UART_SetConfig+0x5d8>
    switch (clocksource)
 800db3e:	2001      	movs	r0, #1
 800db40:	e002      	b.n	800db48 <UART_SetConfig+0x5d8>
        ret = HAL_ERROR;
 800db42:	2001      	movs	r0, #1
 800db44:	e000      	b.n	800db48 <UART_SetConfig+0x5d8>
    switch (clocksource)
 800db46:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db48:	2301      	movs	r3, #1
 800db4a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db4e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db52:	2300      	movs	r3, #0
 800db54:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800db56:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 800db58:	b006      	add	sp, #24
 800db5a:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800db5c:	2001      	movs	r0, #1
 800db5e:	e7f3      	b.n	800db48 <UART_SetConfig+0x5d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db60:	2304      	movs	r3, #4
 800db62:	e589      	b.n	800d678 <UART_SetConfig+0x108>
 800db64:	2310      	movs	r3, #16
 800db66:	e587      	b.n	800d678 <UART_SetConfig+0x108>
 800db68:	2304      	movs	r3, #4
 800db6a:	e585      	b.n	800d678 <UART_SetConfig+0x108>
 800db6c:	2304      	movs	r3, #4
 800db6e:	e583      	b.n	800d678 <UART_SetConfig+0x108>
 800db70:	2304      	movs	r3, #4
 800db72:	e581      	b.n	800d678 <UART_SetConfig+0x108>
 800db74:	2304      	movs	r3, #4
 800db76:	e57f      	b.n	800d678 <UART_SetConfig+0x108>
 800db78:	2304      	movs	r3, #4
 800db7a:	e57d      	b.n	800d678 <UART_SetConfig+0x108>
 800db7c:	2304      	movs	r3, #4
 800db7e:	e57b      	b.n	800d678 <UART_SetConfig+0x108>
 800db80:	2304      	movs	r3, #4
 800db82:	e579      	b.n	800d678 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db84:	69e2      	ldr	r2, [r4, #28]
 800db86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800db8a:	f47f ad7a 	bne.w	800d682 <UART_SetConfig+0x112>
 800db8e:	e731      	b.n	800d9f4 <UART_SetConfig+0x484>
 800db90:	24008c1c 	.word	0x24008c1c
 800db94:	58024400 	.word	0x58024400
 800db98:	03d09000 	.word	0x03d09000
 800db9c:	003d0900 	.word	0x003d0900

0800dba0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dba0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dba2:	f013 0f01 	tst.w	r3, #1
 800dba6:	d006      	beq.n	800dbb6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dba8:	6802      	ldr	r2, [r0, #0]
 800dbaa:	6853      	ldr	r3, [r2, #4]
 800dbac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dbb0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dbb2:	430b      	orrs	r3, r1
 800dbb4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dbb8:	f013 0f02 	tst.w	r3, #2
 800dbbc:	d006      	beq.n	800dbcc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbbe:	6802      	ldr	r2, [r0, #0]
 800dbc0:	6853      	ldr	r3, [r2, #4]
 800dbc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbc6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800dbc8:	430b      	orrs	r3, r1
 800dbca:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dbce:	f013 0f04 	tst.w	r3, #4
 800dbd2:	d006      	beq.n	800dbe2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbd4:	6802      	ldr	r2, [r0, #0]
 800dbd6:	6853      	ldr	r3, [r2, #4]
 800dbd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbdc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800dbde:	430b      	orrs	r3, r1
 800dbe0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbe2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dbe4:	f013 0f08 	tst.w	r3, #8
 800dbe8:	d006      	beq.n	800dbf8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbea:	6802      	ldr	r2, [r0, #0]
 800dbec:	6853      	ldr	r3, [r2, #4]
 800dbee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbf2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800dbf4:	430b      	orrs	r3, r1
 800dbf6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbf8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dbfa:	f013 0f10 	tst.w	r3, #16
 800dbfe:	d006      	beq.n	800dc0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc00:	6802      	ldr	r2, [r0, #0]
 800dc02:	6893      	ldr	r3, [r2, #8]
 800dc04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800dc0a:	430b      	orrs	r3, r1
 800dc0c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dc10:	f013 0f20 	tst.w	r3, #32
 800dc14:	d006      	beq.n	800dc24 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc16:	6802      	ldr	r2, [r0, #0]
 800dc18:	6893      	ldr	r3, [r2, #8]
 800dc1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc1e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800dc20:	430b      	orrs	r3, r1
 800dc22:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dc26:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dc2a:	d00a      	beq.n	800dc42 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc2c:	6802      	ldr	r2, [r0, #0]
 800dc2e:	6853      	ldr	r3, [r2, #4]
 800dc30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc34:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800dc36:	430b      	orrs	r3, r1
 800dc38:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dc3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc40:	d00b      	beq.n	800dc5a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dc44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc48:	d006      	beq.n	800dc58 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc4a:	6802      	ldr	r2, [r0, #0]
 800dc4c:	6853      	ldr	r3, [r2, #4]
 800dc4e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800dc52:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dc54:	430b      	orrs	r3, r1
 800dc56:	6053      	str	r3, [r2, #4]
  }
}
 800dc58:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc5a:	6802      	ldr	r2, [r0, #0]
 800dc5c:	6853      	ldr	r3, [r2, #4]
 800dc5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800dc62:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800dc64:	430b      	orrs	r3, r1
 800dc66:	6053      	str	r3, [r2, #4]
 800dc68:	e7eb      	b.n	800dc42 <UART_AdvFeatureConfig+0xa2>

0800dc6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc6e:	4680      	mov	r8, r0
 800dc70:	460e      	mov	r6, r1
 800dc72:	4615      	mov	r5, r2
 800dc74:	4699      	mov	r9, r3
 800dc76:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc78:	f8d8 2000 	ldr.w	r2, [r8]
 800dc7c:	69d4      	ldr	r4, [r2, #28]
 800dc7e:	ea36 0304 	bics.w	r3, r6, r4
 800dc82:	bf0c      	ite	eq
 800dc84:	f04f 0c01 	moveq.w	ip, #1
 800dc88:	f04f 0c00 	movne.w	ip, #0
 800dc8c:	45ac      	cmp	ip, r5
 800dc8e:	d144      	bne.n	800dd1a <UART_WaitOnFlagUntilTimeout+0xb0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc90:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800dc94:	d0f2      	beq.n	800dc7c <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc96:	f7fc fb91 	bl	800a3bc <HAL_GetTick>
 800dc9a:	eba0 0009 	sub.w	r0, r0, r9
 800dc9e:	42b8      	cmp	r0, r7
 800dca0:	d825      	bhi.n	800dcee <UART_WaitOnFlagUntilTimeout+0x84>
 800dca2:	b327      	cbz	r7, 800dcee <UART_WaitOnFlagUntilTimeout+0x84>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dca4:	f8d8 3000 	ldr.w	r3, [r8]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	f012 0f04 	tst.w	r2, #4
 800dcae:	d0e3      	beq.n	800dc78 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcb0:	69da      	ldr	r2, [r3, #28]
 800dcb2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800dcb6:	d0df      	beq.n	800dc78 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dcbe:	f8d8 2000 	ldr.w	r2, [r8]
 800dcc2:	6813      	ldr	r3, [r2, #0]
 800dcc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dcc8:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcca:	f8d8 2000 	ldr.w	r2, [r8]
 800dcce:	6893      	ldr	r3, [r2, #8]
 800dcd0:	f023 0301 	bic.w	r3, r3, #1
 800dcd4:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dcd6:	2320      	movs	r3, #32
 800dcd8:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dcdc:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dce0:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dce4:	2300      	movs	r3, #0
 800dce6:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80

          return HAL_TIMEOUT;
 800dcea:	2003      	movs	r0, #3
 800dcec:	e016      	b.n	800dd1c <UART_WaitOnFlagUntilTimeout+0xb2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dcee:	f8d8 2000 	ldr.w	r2, [r8]
 800dcf2:	6813      	ldr	r3, [r2, #0]
 800dcf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dcf8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcfa:	f8d8 2000 	ldr.w	r2, [r8]
 800dcfe:	6893      	ldr	r3, [r2, #8]
 800dd00:	f023 0301 	bic.w	r3, r3, #1
 800dd04:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800dd06:	2320      	movs	r3, #32
 800dd08:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dd0c:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800dd10:	2300      	movs	r3, #0
 800dd12:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800dd16:	2003      	movs	r0, #3
 800dd18:	e000      	b.n	800dd1c <UART_WaitOnFlagUntilTimeout+0xb2>
        }
      }
    }
  }
  return HAL_OK;
 800dd1a:	2000      	movs	r0, #0
}
 800dd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dd20 <HAL_UART_Transmit>:
{
 800dd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800dd28:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800dd2c:	2b20      	cmp	r3, #32
 800dd2e:	d15f      	bne.n	800ddf0 <HAL_UART_Transmit+0xd0>
 800dd30:	4604      	mov	r4, r0
 800dd32:	460d      	mov	r5, r1
 800dd34:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800dd36:	2900      	cmp	r1, #0
 800dd38:	d05e      	beq.n	800ddf8 <HAL_UART_Transmit+0xd8>
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	d05c      	beq.n	800ddf8 <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 800dd3e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d05a      	beq.n	800ddfc <HAL_UART_Transmit+0xdc>
 800dd46:	2301      	movs	r3, #1
 800dd48:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd52:	2321      	movs	r3, #33	; 0x21
 800dd54:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800dd58:	f7fc fb30 	bl	800a3bc <HAL_GetTick>
 800dd5c:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800dd5e:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd62:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd66:	68a3      	ldr	r3, [r4, #8]
 800dd68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd6c:	d00d      	beq.n	800dd8a <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 800dd6e:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 800dd72:	2300      	movs	r3, #0
 800dd74:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800dd78:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	b35b      	cbz	r3, 800ddd8 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd80:	f04f 0900 	mov.w	r9, #0
 800dd84:	f04f 0880 	mov.w	r8, #128	; 0x80
 800dd88:	e015      	b.n	800ddb6 <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	b913      	cbnz	r3, 800dd94 <HAL_UART_Transmit+0x74>
      pdata16bits = (uint16_t *) pData;
 800dd8e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800dd90:	2500      	movs	r5, #0
 800dd92:	e7ee      	b.n	800dd72 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 800dd94:	f04f 0a00 	mov.w	sl, #0
 800dd98:	e7eb      	b.n	800dd72 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800dda0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800dda2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800dda6:	3a01      	subs	r2, #1
 800dda8:	b292      	uxth	r2, r2
 800ddaa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ddae:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	b183      	cbz	r3, 800ddd8 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddb6:	9600      	str	r6, [sp, #0]
 800ddb8:	463b      	mov	r3, r7
 800ddba:	464a      	mov	r2, r9
 800ddbc:	4641      	mov	r1, r8
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7ff ff53 	bl	800dc6a <UART_WaitOnFlagUntilTimeout>
 800ddc4:	b9e0      	cbnz	r0, 800de00 <HAL_UART_Transmit+0xe0>
      if (pdata8bits == NULL)
 800ddc6:	2d00      	cmp	r5, #0
 800ddc8:	d1e7      	bne.n	800dd9a <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ddca:	6822      	ldr	r2, [r4, #0]
 800ddcc:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800ddd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddd4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800ddd6:	e7e4      	b.n	800dda2 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ddd8:	9600      	str	r6, [sp, #0]
 800ddda:	463b      	mov	r3, r7
 800dddc:	2200      	movs	r2, #0
 800ddde:	2140      	movs	r1, #64	; 0x40
 800dde0:	4620      	mov	r0, r4
 800dde2:	f7ff ff42 	bl	800dc6a <UART_WaitOnFlagUntilTimeout>
 800dde6:	b968      	cbnz	r0, 800de04 <HAL_UART_Transmit+0xe4>
    huart->gState = HAL_UART_STATE_READY;
 800dde8:	2320      	movs	r3, #32
 800ddea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800ddee:	e000      	b.n	800ddf2 <HAL_UART_Transmit+0xd2>
    return HAL_BUSY;
 800ddf0:	2002      	movs	r0, #2
}
 800ddf2:	b002      	add	sp, #8
 800ddf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	e7fa      	b.n	800ddf2 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 800ddfc:	2002      	movs	r0, #2
 800ddfe:	e7f8      	b.n	800ddf2 <HAL_UART_Transmit+0xd2>
        return HAL_TIMEOUT;
 800de00:	2003      	movs	r0, #3
 800de02:	e7f6      	b.n	800ddf2 <HAL_UART_Transmit+0xd2>
      return HAL_TIMEOUT;
 800de04:	2003      	movs	r0, #3
 800de06:	e7f4      	b.n	800ddf2 <HAL_UART_Transmit+0xd2>

0800de08 <UART_CheckIdleState>:
{
 800de08:	b530      	push	{r4, r5, lr}
 800de0a:	b083      	sub	sp, #12
 800de0c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de0e:	2300      	movs	r3, #0
 800de10:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800de14:	f7fc fad2 	bl	800a3bc <HAL_GetTick>
 800de18:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de1a:	6822      	ldr	r2, [r4, #0]
 800de1c:	6812      	ldr	r2, [r2, #0]
 800de1e:	f012 0f08 	tst.w	r2, #8
 800de22:	d10f      	bne.n	800de44 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f013 0f04 	tst.w	r3, #4
 800de2c:	d118      	bne.n	800de60 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800de2e:	2320      	movs	r3, #32
 800de30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de38:	2000      	movs	r0, #0
 800de3a:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800de3c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800de40:	b003      	add	sp, #12
 800de42:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	4603      	mov	r3, r0
 800de4c:	2200      	movs	r2, #0
 800de4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de52:	4620      	mov	r0, r4
 800de54:	f7ff ff09 	bl	800dc6a <UART_WaitOnFlagUntilTimeout>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d0e3      	beq.n	800de24 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800de5c:	2003      	movs	r0, #3
 800de5e:	e7ef      	b.n	800de40 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	462b      	mov	r3, r5
 800de68:	2200      	movs	r2, #0
 800de6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de6e:	4620      	mov	r0, r4
 800de70:	f7ff fefb 	bl	800dc6a <UART_WaitOnFlagUntilTimeout>
 800de74:	2800      	cmp	r0, #0
 800de76:	d0da      	beq.n	800de2e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800de78:	2003      	movs	r0, #3
 800de7a:	e7e1      	b.n	800de40 <UART_CheckIdleState+0x38>

0800de7c <HAL_UART_Init>:
  if (huart == NULL)
 800de7c:	b378      	cbz	r0, 800dede <HAL_UART_Init+0x62>
{
 800de7e:	b510      	push	{r4, lr}
 800de80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800de82:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800de86:	b30b      	cbz	r3, 800decc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800de88:	2324      	movs	r3, #36	; 0x24
 800de8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	6813      	ldr	r3, [r2, #0]
 800de92:	f023 0301 	bic.w	r3, r3, #1
 800de96:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de98:	4620      	mov	r0, r4
 800de9a:	f7ff fb69 	bl	800d570 <UART_SetConfig>
 800de9e:	2801      	cmp	r0, #1
 800dea0:	d013      	beq.n	800deca <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dea4:	b9bb      	cbnz	r3, 800ded6 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	6853      	ldr	r3, [r2, #4]
 800deaa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800deae:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800deb0:	6822      	ldr	r2, [r4, #0]
 800deb2:	6893      	ldr	r3, [r2, #8]
 800deb4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800deb8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800deba:	6822      	ldr	r2, [r4, #0]
 800debc:	6813      	ldr	r3, [r2, #0]
 800debe:	f043 0301 	orr.w	r3, r3, #1
 800dec2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800dec4:	4620      	mov	r0, r4
 800dec6:	f7ff ff9f 	bl	800de08 <UART_CheckIdleState>
}
 800deca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800decc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800ded0:	f7fc f89e 	bl	800a010 <HAL_UART_MspInit>
 800ded4:	e7d8      	b.n	800de88 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff fe62 	bl	800dba0 <UART_AdvFeatureConfig>
 800dedc:	e7e3      	b.n	800dea6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800dede:	2001      	movs	r0, #1
}
 800dee0:	4770      	bx	lr
	...

0800dee4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dee4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dee6:	b92b      	cbnz	r3, 800def4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800dee8:	2301      	movs	r3, #1
 800deea:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800deee:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800def2:	4770      	bx	lr
{
 800def4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800def6:	6803      	ldr	r3, [r0, #0]
 800def8:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800defa:	6899      	ldr	r1, [r3, #8]
 800defc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800defe:	4d0a      	ldr	r5, [pc, #40]	; (800df28 <UARTEx_SetNbDataToProcess+0x44>)
 800df00:	5c6b      	ldrb	r3, [r5, r1]
 800df02:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800df04:	4c09      	ldr	r4, [pc, #36]	; (800df2c <UARTEx_SetNbDataToProcess+0x48>)
 800df06:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df08:	fb93 f3f1 	sdiv	r3, r3, r1
 800df0c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df10:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800df14:	5cab      	ldrb	r3, [r5, r2]
 800df16:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800df18:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800df1e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800df22:	bc30      	pop	{r4, r5}
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	24008c3c 	.word	0x24008c3c
 800df2c:	24008c34 	.word	0x24008c34

0800df30 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800df30:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800df34:	2b01      	cmp	r3, #1
 800df36:	d018      	beq.n	800df6a <HAL_UARTEx_DisableFifoMode+0x3a>
 800df38:	2301      	movs	r3, #1
 800df3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800df3e:	2324      	movs	r3, #36	; 0x24
 800df40:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df44:	6803      	ldr	r3, [r0, #0]
 800df46:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800df48:	6819      	ldr	r1, [r3, #0]
 800df4a:	f021 0101 	bic.w	r1, r1, #1
 800df4e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df50:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df54:	2300      	movs	r3, #0
 800df56:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df58:	6801      	ldr	r1, [r0, #0]
 800df5a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800df5c:	2220      	movs	r2, #32
 800df5e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800df62:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800df66:	4618      	mov	r0, r3
 800df68:	4770      	bx	lr
  __HAL_LOCK(huart);
 800df6a:	2002      	movs	r0, #2
}
 800df6c:	4770      	bx	lr

0800df6e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800df6e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800df70:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800df74:	2b01      	cmp	r3, #1
 800df76:	d01d      	beq.n	800dfb4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800df78:	4604      	mov	r4, r0
 800df7a:	2301      	movs	r3, #1
 800df7c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800df80:	2324      	movs	r3, #36	; 0x24
 800df82:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df86:	6803      	ldr	r3, [r0, #0]
 800df88:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	f022 0201 	bic.w	r2, r2, #1
 800df90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800df92:	6802      	ldr	r2, [r0, #0]
 800df94:	6893      	ldr	r3, [r2, #8]
 800df96:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800df9a:	4319      	orrs	r1, r3
 800df9c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800df9e:	f7ff ffa1 	bl	800dee4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800dfa6:	2320      	movs	r3, #32
 800dfa8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800dfac:	2000      	movs	r0, #0
 800dfae:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800dfb2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800dfb4:	2002      	movs	r0, #2
 800dfb6:	e7fc      	b.n	800dfb2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800dfb8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800dfb8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800dfba:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d01d      	beq.n	800dffe <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800dfca:	2324      	movs	r3, #36	; 0x24
 800dfcc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfd0:	6803      	ldr	r3, [r0, #0]
 800dfd2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	f022 0201 	bic.w	r2, r2, #1
 800dfda:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dfdc:	6802      	ldr	r2, [r0, #0]
 800dfde:	6893      	ldr	r3, [r2, #8]
 800dfe0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800dfe4:	4319      	orrs	r1, r3
 800dfe6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800dfe8:	f7ff ff7c 	bl	800dee4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800dff0:	2320      	movs	r3, #32
 800dff2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800dff6:	2000      	movs	r0, #0
 800dff8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800dffc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800dffe:	2002      	movs	r0, #2
 800e000:	e7fc      	b.n	800dffc <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800e004 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e004:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <USB_CoreReset+0x30>)
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e006:	6902      	ldr	r2, [r0, #16]
 800e008:	2a00      	cmp	r2, #0
 800e00a:	db03      	blt.n	800e014 <USB_CoreReset+0x10>
    if (++count > 200000U)
 800e00c:	3b01      	subs	r3, #1
 800e00e:	d1fa      	bne.n	800e006 <USB_CoreReset+0x2>
      return HAL_TIMEOUT;
 800e010:	2003      	movs	r0, #3
 800e012:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e014:	6903      	ldr	r3, [r0, #16]
 800e016:	f043 0301 	orr.w	r3, r3, #1
 800e01a:	6103      	str	r3, [r0, #16]
 800e01c:	4b05      	ldr	r3, [pc, #20]	; (800e034 <USB_CoreReset+0x30>)
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e01e:	6902      	ldr	r2, [r0, #16]
 800e020:	f012 0f01 	tst.w	r2, #1
 800e024:	d003      	beq.n	800e02e <USB_CoreReset+0x2a>
    if (++count > 200000U)
 800e026:	3b01      	subs	r3, #1
 800e028:	d1f9      	bne.n	800e01e <USB_CoreReset+0x1a>
      return HAL_TIMEOUT;
 800e02a:	2003      	movs	r0, #3

  return HAL_OK;
}
 800e02c:	4770      	bx	lr
  return HAL_OK;
 800e02e:	2000      	movs	r0, #0
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	00030d40 	.word	0x00030d40

0800e038 <USB_CoreInit>:
{
 800e038:	b084      	sub	sp, #16
 800e03a:	b510      	push	{r4, lr}
 800e03c:	4604      	mov	r4, r0
 800e03e:	a803      	add	r0, sp, #12
 800e040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e044:	9b08      	ldr	r3, [sp, #32]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d11d      	bne.n	800e086 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e04a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e04c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e050:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e052:	68e2      	ldr	r2, [r4, #12]
 800e054:	4b1d      	ldr	r3, [pc, #116]	; (800e0cc <USB_CoreInit+0x94>)
 800e056:	4013      	ands	r3, r2
 800e058:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e05a:	68e3      	ldr	r3, [r4, #12]
 800e05c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e060:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800e062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e064:	2b01      	cmp	r3, #1
 800e066:	d009      	beq.n	800e07c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 800e068:	4620      	mov	r0, r4
 800e06a:	f7ff ffcb 	bl	800e004 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800e06e:	9b06      	ldr	r3, [sp, #24]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d01b      	beq.n	800e0ac <USB_CoreInit+0x74>
}
 800e074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e078:	b004      	add	sp, #16
 800e07a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e07c:	68e3      	ldr	r3, [r4, #12]
 800e07e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e082:	60e3      	str	r3, [r4, #12]
 800e084:	e7f0      	b.n	800e068 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e086:	68e3      	ldr	r3, [r4, #12]
 800e088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e08c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff ffb8 	bl	800e004 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800e094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e096:	b923      	cbnz	r3, 800e0a2 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e09a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e09e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0a0:	e7e5      	b.n	800e06e <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0aa:	e7e0      	b.n	800e06e <USB_CoreInit+0x36>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e0ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e0b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e0b4:	4b06      	ldr	r3, [pc, #24]	; (800e0d0 <USB_CoreInit+0x98>)
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e0ba:	68a3      	ldr	r3, [r4, #8]
 800e0bc:	f043 0306 	orr.w	r3, r3, #6
 800e0c0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	f043 0320 	orr.w	r3, r3, #32
 800e0c8:	60a3      	str	r3, [r4, #8]
 800e0ca:	e7d3      	b.n	800e074 <USB_CoreInit+0x3c>
 800e0cc:	ffbdffbf 	.word	0xffbdffbf
 800e0d0:	03ee0000 	.word	0x03ee0000

0800e0d4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800e0d4:	2a02      	cmp	r2, #2
 800e0d6:	d00a      	beq.n	800e0ee <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e0d8:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e0da:	68c2      	ldr	r2, [r0, #12]
 800e0dc:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800e0e0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e0e2:	68c3      	ldr	r3, [r0, #12]
 800e0e4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800e0e8:	60c3      	str	r3, [r0, #12]
}
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e0ee:	4b20      	ldr	r3, [pc, #128]	; (800e170 <USB_SetTurnaroundTime+0x9c>)
 800e0f0:	440b      	add	r3, r1
 800e0f2:	4a20      	ldr	r2, [pc, #128]	; (800e174 <USB_SetTurnaroundTime+0xa0>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d92a      	bls.n	800e14e <USB_SetTurnaroundTime+0x7a>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e0f8:	4b1f      	ldr	r3, [pc, #124]	; (800e178 <USB_SetTurnaroundTime+0xa4>)
 800e0fa:	440b      	add	r3, r1
 800e0fc:	4a1f      	ldr	r2, [pc, #124]	; (800e17c <USB_SetTurnaroundTime+0xa8>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d927      	bls.n	800e152 <USB_SetTurnaroundTime+0x7e>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e102:	4b1f      	ldr	r3, [pc, #124]	; (800e180 <USB_SetTurnaroundTime+0xac>)
 800e104:	440b      	add	r3, r1
 800e106:	4a1f      	ldr	r2, [pc, #124]	; (800e184 <USB_SetTurnaroundTime+0xb0>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d924      	bls.n	800e156 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e10c:	4b1e      	ldr	r3, [pc, #120]	; (800e188 <USB_SetTurnaroundTime+0xb4>)
 800e10e:	440b      	add	r3, r1
 800e110:	4a1e      	ldr	r2, [pc, #120]	; (800e18c <USB_SetTurnaroundTime+0xb8>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d321      	bcc.n	800e15a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e116:	4b1e      	ldr	r3, [pc, #120]	; (800e190 <USB_SetTurnaroundTime+0xbc>)
 800e118:	440b      	add	r3, r1
 800e11a:	4a1e      	ldr	r2, [pc, #120]	; (800e194 <USB_SetTurnaroundTime+0xc0>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d91e      	bls.n	800e15e <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e120:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <USB_SetTurnaroundTime+0xc4>)
 800e122:	440b      	add	r3, r1
 800e124:	4a1d      	ldr	r2, [pc, #116]	; (800e19c <USB_SetTurnaroundTime+0xc8>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d31b      	bcc.n	800e162 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e12a:	4b1d      	ldr	r3, [pc, #116]	; (800e1a0 <USB_SetTurnaroundTime+0xcc>)
 800e12c:	440b      	add	r3, r1
 800e12e:	4a1d      	ldr	r2, [pc, #116]	; (800e1a4 <USB_SetTurnaroundTime+0xd0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d318      	bcc.n	800e166 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e134:	4b1c      	ldr	r3, [pc, #112]	; (800e1a8 <USB_SetTurnaroundTime+0xd4>)
 800e136:	440b      	add	r3, r1
 800e138:	4a1c      	ldr	r2, [pc, #112]	; (800e1ac <USB_SetTurnaroundTime+0xd8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d315      	bcc.n	800e16a <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e13e:	4b1c      	ldr	r3, [pc, #112]	; (800e1b0 <USB_SetTurnaroundTime+0xdc>)
 800e140:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800e142:	491c      	ldr	r1, [pc, #112]	; (800e1b4 <USB_SetTurnaroundTime+0xe0>)
 800e144:	428b      	cmp	r3, r1
 800e146:	bf34      	ite	cc
 800e148:	2107      	movcc	r1, #7
 800e14a:	2106      	movcs	r1, #6
 800e14c:	e7c5      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800e14e:	210f      	movs	r1, #15
 800e150:	e7c3      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800e152:	210e      	movs	r1, #14
 800e154:	e7c1      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800e156:	210d      	movs	r1, #13
 800e158:	e7bf      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800e15a:	210c      	movs	r1, #12
 800e15c:	e7bd      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800e15e:	210b      	movs	r1, #11
 800e160:	e7bb      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800e162:	210a      	movs	r1, #10
 800e164:	e7b9      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800e166:	2109      	movs	r1, #9
 800e168:	e7b7      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800e16a:	2108      	movs	r1, #8
 800e16c:	e7b5      	b.n	800e0da <USB_SetTurnaroundTime+0x6>
 800e16e:	bf00      	nop
 800e170:	ff275340 	.word	0xff275340
 800e174:	000c34ff 	.word	0x000c34ff
 800e178:	ff1b1e40 	.word	0xff1b1e40
 800e17c:	000f423f 	.word	0x000f423f
 800e180:	ff0bdc00 	.word	0xff0bdc00
 800e184:	00124f7f 	.word	0x00124f7f
 800e188:	fef98c80 	.word	0xfef98c80
 800e18c:	0013d620 	.word	0x0013d620
 800e190:	fee5b660 	.word	0xfee5b660
 800e194:	0016e35f 	.word	0x0016e35f
 800e198:	feced300 	.word	0xfeced300
 800e19c:	001b7740 	.word	0x001b7740
 800e1a0:	feb35bc0 	.word	0xfeb35bc0
 800e1a4:	002191c0 	.word	0x002191c0
 800e1a8:	fe91ca00 	.word	0xfe91ca00
 800e1ac:	00387520 	.word	0x00387520
 800e1b0:	fe5954e0 	.word	0xfe5954e0
 800e1b4:	00419ce0 	.word	0x00419ce0

0800e1b8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e1b8:	6883      	ldr	r3, [r0, #8]
 800e1ba:	f043 0301 	orr.w	r3, r3, #1
 800e1be:	6083      	str	r3, [r0, #8]
}
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	4770      	bx	lr

0800e1c4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e1c4:	6883      	ldr	r3, [r0, #8]
 800e1c6:	f023 0301 	bic.w	r3, r3, #1
 800e1ca:	6083      	str	r3, [r0, #8]
}
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	4770      	bx	lr

0800e1d0 <USB_SetCurrentMode>:
{
 800e1d0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1d2:	68c3      	ldr	r3, [r0, #12]
 800e1d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e1d8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e1da:	2901      	cmp	r1, #1
 800e1dc:	d009      	beq.n	800e1f2 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800e1de:	b969      	cbnz	r1, 800e1fc <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e1e0:	68c3      	ldr	r3, [r0, #12]
 800e1e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1e6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800e1e8:	2032      	movs	r0, #50	; 0x32
 800e1ea:	f7fc f8ed 	bl	800a3c8 <HAL_Delay>
  return HAL_OK;
 800e1ee:	2000      	movs	r0, #0
}
 800e1f0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e1f2:	68c3      	ldr	r3, [r0, #12]
 800e1f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1f8:	60c3      	str	r3, [r0, #12]
 800e1fa:	e7f5      	b.n	800e1e8 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	e7f7      	b.n	800e1f0 <USB_SetCurrentMode+0x20>

0800e200 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e200:	0189      	lsls	r1, r1, #6
 800e202:	f041 0120 	orr.w	r1, r1, #32
 800e206:	6101      	str	r1, [r0, #16]
 800e208:	4b05      	ldr	r3, [pc, #20]	; (800e220 <USB_FlushTxFifo+0x20>)
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e20a:	6902      	ldr	r2, [r0, #16]
 800e20c:	f012 0f20 	tst.w	r2, #32
 800e210:	d003      	beq.n	800e21a <USB_FlushTxFifo+0x1a>
    if (++count > 200000U)
 800e212:	3b01      	subs	r3, #1
 800e214:	d1f9      	bne.n	800e20a <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800e216:	2003      	movs	r0, #3
}
 800e218:	4770      	bx	lr
  return HAL_OK;
 800e21a:	2000      	movs	r0, #0
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	00030d40 	.word	0x00030d40

0800e224 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e224:	2310      	movs	r3, #16
 800e226:	6103      	str	r3, [r0, #16]
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <USB_FlushRxFifo+0x1c>)
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e22a:	6902      	ldr	r2, [r0, #16]
 800e22c:	f012 0f10 	tst.w	r2, #16
 800e230:	d003      	beq.n	800e23a <USB_FlushRxFifo+0x16>
    if (++count > 200000U)
 800e232:	3b01      	subs	r3, #1
 800e234:	d1f9      	bne.n	800e22a <USB_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 800e236:	2003      	movs	r0, #3
}
 800e238:	4770      	bx	lr
  return HAL_OK;
 800e23a:	2000      	movs	r0, #0
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	00030d40 	.word	0x00030d40

0800e244 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800e244:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800e248:	4319      	orrs	r1, r3
 800e24a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800e24e:	2000      	movs	r0, #0
 800e250:	4770      	bx	lr
	...

0800e254 <USB_DevInit>:
{
 800e254:	b084      	sub	sp, #16
 800e256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e25a:	4604      	mov	r4, r0
 800e25c:	a809      	add	r0, sp, #36	; 0x24
 800e25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e262:	460d      	mov	r5, r1
 800e264:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 800e266:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 800e268:	4619      	mov	r1, r3
 800e26a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e26e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e272:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800e274:	3301      	adds	r3, #1
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d1f7      	bne.n	800e26a <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 800e27a:	bb26      	cbnz	r6, 800e2c6 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e27c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800e280:	f043 0302 	orr.w	r3, r3, #2
 800e284:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e28a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e28e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e296:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e2a6:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 800e2aa:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800e2ae:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d110      	bne.n	800e2da <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 800e2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2ba:	b94b      	cbnz	r3, 800e2d0 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f7ff ffc0 	bl	800e244 <USB_SetDevSpeed>
 800e2c4:	e00d      	b.n	800e2e2 <USB_DevInit+0x8e>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e2c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800e2ce:	e7e7      	b.n	800e2a0 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e2d0:	2101      	movs	r1, #1
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f7ff ffb6 	bl	800e244 <USB_SetDevSpeed>
 800e2d8:	e003      	b.n	800e2e2 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e2da:	2103      	movs	r1, #3
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f7ff ffb1 	bl	800e244 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e2e2:	2110      	movs	r1, #16
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f7ff ff8b 	bl	800e200 <USB_FlushTxFifo>
 800e2ea:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7ff ff99 	bl	800e224 <USB_FlushRxFifo>
 800e2f2:	ea48 0800 	orr.w	r8, r8, r0
 800e2f6:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 800e2fa:	bf14      	ite	ne
 800e2fc:	f04f 0e01 	movne.w	lr, #1
 800e300:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e308:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e30a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	d03f      	beq.n	800e390 <USB_DevInit+0x13c>
 800e310:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800e314:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 800e316:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e318:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e31c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e320:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800e324:	e00a      	b.n	800e33c <USB_DevInit+0xe8>
      if (i == 0U)
 800e326:	b182      	cbz	r2, 800e34a <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e328:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e32c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e330:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e334:	3201      	adds	r2, #1
 800e336:	3320      	adds	r3, #32
 800e338:	4295      	cmp	r5, r2
 800e33a:	d009      	beq.n	800e350 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e33c:	4619      	mov	r1, r3
 800e33e:	6818      	ldr	r0, [r3, #0]
 800e340:	2800      	cmp	r0, #0
 800e342:	dbf0      	blt.n	800e326 <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 800e344:	f8c3 c000 	str.w	ip, [r3]
 800e348:	e7f0      	b.n	800e32c <USB_DevInit+0xd8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e34a:	f8c3 a000 	str.w	sl, [r3]
 800e34e:	e7ed      	b.n	800e32c <USB_DevInit+0xd8>
 800e350:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e354:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e356:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e358:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e35c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e360:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800e364:	e00a      	b.n	800e37c <USB_DevInit+0x128>
      if (i == 0U)
 800e366:	b182      	cbz	r2, 800e38a <USB_DevInit+0x136>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e368:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e36c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e370:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e374:	3201      	adds	r2, #1
 800e376:	3320      	adds	r3, #32
 800e378:	4295      	cmp	r5, r2
 800e37a:	d009      	beq.n	800e390 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e37c:	4619      	mov	r1, r3
 800e37e:	6818      	ldr	r0, [r3, #0]
 800e380:	2800      	cmp	r0, #0
 800e382:	dbf0      	blt.n	800e366 <USB_DevInit+0x112>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e384:	f8c3 c000 	str.w	ip, [r3]
 800e388:	e7f0      	b.n	800e36c <USB_DevInit+0x118>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e38a:	f8c3 a000 	str.w	sl, [r3]
 800e38e:	e7ed      	b.n	800e36c <USB_DevInit+0x118>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e396:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800e398:	2300      	movs	r3, #0
 800e39a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e39c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800e3a0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800e3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3a4:	b91b      	cbnz	r3, 800e3ae <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e3a6:	69a3      	ldr	r3, [r4, #24]
 800e3a8:	f043 0310 	orr.w	r3, r3, #16
 800e3ac:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e3ae:	69a2      	ldr	r2, [r4, #24]
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <USB_DevInit+0x188>)
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800e3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3b8:	b11b      	cbz	r3, 800e3c2 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e3ba:	69a3      	ldr	r3, [r4, #24]
 800e3bc:	f043 0308 	orr.w	r3, r3, #8
 800e3c0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800e3c2:	2e01      	cmp	r6, #1
 800e3c4:	d004      	beq.n	800e3d0 <USB_DevInit+0x17c>
}
 800e3c6:	4670      	mov	r0, lr
 800e3c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3cc:	b004      	add	sp, #16
 800e3ce:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e3d0:	69a2      	ldr	r2, [r4, #24]
 800e3d2:	4b03      	ldr	r3, [pc, #12]	; (800e3e0 <USB_DevInit+0x18c>)
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	61a3      	str	r3, [r4, #24]
 800e3d8:	e7f5      	b.n	800e3c6 <USB_DevInit+0x172>
 800e3da:	bf00      	nop
 800e3dc:	803c3800 	.word	0x803c3800
 800e3e0:	40000004 	.word	0x40000004

0800e3e4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3e4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800e3e8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3ec:	f013 0f06 	tst.w	r3, #6
 800e3f0:	d005      	beq.n	800e3fe <USB_GetDevSpeed+0x1a>
    speed = 0xFU;
 800e3f2:	f013 0f02 	tst.w	r3, #2
 800e3f6:	bf14      	ite	ne
 800e3f8:	2002      	movne	r0, #2
 800e3fa:	200f      	moveq	r0, #15
 800e3fc:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800e3fe:	2000      	movs	r0, #0
}
 800e400:	4770      	bx	lr
	...

0800e404 <USB_ActivateEndpoint>:
{
 800e404:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800e406:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800e408:	784b      	ldrb	r3, [r1, #1]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d020      	beq.n	800e450 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e40e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800e412:	f002 0e0f 	and.w	lr, r2, #15
 800e416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e41a:	fa03 f30e 	lsl.w	r3, r3, lr
 800e41e:	4323      	orrs	r3, r4
 800e420:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e424:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e428:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e42c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e430:	d10c      	bne.n	800e44c <USB_ActivateEndpoint+0x48>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e432:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e436:	688b      	ldr	r3, [r1, #8]
 800e438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e43c:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 800e43e:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e440:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800e444:	4a12      	ldr	r2, [pc, #72]	; (800e490 <USB_ActivateEndpoint+0x8c>)
 800e446:	431a      	orrs	r2, r3
 800e448:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800e44c:	2000      	movs	r0, #0
 800e44e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e450:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800e454:	f002 0c0f 	and.w	ip, r2, #15
 800e458:	fa03 f30c 	lsl.w	r3, r3, ip
 800e45c:	432b      	orrs	r3, r5
 800e45e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e462:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e466:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e46a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e46e:	d1ed      	bne.n	800e44c <USB_ActivateEndpoint+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e470:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800e474:	688b      	ldr	r3, [r1, #8]
 800e476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e47a:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e47c:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e47e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800e482:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800e486:	4b02      	ldr	r3, [pc, #8]	; (800e490 <USB_ActivateEndpoint+0x8c>)
 800e488:	4313      	orrs	r3, r2
 800e48a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e48e:	e7dd      	b.n	800e44c <USB_ActivateEndpoint+0x48>
 800e490:	10008000 	.word	0x10008000

0800e494 <USB_DeactivateEndpoint>:
{
 800e494:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800e496:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e498:	784a      	ldrb	r2, [r1, #1]
 800e49a:	2a01      	cmp	r2, #1
 800e49c:	d026      	beq.n	800e4ec <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e49e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e4a2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e4a6:	2a00      	cmp	r2, #0
 800e4a8:	db50      	blt.n	800e54c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e4aa:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800e4ae:	780a      	ldrb	r2, [r1, #0]
 800e4b0:	f002 020f 	and.w	r2, r2, #15
 800e4b4:	f04f 0c01 	mov.w	ip, #1
 800e4b8:	fa0c f202 	lsl.w	r2, ip, r2
 800e4bc:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800e4c0:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e4c4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800e4c8:	7809      	ldrb	r1, [r1, #0]
 800e4ca:	f001 010f 	and.w	r1, r1, #15
 800e4ce:	fa0c fc01 	lsl.w	ip, ip, r1
 800e4d2:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800e4d6:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e4da:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800e4de:	4a22      	ldr	r2, [pc, #136]	; (800e568 <USB_DeactivateEndpoint+0xd4>)
 800e4e0:	400a      	ands	r2, r1
 800e4e2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	bc30      	pop	{r4, r5}
 800e4ea:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e4f0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800e4f4:	2a00      	cmp	r2, #0
 800e4f6:	db1c      	blt.n	800e532 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e4f8:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800e4fc:	780a      	ldrb	r2, [r1, #0]
 800e4fe:	f002 020f 	and.w	r2, r2, #15
 800e502:	2401      	movs	r4, #1
 800e504:	fa04 f202 	lsl.w	r2, r4, r2
 800e508:	ea25 0202 	bic.w	r2, r5, r2
 800e50c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e510:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800e514:	7809      	ldrb	r1, [r1, #0]
 800e516:	f001 010f 	and.w	r1, r1, #15
 800e51a:	408c      	lsls	r4, r1
 800e51c:	ea22 0404 	bic.w	r4, r2, r4
 800e520:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e524:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800e528:	4a10      	ldr	r2, [pc, #64]	; (800e56c <USB_DeactivateEndpoint+0xd8>)
 800e52a:	400a      	ands	r2, r1
 800e52c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800e530:	e7d9      	b.n	800e4e6 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e532:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800e536:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e53a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e53e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800e542:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e546:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800e54a:	e7d5      	b.n	800e4f8 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e54c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e550:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e554:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e558:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e55c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e560:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800e564:	e7a1      	b.n	800e4aa <USB_DeactivateEndpoint+0x16>
 800e566:	bf00      	nop
 800e568:	eff37800 	.word	0xeff37800
 800e56c:	ec337800 	.word	0xec337800

0800e570 <USB_EP0StartXfer>:
{
 800e570:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800e572:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e574:	784c      	ldrb	r4, [r1, #1]
 800e576:	2c01      	cmp	r4, #1
 800e578:	d024      	beq.n	800e5c4 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e57a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e57e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800e582:	691d      	ldr	r5, [r3, #16]
 800e584:	4c3e      	ldr	r4, [pc, #248]	; (800e680 <USB_EP0StartXfer+0x110>)
 800e586:	402c      	ands	r4, r5
 800e588:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e58a:	691d      	ldr	r5, [r3, #16]
 800e58c:	4c3d      	ldr	r4, [pc, #244]	; (800e684 <USB_EP0StartXfer+0x114>)
 800e58e:	402c      	ands	r4, r5
 800e590:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800e592:	694c      	ldr	r4, [r1, #20]
 800e594:	b10c      	cbz	r4, 800e59a <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800e596:	688c      	ldr	r4, [r1, #8]
 800e598:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e59a:	691c      	ldr	r4, [r3, #16]
 800e59c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e5a0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e5a2:	691d      	ldr	r5, [r3, #16]
 800e5a4:	688c      	ldr	r4, [r1, #8]
 800e5a6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800e5aa:	432c      	orrs	r4, r5
 800e5ac:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800e5ae:	2a01      	cmp	r2, #1
 800e5b0:	d061      	beq.n	800e676 <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e5b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e5b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e5be:	2000      	movs	r0, #0
 800e5c0:	bc70      	pop	{r4, r5, r6}
 800e5c2:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800e5c4:	694c      	ldr	r4, [r1, #20]
 800e5c6:	bb5c      	cbnz	r4, 800e620 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5c8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800e5cc:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e5d0:	4d2c      	ldr	r5, [pc, #176]	; (800e684 <USB_EP0StartXfer+0x114>)
 800e5d2:	4035      	ands	r5, r6
 800e5d4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5d8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800e5dc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e5e0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5e4:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e5e8:	4d25      	ldr	r5, [pc, #148]	; (800e680 <USB_EP0StartXfer+0x110>)
 800e5ea:	4035      	ands	r5, r6
 800e5ec:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800e5f0:	2a01      	cmp	r2, #1
 800e5f2:	d031      	beq.n	800e658 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5f4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e5f8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800e5fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e600:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800e604:	694b      	ldr	r3, [r1, #20]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d0d9      	beq.n	800e5be <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e60a:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800e60e:	780b      	ldrb	r3, [r1, #0]
 800e610:	f003 020f 	and.w	r2, r3, #15
 800e614:	2301      	movs	r3, #1
 800e616:	4093      	lsls	r3, r2
 800e618:	4323      	orrs	r3, r4
 800e61a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800e61e:	e7ce      	b.n	800e5be <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e620:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800e624:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800e628:	6926      	ldr	r6, [r4, #16]
 800e62a:	4d15      	ldr	r5, [pc, #84]	; (800e680 <USB_EP0StartXfer+0x110>)
 800e62c:	4035      	ands	r5, r6
 800e62e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e630:	6926      	ldr	r6, [r4, #16]
 800e632:	4d14      	ldr	r5, [pc, #80]	; (800e684 <USB_EP0StartXfer+0x114>)
 800e634:	4035      	ands	r5, r6
 800e636:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e638:	688d      	ldr	r5, [r1, #8]
 800e63a:	694e      	ldr	r6, [r1, #20]
 800e63c:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 800e63e:	bf88      	it	hi
 800e640:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e642:	6925      	ldr	r5, [r4, #16]
 800e644:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e648:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e64a:	6926      	ldr	r6, [r4, #16]
 800e64c:	694d      	ldr	r5, [r1, #20]
 800e64e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800e652:	4335      	orrs	r5, r6
 800e654:	6125      	str	r5, [r4, #16]
 800e656:	e7cb      	b.n	800e5f0 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 800e658:	690a      	ldr	r2, [r1, #16]
 800e65a:	b11a      	cbz	r2, 800e664 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e65c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800e660:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e664:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e668:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e66c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e670:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800e674:	e7a3      	b.n	800e5be <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800e676:	68ca      	ldr	r2, [r1, #12]
 800e678:	2a00      	cmp	r2, #0
 800e67a:	d09a      	beq.n	800e5b2 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e67c:	615a      	str	r2, [r3, #20]
 800e67e:	e798      	b.n	800e5b2 <USB_EP0StartXfer+0x42>
 800e680:	fff80000 	.word	0xfff80000
 800e684:	e007ffff 	.word	0xe007ffff

0800e688 <USB_WritePacket>:
{
 800e688:	b410      	push	{r4}
 800e68a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800e68e:	b974      	cbnz	r4, 800e6ae <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e690:	3303      	adds	r3, #3
 800e692:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800e696:	2b03      	cmp	r3, #3
 800e698:	d909      	bls.n	800e6ae <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e69a:	3201      	adds	r2, #1
 800e69c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 800e6a0:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e6a2:	f851 2b04 	ldr.w	r2, [r1], #4
 800e6a6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	459c      	cmp	ip, r3
 800e6ac:	d8f9      	bhi.n	800e6a2 <USB_WritePacket+0x1a>
}
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b4:	4770      	bx	lr
	...

0800e6b8 <USB_EPStartXfer>:
{
 800e6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ba:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800e6bc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e6be:	784c      	ldrb	r4, [r1, #1]
 800e6c0:	2c01      	cmp	r4, #1
 800e6c2:	d031      	beq.n	800e728 <USB_EPStartXfer+0x70>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6c4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e6c8:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800e6cc:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800e6d0:	4c79      	ldr	r4, [pc, #484]	; (800e8b8 <USB_EPStartXfer+0x200>)
 800e6d2:	402c      	ands	r4, r5
 800e6d4:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e6d8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800e6dc:	4c77      	ldr	r4, [pc, #476]	; (800e8bc <USB_EPStartXfer+0x204>)
 800e6de:	402c      	ands	r4, r5
 800e6e0:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 800e6e4:	694c      	ldr	r4, [r1, #20]
 800e6e6:	2c00      	cmp	r4, #0
 800e6e8:	f040 80b7 	bne.w	800e85a <USB_EPStartXfer+0x1a2>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e6ec:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800e6f0:	688c      	ldr	r4, [r1, #8]
 800e6f2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800e6f6:	432c      	orrs	r4, r5
 800e6f8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6fc:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800e700:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e704:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800e708:	2a01      	cmp	r2, #1
 800e70a:	f000 80c0 	beq.w	800e88e <USB_EPStartXfer+0x1d6>
    if (ep->type == EP_TYPE_ISOC)
 800e70e:	78ca      	ldrb	r2, [r1, #3]
 800e710:	2a01      	cmp	r2, #1
 800e712:	f000 80c3 	beq.w	800e89c <USB_EPStartXfer+0x1e4>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e716:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e71a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e71e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800e722:	2000      	movs	r0, #0
 800e724:	b003      	add	sp, #12
 800e726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800e728:	694c      	ldr	r4, [r1, #20]
 800e72a:	bb74      	cbnz	r4, 800e78a <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e72c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800e730:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e734:	4d61      	ldr	r5, [pc, #388]	; (800e8bc <USB_EPStartXfer+0x204>)
 800e736:	4035      	ands	r5, r6
 800e738:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e73c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800e740:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e744:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e748:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e74c:	4d5a      	ldr	r5, [pc, #360]	; (800e8b8 <USB_EPStartXfer+0x200>)
 800e74e:	4035      	ands	r5, r6
 800e750:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800e754:	2a01      	cmp	r2, #1
 800e756:	d04a      	beq.n	800e7ee <USB_EPStartXfer+0x136>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e758:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e75c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800e760:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800e764:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800e768:	78cc      	ldrb	r4, [r1, #3]
 800e76a:	2c01      	cmp	r4, #1
 800e76c:	d061      	beq.n	800e832 <USB_EPStartXfer+0x17a>
        if (ep->xfer_len > 0U)
 800e76e:	694b      	ldr	r3, [r1, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d0d6      	beq.n	800e722 <USB_EPStartXfer+0x6a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e774:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800e778:	780b      	ldrb	r3, [r1, #0]
 800e77a:	f003 020f 	and.w	r2, r3, #15
 800e77e:	2301      	movs	r3, #1
 800e780:	4093      	lsls	r3, r2
 800e782:	4323      	orrs	r3, r4
 800e784:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800e788:	e7cb      	b.n	800e722 <USB_EPStartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e78a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800e78e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e792:	4d49      	ldr	r5, [pc, #292]	; (800e8b8 <USB_EPStartXfer+0x200>)
 800e794:	4035      	ands	r5, r6
 800e796:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e79a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e79e:	4d47      	ldr	r5, [pc, #284]	; (800e8bc <USB_EPStartXfer+0x204>)
 800e7a0:	4035      	ands	r5, r6
 800e7a2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e7a6:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800e7aa:	688e      	ldr	r6, [r1, #8]
 800e7ac:	694d      	ldr	r5, [r1, #20]
 800e7ae:	4435      	add	r5, r6
 800e7b0:	3d01      	subs	r5, #1
 800e7b2:	fbb5 f5f6 	udiv	r5, r5, r6
 800e7b6:	4e42      	ldr	r6, [pc, #264]	; (800e8c0 <USB_EPStartXfer+0x208>)
 800e7b8:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800e7bc:	433d      	orrs	r5, r7
 800e7be:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e7c2:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800e7c6:	694d      	ldr	r5, [r1, #20]
 800e7c8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800e7cc:	4335      	orrs	r5, r6
 800e7ce:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7d2:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800e7d6:	78cd      	ldrb	r5, [r1, #3]
 800e7d8:	2d01      	cmp	r5, #1
 800e7da:	d1bb      	bne.n	800e754 <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e7dc:	6925      	ldr	r5, [r4, #16]
 800e7de:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800e7e2:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e7e4:	6925      	ldr	r5, [r4, #16]
 800e7e6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e7ea:	6125      	str	r5, [r4, #16]
 800e7ec:	e7b2      	b.n	800e754 <USB_EPStartXfer+0x9c>
      if ((uint32_t)ep->dma_addr != 0U)
 800e7ee:	690a      	ldr	r2, [r1, #16]
 800e7f0:	b11a      	cbz	r2, 800e7fa <USB_EPStartXfer+0x142>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e7f2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800e7f6:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800e7fa:	78ca      	ldrb	r2, [r1, #3]
 800e7fc:	2a01      	cmp	r2, #1
 800e7fe:	d008      	beq.n	800e812 <USB_EPStartXfer+0x15a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e800:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e804:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800e808:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e80c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800e810:	e787      	b.n	800e722 <USB_EPStartXfer+0x6a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e812:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800e816:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e81a:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800e81e:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800e822:	bf0c      	ite	eq
 800e824:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e828:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800e82c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800e830:	e7e6      	b.n	800e800 <USB_EPStartXfer+0x148>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e832:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800e836:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e83a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800e83e:	bf0c      	ite	eq
 800e840:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e844:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800e848:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e84c:	9200      	str	r2, [sp, #0]
 800e84e:	8a8b      	ldrh	r3, [r1, #20]
 800e850:	780a      	ldrb	r2, [r1, #0]
 800e852:	68c9      	ldr	r1, [r1, #12]
 800e854:	f7ff ff18 	bl	800e688 <USB_WritePacket>
 800e858:	e763      	b.n	800e722 <USB_EPStartXfer+0x6a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e85a:	688d      	ldr	r5, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e85c:	f8dc 6010 	ldr.w	r6, [ip, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e860:	442c      	add	r4, r5
 800e862:	3c01      	subs	r4, #1
 800e864:	fbb4 f4f5 	udiv	r4, r4, r5
 800e868:	fa1f fe84 	uxth.w	lr, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e86c:	4d14      	ldr	r5, [pc, #80]	; (800e8c0 <USB_EPStartXfer+0x208>)
 800e86e:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 800e872:	4334      	orrs	r4, r6
 800e874:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e878:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800e87c:	688c      	ldr	r4, [r1, #8]
 800e87e:	fb04 f40e 	mul.w	r4, r4, lr
 800e882:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800e886:	432c      	orrs	r4, r5
 800e888:	f8cc 4010 	str.w	r4, [ip, #16]
 800e88c:	e73c      	b.n	800e708 <USB_EPStartXfer+0x50>
      if ((uint32_t)ep->xfer_buff != 0U)
 800e88e:	68ca      	ldr	r2, [r1, #12]
 800e890:	2a00      	cmp	r2, #0
 800e892:	f43f af3c 	beq.w	800e70e <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e896:	f8cc 2014 	str.w	r2, [ip, #20]
 800e89a:	e738      	b.n	800e70e <USB_EPStartXfer+0x56>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e89c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800e8a0:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e8a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e8a8:	bf0c      	ite	eq
 800e8aa:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e8ae:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800e8b2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800e8b6:	e72e      	b.n	800e716 <USB_EPStartXfer+0x5e>
 800e8b8:	fff80000 	.word	0xfff80000
 800e8bc:	e007ffff 	.word	0xe007ffff
 800e8c0:	1ff80000 	.word	0x1ff80000

0800e8c4 <USB_ReadPacket>:
{
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 800e8c8:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800e8cc:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 800e8d0:	d01b      	beq.n	800e90a <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 800e8d2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800e8d4:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e8d6:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 800e8da:	f8de 4000 	ldr.w	r4, [lr]
 800e8de:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	459c      	cmp	ip, r3
 800e8e6:	d1f8      	bne.n	800e8da <USB_ReadPacket+0x16>
    pDest++;
 800e8e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 800e8ec:	b165      	cbz	r5, 800e908 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e8ee:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800e8f2:	6834      	ldr	r4, [r6, #0]
 800e8f4:	1941      	adds	r1, r0, r5
 800e8f6:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e8f8:	fa24 f203 	lsr.w	r2, r4, r3
 800e8fc:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 800e900:	3308      	adds	r3, #8
 800e902:	4288      	cmp	r0, r1
 800e904:	d1f8      	bne.n	800e8f8 <USB_ReadPacket+0x34>
      pDest++;
 800e906:	4608      	mov	r0, r1
}
 800e908:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800e90a:	4608      	mov	r0, r1
 800e90c:	e7ee      	b.n	800e8ec <USB_ReadPacket+0x28>

0800e90e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800e90e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e910:	784a      	ldrb	r2, [r1, #1]
 800e912:	2a01      	cmp	r2, #1
 800e914:	d00e      	beq.n	800e934 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e916:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e91a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e91e:	b10b      	cbz	r3, 800e924 <USB_EPSetStall+0x16>
 800e920:	2a00      	cmp	r2, #0
 800e922:	da1c      	bge.n	800e95e <USB_EPSetStall+0x50>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e924:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e92c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e930:	2000      	movs	r0, #0
 800e932:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e934:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e938:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e93c:	b10b      	cbz	r3, 800e942 <USB_EPSetStall+0x34>
 800e93e:	2a00      	cmp	r2, #0
 800e940:	da06      	bge.n	800e950 <USB_EPSetStall+0x42>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e942:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e94a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e94e:	e7ef      	b.n	800e930 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e950:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e958:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e95c:	e7f1      	b.n	800e942 <USB_EPSetStall+0x34>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e95e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e966:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e96a:	e7db      	b.n	800e924 <USB_EPSetStall+0x16>

0800e96c <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800e96c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e96e:	784a      	ldrb	r2, [r1, #1]
 800e970:	2a01      	cmp	r2, #1
 800e972:	d00e      	beq.n	800e992 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e974:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e978:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e97c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e980:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e984:	78cb      	ldrb	r3, [r1, #3]
 800e986:	3b02      	subs	r3, #2
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d915      	bls.n	800e9ba <USB_EPClearStall+0x4e>
}
 800e98e:	2000      	movs	r0, #0
 800e990:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e992:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e996:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e99a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e99e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9a2:	78cb      	ldrb	r3, [r1, #3]
 800e9a4:	3b02      	subs	r3, #2
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d8f0      	bhi.n	800e98e <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9ac:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9b4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e9b8:	e7e9      	b.n	800e98e <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e9be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e9c6:	e7e2      	b.n	800e98e <USB_EPClearStall+0x22>

0800e9c8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e9c8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800e9cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e9d0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e9d4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800e9d8:	0109      	lsls	r1, r1, #4
 800e9da:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800e9de:	4319      	orrs	r1, r3
 800e9e0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	4770      	bx	lr

0800e9e8 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9e8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800e9ec:	f023 0303 	bic.w	r3, r3, #3
 800e9f0:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e9f4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800e9f8:	f023 0302 	bic.w	r3, r3, #2
 800e9fc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800ea00:	2000      	movs	r0, #0
 800ea02:	4770      	bx	lr

0800ea04 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea04:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800ea08:	f023 0303 	bic.w	r3, r3, #3
 800ea0c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea10:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ea14:	f043 0302 	orr.w	r3, r3, #2
 800ea18:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	4770      	bx	lr

0800ea20 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800ea20:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800ea22:	6980      	ldr	r0, [r0, #24]
}
 800ea24:	4010      	ands	r0, r2
 800ea26:	4770      	bx	lr

0800ea28 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ea28:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ea2c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea30:	69c0      	ldr	r0, [r0, #28]
 800ea32:	4018      	ands	r0, r3
}
 800ea34:	0c00      	lsrs	r0, r0, #16
 800ea36:	4770      	bx	lr

0800ea38 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ea38:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ea3c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea40:	69c0      	ldr	r0, [r0, #28]
 800ea42:	4018      	ands	r0, r3
}
 800ea44:	b280      	uxth	r0, r0
 800ea46:	4770      	bx	lr

0800ea48 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea48:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ea4c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea50:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ea54:	6940      	ldr	r0, [r0, #20]
}
 800ea56:	4010      	ands	r0, r2
 800ea58:	4770      	bx	lr

0800ea5a <USB_ReadDevInEPInterrupt>:
{
 800ea5a:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800ea5c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ea60:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ea64:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800ea68:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800ea6c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ea6e:	f001 010f 	and.w	r1, r1, #15
 800ea72:	40cb      	lsrs	r3, r1
 800ea74:	01db      	lsls	r3, r3, #7
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	4323      	orrs	r3, r4
}
 800ea7a:	4018      	ands	r0, r3
 800ea7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800ea82:	6940      	ldr	r0, [r0, #20]
}
 800ea84:	f000 0001 	and.w	r0, r0, #1
 800ea88:	4770      	bx	lr
	...

0800ea8c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ea8c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800ea90:	4b05      	ldr	r3, [pc, #20]	; (800eaa8 <USB_ActivateSetup+0x1c>)
 800ea92:	4013      	ands	r3, r2
 800ea94:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ea98:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ea9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaa0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	4770      	bx	lr
 800eaa8:	fffff800 	.word	0xfffff800

0800eaac <USB_EP0_OutStart>:
{
 800eaac:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eaae:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eab0:	4b15      	ldr	r3, [pc, #84]	; (800eb08 <USB_EP0_OutStart+0x5c>)
 800eab2:	429c      	cmp	r4, r3
 800eab4:	d903      	bls.n	800eabe <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eab6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	db16      	blt.n	800eaec <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eabe:	2400      	movs	r4, #0
 800eac0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eac4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800eac8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800eacc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ead0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800ead4:	f044 0418 	orr.w	r4, r4, #24
 800ead8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eadc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800eae0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800eae4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800eae8:	2901      	cmp	r1, #1
 800eaea:	d003      	beq.n	800eaf4 <USB_EP0_OutStart+0x48>
}
 800eaec:	2000      	movs	r0, #0
 800eaee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaf2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800eaf4:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eaf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800eafc:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800eb00:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800eb04:	e7f2      	b.n	800eaec <USB_EP0_OutStart+0x40>
 800eb06:	bf00      	nop
 800eb08:	4f54300a 	.word	0x4f54300a

0800eb0c <getRxBuffer>:




 int8_t getRxBuffer(uint8_t *au8BufferIn, uint8_t bufferlen )
 {
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	4605      	mov	r5, r0
 800eb10:	460e      	mov	r6, r1

	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     if (bufferlen >= MAX_BUFFER)
 800eb12:	f7fa fda3 	bl	800965c <__sanitizer_cov_trace_pc>
 800eb16:	2e3f      	cmp	r6, #63	; 0x3f
 800eb18:	d80c      	bhi.n	800eb34 <getRxBuffer+0x28>
         return ERR_BUFF_OVERFLOW;
     }



     for (ModbusH->u8BufferSize = 0; ModbusH->u8BufferSize < bufferlen; ModbusH->u8BufferSize++)
 800eb1a:	f7fa fd9f 	bl	800965c <__sanitizer_cov_trace_pc>
 800eb1e:	4b2c      	ldr	r3, [pc, #176]	; (800ebd0 <getRxBuffer+0xc4>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 800eb26:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	429e      	cmp	r6, r3
 800eb2e:	d940      	bls.n	800ebb2 <getRxBuffer+0xa6>
     {
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = au8BufferIn[ModbusH->u8BufferSize];
 800eb30:	4c27      	ldr	r4, [pc, #156]	; (800ebd0 <getRxBuffer+0xc4>)
 800eb32:	e01a      	b.n	800eb6a <getRxBuffer+0x5e>
    	 ModbusH->u16errCnt++;
 800eb34:	f7fa fd92 	bl	800965c <__sanitizer_cov_trace_pc>
 800eb38:	4a25      	ldr	r2, [pc, #148]	; (800ebd0 <getRxBuffer+0xc4>)
 800eb3a:	f8b2 30d0 	ldrh.w	r3, [r2, #208]	; 0xd0
 800eb3e:	3301      	adds	r3, #1
 800eb40:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0
         return ERR_BUFF_OVERFLOW;
 800eb44:	f06f 0402 	mvn.w	r4, #2
 800eb48:	e03e      	b.n	800ebc8 <getRxBuffer+0xbc>
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = au8BufferIn[ModbusH->u8BufferSize];
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	f7fa fb84 	bl	8009258 <__asan_report_load1>
 800eb50:	4423      	add	r3, r4
 800eb52:	7159      	strb	r1, [r3, #5]
     for (ModbusH->u8BufferSize = 0; ModbusH->u8BufferSize < bufferlen; ModbusH->u8BufferSize++)
 800eb54:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800eb58:	3301      	adds	r3, #1
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
 800eb60:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	42b3      	cmp	r3, r6
 800eb68:	d223      	bcs.n	800ebb2 <getRxBuffer+0xa6>
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = au8BufferIn[ModbusH->u8BufferSize];
 800eb6a:	f7fa fd77 	bl	800965c <__sanitizer_cov_trace_pc>
 800eb6e:	f894 20c6 	ldrb.w	r2, [r4, #198]	; 0xc6
 800eb72:	b2d0      	uxtb	r0, r2
 800eb74:	442a      	add	r2, r5
 800eb76:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	08d1      	lsrs	r1, r2, #3
 800eb7e:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 800eb82:	f991 1000 	ldrsb.w	r1, [r1]
 800eb86:	f002 0c07 	and.w	ip, r2, #7
 800eb8a:	458c      	cmp	ip, r1
 800eb8c:	db01      	blt.n	800eb92 <getRxBuffer+0x86>
 800eb8e:	2900      	cmp	r1, #0
 800eb90:	d1db      	bne.n	800eb4a <getRxBuffer+0x3e>
 800eb92:	5c29      	ldrb	r1, [r5, r0]
 800eb94:	18e0      	adds	r0, r4, r3
 800eb96:	3005      	adds	r0, #5
 800eb98:	08c2      	lsrs	r2, r0, #3
 800eb9a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800eb9e:	f992 2000 	ldrsb.w	r2, [r2]
 800eba2:	f000 0c07 	and.w	ip, r0, #7
 800eba6:	4594      	cmp	ip, r2
 800eba8:	dbd2      	blt.n	800eb50 <getRxBuffer+0x44>
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d0d0      	beq.n	800eb50 <getRxBuffer+0x44>
 800ebae:	f7fa fb4b 	bl	8009248 <__asan_report_store1>

     }

     ModbusH->u16InCnt++;
 800ebb2:	f7fa fd53 	bl	800965c <__sanitizer_cov_trace_pc>
 800ebb6:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <getRxBuffer+0xc4>)
 800ebb8:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800ebbc:	3201      	adds	r2, #1
 800ebbe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc


     return ModbusH->u8BufferSize;
 800ebc2:	f893 40c6 	ldrb.w	r4, [r3, #198]	; 0xc6
 800ebc6:	b264      	sxtb	r4, r4
 800ebc8:	f7fa fd48 	bl	800965c <__sanitizer_cov_trace_pc>
 }
 800ebcc:	4620      	mov	r0, r4
 800ebce:	bd70      	pop	{r4, r5, r6, pc}
 800ebd0:	24030000 	.word	0x24030000

0800ebd4 <buildException>:


 void buildException( uint8_t u8exception )
 {
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	4604      	mov	r4, r0
	 modbusHandler_t* ModbusH = (modbusHandler_t *)ModbusH_Region;
     uint8_t u8func = ModbusH->au8Buffer[ FUNC ];  // get the original FUNC code
 800ebd8:	f7fa fd40 	bl	800965c <__sanitizer_cov_trace_pc>
 800ebdc:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <buildException+0x20>)
 800ebde:	799a      	ldrb	r2, [r3, #6]

     ModbusH->au8Buffer[ ID ]      = ModbusH->u8id;
 800ebe0:	7819      	ldrb	r1, [r3, #0]
 800ebe2:	7159      	strb	r1, [r3, #5]
     ModbusH->au8Buffer[ FUNC ]    = u8func + 0x80;
 800ebe4:	3a80      	subs	r2, #128	; 0x80
 800ebe6:	719a      	strb	r2, [r3, #6]
     ModbusH->au8Buffer[ 2 ]       = u8exception;
 800ebe8:	71dc      	strb	r4, [r3, #7]
     ModbusH->u8BufferSize         = EXCEPTION_SIZE;
 800ebea:	2203      	movs	r2, #3
 800ebec:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 }
 800ebf0:	bd10      	pop	{r4, pc}
 800ebf2:	bf00      	nop
 800ebf4:	24030000 	.word	0x24030000

0800ebf8 <calcCRC>:


 uint16_t calcCRC(uint8_t u8length)
 {
 800ebf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebfc:	4604      	mov	r4, r0
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     unsigned int temp, temp2, flag;
     temp = 0xFFFF;
     for (unsigned char i = 0; i < u8length; i++)
 800ebfe:	f7fa fd2d 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec02:	b3bc      	cbz	r4, 800ec74 <calcCRC+0x7c>
 800ec04:	4b20      	ldr	r3, [pc, #128]	; (800ec88 <calcCRC+0x90>)
 800ec06:	1d5e      	adds	r6, r3, #5
 800ec08:	3c01      	subs	r4, #1
 800ec0a:	3306      	adds	r3, #6
 800ec0c:	fa53 f884 	uxtab	r8, r3, r4
     temp = 0xFFFF;
 800ec10:	f64f 75ff 	movw	r5, #65535	; 0xffff
     {
         temp = temp ^ ModbusH->au8Buffer[i];
 800ec14:	f04f 0908 	mov.w	r9, #8
         for (unsigned char j = 1; j <= 8; j++)
         {
             flag = temp & 0x0001;
             temp >>=1;
             if (flag)
                 temp ^= 0xA001;
 800ec18:	f24a 0701 	movw	r7, #40961	; 0xa001
 800ec1c:	e016      	b.n	800ec4c <calcCRC+0x54>
         temp = temp ^ ModbusH->au8Buffer[i];
 800ec1e:	f7fa fb1b 	bl	8009258 <__asan_report_load1>
         for (unsigned char j = 1; j <= 8; j++)
 800ec22:	f7fa fd1b 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec26:	1e63      	subs	r3, r4, #1
 800ec28:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800ec2c:	d00a      	beq.n	800ec44 <calcCRC+0x4c>
             flag = temp & 0x0001;
 800ec2e:	f7fa fd15 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec32:	f005 0301 	and.w	r3, r5, #1
             temp >>=1;
 800ec36:	086d      	lsrs	r5, r5, #1
             if (flag)
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d0f2      	beq.n	800ec22 <calcCRC+0x2a>
                 temp ^= 0xA001;
 800ec3c:	f7fa fd0e 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec40:	407d      	eors	r5, r7
 800ec42:	e7ee      	b.n	800ec22 <calcCRC+0x2a>
     for (unsigned char i = 0; i < u8length; i++)
 800ec44:	f7fa fd0a 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec48:	4546      	cmp	r6, r8
 800ec4a:	d015      	beq.n	800ec78 <calcCRC+0x80>
         temp = temp ^ ModbusH->au8Buffer[i];
 800ec4c:	f7fa fd06 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec50:	4632      	mov	r2, r6
 800ec52:	4630      	mov	r0, r6
 800ec54:	08f3      	lsrs	r3, r6, #3
 800ec56:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800ec5a:	f993 3000 	ldrsb.w	r3, [r3]
 800ec5e:	f006 0107 	and.w	r1, r6, #7
 800ec62:	4299      	cmp	r1, r3
 800ec64:	db01      	blt.n	800ec6a <calcCRC+0x72>
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1d9      	bne.n	800ec1e <calcCRC+0x26>
 800ec6a:	3601      	adds	r6, #1
 800ec6c:	7813      	ldrb	r3, [r2, #0]
 800ec6e:	405d      	eors	r5, r3
 800ec70:	464c      	mov	r4, r9
 800ec72:	e7dc      	b.n	800ec2e <calcCRC+0x36>
     temp = 0xFFFF;
 800ec74:	f64f 75ff 	movw	r5, #65535	; 0xffff
         }
     }
     // Reverse byte order.
     temp2 = temp >> 8;
 800ec78:	f7fa fcf0 	bl	800965c <__sanitizer_cov_trace_pc>
     temp = (temp << 8) | temp2;
 800ec7c:	0228      	lsls	r0, r5, #8
 800ec7e:	ea40 2015 	orr.w	r0, r0, r5, lsr #8
     temp &= 0xFFFF;
     // the returned value is already swapped
     // crcLo byte is first & crcHi byte is last
     return temp;
 }
 800ec82:	b280      	uxth	r0, r0
 800ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec88:	24030000 	.word	0x24030000

0800ec8c <sendTxBuffer>:
 {
 800ec8c:	b510      	push	{r4, lr}
     uint16_t u16crc = calcCRC( ModbusH->u8BufferSize );
 800ec8e:	f7fa fce5 	bl	800965c <__sanitizer_cov_trace_pc>
 800ec92:	4c23      	ldr	r4, [pc, #140]	; (800ed20 <sendTxBuffer+0x94>)
 800ec94:	f894 00c6 	ldrb.w	r0, [r4, #198]	; 0xc6
 800ec98:	f7ff ffae 	bl	800ebf8 <calcCRC>
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc >> 8;
 800ec9c:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800eca6:	441c      	add	r4, r3
 800eca8:	3405      	adds	r4, #5
 800ecaa:	08e3      	lsrs	r3, r4, #3
 800ecac:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800ecb0:	f993 3000 	ldrsb.w	r3, [r3]
 800ecb4:	f004 0c07 	and.w	ip, r4, #7
 800ecb8:	459c      	cmp	ip, r3
 800ecba:	db00      	blt.n	800ecbe <sendTxBuffer+0x32>
 800ecbc:	bb53      	cbnz	r3, 800ed14 <sendTxBuffer+0x88>
 800ecbe:	4b18      	ldr	r3, [pc, #96]	; (800ed20 <sendTxBuffer+0x94>)
 800ecc0:	441a      	add	r2, r3
 800ecc2:	7151      	strb	r1, [r2, #5]
     ModbusH->u8BufferSize++;
 800ecc4:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 800ecc8:	3201      	adds	r2, #1
 800ecca:	b2d2      	uxtb	r2, r2
 800eccc:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc & 0x00ff;
 800ecd0:	f893 10c6 	ldrb.w	r1, [r3, #198]	; 0xc6
 800ecd4:	b2ca      	uxtb	r2, r1
 800ecd6:	b2c0      	uxtb	r0, r0
 800ecd8:	440b      	add	r3, r1
 800ecda:	3305      	adds	r3, #5
 800ecdc:	08d9      	lsrs	r1, r3, #3
 800ecde:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 800ece2:	f991 1000 	ldrsb.w	r1, [r1]
 800ece6:	f003 0407 	and.w	r4, r3, #7
 800ecea:	428c      	cmp	r4, r1
 800ecec:	db00      	blt.n	800ecf0 <sendTxBuffer+0x64>
 800ecee:	b9a1      	cbnz	r1, 800ed1a <sendTxBuffer+0x8e>
 800ecf0:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <sendTxBuffer+0x94>)
 800ecf2:	441a      	add	r2, r3
 800ecf4:	7150      	strb	r0, [r2, #5]
     ModbusH->u8BufferSize++;
 800ecf6:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 800ecfa:	3201      	adds	r2, #1
 800ecfc:	b2d2      	uxtb	r2, r2
 800ecfe:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     ModbusH->u8BufferSize = 0;
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     ModbusH->u16OutCnt++;
 800ed08:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
 800ed0c:	3201      	adds	r2, #1
 800ed0e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 }
 800ed12:	bd10      	pop	{r4, pc}
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc >> 8;
 800ed14:	4620      	mov	r0, r4
 800ed16:	f7fa fa97 	bl	8009248 <__asan_report_store1>
     ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = u16crc & 0x00ff;
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fa fa94 	bl	8009248 <__asan_report_store1>
 800ed20:	24030000 	.word	0x24030000

0800ed24 <validateRequest>:


 uint8_t validateRequest()
 {
 800ed24:	b570      	push	{r4, r5, r6, lr}
     // check message crc vs calculated crc
     // The assumption that last 2 bytes in the frame are CRC doesn't hold during fuzzing
	 modbusHandler_t* ModbusH = (modbusHandler_t *)ModbusH_Region;
     uint16_t u16MsgCRC =
         ((ModbusH->au8Buffer[ModbusH->u8BufferSize - 2] << 8)
 800ed26:	f7fa fc99 	bl	800965c <__sanitizer_cov_trace_pc>
 800ed2a:	4d4d      	ldr	r5, [pc, #308]	; (800ee60 <validateRequest+0x13c>)
 800ed2c:	f895 30c6 	ldrb.w	r3, [r5, #198]	; 0xc6
          | ModbusH->au8Buffer[ModbusH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800ed30:	f895 30c6 	ldrb.w	r3, [r5, #198]	; 0xc6

     // check fct code
     bool isSupported = false;
     for (uint8_t i = 0; i< sizeof( ModbusH->fctsupported ); i++)
     {
         if (ModbusH->fctsupported[i] == ModbusH->au8Buffer[FUNC])
 800ed34:	79ae      	ldrb	r6, [r5, #6]
 800ed36:	f105 04dd 	add.w	r4, r5, #221	; 0xdd
 800ed3a:	35e5      	adds	r5, #229	; 0xe5
 800ed3c:	e007      	b.n	800ed4e <validateRequest+0x2a>
 800ed3e:	3401      	adds	r4, #1
 800ed40:	7813      	ldrb	r3, [r2, #0]
 800ed42:	42b3      	cmp	r3, r6
 800ed44:	d056      	beq.n	800edf4 <validateRequest+0xd0>
     for (uint8_t i = 0; i< sizeof( ModbusH->fctsupported ); i++)
 800ed46:	f7fa fc89 	bl	800965c <__sanitizer_cov_trace_pc>
 800ed4a:	42ac      	cmp	r4, r5
 800ed4c:	d07a      	beq.n	800ee44 <validateRequest+0x120>
         if (ModbusH->fctsupported[i] == ModbusH->au8Buffer[FUNC])
 800ed4e:	f7fa fc85 	bl	800965c <__sanitizer_cov_trace_pc>
 800ed52:	4622      	mov	r2, r4
 800ed54:	4620      	mov	r0, r4
 800ed56:	08e3      	lsrs	r3, r4, #3
 800ed58:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800ed5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ed60:	f004 0107 	and.w	r1, r4, #7
 800ed64:	4299      	cmp	r1, r3
 800ed66:	dbea      	blt.n	800ed3e <validateRequest+0x1a>
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d0e8      	beq.n	800ed3e <validateRequest+0x1a>
 800ed6c:	f7fa fa74 	bl	8009258 <__asan_report_load1>
     switch ( ModbusH->au8Buffer[ FUNC ] )
     {
     case MB_FC_READ_COILS:
     case MB_FC_READ_DISCRETE_INPUT:
     case MB_FC_WRITE_MULTIPLE_COILS:
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 800ed70:	f7fa fc74 	bl	800965c <__sanitizer_cov_trace_pc>
 800ed74:	4a3a      	ldr	r2, [pc, #232]	; (800ee60 <validateRequest+0x13c>)
 800ed76:	79d4      	ldrb	r4, [r2, #7]
 	W.u8[0] = L;
 800ed78:	7a13      	ldrb	r3, [r2, #8]
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 800ed7a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
         u16regs += word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ]) /16;
 800ed7e:	7a51      	ldrb	r1, [r2, #9]
 	W.u8[0] = L;
 800ed80:	7a93      	ldrb	r3, [r2, #10]
         u16regs += word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ]) /16;
 800ed82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed86:	091b      	lsrs	r3, r3, #4
 800ed88:	eb03 1314 	add.w	r3, r3, r4, lsr #4
         u8regs = (uint8_t) u16regs;
         if (u8regs > ModbusH->u8regsize)
 800ed8c:	f892 40dc 	ldrb.w	r4, [r2, #220]	; 0xdc
 800ed90:	b2db      	uxtb	r3, r3
         {
        	 //printf("EXC_ADDR_RANGE!\n");
        	 return EXC_ADDR_RANGE;
 800ed92:	429c      	cmp	r4, r3
 800ed94:	bf34      	ite	cc
 800ed96:	2402      	movcc	r4, #2
 800ed98:	2400      	movcs	r4, #0
 800ed9a:	e05c      	b.n	800ee56 <validateRequest+0x132>
         }

         break;
     case MB_FC_WRITE_COIL:
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 800ed9c:	f7fa fc5e 	bl	800965c <__sanitizer_cov_trace_pc>
 800eda0:	4a2f      	ldr	r2, [pc, #188]	; (800ee60 <validateRequest+0x13c>)
 800eda2:	79d4      	ldrb	r4, [r2, #7]
 	W.u8[0] = L;
 800eda4:	7a13      	ldrb	r3, [r2, #8]
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]) / 16;
 800eda6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
         u8regs = (uint8_t) u16regs;
         if (u8regs > ModbusH->u8regsize)
 800edaa:	f892 40dc 	ldrb.w	r4, [r2, #220]	; 0xdc
 800edae:	f3c3 1307 	ubfx	r3, r3, #4, #8
         {
        	 //printf("EXC_ADDR_RANGE!\n");
        	 return EXC_ADDR_RANGE;
 800edb2:	429c      	cmp	r4, r3
 800edb4:	bf34      	ite	cc
 800edb6:	2402      	movcc	r4, #2
 800edb8:	2400      	movcs	r4, #0
 800edba:	e04c      	b.n	800ee56 <validateRequest+0x132>
         }
         break;
     case MB_FC_WRITE_REGISTER :
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]);
 800edbc:	f7fa fc4e 	bl	800965c <__sanitizer_cov_trace_pc>
 800edc0:	4b27      	ldr	r3, [pc, #156]	; (800ee60 <validateRequest+0x13c>)
         u8regs = (uint8_t) u16regs;
         if (u8regs > ModbusH->u8regsize)
 800edc2:	f893 40dc 	ldrb.w	r4, [r3, #220]	; 0xdc
 800edc6:	7a1b      	ldrb	r3, [r3, #8]
         {
           	 //printf("EXC_ADDR_RANGE!\n");
           	 return EXC_ADDR_RANGE;
 800edc8:	429c      	cmp	r4, r3
 800edca:	bf34      	ite	cc
 800edcc:	2402      	movcc	r4, #2
 800edce:	2400      	movcs	r4, #0
 800edd0:	e041      	b.n	800ee56 <validateRequest+0x132>
         }
         break;
     case MB_FC_READ_REGISTERS :
     case MB_FC_READ_INPUT_REGISTER :
     case MB_FC_WRITE_MULTIPLE_REGISTERS :
         u16regs = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ]);
 800edd2:	f7fa fc43 	bl	800965c <__sanitizer_cov_trace_pc>
 800edd6:	4a22      	ldr	r2, [pc, #136]	; (800ee60 <validateRequest+0x13c>)
 	W.u8[0] = L;
 800edd8:	7a14      	ldrb	r4, [r2, #8]
 800edda:	7a93      	ldrb	r3, [r2, #10]
         u16regs += word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ]);
 800eddc:	4423      	add	r3, r4
         u8regs = (uint8_t) u16regs;
         if (u8regs > ModbusH->u8regsize)
 800edde:	f892 40dc 	ldrb.w	r4, [r2, #220]	; 0xdc
 800ede2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
         {
           	 //printf("EXC_ADDR_RANGE!\n");
           	 return EXC_ADDR_RANGE;
 800ede6:	429c      	cmp	r4, r3
 800ede8:	bf34      	ite	cc
 800edea:	2402      	movcc	r4, #2
 800edec:	2400      	movcs	r4, #0
 800edee:	e032      	b.n	800ee56 <validateRequest+0x132>
     switch ( ModbusH->au8Buffer[ FUNC ] )
 800edf0:	2400      	movs	r4, #0
 800edf2:	e030      	b.n	800ee56 <validateRequest+0x132>
 800edf4:	f7fa fc32 	bl	800965c <__sanitizer_cov_trace_pc>
 800edf8:	3e01      	subs	r6, #1
 800edfa:	2e0f      	cmp	r6, #15
 800edfc:	d8f8      	bhi.n	800edf0 <validateRequest+0xcc>
 800edfe:	a301      	add	r3, pc, #4	; (adr r3, 800ee04 <validateRequest+0xe0>)
 800ee00:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800ee04:	0800ed71 	.word	0x0800ed71
 800ee08:	0800ed71 	.word	0x0800ed71
 800ee0c:	0800edd3 	.word	0x0800edd3
 800ee10:	0800edd3 	.word	0x0800edd3
 800ee14:	0800ed9d 	.word	0x0800ed9d
 800ee18:	0800edbd 	.word	0x0800edbd
 800ee1c:	0800edf1 	.word	0x0800edf1
 800ee20:	0800edf1 	.word	0x0800edf1
 800ee24:	0800edf1 	.word	0x0800edf1
 800ee28:	0800edf1 	.word	0x0800edf1
 800ee2c:	0800edf1 	.word	0x0800edf1
 800ee30:	0800edf1 	.word	0x0800edf1
 800ee34:	0800edf1 	.word	0x0800edf1
 800ee38:	0800edf1 	.word	0x0800edf1
 800ee3c:	0800ed71 	.word	0x0800ed71
 800ee40:	0800edd3 	.word	0x0800edd3
    	 ModbusH->u16errCnt ++;
 800ee44:	f7fa fc0a 	bl	800965c <__sanitizer_cov_trace_pc>
 800ee48:	4a05      	ldr	r2, [pc, #20]	; (800ee60 <validateRequest+0x13c>)
 800ee4a:	f8b2 30d0 	ldrh.w	r3, [r2, #208]	; 0xd0
 800ee4e:	3301      	adds	r3, #1
 800ee50:	f8a2 30d0 	strh.w	r3, [r2, #208]	; 0xd0
         return EXC_FUNC_CODE;
 800ee54:	2401      	movs	r4, #1
 800ee56:	f7fa fc01 	bl	800965c <__sanitizer_cov_trace_pc>
         }
         break;
     }
     return 0; // OK, no exception code thrown
 }
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	bf00      	nop
 800ee60:	24030000 	.word	0x24030000

0800ee64 <process_FC1>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC1( uint16_t *regs, uint8_t u8size )
 {
 800ee64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee68:	4680      	mov	r8, r0
     uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
     //uint8_t u8CopyBufferSize;
     uint16_t u16currentCoil, u16coil;

     // get the first and last coil from the message
     uint16_t u16StartCoil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 800ee6a:	f7fa fbf7 	bl	800965c <__sanitizer_cov_trace_pc>
 800ee6e:	4b53      	ldr	r3, [pc, #332]	; (800efbc <process_FC1+0x158>)
 800ee70:	79da      	ldrb	r2, [r3, #7]
 	W.u8[0] = L;
 800ee72:	7a1d      	ldrb	r5, [r3, #8]
 	return W.u16[0];
 800ee74:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
     uint16_t u16Coilno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 800ee78:	7a5a      	ldrb	r2, [r3, #9]
 	W.u8[0] = L;
 800ee7a:	f893 900a 	ldrb.w	r9, [r3, #10]
 	return W.u16[0];
 800ee7e:	ea49 2902 	orr.w	r9, r9, r2, lsl #8

     // put the number of bytes in the outcoming message
     u8bytesno = (uint8_t) (u16Coilno / 8);
 800ee82:	f3c9 04c7 	ubfx	r4, r9, #3, #8
     if (u16Coilno % 8 != 0) u8bytesno ++;
 800ee86:	f019 0b07 	ands.w	fp, r9, #7
 800ee8a:	d00d      	beq.n	800eea8 <process_FC1+0x44>
 800ee8c:	f7fa fbe6 	bl	800965c <__sanitizer_cov_trace_pc>
     ModbusH->au8Buffer[ ADD_HI ]  = u8bytesno;
 800ee90:	4b4a      	ldr	r3, [pc, #296]	; (800efbc <process_FC1+0x158>)
     if (u16Coilno % 8 != 0) u8bytesno ++;
 800ee92:	3401      	adds	r4, #1
     ModbusH->au8Buffer[ ADD_HI ]  = u8bytesno;
 800ee94:	71dc      	strb	r4, [r3, #7]
     ModbusH->u8BufferSize         = ADD_LO;
 800ee96:	2203      	movs	r2, #3
 800ee98:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 {
 800ee9c:	2700      	movs	r7, #0
 800ee9e:	463c      	mov	r4, r7
         u16coil = u16StartCoil + u16currentCoil;
         // 16 bits per register
         u8currentRegister = (uint8_t) (u16coil / 16);
         u8currentBit = (uint8_t) (u16coil % 16);

         bitWrite(
 800eea0:	4e46      	ldr	r6, [pc, #280]	; (800efbc <process_FC1+0x158>)
 800eea2:	f04f 0a01 	mov.w	sl, #1
 800eea6:	e029      	b.n	800eefc <process_FC1+0x98>
     ModbusH->au8Buffer[ ADD_HI ]  = u8bytesno;
 800eea8:	f7fa fbd8 	bl	800965c <__sanitizer_cov_trace_pc>
 800eeac:	4b43      	ldr	r3, [pc, #268]	; (800efbc <process_FC1+0x158>)
 800eeae:	71dc      	strb	r4, [r3, #7]
     ModbusH->u8BufferSize         = ADD_LO;
 800eeb0:	2203      	movs	r2, #3
 800eeb2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eeb6:	f1b9 0f00 	cmp.w	r9, #0
 800eeba:	d1ef      	bne.n	800ee9c <process_FC1+0x38>
 800eebc:	e076      	b.n	800efac <process_FC1+0x148>
         bitWrite(
 800eebe:	f7fa f9cf 	bl	8009260 <__asan_report_load2>
 800eec2:	4433      	add	r3, r6
 800eec4:	fa0a f204 	lsl.w	r2, sl, r4
 800eec8:	7959      	ldrb	r1, [r3, #5]
 800eeca:	430a      	orrs	r2, r1
 800eecc:	715a      	strb	r2, [r3, #5]
        	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ],
             u8bitsno,
             // out of bound read can happen here
             bitRead( regs[ u8currentRegister ], u8currentBit ) );
         u8bitsno ++;
 800eece:	f7fa fbc5 	bl	800965c <__sanitizer_cov_trace_pc>
 800eed2:	3401      	adds	r4, #1
 800eed4:	b2e4      	uxtb	r4, r4

         if (u8bitsno > 7)
 800eed6:	2c07      	cmp	r4, #7
 800eed8:	d908      	bls.n	800eeec <process_FC1+0x88>
         {
             u8bitsno = 0;
             ModbusH->u8BufferSize++;
 800eeda:	f7fa fbbf 	bl	800965c <__sanitizer_cov_trace_pc>
 800eede:	f896 30c6 	ldrb.w	r3, [r6, #198]	; 0xc6
 800eee2:	3301      	adds	r3, #1
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	f886 30c6 	strb.w	r3, [r6, #198]	; 0xc6
             u8bitsno = 0;
 800eeea:	2400      	movs	r4, #0
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eeec:	f7fa fbb6 	bl	800965c <__sanitizer_cov_trace_pc>
 800eef0:	3701      	adds	r7, #1
 800eef2:	3501      	adds	r5, #1
 800eef4:	b2ad      	uxth	r5, r5
 800eef6:	b2bb      	uxth	r3, r7
 800eef8:	4599      	cmp	r9, r3
 800eefa:	d949      	bls.n	800ef90 <process_FC1+0x12c>
         u16coil = u16StartCoil + u16currentCoil;
 800eefc:	f7fa fbae 	bl	800965c <__sanitizer_cov_trace_pc>
         u8currentBit = (uint8_t) (u16coil % 16);
 800ef00:	f005 010f 	and.w	r1, r5, #15
         bitWrite(
 800ef04:	f3c5 1307 	ubfx	r3, r5, #4, #8
 800ef08:	eb08 0043 	add.w	r0, r8, r3, lsl #1
 800ef0c:	08c2      	lsrs	r2, r0, #3
 800ef0e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800ef12:	f992 c000 	ldrsb.w	ip, [r2]
 800ef16:	f000 0207 	and.w	r2, r0, #7
 800ef1a:	3201      	adds	r2, #1
 800ef1c:	4562      	cmp	r2, ip
 800ef1e:	db02      	blt.n	800ef26 <process_FC1+0xc2>
 800ef20:	f1bc 0f00 	cmp.w	ip, #0
 800ef24:	d1cb      	bne.n	800eebe <process_FC1+0x5a>
 800ef26:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 800ef2a:	410b      	asrs	r3, r1
 800ef2c:	f013 0f01 	tst.w	r3, #1
 800ef30:	d013      	beq.n	800ef5a <process_FC1+0xf6>
 800ef32:	f7fa fb93 	bl	800965c <__sanitizer_cov_trace_pc>
 800ef36:	f896 00c6 	ldrb.w	r0, [r6, #198]	; 0xc6
 800ef3a:	b2c3      	uxtb	r3, r0
 800ef3c:	4430      	add	r0, r6
 800ef3e:	3005      	adds	r0, #5
 800ef40:	08c2      	lsrs	r2, r0, #3
 800ef42:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800ef46:	f992 2000 	ldrsb.w	r2, [r2]
 800ef4a:	f000 0107 	and.w	r1, r0, #7
 800ef4e:	4291      	cmp	r1, r2
 800ef50:	dbb7      	blt.n	800eec2 <process_FC1+0x5e>
 800ef52:	2a00      	cmp	r2, #0
 800ef54:	d0b5      	beq.n	800eec2 <process_FC1+0x5e>
 800ef56:	f7fa f97f 	bl	8009258 <__asan_report_load1>
 800ef5a:	f7fa fb7f 	bl	800965c <__sanitizer_cov_trace_pc>
 800ef5e:	f896 00c6 	ldrb.w	r0, [r6, #198]	; 0xc6
 800ef62:	b2c3      	uxtb	r3, r0
 800ef64:	4430      	add	r0, r6
 800ef66:	3005      	adds	r0, #5
 800ef68:	08c2      	lsrs	r2, r0, #3
 800ef6a:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800ef6e:	f992 2000 	ldrsb.w	r2, [r2]
 800ef72:	f000 0107 	and.w	r1, r0, #7
 800ef76:	4291      	cmp	r1, r2
 800ef78:	db00      	blt.n	800ef7c <process_FC1+0x118>
 800ef7a:	b93a      	cbnz	r2, 800ef8c <process_FC1+0x128>
 800ef7c:	4433      	add	r3, r6
 800ef7e:	fa0a f204 	lsl.w	r2, sl, r4
 800ef82:	7959      	ldrb	r1, [r3, #5]
 800ef84:	ea21 0202 	bic.w	r2, r1, r2
 800ef88:	715a      	strb	r2, [r3, #5]
 800ef8a:	e7a0      	b.n	800eece <process_FC1+0x6a>
 800ef8c:	f7fa f964 	bl	8009258 <__asan_report_load1>
         }
     }

     // send outcoming message
     // TODO seems not necessary, verify it!
     if (u16Coilno % 8 != 0) ModbusH->u8BufferSize ++;
 800ef90:	f7fa fb64 	bl	800965c <__sanitizer_cov_trace_pc>
 800ef94:	f1bb 0f00 	cmp.w	fp, #0
 800ef98:	d008      	beq.n	800efac <process_FC1+0x148>
 800ef9a:	f7fa fb5f 	bl	800965c <__sanitizer_cov_trace_pc>
 800ef9e:	4a07      	ldr	r2, [pc, #28]	; (800efbc <process_FC1+0x158>)
 800efa0:	f892 30c6 	ldrb.w	r3, [r2, #198]	; 0xc6
 800efa4:	3301      	adds	r3, #1
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	f882 30c6 	strb.w	r3, [r2, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 800efac:	f7fa fb56 	bl	800965c <__sanitizer_cov_trace_pc>
 800efb0:	f7ff fe6c 	bl	800ec8c <sendTxBuffer>
     return FAULT_NONE;
 }
 800efb4:	2000      	movs	r0, #0
 800efb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efba:	bf00      	nop
 800efbc:	24030000 	.word	0x24030000

0800efc0 <process_FC3>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC3( uint16_t *regs, uint8_t u8size )
 {
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	4606      	mov	r6, r0

	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     uint8_t u8StartAdd = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 800efc4:	f7fa fb4a 	bl	800965c <__sanitizer_cov_trace_pc>
 800efc8:	4b32      	ldr	r3, [pc, #200]	; (800f094 <process_FC3+0xd4>)
 800efca:	7a1d      	ldrb	r5, [r3, #8]
     uint8_t u8regsno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 800efcc:	7a9f      	ldrb	r7, [r3, #10]
     //uint8_t u8CopyBufferSize;
     uint8_t i;

     ModbusH->au8Buffer[ 2 ]       = u8regsno * 2;
 800efce:	007a      	lsls	r2, r7, #1
 800efd0:	71da      	strb	r2, [r3, #7]
     ModbusH->u8BufferSize         = 3;
 800efd2:	2203      	movs	r2, #3
 800efd4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 800efd8:	442f      	add	r7, r5
 800efda:	42bd      	cmp	r5, r7
 800efdc:	da53      	bge.n	800f086 <process_FC3+0xc6>
     {
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = highByte(regs[i]);
 800efde:	461c      	mov	r4, r3
 800efe0:	e010      	b.n	800f004 <process_FC3+0x44>
 800efe2:	f7fa f93d 	bl	8009260 <__asan_report_load2>
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fa f92e 	bl	8009248 <__asan_report_store1>
    	 ModbusH->u8BufferSize++;
         ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = lowByte(regs[i]);
 800efec:	4422      	add	r2, r4
 800efee:	7150      	strb	r0, [r2, #5]
         ModbusH->u8BufferSize++;
 800eff0:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800eff4:	3301      	adds	r3, #1
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
     for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 800effc:	3501      	adds	r5, #1
 800effe:	b2ed      	uxtb	r5, r5
 800f000:	42bd      	cmp	r5, r7
 800f002:	da40      	bge.n	800f086 <process_FC3+0xc6>
    	 ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = highByte(regs[i]);
 800f004:	f7fa fb2a 	bl	800965c <__sanitizer_cov_trace_pc>
 800f008:	0069      	lsls	r1, r5, #1
 800f00a:	eb06 0045 	add.w	r0, r6, r5, lsl #1
 800f00e:	08c3      	lsrs	r3, r0, #3
 800f010:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f014:	f993 2000 	ldrsb.w	r2, [r3]
 800f018:	f000 0307 	and.w	r3, r0, #7
 800f01c:	3301      	adds	r3, #1
 800f01e:	4293      	cmp	r3, r2
 800f020:	db01      	blt.n	800f026 <process_FC3+0x66>
 800f022:	2a00      	cmp	r2, #0
 800f024:	d1dd      	bne.n	800efe2 <process_FC3+0x22>
 800f026:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	5a70      	ldrh	r0, [r6, r1]
 800f02e:	0a00      	lsrs	r0, r0, #8
 800f030:	4423      	add	r3, r4
 800f032:	3305      	adds	r3, #5
 800f034:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800f038:	f10c 5cdc 	add.w	ip, ip, #461373440	; 0x1b800000
 800f03c:	f99c c000 	ldrsb.w	ip, [ip]
 800f040:	f003 0e07 	and.w	lr, r3, #7
 800f044:	45e6      	cmp	lr, ip
 800f046:	db02      	blt.n	800f04e <process_FC3+0x8e>
 800f048:	f1bc 0f00 	cmp.w	ip, #0
 800f04c:	d1cb      	bne.n	800efe6 <process_FC3+0x26>
 800f04e:	4422      	add	r2, r4
 800f050:	7150      	strb	r0, [r2, #5]
    	 ModbusH->u8BufferSize++;
 800f052:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800f056:	3301      	adds	r3, #1
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
         ModbusH->au8Buffer[ ModbusH->u8BufferSize ] = lowByte(regs[i]);
 800f05e:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800f062:	b2da      	uxtb	r2, r3
 800f064:	5c70      	ldrb	r0, [r6, r1]
 800f066:	4423      	add	r3, r4
 800f068:	3305      	adds	r3, #5
 800f06a:	08d9      	lsrs	r1, r3, #3
 800f06c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 800f070:	f991 1000 	ldrsb.w	r1, [r1]
 800f074:	f003 0c07 	and.w	ip, r3, #7
 800f078:	458c      	cmp	ip, r1
 800f07a:	dbb7      	blt.n	800efec <process_FC3+0x2c>
 800f07c:	2900      	cmp	r1, #0
 800f07e:	d0b5      	beq.n	800efec <process_FC3+0x2c>
 800f080:	4618      	mov	r0, r3
 800f082:	f7fa f8e1 	bl	8009248 <__asan_report_store1>
     }
     //u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 800f086:	f7fa fae9 	bl	800965c <__sanitizer_cov_trace_pc>
 800f08a:	f7ff fdff 	bl	800ec8c <sendTxBuffer>

     return FAULT_NONE;
 }
 800f08e:	2000      	movs	r0, #0
 800f090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f092:	bf00      	nop
 800f094:	24030000 	.word	0x24030000

0800f098 <process_FC5>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC5( uint16_t *regs, uint8_t u8size )
 {
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	4605      	mov	r5, r0
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     uint8_t u8currentRegister, u8currentBit;
     //uint8_t u8CopyBufferSize;
     uint16_t u16coil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 800f09c:	f7fa fade 	bl	800965c <__sanitizer_cov_trace_pc>
 800f0a0:	4a24      	ldr	r2, [pc, #144]	; (800f134 <process_FC5+0x9c>)
 800f0a2:	79d1      	ldrb	r1, [r2, #7]
 	W.u8[0] = L;
 800f0a4:	7a13      	ldrb	r3, [r2, #8]
 	return W.u16[0];
 800f0a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

     // point to the register and its bit
     u8currentRegister = (uint8_t) (u16coil / 16);
 800f0aa:	f3c3 1607 	ubfx	r6, r3, #4, #8
     u8currentBit = (uint8_t) (u16coil % 16);
 800f0ae:	f003 040f 	and.w	r4, r3, #15

     // write to coil
     bitWrite(
 800f0b2:	7a53      	ldrb	r3, [r2, #9]
 800f0b4:	2bff      	cmp	r3, #255	; 0xff
 800f0b6:	d021      	beq.n	800f0fc <process_FC5+0x64>
 800f0b8:	f7fa fad0 	bl	800965c <__sanitizer_cov_trace_pc>
 800f0bc:	eb05 0046 	add.w	r0, r5, r6, lsl #1
 800f0c0:	08c3      	lsrs	r3, r0, #3
 800f0c2:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f0c6:	f993 2000 	ldrsb.w	r2, [r3]
 800f0ca:	f000 0307 	and.w	r3, r0, #7
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	db00      	blt.n	800f0d6 <process_FC5+0x3e>
 800f0d4:	bb5a      	cbnz	r2, 800f12e <process_FC5+0x96>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	fa03 f404 	lsl.w	r4, r3, r4
 800f0dc:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
 800f0e0:	ea23 0304 	bic.w	r3, r3, r4
 800f0e4:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
         regs[ u8currentRegister ],
         u8currentBit,
		 ModbusH->au8Buffer[ NB_HI ] == 0xff );

     // send answer to master
     ModbusH->u8BufferSize = 6;
 800f0e8:	f7fa fab8 	bl	800965c <__sanitizer_cov_trace_pc>
 800f0ec:	4b11      	ldr	r3, [pc, #68]	; (800f134 <process_FC5+0x9c>)
 800f0ee:	2206      	movs	r2, #6
 800f0f0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 800f0f4:	f7ff fdca 	bl	800ec8c <sendTxBuffer>

     return FAULT_NONE;
 }
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
     bitWrite(
 800f0fc:	f7fa faae 	bl	800965c <__sanitizer_cov_trace_pc>
 800f100:	eb05 0046 	add.w	r0, r5, r6, lsl #1
 800f104:	08c3      	lsrs	r3, r0, #3
 800f106:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f10a:	f993 2000 	ldrsb.w	r2, [r3]
 800f10e:	f000 0307 	and.w	r3, r0, #7
 800f112:	3301      	adds	r3, #1
 800f114:	4293      	cmp	r3, r2
 800f116:	db00      	blt.n	800f11a <process_FC5+0x82>
 800f118:	b93a      	cbnz	r2, 800f12a <process_FC5+0x92>
 800f11a:	2301      	movs	r3, #1
 800f11c:	40a3      	lsls	r3, r4
 800f11e:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
 800f122:	4323      	orrs	r3, r4
 800f124:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
 800f128:	e7de      	b.n	800f0e8 <process_FC5+0x50>
 800f12a:	f7fa f899 	bl	8009260 <__asan_report_load2>
 800f12e:	f7fa f897 	bl	8009260 <__asan_report_load2>
 800f132:	bf00      	nop
 800f134:	24030000 	.word	0x24030000

0800f138 <process_FC6>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC6( uint16_t *regs, uint8_t u8size )
 {
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4604      	mov	r4, r0
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     uint8_t u8add = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 800f13c:	f7fa fa8e 	bl	800965c <__sanitizer_cov_trace_pc>
 800f140:	4a0f      	ldr	r2, [pc, #60]	; (800f180 <process_FC6+0x48>)
 800f142:	7a11      	ldrb	r1, [r2, #8]
     //uint8_t u8CopyBufferSize;
     uint16_t u16val = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 800f144:	7a50      	ldrb	r0, [r2, #9]
 	W.u8[0] = L;
 800f146:	7a93      	ldrb	r3, [r2, #10]
 	return W.u16[0];
 800f148:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

     regs[ u8add ] = u16val;
 800f14c:	eb04 0041 	add.w	r0, r4, r1, lsl #1
 800f150:	08c2      	lsrs	r2, r0, #3
 800f152:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800f156:	f992 5000 	ldrsb.w	r5, [r2]
 800f15a:	f000 0207 	and.w	r2, r0, #7
 800f15e:	3201      	adds	r2, #1
 800f160:	42aa      	cmp	r2, r5
 800f162:	db00      	blt.n	800f166 <process_FC6+0x2e>
 800f164:	b94d      	cbnz	r5, 800f17a <process_FC6+0x42>
 800f166:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]

     // keep the same header
     ModbusH->u8BufferSize         = RESPONSE_SIZE;
 800f16a:	4b05      	ldr	r3, [pc, #20]	; (800f180 <process_FC6+0x48>)
 800f16c:	2206      	movs	r2, #6
 800f16e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 800f172:	f7ff fd8b 	bl	800ec8c <sendTxBuffer>
     return FAULT_NONE;
 }
 800f176:	2000      	movs	r0, #0
 800f178:	bd38      	pop	{r3, r4, r5, pc}
     regs[ u8add ] = u16val;
 800f17a:	f7fa f869 	bl	8009250 <__asan_report_store2>
 800f17e:	bf00      	nop
 800f180:	24030000 	.word	0x24030000

0800f184 <process_FC15>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup discrete
  */
 int8_t process_FC15( uint16_t *regs, uint8_t u8size )
 {
 800f184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	4681      	mov	r9, r0
     //uint8_t u8CopyBufferSize;
     uint16_t u16currentCoil, u16coil;
     bool bTemp;

     // get the first and last coil from the message
     uint16_t u16StartCoil = word( ModbusH->au8Buffer[ ADD_HI ], ModbusH->au8Buffer[ ADD_LO ] );
 800f18a:	f7fa fa67 	bl	800965c <__sanitizer_cov_trace_pc>
 800f18e:	4b40      	ldr	r3, [pc, #256]	; (800f290 <process_FC15+0x10c>)
 800f190:	79da      	ldrb	r2, [r3, #7]
 	W.u8[0] = L;
 800f192:	7a1c      	ldrb	r4, [r3, #8]
 	return W.u16[0];
 800f194:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
     uint16_t u16Coilno = word( ModbusH->au8Buffer[ NB_HI ], ModbusH->au8Buffer[ NB_LO ] );
 800f198:	7a5a      	ldrb	r2, [r3, #9]
 	W.u8[0] = L;
 800f19a:	f893 b00a 	ldrb.w	fp, [r3, #10]


     // read each coil from the register map and put its value inside the outcoming message
     u8bitsno = 0;
     u8frameByte = 7;
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f19e:	ea5b 2b02 	orrs.w	fp, fp, r2, lsl #8
 800f1a2:	d069      	beq.n	800f278 <process_FC15+0xf4>
 800f1a4:	44a3      	add	fp, r4
 800f1a6:	fa1f fb8b 	uxth.w	fp, fp
     u8bitsno = 0;
 800f1aa:	2500      	movs	r5, #0
     u8frameByte = 7;
 800f1ac:	2707      	movs	r7, #7

         u16coil = u16StartCoil + u16currentCoil;
         u8currentRegister = (uint8_t) (u16coil / 16);
         u8currentBit = (uint8_t) (u16coil % 16);

         bTemp = bitRead(
 800f1ae:	469a      	mov	sl, r3
 800f1b0:	e01a      	b.n	800f1e8 <process_FC15+0x64>
 800f1b2:	f7fa f851 	bl	8009258 <__asan_report_load1>
        		 ModbusH->au8Buffer[ u8frameByte ],
                     u8bitsno );

         bitWrite(
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	fa03 f606 	lsl.w	r6, r3, r6
 800f1bc:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 800f1c0:	431e      	orrs	r6, r3
 800f1c2:	f829 6018 	strh.w	r6, [r9, r8, lsl #1]
             regs[ u8currentRegister ],
             u8currentBit,
             bTemp );

         u8bitsno ++;
 800f1c6:	f7fa fa49 	bl	800965c <__sanitizer_cov_trace_pc>
 800f1ca:	3501      	adds	r5, #1
 800f1cc:	b2ed      	uxtb	r5, r5

         if (u8bitsno > 7)
 800f1ce:	2d07      	cmp	r5, #7
 800f1d0:	d904      	bls.n	800f1dc <process_FC15+0x58>
         {
             u8bitsno = 0;
             u8frameByte++;
 800f1d2:	f7fa fa43 	bl	800965c <__sanitizer_cov_trace_pc>
 800f1d6:	3701      	adds	r7, #1
 800f1d8:	b2ff      	uxtb	r7, r7
             u8bitsno = 0;
 800f1da:	2500      	movs	r5, #0
     for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f1dc:	f7fa fa3e 	bl	800965c <__sanitizer_cov_trace_pc>
 800f1e0:	3401      	adds	r4, #1
 800f1e2:	b2a4      	uxth	r4, r4
 800f1e4:	455c      	cmp	r4, fp
 800f1e6:	d047      	beq.n	800f278 <process_FC15+0xf4>
         u16coil = u16StartCoil + u16currentCoil;
 800f1e8:	f7fa fa38 	bl	800965c <__sanitizer_cov_trace_pc>
         u8currentRegister = (uint8_t) (u16coil / 16);
 800f1ec:	f3c4 1807 	ubfx	r8, r4, #4, #8
         u8currentBit = (uint8_t) (u16coil % 16);
 800f1f0:	f004 060f 	and.w	r6, r4, #15
         bTemp = bitRead(
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	eb0a 0007 	add.w	r0, sl, r7
 800f1fa:	3005      	adds	r0, #5
 800f1fc:	08c2      	lsrs	r2, r0, #3
 800f1fe:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 800f202:	f992 2000 	ldrsb.w	r2, [r2]
 800f206:	f000 0107 	and.w	r1, r0, #7
 800f20a:	4291      	cmp	r1, r2
 800f20c:	db01      	blt.n	800f212 <process_FC15+0x8e>
 800f20e:	2a00      	cmp	r2, #0
 800f210:	d1cf      	bne.n	800f1b2 <process_FC15+0x2e>
 800f212:	4453      	add	r3, sl
 800f214:	795b      	ldrb	r3, [r3, #5]
 800f216:	412b      	asrs	r3, r5
         bitWrite(
 800f218:	f013 0f01 	tst.w	r3, #1
 800f21c:	d011      	beq.n	800f242 <process_FC15+0xbe>
 800f21e:	f7fa fa1d 	bl	800965c <__sanitizer_cov_trace_pc>
 800f222:	eb09 0048 	add.w	r0, r9, r8, lsl #1
 800f226:	08c3      	lsrs	r3, r0, #3
 800f228:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f22c:	f993 2000 	ldrsb.w	r2, [r3]
 800f230:	f000 0307 	and.w	r3, r0, #7
 800f234:	3301      	adds	r3, #1
 800f236:	4293      	cmp	r3, r2
 800f238:	dbbd      	blt.n	800f1b6 <process_FC15+0x32>
 800f23a:	2a00      	cmp	r2, #0
 800f23c:	d0bb      	beq.n	800f1b6 <process_FC15+0x32>
 800f23e:	f7fa f80f 	bl	8009260 <__asan_report_load2>
 800f242:	f7fa fa0b 	bl	800965c <__sanitizer_cov_trace_pc>
 800f246:	eb09 0048 	add.w	r0, r9, r8, lsl #1
 800f24a:	08c3      	lsrs	r3, r0, #3
 800f24c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f250:	f993 2000 	ldrsb.w	r2, [r3]
 800f254:	f000 0307 	and.w	r3, r0, #7
 800f258:	3301      	adds	r3, #1
 800f25a:	4293      	cmp	r3, r2
 800f25c:	db00      	blt.n	800f260 <process_FC15+0xdc>
 800f25e:	b94a      	cbnz	r2, 800f274 <process_FC15+0xf0>
 800f260:	2301      	movs	r3, #1
 800f262:	fa03 f606 	lsl.w	r6, r3, r6
 800f266:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 800f26a:	ea23 0606 	bic.w	r6, r3, r6
 800f26e:	f829 6018 	strh.w	r6, [r9, r8, lsl #1]
 800f272:	e7a8      	b.n	800f1c6 <process_FC15+0x42>
 800f274:	f7f9 fff4 	bl	8009260 <__asan_report_load2>
         }
     }

     // send outcoming message
     // it's just a copy of the incomping frame until 6th byte
     ModbusH->u8BufferSize         = 6;
 800f278:	f7fa f9f0 	bl	800965c <__sanitizer_cov_trace_pc>
 800f27c:	4b04      	ldr	r3, [pc, #16]	; (800f290 <process_FC15+0x10c>)
 800f27e:	2206      	movs	r2, #6
 800f280:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
     //u8CopyBufferSize = u8BufferSize +2;
     //printf("%s\n",__func__);
     sendTxBuffer();
 800f284:	f7ff fd02 	bl	800ec8c <sendTxBuffer>
     return FAULT_NONE;
 }
 800f288:	2000      	movs	r0, #0
 800f28a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28e:	bf00      	nop
 800f290:	24030000 	.word	0x24030000

0800f294 <process_FC16>:
  *
  * @return u8BufferSize Response to master length
  * @ingroup register
  */
 int8_t process_FC16( uint16_t *regs, uint8_t u8size )
 {
 800f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f296:	4605      	mov	r5, r0
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;
     //uint8_t u8func = ModbusH->au8Buffer[ FUNC ];  // get the original FUNC code
     uint8_t u8StartAdd = ModbusH->au8Buffer[ ADD_HI ] << 8 | ModbusH->au8Buffer[ ADD_LO ];
 800f298:	f7fa f9e0 	bl	800965c <__sanitizer_cov_trace_pc>
 800f29c:	4b2b      	ldr	r3, [pc, #172]	; (800f34c <process_FC16+0xb8>)
 800f29e:	7a18      	ldrb	r0, [r3, #8]
     uint8_t u8regsno = ModbusH->au8Buffer[ NB_HI ] << 8 | ModbusH->au8Buffer[ NB_LO ];
 800f2a0:	7a9f      	ldrb	r7, [r3, #10]
     //uint8_t u8CopyBufferSize;
     uint8_t i;
     uint16_t temp;

     // build header
     ModbusH->au8Buffer[ NB_HI ]   = 0;
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	725a      	strb	r2, [r3, #9]
     ModbusH->au8Buffer[ NB_LO ]   = u8regsno;
     ModbusH->u8BufferSize         = RESPONSE_SIZE;
 800f2a6:	2206      	movs	r2, #6
 800f2a8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

     // write registers
     for (i = 0; i < u8regsno; i++)
 800f2ac:	2f00      	cmp	r7, #0
 800f2ae:	d047      	beq.n	800f340 <process_FC16+0xac>
 800f2b0:	461c      	mov	r4, r3
 800f2b2:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 800f2b6:	3f01      	subs	r7, #1
 800f2b8:	b2ff      	uxtb	r7, r7
 800f2ba:	3302      	adds	r3, #2
 800f2bc:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800f2c0:	e009      	b.n	800f2d6 <process_FC16+0x42>
     {
         temp = word(
 800f2c2:	f7f9 ffc9 	bl	8009258 <__asan_report_load1>
 800f2c6:	f7f9 ffc7 	bl	8009258 <__asan_report_load1>
        		 ModbusH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
				 ModbusH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);

         regs[ u8StartAdd + i ] = temp;
 800f2ca:	f8a1 c000 	strh.w	ip, [r1]
 800f2ce:	3502      	adds	r5, #2
     for (i = 0; i < u8regsno; i++)
 800f2d0:	3402      	adds	r4, #2
 800f2d2:	42bc      	cmp	r4, r7
 800f2d4:	d034      	beq.n	800f340 <process_FC16+0xac>
        		 ModbusH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800f2d6:	f7fa f9c1 	bl	800965c <__sanitizer_cov_trace_pc>
         temp = word(
 800f2da:	f104 000c 	add.w	r0, r4, #12
 800f2de:	08c3      	lsrs	r3, r0, #3
 800f2e0:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f2e4:	f993 3000 	ldrsb.w	r3, [r3]
 800f2e8:	f000 0207 	and.w	r2, r0, #7
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	db01      	blt.n	800f2f4 <process_FC16+0x60>
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1e6      	bne.n	800f2c2 <process_FC16+0x2e>
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	7b22      	ldrb	r2, [r4, #12]
 800f2f8:	f104 000d 	add.w	r0, r4, #13
 800f2fc:	08c3      	lsrs	r3, r0, #3
 800f2fe:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f302:	f993 3000 	ldrsb.w	r3, [r3]
 800f306:	f000 0c07 	and.w	ip, r0, #7
 800f30a:	459c      	cmp	ip, r3
 800f30c:	db01      	blt.n	800f312 <process_FC16+0x7e>
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1d9      	bne.n	800f2c6 <process_FC16+0x32>
 	W.u8[0] = L;
 800f312:	7b4b      	ldrb	r3, [r1, #13]
 800f314:	f363 0607 	bfi	r6, r3, #0, #8
 	W.u8[1] = H;
 800f318:	f362 260f 	bfi	r6, r2, #8, #8
 	return W.u16[0];
 800f31c:	fa1f fc86 	uxth.w	ip, r6
         regs[ u8StartAdd + i ] = temp;
 800f320:	4629      	mov	r1, r5
 800f322:	4628      	mov	r0, r5
 800f324:	08eb      	lsrs	r3, r5, #3
 800f326:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 800f32a:	f993 2000 	ldrsb.w	r2, [r3]
 800f32e:	f005 0307 	and.w	r3, r5, #7
 800f332:	3301      	adds	r3, #1
 800f334:	4293      	cmp	r3, r2
 800f336:	dbc8      	blt.n	800f2ca <process_FC16+0x36>
 800f338:	2a00      	cmp	r2, #0
 800f33a:	d0c6      	beq.n	800f2ca <process_FC16+0x36>
 800f33c:	f7f9 ff88 	bl	8009250 <__asan_report_store2>
     }
    // u8CopyBufferSize = u8BufferSize +2;

     //printf("%s\n",__func__);
     sendTxBuffer();
 800f340:	f7fa f98c 	bl	800965c <__sanitizer_cov_trace_pc>
 800f344:	f7ff fca2 	bl	800ec8c <sendTxBuffer>

     return FAULT_NONE;
 }
 800f348:	2000      	movs	r0, #0
 800f34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f34c:	24030000 	.word	0x24030000

0800f350 <modbusparsing>:



 uint32_t modbusparsing(uint8_t *Buffer, uint8_t u8size )
 {
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4605      	mov	r5, r0
 800f354:	460c      	mov	r4, r1
	 modbusHandler_t* ModbusH = (modbusHandler_t*)ModbusH_Region;

	 ModbusH->fctsupported[0] = MB_FC_READ_COILS;
 800f356:	f7fa f981 	bl	800965c <__sanitizer_cov_trace_pc>
 800f35a:	4b4a      	ldr	r3, [pc, #296]	; (800f484 <modbusparsing+0x134>)
 800f35c:	2201      	movs	r2, #1
 800f35e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	 ModbusH->fctsupported[1] = MB_FC_READ_DISCRETE_INPUT;
 800f362:	2202      	movs	r2, #2
 800f364:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	 ModbusH->fctsupported[2] = MB_FC_READ_REGISTERS;
 800f368:	2203      	movs	r2, #3
 800f36a:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	 ModbusH->fctsupported[3] = MB_FC_READ_INPUT_REGISTER;
 800f36e:	2204      	movs	r2, #4
 800f370:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	 ModbusH->fctsupported[4] = MB_FC_WRITE_COIL;
 800f374:	2205      	movs	r2, #5
 800f376:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	 ModbusH->fctsupported[5] = MB_FC_WRITE_REGISTER;
 800f37a:	2206      	movs	r2, #6
 800f37c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	 ModbusH->fctsupported[6] = MB_FC_WRITE_MULTIPLE_COILS;
 800f380:	220f      	movs	r2, #15
 800f382:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	 ModbusH->fctsupported[7] = MB_FC_WRITE_MULTIPLE_REGISTERS;
 800f386:	2210      	movs	r2, #16
 800f388:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	 int8_t u8current;
	 u8current= u8size; // this is hacky way to update this variable
	 uint16_t *regs = ModbusH->u16regs;


	 if (u8current >= 8) {
 800f38c:	b263      	sxtb	r3, r4
 800f38e:	2b07      	cmp	r3, #7
 800f390:	dd6e      	ble.n	800f470 <modbusparsing+0x120>
         i8state = getRxBuffer(Buffer,  u8size);
 800f392:	f7fa f963 	bl	800965c <__sanitizer_cov_trace_pc>
 800f396:	4621      	mov	r1, r4
 800f398:	4628      	mov	r0, r5
 800f39a:	f7ff fbb7 	bl	800eb0c <getRxBuffer>
         ModbusH->u8lastError = i8state;
 800f39e:	4b39      	ldr	r3, [pc, #228]	; (800f484 <modbusparsing+0x134>)
 800f3a0:	7118      	strb	r0, [r3, #4]
         if(i8state == ERR_BUFF_OVERFLOW)
 800f3a2:	f110 0f03 	cmn.w	r0, #3
 800f3a6:	d068      	beq.n	800f47a <modbusparsing+0x12a>
    	 //printf("size too small!\n");
         return FAULT_NONE_RTOS;
     }

     // check slave id, omit bytes if doesn't match
     if (ModbusH->au8Buffer[ ID ] != ModbusH->u8id)
 800f3a8:	f7fa f958 	bl	800965c <__sanitizer_cov_trace_pc>
 800f3ac:	4b35      	ldr	r3, [pc, #212]	; (800f484 <modbusparsing+0x134>)
 800f3ae:	795a      	ldrb	r2, [r3, #5]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d001      	beq.n	800f3ba <modbusparsing+0x6a>
     {
    	 //printf("Wrong ID!\n");
    	 return FAULT_NONE_RTOS;
 800f3b6:	2408      	movs	r4, #8
 800f3b8:	e05b      	b.n	800f472 <modbusparsing+0x122>
     }


     // validate message: CRC, FCT, address and size
     uint8_t u8exception = validateRequest();
 800f3ba:	f7fa f94f 	bl	800965c <__sanitizer_cov_trace_pc>
 800f3be:	f7ff fcb1 	bl	800ed24 <validateRequest>
     if (u8exception > 0)
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	b990      	cbnz	r0, 800f3ec <modbusparsing+0x9c>
         return FAULT_NONE_RTOS;
     }

     // this value is not used by slave
     //u32timeOut = millis() + long(u16timeOut);
     ModbusH->u8lastError = 0;
 800f3c6:	f7fa f949 	bl	800965c <__sanitizer_cov_trace_pc>
 800f3ca:	4b2e      	ldr	r3, [pc, #184]	; (800f484 <modbusparsing+0x134>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	711a      	strb	r2, [r3, #4]

     // process message
     switch( ModbusH->au8Buffer[ FUNC ] )
 800f3d0:	799b      	ldrb	r3, [r3, #6]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	2b0f      	cmp	r3, #15
 800f3d6:	d852      	bhi.n	800f47e <modbusparsing+0x12e>
 800f3d8:	e8df f003 	tbb	[pc, r3]
 800f3dc:	22221a1a 	.word	0x22221a1a
 800f3e0:	5151322a 	.word	0x5151322a
 800f3e4:	51515151 	.word	0x51515151
 800f3e8:	423a5151 	.word	0x423a5151
         if (u8exception != NO_REPLY)
 800f3ec:	f7fa f936 	bl	800965c <__sanitizer_cov_trace_pc>
 800f3f0:	2dff      	cmp	r5, #255	; 0xff
 800f3f2:	d105      	bne.n	800f400 <modbusparsing+0xb0>
         ModbusH->u8lastError = u8exception;
 800f3f4:	f7fa f932 	bl	800965c <__sanitizer_cov_trace_pc>
 800f3f8:	4b22      	ldr	r3, [pc, #136]	; (800f484 <modbusparsing+0x134>)
 800f3fa:	711d      	strb	r5, [r3, #4]
         return FAULT_NONE_RTOS;
 800f3fc:	2408      	movs	r4, #8
 800f3fe:	e038      	b.n	800f472 <modbusparsing+0x122>
             buildException( u8exception );
 800f400:	f7fa f92c 	bl	800965c <__sanitizer_cov_trace_pc>
 800f404:	4628      	mov	r0, r5
 800f406:	f7ff fbe5 	bl	800ebd4 <buildException>
             sendTxBuffer();
 800f40a:	f7ff fc3f 	bl	800ec8c <sendTxBuffer>
 800f40e:	e7f1      	b.n	800f3f4 <modbusparsing+0xa4>
     {
     case MB_FC_READ_COILS:
     case MB_FC_READ_DISCRETE_INPUT:
         return process_FC1( regs, u8size );
 800f410:	f7fa f924 	bl	800965c <__sanitizer_cov_trace_pc>
 800f414:	4621      	mov	r1, r4
 800f416:	481c      	ldr	r0, [pc, #112]	; (800f488 <modbusparsing+0x138>)
 800f418:	f7ff fd24 	bl	800ee64 <process_FC1>
 800f41c:	4604      	mov	r4, r0
 800f41e:	e028      	b.n	800f472 <modbusparsing+0x122>
         break;
     case MB_FC_READ_INPUT_REGISTER:
     case MB_FC_READ_REGISTERS :
         return process_FC3( regs, u8size );
 800f420:	f7fa f91c 	bl	800965c <__sanitizer_cov_trace_pc>
 800f424:	4621      	mov	r1, r4
 800f426:	4818      	ldr	r0, [pc, #96]	; (800f488 <modbusparsing+0x138>)
 800f428:	f7ff fdca 	bl	800efc0 <process_FC3>
 800f42c:	4604      	mov	r4, r0
 800f42e:	e020      	b.n	800f472 <modbusparsing+0x122>
         break;
     case MB_FC_WRITE_COIL:
         return process_FC5( regs, u8size );
 800f430:	f7fa f914 	bl	800965c <__sanitizer_cov_trace_pc>
 800f434:	4621      	mov	r1, r4
 800f436:	4814      	ldr	r0, [pc, #80]	; (800f488 <modbusparsing+0x138>)
 800f438:	f7ff fe2e 	bl	800f098 <process_FC5>
 800f43c:	4604      	mov	r4, r0
 800f43e:	e018      	b.n	800f472 <modbusparsing+0x122>
         break;
     case MB_FC_WRITE_REGISTER :
         return process_FC6( regs, u8size );
 800f440:	f7fa f90c 	bl	800965c <__sanitizer_cov_trace_pc>
 800f444:	4621      	mov	r1, r4
 800f446:	4810      	ldr	r0, [pc, #64]	; (800f488 <modbusparsing+0x138>)
 800f448:	f7ff fe76 	bl	800f138 <process_FC6>
 800f44c:	4604      	mov	r4, r0
 800f44e:	e010      	b.n	800f472 <modbusparsing+0x122>
         break;
     case MB_FC_WRITE_MULTIPLE_COILS:
         return process_FC15( regs, u8size );
 800f450:	f7fa f904 	bl	800965c <__sanitizer_cov_trace_pc>
 800f454:	4621      	mov	r1, r4
 800f456:	480c      	ldr	r0, [pc, #48]	; (800f488 <modbusparsing+0x138>)
 800f458:	f7ff fe94 	bl	800f184 <process_FC15>
 800f45c:	4604      	mov	r4, r0
 800f45e:	e008      	b.n	800f472 <modbusparsing+0x122>
         break;
     case MB_FC_WRITE_MULTIPLE_REGISTERS :
         return process_FC16( regs, u8size );
 800f460:	f7fa f8fc 	bl	800965c <__sanitizer_cov_trace_pc>
 800f464:	4621      	mov	r1, r4
 800f466:	4808      	ldr	r0, [pc, #32]	; (800f488 <modbusparsing+0x138>)
 800f468:	f7ff ff14 	bl	800f294 <process_FC16>
 800f46c:	4604      	mov	r4, r0
 800f46e:	e000      	b.n	800f472 <modbusparsing+0x122>
         return FAULT_NONE_RTOS;
 800f470:	2408      	movs	r4, #8
 800f472:	f7fa f8f3 	bl	800965c <__sanitizer_cov_trace_pc>
         break;
     default:
         break;
     }
     return FAULT_NONE_RTOS;
 }
 800f476:	4620      	mov	r0, r4
 800f478:	bd38      	pop	{r3, r4, r5, pc}
        	 return FAULT_NONE_RTOS;
 800f47a:	2408      	movs	r4, #8
 800f47c:	e7f9      	b.n	800f472 <modbusparsing+0x122>
     switch( ModbusH->au8Buffer[ FUNC ] )
 800f47e:	2408      	movs	r4, #8
 800f480:	e7f7      	b.n	800f472 <modbusparsing+0x122>
 800f482:	bf00      	nop
 800f484:	24030000 	.word	0x24030000
 800f488:	24030046 	.word	0x24030046

0800f48c <_sub_I_00099_0>:
 800f48c:	b508      	push	{r3, lr}
 800f48e:	f7fa f8e5 	bl	800965c <__sanitizer_cov_trace_pc>
 800f492:	f7f9 fe3b 	bl	800910c <__asan_init>
 800f496:	f7f9 fe7d 	bl	8009194 <__asan_version_mismatch_check_v8>
 800f49a:	bd08      	pop	{r3, pc}

0800f49c <spawnNewTarget>:
}



static void spawnNewTarget( )
{
 800f49c:	b500      	push	{lr}
 800f49e:	b0a9      	sub	sp, #164	; 0xa4
   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
   #endif

   TaskParameters_t targetTaskParameters =
 800f4a0:	2298      	movs	r2, #152	; 0x98
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	a802      	add	r0, sp, #8
 800f4a6:	f001 fe1d 	bl	80110e4 <memset>
 800f4aa:	4b16      	ldr	r3, [pc, #88]	; (800f504 <spawnNewTarget+0x68>)
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	4b16      	ldr	r3, [pc, #88]	; (800f508 <spawnNewTarget+0x6c>)
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b6:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f4ba:	2314      	movs	r3, #20
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	4b13      	ldr	r3, [pc, #76]	; (800f50c <spawnNewTarget+0x70>)
 800f4c0:	9305      	str	r3, [sp, #20]
 800f4c2:	4b13      	ldr	r3, [pc, #76]	; (800f510 <spawnNewTarget+0x74>)
 800f4c4:	9306      	str	r3, [sp, #24]
 800f4c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f4ca:	9207      	str	r2, [sp, #28]
 800f4cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f4d0:	9308      	str	r3, [sp, #32]
 800f4d2:	4910      	ldr	r1, [pc, #64]	; (800f514 <spawnNewTarget+0x78>)
 800f4d4:	9109      	str	r1, [sp, #36]	; 0x24
 800f4d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f4da:	910a      	str	r1, [sp, #40]	; 0x28
 800f4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800f4e2:	910c      	str	r1, [sp, #48]	; 0x30
 800f4e4:	920d      	str	r2, [sp, #52]	; 0x34
 800f4e6:	930e      	str	r3, [sp, #56]	; 0x38
 800f4e8:	4a0b      	ldr	r2, [pc, #44]	; (800f518 <spawnNewTarget+0x7c>)
 800f4ea:	920f      	str	r2, [sp, #60]	; 0x3c
 800f4ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4f0:	9210      	str	r2, [sp, #64]	; 0x40
 800f4f2:	9311      	str	r3, [sp, #68]	; 0x44
        						 }
   };


   //create a new task
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 800f4f4:	4909      	ldr	r1, [pc, #36]	; (800f51c <spawnNewTarget+0x80>)
 800f4f6:	4668      	mov	r0, sp
 800f4f8:	f7f2 ff41 	bl	800237e <xTaskCreateRestricted>



}
 800f4fc:	b029      	add	sp, #164	; 0xa4
 800f4fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800f502:	bf00      	nop
 800f504:	0800f78d 	.word	0x0800f78d
 800f508:	24008c44 	.word	0x24008c44
 800f50c:	24033000 	.word	0x24033000
 800f510:	24020000 	.word	0x24020000
 800f514:	24036000 	.word	0x24036000
 800f518:	24030000 	.word	0x24030000
 800f51c:	24026870 	.word	0x24026870

0800f520 <fuzzerTask>:

uint16_t *indexdifP;
uint8_t  bufferDMA[550];
static void fuzzerTask( void * pvParameters )
{
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	b085      	sub	sp, #20
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
    uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
    #endif

    indexdifP = &AFLfuzzer.indexdif;
 800f526:	4b8c      	ldr	r3, [pc, #560]	; (800f758 <fuzzerTask+0x238>)
 800f528:	4a8c      	ldr	r2, [pc, #560]	; (800f75c <fuzzerTask+0x23c>)
 800f52a:	601a      	str	r2, [r3, #0]

    		   AFLfuzzer.receiving = false;
	           HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
	           //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
    #endif
	MX_USB_DEVICE_Init();
 800f52c:	f001 f87c 	bl	8010628 <MX_USB_DEVICE_Init>
	error_cnt = 0;
 800f530:	2400      	movs	r4, #0
 800f532:	4b8b      	ldr	r3, [pc, #556]	; (800f760 <fuzzerTask+0x240>)
 800f534:	601c      	str	r4, [r3, #0]
	 * 1: Notification from USB USART driver to the fuzzer task when data has arrived
	 * 2: Notification from target to fuzzer to signal readiness to execute the test
	 * ********/

	/**Lets poison the AFLfuzzer structure**/
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 800f536:	4d8b      	ldr	r5, [pc, #556]	; (800f764 <fuzzerTask+0x244>)
 800f538:	08e8      	lsrs	r0, r5, #3
	uint32_t HelperShadowSize = AFLINPUTREGION_SIZE>>3;
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 800f53a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f53e:	21ff      	movs	r1, #255	; 0xff
 800f540:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 800f544:	f001 fdce 	bl	80110e4 <memset>
	// the only section that should be accessible by the target is the input buffer, so lets un-poison it
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 800f548:	f505 40c0 	add.w	r0, r5, #24576	; 0x6000
 800f54c:	08c0      	lsrs	r0, r0, #3
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 800f54e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f552:	4621      	mov	r1, r4
 800f554:	f100 50dc 	add.w	r0, r0, #461373440	; 0x1b800000
 800f558:	f001 fdc4 	bl	80110e4 <memset>


	numberofcycles = 0;
	spawnNewTarget();
 800f55c:	f7ff ff9e 	bl	800f49c <spawnNewTarget>
	// wait for the target task notification when ready
	ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f560:	220a      	movs	r2, #10
 800f562:	2101      	movs	r1, #1
 800f564:	2002      	movs	r0, #2
 800f566:	f7f8 fecf 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
	numberofcycles = 0;
 800f56a:	9403      	str	r4, [sp, #12]

	for( ; ; )
	{

		// we will wait for a notification on index 1 when fuzzing data has arrived
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 800f56c:	2701      	movs	r7, #1
		{

			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 800f56e:	46ab      	mov	fp, r5
 800f570:	f505 44c0 	add.w	r4, r5, #24576	; 0x6000
 800f574:	2500      	movs	r5, #0
							 i++;
					}
					vTaskDelete(AFLfuzzer.xTaskTarget);
				    taskYIELD();
					spawnNewTarget();
					ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f576:	f04f 0a0a 	mov.w	sl, #10
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
			 {
				 paflbitmap[auxdiff[i].index]=0;
			 }
			 memset(AFLfuzzer.afldiff,0,(AFLfuzzer.indexdif+2)*sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
			 AFLfuzzer.indexdif = 0;
 800f57a:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
 800f57e:	f503 5800 	add.w	r8, r3, #8192	; 0x2000
 800f582:	e067      	b.n	800f654 <fuzzerTask+0x134>
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 800f584:	f8c4 7814 	str.w	r7, [r4, #2068]	; 0x814
				 printf("Target timeout, starting a new target process...\n");
 800f588:	4877      	ldr	r0, [pc, #476]	; (800f768 <fuzzerTask+0x248>)
 800f58a:	f001 fe6b 	bl	8011264 <puts>
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 800f58e:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 800f592:	f7f8 fdab 	bl	80080ec <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 800f596:	df01      	svc	1
				 spawnNewTarget();
 800f598:	f7ff ff80 	bl	800f49c <spawnNewTarget>
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f59c:	4652      	mov	r2, sl
 800f59e:	4639      	mov	r1, r7
 800f5a0:	2002      	movs	r0, #2
 800f5a2:	f7f8 feb1 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
				 numberofcycles = 0;
 800f5a6:	9603      	str	r6, [sp, #12]
			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 800f5a8:	f8b4 3862 	ldrh.w	r3, [r4, #2146]	; 0x862
 800f5ac:	f103 0901 	add.w	r9, r3, #1
 800f5b0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f5b4:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	496c      	ldr	r1, [pc, #432]	; (800f76c <fuzzerTask+0x24c>)
 800f5bc:	486c      	ldr	r0, [pc, #432]	; (800f770 <fuzzerTask+0x250>)
 800f5be:	f7fb f83f 	bl	800a640 <HAL_CRC_Calculate>
			 uwCRCValue = HAL_CRC_Accumulate(&hcrc, (uint32_t *)auxdiff, AFLfuzzer.indexdif);
 800f5c2:	4e6c      	ldr	r6, [pc, #432]	; (800f774 <fuzzerTask+0x254>)
 800f5c4:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 800f5c8:	4631      	mov	r1, r6
 800f5ca:	4869      	ldr	r0, [pc, #420]	; (800f770 <fuzzerTask+0x250>)
 800f5cc:	f7fb f816 	bl	800a5fc <HAL_CRC_Accumulate>
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 800f5d0:	f50b 4380 	add.w	r3, fp, #16384	; 0x4000
 800f5d4:	43c0      	mvns	r0, r0
 800f5d6:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
			 AFLfuzzer.bTXcomplete = false;
 800f5da:	f884 5865 	strb.w	r5, [r4, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 800f5de:	2108      	movs	r1, #8
 800f5e0:	4862      	ldr	r0, [pc, #392]	; (800f76c <fuzzerTask+0x24c>)
 800f5e2:	f001 f895 	bl	8010710 <CDC_Transmit_FS>
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 800f5e6:	4652      	mov	r2, sl
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	f7f8 fe8c 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bTXcomplete = false;
 800f5f0:	f884 5865 	strb.w	r5, [r4, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 800f5f4:	f8b4 1818 	ldrh.w	r1, [r4, #2072]	; 0x818
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f001 f889 	bl	8010710 <CDC_Transmit_FS>
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 800f5fe:	4652      	mov	r2, sl
 800f600:	4639      	mov	r1, r7
 800f602:	4638      	mov	r0, r7
 800f604:	f7f8 fe80 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bRXcomplete = false;
 800f608:	f884 5864 	strb.w	r5, [r4, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 800f60c:	f8c4 5824 	str.w	r5, [r4, #2084]	; 0x824
			 AFLfuzzer.previousGuard = 0;
 800f610:	f8a4 5858 	strh.w	r5, [r4, #2136]	; 0x858
			 RingZeroes(&AFLfuzzer.inputAFL);
 800f614:	4620      	mov	r0, r4
 800f616:	f7fa fabc 	bl	8009b92 <RingZeroes>
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 800f61a:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 800f61e:	b152      	cbz	r2, 800f636 <fuzzerTask+0x116>
 800f620:	2300      	movs	r3, #0
				 paflbitmap[auxdiff[i].index]=0;
 800f622:	4631      	mov	r1, r6
 800f624:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 800f628:	f82b 5012 	strh.w	r5, [fp, r2, lsl #1]
			 for(uint32_t i=0; i<AFLfuzzer.indexdif; i++)
 800f62c:	3301      	adds	r3, #1
 800f62e:	f8b4 2862 	ldrh.w	r2, [r4, #2146]	; 0x862
 800f632:	429a      	cmp	r2, r3
 800f634:	d8f6      	bhi.n	800f624 <fuzzerTask+0x104>
			 memset(AFLfuzzer.afldiff,0,(AFLfuzzer.indexdif+2)*sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 800f636:	3202      	adds	r2, #2
 800f638:	0092      	lsls	r2, r2, #2
 800f63a:	4629      	mov	r1, r5
 800f63c:	484e      	ldr	r0, [pc, #312]	; (800f778 <fuzzerTask+0x258>)
 800f63e:	f001 fd51 	bl	80110e4 <memset>
			 AFLfuzzer.indexdif = 0;
 800f642:	f8a8 5862 	strh.w	r5, [r8, #2146]	; 0x862
			 AFLfuzzer.timespan = HAL_GetTick() - AFLfuzzer.timespan;
 800f646:	f7fa feb9 	bl	800a3bc <HAL_GetTick>
 800f64a:	f8d8 382c 	ldr.w	r3, [r8, #2092]	; 0x82c
 800f64e:	1ac0      	subs	r0, r0, r3
 800f650:	f8c8 082c 	str.w	r0, [r8, #2092]	; 0x82c
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 800f654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f658:	4639      	mov	r1, r7
 800f65a:	4638      	mov	r0, r7
 800f65c:	f7f8 fe54 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 800f660:	9500      	str	r5, [sp, #0]
 800f662:	2303      	movs	r3, #3
 800f664:	462a      	mov	r2, r5
 800f666:	4629      	mov	r1, r5
 800f668:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 800f66c:	f7f8 fe18 	bl	80082a0 <MPU_xTaskGenericNotify>
			 notificationvalue = ulTaskNotifyTakeIndexed(0,pdTRUE, TARGET_TIMEOUT);
 800f670:	2214      	movs	r2, #20
 800f672:	4639      	mov	r1, r7
 800f674:	4628      	mov	r0, r5
 800f676:	f7f8 fe47 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
			 if (notificationvalue == 0) // TIMEOUT
 800f67a:	4606      	mov	r6, r0
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d081      	beq.n	800f584 <fuzzerTask+0x64>
			 else if(notificationvalue == FAULT_ASAN)
 800f680:	2809      	cmp	r0, #9
 800f682:	d011      	beq.n	800f6a8 <fuzzerTask+0x188>
			 else if(notificationvalue == FAULT_CRASH)
 800f684:	2802      	cmp	r0, #2
 800f686:	d037      	beq.n	800f6f8 <fuzzerTask+0x1d8>
			 else if (notificationvalue == FAULT_NONE_RTOS)
 800f688:	2808      	cmp	r0, #8
 800f68a:	d18d      	bne.n	800f5a8 <fuzzerTask+0x88>
				AFLfuzzer.aflheader[0] = notificationvalue;
 800f68c:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
				numberofcycles++;
 800f690:	9b03      	ldr	r3, [sp, #12]
 800f692:	3301      	adds	r3, #1
 800f694:	9303      	str	r3, [sp, #12]
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS)
 800f696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f69a:	d385      	bcc.n	800f5a8 <fuzzerTask+0x88>
 800f69c:	4e37      	ldr	r6, [pc, #220]	; (800f77c <fuzzerTask+0x25c>)
 800f69e:	f646 0954 	movw	r9, #26708	; 0x6854
 800f6a2:	4b30      	ldr	r3, [pc, #192]	; (800f764 <fuzzerTask+0x244>)
 800f6a4:	4499      	add	r9, r3
 800f6a6:	e040      	b.n	800f72a <fuzzerTask+0x20a>
 800f6a8:	4e34      	ldr	r6, [pc, #208]	; (800f77c <fuzzerTask+0x25c>)
 800f6aa:	f646 0954 	movw	r9, #26708	; 0x6854
 800f6ae:	4b2d      	ldr	r3, [pc, #180]	; (800f764 <fuzzerTask+0x244>)
 800f6b0:	4499      	add	r9, r3
 800f6b2:	e001      	b.n	800f6b8 <fuzzerTask+0x198>
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 800f6b4:	45b1      	cmp	r9, r6
 800f6b6:	d007      	beq.n	800f6c8 <fuzzerTask+0x1a8>
					 if(AFLfuzzer.allocs[i])
 800f6b8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d0f9      	beq.n	800f6b4 <fuzzerTask+0x194>
						 free(AFLfuzzer.allocs[i]);
 800f6c0:	f001 fa58 	bl	8010b74 <free>
						 AFLfuzzer.allocs[i] = NULL;
 800f6c4:	6035      	str	r5, [r6, #0]
 800f6c6:	e7f5      	b.n	800f6b4 <fuzzerTask+0x194>
				  AFLfuzzer.aflheader[0] = notificationvalue;
 800f6c8:	2602      	movs	r6, #2
 800f6ca:	f8c4 6814 	str.w	r6, [r4, #2068]	; 0x814
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 800f6ce:	f894 2874 	ldrb.w	r2, [r4, #2164]	; 0x874
 800f6d2:	4b2b      	ldr	r3, [pc, #172]	; (800f780 <fuzzerTask+0x260>)
 800f6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6d8:	482a      	ldr	r0, [pc, #168]	; (800f784 <fuzzerTask+0x264>)
 800f6da:	f001 fd61 	bl	80111a0 <printf>
				  vTaskDelete(AFLfuzzer.xTaskTarget);
 800f6de:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 800f6e2:	f7f8 fd03 	bl	80080ec <MPU_vTaskDelete>
				  taskYIELD();
 800f6e6:	df01      	svc	1
 				  spawnNewTarget();
 800f6e8:	f7ff fed8 	bl	800f49c <spawnNewTarget>
 				  ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f6ec:	4652      	mov	r2, sl
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f7f8 fe09 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
 800f6f6:	e757      	b.n	800f5a8 <fuzzerTask+0x88>
				 AFLfuzzer.aflheader[0] = notificationvalue;
 800f6f8:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 800f6fc:	f894 2874 	ldrb.w	r2, [r4, #2164]	; 0x874
 800f700:	4b1f      	ldr	r3, [pc, #124]	; (800f780 <fuzzerTask+0x260>)
 800f702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f706:	f8d4 1868 	ldr.w	r1, [r4, #2152]	; 0x868
 800f70a:	481f      	ldr	r0, [pc, #124]	; (800f788 <fuzzerTask+0x268>)
 800f70c:	f001 fd48 	bl	80111a0 <printf>
				 spawnNewTarget();
 800f710:	f7ff fec4 	bl	800f49c <spawnNewTarget>
				 taskYIELD(); // let's the kernel clean the TCB
 800f714:	df01      	svc	1
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f716:	4652      	mov	r2, sl
 800f718:	4639      	mov	r1, r7
 800f71a:	4630      	mov	r0, r6
 800f71c:	f7f8 fdf4 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
				 numberofcycles = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	9303      	str	r3, [sp, #12]
 800f724:	e740      	b.n	800f5a8 <fuzzerTask+0x88>
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800f726:	454e      	cmp	r6, r9
 800f728:	d007      	beq.n	800f73a <fuzzerTask+0x21a>
						 if(AFLfuzzer.allocs[i])
 800f72a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f72e:	2800      	cmp	r0, #0
 800f730:	d0f9      	beq.n	800f726 <fuzzerTask+0x206>
							 free(AFLfuzzer.allocs[i]);
 800f732:	f001 fa1f 	bl	8010b74 <free>
							 AFLfuzzer.allocs[i] = NULL;
 800f736:	6035      	str	r5, [r6, #0]
 800f738:	e7f5      	b.n	800f726 <fuzzerTask+0x206>
					vTaskDelete(AFLfuzzer.xTaskTarget);
 800f73a:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
 800f73e:	f7f8 fcd5 	bl	80080ec <MPU_vTaskDelete>
				    taskYIELD();
 800f742:	df01      	svc	1
					spawnNewTarget();
 800f744:	f7ff feaa 	bl	800f49c <spawnNewTarget>
					ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 800f748:	4652      	mov	r2, sl
 800f74a:	4639      	mov	r1, r7
 800f74c:	2002      	movs	r0, #2
 800f74e:	f7f8 fddb 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
					numberofcycles=0;
 800f752:	2300      	movs	r3, #0
 800f754:	9303      	str	r3, [sp, #12]
 800f756:	e727      	b.n	800f5a8 <fuzzerTask+0x88>
 800f758:	24032004 	.word	0x24032004
 800f75c:	24026862 	.word	0x24026862
 800f760:	24032000 	.word	0x24032000
 800f764:	24020000 	.word	0x24020000
 800f768:	24008c4c 	.word	0x24008c4c
 800f76c:	24026814 	.word	0x24026814
 800f770:	24011e48 	.word	0x24011e48
 800f774:	24024004 	.word	0x24024004
 800f778:	24024000 	.word	0x24024000
 800f77c:	2402682c 	.word	0x2402682c
 800f780:	24008020 	.word	0x24008020
 800f784:	24008c80 	.word	0x24008c80
 800f788:	24008c94 	.word	0x24008c94

0800f78c <targetTask>:
{
 800f78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	b082      	sub	sp, #8
    AFLfuzzer.xTypeEx = EX_NO_EX;
 800f792:	4c29      	ldr	r4, [pc, #164]	; (800f838 <targetTask+0xac>)
 800f794:	2500      	movs	r5, #0
 800f796:	f884 5874 	strb.w	r5, [r4, #2164]	; 0x874
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800f79a:	2201      	movs	r2, #1
 800f79c:	4611      	mov	r1, r2
 800f79e:	4827      	ldr	r0, [pc, #156]	; (800f83c <targetTask+0xb0>)
 800f7a0:	f7fb f8ee 	bl	800a980 <HAL_GPIO_WritePin>
   	xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite); //notify the fuzzer task the target is ready
 800f7a4:	9500      	str	r5, [sp, #0]
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	2102      	movs	r1, #2
 800f7ac:	f8d4 086c 	ldr.w	r0, [r4, #2156]	; 0x86c
 800f7b0:	f7f8 fd76 	bl	80082a0 <MPU_xTaskGenericNotify>
    uint8_t firstRun=1;
 800f7b4:	f04f 0a01 	mov.w	sl, #1
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 800f7b8:	4656      	mov	r6, sl
 800f7ba:	462c      	mov	r4, r5
    		AFLfuzzer.previousGuard = 0;
 800f7bc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800f840 <targetTask+0xb4>
 800f7c0:	f508 45c0 	add.w	r5, r8, #24576	; 0x6000
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800f7c4:	4f1d      	ldr	r7, [pc, #116]	; (800f83c <targetTask+0xb0>)
		modbusparsing(&AFLfuzzer.inputAFL.uxBuffer[4], AFLfuzzer.inputAFL.u32availablenopad-4 );
 800f7c6:	f105 0904 	add.w	r9, r5, #4
 800f7ca:	e02a      	b.n	800f822 <targetTask+0x96>
    		AFLfuzzer.previousGuard = 0;
 800f7cc:	f8a5 4858 	strh.w	r4, [r5, #2136]	; 0x858
    		memset(AFLfuzzer.aflbmp,0,AFL_BITMAP_SIZE*sizeof(uint16_t));
 800f7d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f001 fc84 	bl	80110e4 <memset>
    		memset(AFLfuzzer.afldiff,0, AFL_BITMAP_SIZE/4 *sizeof(tuple_t)); //we need on extra tuple to clean which is used for the CRC
 800f7dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	f508 4080 	add.w	r0, r8, #16384	; 0x4000
 800f7e6:	f001 fc7d 	bl	80110e4 <memset>
    		AFLfuzzer.indexdif = 0;
 800f7ea:	f8a5 4862 	strh.w	r4, [r5, #2146]	; 0x862
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800f7ee:	4622      	mov	r2, r4
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f7fb f8c4 	bl	800a980 <HAL_GPIO_WritePin>
		modbusparsing(&AFLfuzzer.inputAFL.uxBuffer[4], AFLfuzzer.inputAFL.u32availablenopad-4 );
 800f7f8:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
 800f7fc:	3904      	subs	r1, #4
 800f7fe:	b2c9      	uxtb	r1, r1
 800f800:	4648      	mov	r0, r9
 800f802:	f7ff fda5 	bl	800f350 <modbusparsing>
		xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite);//notify that the test finished
 800f806:	9400      	str	r4, [sp, #0]
 800f808:	2303      	movs	r3, #3
 800f80a:	2208      	movs	r2, #8
 800f80c:	4621      	mov	r1, r4
 800f80e:	f8d5 086c 	ldr.w	r0, [r5, #2156]	; 0x86c
 800f812:	f7f8 fd45 	bl	80082a0 <MPU_xTaskGenericNotify>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800f816:	4632      	mov	r2, r6
 800f818:	4631      	mov	r1, r6
 800f81a:	4638      	mov	r0, r7
 800f81c:	f7fb f8b0 	bl	800a980 <HAL_GPIO_WritePin>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for the data coming from the fuzzer task
 800f820:	46a2      	mov	sl, r4
 800f822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f826:	4631      	mov	r1, r6
 800f828:	4620      	mov	r0, r4
 800f82a:	f7f8 fd6d 	bl	8008308 <MPU_ulTaskGenericNotifyTake>
    	if(firstRun)
 800f82e:	f1ba 0f00 	cmp.w	sl, #0
 800f832:	d1cb      	bne.n	800f7cc <targetTask+0x40>
 800f834:	e7db      	b.n	800f7ee <targetTask+0x62>
 800f836:	bf00      	nop
 800f838:	24026000 	.word	0x24026000
 800f83c:	58020400 	.word	0x58020400
 800f840:	24020000 	.word	0x24020000

0800f844 <vStartMPUDemo>:
}



void vStartMPUDemo( void )
{
 800f844:	b500      	push	{lr}
 800f846:	b0a9      	sub	sp, #164	; 0xa4

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

TaskParameters_t fuzzerTaskParameters =
 800f848:	2298      	movs	r2, #152	; 0x98
 800f84a:	2100      	movs	r1, #0
 800f84c:	a802      	add	r0, sp, #8
 800f84e:	f001 fc49 	bl	80110e4 <memset>
 800f852:	4b09      	ldr	r3, [pc, #36]	; (800f878 <vStartMPUDemo+0x34>)
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4b09      	ldr	r3, [pc, #36]	; (800f87c <vStartMPUDemo+0x38>)
 800f858:	9301      	str	r3, [sp, #4]
 800f85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f85e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f862:	4b07      	ldr	r3, [pc, #28]	; (800f880 <vStartMPUDemo+0x3c>)
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	4b07      	ldr	r3, [pc, #28]	; (800f884 <vStartMPUDemo+0x40>)
 800f868:	9305      	str	r3, [sp, #20]
							{ 0, 0, 0 },
					}
};

	/* Create the fuzzer task */
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 800f86a:	4907      	ldr	r1, [pc, #28]	; (800f888 <vStartMPUDemo+0x44>)
 800f86c:	4668      	mov	r0, sp
 800f86e:	f7f2 fd86 	bl	800237e <xTaskCreateRestricted>
	//spawnNewTarget();

}
 800f872:	b029      	add	sp, #164	; 0xa4
 800f874:	f85d fb04 	ldr.w	pc, [sp], #4
 800f878:	0800f521 	.word	0x0800f521
 800f87c:	24008cac 	.word	0x24008cac
 800f880:	80000014 	.word	0x80000014
 800f884:	24031000 	.word	0x24031000
 800f888:	2402686c 	.word	0x2402686c

0800f88c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f88c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f88e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800f892:	b184      	cbz	r4, 800f8b6 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f894:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f898:	b17b      	cbz	r3, 800f8ba <USBD_CDC_EP0_RxReady+0x2e>
 800f89a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800f89e:	28ff      	cmp	r0, #255	; 0xff
 800f8a0:	d00d      	beq.n	800f8be <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f8ac:	23ff      	movs	r3, #255	; 0xff
 800f8ae:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f8b2:	2000      	movs	r0, #0
}
 800f8b4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f8b6:	2003      	movs	r0, #3
 800f8b8:	e7fc      	b.n	800f8b4 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	e7fa      	b.n	800f8b4 <USBD_CDC_EP0_RxReady+0x28>
 800f8be:	2000      	movs	r0, #0
 800f8c0:	e7f8      	b.n	800f8b4 <USBD_CDC_EP0_RxReady+0x28>
	...

0800f8c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f8c4:	2343      	movs	r3, #67	; 0x43
 800f8c6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800f8c8:	4800      	ldr	r0, [pc, #0]	; (800f8cc <USBD_CDC_GetFSCfgDesc+0x8>)
 800f8ca:	4770      	bx	lr
 800f8cc:	24008090 	.word	0x24008090

0800f8d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f8d0:	2343      	movs	r3, #67	; 0x43
 800f8d2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800f8d4:	4800      	ldr	r0, [pc, #0]	; (800f8d8 <USBD_CDC_GetHSCfgDesc+0x8>)
 800f8d6:	4770      	bx	lr
 800f8d8:	240080d4 	.word	0x240080d4

0800f8dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f8dc:	2343      	movs	r3, #67	; 0x43
 800f8de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800f8e0:	4800      	ldr	r0, [pc, #0]	; (800f8e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800f8e2:	4770      	bx	lr
 800f8e4:	24008124 	.word	0x24008124

0800f8e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f8e8:	230a      	movs	r3, #10
 800f8ea:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800f8ec:	4800      	ldr	r0, [pc, #0]	; (800f8f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800f8ee:	4770      	bx	lr
 800f8f0:	24008118 	.word	0x24008118

0800f8f4 <USBD_CDC_DataOut>:
{
 800f8f4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8f6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800f8fa:	b175      	cbz	r5, 800f91a <USBD_CDC_DataOut+0x26>
 800f8fc:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f8fe:	f001 f8b1 	bl	8010a64 <USBD_LL_GetRxDataSize>
 800f902:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f906:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800f910:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800f914:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f916:	2000      	movs	r0, #0
}
 800f918:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f91a:	2003      	movs	r0, #3
 800f91c:	e7fc      	b.n	800f918 <USBD_CDC_DataOut+0x24>

0800f91e <USBD_CDC_DataIn>:
  if (pdev->pClassData == NULL)
 800f91e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800f922:	b36b      	cbz	r3, 800f980 <USBD_CDC_DataIn+0x62>
{
 800f924:	b510      	push	{r4, lr}
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f926:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800f92a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f92e:	6992      	ldr	r2, [r2, #24]
 800f930:	b15a      	cbz	r2, 800f94a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f932:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800f936:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800f93a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800f93e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800f940:	fbb2 fcf4 	udiv	ip, r2, r4
 800f944:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f948:	b172      	cbz	r2, 800f968 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800f94a:	2200      	movs	r2, #0
 800f94c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f950:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800f954:	6914      	ldr	r4, [r2, #16]
 800f956:	b1ac      	cbz	r4, 800f984 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f958:	460a      	mov	r2, r1
 800f95a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800f95e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800f962:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800f964:	2000      	movs	r0, #0
}
 800f966:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800f968:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800f96c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f970:	2400      	movs	r4, #0
 800f972:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f974:	4623      	mov	r3, r4
 800f976:	4622      	mov	r2, r4
 800f978:	f001 f8b9 	bl	8010aee <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800f97c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f97e:	e7f2      	b.n	800f966 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800f980:	2003      	movs	r0, #3
}
 800f982:	4770      	bx	lr
  return (uint8_t)USBD_OK;
 800f984:	2000      	movs	r0, #0
 800f986:	e7ee      	b.n	800f966 <USBD_CDC_DataIn+0x48>

0800f988 <USBD_CDC_Setup>:
{
 800f988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f98c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800f990:	2300      	movs	r3, #0
 800f992:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800f996:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800f99a:	2e00      	cmp	r6, #0
 800f99c:	d06c      	beq.n	800fa78 <USBD_CDC_Setup+0xf0>
 800f99e:	4607      	mov	r7, r0
 800f9a0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9a2:	780b      	ldrb	r3, [r1, #0]
 800f9a4:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800f9a8:	d02a      	beq.n	800fa00 <USBD_CDC_Setup+0x78>
 800f9aa:	2d20      	cmp	r5, #32
 800f9ac:	d15e      	bne.n	800fa6c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800f9ae:	88ca      	ldrh	r2, [r1, #6]
 800f9b0:	b1f2      	cbz	r2, 800f9f0 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800f9b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f9b6:	d00f      	beq.n	800f9d8 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f9b8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	4631      	mov	r1, r6
 800f9c0:	7860      	ldrb	r0, [r4, #1]
 800f9c2:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f9c4:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f9c6:	2a07      	cmp	r2, #7
 800f9c8:	bf28      	it	cs
 800f9ca:	2207      	movcs	r2, #7
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f000 fde8 	bl	80105a4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800f9d4:	2500      	movs	r5, #0
 800f9d6:	e04c      	b.n	800fa72 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800f9d8:	784b      	ldrb	r3, [r1, #1]
 800f9da:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f9de:	88cb      	ldrh	r3, [r1, #6]
 800f9e0:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f9e4:	88ca      	ldrh	r2, [r1, #6]
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	f000 fdf1 	bl	80105ce <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ec:	2500      	movs	r5, #0
 800f9ee:	e040      	b.n	800fa72 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f9f0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	7848      	ldrb	r0, [r1, #1]
 800f9fa:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800f9fc:	2500      	movs	r5, #0
 800f9fe:	e038      	b.n	800fa72 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800fa00:	784e      	ldrb	r6, [r1, #1]
 800fa02:	2e0b      	cmp	r6, #11
 800fa04:	d82e      	bhi.n	800fa64 <USBD_CDC_Setup+0xdc>
 800fa06:	e8df f006 	tbb	[pc, r6]
 800fa0a:	3406      	.short	0x3406
 800fa0c:	2d2d2d2d 	.word	0x2d2d2d2d
 800fa10:	2d2d2d2d 	.word	0x2d2d2d2d
 800fa14:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	2b03      	cmp	r3, #3
 800fa1e:	d003      	beq.n	800fa28 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800fa20:	f000 faae 	bl	800ff80 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa24:	2503      	movs	r5, #3
 800fa26:	e024      	b.n	800fa72 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fa28:	2202      	movs	r2, #2
 800fa2a:	a901      	add	r1, sp, #4
 800fa2c:	f000 fdba 	bl	80105a4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fa30:	4635      	mov	r5, r6
 800fa32:	e01e      	b.n	800fa72 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b03      	cmp	r3, #3
 800fa3c:	d003      	beq.n	800fa46 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800fa3e:	f000 fa9f 	bl	800ff80 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa42:	2503      	movs	r5, #3
 800fa44:	e015      	b.n	800fa72 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fa46:	2201      	movs	r2, #1
 800fa48:	f10d 0107 	add.w	r1, sp, #7
 800fa4c:	f000 fdaa 	bl	80105a4 <USBD_CtlSendData>
 800fa50:	e00f      	b.n	800fa72 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fa52:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d00a      	beq.n	800fa72 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800fa5c:	f000 fa90 	bl	800ff80 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa60:	2503      	movs	r5, #3
 800fa62:	e006      	b.n	800fa72 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800fa64:	f000 fa8c 	bl	800ff80 <USBD_CtlError>
          ret = USBD_FAIL;
 800fa68:	2503      	movs	r5, #3
          break;
 800fa6a:	e002      	b.n	800fa72 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800fa6c:	f000 fa88 	bl	800ff80 <USBD_CtlError>
      ret = USBD_FAIL;
 800fa70:	2503      	movs	r5, #3
}
 800fa72:	4628      	mov	r0, r5
 800fa74:	b003      	add	sp, #12
 800fa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800fa78:	2503      	movs	r5, #3
 800fa7a:	e7fa      	b.n	800fa72 <USBD_CDC_Setup+0xea>

0800fa7c <USBD_CDC_DeInit>:
{
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fa80:	2181      	movs	r1, #129	; 0x81
 800fa82:	f001 f814 	bl	8010aae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fa86:	2500      	movs	r5, #0
 800fa88:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f001 f80e 	bl	8010aae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fa92:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fa96:	2182      	movs	r1, #130	; 0x82
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f001 f808 	bl	8010aae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fa9e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800faa2:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800faa6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800faaa:	b14b      	cbz	r3, 800fac0 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800faac:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fab4:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800fab8:	f000 ffde 	bl	8010a78 <USBD_static_free>
    pdev->pClassData = NULL;
 800fabc:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800fac0:	2000      	movs	r0, #0
 800fac2:	bd38      	pop	{r3, r4, r5, pc}

0800fac4 <USBD_CDC_Init>:
{
 800fac4:	b570      	push	{r4, r5, r6, lr}
 800fac6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fac8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800facc:	f000 ffd0 	bl	8010a70 <USBD_static_malloc>
  if (hcdc == NULL)
 800fad0:	b3b8      	cbz	r0, 800fb42 <USBD_CDC_Init+0x7e>
 800fad2:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800fad4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fad8:	7c23      	ldrb	r3, [r4, #16]
 800fada:	bbbb      	cbnz	r3, 800fb4c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fadc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fae0:	2202      	movs	r2, #2
 800fae2:	2181      	movs	r1, #129	; 0x81
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 ffd7 	bl	8010a98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800faea:	2501      	movs	r5, #1
 800faec:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800faee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800faf2:	2202      	movs	r2, #2
 800faf4:	4629      	mov	r1, r5
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 ffce 	bl	8010a98 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fafc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fb00:	2310      	movs	r3, #16
 800fb02:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fb06:	2308      	movs	r3, #8
 800fb08:	2203      	movs	r2, #3
 800fb0a:	2182      	movs	r1, #130	; 0x82
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f000 ffc3 	bl	8010a98 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fb12:	2301      	movs	r3, #1
 800fb14:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fb18:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4798      	blx	r3
  hcdc->TxState = 0U;
 800fb20:	2300      	movs	r3, #0
 800fb22:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800fb26:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb2a:	7c25      	ldrb	r5, [r4, #16]
 800fb2c:	bb15      	cbnz	r5, 800fb74 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb32:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800fb36:	2101      	movs	r1, #1
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 ffe0 	bl	8010afe <USBD_LL_PrepareReceive>
}
 800fb3e:	4628      	mov	r0, r5
 800fb40:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800fb42:	2300      	movs	r3, #0
 800fb44:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fb48:	2502      	movs	r5, #2
 800fb4a:	e7f8      	b.n	800fb3e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fb4c:	2340      	movs	r3, #64	; 0x40
 800fb4e:	2202      	movs	r2, #2
 800fb50:	2181      	movs	r1, #129	; 0x81
 800fb52:	4620      	mov	r0, r4
 800fb54:	f000 ffa0 	bl	8010a98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fb58:	2501      	movs	r5, #1
 800fb5a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fb5c:	2340      	movs	r3, #64	; 0x40
 800fb5e:	2202      	movs	r2, #2
 800fb60:	4629      	mov	r1, r5
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 ff98 	bl	8010a98 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fb68:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fb6c:	2310      	movs	r3, #16
 800fb6e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800fb72:	e7c8      	b.n	800fb06 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb74:	2340      	movs	r3, #64	; 0x40
 800fb76:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800fb7a:	2101      	movs	r1, #1
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f000 ffbe 	bl	8010afe <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800fb82:	2500      	movs	r5, #0
 800fb84:	e7db      	b.n	800fb3e <USBD_CDC_Init+0x7a>

0800fb86 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800fb86:	b119      	cbz	r1, 800fb90 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800fb88:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800fb90:	2003      	movs	r0, #3
}
 800fb92:	4770      	bx	lr

0800fb94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb94:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800fb98:	b12b      	cbz	r3, 800fba6 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800fb9a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fb9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fba2:	2000      	movs	r0, #0
 800fba4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800fba6:	2003      	movs	r0, #3
}
 800fba8:	4770      	bx	lr

0800fbaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fbaa:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800fbae:	b11b      	cbz	r3, 800fbb8 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800fbb0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800fbb8:	2003      	movs	r0, #3
}
 800fbba:	4770      	bx	lr

0800fbbc <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fbbc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800fbc0:	b1a2      	cbz	r2, 800fbec <USBD_CDC_TransmitPacket+0x30>
{
 800fbc2:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800fbc4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800fbc8:	b10b      	cbz	r3, 800fbce <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fbca:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800fbcc:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fbd4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800fbd8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800fbda:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800fbde:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800fbe2:	2181      	movs	r1, #129	; 0x81
 800fbe4:	f000 ff83 	bl	8010aee <USBD_LL_Transmit>
    ret = USBD_OK;
 800fbe8:	2000      	movs	r0, #0
 800fbea:	e7ef      	b.n	800fbcc <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800fbec:	2003      	movs	r0, #3
}
 800fbee:	4770      	bx	lr

0800fbf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fbf0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fbf2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800fbf6:	b192      	cbz	r2, 800fc1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbf8:	7c04      	ldrb	r4, [r0, #16]
 800fbfa:	b944      	cbnz	r4, 800fc0e <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc00:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800fc04:	2101      	movs	r1, #1
 800fc06:	f000 ff7a 	bl	8010afe <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fc0e:	2340      	movs	r3, #64	; 0x40
 800fc10:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800fc14:	2101      	movs	r1, #1
 800fc16:	f000 ff72 	bl	8010afe <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800fc1a:	2400      	movs	r4, #0
 800fc1c:	e7f5      	b.n	800fc0a <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800fc1e:	2403      	movs	r4, #3
 800fc20:	e7f3      	b.n	800fc0a <USBD_CDC_ReceivePacket+0x1a>

0800fc22 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc22:	b198      	cbz	r0, 800fc4c <USBD_Init+0x2a>
{
 800fc24:	b508      	push	{r3, lr}
 800fc26:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fc28:	2000      	movs	r0, #0
 800fc2a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fc2e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fc32:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc36:	b109      	cbz	r1, 800fc3c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800fc38:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800fc42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc44:	4618      	mov	r0, r3
 800fc46:	f000 fec7 	bl	80109d8 <USBD_LL_Init>

  return ret;
}
 800fc4a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fc4c:	2003      	movs	r0, #3
}
 800fc4e:	4770      	bx	lr

0800fc50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc50:	b510      	push	{r4, lr}
 800fc52:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800fc54:	2300      	movs	r3, #0
 800fc56:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800fc5a:	b161      	cbz	r1, 800fc76 <USBD_RegisterClass+0x26>
 800fc5c:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fc5e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fc62:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800fc64:	b14b      	cbz	r3, 800fc7a <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fc66:	f10d 0006 	add.w	r0, sp, #6
 800fc6a:	4798      	blx	r3
 800fc6c:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fc70:	2000      	movs	r0, #0
}
 800fc72:	b002      	add	sp, #8
 800fc74:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800fc76:	2003      	movs	r0, #3
 800fc78:	e7fb      	b.n	800fc72 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	e7f9      	b.n	800fc72 <USBD_RegisterClass+0x22>

0800fc7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fc7e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fc80:	f000 ff02 	bl	8010a88 <USBD_LL_Start>
}
 800fc84:	bd08      	pop	{r3, pc}

0800fc86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc86:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800fc88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fc8c:	b113      	cbz	r3, 800fc94 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4798      	blx	r3
  }

  return ret;
}
 800fc92:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fc94:	2003      	movs	r0, #3
 800fc96:	e7fc      	b.n	800fc92 <USBD_SetClassConfig+0xc>

0800fc98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc98:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fc9a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fc9e:	b10b      	cbz	r3, 800fca4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	4798      	blx	r3
  }

  return USBD_OK;
}
 800fca4:	2000      	movs	r0, #0
 800fca6:	bd08      	pop	{r3, pc}

0800fca8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fcac:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	f000 f951 	bl	800ff58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fcbc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800fcc0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fcc4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800fcc8:	f001 031f 	and.w	r3, r1, #31
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d00d      	beq.n	800fcec <USBD_LL_SetupStage+0x44>
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d010      	beq.n	800fcf6 <USBD_LL_SetupStage+0x4e>
 800fcd4:	b12b      	cbz	r3, 800fce2 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fcd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 feef 	bl	8010abe <USBD_LL_StallEP>
      break;
 800fce0:	e003      	b.n	800fcea <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fce2:	4629      	mov	r1, r5
 800fce4:	4620      	mov	r0, r4
 800fce6:	f000 f955 	bl	800ff94 <USBD_StdDevReq>
  }

  return ret;
}
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fcec:	4629      	mov	r1, r5
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f000 fb1e 	bl	8010330 <USBD_StdItfReq>
      break;
 800fcf4:	e7f9      	b.n	800fcea <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fcf6:	4629      	mov	r1, r5
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f000 fb4d 	bl	8010398 <USBD_StdEPReq>
      break;
 800fcfe:	e7f4      	b.n	800fcea <USBD_LL_SetupStage+0x42>

0800fd00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd04:	460d      	mov	r5, r1
 800fd06:	bb41      	cbnz	r1, 800fd5a <USBD_LL_DataOutStage+0x5a>
 800fd08:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fd0a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800fd0e:	2a03      	cmp	r2, #3
 800fd10:	d001      	beq.n	800fd16 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800fd12:	4608      	mov	r0, r1
}
 800fd14:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800fd16:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800fd1a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800fd1e:	4291      	cmp	r1, r2
 800fd20:	d809      	bhi.n	800fd36 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d00f      	beq.n	800fd4c <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f000 fc65 	bl	80105fc <USBD_CtlSendStatus>
  return USBD_OK;
 800fd32:	4628      	mov	r0, r5
 800fd34:	e7ee      	b.n	800fd14 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800fd36:	1a89      	subs	r1, r1, r2
 800fd38:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd3c:	428a      	cmp	r2, r1
 800fd3e:	bf28      	it	cs
 800fd40:	460a      	movcs	r2, r1
 800fd42:	4619      	mov	r1, r3
 800fd44:	f000 fc52 	bl	80105ec <USBD_CtlContinueRx>
  return USBD_OK;
 800fd48:	4628      	mov	r0, r5
 800fd4a:	e7e3      	b.n	800fd14 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800fd4c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0ea      	beq.n	800fd2c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800fd56:	4798      	blx	r3
 800fd58:	e7e8      	b.n	800fd2c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d001      	beq.n	800fd68 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800fd64:	2000      	movs	r0, #0
 800fd66:	e7d5      	b.n	800fd14 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800fd68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fd6c:	699b      	ldr	r3, [r3, #24]
 800fd6e:	b10b      	cbz	r3, 800fd74 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fd70:	4798      	blx	r3
        if (ret != USBD_OK)
 800fd72:	e7cf      	b.n	800fd14 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800fd74:	2000      	movs	r0, #0
 800fd76:	e7cd      	b.n	800fd14 <USBD_LL_DataOutStage+0x14>

0800fd78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd7c:	460d      	mov	r5, r1
 800fd7e:	2900      	cmp	r1, #0
 800fd80:	d14a      	bne.n	800fe18 <USBD_LL_DataInStage+0xa0>
 800fd82:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd84:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800fd88:	2a02      	cmp	r2, #2
 800fd8a:	d005      	beq.n	800fd98 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fd8c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d03c      	beq.n	800fe0e <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800fd94:	4628      	mov	r0, r5
}
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800fd98:	69c2      	ldr	r2, [r0, #28]
 800fd9a:	6a01      	ldr	r1, [r0, #32]
 800fd9c:	428a      	cmp	r2, r1
 800fd9e:	d80e      	bhi.n	800fdbe <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800fda0:	428a      	cmp	r2, r1
 800fda2:	d018      	beq.n	800fdd6 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	2b03      	cmp	r3, #3
 800fdac:	d027      	beq.n	800fdfe <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdae:	2180      	movs	r1, #128	; 0x80
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 fe84 	bl	8010abe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f000 fc2b 	bl	8010612 <USBD_CtlReceiveStatus>
 800fdbc:	e7e6      	b.n	800fd8c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800fdbe:	1a52      	subs	r2, r2, r1
 800fdc0:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	f000 fbfb 	bl	80105be <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdc8:	2300      	movs	r3, #0
 800fdca:	461a      	mov	r2, r3
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f000 fe95 	bl	8010afe <USBD_LL_PrepareReceive>
 800fdd4:	e7da      	b.n	800fd8c <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800fdd6:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800fdd8:	4299      	cmp	r1, r3
 800fdda:	d8e3      	bhi.n	800fda4 <USBD_LL_DataInStage+0x2c>
            (pep->total_length >= pep->maxpacket) &&
 800fddc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d2df      	bcs.n	800fda4 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fde4:	2200      	movs	r2, #0
 800fde6:	4611      	mov	r1, r2
 800fde8:	f000 fbe9 	bl	80105be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fdec:	2100      	movs	r1, #0
 800fdee:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	460a      	mov	r2, r1
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f000 fe81 	bl	8010afe <USBD_LL_PrepareReceive>
 800fdfc:	e7c6      	b.n	800fd8c <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800fdfe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d0d2      	beq.n	800fdae <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4798      	blx	r3
 800fe0c:	e7cf      	b.n	800fdae <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800fe14:	4628      	mov	r0, r5
 800fe16:	e7be      	b.n	800fd96 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d001      	beq.n	800fe26 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800fe22:	2000      	movs	r0, #0
 800fe24:	e7b7      	b.n	800fd96 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800fe26:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	b10b      	cbz	r3, 800fe32 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fe2e:	4798      	blx	r3
        if (ret != USBD_OK)
 800fe30:	e7b1      	b.n	800fd96 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800fe32:	2000      	movs	r0, #0
 800fe34:	e7af      	b.n	800fd96 <USBD_LL_DataInStage+0x1e>

0800fe36 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe36:	2301      	movs	r3, #1
 800fe38:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800fe42:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800fe44:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fe48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe4c:	b1f3      	cbz	r3, 800fe8c <USBD_LL_Reset+0x56>
{
 800fe4e:	b570      	push	{r4, r5, r6, lr}
 800fe50:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800fe52:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800fe56:	b11a      	cbz	r2, 800fe60 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	b10b      	cbz	r3, 800fe60 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe60:	2340      	movs	r3, #64	; 0x40
 800fe62:	2200      	movs	r2, #0
 800fe64:	4611      	mov	r1, r2
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 fe16 	bl	8010a98 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe6c:	2601      	movs	r6, #1
 800fe6e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe72:	2540      	movs	r5, #64	; 0x40
 800fe74:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe78:	462b      	mov	r3, r5
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2180      	movs	r1, #128	; 0x80
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 fe0a 	bl	8010a98 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe84:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe86:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800fe88:	2000      	movs	r0, #0
}
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800fe8c:	2003      	movs	r0, #3
}
 800fe8e:	4770      	bx	lr

0800fe90 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800fe90:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800fe92:	2000      	movs	r0, #0
 800fe94:	4770      	bx	lr

0800fe96 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800fe96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fea0:	2304      	movs	r3, #4
 800fea2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800fea6:	2000      	movs	r0, #0
 800fea8:	4770      	bx	lr

0800feaa <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800feaa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b04      	cmp	r3, #4
 800feb2:	d001      	beq.n	800feb8 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800feb4:	2000      	movs	r0, #0
 800feb6:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800feb8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800febc:	b2db      	uxtb	r3, r3
 800febe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800fec2:	e7f7      	b.n	800feb4 <USBD_LL_Resume+0xa>

0800fec4 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800fec4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800fec8:	b162      	cbz	r2, 800fee4 <USBD_LL_SOF+0x20>
{
 800feca:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fecc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d001      	beq.n	800feda <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800fed6:	2000      	movs	r0, #0
}
 800fed8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800feda:	69d3      	ldr	r3, [r2, #28]
 800fedc:	b123      	cbz	r3, 800fee8 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800fede:	4798      	blx	r3
  return USBD_OK;
 800fee0:	2000      	movs	r0, #0
 800fee2:	e7f9      	b.n	800fed8 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800fee4:	2003      	movs	r0, #3
}
 800fee6:	4770      	bx	lr
  return USBD_OK;
 800fee8:	2000      	movs	r0, #0
 800feea:	e7f5      	b.n	800fed8 <USBD_LL_SOF+0x14>

0800feec <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800feec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800fef0:	b162      	cbz	r2, 800ff0c <USBD_LL_IsoINIncomplete+0x20>
{
 800fef2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	2b03      	cmp	r3, #3
 800fefc:	d001      	beq.n	800ff02 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fefe:	2000      	movs	r0, #0
}
 800ff00:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ff02:	6a13      	ldr	r3, [r2, #32]
 800ff04:	b123      	cbz	r3, 800ff10 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ff06:	4798      	blx	r3
  return USBD_OK;
 800ff08:	2000      	movs	r0, #0
 800ff0a:	e7f9      	b.n	800ff00 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 800ff0c:	2003      	movs	r0, #3
}
 800ff0e:	4770      	bx	lr
  return USBD_OK;
 800ff10:	2000      	movs	r0, #0
 800ff12:	e7f5      	b.n	800ff00 <USBD_LL_IsoINIncomplete+0x14>

0800ff14 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800ff14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ff18:	b162      	cbz	r2, 800ff34 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800ff1a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b03      	cmp	r3, #3
 800ff24:	d001      	beq.n	800ff2a <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ff26:	2000      	movs	r0, #0
}
 800ff28:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ff2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ff2c:	b123      	cbz	r3, 800ff38 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ff2e:	4798      	blx	r3
  return USBD_OK;
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7f9      	b.n	800ff28 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800ff34:	2003      	movs	r0, #3
}
 800ff36:	4770      	bx	lr
  return USBD_OK;
 800ff38:	2000      	movs	r0, #0
 800ff3a:	e7f5      	b.n	800ff28 <USBD_LL_IsoOUTIncomplete+0x14>

0800ff3c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	4770      	bx	lr

0800ff40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ff40:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff42:	2301      	movs	r3, #1
 800ff44:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ff48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ff4c:	b113      	cbz	r3, 800ff54 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	7901      	ldrb	r1, [r0, #4]
 800ff52:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ff54:	2000      	movs	r0, #0
 800ff56:	bd08      	pop	{r3, pc}

0800ff58 <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff58:	780b      	ldrb	r3, [r1, #0]
 800ff5a:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800ff5c:	784b      	ldrb	r3, [r1, #1]
 800ff5e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff60:	78ca      	ldrb	r2, [r1, #3]
 800ff62:	788b      	ldrb	r3, [r1, #2]
 800ff64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800ff68:	8043      	strh	r3, [r0, #2]
 800ff6a:	794a      	ldrb	r2, [r1, #5]
 800ff6c:	790b      	ldrb	r3, [r1, #4]
 800ff6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800ff72:	8083      	strh	r3, [r0, #4]
 800ff74:	79ca      	ldrb	r2, [r1, #7]
 800ff76:	798b      	ldrb	r3, [r1, #6]
 800ff78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800ff7c:	80c3      	strh	r3, [r0, #6]
}
 800ff7e:	4770      	bx	lr

0800ff80 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff80:	b510      	push	{r4, lr}
 800ff82:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff84:	2180      	movs	r1, #128	; 0x80
 800ff86:	f000 fd9a 	bl	8010abe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 fd96 	bl	8010abe <USBD_LL_StallEP>
}
 800ff92:	bd10      	pop	{r4, pc}

0800ff94 <USBD_StdDevReq>:
{
 800ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff96:	b083      	sub	sp, #12
 800ff98:	4607      	mov	r7, r0
 800ff9a:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff9c:	780c      	ldrb	r4, [r1, #0]
 800ff9e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ffa2:	2c20      	cmp	r4, #32
 800ffa4:	d006      	beq.n	800ffb4 <USBD_StdDevReq+0x20>
 800ffa6:	2c40      	cmp	r4, #64	; 0x40
 800ffa8:	d004      	beq.n	800ffb4 <USBD_StdDevReq+0x20>
 800ffaa:	b16c      	cbz	r4, 800ffc8 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800ffac:	f7ff ffe8 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ffb0:	2400      	movs	r4, #0
      break;
 800ffb2:	e006      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ffb4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	4631      	mov	r1, r6
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	4798      	blx	r3
 800ffc0:	4604      	mov	r4, r0
}
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	b003      	add	sp, #12
 800ffc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800ffc8:	784d      	ldrb	r5, [r1, #1]
 800ffca:	2d09      	cmp	r5, #9
 800ffcc:	f200 81ab 	bhi.w	8010326 <USBD_StdDevReq+0x392>
 800ffd0:	e8df f015 	tbh	[pc, r5, lsl #1]
 800ffd4:	0197016f 	.word	0x0197016f
 800ffd8:	018e01a9 	.word	0x018e01a9
 800ffdc:	00ca01a9 	.word	0x00ca01a9
 800ffe0:	01a9000a 	.word	0x01a9000a
 800ffe4:	00f1014f 	.word	0x00f1014f
  uint16_t len = 0U;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800ffee:	884a      	ldrh	r2, [r1, #2]
 800fff0:	0a13      	lsrs	r3, r2, #8
 800fff2:	3b01      	subs	r3, #1
 800fff4:	2b06      	cmp	r3, #6
 800fff6:	f200 80aa 	bhi.w	801014e <USBD_StdDevReq+0x1ba>
 800fffa:	e8df f003 	tbb	[pc, r3]
 800fffe:	1e04      	.short	0x1e04
 8010000:	8ca8a832 	.word	0x8ca8a832
 8010004:	99          	.byte	0x99
 8010005:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010006:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f10d 0106 	add.w	r1, sp, #6
 8010010:	7c00      	ldrb	r0, [r0, #16]
 8010012:	4798      	blx	r3
  if (req->wLength != 0U)
 8010014:	88f2      	ldrh	r2, [r6, #6]
 8010016:	2a00      	cmp	r2, #0
 8010018:	f000 80a2 	beq.w	8010160 <USBD_StdDevReq+0x1cc>
    if (len != 0U)
 801001c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 8098 	beq.w	8010156 <USBD_StdDevReq+0x1c2>
      len = MIN(len, req->wLength);
 8010026:	429a      	cmp	r2, r3
 8010028:	bf28      	it	cs
 801002a:	461a      	movcs	r2, r3
 801002c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010030:	4601      	mov	r1, r0
 8010032:	4638      	mov	r0, r7
 8010034:	f000 fab6 	bl	80105a4 <USBD_CtlSendData>
 8010038:	e7c3      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801003a:	7c03      	ldrb	r3, [r0, #16]
 801003c:	b943      	cbnz	r3, 8010050 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801003e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010044:	f10d 0006 	add.w	r0, sp, #6
 8010048:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801004a:	2302      	movs	r3, #2
 801004c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801004e:	e7e1      	b.n	8010014 <USBD_StdDevReq+0x80>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010050:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010056:	f10d 0006 	add.w	r0, sp, #6
 801005a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801005c:	2302      	movs	r3, #2
 801005e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010060:	e7d8      	b.n	8010014 <USBD_StdDevReq+0x80>
      switch ((uint8_t)(req->wValue))
 8010062:	b2d2      	uxtb	r2, r2
 8010064:	2a05      	cmp	r2, #5
 8010066:	d852      	bhi.n	801010e <USBD_StdDevReq+0x17a>
 8010068:	e8df f002 	tbb	[pc, r2]
 801006c:	2a1d1003 	.word	0x2a1d1003
 8010070:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010072:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	b123      	cbz	r3, 8010084 <USBD_StdDevReq+0xf0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801007a:	f10d 0106 	add.w	r1, sp, #6
 801007e:	7c00      	ldrb	r0, [r0, #16]
 8010080:	4798      	blx	r3
  if (err != 0U)
 8010082:	e7c7      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 8010084:	4631      	mov	r1, r6
 8010086:	f7ff ff7b 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 801008a:	e79a      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801008c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	b123      	cbz	r3, 801009e <USBD_StdDevReq+0x10a>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010094:	f10d 0106 	add.w	r1, sp, #6
 8010098:	7c00      	ldrb	r0, [r0, #16]
 801009a:	4798      	blx	r3
  if (err != 0U)
 801009c:	e7ba      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 801009e:	4631      	mov	r1, r6
 80100a0:	f7ff ff6e 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 80100a4:	e78d      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80100a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	b123      	cbz	r3, 80100b8 <USBD_StdDevReq+0x124>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80100ae:	f10d 0106 	add.w	r1, sp, #6
 80100b2:	7c00      	ldrb	r0, [r0, #16]
 80100b4:	4798      	blx	r3
  if (err != 0U)
 80100b6:	e7ad      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 80100b8:	4631      	mov	r1, r6
 80100ba:	f7ff ff61 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 80100be:	e780      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80100c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	b123      	cbz	r3, 80100d2 <USBD_StdDevReq+0x13e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80100c8:	f10d 0106 	add.w	r1, sp, #6
 80100cc:	7c00      	ldrb	r0, [r0, #16]
 80100ce:	4798      	blx	r3
  if (err != 0U)
 80100d0:	e7a0      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 80100d2:	4631      	mov	r1, r6
 80100d4:	f7ff ff54 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 80100d8:	e773      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80100da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	b123      	cbz	r3, 80100ec <USBD_StdDevReq+0x158>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100e2:	f10d 0106 	add.w	r1, sp, #6
 80100e6:	7c00      	ldrb	r0, [r0, #16]
 80100e8:	4798      	blx	r3
  if (err != 0U)
 80100ea:	e793      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 80100ec:	4631      	mov	r1, r6
 80100ee:	f7ff ff47 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 80100f2:	e766      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80100f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	b123      	cbz	r3, 8010106 <USBD_StdDevReq+0x172>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80100fc:	f10d 0106 	add.w	r1, sp, #6
 8010100:	7c00      	ldrb	r0, [r0, #16]
 8010102:	4798      	blx	r3
  if (err != 0U)
 8010104:	e786      	b.n	8010014 <USBD_StdDevReq+0x80>
            USBD_CtlError(pdev, req);
 8010106:	4631      	mov	r1, r6
 8010108:	f7ff ff3a 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 801010c:	e759      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 801010e:	4631      	mov	r1, r6
 8010110:	f7ff ff36 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 8010114:	e755      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010116:	7c03      	ldrb	r3, [r0, #16]
 8010118:	b933      	cbnz	r3, 8010128 <USBD_StdDevReq+0x194>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801011a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801011e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010120:	f10d 0006 	add.w	r0, sp, #6
 8010124:	4798      	blx	r3
  if (err != 0U)
 8010126:	e775      	b.n	8010014 <USBD_StdDevReq+0x80>
        USBD_CtlError(pdev, req);
 8010128:	4631      	mov	r1, r6
 801012a:	f7ff ff29 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 801012e:	e748      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010130:	7c03      	ldrb	r3, [r0, #16]
 8010132:	b943      	cbnz	r3, 8010146 <USBD_StdDevReq+0x1b2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010134:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013a:	f10d 0006 	add.w	r0, sp, #6
 801013e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010140:	2307      	movs	r3, #7
 8010142:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010144:	e766      	b.n	8010014 <USBD_StdDevReq+0x80>
        USBD_CtlError(pdev, req);
 8010146:	4631      	mov	r1, r6
 8010148:	f7ff ff1a 	bl	800ff80 <USBD_CtlError>
  if (err != 0U)
 801014c:	e739      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 801014e:	4631      	mov	r1, r6
 8010150:	f7ff ff16 	bl	800ff80 <USBD_CtlError>
    return;
 8010154:	e735      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8010156:	4631      	mov	r1, r6
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff ff11 	bl	800ff80 <USBD_CtlError>
 801015e:	e730      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
    (void)USBD_CtlSendStatus(pdev);
 8010160:	4638      	mov	r0, r7
 8010162:	f000 fa4b 	bl	80105fc <USBD_CtlSendStatus>
 8010166:	e72c      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010168:	888b      	ldrh	r3, [r1, #4]
 801016a:	b9fb      	cbnz	r3, 80101ac <USBD_StdDevReq+0x218>
 801016c:	88cb      	ldrh	r3, [r1, #6]
 801016e:	b9eb      	cbnz	r3, 80101ac <USBD_StdDevReq+0x218>
 8010170:	884b      	ldrh	r3, [r1, #2]
 8010172:	2b7f      	cmp	r3, #127	; 0x7f
 8010174:	d81a      	bhi.n	80101ac <USBD_StdDevReq+0x218>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010176:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801017a:	b2d2      	uxtb	r2, r2
 801017c:	2a03      	cmp	r2, #3
 801017e:	d00d      	beq.n	801019c <USBD_StdDevReq+0x208>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010180:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 8010182:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010186:	4629      	mov	r1, r5
 8010188:	f000 fca9 	bl	8010ade <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801018c:	4638      	mov	r0, r7
 801018e:	f000 fa35 	bl	80105fc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8010192:	b135      	cbz	r5, 80101a2 <USBD_StdDevReq+0x20e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010194:	2302      	movs	r3, #2
 8010196:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 801019a:	e712      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 801019c:	f7ff fef0 	bl	800ff80 <USBD_CtlError>
 80101a0:	e70f      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101a2:	2301      	movs	r3, #1
 80101a4:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 80101a8:	462c      	mov	r4, r5
 80101aa:	e70a      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 80101ac:	4631      	mov	r1, r6
 80101ae:	4638      	mov	r0, r7
 80101b0:	f7ff fee6 	bl	800ff80 <USBD_CtlError>
 80101b4:	e705      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 80101b6:	788d      	ldrb	r5, [r1, #2]
 80101b8:	4b5c      	ldr	r3, [pc, #368]	; (801032c <USBD_StdDevReq+0x398>)
 80101ba:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101bc:	2d01      	cmp	r5, #1
 80101be:	d80f      	bhi.n	80101e0 <USBD_StdDevReq+0x24c>
  switch (pdev->dev_state)
 80101c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d00e      	beq.n	80101e8 <USBD_StdDevReq+0x254>
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d023      	beq.n	8010216 <USBD_StdDevReq+0x282>
      USBD_CtlError(pdev, req);
 80101ce:	f7ff fed7 	bl	800ff80 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101d2:	4b56      	ldr	r3, [pc, #344]	; (801032c <USBD_StdDevReq+0x398>)
 80101d4:	7819      	ldrb	r1, [r3, #0]
 80101d6:	4638      	mov	r0, r7
 80101d8:	f7ff fd5e 	bl	800fc98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80101dc:	2403      	movs	r4, #3
      break;
 80101de:	e6f0      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 80101e0:	f7ff fece 	bl	800ff80 <USBD_CtlError>
    return USBD_FAIL;
 80101e4:	2403      	movs	r4, #3
 80101e6:	e6ec      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      if (cfgidx != 0U)
 80101e8:	b18d      	cbz	r5, 801020e <USBD_StdDevReq+0x27a>
        pdev->dev_config = cfgidx;
 80101ea:	2101      	movs	r1, #1
 80101ec:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80101ee:	f7ff fd4a 	bl	800fc86 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80101f2:	4604      	mov	r4, r0
 80101f4:	b120      	cbz	r0, 8010200 <USBD_StdDevReq+0x26c>
          USBD_CtlError(pdev, req);
 80101f6:	4631      	mov	r1, r6
 80101f8:	4638      	mov	r0, r7
 80101fa:	f7ff fec1 	bl	800ff80 <USBD_CtlError>
 80101fe:	e6e0      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8010200:	4638      	mov	r0, r7
 8010202:	f000 f9fb 	bl	80105fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010206:	2303      	movs	r3, #3
 8010208:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 801020c:	e6d9      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 801020e:	f000 f9f5 	bl	80105fc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8010212:	462c      	mov	r4, r5
 8010214:	e6d5      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      if (cfgidx == 0U)
 8010216:	b1cd      	cbz	r5, 801024c <USBD_StdDevReq+0x2b8>
      else if (cfgidx != pdev->dev_config)
 8010218:	6841      	ldr	r1, [r0, #4]
 801021a:	2901      	cmp	r1, #1
 801021c:	d026      	beq.n	801026c <USBD_StdDevReq+0x2d8>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801021e:	b2c9      	uxtb	r1, r1
 8010220:	f7ff fd3a 	bl	800fc98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010224:	4b41      	ldr	r3, [pc, #260]	; (801032c <USBD_StdDevReq+0x398>)
 8010226:	7819      	ldrb	r1, [r3, #0]
 8010228:	6079      	str	r1, [r7, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801022a:	4638      	mov	r0, r7
 801022c:	f7ff fd2b 	bl	800fc86 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8010230:	4604      	mov	r4, r0
 8010232:	b1b8      	cbz	r0, 8010264 <USBD_StdDevReq+0x2d0>
          USBD_CtlError(pdev, req);
 8010234:	4631      	mov	r1, r6
 8010236:	4638      	mov	r0, r7
 8010238:	f7ff fea2 	bl	800ff80 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801023c:	7939      	ldrb	r1, [r7, #4]
 801023e:	4638      	mov	r0, r7
 8010240:	f7ff fd2a 	bl	800fc98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010244:	2302      	movs	r3, #2
 8010246:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 801024a:	e6ba      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801024c:	2302      	movs	r3, #2
 801024e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010252:	2100      	movs	r1, #0
 8010254:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010256:	f7ff fd1f 	bl	800fc98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801025a:	4638      	mov	r0, r7
 801025c:	f000 f9ce 	bl	80105fc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8010260:	462c      	mov	r4, r5
 8010262:	e6ae      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8010264:	4638      	mov	r0, r7
 8010266:	f000 f9c9 	bl	80105fc <USBD_CtlSendStatus>
 801026a:	e6aa      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 801026c:	f000 f9c6 	bl	80105fc <USBD_CtlSendStatus>
 8010270:	e6a7      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  if (req->wLength != 1U)
 8010272:	88cb      	ldrh	r3, [r1, #6]
 8010274:	2b01      	cmp	r3, #1
 8010276:	d10b      	bne.n	8010290 <USBD_StdDevReq+0x2fc>
    switch (pdev->dev_state)
 8010278:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b02      	cmp	r3, #2
 8010280:	d909      	bls.n	8010296 <USBD_StdDevReq+0x302>
 8010282:	2b03      	cmp	r3, #3
 8010284:	d108      	bne.n	8010298 <USBD_StdDevReq+0x304>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010286:	2201      	movs	r2, #1
 8010288:	1d01      	adds	r1, r0, #4
 801028a:	f000 f98b 	bl	80105a4 <USBD_CtlSendData>
        break;
 801028e:	e698      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
    USBD_CtlError(pdev, req);
 8010290:	f7ff fe76 	bl	800ff80 <USBD_CtlError>
 8010294:	e695      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
    switch (pdev->dev_state)
 8010296:	b923      	cbnz	r3, 80102a2 <USBD_StdDevReq+0x30e>
        USBD_CtlError(pdev, req);
 8010298:	4631      	mov	r1, r6
 801029a:	4638      	mov	r0, r7
 801029c:	f7ff fe70 	bl	800ff80 <USBD_CtlError>
        break;
 80102a0:	e68f      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        pdev->dev_default_config = 0U;
 80102a2:	4601      	mov	r1, r0
 80102a4:	2300      	movs	r3, #0
 80102a6:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80102aa:	2201      	movs	r2, #1
 80102ac:	f000 f97a 	bl	80105a4 <USBD_CtlSendData>
        break;
 80102b0:	e687      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 80102b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80102b6:	3b01      	subs	r3, #1
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d815      	bhi.n	80102e8 <USBD_StdDevReq+0x354>
      if (req->wLength != 0x2U)
 80102bc:	88cb      	ldrh	r3, [r1, #6]
 80102be:	2b02      	cmp	r3, #2
 80102c0:	d10e      	bne.n	80102e0 <USBD_StdDevReq+0x34c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80102c2:	2301      	movs	r3, #1
 80102c4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80102c6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80102ca:	b10b      	cbz	r3, 80102d0 <USBD_StdDevReq+0x33c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80102cc:	2303      	movs	r3, #3
 80102ce:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80102d0:	2202      	movs	r2, #2
 80102d2:	f107 010c 	add.w	r1, r7, #12
 80102d6:	4638      	mov	r0, r7
 80102d8:	f000 f964 	bl	80105a4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80102dc:	462c      	mov	r4, r5
      break;
 80102de:	e670      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 80102e0:	f7ff fe4e 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80102e4:	462c      	mov	r4, r5
        break;
 80102e6:	e66c      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 80102e8:	f7ff fe4a 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80102ec:	462c      	mov	r4, r5
      break;
 80102ee:	e668      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102f0:	884b      	ldrh	r3, [r1, #2]
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	f47f ae65 	bne.w	800ffc2 <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 80102f8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102fc:	f000 f97e 	bl	80105fc <USBD_CtlSendStatus>
 8010300:	e65f      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 8010302:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010306:	3b01      	subs	r3, #1
 8010308:	2b02      	cmp	r3, #2
 801030a:	d809      	bhi.n	8010320 <USBD_StdDevReq+0x38c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801030c:	884b      	ldrh	r3, [r1, #2]
 801030e:	2b01      	cmp	r3, #1
 8010310:	f47f ae57 	bne.w	800ffc2 <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 8010314:	2300      	movs	r3, #0
 8010316:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801031a:	f000 f96f 	bl	80105fc <USBD_CtlSendStatus>
 801031e:	e650      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8010320:	f7ff fe2e 	bl	800ff80 <USBD_CtlError>
      break;
 8010324:	e64d      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
          USBD_CtlError(pdev, req);
 8010326:	f7ff fe2b 	bl	800ff80 <USBD_CtlError>
          break;
 801032a:	e64a      	b.n	800ffc2 <USBD_StdDevReq+0x2e>
 801032c:	24034000 	.word	0x24034000

08010330 <USBD_StdItfReq>:
{
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	4605      	mov	r5, r0
 8010334:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010336:	780b      	ldrb	r3, [r1, #0]
 8010338:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801033c:	2a40      	cmp	r2, #64	; 0x40
 801033e:	d007      	beq.n	8010350 <USBD_StdItfReq+0x20>
 8010340:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010344:	d004      	beq.n	8010350 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8010346:	f7ff fe1b 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 801034a:	2600      	movs	r6, #0
}
 801034c:	4630      	mov	r0, r6
 801034e:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8010350:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8010354:	3b01      	subs	r3, #1
 8010356:	2b02      	cmp	r3, #2
 8010358:	d818      	bhi.n	801038c <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801035a:	7923      	ldrb	r3, [r4, #4]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d80f      	bhi.n	8010380 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010360:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	4621      	mov	r1, r4
 8010368:	4628      	mov	r0, r5
 801036a:	4798      	blx	r3
 801036c:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 801036e:	88e3      	ldrh	r3, [r4, #6]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1eb      	bne.n	801034c <USBD_StdItfReq+0x1c>
 8010374:	2800      	cmp	r0, #0
 8010376:	d1e9      	bne.n	801034c <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8010378:	4628      	mov	r0, r5
 801037a:	f000 f93f 	bl	80105fc <USBD_CtlSendStatus>
 801037e:	e7e5      	b.n	801034c <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8010380:	4621      	mov	r1, r4
 8010382:	4628      	mov	r0, r5
 8010384:	f7ff fdfc 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010388:	2600      	movs	r6, #0
 801038a:	e7df      	b.n	801034c <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 801038c:	4621      	mov	r1, r4
 801038e:	4628      	mov	r0, r5
 8010390:	f7ff fdf6 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010394:	2600      	movs	r6, #0
          break;
 8010396:	e7d9      	b.n	801034c <USBD_StdItfReq+0x1c>

08010398 <USBD_StdEPReq>:
{
 8010398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039a:	4607      	mov	r7, r0
 801039c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801039e:	780c      	ldrb	r4, [r1, #0]
 80103a0:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80103a4:	2c20      	cmp	r4, #32
 80103a6:	d006      	beq.n	80103b6 <USBD_StdEPReq+0x1e>
 80103a8:	2c40      	cmp	r4, #64	; 0x40
 80103aa:	d004      	beq.n	80103b6 <USBD_StdEPReq+0x1e>
 80103ac:	b164      	cbz	r4, 80103c8 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 80103ae:	f7ff fde7 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80103b2:	2400      	movs	r4, #0
      break;
 80103b4:	e006      	b.n	80103c4 <USBD_StdEPReq+0x2c>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80103b6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	4631      	mov	r1, r6
 80103be:	4638      	mov	r0, r7
 80103c0:	4798      	blx	r3
 80103c2:	4604      	mov	r4, r0
}
 80103c4:	4620      	mov	r0, r4
 80103c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep_addr = LOBYTE(req->wIndex);
 80103c8:	888b      	ldrh	r3, [r1, #4]
 80103ca:	b2d9      	uxtb	r1, r3
      switch (req->bRequest)
 80103cc:	7875      	ldrb	r5, [r6, #1]
 80103ce:	2d01      	cmp	r5, #1
 80103d0:	d02f      	beq.n	8010432 <USBD_StdEPReq+0x9a>
 80103d2:	2d03      	cmp	r5, #3
 80103d4:	d005      	beq.n	80103e2 <USBD_StdEPReq+0x4a>
 80103d6:	2d00      	cmp	r5, #0
 80103d8:	d059      	beq.n	801048e <USBD_StdEPReq+0xf6>
          USBD_CtlError(pdev, req);
 80103da:	4631      	mov	r1, r6
 80103dc:	f7ff fdd0 	bl	800ff80 <USBD_CtlError>
          break;
 80103e0:	e7f0      	b.n	80103c4 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80103e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	2b02      	cmp	r3, #2
 80103ea:	d005      	beq.n	80103f8 <USBD_StdEPReq+0x60>
 80103ec:	2b03      	cmp	r3, #3
 80103ee:	d012      	beq.n	8010416 <USBD_StdEPReq+0x7e>
              USBD_CtlError(pdev, req);
 80103f0:	4631      	mov	r1, r6
 80103f2:	f7ff fdc5 	bl	800ff80 <USBD_CtlError>
              break;
 80103f6:	e7e5      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103f8:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
 80103fc:	d006      	beq.n	801040c <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80103fe:	f000 fb5e 	bl	8010abe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010402:	2180      	movs	r1, #128	; 0x80
 8010404:	4638      	mov	r0, r7
 8010406:	f000 fb5a 	bl	8010abe <USBD_LL_StallEP>
 801040a:	e7db      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 801040c:	4631      	mov	r1, r6
 801040e:	f7ff fdb7 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010412:	462c      	mov	r4, r5
 8010414:	e7d6      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010416:	8873      	ldrh	r3, [r6, #2]
 8010418:	b923      	cbnz	r3, 8010424 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801041a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 801041e:	d001      	beq.n	8010424 <USBD_StdEPReq+0x8c>
 8010420:	88f3      	ldrh	r3, [r6, #6]
 8010422:	b11b      	cbz	r3, 801042c <USBD_StdEPReq+0x94>
              (void)USBD_CtlSendStatus(pdev);
 8010424:	4638      	mov	r0, r7
 8010426:	f000 f8e9 	bl	80105fc <USBD_CtlSendStatus>
              break;
 801042a:	e7cb      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801042c:	f000 fb47 	bl	8010abe <USBD_LL_StallEP>
 8010430:	e7f8      	b.n	8010424 <USBD_StdEPReq+0x8c>
          switch (pdev->dev_state)
 8010432:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010436:	b2db      	uxtb	r3, r3
 8010438:	2b02      	cmp	r3, #2
 801043a:	d005      	beq.n	8010448 <USBD_StdEPReq+0xb0>
 801043c:	2b03      	cmp	r3, #3
 801043e:	d012      	beq.n	8010466 <USBD_StdEPReq+0xce>
              USBD_CtlError(pdev, req);
 8010440:	4631      	mov	r1, r6
 8010442:	f7ff fd9d 	bl	800ff80 <USBD_CtlError>
              break;
 8010446:	e7bd      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010448:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
 801044c:	d006      	beq.n	801045c <USBD_StdEPReq+0xc4>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801044e:	f000 fb36 	bl	8010abe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010452:	2180      	movs	r1, #128	; 0x80
 8010454:	4638      	mov	r0, r7
 8010456:	f000 fb32 	bl	8010abe <USBD_LL_StallEP>
 801045a:	e7b3      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 801045c:	4631      	mov	r1, r6
 801045e:	f7ff fd8f 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010462:	462c      	mov	r4, r5
 8010464:	e7ae      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010466:	8873      	ldrh	r3, [r6, #2]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1ab      	bne.n	80103c4 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 801046c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8010470:	d10a      	bne.n	8010488 <USBD_StdEPReq+0xf0>
                (void)USBD_CtlSendStatus(pdev);
 8010472:	4638      	mov	r0, r7
 8010474:	f000 f8c2 	bl	80105fc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010478:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	4631      	mov	r1, r6
 8010480:	4638      	mov	r0, r7
 8010482:	4798      	blx	r3
 8010484:	4604      	mov	r4, r0
 8010486:	e79d      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010488:	f000 fb21 	bl	8010ace <USBD_LL_ClearStallEP>
 801048c:	e7f1      	b.n	8010472 <USBD_StdEPReq+0xda>
          switch (pdev->dev_state)
 801048e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	2a02      	cmp	r2, #2
 8010496:	d006      	beq.n	80104a6 <USBD_StdEPReq+0x10e>
 8010498:	2a03      	cmp	r2, #3
 801049a:	d019      	beq.n	80104d0 <USBD_StdEPReq+0x138>
              USBD_CtlError(pdev, req);
 801049c:	4631      	mov	r1, r6
 801049e:	f7ff fd6f 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80104a2:	462c      	mov	r4, r5
              break;
 80104a4:	e78e      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104a6:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
 80104aa:	d10c      	bne.n	80104c6 <USBD_StdEPReq+0x12e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80104b0:	bf14      	ite	ne
 80104b2:	f100 0114 	addne.w	r1, r0, #20
 80104b6:	f500 71aa 	addeq.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80104ba:	2300      	movs	r3, #0
 80104bc:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104be:	2202      	movs	r2, #2
 80104c0:	f000 f870 	bl	80105a4 <USBD_CtlSendData>
              break;
 80104c4:	e77e      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 80104c6:	4631      	mov	r1, r6
 80104c8:	f7ff fd5a 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80104cc:	462c      	mov	r4, r5
                break;
 80104ce:	e779      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              if ((ep_addr & 0x80U) == 0x80U)
 80104d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80104d4:	d11c      	bne.n	8010510 <USBD_StdEPReq+0x178>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80104d6:	f001 030f 	and.w	r3, r1, #15
 80104da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80104de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80104e2:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80104e6:	b343      	cbz	r3, 801053a <USBD_StdEPReq+0x1a2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80104e8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80104f0:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80104f4:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80104f8:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80104fc:	d122      	bne.n	8010544 <USBD_StdEPReq+0x1ac>
                pep->status = 0x0000U;
 80104fe:	2300      	movs	r3, #0
 8010500:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010502:	2202      	movs	r2, #2
 8010504:	4621      	mov	r1, r4
 8010506:	4638      	mov	r0, r7
 8010508:	f000 f84c 	bl	80105a4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 801050c:	462c      	mov	r4, r5
              break;
 801050e:	e759      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010510:	f001 030f 	and.w	r3, r1, #15
 8010514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010518:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801051c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801051e:	b13b      	cbz	r3, 8010530 <USBD_StdEPReq+0x198>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010520:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8010524:	3401      	adds	r4, #1
 8010526:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801052a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801052e:	e7e3      	b.n	80104f8 <USBD_StdEPReq+0x160>
                  USBD_CtlError(pdev, req);
 8010530:	4631      	mov	r1, r6
 8010532:	f7ff fd25 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010536:	462c      	mov	r4, r5
                  break;
 8010538:	e744      	b.n	80103c4 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 801053a:	4631      	mov	r1, r6
 801053c:	f7ff fd20 	bl	800ff80 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010540:	462c      	mov	r4, r5
                  break;
 8010542:	e73f      	b.n	80103c4 <USBD_StdEPReq+0x2c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010544:	4638      	mov	r0, r7
 8010546:	f000 fa7d 	bl	8010a44 <USBD_LL_IsStallEP>
 801054a:	b110      	cbz	r0, 8010552 <USBD_StdEPReq+0x1ba>
                pep->status = 0x0001U;
 801054c:	2301      	movs	r3, #1
 801054e:	6023      	str	r3, [r4, #0]
 8010550:	e7d7      	b.n	8010502 <USBD_StdEPReq+0x16a>
                pep->status = 0x0000U;
 8010552:	2300      	movs	r3, #0
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	e7d4      	b.n	8010502 <USBD_StdEPReq+0x16a>

08010558 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010558:	b318      	cbz	r0, 80105a2 <USBD_GetString+0x4a>
{
 801055a:	b510      	push	{r4, lr}
 801055c:	4684      	mov	ip, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801055e:	7803      	ldrb	r3, [r0, #0]
 8010560:	b143      	cbz	r3, 8010574 <USBD_GetString+0x1c>
 8010562:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 8010566:	eb00 030e 	add.w	r3, r0, lr
 801056a:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 801056c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8010570:	2c00      	cmp	r4, #0
 8010572:	d1f8      	bne.n	8010566 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	3302      	adds	r3, #2
 8010578:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 801057a:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801057c:	2303      	movs	r3, #3
 801057e:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8010580:	f89c 2000 	ldrb.w	r2, [ip]
 8010584:	b162      	cbz	r2, 80105a0 <USBD_GetString+0x48>
 8010586:	4660      	mov	r0, ip
  idx++;
 8010588:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 801058a:	2400      	movs	r4, #0
    unicode[idx] = *pdesc;
 801058c:	54ca      	strb	r2, [r1, r3]
    idx++;
 801058e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8010590:	b2d2      	uxtb	r2, r2
 8010592:	548c      	strb	r4, [r1, r2]
    idx++;
 8010594:	3302      	adds	r3, #2
 8010596:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8010598:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801059c:	2a00      	cmp	r2, #0
 801059e:	d1f5      	bne.n	801058c <USBD_GetString+0x34>
}
 80105a0:	bd10      	pop	{r4, pc}
 80105a2:	4770      	bx	lr

080105a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80105a4:	b508      	push	{r3, lr}
 80105a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105a8:	2202      	movs	r2, #2
 80105aa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105ae:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80105b0:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105b2:	460a      	mov	r2, r1
 80105b4:	2100      	movs	r1, #0
 80105b6:	f000 fa9a 	bl	8010aee <USBD_LL_Transmit>

  return USBD_OK;
}
 80105ba:	2000      	movs	r0, #0
 80105bc:	bd08      	pop	{r3, pc}

080105be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80105be:	b508      	push	{r3, lr}
 80105c0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105c2:	460a      	mov	r2, r1
 80105c4:	2100      	movs	r1, #0
 80105c6:	f000 fa92 	bl	8010aee <USBD_LL_Transmit>

  return USBD_OK;
}
 80105ca:	2000      	movs	r0, #0
 80105cc:	bd08      	pop	{r3, pc}

080105ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80105ce:	b508      	push	{r3, lr}
 80105d0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80105d2:	2203      	movs	r2, #3
 80105d4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80105d8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80105dc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105e0:	460a      	mov	r2, r1
 80105e2:	2100      	movs	r1, #0
 80105e4:	f000 fa8b 	bl	8010afe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80105e8:	2000      	movs	r0, #0
 80105ea:	bd08      	pop	{r3, pc}

080105ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80105ec:	b508      	push	{r3, lr}
 80105ee:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105f0:	460a      	mov	r2, r1
 80105f2:	2100      	movs	r1, #0
 80105f4:	f000 fa83 	bl	8010afe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80105f8:	2000      	movs	r0, #0
 80105fa:	bd08      	pop	{r3, pc}

080105fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80105fc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80105fe:	2204      	movs	r2, #4
 8010600:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010604:	2300      	movs	r3, #0
 8010606:	461a      	mov	r2, r3
 8010608:	4619      	mov	r1, r3
 801060a:	f000 fa70 	bl	8010aee <USBD_LL_Transmit>

  return USBD_OK;
}
 801060e:	2000      	movs	r0, #0
 8010610:	bd08      	pop	{r3, pc}

08010612 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010612:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010614:	2205      	movs	r2, #5
 8010616:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801061a:	2300      	movs	r3, #0
 801061c:	461a      	mov	r2, r3
 801061e:	4619      	mov	r1, r3
 8010620:	f000 fa6d 	bl	8010afe <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010624:	2000      	movs	r0, #0
 8010626:	bd08      	pop	{r3, pc}

08010628 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801062a:	2200      	movs	r2, #0
 801062c:	4910      	ldr	r1, [pc, #64]	; (8010670 <MX_USB_DEVICE_Init+0x48>)
 801062e:	4811      	ldr	r0, [pc, #68]	; (8010674 <MX_USB_DEVICE_Init+0x4c>)
 8010630:	f7ff faf7 	bl	800fc22 <USBD_Init>
 8010634:	b980      	cbnz	r0, 8010658 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010636:	4910      	ldr	r1, [pc, #64]	; (8010678 <MX_USB_DEVICE_Init+0x50>)
 8010638:	480e      	ldr	r0, [pc, #56]	; (8010674 <MX_USB_DEVICE_Init+0x4c>)
 801063a:	f7ff fb09 	bl	800fc50 <USBD_RegisterClass>
 801063e:	b970      	cbnz	r0, 801065e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010640:	490e      	ldr	r1, [pc, #56]	; (801067c <MX_USB_DEVICE_Init+0x54>)
 8010642:	480c      	ldr	r0, [pc, #48]	; (8010674 <MX_USB_DEVICE_Init+0x4c>)
 8010644:	f7ff fa9f 	bl	800fb86 <USBD_CDC_RegisterInterface>
 8010648:	b960      	cbnz	r0, 8010664 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801064a:	480a      	ldr	r0, [pc, #40]	; (8010674 <MX_USB_DEVICE_Init+0x4c>)
 801064c:	f7ff fb17 	bl	800fc7e <USBD_Start>
 8010650:	b958      	cbnz	r0, 801066a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010652:	f7fa ff69 	bl	800b528 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010656:	bd08      	pop	{r3, pc}
    Error_Handler();
 8010658:	f7f9 fc7c 	bl	8009f54 <Error_Handler>
 801065c:	e7eb      	b.n	8010636 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 801065e:	f7f9 fc79 	bl	8009f54 <Error_Handler>
 8010662:	e7ed      	b.n	8010640 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8010664:	f7f9 fc76 	bl	8009f54 <Error_Handler>
 8010668:	e7ef      	b.n	801064a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801066a:	f7f9 fc73 	bl	8009f54 <Error_Handler>
 801066e:	e7f0      	b.n	8010652 <MX_USB_DEVICE_Init+0x2a>
 8010670:	2400817c 	.word	0x2400817c
 8010674:	24034004 	.word	0x24034004
 8010678:	24008058 	.word	0x24008058
 801067c:	24008168 	.word	0x24008168

08010680 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8010680:	2000      	movs	r0, #0
 8010682:	4770      	bx	lr

08010684 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8010684:	2000      	movs	r0, #0
 8010686:	4770      	bx	lr

08010688 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010688:	b500      	push	{lr}
 801068a:	b085      	sub	sp, #20
  UNUSED(Len);
  UNUSED(epnum);


  BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
 801068c:	2300      	movs	r3, #0
 801068e:	9303      	str	r3, [sp, #12]

    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;

    AFLfuzzer.bTXcomplete = true;
 8010690:	480c      	ldr	r0, [pc, #48]	; (80106c4 <CDC_TransmitCplt_FS+0x3c>)
 8010692:	2101      	movs	r1, #1
 8010694:	f880 1865 	strb.w	r1, [r0, #2149]	; 0x865
    xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 8010698:	aa03      	add	r2, sp, #12
 801069a:	9201      	str	r2, [sp, #4]
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	460b      	mov	r3, r1
 80106a0:	2202      	movs	r2, #2
 80106a2:	f8d0 086c 	ldr.w	r0, [r0, #2156]	; 0x86c
 80106a6:	f7f2 fa77 	bl	8002b98 <xTaskGenericNotifyFromISR>
  	  	    				1, //index
  							2, //value = 2 data TX complete
  							eSetBits,
  							&xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80106aa:	9b03      	ldr	r3, [sp, #12]
 80106ac:	b12b      	cbz	r3, 80106ba <CDC_TransmitCplt_FS+0x32>
 80106ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80106b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04


  /* USER CODE END 13 */
  return result;
}
 80106ba:	2000      	movs	r0, #0
 80106bc:	b005      	add	sp, #20
 80106be:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c2:	bf00      	nop
 80106c4:	24026000 	.word	0x24026000

080106c8 <CDC_Receive_FS>:
{
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4604      	mov	r4, r0
	  FuzzingInputHandler(Buf, Len);
 80106cc:	f7f9 f998 	bl	8009a00 <FuzzingInputHandler>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80106d0:	4d04      	ldr	r5, [pc, #16]	; (80106e4 <CDC_Receive_FS+0x1c>)
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	f7ff fa68 	bl	800fbaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80106da:	4628      	mov	r0, r5
 80106dc:	f7ff fa88 	bl	800fbf0 <USBD_CDC_ReceivePacket>
}
 80106e0:	2000      	movs	r0, #0
 80106e2:	bd38      	pop	{r3, r4, r5, pc}
 80106e4:	24034004 	.word	0x24034004

080106e8 <CDC_Init_FS>:
{
 80106e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80106ea:	4c06      	ldr	r4, [pc, #24]	; (8010704 <CDC_Init_FS+0x1c>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	4906      	ldr	r1, [pc, #24]	; (8010708 <CDC_Init_FS+0x20>)
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff fa4f 	bl	800fb94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80106f6:	4905      	ldr	r1, [pc, #20]	; (801070c <CDC_Init_FS+0x24>)
 80106f8:	4620      	mov	r0, r4
 80106fa:	f7ff fa56 	bl	800fbaa <USBD_CDC_SetRxBuffer>
}
 80106fe:	2000      	movs	r0, #0
 8010700:	bd10      	pop	{r4, pc}
 8010702:	bf00      	nop
 8010704:	24034004 	.word	0x24034004
 8010708:	24034ad4 	.word	0x24034ad4
 801070c:	240342d4 	.word	0x240342d4

08010710 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010710:	4b09      	ldr	r3, [pc, #36]	; (8010738 <CDC_Transmit_FS+0x28>)
 8010712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8010716:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801071a:	b10b      	cbz	r3, 8010720 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 801071c:	2001      	movs	r0, #1
}
 801071e:	4770      	bx	lr
{
 8010720:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010722:	4c05      	ldr	r4, [pc, #20]	; (8010738 <CDC_Transmit_FS+0x28>)
 8010724:	460a      	mov	r2, r1
 8010726:	4601      	mov	r1, r0
 8010728:	4620      	mov	r0, r4
 801072a:	f7ff fa33 	bl	800fb94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801072e:	4620      	mov	r0, r4
 8010730:	f7ff fa44 	bl	800fbbc <USBD_CDC_TransmitPacket>
}
 8010734:	bd10      	pop	{r4, pc}
 8010736:	bf00      	nop
 8010738:	24034004 	.word	0x24034004

0801073c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801073c:	2312      	movs	r3, #18
 801073e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8010740:	4800      	ldr	r0, [pc, #0]	; (8010744 <USBD_FS_DeviceDescriptor+0x8>)
 8010742:	4770      	bx	lr
 8010744:	24008198 	.word	0x24008198

08010748 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010748:	2304      	movs	r3, #4
 801074a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801074c:	4800      	ldr	r0, [pc, #0]	; (8010750 <USBD_FS_LangIDStrDescriptor+0x8>)
 801074e:	4770      	bx	lr
 8010750:	240081ac 	.word	0x240081ac

08010754 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8010754:	b1b2      	cbz	r2, 8010784 <IntToUnicode+0x30>
 8010756:	1c4b      	adds	r3, r1, #1
 8010758:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 801075c:	fa5f fc8c 	uxtb.w	ip, ip
 8010760:	3103      	adds	r1, #3
 8010762:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8010766:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 801076a:	0f02      	lsrs	r2, r0, #28
 801076c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8010770:	bf34      	ite	cc
 8010772:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010774:	3237      	addcs	r2, #55	; 0x37
 8010776:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 801077a:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 801077c:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8010780:	428b      	cmp	r3, r1
 8010782:	d1f2      	bne.n	801076a <IntToUnicode+0x16>
  }
}
 8010784:	4770      	bx	lr
	...

08010788 <USBD_FS_SerialStrDescriptor>:
{
 8010788:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 801078a:	231a      	movs	r3, #26
 801078c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801078e:	4b0c      	ldr	r3, [pc, #48]	; (80107c0 <USBD_FS_SerialStrDescriptor+0x38>)
 8010790:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
  deviceserial0 += deviceserial2;
 8010794:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
  if (deviceserial0 != 0)
 8010798:	18c0      	adds	r0, r0, r3
 801079a:	d101      	bne.n	80107a0 <USBD_FS_SerialStrDescriptor+0x18>
}
 801079c:	4809      	ldr	r0, [pc, #36]	; (80107c4 <USBD_FS_SerialStrDescriptor+0x3c>)
 801079e:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80107a0:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80107a2:	f8d3 5804 	ldr.w	r5, [r3, #2052]	; 0x804
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80107a6:	4c07      	ldr	r4, [pc, #28]	; (80107c4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80107a8:	2208      	movs	r2, #8
 80107aa:	1ca1      	adds	r1, r4, #2
 80107ac:	f7ff ffd2 	bl	8010754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80107b0:	2204      	movs	r2, #4
 80107b2:	f104 0112 	add.w	r1, r4, #18
 80107b6:	4628      	mov	r0, r5
 80107b8:	f7ff ffcc 	bl	8010754 <IntToUnicode>
 80107bc:	e7ee      	b.n	801079c <USBD_FS_SerialStrDescriptor+0x14>
 80107be:	bf00      	nop
 80107c0:	1ff1e000 	.word	0x1ff1e000
 80107c4:	240081b0 	.word	0x240081b0

080107c8 <USBD_FS_ProductStrDescriptor>:
{
 80107c8:	b508      	push	{r3, lr}
 80107ca:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80107cc:	4902      	ldr	r1, [pc, #8]	; (80107d8 <USBD_FS_ProductStrDescriptor+0x10>)
 80107ce:	4803      	ldr	r0, [pc, #12]	; (80107dc <USBD_FS_ProductStrDescriptor+0x14>)
 80107d0:	f7ff fec2 	bl	8010558 <USBD_GetString>
}
 80107d4:	4800      	ldr	r0, [pc, #0]	; (80107d8 <USBD_FS_ProductStrDescriptor+0x10>)
 80107d6:	bd08      	pop	{r3, pc}
 80107d8:	240352d4 	.word	0x240352d4
 80107dc:	24008dd8 	.word	0x24008dd8

080107e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80107e0:	b510      	push	{r4, lr}
 80107e2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80107e4:	4c03      	ldr	r4, [pc, #12]	; (80107f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80107e6:	4621      	mov	r1, r4
 80107e8:	4803      	ldr	r0, [pc, #12]	; (80107f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80107ea:	f7ff feb5 	bl	8010558 <USBD_GetString>
}
 80107ee:	4620      	mov	r0, r4
 80107f0:	bd10      	pop	{r4, pc}
 80107f2:	bf00      	nop
 80107f4:	240352d4 	.word	0x240352d4
 80107f8:	24008df0 	.word	0x24008df0

080107fc <USBD_FS_ConfigStrDescriptor>:
{
 80107fc:	b508      	push	{r3, lr}
 80107fe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010800:	4902      	ldr	r1, [pc, #8]	; (801080c <USBD_FS_ConfigStrDescriptor+0x10>)
 8010802:	4803      	ldr	r0, [pc, #12]	; (8010810 <USBD_FS_ConfigStrDescriptor+0x14>)
 8010804:	f7ff fea8 	bl	8010558 <USBD_GetString>
}
 8010808:	4800      	ldr	r0, [pc, #0]	; (801080c <USBD_FS_ConfigStrDescriptor+0x10>)
 801080a:	bd08      	pop	{r3, pc}
 801080c:	240352d4 	.word	0x240352d4
 8010810:	24008e04 	.word	0x24008e04

08010814 <USBD_FS_InterfaceStrDescriptor>:
{
 8010814:	b508      	push	{r3, lr}
 8010816:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010818:	4902      	ldr	r1, [pc, #8]	; (8010824 <USBD_FS_InterfaceStrDescriptor+0x10>)
 801081a:	4803      	ldr	r0, [pc, #12]	; (8010828 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801081c:	f7ff fe9c 	bl	8010558 <USBD_GetString>
}
 8010820:	4800      	ldr	r0, [pc, #0]	; (8010824 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8010822:	bd08      	pop	{r3, pc}
 8010824:	240352d4 	.word	0x240352d4
 8010828:	24008e10 	.word	0x24008e10

0801082c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	b0b6      	sub	sp, #216	; 0xd8
 8010830:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010832:	2100      	movs	r1, #0
 8010834:	9131      	str	r1, [sp, #196]	; 0xc4
 8010836:	9132      	str	r1, [sp, #200]	; 0xc8
 8010838:	9133      	str	r1, [sp, #204]	; 0xcc
 801083a:	9134      	str	r1, [sp, #208]	; 0xd0
 801083c:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801083e:	22bc      	movs	r2, #188	; 0xbc
 8010840:	a802      	add	r0, sp, #8
 8010842:	f000 fc4f 	bl	80110e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010846:	6822      	ldr	r2, [r4, #0]
 8010848:	4b27      	ldr	r3, [pc, #156]	; (80108e8 <HAL_PCD_MspInit+0xbc>)
 801084a:	429a      	cmp	r2, r3
 801084c:	d001      	beq.n	8010852 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801084e:	b036      	add	sp, #216	; 0xd8
 8010850:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010852:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010856:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010858:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801085c:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801085e:	a802      	add	r0, sp, #8
 8010860:	f7fb fd50 	bl	800c304 <HAL_RCCEx_PeriphCLKConfig>
 8010864:	2800      	cmp	r0, #0
 8010866:	d13b      	bne.n	80108e0 <HAL_PCD_MspInit+0xb4>
    HAL_PWREx_EnableUSBVoltageDetector();
 8010868:	f7fa fe5e 	bl	800b528 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801086c:	4c1f      	ldr	r4, [pc, #124]	; (80108ec <HAL_PCD_MspInit+0xc0>)
 801086e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8010872:	f043 0301 	orr.w	r3, r3, #1
 8010876:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 801087a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8010886:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801088a:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801088c:	2302      	movs	r3, #2
 801088e:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010890:	2500      	movs	r5, #0
 8010892:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010894:	9534      	str	r5, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010896:	230a      	movs	r3, #10
 8010898:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801089a:	4e15      	ldr	r6, [pc, #84]	; (80108f0 <HAL_PCD_MspInit+0xc4>)
 801089c:	a931      	add	r1, sp, #196	; 0xc4
 801089e:	4630      	mov	r0, r6
 80108a0:	f7f9 ff3c 	bl	800a71c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80108a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108a8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108aa:	9532      	str	r5, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108ac:	9533      	str	r5, [sp, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108ae:	a931      	add	r1, sp, #196	; 0xc4
 80108b0:	4630      	mov	r0, r6
 80108b2:	f7f9 ff33 	bl	800a71c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80108b6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80108ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108be:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80108c2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80108c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80108ce:	462a      	mov	r2, r5
 80108d0:	2105      	movs	r1, #5
 80108d2:	2065      	movs	r0, #101	; 0x65
 80108d4:	f7f9 fda4 	bl	800a420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108d8:	2065      	movs	r0, #101	; 0x65
 80108da:	f7f9 fdd5 	bl	800a488 <HAL_NVIC_EnableIRQ>
}
 80108de:	e7b6      	b.n	801084e <HAL_PCD_MspInit+0x22>
      Error_Handler();
 80108e0:	f7f9 fb38 	bl	8009f54 <Error_Handler>
 80108e4:	e7c0      	b.n	8010868 <HAL_PCD_MspInit+0x3c>
 80108e6:	bf00      	nop
 80108e8:	40080000 	.word	0x40080000
 80108ec:	58024400 	.word	0x58024400
 80108f0:	58020000 	.word	0x58020000

080108f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108f6:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80108fa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80108fe:	f7ff f9d3 	bl	800fca8 <USBD_LL_SetupStage>
}
 8010902:	bd08      	pop	{r3, pc}

08010904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010904:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010906:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801090a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801090e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010912:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8010916:	f7ff f9f3 	bl	800fd00 <USBD_LL_DataOutStage>
}
 801091a:	bd08      	pop	{r3, pc}

0801091c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801091c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801091e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8010922:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010928:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801092c:	f7ff fa24 	bl	800fd78 <USBD_LL_DataInStage>
}
 8010930:	bd08      	pop	{r3, pc}

08010932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010932:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010934:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8010938:	f7ff fac4 	bl	800fec4 <USBD_LL_SOF>
}
 801093c:	bd08      	pop	{r3, pc}

0801093e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801093e:	b510      	push	{r4, lr}
 8010940:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010942:	68c3      	ldr	r3, [r0, #12]
 8010944:	b13b      	cbz	r3, 8010956 <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010946:	2b02      	cmp	r3, #2
 8010948:	d101      	bne.n	801094e <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 801094a:	2101      	movs	r1, #1
 801094c:	e004      	b.n	8010958 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 801094e:	f7f9 fb01 	bl	8009f54 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010952:	2101      	movs	r1, #1
 8010954:	e000      	b.n	8010958 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8010956:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010958:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 801095c:	f7ff fa98 	bl	800fe90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010960:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8010964:	f7ff fa67 	bl	800fe36 <USBD_LL_Reset>
}
 8010968:	bd10      	pop	{r4, pc}
	...

0801096c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801096c:	b510      	push	{r4, lr}
 801096e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010970:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8010974:	f7ff fa8f 	bl	800fe96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010978:	6822      	ldr	r2, [r4, #0]
 801097a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801097e:	f043 0301 	orr.w	r3, r3, #1
 8010982:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010986:	6a23      	ldr	r3, [r4, #32]
 8010988:	b123      	cbz	r3, 8010994 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801098a:	4a03      	ldr	r2, [pc, #12]	; (8010998 <HAL_PCD_SuspendCallback+0x2c>)
 801098c:	6913      	ldr	r3, [r2, #16]
 801098e:	f043 0306 	orr.w	r3, r3, #6
 8010992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010994:	bd10      	pop	{r4, pc}
 8010996:	bf00      	nop
 8010998:	e000ed00 	.word	0xe000ed00

0801099c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801099c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801099e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80109a2:	f7ff fa82 	bl	800feaa <USBD_LL_Resume>
}
 80109a6:	bd08      	pop	{r3, pc}

080109a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80109aa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80109ae:	f7ff fab1 	bl	800ff14 <USBD_LL_IsoOUTIncomplete>
}
 80109b2:	bd08      	pop	{r3, pc}

080109b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80109b6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80109ba:	f7ff fa97 	bl	800feec <USBD_LL_IsoINIncomplete>
}
 80109be:	bd08      	pop	{r3, pc}

080109c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109c0:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80109c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80109c6:	f7ff fab9 	bl	800ff3c <USBD_LL_DevConnected>
}
 80109ca:	bd08      	pop	{r3, pc}

080109cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109cc:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80109ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80109d2:	f7ff fab5 	bl	800ff40 <USBD_LL_DevDisconnected>
}
 80109d6:	bd08      	pop	{r3, pc}

080109d8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80109d8:	7802      	ldrb	r2, [r0, #0]
 80109da:	b10a      	cbz	r2, 80109e0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 80109dc:	2000      	movs	r0, #0
 80109de:	4770      	bx	lr
{
 80109e0:	b510      	push	{r4, lr}
 80109e2:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80109e4:	4815      	ldr	r0, [pc, #84]	; (8010a3c <USBD_LL_Init+0x64>)
 80109e6:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80109ea:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80109ee:	4b14      	ldr	r3, [pc, #80]	; (8010a40 <USBD_LL_Init+0x68>)
 80109f0:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80109f2:	2309      	movs	r3, #9
 80109f4:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80109f6:	2202      	movs	r2, #2
 80109f8:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80109fa:	2300      	movs	r3, #0
 80109fc:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80109fe:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8010a00:	2201      	movs	r2, #1
 8010a02:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010a04:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010a06:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8010a08:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010a0a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010a0c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010a0e:	f7f9 ffbd 	bl	800a98c <HAL_PCD_Init>
 8010a12:	b980      	cbnz	r0, 8010a36 <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010a14:	4c09      	ldr	r4, [pc, #36]	; (8010a3c <USBD_LL_Init+0x64>)
 8010a16:	2180      	movs	r1, #128	; 0x80
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7fa fd43 	bl	800b4a4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010a1e:	2240      	movs	r2, #64	; 0x40
 8010a20:	2100      	movs	r1, #0
 8010a22:	4620      	mov	r0, r4
 8010a24:	f7fa fd19 	bl	800b45a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010a28:	2280      	movs	r2, #128	; 0x80
 8010a2a:	2101      	movs	r1, #1
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f7fa fd14 	bl	800b45a <HAL_PCDEx_SetTxFiFo>
}
 8010a32:	2000      	movs	r0, #0
 8010a34:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8010a36:	f7f9 fa8d 	bl	8009f54 <Error_Handler>
 8010a3a:	e7eb      	b.n	8010a14 <USBD_LL_Init+0x3c>
 8010a3c:	240354d4 	.word	0x240354d4
 8010a40:	40080000 	.word	0x40080000

08010a44 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a44:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8010a48:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a4c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8010a50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010a54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010a58:	bf14      	ite	ne
 8010a5a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a5e:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8010a62:	4770      	bx	lr

08010a64 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a64:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010a66:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a6a:	f7fa fc44 	bl	800b2f6 <HAL_PCD_EP_GetRxCount>
}
 8010a6e:	bd08      	pop	{r3, pc}

08010a70 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8010a70:	4800      	ldr	r0, [pc, #0]	; (8010a74 <USBD_static_malloc+0x4>)
 8010a72:	4770      	bx	lr
 8010a74:	240358dc 	.word	0x240358dc

08010a78 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8010a78:	4770      	bx	lr

08010a7a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8010a7a:	b120      	cbz	r0, 8010a86 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a7c:	2802      	cmp	r0, #2
 8010a7e:	bf14      	ite	ne
 8010a80:	2003      	movne	r0, #3
 8010a82:	2001      	moveq	r0, #1
 8010a84:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8010a86:	4770      	bx	lr

08010a88 <USBD_LL_Start>:
{
 8010a88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8010a8a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a8e:	f7fa f81b 	bl	800aac8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a92:	f7ff fff2 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010a96:	bd08      	pop	{r3, pc}

08010a98 <USBD_LL_OpenEP>:
{
 8010a98:	b508      	push	{r3, lr}
 8010a9a:	4694      	mov	ip, r2
 8010a9c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a9e:	4663      	mov	r3, ip
 8010aa0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010aa4:	f7fa fb80 	bl	800b1a8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aa8:	f7ff ffe7 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010aac:	bd08      	pop	{r3, pc}

08010aae <USBD_LL_CloseEP>:
{
 8010aae:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ab0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ab4:	f7fa fbba 	bl	800b22c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ab8:	f7ff ffdf 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010abc:	bd08      	pop	{r3, pc}

08010abe <USBD_LL_StallEP>:
{
 8010abe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ac0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ac4:	f7fa fc4e 	bl	800b364 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ac8:	f7ff ffd7 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010acc:	bd08      	pop	{r3, pc}

08010ace <USBD_LL_ClearStallEP>:
{
 8010ace:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ad0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ad4:	f7fa fc88 	bl	800b3e8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad8:	f7ff ffcf 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010adc:	bd08      	pop	{r3, pc}

08010ade <USBD_LL_SetUSBAddress>:
{
 8010ade:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ae0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ae4:	f7fa fb4c 	bl	800b180 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ae8:	f7ff ffc7 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010aec:	bd08      	pop	{r3, pc}

08010aee <USBD_LL_Transmit>:
{
 8010aee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010af0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010af4:	f7fa fc08 	bl	800b308 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010af8:	f7ff ffbf 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010afc:	bd08      	pop	{r3, pc}

08010afe <USBD_LL_PrepareReceive>:
{
 8010afe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010b04:	f7fa fbc9 	bl	800b29a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b08:	f7ff ffb7 	bl	8010a7a <USBD_Get_USB_Status>
}
 8010b0c:	bd08      	pop	{r3, pc}
	...

08010b10 <__errno>:
 8010b10:	4b01      	ldr	r3, [pc, #4]	; (8010b18 <__errno+0x8>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	240081cc 	.word	0x240081cc

08010b1c <__libc_init_array>:
 8010b1c:	b570      	push	{r4, r5, r6, lr}
 8010b1e:	4e0d      	ldr	r6, [pc, #52]	; (8010b54 <__libc_init_array+0x38>)
 8010b20:	4d0d      	ldr	r5, [pc, #52]	; (8010b58 <__libc_init_array+0x3c>)
 8010b22:	1b76      	subs	r6, r6, r5
 8010b24:	10b6      	asrs	r6, r6, #2
 8010b26:	d006      	beq.n	8010b36 <__libc_init_array+0x1a>
 8010b28:	2400      	movs	r4, #0
 8010b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b2e:	3401      	adds	r4, #1
 8010b30:	4798      	blx	r3
 8010b32:	42a6      	cmp	r6, r4
 8010b34:	d1f9      	bne.n	8010b2a <__libc_init_array+0xe>
 8010b36:	4e09      	ldr	r6, [pc, #36]	; (8010b5c <__libc_init_array+0x40>)
 8010b38:	4d09      	ldr	r5, [pc, #36]	; (8010b60 <__libc_init_array+0x44>)
 8010b3a:	1b76      	subs	r6, r6, r5
 8010b3c:	f005 ff68 	bl	8016a10 <_init>
 8010b40:	10b6      	asrs	r6, r6, #2
 8010b42:	d006      	beq.n	8010b52 <__libc_init_array+0x36>
 8010b44:	2400      	movs	r4, #0
 8010b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b4a:	3401      	adds	r4, #1
 8010b4c:	4798      	blx	r3
 8010b4e:	42a6      	cmp	r6, r4
 8010b50:	d1f9      	bne.n	8010b46 <__libc_init_array+0x2a>
 8010b52:	bd70      	pop	{r4, r5, r6, pc}
 8010b54:	08016a30 	.word	0x08016a30
 8010b58:	08016a30 	.word	0x08016a30
 8010b5c:	08016a3c 	.word	0x08016a3c
 8010b60:	08016a30 	.word	0x08016a30

08010b64 <malloc>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <malloc+0xc>)
 8010b66:	4601      	mov	r1, r0
 8010b68:	6818      	ldr	r0, [r3, #0]
 8010b6a:	f000 b80b 	b.w	8010b84 <_malloc_r>
 8010b6e:	bf00      	nop
 8010b70:	240081cc 	.word	0x240081cc

08010b74 <free>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <free+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f003 bac1 	b.w	8014100 <_free_r>
 8010b7e:	bf00      	nop
 8010b80:	240081cc 	.word	0x240081cc

08010b84 <_malloc_r>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	f101 060b 	add.w	r6, r1, #11
 8010b8c:	2e16      	cmp	r6, #22
 8010b8e:	b083      	sub	sp, #12
 8010b90:	4604      	mov	r4, r0
 8010b92:	d824      	bhi.n	8010bde <_malloc_r+0x5a>
 8010b94:	2910      	cmp	r1, #16
 8010b96:	f200 80ba 	bhi.w	8010d0e <_malloc_r+0x18a>
 8010b9a:	f000 faf5 	bl	8011188 <__malloc_lock>
 8010b9e:	2610      	movs	r6, #16
 8010ba0:	2218      	movs	r2, #24
 8010ba2:	2002      	movs	r0, #2
 8010ba4:	4fb5      	ldr	r7, [pc, #724]	; (8010e7c <_malloc_r+0x2f8>)
 8010ba6:	443a      	add	r2, r7
 8010ba8:	f1a2 0108 	sub.w	r1, r2, #8
 8010bac:	6853      	ldr	r3, [r2, #4]
 8010bae:	428b      	cmp	r3, r1
 8010bb0:	f000 80ba 	beq.w	8010d28 <_malloc_r+0x1a4>
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	68d9      	ldr	r1, [r3, #12]
 8010bb8:	f022 0203 	bic.w	r2, r2, #3
 8010bbc:	441a      	add	r2, r3
 8010bbe:	689d      	ldr	r5, [r3, #8]
 8010bc0:	60e9      	str	r1, [r5, #12]
 8010bc2:	608d      	str	r5, [r1, #8]
 8010bc4:	6851      	ldr	r1, [r2, #4]
 8010bc6:	f041 0101 	orr.w	r1, r1, #1
 8010bca:	4620      	mov	r0, r4
 8010bcc:	6051      	str	r1, [r2, #4]
 8010bce:	f103 0508 	add.w	r5, r3, #8
 8010bd2:	f000 fadf 	bl	8011194 <__malloc_unlock>
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	b003      	add	sp, #12
 8010bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bde:	f036 0607 	bics.w	r6, r6, #7
 8010be2:	f100 8094 	bmi.w	8010d0e <_malloc_r+0x18a>
 8010be6:	42b1      	cmp	r1, r6
 8010be8:	f200 8091 	bhi.w	8010d0e <_malloc_r+0x18a>
 8010bec:	f000 facc 	bl	8011188 <__malloc_lock>
 8010bf0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8010bf4:	f0c0 819a 	bcc.w	8010f2c <_malloc_r+0x3a8>
 8010bf8:	0a73      	lsrs	r3, r6, #9
 8010bfa:	f000 808f 	beq.w	8010d1c <_malloc_r+0x198>
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	f200 816f 	bhi.w	8010ee2 <_malloc_r+0x35e>
 8010c04:	09b3      	lsrs	r3, r6, #6
 8010c06:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8010c0a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8010c0e:	00c3      	lsls	r3, r0, #3
 8010c10:	4f9a      	ldr	r7, [pc, #616]	; (8010e7c <_malloc_r+0x2f8>)
 8010c12:	443b      	add	r3, r7
 8010c14:	f1a3 0508 	sub.w	r5, r3, #8
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	429d      	cmp	r5, r3
 8010c1c:	d106      	bne.n	8010c2c <_malloc_r+0xa8>
 8010c1e:	e00c      	b.n	8010c3a <_malloc_r+0xb6>
 8010c20:	2900      	cmp	r1, #0
 8010c22:	f280 8127 	bge.w	8010e74 <_malloc_r+0x2f0>
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	429d      	cmp	r5, r3
 8010c2a:	d006      	beq.n	8010c3a <_malloc_r+0xb6>
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	f022 0203 	bic.w	r2, r2, #3
 8010c32:	1b91      	subs	r1, r2, r6
 8010c34:	290f      	cmp	r1, #15
 8010c36:	ddf3      	ble.n	8010c20 <_malloc_r+0x9c>
 8010c38:	4660      	mov	r0, ip
 8010c3a:	693d      	ldr	r5, [r7, #16]
 8010c3c:	f8df c250 	ldr.w	ip, [pc, #592]	; 8010e90 <_malloc_r+0x30c>
 8010c40:	4565      	cmp	r5, ip
 8010c42:	d07c      	beq.n	8010d3e <_malloc_r+0x1ba>
 8010c44:	686a      	ldr	r2, [r5, #4]
 8010c46:	f022 0203 	bic.w	r2, r2, #3
 8010c4a:	1b93      	subs	r3, r2, r6
 8010c4c:	2b0f      	cmp	r3, #15
 8010c4e:	f300 817b 	bgt.w	8010f48 <_malloc_r+0x3c4>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8010c58:	f280 816c 	bge.w	8010f34 <_malloc_r+0x3b0>
 8010c5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010c60:	f080 811a 	bcs.w	8010e98 <_malloc_r+0x314>
 8010c64:	08d3      	lsrs	r3, r2, #3
 8010c66:	6879      	ldr	r1, [r7, #4]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8010c6e:	2201      	movs	r2, #1
 8010c70:	fa02 f20e 	lsl.w	r2, r2, lr
 8010c74:	430a      	orrs	r2, r1
 8010c76:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8010c7a:	f8c5 e008 	str.w	lr, [r5, #8]
 8010c7e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8010c82:	3908      	subs	r1, #8
 8010c84:	60e9      	str	r1, [r5, #12]
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8010c8c:	f8ce 500c 	str.w	r5, [lr, #12]
 8010c90:	1083      	asrs	r3, r0, #2
 8010c92:	2101      	movs	r1, #1
 8010c94:	4099      	lsls	r1, r3
 8010c96:	4291      	cmp	r1, r2
 8010c98:	d857      	bhi.n	8010d4a <_malloc_r+0x1c6>
 8010c9a:	4211      	tst	r1, r2
 8010c9c:	d106      	bne.n	8010cac <_malloc_r+0x128>
 8010c9e:	f020 0003 	bic.w	r0, r0, #3
 8010ca2:	0049      	lsls	r1, r1, #1
 8010ca4:	4211      	tst	r1, r2
 8010ca6:	f100 0004 	add.w	r0, r0, #4
 8010caa:	d0fa      	beq.n	8010ca2 <_malloc_r+0x11e>
 8010cac:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8010cb0:	464d      	mov	r5, r9
 8010cb2:	4686      	mov	lr, r0
 8010cb4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8010cb8:	4545      	cmp	r5, r8
 8010cba:	d108      	bne.n	8010cce <_malloc_r+0x14a>
 8010cbc:	e11d      	b.n	8010efa <_malloc_r+0x376>
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f280 8124 	bge.w	8010f0c <_malloc_r+0x388>
 8010cc4:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8010cc8:	4545      	cmp	r5, r8
 8010cca:	f000 8116 	beq.w	8010efa <_malloc_r+0x376>
 8010cce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010cd2:	f022 0203 	bic.w	r2, r2, #3
 8010cd6:	1b93      	subs	r3, r2, r6
 8010cd8:	2b0f      	cmp	r3, #15
 8010cda:	ddf0      	ble.n	8010cbe <_malloc_r+0x13a>
 8010cdc:	4620      	mov	r0, r4
 8010cde:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 8010ce2:	eb08 0106 	add.w	r1, r8, r6
 8010ce6:	f046 0601 	orr.w	r6, r6, #1
 8010cea:	f8c8 6004 	str.w	r6, [r8, #4]
 8010cee:	60ec      	str	r4, [r5, #12]
 8010cf0:	60a5      	str	r5, [r4, #8]
 8010cf2:	f043 0401 	orr.w	r4, r3, #1
 8010cf6:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8010cfa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8010cfe:	604c      	str	r4, [r1, #4]
 8010d00:	f848 3002 	str.w	r3, [r8, r2]
 8010d04:	f000 fa46 	bl	8011194 <__malloc_unlock>
 8010d08:	f108 0508 	add.w	r5, r8, #8
 8010d0c:	e002      	b.n	8010d14 <_malloc_r+0x190>
 8010d0e:	230c      	movs	r3, #12
 8010d10:	6023      	str	r3, [r4, #0]
 8010d12:	2500      	movs	r5, #0
 8010d14:	4628      	mov	r0, r5
 8010d16:	b003      	add	sp, #12
 8010d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d20:	2040      	movs	r0, #64	; 0x40
 8010d22:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8010d26:	e773      	b.n	8010c10 <_malloc_r+0x8c>
 8010d28:	68d3      	ldr	r3, [r2, #12]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	bf08      	it	eq
 8010d2e:	3002      	addeq	r0, #2
 8010d30:	f47f af40 	bne.w	8010bb4 <_malloc_r+0x30>
 8010d34:	693d      	ldr	r5, [r7, #16]
 8010d36:	f8df c158 	ldr.w	ip, [pc, #344]	; 8010e90 <_malloc_r+0x30c>
 8010d3a:	4565      	cmp	r5, ip
 8010d3c:	d182      	bne.n	8010c44 <_malloc_r+0xc0>
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	1083      	asrs	r3, r0, #2
 8010d42:	2101      	movs	r1, #1
 8010d44:	4099      	lsls	r1, r3
 8010d46:	4291      	cmp	r1, r2
 8010d48:	d9a7      	bls.n	8010c9a <_malloc_r+0x116>
 8010d4a:	68bd      	ldr	r5, [r7, #8]
 8010d4c:	686b      	ldr	r3, [r5, #4]
 8010d4e:	f023 0903 	bic.w	r9, r3, #3
 8010d52:	454e      	cmp	r6, r9
 8010d54:	d803      	bhi.n	8010d5e <_malloc_r+0x1da>
 8010d56:	eba9 0306 	sub.w	r3, r9, r6
 8010d5a:	2b0f      	cmp	r3, #15
 8010d5c:	dc7a      	bgt.n	8010e54 <_malloc_r+0x2d0>
 8010d5e:	f8df b134 	ldr.w	fp, [pc, #308]	; 8010e94 <_malloc_r+0x310>
 8010d62:	4b47      	ldr	r3, [pc, #284]	; (8010e80 <_malloc_r+0x2fc>)
 8010d64:	f8db 2000 	ldr.w	r2, [fp]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3201      	adds	r2, #1
 8010d6c:	4433      	add	r3, r6
 8010d6e:	eb05 0a09 	add.w	sl, r5, r9
 8010d72:	f000 8133 	beq.w	8010fdc <_malloc_r+0x458>
 8010d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d7a:	330f      	adds	r3, #15
 8010d7c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8010d80:	f028 080f 	bic.w	r8, r8, #15
 8010d84:	4641      	mov	r1, r8
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 fae0 	bl	801134c <_sbrk_r>
 8010d8c:	1c41      	adds	r1, r0, #1
 8010d8e:	4602      	mov	r2, r0
 8010d90:	f000 80f3 	beq.w	8010f7a <_malloc_r+0x3f6>
 8010d94:	4582      	cmp	sl, r0
 8010d96:	f200 80ee 	bhi.w	8010f76 <_malloc_r+0x3f2>
 8010d9a:	4b3a      	ldr	r3, [pc, #232]	; (8010e84 <_malloc_r+0x300>)
 8010d9c:	6819      	ldr	r1, [r3, #0]
 8010d9e:	4441      	add	r1, r8
 8010da0:	6019      	str	r1, [r3, #0]
 8010da2:	4608      	mov	r0, r1
 8010da4:	f000 814e 	beq.w	8011044 <_malloc_r+0x4c0>
 8010da8:	f8db 1000 	ldr.w	r1, [fp]
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	3101      	adds	r1, #1
 8010db0:	bf1b      	ittet	ne
 8010db2:	eba2 0a0a 	subne.w	sl, r2, sl
 8010db6:	4450      	addne	r0, sl
 8010db8:	f8cb 2000 	streq.w	r2, [fp]
 8010dbc:	6018      	strne	r0, [r3, #0]
 8010dbe:	f012 0b07 	ands.w	fp, r2, #7
 8010dc2:	f000 8117 	beq.w	8010ff4 <_malloc_r+0x470>
 8010dc6:	f1cb 0108 	rsb	r1, fp, #8
 8010dca:	440a      	add	r2, r1
 8010dcc:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 8010dd0:	4490      	add	r8, r2
 8010dd2:	3108      	adds	r1, #8
 8010dd4:	eba1 0108 	sub.w	r1, r1, r8
 8010dd8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8010ddc:	4651      	mov	r1, sl
 8010dde:	4620      	mov	r0, r4
 8010de0:	9200      	str	r2, [sp, #0]
 8010de2:	f000 fab3 	bl	801134c <_sbrk_r>
 8010de6:	1c42      	adds	r2, r0, #1
 8010de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dec:	f000 814f 	beq.w	801108e <_malloc_r+0x50a>
 8010df0:	1a80      	subs	r0, r0, r2
 8010df2:	eb00 080a 	add.w	r8, r0, sl
 8010df6:	6819      	ldr	r1, [r3, #0]
 8010df8:	60ba      	str	r2, [r7, #8]
 8010dfa:	f048 0001 	orr.w	r0, r8, #1
 8010dfe:	4451      	add	r1, sl
 8010e00:	42bd      	cmp	r5, r7
 8010e02:	6050      	str	r0, [r2, #4]
 8010e04:	6019      	str	r1, [r3, #0]
 8010e06:	f000 8129 	beq.w	801105c <_malloc_r+0x4d8>
 8010e0a:	f1b9 0f0f 	cmp.w	r9, #15
 8010e0e:	f240 8127 	bls.w	8011060 <_malloc_r+0x4dc>
 8010e12:	6868      	ldr	r0, [r5, #4]
 8010e14:	f1a9 0c0c 	sub.w	ip, r9, #12
 8010e18:	f02c 0c07 	bic.w	ip, ip, #7
 8010e1c:	f000 0001 	and.w	r0, r0, #1
 8010e20:	ea40 000c 	orr.w	r0, r0, ip
 8010e24:	6068      	str	r0, [r5, #4]
 8010e26:	f04f 0e05 	mov.w	lr, #5
 8010e2a:	eb05 000c 	add.w	r0, r5, ip
 8010e2e:	f1bc 0f0f 	cmp.w	ip, #15
 8010e32:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8010e36:	f200 8132 	bhi.w	801109e <_malloc_r+0x51a>
 8010e3a:	6850      	ldr	r0, [r2, #4]
 8010e3c:	4615      	mov	r5, r2
 8010e3e:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <_malloc_r+0x304>)
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	428a      	cmp	r2, r1
 8010e44:	bf38      	it	cc
 8010e46:	6019      	strcc	r1, [r3, #0]
 8010e48:	4b10      	ldr	r3, [pc, #64]	; (8010e8c <_malloc_r+0x308>)
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	428a      	cmp	r2, r1
 8010e4e:	bf38      	it	cc
 8010e50:	6019      	strcc	r1, [r3, #0]
 8010e52:	e094      	b.n	8010f7e <_malloc_r+0x3fa>
 8010e54:	19aa      	adds	r2, r5, r6
 8010e56:	f043 0301 	orr.w	r3, r3, #1
 8010e5a:	f046 0601 	orr.w	r6, r6, #1
 8010e5e:	606e      	str	r6, [r5, #4]
 8010e60:	4620      	mov	r0, r4
 8010e62:	60ba      	str	r2, [r7, #8]
 8010e64:	6053      	str	r3, [r2, #4]
 8010e66:	f000 f995 	bl	8011194 <__malloc_unlock>
 8010e6a:	3508      	adds	r5, #8
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	b003      	add	sp, #12
 8010e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e74:	68d9      	ldr	r1, [r3, #12]
 8010e76:	441a      	add	r2, r3
 8010e78:	e6a1      	b.n	8010bbe <_malloc_r+0x3a>
 8010e7a:	bf00      	nop
 8010e7c:	240085f8 	.word	0x240085f8
 8010e80:	24035b2c 	.word	0x24035b2c
 8010e84:	24035afc 	.word	0x24035afc
 8010e88:	24035b24 	.word	0x24035b24
 8010e8c:	24035b28 	.word	0x24035b28
 8010e90:	24008600 	.word	0x24008600
 8010e94:	24008a00 	.word	0x24008a00
 8010e98:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8010e9c:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8010ea0:	d363      	bcc.n	8010f6a <_malloc_r+0x3e6>
 8010ea2:	2b14      	cmp	r3, #20
 8010ea4:	f200 80b7 	bhi.w	8011016 <_malloc_r+0x492>
 8010ea8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8010eac:	00c9      	lsls	r1, r1, #3
 8010eae:	335b      	adds	r3, #91	; 0x5b
 8010eb0:	eb07 0e01 	add.w	lr, r7, r1
 8010eb4:	5879      	ldr	r1, [r7, r1]
 8010eb6:	f1ae 0e08 	sub.w	lr, lr, #8
 8010eba:	458e      	cmp	lr, r1
 8010ebc:	f000 8091 	beq.w	8010fe2 <_malloc_r+0x45e>
 8010ec0:	684b      	ldr	r3, [r1, #4]
 8010ec2:	f023 0303 	bic.w	r3, r3, #3
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d902      	bls.n	8010ed0 <_malloc_r+0x34c>
 8010eca:	6889      	ldr	r1, [r1, #8]
 8010ecc:	458e      	cmp	lr, r1
 8010ece:	d1f7      	bne.n	8010ec0 <_malloc_r+0x33c>
 8010ed0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8010eda:	f8ce 5008 	str.w	r5, [lr, #8]
 8010ede:	60cd      	str	r5, [r1, #12]
 8010ee0:	e6d6      	b.n	8010c90 <_malloc_r+0x10c>
 8010ee2:	2b14      	cmp	r3, #20
 8010ee4:	d959      	bls.n	8010f9a <_malloc_r+0x416>
 8010ee6:	2b54      	cmp	r3, #84	; 0x54
 8010ee8:	f200 809d 	bhi.w	8011026 <_malloc_r+0x4a2>
 8010eec:	0b33      	lsrs	r3, r6, #12
 8010eee:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8010ef2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8010ef6:	00c3      	lsls	r3, r0, #3
 8010ef8:	e68a      	b.n	8010c10 <_malloc_r+0x8c>
 8010efa:	f10e 0e01 	add.w	lr, lr, #1
 8010efe:	f01e 0f03 	tst.w	lr, #3
 8010f02:	f105 0508 	add.w	r5, r5, #8
 8010f06:	f47f aed5 	bne.w	8010cb4 <_malloc_r+0x130>
 8010f0a:	e051      	b.n	8010fb0 <_malloc_r+0x42c>
 8010f0c:	4442      	add	r2, r8
 8010f0e:	4645      	mov	r5, r8
 8010f10:	6853      	ldr	r3, [r2, #4]
 8010f12:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	6053      	str	r3, [r2, #4]
 8010f1c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8010f20:	4620      	mov	r0, r4
 8010f22:	60d9      	str	r1, [r3, #12]
 8010f24:	608b      	str	r3, [r1, #8]
 8010f26:	f000 f935 	bl	8011194 <__malloc_unlock>
 8010f2a:	e6f3      	b.n	8010d14 <_malloc_r+0x190>
 8010f2c:	08f0      	lsrs	r0, r6, #3
 8010f2e:	f106 0208 	add.w	r2, r6, #8
 8010f32:	e637      	b.n	8010ba4 <_malloc_r+0x20>
 8010f34:	442a      	add	r2, r5
 8010f36:	4620      	mov	r0, r4
 8010f38:	6853      	ldr	r3, [r2, #4]
 8010f3a:	f043 0301 	orr.w	r3, r3, #1
 8010f3e:	6053      	str	r3, [r2, #4]
 8010f40:	3508      	adds	r5, #8
 8010f42:	f000 f927 	bl	8011194 <__malloc_unlock>
 8010f46:	e6e5      	b.n	8010d14 <_malloc_r+0x190>
 8010f48:	19a9      	adds	r1, r5, r6
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f046 0601 	orr.w	r6, r6, #1
 8010f50:	f043 0401 	orr.w	r4, r3, #1
 8010f54:	606e      	str	r6, [r5, #4]
 8010f56:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8010f5a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8010f5e:	604c      	str	r4, [r1, #4]
 8010f60:	50ab      	str	r3, [r5, r2]
 8010f62:	f000 f917 	bl	8011194 <__malloc_unlock>
 8010f66:	3508      	adds	r5, #8
 8010f68:	e6d4      	b.n	8010d14 <_malloc_r+0x190>
 8010f6a:	0993      	lsrs	r3, r2, #6
 8010f6c:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8010f70:	00c9      	lsls	r1, r1, #3
 8010f72:	3338      	adds	r3, #56	; 0x38
 8010f74:	e79c      	b.n	8010eb0 <_malloc_r+0x32c>
 8010f76:	42bd      	cmp	r5, r7
 8010f78:	d05f      	beq.n	801103a <_malloc_r+0x4b6>
 8010f7a:	68bd      	ldr	r5, [r7, #8]
 8010f7c:	6868      	ldr	r0, [r5, #4]
 8010f7e:	f020 0803 	bic.w	r8, r0, #3
 8010f82:	4546      	cmp	r6, r8
 8010f84:	eba8 0306 	sub.w	r3, r8, r6
 8010f88:	d802      	bhi.n	8010f90 <_malloc_r+0x40c>
 8010f8a:	2b0f      	cmp	r3, #15
 8010f8c:	f73f af62 	bgt.w	8010e54 <_malloc_r+0x2d0>
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 f8ff 	bl	8011194 <__malloc_unlock>
 8010f96:	2500      	movs	r5, #0
 8010f98:	e6bc      	b.n	8010d14 <_malloc_r+0x190>
 8010f9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8010f9e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8010fa2:	00c3      	lsls	r3, r0, #3
 8010fa4:	e634      	b.n	8010c10 <_malloc_r+0x8c>
 8010fa6:	f859 3908 	ldr.w	r3, [r9], #-8
 8010faa:	454b      	cmp	r3, r9
 8010fac:	f040 8096 	bne.w	80110dc <_malloc_r+0x558>
 8010fb0:	f010 0f03 	tst.w	r0, #3
 8010fb4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8010fb8:	d1f5      	bne.n	8010fa6 <_malloc_r+0x422>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	ea23 0301 	bic.w	r3, r3, r1
 8010fc0:	607b      	str	r3, [r7, #4]
 8010fc2:	0049      	lsls	r1, r1, #1
 8010fc4:	4299      	cmp	r1, r3
 8010fc6:	f63f aec0 	bhi.w	8010d4a <_malloc_r+0x1c6>
 8010fca:	b919      	cbnz	r1, 8010fd4 <_malloc_r+0x450>
 8010fcc:	e6bd      	b.n	8010d4a <_malloc_r+0x1c6>
 8010fce:	0049      	lsls	r1, r1, #1
 8010fd0:	f10e 0e04 	add.w	lr, lr, #4
 8010fd4:	4219      	tst	r1, r3
 8010fd6:	d0fa      	beq.n	8010fce <_malloc_r+0x44a>
 8010fd8:	4670      	mov	r0, lr
 8010fda:	e667      	b.n	8010cac <_malloc_r+0x128>
 8010fdc:	f103 0810 	add.w	r8, r3, #16
 8010fe0:	e6d0      	b.n	8010d84 <_malloc_r+0x200>
 8010fe2:	109a      	asrs	r2, r3, #2
 8010fe4:	f04f 0801 	mov.w	r8, #1
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	fa08 f202 	lsl.w	r2, r8, r2
 8010fee:	431a      	orrs	r2, r3
 8010ff0:	607a      	str	r2, [r7, #4]
 8010ff2:	e770      	b.n	8010ed6 <_malloc_r+0x352>
 8010ff4:	eb02 0108 	add.w	r1, r2, r8
 8010ff8:	4249      	negs	r1, r1
 8010ffa:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8010ffe:	4651      	mov	r1, sl
 8011000:	4620      	mov	r0, r4
 8011002:	9200      	str	r2, [sp, #0]
 8011004:	f000 f9a2 	bl	801134c <_sbrk_r>
 8011008:	1c43      	adds	r3, r0, #1
 801100a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801100e:	f47f aeef 	bne.w	8010df0 <_malloc_r+0x26c>
 8011012:	46da      	mov	sl, fp
 8011014:	e6ef      	b.n	8010df6 <_malloc_r+0x272>
 8011016:	2b54      	cmp	r3, #84	; 0x54
 8011018:	d825      	bhi.n	8011066 <_malloc_r+0x4e2>
 801101a:	0b13      	lsrs	r3, r2, #12
 801101c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8011020:	00c9      	lsls	r1, r1, #3
 8011022:	336e      	adds	r3, #110	; 0x6e
 8011024:	e744      	b.n	8010eb0 <_malloc_r+0x32c>
 8011026:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801102a:	d825      	bhi.n	8011078 <_malloc_r+0x4f4>
 801102c:	0bf3      	lsrs	r3, r6, #15
 801102e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8011032:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8011036:	00c3      	lsls	r3, r0, #3
 8011038:	e5ea      	b.n	8010c10 <_malloc_r+0x8c>
 801103a:	4b29      	ldr	r3, [pc, #164]	; (80110e0 <_malloc_r+0x55c>)
 801103c:	6818      	ldr	r0, [r3, #0]
 801103e:	4440      	add	r0, r8
 8011040:	6018      	str	r0, [r3, #0]
 8011042:	e6b1      	b.n	8010da8 <_malloc_r+0x224>
 8011044:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8011048:	f1bc 0f00 	cmp.w	ip, #0
 801104c:	f47f aeac 	bne.w	8010da8 <_malloc_r+0x224>
 8011050:	68bd      	ldr	r5, [r7, #8]
 8011052:	44c8      	add	r8, r9
 8011054:	f048 0001 	orr.w	r0, r8, #1
 8011058:	6068      	str	r0, [r5, #4]
 801105a:	e6f0      	b.n	8010e3e <_malloc_r+0x2ba>
 801105c:	4615      	mov	r5, r2
 801105e:	e6ee      	b.n	8010e3e <_malloc_r+0x2ba>
 8011060:	2301      	movs	r3, #1
 8011062:	6053      	str	r3, [r2, #4]
 8011064:	e794      	b.n	8010f90 <_malloc_r+0x40c>
 8011066:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801106a:	d823      	bhi.n	80110b4 <_malloc_r+0x530>
 801106c:	0bd3      	lsrs	r3, r2, #15
 801106e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8011072:	00c9      	lsls	r1, r1, #3
 8011074:	3377      	adds	r3, #119	; 0x77
 8011076:	e71b      	b.n	8010eb0 <_malloc_r+0x32c>
 8011078:	f240 5254 	movw	r2, #1364	; 0x554
 801107c:	4293      	cmp	r3, r2
 801107e:	d823      	bhi.n	80110c8 <_malloc_r+0x544>
 8011080:	0cb3      	lsrs	r3, r6, #18
 8011082:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8011086:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 801108a:	00c3      	lsls	r3, r0, #3
 801108c:	e5c0      	b.n	8010c10 <_malloc_r+0x8c>
 801108e:	f1ab 0b08 	sub.w	fp, fp, #8
 8011092:	44d8      	add	r8, fp
 8011094:	eba8 0802 	sub.w	r8, r8, r2
 8011098:	f04f 0a00 	mov.w	sl, #0
 801109c:	e6ab      	b.n	8010df6 <_malloc_r+0x272>
 801109e:	f105 0108 	add.w	r1, r5, #8
 80110a2:	4620      	mov	r0, r4
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	f003 f82b 	bl	8014100 <_free_r>
 80110aa:	68bd      	ldr	r5, [r7, #8]
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	6868      	ldr	r0, [r5, #4]
 80110b0:	6819      	ldr	r1, [r3, #0]
 80110b2:	e6c4      	b.n	8010e3e <_malloc_r+0x2ba>
 80110b4:	f240 5154 	movw	r1, #1364	; 0x554
 80110b8:	428b      	cmp	r3, r1
 80110ba:	d80b      	bhi.n	80110d4 <_malloc_r+0x550>
 80110bc:	0c93      	lsrs	r3, r2, #18
 80110be:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 80110c2:	00c9      	lsls	r1, r1, #3
 80110c4:	337c      	adds	r3, #124	; 0x7c
 80110c6:	e6f3      	b.n	8010eb0 <_malloc_r+0x32c>
 80110c8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80110cc:	207f      	movs	r0, #127	; 0x7f
 80110ce:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80110d2:	e59d      	b.n	8010c10 <_malloc_r+0x8c>
 80110d4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80110d8:	237e      	movs	r3, #126	; 0x7e
 80110da:	e6e9      	b.n	8010eb0 <_malloc_r+0x32c>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	e770      	b.n	8010fc2 <_malloc_r+0x43e>
 80110e0:	24035afc 	.word	0x24035afc

080110e4 <memset>:
 80110e4:	0783      	lsls	r3, r0, #30
 80110e6:	b530      	push	{r4, r5, lr}
 80110e8:	d048      	beq.n	801117c <memset+0x98>
 80110ea:	1e54      	subs	r4, r2, #1
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d03f      	beq.n	8011170 <memset+0x8c>
 80110f0:	b2ca      	uxtb	r2, r1
 80110f2:	4603      	mov	r3, r0
 80110f4:	e001      	b.n	80110fa <memset+0x16>
 80110f6:	3c01      	subs	r4, #1
 80110f8:	d33a      	bcc.n	8011170 <memset+0x8c>
 80110fa:	f803 2b01 	strb.w	r2, [r3], #1
 80110fe:	079d      	lsls	r5, r3, #30
 8011100:	d1f9      	bne.n	80110f6 <memset+0x12>
 8011102:	2c03      	cmp	r4, #3
 8011104:	d92d      	bls.n	8011162 <memset+0x7e>
 8011106:	b2cd      	uxtb	r5, r1
 8011108:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801110c:	2c0f      	cmp	r4, #15
 801110e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8011112:	d936      	bls.n	8011182 <memset+0x9e>
 8011114:	f1a4 0210 	sub.w	r2, r4, #16
 8011118:	f022 0c0f 	bic.w	ip, r2, #15
 801111c:	f103 0e20 	add.w	lr, r3, #32
 8011120:	44e6      	add	lr, ip
 8011122:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8011126:	f103 0210 	add.w	r2, r3, #16
 801112a:	e942 5504 	strd	r5, r5, [r2, #-16]
 801112e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8011132:	3210      	adds	r2, #16
 8011134:	4572      	cmp	r2, lr
 8011136:	d1f8      	bne.n	801112a <memset+0x46>
 8011138:	f10c 0201 	add.w	r2, ip, #1
 801113c:	f014 0f0c 	tst.w	r4, #12
 8011140:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8011144:	f004 0c0f 	and.w	ip, r4, #15
 8011148:	d013      	beq.n	8011172 <memset+0x8e>
 801114a:	f1ac 0304 	sub.w	r3, ip, #4
 801114e:	f023 0303 	bic.w	r3, r3, #3
 8011152:	3304      	adds	r3, #4
 8011154:	4413      	add	r3, r2
 8011156:	f842 5b04 	str.w	r5, [r2], #4
 801115a:	4293      	cmp	r3, r2
 801115c:	d1fb      	bne.n	8011156 <memset+0x72>
 801115e:	f00c 0403 	and.w	r4, ip, #3
 8011162:	b12c      	cbz	r4, 8011170 <memset+0x8c>
 8011164:	b2ca      	uxtb	r2, r1
 8011166:	441c      	add	r4, r3
 8011168:	f803 2b01 	strb.w	r2, [r3], #1
 801116c:	429c      	cmp	r4, r3
 801116e:	d1fb      	bne.n	8011168 <memset+0x84>
 8011170:	bd30      	pop	{r4, r5, pc}
 8011172:	4664      	mov	r4, ip
 8011174:	4613      	mov	r3, r2
 8011176:	2c00      	cmp	r4, #0
 8011178:	d1f4      	bne.n	8011164 <memset+0x80>
 801117a:	e7f9      	b.n	8011170 <memset+0x8c>
 801117c:	4603      	mov	r3, r0
 801117e:	4614      	mov	r4, r2
 8011180:	e7bf      	b.n	8011102 <memset+0x1e>
 8011182:	461a      	mov	r2, r3
 8011184:	46a4      	mov	ip, r4
 8011186:	e7e0      	b.n	801114a <memset+0x66>

08011188 <__malloc_lock>:
 8011188:	4801      	ldr	r0, [pc, #4]	; (8011190 <__malloc_lock+0x8>)
 801118a:	f003 ba63 	b.w	8014654 <__retarget_lock_acquire_recursive>
 801118e:	bf00      	nop
 8011190:	24035b38 	.word	0x24035b38

08011194 <__malloc_unlock>:
 8011194:	4801      	ldr	r0, [pc, #4]	; (801119c <__malloc_unlock+0x8>)
 8011196:	f003 ba5f 	b.w	8014658 <__retarget_lock_release_recursive>
 801119a:	bf00      	nop
 801119c:	24035b38 	.word	0x24035b38

080111a0 <printf>:
 80111a0:	b40f      	push	{r0, r1, r2, r3}
 80111a2:	b500      	push	{lr}
 80111a4:	4907      	ldr	r1, [pc, #28]	; (80111c4 <printf+0x24>)
 80111a6:	b083      	sub	sp, #12
 80111a8:	ab04      	add	r3, sp, #16
 80111aa:	6808      	ldr	r0, [r1, #0]
 80111ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b0:	6881      	ldr	r1, [r0, #8]
 80111b2:	9301      	str	r3, [sp, #4]
 80111b4:	f000 f8dc 	bl	8011370 <_vfprintf_r>
 80111b8:	b003      	add	sp, #12
 80111ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80111be:	b004      	add	sp, #16
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	240081cc 	.word	0x240081cc

080111c8 <_puts_r>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	4605      	mov	r5, r0
 80111cc:	b088      	sub	sp, #32
 80111ce:	4608      	mov	r0, r1
 80111d0:	460c      	mov	r4, r1
 80111d2:	f7f7 fd55 	bl	8008c80 <strlen>
 80111d6:	4e22      	ldr	r6, [pc, #136]	; (8011260 <_puts_r+0x98>)
 80111d8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80111da:	9005      	str	r0, [sp, #20]
 80111dc:	2101      	movs	r1, #1
 80111de:	1843      	adds	r3, r0, r1
 80111e0:	e9cd 6106 	strd	r6, r1, [sp, #24]
 80111e4:	a804      	add	r0, sp, #16
 80111e6:	2102      	movs	r1, #2
 80111e8:	9404      	str	r4, [sp, #16]
 80111ea:	9303      	str	r3, [sp, #12]
 80111ec:	68ac      	ldr	r4, [r5, #8]
 80111ee:	9001      	str	r0, [sp, #4]
 80111f0:	9102      	str	r1, [sp, #8]
 80111f2:	b322      	cbz	r2, 801123e <_puts_r+0x76>
 80111f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111f6:	f013 0f01 	tst.w	r3, #1
 80111fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111fe:	b29a      	uxth	r2, r3
 8011200:	d101      	bne.n	8011206 <_puts_r+0x3e>
 8011202:	0598      	lsls	r0, r3, #22
 8011204:	d525      	bpl.n	8011252 <_puts_r+0x8a>
 8011206:	0491      	lsls	r1, r2, #18
 8011208:	d406      	bmi.n	8011218 <_puts_r+0x50>
 801120a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801120c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011214:	81a3      	strh	r3, [r4, #12]
 8011216:	6662      	str	r2, [r4, #100]	; 0x64
 8011218:	4628      	mov	r0, r5
 801121a:	aa01      	add	r2, sp, #4
 801121c:	4621      	mov	r1, r4
 801121e:	f003 f875 	bl	801430c <__sfvwrite_r>
 8011222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011224:	2800      	cmp	r0, #0
 8011226:	bf14      	ite	ne
 8011228:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801122c:	250a      	moveq	r5, #10
 801122e:	07da      	lsls	r2, r3, #31
 8011230:	d402      	bmi.n	8011238 <_puts_r+0x70>
 8011232:	89a3      	ldrh	r3, [r4, #12]
 8011234:	059b      	lsls	r3, r3, #22
 8011236:	d506      	bpl.n	8011246 <_puts_r+0x7e>
 8011238:	4628      	mov	r0, r5
 801123a:	b008      	add	sp, #32
 801123c:	bd70      	pop	{r4, r5, r6, pc}
 801123e:	4628      	mov	r0, r5
 8011240:	f002 fe66 	bl	8013f10 <__sinit>
 8011244:	e7d6      	b.n	80111f4 <_puts_r+0x2c>
 8011246:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011248:	f003 fa06 	bl	8014658 <__retarget_lock_release_recursive>
 801124c:	4628      	mov	r0, r5
 801124e:	b008      	add	sp, #32
 8011250:	bd70      	pop	{r4, r5, r6, pc}
 8011252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011254:	f003 f9fe 	bl	8014654 <__retarget_lock_acquire_recursive>
 8011258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801125c:	b29a      	uxth	r2, r3
 801125e:	e7d2      	b.n	8011206 <_puts_r+0x3e>
 8011260:	24008e24 	.word	0x24008e24

08011264 <puts>:
 8011264:	4b02      	ldr	r3, [pc, #8]	; (8011270 <puts+0xc>)
 8011266:	4601      	mov	r1, r0
 8011268:	6818      	ldr	r0, [r3, #0]
 801126a:	f7ff bfad 	b.w	80111c8 <_puts_r>
 801126e:	bf00      	nop
 8011270:	240081cc 	.word	0x240081cc

08011274 <cleanup_glue>:
 8011274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011278:	680e      	ldr	r6, [r1, #0]
 801127a:	460c      	mov	r4, r1
 801127c:	4605      	mov	r5, r0
 801127e:	b1be      	cbz	r6, 80112b0 <cleanup_glue+0x3c>
 8011280:	6837      	ldr	r7, [r6, #0]
 8011282:	b18f      	cbz	r7, 80112a8 <cleanup_glue+0x34>
 8011284:	f8d7 8000 	ldr.w	r8, [r7]
 8011288:	f1b8 0f00 	cmp.w	r8, #0
 801128c:	d008      	beq.n	80112a0 <cleanup_glue+0x2c>
 801128e:	f8d8 1000 	ldr.w	r1, [r8]
 8011292:	b109      	cbz	r1, 8011298 <cleanup_glue+0x24>
 8011294:	f7ff ffee 	bl	8011274 <cleanup_glue>
 8011298:	4641      	mov	r1, r8
 801129a:	4628      	mov	r0, r5
 801129c:	f002 ff30 	bl	8014100 <_free_r>
 80112a0:	4639      	mov	r1, r7
 80112a2:	4628      	mov	r0, r5
 80112a4:	f002 ff2c 	bl	8014100 <_free_r>
 80112a8:	4631      	mov	r1, r6
 80112aa:	4628      	mov	r0, r5
 80112ac:	f002 ff28 	bl	8014100 <_free_r>
 80112b0:	4621      	mov	r1, r4
 80112b2:	4628      	mov	r0, r5
 80112b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112b8:	f002 bf22 	b.w	8014100 <_free_r>

080112bc <_reclaim_reent>:
 80112bc:	4b22      	ldr	r3, [pc, #136]	; (8011348 <_reclaim_reent+0x8c>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4283      	cmp	r3, r0
 80112c2:	d040      	beq.n	8011346 <_reclaim_reent+0x8a>
 80112c4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80112c6:	b570      	push	{r4, r5, r6, lr}
 80112c8:	4605      	mov	r5, r0
 80112ca:	b181      	cbz	r1, 80112ee <_reclaim_reent+0x32>
 80112cc:	2600      	movs	r6, #0
 80112ce:	598c      	ldr	r4, [r1, r6]
 80112d0:	b13c      	cbz	r4, 80112e2 <_reclaim_reent+0x26>
 80112d2:	4621      	mov	r1, r4
 80112d4:	6824      	ldr	r4, [r4, #0]
 80112d6:	4628      	mov	r0, r5
 80112d8:	f002 ff12 	bl	8014100 <_free_r>
 80112dc:	2c00      	cmp	r4, #0
 80112de:	d1f8      	bne.n	80112d2 <_reclaim_reent+0x16>
 80112e0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80112e2:	3604      	adds	r6, #4
 80112e4:	2e80      	cmp	r6, #128	; 0x80
 80112e6:	d1f2      	bne.n	80112ce <_reclaim_reent+0x12>
 80112e8:	4628      	mov	r0, r5
 80112ea:	f002 ff09 	bl	8014100 <_free_r>
 80112ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80112f0:	b111      	cbz	r1, 80112f8 <_reclaim_reent+0x3c>
 80112f2:	4628      	mov	r0, r5
 80112f4:	f002 ff04 	bl	8014100 <_free_r>
 80112f8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80112fc:	b154      	cbz	r4, 8011314 <_reclaim_reent+0x58>
 80112fe:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8011302:	42b4      	cmp	r4, r6
 8011304:	d006      	beq.n	8011314 <_reclaim_reent+0x58>
 8011306:	4621      	mov	r1, r4
 8011308:	6824      	ldr	r4, [r4, #0]
 801130a:	4628      	mov	r0, r5
 801130c:	f002 fef8 	bl	8014100 <_free_r>
 8011310:	42a6      	cmp	r6, r4
 8011312:	d1f8      	bne.n	8011306 <_reclaim_reent+0x4a>
 8011314:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8011316:	b111      	cbz	r1, 801131e <_reclaim_reent+0x62>
 8011318:	4628      	mov	r0, r5
 801131a:	f002 fef1 	bl	8014100 <_free_r>
 801131e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011320:	b183      	cbz	r3, 8011344 <_reclaim_reent+0x88>
 8011322:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011324:	4628      	mov	r0, r5
 8011326:	4798      	blx	r3
 8011328:	f8d5 42e0 	ldr.w	r4, [r5, #736]	; 0x2e0
 801132c:	b154      	cbz	r4, 8011344 <_reclaim_reent+0x88>
 801132e:	6821      	ldr	r1, [r4, #0]
 8011330:	b111      	cbz	r1, 8011338 <_reclaim_reent+0x7c>
 8011332:	4628      	mov	r0, r5
 8011334:	f7ff ff9e 	bl	8011274 <cleanup_glue>
 8011338:	4621      	mov	r1, r4
 801133a:	4628      	mov	r0, r5
 801133c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011340:	f002 bede 	b.w	8014100 <_free_r>
 8011344:	bd70      	pop	{r4, r5, r6, pc}
 8011346:	4770      	bx	lr
 8011348:	240081cc 	.word	0x240081cc

0801134c <_sbrk_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4d07      	ldr	r5, [pc, #28]	; (801136c <_sbrk_r+0x20>)
 8011350:	2200      	movs	r2, #0
 8011352:	4604      	mov	r4, r0
 8011354:	4608      	mov	r0, r1
 8011356:	602a      	str	r2, [r5, #0]
 8011358:	f7f8 ff3e 	bl	800a1d8 <_sbrk>
 801135c:	1c43      	adds	r3, r0, #1
 801135e:	d000      	beq.n	8011362 <_sbrk_r+0x16>
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d0fb      	beq.n	8011360 <_sbrk_r+0x14>
 8011368:	6023      	str	r3, [r4, #0]
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	24035b30 	.word	0x24035b30

08011370 <_vfprintf_r>:
 8011370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011374:	ed2d 8b08 	vpush	{d8-d11}
 8011378:	b0cd      	sub	sp, #308	; 0x134
 801137a:	461c      	mov	r4, r3
 801137c:	460f      	mov	r7, r1
 801137e:	4692      	mov	sl, r2
 8011380:	ee0b 0a10 	vmov	s22, r0
 8011384:	4605      	mov	r5, r0
 8011386:	f003 f95d 	bl	8014644 <_localeconv_r>
 801138a:	6803      	ldr	r3, [r0, #0]
 801138c:	9311      	str	r3, [sp, #68]	; 0x44
 801138e:	4618      	mov	r0, r3
 8011390:	9409      	str	r4, [sp, #36]	; 0x24
 8011392:	f7f7 fc75 	bl	8008c80 <strlen>
 8011396:	9010      	str	r0, [sp, #64]	; 0x40
 8011398:	b11d      	cbz	r5, 80113a2 <_vfprintf_r+0x32>
 801139a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801139c:	2b00      	cmp	r3, #0
 801139e:	f000 81f1 	beq.w	8011784 <_vfprintf_r+0x414>
 80113a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80113a8:	07db      	lsls	r3, r3, #31
 80113aa:	b291      	uxth	r1, r2
 80113ac:	d402      	bmi.n	80113b4 <_vfprintf_r+0x44>
 80113ae:	0596      	lsls	r6, r2, #22
 80113b0:	f140 866d 	bpl.w	801208e <_vfprintf_r+0xd1e>
 80113b4:	048d      	lsls	r5, r1, #18
 80113b6:	d407      	bmi.n	80113c8 <_vfprintf_r+0x58>
 80113b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80113be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80113c2:	81ba      	strh	r2, [r7, #12]
 80113c4:	b291      	uxth	r1, r2
 80113c6:	667b      	str	r3, [r7, #100]	; 0x64
 80113c8:	0708      	lsls	r0, r1, #28
 80113ca:	f140 80ca 	bpl.w	8011562 <_vfprintf_r+0x1f2>
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 80c6 	beq.w	8011562 <_vfprintf_r+0x1f2>
 80113d6:	f001 031a 	and.w	r3, r1, #26
 80113da:	2b0a      	cmp	r3, #10
 80113dc:	f000 80cf 	beq.w	801157e <_vfprintf_r+0x20e>
 80113e0:	4655      	mov	r5, sl
 80113e2:	2300      	movs	r3, #0
 80113e4:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 80113e8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80113ec:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80113f0:	930e      	str	r3, [sp, #56]	; 0x38
 80113f2:	9312      	str	r3, [sp, #72]	; 0x48
 80113f4:	9307      	str	r3, [sp, #28]
 80113f6:	782b      	ldrb	r3, [r5, #0]
 80113f8:	aa23      	add	r2, sp, #140	; 0x8c
 80113fa:	ed9f 8b7d 	vldr	d8, [pc, #500]	; 80115f0 <_vfprintf_r+0x280>
 80113fe:	ed9f 9b7e 	vldr	d9, [pc, #504]	; 80115f8 <_vfprintf_r+0x288>
 8011402:	9220      	str	r2, [sp, #128]	; 0x80
 8011404:	4690      	mov	r8, r2
 8011406:	46ba      	mov	sl, r7
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 8183 	beq.w	8011714 <_vfprintf_r+0x3a4>
 801140e:	46ab      	mov	fp, r5
 8011410:	e004      	b.n	801141c <_vfprintf_r+0xac>
 8011412:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80c8 	beq.w	80115ac <_vfprintf_r+0x23c>
 801141c:	2b25      	cmp	r3, #37	; 0x25
 801141e:	d1f8      	bne.n	8011412 <_vfprintf_r+0xa2>
 8011420:	ebbb 0605 	subs.w	r6, fp, r5
 8011424:	f040 80c6 	bne.w	80115b4 <_vfprintf_r+0x244>
 8011428:	f89b 3000 	ldrb.w	r3, [fp]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 8171 	beq.w	8011714 <_vfprintf_r+0x3a4>
 8011432:	2300      	movs	r3, #0
 8011434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011438:	f89b 7001 	ldrb.w	r7, [fp, #1]
 801143c:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 8011440:	9306      	str	r3, [sp, #24]
 8011442:	f10b 0b01 	add.w	fp, fp, #1
 8011446:	9205      	str	r2, [sp, #20]
 8011448:	9303      	str	r3, [sp, #12]
 801144a:	242b      	movs	r4, #43	; 0x2b
 801144c:	2620      	movs	r6, #32
 801144e:	f10b 0b01 	add.w	fp, fp, #1
 8011452:	f1a7 0320 	sub.w	r3, r7, #32
 8011456:	2b5a      	cmp	r3, #90	; 0x5a
 8011458:	f200 80d2 	bhi.w	8011600 <_vfprintf_r+0x290>
 801145c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011460:	00d002be 	.word	0x00d002be
 8011464:	02b700d0 	.word	0x02b700d0
 8011468:	00d000d0 	.word	0x00d000d0
 801146c:	006a00d0 	.word	0x006a00d0
 8011470:	00d000d0 	.word	0x00d000d0
 8011474:	023b0229 	.word	0x023b0229
 8011478:	023400d0 	.word	0x023400d0
 801147c:	00d00247 	.word	0x00d00247
 8011480:	005b0240 	.word	0x005b0240
 8011484:	005b005b 	.word	0x005b005b
 8011488:	005b005b 	.word	0x005b005b
 801148c:	005b005b 	.word	0x005b005b
 8011490:	005b005b 	.word	0x005b005b
 8011494:	00d000d0 	.word	0x00d000d0
 8011498:	00d000d0 	.word	0x00d000d0
 801149c:	00d000d0 	.word	0x00d000d0
 80114a0:	016200d0 	.word	0x016200d0
 80114a4:	01c800d0 	.word	0x01c800d0
 80114a8:	0162019d 	.word	0x0162019d
 80114ac:	01620162 	.word	0x01620162
 80114b0:	00d000d0 	.word	0x00d000d0
 80114b4:	00d000d0 	.word	0x00d000d0
 80114b8:	00d002b0 	.word	0x00d002b0
 80114bc:	01f700d0 	.word	0x01f700d0
 80114c0:	00d000d0 	.word	0x00d000d0
 80114c4:	01d200d0 	.word	0x01d200d0
 80114c8:	029f00d0 	.word	0x029f00d0
 80114cc:	00d000d0 	.word	0x00d000d0
 80114d0:	00d0075e 	.word	0x00d0075e
 80114d4:	00d000d0 	.word	0x00d000d0
 80114d8:	00d000d0 	.word	0x00d000d0
 80114dc:	00d000d0 	.word	0x00d000d0
 80114e0:	016200d0 	.word	0x016200d0
 80114e4:	01c800d0 	.word	0x01c800d0
 80114e8:	016201a1 	.word	0x016201a1
 80114ec:	01620162 	.word	0x01620162
 80114f0:	01a10295 	.word	0x01a10295
 80114f4:	00d00196 	.word	0x00d00196
 80114f8:	00d0028b 	.word	0x00d0028b
 80114fc:	01fb0261 	.word	0x01fb0261
 8011500:	01960279 	.word	0x01960279
 8011504:	01d200d0 	.word	0x01d200d0
 8011508:	0738007e 	.word	0x0738007e
 801150c:	00d000d0 	.word	0x00d000d0
 8011510:	00d0073c 	.word	0x00d0073c
 8011514:	007e      	.short	0x007e
 8011516:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801151a:	2200      	movs	r2, #0
 801151c:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8011520:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011524:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011528:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801152c:	2b09      	cmp	r3, #9
 801152e:	d9f5      	bls.n	801151c <_vfprintf_r+0x1ac>
 8011530:	9206      	str	r2, [sp, #24]
 8011532:	e78e      	b.n	8011452 <_vfprintf_r+0xe2>
 8011534:	ee1b 0a10 	vmov	r0, s22
 8011538:	f003 f884 	bl	8014644 <_localeconv_r>
 801153c:	6843      	ldr	r3, [r0, #4]
 801153e:	9315      	str	r3, [sp, #84]	; 0x54
 8011540:	4618      	mov	r0, r3
 8011542:	f7f7 fb9d 	bl	8008c80 <strlen>
 8011546:	9016      	str	r0, [sp, #88]	; 0x58
 8011548:	4607      	mov	r7, r0
 801154a:	ee1b 0a10 	vmov	r0, s22
 801154e:	f003 f879 	bl	8014644 <_localeconv_r>
 8011552:	6883      	ldr	r3, [r0, #8]
 8011554:	9313      	str	r3, [sp, #76]	; 0x4c
 8011556:	2f00      	cmp	r7, #0
 8011558:	f040 85d1 	bne.w	80120fe <_vfprintf_r+0xd8e>
 801155c:	f89b 7000 	ldrb.w	r7, [fp]
 8011560:	e775      	b.n	801144e <_vfprintf_r+0xde>
 8011562:	ee1b 0a10 	vmov	r0, s22
 8011566:	4639      	mov	r1, r7
 8011568:	f001 fc8c 	bl	8012e84 <__swsetup_r>
 801156c:	2800      	cmp	r0, #0
 801156e:	f041 82da 	bne.w	8012b26 <_vfprintf_r+0x17b6>
 8011572:	89b9      	ldrh	r1, [r7, #12]
 8011574:	f001 031a 	and.w	r3, r1, #26
 8011578:	2b0a      	cmp	r3, #10
 801157a:	f47f af31 	bne.w	80113e0 <_vfprintf_r+0x70>
 801157e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011582:	2b00      	cmp	r3, #0
 8011584:	f6ff af2c 	blt.w	80113e0 <_vfprintf_r+0x70>
 8011588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801158a:	07de      	lsls	r6, r3, #31
 801158c:	d402      	bmi.n	8011594 <_vfprintf_r+0x224>
 801158e:	058d      	lsls	r5, r1, #22
 8011590:	f141 812f 	bpl.w	80127f2 <_vfprintf_r+0x1482>
 8011594:	ee1b 0a10 	vmov	r0, s22
 8011598:	4623      	mov	r3, r4
 801159a:	4652      	mov	r2, sl
 801159c:	4639      	mov	r1, r7
 801159e:	b04d      	add	sp, #308	; 0x134
 80115a0:	ecbd 8b08 	vpop	{d8-d11}
 80115a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	f001 bc2c 	b.w	8012e04 <__sbprintf>
 80115ac:	ebbb 0605 	subs.w	r6, fp, r5
 80115b0:	f000 80b0 	beq.w	8011714 <_vfprintf_r+0x3a4>
 80115b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80115b6:	4433      	add	r3, r6
 80115b8:	9322      	str	r3, [sp, #136]	; 0x88
 80115ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115bc:	3301      	adds	r3, #1
 80115be:	2b07      	cmp	r3, #7
 80115c0:	e9c8 5600 	strd	r5, r6, [r8]
 80115c4:	9321      	str	r3, [sp, #132]	; 0x84
 80115c6:	dc05      	bgt.n	80115d4 <_vfprintf_r+0x264>
 80115c8:	f108 0808 	add.w	r8, r8, #8
 80115cc:	9b07      	ldr	r3, [sp, #28]
 80115ce:	4433      	add	r3, r6
 80115d0:	9307      	str	r3, [sp, #28]
 80115d2:	e729      	b.n	8011428 <_vfprintf_r+0xb8>
 80115d4:	ee1b 0a10 	vmov	r0, s22
 80115d8:	aa20      	add	r2, sp, #128	; 0x80
 80115da:	4651      	mov	r1, sl
 80115dc:	f003 ffc0 	bl	8015560 <__sprint_r>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	f041 83b0 	bne.w	8012d46 <_vfprintf_r+0x19d6>
 80115e6:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80115ea:	e7ef      	b.n	80115cc <_vfprintf_r+0x25c>
 80115ec:	f3af 8000 	nop.w
	...
 80115f8:	ffffffff 	.word	0xffffffff
 80115fc:	7fefffff 	.word	0x7fefffff
 8011600:	2f00      	cmp	r7, #0
 8011602:	f000 8087 	beq.w	8011714 <_vfprintf_r+0x3a4>
 8011606:	2100      	movs	r1, #0
 8011608:	f88d 70cc 	strb.w	r7, [sp, #204]	; 0xcc
 801160c:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
 8011610:	2301      	movs	r3, #1
 8011612:	9304      	str	r3, [sp, #16]
 8011614:	9108      	str	r1, [sp, #32]
 8011616:	461e      	mov	r6, r3
 8011618:	9105      	str	r1, [sp, #20]
 801161a:	910c      	str	r1, [sp, #48]	; 0x30
 801161c:	910f      	str	r1, [sp, #60]	; 0x3c
 801161e:	910d      	str	r1, [sp, #52]	; 0x34
 8011620:	ad33      	add	r5, sp, #204	; 0xcc
 8011622:	9b03      	ldr	r3, [sp, #12]
 8011624:	f013 0302 	ands.w	r3, r3, #2
 8011628:	930a      	str	r3, [sp, #40]	; 0x28
 801162a:	d002      	beq.n	8011632 <_vfprintf_r+0x2c2>
 801162c:	9b04      	ldr	r3, [sp, #16]
 801162e:	3302      	adds	r3, #2
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	9b03      	ldr	r3, [sp, #12]
 8011634:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8011638:	930b      	str	r3, [sp, #44]	; 0x2c
 801163a:	d105      	bne.n	8011648 <_vfprintf_r+0x2d8>
 801163c:	9b06      	ldr	r3, [sp, #24]
 801163e:	9a04      	ldr	r2, [sp, #16]
 8011640:	1a9c      	subs	r4, r3, r2
 8011642:	2c00      	cmp	r4, #0
 8011644:	f300 8368 	bgt.w	8011d18 <_vfprintf_r+0x9a8>
 8011648:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801164a:	b189      	cbz	r1, 8011670 <_vfprintf_r+0x300>
 801164c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801164e:	f10d 0063 	add.w	r0, sp, #99	; 0x63
 8011652:	3101      	adds	r1, #1
 8011654:	3201      	adds	r2, #1
 8011656:	f8c8 0000 	str.w	r0, [r8]
 801165a:	2907      	cmp	r1, #7
 801165c:	f04f 0001 	mov.w	r0, #1
 8011660:	9222      	str	r2, [sp, #136]	; 0x88
 8011662:	9121      	str	r1, [sp, #132]	; 0x84
 8011664:	f8c8 0004 	str.w	r0, [r8, #4]
 8011668:	f300 83b5 	bgt.w	8011dd6 <_vfprintf_r+0xa66>
 801166c:	f108 0808 	add.w	r8, r8, #8
 8011670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011672:	b183      	cbz	r3, 8011696 <_vfprintf_r+0x326>
 8011674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011676:	a919      	add	r1, sp, #100	; 0x64
 8011678:	3301      	adds	r3, #1
 801167a:	3202      	adds	r2, #2
 801167c:	f8c8 1000 	str.w	r1, [r8]
 8011680:	2b07      	cmp	r3, #7
 8011682:	f04f 0102 	mov.w	r1, #2
 8011686:	9222      	str	r2, [sp, #136]	; 0x88
 8011688:	9321      	str	r3, [sp, #132]	; 0x84
 801168a:	f8c8 1004 	str.w	r1, [r8, #4]
 801168e:	f300 8395 	bgt.w	8011dbc <_vfprintf_r+0xa4c>
 8011692:	f108 0808 	add.w	r8, r8, #8
 8011696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011698:	2b80      	cmp	r3, #128	; 0x80
 801169a:	f000 8247 	beq.w	8011b2c <_vfprintf_r+0x7bc>
 801169e:	9b05      	ldr	r3, [sp, #20]
 80116a0:	1b9c      	subs	r4, r3, r6
 80116a2:	2c00      	cmp	r4, #0
 80116a4:	f300 828a 	bgt.w	8011bbc <_vfprintf_r+0x84c>
 80116a8:	9b03      	ldr	r3, [sp, #12]
 80116aa:	05dc      	lsls	r4, r3, #23
 80116ac:	f100 81e9 	bmi.w	8011a82 <_vfprintf_r+0x712>
 80116b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116b2:	f8c8 5000 	str.w	r5, [r8]
 80116b6:	3301      	adds	r3, #1
 80116b8:	4432      	add	r2, r6
 80116ba:	2b07      	cmp	r3, #7
 80116bc:	f8c8 6004 	str.w	r6, [r8, #4]
 80116c0:	9222      	str	r2, [sp, #136]	; 0x88
 80116c2:	9321      	str	r3, [sp, #132]	; 0x84
 80116c4:	f300 831c 	bgt.w	8011d00 <_vfprintf_r+0x990>
 80116c8:	f108 0808 	add.w	r8, r8, #8
 80116cc:	9b03      	ldr	r3, [sp, #12]
 80116ce:	075c      	lsls	r4, r3, #29
 80116d0:	d505      	bpl.n	80116de <_vfprintf_r+0x36e>
 80116d2:	9b06      	ldr	r3, [sp, #24]
 80116d4:	9904      	ldr	r1, [sp, #16]
 80116d6:	1a5c      	subs	r4, r3, r1
 80116d8:	2c00      	cmp	r4, #0
 80116da:	f300 8389 	bgt.w	8011df0 <_vfprintf_r+0xa80>
 80116de:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80116e2:	9804      	ldr	r0, [sp, #16]
 80116e4:	4281      	cmp	r1, r0
 80116e6:	bfac      	ite	ge
 80116e8:	185b      	addge	r3, r3, r1
 80116ea:	181b      	addlt	r3, r3, r0
 80116ec:	9307      	str	r3, [sp, #28]
 80116ee:	2a00      	cmp	r2, #0
 80116f0:	f040 82a2 	bne.w	8011c38 <_vfprintf_r+0x8c8>
 80116f4:	2300      	movs	r3, #0
 80116f6:	9321      	str	r3, [sp, #132]	; 0x84
 80116f8:	9b08      	ldr	r3, [sp, #32]
 80116fa:	b123      	cbz	r3, 8011706 <_vfprintf_r+0x396>
 80116fc:	9908      	ldr	r1, [sp, #32]
 80116fe:	ee1b 0a10 	vmov	r0, s22
 8011702:	f002 fcfd 	bl	8014100 <_free_r>
 8011706:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 801170a:	465d      	mov	r5, fp
 801170c:	782b      	ldrb	r3, [r5, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f47f ae7d 	bne.w	801140e <_vfprintf_r+0x9e>
 8011714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011716:	4657      	mov	r7, sl
 8011718:	2b00      	cmp	r3, #0
 801171a:	f040 87ca 	bne.w	80126b2 <_vfprintf_r+0x1342>
 801171e:	2300      	movs	r3, #0
 8011720:	9321      	str	r3, [sp, #132]	; 0x84
 8011722:	e299      	b.n	8011c58 <_vfprintf_r+0x8e8>
 8011724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011726:	3307      	adds	r3, #7
 8011728:	f023 0307 	bic.w	r3, r3, #7
 801172c:	ecb3 8b02 	vldmia	r3!, {d8}
 8011730:	eeb0 7bc8 	vabs.f64	d7, d8
 8011734:	eeb4 7b49 	vcmp.f64	d7, d9
 8011738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801173c:	9309      	str	r3, [sp, #36]	; 0x24
 801173e:	f340 8515 	ble.w	801216c <_vfprintf_r+0xdfc>
 8011742:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8011746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174a:	f100 8798 	bmi.w	801267e <_vfprintf_r+0x130e>
 801174e:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	4da6      	ldr	r5, [pc, #664]	; (80119f0 <_vfprintf_r+0x680>)
 8011756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801175a:	9303      	str	r3, [sp, #12]
 801175c:	4ba5      	ldr	r3, [pc, #660]	; (80119f4 <_vfprintf_r+0x684>)
 801175e:	2203      	movs	r2, #3
 8011760:	2f47      	cmp	r7, #71	; 0x47
 8011762:	bfc8      	it	gt
 8011764:	461d      	movgt	r5, r3
 8011766:	2300      	movs	r3, #0
 8011768:	9308      	str	r3, [sp, #32]
 801176a:	9204      	str	r2, [sp, #16]
 801176c:	4616      	mov	r6, r2
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	930c      	str	r3, [sp, #48]	; 0x30
 8011772:	930f      	str	r3, [sp, #60]	; 0x3c
 8011774:	930d      	str	r3, [sp, #52]	; 0x34
 8011776:	2900      	cmp	r1, #0
 8011778:	f43f af53 	beq.w	8011622 <_vfprintf_r+0x2b2>
 801177c:	9b04      	ldr	r3, [sp, #16]
 801177e:	3301      	adds	r3, #1
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	e74e      	b.n	8011622 <_vfprintf_r+0x2b2>
 8011784:	4628      	mov	r0, r5
 8011786:	f002 fbc3 	bl	8013f10 <__sinit>
 801178a:	e60a      	b.n	80113a2 <_vfprintf_r+0x32>
 801178c:	9b03      	ldr	r3, [sp, #12]
 801178e:	f89b 7000 	ldrb.w	r7, [fp]
 8011792:	f043 0320 	orr.w	r3, r3, #32
 8011796:	9303      	str	r3, [sp, #12]
 8011798:	e659      	b.n	801144e <_vfprintf_r+0xde>
 801179a:	9b03      	ldr	r3, [sp, #12]
 801179c:	f043 0310 	orr.w	r3, r3, #16
 80117a0:	9303      	str	r3, [sp, #12]
 80117a2:	9b03      	ldr	r3, [sp, #12]
 80117a4:	069c      	lsls	r4, r3, #26
 80117a6:	f140 8451 	bpl.w	801204c <_vfprintf_r+0xcdc>
 80117aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ac:	3307      	adds	r3, #7
 80117ae:	f023 0307 	bic.w	r3, r3, #7
 80117b2:	461a      	mov	r2, r3
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	f852 4b08 	ldr.w	r4, [r2], #8
 80117ba:	9209      	str	r2, [sp, #36]	; 0x24
 80117bc:	461e      	mov	r6, r3
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f2c0 8455 	blt.w	801206e <_vfprintf_r+0xcfe>
 80117c4:	9b05      	ldr	r3, [sp, #20]
 80117c6:	3301      	adds	r3, #1
 80117c8:	f000 82e8 	beq.w	8011d9c <_vfprintf_r+0xa2c>
 80117cc:	9b03      	ldr	r3, [sp, #12]
 80117ce:	f023 0980 	bic.w	r9, r3, #128	; 0x80
 80117d2:	ea54 0306 	orrs.w	r3, r4, r6
 80117d6:	f040 82e3 	bne.w	8011da0 <_vfprintf_r+0xa30>
 80117da:	9b05      	ldr	r3, [sp, #20]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f040 82e4 	bne.w	8011daa <_vfprintf_r+0xa3a>
 80117e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80117e6:	2300      	movs	r3, #0
 80117e8:	9305      	str	r3, [sp, #20]
 80117ea:	461e      	mov	r6, r3
 80117ec:	ad4c      	add	r5, sp, #304	; 0x130
 80117ee:	e11e      	b.n	8011a2e <_vfprintf_r+0x6be>
 80117f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f2:	2100      	movs	r1, #0
 80117f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f8:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
 80117fc:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8011800:	9309      	str	r3, [sp, #36]	; 0x24
 8011802:	e705      	b.n	8011610 <_vfprintf_r+0x2a0>
 8011804:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011806:	f854 5b04 	ldr.w	r5, [r4], #4
 801180a:	2600      	movs	r6, #0
 801180c:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
 8011810:	2d00      	cmp	r5, #0
 8011812:	f000 85b4 	beq.w	801237e <_vfprintf_r+0x100e>
 8011816:	9b05      	ldr	r3, [sp, #20]
 8011818:	1c59      	adds	r1, r3, #1
 801181a:	f000 8676 	beq.w	801250a <_vfprintf_r+0x119a>
 801181e:	461a      	mov	r2, r3
 8011820:	4631      	mov	r1, r6
 8011822:	4628      	mov	r0, r5
 8011824:	f7f7 fa9c 	bl	8008d60 <memchr>
 8011828:	9008      	str	r0, [sp, #32]
 801182a:	2800      	cmp	r0, #0
 801182c:	f001 8135 	beq.w	8012a9a <_vfprintf_r+0x172a>
 8011830:	9a08      	ldr	r2, [sp, #32]
 8011832:	9605      	str	r6, [sp, #20]
 8011834:	4633      	mov	r3, r6
 8011836:	1b56      	subs	r6, r2, r5
 8011838:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 801183c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8011840:	9409      	str	r4, [sp, #36]	; 0x24
 8011842:	9204      	str	r2, [sp, #16]
 8011844:	9308      	str	r3, [sp, #32]
 8011846:	930c      	str	r3, [sp, #48]	; 0x30
 8011848:	930f      	str	r3, [sp, #60]	; 0x3c
 801184a:	930d      	str	r3, [sp, #52]	; 0x34
 801184c:	e793      	b.n	8011776 <_vfprintf_r+0x406>
 801184e:	9b03      	ldr	r3, [sp, #12]
 8011850:	f043 0310 	orr.w	r3, r3, #16
 8011854:	9303      	str	r3, [sp, #12]
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	f013 0620 	ands.w	r6, r3, #32
 801185c:	f000 83d5 	beq.w	801200a <_vfprintf_r+0xc9a>
 8011860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011862:	3307      	adds	r3, #7
 8011864:	f023 0307 	bic.w	r3, r3, #7
 8011868:	685e      	ldr	r6, [r3, #4]
 801186a:	f853 4b08 	ldr.w	r4, [r3], #8
 801186e:	9309      	str	r3, [sp, #36]	; 0x24
 8011870:	9b03      	ldr	r3, [sp, #12]
 8011872:	f423 6980 	bic.w	r9, r3, #1024	; 0x400
 8011876:	2300      	movs	r3, #0
 8011878:	2200      	movs	r2, #0
 801187a:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
 801187e:	9a05      	ldr	r2, [sp, #20]
 8011880:	1c55      	adds	r5, r2, #1
 8011882:	f000 80bd 	beq.w	8011a00 <_vfprintf_r+0x690>
 8011886:	f029 0180 	bic.w	r1, r9, #128	; 0x80
 801188a:	9103      	str	r1, [sp, #12]
 801188c:	ea54 0106 	orrs.w	r1, r4, r6
 8011890:	f040 80b4 	bne.w	80119fc <_vfprintf_r+0x68c>
 8011894:	2a00      	cmp	r2, #0
 8011896:	f040 8629 	bne.w	80124ec <_vfprintf_r+0x117c>
 801189a:	2b00      	cmp	r3, #0
 801189c:	d1a3      	bne.n	80117e6 <_vfprintf_r+0x476>
 801189e:	f019 0601 	ands.w	r6, r9, #1
 80118a2:	f000 842a 	beq.w	80120fa <_vfprintf_r+0xd8a>
 80118a6:	2330      	movs	r3, #48	; 0x30
 80118a8:	f88d 312f 	strb.w	r3, [sp, #303]	; 0x12f
 80118ac:	f20d 152f 	addw	r5, sp, #303	; 0x12f
 80118b0:	e0bd      	b.n	8011a2e <_vfprintf_r+0x6be>
 80118b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b8:	9206      	str	r2, [sp, #24]
 80118ba:	2a00      	cmp	r2, #0
 80118bc:	f280 83ef 	bge.w	801209e <_vfprintf_r+0xd2e>
 80118c0:	9a06      	ldr	r2, [sp, #24]
 80118c2:	9309      	str	r3, [sp, #36]	; 0x24
 80118c4:	4252      	negs	r2, r2
 80118c6:	9206      	str	r2, [sp, #24]
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	f89b 7000 	ldrb.w	r7, [fp]
 80118ce:	f043 0304 	orr.w	r3, r3, #4
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	e5bb      	b.n	801144e <_vfprintf_r+0xde>
 80118d6:	f89b 7000 	ldrb.w	r7, [fp]
 80118da:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
 80118de:	e5b6      	b.n	801144e <_vfprintf_r+0xde>
 80118e0:	9b03      	ldr	r3, [sp, #12]
 80118e2:	f89b 7000 	ldrb.w	r7, [fp]
 80118e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	e5af      	b.n	801144e <_vfprintf_r+0xde>
 80118ee:	465a      	mov	r2, fp
 80118f0:	f812 7b01 	ldrb.w	r7, [r2], #1
 80118f4:	2f2a      	cmp	r7, #42	; 0x2a
 80118f6:	f001 825f 	beq.w	8012db8 <_vfprintf_r+0x1a48>
 80118fa:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80118fe:	2b09      	cmp	r3, #9
 8011900:	4693      	mov	fp, r2
 8011902:	bf98      	it	ls
 8011904:	2200      	movls	r2, #0
 8011906:	f201 80e8 	bhi.w	8012ada <_vfprintf_r+0x176a>
 801190a:	f81b 7b01 	ldrb.w	r7, [fp], #1
 801190e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011912:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011916:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801191a:	2b09      	cmp	r3, #9
 801191c:	d9f5      	bls.n	801190a <_vfprintf_r+0x59a>
 801191e:	9205      	str	r2, [sp, #20]
 8011920:	e597      	b.n	8011452 <_vfprintf_r+0xe2>
 8011922:	9b03      	ldr	r3, [sp, #12]
 8011924:	069e      	lsls	r6, r3, #26
 8011926:	f100 83fb 	bmi.w	8012120 <_vfprintf_r+0xdb0>
 801192a:	9b03      	ldr	r3, [sp, #12]
 801192c:	06dd      	lsls	r5, r3, #27
 801192e:	f100 85e3 	bmi.w	80124f8 <_vfprintf_r+0x1188>
 8011932:	9b03      	ldr	r3, [sp, #12]
 8011934:	065c      	lsls	r4, r3, #25
 8011936:	f100 86cf 	bmi.w	80126d8 <_vfprintf_r+0x1368>
 801193a:	9b03      	ldr	r3, [sp, #12]
 801193c:	0598      	lsls	r0, r3, #22
 801193e:	f140 85db 	bpl.w	80124f8 <_vfprintf_r+0x1188>
 8011942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011944:	9907      	ldr	r1, [sp, #28]
 8011946:	f853 2b04 	ldr.w	r2, [r3], #4
 801194a:	9309      	str	r3, [sp, #36]	; 0x24
 801194c:	7011      	strb	r1, [r2, #0]
 801194e:	465d      	mov	r5, fp
 8011950:	e6dc      	b.n	801170c <_vfprintf_r+0x39c>
 8011952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011954:	9a03      	ldr	r2, [sp, #12]
 8011956:	f853 4b04 	ldr.w	r4, [r3], #4
 801195a:	9309      	str	r3, [sp, #36]	; 0x24
 801195c:	2330      	movs	r3, #48	; 0x30
 801195e:	2778      	movs	r7, #120	; 0x78
 8011960:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011964:	4b24      	ldr	r3, [pc, #144]	; (80119f8 <_vfprintf_r+0x688>)
 8011966:	9312      	str	r3, [sp, #72]	; 0x48
 8011968:	f042 0902 	orr.w	r9, r2, #2
 801196c:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 8011970:	2600      	movs	r6, #0
 8011972:	2302      	movs	r3, #2
 8011974:	e780      	b.n	8011878 <_vfprintf_r+0x508>
 8011976:	f89b 7000 	ldrb.w	r7, [fp]
 801197a:	9b03      	ldr	r3, [sp, #12]
 801197c:	2f6c      	cmp	r7, #108	; 0x6c
 801197e:	f000 84f5 	beq.w	801236c <_vfprintf_r+0xffc>
 8011982:	f043 0310 	orr.w	r3, r3, #16
 8011986:	9303      	str	r3, [sp, #12]
 8011988:	e561      	b.n	801144e <_vfprintf_r+0xde>
 801198a:	f89b 7000 	ldrb.w	r7, [fp]
 801198e:	9b03      	ldr	r3, [sp, #12]
 8011990:	2f68      	cmp	r7, #104	; 0x68
 8011992:	f000 84e2 	beq.w	801235a <_vfprintf_r+0xfea>
 8011996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801199a:	9303      	str	r3, [sp, #12]
 801199c:	e557      	b.n	801144e <_vfprintf_r+0xde>
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	f043 0910 	orr.w	r9, r3, #16
 80119a4:	f019 0620 	ands.w	r6, r9, #32
 80119a8:	f000 8340 	beq.w	801202c <_vfprintf_r+0xcbc>
 80119ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119ae:	3307      	adds	r3, #7
 80119b0:	f023 0307 	bic.w	r3, r3, #7
 80119b4:	685e      	ldr	r6, [r3, #4]
 80119b6:	f853 4b08 	ldr.w	r4, [r3], #8
 80119ba:	9309      	str	r3, [sp, #36]	; 0x24
 80119bc:	2301      	movs	r3, #1
 80119be:	e75b      	b.n	8011878 <_vfprintf_r+0x508>
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	f89b 7000 	ldrb.w	r7, [fp]
 80119c6:	f043 0308 	orr.w	r3, r3, #8
 80119ca:	9303      	str	r3, [sp, #12]
 80119cc:	e53f      	b.n	801144e <_vfprintf_r+0xde>
 80119ce:	9b03      	ldr	r3, [sp, #12]
 80119d0:	f89b 7000 	ldrb.w	r7, [fp]
 80119d4:	f043 0301 	orr.w	r3, r3, #1
 80119d8:	9303      	str	r3, [sp, #12]
 80119da:	e538      	b.n	801144e <_vfprintf_r+0xde>
 80119dc:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f47f adbb 	bne.w	801155c <_vfprintf_r+0x1ec>
 80119e6:	f89b 7000 	ldrb.w	r7, [fp]
 80119ea:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
 80119ee:	e52e      	b.n	801144e <_vfprintf_r+0xde>
 80119f0:	24008e28 	.word	0x24008e28
 80119f4:	24008e2c 	.word	0x24008e2c
 80119f8:	24008e38 	.word	0x24008e38
 80119fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	f000 81cd 	beq.w	8011da0 <_vfprintf_r+0xa30>
 8011a06:	2b02      	cmp	r3, #2
 8011a08:	ad4c      	add	r5, sp, #304	; 0x130
 8011a0a:	d11e      	bne.n	8011a4a <_vfprintf_r+0x6da>
 8011a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a0e:	f004 030f 	and.w	r3, r4, #15
 8011a12:	0924      	lsrs	r4, r4, #4
 8011a14:	5cd3      	ldrb	r3, [r2, r3]
 8011a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011a1a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8011a1e:	0936      	lsrs	r6, r6, #4
 8011a20:	ea54 0306 	orrs.w	r3, r4, r6
 8011a24:	d1f3      	bne.n	8011a0e <_vfprintf_r+0x69e>
 8011a26:	ab4c      	add	r3, sp, #304	; 0x130
 8011a28:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a2c:	1b5e      	subs	r6, r3, r5
 8011a2e:	9a05      	ldr	r2, [sp, #20]
 8011a30:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8011a34:	42b2      	cmp	r2, r6
 8011a36:	f04f 0300 	mov.w	r3, #0
 8011a3a:	bfb8      	it	lt
 8011a3c:	4632      	movlt	r2, r6
 8011a3e:	9308      	str	r3, [sp, #32]
 8011a40:	9204      	str	r2, [sp, #16]
 8011a42:	930c      	str	r3, [sp, #48]	; 0x30
 8011a44:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a46:	930d      	str	r3, [sp, #52]	; 0x34
 8011a48:	e695      	b.n	8011776 <_vfprintf_r+0x406>
 8011a4a:	f004 0307 	and.w	r3, r4, #7
 8011a4e:	08e4      	lsrs	r4, r4, #3
 8011a50:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 8011a54:	08f6      	lsrs	r6, r6, #3
 8011a56:	3330      	adds	r3, #48	; 0x30
 8011a58:	ea54 0106 	orrs.w	r1, r4, r6
 8011a5c:	462a      	mov	r2, r5
 8011a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011a62:	d1f2      	bne.n	8011a4a <_vfprintf_r+0x6da>
 8011a64:	f019 0f01 	tst.w	r9, #1
 8011a68:	d0dd      	beq.n	8011a26 <_vfprintf_r+0x6b6>
 8011a6a:	2b30      	cmp	r3, #48	; 0x30
 8011a6c:	d0db      	beq.n	8011a26 <_vfprintf_r+0x6b6>
 8011a6e:	2330      	movs	r3, #48	; 0x30
 8011a70:	3a02      	subs	r2, #2
 8011a72:	f805 3c01 	strb.w	r3, [r5, #-1]
 8011a76:	ab4c      	add	r3, sp, #304	; 0x130
 8011a78:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a7c:	1a9e      	subs	r6, r3, r2
 8011a7e:	4615      	mov	r5, r2
 8011a80:	e7d5      	b.n	8011a2e <_vfprintf_r+0x6be>
 8011a82:	2f65      	cmp	r7, #101	; 0x65
 8011a84:	f340 80f9 	ble.w	8011c7a <_vfprintf_r+0x90a>
 8011a88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a90:	f040 81eb 	bne.w	8011e6a <_vfprintf_r+0xafa>
 8011a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a96:	49be      	ldr	r1, [pc, #760]	; (8011d90 <_vfprintf_r+0xa20>)
 8011a98:	f8c8 1000 	str.w	r1, [r8]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	3201      	adds	r2, #1
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	2b07      	cmp	r3, #7
 8011aa4:	9222      	str	r2, [sp, #136]	; 0x88
 8011aa6:	9321      	str	r3, [sp, #132]	; 0x84
 8011aa8:	f8c8 1004 	str.w	r1, [r8, #4]
 8011aac:	f300 8503 	bgt.w	80124b6 <_vfprintf_r+0x1146>
 8011ab0:	f108 0808 	add.w	r8, r8, #8
 8011ab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011ab6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011ab8:	428b      	cmp	r3, r1
 8011aba:	f280 82e3 	bge.w	8012084 <_vfprintf_r+0xd14>
 8011abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ac0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ac2:	441a      	add	r2, r3
 8011ac4:	e9c8 1300 	strd	r1, r3, [r8]
 8011ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011aca:	9222      	str	r2, [sp, #136]	; 0x88
 8011acc:	3301      	adds	r3, #1
 8011ace:	2b07      	cmp	r3, #7
 8011ad0:	9321      	str	r3, [sp, #132]	; 0x84
 8011ad2:	f300 8434 	bgt.w	801233e <_vfprintf_r+0xfce>
 8011ad6:	f108 0808 	add.w	r8, r8, #8
 8011ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011adc:	1e5c      	subs	r4, r3, #1
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	f77f adf4 	ble.w	80116cc <_vfprintf_r+0x35c>
 8011ae4:	2c10      	cmp	r4, #16
 8011ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ae8:	f340 84f3 	ble.w	80124d2 <_vfprintf_r+0x1162>
 8011aec:	ee1b 6a10 	vmov	r6, s22
 8011af0:	2510      	movs	r5, #16
 8011af2:	e005      	b.n	8011b00 <_vfprintf_r+0x790>
 8011af4:	f108 0808 	add.w	r8, r8, #8
 8011af8:	3c10      	subs	r4, #16
 8011afa:	2c10      	cmp	r4, #16
 8011afc:	f340 84e9 	ble.w	80124d2 <_vfprintf_r+0x1162>
 8011b00:	3301      	adds	r3, #1
 8011b02:	49a4      	ldr	r1, [pc, #656]	; (8011d94 <_vfprintf_r+0xa24>)
 8011b04:	3210      	adds	r2, #16
 8011b06:	2b07      	cmp	r3, #7
 8011b08:	e9c8 1500 	strd	r1, r5, [r8]
 8011b0c:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011b10:	ddf0      	ble.n	8011af4 <_vfprintf_r+0x784>
 8011b12:	aa20      	add	r2, sp, #128	; 0x80
 8011b14:	4651      	mov	r1, sl
 8011b16:	4630      	mov	r0, r6
 8011b18:	f003 fd22 	bl	8015560 <__sprint_r>
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	f040 8094 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011b22:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011b26:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011b2a:	e7e5      	b.n	8011af8 <_vfprintf_r+0x788>
 8011b2c:	9b06      	ldr	r3, [sp, #24]
 8011b2e:	9904      	ldr	r1, [sp, #16]
 8011b30:	1a5c      	subs	r4, r3, r1
 8011b32:	2c00      	cmp	r4, #0
 8011b34:	f77f adb3 	ble.w	801169e <_vfprintf_r+0x32e>
 8011b38:	2c10      	cmp	r4, #16
 8011b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b3c:	dd2b      	ble.n	8011b96 <_vfprintf_r+0x826>
 8011b3e:	950a      	str	r5, [sp, #40]	; 0x28
 8011b40:	f04f 0910 	mov.w	r9, #16
 8011b44:	4655      	mov	r5, sl
 8011b46:	46a2      	mov	sl, r4
 8011b48:	ee1b 4a10 	vmov	r4, s22
 8011b4c:	e006      	b.n	8011b5c <_vfprintf_r+0x7ec>
 8011b4e:	f1aa 0a10 	sub.w	sl, sl, #16
 8011b52:	f1ba 0f10 	cmp.w	sl, #16
 8011b56:	f108 0808 	add.w	r8, r8, #8
 8011b5a:	dd19      	ble.n	8011b90 <_vfprintf_r+0x820>
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	498d      	ldr	r1, [pc, #564]	; (8011d94 <_vfprintf_r+0xa24>)
 8011b60:	3210      	adds	r2, #16
 8011b62:	2b07      	cmp	r3, #7
 8011b64:	e9c8 1900 	strd	r1, r9, [r8]
 8011b68:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011b6c:	ddef      	ble.n	8011b4e <_vfprintf_r+0x7de>
 8011b6e:	aa20      	add	r2, sp, #128	; 0x80
 8011b70:	4629      	mov	r1, r5
 8011b72:	4620      	mov	r0, r4
 8011b74:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011b78:	f003 fcf2 	bl	8015560 <__sprint_r>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	f040 8172 	bne.w	8011e66 <_vfprintf_r+0xaf6>
 8011b82:	f1aa 0a10 	sub.w	sl, sl, #16
 8011b86:	f1ba 0f10 	cmp.w	sl, #16
 8011b8a:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011b8e:	dce5      	bgt.n	8011b5c <_vfprintf_r+0x7ec>
 8011b90:	4654      	mov	r4, sl
 8011b92:	46aa      	mov	sl, r5
 8011b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011b96:	497f      	ldr	r1, [pc, #508]	; (8011d94 <_vfprintf_r+0xa24>)
 8011b98:	f8c8 4004 	str.w	r4, [r8, #4]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	4422      	add	r2, r4
 8011ba0:	2b07      	cmp	r3, #7
 8011ba2:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011ba6:	f8c8 1000 	str.w	r1, [r8]
 8011baa:	f300 83ba 	bgt.w	8012322 <_vfprintf_r+0xfb2>
 8011bae:	9b05      	ldr	r3, [sp, #20]
 8011bb0:	1b9c      	subs	r4, r3, r6
 8011bb2:	2c00      	cmp	r4, #0
 8011bb4:	f108 0808 	add.w	r8, r8, #8
 8011bb8:	f77f ad76 	ble.w	80116a8 <_vfprintf_r+0x338>
 8011bbc:	2c10      	cmp	r4, #16
 8011bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bc0:	dd2b      	ble.n	8011c1a <_vfprintf_r+0x8aa>
 8011bc2:	9505      	str	r5, [sp, #20]
 8011bc4:	f04f 0910 	mov.w	r9, #16
 8011bc8:	4655      	mov	r5, sl
 8011bca:	46a2      	mov	sl, r4
 8011bcc:	ee1b 4a10 	vmov	r4, s22
 8011bd0:	e006      	b.n	8011be0 <_vfprintf_r+0x870>
 8011bd2:	f1aa 0a10 	sub.w	sl, sl, #16
 8011bd6:	f1ba 0f10 	cmp.w	sl, #16
 8011bda:	f108 0808 	add.w	r8, r8, #8
 8011bde:	dd19      	ble.n	8011c14 <_vfprintf_r+0x8a4>
 8011be0:	3301      	adds	r3, #1
 8011be2:	496c      	ldr	r1, [pc, #432]	; (8011d94 <_vfprintf_r+0xa24>)
 8011be4:	3210      	adds	r2, #16
 8011be6:	2b07      	cmp	r3, #7
 8011be8:	e9c8 1900 	strd	r1, r9, [r8]
 8011bec:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011bf0:	ddef      	ble.n	8011bd2 <_vfprintf_r+0x862>
 8011bf2:	aa20      	add	r2, sp, #128	; 0x80
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f003 fcb2 	bl	8015560 <__sprint_r>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	f040 8132 	bne.w	8011e66 <_vfprintf_r+0xaf6>
 8011c02:	f1aa 0a10 	sub.w	sl, sl, #16
 8011c06:	f1ba 0f10 	cmp.w	sl, #16
 8011c0a:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011c0e:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011c12:	dce5      	bgt.n	8011be0 <_vfprintf_r+0x870>
 8011c14:	4654      	mov	r4, sl
 8011c16:	46aa      	mov	sl, r5
 8011c18:	9d05      	ldr	r5, [sp, #20]
 8011c1a:	495e      	ldr	r1, [pc, #376]	; (8011d94 <_vfprintf_r+0xa24>)
 8011c1c:	f8c8 4004 	str.w	r4, [r8, #4]
 8011c20:	3301      	adds	r3, #1
 8011c22:	4422      	add	r2, r4
 8011c24:	2b07      	cmp	r3, #7
 8011c26:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011c2a:	f8c8 1000 	str.w	r1, [r8]
 8011c2e:	f300 81de 	bgt.w	8011fee <_vfprintf_r+0xc7e>
 8011c32:	f108 0808 	add.w	r8, r8, #8
 8011c36:	e537      	b.n	80116a8 <_vfprintf_r+0x338>
 8011c38:	ee1b 0a10 	vmov	r0, s22
 8011c3c:	aa20      	add	r2, sp, #128	; 0x80
 8011c3e:	4651      	mov	r1, sl
 8011c40:	f003 fc8e 	bl	8015560 <__sprint_r>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f43f ad55 	beq.w	80116f4 <_vfprintf_r+0x384>
 8011c4a:	4657      	mov	r7, sl
 8011c4c:	9908      	ldr	r1, [sp, #32]
 8011c4e:	b119      	cbz	r1, 8011c58 <_vfprintf_r+0x8e8>
 8011c50:	ee1b 0a10 	vmov	r0, s22
 8011c54:	f002 fa54 	bl	8014100 <_free_r>
 8011c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c5a:	f013 0f01 	tst.w	r3, #1
 8011c5e:	89bb      	ldrh	r3, [r7, #12]
 8011c60:	d102      	bne.n	8011c68 <_vfprintf_r+0x8f8>
 8011c62:	0598      	lsls	r0, r3, #22
 8011c64:	f140 8405 	bpl.w	8012472 <_vfprintf_r+0x1102>
 8011c68:	0659      	lsls	r1, r3, #25
 8011c6a:	f100 8765 	bmi.w	8012b38 <_vfprintf_r+0x17c8>
 8011c6e:	9807      	ldr	r0, [sp, #28]
 8011c70:	b04d      	add	sp, #308	; 0x134
 8011c72:	ecbd 8b08 	vpop	{d8-d11}
 8011c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	f340 816f 	ble.w	8011f60 <_vfprintf_r+0xbf0>
 8011c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c84:	f8c8 5000 	str.w	r5, [r8]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	2101      	movs	r1, #1
 8011c8e:	2b07      	cmp	r3, #7
 8011c90:	9222      	str	r2, [sp, #136]	; 0x88
 8011c92:	9321      	str	r3, [sp, #132]	; 0x84
 8011c94:	f8c8 1004 	str.w	r1, [r8, #4]
 8011c98:	f300 838a 	bgt.w	80123b0 <_vfprintf_r+0x1040>
 8011c9c:	f108 0808 	add.w	r8, r8, #8
 8011ca0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011ca2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	440a      	add	r2, r1
 8011ca8:	2b07      	cmp	r3, #7
 8011caa:	e9c8 0100 	strd	r0, r1, [r8]
 8011cae:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011cb2:	f300 838b 	bgt.w	80123cc <_vfprintf_r+0x105c>
 8011cb6:	f108 0808 	add.w	r8, r8, #8
 8011cba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc2:	f000 816c 	beq.w	8011f9e <_vfprintf_r+0xc2e>
 8011cc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011cc8:	3301      	adds	r3, #1
 8011cca:	3901      	subs	r1, #1
 8011ccc:	3501      	adds	r5, #1
 8011cce:	440a      	add	r2, r1
 8011cd0:	2b07      	cmp	r3, #7
 8011cd2:	f8c8 5000 	str.w	r5, [r8]
 8011cd6:	9321      	str	r3, [sp, #132]	; 0x84
 8011cd8:	f8c8 1004 	str.w	r1, [r8, #4]
 8011cdc:	9222      	str	r2, [sp, #136]	; 0x88
 8011cde:	f300 8150 	bgt.w	8011f82 <_vfprintf_r+0xc12>
 8011ce2:	f108 0808 	add.w	r8, r8, #8
 8011ce6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011ce8:	f8c8 1004 	str.w	r1, [r8, #4]
 8011cec:	3301      	adds	r3, #1
 8011cee:	440a      	add	r2, r1
 8011cf0:	2b07      	cmp	r3, #7
 8011cf2:	a91c      	add	r1, sp, #112	; 0x70
 8011cf4:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011cf8:	f8c8 1000 	str.w	r1, [r8]
 8011cfc:	f77f ace4 	ble.w	80116c8 <_vfprintf_r+0x358>
 8011d00:	ee1b 0a10 	vmov	r0, s22
 8011d04:	aa20      	add	r2, sp, #128	; 0x80
 8011d06:	4651      	mov	r1, sl
 8011d08:	f003 fc2a 	bl	8015560 <__sprint_r>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d19c      	bne.n	8011c4a <_vfprintf_r+0x8da>
 8011d10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011d12:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011d16:	e4d9      	b.n	80116cc <_vfprintf_r+0x35c>
 8011d18:	2c10      	cmp	r4, #16
 8011d1a:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
 8011d1e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8011d98 <_vfprintf_r+0xa28>
 8011d22:	dd25      	ble.n	8011d70 <_vfprintf_r+0xa00>
 8011d24:	9517      	str	r5, [sp, #92]	; 0x5c
 8011d26:	2310      	movs	r3, #16
 8011d28:	464d      	mov	r5, r9
 8011d2a:	ee1b 9a10 	vmov	r9, s22
 8011d2e:	e004      	b.n	8011d3a <_vfprintf_r+0x9ca>
 8011d30:	3c10      	subs	r4, #16
 8011d32:	2c10      	cmp	r4, #16
 8011d34:	f108 0808 	add.w	r8, r8, #8
 8011d38:	dd18      	ble.n	8011d6c <_vfprintf_r+0x9fc>
 8011d3a:	3101      	adds	r1, #1
 8011d3c:	3210      	adds	r2, #16
 8011d3e:	2907      	cmp	r1, #7
 8011d40:	e9c8 5300 	strd	r5, r3, [r8]
 8011d44:	e9cd 1221 	strd	r1, r2, [sp, #132]	; 0x84
 8011d48:	ddf2      	ble.n	8011d30 <_vfprintf_r+0x9c0>
 8011d4a:	aa20      	add	r2, sp, #128	; 0x80
 8011d4c:	4651      	mov	r1, sl
 8011d4e:	4648      	mov	r0, r9
 8011d50:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011d54:	f003 fc04 	bl	8015560 <__sprint_r>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	f47f af76 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011d5e:	3c10      	subs	r4, #16
 8011d60:	2c10      	cmp	r4, #16
 8011d62:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
 8011d66:	f04f 0310 	mov.w	r3, #16
 8011d6a:	dce6      	bgt.n	8011d3a <_vfprintf_r+0x9ca>
 8011d6c:	46a9      	mov	r9, r5
 8011d6e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011d70:	f8c8 9000 	str.w	r9, [r8]
 8011d74:	3101      	adds	r1, #1
 8011d76:	4422      	add	r2, r4
 8011d78:	2907      	cmp	r1, #7
 8011d7a:	e9cd 1221 	strd	r1, r2, [sp, #132]	; 0x84
 8011d7e:	f8c8 4004 	str.w	r4, [r8, #4]
 8011d82:	f300 837c 	bgt.w	801247e <_vfprintf_r+0x110e>
 8011d86:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8011d8a:	f108 0808 	add.w	r8, r8, #8
 8011d8e:	e45c      	b.n	801164a <_vfprintf_r+0x2da>
 8011d90:	24008e68 	.word	0x24008e68
 8011d94:	24008e7c 	.word	0x24008e7c
 8011d98:	24008e6c 	.word	0x24008e6c
 8011d9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011da0:	2c0a      	cmp	r4, #10
 8011da2:	f176 0300 	sbcs.w	r3, r6, #0
 8011da6:	f080 831f 	bcs.w	80123e8 <_vfprintf_r+0x1078>
 8011daa:	3430      	adds	r4, #48	; 0x30
 8011dac:	f88d 412f 	strb.w	r4, [sp, #303]	; 0x12f
 8011db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8011db4:	2601      	movs	r6, #1
 8011db6:	f20d 152f 	addw	r5, sp, #303	; 0x12f
 8011dba:	e638      	b.n	8011a2e <_vfprintf_r+0x6be>
 8011dbc:	ee1b 0a10 	vmov	r0, s22
 8011dc0:	aa20      	add	r2, sp, #128	; 0x80
 8011dc2:	4651      	mov	r1, sl
 8011dc4:	f003 fbcc 	bl	8015560 <__sprint_r>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	f47f af3e 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011dce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011dd0:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011dd4:	e45f      	b.n	8011696 <_vfprintf_r+0x326>
 8011dd6:	ee1b 0a10 	vmov	r0, s22
 8011dda:	aa20      	add	r2, sp, #128	; 0x80
 8011ddc:	4651      	mov	r1, sl
 8011dde:	f003 fbbf 	bl	8015560 <__sprint_r>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	f47f af31 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011de8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011dea:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011dee:	e43f      	b.n	8011670 <_vfprintf_r+0x300>
 8011df0:	2c10      	cmp	r4, #16
 8011df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011df4:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8012168 <_vfprintf_r+0xdf8>
 8011df8:	dd21      	ble.n	8011e3e <_vfprintf_r+0xace>
 8011dfa:	ee1b 7a10 	vmov	r7, s22
 8011dfe:	2510      	movs	r5, #16
 8011e00:	464e      	mov	r6, r9
 8011e02:	e004      	b.n	8011e0e <_vfprintf_r+0xa9e>
 8011e04:	3c10      	subs	r4, #16
 8011e06:	2c10      	cmp	r4, #16
 8011e08:	f108 0808 	add.w	r8, r8, #8
 8011e0c:	dd16      	ble.n	8011e3c <_vfprintf_r+0xacc>
 8011e0e:	3301      	adds	r3, #1
 8011e10:	3210      	adds	r2, #16
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	e9c8 6500 	strd	r6, r5, [r8]
 8011e18:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011e1c:	ddf2      	ble.n	8011e04 <_vfprintf_r+0xa94>
 8011e1e:	aa20      	add	r2, sp, #128	; 0x80
 8011e20:	4651      	mov	r1, sl
 8011e22:	4638      	mov	r0, r7
 8011e24:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011e28:	f003 fb9a 	bl	8015560 <__sprint_r>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	f47f af0c 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011e32:	3c10      	subs	r4, #16
 8011e34:	2c10      	cmp	r4, #16
 8011e36:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011e3a:	dce8      	bgt.n	8011e0e <_vfprintf_r+0xa9e>
 8011e3c:	46b1      	mov	r9, r6
 8011e3e:	3301      	adds	r3, #1
 8011e40:	4422      	add	r2, r4
 8011e42:	2b07      	cmp	r3, #7
 8011e44:	e9c8 9400 	strd	r9, r4, [r8]
 8011e48:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011e4c:	f77f ac47 	ble.w	80116de <_vfprintf_r+0x36e>
 8011e50:	ee1b 0a10 	vmov	r0, s22
 8011e54:	aa20      	add	r2, sp, #128	; 0x80
 8011e56:	4651      	mov	r1, sl
 8011e58:	f003 fb82 	bl	8015560 <__sprint_r>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	f47f aef4 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011e62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e64:	e43b      	b.n	80116de <_vfprintf_r+0x36e>
 8011e66:	462f      	mov	r7, r5
 8011e68:	e6f0      	b.n	8011c4c <_vfprintf_r+0x8dc>
 8011e6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011e6c:	2900      	cmp	r1, #0
 8011e6e:	f340 811b 	ble.w	80120a8 <_vfprintf_r+0xd38>
 8011e72:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8011e76:	429e      	cmp	r6, r3
 8011e78:	bfa8      	it	ge
 8011e7a:	461e      	movge	r6, r3
 8011e7c:	2e00      	cmp	r6, #0
 8011e7e:	dd0b      	ble.n	8011e98 <_vfprintf_r+0xb28>
 8011e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e82:	3301      	adds	r3, #1
 8011e84:	4432      	add	r2, r6
 8011e86:	2b07      	cmp	r3, #7
 8011e88:	e9c8 5600 	strd	r5, r6, [r8]
 8011e8c:	9222      	str	r2, [sp, #136]	; 0x88
 8011e8e:	9321      	str	r3, [sp, #132]	; 0x84
 8011e90:	f300 85b8 	bgt.w	8012a04 <_vfprintf_r+0x1694>
 8011e94:	f108 0808 	add.w	r8, r8, #8
 8011e98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8011e9a:	2e00      	cmp	r6, #0
 8011e9c:	bfa8      	it	ge
 8011e9e:	1ba4      	subge	r4, r4, r6
 8011ea0:	2c00      	cmp	r4, #0
 8011ea2:	f300 8348 	bgt.w	8012536 <_vfprintf_r+0x11c6>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011eaa:	0559      	lsls	r1, r3, #21
 8011eac:	442f      	add	r7, r5
 8011eae:	f100 84e1 	bmi.w	8012874 <_vfprintf_r+0x1504>
 8011eb2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8011eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eb6:	429c      	cmp	r4, r3
 8011eb8:	db03      	blt.n	8011ec2 <_vfprintf_r+0xb52>
 8011eba:	9b03      	ldr	r3, [sp, #12]
 8011ebc:	07db      	lsls	r3, r3, #31
 8011ebe:	f140 8403 	bpl.w	80126c8 <_vfprintf_r+0x1358>
 8011ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ec6:	441a      	add	r2, r3
 8011ec8:	e9c8 1300 	strd	r1, r3, [r8]
 8011ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ece:	9222      	str	r2, [sp, #136]	; 0x88
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	2b07      	cmp	r3, #7
 8011ed4:	9321      	str	r3, [sp, #132]	; 0x84
 8011ed6:	f300 85d1 	bgt.w	8012a7c <_vfprintf_r+0x170c>
 8011eda:	f108 0808 	add.w	r8, r8, #8
 8011ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ee0:	441d      	add	r5, r3
 8011ee2:	1bed      	subs	r5, r5, r7
 8011ee4:	1b1c      	subs	r4, r3, r4
 8011ee6:	42a5      	cmp	r5, r4
 8011ee8:	bfa8      	it	ge
 8011eea:	4625      	movge	r5, r4
 8011eec:	2d00      	cmp	r5, #0
 8011eee:	dd0d      	ble.n	8011f0c <_vfprintf_r+0xb9c>
 8011ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ef2:	f8c8 7000 	str.w	r7, [r8]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	442a      	add	r2, r5
 8011efa:	2b07      	cmp	r3, #7
 8011efc:	f8c8 5004 	str.w	r5, [r8, #4]
 8011f00:	9222      	str	r2, [sp, #136]	; 0x88
 8011f02:	9321      	str	r3, [sp, #132]	; 0x84
 8011f04:	f300 85f5 	bgt.w	8012af2 <_vfprintf_r+0x1782>
 8011f08:	f108 0808 	add.w	r8, r8, #8
 8011f0c:	2d00      	cmp	r5, #0
 8011f0e:	bfa8      	it	ge
 8011f10:	1b64      	subge	r4, r4, r5
 8011f12:	2c00      	cmp	r4, #0
 8011f14:	f77f abda 	ble.w	80116cc <_vfprintf_r+0x35c>
 8011f18:	2c10      	cmp	r4, #16
 8011f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f1c:	f340 82d9 	ble.w	80124d2 <_vfprintf_r+0x1162>
 8011f20:	ee1b 6a10 	vmov	r6, s22
 8011f24:	2510      	movs	r5, #16
 8011f26:	e005      	b.n	8011f34 <_vfprintf_r+0xbc4>
 8011f28:	f108 0808 	add.w	r8, r8, #8
 8011f2c:	3c10      	subs	r4, #16
 8011f2e:	2c10      	cmp	r4, #16
 8011f30:	f340 82cf 	ble.w	80124d2 <_vfprintf_r+0x1162>
 8011f34:	3301      	adds	r3, #1
 8011f36:	498a      	ldr	r1, [pc, #552]	; (8012160 <_vfprintf_r+0xdf0>)
 8011f38:	3210      	adds	r2, #16
 8011f3a:	2b07      	cmp	r3, #7
 8011f3c:	e9c8 1500 	strd	r1, r5, [r8]
 8011f40:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011f44:	ddf0      	ble.n	8011f28 <_vfprintf_r+0xbb8>
 8011f46:	aa20      	add	r2, sp, #128	; 0x80
 8011f48:	4651      	mov	r1, sl
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f003 fb08 	bl	8015560 <__sprint_r>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	f47f ae7a 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011f56:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011f5a:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011f5e:	e7e5      	b.n	8011f2c <_vfprintf_r+0xbbc>
 8011f60:	9b03      	ldr	r3, [sp, #12]
 8011f62:	07de      	lsls	r6, r3, #31
 8011f64:	f53f ae8d 	bmi.w	8011c82 <_vfprintf_r+0x912>
 8011f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f6a:	f8c8 5000 	str.w	r5, [r8]
 8011f6e:	3301      	adds	r3, #1
 8011f70:	3201      	adds	r2, #1
 8011f72:	2101      	movs	r1, #1
 8011f74:	2b07      	cmp	r3, #7
 8011f76:	9222      	str	r2, [sp, #136]	; 0x88
 8011f78:	9321      	str	r3, [sp, #132]	; 0x84
 8011f7a:	f8c8 1004 	str.w	r1, [r8, #4]
 8011f7e:	f77f aeb0 	ble.w	8011ce2 <_vfprintf_r+0x972>
 8011f82:	ee1b 0a10 	vmov	r0, s22
 8011f86:	aa20      	add	r2, sp, #128	; 0x80
 8011f88:	4651      	mov	r1, sl
 8011f8a:	f003 fae9 	bl	8015560 <__sprint_r>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f47f ae5b 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011f94:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011f98:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011f9c:	e6a3      	b.n	8011ce6 <_vfprintf_r+0x976>
 8011f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011fa0:	1e4c      	subs	r4, r1, #1
 8011fa2:	2c00      	cmp	r4, #0
 8011fa4:	f77f ae9f 	ble.w	8011ce6 <_vfprintf_r+0x976>
 8011fa8:	2c10      	cmp	r4, #16
 8011faa:	f340 8311 	ble.w	80125d0 <_vfprintf_r+0x1260>
 8011fae:	ee1b 6a10 	vmov	r6, s22
 8011fb2:	2510      	movs	r5, #16
 8011fb4:	e005      	b.n	8011fc2 <_vfprintf_r+0xc52>
 8011fb6:	f108 0808 	add.w	r8, r8, #8
 8011fba:	3c10      	subs	r4, #16
 8011fbc:	2c10      	cmp	r4, #16
 8011fbe:	f340 8307 	ble.w	80125d0 <_vfprintf_r+0x1260>
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	4966      	ldr	r1, [pc, #408]	; (8012160 <_vfprintf_r+0xdf0>)
 8011fc6:	3210      	adds	r2, #16
 8011fc8:	2b07      	cmp	r3, #7
 8011fca:	e9c8 1500 	strd	r1, r5, [r8]
 8011fce:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8011fd2:	ddf0      	ble.n	8011fb6 <_vfprintf_r+0xc46>
 8011fd4:	aa20      	add	r2, sp, #128	; 0x80
 8011fd6:	4651      	mov	r1, sl
 8011fd8:	4630      	mov	r0, r6
 8011fda:	f003 fac1 	bl	8015560 <__sprint_r>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f47f ae33 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8011fe4:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8011fe8:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8011fec:	e7e5      	b.n	8011fba <_vfprintf_r+0xc4a>
 8011fee:	ee1b 0a10 	vmov	r0, s22
 8011ff2:	aa20      	add	r2, sp, #128	; 0x80
 8011ff4:	4651      	mov	r1, sl
 8011ff6:	f003 fab3 	bl	8015560 <__sprint_r>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	f47f ae25 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012000:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012002:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012006:	f7ff bb4f 	b.w	80116a8 <_vfprintf_r+0x338>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	f013 0310 	ands.w	r3, r3, #16
 8012010:	f040 80a0 	bne.w	8012154 <_vfprintf_r+0xde4>
 8012014:	9a03      	ldr	r2, [sp, #12]
 8012016:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 801201a:	f000 8304 	beq.w	8012626 <_vfprintf_r+0x12b6>
 801201e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012020:	f852 4b04 	ldr.w	r4, [r2], #4
 8012024:	9209      	str	r2, [sp, #36]	; 0x24
 8012026:	461e      	mov	r6, r3
 8012028:	b2a4      	uxth	r4, r4
 801202a:	e421      	b.n	8011870 <_vfprintf_r+0x500>
 801202c:	f019 0310 	ands.w	r3, r9, #16
 8012030:	f040 8089 	bne.w	8012146 <_vfprintf_r+0xdd6>
 8012034:	f019 0240 	ands.w	r2, r9, #64	; 0x40
 8012038:	f000 82e6 	beq.w	8012608 <_vfprintf_r+0x1298>
 801203c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801203e:	f852 4b04 	ldr.w	r4, [r2], #4
 8012042:	9209      	str	r2, [sp, #36]	; 0x24
 8012044:	461e      	mov	r6, r3
 8012046:	b2a4      	uxth	r4, r4
 8012048:	2301      	movs	r3, #1
 801204a:	e415      	b.n	8011878 <_vfprintf_r+0x508>
 801204c:	9b03      	ldr	r3, [sp, #12]
 801204e:	06d8      	lsls	r0, r3, #27
 8012050:	d471      	bmi.n	8012136 <_vfprintf_r+0xdc6>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	0659      	lsls	r1, r3, #25
 8012056:	f140 82c8 	bpl.w	80125ea <_vfprintf_r+0x127a>
 801205a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205c:	f853 4b04 	ldr.w	r4, [r3], #4
 8012060:	9309      	str	r3, [sp, #36]	; 0x24
 8012062:	f344 36c0 	sbfx	r6, r4, #15, #1
 8012066:	4633      	mov	r3, r6
 8012068:	b224      	sxth	r4, r4
 801206a:	f7ff bba8 	b.w	80117be <_vfprintf_r+0x44e>
 801206e:	232d      	movs	r3, #45	; 0x2d
 8012070:	4264      	negs	r4, r4
 8012072:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 8012076:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801207a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 801207e:	2301      	movs	r3, #1
 8012080:	f7ff bbfd 	b.w	801187e <_vfprintf_r+0x50e>
 8012084:	9b03      	ldr	r3, [sp, #12]
 8012086:	07d8      	lsls	r0, r3, #31
 8012088:	f57f ab20 	bpl.w	80116cc <_vfprintf_r+0x35c>
 801208c:	e517      	b.n	8011abe <_vfprintf_r+0x74e>
 801208e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012090:	f002 fae0 	bl	8014654 <__retarget_lock_acquire_recursive>
 8012094:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012098:	b291      	uxth	r1, r2
 801209a:	f7ff b98b 	b.w	80113b4 <_vfprintf_r+0x44>
 801209e:	f89b 7000 	ldrb.w	r7, [fp]
 80120a2:	9309      	str	r3, [sp, #36]	; 0x24
 80120a4:	f7ff b9d3 	b.w	801144e <_vfprintf_r+0xde>
 80120a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120aa:	482e      	ldr	r0, [pc, #184]	; (8012164 <_vfprintf_r+0xdf4>)
 80120ac:	f8c8 0000 	str.w	r0, [r8]
 80120b0:	3301      	adds	r3, #1
 80120b2:	3201      	adds	r2, #1
 80120b4:	2001      	movs	r0, #1
 80120b6:	2b07      	cmp	r3, #7
 80120b8:	9222      	str	r2, [sp, #136]	; 0x88
 80120ba:	9321      	str	r3, [sp, #132]	; 0x84
 80120bc:	f8c8 0004 	str.w	r0, [r8, #4]
 80120c0:	f300 8482 	bgt.w	80129c8 <_vfprintf_r+0x1658>
 80120c4:	f108 0808 	add.w	r8, r8, #8
 80120c8:	2900      	cmp	r1, #0
 80120ca:	f040 8262 	bne.w	8012592 <_vfprintf_r+0x1222>
 80120ce:	9b03      	ldr	r3, [sp, #12]
 80120d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80120d2:	f003 0301 	and.w	r3, r3, #1
 80120d6:	430b      	orrs	r3, r1
 80120d8:	f43f aaf8 	beq.w	80116cc <_vfprintf_r+0x35c>
 80120dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80120e0:	441a      	add	r2, r3
 80120e2:	e9c8 1300 	strd	r1, r3, [r8]
 80120e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120e8:	9222      	str	r2, [sp, #136]	; 0x88
 80120ea:	3301      	adds	r3, #1
 80120ec:	2b07      	cmp	r3, #7
 80120ee:	9321      	str	r3, [sp, #132]	; 0x84
 80120f0:	f300 8370 	bgt.w	80127d4 <_vfprintf_r+0x1464>
 80120f4:	f108 0808 	add.w	r8, r8, #8
 80120f8:	e25c      	b.n	80125b4 <_vfprintf_r+0x1244>
 80120fa:	ad4c      	add	r5, sp, #304	; 0x130
 80120fc:	e497      	b.n	8011a2e <_vfprintf_r+0x6be>
 80120fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012100:	2b00      	cmp	r3, #0
 8012102:	f43f aa2b 	beq.w	801155c <_vfprintf_r+0x1ec>
 8012106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f43f aa26 	beq.w	801155c <_vfprintf_r+0x1ec>
 8012110:	9b03      	ldr	r3, [sp, #12]
 8012112:	f89b 7000 	ldrb.w	r7, [fp]
 8012116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801211a:	9303      	str	r3, [sp, #12]
 801211c:	f7ff b997 	b.w	801144e <_vfprintf_r+0xde>
 8012120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012122:	9807      	ldr	r0, [sp, #28]
 8012124:	f853 1b04 	ldr.w	r1, [r3], #4
 8012128:	9309      	str	r3, [sp, #36]	; 0x24
 801212a:	17c2      	asrs	r2, r0, #31
 801212c:	e9c1 0200 	strd	r0, r2, [r1]
 8012130:	465d      	mov	r5, fp
 8012132:	f7ff baeb 	b.w	801170c <_vfprintf_r+0x39c>
 8012136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012138:	f853 4b04 	ldr.w	r4, [r3], #4
 801213c:	9309      	str	r3, [sp, #36]	; 0x24
 801213e:	17e6      	asrs	r6, r4, #31
 8012140:	4633      	mov	r3, r6
 8012142:	f7ff bb3c 	b.w	80117be <_vfprintf_r+0x44e>
 8012146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012148:	f853 4b04 	ldr.w	r4, [r3], #4
 801214c:	9309      	str	r3, [sp, #36]	; 0x24
 801214e:	2301      	movs	r3, #1
 8012150:	f7ff bb92 	b.w	8011878 <_vfprintf_r+0x508>
 8012154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012156:	f853 4b04 	ldr.w	r4, [r3], #4
 801215a:	9309      	str	r3, [sp, #36]	; 0x24
 801215c:	f7ff bb88 	b.w	8011870 <_vfprintf_r+0x500>
 8012160:	24008e7c 	.word	0x24008e7c
 8012164:	24008e68 	.word	0x24008e68
 8012168:	24008e6c 	.word	0x24008e6c
 801216c:	eeb4 8b48 	vcmp.f64	d8, d8
 8012170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012174:	f180 85d4 	bvs.w	8012d20 <_vfprintf_r+0x19b0>
 8012178:	2f61      	cmp	r7, #97	; 0x61
 801217a:	f000 8524 	beq.w	8012bc6 <_vfprintf_r+0x1856>
 801217e:	2f41      	cmp	r7, #65	; 0x41
 8012180:	f000 82b3 	beq.w	80126ea <_vfprintf_r+0x137a>
 8012184:	9b05      	ldr	r3, [sp, #20]
 8012186:	1c5a      	adds	r2, r3, #1
 8012188:	f027 0420 	bic.w	r4, r7, #32
 801218c:	f000 8575 	beq.w	8012c7a <_vfprintf_r+0x190a>
 8012190:	2c47      	cmp	r4, #71	; 0x47
 8012192:	f000 855f 	beq.w	8012c54 <_vfprintf_r+0x18e4>
 8012196:	9b03      	ldr	r3, [sp, #12]
 8012198:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 801219c:	ee18 3a90 	vmov	r3, s17
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f2c0 8554 	blt.w	8012c4e <_vfprintf_r+0x18de>
 80121a6:	eeb0 ab48 	vmov.f64	d10, d8
 80121aa:	f04f 0900 	mov.w	r9, #0
 80121ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80121b2:	2c46      	cmp	r4, #70	; 0x46
 80121b4:	f000 8434 	beq.w	8012a20 <_vfprintf_r+0x16b0>
 80121b8:	2c45      	cmp	r4, #69	; 0x45
 80121ba:	f000 8509 	beq.w	8012bd0 <_vfprintf_r+0x1860>
 80121be:	eeb0 0b4a 	vmov.f64	d0, d10
 80121c2:	ab1e      	add	r3, sp, #120	; 0x78
 80121c4:	9301      	str	r3, [sp, #4]
 80121c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	9a05      	ldr	r2, [sp, #20]
 80121cc:	ee1b 0a10 	vmov	r0, s22
 80121d0:	ab1a      	add	r3, sp, #104	; 0x68
 80121d2:	2102      	movs	r1, #2
 80121d4:	f000 ff64 	bl	80130a0 <_dtoa_r>
 80121d8:	2c47      	cmp	r4, #71	; 0x47
 80121da:	4605      	mov	r5, r0
 80121dc:	f040 85fc 	bne.w	8012dd8 <_vfprintf_r+0x1a68>
 80121e0:	9803      	ldr	r0, [sp, #12]
 80121e2:	07c3      	lsls	r3, r0, #31
 80121e4:	f100 84ad 	bmi.w	8012b42 <_vfprintf_r+0x17d2>
 80121e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80121ea:	9603      	str	r6, [sp, #12]
 80121ec:	1b5b      	subs	r3, r3, r5
 80121ee:	930e      	str	r3, [sp, #56]	; 0x38
 80121f0:	2c47      	cmp	r4, #71	; 0x47
 80121f2:	f000 8311 	beq.w	8012818 <_vfprintf_r+0x14a8>
 80121f6:	2c46      	cmp	r4, #70	; 0x46
 80121f8:	f000 845b 	beq.w	8012ab2 <_vfprintf_r+0x1742>
 80121fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80121fe:	930d      	str	r3, [sp, #52]	; 0x34
 8012200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012202:	2c41      	cmp	r4, #65	; 0x41
 8012204:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012208:	931a      	str	r3, [sp, #104]	; 0x68
 801220a:	f000 853c 	beq.w	8012c86 <_vfprintf_r+0x1916>
 801220e:	b2fa      	uxtb	r2, r7
 8012210:	2100      	movs	r1, #0
 8012212:	2b00      	cmp	r3, #0
 8012214:	bfb8      	it	lt
 8012216:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012218:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 801221c:	bfba      	itte	lt
 801221e:	f1c3 0301 	rsblt	r3, r3, #1
 8012222:	222d      	movlt	r2, #45	; 0x2d
 8012224:	222b      	movge	r2, #43	; 0x2b
 8012226:	2b09      	cmp	r3, #9
 8012228:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 801222c:	f340 8531 	ble.w	8012c92 <_vfprintf_r+0x1922>
 8012230:	f10d 0c7f 	add.w	ip, sp, #127	; 0x7f
 8012234:	4ec4      	ldr	r6, [pc, #784]	; (8012548 <_vfprintf_r+0x11d8>)
 8012236:	4662      	mov	r2, ip
 8012238:	4614      	mov	r4, r2
 801223a:	fb86 2103 	smull	r2, r1, r6, r3
 801223e:	17da      	asrs	r2, r3, #31
 8012240:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8012244:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8012248:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 801224c:	3130      	adds	r1, #48	; 0x30
 801224e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012252:	4619      	mov	r1, r3
 8012254:	2963      	cmp	r1, #99	; 0x63
 8012256:	4613      	mov	r3, r2
 8012258:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 801225c:	dcec      	bgt.n	8012238 <_vfprintf_r+0xec8>
 801225e:	3330      	adds	r3, #48	; 0x30
 8012260:	1ea1      	subs	r1, r4, #2
 8012262:	b2db      	uxtb	r3, r3
 8012264:	458c      	cmp	ip, r1
 8012266:	f802 3c01 	strb.w	r3, [r2, #-1]
 801226a:	f240 85b7 	bls.w	8012ddc <_vfprintf_r+0x1a6c>
 801226e:	f10d 0172 	add.w	r1, sp, #114	; 0x72
 8012272:	e001      	b.n	8012278 <_vfprintf_r+0xf08>
 8012274:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012278:	f801 3b01 	strb.w	r3, [r1], #1
 801227c:	4594      	cmp	ip, r2
 801227e:	d1f9      	bne.n	8012274 <_vfprintf_r+0xf04>
 8012280:	f10d 0381 	add.w	r3, sp, #129	; 0x81
 8012284:	f10d 0272 	add.w	r2, sp, #114	; 0x72
 8012288:	1b1b      	subs	r3, r3, r4
 801228a:	4413      	add	r3, r2
 801228c:	aa1c      	add	r2, sp, #112	; 0x70
 801228e:	1a9b      	subs	r3, r3, r2
 8012290:	9314      	str	r3, [sp, #80]	; 0x50
 8012292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012296:	2b01      	cmp	r3, #1
 8012298:	eb03 0602 	add.w	r6, r3, r2
 801229c:	f340 8563 	ble.w	8012d66 <_vfprintf_r+0x19f6>
 80122a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122a2:	441e      	add	r6, r3
 80122a4:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80122a8:	f440 7380 	orr.w	r3, r0, #256	; 0x100
 80122ac:	9303      	str	r3, [sp, #12]
 80122ae:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 80122b2:	2300      	movs	r3, #0
 80122b4:	930c      	str	r3, [sp, #48]	; 0x30
 80122b6:	9204      	str	r2, [sp, #16]
 80122b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80122ba:	930d      	str	r3, [sp, #52]	; 0x34
 80122bc:	f1b9 0f00 	cmp.w	r9, #0
 80122c0:	f040 82b5 	bne.w	801282e <_vfprintf_r+0x14be>
 80122c4:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 80122c8:	f8cd 9014 	str.w	r9, [sp, #20]
 80122cc:	f7ff ba53 	b.w	8011776 <_vfprintf_r+0x406>
 80122d0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80122d4:	f7ff bb66 	b.w	80119a4 <_vfprintf_r+0x634>
 80122d8:	4b9c      	ldr	r3, [pc, #624]	; (801254c <_vfprintf_r+0x11dc>)
 80122da:	9312      	str	r3, [sp, #72]	; 0x48
 80122dc:	9b03      	ldr	r3, [sp, #12]
 80122de:	f013 0620 	ands.w	r6, r3, #32
 80122e2:	d05c      	beq.n	801239e <_vfprintf_r+0x102e>
 80122e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e6:	3307      	adds	r3, #7
 80122e8:	f023 0307 	bic.w	r3, r3, #7
 80122ec:	685e      	ldr	r6, [r3, #4]
 80122ee:	f853 4b08 	ldr.w	r4, [r3], #8
 80122f2:	9309      	str	r3, [sp, #36]	; 0x24
 80122f4:	9b03      	ldr	r3, [sp, #12]
 80122f6:	07da      	lsls	r2, r3, #31
 80122f8:	d50a      	bpl.n	8012310 <_vfprintf_r+0xfa0>
 80122fa:	ea54 0206 	orrs.w	r2, r4, r6
 80122fe:	d007      	beq.n	8012310 <_vfprintf_r+0xfa0>
 8012300:	f043 0302 	orr.w	r3, r3, #2
 8012304:	9303      	str	r3, [sp, #12]
 8012306:	2330      	movs	r3, #48	; 0x30
 8012308:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 801230c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012310:	9b03      	ldr	r3, [sp, #12]
 8012312:	f423 6980 	bic.w	r9, r3, #1024	; 0x400
 8012316:	2302      	movs	r3, #2
 8012318:	f7ff baae 	b.w	8011878 <_vfprintf_r+0x508>
 801231c:	4b8c      	ldr	r3, [pc, #560]	; (8012550 <_vfprintf_r+0x11e0>)
 801231e:	9312      	str	r3, [sp, #72]	; 0x48
 8012320:	e7dc      	b.n	80122dc <_vfprintf_r+0xf6c>
 8012322:	ee1b 0a10 	vmov	r0, s22
 8012326:	aa20      	add	r2, sp, #128	; 0x80
 8012328:	4651      	mov	r1, sl
 801232a:	f003 f919 	bl	8015560 <__sprint_r>
 801232e:	2800      	cmp	r0, #0
 8012330:	f47f ac8b 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012334:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012336:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 801233a:	f7ff b9b0 	b.w	801169e <_vfprintf_r+0x32e>
 801233e:	ee1b 0a10 	vmov	r0, s22
 8012342:	aa20      	add	r2, sp, #128	; 0x80
 8012344:	4651      	mov	r1, sl
 8012346:	f003 f90b 	bl	8015560 <__sprint_r>
 801234a:	2800      	cmp	r0, #0
 801234c:	f47f ac7d 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012350:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012352:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012356:	f7ff bbc0 	b.w	8011ada <_vfprintf_r+0x76a>
 801235a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801235e:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8012362:	9303      	str	r3, [sp, #12]
 8012364:	f10b 0b01 	add.w	fp, fp, #1
 8012368:	f7ff b871 	b.w	801144e <_vfprintf_r+0xde>
 801236c:	f043 0320 	orr.w	r3, r3, #32
 8012370:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8012374:	9303      	str	r3, [sp, #12]
 8012376:	f10b 0b01 	add.w	fp, fp, #1
 801237a:	f7ff b868 	b.w	801144e <_vfprintf_r+0xde>
 801237e:	9e05      	ldr	r6, [sp, #20]
 8012380:	9508      	str	r5, [sp, #32]
 8012382:	2e06      	cmp	r6, #6
 8012384:	462b      	mov	r3, r5
 8012386:	bf28      	it	cs
 8012388:	2606      	movcs	r6, #6
 801238a:	9505      	str	r5, [sp, #20]
 801238c:	4629      	mov	r1, r5
 801238e:	9604      	str	r6, [sp, #16]
 8012390:	4d70      	ldr	r5, [pc, #448]	; (8012554 <_vfprintf_r+0x11e4>)
 8012392:	9409      	str	r4, [sp, #36]	; 0x24
 8012394:	930c      	str	r3, [sp, #48]	; 0x30
 8012396:	930f      	str	r3, [sp, #60]	; 0x3c
 8012398:	930d      	str	r3, [sp, #52]	; 0x34
 801239a:	f7ff b9ec 	b.w	8011776 <_vfprintf_r+0x406>
 801239e:	9b03      	ldr	r3, [sp, #12]
 80123a0:	f013 0310 	ands.w	r3, r3, #16
 80123a4:	d07b      	beq.n	801249e <_vfprintf_r+0x112e>
 80123a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123a8:	f853 4b04 	ldr.w	r4, [r3], #4
 80123ac:	9309      	str	r3, [sp, #36]	; 0x24
 80123ae:	e7a1      	b.n	80122f4 <_vfprintf_r+0xf84>
 80123b0:	ee1b 0a10 	vmov	r0, s22
 80123b4:	aa20      	add	r2, sp, #128	; 0x80
 80123b6:	4651      	mov	r1, sl
 80123b8:	f003 f8d2 	bl	8015560 <__sprint_r>
 80123bc:	2800      	cmp	r0, #0
 80123be:	f47f ac44 	bne.w	8011c4a <_vfprintf_r+0x8da>
 80123c2:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 80123c6:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80123ca:	e469      	b.n	8011ca0 <_vfprintf_r+0x930>
 80123cc:	ee1b 0a10 	vmov	r0, s22
 80123d0:	aa20      	add	r2, sp, #128	; 0x80
 80123d2:	4651      	mov	r1, sl
 80123d4:	f003 f8c4 	bl	8015560 <__sprint_r>
 80123d8:	2800      	cmp	r0, #0
 80123da:	f47f ac36 	bne.w	8011c4a <_vfprintf_r+0x8da>
 80123de:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 80123e2:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80123e6:	e468      	b.n	8011cba <_vfprintf_r+0x94a>
 80123e8:	f409 6380 	and.w	r3, r9, #1024	; 0x400
 80123ec:	2200      	movs	r2, #0
 80123ee:	a94c      	add	r1, sp, #304	; 0x130
 80123f0:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 80123f4:	ee0a aa10 	vmov	s20, sl
 80123f8:	f8cd 8020 	str.w	r8, [sp, #32]
 80123fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8012400:	460f      	mov	r7, r1
 8012402:	4693      	mov	fp, r2
 8012404:	4698      	mov	r8, r3
 8012406:	e00c      	b.n	8012422 <_vfprintf_r+0x10b2>
 8012408:	2300      	movs	r3, #0
 801240a:	4620      	mov	r0, r4
 801240c:	4631      	mov	r1, r6
 801240e:	220a      	movs	r2, #10
 8012410:	f7f6 fcf6 	bl	8008e00 <__aeabi_uldivmod>
 8012414:	2c0a      	cmp	r4, #10
 8012416:	f176 0300 	sbcs.w	r3, r6, #0
 801241a:	d31d      	bcc.n	8012458 <_vfprintf_r+0x10e8>
 801241c:	4604      	mov	r4, r0
 801241e:	460e      	mov	r6, r1
 8012420:	462f      	mov	r7, r5
 8012422:	4620      	mov	r0, r4
 8012424:	220a      	movs	r2, #10
 8012426:	2300      	movs	r3, #0
 8012428:	4631      	mov	r1, r6
 801242a:	f7f6 fce9 	bl	8008e00 <__aeabi_uldivmod>
 801242e:	3230      	adds	r2, #48	; 0x30
 8012430:	1e7d      	subs	r5, r7, #1
 8012432:	f10b 0b01 	add.w	fp, fp, #1
 8012436:	f807 2c01 	strb.w	r2, [r7, #-1]
 801243a:	f1b8 0f00 	cmp.w	r8, #0
 801243e:	d0e3      	beq.n	8012408 <_vfprintf_r+0x1098>
 8012440:	f89a 3000 	ldrb.w	r3, [sl]
 8012444:	459b      	cmp	fp, r3
 8012446:	d1df      	bne.n	8012408 <_vfprintf_r+0x1098>
 8012448:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801244c:	d0dc      	beq.n	8012408 <_vfprintf_r+0x1098>
 801244e:	2c0a      	cmp	r4, #10
 8012450:	f176 0300 	sbcs.w	r3, r6, #0
 8012454:	f080 8118 	bcs.w	8012688 <_vfprintf_r+0x1318>
 8012458:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 801245c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012460:	9f03      	ldr	r7, [sp, #12]
 8012462:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012466:	f8dd b010 	ldr.w	fp, [sp, #16]
 801246a:	ee1a aa10 	vmov	sl, s20
 801246e:	f7ff bada 	b.w	8011a26 <_vfprintf_r+0x6b6>
 8012472:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012474:	f002 f8f0 	bl	8014658 <__retarget_lock_release_recursive>
 8012478:	89bb      	ldrh	r3, [r7, #12]
 801247a:	f7ff bbf5 	b.w	8011c68 <_vfprintf_r+0x8f8>
 801247e:	ee1b 0a10 	vmov	r0, s22
 8012482:	aa20      	add	r2, sp, #128	; 0x80
 8012484:	4651      	mov	r1, sl
 8012486:	f003 f86b 	bl	8015560 <__sprint_r>
 801248a:	2800      	cmp	r0, #0
 801248c:	f47f abdd 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012490:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8012494:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012496:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 801249a:	f7ff b8d6 	b.w	801164a <_vfprintf_r+0x2da>
 801249e:	9a03      	ldr	r2, [sp, #12]
 80124a0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80124a4:	f000 80ce 	beq.w	8012644 <_vfprintf_r+0x12d4>
 80124a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124aa:	f852 4b04 	ldr.w	r4, [r2], #4
 80124ae:	9209      	str	r2, [sp, #36]	; 0x24
 80124b0:	461e      	mov	r6, r3
 80124b2:	b2a4      	uxth	r4, r4
 80124b4:	e71e      	b.n	80122f4 <_vfprintf_r+0xf84>
 80124b6:	ee1b 0a10 	vmov	r0, s22
 80124ba:	aa20      	add	r2, sp, #128	; 0x80
 80124bc:	4651      	mov	r1, sl
 80124be:	f003 f84f 	bl	8015560 <__sprint_r>
 80124c2:	2800      	cmp	r0, #0
 80124c4:	f47f abc1 	bne.w	8011c4a <_vfprintf_r+0x8da>
 80124c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80124ca:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80124ce:	f7ff baf1 	b.w	8011ab4 <_vfprintf_r+0x744>
 80124d2:	3301      	adds	r3, #1
 80124d4:	4920      	ldr	r1, [pc, #128]	; (8012558 <_vfprintf_r+0x11e8>)
 80124d6:	f8c8 4004 	str.w	r4, [r8, #4]
 80124da:	4422      	add	r2, r4
 80124dc:	2b07      	cmp	r3, #7
 80124de:	f8c8 1000 	str.w	r1, [r8]
 80124e2:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 80124e6:	f77f a8ef 	ble.w	80116c8 <_vfprintf_r+0x358>
 80124ea:	e409      	b.n	8011d00 <_vfprintf_r+0x990>
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80124f2:	f47f aa88 	bne.w	8011a06 <_vfprintf_r+0x696>
 80124f6:	e458      	b.n	8011daa <_vfprintf_r+0xa3a>
 80124f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124fa:	9907      	ldr	r1, [sp, #28]
 80124fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012500:	465d      	mov	r5, fp
 8012502:	6011      	str	r1, [r2, #0]
 8012504:	9309      	str	r3, [sp, #36]	; 0x24
 8012506:	f7ff b901 	b.w	801170c <_vfprintf_r+0x39c>
 801250a:	4628      	mov	r0, r5
 801250c:	9605      	str	r6, [sp, #20]
 801250e:	9409      	str	r4, [sp, #36]	; 0x24
 8012510:	f7f6 fbb6 	bl	8008c80 <strlen>
 8012514:	46b1      	mov	r9, r6
 8012516:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 801251a:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 801251e:	9204      	str	r2, [sp, #16]
 8012520:	4606      	mov	r6, r0
 8012522:	f8cd 9020 	str.w	r9, [sp, #32]
 8012526:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801252a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801252e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8012532:	f7ff b920 	b.w	8011776 <_vfprintf_r+0x406>
 8012536:	2c10      	cmp	r4, #16
 8012538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801253a:	f340 8091 	ble.w	8012660 <_vfprintf_r+0x12f0>
 801253e:	ee1b 7a10 	vmov	r7, s22
 8012542:	2610      	movs	r6, #16
 8012544:	e00f      	b.n	8012566 <_vfprintf_r+0x11f6>
 8012546:	bf00      	nop
 8012548:	66666667 	.word	0x66666667
 801254c:	24008e38 	.word	0x24008e38
 8012550:	24008e4c 	.word	0x24008e4c
 8012554:	24008e60 	.word	0x24008e60
 8012558:	24008e7c 	.word	0x24008e7c
 801255c:	f108 0808 	add.w	r8, r8, #8
 8012560:	3c10      	subs	r4, #16
 8012562:	2c10      	cmp	r4, #16
 8012564:	dd7c      	ble.n	8012660 <_vfprintf_r+0x12f0>
 8012566:	3301      	adds	r3, #1
 8012568:	49b4      	ldr	r1, [pc, #720]	; (801283c <_vfprintf_r+0x14cc>)
 801256a:	3210      	adds	r2, #16
 801256c:	2b07      	cmp	r3, #7
 801256e:	e9c8 1600 	strd	r1, r6, [r8]
 8012572:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8012576:	ddf1      	ble.n	801255c <_vfprintf_r+0x11ec>
 8012578:	aa20      	add	r2, sp, #128	; 0x80
 801257a:	4651      	mov	r1, sl
 801257c:	4638      	mov	r0, r7
 801257e:	f002 ffef 	bl	8015560 <__sprint_r>
 8012582:	2800      	cmp	r0, #0
 8012584:	f47f ab61 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012588:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 801258c:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012590:	e7e6      	b.n	8012560 <_vfprintf_r+0x11f0>
 8012592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012594:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012596:	441a      	add	r2, r3
 8012598:	e9c8 0300 	strd	r0, r3, [r8]
 801259c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801259e:	9222      	str	r2, [sp, #136]	; 0x88
 80125a0:	3301      	adds	r3, #1
 80125a2:	2b07      	cmp	r3, #7
 80125a4:	9321      	str	r3, [sp, #132]	; 0x84
 80125a6:	f300 8115 	bgt.w	80127d4 <_vfprintf_r+0x1464>
 80125aa:	f108 0808 	add.w	r8, r8, #8
 80125ae:	2900      	cmp	r1, #0
 80125b0:	f2c0 82cd 	blt.w	8012b4e <_vfprintf_r+0x17de>
 80125b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80125b6:	f8c8 5000 	str.w	r5, [r8]
 80125ba:	3301      	adds	r3, #1
 80125bc:	440a      	add	r2, r1
 80125be:	2b07      	cmp	r3, #7
 80125c0:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 80125c4:	f8c8 1004 	str.w	r1, [r8, #4]
 80125c8:	f77f a87e 	ble.w	80116c8 <_vfprintf_r+0x358>
 80125cc:	f7ff bb98 	b.w	8011d00 <_vfprintf_r+0x990>
 80125d0:	3301      	adds	r3, #1
 80125d2:	499a      	ldr	r1, [pc, #616]	; (801283c <_vfprintf_r+0x14cc>)
 80125d4:	f8c8 4004 	str.w	r4, [r8, #4]
 80125d8:	4422      	add	r2, r4
 80125da:	2b07      	cmp	r3, #7
 80125dc:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 80125e0:	f8c8 1000 	str.w	r1, [r8]
 80125e4:	f77f ab7d 	ble.w	8011ce2 <_vfprintf_r+0x972>
 80125e8:	e4cb      	b.n	8011f82 <_vfprintf_r+0xc12>
 80125ea:	9b03      	ldr	r3, [sp, #12]
 80125ec:	f413 7f00 	tst.w	r3, #512	; 0x200
 80125f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f2:	f853 4b04 	ldr.w	r4, [r3], #4
 80125f6:	9309      	str	r3, [sp, #36]	; 0x24
 80125f8:	bf16      	itet	ne
 80125fa:	f344 16c0 	sbfxne	r6, r4, #7, #1
 80125fe:	17e6      	asreq	r6, r4, #31
 8012600:	b264      	sxtbne	r4, r4
 8012602:	4633      	mov	r3, r6
 8012604:	f7ff b8db 	b.w	80117be <_vfprintf_r+0x44e>
 8012608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801260a:	f419 7600 	ands.w	r6, r9, #512	; 0x200
 801260e:	bf14      	ite	ne
 8012610:	f853 4b04 	ldrne.w	r4, [r3], #4
 8012614:	f853 4b04 	ldreq.w	r4, [r3], #4
 8012618:	9309      	str	r3, [sp, #36]	; 0x24
 801261a:	bf1c      	itt	ne
 801261c:	4616      	movne	r6, r2
 801261e:	b2e4      	uxtbne	r4, r4
 8012620:	2301      	movs	r3, #1
 8012622:	f7ff b929 	b.w	8011878 <_vfprintf_r+0x508>
 8012626:	9b03      	ldr	r3, [sp, #12]
 8012628:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 801262c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801262e:	bf14      	ite	ne
 8012630:	f853 4b04 	ldrne.w	r4, [r3], #4
 8012634:	f853 4b04 	ldreq.w	r4, [r3], #4
 8012638:	9309      	str	r3, [sp, #36]	; 0x24
 801263a:	bf1c      	itt	ne
 801263c:	4616      	movne	r6, r2
 801263e:	b2e4      	uxtbne	r4, r4
 8012640:	f7ff b916 	b.w	8011870 <_vfprintf_r+0x500>
 8012644:	9b03      	ldr	r3, [sp, #12]
 8012646:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 801264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801264c:	bf14      	ite	ne
 801264e:	f853 4b04 	ldrne.w	r4, [r3], #4
 8012652:	f853 4b04 	ldreq.w	r4, [r3], #4
 8012656:	9309      	str	r3, [sp, #36]	; 0x24
 8012658:	bf1c      	itt	ne
 801265a:	4616      	movne	r6, r2
 801265c:	b2e4      	uxtbne	r4, r4
 801265e:	e649      	b.n	80122f4 <_vfprintf_r+0xf84>
 8012660:	3301      	adds	r3, #1
 8012662:	4976      	ldr	r1, [pc, #472]	; (801283c <_vfprintf_r+0x14cc>)
 8012664:	f8c8 4004 	str.w	r4, [r8, #4]
 8012668:	4422      	add	r2, r4
 801266a:	2b07      	cmp	r3, #7
 801266c:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8012670:	f8c8 1000 	str.w	r1, [r8]
 8012674:	f300 80c2 	bgt.w	80127fc <_vfprintf_r+0x148c>
 8012678:	f108 0808 	add.w	r8, r8, #8
 801267c:	e413      	b.n	8011ea6 <_vfprintf_r+0xb36>
 801267e:	212d      	movs	r1, #45	; 0x2d
 8012680:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
 8012684:	f7ff b865 	b.w	8011752 <_vfprintf_r+0x3e2>
 8012688:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801268a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801268c:	1aed      	subs	r5, r5, r3
 801268e:	461a      	mov	r2, r3
 8012690:	4628      	mov	r0, r5
 8012692:	f002 fef7 	bl	8015484 <strncpy>
 8012696:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801269a:	b10b      	cbz	r3, 80126a0 <_vfprintf_r+0x1330>
 801269c:	f10a 0a01 	add.w	sl, sl, #1
 80126a0:	4620      	mov	r0, r4
 80126a2:	4631      	mov	r1, r6
 80126a4:	220a      	movs	r2, #10
 80126a6:	2300      	movs	r3, #0
 80126a8:	f04f 0b00 	mov.w	fp, #0
 80126ac:	f7f6 fba8 	bl	8008e00 <__aeabi_uldivmod>
 80126b0:	e6b4      	b.n	801241c <_vfprintf_r+0x10ac>
 80126b2:	ee1b 0a10 	vmov	r0, s22
 80126b6:	aa20      	add	r2, sp, #128	; 0x80
 80126b8:	4651      	mov	r1, sl
 80126ba:	f002 ff51 	bl	8015560 <__sprint_r>
 80126be:	2800      	cmp	r0, #0
 80126c0:	f43f a82d 	beq.w	801171e <_vfprintf_r+0x3ae>
 80126c4:	f7ff bac8 	b.w	8011c58 <_vfprintf_r+0x8e8>
 80126c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ca:	441d      	add	r5, r3
 80126cc:	1bed      	subs	r5, r5, r7
 80126ce:	1b1c      	subs	r4, r3, r4
 80126d0:	42a5      	cmp	r5, r4
 80126d2:	bfa8      	it	ge
 80126d4:	4625      	movge	r5, r4
 80126d6:	e419      	b.n	8011f0c <_vfprintf_r+0xb9c>
 80126d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126da:	9907      	ldr	r1, [sp, #28]
 80126dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80126e0:	9309      	str	r3, [sp, #36]	; 0x24
 80126e2:	8011      	strh	r1, [r2, #0]
 80126e4:	465d      	mov	r5, fp
 80126e6:	f7ff b811 	b.w	801170c <_vfprintf_r+0x39c>
 80126ea:	2330      	movs	r3, #48	; 0x30
 80126ec:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80126f0:	2358      	movs	r3, #88	; 0x58
 80126f2:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 80126f6:	9b03      	ldr	r3, [sp, #12]
 80126f8:	f043 0402 	orr.w	r4, r3, #2
 80126fc:	9b05      	ldr	r3, [sp, #20]
 80126fe:	2b63      	cmp	r3, #99	; 0x63
 8012700:	f300 827e 	bgt.w	8012c00 <_vfprintf_r+0x1890>
 8012704:	2300      	movs	r3, #0
 8012706:	9308      	str	r3, [sp, #32]
 8012708:	ad33      	add	r5, sp, #204	; 0xcc
 801270a:	9b03      	ldr	r3, [sp, #12]
 801270c:	f443 7681 	orr.w	r6, r3, #258	; 0x102
 8012710:	ee18 3a90 	vmov	r3, s17
 8012714:	2b00      	cmp	r3, #0
 8012716:	f2c0 81e4 	blt.w	8012ae2 <_vfprintf_r+0x1772>
 801271a:	eeb0 ab48 	vmov.f64	d10, d8
 801271e:	9403      	str	r4, [sp, #12]
 8012720:	f04f 0900 	mov.w	r9, #0
 8012724:	f027 0420 	bic.w	r4, r7, #32
 8012728:	2f61      	cmp	r7, #97	; 0x61
 801272a:	f000 82e7 	beq.w	8012cfc <_vfprintf_r+0x198c>
 801272e:	2f41      	cmp	r7, #65	; 0x41
 8012730:	f47f ad3f 	bne.w	80121b2 <_vfprintf_r+0xe42>
 8012734:	eeb0 0b4a 	vmov.f64	d0, d10
 8012738:	a81a      	add	r0, sp, #104	; 0x68
 801273a:	f002 fe21 	bl	8015380 <frexp>
 801273e:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8012742:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012746:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274e:	d101      	bne.n	8012754 <_vfprintf_r+0x13e4>
 8012750:	2301      	movs	r3, #1
 8012752:	931a      	str	r3, [sp, #104]	; 0x68
 8012754:	483a      	ldr	r0, [pc, #232]	; (8012840 <_vfprintf_r+0x14d0>)
 8012756:	9b05      	ldr	r3, [sp, #20]
 8012758:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 801275c:	3b01      	subs	r3, #1
 801275e:	462a      	mov	r2, r5
 8012760:	e004      	b.n	801276c <_vfprintf_r+0x13fc>
 8012762:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276a:	d013      	beq.n	8012794 <_vfprintf_r+0x1424>
 801276c:	ee20 0b05 	vmul.f64	d0, d0, d5
 8012770:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012778:	ee17 1a90 	vmov	r1, s15
 801277c:	5c41      	ldrb	r1, [r0, r1]
 801277e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012782:	4694      	mov	ip, r2
 8012784:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012788:	f802 1b01 	strb.w	r1, [r2], #1
 801278c:	4619      	mov	r1, r3
 801278e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012792:	d1e6      	bne.n	8012762 <_vfprintf_r+0x13f2>
 8012794:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8012798:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a0:	f300 8239 	bgt.w	8012c16 <_vfprintf_r+0x18a6>
 80127a4:	eeb4 0b46 	vcmp.f64	d0, d6
 80127a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ac:	d104      	bne.n	80127b8 <_vfprintf_r+0x1448>
 80127ae:	ee17 3a90 	vmov	r3, s15
 80127b2:	07db      	lsls	r3, r3, #31
 80127b4:	f100 822f 	bmi.w	8012c16 <_vfprintf_r+0x18a6>
 80127b8:	2900      	cmp	r1, #0
 80127ba:	db06      	blt.n	80127ca <_vfprintf_r+0x145a>
 80127bc:	1c4b      	adds	r3, r1, #1
 80127be:	4413      	add	r3, r2
 80127c0:	2130      	movs	r1, #48	; 0x30
 80127c2:	f802 1b01 	strb.w	r1, [r2], #1
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d1fb      	bne.n	80127c2 <_vfprintf_r+0x1452>
 80127ca:	1b53      	subs	r3, r2, r5
 80127cc:	9803      	ldr	r0, [sp, #12]
 80127ce:	930e      	str	r3, [sp, #56]	; 0x38
 80127d0:	9603      	str	r6, [sp, #12]
 80127d2:	e50d      	b.n	80121f0 <_vfprintf_r+0xe80>
 80127d4:	ee1b 0a10 	vmov	r0, s22
 80127d8:	aa20      	add	r2, sp, #128	; 0x80
 80127da:	4651      	mov	r1, sl
 80127dc:	f002 fec0 	bl	8015560 <__sprint_r>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	f47f aa32 	bne.w	8011c4a <_vfprintf_r+0x8da>
 80127e6:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 80127ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80127ec:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80127f0:	e6dd      	b.n	80125ae <_vfprintf_r+0x123e>
 80127f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80127f4:	f001 ff30 	bl	8014658 <__retarget_lock_release_recursive>
 80127f8:	f7fe becc 	b.w	8011594 <_vfprintf_r+0x224>
 80127fc:	ee1b 0a10 	vmov	r0, s22
 8012800:	aa20      	add	r2, sp, #128	; 0x80
 8012802:	4651      	mov	r1, sl
 8012804:	f002 feac 	bl	8015560 <__sprint_r>
 8012808:	2800      	cmp	r0, #0
 801280a:	f47f aa1e 	bne.w	8011c4a <_vfprintf_r+0x8da>
 801280e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012810:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012814:	f7ff bb47 	b.w	8011ea6 <_vfprintf_r+0xb36>
 8012818:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801281a:	930d      	str	r3, [sp, #52]	; 0x34
 801281c:	1cdc      	adds	r4, r3, #3
 801281e:	db02      	blt.n	8012826 <_vfprintf_r+0x14b6>
 8012820:	9a05      	ldr	r2, [sp, #20]
 8012822:	4293      	cmp	r3, r2
 8012824:	dd0e      	ble.n	8012844 <_vfprintf_r+0x14d4>
 8012826:	3f02      	subs	r7, #2
 8012828:	f027 0420 	bic.w	r4, r7, #32
 801282c:	e4e8      	b.n	8012200 <_vfprintf_r+0xe90>
 801282e:	212d      	movs	r1, #45	; 0x2d
 8012830:	2300      	movs	r3, #0
 8012832:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
 8012836:	9305      	str	r3, [sp, #20]
 8012838:	f7fe bfa0 	b.w	801177c <_vfprintf_r+0x40c>
 801283c:	24008e7c 	.word	0x24008e7c
 8012840:	24008e4c 	.word	0x24008e4c
 8012844:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012848:	4293      	cmp	r3, r2
 801284a:	f2c0 8163 	blt.w	8012b14 <_vfprintf_r+0x17a4>
 801284e:	07c2      	lsls	r2, r0, #31
 8012850:	f140 8217 	bpl.w	8012c82 <_vfprintf_r+0x1912>
 8012854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012856:	189e      	adds	r6, r3, r2
 8012858:	0547      	lsls	r7, r0, #21
 801285a:	d503      	bpl.n	8012864 <_vfprintf_r+0x14f4>
 801285c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801285e:	2b00      	cmp	r3, #0
 8012860:	f300 8226 	bgt.w	8012cb0 <_vfprintf_r+0x1940>
 8012864:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8012868:	9304      	str	r3, [sp, #16]
 801286a:	2767      	movs	r7, #103	; 0x67
 801286c:	2300      	movs	r3, #0
 801286e:	930c      	str	r3, [sp, #48]	; 0x30
 8012870:	930f      	str	r3, [sp, #60]	; 0x3c
 8012872:	e523      	b.n	80122bc <_vfprintf_r+0xf4c>
 8012874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012876:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801287a:	eb05 0903 	add.w	r9, r5, r3
 801287e:	4651      	mov	r1, sl
 8012880:	46ca      	mov	sl, r9
 8012882:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8012886:	950b      	str	r5, [sp, #44]	; 0x2c
 8012888:	4640      	mov	r0, r8
 801288a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 801288e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012892:	ee1b 8a10 	vmov	r8, s22
 8012896:	f1b9 0f00 	cmp.w	r9, #0
 801289a:	d031      	beq.n	8012900 <_vfprintf_r+0x1590>
 801289c:	2b00      	cmp	r3, #0
 801289e:	d175      	bne.n	801298c <_vfprintf_r+0x161c>
 80128a0:	3d01      	subs	r5, #1
 80128a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80128a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128a8:	e9c0 3b00 	strd	r3, fp, [r0]
 80128ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128ae:	3301      	adds	r3, #1
 80128b0:	445a      	add	r2, fp
 80128b2:	2b07      	cmp	r3, #7
 80128b4:	9222      	str	r2, [sp, #136]	; 0x88
 80128b6:	9321      	str	r3, [sp, #132]	; 0x84
 80128b8:	dc6c      	bgt.n	8012994 <_vfprintf_r+0x1624>
 80128ba:	3008      	adds	r0, #8
 80128bc:	f895 c000 	ldrb.w	ip, [r5]
 80128c0:	ebaa 0307 	sub.w	r3, sl, r7
 80128c4:	4563      	cmp	r3, ip
 80128c6:	bfa8      	it	ge
 80128c8:	4663      	movge	r3, ip
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	461e      	mov	r6, r3
 80128ce:	dd0b      	ble.n	80128e8 <_vfprintf_r+0x1578>
 80128d0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80128d2:	3401      	adds	r4, #1
 80128d4:	441a      	add	r2, r3
 80128d6:	2c07      	cmp	r4, #7
 80128d8:	e9c0 7300 	strd	r7, r3, [r0]
 80128dc:	9222      	str	r2, [sp, #136]	; 0x88
 80128de:	9421      	str	r4, [sp, #132]	; 0x84
 80128e0:	dc64      	bgt.n	80129ac <_vfprintf_r+0x163c>
 80128e2:	f895 c000 	ldrb.w	ip, [r5]
 80128e6:	3008      	adds	r0, #8
 80128e8:	2e00      	cmp	r6, #0
 80128ea:	bfac      	ite	ge
 80128ec:	ebac 0406 	subge.w	r4, ip, r6
 80128f0:	4664      	movlt	r4, ip
 80128f2:	2c00      	cmp	r4, #0
 80128f4:	dc13      	bgt.n	801291e <_vfprintf_r+0x15ae>
 80128f6:	4467      	add	r7, ip
 80128f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128fa:	f1b9 0f00 	cmp.w	r9, #0
 80128fe:	d1cd      	bne.n	801289c <_vfprintf_r+0x152c>
 8012900:	2b00      	cmp	r3, #0
 8012902:	d143      	bne.n	801298c <_vfprintf_r+0x161c>
 8012904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012906:	9513      	str	r5, [sp, #76]	; 0x4c
 8012908:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801290a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801290e:	18eb      	adds	r3, r5, r3
 8012910:	429f      	cmp	r7, r3
 8012912:	4680      	mov	r8, r0
 8012914:	468a      	mov	sl, r1
 8012916:	bf28      	it	cs
 8012918:	461f      	movcs	r7, r3
 801291a:	f7ff baca 	b.w	8011eb2 <_vfprintf_r+0xb42>
 801291e:	2c10      	cmp	r4, #16
 8012920:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8012924:	dd23      	ble.n	801296e <_vfprintf_r+0x15fe>
 8012926:	9505      	str	r5, [sp, #20]
 8012928:	2610      	movs	r6, #16
 801292a:	4663      	mov	r3, ip
 801292c:	460d      	mov	r5, r1
 801292e:	e004      	b.n	801293a <_vfprintf_r+0x15ca>
 8012930:	3c10      	subs	r4, #16
 8012932:	2c10      	cmp	r4, #16
 8012934:	f100 0008 	add.w	r0, r0, #8
 8012938:	dd16      	ble.n	8012968 <_vfprintf_r+0x15f8>
 801293a:	3301      	adds	r3, #1
 801293c:	49af      	ldr	r1, [pc, #700]	; (8012bfc <_vfprintf_r+0x188c>)
 801293e:	3210      	adds	r2, #16
 8012940:	2b07      	cmp	r3, #7
 8012942:	e9c0 1600 	strd	r1, r6, [r0]
 8012946:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 801294a:	ddf1      	ble.n	8012930 <_vfprintf_r+0x15c0>
 801294c:	aa20      	add	r2, sp, #128	; 0x80
 801294e:	4629      	mov	r1, r5
 8012950:	4640      	mov	r0, r8
 8012952:	f002 fe05 	bl	8015560 <__sprint_r>
 8012956:	2800      	cmp	r0, #0
 8012958:	f47f aa85 	bne.w	8011e66 <_vfprintf_r+0xaf6>
 801295c:	3c10      	subs	r4, #16
 801295e:	2c10      	cmp	r4, #16
 8012960:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8012964:	a823      	add	r0, sp, #140	; 0x8c
 8012966:	dce8      	bgt.n	801293a <_vfprintf_r+0x15ca>
 8012968:	4629      	mov	r1, r5
 801296a:	9d05      	ldr	r5, [sp, #20]
 801296c:	469c      	mov	ip, r3
 801296e:	f10c 0301 	add.w	r3, ip, #1
 8012972:	4422      	add	r2, r4
 8012974:	6044      	str	r4, [r0, #4]
 8012976:	2b07      	cmp	r3, #7
 8012978:	4ca0      	ldr	r4, [pc, #640]	; (8012bfc <_vfprintf_r+0x188c>)
 801297a:	6004      	str	r4, [r0, #0]
 801297c:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8012980:	dc31      	bgt.n	80129e6 <_vfprintf_r+0x1676>
 8012982:	f895 c000 	ldrb.w	ip, [r5]
 8012986:	3008      	adds	r0, #8
 8012988:	4467      	add	r7, ip
 801298a:	e7b5      	b.n	80128f8 <_vfprintf_r+0x1588>
 801298c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801298e:	3b01      	subs	r3, #1
 8012990:	930c      	str	r3, [sp, #48]	; 0x30
 8012992:	e788      	b.n	80128a6 <_vfprintf_r+0x1536>
 8012994:	aa20      	add	r2, sp, #128	; 0x80
 8012996:	4640      	mov	r0, r8
 8012998:	9105      	str	r1, [sp, #20]
 801299a:	f002 fde1 	bl	8015560 <__sprint_r>
 801299e:	9905      	ldr	r1, [sp, #20]
 80129a0:	2800      	cmp	r0, #0
 80129a2:	f040 81f0 	bne.w	8012d86 <_vfprintf_r+0x1a16>
 80129a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80129a8:	a823      	add	r0, sp, #140	; 0x8c
 80129aa:	e787      	b.n	80128bc <_vfprintf_r+0x154c>
 80129ac:	aa20      	add	r2, sp, #128	; 0x80
 80129ae:	4640      	mov	r0, r8
 80129b0:	9105      	str	r1, [sp, #20]
 80129b2:	f002 fdd5 	bl	8015560 <__sprint_r>
 80129b6:	9905      	ldr	r1, [sp, #20]
 80129b8:	2800      	cmp	r0, #0
 80129ba:	f040 81e4 	bne.w	8012d86 <_vfprintf_r+0x1a16>
 80129be:	f895 c000 	ldrb.w	ip, [r5]
 80129c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80129c4:	a823      	add	r0, sp, #140	; 0x8c
 80129c6:	e78f      	b.n	80128e8 <_vfprintf_r+0x1578>
 80129c8:	ee1b 0a10 	vmov	r0, s22
 80129cc:	aa20      	add	r2, sp, #128	; 0x80
 80129ce:	4651      	mov	r1, sl
 80129d0:	f002 fdc6 	bl	8015560 <__sprint_r>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	f47f a938 	bne.w	8011c4a <_vfprintf_r+0x8da>
 80129da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80129dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80129de:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 80129e2:	f7ff bb71 	b.w	80120c8 <_vfprintf_r+0xd58>
 80129e6:	aa20      	add	r2, sp, #128	; 0x80
 80129e8:	4640      	mov	r0, r8
 80129ea:	9105      	str	r1, [sp, #20]
 80129ec:	f002 fdb8 	bl	8015560 <__sprint_r>
 80129f0:	9905      	ldr	r1, [sp, #20]
 80129f2:	2800      	cmp	r0, #0
 80129f4:	f040 81c7 	bne.w	8012d86 <_vfprintf_r+0x1a16>
 80129f8:	f895 c000 	ldrb.w	ip, [r5]
 80129fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80129fe:	a823      	add	r0, sp, #140	; 0x8c
 8012a00:	4467      	add	r7, ip
 8012a02:	e779      	b.n	80128f8 <_vfprintf_r+0x1588>
 8012a04:	ee1b 0a10 	vmov	r0, s22
 8012a08:	aa20      	add	r2, sp, #128	; 0x80
 8012a0a:	4651      	mov	r1, sl
 8012a0c:	f002 fda8 	bl	8015560 <__sprint_r>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f47f a91a 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012a16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012a18:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012a1c:	f7ff ba3c 	b.w	8011e98 <_vfprintf_r+0xb28>
 8012a20:	ab1e      	add	r3, sp, #120	; 0x78
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	ab1b      	add	r3, sp, #108	; 0x6c
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	9a05      	ldr	r2, [sp, #20]
 8012a2a:	eeb0 0b4a 	vmov.f64	d0, d10
 8012a2e:	ab1a      	add	r3, sp, #104	; 0x68
 8012a30:	ee1b 0a10 	vmov	r0, s22
 8012a34:	2103      	movs	r1, #3
 8012a36:	f000 fb33 	bl	80130a0 <_dtoa_r>
 8012a3a:	7803      	ldrb	r3, [r0, #0]
 8012a3c:	2b30      	cmp	r3, #48	; 0x30
 8012a3e:	4605      	mov	r5, r0
 8012a40:	f000 8196 	beq.w	8012d70 <_vfprintf_r+0x1a00>
 8012a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a46:	9a05      	ldr	r2, [sp, #20]
 8012a48:	9803      	ldr	r0, [sp, #12]
 8012a4a:	9603      	str	r6, [sp, #12]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	eb05 0c03 	add.w	ip, r5, r3
 8012a52:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8012a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5a:	d102      	bne.n	8012a62 <_vfprintf_r+0x16f2>
 8012a5c:	4663      	mov	r3, ip
 8012a5e:	f7ff bbc5 	b.w	80121ec <_vfprintf_r+0xe7c>
 8012a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012a64:	4563      	cmp	r3, ip
 8012a66:	f4bf abc1 	bcs.w	80121ec <_vfprintf_r+0xe7c>
 8012a6a:	2130      	movs	r1, #48	; 0x30
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	921e      	str	r2, [sp, #120]	; 0x78
 8012a70:	7019      	strb	r1, [r3, #0]
 8012a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012a74:	459c      	cmp	ip, r3
 8012a76:	d8f9      	bhi.n	8012a6c <_vfprintf_r+0x16fc>
 8012a78:	f7ff bbb8 	b.w	80121ec <_vfprintf_r+0xe7c>
 8012a7c:	ee1b 0a10 	vmov	r0, s22
 8012a80:	aa20      	add	r2, sp, #128	; 0x80
 8012a82:	4651      	mov	r1, sl
 8012a84:	f002 fd6c 	bl	8015560 <__sprint_r>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	f47f a8de 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012a8e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8012a90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012a92:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012a96:	f7ff ba22 	b.w	8011ede <_vfprintf_r+0xb6e>
 8012a9a:	9b05      	ldr	r3, [sp, #20]
 8012a9c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
 8012aa0:	9409      	str	r4, [sp, #36]	; 0x24
 8012aa2:	9304      	str	r3, [sp, #16]
 8012aa4:	461e      	mov	r6, r3
 8012aa6:	9005      	str	r0, [sp, #20]
 8012aa8:	900c      	str	r0, [sp, #48]	; 0x30
 8012aaa:	900f      	str	r0, [sp, #60]	; 0x3c
 8012aac:	900d      	str	r0, [sp, #52]	; 0x34
 8012aae:	f7fe be62 	b.w	8011776 <_vfprintf_r+0x406>
 8012ab2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012ab4:	920d      	str	r2, [sp, #52]	; 0x34
 8012ab6:	2a00      	cmp	r2, #0
 8012ab8:	f340 816b 	ble.w	8012d92 <_vfprintf_r+0x1a22>
 8012abc:	9905      	ldr	r1, [sp, #20]
 8012abe:	f000 0301 	and.w	r3, r0, #1
 8012ac2:	430b      	orrs	r3, r1
 8012ac4:	f040 8142 	bne.w	8012d4c <_vfprintf_r+0x19dc>
 8012ac8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012aca:	2766      	movs	r7, #102	; 0x66
 8012acc:	0542      	lsls	r2, r0, #21
 8012ace:	f100 80f0 	bmi.w	8012cb2 <_vfprintf_r+0x1942>
 8012ad2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8012ad6:	9304      	str	r3, [sp, #16]
 8012ad8:	e6c8      	b.n	801286c <_vfprintf_r+0x14fc>
 8012ada:	2300      	movs	r3, #0
 8012adc:	9305      	str	r3, [sp, #20]
 8012ade:	f7fe bcb8 	b.w	8011452 <_vfprintf_r+0xe2>
 8012ae2:	9403      	str	r4, [sp, #12]
 8012ae4:	f027 0420 	bic.w	r4, r7, #32
 8012ae8:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8012aec:	eeb1 ab48 	vneg.f64	d10, d8
 8012af0:	e61a      	b.n	8012728 <_vfprintf_r+0x13b8>
 8012af2:	ee1b 0a10 	vmov	r0, s22
 8012af6:	aa20      	add	r2, sp, #128	; 0x80
 8012af8:	4651      	mov	r1, sl
 8012afa:	f002 fd31 	bl	8015560 <__sprint_r>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f47f a8a3 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012b04:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8012b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012b0a:	1b1c      	subs	r4, r3, r4
 8012b0c:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012b10:	f7ff b9fc 	b.w	8011f0c <_vfprintf_r+0xb9c>
 8012b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b18:	189e      	adds	r6, r3, r2
 8012b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f340 811a 	ble.w	8012d56 <_vfprintf_r+0x19e6>
 8012b22:	2767      	movs	r7, #103	; 0x67
 8012b24:	e7d2      	b.n	8012acc <_vfprintf_r+0x175c>
 8012b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b28:	07da      	lsls	r2, r3, #31
 8012b2a:	d405      	bmi.n	8012b38 <_vfprintf_r+0x17c8>
 8012b2c:	89bb      	ldrh	r3, [r7, #12]
 8012b2e:	059b      	lsls	r3, r3, #22
 8012b30:	d402      	bmi.n	8012b38 <_vfprintf_r+0x17c8>
 8012b32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012b34:	f001 fd90 	bl	8014658 <__retarget_lock_release_recursive>
 8012b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b3c:	9307      	str	r3, [sp, #28]
 8012b3e:	f7ff b896 	b.w	8011c6e <_vfprintf_r+0x8fe>
 8012b42:	9b05      	ldr	r3, [sp, #20]
 8012b44:	9803      	ldr	r0, [sp, #12]
 8012b46:	9603      	str	r6, [sp, #12]
 8012b48:	eb05 0c03 	add.w	ip, r5, r3
 8012b4c:	e781      	b.n	8012a52 <_vfprintf_r+0x16e2>
 8012b4e:	424c      	negs	r4, r1
 8012b50:	3110      	adds	r1, #16
 8012b52:	da1e      	bge.n	8012b92 <_vfprintf_r+0x1822>
 8012b54:	ee1b 7a10 	vmov	r7, s22
 8012b58:	2610      	movs	r6, #16
 8012b5a:	e004      	b.n	8012b66 <_vfprintf_r+0x17f6>
 8012b5c:	f108 0808 	add.w	r8, r8, #8
 8012b60:	3c10      	subs	r4, #16
 8012b62:	2c10      	cmp	r4, #16
 8012b64:	dd15      	ble.n	8012b92 <_vfprintf_r+0x1822>
 8012b66:	3301      	adds	r3, #1
 8012b68:	4924      	ldr	r1, [pc, #144]	; (8012bfc <_vfprintf_r+0x188c>)
 8012b6a:	3210      	adds	r2, #16
 8012b6c:	2b07      	cmp	r3, #7
 8012b6e:	e9c8 1600 	strd	r1, r6, [r8]
 8012b72:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8012b76:	ddf1      	ble.n	8012b5c <_vfprintf_r+0x17ec>
 8012b78:	aa20      	add	r2, sp, #128	; 0x80
 8012b7a:	4651      	mov	r1, sl
 8012b7c:	4638      	mov	r0, r7
 8012b7e:	f002 fcef 	bl	8015560 <__sprint_r>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	f47f a861 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012b88:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8012b8c:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012b90:	e7e6      	b.n	8012b60 <_vfprintf_r+0x17f0>
 8012b92:	3301      	adds	r3, #1
 8012b94:	4919      	ldr	r1, [pc, #100]	; (8012bfc <_vfprintf_r+0x188c>)
 8012b96:	f8c8 4004 	str.w	r4, [r8, #4]
 8012b9a:	4422      	add	r2, r4
 8012b9c:	2b07      	cmp	r3, #7
 8012b9e:	e9cd 3221 	strd	r3, r2, [sp, #132]	; 0x84
 8012ba2:	f8c8 1000 	str.w	r1, [r8]
 8012ba6:	f77f aaa5 	ble.w	80120f4 <_vfprintf_r+0xd84>
 8012baa:	ee1b 0a10 	vmov	r0, s22
 8012bae:	aa20      	add	r2, sp, #128	; 0x80
 8012bb0:	4651      	mov	r1, sl
 8012bb2:	f002 fcd5 	bl	8015560 <__sprint_r>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f47f a847 	bne.w	8011c4a <_vfprintf_r+0x8da>
 8012bbc:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	; 0x84
 8012bc0:	f10d 088c 	add.w	r8, sp, #140	; 0x8c
 8012bc4:	e4f6      	b.n	80125b4 <_vfprintf_r+0x1244>
 8012bc6:	2330      	movs	r3, #48	; 0x30
 8012bc8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012bcc:	2378      	movs	r3, #120	; 0x78
 8012bce:	e590      	b.n	80126f2 <_vfprintf_r+0x1382>
 8012bd0:	9b05      	ldr	r3, [sp, #20]
 8012bd2:	eeb0 0b4a 	vmov.f64	d0, d10
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	ab1e      	add	r3, sp, #120	; 0x78
 8012bda:	9301      	str	r3, [sp, #4]
 8012bdc:	ab1b      	add	r3, sp, #108	; 0x6c
 8012bde:	9300      	str	r3, [sp, #0]
 8012be0:	ee1b 0a10 	vmov	r0, s22
 8012be4:	ab1a      	add	r3, sp, #104	; 0x68
 8012be6:	2102      	movs	r1, #2
 8012be8:	9204      	str	r2, [sp, #16]
 8012bea:	f000 fa59 	bl	80130a0 <_dtoa_r>
 8012bee:	9a04      	ldr	r2, [sp, #16]
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	9803      	ldr	r0, [sp, #12]
 8012bf4:	9603      	str	r6, [sp, #12]
 8012bf6:	eb05 0c02 	add.w	ip, r5, r2
 8012bfa:	e72a      	b.n	8012a52 <_vfprintf_r+0x16e2>
 8012bfc:	24008e7c 	.word	0x24008e7c
 8012c00:	ee1b 0a10 	vmov	r0, s22
 8012c04:	1c59      	adds	r1, r3, #1
 8012c06:	f7fd ffbd 	bl	8010b84 <_malloc_r>
 8012c0a:	4605      	mov	r5, r0
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	f000 80e9 	beq.w	8012de4 <_vfprintf_r+0x1a74>
 8012c12:	9008      	str	r0, [sp, #32]
 8012c14:	e579      	b.n	801270a <_vfprintf_r+0x139a>
 8012c16:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 8012c1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012c1e:	f890 c00f 	ldrb.w	ip, [r0, #15]
 8012c22:	4561      	cmp	r1, ip
 8012c24:	4613      	mov	r3, r2
 8012c26:	d10a      	bne.n	8012c3e <_vfprintf_r+0x18ce>
 8012c28:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8012c2c:	f803 ec01 	strb.w	lr, [r3, #-1]
 8012c30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012c32:	1e59      	subs	r1, r3, #1
 8012c34:	911e      	str	r1, [sp, #120]	; 0x78
 8012c36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012c3a:	458c      	cmp	ip, r1
 8012c3c:	d0f6      	beq.n	8012c2c <_vfprintf_r+0x18bc>
 8012c3e:	2939      	cmp	r1, #57	; 0x39
 8012c40:	bf16      	itet	ne
 8012c42:	3101      	addne	r1, #1
 8012c44:	7a81      	ldrbeq	r1, [r0, #10]
 8012c46:	b2c9      	uxtbne	r1, r1
 8012c48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012c4c:	e5bd      	b.n	80127ca <_vfprintf_r+0x145a>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	9308      	str	r3, [sp, #32]
 8012c52:	e749      	b.n	8012ae8 <_vfprintf_r+0x1778>
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	bf08      	it	eq
 8012c58:	2301      	moveq	r3, #1
 8012c5a:	9305      	str	r3, [sp, #20]
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	f443 7680 	orr.w	r6, r3, #256	; 0x100
 8012c62:	ee18 3a90 	vmov	r3, s17
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	dbf1      	blt.n	8012c4e <_vfprintf_r+0x18de>
 8012c6a:	eeb0 ab48 	vmov.f64	d10, d8
 8012c6e:	f04f 0900 	mov.w	r9, #0
 8012c72:	f8cd 9020 	str.w	r9, [sp, #32]
 8012c76:	f7ff baa2 	b.w	80121be <_vfprintf_r+0xe4e>
 8012c7a:	2306      	movs	r3, #6
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	f7ff ba8a 	b.w	8012196 <_vfprintf_r+0xe26>
 8012c82:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012c84:	e5e8      	b.n	8012858 <_vfprintf_r+0x14e8>
 8012c86:	f107 020f 	add.w	r2, r7, #15
 8012c8a:	b2d2      	uxtb	r2, r2
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	f7ff bac0 	b.w	8012212 <_vfprintf_r+0xea2>
 8012c92:	2900      	cmp	r1, #0
 8012c94:	d17a      	bne.n	8012d8c <_vfprintf_r+0x1a1c>
 8012c96:	2230      	movs	r2, #48	; 0x30
 8012c98:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
 8012c9c:	f10d 0273 	add.w	r2, sp, #115	; 0x73
 8012ca0:	3330      	adds	r3, #48	; 0x30
 8012ca2:	f802 3b01 	strb.w	r3, [r2], #1
 8012ca6:	ab1c      	add	r3, sp, #112	; 0x70
 8012ca8:	1ad3      	subs	r3, r2, r3
 8012caa:	9314      	str	r3, [sp, #80]	; 0x50
 8012cac:	f7ff baf1 	b.w	8012292 <_vfprintf_r+0xf22>
 8012cb0:	2767      	movs	r7, #103	; 0x67
 8012cb2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012cb4:	780b      	ldrb	r3, [r1, #0]
 8012cb6:	2bff      	cmp	r3, #255	; 0xff
 8012cb8:	f000 808a 	beq.w	8012dd0 <_vfprintf_r+0x1a60>
 8012cbc:	2400      	movs	r4, #0
 8012cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	e003      	b.n	8012ccc <_vfprintf_r+0x195c>
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	3101      	adds	r1, #1
 8012cc8:	2bff      	cmp	r3, #255	; 0xff
 8012cca:	d008      	beq.n	8012cde <_vfprintf_r+0x196e>
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	da06      	bge.n	8012cde <_vfprintf_r+0x196e>
 8012cd0:	1ad2      	subs	r2, r2, r3
 8012cd2:	784b      	ldrb	r3, [r1, #1]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d1f5      	bne.n	8012cc4 <_vfprintf_r+0x1954>
 8012cd8:	780b      	ldrb	r3, [r1, #0]
 8012cda:	3401      	adds	r4, #1
 8012cdc:	e7f4      	b.n	8012cc8 <_vfprintf_r+0x1958>
 8012cde:	9113      	str	r1, [sp, #76]	; 0x4c
 8012ce0:	920d      	str	r2, [sp, #52]	; 0x34
 8012ce2:	900f      	str	r0, [sp, #60]	; 0x3c
 8012ce4:	940c      	str	r4, [sp, #48]	; 0x30
 8012ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cea:	4413      	add	r3, r2
 8012cec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012cee:	fb02 6603 	mla	r6, r2, r3, r6
 8012cf2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8012cf6:	9304      	str	r3, [sp, #16]
 8012cf8:	f7ff bae0 	b.w	80122bc <_vfprintf_r+0xf4c>
 8012cfc:	a81a      	add	r0, sp, #104	; 0x68
 8012cfe:	eeb0 0b4a 	vmov.f64	d0, d10
 8012d02:	f002 fb3d 	bl	8015380 <frexp>
 8012d06:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8012d0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d0e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d16:	d101      	bne.n	8012d1c <_vfprintf_r+0x19ac>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1c:	4836      	ldr	r0, [pc, #216]	; (8012df8 <_vfprintf_r+0x1a88>)
 8012d1e:	e51a      	b.n	8012756 <_vfprintf_r+0x13e6>
 8012d20:	ee18 3a90 	vmov	r3, s17
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	9b03      	ldr	r3, [sp, #12]
 8012d28:	bfa8      	it	ge
 8012d2a:	f89d 1063 	ldrbge.w	r1, [sp, #99]	; 0x63
 8012d2e:	4d33      	ldr	r5, [pc, #204]	; (8012dfc <_vfprintf_r+0x1a8c>)
 8012d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d34:	bfb8      	it	lt
 8012d36:	212d      	movlt	r1, #45	; 0x2d
 8012d38:	9303      	str	r3, [sp, #12]
 8012d3a:	bfb8      	it	lt
 8012d3c:	f88d 1063 	strblt.w	r1, [sp, #99]	; 0x63
 8012d40:	4b2f      	ldr	r3, [pc, #188]	; (8012e00 <_vfprintf_r+0x1a90>)
 8012d42:	f7fe bd0c 	b.w	801175e <_vfprintf_r+0x3ee>
 8012d46:	4657      	mov	r7, sl
 8012d48:	f7fe bf86 	b.w	8011c58 <_vfprintf_r+0x8e8>
 8012d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d4e:	18d6      	adds	r6, r2, r3
 8012d50:	440e      	add	r6, r1
 8012d52:	2766      	movs	r7, #102	; 0x66
 8012d54:	e6ba      	b.n	8012acc <_vfprintf_r+0x175c>
 8012d56:	f1c3 0301 	rsb	r3, r3, #1
 8012d5a:	441e      	add	r6, r3
 8012d5c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8012d60:	9304      	str	r3, [sp, #16]
 8012d62:	2767      	movs	r7, #103	; 0x67
 8012d64:	e582      	b.n	801286c <_vfprintf_r+0x14fc>
 8012d66:	07c1      	lsls	r1, r0, #31
 8012d68:	f57f aa9c 	bpl.w	80122a4 <_vfprintf_r+0xf34>
 8012d6c:	f7ff ba98 	b.w	80122a0 <_vfprintf_r+0xf30>
 8012d70:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8012d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d78:	f43f ae64 	beq.w	8012a44 <_vfprintf_r+0x16d4>
 8012d7c:	9b05      	ldr	r3, [sp, #20]
 8012d7e:	f1c3 0301 	rsb	r3, r3, #1
 8012d82:	931a      	str	r3, [sp, #104]	; 0x68
 8012d84:	e65f      	b.n	8012a46 <_vfprintf_r+0x16d6>
 8012d86:	460f      	mov	r7, r1
 8012d88:	f7fe bf60 	b.w	8011c4c <_vfprintf_r+0x8dc>
 8012d8c:	f10d 0272 	add.w	r2, sp, #114	; 0x72
 8012d90:	e786      	b.n	8012ca0 <_vfprintf_r+0x1930>
 8012d92:	9b05      	ldr	r3, [sp, #20]
 8012d94:	f000 0001 	and.w	r0, r0, #1
 8012d98:	ea50 0203 	orrs.w	r2, r0, r3
 8012d9c:	d104      	bne.n	8012da8 <_vfprintf_r+0x1a38>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	9304      	str	r3, [sp, #16]
 8012da2:	2766      	movs	r7, #102	; 0x66
 8012da4:	461e      	mov	r6, r3
 8012da6:	e561      	b.n	801286c <_vfprintf_r+0x14fc>
 8012da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012daa:	1c56      	adds	r6, r2, #1
 8012dac:	441e      	add	r6, r3
 8012dae:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8012db2:	9304      	str	r3, [sp, #16]
 8012db4:	2766      	movs	r7, #102	; 0x66
 8012db6:	e559      	b.n	801286c <_vfprintf_r+0x14fc>
 8012db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dba:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8012dbe:	4693      	mov	fp, r2
 8012dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8012dc6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8012dca:	9205      	str	r2, [sp, #20]
 8012dcc:	f7fe bb3f 	b.w	801144e <_vfprintf_r+0xde>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8012dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dd6:	e786      	b.n	8012ce6 <_vfprintf_r+0x1976>
 8012dd8:	9a05      	ldr	r2, [sp, #20]
 8012dda:	e70a      	b.n	8012bf2 <_vfprintf_r+0x1882>
 8012ddc:	2302      	movs	r3, #2
 8012dde:	9314      	str	r3, [sp, #80]	; 0x50
 8012de0:	f7ff ba57 	b.w	8012292 <_vfprintf_r+0xf22>
 8012de4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dec:	4657      	mov	r7, sl
 8012dee:	f8aa 300c 	strh.w	r3, [sl, #12]
 8012df2:	f7fe bf31 	b.w	8011c58 <_vfprintf_r+0x8e8>
 8012df6:	bf00      	nop
 8012df8:	24008e38 	.word	0x24008e38
 8012dfc:	24008e30 	.word	0x24008e30
 8012e00:	24008e34 	.word	0x24008e34

08012e04 <__sbprintf>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	460c      	mov	r4, r1
 8012e08:	8989      	ldrh	r1, [r1, #12]
 8012e0a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8012e0e:	f021 0102 	bic.w	r1, r1, #2
 8012e12:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012e16:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8012e18:	911b      	str	r1, [sp, #108]	; 0x6c
 8012e1a:	89e1      	ldrh	r1, [r4, #14]
 8012e1c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012e20:	69e1      	ldr	r1, [r4, #28]
 8012e22:	9109      	str	r1, [sp, #36]	; 0x24
 8012e24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012e26:	910b      	str	r1, [sp, #44]	; 0x2c
 8012e28:	a91c      	add	r1, sp, #112	; 0x70
 8012e2a:	9102      	str	r1, [sp, #8]
 8012e2c:	9106      	str	r1, [sp, #24]
 8012e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012e32:	4606      	mov	r6, r0
 8012e34:	9104      	str	r1, [sp, #16]
 8012e36:	9107      	str	r1, [sp, #28]
 8012e38:	a818      	add	r0, sp, #96	; 0x60
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	e9cd 3200 	strd	r3, r2, [sp]
 8012e40:	9108      	str	r1, [sp, #32]
 8012e42:	f001 fc03 	bl	801464c <__retarget_lock_init_recursive>
 8012e46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012e4a:	a902      	add	r1, sp, #8
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7fe fa8f 	bl	8011370 <_vfprintf_r>
 8012e52:	1e05      	subs	r5, r0, #0
 8012e54:	db07      	blt.n	8012e66 <__sbprintf+0x62>
 8012e56:	a902      	add	r1, sp, #8
 8012e58:	4630      	mov	r0, r6
 8012e5a:	f001 f825 	bl	8013ea8 <_fflush_r>
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	bf18      	it	ne
 8012e62:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8012e66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012e6a:	065b      	lsls	r3, r3, #25
 8012e6c:	d503      	bpl.n	8012e76 <__sbprintf+0x72>
 8012e6e:	89a3      	ldrh	r3, [r4, #12]
 8012e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e74:	81a3      	strh	r3, [r4, #12]
 8012e76:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012e78:	f001 fbea 	bl	8014650 <__retarget_lock_close_recursive>
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8012e82:	bd70      	pop	{r4, r5, r6, pc}

08012e84 <__swsetup_r>:
 8012e84:	b538      	push	{r3, r4, r5, lr}
 8012e86:	4b33      	ldr	r3, [pc, #204]	; (8012f54 <__swsetup_r+0xd0>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	460c      	mov	r4, r1
 8012e8e:	b10b      	cbz	r3, 8012e94 <__swsetup_r+0x10>
 8012e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012e92:	b312      	cbz	r2, 8012eda <__swsetup_r+0x56>
 8012e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e98:	0718      	lsls	r0, r3, #28
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	d525      	bpl.n	8012eea <__swsetup_r+0x66>
 8012e9e:	6921      	ldr	r1, [r4, #16]
 8012ea0:	2900      	cmp	r1, #0
 8012ea2:	d02d      	beq.n	8012f00 <__swsetup_r+0x7c>
 8012ea4:	f012 0001 	ands.w	r0, r2, #1
 8012ea8:	d007      	beq.n	8012eba <__swsetup_r+0x36>
 8012eaa:	2000      	movs	r0, #0
 8012eac:	60a0      	str	r0, [r4, #8]
 8012eae:	6960      	ldr	r0, [r4, #20]
 8012eb0:	4240      	negs	r0, r0
 8012eb2:	61a0      	str	r0, [r4, #24]
 8012eb4:	b139      	cbz	r1, 8012ec6 <__swsetup_r+0x42>
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	bd38      	pop	{r3, r4, r5, pc}
 8012eba:	0795      	lsls	r5, r2, #30
 8012ebc:	bf58      	it	pl
 8012ebe:	6960      	ldrpl	r0, [r4, #20]
 8012ec0:	60a0      	str	r0, [r4, #8]
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	d1f7      	bne.n	8012eb6 <__swsetup_r+0x32>
 8012ec6:	0612      	lsls	r2, r2, #24
 8012ec8:	bf58      	it	pl
 8012eca:	4608      	movpl	r0, r1
 8012ecc:	d5f4      	bpl.n	8012eb8 <__swsetup_r+0x34>
 8012ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ed8:	bd38      	pop	{r3, r4, r5, pc}
 8012eda:	4618      	mov	r0, r3
 8012edc:	f001 f818 	bl	8013f10 <__sinit>
 8012ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ee4:	0718      	lsls	r0, r3, #28
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	d4d9      	bmi.n	8012e9e <__swsetup_r+0x1a>
 8012eea:	06d1      	lsls	r1, r2, #27
 8012eec:	d52a      	bpl.n	8012f44 <__swsetup_r+0xc0>
 8012eee:	0752      	lsls	r2, r2, #29
 8012ef0:	d414      	bmi.n	8012f1c <__swsetup_r+0x98>
 8012ef2:	6921      	ldr	r1, [r4, #16]
 8012ef4:	f043 0308 	orr.w	r3, r3, #8
 8012ef8:	81a3      	strh	r3, [r4, #12]
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	2900      	cmp	r1, #0
 8012efe:	d1d1      	bne.n	8012ea4 <__swsetup_r+0x20>
 8012f00:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8012f04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8012f08:	d0cc      	beq.n	8012ea4 <__swsetup_r+0x20>
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f001 fba5 	bl	801465c <__smakebuf_r>
 8012f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f16:	6921      	ldr	r1, [r4, #16]
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	e7c3      	b.n	8012ea4 <__swsetup_r+0x20>
 8012f1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012f1e:	b151      	cbz	r1, 8012f36 <__swsetup_r+0xb2>
 8012f20:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012f24:	4291      	cmp	r1, r2
 8012f26:	d004      	beq.n	8012f32 <__swsetup_r+0xae>
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f001 f8e9 	bl	8014100 <_free_r>
 8012f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f32:	2200      	movs	r2, #0
 8012f34:	6322      	str	r2, [r4, #48]	; 0x30
 8012f36:	6921      	ldr	r1, [r4, #16]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	e9c4 1200 	strd	r1, r2, [r4]
 8012f3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f42:	e7d7      	b.n	8012ef4 <__swsetup_r+0x70>
 8012f44:	2209      	movs	r2, #9
 8012f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f4a:	602a      	str	r2, [r5, #0]
 8012f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f50:	81a3      	strh	r3, [r4, #12]
 8012f52:	bd38      	pop	{r3, r4, r5, pc}
 8012f54:	240081cc 	.word	0x240081cc

08012f58 <register_fini>:
 8012f58:	4b02      	ldr	r3, [pc, #8]	; (8012f64 <register_fini+0xc>)
 8012f5a:	b113      	cbz	r3, 8012f62 <register_fini+0xa>
 8012f5c:	4802      	ldr	r0, [pc, #8]	; (8012f68 <register_fini+0x10>)
 8012f5e:	f000 b805 	b.w	8012f6c <atexit>
 8012f62:	4770      	bx	lr
 8012f64:	00000000 	.word	0x00000000
 8012f68:	08014035 	.word	0x08014035

08012f6c <atexit>:
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	4601      	mov	r1, r0
 8012f70:	461a      	mov	r2, r3
 8012f72:	4618      	mov	r0, r3
 8012f74:	f003 ba54 	b.w	8016420 <__register_exitproc>

08012f78 <quorem>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	6903      	ldr	r3, [r0, #16]
 8012f7e:	690c      	ldr	r4, [r1, #16]
 8012f80:	42a3      	cmp	r3, r4
 8012f82:	b083      	sub	sp, #12
 8012f84:	f2c0 8087 	blt.w	8013096 <quorem+0x11e>
 8012f88:	3c01      	subs	r4, #1
 8012f8a:	f101 0514 	add.w	r5, r1, #20
 8012f8e:	00a3      	lsls	r3, r4, #2
 8012f90:	f100 0814 	add.w	r8, r0, #20
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8012f9a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	4681      	mov	r9, r0
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8012fa8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8012fac:	9001      	str	r0, [sp, #4]
 8012fae:	fbb2 f6f3 	udiv	r6, r2, r3
 8012fb2:	d33b      	bcc.n	801302c <quorem+0xb4>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	46ae      	mov	lr, r5
 8012fb8:	4640      	mov	r0, r8
 8012fba:	469b      	mov	fp, r3
 8012fbc:	f85e ab04 	ldr.w	sl, [lr], #4
 8012fc0:	6802      	ldr	r2, [r0, #0]
 8012fc2:	fa1f fc8a 	uxth.w	ip, sl
 8012fc6:	fb06 330c 	mla	r3, r6, ip, r3
 8012fca:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8012fce:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8012fd2:	fb06 ca0a 	mla	sl, r6, sl, ip
 8012fd6:	fa1f fc83 	uxth.w	ip, r3
 8012fda:	ebab 0c0c 	sub.w	ip, fp, ip
 8012fde:	fa1f f38a 	uxth.w	r3, sl
 8012fe2:	fa1c fc82 	uxtah	ip, ip, r2
 8012fe6:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8012fea:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8012fee:	fa1f fc8c 	uxth.w	ip, ip
 8012ff2:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 8012ff6:	4577      	cmp	r7, lr
 8012ff8:	f840 3b04 	str.w	r3, [r0], #4
 8012ffc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013000:	ea4f 431a 	mov.w	r3, sl, lsr #16
 8013004:	d2da      	bcs.n	8012fbc <quorem+0x44>
 8013006:	9b00      	ldr	r3, [sp, #0]
 8013008:	f858 3003 	ldr.w	r3, [r8, r3]
 801300c:	b973      	cbnz	r3, 801302c <quorem+0xb4>
 801300e:	9b01      	ldr	r3, [sp, #4]
 8013010:	3b04      	subs	r3, #4
 8013012:	4598      	cmp	r8, r3
 8013014:	d304      	bcc.n	8013020 <quorem+0xa8>
 8013016:	e007      	b.n	8013028 <quorem+0xb0>
 8013018:	4598      	cmp	r8, r3
 801301a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801301e:	d203      	bcs.n	8013028 <quorem+0xb0>
 8013020:	f853 2904 	ldr.w	r2, [r3], #-4
 8013024:	2a00      	cmp	r2, #0
 8013026:	d0f7      	beq.n	8013018 <quorem+0xa0>
 8013028:	f8c9 4010 	str.w	r4, [r9, #16]
 801302c:	4648      	mov	r0, r9
 801302e:	f001 fe89 	bl	8014d44 <__mcmp>
 8013032:	2800      	cmp	r0, #0
 8013034:	db2b      	blt.n	801308e <quorem+0x116>
 8013036:	3601      	adds	r6, #1
 8013038:	4640      	mov	r0, r8
 801303a:	2300      	movs	r3, #0
 801303c:	f855 1b04 	ldr.w	r1, [r5], #4
 8013040:	f8d0 c000 	ldr.w	ip, [r0]
 8013044:	b28a      	uxth	r2, r1
 8013046:	1a9a      	subs	r2, r3, r2
 8013048:	0c0b      	lsrs	r3, r1, #16
 801304a:	fa12 f28c 	uxtah	r2, r2, ip
 801304e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 8013052:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8013056:	b292      	uxth	r2, r2
 8013058:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801305c:	42af      	cmp	r7, r5
 801305e:	f840 2b04 	str.w	r2, [r0], #4
 8013062:	ea4f 4323 	mov.w	r3, r3, asr #16
 8013066:	d2e9      	bcs.n	801303c <quorem+0xc4>
 8013068:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 801306c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8013070:	b96a      	cbnz	r2, 801308e <quorem+0x116>
 8013072:	3b04      	subs	r3, #4
 8013074:	4598      	cmp	r8, r3
 8013076:	d304      	bcc.n	8013082 <quorem+0x10a>
 8013078:	e007      	b.n	801308a <quorem+0x112>
 801307a:	4598      	cmp	r8, r3
 801307c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013080:	d203      	bcs.n	801308a <quorem+0x112>
 8013082:	f853 2904 	ldr.w	r2, [r3], #-4
 8013086:	2a00      	cmp	r2, #0
 8013088:	d0f7      	beq.n	801307a <quorem+0x102>
 801308a:	f8c9 4010 	str.w	r4, [r9, #16]
 801308e:	4630      	mov	r0, r6
 8013090:	b003      	add	sp, #12
 8013092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	2000      	movs	r0, #0
 8013098:	b003      	add	sp, #12
 801309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309e:	bf00      	nop

080130a0 <_dtoa_r>:
 80130a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a4:	ed2d 8b02 	vpush	{d8}
 80130a8:	b08f      	sub	sp, #60	; 0x3c
 80130aa:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80130ae:	9101      	str	r1, [sp, #4]
 80130b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80130b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80130b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80130b8:	ec57 6b10 	vmov	r6, r7, d0
 80130bc:	4604      	mov	r4, r0
 80130be:	b141      	cbz	r1, 80130d2 <_dtoa_r+0x32>
 80130c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130c2:	604a      	str	r2, [r1, #4]
 80130c4:	2301      	movs	r3, #1
 80130c6:	4093      	lsls	r3, r2
 80130c8:	608b      	str	r3, [r1, #8]
 80130ca:	f001 fbd9 	bl	8014880 <_Bfree>
 80130ce:	2300      	movs	r3, #0
 80130d0:	6423      	str	r3, [r4, #64]	; 0x40
 80130d2:	f1b7 0800 	subs.w	r8, r7, #0
 80130d6:	bfb4      	ite	lt
 80130d8:	2301      	movlt	r3, #1
 80130da:	2300      	movge	r3, #0
 80130dc:	602b      	str	r3, [r5, #0]
 80130de:	4bbe      	ldr	r3, [pc, #760]	; (80133d8 <_dtoa_r+0x338>)
 80130e0:	bfbc      	itt	lt
 80130e2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
 80130e6:	f8cd 800c 	strlt.w	r8, [sp, #12]
 80130ea:	ea33 0308 	bics.w	r3, r3, r8
 80130ee:	f000 809f 	beq.w	8013230 <_dtoa_r+0x190>
 80130f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80130f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fe:	d110      	bne.n	8013122 <_dtoa_r+0x82>
 8013100:	9a05      	ldr	r2, [sp, #20]
 8013102:	2301      	movs	r3, #1
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013108:	2b00      	cmp	r3, #0
 801310a:	f000 8239 	beq.w	8013580 <_dtoa_r+0x4e0>
 801310e:	48b3      	ldr	r0, [pc, #716]	; (80133dc <_dtoa_r+0x33c>)
 8013110:	6018      	str	r0, [r3, #0]
 8013112:	1e43      	subs	r3, r0, #1
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	9800      	ldr	r0, [sp, #0]
 8013118:	b00f      	add	sp, #60	; 0x3c
 801311a:	ecbd 8b02 	vpop	{d8}
 801311e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013122:	aa0c      	add	r2, sp, #48	; 0x30
 8013124:	a90d      	add	r1, sp, #52	; 0x34
 8013126:	4620      	mov	r0, r4
 8013128:	eeb0 0b48 	vmov.f64	d0, d8
 801312c:	f001 fed2 	bl	8014ed4 <__d2b>
 8013130:	ea5f 5318 	movs.w	r3, r8, lsr #20
 8013134:	4605      	mov	r5, r0
 8013136:	f040 8093 	bne.w	8013260 <_dtoa_r+0x1c0>
 801313a:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 801313e:	440b      	add	r3, r1
 8013140:	f203 4232 	addw	r2, r3, #1074	; 0x432
 8013144:	2a20      	cmp	r2, #32
 8013146:	f340 82ff 	ble.w	8013748 <_dtoa_r+0x6a8>
 801314a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 801314e:	fa08 f802 	lsl.w	r8, r8, r2
 8013152:	f203 4212 	addw	r2, r3, #1042	; 0x412
 8013156:	40d6      	lsrs	r6, r2
 8013158:	ea48 0206 	orr.w	r2, r8, r6
 801315c:	ee07 2a10 	vmov	s14, r2
 8013160:	eeb8 7b47 	vcvt.f64.u32	d7, s14
 8013164:	1e58      	subs	r0, r3, #1
 8013166:	ee17 6a90 	vmov	r6, s15
 801316a:	2301      	movs	r3, #1
 801316c:	9308      	str	r3, [sp, #32]
 801316e:	ec53 2b17 	vmov	r2, r3, d7
 8013172:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
 8013176:	ed9f 3b92 	vldr	d3, [pc, #584]	; 80133c0 <_dtoa_r+0x320>
 801317a:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80133c8 <_dtoa_r+0x328>
 801317e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 80133d0 <_dtoa_r+0x330>
 8013182:	ee06 0a90 	vmov	s13, r0
 8013186:	ec43 2b12 	vmov	d2, r2, r3
 801318a:	eeb8 4be6 	vcvt.f64.s32	d4, s13
 801318e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8013192:	ee32 6b46 	vsub.f64	d6, d2, d6
 8013196:	eea6 7b03 	vfma.f64	d7, d6, d3
 801319a:	eea4 7b05 	vfma.f64	d7, d4, d5
 801319e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80131a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80131a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131aa:	ee16 8a90 	vmov	r8, s13
 80131ae:	d508      	bpl.n	80131c2 <_dtoa_r+0x122>
 80131b0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80131b4:	eeb4 6b47 	vcmp.f64	d6, d7
 80131b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131bc:	bf18      	it	ne
 80131be:	f108 38ff 	addne.w	r8, r8, #4294967295	; 0xffffffff
 80131c2:	f1b8 0f16 	cmp.w	r8, #22
 80131c6:	f200 8145 	bhi.w	8013454 <_dtoa_r+0x3b4>
 80131ca:	4b85      	ldr	r3, [pc, #532]	; (80133e0 <_dtoa_r+0x340>)
 80131cc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80131d0:	ed93 7b00 	vldr	d7, [r3]
 80131d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80131d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131dc:	d557      	bpl.n	801328e <_dtoa_r+0x1ee>
 80131de:	1a09      	subs	r1, r1, r0
 80131e0:	2300      	movs	r3, #0
 80131e2:	1e4f      	subs	r7, r1, #1
 80131e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80131e8:	9309      	str	r3, [sp, #36]	; 0x24
 80131ea:	f100 8139 	bmi.w	8013460 <_dtoa_r+0x3c0>
 80131ee:	f04f 0900 	mov.w	r9, #0
 80131f2:	f1b8 0f00 	cmp.w	r8, #0
 80131f6:	da51      	bge.n	801329c <_dtoa_r+0x1fc>
 80131f8:	9b01      	ldr	r3, [sp, #4]
 80131fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80131fe:	2b09      	cmp	r3, #9
 8013200:	eba9 0908 	sub.w	r9, r9, r8
 8013204:	f1c8 0a00 	rsb	sl, r8, #0
 8013208:	f04f 0800 	mov.w	r8, #0
 801320c:	d84e      	bhi.n	80132ac <_dtoa_r+0x20c>
 801320e:	2b05      	cmp	r3, #5
 8013210:	f340 82a1 	ble.w	8013756 <_dtoa_r+0x6b6>
 8013214:	3b04      	subs	r3, #4
 8013216:	9301      	str	r3, [sp, #4]
 8013218:	2600      	movs	r6, #0
 801321a:	9b01      	ldr	r3, [sp, #4]
 801321c:	1e9a      	subs	r2, r3, #2
 801321e:	2a03      	cmp	r2, #3
 8013220:	f200 8122 	bhi.w	8013468 <_dtoa_r+0x3c8>
 8013224:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013228:	03ab03ae 	.word	0x03ab03ae
 801322c:	038203a2 	.word	0x038203a2
 8013230:	9a05      	ldr	r2, [sp, #20]
 8013232:	f242 730f 	movw	r3, #9999	; 0x270f
 8013236:	f3c8 0813 	ubfx	r8, r8, #0, #20
 801323a:	6013      	str	r3, [r2, #0]
 801323c:	ea58 0306 	orrs.w	r3, r8, r6
 8013240:	d11e      	bne.n	8013280 <_dtoa_r+0x1e0>
 8013242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013244:	2b00      	cmp	r3, #0
 8013246:	f000 8585 	beq.w	8013d54 <_dtoa_r+0xcb4>
 801324a:	4b66      	ldr	r3, [pc, #408]	; (80133e4 <_dtoa_r+0x344>)
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	3308      	adds	r3, #8
 8013250:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013252:	9800      	ldr	r0, [sp, #0]
 8013254:	6013      	str	r3, [r2, #0]
 8013256:	b00f      	add	sp, #60	; 0x3c
 8013258:	ecbd 8b02 	vpop	{d8}
 801325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013260:	ee18 6a90 	vmov	r6, s17
 8013264:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
 8013268:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801326c:	2300      	movs	r3, #0
 801326e:	9308      	str	r3, [sp, #32]
 8013270:	ec53 2b18 	vmov	r2, r3, d8
 8013274:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
 8013278:	990c      	ldr	r1, [sp, #48]	; 0x30
 801327a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801327e:	e77a      	b.n	8013176 <_dtoa_r+0xd6>
 8013280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013282:	2b00      	cmp	r3, #0
 8013284:	f040 8341 	bne.w	801390a <_dtoa_r+0x86a>
 8013288:	4b57      	ldr	r3, [pc, #348]	; (80133e8 <_dtoa_r+0x348>)
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	e743      	b.n	8013116 <_dtoa_r+0x76>
 801328e:	1a09      	subs	r1, r1, r0
 8013290:	2300      	movs	r3, #0
 8013292:	1e4f      	subs	r7, r1, #1
 8013294:	9309      	str	r3, [sp, #36]	; 0x24
 8013296:	f100 80e3 	bmi.w	8013460 <_dtoa_r+0x3c0>
 801329a:	4699      	mov	r9, r3
 801329c:	9b01      	ldr	r3, [sp, #4]
 801329e:	f8cd 8010 	str.w	r8, [sp, #16]
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	4447      	add	r7, r8
 80132a6:	f04f 0a00 	mov.w	sl, #0
 80132aa:	d9b0      	bls.n	801320e <_dtoa_r+0x16e>
 80132ac:	2300      	movs	r3, #0
 80132ae:	2601      	movs	r6, #1
 80132b0:	9301      	str	r3, [sp, #4]
 80132b2:	9607      	str	r6, [sp, #28]
 80132b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80132b8:	9306      	str	r3, [sp, #24]
 80132ba:	2100      	movs	r1, #0
 80132bc:	6461      	str	r1, [r4, #68]	; 0x44
 80132be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80132c2:	4620      	mov	r0, r4
 80132c4:	f001 fab6 	bl	8014834 <_Balloc>
 80132c8:	9000      	str	r0, [sp, #0]
 80132ca:	2800      	cmp	r0, #0
 80132cc:	f000 8531 	beq.w	8013d32 <_dtoa_r+0xc92>
 80132d0:	9b00      	ldr	r3, [sp, #0]
 80132d2:	6423      	str	r3, [r4, #64]	; 0x40
 80132d4:	f1bb 0f0e 	cmp.w	fp, #14
 80132d8:	f200 80d9 	bhi.w	801348e <_dtoa_r+0x3ee>
 80132dc:	2e00      	cmp	r6, #0
 80132de:	f000 80d6 	beq.w	801348e <_dtoa_r+0x3ee>
 80132e2:	9b04      	ldr	r3, [sp, #16]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f340 83d2 	ble.w	8013a8e <_dtoa_r+0x9ee>
 80132ea:	4a3d      	ldr	r2, [pc, #244]	; (80133e0 <_dtoa_r+0x340>)
 80132ec:	f003 010f 	and.w	r1, r3, #15
 80132f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80132f4:	ed92 7b00 	vldr	d7, [r2]
 80132f8:	111a      	asrs	r2, r3, #4
 80132fa:	05db      	lsls	r3, r3, #23
 80132fc:	f140 8374 	bpl.w	80139e8 <_dtoa_r+0x948>
 8013300:	493a      	ldr	r1, [pc, #232]	; (80133ec <_dtoa_r+0x34c>)
 8013302:	ed91 6b08 	vldr	d6, [r1, #32]
 8013306:	f002 020f 	and.w	r2, r2, #15
 801330a:	2003      	movs	r0, #3
 801330c:	ee88 5b06 	vdiv.f64	d5, d8, d6
 8013310:	b15a      	cbz	r2, 801332a <_dtoa_r+0x28a>
 8013312:	4936      	ldr	r1, [pc, #216]	; (80133ec <_dtoa_r+0x34c>)
 8013314:	07d6      	lsls	r6, r2, #31
 8013316:	d504      	bpl.n	8013322 <_dtoa_r+0x282>
 8013318:	ed91 6b00 	vldr	d6, [r1]
 801331c:	3001      	adds	r0, #1
 801331e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013322:	1052      	asrs	r2, r2, #1
 8013324:	f101 0108 	add.w	r1, r1, #8
 8013328:	d1f4      	bne.n	8013314 <_dtoa_r+0x274>
 801332a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 801332e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013330:	b13b      	cbz	r3, 8013342 <_dtoa_r+0x2a2>
 8013332:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013336:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333e:	f100 8498 	bmi.w	8013c72 <_dtoa_r+0xbd2>
 8013342:	ee07 0a90 	vmov	s15, r0
 8013346:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801334a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
 801334e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013352:	ee17 2a90 	vmov	r2, s15
 8013356:	ec51 0b17 	vmov	r0, r1, d7
 801335a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801335e:	f1bb 0f00 	cmp.w	fp, #0
 8013362:	f000 836e 	beq.w	8013a42 <_dtoa_r+0x9a2>
 8013366:	9e04      	ldr	r6, [sp, #16]
 8013368:	465a      	mov	r2, fp
 801336a:	9b07      	ldr	r3, [sp, #28]
 801336c:	2b00      	cmp	r3, #0
 801336e:	f000 8431 	beq.w	8013bd4 <_dtoa_r+0xb34>
 8013372:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013376:	4b1a      	ldr	r3, [pc, #104]	; (80133e0 <_dtoa_r+0x340>)
 8013378:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801337c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
 8013380:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 8013384:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013388:	ed1c 6b02 	vldr	d6, [ip, #-8]
 801338c:	ee83 5b06 	vdiv.f64	d5, d3, d6
 8013390:	ec41 0b16 	vmov	d6, r0, r1
 8013394:	ee14 0a90 	vmov	r0, s9
 8013398:	ee35 5b46 	vsub.f64	d5, d5, d6
 801339c:	9900      	ldr	r1, [sp, #0]
 801339e:	eeb4 7bc5 	vcmpe.f64	d7, d5
 80133a2:	3030      	adds	r0, #48	; 0x30
 80133a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a8:	f801 0b01 	strb.w	r0, [r1], #1
 80133ac:	f100 849b 	bmi.w	8013ce6 <_dtoa_r+0xc46>
 80133b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80133b4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80133b8:	f04f 0c00 	mov.w	ip, #0
 80133bc:	e031      	b.n	8013422 <_dtoa_r+0x382>
 80133be:	bf00      	nop
 80133c0:	636f4361 	.word	0x636f4361
 80133c4:	3fd287a7 	.word	0x3fd287a7
 80133c8:	8b60c8b3 	.word	0x8b60c8b3
 80133cc:	3fc68a28 	.word	0x3fc68a28
 80133d0:	509f79fb 	.word	0x509f79fb
 80133d4:	3fd34413 	.word	0x3fd34413
 80133d8:	7ff00000 	.word	0x7ff00000
 80133dc:	24008e69 	.word	0x24008e69
 80133e0:	24008f70 	.word	0x24008f70
 80133e4:	24008e90 	.word	0x24008e90
 80133e8:	24008e8c 	.word	0x24008e8c
 80133ec:	24008f48 	.word	0x24008f48
 80133f0:	f10c 0c01 	add.w	ip, ip, #1
 80133f4:	4594      	cmp	ip, r2
 80133f6:	da4a      	bge.n	801348e <_dtoa_r+0x3ee>
 80133f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80133fc:	ee25 5b04 	vmul.f64	d5, d5, d4
 8013400:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013404:	ee16 3a90 	vmov	r3, s13
 8013408:	eeb8 3be6 	vcvt.f64.s32	d3, s13
 801340c:	3330      	adds	r3, #48	; 0x30
 801340e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8013412:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8013416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341a:	f801 3b01 	strb.w	r3, [r1], #1
 801341e:	f100 8462 	bmi.w	8013ce6 <_dtoa_r+0xc46>
 8013422:	ee32 6b47 	vsub.f64	d6, d2, d7
 8013426:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342e:	d5df      	bpl.n	80133f0 <_dtoa_r+0x350>
 8013430:	9a00      	ldr	r2, [sp, #0]
 8013432:	9604      	str	r6, [sp, #16]
 8013434:	e002      	b.n	801343c <_dtoa_r+0x39c>
 8013436:	4291      	cmp	r1, r2
 8013438:	f000 843f 	beq.w	8013cba <_dtoa_r+0xc1a>
 801343c:	4689      	mov	r9, r1
 801343e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8013442:	2b39      	cmp	r3, #57	; 0x39
 8013444:	d0f7      	beq.n	8013436 <_dtoa_r+0x396>
 8013446:	3301      	adds	r3, #1
 8013448:	b2db      	uxtb	r3, r3
 801344a:	700b      	strb	r3, [r1, #0]
 801344c:	9b04      	ldr	r3, [sp, #16]
 801344e:	3301      	adds	r3, #1
 8013450:	9304      	str	r3, [sp, #16]
 8013452:	e161      	b.n	8013718 <_dtoa_r+0x678>
 8013454:	1a09      	subs	r1, r1, r0
 8013456:	2301      	movs	r3, #1
 8013458:	1e4f      	subs	r7, r1, #1
 801345a:	9309      	str	r3, [sp, #36]	; 0x24
 801345c:	f57f aec7 	bpl.w	80131ee <_dtoa_r+0x14e>
 8013460:	f1c1 0901 	rsb	r9, r1, #1
 8013464:	2700      	movs	r7, #0
 8013466:	e6c4      	b.n	80131f2 <_dtoa_r+0x152>
 8013468:	2600      	movs	r6, #0
 801346a:	6466      	str	r6, [r4, #68]	; 0x44
 801346c:	4631      	mov	r1, r6
 801346e:	4620      	mov	r0, r4
 8013470:	f001 f9e0 	bl	8014834 <_Balloc>
 8013474:	9000      	str	r0, [sp, #0]
 8013476:	2800      	cmp	r0, #0
 8013478:	f000 845b 	beq.w	8013d32 <_dtoa_r+0xc92>
 801347c:	9b00      	ldr	r3, [sp, #0]
 801347e:	6423      	str	r3, [r4, #64]	; 0x40
 8013480:	2201      	movs	r2, #1
 8013482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013486:	9606      	str	r6, [sp, #24]
 8013488:	930b      	str	r3, [sp, #44]	; 0x2c
 801348a:	9207      	str	r2, [sp, #28]
 801348c:	469b      	mov	fp, r3
 801348e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013490:	2a00      	cmp	r2, #0
 8013492:	db55      	blt.n	8013540 <_dtoa_r+0x4a0>
 8013494:	9904      	ldr	r1, [sp, #16]
 8013496:	290e      	cmp	r1, #14
 8013498:	dc52      	bgt.n	8013540 <_dtoa_r+0x4a0>
 801349a:	4bbb      	ldr	r3, [pc, #748]	; (8013788 <_dtoa_r+0x6e8>)
 801349c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80134a0:	ed93 6b00 	vldr	d6, [r3]
 80134a4:	9b06      	ldr	r3, [sp, #24]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	da15      	bge.n	80134d6 <_dtoa_r+0x436>
 80134aa:	f1bb 0f00 	cmp.w	fp, #0
 80134ae:	dc12      	bgt.n	80134d6 <_dtoa_r+0x436>
 80134b0:	f040 82db 	bne.w	8013a6a <_dtoa_r+0x9ca>
 80134b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80134b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80134bc:	eeb4 8bc6 	vcmpe.f64	d8, d6
 80134c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c4:	46da      	mov	sl, fp
 80134c6:	465e      	mov	r6, fp
 80134c8:	f200 8275 	bhi.w	80139b6 <_dtoa_r+0x916>
 80134cc:	9b06      	ldr	r3, [sp, #24]
 80134ce:	f8dd 8000 	ldr.w	r8, [sp]
 80134d2:	43df      	mvns	r7, r3
 80134d4:	e277      	b.n	80139c6 <_dtoa_r+0x926>
 80134d6:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80134da:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80134de:	9900      	ldr	r1, [sp, #0]
 80134e0:	ee17 3a10 	vmov	r3, s14
 80134e4:	f1bb 0f01 	cmp.w	fp, #1
 80134e8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80134ec:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80134f0:	f801 3b01 	strb.w	r3, [r1], #1
 80134f4:	eea5 8b46 	vfms.f64	d8, d5, d6
 80134f8:	f000 8322 	beq.w	8013b40 <_dtoa_r+0xaa0>
 80134fc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013500:	2301      	movs	r3, #1
 8013502:	e011      	b.n	8013528 <_dtoa_r+0x488>
 8013504:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8013508:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801350c:	3301      	adds	r3, #1
 801350e:	ee17 2a10 	vmov	r2, s14
 8013512:	455b      	cmp	r3, fp
 8013514:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8013518:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801351c:	f801 2b01 	strb.w	r2, [r1], #1
 8013520:	eea5 8b46 	vfms.f64	d8, d5, d6
 8013524:	f000 830c 	beq.w	8013b40 <_dtoa_r+0xaa0>
 8013528:	ee28 8b04 	vmul.f64	d8, d8, d4
 801352c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013534:	d1e6      	bne.n	8013504 <_dtoa_r+0x464>
 8013536:	9b04      	ldr	r3, [sp, #16]
 8013538:	3301      	adds	r3, #1
 801353a:	9304      	str	r3, [sp, #16]
 801353c:	4689      	mov	r9, r1
 801353e:	e0eb      	b.n	8013718 <_dtoa_r+0x678>
 8013540:	9b07      	ldr	r3, [sp, #28]
 8013542:	b32b      	cbz	r3, 8013590 <_dtoa_r+0x4f0>
 8013544:	9b01      	ldr	r3, [sp, #4]
 8013546:	2b01      	cmp	r3, #1
 8013548:	f340 8261 	ble.w	8013a0e <_dtoa_r+0x96e>
 801354c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013550:	459a      	cmp	sl, r3
 8013552:	f280 8246 	bge.w	80139e2 <_dtoa_r+0x942>
 8013556:	eba3 0a0a 	sub.w	sl, r3, sl
 801355a:	44d0      	add	r8, sl
 801355c:	469a      	mov	sl, r3
 801355e:	2300      	movs	r3, #0
 8013560:	f1bb 0f00 	cmp.w	fp, #0
 8013564:	f2c0 831d 	blt.w	8013ba2 <_dtoa_r+0xb02>
 8013568:	f8cd 9020 	str.w	r9, [sp, #32]
 801356c:	445f      	add	r7, fp
 801356e:	44d9      	add	r9, fp
 8013570:	2101      	movs	r1, #1
 8013572:	4620      	mov	r0, r4
 8013574:	930a      	str	r3, [sp, #40]	; 0x28
 8013576:	f001 fa31 	bl	80149dc <__i2b>
 801357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357c:	4606      	mov	r6, r0
 801357e:	e00b      	b.n	8013598 <_dtoa_r+0x4f8>
 8013580:	4b82      	ldr	r3, [pc, #520]	; (801378c <_dtoa_r+0x6ec>)
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	9800      	ldr	r0, [sp, #0]
 8013586:	b00f      	add	sp, #60	; 0x3c
 8013588:	ecbd 8b02 	vpop	{d8}
 801358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013590:	9e07      	ldr	r6, [sp, #28]
 8013592:	f8cd 9020 	str.w	r9, [sp, #32]
 8013596:	4653      	mov	r3, sl
 8013598:	9908      	ldr	r1, [sp, #32]
 801359a:	2900      	cmp	r1, #0
 801359c:	dd0a      	ble.n	80135b4 <_dtoa_r+0x514>
 801359e:	2f00      	cmp	r7, #0
 80135a0:	dd08      	ble.n	80135b4 <_dtoa_r+0x514>
 80135a2:	42b9      	cmp	r1, r7
 80135a4:	460a      	mov	r2, r1
 80135a6:	bfa8      	it	ge
 80135a8:	463a      	movge	r2, r7
 80135aa:	1a89      	subs	r1, r1, r2
 80135ac:	eba9 0902 	sub.w	r9, r9, r2
 80135b0:	9108      	str	r1, [sp, #32]
 80135b2:	1abf      	subs	r7, r7, r2
 80135b4:	f1ba 0f00 	cmp.w	sl, #0
 80135b8:	d01b      	beq.n	80135f2 <_dtoa_r+0x552>
 80135ba:	9a07      	ldr	r2, [sp, #28]
 80135bc:	2a00      	cmp	r2, #0
 80135be:	f000 825f 	beq.w	8013a80 <_dtoa_r+0x9e0>
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	dd11      	ble.n	80135ea <_dtoa_r+0x54a>
 80135c6:	461a      	mov	r2, r3
 80135c8:	4631      	mov	r1, r6
 80135ca:	4620      	mov	r0, r4
 80135cc:	930a      	str	r3, [sp, #40]	; 0x28
 80135ce:	f001 fae1 	bl	8014b94 <__pow5mult>
 80135d2:	462a      	mov	r2, r5
 80135d4:	4601      	mov	r1, r0
 80135d6:	4606      	mov	r6, r0
 80135d8:	4620      	mov	r0, r4
 80135da:	f001 fa2d 	bl	8014a38 <__multiply>
 80135de:	4629      	mov	r1, r5
 80135e0:	4605      	mov	r5, r0
 80135e2:	4620      	mov	r0, r4
 80135e4:	f001 f94c 	bl	8014880 <_Bfree>
 80135e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ea:	ebba 0203 	subs.w	r2, sl, r3
 80135ee:	f040 82d2 	bne.w	8013b96 <_dtoa_r+0xaf6>
 80135f2:	2101      	movs	r1, #1
 80135f4:	4620      	mov	r0, r4
 80135f6:	f001 f9f1 	bl	80149dc <__i2b>
 80135fa:	f1b8 0f00 	cmp.w	r8, #0
 80135fe:	4682      	mov	sl, r0
 8013600:	f300 80ab 	bgt.w	801375a <_dtoa_r+0x6ba>
 8013604:	9b01      	ldr	r3, [sp, #4]
 8013606:	2b01      	cmp	r3, #1
 8013608:	f340 8183 	ble.w	8013912 <_dtoa_r+0x872>
 801360c:	2300      	movs	r3, #0
 801360e:	930a      	str	r3, [sp, #40]	; 0x28
 8013610:	2001      	movs	r0, #1
 8013612:	f1b8 0f00 	cmp.w	r8, #0
 8013616:	f040 80ac 	bne.w	8013772 <_dtoa_r+0x6d2>
 801361a:	4438      	add	r0, r7
 801361c:	f010 001f 	ands.w	r0, r0, #31
 8013620:	f000 8090 	beq.w	8013744 <_dtoa_r+0x6a4>
 8013624:	f1c0 0220 	rsb	r2, r0, #32
 8013628:	2a04      	cmp	r2, #4
 801362a:	f340 8397 	ble.w	8013d5c <_dtoa_r+0xcbc>
 801362e:	f1c0 001c 	rsb	r0, r0, #28
 8013632:	9b08      	ldr	r3, [sp, #32]
 8013634:	4403      	add	r3, r0
 8013636:	4481      	add	r9, r0
 8013638:	9308      	str	r3, [sp, #32]
 801363a:	4407      	add	r7, r0
 801363c:	f1b9 0f00 	cmp.w	r9, #0
 8013640:	dd05      	ble.n	801364e <_dtoa_r+0x5ae>
 8013642:	4629      	mov	r1, r5
 8013644:	464a      	mov	r2, r9
 8013646:	4620      	mov	r0, r4
 8013648:	f001 fb04 	bl	8014c54 <__lshift>
 801364c:	4605      	mov	r5, r0
 801364e:	2f00      	cmp	r7, #0
 8013650:	dd05      	ble.n	801365e <_dtoa_r+0x5be>
 8013652:	4651      	mov	r1, sl
 8013654:	463a      	mov	r2, r7
 8013656:	4620      	mov	r0, r4
 8013658:	f001 fafc 	bl	8014c54 <__lshift>
 801365c:	4682      	mov	sl, r0
 801365e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013660:	2b00      	cmp	r3, #0
 8013662:	f040 8137 	bne.w	80138d4 <_dtoa_r+0x834>
 8013666:	f1bb 0f00 	cmp.w	fp, #0
 801366a:	f340 811d 	ble.w	80138a8 <_dtoa_r+0x808>
 801366e:	9b07      	ldr	r3, [sp, #28]
 8013670:	2b00      	cmp	r3, #0
 8013672:	f040 809b 	bne.w	80137ac <_dtoa_r+0x70c>
 8013676:	9b04      	ldr	r3, [sp, #16]
 8013678:	3301      	adds	r3, #1
 801367a:	9304      	str	r3, [sp, #16]
 801367c:	f8dd 8000 	ldr.w	r8, [sp]
 8013680:	2701      	movs	r7, #1
 8013682:	e007      	b.n	8013694 <_dtoa_r+0x5f4>
 8013684:	4629      	mov	r1, r5
 8013686:	2300      	movs	r3, #0
 8013688:	220a      	movs	r2, #10
 801368a:	4620      	mov	r0, r4
 801368c:	f001 f902 	bl	8014894 <__multadd>
 8013690:	3701      	adds	r7, #1
 8013692:	4605      	mov	r5, r0
 8013694:	4651      	mov	r1, sl
 8013696:	4628      	mov	r0, r5
 8013698:	f7ff fc6e 	bl	8012f78 <quorem>
 801369c:	455f      	cmp	r7, fp
 801369e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80136a2:	f808 0b01 	strb.w	r0, [r8], #1
 80136a6:	dbed      	blt.n	8013684 <_dtoa_r+0x5e4>
 80136a8:	f1bb 0f00 	cmp.w	fp, #0
 80136ac:	9a00      	ldr	r2, [sp, #0]
 80136ae:	bfd8      	it	le
 80136b0:	f04f 0b01 	movle.w	fp, #1
 80136b4:	4603      	mov	r3, r0
 80136b6:	4493      	add	fp, r2
 80136b8:	2700      	movs	r7, #0
 80136ba:	4629      	mov	r1, r5
 80136bc:	2201      	movs	r2, #1
 80136be:	4620      	mov	r0, r4
 80136c0:	9301      	str	r3, [sp, #4]
 80136c2:	f001 fac7 	bl	8014c54 <__lshift>
 80136c6:	4651      	mov	r1, sl
 80136c8:	4605      	mov	r5, r0
 80136ca:	f001 fb3b 	bl	8014d44 <__mcmp>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	f340 8192 	ble.w	80139f8 <_dtoa_r+0x958>
 80136d4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 80136d8:	9a00      	ldr	r2, [sp, #0]
 80136da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80136de:	e004      	b.n	80136ea <_dtoa_r+0x64a>
 80136e0:	455a      	cmp	r2, fp
 80136e2:	f000 81c6 	beq.w	8013a72 <_dtoa_r+0x9d2>
 80136e6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80136ea:	2b39      	cmp	r3, #57	; 0x39
 80136ec:	f10b 0901 	add.w	r9, fp, #1
 80136f0:	d0f6      	beq.n	80136e0 <_dtoa_r+0x640>
 80136f2:	3301      	adds	r3, #1
 80136f4:	f88b 3000 	strb.w	r3, [fp]
 80136f8:	4651      	mov	r1, sl
 80136fa:	4620      	mov	r0, r4
 80136fc:	f001 f8c0 	bl	8014880 <_Bfree>
 8013700:	b156      	cbz	r6, 8013718 <_dtoa_r+0x678>
 8013702:	b12f      	cbz	r7, 8013710 <_dtoa_r+0x670>
 8013704:	42b7      	cmp	r7, r6
 8013706:	d003      	beq.n	8013710 <_dtoa_r+0x670>
 8013708:	4639      	mov	r1, r7
 801370a:	4620      	mov	r0, r4
 801370c:	f001 f8b8 	bl	8014880 <_Bfree>
 8013710:	4631      	mov	r1, r6
 8013712:	4620      	mov	r0, r4
 8013714:	f001 f8b4 	bl	8014880 <_Bfree>
 8013718:	4629      	mov	r1, r5
 801371a:	4620      	mov	r0, r4
 801371c:	f001 f8b0 	bl	8014880 <_Bfree>
 8013720:	2300      	movs	r3, #0
 8013722:	f889 3000 	strb.w	r3, [r9]
 8013726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801372e:	2b00      	cmp	r3, #0
 8013730:	f43f acf1 	beq.w	8013116 <_dtoa_r+0x76>
 8013734:	9800      	ldr	r0, [sp, #0]
 8013736:	f8c3 9000 	str.w	r9, [r3]
 801373a:	b00f      	add	sp, #60	; 0x3c
 801373c:	ecbd 8b02 	vpop	{d8}
 8013740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013744:	201c      	movs	r0, #28
 8013746:	e774      	b.n	8013632 <_dtoa_r+0x592>
 8013748:	f1c2 0220 	rsb	r2, r2, #32
 801374c:	fa06 f202 	lsl.w	r2, r6, r2
 8013750:	ee07 2a10 	vmov	s14, r2
 8013754:	e504      	b.n	8013160 <_dtoa_r+0xc0>
 8013756:	2601      	movs	r6, #1
 8013758:	e55f      	b.n	801321a <_dtoa_r+0x17a>
 801375a:	4601      	mov	r1, r0
 801375c:	4642      	mov	r2, r8
 801375e:	4620      	mov	r0, r4
 8013760:	f001 fa18 	bl	8014b94 <__pow5mult>
 8013764:	9b01      	ldr	r3, [sp, #4]
 8013766:	2b01      	cmp	r3, #1
 8013768:	4682      	mov	sl, r0
 801376a:	f340 81b5 	ble.w	8013ad8 <_dtoa_r+0xa38>
 801376e:	2300      	movs	r3, #0
 8013770:	930a      	str	r3, [sp, #40]	; 0x28
 8013772:	f8da 2010 	ldr.w	r2, [sl, #16]
 8013776:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801377a:	6910      	ldr	r0, [r2, #16]
 801377c:	f001 f8de 	bl	801493c <__hi0bits>
 8013780:	f1c0 0020 	rsb	r0, r0, #32
 8013784:	e749      	b.n	801361a <_dtoa_r+0x57a>
 8013786:	bf00      	nop
 8013788:	24008f70 	.word	0x24008f70
 801378c:	24008e68 	.word	0x24008e68
 8013790:	4631      	mov	r1, r6
 8013792:	2300      	movs	r3, #0
 8013794:	220a      	movs	r2, #10
 8013796:	4620      	mov	r0, r4
 8013798:	f001 f87c 	bl	8014894 <__multadd>
 801379c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801379e:	2b00      	cmp	r3, #0
 80137a0:	4606      	mov	r6, r0
 80137a2:	f340 82b8 	ble.w	8013d16 <_dtoa_r+0xc76>
 80137a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80137aa:	469b      	mov	fp, r3
 80137ac:	9b08      	ldr	r3, [sp, #32]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	dd05      	ble.n	80137be <_dtoa_r+0x71e>
 80137b2:	4631      	mov	r1, r6
 80137b4:	461a      	mov	r2, r3
 80137b6:	4620      	mov	r0, r4
 80137b8:	f001 fa4c 	bl	8014c54 <__lshift>
 80137bc:	4606      	mov	r6, r0
 80137be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f040 81d1 	bne.w	8013b68 <_dtoa_r+0xac8>
 80137c6:	46b0      	mov	r8, r6
 80137c8:	9b02      	ldr	r3, [sp, #8]
 80137ca:	9f00      	ldr	r7, [sp, #0]
 80137cc:	f003 0201 	and.w	r2, r3, #1
 80137d0:	1e7b      	subs	r3, r7, #1
 80137d2:	445b      	add	r3, fp
 80137d4:	9308      	str	r3, [sp, #32]
 80137d6:	9b01      	ldr	r3, [sp, #4]
 80137d8:	920a      	str	r2, [sp, #40]	; 0x28
 80137da:	4313      	orrs	r3, r2
 80137dc:	9309      	str	r3, [sp, #36]	; 0x24
 80137de:	4651      	mov	r1, sl
 80137e0:	4628      	mov	r0, r5
 80137e2:	f7ff fbc9 	bl	8012f78 <quorem>
 80137e6:	4631      	mov	r1, r6
 80137e8:	4683      	mov	fp, r0
 80137ea:	4628      	mov	r0, r5
 80137ec:	f001 faaa 	bl	8014d44 <__mcmp>
 80137f0:	4642      	mov	r2, r8
 80137f2:	4651      	mov	r1, sl
 80137f4:	4681      	mov	r9, r0
 80137f6:	4620      	mov	r0, r4
 80137f8:	f001 fac6 	bl	8014d88 <__mdiff>
 80137fc:	68c2      	ldr	r2, [r0, #12]
 80137fe:	4601      	mov	r1, r0
 8013800:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8013804:	2a00      	cmp	r2, #0
 8013806:	d142      	bne.n	801388e <_dtoa_r+0x7ee>
 8013808:	e9cd 0306 	strd	r0, r3, [sp, #24]
 801380c:	4628      	mov	r0, r5
 801380e:	f001 fa99 	bl	8014d44 <__mcmp>
 8013812:	9906      	ldr	r1, [sp, #24]
 8013814:	9002      	str	r0, [sp, #8]
 8013816:	4620      	mov	r0, r4
 8013818:	f001 f832 	bl	8014880 <_Bfree>
 801381c:	9a02      	ldr	r2, [sp, #8]
 801381e:	9b07      	ldr	r3, [sp, #28]
 8013820:	b91a      	cbnz	r2, 801382a <_dtoa_r+0x78a>
 8013822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013824:	2900      	cmp	r1, #0
 8013826:	f000 8268 	beq.w	8013cfa <_dtoa_r+0xc5a>
 801382a:	f1b9 0f00 	cmp.w	r9, #0
 801382e:	f2c0 8169 	blt.w	8013b04 <_dtoa_r+0xa64>
 8013832:	9901      	ldr	r1, [sp, #4]
 8013834:	ea49 0901 	orr.w	r9, r9, r1
 8013838:	990a      	ldr	r1, [sp, #40]	; 0x28
 801383a:	ea51 0109 	orrs.w	r1, r1, r9
 801383e:	f000 8161 	beq.w	8013b04 <_dtoa_r+0xa64>
 8013842:	2a00      	cmp	r2, #0
 8013844:	f300 81b1 	bgt.w	8013baa <_dtoa_r+0xb0a>
 8013848:	9a08      	ldr	r2, [sp, #32]
 801384a:	703b      	strb	r3, [r7, #0]
 801384c:	f107 0901 	add.w	r9, r7, #1
 8013850:	4297      	cmp	r7, r2
 8013852:	46cb      	mov	fp, r9
 8013854:	f000 81af 	beq.w	8013bb6 <_dtoa_r+0xb16>
 8013858:	4629      	mov	r1, r5
 801385a:	2300      	movs	r3, #0
 801385c:	220a      	movs	r2, #10
 801385e:	4620      	mov	r0, r4
 8013860:	f001 f818 	bl	8014894 <__multadd>
 8013864:	4546      	cmp	r6, r8
 8013866:	4605      	mov	r5, r0
 8013868:	4631      	mov	r1, r6
 801386a:	f04f 0300 	mov.w	r3, #0
 801386e:	f04f 020a 	mov.w	r2, #10
 8013872:	4620      	mov	r0, r4
 8013874:	d012      	beq.n	801389c <_dtoa_r+0x7fc>
 8013876:	f001 f80d 	bl	8014894 <__multadd>
 801387a:	4641      	mov	r1, r8
 801387c:	4606      	mov	r6, r0
 801387e:	2300      	movs	r3, #0
 8013880:	220a      	movs	r2, #10
 8013882:	4620      	mov	r0, r4
 8013884:	f001 f806 	bl	8014894 <__multadd>
 8013888:	464f      	mov	r7, r9
 801388a:	4680      	mov	r8, r0
 801388c:	e7a7      	b.n	80137de <_dtoa_r+0x73e>
 801388e:	4620      	mov	r0, r4
 8013890:	9302      	str	r3, [sp, #8]
 8013892:	f000 fff5 	bl	8014880 <_Bfree>
 8013896:	9b02      	ldr	r3, [sp, #8]
 8013898:	2201      	movs	r2, #1
 801389a:	e7c6      	b.n	801382a <_dtoa_r+0x78a>
 801389c:	f000 fffa 	bl	8014894 <__multadd>
 80138a0:	464f      	mov	r7, r9
 80138a2:	4606      	mov	r6, r0
 80138a4:	4680      	mov	r8, r0
 80138a6:	e79a      	b.n	80137de <_dtoa_r+0x73e>
 80138a8:	9b01      	ldr	r3, [sp, #4]
 80138aa:	2b02      	cmp	r3, #2
 80138ac:	dc71      	bgt.n	8013992 <_dtoa_r+0x8f2>
 80138ae:	9b07      	ldr	r3, [sp, #28]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f47f af7b 	bne.w	80137ac <_dtoa_r+0x70c>
 80138b6:	9b04      	ldr	r3, [sp, #16]
 80138b8:	4651      	mov	r1, sl
 80138ba:	3301      	adds	r3, #1
 80138bc:	4628      	mov	r0, r5
 80138be:	9304      	str	r3, [sp, #16]
 80138c0:	f7ff fb5a 	bl	8012f78 <quorem>
 80138c4:	f8dd b000 	ldr.w	fp, [sp]
 80138c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80138cc:	f80b 3b01 	strb.w	r3, [fp], #1
 80138d0:	2700      	movs	r7, #0
 80138d2:	e6f2      	b.n	80136ba <_dtoa_r+0x61a>
 80138d4:	4651      	mov	r1, sl
 80138d6:	4628      	mov	r0, r5
 80138d8:	f001 fa34 	bl	8014d44 <__mcmp>
 80138dc:	2800      	cmp	r0, #0
 80138de:	f6bf aec2 	bge.w	8013666 <_dtoa_r+0x5c6>
 80138e2:	4629      	mov	r1, r5
 80138e4:	2300      	movs	r3, #0
 80138e6:	220a      	movs	r2, #10
 80138e8:	4620      	mov	r0, r4
 80138ea:	f000 ffd3 	bl	8014894 <__multadd>
 80138ee:	9b04      	ldr	r3, [sp, #16]
 80138f0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80138f4:	9b07      	ldr	r3, [sp, #28]
 80138f6:	4605      	mov	r5, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f47f af49 	bne.w	8013790 <_dtoa_r+0x6f0>
 80138fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013900:	2b00      	cmp	r3, #0
 8013902:	f340 8201 	ble.w	8013d08 <_dtoa_r+0xc68>
 8013906:	469b      	mov	fp, r3
 8013908:	e6b8      	b.n	801367c <_dtoa_r+0x5dc>
 801390a:	4bae      	ldr	r3, [pc, #696]	; (8013bc4 <_dtoa_r+0xb24>)
 801390c:	9300      	str	r3, [sp, #0]
 801390e:	3303      	adds	r3, #3
 8013910:	e49e      	b.n	8013250 <_dtoa_r+0x1b0>
 8013912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013916:	2800      	cmp	r0, #0
 8013918:	f47f ae78 	bne.w	801360c <_dtoa_r+0x56c>
 801391c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013920:	2a00      	cmp	r2, #0
 8013922:	f000 80e4 	beq.w	8013aee <_dtoa_r+0xa4e>
 8013926:	9b02      	ldr	r3, [sp, #8]
 8013928:	930a      	str	r3, [sp, #40]	; 0x28
 801392a:	e671      	b.n	8013610 <_dtoa_r+0x570>
 801392c:	2301      	movs	r3, #1
 801392e:	9307      	str	r3, [sp, #28]
 8013930:	9b06      	ldr	r3, [sp, #24]
 8013932:	9a04      	ldr	r2, [sp, #16]
 8013934:	4413      	add	r3, r2
 8013936:	f103 0b01 	add.w	fp, r3, #1
 801393a:	f1bb 0f01 	cmp.w	fp, #1
 801393e:	46dc      	mov	ip, fp
 8013940:	930b      	str	r3, [sp, #44]	; 0x2c
 8013942:	bfb8      	it	lt
 8013944:	f04f 0c01 	movlt.w	ip, #1
 8013948:	2100      	movs	r1, #0
 801394a:	f1bc 0f17 	cmp.w	ip, #23
 801394e:	6461      	str	r1, [r4, #68]	; 0x44
 8013950:	f77f acb7 	ble.w	80132c2 <_dtoa_r+0x222>
 8013954:	2001      	movs	r0, #1
 8013956:	2204      	movs	r2, #4
 8013958:	0052      	lsls	r2, r2, #1
 801395a:	f102 0314 	add.w	r3, r2, #20
 801395e:	4563      	cmp	r3, ip
 8013960:	4601      	mov	r1, r0
 8013962:	f100 0001 	add.w	r0, r0, #1
 8013966:	d9f7      	bls.n	8013958 <_dtoa_r+0x8b8>
 8013968:	6461      	str	r1, [r4, #68]	; 0x44
 801396a:	e4aa      	b.n	80132c2 <_dtoa_r+0x222>
 801396c:	2301      	movs	r3, #1
 801396e:	9307      	str	r3, [sp, #28]
 8013970:	9b06      	ldr	r3, [sp, #24]
 8013972:	2b00      	cmp	r3, #0
 8013974:	dd3c      	ble.n	80139f0 <_dtoa_r+0x950>
 8013976:	930b      	str	r3, [sp, #44]	; 0x2c
 8013978:	469b      	mov	fp, r3
 801397a:	469c      	mov	ip, r3
 801397c:	e7e4      	b.n	8013948 <_dtoa_r+0x8a8>
 801397e:	2300      	movs	r3, #0
 8013980:	9307      	str	r3, [sp, #28]
 8013982:	e7d5      	b.n	8013930 <_dtoa_r+0x890>
 8013984:	2300      	movs	r3, #0
 8013986:	9307      	str	r3, [sp, #28]
 8013988:	e7f2      	b.n	8013970 <_dtoa_r+0x8d0>
 801398a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801398e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013992:	f1bb 0f00 	cmp.w	fp, #0
 8013996:	f47f ad99 	bne.w	80134cc <_dtoa_r+0x42c>
 801399a:	4651      	mov	r1, sl
 801399c:	465b      	mov	r3, fp
 801399e:	2205      	movs	r2, #5
 80139a0:	4620      	mov	r0, r4
 80139a2:	f000 ff77 	bl	8014894 <__multadd>
 80139a6:	4601      	mov	r1, r0
 80139a8:	4682      	mov	sl, r0
 80139aa:	4628      	mov	r0, r5
 80139ac:	f001 f9ca 	bl	8014d44 <__mcmp>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	f77f ad8b 	ble.w	80134cc <_dtoa_r+0x42c>
 80139b6:	9800      	ldr	r0, [sp, #0]
 80139b8:	9f04      	ldr	r7, [sp, #16]
 80139ba:	2331      	movs	r3, #49	; 0x31
 80139bc:	4680      	mov	r8, r0
 80139be:	f800 3b01 	strb.w	r3, [r0], #1
 80139c2:	3701      	adds	r7, #1
 80139c4:	9000      	str	r0, [sp, #0]
 80139c6:	4651      	mov	r1, sl
 80139c8:	4620      	mov	r0, r4
 80139ca:	f000 ff59 	bl	8014880 <_Bfree>
 80139ce:	1c7b      	adds	r3, r7, #1
 80139d0:	f8dd 9000 	ldr.w	r9, [sp]
 80139d4:	9304      	str	r3, [sp, #16]
 80139d6:	f8cd 8000 	str.w	r8, [sp]
 80139da:	2e00      	cmp	r6, #0
 80139dc:	f47f ae98 	bne.w	8013710 <_dtoa_r+0x670>
 80139e0:	e69a      	b.n	8013718 <_dtoa_r+0x678>
 80139e2:	ebaa 0303 	sub.w	r3, sl, r3
 80139e6:	e5bb      	b.n	8013560 <_dtoa_r+0x4c0>
 80139e8:	2002      	movs	r0, #2
 80139ea:	eeb0 5b48 	vmov.f64	d5, d8
 80139ee:	e48f      	b.n	8013310 <_dtoa_r+0x270>
 80139f0:	2301      	movs	r3, #1
 80139f2:	9306      	str	r3, [sp, #24]
 80139f4:	469b      	mov	fp, r3
 80139f6:	e460      	b.n	80132ba <_dtoa_r+0x21a>
 80139f8:	d103      	bne.n	8013a02 <_dtoa_r+0x962>
 80139fa:	9b01      	ldr	r3, [sp, #4]
 80139fc:	07db      	lsls	r3, r3, #31
 80139fe:	f53f ae69 	bmi.w	80136d4 <_dtoa_r+0x634>
 8013a02:	46d9      	mov	r9, fp
 8013a04:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8013a08:	2b30      	cmp	r3, #48	; 0x30
 8013a0a:	d0fa      	beq.n	8013a02 <_dtoa_r+0x962>
 8013a0c:	e674      	b.n	80136f8 <_dtoa_r+0x658>
 8013a0e:	9b08      	ldr	r3, [sp, #32]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f000 8125 	beq.w	8013c60 <_dtoa_r+0xbc0>
 8013a16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a1a:	f8cd 9020 	str.w	r9, [sp, #32]
 8013a1e:	4417      	add	r7, r2
 8013a20:	4491      	add	r9, r2
 8013a22:	4653      	mov	r3, sl
 8013a24:	e5a4      	b.n	8013570 <_dtoa_r+0x4d0>
 8013a26:	ee07 0a90 	vmov	s15, r0
 8013a2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013a2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013a32:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013a36:	ee15 2a90 	vmov	r2, s11
 8013a3a:	ec51 0b15 	vmov	r0, r1, d5
 8013a3e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8013a42:	ec41 0b15 	vmov	d5, r0, r1
 8013a46:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013a4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013a4e:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8013a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a56:	f300 8140 	bgt.w	8013cda <_dtoa_r+0xc3a>
 8013a5a:	eeb1 5b45 	vneg.f64	d5, d5
 8013a5e:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8013a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a66:	f57f ad12 	bpl.w	801348e <_dtoa_r+0x3ee>
 8013a6a:	f04f 0a00 	mov.w	sl, #0
 8013a6e:	4656      	mov	r6, sl
 8013a70:	e52c      	b.n	80134cc <_dtoa_r+0x42c>
 8013a72:	9b04      	ldr	r3, [sp, #16]
 8013a74:	9a00      	ldr	r2, [sp, #0]
 8013a76:	3301      	adds	r3, #1
 8013a78:	9304      	str	r3, [sp, #16]
 8013a7a:	2331      	movs	r3, #49	; 0x31
 8013a7c:	7013      	strb	r3, [r2, #0]
 8013a7e:	e63b      	b.n	80136f8 <_dtoa_r+0x658>
 8013a80:	4629      	mov	r1, r5
 8013a82:	4652      	mov	r2, sl
 8013a84:	4620      	mov	r0, r4
 8013a86:	f001 f885 	bl	8014b94 <__pow5mult>
 8013a8a:	4605      	mov	r5, r0
 8013a8c:	e5b1      	b.n	80135f2 <_dtoa_r+0x552>
 8013a8e:	f000 810f 	beq.w	8013cb0 <_dtoa_r+0xc10>
 8013a92:	9b04      	ldr	r3, [sp, #16]
 8013a94:	494c      	ldr	r1, [pc, #304]	; (8013bc8 <_dtoa_r+0xb28>)
 8013a96:	425a      	negs	r2, r3
 8013a98:	f002 000f 	and.w	r0, r2, #15
 8013a9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013aa0:	ed91 6b00 	vldr	d6, [r1]
 8013aa4:	1112      	asrs	r2, r2, #4
 8013aa6:	ee28 6b06 	vmul.f64	d6, d8, d6
 8013aaa:	f000 813f 	beq.w	8013d2c <_dtoa_r+0xc8c>
 8013aae:	eeb0 7b46 	vmov.f64	d7, d6
 8013ab2:	4946      	ldr	r1, [pc, #280]	; (8013bcc <_dtoa_r+0xb2c>)
 8013ab4:	2600      	movs	r6, #0
 8013ab6:	2002      	movs	r0, #2
 8013ab8:	07d3      	lsls	r3, r2, #31
 8013aba:	d505      	bpl.n	8013ac8 <_dtoa_r+0xa28>
 8013abc:	ed91 5b00 	vldr	d5, [r1]
 8013ac0:	3001      	adds	r0, #1
 8013ac2:	2601      	movs	r6, #1
 8013ac4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013ac8:	1052      	asrs	r2, r2, #1
 8013aca:	f101 0108 	add.w	r1, r1, #8
 8013ace:	d1f3      	bne.n	8013ab8 <_dtoa_r+0xa18>
 8013ad0:	2e00      	cmp	r6, #0
 8013ad2:	fe06 6b07 	vseleq.f64	d6, d6, d7
 8013ad6:	e42a      	b.n	801332e <_dtoa_r+0x28e>
 8013ad8:	9b02      	ldr	r3, [sp, #8]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f47f ae47 	bne.w	801376e <_dtoa_r+0x6ce>
 8013ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ae4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013ae8:	2a00      	cmp	r2, #0
 8013aea:	f040 8129 	bne.w	8013d40 <_dtoa_r+0xca0>
 8013aee:	4a38      	ldr	r2, [pc, #224]	; (8013bd0 <_dtoa_r+0xb30>)
 8013af0:	400a      	ands	r2, r1
 8013af2:	2a00      	cmp	r2, #0
 8013af4:	f000 80f5 	beq.w	8013ce2 <_dtoa_r+0xc42>
 8013af8:	2301      	movs	r3, #1
 8013afa:	f109 0901 	add.w	r9, r9, #1
 8013afe:	3701      	adds	r7, #1
 8013b00:	930a      	str	r3, [sp, #40]	; 0x28
 8013b02:	e585      	b.n	8013610 <_dtoa_r+0x570>
 8013b04:	2a00      	cmp	r2, #0
 8013b06:	dd12      	ble.n	8013b2e <_dtoa_r+0xa8e>
 8013b08:	4629      	mov	r1, r5
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	9301      	str	r3, [sp, #4]
 8013b10:	f001 f8a0 	bl	8014c54 <__lshift>
 8013b14:	4651      	mov	r1, sl
 8013b16:	4605      	mov	r5, r0
 8013b18:	f001 f914 	bl	8014d44 <__mcmp>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	f340 80e5 	ble.w	8013cee <_dtoa_r+0xc4e>
 8013b24:	2b39      	cmp	r3, #57	; 0x39
 8013b26:	f000 80ce 	beq.w	8013cc6 <_dtoa_r+0xc26>
 8013b2a:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8013b2e:	46b9      	mov	r9, r7
 8013b30:	f809 3b01 	strb.w	r3, [r9], #1
 8013b34:	9b04      	ldr	r3, [sp, #16]
 8013b36:	3301      	adds	r3, #1
 8013b38:	4637      	mov	r7, r6
 8013b3a:	9304      	str	r3, [sp, #16]
 8013b3c:	4646      	mov	r6, r8
 8013b3e:	e5db      	b.n	80136f8 <_dtoa_r+0x658>
 8013b40:	ee38 8b08 	vadd.f64	d8, d8, d8
 8013b44:	eeb4 8bc6 	vcmpe.f64	d8, d6
 8013b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4c:	dc0a      	bgt.n	8013b64 <_dtoa_r+0xac4>
 8013b4e:	eeb4 8b46 	vcmp.f64	d8, d6
 8013b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b56:	f47f acee 	bne.w	8013536 <_dtoa_r+0x496>
 8013b5a:	ee17 3a10 	vmov	r3, s14
 8013b5e:	07d8      	lsls	r0, r3, #31
 8013b60:	f57f ace9 	bpl.w	8013536 <_dtoa_r+0x496>
 8013b64:	9a00      	ldr	r2, [sp, #0]
 8013b66:	e469      	b.n	801343c <_dtoa_r+0x39c>
 8013b68:	6871      	ldr	r1, [r6, #4]
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f000 fe62 	bl	8014834 <_Balloc>
 8013b70:	4607      	mov	r7, r0
 8013b72:	2800      	cmp	r0, #0
 8013b74:	f000 80e7 	beq.w	8013d46 <_dtoa_r+0xca6>
 8013b78:	6933      	ldr	r3, [r6, #16]
 8013b7a:	3302      	adds	r3, #2
 8013b7c:	009a      	lsls	r2, r3, #2
 8013b7e:	f106 010c 	add.w	r1, r6, #12
 8013b82:	300c      	adds	r0, #12
 8013b84:	f7f4 ffe0 	bl	8008b48 <memcpy>
 8013b88:	4639      	mov	r1, r7
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f001 f861 	bl	8014c54 <__lshift>
 8013b92:	4680      	mov	r8, r0
 8013b94:	e618      	b.n	80137c8 <_dtoa_r+0x728>
 8013b96:	4629      	mov	r1, r5
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 fffb 	bl	8014b94 <__pow5mult>
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	e527      	b.n	80135f2 <_dtoa_r+0x552>
 8013ba2:	eba9 020b 	sub.w	r2, r9, fp
 8013ba6:	9208      	str	r2, [sp, #32]
 8013ba8:	e4e2      	b.n	8013570 <_dtoa_r+0x4d0>
 8013baa:	2b39      	cmp	r3, #57	; 0x39
 8013bac:	f000 808b 	beq.w	8013cc6 <_dtoa_r+0xc26>
 8013bb0:	46b9      	mov	r9, r7
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	e7bc      	b.n	8013b30 <_dtoa_r+0xa90>
 8013bb6:	9a04      	ldr	r2, [sp, #16]
 8013bb8:	3201      	adds	r2, #1
 8013bba:	4637      	mov	r7, r6
 8013bbc:	9204      	str	r2, [sp, #16]
 8013bbe:	4646      	mov	r6, r8
 8013bc0:	e57b      	b.n	80136ba <_dtoa_r+0x61a>
 8013bc2:	bf00      	nop
 8013bc4:	24008e8c 	.word	0x24008e8c
 8013bc8:	24008f70 	.word	0x24008f70
 8013bcc:	24008f48 	.word	0x24008f48
 8013bd0:	7ff00000 	.word	0x7ff00000
 8013bd4:	4b64      	ldr	r3, [pc, #400]	; (8013d68 <_dtoa_r+0xcc8>)
 8013bd6:	eefd 5bc6 	vcvt.s32.f64	s11, d6
 8013bda:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
 8013bde:	ed1c 3b02 	vldr	d3, [ip, #-8]
 8013be2:	eeb8 7be5 	vcvt.f64.s32	d7, s11
 8013be6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013bea:	ec41 0b16 	vmov	d6, r0, r1
 8013bee:	ee15 1a90 	vmov	r1, s11
 8013bf2:	ee23 3b06 	vmul.f64	d3, d3, d6
 8013bf6:	9800      	ldr	r0, [sp, #0]
 8013bf8:	3130      	adds	r1, #48	; 0x30
 8013bfa:	2a01      	cmp	r2, #1
 8013bfc:	f800 1b01 	strb.w	r1, [r0], #1
 8013c00:	f000 8092 	beq.w	8013d28 <_dtoa_r+0xc88>
 8013c04:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013c08:	9b00      	ldr	r3, [sp, #0]
 8013c0a:	1899      	adds	r1, r3, r2
 8013c0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013c10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013c14:	ee16 3a90 	vmov	r3, s13
 8013c18:	3330      	adds	r3, #48	; 0x30
 8013c1a:	f800 3b01 	strb.w	r3, [r0], #1
 8013c1e:	4288      	cmp	r0, r1
 8013c20:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8013c24:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013c28:	d1f0      	bne.n	8013c0c <_dtoa_r+0xb6c>
 8013c2a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8013c2e:	ee33 5b06 	vadd.f64	d5, d3, d6
 8013c32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3a:	f53f abf9 	bmi.w	8013430 <_dtoa_r+0x390>
 8013c3e:	ee36 6b43 	vsub.f64	d6, d6, d3
 8013c42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4a:	f77f ac20 	ble.w	801348e <_dtoa_r+0x3ee>
 8013c4e:	4689      	mov	r9, r1
 8013c50:	3901      	subs	r1, #1
 8013c52:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8013c56:	2b30      	cmp	r3, #48	; 0x30
 8013c58:	d0f9      	beq.n	8013c4e <_dtoa_r+0xbae>
 8013c5a:	1c73      	adds	r3, r6, #1
 8013c5c:	9304      	str	r3, [sp, #16]
 8013c5e:	e55b      	b.n	8013718 <_dtoa_r+0x678>
 8013c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c62:	f8cd 9020 	str.w	r9, [sp, #32]
 8013c66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013c6a:	4417      	add	r7, r2
 8013c6c:	4491      	add	r9, r2
 8013c6e:	4653      	mov	r3, sl
 8013c70:	e47e      	b.n	8013570 <_dtoa_r+0x4d0>
 8013c72:	f1bb 0f00 	cmp.w	fp, #0
 8013c76:	f43f aed6 	beq.w	8013a26 <_dtoa_r+0x986>
 8013c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c7c:	2a00      	cmp	r2, #0
 8013c7e:	f77f ac06 	ble.w	801348e <_dtoa_r+0x3ee>
 8013c82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013c86:	ee26 6b04 	vmul.f64	d6, d6, d4
 8013c8a:	3001      	adds	r0, #1
 8013c8c:	ee07 0a90 	vmov	s15, r0
 8013c90:	9b04      	ldr	r3, [sp, #16]
 8013c92:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013c96:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
 8013c9a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013c9e:	ee17 ca90 	vmov	ip, s15
 8013ca2:	ec51 0b17 	vmov	r0, r1, d7
 8013ca6:	1e5e      	subs	r6, r3, #1
 8013ca8:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
 8013cac:	f7ff bb5d 	b.w	801336a <_dtoa_r+0x2ca>
 8013cb0:	2002      	movs	r0, #2
 8013cb2:	eeb0 6b48 	vmov.f64	d6, d8
 8013cb6:	f7ff bb3a 	b.w	801332e <_dtoa_r+0x28e>
 8013cba:	9b04      	ldr	r3, [sp, #16]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	9304      	str	r3, [sp, #16]
 8013cc0:	2331      	movs	r3, #49	; 0x31
 8013cc2:	f7ff bbc2 	b.w	801344a <_dtoa_r+0x3aa>
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	46bb      	mov	fp, r7
 8013cca:	3301      	adds	r3, #1
 8013ccc:	9304      	str	r3, [sp, #16]
 8013cce:	2339      	movs	r3, #57	; 0x39
 8013cd0:	4637      	mov	r7, r6
 8013cd2:	f80b 3b01 	strb.w	r3, [fp], #1
 8013cd6:	4646      	mov	r6, r8
 8013cd8:	e4fe      	b.n	80136d8 <_dtoa_r+0x638>
 8013cda:	f04f 0a00 	mov.w	sl, #0
 8013cde:	4656      	mov	r6, sl
 8013ce0:	e669      	b.n	80139b6 <_dtoa_r+0x916>
 8013ce2:	920a      	str	r2, [sp, #40]	; 0x28
 8013ce4:	e494      	b.n	8013610 <_dtoa_r+0x570>
 8013ce6:	1c73      	adds	r3, r6, #1
 8013ce8:	9304      	str	r3, [sp, #16]
 8013cea:	4689      	mov	r9, r1
 8013cec:	e514      	b.n	8013718 <_dtoa_r+0x678>
 8013cee:	f47f af1e 	bne.w	8013b2e <_dtoa_r+0xa8e>
 8013cf2:	07da      	lsls	r2, r3, #31
 8013cf4:	f57f af1b 	bpl.w	8013b2e <_dtoa_r+0xa8e>
 8013cf8:	e714      	b.n	8013b24 <_dtoa_r+0xa84>
 8013cfa:	2b39      	cmp	r3, #57	; 0x39
 8013cfc:	d0e3      	beq.n	8013cc6 <_dtoa_r+0xc26>
 8013cfe:	f1b9 0f00 	cmp.w	r9, #0
 8013d02:	f73f af12 	bgt.w	8013b2a <_dtoa_r+0xa8a>
 8013d06:	e712      	b.n	8013b2e <_dtoa_r+0xa8e>
 8013d08:	9b01      	ldr	r3, [sp, #4]
 8013d0a:	2b02      	cmp	r3, #2
 8013d0c:	f73f ae3d 	bgt.w	801398a <_dtoa_r+0x8ea>
 8013d10:	f8cd 8010 	str.w	r8, [sp, #16]
 8013d14:	e5cf      	b.n	80138b6 <_dtoa_r+0x816>
 8013d16:	9b01      	ldr	r3, [sp, #4]
 8013d18:	2b02      	cmp	r3, #2
 8013d1a:	f73f ae36 	bgt.w	801398a <_dtoa_r+0x8ea>
 8013d1e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8013d22:	f8cd 8010 	str.w	r8, [sp, #16]
 8013d26:	e541      	b.n	80137ac <_dtoa_r+0x70c>
 8013d28:	4601      	mov	r1, r0
 8013d2a:	e77e      	b.n	8013c2a <_dtoa_r+0xb8a>
 8013d2c:	2002      	movs	r0, #2
 8013d2e:	f7ff bafe 	b.w	801332e <_dtoa_r+0x28e>
 8013d32:	4b0e      	ldr	r3, [pc, #56]	; (8013d6c <_dtoa_r+0xccc>)
 8013d34:	480e      	ldr	r0, [pc, #56]	; (8013d70 <_dtoa_r+0xcd0>)
 8013d36:	2200      	movs	r2, #0
 8013d38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013d3c:	f002 fbb6 	bl	80164ac <__assert_func>
 8013d40:	9b02      	ldr	r3, [sp, #8]
 8013d42:	930a      	str	r3, [sp, #40]	; 0x28
 8013d44:	e515      	b.n	8013772 <_dtoa_r+0x6d2>
 8013d46:	4b09      	ldr	r3, [pc, #36]	; (8013d6c <_dtoa_r+0xccc>)
 8013d48:	4809      	ldr	r0, [pc, #36]	; (8013d70 <_dtoa_r+0xcd0>)
 8013d4a:	463a      	mov	r2, r7
 8013d4c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013d50:	f002 fbac 	bl	80164ac <__assert_func>
 8013d54:	4b07      	ldr	r3, [pc, #28]	; (8013d74 <_dtoa_r+0xcd4>)
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	f7ff b9dd 	b.w	8013116 <_dtoa_r+0x76>
 8013d5c:	f43f ac6e 	beq.w	801363c <_dtoa_r+0x59c>
 8013d60:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8013d64:	e465      	b.n	8013632 <_dtoa_r+0x592>
 8013d66:	bf00      	nop
 8013d68:	24008f70 	.word	0x24008f70
 8013d6c:	24008e9c 	.word	0x24008e9c
 8013d70:	24008eb0 	.word	0x24008eb0
 8013d74:	24008e90 	.word	0x24008e90

08013d78 <__sflush_r>:
 8013d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	460c      	mov	r4, r1
 8013d82:	0711      	lsls	r1, r2, #28
 8013d84:	4680      	mov	r8, r0
 8013d86:	d447      	bmi.n	8013e18 <__sflush_r+0xa0>
 8013d88:	6863      	ldr	r3, [r4, #4]
 8013d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	81a2      	strh	r2, [r4, #12]
 8013d92:	dd5e      	ble.n	8013e52 <__sflush_r+0xda>
 8013d94:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8013d96:	2d00      	cmp	r5, #0
 8013d98:	d058      	beq.n	8013e4c <__sflush_r+0xd4>
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f8d8 6000 	ldr.w	r6, [r8]
 8013da0:	f8c8 3000 	str.w	r3, [r8]
 8013da4:	b293      	uxth	r3, r2
 8013da6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013daa:	d156      	bne.n	8013e5a <__sflush_r+0xe2>
 8013dac:	2301      	movs	r3, #1
 8013dae:	69e1      	ldr	r1, [r4, #28]
 8013db0:	4640      	mov	r0, r8
 8013db2:	47a8      	blx	r5
 8013db4:	1c43      	adds	r3, r0, #1
 8013db6:	d067      	beq.n	8013e88 <__sflush_r+0x110>
 8013db8:	89a3      	ldrh	r3, [r4, #12]
 8013dba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8013dbc:	075f      	lsls	r7, r3, #29
 8013dbe:	d505      	bpl.n	8013dcc <__sflush_r+0x54>
 8013dc0:	6863      	ldr	r3, [r4, #4]
 8013dc2:	1ac0      	subs	r0, r0, r3
 8013dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013dc6:	b10b      	cbz	r3, 8013dcc <__sflush_r+0x54>
 8013dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013dca:	1ac0      	subs	r0, r0, r3
 8013dcc:	69e1      	ldr	r1, [r4, #28]
 8013dce:	4602      	mov	r2, r0
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	47a8      	blx	r5
 8013dd6:	1c41      	adds	r1, r0, #1
 8013dd8:	d141      	bne.n	8013e5e <__sflush_r+0xe6>
 8013dda:	f8d8 3000 	ldr.w	r3, [r8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d03d      	beq.n	8013e5e <__sflush_r+0xe6>
 8013de2:	2b1d      	cmp	r3, #29
 8013de4:	d001      	beq.n	8013dea <__sflush_r+0x72>
 8013de6:	2b16      	cmp	r3, #22
 8013de8:	d156      	bne.n	8013e98 <__sflush_r+0x120>
 8013dea:	89a3      	ldrh	r3, [r4, #12]
 8013dec:	6922      	ldr	r2, [r4, #16]
 8013dee:	6022      	str	r2, [r4, #0]
 8013df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013df4:	2100      	movs	r1, #0
 8013df6:	6061      	str	r1, [r4, #4]
 8013df8:	81a3      	strh	r3, [r4, #12]
 8013dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013dfc:	f8c8 6000 	str.w	r6, [r8]
 8013e00:	b321      	cbz	r1, 8013e4c <__sflush_r+0xd4>
 8013e02:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8013e06:	4299      	cmp	r1, r3
 8013e08:	d002      	beq.n	8013e10 <__sflush_r+0x98>
 8013e0a:	4640      	mov	r0, r8
 8013e0c:	f000 f978 	bl	8014100 <_free_r>
 8013e10:	2000      	movs	r0, #0
 8013e12:	6320      	str	r0, [r4, #48]	; 0x30
 8013e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e18:	6926      	ldr	r6, [r4, #16]
 8013e1a:	b1be      	cbz	r6, 8013e4c <__sflush_r+0xd4>
 8013e1c:	b293      	uxth	r3, r2
 8013e1e:	6825      	ldr	r5, [r4, #0]
 8013e20:	6026      	str	r6, [r4, #0]
 8013e22:	079a      	lsls	r2, r3, #30
 8013e24:	bf0c      	ite	eq
 8013e26:	6963      	ldreq	r3, [r4, #20]
 8013e28:	2300      	movne	r3, #0
 8013e2a:	1bad      	subs	r5, r5, r6
 8013e2c:	60a3      	str	r3, [r4, #8]
 8013e2e:	e00b      	b.n	8013e48 <__sflush_r+0xd0>
 8013e30:	462b      	mov	r3, r5
 8013e32:	4632      	mov	r2, r6
 8013e34:	69e1      	ldr	r1, [r4, #28]
 8013e36:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8013e38:	4640      	mov	r0, r8
 8013e3a:	47b8      	blx	r7
 8013e3c:	f1b0 0c00 	subs.w	ip, r0, #0
 8013e40:	eba5 050c 	sub.w	r5, r5, ip
 8013e44:	4466      	add	r6, ip
 8013e46:	dd17      	ble.n	8013e78 <__sflush_r+0x100>
 8013e48:	2d00      	cmp	r5, #0
 8013e4a:	dcf1      	bgt.n	8013e30 <__sflush_r+0xb8>
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	dc9d      	bgt.n	8013d94 <__sflush_r+0x1c>
 8013e58:	e7f8      	b.n	8013e4c <__sflush_r+0xd4>
 8013e5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8013e5c:	e7ae      	b.n	8013dbc <__sflush_r+0x44>
 8013e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e62:	6922      	ldr	r2, [r4, #16]
 8013e64:	6022      	str	r2, [r4, #0]
 8013e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e6a:	81a3      	strh	r3, [r4, #12]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	04db      	lsls	r3, r3, #19
 8013e70:	6062      	str	r2, [r4, #4]
 8013e72:	d5c2      	bpl.n	8013dfa <__sflush_r+0x82>
 8013e74:	6520      	str	r0, [r4, #80]	; 0x50
 8013e76:	e7c0      	b.n	8013dfa <__sflush_r+0x82>
 8013e78:	89a3      	ldrh	r3, [r4, #12]
 8013e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e82:	81a3      	strh	r3, [r4, #12]
 8013e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e88:	f8d8 3000 	ldr.w	r3, [r8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d093      	beq.n	8013db8 <__sflush_r+0x40>
 8013e90:	2b1d      	cmp	r3, #29
 8013e92:	d006      	beq.n	8013ea2 <__sflush_r+0x12a>
 8013e94:	2b16      	cmp	r3, #22
 8013e96:	d004      	beq.n	8013ea2 <__sflush_r+0x12a>
 8013e98:	89a3      	ldrh	r3, [r4, #12]
 8013e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e9e:	81a3      	strh	r3, [r4, #12]
 8013ea0:	e7d5      	b.n	8013e4e <__sflush_r+0xd6>
 8013ea2:	f8c8 6000 	str.w	r6, [r8]
 8013ea6:	e7d1      	b.n	8013e4c <__sflush_r+0xd4>

08013ea8 <_fflush_r>:
 8013ea8:	b538      	push	{r3, r4, r5, lr}
 8013eaa:	460c      	mov	r4, r1
 8013eac:	4605      	mov	r5, r0
 8013eae:	b108      	cbz	r0, 8013eb4 <_fflush_r+0xc>
 8013eb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013eb2:	b1a3      	cbz	r3, 8013ede <_fflush_r+0x36>
 8013eb4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8013eb8:	b1b8      	cbz	r0, 8013eea <_fflush_r+0x42>
 8013eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ebc:	07db      	lsls	r3, r3, #31
 8013ebe:	d401      	bmi.n	8013ec4 <_fflush_r+0x1c>
 8013ec0:	0581      	lsls	r1, r0, #22
 8013ec2:	d515      	bpl.n	8013ef0 <_fflush_r+0x48>
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	f7ff ff56 	bl	8013d78 <__sflush_r>
 8013ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ece:	07da      	lsls	r2, r3, #31
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	d402      	bmi.n	8013eda <_fflush_r+0x32>
 8013ed4:	89a3      	ldrh	r3, [r4, #12]
 8013ed6:	059b      	lsls	r3, r3, #22
 8013ed8:	d50e      	bpl.n	8013ef8 <_fflush_r+0x50>
 8013eda:	4628      	mov	r0, r5
 8013edc:	bd38      	pop	{r3, r4, r5, pc}
 8013ede:	f000 f817 	bl	8013f10 <__sinit>
 8013ee2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d1e7      	bne.n	8013eba <_fflush_r+0x12>
 8013eea:	4605      	mov	r5, r0
 8013eec:	4628      	mov	r0, r5
 8013eee:	bd38      	pop	{r3, r4, r5, pc}
 8013ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ef2:	f000 fbaf 	bl	8014654 <__retarget_lock_acquire_recursive>
 8013ef6:	e7e5      	b.n	8013ec4 <_fflush_r+0x1c>
 8013ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013efa:	f000 fbad 	bl	8014658 <__retarget_lock_release_recursive>
 8013efe:	4628      	mov	r0, r5
 8013f00:	bd38      	pop	{r3, r4, r5, pc}
 8013f02:	bf00      	nop

08013f04 <_cleanup_r>:
 8013f04:	4901      	ldr	r1, [pc, #4]	; (8013f0c <_cleanup_r+0x8>)
 8013f06:	f000 bb79 	b.w	80145fc <_fwalk_reent>
 8013f0a:	bf00      	nop
 8013f0c:	08016589 	.word	0x08016589

08013f10 <__sinit>:
 8013f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f14:	4682      	mov	sl, r0
 8013f16:	4839      	ldr	r0, [pc, #228]	; (8013ffc <__sinit+0xec>)
 8013f18:	f000 fb9c 	bl	8014654 <__retarget_lock_acquire_recursive>
 8013f1c:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8013f20:	2c00      	cmp	r4, #0
 8013f22:	d166      	bne.n	8013ff2 <__sinit+0xe2>
 8013f24:	f8da 5004 	ldr.w	r5, [sl, #4]
 8013f28:	4a35      	ldr	r2, [pc, #212]	; (8014000 <__sinit+0xf0>)
 8013f2a:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8013f2e:	2303      	movs	r3, #3
 8013f30:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
 8013f34:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8014014 <__sinit+0x104>
 8013f38:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8014018 <__sinit+0x108>
 8013f3c:	4f31      	ldr	r7, [pc, #196]	; (8014004 <__sinit+0xf4>)
 8013f3e:	4e32      	ldr	r6, [pc, #200]	; (8014008 <__sinit+0xf8>)
 8013f40:	2304      	movs	r3, #4
 8013f42:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 8013f46:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8013f50:	e9c5 4400 	strd	r4, r4, [r5]
 8013f54:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8013f58:	666c      	str	r4, [r5, #100]	; 0x64
 8013f5a:	2208      	movs	r2, #8
 8013f5c:	61ac      	str	r4, [r5, #24]
 8013f5e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8013f62:	f7fd f8bf 	bl	80110e4 <memset>
 8013f66:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8013f6a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8013f6e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8013f70:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8013f74:	f000 fb6a 	bl	801464c <__retarget_lock_init_recursive>
 8013f78:	f8da 5008 	ldr.w	r5, [sl, #8]
 8013f7c:	4b23      	ldr	r3, [pc, #140]	; (801400c <__sinit+0xfc>)
 8013f7e:	60eb      	str	r3, [r5, #12]
 8013f80:	4621      	mov	r1, r4
 8013f82:	e9c5 4400 	strd	r4, r4, [r5]
 8013f86:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8013f8a:	666c      	str	r4, [r5, #100]	; 0x64
 8013f8c:	60ac      	str	r4, [r5, #8]
 8013f8e:	61ac      	str	r4, [r5, #24]
 8013f90:	2208      	movs	r2, #8
 8013f92:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8013f96:	f7fd f8a5 	bl	80110e4 <memset>
 8013f9a:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8013f9e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8013fa2:	62ee      	str	r6, [r5, #44]	; 0x2c
 8013fa4:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8013fa8:	f000 fb50 	bl	801464c <__retarget_lock_init_recursive>
 8013fac:	f8da 500c 	ldr.w	r5, [sl, #12]
 8013fb0:	4b17      	ldr	r3, [pc, #92]	; (8014010 <__sinit+0x100>)
 8013fb2:	60eb      	str	r3, [r5, #12]
 8013fb4:	4621      	mov	r1, r4
 8013fb6:	e9c5 4400 	strd	r4, r4, [r5]
 8013fba:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8013fbe:	666c      	str	r4, [r5, #100]	; 0x64
 8013fc0:	60ac      	str	r4, [r5, #8]
 8013fc2:	61ac      	str	r4, [r5, #24]
 8013fc4:	2208      	movs	r2, #8
 8013fc6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8013fca:	f7fd f88b 	bl	80110e4 <memset>
 8013fce:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8013fd2:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8013fd6:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8013fda:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 8013fde:	f000 fb35 	bl	801464c <__retarget_lock_init_recursive>
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8013fe8:	4804      	ldr	r0, [pc, #16]	; (8013ffc <__sinit+0xec>)
 8013fea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fee:	f000 bb33 	b.w	8014658 <__retarget_lock_release_recursive>
 8013ff2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff6:	4801      	ldr	r0, [pc, #4]	; (8013ffc <__sinit+0xec>)
 8013ff8:	f000 bb2e 	b.w	8014658 <__retarget_lock_release_recursive>
 8013ffc:	24035b40 	.word	0x24035b40
 8014000:	08013f05 	.word	0x08013f05
 8014004:	0801545d 	.word	0x0801545d
 8014008:	0801547d 	.word	0x0801547d
 801400c:	00010009 	.word	0x00010009
 8014010:	00020012 	.word	0x00020012
 8014014:	080153f9 	.word	0x080153f9
 8014018:	0801541d 	.word	0x0801541d

0801401c <__sfp_lock_acquire>:
 801401c:	4801      	ldr	r0, [pc, #4]	; (8014024 <__sfp_lock_acquire+0x8>)
 801401e:	f000 bb19 	b.w	8014654 <__retarget_lock_acquire_recursive>
 8014022:	bf00      	nop
 8014024:	24035b3c 	.word	0x24035b3c

08014028 <__sfp_lock_release>:
 8014028:	4801      	ldr	r0, [pc, #4]	; (8014030 <__sfp_lock_release+0x8>)
 801402a:	f000 bb15 	b.w	8014658 <__retarget_lock_release_recursive>
 801402e:	bf00      	nop
 8014030:	24035b3c 	.word	0x24035b3c

08014034 <__libc_fini_array>:
 8014034:	b538      	push	{r3, r4, r5, lr}
 8014036:	4b08      	ldr	r3, [pc, #32]	; (8014058 <__libc_fini_array+0x24>)
 8014038:	4d08      	ldr	r5, [pc, #32]	; (801405c <__libc_fini_array+0x28>)
 801403a:	1b5b      	subs	r3, r3, r5
 801403c:	109c      	asrs	r4, r3, #2
 801403e:	d007      	beq.n	8014050 <__libc_fini_array+0x1c>
 8014040:	3b04      	subs	r3, #4
 8014042:	441d      	add	r5, r3
 8014044:	3c01      	subs	r4, #1
 8014046:	f855 3904 	ldr.w	r3, [r5], #-4
 801404a:	4798      	blx	r3
 801404c:	2c00      	cmp	r4, #0
 801404e:	d1f9      	bne.n	8014044 <__libc_fini_array+0x10>
 8014050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014054:	f002 bce2 	b.w	8016a1c <_fini>
 8014058:	08016a40 	.word	0x08016a40
 801405c:	08016a3c 	.word	0x08016a3c

08014060 <_malloc_trim_r>:
 8014060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014062:	4f24      	ldr	r7, [pc, #144]	; (80140f4 <_malloc_trim_r+0x94>)
 8014064:	460c      	mov	r4, r1
 8014066:	4606      	mov	r6, r0
 8014068:	f7fd f88e 	bl	8011188 <__malloc_lock>
 801406c:	68ba      	ldr	r2, [r7, #8]
 801406e:	6855      	ldr	r5, [r2, #4]
 8014070:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8014074:	330f      	adds	r3, #15
 8014076:	f025 0503 	bic.w	r5, r5, #3
 801407a:	442b      	add	r3, r5
 801407c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014080:	f023 030f 	bic.w	r3, r3, #15
 8014084:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8014088:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 801408c:	db07      	blt.n	801409e <_malloc_trim_r+0x3e>
 801408e:	2100      	movs	r1, #0
 8014090:	4630      	mov	r0, r6
 8014092:	f7fd f95b 	bl	801134c <_sbrk_r>
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	442b      	add	r3, r5
 801409a:	4298      	cmp	r0, r3
 801409c:	d004      	beq.n	80140a8 <_malloc_trim_r+0x48>
 801409e:	4630      	mov	r0, r6
 80140a0:	f7fd f878 	bl	8011194 <__malloc_unlock>
 80140a4:	2000      	movs	r0, #0
 80140a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a8:	4261      	negs	r1, r4
 80140aa:	4630      	mov	r0, r6
 80140ac:	f7fd f94e 	bl	801134c <_sbrk_r>
 80140b0:	3001      	adds	r0, #1
 80140b2:	d00d      	beq.n	80140d0 <_malloc_trim_r+0x70>
 80140b4:	4a10      	ldr	r2, [pc, #64]	; (80140f8 <_malloc_trim_r+0x98>)
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	1b2d      	subs	r5, r5, r4
 80140ba:	f045 0501 	orr.w	r5, r5, #1
 80140be:	605d      	str	r5, [r3, #4]
 80140c0:	6813      	ldr	r3, [r2, #0]
 80140c2:	4630      	mov	r0, r6
 80140c4:	1b1b      	subs	r3, r3, r4
 80140c6:	6013      	str	r3, [r2, #0]
 80140c8:	f7fd f864 	bl	8011194 <__malloc_unlock>
 80140cc:	2001      	movs	r0, #1
 80140ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d0:	2100      	movs	r1, #0
 80140d2:	4630      	mov	r0, r6
 80140d4:	f7fd f93a 	bl	801134c <_sbrk_r>
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	1a83      	subs	r3, r0, r2
 80140dc:	2b0f      	cmp	r3, #15
 80140de:	ddde      	ble.n	801409e <_malloc_trim_r+0x3e>
 80140e0:	f043 0301 	orr.w	r3, r3, #1
 80140e4:	6053      	str	r3, [r2, #4]
 80140e6:	4b05      	ldr	r3, [pc, #20]	; (80140fc <_malloc_trim_r+0x9c>)
 80140e8:	4903      	ldr	r1, [pc, #12]	; (80140f8 <_malloc_trim_r+0x98>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	1ac0      	subs	r0, r0, r3
 80140ee:	6008      	str	r0, [r1, #0]
 80140f0:	e7d5      	b.n	801409e <_malloc_trim_r+0x3e>
 80140f2:	bf00      	nop
 80140f4:	240085f8 	.word	0x240085f8
 80140f8:	24035afc 	.word	0x24035afc
 80140fc:	24008a00 	.word	0x24008a00

08014100 <_free_r>:
 8014100:	2900      	cmp	r1, #0
 8014102:	d061      	beq.n	80141c8 <_free_r+0xc8>
 8014104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014106:	460c      	mov	r4, r1
 8014108:	4606      	mov	r6, r0
 801410a:	f7fd f83d 	bl	8011188 <__malloc_lock>
 801410e:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8014112:	4f7b      	ldr	r7, [pc, #492]	; (8014300 <_free_r+0x200>)
 8014114:	f1a4 0508 	sub.w	r5, r4, #8
 8014118:	f022 0101 	bic.w	r1, r2, #1
 801411c:	eb05 0c01 	add.w	ip, r5, r1
 8014120:	68b8      	ldr	r0, [r7, #8]
 8014122:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8014126:	4560      	cmp	r0, ip
 8014128:	f023 0303 	bic.w	r3, r3, #3
 801412c:	f000 808b 	beq.w	8014246 <_free_r+0x146>
 8014130:	07d2      	lsls	r2, r2, #31
 8014132:	f8cc 3004 	str.w	r3, [ip, #4]
 8014136:	d432      	bmi.n	801419e <_free_r+0x9e>
 8014138:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801413c:	1aad      	subs	r5, r5, r2
 801413e:	4411      	add	r1, r2
 8014140:	68aa      	ldr	r2, [r5, #8]
 8014142:	f107 0008 	add.w	r0, r7, #8
 8014146:	4282      	cmp	r2, r0
 8014148:	d06a      	beq.n	8014220 <_free_r+0x120>
 801414a:	eb0c 0403 	add.w	r4, ip, r3
 801414e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8014152:	68ec      	ldr	r4, [r5, #12]
 8014154:	60d4      	str	r4, [r2, #12]
 8014156:	f01e 0f01 	tst.w	lr, #1
 801415a:	60a2      	str	r2, [r4, #8]
 801415c:	f000 8097 	beq.w	801428e <_free_r+0x18e>
 8014160:	f041 0301 	orr.w	r3, r1, #1
 8014164:	606b      	str	r3, [r5, #4]
 8014166:	f8cc 1000 	str.w	r1, [ip]
 801416a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801416e:	d235      	bcs.n	80141dc <_free_r+0xdc>
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	08cb      	lsrs	r3, r1, #3
 8014174:	0948      	lsrs	r0, r1, #5
 8014176:	2101      	movs	r1, #1
 8014178:	3301      	adds	r3, #1
 801417a:	4081      	lsls	r1, r0
 801417c:	4311      	orrs	r1, r2
 801417e:	6079      	str	r1, [r7, #4]
 8014180:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8014184:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8014188:	3a08      	subs	r2, #8
 801418a:	e9c5 1202 	strd	r1, r2, [r5, #8]
 801418e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8014192:	60cd      	str	r5, [r1, #12]
 8014194:	4630      	mov	r0, r6
 8014196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801419a:	f7fc bffb 	b.w	8011194 <__malloc_unlock>
 801419e:	eb0c 0203 	add.w	r2, ip, r3
 80141a2:	6852      	ldr	r2, [r2, #4]
 80141a4:	07d0      	lsls	r0, r2, #31
 80141a6:	d410      	bmi.n	80141ca <_free_r+0xca>
 80141a8:	4419      	add	r1, r3
 80141aa:	f107 0008 	add.w	r0, r7, #8
 80141ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80141b2:	4283      	cmp	r3, r0
 80141b4:	d073      	beq.n	801429e <_free_r+0x19e>
 80141b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80141ba:	60da      	str	r2, [r3, #12]
 80141bc:	6093      	str	r3, [r2, #8]
 80141be:	f041 0301 	orr.w	r3, r1, #1
 80141c2:	606b      	str	r3, [r5, #4]
 80141c4:	5069      	str	r1, [r5, r1]
 80141c6:	e7d0      	b.n	801416a <_free_r+0x6a>
 80141c8:	4770      	bx	lr
 80141ca:	f041 0301 	orr.w	r3, r1, #1
 80141ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80141d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80141d6:	f8cc 1000 	str.w	r1, [ip]
 80141da:	d3c9      	bcc.n	8014170 <_free_r+0x70>
 80141dc:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80141e0:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80141e4:	d248      	bcs.n	8014278 <_free_r+0x178>
 80141e6:	098b      	lsrs	r3, r1, #6
 80141e8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80141ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80141f0:	00c3      	lsls	r3, r0, #3
 80141f2:	18f8      	adds	r0, r7, r3
 80141f4:	58fb      	ldr	r3, [r7, r3]
 80141f6:	3808      	subs	r0, #8
 80141f8:	4298      	cmp	r0, r3
 80141fa:	d059      	beq.n	80142b0 <_free_r+0x1b0>
 80141fc:	685a      	ldr	r2, [r3, #4]
 80141fe:	f022 0203 	bic.w	r2, r2, #3
 8014202:	428a      	cmp	r2, r1
 8014204:	d902      	bls.n	801420c <_free_r+0x10c>
 8014206:	689b      	ldr	r3, [r3, #8]
 8014208:	4298      	cmp	r0, r3
 801420a:	d1f7      	bne.n	80141fc <_free_r+0xfc>
 801420c:	68d8      	ldr	r0, [r3, #12]
 801420e:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8014212:	6085      	str	r5, [r0, #8]
 8014214:	60dd      	str	r5, [r3, #12]
 8014216:	4630      	mov	r0, r6
 8014218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801421c:	f7fc bfba 	b.w	8011194 <__malloc_unlock>
 8014220:	eb0c 0203 	add.w	r2, ip, r3
 8014224:	6852      	ldr	r2, [r2, #4]
 8014226:	07d2      	lsls	r2, r2, #31
 8014228:	d463      	bmi.n	80142f2 <_free_r+0x1f2>
 801422a:	440b      	add	r3, r1
 801422c:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8014230:	60ca      	str	r2, [r1, #12]
 8014232:	6091      	str	r1, [r2, #8]
 8014234:	f043 0201 	orr.w	r2, r3, #1
 8014238:	606a      	str	r2, [r5, #4]
 801423a:	4630      	mov	r0, r6
 801423c:	50eb      	str	r3, [r5, r3]
 801423e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014242:	f7fc bfa7 	b.w	8011194 <__malloc_unlock>
 8014246:	440b      	add	r3, r1
 8014248:	07d1      	lsls	r1, r2, #31
 801424a:	d407      	bmi.n	801425c <_free_r+0x15c>
 801424c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8014250:	1aad      	subs	r5, r5, r2
 8014252:	4413      	add	r3, r2
 8014254:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8014258:	60ca      	str	r2, [r1, #12]
 801425a:	6091      	str	r1, [r2, #8]
 801425c:	f043 0201 	orr.w	r2, r3, #1
 8014260:	606a      	str	r2, [r5, #4]
 8014262:	4a28      	ldr	r2, [pc, #160]	; (8014304 <_free_r+0x204>)
 8014264:	60bd      	str	r5, [r7, #8]
 8014266:	6812      	ldr	r2, [r2, #0]
 8014268:	429a      	cmp	r2, r3
 801426a:	d893      	bhi.n	8014194 <_free_r+0x94>
 801426c:	4b26      	ldr	r3, [pc, #152]	; (8014308 <_free_r+0x208>)
 801426e:	4630      	mov	r0, r6
 8014270:	6819      	ldr	r1, [r3, #0]
 8014272:	f7ff fef5 	bl	8014060 <_malloc_trim_r>
 8014276:	e78d      	b.n	8014194 <_free_r+0x94>
 8014278:	2b14      	cmp	r3, #20
 801427a:	d90a      	bls.n	8014292 <_free_r+0x192>
 801427c:	2b54      	cmp	r3, #84	; 0x54
 801427e:	d81f      	bhi.n	80142c0 <_free_r+0x1c0>
 8014280:	0b0b      	lsrs	r3, r1, #12
 8014282:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8014286:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 801428a:	00c3      	lsls	r3, r0, #3
 801428c:	e7b1      	b.n	80141f2 <_free_r+0xf2>
 801428e:	4419      	add	r1, r3
 8014290:	e78d      	b.n	80141ae <_free_r+0xae>
 8014292:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8014296:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 801429a:	00c3      	lsls	r3, r0, #3
 801429c:	e7a9      	b.n	80141f2 <_free_r+0xf2>
 801429e:	f041 0301 	orr.w	r3, r1, #1
 80142a2:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80142a6:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80142aa:	606b      	str	r3, [r5, #4]
 80142ac:	5069      	str	r1, [r5, r1]
 80142ae:	e771      	b.n	8014194 <_free_r+0x94>
 80142b0:	6879      	ldr	r1, [r7, #4]
 80142b2:	1092      	asrs	r2, r2, #2
 80142b4:	2401      	movs	r4, #1
 80142b6:	fa04 f202 	lsl.w	r2, r4, r2
 80142ba:	430a      	orrs	r2, r1
 80142bc:	607a      	str	r2, [r7, #4]
 80142be:	e7a6      	b.n	801420e <_free_r+0x10e>
 80142c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80142c4:	d806      	bhi.n	80142d4 <_free_r+0x1d4>
 80142c6:	0bcb      	lsrs	r3, r1, #15
 80142c8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80142cc:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80142d0:	00c3      	lsls	r3, r0, #3
 80142d2:	e78e      	b.n	80141f2 <_free_r+0xf2>
 80142d4:	f240 5254 	movw	r2, #1364	; 0x554
 80142d8:	4293      	cmp	r3, r2
 80142da:	d806      	bhi.n	80142ea <_free_r+0x1ea>
 80142dc:	0c8b      	lsrs	r3, r1, #18
 80142de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80142e2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80142e6:	00c3      	lsls	r3, r0, #3
 80142e8:	e783      	b.n	80141f2 <_free_r+0xf2>
 80142ea:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80142ee:	227e      	movs	r2, #126	; 0x7e
 80142f0:	e77f      	b.n	80141f2 <_free_r+0xf2>
 80142f2:	f041 0301 	orr.w	r3, r1, #1
 80142f6:	606b      	str	r3, [r5, #4]
 80142f8:	f8cc 1000 	str.w	r1, [ip]
 80142fc:	e74a      	b.n	8014194 <_free_r+0x94>
 80142fe:	bf00      	nop
 8014300:	240085f8 	.word	0x240085f8
 8014304:	24008a04 	.word	0x24008a04
 8014308:	24035b2c 	.word	0x24035b2c

0801430c <__sfvwrite_r>:
 801430c:	6893      	ldr	r3, [r2, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	f000 8085 	beq.w	801441e <__sfvwrite_r+0x112>
 8014314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014318:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 801431c:	460c      	mov	r4, r1
 801431e:	0719      	lsls	r1, r3, #28
 8014320:	4680      	mov	r8, r0
 8014322:	b083      	sub	sp, #12
 8014324:	4617      	mov	r7, r2
 8014326:	b298      	uxth	r0, r3
 8014328:	d525      	bpl.n	8014376 <__sfvwrite_r+0x6a>
 801432a:	6923      	ldr	r3, [r4, #16]
 801432c:	b31b      	cbz	r3, 8014376 <__sfvwrite_r+0x6a>
 801432e:	f010 0302 	ands.w	r3, r0, #2
 8014332:	683d      	ldr	r5, [r7, #0]
 8014334:	d02d      	beq.n	8014392 <__sfvwrite_r+0x86>
 8014336:	f04f 0a00 	mov.w	sl, #0
 801433a:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80145f8 <__sfvwrite_r+0x2ec>
 801433e:	4656      	mov	r6, sl
 8014340:	46b9      	mov	r9, r7
 8014342:	455e      	cmp	r6, fp
 8014344:	4633      	mov	r3, r6
 8014346:	4652      	mov	r2, sl
 8014348:	bf28      	it	cs
 801434a:	465b      	movcs	r3, fp
 801434c:	4640      	mov	r0, r8
 801434e:	2e00      	cmp	r6, #0
 8014350:	d052      	beq.n	80143f8 <__sfvwrite_r+0xec>
 8014352:	69e1      	ldr	r1, [r4, #28]
 8014354:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8014356:	47b8      	blx	r7
 8014358:	2800      	cmp	r0, #0
 801435a:	dd56      	ble.n	801440a <__sfvwrite_r+0xfe>
 801435c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014360:	1a1b      	subs	r3, r3, r0
 8014362:	4482      	add	sl, r0
 8014364:	1a36      	subs	r6, r6, r0
 8014366:	f8c9 3008 	str.w	r3, [r9, #8]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d1e9      	bne.n	8014342 <__sfvwrite_r+0x36>
 801436e:	2000      	movs	r0, #0
 8014370:	b003      	add	sp, #12
 8014372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014376:	4621      	mov	r1, r4
 8014378:	4640      	mov	r0, r8
 801437a:	f7fe fd83 	bl	8012e84 <__swsetup_r>
 801437e:	2800      	cmp	r0, #0
 8014380:	f040 8136 	bne.w	80145f0 <__sfvwrite_r+0x2e4>
 8014384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014388:	683d      	ldr	r5, [r7, #0]
 801438a:	b298      	uxth	r0, r3
 801438c:	f010 0302 	ands.w	r3, r0, #2
 8014390:	d1d1      	bne.n	8014336 <__sfvwrite_r+0x2a>
 8014392:	f010 0901 	ands.w	r9, r0, #1
 8014396:	d144      	bne.n	8014422 <__sfvwrite_r+0x116>
 8014398:	464e      	mov	r6, r9
 801439a:	9700      	str	r7, [sp, #0]
 801439c:	b346      	cbz	r6, 80143f0 <__sfvwrite_r+0xe4>
 801439e:	0582      	lsls	r2, r0, #22
 80143a0:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80143a4:	f140 8083 	bpl.w	80144ae <__sfvwrite_r+0x1a2>
 80143a8:	45b3      	cmp	fp, r6
 80143aa:	465a      	mov	r2, fp
 80143ac:	f200 80b2 	bhi.w	8014514 <__sfvwrite_r+0x208>
 80143b0:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80143b4:	f040 80bf 	bne.w	8014536 <__sfvwrite_r+0x22a>
 80143b8:	6820      	ldr	r0, [r4, #0]
 80143ba:	9201      	str	r2, [sp, #4]
 80143bc:	4649      	mov	r1, r9
 80143be:	f000 f9bd 	bl	801473c <memmove>
 80143c2:	68a3      	ldr	r3, [r4, #8]
 80143c4:	9a01      	ldr	r2, [sp, #4]
 80143c6:	eba3 010b 	sub.w	r1, r3, fp
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	60a1      	str	r1, [r4, #8]
 80143ce:	4413      	add	r3, r2
 80143d0:	46b2      	mov	sl, r6
 80143d2:	6023      	str	r3, [r4, #0]
 80143d4:	2600      	movs	r6, #0
 80143d6:	9b00      	ldr	r3, [sp, #0]
 80143d8:	6898      	ldr	r0, [r3, #8]
 80143da:	eba0 000a 	sub.w	r0, r0, sl
 80143de:	44d1      	add	r9, sl
 80143e0:	6098      	str	r0, [r3, #8]
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d0c3      	beq.n	801436e <__sfvwrite_r+0x62>
 80143e6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80143ea:	b280      	uxth	r0, r0
 80143ec:	2e00      	cmp	r6, #0
 80143ee:	d1d6      	bne.n	801439e <__sfvwrite_r+0x92>
 80143f0:	e9d5 9600 	ldrd	r9, r6, [r5]
 80143f4:	3508      	adds	r5, #8
 80143f6:	e7d1      	b.n	801439c <__sfvwrite_r+0x90>
 80143f8:	e9d5 a600 	ldrd	sl, r6, [r5]
 80143fc:	3508      	adds	r5, #8
 80143fe:	e7a0      	b.n	8014342 <__sfvwrite_r+0x36>
 8014400:	4621      	mov	r1, r4
 8014402:	4640      	mov	r0, r8
 8014404:	f7ff fd50 	bl	8013ea8 <_fflush_r>
 8014408:	b380      	cbz	r0, 801446c <__sfvwrite_r+0x160>
 801440a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801440e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014416:	81a3      	strh	r3, [r4, #12]
 8014418:	b003      	add	sp, #12
 801441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441e:	2000      	movs	r0, #0
 8014420:	4770      	bx	lr
 8014422:	461e      	mov	r6, r3
 8014424:	46aa      	mov	sl, r5
 8014426:	4699      	mov	r9, r3
 8014428:	4618      	mov	r0, r3
 801442a:	461d      	mov	r5, r3
 801442c:	9700      	str	r7, [sp, #0]
 801442e:	b356      	cbz	r6, 8014486 <__sfvwrite_r+0x17a>
 8014430:	b388      	cbz	r0, 8014496 <__sfvwrite_r+0x18a>
 8014432:	464a      	mov	r2, r9
 8014434:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8014438:	6820      	ldr	r0, [r4, #0]
 801443a:	42b2      	cmp	r2, r6
 801443c:	bf28      	it	cs
 801443e:	4632      	movcs	r2, r6
 8014440:	4288      	cmp	r0, r1
 8014442:	d905      	bls.n	8014450 <__sfvwrite_r+0x144>
 8014444:	68a1      	ldr	r1, [r4, #8]
 8014446:	eb03 0b01 	add.w	fp, r3, r1
 801444a:	455a      	cmp	r2, fp
 801444c:	f300 80a6 	bgt.w	801459c <__sfvwrite_r+0x290>
 8014450:	4293      	cmp	r3, r2
 8014452:	dc63      	bgt.n	801451c <__sfvwrite_r+0x210>
 8014454:	69e1      	ldr	r1, [r4, #28]
 8014456:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8014458:	462a      	mov	r2, r5
 801445a:	4640      	mov	r0, r8
 801445c:	47b8      	blx	r7
 801445e:	f1b0 0b00 	subs.w	fp, r0, #0
 8014462:	ddd2      	ble.n	801440a <__sfvwrite_r+0xfe>
 8014464:	ebb9 090b 	subs.w	r9, r9, fp
 8014468:	d0ca      	beq.n	8014400 <__sfvwrite_r+0xf4>
 801446a:	2001      	movs	r0, #1
 801446c:	9a00      	ldr	r2, [sp, #0]
 801446e:	6893      	ldr	r3, [r2, #8]
 8014470:	eba3 030b 	sub.w	r3, r3, fp
 8014474:	445d      	add	r5, fp
 8014476:	eba6 060b 	sub.w	r6, r6, fp
 801447a:	6093      	str	r3, [r2, #8]
 801447c:	2b00      	cmp	r3, #0
 801447e:	f43f af76 	beq.w	801436e <__sfvwrite_r+0x62>
 8014482:	2e00      	cmp	r6, #0
 8014484:	d1d4      	bne.n	8014430 <__sfvwrite_r+0x124>
 8014486:	f10a 0308 	add.w	r3, sl, #8
 801448a:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 801448e:	469a      	mov	sl, r3
 8014490:	3308      	adds	r3, #8
 8014492:	2e00      	cmp	r6, #0
 8014494:	d0f9      	beq.n	801448a <__sfvwrite_r+0x17e>
 8014496:	4632      	mov	r2, r6
 8014498:	210a      	movs	r1, #10
 801449a:	4628      	mov	r0, r5
 801449c:	f7f4 fc60 	bl	8008d60 <memchr>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f000 809c 	beq.w	80145de <__sfvwrite_r+0x2d2>
 80144a6:	3001      	adds	r0, #1
 80144a8:	eba0 0905 	sub.w	r9, r0, r5
 80144ac:	e7c1      	b.n	8014432 <__sfvwrite_r+0x126>
 80144ae:	6820      	ldr	r0, [r4, #0]
 80144b0:	6923      	ldr	r3, [r4, #16]
 80144b2:	4298      	cmp	r0, r3
 80144b4:	d816      	bhi.n	80144e4 <__sfvwrite_r+0x1d8>
 80144b6:	6963      	ldr	r3, [r4, #20]
 80144b8:	42b3      	cmp	r3, r6
 80144ba:	d813      	bhi.n	80144e4 <__sfvwrite_r+0x1d8>
 80144bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80144c0:	42b2      	cmp	r2, r6
 80144c2:	bf28      	it	cs
 80144c4:	4632      	movcs	r2, r6
 80144c6:	69e1      	ldr	r1, [r4, #28]
 80144c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80144cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80144ce:	fb02 f303 	mul.w	r3, r2, r3
 80144d2:	4640      	mov	r0, r8
 80144d4:	464a      	mov	r2, r9
 80144d6:	47b8      	blx	r7
 80144d8:	f1b0 0a00 	subs.w	sl, r0, #0
 80144dc:	dd95      	ble.n	801440a <__sfvwrite_r+0xfe>
 80144de:	eba6 060a 	sub.w	r6, r6, sl
 80144e2:	e778      	b.n	80143d6 <__sfvwrite_r+0xca>
 80144e4:	45b3      	cmp	fp, r6
 80144e6:	46da      	mov	sl, fp
 80144e8:	bf28      	it	cs
 80144ea:	46b2      	movcs	sl, r6
 80144ec:	4652      	mov	r2, sl
 80144ee:	4649      	mov	r1, r9
 80144f0:	f000 f924 	bl	801473c <memmove>
 80144f4:	68a3      	ldr	r3, [r4, #8]
 80144f6:	6822      	ldr	r2, [r4, #0]
 80144f8:	eba3 030a 	sub.w	r3, r3, sl
 80144fc:	4452      	add	r2, sl
 80144fe:	60a3      	str	r3, [r4, #8]
 8014500:	6022      	str	r2, [r4, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d1eb      	bne.n	80144de <__sfvwrite_r+0x1d2>
 8014506:	4621      	mov	r1, r4
 8014508:	4640      	mov	r0, r8
 801450a:	f7ff fccd 	bl	8013ea8 <_fflush_r>
 801450e:	2800      	cmp	r0, #0
 8014510:	d0e5      	beq.n	80144de <__sfvwrite_r+0x1d2>
 8014512:	e77a      	b.n	801440a <__sfvwrite_r+0xfe>
 8014514:	6820      	ldr	r0, [r4, #0]
 8014516:	46b3      	mov	fp, r6
 8014518:	4632      	mov	r2, r6
 801451a:	e74e      	b.n	80143ba <__sfvwrite_r+0xae>
 801451c:	4629      	mov	r1, r5
 801451e:	9201      	str	r2, [sp, #4]
 8014520:	f000 f90c 	bl	801473c <memmove>
 8014524:	9a01      	ldr	r2, [sp, #4]
 8014526:	68a3      	ldr	r3, [r4, #8]
 8014528:	1a9b      	subs	r3, r3, r2
 801452a:	60a3      	str	r3, [r4, #8]
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	4413      	add	r3, r2
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	4693      	mov	fp, r2
 8014534:	e796      	b.n	8014464 <__sfvwrite_r+0x158>
 8014536:	6823      	ldr	r3, [r4, #0]
 8014538:	6921      	ldr	r1, [r4, #16]
 801453a:	eba3 0b01 	sub.w	fp, r3, r1
 801453e:	6963      	ldr	r3, [r4, #20]
 8014540:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8014544:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8014548:	f10b 0301 	add.w	r3, fp, #1
 801454c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8014550:	4433      	add	r3, r6
 8014552:	4553      	cmp	r3, sl
 8014554:	4652      	mov	r2, sl
 8014556:	bf84      	itt	hi
 8014558:	469a      	movhi	sl, r3
 801455a:	4652      	movhi	r2, sl
 801455c:	0543      	lsls	r3, r0, #21
 801455e:	d52c      	bpl.n	80145ba <__sfvwrite_r+0x2ae>
 8014560:	4611      	mov	r1, r2
 8014562:	4640      	mov	r0, r8
 8014564:	f7fc fb0e 	bl	8010b84 <_malloc_r>
 8014568:	2800      	cmp	r0, #0
 801456a:	d03b      	beq.n	80145e4 <__sfvwrite_r+0x2d8>
 801456c:	465a      	mov	r2, fp
 801456e:	6921      	ldr	r1, [r4, #16]
 8014570:	9001      	str	r0, [sp, #4]
 8014572:	f7f4 fae9 	bl	8008b48 <memcpy>
 8014576:	89a2      	ldrh	r2, [r4, #12]
 8014578:	9b01      	ldr	r3, [sp, #4]
 801457a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801457e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014582:	81a2      	strh	r2, [r4, #12]
 8014584:	eb03 000b 	add.w	r0, r3, fp
 8014588:	6123      	str	r3, [r4, #16]
 801458a:	ebaa 030b 	sub.w	r3, sl, fp
 801458e:	f8c4 a014 	str.w	sl, [r4, #20]
 8014592:	60a3      	str	r3, [r4, #8]
 8014594:	6020      	str	r0, [r4, #0]
 8014596:	46b3      	mov	fp, r6
 8014598:	4632      	mov	r2, r6
 801459a:	e70e      	b.n	80143ba <__sfvwrite_r+0xae>
 801459c:	4629      	mov	r1, r5
 801459e:	465a      	mov	r2, fp
 80145a0:	f000 f8cc 	bl	801473c <memmove>
 80145a4:	6823      	ldr	r3, [r4, #0]
 80145a6:	445b      	add	r3, fp
 80145a8:	6023      	str	r3, [r4, #0]
 80145aa:	4621      	mov	r1, r4
 80145ac:	4640      	mov	r0, r8
 80145ae:	f7ff fc7b 	bl	8013ea8 <_fflush_r>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	f43f af56 	beq.w	8014464 <__sfvwrite_r+0x158>
 80145b8:	e727      	b.n	801440a <__sfvwrite_r+0xfe>
 80145ba:	4640      	mov	r0, r8
 80145bc:	f000 fcf2 	bl	8014fa4 <_realloc_r>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d1de      	bne.n	8014584 <__sfvwrite_r+0x278>
 80145c6:	6921      	ldr	r1, [r4, #16]
 80145c8:	4640      	mov	r0, r8
 80145ca:	f7ff fd99 	bl	8014100 <_free_r>
 80145ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d2:	220c      	movs	r2, #12
 80145d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145d8:	f8c8 2000 	str.w	r2, [r8]
 80145dc:	e717      	b.n	801440e <__sfvwrite_r+0x102>
 80145de:	1c72      	adds	r2, r6, #1
 80145e0:	4691      	mov	r9, r2
 80145e2:	e727      	b.n	8014434 <__sfvwrite_r+0x128>
 80145e4:	220c      	movs	r2, #12
 80145e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145ea:	f8c8 2000 	str.w	r2, [r8]
 80145ee:	e70e      	b.n	801440e <__sfvwrite_r+0x102>
 80145f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145f4:	e6bc      	b.n	8014370 <__sfvwrite_r+0x64>
 80145f6:	bf00      	nop
 80145f8:	7ffffc00 	.word	0x7ffffc00

080145fc <_fwalk_reent>:
 80145fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014600:	4607      	mov	r7, r0
 8014602:	4688      	mov	r8, r1
 8014604:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8014608:	f04f 0900 	mov.w	r9, #0
 801460c:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8014610:	3d01      	subs	r5, #1
 8014612:	d411      	bmi.n	8014638 <_fwalk_reent+0x3c>
 8014614:	89a3      	ldrh	r3, [r4, #12]
 8014616:	2b01      	cmp	r3, #1
 8014618:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 801461c:	d908      	bls.n	8014630 <_fwalk_reent+0x34>
 801461e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8014622:	3301      	adds	r3, #1
 8014624:	4621      	mov	r1, r4
 8014626:	d003      	beq.n	8014630 <_fwalk_reent+0x34>
 8014628:	4638      	mov	r0, r7
 801462a:	47c0      	blx	r8
 801462c:	ea49 0900 	orr.w	r9, r9, r0
 8014630:	1c6b      	adds	r3, r5, #1
 8014632:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8014636:	d1ed      	bne.n	8014614 <_fwalk_reent+0x18>
 8014638:	6836      	ldr	r6, [r6, #0]
 801463a:	2e00      	cmp	r6, #0
 801463c:	d1e6      	bne.n	801460c <_fwalk_reent+0x10>
 801463e:	4648      	mov	r0, r9
 8014640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014644 <_localeconv_r>:
 8014644:	4800      	ldr	r0, [pc, #0]	; (8014648 <_localeconv_r+0x4>)
 8014646:	4770      	bx	lr
 8014648:	24008afc 	.word	0x24008afc

0801464c <__retarget_lock_init_recursive>:
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop

08014650 <__retarget_lock_close_recursive>:
 8014650:	4770      	bx	lr
 8014652:	bf00      	nop

08014654 <__retarget_lock_acquire_recursive>:
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop

08014658 <__retarget_lock_release_recursive>:
 8014658:	4770      	bx	lr
 801465a:	bf00      	nop

0801465c <__smakebuf_r>:
 801465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014660:	898b      	ldrh	r3, [r1, #12]
 8014662:	460c      	mov	r4, r1
 8014664:	0799      	lsls	r1, r3, #30
 8014666:	b096      	sub	sp, #88	; 0x58
 8014668:	d508      	bpl.n	801467c <__smakebuf_r+0x20>
 801466a:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801466e:	2201      	movs	r2, #1
 8014670:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8014674:	6023      	str	r3, [r4, #0]
 8014676:	b016      	add	sp, #88	; 0x58
 8014678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014680:	2900      	cmp	r1, #0
 8014682:	4606      	mov	r6, r0
 8014684:	db27      	blt.n	80146d6 <__smakebuf_r+0x7a>
 8014686:	466a      	mov	r2, sp
 8014688:	f002 f880 	bl	801678c <_fstat_r>
 801468c:	2800      	cmp	r0, #0
 801468e:	db21      	blt.n	80146d4 <__smakebuf_r+0x78>
 8014690:	9d01      	ldr	r5, [sp, #4]
 8014692:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8014696:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 801469a:	fab5 f585 	clz	r5, r5
 801469e:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80146a2:	096d      	lsrs	r5, r5, #5
 80146a4:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80146a8:	4641      	mov	r1, r8
 80146aa:	4630      	mov	r0, r6
 80146ac:	f7fc fa6a 	bl	8010b84 <_malloc_r>
 80146b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146b4:	b1f0      	cbz	r0, 80146f4 <__smakebuf_r+0x98>
 80146b6:	4a20      	ldr	r2, [pc, #128]	; (8014738 <__smakebuf_r+0xdc>)
 80146b8:	63f2      	str	r2, [r6, #60]	; 0x3c
 80146ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146be:	f8c4 8014 	str.w	r8, [r4, #20]
 80146c2:	81a3      	strh	r3, [r4, #12]
 80146c4:	6020      	str	r0, [r4, #0]
 80146c6:	6120      	str	r0, [r4, #16]
 80146c8:	bb35      	cbnz	r5, 8014718 <__smakebuf_r+0xbc>
 80146ca:	433b      	orrs	r3, r7
 80146cc:	81a3      	strh	r3, [r4, #12]
 80146ce:	b016      	add	sp, #88	; 0x58
 80146d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d4:	89a3      	ldrh	r3, [r4, #12]
 80146d6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 80146da:	d019      	beq.n	8014710 <__smakebuf_r+0xb4>
 80146dc:	f04f 0840 	mov.w	r8, #64	; 0x40
 80146e0:	4641      	mov	r1, r8
 80146e2:	4630      	mov	r0, r6
 80146e4:	f7fc fa4e 	bl	8010b84 <_malloc_r>
 80146e8:	2500      	movs	r5, #0
 80146ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ee:	462f      	mov	r7, r5
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d1e0      	bne.n	80146b6 <__smakebuf_r+0x5a>
 80146f4:	059a      	lsls	r2, r3, #22
 80146f6:	d4be      	bmi.n	8014676 <__smakebuf_r+0x1a>
 80146f8:	f023 0303 	bic.w	r3, r3, #3
 80146fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014700:	f043 0302 	orr.w	r3, r3, #2
 8014704:	2101      	movs	r1, #1
 8014706:	e9c4 2104 	strd	r2, r1, [r4, #16]
 801470a:	81a3      	strh	r3, [r4, #12]
 801470c:	6022      	str	r2, [r4, #0]
 801470e:	e7b2      	b.n	8014676 <__smakebuf_r+0x1a>
 8014710:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8014714:	462f      	mov	r7, r5
 8014716:	e7c7      	b.n	80146a8 <__smakebuf_r+0x4c>
 8014718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801471c:	4630      	mov	r0, r6
 801471e:	f002 f84b 	bl	80167b8 <_isatty_r>
 8014722:	b910      	cbnz	r0, 801472a <__smakebuf_r+0xce>
 8014724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014728:	e7cf      	b.n	80146ca <__smakebuf_r+0x6e>
 801472a:	89a3      	ldrh	r3, [r4, #12]
 801472c:	f023 0303 	bic.w	r3, r3, #3
 8014730:	f043 0301 	orr.w	r3, r3, #1
 8014734:	b21b      	sxth	r3, r3
 8014736:	e7c8      	b.n	80146ca <__smakebuf_r+0x6e>
 8014738:	08013f05 	.word	0x08013f05

0801473c <memmove>:
 801473c:	4288      	cmp	r0, r1
 801473e:	d90d      	bls.n	801475c <memmove+0x20>
 8014740:	188b      	adds	r3, r1, r2
 8014742:	4283      	cmp	r3, r0
 8014744:	d90a      	bls.n	801475c <memmove+0x20>
 8014746:	eb00 0c02 	add.w	ip, r0, r2
 801474a:	b1ba      	cbz	r2, 801477c <memmove+0x40>
 801474c:	4662      	mov	r2, ip
 801474e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8014752:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8014756:	4299      	cmp	r1, r3
 8014758:	d1f9      	bne.n	801474e <memmove+0x12>
 801475a:	4770      	bx	lr
 801475c:	2a0f      	cmp	r2, #15
 801475e:	d80e      	bhi.n	801477e <memmove+0x42>
 8014760:	4603      	mov	r3, r0
 8014762:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8014766:	b14a      	cbz	r2, 801477c <memmove+0x40>
 8014768:	f10c 0c01 	add.w	ip, ip, #1
 801476c:	3b01      	subs	r3, #1
 801476e:	448c      	add	ip, r1
 8014770:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014774:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014778:	4561      	cmp	r1, ip
 801477a:	d1f9      	bne.n	8014770 <memmove+0x34>
 801477c:	4770      	bx	lr
 801477e:	ea40 0301 	orr.w	r3, r0, r1
 8014782:	079b      	lsls	r3, r3, #30
 8014784:	d150      	bne.n	8014828 <memmove+0xec>
 8014786:	f1a2 0310 	sub.w	r3, r2, #16
 801478a:	b570      	push	{r4, r5, r6, lr}
 801478c:	f101 0c20 	add.w	ip, r1, #32
 8014790:	f023 050f 	bic.w	r5, r3, #15
 8014794:	f101 0e10 	add.w	lr, r1, #16
 8014798:	f100 0410 	add.w	r4, r0, #16
 801479c:	44ac      	add	ip, r5
 801479e:	091b      	lsrs	r3, r3, #4
 80147a0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80147a4:	f844 5c10 	str.w	r5, [r4, #-16]
 80147a8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80147ac:	f844 5c0c 	str.w	r5, [r4, #-12]
 80147b0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80147b4:	f844 5c08 	str.w	r5, [r4, #-8]
 80147b8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80147bc:	f844 5c04 	str.w	r5, [r4, #-4]
 80147c0:	f10e 0e10 	add.w	lr, lr, #16
 80147c4:	45e6      	cmp	lr, ip
 80147c6:	f104 0410 	add.w	r4, r4, #16
 80147ca:	d1e9      	bne.n	80147a0 <memmove+0x64>
 80147cc:	3301      	adds	r3, #1
 80147ce:	f012 0f0c 	tst.w	r2, #12
 80147d2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80147d6:	f002 040f 	and.w	r4, r2, #15
 80147da:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80147de:	d027      	beq.n	8014830 <memmove+0xf4>
 80147e0:	3c04      	subs	r4, #4
 80147e2:	f024 0603 	bic.w	r6, r4, #3
 80147e6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80147ea:	441e      	add	r6, r3
 80147ec:	1f1c      	subs	r4, r3, #4
 80147ee:	468e      	mov	lr, r1
 80147f0:	f85e 5b04 	ldr.w	r5, [lr], #4
 80147f4:	f844 5f04 	str.w	r5, [r4, #4]!
 80147f8:	42b4      	cmp	r4, r6
 80147fa:	d1f9      	bne.n	80147f0 <memmove+0xb4>
 80147fc:	f10c 0401 	add.w	r4, ip, #1
 8014800:	f002 0203 	and.w	r2, r2, #3
 8014804:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801480c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8014810:	b14a      	cbz	r2, 8014826 <memmove+0xea>
 8014812:	f10c 0c01 	add.w	ip, ip, #1
 8014816:	3b01      	subs	r3, #1
 8014818:	448c      	add	ip, r1
 801481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801481e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014822:	4561      	cmp	r1, ip
 8014824:	d1f9      	bne.n	801481a <memmove+0xde>
 8014826:	bd70      	pop	{r4, r5, r6, pc}
 8014828:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 801482c:	4603      	mov	r3, r0
 801482e:	e79b      	b.n	8014768 <memmove+0x2c>
 8014830:	4622      	mov	r2, r4
 8014832:	e7eb      	b.n	801480c <memmove+0xd0>

08014834 <_Balloc>:
 8014834:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014836:	b570      	push	{r4, r5, r6, lr}
 8014838:	4605      	mov	r5, r0
 801483a:	460c      	mov	r4, r1
 801483c:	b14b      	cbz	r3, 8014852 <_Balloc+0x1e>
 801483e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014842:	b180      	cbz	r0, 8014866 <_Balloc+0x32>
 8014844:	6802      	ldr	r2, [r0, #0]
 8014846:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801484a:	2300      	movs	r3, #0
 801484c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014850:	bd70      	pop	{r4, r5, r6, pc}
 8014852:	2221      	movs	r2, #33	; 0x21
 8014854:	2104      	movs	r1, #4
 8014856:	f001 fe49 	bl	80164ec <_calloc_r>
 801485a:	4603      	mov	r3, r0
 801485c:	64e8      	str	r0, [r5, #76]	; 0x4c
 801485e:	2800      	cmp	r0, #0
 8014860:	d1ed      	bne.n	801483e <_Balloc+0xa>
 8014862:	2000      	movs	r0, #0
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	2101      	movs	r1, #1
 8014868:	fa01 f604 	lsl.w	r6, r1, r4
 801486c:	1d72      	adds	r2, r6, #5
 801486e:	0092      	lsls	r2, r2, #2
 8014870:	4628      	mov	r0, r5
 8014872:	f001 fe3b 	bl	80164ec <_calloc_r>
 8014876:	2800      	cmp	r0, #0
 8014878:	d0f3      	beq.n	8014862 <_Balloc+0x2e>
 801487a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801487e:	e7e4      	b.n	801484a <_Balloc+0x16>

08014880 <_Bfree>:
 8014880:	b131      	cbz	r1, 8014890 <_Bfree+0x10>
 8014882:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014884:	684a      	ldr	r2, [r1, #4]
 8014886:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801488a:	6008      	str	r0, [r1, #0]
 801488c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop

08014894 <__multadd>:
 8014894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014896:	690c      	ldr	r4, [r1, #16]
 8014898:	4606      	mov	r6, r0
 801489a:	b083      	sub	sp, #12
 801489c:	460d      	mov	r5, r1
 801489e:	f101 0e14 	add.w	lr, r1, #20
 80148a2:	2000      	movs	r0, #0
 80148a4:	f8de 1000 	ldr.w	r1, [lr]
 80148a8:	fa1f fc81 	uxth.w	ip, r1
 80148ac:	fb02 330c 	mla	r3, r2, ip, r3
 80148b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80148b4:	0c09      	lsrs	r1, r1, #16
 80148b6:	fb02 cc01 	mla	ip, r2, r1, ip
 80148ba:	3001      	adds	r0, #1
 80148bc:	b29b      	uxth	r3, r3
 80148be:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80148c2:	4284      	cmp	r4, r0
 80148c4:	f84e 3b04 	str.w	r3, [lr], #4
 80148c8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80148cc:	dcea      	bgt.n	80148a4 <__multadd+0x10>
 80148ce:	b13b      	cbz	r3, 80148e0 <__multadd+0x4c>
 80148d0:	68aa      	ldr	r2, [r5, #8]
 80148d2:	42a2      	cmp	r2, r4
 80148d4:	dd07      	ble.n	80148e6 <__multadd+0x52>
 80148d6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80148da:	3401      	adds	r4, #1
 80148dc:	6153      	str	r3, [r2, #20]
 80148de:	612c      	str	r4, [r5, #16]
 80148e0:	4628      	mov	r0, r5
 80148e2:	b003      	add	sp, #12
 80148e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e6:	6869      	ldr	r1, [r5, #4]
 80148e8:	9301      	str	r3, [sp, #4]
 80148ea:	3101      	adds	r1, #1
 80148ec:	4630      	mov	r0, r6
 80148ee:	f7ff ffa1 	bl	8014834 <_Balloc>
 80148f2:	9b01      	ldr	r3, [sp, #4]
 80148f4:	4607      	mov	r7, r0
 80148f6:	b1b8      	cbz	r0, 8014928 <__multadd+0x94>
 80148f8:	692a      	ldr	r2, [r5, #16]
 80148fa:	9301      	str	r3, [sp, #4]
 80148fc:	3202      	adds	r2, #2
 80148fe:	f105 010c 	add.w	r1, r5, #12
 8014902:	0092      	lsls	r2, r2, #2
 8014904:	300c      	adds	r0, #12
 8014906:	f7f4 f91f 	bl	8008b48 <memcpy>
 801490a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801490c:	6869      	ldr	r1, [r5, #4]
 801490e:	9b01      	ldr	r3, [sp, #4]
 8014910:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8014914:	6028      	str	r0, [r5, #0]
 8014916:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 801491a:	463d      	mov	r5, r7
 801491c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8014920:	3401      	adds	r4, #1
 8014922:	6153      	str	r3, [r2, #20]
 8014924:	612c      	str	r4, [r5, #16]
 8014926:	e7db      	b.n	80148e0 <__multadd+0x4c>
 8014928:	4b02      	ldr	r3, [pc, #8]	; (8014934 <__multadd+0xa0>)
 801492a:	4803      	ldr	r0, [pc, #12]	; (8014938 <__multadd+0xa4>)
 801492c:	463a      	mov	r2, r7
 801492e:	21b5      	movs	r1, #181	; 0xb5
 8014930:	f001 fdbc 	bl	80164ac <__assert_func>
 8014934:	24008e9c 	.word	0x24008e9c
 8014938:	24008efc 	.word	0x24008efc

0801493c <__hi0bits>:
 801493c:	0c03      	lsrs	r3, r0, #16
 801493e:	041b      	lsls	r3, r3, #16
 8014940:	b9d3      	cbnz	r3, 8014978 <__hi0bits+0x3c>
 8014942:	0400      	lsls	r0, r0, #16
 8014944:	2310      	movs	r3, #16
 8014946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801494a:	bf04      	itt	eq
 801494c:	0200      	lsleq	r0, r0, #8
 801494e:	3308      	addeq	r3, #8
 8014950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014954:	bf04      	itt	eq
 8014956:	0100      	lsleq	r0, r0, #4
 8014958:	3304      	addeq	r3, #4
 801495a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801495e:	bf04      	itt	eq
 8014960:	0080      	lsleq	r0, r0, #2
 8014962:	3302      	addeq	r3, #2
 8014964:	2800      	cmp	r0, #0
 8014966:	db05      	blt.n	8014974 <__hi0bits+0x38>
 8014968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801496c:	f103 0301 	add.w	r3, r3, #1
 8014970:	bf08      	it	eq
 8014972:	2320      	moveq	r3, #32
 8014974:	4618      	mov	r0, r3
 8014976:	4770      	bx	lr
 8014978:	2300      	movs	r3, #0
 801497a:	e7e4      	b.n	8014946 <__hi0bits+0xa>

0801497c <__lo0bits>:
 801497c:	6803      	ldr	r3, [r0, #0]
 801497e:	f013 0207 	ands.w	r2, r3, #7
 8014982:	4601      	mov	r1, r0
 8014984:	d007      	beq.n	8014996 <__lo0bits+0x1a>
 8014986:	07da      	lsls	r2, r3, #31
 8014988:	d41f      	bmi.n	80149ca <__lo0bits+0x4e>
 801498a:	0798      	lsls	r0, r3, #30
 801498c:	d521      	bpl.n	80149d2 <__lo0bits+0x56>
 801498e:	085b      	lsrs	r3, r3, #1
 8014990:	600b      	str	r3, [r1, #0]
 8014992:	2001      	movs	r0, #1
 8014994:	4770      	bx	lr
 8014996:	b298      	uxth	r0, r3
 8014998:	b1a0      	cbz	r0, 80149c4 <__lo0bits+0x48>
 801499a:	4610      	mov	r0, r2
 801499c:	b2da      	uxtb	r2, r3
 801499e:	b90a      	cbnz	r2, 80149a4 <__lo0bits+0x28>
 80149a0:	3008      	adds	r0, #8
 80149a2:	0a1b      	lsrs	r3, r3, #8
 80149a4:	071a      	lsls	r2, r3, #28
 80149a6:	bf04      	itt	eq
 80149a8:	091b      	lsreq	r3, r3, #4
 80149aa:	3004      	addeq	r0, #4
 80149ac:	079a      	lsls	r2, r3, #30
 80149ae:	bf04      	itt	eq
 80149b0:	089b      	lsreq	r3, r3, #2
 80149b2:	3002      	addeq	r0, #2
 80149b4:	07da      	lsls	r2, r3, #31
 80149b6:	d403      	bmi.n	80149c0 <__lo0bits+0x44>
 80149b8:	085b      	lsrs	r3, r3, #1
 80149ba:	f100 0001 	add.w	r0, r0, #1
 80149be:	d006      	beq.n	80149ce <__lo0bits+0x52>
 80149c0:	600b      	str	r3, [r1, #0]
 80149c2:	4770      	bx	lr
 80149c4:	0c1b      	lsrs	r3, r3, #16
 80149c6:	2010      	movs	r0, #16
 80149c8:	e7e8      	b.n	801499c <__lo0bits+0x20>
 80149ca:	2000      	movs	r0, #0
 80149cc:	4770      	bx	lr
 80149ce:	2020      	movs	r0, #32
 80149d0:	4770      	bx	lr
 80149d2:	089b      	lsrs	r3, r3, #2
 80149d4:	600b      	str	r3, [r1, #0]
 80149d6:	2002      	movs	r0, #2
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop

080149dc <__i2b>:
 80149dc:	b538      	push	{r3, r4, r5, lr}
 80149de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80149e0:	4604      	mov	r4, r0
 80149e2:	460d      	mov	r5, r1
 80149e4:	b14b      	cbz	r3, 80149fa <__i2b+0x1e>
 80149e6:	6858      	ldr	r0, [r3, #4]
 80149e8:	b1b0      	cbz	r0, 8014a18 <__i2b+0x3c>
 80149ea:	6802      	ldr	r2, [r0, #0]
 80149ec:	605a      	str	r2, [r3, #4]
 80149ee:	2200      	movs	r2, #0
 80149f0:	2301      	movs	r3, #1
 80149f2:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80149f6:	60c2      	str	r2, [r0, #12]
 80149f8:	bd38      	pop	{r3, r4, r5, pc}
 80149fa:	2221      	movs	r2, #33	; 0x21
 80149fc:	2104      	movs	r1, #4
 80149fe:	f001 fd75 	bl	80164ec <_calloc_r>
 8014a02:	4603      	mov	r3, r0
 8014a04:	64e0      	str	r0, [r4, #76]	; 0x4c
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d1ed      	bne.n	80149e6 <__i2b+0xa>
 8014a0a:	4b09      	ldr	r3, [pc, #36]	; (8014a30 <__i2b+0x54>)
 8014a0c:	4809      	ldr	r0, [pc, #36]	; (8014a34 <__i2b+0x58>)
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014a14:	f001 fd4a 	bl	80164ac <__assert_func>
 8014a18:	221c      	movs	r2, #28
 8014a1a:	2101      	movs	r1, #1
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f001 fd65 	bl	80164ec <_calloc_r>
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d0f1      	beq.n	8014a0a <__i2b+0x2e>
 8014a26:	2201      	movs	r2, #1
 8014a28:	2302      	movs	r3, #2
 8014a2a:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8014a2e:	e7de      	b.n	80149ee <__i2b+0x12>
 8014a30:	24008e9c 	.word	0x24008e9c
 8014a34:	24008efc 	.word	0x24008efc

08014a38 <__multiply>:
 8014a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3c:	690e      	ldr	r6, [r1, #16]
 8014a3e:	6915      	ldr	r5, [r2, #16]
 8014a40:	42ae      	cmp	r6, r5
 8014a42:	b085      	sub	sp, #20
 8014a44:	4688      	mov	r8, r1
 8014a46:	4614      	mov	r4, r2
 8014a48:	db05      	blt.n	8014a56 <__multiply+0x1e>
 8014a4a:	462a      	mov	r2, r5
 8014a4c:	4623      	mov	r3, r4
 8014a4e:	4635      	mov	r5, r6
 8014a50:	460c      	mov	r4, r1
 8014a52:	4616      	mov	r6, r2
 8014a54:	4698      	mov	r8, r3
 8014a56:	68a3      	ldr	r3, [r4, #8]
 8014a58:	6861      	ldr	r1, [r4, #4]
 8014a5a:	19af      	adds	r7, r5, r6
 8014a5c:	42bb      	cmp	r3, r7
 8014a5e:	bfb8      	it	lt
 8014a60:	3101      	addlt	r1, #1
 8014a62:	f7ff fee7 	bl	8014834 <_Balloc>
 8014a66:	9001      	str	r0, [sp, #4]
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	f000 8087 	beq.w	8014b7c <__multiply+0x144>
 8014a6e:	9b01      	ldr	r3, [sp, #4]
 8014a70:	f103 0914 	add.w	r9, r3, #20
 8014a74:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8014a78:	45d1      	cmp	r9, sl
 8014a7a:	d205      	bcs.n	8014a88 <__multiply+0x50>
 8014a7c:	464b      	mov	r3, r9
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f843 2b04 	str.w	r2, [r3], #4
 8014a84:	459a      	cmp	sl, r3
 8014a86:	d8fb      	bhi.n	8014a80 <__multiply+0x48>
 8014a88:	f108 0814 	add.w	r8, r8, #20
 8014a8c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8014a90:	f104 0314 	add.w	r3, r4, #20
 8014a94:	45d8      	cmp	r8, fp
 8014a96:	461a      	mov	r2, r3
 8014a98:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8014a9c:	d25f      	bcs.n	8014b5e <__multiply+0x126>
 8014a9e:	1b2b      	subs	r3, r5, r4
 8014aa0:	3b15      	subs	r3, #21
 8014aa2:	f023 0303 	bic.w	r3, r3, #3
 8014aa6:	3304      	adds	r3, #4
 8014aa8:	3415      	adds	r4, #21
 8014aaa:	42a5      	cmp	r5, r4
 8014aac:	bf38      	it	cc
 8014aae:	2304      	movcc	r3, #4
 8014ab0:	e9cd a702 	strd	sl, r7, [sp, #8]
 8014ab4:	46ac      	mov	ip, r5
 8014ab6:	461f      	mov	r7, r3
 8014ab8:	4692      	mov	sl, r2
 8014aba:	e005      	b.n	8014ac8 <__multiply+0x90>
 8014abc:	0c00      	lsrs	r0, r0, #16
 8014abe:	d129      	bne.n	8014b14 <__multiply+0xdc>
 8014ac0:	45c3      	cmp	fp, r8
 8014ac2:	f109 0904 	add.w	r9, r9, #4
 8014ac6:	d948      	bls.n	8014b5a <__multiply+0x122>
 8014ac8:	f858 0b04 	ldr.w	r0, [r8], #4
 8014acc:	b285      	uxth	r5, r0
 8014ace:	2d00      	cmp	r5, #0
 8014ad0:	d0f4      	beq.n	8014abc <__multiply+0x84>
 8014ad2:	4656      	mov	r6, sl
 8014ad4:	464c      	mov	r4, r9
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	f856 0b04 	ldr.w	r0, [r6], #4
 8014adc:	6821      	ldr	r1, [r4, #0]
 8014ade:	b282      	uxth	r2, r0
 8014ae0:	fa1f fe81 	uxth.w	lr, r1
 8014ae4:	fb05 ee02 	mla	lr, r5, r2, lr
 8014ae8:	0c00      	lsrs	r0, r0, #16
 8014aea:	0c0a      	lsrs	r2, r1, #16
 8014aec:	4473      	add	r3, lr
 8014aee:	fb05 2200 	mla	r2, r5, r0, r2
 8014af2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014afc:	45b4      	cmp	ip, r6
 8014afe:	f844 3b04 	str.w	r3, [r4], #4
 8014b02:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8014b06:	d8e7      	bhi.n	8014ad8 <__multiply+0xa0>
 8014b08:	f849 3007 	str.w	r3, [r9, r7]
 8014b0c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8014b10:	0c00      	lsrs	r0, r0, #16
 8014b12:	d0d5      	beq.n	8014ac0 <__multiply+0x88>
 8014b14:	f8d9 3000 	ldr.w	r3, [r9]
 8014b18:	4654      	mov	r4, sl
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	464d      	mov	r5, r9
 8014b1e:	2200      	movs	r2, #0
 8014b20:	8826      	ldrh	r6, [r4, #0]
 8014b22:	0c09      	lsrs	r1, r1, #16
 8014b24:	fb00 1106 	mla	r1, r0, r6, r1
 8014b28:	440a      	add	r2, r1
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b30:	f845 3b04 	str.w	r3, [r5], #4
 8014b34:	f854 6b04 	ldr.w	r6, [r4], #4
 8014b38:	6829      	ldr	r1, [r5, #0]
 8014b3a:	0c36      	lsrs	r6, r6, #16
 8014b3c:	b28b      	uxth	r3, r1
 8014b3e:	fb00 3306 	mla	r3, r0, r6, r3
 8014b42:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014b46:	45a4      	cmp	ip, r4
 8014b48:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8014b4c:	d8e8      	bhi.n	8014b20 <__multiply+0xe8>
 8014b4e:	45c3      	cmp	fp, r8
 8014b50:	f849 3007 	str.w	r3, [r9, r7]
 8014b54:	f109 0904 	add.w	r9, r9, #4
 8014b58:	d8b6      	bhi.n	8014ac8 <__multiply+0x90>
 8014b5a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8014b5e:	2f00      	cmp	r7, #0
 8014b60:	dc02      	bgt.n	8014b68 <__multiply+0x130>
 8014b62:	e005      	b.n	8014b70 <__multiply+0x138>
 8014b64:	3f01      	subs	r7, #1
 8014b66:	d003      	beq.n	8014b70 <__multiply+0x138>
 8014b68:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d0f9      	beq.n	8014b64 <__multiply+0x12c>
 8014b70:	9b01      	ldr	r3, [sp, #4]
 8014b72:	4618      	mov	r0, r3
 8014b74:	611f      	str	r7, [r3, #16]
 8014b76:	b005      	add	sp, #20
 8014b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7c:	4b03      	ldr	r3, [pc, #12]	; (8014b8c <__multiply+0x154>)
 8014b7e:	4804      	ldr	r0, [pc, #16]	; (8014b90 <__multiply+0x158>)
 8014b80:	9a01      	ldr	r2, [sp, #4]
 8014b82:	f240 115d 	movw	r1, #349	; 0x15d
 8014b86:	f001 fc91 	bl	80164ac <__assert_func>
 8014b8a:	bf00      	nop
 8014b8c:	24008e9c 	.word	0x24008e9c
 8014b90:	24008efc 	.word	0x24008efc

08014b94 <__pow5mult>:
 8014b94:	f012 0303 	ands.w	r3, r2, #3
 8014b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	4614      	mov	r4, r2
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	d132      	bne.n	8014c08 <__pow5mult+0x74>
 8014ba2:	460d      	mov	r5, r1
 8014ba4:	10a4      	asrs	r4, r4, #2
 8014ba6:	d020      	beq.n	8014bea <__pow5mult+0x56>
 8014ba8:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8014bac:	f1b8 0f00 	cmp.w	r8, #0
 8014bb0:	d033      	beq.n	8014c1a <__pow5mult+0x86>
 8014bb2:	07e3      	lsls	r3, r4, #31
 8014bb4:	f04f 0700 	mov.w	r7, #0
 8014bb8:	d407      	bmi.n	8014bca <__pow5mult+0x36>
 8014bba:	1064      	asrs	r4, r4, #1
 8014bbc:	d015      	beq.n	8014bea <__pow5mult+0x56>
 8014bbe:	f8d8 0000 	ldr.w	r0, [r8]
 8014bc2:	b1a8      	cbz	r0, 8014bf0 <__pow5mult+0x5c>
 8014bc4:	4680      	mov	r8, r0
 8014bc6:	07e3      	lsls	r3, r4, #31
 8014bc8:	d5f7      	bpl.n	8014bba <__pow5mult+0x26>
 8014bca:	4642      	mov	r2, r8
 8014bcc:	4629      	mov	r1, r5
 8014bce:	4630      	mov	r0, r6
 8014bd0:	f7ff ff32 	bl	8014a38 <__multiply>
 8014bd4:	b1b5      	cbz	r5, 8014c04 <__pow5mult+0x70>
 8014bd6:	6869      	ldr	r1, [r5, #4]
 8014bd8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8014bda:	1064      	asrs	r4, r4, #1
 8014bdc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8014be0:	602a      	str	r2, [r5, #0]
 8014be2:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8014be6:	4605      	mov	r5, r0
 8014be8:	d1e9      	bne.n	8014bbe <__pow5mult+0x2a>
 8014bea:	4628      	mov	r0, r5
 8014bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf0:	4642      	mov	r2, r8
 8014bf2:	4641      	mov	r1, r8
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	f7ff ff1f 	bl	8014a38 <__multiply>
 8014bfa:	f8c8 0000 	str.w	r0, [r8]
 8014bfe:	6007      	str	r7, [r0, #0]
 8014c00:	4680      	mov	r8, r0
 8014c02:	e7e0      	b.n	8014bc6 <__pow5mult+0x32>
 8014c04:	4605      	mov	r5, r0
 8014c06:	e7d8      	b.n	8014bba <__pow5mult+0x26>
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	4a0f      	ldr	r2, [pc, #60]	; (8014c48 <__pow5mult+0xb4>)
 8014c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014c10:	2300      	movs	r3, #0
 8014c12:	f7ff fe3f 	bl	8014894 <__multadd>
 8014c16:	4605      	mov	r5, r0
 8014c18:	e7c4      	b.n	8014ba4 <__pow5mult+0x10>
 8014c1a:	2101      	movs	r1, #1
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f7ff fe09 	bl	8014834 <_Balloc>
 8014c22:	4680      	mov	r8, r0
 8014c24:	b140      	cbz	r0, 8014c38 <__pow5mult+0xa4>
 8014c26:	2301      	movs	r3, #1
 8014c28:	f240 2271 	movw	r2, #625	; 0x271
 8014c2c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8014c30:	2300      	movs	r3, #0
 8014c32:	64b0      	str	r0, [r6, #72]	; 0x48
 8014c34:	6003      	str	r3, [r0, #0]
 8014c36:	e7bc      	b.n	8014bb2 <__pow5mult+0x1e>
 8014c38:	4b04      	ldr	r3, [pc, #16]	; (8014c4c <__pow5mult+0xb8>)
 8014c3a:	4805      	ldr	r0, [pc, #20]	; (8014c50 <__pow5mult+0xbc>)
 8014c3c:	4642      	mov	r2, r8
 8014c3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014c42:	f001 fc33 	bl	80164ac <__assert_func>
 8014c46:	bf00      	nop
 8014c48:	24009038 	.word	0x24009038
 8014c4c:	24008e9c 	.word	0x24008e9c
 8014c50:	24008efc 	.word	0x24008efc

08014c54 <__lshift>:
 8014c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c58:	460c      	mov	r4, r1
 8014c5a:	4690      	mov	r8, r2
 8014c5c:	6926      	ldr	r6, [r4, #16]
 8014c5e:	68a3      	ldr	r3, [r4, #8]
 8014c60:	6849      	ldr	r1, [r1, #4]
 8014c62:	eb06 1662 	add.w	r6, r6, r2, asr #5
 8014c66:	1c75      	adds	r5, r6, #1
 8014c68:	429d      	cmp	r5, r3
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	ea4f 1962 	mov.w	r9, r2, asr #5
 8014c70:	dd04      	ble.n	8014c7c <__lshift+0x28>
 8014c72:	005b      	lsls	r3, r3, #1
 8014c74:	429d      	cmp	r5, r3
 8014c76:	f101 0101 	add.w	r1, r1, #1
 8014c7a:	dcfa      	bgt.n	8014c72 <__lshift+0x1e>
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f7ff fdd9 	bl	8014834 <_Balloc>
 8014c82:	4684      	mov	ip, r0
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d051      	beq.n	8014d2c <__lshift+0xd8>
 8014c88:	f1b9 0f00 	cmp.w	r9, #0
 8014c8c:	f100 0014 	add.w	r0, r0, #20
 8014c90:	dd0e      	ble.n	8014cb0 <__lshift+0x5c>
 8014c92:	f109 0205 	add.w	r2, r9, #5
 8014c96:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	f843 1b04 	str.w	r1, [r3], #4
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d1fb      	bne.n	8014ca2 <__lshift+0x4e>
 8014caa:	f1ae 0314 	sub.w	r3, lr, #20
 8014cae:	4418      	add	r0, r3
 8014cb0:	6921      	ldr	r1, [r4, #16]
 8014cb2:	f104 0314 	add.w	r3, r4, #20
 8014cb6:	f018 081f 	ands.w	r8, r8, #31
 8014cba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8014cbe:	d02d      	beq.n	8014d1c <__lshift+0xc8>
 8014cc0:	f1c8 0920 	rsb	r9, r8, #32
 8014cc4:	4686      	mov	lr, r0
 8014cc6:	f04f 0a00 	mov.w	sl, #0
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	fa02 f208 	lsl.w	r2, r2, r8
 8014cd0:	ea42 020a 	orr.w	r2, r2, sl
 8014cd4:	f84e 2b04 	str.w	r2, [lr], #4
 8014cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cdc:	4299      	cmp	r1, r3
 8014cde:	fa22 fa09 	lsr.w	sl, r2, r9
 8014ce2:	d8f2      	bhi.n	8014cca <__lshift+0x76>
 8014ce4:	1b0b      	subs	r3, r1, r4
 8014ce6:	3b15      	subs	r3, #21
 8014ce8:	f023 0303 	bic.w	r3, r3, #3
 8014cec:	3304      	adds	r3, #4
 8014cee:	f104 0215 	add.w	r2, r4, #21
 8014cf2:	4291      	cmp	r1, r2
 8014cf4:	bf38      	it	cc
 8014cf6:	2304      	movcc	r3, #4
 8014cf8:	f1ba 0f00 	cmp.w	sl, #0
 8014cfc:	bf18      	it	ne
 8014cfe:	462e      	movne	r6, r5
 8014d00:	f840 a003 	str.w	sl, [r0, r3]
 8014d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d06:	6862      	ldr	r2, [r4, #4]
 8014d08:	f8cc 6010 	str.w	r6, [ip, #16]
 8014d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d10:	6021      	str	r1, [r4, #0]
 8014d12:	4660      	mov	r0, ip
 8014d14:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d1c:	3804      	subs	r0, #4
 8014d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d22:	f840 2f04 	str.w	r2, [r0, #4]!
 8014d26:	4299      	cmp	r1, r3
 8014d28:	d8f9      	bhi.n	8014d1e <__lshift+0xca>
 8014d2a:	e7eb      	b.n	8014d04 <__lshift+0xb0>
 8014d2c:	4b03      	ldr	r3, [pc, #12]	; (8014d3c <__lshift+0xe8>)
 8014d2e:	4804      	ldr	r0, [pc, #16]	; (8014d40 <__lshift+0xec>)
 8014d30:	4662      	mov	r2, ip
 8014d32:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d36:	f001 fbb9 	bl	80164ac <__assert_func>
 8014d3a:	bf00      	nop
 8014d3c:	24008e9c 	.word	0x24008e9c
 8014d40:	24008efc 	.word	0x24008efc

08014d44 <__mcmp>:
 8014d44:	690b      	ldr	r3, [r1, #16]
 8014d46:	4684      	mov	ip, r0
 8014d48:	6900      	ldr	r0, [r0, #16]
 8014d4a:	1ac0      	subs	r0, r0, r3
 8014d4c:	d116      	bne.n	8014d7c <__mcmp+0x38>
 8014d4e:	f10c 0c14 	add.w	ip, ip, #20
 8014d52:	3114      	adds	r1, #20
 8014d54:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8014d58:	b410      	push	{r4}
 8014d5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d5e:	e001      	b.n	8014d64 <__mcmp+0x20>
 8014d60:	4594      	cmp	ip, r2
 8014d62:	d208      	bcs.n	8014d76 <__mcmp+0x32>
 8014d64:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8014d68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014d6c:	428c      	cmp	r4, r1
 8014d6e:	d0f7      	beq.n	8014d60 <__mcmp+0x1c>
 8014d70:	d205      	bcs.n	8014d7e <__mcmp+0x3a>
 8014d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d7a:	4770      	bx	lr
 8014d7c:	4770      	bx	lr
 8014d7e:	2001      	movs	r0, #1
 8014d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop

08014d88 <__mdiff>:
 8014d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8c:	690f      	ldr	r7, [r1, #16]
 8014d8e:	6913      	ldr	r3, [r2, #16]
 8014d90:	1aff      	subs	r7, r7, r3
 8014d92:	2f00      	cmp	r7, #0
 8014d94:	460e      	mov	r6, r1
 8014d96:	4690      	mov	r8, r2
 8014d98:	d17a      	bne.n	8014e90 <__mdiff+0x108>
 8014d9a:	f101 0514 	add.w	r5, r1, #20
 8014d9e:	3214      	adds	r2, #20
 8014da0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014da4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014da8:	e001      	b.n	8014dae <__mdiff+0x26>
 8014daa:	429d      	cmp	r5, r3
 8014dac:	d273      	bcs.n	8014e96 <__mdiff+0x10e>
 8014dae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014db2:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8014db6:	42a1      	cmp	r1, r4
 8014db8:	d0f7      	beq.n	8014daa <__mdiff+0x22>
 8014dba:	d364      	bcc.n	8014e86 <__mdiff+0xfe>
 8014dbc:	6871      	ldr	r1, [r6, #4]
 8014dbe:	f7ff fd39 	bl	8014834 <_Balloc>
 8014dc2:	4681      	mov	r9, r0
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d072      	beq.n	8014eae <__mdiff+0x126>
 8014dc8:	6935      	ldr	r5, [r6, #16]
 8014dca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014dce:	60c7      	str	r7, [r0, #12]
 8014dd0:	f108 0e14 	add.w	lr, r8, #20
 8014dd4:	f106 0014 	add.w	r0, r6, #20
 8014dd8:	f109 0a14 	add.w	sl, r9, #20
 8014ddc:	f106 0c10 	add.w	ip, r6, #16
 8014de0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8014de4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8014de8:	4656      	mov	r6, sl
 8014dea:	2100      	movs	r1, #0
 8014dec:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014df0:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8014df4:	b2a3      	uxth	r3, r4
 8014df6:	fa11 f18b 	uxtah	r1, r1, fp
 8014dfa:	1acb      	subs	r3, r1, r3
 8014dfc:	0c21      	lsrs	r1, r4, #16
 8014dfe:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8014e02:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8014e06:	b29b      	uxth	r3, r3
 8014e08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8014e0c:	4572      	cmp	r2, lr
 8014e0e:	f846 3b04 	str.w	r3, [r6], #4
 8014e12:	ea4f 4121 	mov.w	r1, r1, asr #16
 8014e16:	d8e9      	bhi.n	8014dec <__mdiff+0x64>
 8014e18:	eba2 0408 	sub.w	r4, r2, r8
 8014e1c:	3c15      	subs	r4, #21
 8014e1e:	f108 0815 	add.w	r8, r8, #21
 8014e22:	4542      	cmp	r2, r8
 8014e24:	f024 0603 	bic.w	r6, r4, #3
 8014e28:	f106 0604 	add.w	r6, r6, #4
 8014e2c:	bf38      	it	cc
 8014e2e:	2604      	movcc	r6, #4
 8014e30:	4430      	add	r0, r6
 8014e32:	f024 0203 	bic.w	r2, r4, #3
 8014e36:	bf38      	it	cc
 8014e38:	2200      	movcc	r2, #0
 8014e3a:	4287      	cmp	r7, r0
 8014e3c:	4452      	add	r2, sl
 8014e3e:	44b2      	add	sl, r6
 8014e40:	d916      	bls.n	8014e70 <__mdiff+0xe8>
 8014e42:	4656      	mov	r6, sl
 8014e44:	4604      	mov	r4, r0
 8014e46:	f854 3b04 	ldr.w	r3, [r4], #4
 8014e4a:	fa11 f183 	uxtah	r1, r1, r3
 8014e4e:	140a      	asrs	r2, r1, #16
 8014e50:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014e54:	b289      	uxth	r1, r1
 8014e56:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8014e5a:	42a7      	cmp	r7, r4
 8014e5c:	f846 3b04 	str.w	r3, [r6], #4
 8014e60:	ea4f 4122 	mov.w	r1, r2, asr #16
 8014e64:	d8ef      	bhi.n	8014e46 <__mdiff+0xbe>
 8014e66:	1e7a      	subs	r2, r7, #1
 8014e68:	1a10      	subs	r0, r2, r0
 8014e6a:	f020 0203 	bic.w	r2, r0, #3
 8014e6e:	4452      	add	r2, sl
 8014e70:	b923      	cbnz	r3, 8014e7c <__mdiff+0xf4>
 8014e72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014e76:	3d01      	subs	r5, #1
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d0fa      	beq.n	8014e72 <__mdiff+0xea>
 8014e7c:	f8c9 5010 	str.w	r5, [r9, #16]
 8014e80:	4648      	mov	r0, r9
 8014e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e86:	4633      	mov	r3, r6
 8014e88:	2701      	movs	r7, #1
 8014e8a:	4646      	mov	r6, r8
 8014e8c:	4698      	mov	r8, r3
 8014e8e:	e795      	b.n	8014dbc <__mdiff+0x34>
 8014e90:	dbf9      	blt.n	8014e86 <__mdiff+0xfe>
 8014e92:	2700      	movs	r7, #0
 8014e94:	e792      	b.n	8014dbc <__mdiff+0x34>
 8014e96:	2100      	movs	r1, #0
 8014e98:	f7ff fccc 	bl	8014834 <_Balloc>
 8014e9c:	4681      	mov	r9, r0
 8014e9e:	b168      	cbz	r0, 8014ebc <__mdiff+0x134>
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8014ea8:	4648      	mov	r0, r9
 8014eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eae:	4b07      	ldr	r3, [pc, #28]	; (8014ecc <__mdiff+0x144>)
 8014eb0:	4807      	ldr	r0, [pc, #28]	; (8014ed0 <__mdiff+0x148>)
 8014eb2:	464a      	mov	r2, r9
 8014eb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014eb8:	f001 faf8 	bl	80164ac <__assert_func>
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <__mdiff+0x144>)
 8014ebe:	4804      	ldr	r0, [pc, #16]	; (8014ed0 <__mdiff+0x148>)
 8014ec0:	464a      	mov	r2, r9
 8014ec2:	f240 2132 	movw	r1, #562	; 0x232
 8014ec6:	f001 faf1 	bl	80164ac <__assert_func>
 8014eca:	bf00      	nop
 8014ecc:	24008e9c 	.word	0x24008e9c
 8014ed0:	24008efc 	.word	0x24008efc

08014ed4 <__d2b>:
 8014ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ed8:	4688      	mov	r8, r1
 8014eda:	b083      	sub	sp, #12
 8014edc:	2101      	movs	r1, #1
 8014ede:	ec57 6b10 	vmov	r6, r7, d0
 8014ee2:	4615      	mov	r5, r2
 8014ee4:	f7ff fca6 	bl	8014834 <_Balloc>
 8014ee8:	4604      	mov	r4, r0
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d04f      	beq.n	8014f8e <__d2b+0xba>
 8014eee:	f3c7 590a 	ubfx	r9, r7, #20, #11
 8014ef2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014ef6:	f1b9 0f00 	cmp.w	r9, #0
 8014efa:	d001      	beq.n	8014f00 <__d2b+0x2c>
 8014efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f00:	2e00      	cmp	r6, #0
 8014f02:	9301      	str	r3, [sp, #4]
 8014f04:	d024      	beq.n	8014f50 <__d2b+0x7c>
 8014f06:	4668      	mov	r0, sp
 8014f08:	9600      	str	r6, [sp, #0]
 8014f0a:	f7ff fd37 	bl	801497c <__lo0bits>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d039      	beq.n	8014f86 <__d2b+0xb2>
 8014f12:	e9dd 1300 	ldrd	r1, r3, [sp]
 8014f16:	f1c0 0220 	rsb	r2, r0, #32
 8014f1a:	fa03 f202 	lsl.w	r2, r3, r2
 8014f1e:	430a      	orrs	r2, r1
 8014f20:	40c3      	lsrs	r3, r0
 8014f22:	6162      	str	r2, [r4, #20]
 8014f24:	9301      	str	r3, [sp, #4]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	bf14      	ite	ne
 8014f2a:	2202      	movne	r2, #2
 8014f2c:	2201      	moveq	r2, #1
 8014f2e:	61a3      	str	r3, [r4, #24]
 8014f30:	6122      	str	r2, [r4, #16]
 8014f32:	f1b9 0f00 	cmp.w	r9, #0
 8014f36:	d016      	beq.n	8014f66 <__d2b+0x92>
 8014f38:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8014f3c:	4403      	add	r3, r0
 8014f3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f42:	f8c8 3000 	str.w	r3, [r8]
 8014f46:	6028      	str	r0, [r5, #0]
 8014f48:	4620      	mov	r0, r4
 8014f4a:	b003      	add	sp, #12
 8014f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f50:	a801      	add	r0, sp, #4
 8014f52:	f7ff fd13 	bl	801497c <__lo0bits>
 8014f56:	9b01      	ldr	r3, [sp, #4]
 8014f58:	6163      	str	r3, [r4, #20]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	3020      	adds	r0, #32
 8014f5e:	6122      	str	r2, [r4, #16]
 8014f60:	f1b9 0f00 	cmp.w	r9, #0
 8014f64:	d1e8      	bne.n	8014f38 <__d2b+0x64>
 8014f66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014f6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014f6e:	f8c8 0000 	str.w	r0, [r8]
 8014f72:	6918      	ldr	r0, [r3, #16]
 8014f74:	f7ff fce2 	bl	801493c <__hi0bits>
 8014f78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014f7c:	6028      	str	r0, [r5, #0]
 8014f7e:	4620      	mov	r0, r4
 8014f80:	b003      	add	sp, #12
 8014f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f86:	9b00      	ldr	r3, [sp, #0]
 8014f88:	6163      	str	r3, [r4, #20]
 8014f8a:	9b01      	ldr	r3, [sp, #4]
 8014f8c:	e7cb      	b.n	8014f26 <__d2b+0x52>
 8014f8e:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <__d2b+0xc8>)
 8014f90:	4803      	ldr	r0, [pc, #12]	; (8014fa0 <__d2b+0xcc>)
 8014f92:	4622      	mov	r2, r4
 8014f94:	f240 310a 	movw	r1, #778	; 0x30a
 8014f98:	f001 fa88 	bl	80164ac <__assert_func>
 8014f9c:	24008e9c 	.word	0x24008e9c
 8014fa0:	24008efc 	.word	0x24008efc

08014fa4 <_realloc_r>:
 8014fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa8:	4617      	mov	r7, r2
 8014faa:	2900      	cmp	r1, #0
 8014fac:	f000 8098 	beq.w	80150e0 <_realloc_r+0x13c>
 8014fb0:	f107 050b 	add.w	r5, r7, #11
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	460c      	mov	r4, r1
 8014fb8:	f7fc f8e6 	bl	8011188 <__malloc_lock>
 8014fbc:	2d16      	cmp	r5, #22
 8014fbe:	d85d      	bhi.n	801507c <_realloc_r+0xd8>
 8014fc0:	2510      	movs	r5, #16
 8014fc2:	462a      	mov	r2, r5
 8014fc4:	42af      	cmp	r7, r5
 8014fc6:	d85e      	bhi.n	8015086 <_realloc_r+0xe2>
 8014fc8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8014fcc:	f021 0603 	bic.w	r6, r1, #3
 8014fd0:	4296      	cmp	r6, r2
 8014fd2:	f1a4 0908 	sub.w	r9, r4, #8
 8014fd6:	da62      	bge.n	801509e <_realloc_r+0xfa>
 8014fd8:	4bbc      	ldr	r3, [pc, #752]	; (80152cc <_realloc_r+0x328>)
 8014fda:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8014fde:	eb09 0006 	add.w	r0, r9, r6
 8014fe2:	4584      	cmp	ip, r0
 8014fe4:	f000 8097 	beq.w	8015116 <_realloc_r+0x172>
 8014fe8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8014fec:	f02c 0301 	bic.w	r3, ip, #1
 8014ff0:	4403      	add	r3, r0
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	07db      	lsls	r3, r3, #31
 8014ff6:	d468      	bmi.n	80150ca <_realloc_r+0x126>
 8014ff8:	f02c 0c03 	bic.w	ip, ip, #3
 8014ffc:	eb06 030c 	add.w	r3, r6, ip
 8015000:	4293      	cmp	r3, r2
 8015002:	da47      	bge.n	8015094 <_realloc_r+0xf0>
 8015004:	07cb      	lsls	r3, r1, #31
 8015006:	d410      	bmi.n	801502a <_realloc_r+0x86>
 8015008:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801500c:	eba9 0a03 	sub.w	sl, r9, r3
 8015010:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015014:	f023 0103 	bic.w	r1, r3, #3
 8015018:	448c      	add	ip, r1
 801501a:	44b4      	add	ip, r6
 801501c:	4594      	cmp	ip, r2
 801501e:	f280 8111 	bge.w	8015244 <_realloc_r+0x2a0>
 8015022:	1873      	adds	r3, r6, r1
 8015024:	4293      	cmp	r3, r2
 8015026:	f280 80e8 	bge.w	80151fa <_realloc_r+0x256>
 801502a:	4639      	mov	r1, r7
 801502c:	4640      	mov	r0, r8
 801502e:	f7fb fda9 	bl	8010b84 <_malloc_r>
 8015032:	4607      	mov	r7, r0
 8015034:	b1e0      	cbz	r0, 8015070 <_realloc_r+0xcc>
 8015036:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801503a:	f023 0301 	bic.w	r3, r3, #1
 801503e:	444b      	add	r3, r9
 8015040:	f1a0 0208 	sub.w	r2, r0, #8
 8015044:	4293      	cmp	r3, r2
 8015046:	f000 80d2 	beq.w	80151ee <_realloc_r+0x24a>
 801504a:	1f32      	subs	r2, r6, #4
 801504c:	2a24      	cmp	r2, #36	; 0x24
 801504e:	f200 80f5 	bhi.w	801523c <_realloc_r+0x298>
 8015052:	2a13      	cmp	r2, #19
 8015054:	f200 80ac 	bhi.w	80151b0 <_realloc_r+0x20c>
 8015058:	4603      	mov	r3, r0
 801505a:	4622      	mov	r2, r4
 801505c:	6811      	ldr	r1, [r2, #0]
 801505e:	6019      	str	r1, [r3, #0]
 8015060:	6851      	ldr	r1, [r2, #4]
 8015062:	6059      	str	r1, [r3, #4]
 8015064:	6892      	ldr	r2, [r2, #8]
 8015066:	609a      	str	r2, [r3, #8]
 8015068:	4621      	mov	r1, r4
 801506a:	4640      	mov	r0, r8
 801506c:	f7ff f848 	bl	8014100 <_free_r>
 8015070:	4640      	mov	r0, r8
 8015072:	f7fc f88f 	bl	8011194 <__malloc_unlock>
 8015076:	4638      	mov	r0, r7
 8015078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801507c:	f025 0507 	bic.w	r5, r5, #7
 8015080:	2d00      	cmp	r5, #0
 8015082:	462a      	mov	r2, r5
 8015084:	da9e      	bge.n	8014fc4 <_realloc_r+0x20>
 8015086:	230c      	movs	r3, #12
 8015088:	f8c8 3000 	str.w	r3, [r8]
 801508c:	2700      	movs	r7, #0
 801508e:	4638      	mov	r0, r7
 8015090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015094:	461e      	mov	r6, r3
 8015096:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801509a:	60d3      	str	r3, [r2, #12]
 801509c:	609a      	str	r2, [r3, #8]
 801509e:	1b73      	subs	r3, r6, r5
 80150a0:	2b0f      	cmp	r3, #15
 80150a2:	d822      	bhi.n	80150ea <_realloc_r+0x146>
 80150a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80150a8:	f003 0301 	and.w	r3, r3, #1
 80150ac:	4333      	orrs	r3, r6
 80150ae:	444e      	add	r6, r9
 80150b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80150b4:	6873      	ldr	r3, [r6, #4]
 80150b6:	f043 0301 	orr.w	r3, r3, #1
 80150ba:	6073      	str	r3, [r6, #4]
 80150bc:	4640      	mov	r0, r8
 80150be:	4627      	mov	r7, r4
 80150c0:	f7fc f868 	bl	8011194 <__malloc_unlock>
 80150c4:	4638      	mov	r0, r7
 80150c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ca:	07c9      	lsls	r1, r1, #31
 80150cc:	d4ad      	bmi.n	801502a <_realloc_r+0x86>
 80150ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80150d2:	eba9 0a03 	sub.w	sl, r9, r3
 80150d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80150da:	f021 0103 	bic.w	r1, r1, #3
 80150de:	e7a0      	b.n	8015022 <_realloc_r+0x7e>
 80150e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	4611      	mov	r1, r2
 80150e6:	f7fb bd4d 	b.w	8010b84 <_malloc_r>
 80150ea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80150ee:	f001 0101 	and.w	r1, r1, #1
 80150f2:	4329      	orrs	r1, r5
 80150f4:	f8c9 1004 	str.w	r1, [r9, #4]
 80150f8:	eb09 0105 	add.w	r1, r9, r5
 80150fc:	444e      	add	r6, r9
 80150fe:	f043 0301 	orr.w	r3, r3, #1
 8015102:	604b      	str	r3, [r1, #4]
 8015104:	6873      	ldr	r3, [r6, #4]
 8015106:	f043 0301 	orr.w	r3, r3, #1
 801510a:	3108      	adds	r1, #8
 801510c:	6073      	str	r3, [r6, #4]
 801510e:	4640      	mov	r0, r8
 8015110:	f7fe fff6 	bl	8014100 <_free_r>
 8015114:	e7d2      	b.n	80150bc <_realloc_r+0x118>
 8015116:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801511a:	f020 0b03 	bic.w	fp, r0, #3
 801511e:	eb06 0c0b 	add.w	ip, r6, fp
 8015122:	f105 0010 	add.w	r0, r5, #16
 8015126:	4584      	cmp	ip, r0
 8015128:	da4d      	bge.n	80151c6 <_realloc_r+0x222>
 801512a:	07c9      	lsls	r1, r1, #31
 801512c:	f53f af7d 	bmi.w	801502a <_realloc_r+0x86>
 8015130:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8015134:	eba9 0a01 	sub.w	sl, r9, r1
 8015138:	f8da 1004 	ldr.w	r1, [sl, #4]
 801513c:	f021 0103 	bic.w	r1, r1, #3
 8015140:	448b      	add	fp, r1
 8015142:	44b3      	add	fp, r6
 8015144:	4558      	cmp	r0, fp
 8015146:	f73f af6c 	bgt.w	8015022 <_realloc_r+0x7e>
 801514a:	4657      	mov	r7, sl
 801514c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015150:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8015154:	1f32      	subs	r2, r6, #4
 8015156:	2a24      	cmp	r2, #36	; 0x24
 8015158:	60c1      	str	r1, [r0, #12]
 801515a:	6088      	str	r0, [r1, #8]
 801515c:	f200 80db 	bhi.w	8015316 <_realloc_r+0x372>
 8015160:	2a13      	cmp	r2, #19
 8015162:	f240 80d6 	bls.w	8015312 <_realloc_r+0x36e>
 8015166:	6821      	ldr	r1, [r4, #0]
 8015168:	f8ca 1008 	str.w	r1, [sl, #8]
 801516c:	6861      	ldr	r1, [r4, #4]
 801516e:	f8ca 100c 	str.w	r1, [sl, #12]
 8015172:	2a1b      	cmp	r2, #27
 8015174:	f200 80df 	bhi.w	8015336 <_realloc_r+0x392>
 8015178:	3408      	adds	r4, #8
 801517a:	f10a 0210 	add.w	r2, sl, #16
 801517e:	6821      	ldr	r1, [r4, #0]
 8015180:	6011      	str	r1, [r2, #0]
 8015182:	6861      	ldr	r1, [r4, #4]
 8015184:	6051      	str	r1, [r2, #4]
 8015186:	68a1      	ldr	r1, [r4, #8]
 8015188:	6091      	str	r1, [r2, #8]
 801518a:	eb0a 0105 	add.w	r1, sl, r5
 801518e:	ebab 0205 	sub.w	r2, fp, r5
 8015192:	f042 0201 	orr.w	r2, r2, #1
 8015196:	6099      	str	r1, [r3, #8]
 8015198:	604a      	str	r2, [r1, #4]
 801519a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801519e:	f003 0301 	and.w	r3, r3, #1
 80151a2:	431d      	orrs	r5, r3
 80151a4:	4640      	mov	r0, r8
 80151a6:	f8ca 5004 	str.w	r5, [sl, #4]
 80151aa:	f7fb fff3 	bl	8011194 <__malloc_unlock>
 80151ae:	e76e      	b.n	801508e <_realloc_r+0xea>
 80151b0:	6823      	ldr	r3, [r4, #0]
 80151b2:	6003      	str	r3, [r0, #0]
 80151b4:	6863      	ldr	r3, [r4, #4]
 80151b6:	6043      	str	r3, [r0, #4]
 80151b8:	2a1b      	cmp	r2, #27
 80151ba:	d868      	bhi.n	801528e <_realloc_r+0x2ea>
 80151bc:	f104 0208 	add.w	r2, r4, #8
 80151c0:	f100 0308 	add.w	r3, r0, #8
 80151c4:	e74a      	b.n	801505c <_realloc_r+0xb8>
 80151c6:	eb09 0205 	add.w	r2, r9, r5
 80151ca:	609a      	str	r2, [r3, #8]
 80151cc:	ebac 0305 	sub.w	r3, ip, r5
 80151d0:	f043 0301 	orr.w	r3, r3, #1
 80151d4:	6053      	str	r3, [r2, #4]
 80151d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80151da:	f003 0301 	and.w	r3, r3, #1
 80151de:	431d      	orrs	r5, r3
 80151e0:	4640      	mov	r0, r8
 80151e2:	f844 5c04 	str.w	r5, [r4, #-4]
 80151e6:	f7fb ffd5 	bl	8011194 <__malloc_unlock>
 80151ea:	4627      	mov	r7, r4
 80151ec:	e74f      	b.n	801508e <_realloc_r+0xea>
 80151ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151f2:	f023 0303 	bic.w	r3, r3, #3
 80151f6:	441e      	add	r6, r3
 80151f8:	e751      	b.n	801509e <_realloc_r+0xfa>
 80151fa:	4657      	mov	r7, sl
 80151fc:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015200:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8015204:	1f32      	subs	r2, r6, #4
 8015206:	2a24      	cmp	r2, #36	; 0x24
 8015208:	60c1      	str	r1, [r0, #12]
 801520a:	6088      	str	r0, [r1, #8]
 801520c:	d84c      	bhi.n	80152a8 <_realloc_r+0x304>
 801520e:	2a13      	cmp	r2, #19
 8015210:	d948      	bls.n	80152a4 <_realloc_r+0x300>
 8015212:	6821      	ldr	r1, [r4, #0]
 8015214:	f8ca 1008 	str.w	r1, [sl, #8]
 8015218:	6861      	ldr	r1, [r4, #4]
 801521a:	f8ca 100c 	str.w	r1, [sl, #12]
 801521e:	2a1b      	cmp	r2, #27
 8015220:	d856      	bhi.n	80152d0 <_realloc_r+0x32c>
 8015222:	3408      	adds	r4, #8
 8015224:	f10a 0210 	add.w	r2, sl, #16
 8015228:	461e      	mov	r6, r3
 801522a:	6823      	ldr	r3, [r4, #0]
 801522c:	6013      	str	r3, [r2, #0]
 801522e:	6863      	ldr	r3, [r4, #4]
 8015230:	6053      	str	r3, [r2, #4]
 8015232:	68a3      	ldr	r3, [r4, #8]
 8015234:	6093      	str	r3, [r2, #8]
 8015236:	46d1      	mov	r9, sl
 8015238:	463c      	mov	r4, r7
 801523a:	e730      	b.n	801509e <_realloc_r+0xfa>
 801523c:	4621      	mov	r1, r4
 801523e:	f7ff fa7d 	bl	801473c <memmove>
 8015242:	e711      	b.n	8015068 <_realloc_r+0xc4>
 8015244:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8015248:	4657      	mov	r7, sl
 801524a:	60cb      	str	r3, [r1, #12]
 801524c:	6099      	str	r1, [r3, #8]
 801524e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8015252:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015256:	60cb      	str	r3, [r1, #12]
 8015258:	1f32      	subs	r2, r6, #4
 801525a:	2a24      	cmp	r2, #36	; 0x24
 801525c:	6099      	str	r1, [r3, #8]
 801525e:	d82d      	bhi.n	80152bc <_realloc_r+0x318>
 8015260:	2a13      	cmp	r2, #19
 8015262:	d929      	bls.n	80152b8 <_realloc_r+0x314>
 8015264:	6823      	ldr	r3, [r4, #0]
 8015266:	f8ca 3008 	str.w	r3, [sl, #8]
 801526a:	6863      	ldr	r3, [r4, #4]
 801526c:	f8ca 300c 	str.w	r3, [sl, #12]
 8015270:	2a1b      	cmp	r2, #27
 8015272:	d842      	bhi.n	80152fa <_realloc_r+0x356>
 8015274:	3408      	adds	r4, #8
 8015276:	f10a 0310 	add.w	r3, sl, #16
 801527a:	6822      	ldr	r2, [r4, #0]
 801527c:	601a      	str	r2, [r3, #0]
 801527e:	6862      	ldr	r2, [r4, #4]
 8015280:	605a      	str	r2, [r3, #4]
 8015282:	68a2      	ldr	r2, [r4, #8]
 8015284:	609a      	str	r2, [r3, #8]
 8015286:	4666      	mov	r6, ip
 8015288:	46d1      	mov	r9, sl
 801528a:	463c      	mov	r4, r7
 801528c:	e707      	b.n	801509e <_realloc_r+0xfa>
 801528e:	68a3      	ldr	r3, [r4, #8]
 8015290:	6083      	str	r3, [r0, #8]
 8015292:	68e3      	ldr	r3, [r4, #12]
 8015294:	60c3      	str	r3, [r0, #12]
 8015296:	2a24      	cmp	r2, #36	; 0x24
 8015298:	d026      	beq.n	80152e8 <_realloc_r+0x344>
 801529a:	f104 0210 	add.w	r2, r4, #16
 801529e:	f100 0310 	add.w	r3, r0, #16
 80152a2:	e6db      	b.n	801505c <_realloc_r+0xb8>
 80152a4:	463a      	mov	r2, r7
 80152a6:	e7bf      	b.n	8015228 <_realloc_r+0x284>
 80152a8:	4621      	mov	r1, r4
 80152aa:	4638      	mov	r0, r7
 80152ac:	461e      	mov	r6, r3
 80152ae:	46d1      	mov	r9, sl
 80152b0:	f7ff fa44 	bl	801473c <memmove>
 80152b4:	463c      	mov	r4, r7
 80152b6:	e6f2      	b.n	801509e <_realloc_r+0xfa>
 80152b8:	463b      	mov	r3, r7
 80152ba:	e7de      	b.n	801527a <_realloc_r+0x2d6>
 80152bc:	4621      	mov	r1, r4
 80152be:	4638      	mov	r0, r7
 80152c0:	4666      	mov	r6, ip
 80152c2:	46d1      	mov	r9, sl
 80152c4:	f7ff fa3a 	bl	801473c <memmove>
 80152c8:	463c      	mov	r4, r7
 80152ca:	e6e8      	b.n	801509e <_realloc_r+0xfa>
 80152cc:	240085f8 	.word	0x240085f8
 80152d0:	68a1      	ldr	r1, [r4, #8]
 80152d2:	f8ca 1010 	str.w	r1, [sl, #16]
 80152d6:	68e1      	ldr	r1, [r4, #12]
 80152d8:	f8ca 1014 	str.w	r1, [sl, #20]
 80152dc:	2a24      	cmp	r2, #36	; 0x24
 80152de:	d020      	beq.n	8015322 <_realloc_r+0x37e>
 80152e0:	3410      	adds	r4, #16
 80152e2:	f10a 0218 	add.w	r2, sl, #24
 80152e6:	e79f      	b.n	8015228 <_realloc_r+0x284>
 80152e8:	6923      	ldr	r3, [r4, #16]
 80152ea:	6103      	str	r3, [r0, #16]
 80152ec:	6961      	ldr	r1, [r4, #20]
 80152ee:	6141      	str	r1, [r0, #20]
 80152f0:	f104 0218 	add.w	r2, r4, #24
 80152f4:	f100 0318 	add.w	r3, r0, #24
 80152f8:	e6b0      	b.n	801505c <_realloc_r+0xb8>
 80152fa:	68a3      	ldr	r3, [r4, #8]
 80152fc:	f8ca 3010 	str.w	r3, [sl, #16]
 8015300:	68e3      	ldr	r3, [r4, #12]
 8015302:	f8ca 3014 	str.w	r3, [sl, #20]
 8015306:	2a24      	cmp	r2, #36	; 0x24
 8015308:	d021      	beq.n	801534e <_realloc_r+0x3aa>
 801530a:	3410      	adds	r4, #16
 801530c:	f10a 0318 	add.w	r3, sl, #24
 8015310:	e7b3      	b.n	801527a <_realloc_r+0x2d6>
 8015312:	463a      	mov	r2, r7
 8015314:	e733      	b.n	801517e <_realloc_r+0x1da>
 8015316:	4621      	mov	r1, r4
 8015318:	4638      	mov	r0, r7
 801531a:	f7ff fa0f 	bl	801473c <memmove>
 801531e:	4b16      	ldr	r3, [pc, #88]	; (8015378 <_realloc_r+0x3d4>)
 8015320:	e733      	b.n	801518a <_realloc_r+0x1e6>
 8015322:	6922      	ldr	r2, [r4, #16]
 8015324:	f8ca 2018 	str.w	r2, [sl, #24]
 8015328:	6962      	ldr	r2, [r4, #20]
 801532a:	f8ca 201c 	str.w	r2, [sl, #28]
 801532e:	3418      	adds	r4, #24
 8015330:	f10a 0220 	add.w	r2, sl, #32
 8015334:	e778      	b.n	8015228 <_realloc_r+0x284>
 8015336:	68a1      	ldr	r1, [r4, #8]
 8015338:	f8ca 1010 	str.w	r1, [sl, #16]
 801533c:	68e1      	ldr	r1, [r4, #12]
 801533e:	f8ca 1014 	str.w	r1, [sl, #20]
 8015342:	2a24      	cmp	r2, #36	; 0x24
 8015344:	d00d      	beq.n	8015362 <_realloc_r+0x3be>
 8015346:	3410      	adds	r4, #16
 8015348:	f10a 0218 	add.w	r2, sl, #24
 801534c:	e717      	b.n	801517e <_realloc_r+0x1da>
 801534e:	6923      	ldr	r3, [r4, #16]
 8015350:	f8ca 3018 	str.w	r3, [sl, #24]
 8015354:	6963      	ldr	r3, [r4, #20]
 8015356:	f8ca 301c 	str.w	r3, [sl, #28]
 801535a:	3418      	adds	r4, #24
 801535c:	f10a 0320 	add.w	r3, sl, #32
 8015360:	e78b      	b.n	801527a <_realloc_r+0x2d6>
 8015362:	6922      	ldr	r2, [r4, #16]
 8015364:	f8ca 2018 	str.w	r2, [sl, #24]
 8015368:	6962      	ldr	r2, [r4, #20]
 801536a:	f8ca 201c 	str.w	r2, [sl, #28]
 801536e:	3418      	adds	r4, #24
 8015370:	f10a 0220 	add.w	r2, sl, #32
 8015374:	e703      	b.n	801517e <_realloc_r+0x1da>
 8015376:	bf00      	nop
 8015378:	240085f8 	.word	0x240085f8
 801537c:	00000000 	.word	0x00000000

08015380 <frexp>:
 8015380:	b430      	push	{r4, r5}
 8015382:	b082      	sub	sp, #8
 8015384:	ed8d 0b00 	vstr	d0, [sp]
 8015388:	9a01      	ldr	r2, [sp, #4]
 801538a:	4c19      	ldr	r4, [pc, #100]	; (80153f0 <frexp+0x70>)
 801538c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015390:	2100      	movs	r1, #0
 8015392:	42a3      	cmp	r3, r4
 8015394:	6001      	str	r1, [r0, #0]
 8015396:	dc21      	bgt.n	80153dc <frexp+0x5c>
 8015398:	9c00      	ldr	r4, [sp, #0]
 801539a:	431c      	orrs	r4, r3
 801539c:	d01e      	beq.n	80153dc <frexp+0x5c>
 801539e:	4c15      	ldr	r4, [pc, #84]	; (80153f4 <frexp+0x74>)
 80153a0:	4014      	ands	r4, r2
 80153a2:	b954      	cbnz	r4, 80153ba <frexp+0x3a>
 80153a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80153e8 <frexp+0x68>
 80153a8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80153ac:	ed8d 7b00 	vstr	d7, [sp]
 80153b0:	9a01      	ldr	r2, [sp, #4]
 80153b2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80153b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80153ba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80153be:	e9dd 4500 	ldrd	r4, r5, [sp]
 80153c2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80153c6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80153ca:	151b      	asrs	r3, r3, #20
 80153cc:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80153d0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80153d4:	e9cd 4500 	strd	r4, r5, [sp]
 80153d8:	440b      	add	r3, r1
 80153da:	6003      	str	r3, [r0, #0]
 80153dc:	ed9d 0b00 	vldr	d0, [sp]
 80153e0:	b002      	add	sp, #8
 80153e2:	bc30      	pop	{r4, r5}
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	00000000 	.word	0x00000000
 80153ec:	43500000 	.word	0x43500000
 80153f0:	7fefffff 	.word	0x7fefffff
 80153f4:	7ff00000 	.word	0x7ff00000

080153f8 <__sread>:
 80153f8:	b510      	push	{r4, lr}
 80153fa:	460c      	mov	r4, r1
 80153fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015400:	f001 fa1e 	bl	8016840 <_read_r>
 8015404:	2800      	cmp	r0, #0
 8015406:	db03      	blt.n	8015410 <__sread+0x18>
 8015408:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801540a:	4403      	add	r3, r0
 801540c:	6523      	str	r3, [r4, #80]	; 0x50
 801540e:	bd10      	pop	{r4, pc}
 8015410:	89a3      	ldrh	r3, [r4, #12]
 8015412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015416:	81a3      	strh	r3, [r4, #12]
 8015418:	bd10      	pop	{r4, pc}
 801541a:	bf00      	nop

0801541c <__swrite>:
 801541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015420:	460c      	mov	r4, r1
 8015422:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8015426:	461f      	mov	r7, r3
 8015428:	05cb      	lsls	r3, r1, #23
 801542a:	4605      	mov	r5, r0
 801542c:	4616      	mov	r6, r2
 801542e:	d40b      	bmi.n	8015448 <__swrite+0x2c>
 8015430:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8015434:	81a1      	strh	r1, [r4, #12]
 8015436:	463b      	mov	r3, r7
 8015438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801543c:	4632      	mov	r2, r6
 801543e:	4628      	mov	r0, r5
 8015440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015444:	f000 bfd6 	b.w	80163f4 <_write_r>
 8015448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801544c:	2302      	movs	r3, #2
 801544e:	2200      	movs	r2, #0
 8015450:	f001 f9ca 	bl	80167e8 <_lseek_r>
 8015454:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015458:	e7ea      	b.n	8015430 <__swrite+0x14>
 801545a:	bf00      	nop

0801545c <__sseek>:
 801545c:	b510      	push	{r4, lr}
 801545e:	460c      	mov	r4, r1
 8015460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015464:	f001 f9c0 	bl	80167e8 <_lseek_r>
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	1c42      	adds	r2, r0, #1
 801546c:	bf0e      	itee	eq
 801546e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015476:	6520      	strne	r0, [r4, #80]	; 0x50
 8015478:	81a3      	strh	r3, [r4, #12]
 801547a:	bd10      	pop	{r4, pc}

0801547c <__sclose>:
 801547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015480:	f001 b870 	b.w	8016564 <_close_r>

08015484 <strncpy>:
 8015484:	b530      	push	{r4, r5, lr}
 8015486:	ea40 0401 	orr.w	r4, r0, r1
 801548a:	07a3      	lsls	r3, r4, #30
 801548c:	d101      	bne.n	8015492 <strncpy+0xe>
 801548e:	2a03      	cmp	r2, #3
 8015490:	d80f      	bhi.n	80154b2 <strncpy+0x2e>
 8015492:	4684      	mov	ip, r0
 8015494:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8015498:	e007      	b.n	80154aa <strncpy+0x26>
 801549a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 801549e:	f803 1b01 	strb.w	r1, [r3], #1
 80154a2:	1e54      	subs	r4, r2, #1
 80154a4:	b1c1      	cbz	r1, 80154d8 <strncpy+0x54>
 80154a6:	469c      	mov	ip, r3
 80154a8:	4622      	mov	r2, r4
 80154aa:	4663      	mov	r3, ip
 80154ac:	2a00      	cmp	r2, #0
 80154ae:	d1f4      	bne.n	801549a <strncpy+0x16>
 80154b0:	bd30      	pop	{r4, r5, pc}
 80154b2:	460b      	mov	r3, r1
 80154b4:	4684      	mov	ip, r0
 80154b6:	4619      	mov	r1, r3
 80154b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80154bc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 80154c0:	ea24 0405 	bic.w	r4, r4, r5
 80154c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80154c8:	d1e4      	bne.n	8015494 <strncpy+0x10>
 80154ca:	3a04      	subs	r2, #4
 80154cc:	2a03      	cmp	r2, #3
 80154ce:	f84c 5b04 	str.w	r5, [ip], #4
 80154d2:	4619      	mov	r1, r3
 80154d4:	d8ef      	bhi.n	80154b6 <strncpy+0x32>
 80154d6:	e7dd      	b.n	8015494 <strncpy+0x10>
 80154d8:	4462      	add	r2, ip
 80154da:	2c00      	cmp	r4, #0
 80154dc:	d0e8      	beq.n	80154b0 <strncpy+0x2c>
 80154de:	f803 1b01 	strb.w	r1, [r3], #1
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d1fb      	bne.n	80154de <strncpy+0x5a>
 80154e6:	bd30      	pop	{r4, r5, pc}

080154e8 <__sprint_r.part.0>:
 80154e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80154ee:	049c      	lsls	r4, r3, #18
 80154f0:	4690      	mov	r8, r2
 80154f2:	d52d      	bpl.n	8015550 <__sprint_r.part.0+0x68>
 80154f4:	6893      	ldr	r3, [r2, #8]
 80154f6:	6812      	ldr	r2, [r2, #0]
 80154f8:	b343      	cbz	r3, 801554c <__sprint_r.part.0+0x64>
 80154fa:	468b      	mov	fp, r1
 80154fc:	4606      	mov	r6, r0
 80154fe:	f102 0908 	add.w	r9, r2, #8
 8015502:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8015506:	ea5f 079a 	movs.w	r7, sl, lsr #2
 801550a:	d015      	beq.n	8015538 <__sprint_r.part.0+0x50>
 801550c:	3d04      	subs	r5, #4
 801550e:	2400      	movs	r4, #0
 8015510:	e001      	b.n	8015516 <__sprint_r.part.0+0x2e>
 8015512:	42a7      	cmp	r7, r4
 8015514:	d00e      	beq.n	8015534 <__sprint_r.part.0+0x4c>
 8015516:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801551a:	465a      	mov	r2, fp
 801551c:	4630      	mov	r0, r6
 801551e:	f001 f901 	bl	8016724 <_fputwc_r>
 8015522:	1c43      	adds	r3, r0, #1
 8015524:	f104 0401 	add.w	r4, r4, #1
 8015528:	d1f3      	bne.n	8015512 <__sprint_r.part.0+0x2a>
 801552a:	2300      	movs	r3, #0
 801552c:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8015530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015534:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015538:	f02a 0a03 	bic.w	sl, sl, #3
 801553c:	eba3 030a 	sub.w	r3, r3, sl
 8015540:	f8c8 3008 	str.w	r3, [r8, #8]
 8015544:	f109 0908 	add.w	r9, r9, #8
 8015548:	2b00      	cmp	r3, #0
 801554a:	d1da      	bne.n	8015502 <__sprint_r.part.0+0x1a>
 801554c:	2000      	movs	r0, #0
 801554e:	e7ec      	b.n	801552a <__sprint_r.part.0+0x42>
 8015550:	f7fe fedc 	bl	801430c <__sfvwrite_r>
 8015554:	2300      	movs	r3, #0
 8015556:	e9c8 3301 	strd	r3, r3, [r8, #4]
 801555a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555e:	bf00      	nop

08015560 <__sprint_r>:
 8015560:	b410      	push	{r4}
 8015562:	6894      	ldr	r4, [r2, #8]
 8015564:	b11c      	cbz	r4, 801556e <__sprint_r+0xe>
 8015566:	f85d 4b04 	ldr.w	r4, [sp], #4
 801556a:	f7ff bfbd 	b.w	80154e8 <__sprint_r.part.0>
 801556e:	4620      	mov	r0, r4
 8015570:	6054      	str	r4, [r2, #4]
 8015572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015576:	4770      	bx	lr

08015578 <_vfiprintf_r>:
 8015578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801557c:	ed2d 8b02 	vpush	{d8}
 8015580:	b0bb      	sub	sp, #236	; 0xec
 8015582:	ee08 1a10 	vmov	s16, r1
 8015586:	ee08 0a90 	vmov	s17, r0
 801558a:	461c      	mov	r4, r3
 801558c:	4617      	mov	r7, r2
 801558e:	9303      	str	r3, [sp, #12]
 8015590:	b118      	cbz	r0, 801559a <_vfiprintf_r+0x22>
 8015592:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015594:	2b00      	cmp	r3, #0
 8015596:	f000 829c 	beq.w	8015ad2 <_vfiprintf_r+0x55a>
 801559a:	ee18 2a10 	vmov	r2, s16
 801559e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80155a0:	07de      	lsls	r6, r3, #31
 80155a2:	f140 819e 	bpl.w	80158e2 <_vfiprintf_r+0x36a>
 80155a6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80155aa:	b28a      	uxth	r2, r1
 80155ac:	0490      	lsls	r0, r2, #18
 80155ae:	d409      	bmi.n	80155c4 <_vfiprintf_r+0x4c>
 80155b0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80155b4:	ee18 1a10 	vmov	r1, s16
 80155b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80155ba:	818a      	strh	r2, [r1, #12]
 80155bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80155c0:	b292      	uxth	r2, r2
 80155c2:	664b      	str	r3, [r1, #100]	; 0x64
 80155c4:	0711      	lsls	r1, r2, #28
 80155c6:	f140 80f8 	bpl.w	80157ba <_vfiprintf_r+0x242>
 80155ca:	ee18 3a10 	vmov	r3, s16
 80155ce:	691b      	ldr	r3, [r3, #16]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f000 80f2 	beq.w	80157ba <_vfiprintf_r+0x242>
 80155d6:	f002 031a 	and.w	r3, r2, #26
 80155da:	2b0a      	cmp	r3, #10
 80155dc:	f000 80fe 	beq.w	80157dc <_vfiprintf_r+0x264>
 80155e0:	ab11      	add	r3, sp, #68	; 0x44
 80155e2:	930e      	str	r3, [sp, #56]	; 0x38
 80155e4:	2300      	movs	r3, #0
 80155e6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80155ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80155ee:	9306      	str	r3, [sp, #24]
 80155f0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80155f4:	9307      	str	r3, [sp, #28]
 80155f6:	9302      	str	r3, [sp, #8]
 80155f8:	783b      	ldrb	r3, [r7, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f000 815b 	beq.w	80158b6 <_vfiprintf_r+0x33e>
 8015600:	463c      	mov	r4, r7
 8015602:	e004      	b.n	801560e <_vfiprintf_r+0x96>
 8015604:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 8134 	beq.w	8015876 <_vfiprintf_r+0x2fe>
 801560e:	2b25      	cmp	r3, #37	; 0x25
 8015610:	d1f8      	bne.n	8015604 <_vfiprintf_r+0x8c>
 8015612:	1be5      	subs	r5, r4, r7
 8015614:	f040 8131 	bne.w	801587a <_vfiprintf_r+0x302>
 8015618:	7823      	ldrb	r3, [r4, #0]
 801561a:	2b00      	cmp	r3, #0
 801561c:	f000 814b 	beq.w	80158b6 <_vfiprintf_r+0x33e>
 8015620:	f04f 0300 	mov.w	r3, #0
 8015624:	2500      	movs	r5, #0
 8015626:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801562a:	1c67      	adds	r7, r4, #1
 801562c:	7863      	ldrb	r3, [r4, #1]
 801562e:	9501      	str	r5, [sp, #4]
 8015630:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8015634:	242b      	movs	r4, #43	; 0x2b
 8015636:	3701      	adds	r7, #1
 8015638:	f1a3 0220 	sub.w	r2, r3, #32
 801563c:	2a5a      	cmp	r2, #90	; 0x5a
 801563e:	f200 8161 	bhi.w	8015904 <_vfiprintf_r+0x38c>
 8015642:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015646:	02ab      	.short	0x02ab
 8015648:	015f015f 	.word	0x015f015f
 801564c:	015f02a7 	.word	0x015f02a7
 8015650:	015f015f 	.word	0x015f015f
 8015654:	015f006a 	.word	0x015f006a
 8015658:	0249015f 	.word	0x0249015f
 801565c:	015f027e 	.word	0x015f027e
 8015660:	02b90254 	.word	0x02b90254
 8015664:	02b5015f 	.word	0x02b5015f
 8015668:	005b005b 	.word	0x005b005b
 801566c:	005b005b 	.word	0x005b005b
 8015670:	005b005b 	.word	0x005b005b
 8015674:	005b005b 	.word	0x005b005b
 8015678:	015f005b 	.word	0x015f005b
 801567c:	015f015f 	.word	0x015f015f
 8015680:	015f015f 	.word	0x015f015f
 8015684:	015f015f 	.word	0x015f015f
 8015688:	015f015f 	.word	0x015f015f
 801568c:	00840236 	.word	0x00840236
 8015690:	015f015f 	.word	0x015f015f
 8015694:	015f015f 	.word	0x015f015f
 8015698:	015f015f 	.word	0x015f015f
 801569c:	015f015f 	.word	0x015f015f
 80156a0:	015f015f 	.word	0x015f015f
 80156a4:	015f00e5 	.word	0x015f00e5
 80156a8:	015f015f 	.word	0x015f015f
 80156ac:	015f021a 	.word	0x015f021a
 80156b0:	015f026c 	.word	0x015f026c
 80156b4:	054c015f 	.word	0x054c015f
 80156b8:	015f015f 	.word	0x015f015f
 80156bc:	015f015f 	.word	0x015f015f
 80156c0:	015f015f 	.word	0x015f015f
 80156c4:	015f015f 	.word	0x015f015f
 80156c8:	015f015f 	.word	0x015f015f
 80156cc:	00860236 	.word	0x00860236
 80156d0:	015f015f 	.word	0x015f015f
 80156d4:	0262015f 	.word	0x0262015f
 80156d8:	00800086 	.word	0x00800086
 80156dc:	0258015f 	.word	0x0258015f
 80156e0:	0294015f 	.word	0x0294015f
 80156e4:	028200e7 	.word	0x028200e7
 80156e8:	015f0080 	.word	0x015f0080
 80156ec:	007e021a 	.word	0x007e021a
 80156f0:	015f056c 	.word	0x015f056c
 80156f4:	056e015f 	.word	0x056e015f
 80156f8:	007e015f 	.word	0x007e015f
 80156fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015700:	2100      	movs	r1, #0
 8015702:	f817 3b01 	ldrb.w	r3, [r7], #1
 8015706:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801570a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801570e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015712:	2a09      	cmp	r2, #9
 8015714:	d9f5      	bls.n	8015702 <_vfiprintf_r+0x18a>
 8015716:	9101      	str	r1, [sp, #4]
 8015718:	e78e      	b.n	8015638 <_vfiprintf_r+0xc0>
 801571a:	ee18 0a90 	vmov	r0, s17
 801571e:	f7fe ff91 	bl	8014644 <_localeconv_r>
 8015722:	6843      	ldr	r3, [r0, #4]
 8015724:	9308      	str	r3, [sp, #32]
 8015726:	4618      	mov	r0, r3
 8015728:	f7f3 faaa 	bl	8008c80 <strlen>
 801572c:	9009      	str	r0, [sp, #36]	; 0x24
 801572e:	4606      	mov	r6, r0
 8015730:	ee18 0a90 	vmov	r0, s17
 8015734:	f7fe ff86 	bl	8014644 <_localeconv_r>
 8015738:	6883      	ldr	r3, [r0, #8]
 801573a:	9307      	str	r3, [sp, #28]
 801573c:	2e00      	cmp	r6, #0
 801573e:	f040 84a9 	bne.w	8016094 <_vfiprintf_r+0xb1c>
 8015742:	783b      	ldrb	r3, [r7, #0]
 8015744:	e777      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015746:	783b      	ldrb	r3, [r7, #0]
 8015748:	f045 0520 	orr.w	r5, r5, #32
 801574c:	e773      	b.n	8015636 <_vfiprintf_r+0xbe>
 801574e:	f045 0510 	orr.w	r5, r5, #16
 8015752:	06ac      	lsls	r4, r5, #26
 8015754:	9e03      	ldr	r6, [sp, #12]
 8015756:	f140 8182 	bpl.w	8015a5e <_vfiprintf_r+0x4e6>
 801575a:	3607      	adds	r6, #7
 801575c:	f026 0607 	bic.w	r6, r6, #7
 8015760:	4632      	mov	r2, r6
 8015762:	6873      	ldr	r3, [r6, #4]
 8015764:	f852 6b08 	ldr.w	r6, [r2], #8
 8015768:	9203      	str	r2, [sp, #12]
 801576a:	4698      	mov	r8, r3
 801576c:	2b00      	cmp	r3, #0
 801576e:	f2c0 8459 	blt.w	8016024 <_vfiprintf_r+0xaac>
 8015772:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8015776:	f000 853e 	beq.w	80161f6 <_vfiprintf_r+0xc7e>
 801577a:	ea56 0308 	orrs.w	r3, r6, r8
 801577e:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 8015782:	f000 8434 	beq.w	8015fee <_vfiprintf_r+0xa76>
 8015786:	2e0a      	cmp	r6, #10
 8015788:	f178 0300 	sbcs.w	r3, r8, #0
 801578c:	f080 84eb 	bcs.w	8016166 <_vfiprintf_r+0xbee>
 8015790:	3630      	adds	r6, #48	; 0x30
 8015792:	2301      	movs	r3, #1
 8015794:	f88d 60e7 	strb.w	r6, [sp, #231]	; 0xe7
 8015798:	4655      	mov	r5, sl
 801579a:	9300      	str	r3, [sp, #0]
 801579c:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 80157a0:	9a00      	ldr	r2, [sp, #0]
 80157a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80157a6:	455a      	cmp	r2, fp
 80157a8:	bfb8      	it	lt
 80157aa:	465a      	movlt	r2, fp
 80157ac:	4690      	mov	r8, r2
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f000 80b7 	beq.w	8015922 <_vfiprintf_r+0x3aa>
 80157b4:	f102 0801 	add.w	r8, r2, #1
 80157b8:	e0b3      	b.n	8015922 <_vfiprintf_r+0x3aa>
 80157ba:	ee18 1a10 	vmov	r1, s16
 80157be:	ee18 0a90 	vmov	r0, s17
 80157c2:	ee18 5a10 	vmov	r5, s16
 80157c6:	f7fd fb5d 	bl	8012e84 <__swsetup_r>
 80157ca:	2800      	cmp	r0, #0
 80157cc:	f040 85ac 	bne.w	8016328 <_vfiprintf_r+0xdb0>
 80157d0:	89aa      	ldrh	r2, [r5, #12]
 80157d2:	f002 031a 	and.w	r3, r2, #26
 80157d6:	2b0a      	cmp	r3, #10
 80157d8:	f47f af02 	bne.w	80155e0 <_vfiprintf_r+0x68>
 80157dc:	ee18 1a10 	vmov	r1, s16
 80157e0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	f6ff aefb 	blt.w	80155e0 <_vfiprintf_r+0x68>
 80157ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80157ec:	07de      	lsls	r6, r3, #31
 80157ee:	d402      	bmi.n	80157f6 <_vfiprintf_r+0x27e>
 80157f0:	0595      	lsls	r5, r2, #22
 80157f2:	f140 8577 	bpl.w	80162e4 <_vfiprintf_r+0xd6c>
 80157f6:	ee18 1a10 	vmov	r1, s16
 80157fa:	ee18 0a90 	vmov	r0, s17
 80157fe:	4623      	mov	r3, r4
 8015800:	463a      	mov	r2, r7
 8015802:	b03b      	add	sp, #236	; 0xec
 8015804:	ecbd 8b02 	vpop	{d8}
 8015808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801580c:	f000 bdb2 	b.w	8016374 <__sbprintf>
 8015810:	f045 0510 	orr.w	r5, r5, #16
 8015814:	f015 0820 	ands.w	r8, r5, #32
 8015818:	f000 8112 	beq.w	8015a40 <_vfiprintf_r+0x4c8>
 801581c:	9e03      	ldr	r6, [sp, #12]
 801581e:	3607      	adds	r6, #7
 8015820:	f026 0607 	bic.w	r6, r6, #7
 8015824:	4633      	mov	r3, r6
 8015826:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801582a:	f853 6b08 	ldr.w	r6, [r3], #8
 801582e:	9303      	str	r3, [sp, #12]
 8015830:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8015834:	2300      	movs	r3, #0
 8015836:	f04f 0200 	mov.w	r2, #0
 801583a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801583e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8015842:	f000 81d3 	beq.w	8015bec <_vfiprintf_r+0x674>
 8015846:	ea56 0208 	orrs.w	r2, r6, r8
 801584a:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 801584e:	f040 81cc 	bne.w	8015bea <_vfiprintf_r+0x672>
 8015852:	f1bb 0f00 	cmp.w	fp, #0
 8015856:	f040 84d1 	bne.w	80161fc <_vfiprintf_r+0xc84>
 801585a:	2b00      	cmp	r3, #0
 801585c:	f040 83cc 	bne.w	8015ff8 <_vfiprintf_r+0xa80>
 8015860:	f01a 0301 	ands.w	r3, sl, #1
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	f000 83fc 	beq.w	8016062 <_vfiprintf_r+0xaea>
 801586a:	2330      	movs	r3, #48	; 0x30
 801586c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8015870:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 8015874:	e794      	b.n	80157a0 <_vfiprintf_r+0x228>
 8015876:	1be5      	subs	r5, r4, r7
 8015878:	d01d      	beq.n	80158b6 <_vfiprintf_r+0x33e>
 801587a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801587c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801587e:	3301      	adds	r3, #1
 8015880:	442a      	add	r2, r5
 8015882:	2b07      	cmp	r3, #7
 8015884:	e9c9 7500 	strd	r7, r5, [r9]
 8015888:	9210      	str	r2, [sp, #64]	; 0x40
 801588a:	930f      	str	r3, [sp, #60]	; 0x3c
 801588c:	dc05      	bgt.n	801589a <_vfiprintf_r+0x322>
 801588e:	f109 0908 	add.w	r9, r9, #8
 8015892:	9b02      	ldr	r3, [sp, #8]
 8015894:	442b      	add	r3, r5
 8015896:	9302      	str	r3, [sp, #8]
 8015898:	e6be      	b.n	8015618 <_vfiprintf_r+0xa0>
 801589a:	2a00      	cmp	r2, #0
 801589c:	f000 83a3 	beq.w	8015fe6 <_vfiprintf_r+0xa6e>
 80158a0:	ee18 1a10 	vmov	r1, s16
 80158a4:	ee18 0a90 	vmov	r0, s17
 80158a8:	aa0e      	add	r2, sp, #56	; 0x38
 80158aa:	f7ff fe1d 	bl	80154e8 <__sprint_r.part.0>
 80158ae:	b940      	cbnz	r0, 80158c2 <_vfiprintf_r+0x34a>
 80158b0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80158b4:	e7ed      	b.n	8015892 <_vfiprintf_r+0x31a>
 80158b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	f040 8524 	bne.w	8016306 <_vfiprintf_r+0xd8e>
 80158be:	2300      	movs	r3, #0
 80158c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80158c2:	ee18 2a10 	vmov	r2, s16
 80158c6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80158c8:	07d9      	lsls	r1, r3, #31
 80158ca:	f140 80ae 	bpl.w	8015a2a <_vfiprintf_r+0x4b2>
 80158ce:	8993      	ldrh	r3, [r2, #12]
 80158d0:	065b      	lsls	r3, r3, #25
 80158d2:	f100 8532 	bmi.w	801633a <_vfiprintf_r+0xdc2>
 80158d6:	9802      	ldr	r0, [sp, #8]
 80158d8:	b03b      	add	sp, #236	; 0xec
 80158da:	ecbd 8b02 	vpop	{d8}
 80158de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80158e6:	058d      	lsls	r5, r1, #22
 80158e8:	ee18 3a10 	vmov	r3, s16
 80158ec:	b28a      	uxth	r2, r1
 80158ee:	f53f ae5d 	bmi.w	80155ac <_vfiprintf_r+0x34>
 80158f2:	ee18 5a10 	vmov	r5, s16
 80158f6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80158f8:	f7fe feac 	bl	8014654 <__retarget_lock_acquire_recursive>
 80158fc:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8015900:	b28a      	uxth	r2, r1
 8015902:	e653      	b.n	80155ac <_vfiprintf_r+0x34>
 8015904:	2b00      	cmp	r3, #0
 8015906:	d0d6      	beq.n	80158b6 <_vfiprintf_r+0x33e>
 8015908:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801590c:	f04f 0801 	mov.w	r8, #1
 8015910:	f04f 0300 	mov.w	r3, #0
 8015914:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8015918:	f8cd 8000 	str.w	r8, [sp]
 801591c:	ac21      	add	r4, sp, #132	; 0x84
 801591e:	f04f 0b00 	mov.w	fp, #0
 8015922:	f015 0302 	ands.w	r3, r5, #2
 8015926:	9304      	str	r3, [sp, #16]
 8015928:	bf18      	it	ne
 801592a:	f108 0802 	addne.w	r8, r8, #2
 801592e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8015932:	9305      	str	r3, [sp, #20]
 8015934:	d105      	bne.n	8015942 <_vfiprintf_r+0x3ca>
 8015936:	9b01      	ldr	r3, [sp, #4]
 8015938:	eba3 0608 	sub.w	r6, r3, r8
 801593c:	2e00      	cmp	r6, #0
 801593e:	f300 827f 	bgt.w	8015e40 <_vfiprintf_r+0x8c8>
 8015942:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8015946:	1c50      	adds	r0, r2, #1
 8015948:	f89d 6033 	ldrb.w	r6, [sp, #51]	; 0x33
 801594c:	b18e      	cbz	r6, 8015972 <_vfiprintf_r+0x3fa>
 801594e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8015952:	3101      	adds	r1, #1
 8015954:	f8c9 2000 	str.w	r2, [r9]
 8015958:	2807      	cmp	r0, #7
 801595a:	f04f 0201 	mov.w	r2, #1
 801595e:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8015962:	f8c9 2004 	str.w	r2, [r9, #4]
 8015966:	f300 824c 	bgt.w	8015e02 <_vfiprintf_r+0x88a>
 801596a:	4602      	mov	r2, r0
 801596c:	f109 0908 	add.w	r9, r9, #8
 8015970:	3001      	adds	r0, #1
 8015972:	9b04      	ldr	r3, [sp, #16]
 8015974:	b1eb      	cbz	r3, 80159b2 <_vfiprintf_r+0x43a>
 8015976:	ab0d      	add	r3, sp, #52	; 0x34
 8015978:	3102      	adds	r1, #2
 801597a:	f8c9 3000 	str.w	r3, [r9]
 801597e:	2807      	cmp	r0, #7
 8015980:	f04f 0302 	mov.w	r3, #2
 8015984:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8015988:	f8c9 3004 	str.w	r3, [r9, #4]
 801598c:	f340 8253 	ble.w	8015e36 <_vfiprintf_r+0x8be>
 8015990:	2900      	cmp	r1, #0
 8015992:	f000 8323 	beq.w	8015fdc <_vfiprintf_r+0xa64>
 8015996:	ee18 1a10 	vmov	r1, s16
 801599a:	ee18 0a90 	vmov	r0, s17
 801599e:	aa0e      	add	r2, sp, #56	; 0x38
 80159a0:	f7ff fda2 	bl	80154e8 <__sprint_r.part.0>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d18c      	bne.n	80158c2 <_vfiprintf_r+0x34a>
 80159a8:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80159ac:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80159b0:	1c50      	adds	r0, r2, #1
 80159b2:	9b05      	ldr	r3, [sp, #20]
 80159b4:	2b80      	cmp	r3, #128	; 0x80
 80159b6:	f000 815a 	beq.w	8015c6e <_vfiprintf_r+0x6f6>
 80159ba:	9b00      	ldr	r3, [sp, #0]
 80159bc:	ebab 0603 	sub.w	r6, fp, r3
 80159c0:	2e00      	cmp	r6, #0
 80159c2:	f300 81bd 	bgt.w	8015d40 <_vfiprintf_r+0x7c8>
 80159c6:	9b00      	ldr	r3, [sp, #0]
 80159c8:	f8c9 4000 	str.w	r4, [r9]
 80159cc:	4419      	add	r1, r3
 80159ce:	2807      	cmp	r0, #7
 80159d0:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 80159d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80159d8:	f340 8146 	ble.w	8015c68 <_vfiprintf_r+0x6f0>
 80159dc:	2900      	cmp	r1, #0
 80159de:	f000 8289 	beq.w	8015ef4 <_vfiprintf_r+0x97c>
 80159e2:	ee18 1a10 	vmov	r1, s16
 80159e6:	ee18 0a90 	vmov	r0, s17
 80159ea:	aa0e      	add	r2, sp, #56	; 0x38
 80159ec:	f7ff fd7c 	bl	80154e8 <__sprint_r.part.0>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	f47f af66 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 80159f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80159f8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80159fc:	0768      	lsls	r0, r5, #29
 80159fe:	d505      	bpl.n	8015a0c <_vfiprintf_r+0x494>
 8015a00:	9b01      	ldr	r3, [sp, #4]
 8015a02:	eba3 0408 	sub.w	r4, r3, r8
 8015a06:	2c00      	cmp	r4, #0
 8015a08:	f300 827e 	bgt.w	8015f08 <_vfiprintf_r+0x990>
 8015a0c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015a10:	4542      	cmp	r2, r8
 8015a12:	bfac      	ite	ge
 8015a14:	189b      	addge	r3, r3, r2
 8015a16:	4443      	addlt	r3, r8
 8015a18:	9302      	str	r3, [sp, #8]
 8015a1a:	2900      	cmp	r1, #0
 8015a1c:	f040 81e0 	bne.w	8015de0 <_vfiprintf_r+0x868>
 8015a20:	2300      	movs	r3, #0
 8015a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a24:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015a28:	e5e6      	b.n	80155f8 <_vfiprintf_r+0x80>
 8015a2a:	8993      	ldrh	r3, [r2, #12]
 8015a2c:	059a      	lsls	r2, r3, #22
 8015a2e:	f53f af4f 	bmi.w	80158d0 <_vfiprintf_r+0x358>
 8015a32:	ee18 4a10 	vmov	r4, s16
 8015a36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a38:	f7fe fe0e 	bl	8014658 <__retarget_lock_release_recursive>
 8015a3c:	89a3      	ldrh	r3, [r4, #12]
 8015a3e:	e747      	b.n	80158d0 <_vfiprintf_r+0x358>
 8015a40:	f015 0310 	ands.w	r3, r5, #16
 8015a44:	f040 833e 	bne.w	80160c4 <_vfiprintf_r+0xb4c>
 8015a48:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8015a4c:	f000 83fd 	beq.w	801624a <_vfiprintf_r+0xcd2>
 8015a50:	9a03      	ldr	r2, [sp, #12]
 8015a52:	f852 6b04 	ldr.w	r6, [r2], #4
 8015a56:	9203      	str	r2, [sp, #12]
 8015a58:	4698      	mov	r8, r3
 8015a5a:	b2b6      	uxth	r6, r6
 8015a5c:	e6e8      	b.n	8015830 <_vfiprintf_r+0x2b8>
 8015a5e:	f856 3b04 	ldr.w	r3, [r6], #4
 8015a62:	9603      	str	r6, [sp, #12]
 8015a64:	06e8      	lsls	r0, r5, #27
 8015a66:	f100 8308 	bmi.w	801607a <_vfiprintf_r+0xb02>
 8015a6a:	0669      	lsls	r1, r5, #25
 8015a6c:	f140 8302 	bpl.w	8016074 <_vfiprintf_r+0xafc>
 8015a70:	f343 38c0 	sbfx	r8, r3, #15, #1
 8015a74:	b21e      	sxth	r6, r3
 8015a76:	4643      	mov	r3, r8
 8015a78:	e678      	b.n	801576c <_vfiprintf_r+0x1f4>
 8015a7a:	9e03      	ldr	r6, [sp, #12]
 8015a7c:	f856 4b04 	ldr.w	r4, [r6], #4
 8015a80:	f04f 0300 	mov.w	r3, #0
 8015a84:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8015a88:	2c00      	cmp	r4, #0
 8015a8a:	f000 83c5 	beq.w	8016218 <_vfiprintf_r+0xca0>
 8015a8e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8015a92:	f000 8349 	beq.w	8016128 <_vfiprintf_r+0xbb0>
 8015a96:	465a      	mov	r2, fp
 8015a98:	2100      	movs	r1, #0
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	f7f3 f960 	bl	8008d60 <memchr>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	f000 8424 	beq.w	80162ee <_vfiprintf_r+0xd76>
 8015aa6:	1b03      	subs	r3, r0, r4
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	9603      	str	r6, [sp, #12]
 8015aac:	f04f 0b00 	mov.w	fp, #0
 8015ab0:	e676      	b.n	80157a0 <_vfiprintf_r+0x228>
 8015ab2:	9e03      	ldr	r6, [sp, #12]
 8015ab4:	f04f 0300 	mov.w	r3, #0
 8015ab8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8015abc:	f04f 0801 	mov.w	r8, #1
 8015ac0:	f856 3b04 	ldr.w	r3, [r6], #4
 8015ac4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8015ac8:	9603      	str	r6, [sp, #12]
 8015aca:	f8cd 8000 	str.w	r8, [sp]
 8015ace:	ac21      	add	r4, sp, #132	; 0x84
 8015ad0:	e725      	b.n	801591e <_vfiprintf_r+0x3a6>
 8015ad2:	f7fe fa1d 	bl	8013f10 <__sinit>
 8015ad6:	e560      	b.n	801559a <_vfiprintf_r+0x22>
 8015ad8:	9b03      	ldr	r3, [sp, #12]
 8015ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ade:	9201      	str	r2, [sp, #4]
 8015ae0:	2a00      	cmp	r2, #0
 8015ae2:	f280 82ba 	bge.w	801605a <_vfiprintf_r+0xae2>
 8015ae6:	9a01      	ldr	r2, [sp, #4]
 8015ae8:	9303      	str	r3, [sp, #12]
 8015aea:	4252      	negs	r2, r2
 8015aec:	9201      	str	r2, [sp, #4]
 8015aee:	783b      	ldrb	r3, [r7, #0]
 8015af0:	f045 0504 	orr.w	r5, r5, #4
 8015af4:	e59f      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015af6:	783b      	ldrb	r3, [r7, #0]
 8015af8:	2b6c      	cmp	r3, #108	; 0x6c
 8015afa:	bf03      	ittte	eq
 8015afc:	787b      	ldrbeq	r3, [r7, #1]
 8015afe:	f045 0520 	orreq.w	r5, r5, #32
 8015b02:	3701      	addeq	r7, #1
 8015b04:	f045 0510 	orrne.w	r5, r5, #16
 8015b08:	e595      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015b0a:	783b      	ldrb	r3, [r7, #0]
 8015b0c:	2b68      	cmp	r3, #104	; 0x68
 8015b0e:	bf03      	ittte	eq
 8015b10:	787b      	ldrbeq	r3, [r7, #1]
 8015b12:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8015b16:	3701      	addeq	r7, #1
 8015b18:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8015b1c:	e58b      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015b1e:	f045 0a10 	orr.w	sl, r5, #16
 8015b22:	f01a 0820 	ands.w	r8, sl, #32
 8015b26:	f000 826e 	beq.w	8016006 <_vfiprintf_r+0xa8e>
 8015b2a:	9e03      	ldr	r6, [sp, #12]
 8015b2c:	3607      	adds	r6, #7
 8015b2e:	f026 0607 	bic.w	r6, r6, #7
 8015b32:	4633      	mov	r3, r6
 8015b34:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8015b38:	f853 6b08 	ldr.w	r6, [r3], #8
 8015b3c:	9303      	str	r3, [sp, #12]
 8015b3e:	2301      	movs	r3, #1
 8015b40:	e679      	b.n	8015836 <_vfiprintf_r+0x2be>
 8015b42:	783b      	ldrb	r3, [r7, #0]
 8015b44:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 8015b48:	e575      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015b4a:	9b03      	ldr	r3, [sp, #12]
 8015b4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8015b50:	9303      	str	r3, [sp, #12]
 8015b52:	2330      	movs	r3, #48	; 0x30
 8015b54:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8015b58:	2378      	movs	r3, #120	; 0x78
 8015b5a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8015b5e:	4bc2      	ldr	r3, [pc, #776]	; (8015e68 <_vfiprintf_r+0x8f0>)
 8015b60:	9306      	str	r3, [sp, #24]
 8015b62:	f045 0a02 	orr.w	sl, r5, #2
 8015b66:	f04f 0800 	mov.w	r8, #0
 8015b6a:	2302      	movs	r3, #2
 8015b6c:	e663      	b.n	8015836 <_vfiprintf_r+0x2be>
 8015b6e:	06ae      	lsls	r6, r5, #26
 8015b70:	f100 829e 	bmi.w	80160b0 <_vfiprintf_r+0xb38>
 8015b74:	06ec      	lsls	r4, r5, #27
 8015b76:	f100 8347 	bmi.w	8016208 <_vfiprintf_r+0xc90>
 8015b7a:	0668      	lsls	r0, r5, #25
 8015b7c:	f100 83a4 	bmi.w	80162c8 <_vfiprintf_r+0xd50>
 8015b80:	05a9      	lsls	r1, r5, #22
 8015b82:	f140 8341 	bpl.w	8016208 <_vfiprintf_r+0xc90>
 8015b86:	9e03      	ldr	r6, [sp, #12]
 8015b88:	9a02      	ldr	r2, [sp, #8]
 8015b8a:	f856 3b04 	ldr.w	r3, [r6], #4
 8015b8e:	9603      	str	r6, [sp, #12]
 8015b90:	701a      	strb	r2, [r3, #0]
 8015b92:	e531      	b.n	80155f8 <_vfiprintf_r+0x80>
 8015b94:	783b      	ldrb	r3, [r7, #0]
 8015b96:	f045 0501 	orr.w	r5, r5, #1
 8015b9a:	e54c      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015b9c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f47f adce 	bne.w	8015742 <_vfiprintf_r+0x1ca>
 8015ba6:	2320      	movs	r3, #32
 8015ba8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8015bac:	783b      	ldrb	r3, [r7, #0]
 8015bae:	e542      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015bb0:	783b      	ldrb	r3, [r7, #0]
 8015bb2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8015bb6:	e53e      	b.n	8015636 <_vfiprintf_r+0xbe>
 8015bb8:	4639      	mov	r1, r7
 8015bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8015bc0:	f000 83c4 	beq.w	801634c <_vfiprintf_r+0xdd4>
 8015bc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015bc8:	2a09      	cmp	r2, #9
 8015bca:	460f      	mov	r7, r1
 8015bcc:	f04f 0b00 	mov.w	fp, #0
 8015bd0:	f63f ad32 	bhi.w	8015638 <_vfiprintf_r+0xc0>
 8015bd4:	f817 3b01 	ldrb.w	r3, [r7], #1
 8015bd8:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8015bdc:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 8015be0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015be4:	2a09      	cmp	r2, #9
 8015be6:	d9f5      	bls.n	8015bd4 <_vfiprintf_r+0x65c>
 8015be8:	e526      	b.n	8015638 <_vfiprintf_r+0xc0>
 8015bea:	46aa      	mov	sl, r5
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	f43f adca 	beq.w	8015786 <_vfiprintf_r+0x20e>
 8015bf2:	2b02      	cmp	r3, #2
 8015bf4:	ac3a      	add	r4, sp, #232	; 0xe8
 8015bf6:	d112      	bne.n	8015c1e <_vfiprintf_r+0x6a6>
 8015bf8:	9a06      	ldr	r2, [sp, #24]
 8015bfa:	f006 030f 	and.w	r3, r6, #15
 8015bfe:	0936      	lsrs	r6, r6, #4
 8015c00:	5cd3      	ldrb	r3, [r2, r3]
 8015c02:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8015c06:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 8015c0a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8015c0e:	ea56 0308 	orrs.w	r3, r6, r8
 8015c12:	d1f2      	bne.n	8015bfa <_vfiprintf_r+0x682>
 8015c14:	ab3a      	add	r3, sp, #232	; 0xe8
 8015c16:	1b1b      	subs	r3, r3, r4
 8015c18:	4655      	mov	r5, sl
 8015c1a:	9300      	str	r3, [sp, #0]
 8015c1c:	e5c0      	b.n	80157a0 <_vfiprintf_r+0x228>
 8015c1e:	f006 0307 	and.w	r3, r6, #7
 8015c22:	08f6      	lsrs	r6, r6, #3
 8015c24:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 8015c28:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8015c2c:	3330      	adds	r3, #48	; 0x30
 8015c2e:	ea56 0108 	orrs.w	r1, r6, r8
 8015c32:	4622      	mov	r2, r4
 8015c34:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8015c38:	d1f1      	bne.n	8015c1e <_vfiprintf_r+0x6a6>
 8015c3a:	f01a 0f01 	tst.w	sl, #1
 8015c3e:	d0e9      	beq.n	8015c14 <_vfiprintf_r+0x69c>
 8015c40:	2b30      	cmp	r3, #48	; 0x30
 8015c42:	d0e7      	beq.n	8015c14 <_vfiprintf_r+0x69c>
 8015c44:	2330      	movs	r3, #48	; 0x30
 8015c46:	3a02      	subs	r2, #2
 8015c48:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015c4c:	ab3a      	add	r3, sp, #232	; 0xe8
 8015c4e:	1a9b      	subs	r3, r3, r2
 8015c50:	4655      	mov	r5, sl
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	4614      	mov	r4, r2
 8015c56:	e5a3      	b.n	80157a0 <_vfiprintf_r+0x228>
 8015c58:	9900      	ldr	r1, [sp, #0]
 8015c5a:	9411      	str	r4, [sp, #68]	; 0x44
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	9112      	str	r1, [sp, #72]	; 0x48
 8015c60:	9110      	str	r1, [sp, #64]	; 0x40
 8015c62:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c64:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015c68:	f109 0908 	add.w	r9, r9, #8
 8015c6c:	e6c6      	b.n	80159fc <_vfiprintf_r+0x484>
 8015c6e:	9b01      	ldr	r3, [sp, #4]
 8015c70:	eba3 0608 	sub.w	r6, r3, r8
 8015c74:	2e00      	cmp	r6, #0
 8015c76:	f77f aea0 	ble.w	80159ba <_vfiprintf_r+0x442>
 8015c7a:	2e10      	cmp	r6, #16
 8015c7c:	f340 8362 	ble.w	8016344 <_vfiprintf_r+0xdcc>
 8015c80:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8015e6c <_vfiprintf_r+0x8f4>
 8015c84:	4653      	mov	r3, sl
 8015c86:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015c8a:	46ba      	mov	sl, r7
 8015c8c:	ee18 4a90 	vmov	r4, s17
 8015c90:	ee18 5a10 	vmov	r5, s16
 8015c94:	4608      	mov	r0, r1
 8015c96:	4696      	mov	lr, r2
 8015c98:	461f      	mov	r7, r3
 8015c9a:	e007      	b.n	8015cac <_vfiprintf_r+0x734>
 8015c9c:	f10e 0c02 	add.w	ip, lr, #2
 8015ca0:	f109 0908 	add.w	r9, r9, #8
 8015ca4:	4696      	mov	lr, r2
 8015ca6:	3e10      	subs	r6, #16
 8015ca8:	2e10      	cmp	r6, #16
 8015caa:	dd1f      	ble.n	8015cec <_vfiprintf_r+0x774>
 8015cac:	f10e 0201 	add.w	r2, lr, #1
 8015cb0:	3010      	adds	r0, #16
 8015cb2:	2310      	movs	r3, #16
 8015cb4:	2a07      	cmp	r2, #7
 8015cb6:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 8015cba:	f8c9 7000 	str.w	r7, [r9]
 8015cbe:	f8c9 3004 	str.w	r3, [r9, #4]
 8015cc2:	ddeb      	ble.n	8015c9c <_vfiprintf_r+0x724>
 8015cc4:	aa0e      	add	r2, sp, #56	; 0x38
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	f000 8095 	beq.w	8015df6 <_vfiprintf_r+0x87e>
 8015ccc:	4629      	mov	r1, r5
 8015cce:	4620      	mov	r0, r4
 8015cd0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015cd4:	f7ff fc08 	bl	80154e8 <__sprint_r.part.0>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	f47f adf2 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015cde:	e9dd e00f 	ldrd	lr, r0, [sp, #60]	; 0x3c
 8015ce2:	3e10      	subs	r6, #16
 8015ce4:	2e10      	cmp	r6, #16
 8015ce6:	f10e 0c01 	add.w	ip, lr, #1
 8015cea:	dcdf      	bgt.n	8015cac <_vfiprintf_r+0x734>
 8015cec:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015cf0:	463b      	mov	r3, r7
 8015cf2:	4601      	mov	r1, r0
 8015cf4:	4657      	mov	r7, sl
 8015cf6:	469a      	mov	sl, r3
 8015cf8:	4431      	add	r1, r6
 8015cfa:	f1bc 0f07 	cmp.w	ip, #7
 8015cfe:	e9cd c10f 	strd	ip, r1, [sp, #60]	; 0x3c
 8015d02:	f8c9 a000 	str.w	sl, [r9]
 8015d06:	f8c9 6004 	str.w	r6, [r9, #4]
 8015d0a:	f340 81ad 	ble.w	8016068 <_vfiprintf_r+0xaf0>
 8015d0e:	2900      	cmp	r1, #0
 8015d10:	f000 82ca 	beq.w	80162a8 <_vfiprintf_r+0xd30>
 8015d14:	ee18 1a10 	vmov	r1, s16
 8015d18:	ee18 0a90 	vmov	r0, s17
 8015d1c:	aa0e      	add	r2, sp, #56	; 0x38
 8015d1e:	f7ff fbe3 	bl	80154e8 <__sprint_r.part.0>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	f47f adcd 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015d28:	9b00      	ldr	r3, [sp, #0]
 8015d2a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8015d2e:	ebab 0603 	sub.w	r6, fp, r3
 8015d32:	2e00      	cmp	r6, #0
 8015d34:	f102 0001 	add.w	r0, r2, #1
 8015d38:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015d3c:	f77f ae43 	ble.w	80159c6 <_vfiprintf_r+0x44e>
 8015d40:	2e10      	cmp	r6, #16
 8015d42:	f8df a128 	ldr.w	sl, [pc, #296]	; 8015e6c <_vfiprintf_r+0x8f4>
 8015d46:	dd37      	ble.n	8015db8 <_vfiprintf_r+0x840>
 8015d48:	4653      	mov	r3, sl
 8015d4a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015d4e:	46ba      	mov	sl, r7
 8015d50:	ee18 4a90 	vmov	r4, s17
 8015d54:	ee18 5a10 	vmov	r5, s16
 8015d58:	f04f 0b10 	mov.w	fp, #16
 8015d5c:	4608      	mov	r0, r1
 8015d5e:	4694      	mov	ip, r2
 8015d60:	461f      	mov	r7, r3
 8015d62:	e007      	b.n	8015d74 <_vfiprintf_r+0x7fc>
 8015d64:	f10c 0e02 	add.w	lr, ip, #2
 8015d68:	f109 0908 	add.w	r9, r9, #8
 8015d6c:	4694      	mov	ip, r2
 8015d6e:	3e10      	subs	r6, #16
 8015d70:	2e10      	cmp	r6, #16
 8015d72:	dd1a      	ble.n	8015daa <_vfiprintf_r+0x832>
 8015d74:	f10c 0201 	add.w	r2, ip, #1
 8015d78:	3010      	adds	r0, #16
 8015d7a:	2a07      	cmp	r2, #7
 8015d7c:	e9c9 7b00 	strd	r7, fp, [r9]
 8015d80:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 8015d84:	ddee      	ble.n	8015d64 <_vfiprintf_r+0x7ec>
 8015d86:	aa0e      	add	r2, sp, #56	; 0x38
 8015d88:	b320      	cbz	r0, 8015dd4 <_vfiprintf_r+0x85c>
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015d92:	f7ff fba9 	bl	80154e8 <__sprint_r.part.0>
 8015d96:	2800      	cmp	r0, #0
 8015d98:	f47f ad93 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015d9c:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
 8015da0:	3e10      	subs	r6, #16
 8015da2:	2e10      	cmp	r6, #16
 8015da4:	f10c 0e01 	add.w	lr, ip, #1
 8015da8:	dce4      	bgt.n	8015d74 <_vfiprintf_r+0x7fc>
 8015daa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015dae:	463b      	mov	r3, r7
 8015db0:	4601      	mov	r1, r0
 8015db2:	4657      	mov	r7, sl
 8015db4:	4670      	mov	r0, lr
 8015db6:	469a      	mov	sl, r3
 8015db8:	4431      	add	r1, r6
 8015dba:	2807      	cmp	r0, #7
 8015dbc:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8015dc0:	f8c9 a000 	str.w	sl, [r9]
 8015dc4:	f8c9 6004 	str.w	r6, [r9, #4]
 8015dc8:	f300 80f2 	bgt.w	8015fb0 <_vfiprintf_r+0xa38>
 8015dcc:	f109 0908 	add.w	r9, r9, #8
 8015dd0:	3001      	adds	r0, #1
 8015dd2:	e5f8      	b.n	80159c6 <_vfiprintf_r+0x44e>
 8015dd4:	f04f 0e01 	mov.w	lr, #1
 8015dd8:	4684      	mov	ip, r0
 8015dda:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015dde:	e7c6      	b.n	8015d6e <_vfiprintf_r+0x7f6>
 8015de0:	ee18 1a10 	vmov	r1, s16
 8015de4:	ee18 0a90 	vmov	r0, s17
 8015de8:	aa0e      	add	r2, sp, #56	; 0x38
 8015dea:	f7ff fb7d 	bl	80154e8 <__sprint_r.part.0>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	f43f ae16 	beq.w	8015a20 <_vfiprintf_r+0x4a8>
 8015df4:	e565      	b.n	80158c2 <_vfiprintf_r+0x34a>
 8015df6:	f04f 0c01 	mov.w	ip, #1
 8015dfa:	4686      	mov	lr, r0
 8015dfc:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015e00:	e751      	b.n	8015ca6 <_vfiprintf_r+0x72e>
 8015e02:	2900      	cmp	r1, #0
 8015e04:	f000 80e7 	beq.w	8015fd6 <_vfiprintf_r+0xa5e>
 8015e08:	ee18 1a10 	vmov	r1, s16
 8015e0c:	ee18 0a90 	vmov	r0, s17
 8015e10:	aa0e      	add	r2, sp, #56	; 0x38
 8015e12:	f7ff fb69 	bl	80154e8 <__sprint_r.part.0>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	f47f ad53 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015e1c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8015e20:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015e24:	1c50      	adds	r0, r2, #1
 8015e26:	e5a4      	b.n	8015972 <_vfiprintf_r+0x3fa>
 8015e28:	2102      	movs	r1, #2
 8015e2a:	ab0d      	add	r3, sp, #52	; 0x34
 8015e2c:	9112      	str	r1, [sp, #72]	; 0x48
 8015e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8015e30:	2001      	movs	r0, #1
 8015e32:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015e36:	4602      	mov	r2, r0
 8015e38:	f109 0908 	add.w	r9, r9, #8
 8015e3c:	1c50      	adds	r0, r2, #1
 8015e3e:	e5b8      	b.n	80159b2 <_vfiprintf_r+0x43a>
 8015e40:	2e10      	cmp	r6, #16
 8015e42:	f340 825a 	ble.w	80162fa <_vfiprintf_r+0xd82>
 8015e46:	e9dd c10f 	ldrd	ip, r1, [sp, #60]	; 0x3c
 8015e4a:	f8df a024 	ldr.w	sl, [pc, #36]	; 8015e70 <_vfiprintf_r+0x8f8>
 8015e4e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015e52:	950b      	str	r5, [sp, #44]	; 0x2c
 8015e54:	46a3      	mov	fp, r4
 8015e56:	ee18 5a10 	vmov	r5, s16
 8015e5a:	4654      	mov	r4, sl
 8015e5c:	2310      	movs	r3, #16
 8015e5e:	ee18 aa90 	vmov	sl, s17
 8015e62:	4608      	mov	r0, r1
 8015e64:	e00e      	b.n	8015e84 <_vfiprintf_r+0x90c>
 8015e66:	bf00      	nop
 8015e68:	24008e38 	.word	0x24008e38
 8015e6c:	24009054 	.word	0x24009054
 8015e70:	24009044 	.word	0x24009044
 8015e74:	f10c 0e02 	add.w	lr, ip, #2
 8015e78:	f109 0908 	add.w	r9, r9, #8
 8015e7c:	4694      	mov	ip, r2
 8015e7e:	3e10      	subs	r6, #16
 8015e80:	2e10      	cmp	r6, #16
 8015e82:	dd1c      	ble.n	8015ebe <_vfiprintf_r+0x946>
 8015e84:	f10c 0201 	add.w	r2, ip, #1
 8015e88:	3010      	adds	r0, #16
 8015e8a:	2a07      	cmp	r2, #7
 8015e8c:	e9c9 4300 	strd	r4, r3, [r9]
 8015e90:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 8015e94:	ddee      	ble.n	8015e74 <_vfiprintf_r+0x8fc>
 8015e96:	aa0e      	add	r2, sp, #56	; 0x38
 8015e98:	b330      	cbz	r0, 8015ee8 <_vfiprintf_r+0x970>
 8015e9a:	4629      	mov	r1, r5
 8015e9c:	4650      	mov	r0, sl
 8015e9e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015ea2:	f7ff fb21 	bl	80154e8 <__sprint_r.part.0>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	f47f ad0b 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015eac:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
 8015eb0:	3e10      	subs	r6, #16
 8015eb2:	2e10      	cmp	r6, #16
 8015eb4:	f10c 0e01 	add.w	lr, ip, #1
 8015eb8:	f04f 0310 	mov.w	r3, #16
 8015ebc:	dce2      	bgt.n	8015e84 <_vfiprintf_r+0x90c>
 8015ebe:	46a2      	mov	sl, r4
 8015ec0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015ec2:	465c      	mov	r4, fp
 8015ec4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015ec8:	4601      	mov	r1, r0
 8015eca:	4672      	mov	r2, lr
 8015ecc:	4431      	add	r1, r6
 8015ece:	2a07      	cmp	r2, #7
 8015ed0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8015ed4:	f8c9 a000 	str.w	sl, [r9]
 8015ed8:	f8c9 6004 	str.w	r6, [r9, #4]
 8015edc:	f300 80ab 	bgt.w	8016036 <_vfiprintf_r+0xabe>
 8015ee0:	f109 0908 	add.w	r9, r9, #8
 8015ee4:	1c50      	adds	r0, r2, #1
 8015ee6:	e52f      	b.n	8015948 <_vfiprintf_r+0x3d0>
 8015ee8:	4684      	mov	ip, r0
 8015eea:	f04f 0e01 	mov.w	lr, #1
 8015eee:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015ef2:	e7c4      	b.n	8015e7e <_vfiprintf_r+0x906>
 8015ef4:	076c      	lsls	r4, r5, #29
 8015ef6:	910f      	str	r1, [sp, #60]	; 0x3c
 8015ef8:	d552      	bpl.n	8015fa0 <_vfiprintf_r+0xa28>
 8015efa:	9b01      	ldr	r3, [sp, #4]
 8015efc:	eba3 0408 	sub.w	r4, r3, r8
 8015f00:	2c00      	cmp	r4, #0
 8015f02:	dd4d      	ble.n	8015fa0 <_vfiprintf_r+0xa28>
 8015f04:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015f08:	2c10      	cmp	r4, #16
 8015f0a:	f340 8208 	ble.w	801631e <_vfiprintf_r+0xda6>
 8015f0e:	f8df a45c 	ldr.w	sl, [pc, #1116]	; 801636c <_vfiprintf_r+0xdf4>
 8015f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f14:	460b      	mov	r3, r1
 8015f16:	46bb      	mov	fp, r7
 8015f18:	4649      	mov	r1, r9
 8015f1a:	4657      	mov	r7, sl
 8015f1c:	ee18 9a10 	vmov	r9, s16
 8015f20:	ee18 aa90 	vmov	sl, s17
 8015f24:	2510      	movs	r5, #16
 8015f26:	e005      	b.n	8015f34 <_vfiprintf_r+0x9bc>
 8015f28:	1c90      	adds	r0, r2, #2
 8015f2a:	3108      	adds	r1, #8
 8015f2c:	4632      	mov	r2, r6
 8015f2e:	3c10      	subs	r4, #16
 8015f30:	2c10      	cmp	r4, #16
 8015f32:	dd18      	ble.n	8015f66 <_vfiprintf_r+0x9ee>
 8015f34:	1c56      	adds	r6, r2, #1
 8015f36:	3310      	adds	r3, #16
 8015f38:	2e07      	cmp	r6, #7
 8015f3a:	e9c1 7500 	strd	r7, r5, [r1]
 8015f3e:	e9cd 630f 	strd	r6, r3, [sp, #60]	; 0x3c
 8015f42:	ddf1      	ble.n	8015f28 <_vfiprintf_r+0x9b0>
 8015f44:	aa0e      	add	r2, sp, #56	; 0x38
 8015f46:	b33b      	cbz	r3, 8015f98 <_vfiprintf_r+0xa20>
 8015f48:	4649      	mov	r1, r9
 8015f4a:	4650      	mov	r0, sl
 8015f4c:	f7ff facc 	bl	80154e8 <__sprint_r.part.0>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	f47f acb6 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015f56:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 8015f5a:	3c10      	subs	r4, #16
 8015f5c:	2c10      	cmp	r4, #16
 8015f5e:	f102 0001 	add.w	r0, r2, #1
 8015f62:	a911      	add	r1, sp, #68	; 0x44
 8015f64:	dce6      	bgt.n	8015f34 <_vfiprintf_r+0x9bc>
 8015f66:	4689      	mov	r9, r1
 8015f68:	46ba      	mov	sl, r7
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	465f      	mov	r7, fp
 8015f6e:	4421      	add	r1, r4
 8015f70:	2807      	cmp	r0, #7
 8015f72:	e9c9 a400 	strd	sl, r4, [r9]
 8015f76:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8015f7a:	f77f ad47 	ble.w	8015a0c <_vfiprintf_r+0x494>
 8015f7e:	b179      	cbz	r1, 8015fa0 <_vfiprintf_r+0xa28>
 8015f80:	ee18 1a10 	vmov	r1, s16
 8015f84:	ee18 0a90 	vmov	r0, s17
 8015f88:	aa0e      	add	r2, sp, #56	; 0x38
 8015f8a:	f7ff faad 	bl	80154e8 <__sprint_r.part.0>
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	f47f ac97 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015f94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015f96:	e539      	b.n	8015a0c <_vfiprintf_r+0x494>
 8015f98:	2001      	movs	r0, #1
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	a911      	add	r1, sp, #68	; 0x44
 8015f9e:	e7c6      	b.n	8015f2e <_vfiprintf_r+0x9b6>
 8015fa0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015fa4:	4542      	cmp	r2, r8
 8015fa6:	bfac      	ite	ge
 8015fa8:	189b      	addge	r3, r3, r2
 8015faa:	4443      	addlt	r3, r8
 8015fac:	9302      	str	r3, [sp, #8]
 8015fae:	e537      	b.n	8015a20 <_vfiprintf_r+0x4a8>
 8015fb0:	2900      	cmp	r1, #0
 8015fb2:	f43f ae51 	beq.w	8015c58 <_vfiprintf_r+0x6e0>
 8015fb6:	ee18 1a10 	vmov	r1, s16
 8015fba:	ee18 0a90 	vmov	r0, s17
 8015fbe:	aa0e      	add	r2, sp, #56	; 0x38
 8015fc0:	f7ff fa92 	bl	80154e8 <__sprint_r.part.0>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	f47f ac7c 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 8015fca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015fcc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015fce:	3001      	adds	r0, #1
 8015fd0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015fd4:	e4f7      	b.n	80159c6 <_vfiprintf_r+0x44e>
 8015fd6:	9b04      	ldr	r3, [sp, #16]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d179      	bne.n	80160d0 <_vfiprintf_r+0xb58>
 8015fdc:	2001      	movs	r0, #1
 8015fde:	460a      	mov	r2, r1
 8015fe0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015fe4:	e4e5      	b.n	80159b2 <_vfiprintf_r+0x43a>
 8015fe6:	920f      	str	r2, [sp, #60]	; 0x3c
 8015fe8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015fec:	e451      	b.n	8015892 <_vfiprintf_r+0x31a>
 8015fee:	f1bb 0f00 	cmp.w	fp, #0
 8015ff2:	f47f abcd 	bne.w	8015790 <_vfiprintf_r+0x218>
 8015ff6:	4655      	mov	r5, sl
 8015ff8:	f04f 0b00 	mov.w	fp, #0
 8015ffc:	f8cd b000 	str.w	fp, [sp]
 8016000:	ac3a      	add	r4, sp, #232	; 0xe8
 8016002:	f7ff bbcd 	b.w	80157a0 <_vfiprintf_r+0x228>
 8016006:	f01a 0310 	ands.w	r3, sl, #16
 801600a:	d13c      	bne.n	8016086 <_vfiprintf_r+0xb0e>
 801600c:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8016010:	f000 810c 	beq.w	801622c <_vfiprintf_r+0xcb4>
 8016014:	9a03      	ldr	r2, [sp, #12]
 8016016:	f852 6b04 	ldr.w	r6, [r2], #4
 801601a:	9203      	str	r2, [sp, #12]
 801601c:	4698      	mov	r8, r3
 801601e:	b2b6      	uxth	r6, r6
 8016020:	2301      	movs	r3, #1
 8016022:	e408      	b.n	8015836 <_vfiprintf_r+0x2be>
 8016024:	232d      	movs	r3, #45	; 0x2d
 8016026:	4276      	negs	r6, r6
 8016028:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801602c:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 8016030:	46aa      	mov	sl, r5
 8016032:	2301      	movs	r3, #1
 8016034:	e403      	b.n	801583e <_vfiprintf_r+0x2c6>
 8016036:	2900      	cmp	r1, #0
 8016038:	d07f      	beq.n	801613a <_vfiprintf_r+0xbc2>
 801603a:	ee18 1a10 	vmov	r1, s16
 801603e:	ee18 0a90 	vmov	r0, s17
 8016042:	aa0e      	add	r2, sp, #56	; 0x38
 8016044:	f7ff fa50 	bl	80154e8 <__sprint_r.part.0>
 8016048:	2800      	cmp	r0, #0
 801604a:	f47f ac3a 	bne.w	80158c2 <_vfiprintf_r+0x34a>
 801604e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8016052:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8016056:	1c50      	adds	r0, r2, #1
 8016058:	e476      	b.n	8015948 <_vfiprintf_r+0x3d0>
 801605a:	9303      	str	r3, [sp, #12]
 801605c:	783b      	ldrb	r3, [r7, #0]
 801605e:	f7ff baea 	b.w	8015636 <_vfiprintf_r+0xbe>
 8016062:	ac3a      	add	r4, sp, #232	; 0xe8
 8016064:	f7ff bb9c 	b.w	80157a0 <_vfiprintf_r+0x228>
 8016068:	f109 0908 	add.w	r9, r9, #8
 801606c:	f10c 0001 	add.w	r0, ip, #1
 8016070:	4662      	mov	r2, ip
 8016072:	e4a2      	b.n	80159ba <_vfiprintf_r+0x442>
 8016074:	05aa      	lsls	r2, r5, #22
 8016076:	f100 812f 	bmi.w	80162d8 <_vfiprintf_r+0xd60>
 801607a:	ea4f 78e3 	mov.w	r8, r3, asr #31
 801607e:	461e      	mov	r6, r3
 8016080:	4643      	mov	r3, r8
 8016082:	f7ff bb73 	b.w	801576c <_vfiprintf_r+0x1f4>
 8016086:	9b03      	ldr	r3, [sp, #12]
 8016088:	f853 6b04 	ldr.w	r6, [r3], #4
 801608c:	9303      	str	r3, [sp, #12]
 801608e:	2301      	movs	r3, #1
 8016090:	f7ff bbd1 	b.w	8015836 <_vfiprintf_r+0x2be>
 8016094:	9b07      	ldr	r3, [sp, #28]
 8016096:	2b00      	cmp	r3, #0
 8016098:	f43f ab53 	beq.w	8015742 <_vfiprintf_r+0x1ca>
 801609c:	9b07      	ldr	r3, [sp, #28]
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f43f ab4e 	beq.w	8015742 <_vfiprintf_r+0x1ca>
 80160a6:	783b      	ldrb	r3, [r7, #0]
 80160a8:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80160ac:	f7ff bac3 	b.w	8015636 <_vfiprintf_r+0xbe>
 80160b0:	e9dd 1602 	ldrd	r1, r6, [sp, #8]
 80160b4:	f856 2b04 	ldr.w	r2, [r6], #4
 80160b8:	9603      	str	r6, [sp, #12]
 80160ba:	17cb      	asrs	r3, r1, #31
 80160bc:	e9c2 1300 	strd	r1, r3, [r2]
 80160c0:	f7ff ba9a 	b.w	80155f8 <_vfiprintf_r+0x80>
 80160c4:	9b03      	ldr	r3, [sp, #12]
 80160c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80160ca:	9303      	str	r3, [sp, #12]
 80160cc:	f7ff bbb0 	b.w	8015830 <_vfiprintf_r+0x2b8>
 80160d0:	2102      	movs	r1, #2
 80160d2:	ab0d      	add	r3, sp, #52	; 0x34
 80160d4:	9112      	str	r1, [sp, #72]	; 0x48
 80160d6:	9311      	str	r3, [sp, #68]	; 0x44
 80160d8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80160dc:	e6ac      	b.n	8015e38 <_vfiprintf_r+0x8c0>
 80160de:	4aa0      	ldr	r2, [pc, #640]	; (8016360 <_vfiprintf_r+0xde8>)
 80160e0:	9206      	str	r2, [sp, #24]
 80160e2:	f015 0820 	ands.w	r8, r5, #32
 80160e6:	d036      	beq.n	8016156 <_vfiprintf_r+0xbde>
 80160e8:	9e03      	ldr	r6, [sp, #12]
 80160ea:	3607      	adds	r6, #7
 80160ec:	f026 0607 	bic.w	r6, r6, #7
 80160f0:	4632      	mov	r2, r6
 80160f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80160f6:	f852 6b08 	ldr.w	r6, [r2], #8
 80160fa:	9203      	str	r2, [sp, #12]
 80160fc:	07ea      	lsls	r2, r5, #31
 80160fe:	d509      	bpl.n	8016114 <_vfiprintf_r+0xb9c>
 8016100:	ea56 0208 	orrs.w	r2, r6, r8
 8016104:	d006      	beq.n	8016114 <_vfiprintf_r+0xb9c>
 8016106:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801610a:	2330      	movs	r3, #48	; 0x30
 801610c:	f045 0502 	orr.w	r5, r5, #2
 8016110:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8016114:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8016118:	2302      	movs	r3, #2
 801611a:	f7ff bb8c 	b.w	8015836 <_vfiprintf_r+0x2be>
 801611e:	46aa      	mov	sl, r5
 8016120:	e4ff      	b.n	8015b22 <_vfiprintf_r+0x5aa>
 8016122:	4a90      	ldr	r2, [pc, #576]	; (8016364 <_vfiprintf_r+0xdec>)
 8016124:	9206      	str	r2, [sp, #24]
 8016126:	e7dc      	b.n	80160e2 <_vfiprintf_r+0xb6a>
 8016128:	4620      	mov	r0, r4
 801612a:	9603      	str	r6, [sp, #12]
 801612c:	f7f2 fda8 	bl	8008c80 <strlen>
 8016130:	f04f 0b00 	mov.w	fp, #0
 8016134:	9000      	str	r0, [sp, #0]
 8016136:	f7ff bb33 	b.w	80157a0 <_vfiprintf_r+0x228>
 801613a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 801613e:	2a00      	cmp	r2, #0
 8016140:	f000 80b8 	beq.w	80162b4 <_vfiprintf_r+0xd3c>
 8016144:	2001      	movs	r0, #1
 8016146:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801614a:	9012      	str	r0, [sp, #72]	; 0x48
 801614c:	9211      	str	r2, [sp, #68]	; 0x44
 801614e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8016152:	4601      	mov	r1, r0
 8016154:	e409      	b.n	801596a <_vfiprintf_r+0x3f2>
 8016156:	f015 0210 	ands.w	r2, r5, #16
 801615a:	d042      	beq.n	80161e2 <_vfiprintf_r+0xc6a>
 801615c:	9a03      	ldr	r2, [sp, #12]
 801615e:	f852 6b04 	ldr.w	r6, [r2], #4
 8016162:	9203      	str	r2, [sp, #12]
 8016164:	e7ca      	b.n	80160fc <_vfiprintf_r+0xb84>
 8016166:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 801616a:	f8cd b000 	str.w	fp, [sp]
 801616e:	f8cd 9010 	str.w	r9, [sp, #16]
 8016172:	46bb      	mov	fp, r7
 8016174:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8016178:	2500      	movs	r5, #0
 801617a:	ac3a      	add	r4, sp, #232	; 0xe8
 801617c:	461f      	mov	r7, r3
 801617e:	e009      	b.n	8016194 <_vfiprintf_r+0xc1c>
 8016180:	4630      	mov	r0, r6
 8016182:	4641      	mov	r1, r8
 8016184:	f7f2 fe3c 	bl	8008e00 <__aeabi_uldivmod>
 8016188:	2e0a      	cmp	r6, #10
 801618a:	f178 0300 	sbcs.w	r3, r8, #0
 801618e:	d31b      	bcc.n	80161c8 <_vfiprintf_r+0xc50>
 8016190:	4606      	mov	r6, r0
 8016192:	4688      	mov	r8, r1
 8016194:	4630      	mov	r0, r6
 8016196:	4641      	mov	r1, r8
 8016198:	220a      	movs	r2, #10
 801619a:	2300      	movs	r3, #0
 801619c:	f7f2 fe30 	bl	8008e00 <__aeabi_uldivmod>
 80161a0:	4611      	mov	r1, r2
 80161a2:	3130      	adds	r1, #48	; 0x30
 80161a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80161a8:	220a      	movs	r2, #10
 80161aa:	2300      	movs	r3, #0
 80161ac:	3c01      	subs	r4, #1
 80161ae:	3501      	adds	r5, #1
 80161b0:	2f00      	cmp	r7, #0
 80161b2:	d0e5      	beq.n	8016180 <_vfiprintf_r+0xc08>
 80161b4:	f899 1000 	ldrb.w	r1, [r9]
 80161b8:	42a9      	cmp	r1, r5
 80161ba:	d1e1      	bne.n	8016180 <_vfiprintf_r+0xc08>
 80161bc:	2dff      	cmp	r5, #255	; 0xff
 80161be:	d0df      	beq.n	8016180 <_vfiprintf_r+0xc08>
 80161c0:	2e0a      	cmp	r6, #10
 80161c2:	f178 0300 	sbcs.w	r3, r8, #0
 80161c6:	d25b      	bcs.n	8016280 <_vfiprintf_r+0xd08>
 80161c8:	ab3a      	add	r3, sp, #232	; 0xe8
 80161ca:	1b1b      	subs	r3, r3, r4
 80161cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80161d0:	465f      	mov	r7, fp
 80161d2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80161d6:	f8dd b000 	ldr.w	fp, [sp]
 80161da:	9300      	str	r3, [sp, #0]
 80161dc:	4655      	mov	r5, sl
 80161de:	f7ff badf 	b.w	80157a0 <_vfiprintf_r+0x228>
 80161e2:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 80161e6:	d03e      	beq.n	8016266 <_vfiprintf_r+0xcee>
 80161e8:	9903      	ldr	r1, [sp, #12]
 80161ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80161ee:	9103      	str	r1, [sp, #12]
 80161f0:	4690      	mov	r8, r2
 80161f2:	b2b6      	uxth	r6, r6
 80161f4:	e782      	b.n	80160fc <_vfiprintf_r+0xb84>
 80161f6:	46aa      	mov	sl, r5
 80161f8:	f7ff bac5 	b.w	8015786 <_vfiprintf_r+0x20e>
 80161fc:	2b01      	cmp	r3, #1
 80161fe:	46aa      	mov	sl, r5
 8016200:	f47f acf7 	bne.w	8015bf2 <_vfiprintf_r+0x67a>
 8016204:	f7ff bac4 	b.w	8015790 <_vfiprintf_r+0x218>
 8016208:	9e03      	ldr	r6, [sp, #12]
 801620a:	9a02      	ldr	r2, [sp, #8]
 801620c:	f856 3b04 	ldr.w	r3, [r6], #4
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	9603      	str	r6, [sp, #12]
 8016214:	f7ff b9f0 	b.w	80155f8 <_vfiprintf_r+0x80>
 8016218:	465b      	mov	r3, fp
 801621a:	2b06      	cmp	r3, #6
 801621c:	bf28      	it	cs
 801621e:	2306      	movcs	r3, #6
 8016220:	4c51      	ldr	r4, [pc, #324]	; (8016368 <_vfiprintf_r+0xdf0>)
 8016222:	9300      	str	r3, [sp, #0]
 8016224:	9603      	str	r6, [sp, #12]
 8016226:	4698      	mov	r8, r3
 8016228:	f7ff bb79 	b.w	801591e <_vfiprintf_r+0x3a6>
 801622c:	9b03      	ldr	r3, [sp, #12]
 801622e:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 8016232:	bf14      	ite	ne
 8016234:	f853 6b04 	ldrne.w	r6, [r3], #4
 8016238:	f853 6b04 	ldreq.w	r6, [r3], #4
 801623c:	9303      	str	r3, [sp, #12]
 801623e:	bf1c      	itt	ne
 8016240:	4690      	movne	r8, r2
 8016242:	b2f6      	uxtbne	r6, r6
 8016244:	2301      	movs	r3, #1
 8016246:	f7ff baf6 	b.w	8015836 <_vfiprintf_r+0x2be>
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 8016250:	bf14      	ite	ne
 8016252:	f853 6b04 	ldrne.w	r6, [r3], #4
 8016256:	f853 6b04 	ldreq.w	r6, [r3], #4
 801625a:	9303      	str	r3, [sp, #12]
 801625c:	bf1c      	itt	ne
 801625e:	4690      	movne	r8, r2
 8016260:	b2f6      	uxtbne	r6, r6
 8016262:	f7ff bae5 	b.w	8015830 <_vfiprintf_r+0x2b8>
 8016266:	9a03      	ldr	r2, [sp, #12]
 8016268:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 801626c:	bf14      	ite	ne
 801626e:	f852 6b04 	ldrne.w	r6, [r2], #4
 8016272:	f852 6b04 	ldreq.w	r6, [r2], #4
 8016276:	9203      	str	r2, [sp, #12]
 8016278:	bf1c      	itt	ne
 801627a:	4688      	movne	r8, r1
 801627c:	b2f6      	uxtbne	r6, r6
 801627e:	e73d      	b.n	80160fc <_vfiprintf_r+0xb84>
 8016280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016282:	9908      	ldr	r1, [sp, #32]
 8016284:	1ae4      	subs	r4, r4, r3
 8016286:	461a      	mov	r2, r3
 8016288:	4620      	mov	r0, r4
 801628a:	f7ff f8fb 	bl	8015484 <strncpy>
 801628e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8016292:	b10b      	cbz	r3, 8016298 <_vfiprintf_r+0xd20>
 8016294:	f109 0901 	add.w	r9, r9, #1
 8016298:	4630      	mov	r0, r6
 801629a:	4641      	mov	r1, r8
 801629c:	220a      	movs	r2, #10
 801629e:	2300      	movs	r3, #0
 80162a0:	2500      	movs	r5, #0
 80162a2:	f7f2 fdad 	bl	8008e00 <__aeabi_uldivmod>
 80162a6:	e773      	b.n	8016190 <_vfiprintf_r+0xc18>
 80162a8:	2001      	movs	r0, #1
 80162aa:	460a      	mov	r2, r1
 80162ac:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80162b0:	f7ff bb83 	b.w	80159ba <_vfiprintf_r+0x442>
 80162b4:	9b04      	ldr	r3, [sp, #16]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f47f adb6 	bne.w	8015e28 <_vfiprintf_r+0x8b0>
 80162bc:	460a      	mov	r2, r1
 80162be:	2001      	movs	r0, #1
 80162c0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80162c4:	f7ff bb79 	b.w	80159ba <_vfiprintf_r+0x442>
 80162c8:	9e03      	ldr	r6, [sp, #12]
 80162ca:	9a02      	ldr	r2, [sp, #8]
 80162cc:	f856 3b04 	ldr.w	r3, [r6], #4
 80162d0:	9603      	str	r6, [sp, #12]
 80162d2:	801a      	strh	r2, [r3, #0]
 80162d4:	f7ff b990 	b.w	80155f8 <_vfiprintf_r+0x80>
 80162d8:	f343 18c0 	sbfx	r8, r3, #7, #1
 80162dc:	b25e      	sxtb	r6, r3
 80162de:	4643      	mov	r3, r8
 80162e0:	f7ff ba44 	b.w	801576c <_vfiprintf_r+0x1f4>
 80162e4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80162e6:	f7fe f9b7 	bl	8014658 <__retarget_lock_release_recursive>
 80162ea:	f7ff ba84 	b.w	80157f6 <_vfiprintf_r+0x27e>
 80162ee:	f8cd b000 	str.w	fp, [sp]
 80162f2:	9603      	str	r6, [sp, #12]
 80162f4:	4683      	mov	fp, r0
 80162f6:	f7ff ba53 	b.w	80157a0 <_vfiprintf_r+0x228>
 80162fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80162fe:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801636c <_vfiprintf_r+0xdf4>
 8016302:	3201      	adds	r2, #1
 8016304:	e5e2      	b.n	8015ecc <_vfiprintf_r+0x954>
 8016306:	ee18 1a10 	vmov	r1, s16
 801630a:	ee18 0a90 	vmov	r0, s17
 801630e:	aa0e      	add	r2, sp, #56	; 0x38
 8016310:	f7ff f8ea 	bl	80154e8 <__sprint_r.part.0>
 8016314:	2800      	cmp	r0, #0
 8016316:	f43f aad2 	beq.w	80158be <_vfiprintf_r+0x346>
 801631a:	f7ff bad2 	b.w	80158c2 <_vfiprintf_r+0x34a>
 801631e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016320:	f8df a048 	ldr.w	sl, [pc, #72]	; 801636c <_vfiprintf_r+0xdf4>
 8016324:	3001      	adds	r0, #1
 8016326:	e622      	b.n	8015f6e <_vfiprintf_r+0x9f6>
 8016328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801632a:	07db      	lsls	r3, r3, #31
 801632c:	d405      	bmi.n	801633a <_vfiprintf_r+0xdc2>
 801632e:	89ab      	ldrh	r3, [r5, #12]
 8016330:	059f      	lsls	r7, r3, #22
 8016332:	d402      	bmi.n	801633a <_vfiprintf_r+0xdc2>
 8016334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016336:	f7fe f98f 	bl	8014658 <__retarget_lock_release_recursive>
 801633a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801633e:	9302      	str	r3, [sp, #8]
 8016340:	f7ff bac9 	b.w	80158d6 <_vfiprintf_r+0x35e>
 8016344:	f8df a028 	ldr.w	sl, [pc, #40]	; 8016370 <_vfiprintf_r+0xdf8>
 8016348:	4684      	mov	ip, r0
 801634a:	e4d5      	b.n	8015cf8 <_vfiprintf_r+0x780>
 801634c:	9a03      	ldr	r2, [sp, #12]
 801634e:	787b      	ldrb	r3, [r7, #1]
 8016350:	460f      	mov	r7, r1
 8016352:	f852 1b04 	ldr.w	r1, [r2], #4
 8016356:	9203      	str	r2, [sp, #12]
 8016358:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 801635c:	f7ff b96b 	b.w	8015636 <_vfiprintf_r+0xbe>
 8016360:	24008e4c 	.word	0x24008e4c
 8016364:	24008e38 	.word	0x24008e38
 8016368:	24008e60 	.word	0x24008e60
 801636c:	24009044 	.word	0x24009044
 8016370:	24009054 	.word	0x24009054

08016374 <__sbprintf>:
 8016374:	b570      	push	{r4, r5, r6, lr}
 8016376:	460c      	mov	r4, r1
 8016378:	8989      	ldrh	r1, [r1, #12]
 801637a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801637e:	f021 0102 	bic.w	r1, r1, #2
 8016382:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016386:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8016388:	911b      	str	r1, [sp, #108]	; 0x6c
 801638a:	89e1      	ldrh	r1, [r4, #14]
 801638c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016390:	69e1      	ldr	r1, [r4, #28]
 8016392:	9109      	str	r1, [sp, #36]	; 0x24
 8016394:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016396:	910b      	str	r1, [sp, #44]	; 0x2c
 8016398:	a91c      	add	r1, sp, #112	; 0x70
 801639a:	9102      	str	r1, [sp, #8]
 801639c:	9106      	str	r1, [sp, #24]
 801639e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80163a2:	4606      	mov	r6, r0
 80163a4:	9104      	str	r1, [sp, #16]
 80163a6:	9107      	str	r1, [sp, #28]
 80163a8:	a818      	add	r0, sp, #96	; 0x60
 80163aa:	2100      	movs	r1, #0
 80163ac:	e9cd 3200 	strd	r3, r2, [sp]
 80163b0:	9108      	str	r1, [sp, #32]
 80163b2:	f7fe f94b 	bl	801464c <__retarget_lock_init_recursive>
 80163b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80163ba:	a902      	add	r1, sp, #8
 80163bc:	4630      	mov	r0, r6
 80163be:	f7ff f8db 	bl	8015578 <_vfiprintf_r>
 80163c2:	1e05      	subs	r5, r0, #0
 80163c4:	db07      	blt.n	80163d6 <__sbprintf+0x62>
 80163c6:	a902      	add	r1, sp, #8
 80163c8:	4630      	mov	r0, r6
 80163ca:	f7fd fd6d 	bl	8013ea8 <_fflush_r>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	bf18      	it	ne
 80163d2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80163d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80163da:	065b      	lsls	r3, r3, #25
 80163dc:	d503      	bpl.n	80163e6 <__sbprintf+0x72>
 80163de:	89a3      	ldrh	r3, [r4, #12]
 80163e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163e4:	81a3      	strh	r3, [r4, #12]
 80163e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80163e8:	f7fe f932 	bl	8014650 <__retarget_lock_close_recursive>
 80163ec:	4628      	mov	r0, r5
 80163ee:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80163f2:	bd70      	pop	{r4, r5, r6, pc}

080163f4 <_write_r>:
 80163f4:	b538      	push	{r3, r4, r5, lr}
 80163f6:	460c      	mov	r4, r1
 80163f8:	4d08      	ldr	r5, [pc, #32]	; (801641c <_write_r+0x28>)
 80163fa:	4684      	mov	ip, r0
 80163fc:	4611      	mov	r1, r2
 80163fe:	4620      	mov	r0, r4
 8016400:	461a      	mov	r2, r3
 8016402:	2300      	movs	r3, #0
 8016404:	602b      	str	r3, [r5, #0]
 8016406:	4664      	mov	r4, ip
 8016408:	f7f3 fecd 	bl	800a1a6 <_write>
 801640c:	1c43      	adds	r3, r0, #1
 801640e:	d000      	beq.n	8016412 <_write_r+0x1e>
 8016410:	bd38      	pop	{r3, r4, r5, pc}
 8016412:	682b      	ldr	r3, [r5, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d0fb      	beq.n	8016410 <_write_r+0x1c>
 8016418:	6023      	str	r3, [r4, #0]
 801641a:	bd38      	pop	{r3, r4, r5, pc}
 801641c:	24035b30 	.word	0x24035b30

08016420 <__register_exitproc>:
 8016420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016424:	f8df a080 	ldr.w	sl, [pc, #128]	; 80164a8 <__register_exitproc+0x88>
 8016428:	4606      	mov	r6, r0
 801642a:	f8da 0000 	ldr.w	r0, [sl]
 801642e:	4698      	mov	r8, r3
 8016430:	460f      	mov	r7, r1
 8016432:	4691      	mov	r9, r2
 8016434:	f7fe f90e 	bl	8014654 <__retarget_lock_acquire_recursive>
 8016438:	4b1a      	ldr	r3, [pc, #104]	; (80164a4 <__register_exitproc+0x84>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8016440:	b324      	cbz	r4, 801648c <__register_exitproc+0x6c>
 8016442:	6865      	ldr	r5, [r4, #4]
 8016444:	2d1f      	cmp	r5, #31
 8016446:	dc26      	bgt.n	8016496 <__register_exitproc+0x76>
 8016448:	b95e      	cbnz	r6, 8016462 <__register_exitproc+0x42>
 801644a:	1c6b      	adds	r3, r5, #1
 801644c:	3502      	adds	r5, #2
 801644e:	f8da 0000 	ldr.w	r0, [sl]
 8016452:	6063      	str	r3, [r4, #4]
 8016454:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8016458:	f7fe f8fe 	bl	8014658 <__retarget_lock_release_recursive>
 801645c:	2000      	movs	r0, #0
 801645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016462:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8016466:	2301      	movs	r3, #1
 8016468:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801646c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8016470:	40ab      	lsls	r3, r5
 8016472:	431a      	orrs	r2, r3
 8016474:	2e02      	cmp	r6, #2
 8016476:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 801647a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801647e:	d1e4      	bne.n	801644a <__register_exitproc+0x2a>
 8016480:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8016484:	4313      	orrs	r3, r2
 8016486:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 801648a:	e7de      	b.n	801644a <__register_exitproc+0x2a>
 801648c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8016490:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8016494:	e7d5      	b.n	8016442 <__register_exitproc+0x22>
 8016496:	f8da 0000 	ldr.w	r0, [sl]
 801649a:	f7fe f8dd 	bl	8014658 <__retarget_lock_release_recursive>
 801649e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164a2:	e7dc      	b.n	801645e <__register_exitproc+0x3e>
 80164a4:	24008e20 	.word	0x24008e20
 80164a8:	24008a08 	.word	0x24008a08

080164ac <__assert_func>:
 80164ac:	b500      	push	{lr}
 80164ae:	4c0b      	ldr	r4, [pc, #44]	; (80164dc <__assert_func+0x30>)
 80164b0:	6825      	ldr	r5, [r4, #0]
 80164b2:	4614      	mov	r4, r2
 80164b4:	68ee      	ldr	r6, [r5, #12]
 80164b6:	461a      	mov	r2, r3
 80164b8:	b085      	sub	sp, #20
 80164ba:	4603      	mov	r3, r0
 80164bc:	460d      	mov	r5, r1
 80164be:	b14c      	cbz	r4, 80164d4 <__assert_func+0x28>
 80164c0:	4907      	ldr	r1, [pc, #28]	; (80164e0 <__assert_func+0x34>)
 80164c2:	9500      	str	r5, [sp, #0]
 80164c4:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80164c8:	4630      	mov	r0, r6
 80164ca:	4906      	ldr	r1, [pc, #24]	; (80164e4 <__assert_func+0x38>)
 80164cc:	f000 f8c2 	bl	8016654 <fiprintf>
 80164d0:	f000 fa50 	bl	8016974 <abort>
 80164d4:	4904      	ldr	r1, [pc, #16]	; (80164e8 <__assert_func+0x3c>)
 80164d6:	460c      	mov	r4, r1
 80164d8:	e7f3      	b.n	80164c2 <__assert_func+0x16>
 80164da:	bf00      	nop
 80164dc:	240081cc 	.word	0x240081cc
 80164e0:	24009064 	.word	0x24009064
 80164e4:	24009074 	.word	0x24009074
 80164e8:	24009070 	.word	0x24009070

080164ec <_calloc_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	fba1 1402 	umull	r1, r4, r1, r2
 80164f2:	bb8c      	cbnz	r4, 8016558 <_calloc_r+0x6c>
 80164f4:	f7fa fb46 	bl	8010b84 <_malloc_r>
 80164f8:	4605      	mov	r5, r0
 80164fa:	b1e0      	cbz	r0, 8016536 <_calloc_r+0x4a>
 80164fc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016500:	f022 0203 	bic.w	r2, r2, #3
 8016504:	3a04      	subs	r2, #4
 8016506:	2a24      	cmp	r2, #36	; 0x24
 8016508:	d817      	bhi.n	801653a <_calloc_r+0x4e>
 801650a:	2a13      	cmp	r2, #19
 801650c:	d91a      	bls.n	8016544 <_calloc_r+0x58>
 801650e:	2a1b      	cmp	r2, #27
 8016510:	e9c0 4400 	strd	r4, r4, [r0]
 8016514:	d91d      	bls.n	8016552 <_calloc_r+0x66>
 8016516:	2a24      	cmp	r2, #36	; 0x24
 8016518:	bf14      	ite	ne
 801651a:	f100 0210 	addne.w	r2, r0, #16
 801651e:	f100 0218 	addeq.w	r2, r0, #24
 8016522:	f04f 0300 	mov.w	r3, #0
 8016526:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801652a:	bf04      	itt	eq
 801652c:	6104      	streq	r4, [r0, #16]
 801652e:	6144      	streq	r4, [r0, #20]
 8016530:	e9c2 3300 	strd	r3, r3, [r2]
 8016534:	6093      	str	r3, [r2, #8]
 8016536:	4628      	mov	r0, r5
 8016538:	bd38      	pop	{r3, r4, r5, pc}
 801653a:	4621      	mov	r1, r4
 801653c:	f7fa fdd2 	bl	80110e4 <memset>
 8016540:	4628      	mov	r0, r5
 8016542:	bd38      	pop	{r3, r4, r5, pc}
 8016544:	4602      	mov	r2, r0
 8016546:	2300      	movs	r3, #0
 8016548:	e9c2 3300 	strd	r3, r3, [r2]
 801654c:	6093      	str	r3, [r2, #8]
 801654e:	4628      	mov	r0, r5
 8016550:	bd38      	pop	{r3, r4, r5, pc}
 8016552:	f100 0208 	add.w	r2, r0, #8
 8016556:	e7f6      	b.n	8016546 <_calloc_r+0x5a>
 8016558:	f7fa fada 	bl	8010b10 <__errno>
 801655c:	230c      	movs	r3, #12
 801655e:	2500      	movs	r5, #0
 8016560:	6003      	str	r3, [r0, #0]
 8016562:	e7e8      	b.n	8016536 <_calloc_r+0x4a>

08016564 <_close_r>:
 8016564:	b538      	push	{r3, r4, r5, lr}
 8016566:	4d07      	ldr	r5, [pc, #28]	; (8016584 <_close_r+0x20>)
 8016568:	2200      	movs	r2, #0
 801656a:	4604      	mov	r4, r0
 801656c:	4608      	mov	r0, r1
 801656e:	602a      	str	r2, [r5, #0]
 8016570:	f7f3 fe26 	bl	800a1c0 <_close>
 8016574:	1c43      	adds	r3, r0, #1
 8016576:	d000      	beq.n	801657a <_close_r+0x16>
 8016578:	bd38      	pop	{r3, r4, r5, pc}
 801657a:	682b      	ldr	r3, [r5, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d0fb      	beq.n	8016578 <_close_r+0x14>
 8016580:	6023      	str	r3, [r4, #0]
 8016582:	bd38      	pop	{r3, r4, r5, pc}
 8016584:	24035b30 	.word	0x24035b30

08016588 <_fclose_r>:
 8016588:	b570      	push	{r4, r5, r6, lr}
 801658a:	2900      	cmp	r1, #0
 801658c:	d04b      	beq.n	8016626 <_fclose_r+0x9e>
 801658e:	4606      	mov	r6, r0
 8016590:	460c      	mov	r4, r1
 8016592:	b110      	cbz	r0, 801659a <_fclose_r+0x12>
 8016594:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016596:	2b00      	cmp	r3, #0
 8016598:	d048      	beq.n	801662c <_fclose_r+0xa4>
 801659a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801659c:	07d8      	lsls	r0, r3, #31
 801659e:	d534      	bpl.n	801660a <_fclose_r+0x82>
 80165a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d03e      	beq.n	8016626 <_fclose_r+0x9e>
 80165a8:	4621      	mov	r1, r4
 80165aa:	4630      	mov	r0, r6
 80165ac:	f7fd fbe4 	bl	8013d78 <__sflush_r>
 80165b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80165b2:	4605      	mov	r5, r0
 80165b4:	b133      	cbz	r3, 80165c4 <_fclose_r+0x3c>
 80165b6:	69e1      	ldr	r1, [r4, #28]
 80165b8:	4630      	mov	r0, r6
 80165ba:	4798      	blx	r3
 80165bc:	2800      	cmp	r0, #0
 80165be:	bfb8      	it	lt
 80165c0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80165c4:	89a3      	ldrh	r3, [r4, #12]
 80165c6:	061a      	lsls	r2, r3, #24
 80165c8:	d43b      	bmi.n	8016642 <_fclose_r+0xba>
 80165ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80165cc:	b141      	cbz	r1, 80165e0 <_fclose_r+0x58>
 80165ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80165d2:	4299      	cmp	r1, r3
 80165d4:	d002      	beq.n	80165dc <_fclose_r+0x54>
 80165d6:	4630      	mov	r0, r6
 80165d8:	f7fd fd92 	bl	8014100 <_free_r>
 80165dc:	2300      	movs	r3, #0
 80165de:	6323      	str	r3, [r4, #48]	; 0x30
 80165e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80165e2:	b121      	cbz	r1, 80165ee <_fclose_r+0x66>
 80165e4:	4630      	mov	r0, r6
 80165e6:	f7fd fd8b 	bl	8014100 <_free_r>
 80165ea:	2300      	movs	r3, #0
 80165ec:	6463      	str	r3, [r4, #68]	; 0x44
 80165ee:	f7fd fd15 	bl	801401c <__sfp_lock_acquire>
 80165f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165f4:	2200      	movs	r2, #0
 80165f6:	07db      	lsls	r3, r3, #31
 80165f8:	81a2      	strh	r2, [r4, #12]
 80165fa:	d527      	bpl.n	801664c <_fclose_r+0xc4>
 80165fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165fe:	f7fe f827 	bl	8014650 <__retarget_lock_close_recursive>
 8016602:	f7fd fd11 	bl	8014028 <__sfp_lock_release>
 8016606:	4628      	mov	r0, r5
 8016608:	bd70      	pop	{r4, r5, r6, pc}
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	0599      	lsls	r1, r3, #22
 801660e:	d4cb      	bmi.n	80165a8 <_fclose_r+0x20>
 8016610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016612:	f7fe f81f 	bl	8014654 <__retarget_lock_acquire_recursive>
 8016616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d1c4      	bne.n	80165a8 <_fclose_r+0x20>
 801661e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8016620:	f015 0501 	ands.w	r5, r5, #1
 8016624:	d008      	beq.n	8016638 <_fclose_r+0xb0>
 8016626:	2500      	movs	r5, #0
 8016628:	4628      	mov	r0, r5
 801662a:	bd70      	pop	{r4, r5, r6, pc}
 801662c:	f7fd fc70 	bl	8013f10 <__sinit>
 8016630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016632:	07d8      	lsls	r0, r3, #31
 8016634:	d4b4      	bmi.n	80165a0 <_fclose_r+0x18>
 8016636:	e7e8      	b.n	801660a <_fclose_r+0x82>
 8016638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801663a:	f7fe f80d 	bl	8014658 <__retarget_lock_release_recursive>
 801663e:	4628      	mov	r0, r5
 8016640:	bd70      	pop	{r4, r5, r6, pc}
 8016642:	6921      	ldr	r1, [r4, #16]
 8016644:	4630      	mov	r0, r6
 8016646:	f7fd fd5b 	bl	8014100 <_free_r>
 801664a:	e7be      	b.n	80165ca <_fclose_r+0x42>
 801664c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801664e:	f7fe f803 	bl	8014658 <__retarget_lock_release_recursive>
 8016652:	e7d3      	b.n	80165fc <_fclose_r+0x74>

08016654 <fiprintf>:
 8016654:	b40e      	push	{r1, r2, r3}
 8016656:	b510      	push	{r4, lr}
 8016658:	b083      	sub	sp, #12
 801665a:	ab05      	add	r3, sp, #20
 801665c:	4c06      	ldr	r4, [pc, #24]	; (8016678 <fiprintf+0x24>)
 801665e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016662:	9301      	str	r3, [sp, #4]
 8016664:	4601      	mov	r1, r0
 8016666:	6820      	ldr	r0, [r4, #0]
 8016668:	f7fe ff86 	bl	8015578 <_vfiprintf_r>
 801666c:	b003      	add	sp, #12
 801666e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016672:	b003      	add	sp, #12
 8016674:	4770      	bx	lr
 8016676:	bf00      	nop
 8016678:	240081cc 	.word	0x240081cc

0801667c <__fputwc>:
 801667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016680:	b082      	sub	sp, #8
 8016682:	4682      	mov	sl, r0
 8016684:	4688      	mov	r8, r1
 8016686:	4614      	mov	r4, r2
 8016688:	f000 f8a8 	bl	80167dc <__locale_mb_cur_max>
 801668c:	2801      	cmp	r0, #1
 801668e:	d103      	bne.n	8016698 <__fputwc+0x1c>
 8016690:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8016694:	2bfe      	cmp	r3, #254	; 0xfe
 8016696:	d936      	bls.n	8016706 <__fputwc+0x8a>
 8016698:	4642      	mov	r2, r8
 801669a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801669e:	a901      	add	r1, sp, #4
 80166a0:	4650      	mov	r0, sl
 80166a2:	f000 f93b 	bl	801691c <_wcrtomb_r>
 80166a6:	1c42      	adds	r2, r0, #1
 80166a8:	4606      	mov	r6, r0
 80166aa:	d032      	beq.n	8016712 <__fputwc+0x96>
 80166ac:	b330      	cbz	r0, 80166fc <__fputwc+0x80>
 80166ae:	f89d c004 	ldrb.w	ip, [sp, #4]
 80166b2:	f10d 0905 	add.w	r9, sp, #5
 80166b6:	2500      	movs	r5, #0
 80166b8:	e009      	b.n	80166ce <__fputwc+0x52>
 80166ba:	6823      	ldr	r3, [r4, #0]
 80166bc:	1c5a      	adds	r2, r3, #1
 80166be:	6022      	str	r2, [r4, #0]
 80166c0:	f883 c000 	strb.w	ip, [r3]
 80166c4:	3501      	adds	r5, #1
 80166c6:	42b5      	cmp	r5, r6
 80166c8:	d218      	bcs.n	80166fc <__fputwc+0x80>
 80166ca:	f819 cb01 	ldrb.w	ip, [r9], #1
 80166ce:	68a3      	ldr	r3, [r4, #8]
 80166d0:	3b01      	subs	r3, #1
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	60a3      	str	r3, [r4, #8]
 80166d6:	daf0      	bge.n	80166ba <__fputwc+0x3e>
 80166d8:	69a7      	ldr	r7, [r4, #24]
 80166da:	42bb      	cmp	r3, r7
 80166dc:	4661      	mov	r1, ip
 80166de:	4622      	mov	r2, r4
 80166e0:	4650      	mov	r0, sl
 80166e2:	db02      	blt.n	80166ea <__fputwc+0x6e>
 80166e4:	f1bc 0f0a 	cmp.w	ip, #10
 80166e8:	d1e7      	bne.n	80166ba <__fputwc+0x3e>
 80166ea:	f000 f8bf 	bl	801686c <__swbuf_r>
 80166ee:	1c43      	adds	r3, r0, #1
 80166f0:	d1e8      	bne.n	80166c4 <__fputwc+0x48>
 80166f2:	4606      	mov	r6, r0
 80166f4:	4630      	mov	r0, r6
 80166f6:	b002      	add	sp, #8
 80166f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166fc:	4646      	mov	r6, r8
 80166fe:	4630      	mov	r0, r6
 8016700:	b002      	add	sp, #8
 8016702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016706:	fa5f fc88 	uxtb.w	ip, r8
 801670a:	f88d c004 	strb.w	ip, [sp, #4]
 801670e:	4606      	mov	r6, r0
 8016710:	e7cf      	b.n	80166b2 <__fputwc+0x36>
 8016712:	89a3      	ldrh	r3, [r4, #12]
 8016714:	4630      	mov	r0, r6
 8016716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801671a:	81a3      	strh	r3, [r4, #12]
 801671c:	b002      	add	sp, #8
 801671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016722:	bf00      	nop

08016724 <_fputwc_r>:
 8016724:	b530      	push	{r4, r5, lr}
 8016726:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8016728:	f013 0f01 	tst.w	r3, #1
 801672c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8016730:	4614      	mov	r4, r2
 8016732:	b083      	sub	sp, #12
 8016734:	4605      	mov	r5, r0
 8016736:	b29a      	uxth	r2, r3
 8016738:	d101      	bne.n	801673e <_fputwc_r+0x1a>
 801673a:	0598      	lsls	r0, r3, #22
 801673c:	d51c      	bpl.n	8016778 <_fputwc_r+0x54>
 801673e:	0490      	lsls	r0, r2, #18
 8016740:	d406      	bmi.n	8016750 <_fputwc_r+0x2c>
 8016742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801674c:	81a3      	strh	r3, [r4, #12]
 801674e:	6662      	str	r2, [r4, #100]	; 0x64
 8016750:	4622      	mov	r2, r4
 8016752:	4628      	mov	r0, r5
 8016754:	f7ff ff92 	bl	801667c <__fputwc>
 8016758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801675a:	07da      	lsls	r2, r3, #31
 801675c:	4605      	mov	r5, r0
 801675e:	d402      	bmi.n	8016766 <_fputwc_r+0x42>
 8016760:	89a3      	ldrh	r3, [r4, #12]
 8016762:	059b      	lsls	r3, r3, #22
 8016764:	d502      	bpl.n	801676c <_fputwc_r+0x48>
 8016766:	4628      	mov	r0, r5
 8016768:	b003      	add	sp, #12
 801676a:	bd30      	pop	{r4, r5, pc}
 801676c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801676e:	f7fd ff73 	bl	8014658 <__retarget_lock_release_recursive>
 8016772:	4628      	mov	r0, r5
 8016774:	b003      	add	sp, #12
 8016776:	bd30      	pop	{r4, r5, pc}
 8016778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801677a:	9101      	str	r1, [sp, #4]
 801677c:	f7fd ff6a 	bl	8014654 <__retarget_lock_acquire_recursive>
 8016780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016784:	9901      	ldr	r1, [sp, #4]
 8016786:	b29a      	uxth	r2, r3
 8016788:	e7d9      	b.n	801673e <_fputwc_r+0x1a>
 801678a:	bf00      	nop

0801678c <_fstat_r>:
 801678c:	b570      	push	{r4, r5, r6, lr}
 801678e:	460c      	mov	r4, r1
 8016790:	4d08      	ldr	r5, [pc, #32]	; (80167b4 <_fstat_r+0x28>)
 8016792:	4603      	mov	r3, r0
 8016794:	2600      	movs	r6, #0
 8016796:	4620      	mov	r0, r4
 8016798:	4611      	mov	r1, r2
 801679a:	461c      	mov	r4, r3
 801679c:	602e      	str	r6, [r5, #0]
 801679e:	f7f3 fd12 	bl	800a1c6 <_fstat>
 80167a2:	1c43      	adds	r3, r0, #1
 80167a4:	d000      	beq.n	80167a8 <_fstat_r+0x1c>
 80167a6:	bd70      	pop	{r4, r5, r6, pc}
 80167a8:	682b      	ldr	r3, [r5, #0]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d0fb      	beq.n	80167a6 <_fstat_r+0x1a>
 80167ae:	6023      	str	r3, [r4, #0]
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
 80167b2:	bf00      	nop
 80167b4:	24035b30 	.word	0x24035b30

080167b8 <_isatty_r>:
 80167b8:	b538      	push	{r3, r4, r5, lr}
 80167ba:	4d07      	ldr	r5, [pc, #28]	; (80167d8 <_isatty_r+0x20>)
 80167bc:	2200      	movs	r2, #0
 80167be:	4604      	mov	r4, r0
 80167c0:	4608      	mov	r0, r1
 80167c2:	602a      	str	r2, [r5, #0]
 80167c4:	f7f3 fd04 	bl	800a1d0 <_isatty>
 80167c8:	1c43      	adds	r3, r0, #1
 80167ca:	d000      	beq.n	80167ce <_isatty_r+0x16>
 80167cc:	bd38      	pop	{r3, r4, r5, pc}
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d0fb      	beq.n	80167cc <_isatty_r+0x14>
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	bd38      	pop	{r3, r4, r5, pc}
 80167d8:	24035b30 	.word	0x24035b30

080167dc <__locale_mb_cur_max>:
 80167dc:	4b01      	ldr	r3, [pc, #4]	; (80167e4 <__locale_mb_cur_max+0x8>)
 80167de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80167e2:	4770      	bx	lr
 80167e4:	24008a0c 	.word	0x24008a0c

080167e8 <_lseek_r>:
 80167e8:	b538      	push	{r3, r4, r5, lr}
 80167ea:	460c      	mov	r4, r1
 80167ec:	4d08      	ldr	r5, [pc, #32]	; (8016810 <_lseek_r+0x28>)
 80167ee:	4684      	mov	ip, r0
 80167f0:	4611      	mov	r1, r2
 80167f2:	4620      	mov	r0, r4
 80167f4:	461a      	mov	r2, r3
 80167f6:	2300      	movs	r3, #0
 80167f8:	602b      	str	r3, [r5, #0]
 80167fa:	4664      	mov	r4, ip
 80167fc:	f7f3 fcea 	bl	800a1d4 <_lseek>
 8016800:	1c43      	adds	r3, r0, #1
 8016802:	d000      	beq.n	8016806 <_lseek_r+0x1e>
 8016804:	bd38      	pop	{r3, r4, r5, pc}
 8016806:	682b      	ldr	r3, [r5, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d0fb      	beq.n	8016804 <_lseek_r+0x1c>
 801680c:	6023      	str	r3, [r4, #0]
 801680e:	bd38      	pop	{r3, r4, r5, pc}
 8016810:	24035b30 	.word	0x24035b30

08016814 <__ascii_mbtowc>:
 8016814:	b082      	sub	sp, #8
 8016816:	b149      	cbz	r1, 801682c <__ascii_mbtowc+0x18>
 8016818:	b15a      	cbz	r2, 8016832 <__ascii_mbtowc+0x1e>
 801681a:	b16b      	cbz	r3, 8016838 <__ascii_mbtowc+0x24>
 801681c:	7813      	ldrb	r3, [r2, #0]
 801681e:	600b      	str	r3, [r1, #0]
 8016820:	7812      	ldrb	r2, [r2, #0]
 8016822:	1e10      	subs	r0, r2, #0
 8016824:	bf18      	it	ne
 8016826:	2001      	movne	r0, #1
 8016828:	b002      	add	sp, #8
 801682a:	4770      	bx	lr
 801682c:	a901      	add	r1, sp, #4
 801682e:	2a00      	cmp	r2, #0
 8016830:	d1f3      	bne.n	801681a <__ascii_mbtowc+0x6>
 8016832:	4610      	mov	r0, r2
 8016834:	b002      	add	sp, #8
 8016836:	4770      	bx	lr
 8016838:	f06f 0001 	mvn.w	r0, #1
 801683c:	e7f4      	b.n	8016828 <__ascii_mbtowc+0x14>
 801683e:	bf00      	nop

08016840 <_read_r>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	460c      	mov	r4, r1
 8016844:	4d08      	ldr	r5, [pc, #32]	; (8016868 <_read_r+0x28>)
 8016846:	4684      	mov	ip, r0
 8016848:	4611      	mov	r1, r2
 801684a:	4620      	mov	r0, r4
 801684c:	461a      	mov	r2, r3
 801684e:	2300      	movs	r3, #0
 8016850:	602b      	str	r3, [r5, #0]
 8016852:	4664      	mov	r4, ip
 8016854:	f7f3 fc9a 	bl	800a18c <_read>
 8016858:	1c43      	adds	r3, r0, #1
 801685a:	d000      	beq.n	801685e <_read_r+0x1e>
 801685c:	bd38      	pop	{r3, r4, r5, pc}
 801685e:	682b      	ldr	r3, [r5, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d0fb      	beq.n	801685c <_read_r+0x1c>
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	bd38      	pop	{r3, r4, r5, pc}
 8016868:	24035b30 	.word	0x24035b30

0801686c <__swbuf_r>:
 801686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686e:	460d      	mov	r5, r1
 8016870:	4614      	mov	r4, r2
 8016872:	4606      	mov	r6, r0
 8016874:	b110      	cbz	r0, 801687c <__swbuf_r+0x10>
 8016876:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016878:	2b00      	cmp	r3, #0
 801687a:	d043      	beq.n	8016904 <__swbuf_r+0x98>
 801687c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016880:	69a3      	ldr	r3, [r4, #24]
 8016882:	60a3      	str	r3, [r4, #8]
 8016884:	0717      	lsls	r7, r2, #28
 8016886:	b290      	uxth	r0, r2
 8016888:	d51b      	bpl.n	80168c2 <__swbuf_r+0x56>
 801688a:	6923      	ldr	r3, [r4, #16]
 801688c:	b1cb      	cbz	r3, 80168c2 <__swbuf_r+0x56>
 801688e:	b2ed      	uxtb	r5, r5
 8016890:	0481      	lsls	r1, r0, #18
 8016892:	462f      	mov	r7, r5
 8016894:	d522      	bpl.n	80168dc <__swbuf_r+0x70>
 8016896:	6822      	ldr	r2, [r4, #0]
 8016898:	6961      	ldr	r1, [r4, #20]
 801689a:	1ad3      	subs	r3, r2, r3
 801689c:	4299      	cmp	r1, r3
 801689e:	dd29      	ble.n	80168f4 <__swbuf_r+0x88>
 80168a0:	3301      	adds	r3, #1
 80168a2:	68a1      	ldr	r1, [r4, #8]
 80168a4:	3901      	subs	r1, #1
 80168a6:	60a1      	str	r1, [r4, #8]
 80168a8:	1c51      	adds	r1, r2, #1
 80168aa:	6021      	str	r1, [r4, #0]
 80168ac:	7015      	strb	r5, [r2, #0]
 80168ae:	6962      	ldr	r2, [r4, #20]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d02a      	beq.n	801690a <__swbuf_r+0x9e>
 80168b4:	89a3      	ldrh	r3, [r4, #12]
 80168b6:	07db      	lsls	r3, r3, #31
 80168b8:	d501      	bpl.n	80168be <__swbuf_r+0x52>
 80168ba:	2d0a      	cmp	r5, #10
 80168bc:	d025      	beq.n	801690a <__swbuf_r+0x9e>
 80168be:	4638      	mov	r0, r7
 80168c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168c2:	4621      	mov	r1, r4
 80168c4:	4630      	mov	r0, r6
 80168c6:	f7fc fadd 	bl	8012e84 <__swsetup_r>
 80168ca:	bb20      	cbnz	r0, 8016916 <__swbuf_r+0xaa>
 80168cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168d0:	6923      	ldr	r3, [r4, #16]
 80168d2:	b290      	uxth	r0, r2
 80168d4:	b2ed      	uxtb	r5, r5
 80168d6:	0481      	lsls	r1, r0, #18
 80168d8:	462f      	mov	r7, r5
 80168da:	d4dc      	bmi.n	8016896 <__swbuf_r+0x2a>
 80168dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80168e0:	81a2      	strh	r2, [r4, #12]
 80168e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168e4:	6961      	ldr	r1, [r4, #20]
 80168e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80168ea:	6662      	str	r2, [r4, #100]	; 0x64
 80168ec:	6822      	ldr	r2, [r4, #0]
 80168ee:	1ad3      	subs	r3, r2, r3
 80168f0:	4299      	cmp	r1, r3
 80168f2:	dcd5      	bgt.n	80168a0 <__swbuf_r+0x34>
 80168f4:	4621      	mov	r1, r4
 80168f6:	4630      	mov	r0, r6
 80168f8:	f7fd fad6 	bl	8013ea8 <_fflush_r>
 80168fc:	b958      	cbnz	r0, 8016916 <__swbuf_r+0xaa>
 80168fe:	6822      	ldr	r2, [r4, #0]
 8016900:	2301      	movs	r3, #1
 8016902:	e7ce      	b.n	80168a2 <__swbuf_r+0x36>
 8016904:	f7fd fb04 	bl	8013f10 <__sinit>
 8016908:	e7b8      	b.n	801687c <__swbuf_r+0x10>
 801690a:	4621      	mov	r1, r4
 801690c:	4630      	mov	r0, r6
 801690e:	f7fd facb 	bl	8013ea8 <_fflush_r>
 8016912:	2800      	cmp	r0, #0
 8016914:	d0d3      	beq.n	80168be <__swbuf_r+0x52>
 8016916:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801691a:	e7d0      	b.n	80168be <__swbuf_r+0x52>

0801691c <_wcrtomb_r>:
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	4605      	mov	r5, r0
 8016920:	b084      	sub	sp, #16
 8016922:	461c      	mov	r4, r3
 8016924:	b139      	cbz	r1, 8016936 <_wcrtomb_r+0x1a>
 8016926:	4e0b      	ldr	r6, [pc, #44]	; (8016954 <_wcrtomb_r+0x38>)
 8016928:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 801692c:	47b0      	blx	r6
 801692e:	1c43      	adds	r3, r0, #1
 8016930:	d009      	beq.n	8016946 <_wcrtomb_r+0x2a>
 8016932:	b004      	add	sp, #16
 8016934:	bd70      	pop	{r4, r5, r6, pc}
 8016936:	460a      	mov	r2, r1
 8016938:	4906      	ldr	r1, [pc, #24]	; (8016954 <_wcrtomb_r+0x38>)
 801693a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 801693e:	a901      	add	r1, sp, #4
 8016940:	47b0      	blx	r6
 8016942:	1c43      	adds	r3, r0, #1
 8016944:	d1f5      	bne.n	8016932 <_wcrtomb_r+0x16>
 8016946:	2200      	movs	r2, #0
 8016948:	238a      	movs	r3, #138	; 0x8a
 801694a:	6022      	str	r2, [r4, #0]
 801694c:	602b      	str	r3, [r5, #0]
 801694e:	b004      	add	sp, #16
 8016950:	bd70      	pop	{r4, r5, r6, pc}
 8016952:	bf00      	nop
 8016954:	24008a0c 	.word	0x24008a0c

08016958 <__ascii_wctomb>:
 8016958:	b149      	cbz	r1, 801696e <__ascii_wctomb+0x16>
 801695a:	2aff      	cmp	r2, #255	; 0xff
 801695c:	d802      	bhi.n	8016964 <__ascii_wctomb+0xc>
 801695e:	700a      	strb	r2, [r1, #0]
 8016960:	2001      	movs	r0, #1
 8016962:	4770      	bx	lr
 8016964:	238a      	movs	r3, #138	; 0x8a
 8016966:	6003      	str	r3, [r0, #0]
 8016968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801696c:	4770      	bx	lr
 801696e:	4608      	mov	r0, r1
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop

08016974 <abort>:
 8016974:	b508      	push	{r3, lr}
 8016976:	2006      	movs	r0, #6
 8016978:	f000 f804 	bl	8016984 <raise>
 801697c:	2001      	movs	r0, #1
 801697e:	f7f3 fbff 	bl	800a180 <_exit>
 8016982:	bf00      	nop

08016984 <raise>:
 8016984:	b538      	push	{r3, r4, r5, lr}
 8016986:	4b15      	ldr	r3, [pc, #84]	; (80169dc <raise+0x58>)
 8016988:	281f      	cmp	r0, #31
 801698a:	681d      	ldr	r5, [r3, #0]
 801698c:	d820      	bhi.n	80169d0 <raise+0x4c>
 801698e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8016992:	4604      	mov	r4, r0
 8016994:	b162      	cbz	r2, 80169b0 <raise+0x2c>
 8016996:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 801699a:	b14b      	cbz	r3, 80169b0 <raise+0x2c>
 801699c:	2b01      	cmp	r3, #1
 801699e:	d015      	beq.n	80169cc <raise+0x48>
 80169a0:	1c59      	adds	r1, r3, #1
 80169a2:	d00f      	beq.n	80169c4 <raise+0x40>
 80169a4:	2500      	movs	r5, #0
 80169a6:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80169aa:	4798      	blx	r3
 80169ac:	4628      	mov	r0, r5
 80169ae:	bd38      	pop	{r3, r4, r5, pc}
 80169b0:	4628      	mov	r0, r5
 80169b2:	f000 f82b 	bl	8016a0c <_getpid_r>
 80169b6:	4622      	mov	r2, r4
 80169b8:	4601      	mov	r1, r0
 80169ba:	4628      	mov	r0, r5
 80169bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169c0:	f000 b80e 	b.w	80169e0 <_kill_r>
 80169c4:	2316      	movs	r3, #22
 80169c6:	602b      	str	r3, [r5, #0]
 80169c8:	2001      	movs	r0, #1
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	2000      	movs	r0, #0
 80169ce:	bd38      	pop	{r3, r4, r5, pc}
 80169d0:	2316      	movs	r3, #22
 80169d2:	602b      	str	r3, [r5, #0]
 80169d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169d8:	bd38      	pop	{r3, r4, r5, pc}
 80169da:	bf00      	nop
 80169dc:	240081cc 	.word	0x240081cc

080169e0 <_kill_r>:
 80169e0:	b570      	push	{r4, r5, r6, lr}
 80169e2:	460c      	mov	r4, r1
 80169e4:	4d08      	ldr	r5, [pc, #32]	; (8016a08 <_kill_r+0x28>)
 80169e6:	4603      	mov	r3, r0
 80169e8:	2600      	movs	r6, #0
 80169ea:	4620      	mov	r0, r4
 80169ec:	4611      	mov	r1, r2
 80169ee:	461c      	mov	r4, r3
 80169f0:	602e      	str	r6, [r5, #0]
 80169f2:	f7f3 fbbd 	bl	800a170 <_kill>
 80169f6:	1c43      	adds	r3, r0, #1
 80169f8:	d000      	beq.n	80169fc <_kill_r+0x1c>
 80169fa:	bd70      	pop	{r4, r5, r6, pc}
 80169fc:	682b      	ldr	r3, [r5, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d0fb      	beq.n	80169fa <_kill_r+0x1a>
 8016a02:	6023      	str	r3, [r4, #0]
 8016a04:	bd70      	pop	{r4, r5, r6, pc}
 8016a06:	bf00      	nop
 8016a08:	24035b30 	.word	0x24035b30

08016a0c <_getpid_r>:
 8016a0c:	f7f3 bbae 	b.w	800a16c <_getpid>

08016a10 <_init>:
 8016a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a12:	bf00      	nop
 8016a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a16:	bc08      	pop	{r3}
 8016a18:	469e      	mov	lr, r3
 8016a1a:	4770      	bx	lr

08016a1c <_fini>:
 8016a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1e:	bf00      	nop
 8016a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a22:	bc08      	pop	{r3}
 8016a24:	469e      	mov	lr, r3
 8016a26:	4770      	bx	lr
