
USBCDCH743FUZZERModbusDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0001449c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0801c49c  0801c49c  00047404  2**0
                  CONTENTS
  3 .ARM          00000008  0801c49c  0801c49c  0002c49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .preinit_array 00000000  0801c4a4  0801c4a4  00047404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .init_array   00000008  0801c4a4  0801c4a4  0002c4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0801c4ac  0801c4ac  0002c4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .privileged_data 00008000  24000000  0801c4b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  24008000  080244b4  00038000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025134  24010000  08024a60  00040000  2**16
                  ALLOC
 10 ._user_heap_stack 00001400  24036000  24036000  00046000  2**13
                  ALLOC
 11 ._asan_var    00000004  24037400  24037400  00047400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00047404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036aa9  00000000  00000000  00047432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006de7  00000000  00000000  0007dedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002860  00000000  00000000  00084cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002568  00000000  00000000  00087528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00041f02  00000000  00000000  00089a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032802  00000000  00000000  000cb992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001783c0  00000000  00000000  000fe194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  00276554  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b014  00000000  00000000  002765a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 08 24 fd b5 00 08 87 a2 00 08 a9 a2 00 08     ...$............
 8000010:	65 a2 00 08 cb a2 00 08 ed a2 00 08 00 00 00 00     e...............
	...
 800002c:	a5 73 00 08 15 b3 00 08 00 00 00 00 ad 72 00 08     .s...........r..
 800003c:	57 73 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     Ws..M...M...M...
 800004c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800005c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800006c:	25 b3 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     %...M...M...M...
 800007c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800008c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800009c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80000ac:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80000bc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80000cc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 39 b3 00 08     M...M...M...9...
 80000dc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 00 00 00 00     M...M...M.......
 80000ec:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80000fc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800010c:	4d b6 00 08 4d b3 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800011c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800012c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800013c:	4d b6 00 08 00 00 00 00 00 00 00 00 00 00 00 00     M...............
 800014c:	00 00 00 00 4d b6 00 08 4d b6 00 08 4d b6 00 08     ....M...M...M...
 800015c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800016c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800017c:	00 00 00 00 61 b3 00 08 4d b6 00 08 4d b6 00 08     ....a...M...M...
 800018c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800019c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80001ac:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80001bc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80001cc:	4d b6 00 08 4d b6 00 08 75 b3 00 08 4d b6 00 08     M...M...u...M...
 80001dc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80001ec:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 80001fc:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800020c:	4d b6 00 08 4d b6 00 08 89 b3 00 08 4d b6 00 08     M...M.......M...
 800021c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800022c:	00 00 00 00 4d b6 00 08 4d b6 00 08 00 00 00 00     ....M...M.......
 800023c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800024c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800025c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800026c:	4d b6 00 08 4d b6 00 08 4d b6 00 08 4d b6 00 08     M...M...M...M...
 800027c:	00 00 00 00 4d b6 00 08 4d b6 00 08 4d b6 00 08     ....M...M...M...
	...
 8000294:	4d b6 00 08                                         M...

08000298 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800029e:	2020      	movs	r0, #32
 80002a0:	f007 f90c 	bl	80074bc <pvPortMalloc>
 80002a4:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00a      	beq.n	80002c2 <xEventGroupCreate+0x2a>
        {
            pxEventBits->uxEventBits = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3304      	adds	r3, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fb70 	bl	800099c <vListInitialise>
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Both static and dynamic allocation can be used, so note this
                     * event group was allocated statically in case the event group is
                     * later deleted. */
                    pxEventBits->ucStaticallyAllocated = pdFALSE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	771a      	strb	r2, [r3, #28]
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80002c2:	687b      	ldr	r3, [r7, #4]
    }
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <xEventGroupCreateStatic>:
    {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
        configASSERT( pxEventGroupBuffer );
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10a      	bne.n	80002f0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	613b      	str	r3, [r7, #16]
        "	msr basepri, %0											\n"\
        "	isb														\n"\
        "	dsb														\n"\
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002ec:	bf00      	nop
 80002ee:	e7fe      	b.n	80002ee <xEventGroupCreateStatic+0x22>
                volatile size_t xSize = sizeof( StaticEventGroup_t );
 80002f0:	2320      	movs	r3, #32
 80002f2:	60bb      	str	r3, [r7, #8]
                configASSERT( xSize == sizeof( EventGroup_t ) );
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	2b20      	cmp	r3, #32
 80002f8:	d00a      	beq.n	8000310 <xEventGroupCreateStatic+0x44>
    __asm volatile
 80002fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fe:	f383 8811 	msr	BASEPRI, r3
 8000302:	f3bf 8f6f 	isb	sy
 8000306:	f3bf 8f4f 	dsb	sy
 800030a:	60fb      	str	r3, [r7, #12]
}
 800030c:	bf00      	nop
 800030e:	e7fe      	b.n	800030e <xEventGroupCreateStatic+0x42>
        pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	617b      	str	r3, [r7, #20]
        if( pxEventBits != NULL )
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00a      	beq.n	8000330 <xEventGroupCreateStatic+0x64>
            pxEventBits->uxEventBits = 0;
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3304      	adds	r3, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb39 	bl	800099c <vListInitialise>
                    pxEventBits->ucStaticallyAllocated = pdTRUE;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	2201      	movs	r2, #1
 800032e:	771a      	strb	r2, [r3, #28]
        return pxEventBits;
 8000330:	697b      	ldr	r3, [r7, #20]
    }
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 800033a:	b580      	push	{r7, lr}
 800033c:	b090      	sub	sp, #64	; 0x40
 800033e:	af00      	add	r7, sp, #0
 8000340:	60f8      	str	r0, [r7, #12]
 8000342:	60b9      	str	r1, [r7, #8]
 8000344:	607a      	str	r2, [r7, #4]
 8000346:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8000350:	2300      	movs	r3, #0
 8000352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10a      	bne.n	8000370 <xEventGroupWaitBits+0x36>
    __asm volatile
 800035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035e:	f383 8811 	msr	BASEPRI, r3
 8000362:	f3bf 8f6f 	isb	sy
 8000366:	f3bf 8f4f 	dsb	sy
 800036a:	623b      	str	r3, [r7, #32]
}
 800036c:	bf00      	nop
 800036e:	e7fe      	b.n	800036e <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00a      	beq.n	8000390 <xEventGroupWaitBits+0x56>
    __asm volatile
 800037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800037e:	f383 8811 	msr	BASEPRI, r3
 8000382:	f3bf 8f6f 	isb	sy
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	61fb      	str	r3, [r7, #28]
}
 800038c:	bf00      	nop
 800038e:	e7fe      	b.n	800038e <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <xEventGroupWaitBits+0x72>
    __asm volatile
 8000396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800039a:	f383 8811 	msr	BASEPRI, r3
 800039e:	f3bf 8f6f 	isb	sy
 80003a2:	f3bf 8f4f 	dsb	sy
 80003a6:	61bb      	str	r3, [r7, #24]
}
 80003a8:	bf00      	nop
 80003aa:	e7fe      	b.n	80003aa <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80003ac:	f005 fa06 	bl	80057bc <xTaskGetSchedulerState>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d102      	bne.n	80003bc <xEventGroupWaitBits+0x82>
 80003b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <xEventGroupWaitBits+0x86>
 80003bc:	2301      	movs	r3, #1
 80003be:	e000      	b.n	80003c2 <xEventGroupWaitBits+0x88>
 80003c0:	2300      	movs	r3, #0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10a      	bne.n	80003dc <xEventGroupWaitBits+0xa2>
    __asm volatile
 80003c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ca:	f383 8811 	msr	BASEPRI, r3
 80003ce:	f3bf 8f6f 	isb	sy
 80003d2:	f3bf 8f4f 	dsb	sy
 80003d6:	617b      	str	r3, [r7, #20]
}
 80003d8:	bf00      	nop
 80003da:	e7fe      	b.n	80003da <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 80003dc:	f003 fd58 	bl	8003e90 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80003e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80003e6:	683a      	ldr	r2, [r7, #0]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003ec:	f000 fab3 	bl	8000956 <prvTestWaitCondition>
 80003f0:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 80003f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00e      	beq.n	8000416 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d028      	beq.n	8000458 <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e020      	b.n	8000458 <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000418:	2b00      	cmp	r3, #0
 800041a:	d104      	bne.n	8000426 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 8000420:	2301      	movs	r3, #1
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
 8000424:	e018      	b.n	8000458 <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d003      	beq.n	8000442 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800043c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000444:	1d18      	adds	r0, r3, #4
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044a:	4313      	orrs	r3, r2
 800044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800044e:	4619      	mov	r1, r3
 8000450:	f004 fe88 	bl	8005164 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8000458:	f003 fd28 	bl	8003eac <xTaskResumeAll>
 800045c:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800045e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000460:	2b00      	cmp	r3, #0
 8000462:	d031      	beq.n	80004c8 <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8000464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000466:	2b00      	cmp	r3, #0
 8000468:	d107      	bne.n	800047a <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <xEventGroupWaitBits+0x19a>)
 800046c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	f3bf 8f4f 	dsb	sy
 8000476:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800047a:	f005 f967 	bl	800574c <uxTaskResetEventItemValue>
 800047e:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d11a      	bne.n	80004c0 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 800048a:	f009 fc1f 	bl	8009ccc <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800049a:	f000 fa5c 	bl	8000956 <prvTestWaitCondition>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d009      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d006      	beq.n	80004b8 <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b6:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80004b8:	2301      	movs	r3, #1
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 80004bc:	f009 fc24 	bl	8009d08 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80004c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3740      	adds	r7, #64	; 0x40
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	e000ed04 	.word	0xe000ed04

080004d8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <xEventGroupClearBits+0x2a>
    __asm volatile
 80004ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f0:	f383 8811 	msr	BASEPRI, r3
 80004f4:	f3bf 8f6f 	isb	sy
 80004f8:	f3bf 8f4f 	dsb	sy
 80004fc:	60fb      	str	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	e7fe      	b.n	8000500 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <xEventGroupClearBits+0x4a>
    __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	60bb      	str	r3, [r7, #8]
}
 800051e:	bf00      	nop
 8000520:	e7fe      	b.n	8000520 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 8000522:	f009 fbd3 	bl	8009ccc <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	43db      	mvns	r3, r3
 8000534:	401a      	ands	r2, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 800053a:	f009 fbe5 	bl	8009d08 <vPortExitCritical>

    return uxReturn;
 800053e:	693b      	ldr	r3, [r7, #16]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <xEventGroupClearBitsFromISR>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
                                            const EventBits_t uxBitsToClear )
    {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000552:	2300      	movs	r3, #0
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <xEventGroupClearBitsFromISR+0x24>)
 800055a:	f005 ffff 	bl	800655c <xTimerPendFunctionCallFromISR>
 800055e:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8000560:	68fb      	ldr	r3, [r7, #12]
    }
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	080008f5 	.word	0x080008f5

08000570 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10a      	bne.n	80005a2 <xEventGroupSetBits+0x32>
    __asm volatile
 800058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000590:	f383 8811 	msr	BASEPRI, r3
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	613b      	str	r3, [r7, #16]
}
 800059e:	bf00      	nop
 80005a0:	e7fe      	b.n	80005a0 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00a      	beq.n	80005c2 <xEventGroupSetBits+0x52>
    __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60fb      	str	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	3304      	adds	r3, #4
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	3308      	adds	r3, #8
 80005cc:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 80005ce:	f003 fc5f 	bl	8003e90 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	431a      	orrs	r2, r3
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80005e4:	e03c      	b.n	8000660 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 80005e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80005ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005fc:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000604:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000620:	e008      	b.n	8000634 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	69ba      	ldr	r2, [r7, #24]
 800062c:	429a      	cmp	r2, r3
 800062e:	d101      	bne.n	8000634 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8000634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000636:	2b00      	cmp	r3, #0
 8000638:	d010      	beq.n	800065c <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8000644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	4313      	orrs	r3, r2
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000654:	4619      	mov	r1, r3
 8000656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000658:	f004 ff1a 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 8000660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	429a      	cmp	r2, r3
 8000666:	d1be      	bne.n	80005e6 <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	43db      	mvns	r3, r3
 8000670:	401a      	ands	r2, r3
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8000676:	f003 fc19 	bl	8003eac <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	681b      	ldr	r3, [r3, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <xEventGroupSetBitsFromISR+0x26>)
 800069a:	f005 ff5f 	bl	800655c <xTimerPendFunctionCallFromISR>
 800069e:	6178      	str	r0, [r7, #20]

        return xReturn;
 80006a0:	697b      	ldr	r3, [r7, #20]
    }
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	080008db 	.word	0x080008db

080006b0 <xEventGroupSync>:
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xTimeoutOccurred = pdFALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <xEventGroupSync+0x36>
    __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	61bb      	str	r3, [r7, #24]
}
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <xEventGroupSync+0x34>
    configASSERT( uxBitsToWaitFor != 0 );
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <xEventGroupSync+0x52>
    __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	617b      	str	r3, [r7, #20]
}
 80006fe:	bf00      	nop
 8000700:	e7fe      	b.n	8000700 <xEventGroupSync+0x50>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000702:	f005 f85b 	bl	80057bc <xTaskGetSchedulerState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <xEventGroupSync+0x62>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <xEventGroupSync+0x66>
 8000712:	2301      	movs	r3, #1
 8000714:	e000      	b.n	8000718 <xEventGroupSync+0x68>
 8000716:	2300      	movs	r3, #0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <xEventGroupSync+0x82>
    __asm volatile
 800071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000720:	f383 8811 	msr	BASEPRI, r3
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	613b      	str	r3, [r7, #16]
}
 800072e:	bf00      	nop
 8000730:	e7fe      	b.n	8000730 <xEventGroupSync+0x80>
    vTaskSuspendAll();
 8000732:	f003 fbad 	bl	8003e90 <vTaskSuspendAll>
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	623b      	str	r3, [r7, #32]
        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff16 	bl	8000570 <xEventGroupSetBits>
        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000744:	6a3a      	ldr	r2, [r7, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4013      	ands	r3, r2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d10d      	bne.n	8000770 <xEventGroupSync+0xc0>
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000754:	6a3a      	ldr	r2, [r7, #32]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	601a      	str	r2, [r3, #0]
            xTicksToWait = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	e013      	b.n	8000798 <xEventGroupSync+0xe8>
            if( xTicksToWait != ( TickType_t ) 0 )
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00b      	beq.n	800078e <xEventGroupSync+0xde>
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000778:	1d18      	adds	r0, r3, #4
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	f004 fcee 	bl	8005164 <vTaskPlaceOnUnorderedEventList>
                uxReturn = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078c:	e004      	b.n	8000798 <xEventGroupSync+0xe8>
                uxReturn = pxEventBits->uxEventBits;
 800078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
                xTimeoutOccurred = pdTRUE;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    xAlreadyYielded = xTaskResumeAll();
 8000798:	f003 fb88 	bl	8003eac <xTaskResumeAll>
 800079c:	61f8      	str	r0, [r7, #28]
    if( xTicksToWait != ( TickType_t ) 0 )
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d02c      	beq.n	80007fe <xEventGroupSync+0x14e>
        if( xAlreadyYielded == pdFALSE )
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d107      	bne.n	80007ba <xEventGroupSync+0x10a>
            portYIELD_WITHIN_API();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <xEventGroupSync+0x158>)
 80007ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	f3bf 8f6f 	isb	sy
        uxReturn = uxTaskResetEventItemValue();
 80007ba:	f004 ffc7 	bl	800574c <uxTaskResetEventItemValue>
 80007be:	62f8      	str	r0, [r7, #44]	; 0x2c
        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d115      	bne.n	80007f6 <xEventGroupSync+0x146>
            taskENTER_CRITICAL();
 80007ca:	f009 fa7f 	bl	8009ccc <vPortEnterCritical>
                uxReturn = pxEventBits->uxEventBits;
 80007ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80007d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d106      	bne.n	80007ee <xEventGroupSync+0x13e>
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	401a      	ands	r2, r3
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	601a      	str	r2, [r3, #0]
            taskEXIT_CRITICAL();
 80007ee:	f009 fa8b 	bl	8009d08 <vPortExitCritical>
            xTimeoutOccurred = pdTRUE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return uxReturn;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000800:	4618      	mov	r0, r3
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	e000ed04 	.word	0xe000ed04

0800080c <xEventGroupGetBitsFromISR>:
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    EventGroup_t const * const pxEventBits = xEventGroup;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000818:	f3ef 8211 	mrs	r2, BASEPRI
 800081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000820:	f383 8811 	msr	BASEPRI, r3
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	60fa      	str	r2, [r7, #12]
 800082e:	60bb      	str	r3, [r7, #8]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000830:	68fb      	ldr	r3, [r7, #12]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000832:	61bb      	str	r3, [r7, #24]
        uxReturn = pxEventBits->uxEventBits;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	f383 8811 	msr	BASEPRI, r3
    (
        "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000844:	bf00      	nop
    return uxReturn;
 8000846:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8000848:	4618      	mov	r0, r3
 800084a:	3724      	adds	r7, #36	; 0x24
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <vEventGroupDelete>:
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	617b      	str	r3, [r7, #20]
    configASSERT( pxEventBits );
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10a      	bne.n	800087c <vEventGroupDelete+0x28>
    __asm volatile
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	60fb      	str	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	e7fe      	b.n	800087a <vEventGroupDelete+0x26>
    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3304      	adds	r3, #4
 8000880:	613b      	str	r3, [r7, #16]
    vTaskSuspendAll();
 8000882:	f003 fb05 	bl	8003e90 <vTaskSuspendAll>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000886:	e017      	b.n	80008b8 <vEventGroupDelete+0x64>
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3308      	adds	r3, #8
 8000890:	429a      	cmp	r2, r3
 8000892:	d10a      	bne.n	80008aa <vEventGroupDelete+0x56>
    __asm volatile
 8000894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vEventGroupDelete+0x54>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fdec 	bl	8005490 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e3      	bne.n	8000888 <vEventGroupDelete+0x34>
                if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	7f1b      	ldrb	r3, [r3, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <vEventGroupDelete+0x7a>
                    vPortFree( pxEventBits );
 80008c8:	6978      	ldr	r0, [r7, #20]
 80008ca:	f006 fedb 	bl	8007684 <vPortFree>
    ( void ) xTaskResumeAll();
 80008ce:	f003 faed 	bl	8003eac <xTaskResumeAll>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <vEventGroupSetBitsCallback>:
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe42 	bl	8000570 <xEventGroupSetBits>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <vEventGroupClearBitsCallback>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fde9 	bl	80004d8 <xEventGroupClearBits>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60bb      	str	r3, [r7, #8]

        if( xEventGroup == NULL )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <uxEventGroupGetNumber+0x18>
        {
            xReturn = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e002      	b.n	800092c <uxEventGroupGetNumber+0x1e>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800092c:	68fb      	ldr	r3, [r7, #12]
    }
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	619a      	str	r2, [r3, #24]
    }
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <prvTestWaitCondition>:
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
    if( xWaitForAllBits == pdFALSE )
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <prvTestWaitCondition+0x26>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4013      	ands	r3, r2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e007      	b.n	800098c <prvTestWaitCondition+0x36>
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4013      	ands	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	429a      	cmp	r2, r3
 8000986:	d101      	bne.n	800098c <prvTestWaitCondition+0x36>
            xWaitConditionMet = pdTRUE;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
    return xWaitConditionMet;
 800098c:	697b      	ldr	r3, [r7, #20]
}
 800098e:	4618      	mov	r0, r3
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f103 0208 	add.w	r2, r3, #8
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f103 0208 	add.w	r2, r3, #8
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0208 	add.w	r2, r3, #8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a0c:	d103      	bne.n	8000a16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00c      	b.n	8000a30 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e002      	b.n	8000a24 <vListInsert+0x2e>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d2f6      	bcs.n	8000a1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <vListInsertEnd>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d103      	bne.n	8000ae4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <xQueueGenericSend+0x32>
    __asm volatile
 8000b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b24:	f383 8811 	msr	BASEPRI, r3
 8000b28:	f3bf 8f6f 	isb	sy
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b32:	bf00      	nop
 8000b34:	e7fe      	b.n	8000b34 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <xQueueGenericSend+0x40>
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <xQueueGenericSend+0x44>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <xQueueGenericSend+0x46>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10a      	bne.n	8000b64 <xQueueGenericSend+0x60>
    __asm volatile
 8000b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b52:	f383 8811 	msr	BASEPRI, r3
 8000b56:	f3bf 8f6f 	isb	sy
 8000b5a:	f3bf 8f4f 	dsb	sy
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b60:	bf00      	nop
 8000b62:	e7fe      	b.n	8000b62 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d103      	bne.n	8000b72 <xQueueGenericSend+0x6e>
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <xQueueGenericSend+0x72>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <xQueueGenericSend+0x74>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10a      	bne.n	8000b92 <xQueueGenericSend+0x8e>
    __asm volatile
 8000b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b80:	f383 8811 	msr	BASEPRI, r3
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	f3bf 8f4f 	dsb	sy
 8000b8c:	623b      	str	r3, [r7, #32]
}
 8000b8e:	bf00      	nop
 8000b90:	e7fe      	b.n	8000b90 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b92:	f004 fe13 	bl	80057bc <xTaskGetSchedulerState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <xQueueGenericSend+0x9e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <xQueueGenericSend+0xa2>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <xQueueGenericSend+0xa4>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10a      	bne.n	8000bc2 <xQueueGenericSend+0xbe>
    __asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	61fb      	str	r3, [r7, #28]
}
 8000bbe:	bf00      	nop
 8000bc0:	e7fe      	b.n	8000bc0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bc2:	f009 f883 	bl	8009ccc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <xQueueGenericSend+0xd4>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d129      	bne.n	8000c2c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f001 fa82 	bl	80020e6 <prvCopyDataToQueue>
 8000be2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d010      	beq.n	8000c0e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	3324      	adds	r3, #36	; 0x24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fb59 	bl	80052a8 <xTaskRemoveFromEventList>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d013      	beq.n	8000c24 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	e00a      	b.n	8000c24 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000c24:	f009 f870 	bl	8009d08 <vPortExitCritical>
                return pdPASS;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e063      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c32:	f009 f869 	bl	8009d08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e05c      	b.n	8000cf4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 f829 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c4e:	f009 f85b 	bl	8009d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c52:	f003 f91d 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c56:	f009 f839 	bl	8009ccc <vPortEnterCritical>
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d103      	bne.n	8000c70 <xQueueGenericSend+0x16c>
 8000c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c7c:	d103      	bne.n	8000c86 <xQueueGenericSend+0x182>
 8000c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c86:	f009 f83f 	bl	8009d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c8a:	1d3a      	adds	r2, r7, #4
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f880 	bl	8004d98 <xTaskCheckForTimeOut>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d124      	bne.n	8000ce8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ca0:	f001 fa09 	bl	80020b6 <prvIsQueueFull>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d018      	beq.n	8000cdc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cac:	3310      	adds	r3, #16
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fa32 	bl	800511c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cba:	f001 f994 	bl	8001fe6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000cbe:	f003 f8f5 	bl	8003eac <xTaskResumeAll>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f af7c 	bne.w	8000bc2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <xQueueGenericSend+0x1f8>)
 8000ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	f3bf 8f6f 	isb	sy
 8000cda:	e772      	b.n	8000bc2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cde:	f001 f982 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ce2:	f003 f8e3 	bl	8003eac <xTaskResumeAll>
 8000ce6:	e76c      	b.n	8000bc2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cea:	f001 f97c 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cee:	f003 f8dd 	bl	8003eac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000cf2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed04 	.word	0xe000ed04

08000d00 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <xQueuePeek+0x30>
    __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <xQueuePeek+0x3e>
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <xQueuePeek+0x42>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <xQueuePeek+0x44>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <xQueuePeek+0x5e>
    __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	623b      	str	r3, [r7, #32]
}
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d5e:	f004 fd2d 	bl	80057bc <xTaskGetSchedulerState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <xQueuePeek+0x6e>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <xQueuePeek+0x72>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <xQueuePeek+0x74>
 8000d72:	2300      	movs	r3, #0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10a      	bne.n	8000d8e <xQueuePeek+0x8e>
    __asm volatile
 8000d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	61fb      	str	r3, [r7, #28]
}
 8000d8a:	bf00      	nop
 8000d8c:	e7fe      	b.n	8000d8c <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d8e:	f008 ff9d 	bl	8009ccc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d021      	beq.n	8000de2 <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000da8:	f001 fa07 	bl	80021ba <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db0:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbc:	3324      	adds	r3, #36	; 0x24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fa72 	bl	80052a8 <xTaskRemoveFromEventList>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000dca:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000dda:	f008 ff95 	bl	8009d08 <vPortExitCritical>
                return pdPASS;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e069      	b.n	8000eb6 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000de8:	f008 ff8e 	bl	8009d08 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e062      	b.n	8000eb6 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d106      	bne.n	8000e04 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 ff4e 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e04:	f008 ff80 	bl	8009d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8000e08:	f003 f842 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e0c:	f008 ff5e 	bl	8009ccc <vPortEnterCritical>
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1c:	d103      	bne.n	8000e26 <xQueuePeek+0x126>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e32:	d103      	bne.n	8000e3c <xQueuePeek+0x13c>
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3c:	f008 ff64 	bl	8009d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e40:	1d3a      	adds	r2, r7, #4
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ffa5 	bl	8004d98 <xTaskCheckForTimeOut>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d123      	bne.n	8000e9c <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e56:	f001 f918 	bl	800208a <prvIsQueueEmpty>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d017      	beq.n	8000e90 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e62:	3324      	adds	r3, #36	; 0x24
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 f957 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e70:	f001 f8b9 	bl	8001fe6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e74:	f003 f81a 	bl	8003eac <xTaskResumeAll>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d187      	bne.n	8000d8e <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <xQueuePeek+0x1c0>)
 8000e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	e77e      	b.n	8000d8e <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8000e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e92:	f001 f8a8 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e96:	f003 f809 	bl	8003eac <xTaskResumeAll>
 8000e9a:	e778      	b.n	8000d8e <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8000e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e9e:	f001 f8a2 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ea2:	f003 f803 	bl	8003eac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ea8:	f001 f8ef 	bl	800208a <prvIsQueueEmpty>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f43f af6d 	beq.w	8000d8e <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000eb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000ed04 	.word	0xe000ed04

08000ec4 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <xQueuePeekFromISR+0x2a>
    __asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	61fb      	str	r3, [r7, #28]
}
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <xQueuePeekFromISR+0x38>
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <xQueuePeekFromISR+0x3c>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <xQueuePeekFromISR+0x3e>
 8000f00:	2300      	movs	r3, #0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <xQueuePeekFromISR+0x58>
    __asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	61bb      	str	r3, [r7, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	e7fe      	b.n	8000f1a <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10a      	bne.n	8000f3a <xQueuePeekFromISR+0x76>
    __asm volatile
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	617b      	str	r3, [r7, #20]
}
 8000f36:	bf00      	nop
 8000f38:	e7fe      	b.n	8000f38 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f3a:	f008 ff5b 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 8000f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8000f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f46:	f383 8811 	msr	BASEPRI, r3
 8000f4a:	f3bf 8f6f 	isb	sy
 8000f4e:	f3bf 8f4f 	dsb	sy
 8000f52:	613a      	str	r2, [r7, #16]
 8000f54:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8000f56:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f6c:	f001 f925 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	6a3a      	ldr	r2, [r7, #32]
 8000f74:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7a:	e001      	b.n	8000f80 <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	f383 8811 	msr	BASEPRI, r3
}
 8000f8a:	bf00      	nop
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <xQueueReceive>:
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b08c      	sub	sp, #48	; 0x30
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Queue_t * const pxQueue = xQueue;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    configASSERT( ( pxQueue ) );
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <xQueueReceive+0x30>
    __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	623b      	str	r3, [r7, #32]
}
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xQueueReceive+0x2e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <xQueueReceive+0x3e>
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <xQueueReceive+0x42>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <xQueueReceive+0x44>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10a      	bne.n	8000ff4 <xQueueReceive+0x5e>
    __asm volatile
 8000fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	61fb      	str	r3, [r7, #28]
}
 8000ff0:	bf00      	nop
 8000ff2:	e7fe      	b.n	8000ff2 <xQueueReceive+0x5c>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ff4:	f004 fbe2 	bl	80057bc <xTaskGetSchedulerState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <xQueueReceive+0x6e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <xQueueReceive+0x72>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <xQueueReceive+0x74>
 8001008:	2300      	movs	r3, #0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <xQueueReceive+0x8e>
    __asm volatile
 800100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001012:	f383 8811 	msr	BASEPRI, r3
 8001016:	f3bf 8f6f 	isb	sy
 800101a:	f3bf 8f4f 	dsb	sy
 800101e:	61bb      	str	r3, [r7, #24]
}
 8001020:	bf00      	nop
 8001022:	e7fe      	b.n	8001022 <xQueueReceive+0x8c>
        taskENTER_CRITICAL();
 8001024:	f008 fe52 	bl	8009ccc <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01f      	beq.n	8001074 <xQueueReceive+0xde>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001038:	f001 f8bf 	bl	80021ba <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <xQueueReceive+0xd6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	3310      	adds	r3, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f929 	bl	80052a8 <xTaskRemoveFromEventList>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <xQueueReceive+0x1ba>)
 800105e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800106c:	f008 fe4c 	bl	8009d08 <vPortExitCritical>
                return pdPASS;
 8001070:	2301      	movs	r3, #1
 8001072:	e069      	b.n	8001148 <xQueueReceive+0x1b2>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <xQueueReceive+0xec>
                    taskEXIT_CRITICAL();
 800107a:	f008 fe45 	bl	8009d08 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800107e:	2300      	movs	r3, #0
 8001080:	e062      	b.n	8001148 <xQueueReceive+0x1b2>
                else if( xEntryTimeSet == pdFALSE )
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <xQueueReceive+0x100>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fe05 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001092:	2301      	movs	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
        taskEXIT_CRITICAL();
 8001096:	f008 fe37 	bl	8009d08 <vPortExitCritical>
        vTaskSuspendAll();
 800109a:	f002 fef9 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800109e:	f008 fe15 	bl	8009ccc <vPortEnterCritical>
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ae:	d103      	bne.n	80010b8 <xQueueReceive+0x122>
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c4:	d103      	bne.n	80010ce <xQueueReceive+0x138>
 80010c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010ce:	f008 fe1b 	bl	8009d08 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fe5c 	bl	8004d98 <xTaskCheckForTimeOut>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d123      	bne.n	800112e <xQueueReceive+0x198>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e8:	f000 ffcf 	bl	800208a <prvIsQueueEmpty>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d017      	beq.n	8001122 <xQueueReceive+0x18c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f80e 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001102:	f000 ff70 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001106:	f002 fed1 	bl	8003eac <xTaskResumeAll>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d189      	bne.n	8001024 <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <xQueueReceive+0x1ba>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	e780      	b.n	8001024 <xQueueReceive+0x8e>
                prvUnlockQueue( pxQueue );
 8001122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001124:	f000 ff5f 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001128:	f002 fec0 	bl	8003eac <xTaskResumeAll>
 800112c:	e77a      	b.n	8001024 <xQueueReceive+0x8e>
            prvUnlockQueue( pxQueue );
 800112e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001130:	f000 ff59 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001134:	f002 feba 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800113a:	f000 ffa6 	bl	800208a <prvIsQueueEmpty>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f43f af6f 	beq.w	8001024 <xQueueReceive+0x8e>
                return errQUEUE_EMPTY;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	e000ed04 	.word	0xe000ed04

08001154 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <uxQueueMessagesWaiting+0x24>
    __asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	60bb      	str	r3, [r7, #8]
}
 8001174:	bf00      	nop
 8001176:	e7fe      	b.n	8001176 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8001178:	f008 fda8 	bl	8009ccc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001182:	f008 fdc1 	bl	8009d08 <vPortExitCritical>

    return uxReturn;
 8001186:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <uxQueueSpacesAvailable+0x28>
    __asm volatile
 80011a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	60fb      	str	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	e7fe      	b.n	80011b6 <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 80011b8:	f008 fd88 	bl	8009ccc <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 80011c8:	f008 fd9e 	bl	8009d08 <vPortExitCritical>

    return uxReturn;
 80011cc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <vQueueDelete+0x28>
    __asm volatile
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	60bb      	str	r3, [r7, #8]
}
 80011fa:	bf00      	nop
 80011fc:	e7fe      	b.n	80011fc <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fcea 	bl	8001bd8 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <vQueueDelete+0x3e>
            {
                vPortFree( pxQueue );
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f006 fa38 	bl	8007684 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <xQueueGenericSendFromISR>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <xQueueGenericSendFromISR+0x2e>
    __asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001246:	bf00      	nop
 8001248:	e7fe      	b.n	8001248 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <xQueueGenericSendFromISR+0x3c>
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <xQueueGenericSendFromISR+0x40>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <xQueueGenericSendFromISR+0x42>
 800125c:	2300      	movs	r3, #0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <xQueueGenericSendFromISR+0x5c>
    __asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001274:	bf00      	nop
 8001276:	e7fe      	b.n	8001276 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d103      	bne.n	8001286 <xQueueGenericSendFromISR+0x6a>
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <xQueueGenericSendFromISR+0x6e>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <xQueueGenericSendFromISR+0x70>
 800128a:	2300      	movs	r3, #0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <xQueueGenericSendFromISR+0x8a>
    __asm volatile
 8001290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001294:	f383 8811 	msr	BASEPRI, r3
 8001298:	f3bf 8f6f 	isb	sy
 800129c:	f3bf 8f4f 	dsb	sy
 80012a0:	623b      	str	r3, [r7, #32]
}
 80012a2:	bf00      	nop
 80012a4:	e7fe      	b.n	80012a4 <xQueueGenericSendFromISR+0x88>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012a6:	f008 fda5 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 80012aa:	f3ef 8211 	mrs	r2, BASEPRI
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	61fa      	str	r2, [r7, #28]
 80012c0:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80012c2:	69fb      	ldr	r3, [r7, #28]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <xQueueGenericSendFromISR+0xbc>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d13e      	bne.n	8001356 <xQueueGenericSendFromISR+0x13a>
            const int8_t cTxLock = pxQueue->cTxLock;
 80012d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012ee:	f000 fefa 	bl	80020e6 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80012f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fa:	d112      	bne.n	8001322 <xQueueGenericSendFromISR+0x106>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	2b00      	cmp	r3, #0
 8001302:	d025      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001306:	3324      	adds	r3, #36	; 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f003 ffcd 	bl	80052a8 <xTaskRemoveFromEventList>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01d      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <xQueueGenericSendFromISR+0x134>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e016      	b.n	8001350 <xQueueGenericSendFromISR+0x134>
                configASSERT( cTxLock != queueINT8_MAX );
 8001322:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001326:	2b7f      	cmp	r3, #127	; 0x7f
 8001328:	d10a      	bne.n	8001340 <xQueueGenericSendFromISR+0x124>
    __asm volatile
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	617b      	str	r3, [r7, #20]
}
 800133c:	bf00      	nop
 800133e:	e7fe      	b.n	800133e <xQueueGenericSendFromISR+0x122>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001344:	3301      	adds	r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	b25a      	sxtb	r2, r3
 800134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001350:	2301      	movs	r3, #1
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001354:	e001      	b.n	800135a <xQueueGenericSendFromISR+0x13e>
            xReturn = errQUEUE_FULL;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	f383 8811 	msr	BASEPRI, r3
}
 8001364:	bf00      	nop
    return xReturn;
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001368:	4618      	mov	r0, r3
 800136a:	3740      	adds	r7, #64	; 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <xQueueGiveFromISR>:
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( pxQueue );
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <xQueueGiveFromISR+0x2a>
    __asm volatile
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	623b      	str	r3, [r7, #32]
}
 8001396:	bf00      	nop
 8001398:	e7fe      	b.n	8001398 <xQueueGiveFromISR+0x28>
    configASSERT( pxQueue->uxItemSize == 0 );
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <xQueueGiveFromISR+0x48>
    __asm volatile
 80013a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a6:	f383 8811 	msr	BASEPRI, r3
 80013aa:	f3bf 8f6f 	isb	sy
 80013ae:	f3bf 8f4f 	dsb	sy
 80013b2:	61fb      	str	r3, [r7, #28]
}
 80013b4:	bf00      	nop
 80013b6:	e7fe      	b.n	80013b6 <xQueueGiveFromISR+0x46>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <xQueueGiveFromISR+0x58>
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <xQueueGiveFromISR+0x5c>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <xQueueGiveFromISR+0x5e>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <xQueueGiveFromISR+0x78>
    __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	61bb      	str	r3, [r7, #24]
}
 80013e4:	bf00      	nop
 80013e6:	e7fe      	b.n	80013e6 <xQueueGiveFromISR+0x76>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013e8:	f008 fd04 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 80013ec:	f3ef 8211 	mrs	r2, BASEPRI
 80013f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	f3bf 8f6f 	isb	sy
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	617a      	str	r2, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8001404:	697b      	ldr	r3, [r7, #20]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
        if( uxMessagesWaiting < pxQueue->uxLength )
 800140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	429a      	cmp	r2, r3
 8001416:	d23a      	bcs.n	800148e <xQueueGiveFromISR+0x11e>
            const int8_t cTxLock = pxQueue->cTxLock;
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 800142a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800142e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001432:	d112      	bne.n	800145a <xQueueGiveFromISR+0xea>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	d025      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	3324      	adds	r3, #36	; 0x24
 8001440:	4618      	mov	r0, r3
 8001442:	f003 ff31 	bl	80052a8 <xTaskRemoveFromEventList>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01d      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                if( pxHigherPriorityTaskWoken != NULL )
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <xQueueGiveFromISR+0x118>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e016      	b.n	8001488 <xQueueGiveFromISR+0x118>
                configASSERT( cTxLock != queueINT8_MAX );
 800145a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800145e:	2b7f      	cmp	r3, #127	; 0x7f
 8001460:	d10a      	bne.n	8001478 <xQueueGiveFromISR+0x108>
    __asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	60fb      	str	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	e7fe      	b.n	8001476 <xQueueGiveFromISR+0x106>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8001488:	2301      	movs	r3, #1
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
 800148c:	e001      	b.n	8001492 <xQueueGiveFromISR+0x122>
            xReturn = errQUEUE_FULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f383 8811 	msr	BASEPRI, r3
}
 800149c:	bf00      	nop
    return xReturn;
 800149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <xQueueReceiveFromISR>:
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
    configASSERT( pxQueue );
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <xQueueReceiveFromISR+0x2c>
    __asm volatile
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80014d0:	bf00      	nop
 80014d2:	e7fe      	b.n	80014d2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <xQueueReceiveFromISR+0x3a>
 80014da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <xQueueReceiveFromISR+0x3e>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <xQueueReceiveFromISR+0x40>
 80014e6:	2300      	movs	r3, #0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10a      	bne.n	8001502 <xQueueReceiveFromISR+0x5a>
    __asm volatile
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80014fe:	bf00      	nop
 8001500:	e7fe      	b.n	8001500 <xQueueReceiveFromISR+0x58>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001502:	f008 fc77 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 8001506:	f3ef 8211 	mrs	r2, BASEPRI
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	623a      	str	r2, [r7, #32]
 800151c:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 800151e:	6a3b      	ldr	r3, [r7, #32]
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <xQueueReceiveFromISR+0x104>
            const int8_t cRxLock = pxQueue->cRxLock;
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800153c:	f000 fe3d 	bl	80021ba <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 8001548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001550:	d112      	bne.n	8001578 <xQueueReceiveFromISR+0xd0>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	3310      	adds	r3, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fea2 	bl	80052a8 <xTaskRemoveFromEventList>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01d      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                        if( pxHigherPriorityTaskWoken != NULL )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01a      	beq.n	80015a6 <xQueueReceiveFromISR+0xfe>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e016      	b.n	80015a6 <xQueueReceiveFromISR+0xfe>
                configASSERT( cRxLock != queueINT8_MAX );
 8001578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800157c:	2b7f      	cmp	r3, #127	; 0x7f
 800157e:	d10a      	bne.n	8001596 <xQueueReceiveFromISR+0xee>
    __asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61bb      	str	r3, [r7, #24]
}
 8001592:	bf00      	nop
 8001594:	e7fe      	b.n	8001594 <xQueueReceiveFromISR+0xec>
                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800159a:	3301      	adds	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015aa:	e001      	b.n	80015b0 <xQueueReceiveFromISR+0x108>
            xReturn = pdFAIL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	617b      	str	r3, [r7, #20]
    __asm volatile
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f383 8811 	msr	BASEPRI, r3
}
 80015ba:	bf00      	nop
    return xReturn;
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	; 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <xQueueIsQueueEmptyFromISR+0x28>
    __asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	60fb      	str	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e001      	b.n	8001600 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001600:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <xQueueIsQueueFullFromISR+0x28>
    __asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	60fb      	str	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	e7fe      	b.n	8001634 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	429a      	cmp	r2, r3
 8001640:	d102      	bne.n	8001648 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e001      	b.n	800164c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800164c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <uxQueueMessagesWaitingFromISR>:
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	617b      	str	r3, [r7, #20]
    configASSERT( pxQueue );
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <uxQueueMessagesWaitingFromISR+0x28>
    __asm volatile
 800166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	60fb      	str	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	e7fe      	b.n	8001680 <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	613b      	str	r3, [r7, #16]
    return uxReturn;
 8001688:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <xQueueCreateMutex>:
    {
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	461a      	mov	r2, r3
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f000 fafe 	bl	8001cb0 <xQueueGenericCreate>
 80016b4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fdc8 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016bc:	68fb      	ldr	r3, [r7, #12]
    }
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <xQueueCreateMutexStatic>:
    {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	4603      	mov	r3, r0
 80016ce:	6039      	str	r1, [r7, #0]
 80016d0:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f000 fb35 	bl	8001d54 <xQueueGenericCreateStatic>
 80016ea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fdad 	bl	800224c <prvInitialiseMutex>
        return xNewQueue;
 80016f2:	68fb      	ldr	r3, [r7, #12]
    }
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <xQueueCreateCountingSemaphore>:
    {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
        if( ( uxMaxCount != 0 ) &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d010      	beq.n	8001732 <xQueueCreateCountingSemaphore+0x36>
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	d80c      	bhi.n	8001732 <xQueueCreateCountingSemaphore+0x36>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001718:	2202      	movs	r2, #2
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fac7 	bl	8001cb0 <xQueueGenericCreate>
 8001722:	60f8      	str	r0, [r7, #12]
            if( xHandle != NULL )
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d011      	beq.n	800174e <xQueueCreateCountingSemaphore+0x52>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001730:	e00d      	b.n	800174e <xQueueCreateCountingSemaphore+0x52>
            configASSERT( xHandle );
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <xQueueCreateCountingSemaphore+0x52>
    __asm volatile
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	60bb      	str	r3, [r7, #8]
}
 800174a:	bf00      	nop
 800174c:	e7fe      	b.n	800174c <xQueueCreateCountingSemaphore+0x50>
        return xHandle;
 800174e:	68fb      	ldr	r3, [r7, #12]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <xQueueCreateCountingSemaphoreStatic>:
    {
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
        if( ( uxMaxCount != 0 ) &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d013      	beq.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d80f      	bhi.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x3e>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001776:	2302      	movs	r3, #2
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fae7 	bl	8001d54 <xQueueGenericCreateStatic>
 8001786:	6178      	str	r0, [r7, #20]
            if( xHandle != NULL )
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d011      	beq.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8001794:	e00d      	b.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
            configASSERT( xHandle );
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <xQueueCreateCountingSemaphoreStatic+0x5a>
    __asm volatile
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	f383 8811 	msr	BASEPRI, r3
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	613b      	str	r3, [r7, #16]
}
 80017ae:	bf00      	nop
 80017b0:	e7fe      	b.n	80017b0 <xQueueCreateCountingSemaphoreStatic+0x58>
        return xHandle;
 80017b2:	697b      	ldr	r3, [r7, #20]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <xQueueSemaphoreTake>:
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    Queue_t * const pxQueue = xQueue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    configASSERT( ( pxQueue ) );
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10a      	bne.n	80017ee <xQueueSemaphoreTake+0x32>
    __asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	623b      	str	r3, [r7, #32]
}
 80017ea:	bf00      	nop
 80017ec:	e7fe      	b.n	80017ec <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <xQueueSemaphoreTake+0x50>
    __asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	61fb      	str	r3, [r7, #28]
}
 8001808:	bf00      	nop
 800180a:	e7fe      	b.n	800180a <xQueueSemaphoreTake+0x4e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800180c:	f003 ffd6 	bl	80057bc <xTaskGetSchedulerState>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <xQueueSemaphoreTake+0x60>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <xQueueSemaphoreTake+0x64>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <xQueueSemaphoreTake+0x66>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <xQueueSemaphoreTake+0x80>
    __asm volatile
 8001826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	61bb      	str	r3, [r7, #24]
}
 8001838:	bf00      	nop
 800183a:	e7fe      	b.n	800183a <xQueueSemaphoreTake+0x7e>
        taskENTER_CRITICAL();
 800183c:	f008 fa46 	bl	8009ccc <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d024      	beq.n	8001896 <xQueueSemaphoreTake+0xda>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <xQueueSemaphoreTake+0xaa>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800185c:	f004 fa07 	bl	8005c6e <pvTaskIncrementMutexHeldCount>
 8001860:	4602      	mov	r2, r0
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3310      	adds	r3, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fd18 	bl	80052a8 <xTaskRemoveFromEventList>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <xQueueSemaphoreTake+0xd2>
                        queueYIELD_IF_USING_PREEMPTION();
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 8001880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800188e:	f008 fa3b 	bl	8009d08 <vPortExitCritical>
                return pdPASS;
 8001892:	2301      	movs	r3, #1
 8001894:	e097      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <xQueueSemaphoreTake+0x104>
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <xQueueSemaphoreTake+0xfc>
    __asm volatile
 80018a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	617b      	str	r3, [r7, #20]
}
 80018b4:	bf00      	nop
 80018b6:	e7fe      	b.n	80018b6 <xQueueSemaphoreTake+0xfa>
                    taskEXIT_CRITICAL();
 80018b8:	f008 fa26 	bl	8009d08 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80018bc:	2300      	movs	r3, #0
 80018be:	e082      	b.n	80019c6 <xQueueSemaphoreTake+0x20a>
                else if( xEntryTimeSet == pdFALSE )
 80018c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <xQueueSemaphoreTake+0x118>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 f9e6 	bl	8005c9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
        taskEXIT_CRITICAL();
 80018d4:	f008 fa18 	bl	8009d08 <vPortExitCritical>
        vTaskSuspendAll();
 80018d8:	f002 fada 	bl	8003e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018dc:	f008 f9f6 	bl	8009ccc <vPortEnterCritical>
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d103      	bne.n	80018f6 <xQueueSemaphoreTake+0x13a>
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001902:	d103      	bne.n	800190c <xQueueSemaphoreTake+0x150>
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800190c:	f008 f9fc 	bl	8009d08 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001910:	463a      	mov	r2, r7
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fa3d 	bl	8004d98 <xTaskCheckForTimeOut>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d132      	bne.n	800198a <xQueueSemaphoreTake+0x1ce>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	f000 fbb0 	bl	800208a <prvIsQueueEmpty>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d026      	beq.n	800197e <xQueueSemaphoreTake+0x1c2>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <xQueueSemaphoreTake+0x190>
                            taskENTER_CRITICAL();
 8001938:	f008 f9c8 	bl	8009ccc <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 ff59 	bl	80057f8 <xTaskPriorityInherit>
 8001946:	6338      	str	r0, [r7, #48]	; 0x30
                            taskEXIT_CRITICAL();
 8001948:	f008 f9de 	bl	8009d08 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	3324      	adds	r3, #36	; 0x24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fbe1 	bl	800511c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800195a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800195c:	f000 fb43 	bl	8001fe6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001960:	f002 faa4 	bl	8003eac <xTaskResumeAll>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f af68 	bne.w	800183c <xQueueSemaphoreTake+0x80>
                    portYIELD_WITHIN_API();
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <xQueueSemaphoreTake+0x214>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	e75e      	b.n	800183c <xQueueSemaphoreTake+0x80>
                prvUnlockQueue( pxQueue );
 800197e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001980:	f000 fb31 	bl	8001fe6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001984:	f002 fa92 	bl	8003eac <xTaskResumeAll>
 8001988:	e758      	b.n	800183c <xQueueSemaphoreTake+0x80>
            prvUnlockQueue( pxQueue );
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f000 fb2b 	bl	8001fe6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001990:	f002 fa8c 	bl	8003eac <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001996:	f000 fb78 	bl	800208a <prvIsQueueEmpty>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f43f af4d 	beq.w	800183c <xQueueSemaphoreTake+0x80>
                        if( xInheritanceOccurred != pdFALSE )
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <xQueueSemaphoreTake+0x208>
                            taskENTER_CRITICAL();
 80019a8:	f008 f990 	bl	8009ccc <vPortEnterCritical>
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ae:	f000 fc67 	bl	8002280 <prvGetDisinheritPriorityAfterTimeout>
 80019b2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f86e 	bl	8005a9c <vTaskPriorityDisinheritAfterTimeout>
                            taskEXIT_CRITICAL();
 80019c0:	f008 f9a2 	bl	8009d08 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xQueueGetMutexHolder>:
    {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	613b      	str	r3, [r7, #16]
        configASSERT( xSemaphore );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <xQueueGetMutexHolder+0x28>
    __asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	60fb      	str	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <xQueueGetMutexHolder+0x26>
        taskENTER_CRITICAL();
 80019fc:	f008 f966 	bl	8009ccc <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <xQueueGetMutexHolder+0x3c>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e001      	b.n	8001a14 <xQueueGetMutexHolder+0x40>
                pxReturn = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8001a14:	f008 f978 	bl	8009d08 <vPortExitCritical>
        return pxReturn;
 8001a18:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <xQueueGetMutexHolderFromISR>:
    {
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <xQueueGetMutexHolderFromISR+0x24>
    __asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	60bb      	str	r3, [r7, #8]
}
 8001a42:	bf00      	nop
 8001a44:	e7fe      	b.n	8001a44 <xQueueGetMutexHolderFromISR+0x22>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <xQueueGetMutexHolderFromISR+0x34>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e001      	b.n	8001a5a <xQueueGetMutexHolderFromISR+0x38>
            pxReturn = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <xQueueTakeMutexRecursive>:
    {
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <xQueueTakeMutexRecursive+0x2a>
    __asm volatile
 8001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	60fb      	str	r3, [r7, #12]
}
 8001a8e:	bf00      	nop
 8001a90:	e7fe      	b.n	8001a90 <xQueueTakeMutexRecursive+0x28>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	689c      	ldr	r4, [r3, #8]
 8001a96:	f003 fe75 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	429c      	cmp	r4, r3
 8001a9e:	d107      	bne.n	8001ab0 <xQueueTakeMutexRecursive+0x48>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e00c      	b.n	8001aca <xQueueTakeMutexRecursive+0x62>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f7ff fe82 	bl	80017bc <xQueueSemaphoreTake>
 8001ab8:	6178      	str	r0, [r7, #20]
            if( xReturn != pdFAIL )
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <xQueueTakeMutexRecursive+0x62>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]
        return xReturn;
 8001aca:	697b      	ldr	r3, [r7, #20]
    }
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <xQueueGiveMutexRecursive>:
    {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	613b      	str	r3, [r7, #16]
        configASSERT( pxMutex );
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <xQueueGiveMutexRecursive+0x28>
    __asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	60fb      	str	r3, [r7, #12]
}
 8001af8:	bf00      	nop
 8001afa:	e7fe      	b.n	8001afa <xQueueGiveMutexRecursive+0x26>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	689c      	ldr	r4, [r3, #8]
 8001b00:	f003 fe40 	bl	8005784 <xTaskGetCurrentTaskHandle>
 8001b04:	4603      	mov	r3, r0
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d111      	bne.n	8001b2e <xQueueGiveMutexRecursive+0x5a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <xQueueGiveMutexRecursive+0x54>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	6938      	ldr	r0, [r7, #16]
 8001b24:	f7fe ffee 	bl	8000b04 <xQueueGenericSend>
            xReturn = pdPASS;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e001      	b.n	8001b32 <xQueueGiveMutexRecursive+0x5e>
            xReturn = pdFAIL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
        return xReturn;
 8001b32:	697b      	ldr	r3, [r7, #20]
    }
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <vQueueAddToRegistry+0x26>
    __asm volatile
 8001b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	60fb      	str	r3, [r7, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	e7fe      	b.n	8001b60 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e01e      	b.n	8001bb0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d105      	bne.n	8001b8e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
                    break;
 8001b8c:	e013      	b.n	8001bb6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <vQueueAddToRegistry+0x98>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d9dd      	bls.n	8001b72 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	24000000 	.word	0x24000000

08001bd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <vQueueUnregisterQueue+0x24>
    __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	60bb      	str	r3, [r7, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	e7fe      	b.n	8001bfa <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e016      	b.n	8001c30 <vQueueUnregisterQueue+0x58>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10b      	bne.n	8001c2a <vQueueUnregisterQueue+0x52>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2100      	movs	r1, #0
 8001c18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <vQueueUnregisterQueue+0x6c>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
                break;
 8001c28:	e006      	b.n	8001c38 <vQueueUnregisterQueue+0x60>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d9e5      	bls.n	8001c02 <vQueueUnregisterQueue+0x2a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	24000000 	.word	0x24000000

08001c48 <pcQueueGetName>:
    {
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
        configASSERT( xQueue );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <pcQueueGetName+0x28>
    __asm volatile
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	60fb      	str	r3, [r7, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	e7fe      	b.n	8001c6e <pcQueueGetName+0x26>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e010      	b.n	8001c98 <pcQueueGetName+0x50>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <pcQueueGetName+0x64>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d105      	bne.n	8001c92 <pcQueueGetName+0x4a>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <pcQueueGetName+0x64>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c8e:	613b      	str	r3, [r7, #16]
                break;
 8001c90:	e005      	b.n	8001c9e <pcQueueGetName+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9eb      	bls.n	8001c76 <pcQueueGetName+0x2e>
        return pcReturn;
 8001c9e:	693b      	ldr	r3, [r7, #16]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	24000000 	.word	0x24000000

08001cb0 <xQueueGenericCreate>:
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc8:	2100      	movs	r1, #0
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <xQueueGenericCreate+0x28>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d127      	bne.n	8001d2e <xQueueGenericCreate+0x7e>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ce6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cea:	d820      	bhi.n	8001d2e <xQueueGenericCreate+0x7e>
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3350      	adds	r3, #80	; 0x50
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fbde 	bl	80074bc <pvPortMalloc>
 8001d00:	61f8      	str	r0, [r7, #28]
            if( pxNewQueue != NULL )
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <xQueueGenericCreate+0x9a>
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3350      	adds	r3, #80	; 0x50
 8001d10:	617b      	str	r3, [r7, #20]
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa6d 	bl	8002206 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001d2c:	e00d      	b.n	8001d4a <xQueueGenericCreate+0x9a>
            configASSERT( pxNewQueue );
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGenericCreate+0x9a>
    __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	613b      	str	r3, [r7, #16]
}
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGenericCreate+0x98>
        return pxNewQueue;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
    }
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <xQueueGenericCreateStatic>:
    {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxStaticQueue );
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <xQueueGenericCreateStatic+0x2e>
    __asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	623b      	str	r3, [r7, #32]
}
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <xQueueGenericCreateStatic+0x2c>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d030      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02d      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d027      	beq.n	8001dea <xQueueGenericCreateStatic+0x96>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d121      	bne.n	8001dea <xQueueGenericCreateStatic+0x96>
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8001da6:	2350      	movs	r3, #80	; 0x50
 8001da8:	617b      	str	r3, [r7, #20]
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b50      	cmp	r3, #80	; 0x50
 8001dae:	d00a      	beq.n	8001dc6 <xQueueGenericCreateStatic+0x72>
    __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	61fb      	str	r3, [r7, #28]
}
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xQueueGenericCreateStatic+0x70>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001dc6:	697b      	ldr	r3, [r7, #20]
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dd4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa0f 	bl	8002206 <prvInitialiseNewQueue>
 8001de8:	e00d      	b.n	8001e06 <xQueueGenericCreateStatic+0xb2>
            configASSERT( pxNewQueue );
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericCreateStatic+0xb2>
    __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	61bb      	str	r3, [r7, #24]
}
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericCreateStatic+0xb0>
        return pxNewQueue;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001e20:	f007 ff54 	bl	8009ccc <vPortEnterCritical>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e30:	d103      	bne.n	8001e3a <vQueueWaitForMessageRestricted+0x2a>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e46:	d103      	bne.n	8001e50 <vQueueWaitForMessageRestricted+0x40>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e50:	f007 ff5a 	bl	8009d08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3324      	adds	r3, #36	; 0x24
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f9d7 	bl	8005218 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f000 f8bb 	bl	8001fe6 <prvUnlockQueue>
    }
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <xQueueGenericReset>:
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	613b      	str	r3, [r7, #16]
    configASSERT( pxQueue );
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <xQueueGenericReset+0x2e>
    __asm volatile
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	60fb      	str	r3, [r7, #12]
}
 8001ea2:	bf00      	nop
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericReset+0x2c>
    if( ( pxQueue != NULL ) &&
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05d      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d059      	beq.n	8001f68 <xQueueGenericReset+0xf0>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d000      	beq.n	8001ec8 <xQueueGenericReset+0x50>
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d14c      	bne.n	8001f68 <xQueueGenericReset+0xf0>
        taskENTER_CRITICAL();
 8001ece:	f007 fefd 	bl	8009ccc <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	441a      	add	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2200      	movs	r2, #0
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	441a      	add	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <xQueueGenericReset+0xd6>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01a      	beq.n	8001f62 <xQueueGenericReset+0xea>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f9b9 	bl	80052a8 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d012      	beq.n	8001f62 <xQueueGenericReset+0xea>
                        queueYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <xQueueGenericReset+0x11c>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	e009      	b.n	8001f62 <xQueueGenericReset+0xea>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3310      	adds	r3, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fd22 	bl	800099c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3324      	adds	r3, #36	; 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fd1d 	bl	800099c <vListInitialise>
        taskEXIT_CRITICAL();
 8001f62:	f007 fed1 	bl	8009d08 <vPortExitCritical>
 8001f66:	e001      	b.n	8001f6c <xQueueGenericReset+0xf4>
        xReturn = pdFAIL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
    configASSERT( xReturn != pdFAIL );
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <xQueueGenericReset+0x110>
    __asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	60bb      	str	r3, [r7, #8]
}
 8001f84:	bf00      	nop
 8001f86:	e7fe      	b.n	8001f86 <xQueueGenericReset+0x10e>
    return xReturn;
 8001f88:	697b      	ldr	r3, [r7, #20]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <vQueueSetQueueNumber>:
    {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <uxQueueGetQueueNumber>:
    {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <ucQueueGetQueueType>:
    {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <prvUnlockQueue>:
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8001fee:	f007 fe6d 	bl	8009ccc <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffa:	e011      	b.n	8002020 <prvUnlockQueue+0x3a>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <prvUnlockQueue+0x44>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f94d 	bl	80052a8 <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <prvUnlockQueue+0x32>
                            vTaskMissedYield();
 8002014:	f003 fbc6 	bl	80057a4 <vTaskMissedYield>
            --cTxLock;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dce9      	bgt.n	8001ffc <prvUnlockQueue+0x16>
 8002028:	e000      	b.n	800202c <prvUnlockQueue+0x46>
                        break;
 800202a:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 8002034:	f007 fe68 	bl	8009d08 <vPortExitCritical>
    taskENTER_CRITICAL();
 8002038:	f007 fe48 	bl	8009ccc <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002042:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002044:	e011      	b.n	800206a <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <prvUnlockQueue+0x8e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3310      	adds	r3, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f003 f928 	bl	80052a8 <xTaskRemoveFromEventList>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800205e:	f003 fba1 	bl	80057a4 <vTaskMissedYield>
                --cRxLock;
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	3b01      	subs	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800206a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dce9      	bgt.n	8002046 <prvUnlockQueue+0x60>
 8002072:	e000      	b.n	8002076 <prvUnlockQueue+0x90>
                break;
 8002074:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 800207e:	f007 fe43 	bl	8009d08 <vPortExitCritical>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <prvIsQueueEmpty>:
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8002092:	f007 fe1b 	bl	8009ccc <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800209e:	2301      	movs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e001      	b.n	80020a8 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020a8:	f007 fe2e 	bl	8009d08 <vPortExitCritical>
    return xReturn;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <prvIsQueueFull>:
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 80020be:	f007 fe05 	bl	8009ccc <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d102      	bne.n	80020d4 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e001      	b.n	80020d8 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80020d8:	f007 fe16 	bl	8009d08 <vPortExitCritical>
    return xReturn;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <prvCopyDataToQueue>:
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <prvCopyDataToQueue+0x3a>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14d      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fc19 	bl	8005948 <xTaskPriorityDisinherit>
 8002116:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	e043      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6858      	ldr	r0, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	f019 fa1b 	bl	801b56c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d32b      	bcc.n	80021a8 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	e026      	b.n	80021a8 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68d8      	ldr	r0, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	461a      	mov	r2, r3
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	f019 fa01 	bl	801b56c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	425b      	negs	r3, r3
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d207      	bcs.n	8002196 <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	425b      	negs	r3, r3
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d105      	bne.n	80021a8 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 80021b0:	697b      	ldr	r3, [r7, #20]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <prvCopyDataFromQueue>:
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d018      	beq.n	80021fe <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	441a      	add	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d303      	bcc.n	80021ee <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	461a      	mov	r2, r3
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f019 f9b7 	bl	801b56c <memcpy>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <prvInitialiseNewQueue>:
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e002      	b.n	8002228 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002234:	2101      	movs	r1, #1
 8002236:	69b8      	ldr	r0, [r7, #24]
 8002238:	f7ff fe1e 	bl	8001e78 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <prvInitialiseMutex>:
    {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fc46 	bl	8000b04 <xQueueGenericSend>
    }
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvGetDisinheritPriorityAfterTimeout>:
    {
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80022a2:	68fb      	ldr	r3, [r7, #12]
    }
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b092      	sub	sp, #72	; 0x48
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    size_t xMaxReportedSpace = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xStreamBufferSend+0x3a>
    __asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xStreamBufferSend+0x38>
    configASSERT( pxStreamBuffer );
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <xStreamBufferSend+0x56>
    __asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <xStreamBufferSend+0x54>

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	3b01      	subs	r3, #1
 800230c:	633b      	str	r3, [r7, #48]	; 0x30

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	7f1b      	ldrb	r3, [r3, #28]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d018      	beq.n	800234c <xStreamBufferSend+0x9c>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	3304      	adds	r3, #4
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8002320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d80a      	bhi.n	800233e <xStreamBufferSend+0x8e>
    __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	623b      	str	r3, [r7, #32]
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xStreamBufferSend+0x8c>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 800233e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	429a      	cmp	r2, r3
 8002344:	d908      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	e005      	b.n	8002358 <xStreamBufferSend+0xa8>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 800234c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	429a      	cmp	r2, r3
 8002352:	d901      	bls.n	8002358 <xStreamBufferSend+0xa8>
        {
            xRequiredSpace = xMaxReportedSpace;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d041      	beq.n	80023e2 <xStreamBufferSend+0x132>
    {
        vTaskSetTimeOutState( &xTimeOut );
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fcf2 	bl	8004d4c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8002368:	f007 fcb0 	bl	8009ccc <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800236c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800236e:	f000 faa1 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8002372:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	429a      	cmp	r2, r3
 800237a:	d218      	bcs.n	80023ae <xStreamBufferSend+0xfe>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 800237c:	2100      	movs	r1, #0
 800237e:	2000      	movs	r0, #0
 8002380:	f002 fc78 	bl	8004c74 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <xStreamBufferSend+0xf2>
    __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	61fb      	str	r3, [r7, #28]
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xStreamBufferSend+0xf0>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80023a2:	f003 f9ef 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80023a6:	4602      	mov	r2, r0
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	e002      	b.n	80023b4 <xStreamBufferSend+0x104>
                }
                else
                {
                    taskEXIT_CRITICAL();
 80023ae:	f007 fcab 	bl	8009d08 <vPortExitCritical>
                    break;
 80023b2:	e016      	b.n	80023e2 <xStreamBufferSend+0x132>
                }
            }
            taskEXIT_CRITICAL();
 80023b4:	f007 fca8 	bl	8009d08 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f002 fa40 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80023ce:	463a      	mov	r2, r7
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fcde 	bl	8004d98 <xTaskCheckForTimeOut>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0c2      	beq.n	8002368 <xStreamBufferSend+0xb8>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <xStreamBufferSend+0x140>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80023e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023ea:	f000 fa63 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80023ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023fc:	f000 fd84 	bl	8002f08 <prvWriteMessageToBuffer>
 8002400:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <xStreamBufferSend+0x190>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800240a:	f000 fcb3 	bl	8002d74 <prvBytesInBuffer>
 800240e:	4602      	mov	r2, r0
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d313      	bcc.n	8002440 <xStreamBufferSend+0x190>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8002418:	f001 fd3a 	bl	8003e90 <vTaskSuspendAll>
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <xStreamBufferSend+0x18c>
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	6918      	ldr	r0, [r3, #16]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	f001 ff4d 	bl	80042d0 <xTaskGenericNotify>
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	f001 fd36 	bl	8003eac <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002442:	4618      	mov	r0, r3
 8002444:	3740      	adds	r7, #64	; 0x40
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b090      	sub	sp, #64	; 0x40
 800244e:	af02      	add	r7, sp, #8
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xStreamBufferSendFromISR+0x32>
    __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	623b      	str	r3, [r7, #32]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xStreamBufferSendFromISR+0x4e>
    __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61fb      	str	r3, [r7, #28]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	3304      	adds	r3, #4
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80024aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ac:	f000 fa02 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80024b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024be:	f000 fd23 	bl	8002f08 <prvWriteMessageToBuffer>
 80024c2:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d02d      	beq.n	8002526 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f000 fc52 	bl	8002d74 <prvBytesInBuffer>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d325      	bcc.n	8002526 <xStreamBufferSendFromISR+0xdc>
    __asm volatile
 80024da:	f3ef 8211 	mrs	r2, BASEPRI
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	61ba      	str	r2, [r7, #24]
 80024f0:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 80024f2:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <xStreamBufferSendFromISR+0xd0>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6918      	ldr	r0, [r3, #16]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	f002 f81e 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	613b      	str	r3, [r7, #16]
    __asm volatile
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f383 8811 	msr	BASEPRI, r3
}
 8002524:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xStreamBufferReceive+0x32>
    __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61fb      	str	r3, [r7, #28]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xStreamBufferReceive+0x4e>
    __asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800258a:	2304      	movs	r3, #4
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e001      	b.n	8002594 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d037      	beq.n	800260a <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 800259a:	f007 fb97 	bl	8009ccc <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800259e:	6a38      	ldr	r0, [r7, #32]
 80025a0:	f000 fbe8 	bl	8002d74 <prvBytesInBuffer>
 80025a4:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d817      	bhi.n	80025de <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80025ae:	2100      	movs	r1, #0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f002 fb5f 	bl	8004c74 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <xStreamBufferReceive+0xa4>
    __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	617b      	str	r3, [r7, #20]
}
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80025d4:	f003 f8d6 	bl	8005784 <xTaskGetCurrentTaskHandle>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80025de:	f007 fb93 	bl	8009d08 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 80025e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d813      	bhi.n	8002612 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2000      	movs	r0, #0
 80025f6:	f002 f927 	bl	8004848 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002600:	6a38      	ldr	r0, [r7, #32]
 8002602:	f000 fbb7 	bl	8002d74 <prvBytesInBuffer>
 8002606:	62b8      	str	r0, [r7, #40]	; 0x28
 8002608:	e003      	b.n	8002612 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800260a:	6a38      	ldr	r0, [r7, #32]
 800260c:	f000 fbb2 	bl	8002d74 <prvBytesInBuffer>
 8002610:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	429a      	cmp	r2, r3
 8002618:	d91d      	bls.n	8002656 <xStreamBufferReceive+0x126>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6a38      	ldr	r0, [r7, #32]
 8002622:	f000 fc34 	bl	8002e8e <prvReadMessageFromBuffer>
 8002626:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d013      	beq.n	8002656 <xStreamBufferReceive+0x126>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 800262e:	f001 fc2f 	bl	8003e90 <vTaskSuspendAll>
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <xStreamBufferReceive+0x122>
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	6958      	ldr	r0, [r3, #20]
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	f001 fe42 	bl	80042d0 <xTaskGenericNotify>
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	f001 fc2b 	bl	8003eac <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b090      	sub	sp, #64	; 0x40
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvRxData );
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xStreamBufferReceiveFromISR+0x32>
    __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	623b      	str	r3, [r7, #32]
}
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xStreamBufferReceiveFromISR+0x30>
    configASSERT( pxStreamBuffer );
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <xStreamBufferReceiveFromISR+0x4e>
    __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	61fb      	str	r3, [r7, #28]
}
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <xStreamBufferReceiveFromISR+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <xStreamBufferReceiveFromISR+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80026ba:	2304      	movs	r3, #4
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	e001      	b.n	80026c4 <xStreamBufferReceiveFromISR+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80026c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c6:	f000 fb55 	bl	8002d74 <prvBytesInBuffer>
 80026ca:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d92f      	bls.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026dc:	f000 fbd7 	bl	8002e8e <prvReadMessageFromBuffer>
 80026e0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <xStreamBufferReceiveFromISR+0xd4>
    __asm volatile
 80026e8:	f3ef 8211 	mrs	r2, BASEPRI
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61ba      	str	r2, [r7, #24]
 80026fe:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8002700:	69bb      	ldr	r3, [r7, #24]
        {
            sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <xStreamBufferReceiveFromISR+0xc8>
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	6958      	ldr	r0, [r3, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	f001 ff17 	bl	8004550 <xTaskGenericNotifyFromISR>
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	613b      	str	r3, [r7, #16]
    __asm volatile
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f383 8811 	msr	BASEPRI, r3
}
 8002732:	bf00      	nop
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002736:	4618      	mov	r0, r3
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <vStreamBufferDelete>:
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]
    configASSERT( pxStreamBuffer );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <vStreamBufferDelete+0x28>
    __asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60bb      	str	r3, [r7, #8]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <vStreamBufferDelete+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <vStreamBufferDelete+0x3c>
                vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f004 ff86 	bl	8007684 <vPortFree>
}
 8002778:	e004      	b.n	8002784 <vStreamBufferDelete+0x46>
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f018 ff02 	bl	801b588 <memset>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <xStreamBufferIsFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60fb      	str	r3, [r7, #12]

    configASSERT( pxStreamBuffer );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <xStreamBufferIsFull+0x28>
    __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	60bb      	str	r3, [r7, #8]
}
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <xStreamBufferIsFull+0x26>

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	7f1b      	ldrb	r3, [r3, #28]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <xStreamBufferIsFull+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80027c0:	2304      	movs	r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e001      	b.n	80027ca <xStreamBufferIsFull+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f872 	bl	80028b4 <xStreamBufferSpacesAvailable>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d302      	bcc.n	80027de <xStreamBufferIsFull+0x52>
    {
        xReturn = pdTRUE;
 80027d8:	2301      	movs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e001      	b.n	80027e2 <xStreamBufferIsFull+0x56>
    }
    else
    {
        xReturn = pdFALSE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80027e2:	697b      	ldr	r3, [r7, #20]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xStreamBufferIsEmpty>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xStreamBufferIsEmpty+0x28>
    __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	60bb      	str	r3, [r7, #8]
}
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xStreamBufferIsEmpty+0x26>
    xTail = pxStreamBuffer->xTail;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
    if( pxStreamBuffer->xHead == xTail )
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d102      	bne.n	800282a <xStreamBufferIsEmpty+0x3e>
        xReturn = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e001      	b.n	800282e <xStreamBufferIsEmpty+0x42>
        xReturn = pdFALSE;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
    return xReturn;
 800282e:	697b      	ldr	r3, [r7, #20]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <xStreamBufferReset>:
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFAIL;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <xStreamBufferReset+0x2c>
    __asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	60bb      	str	r3, [r7, #8]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <xStreamBufferReset+0x2a>
            uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]
    taskENTER_CRITICAL();
 800286e:	f007 fa2d 	bl	8009ccc <vPortEnterCritical>
        if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <xStreamBufferReset+0x6a>
            if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d111      	bne.n	80028a6 <xStreamBufferReset+0x6a>
                prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6999      	ldr	r1, [r3, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	68d8      	ldr	r0, [r3, #12]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	7f1b      	ldrb	r3, [r3, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f000 fbd6 	bl	8003048 <prvInitialiseNewStreamBuffer>
                xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
                        pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
    taskEXIT_CRITICAL();
 80028a6:	f007 fa2f 	bl	8009d08 <vPortExitCritical>
    return xReturn;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <xStreamBufferSpacesAvailable>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60bb      	str	r3, [r7, #8]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xStreamBufferSpacesAvailable+0x26>
        xOriginalTail = pxStreamBuffer->xTail;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
        xSpace -= pxStreamBuffer->xHead;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
    } while( xOriginalTail != pxStreamBuffer->xTail );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d1ec      	bne.n	80028dc <xStreamBufferSpacesAvailable+0x28>
    xSpace -= ( size_t ) 1;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3b01      	subs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
    if( xSpace >= pxStreamBuffer->xLength )
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	429a      	cmp	r2, r3
 8002910:	d304      	bcc.n	800291c <xStreamBufferSpacesAvailable+0x68>
        xSpace -= pxStreamBuffer->xLength;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
    return xSpace;
 800291c:	697b      	ldr	r3, [r7, #20]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <xStreamBufferBytesAvailable>:
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	617b      	str	r3, [r7, #20]
    configASSERT( pxStreamBuffer );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xStreamBufferBytesAvailable+0x28>
    __asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60fb      	str	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xStreamBufferBytesAvailable+0x26>
    xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f000 fa0e 	bl	8002d74 <prvBytesInBuffer>
 8002958:	6138      	str	r0, [r7, #16]
    return xReturn;
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xStreamBufferSetTriggerLevel>:
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	613b      	str	r3, [r7, #16]
    configASSERT( pxStreamBuffer );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xStreamBufferSetTriggerLevel+0x2a>
    __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	60fb      	str	r3, [r7, #12]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xStreamBufferSetTriggerLevel+0x28>
    if( xTriggerLevel == ( size_t ) 0 )
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xStreamBufferSetTriggerLevel+0x34>
        xTriggerLevel = ( size_t ) 1;
 8002994:	2301      	movs	r3, #1
 8002996:	603b      	str	r3, [r7, #0]
    if( xTriggerLevel < pxStreamBuffer->xLength )
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d205      	bcs.n	80029ae <xStreamBufferSetTriggerLevel+0x4a>
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	60da      	str	r2, [r3, #12]
        xReturn = pdPASS;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e001      	b.n	80029b2 <xStreamBufferSetTriggerLevel+0x4e>
        xReturn = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    return xReturn;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xStreamBufferSendCompletedFromISR+0x2a>
    __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xStreamBufferSendCompletedFromISR+0x28>
    __asm volatile
 80029ea:	f3ef 8211 	mrs	r2, BASEPRI
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a02:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a04:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xStreamBufferSendCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	6918      	ldr	r0, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f001 fd96 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
            xReturn = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e001      	b.n	8002a34 <xStreamBufferSendCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f383 8811 	msr	BASEPRI, r3
}
 8002a3e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xStreamBufferReceiveCompletedFromISR+0x2a>
    __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61bb      	str	r3, [r7, #24]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xStreamBufferReceiveCompletedFromISR+0x28>
    __asm volatile
 8002a74:	f3ef 8211 	mrs	r2, BASEPRI
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	617a      	str	r2, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
    return ulOriginalBASEPRI;
 8002a8c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002a8e:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <xStreamBufferReceiveCompletedFromISR+0x70>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6958      	ldr	r0, [r3, #20]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f001 fd51 	bl	8004550 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]
            xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	e001      	b.n	8002abe <xStreamBufferReceiveCompletedFromISR+0x74>
        }
        else
        {
            xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f383 8811 	msr	BASEPRI, r3
}
 8002ac8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xStreamBufferGenericCreate>:
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
        if( xIsMessageBuffer == pdTRUE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d110      	bne.n	8002b08 <xStreamBufferGenericCreate+0x34>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d81b      	bhi.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	61fb      	str	r3, [r7, #28]
}
 8002b04:	bf00      	nop
 8002b06:	e7fe      	b.n	8002b06 <xStreamBufferGenericCreate+0x32>
            ucFlags = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xStreamBufferGenericCreate+0x56>
    __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61bb      	str	r3, [r7, #24]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xStreamBufferGenericCreate+0x54>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90a      	bls.n	8002b48 <xStreamBufferGenericCreate+0x74>
    __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	617b      	str	r3, [r7, #20]
}
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <xStreamBufferGenericCreate+0x72>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xStreamBufferGenericCreate+0x7e>
            xTriggerLevelBytes = ( size_t ) 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8002b58:	d809      	bhi.n	8002b6e <xStreamBufferGenericCreate+0x9a>
            xBufferSizeBytes++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fca9 	bl	80074bc <pvPortMalloc>
 8002b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8002b6c:	e001      	b.n	8002b72 <xStreamBufferGenericCreate+0x9e>
            pucAllocatedMemory = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
        if( pucAllocatedMemory != NULL )
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <xStreamBufferGenericCreate+0xba>
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b8a:	f000 fa5d 	bl	8003048 <prvInitialiseNewStreamBuffer>
        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <xStreamBufferGenericCreateStatic>:
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        configASSERT( pucStreamBufferStorageArea );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xStreamBufferGenericCreateStatic+0x2e>
    __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xStreamBufferGenericCreateStatic+0x2c>
        configASSERT( pxStaticStreamBuffer );
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xStreamBufferGenericCreateStatic+0x4a>
    __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xStreamBufferGenericCreateStatic+0x48>
        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d90a      	bls.n	8002c00 <xStreamBufferGenericCreateStatic+0x68>
    __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	623b      	str	r3, [r7, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xStreamBufferGenericCreateStatic+0x66>
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <xStreamBufferGenericCreateStatic+0x72>
            xTriggerLevelBytes = ( size_t ) 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
        if( xIsMessageBuffer != pdFALSE )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <xStreamBufferGenericCreateStatic+0x80>
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002c16:	e002      	b.n	8002c1e <xStreamBufferGenericCreateStatic+0x86>
            ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d80a      	bhi.n	8002c3a <xStreamBufferGenericCreateStatic+0xa2>
    __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xStreamBufferGenericCreateStatic+0xa0>
                volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8002c3a:	2324      	movs	r3, #36	; 0x24
 8002c3c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b24      	cmp	r3, #36	; 0x24
 8002c42:	d00a      	beq.n	8002c5a <xStreamBufferGenericCreateStatic+0xc2>
    __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61bb      	str	r3, [r7, #24]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xStreamBufferGenericCreateStatic+0xc0>
        if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <xStreamBufferGenericCreateStatic+0xf4>
            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c74:	f000 f9e8 	bl	8003048 <prvInitialiseNewStreamBuffer>
            pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	771a      	strb	r2, [r3, #28]
            xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	e001      	b.n	8002c90 <xStreamBufferGenericCreateStatic+0xf8>
            xReturn = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        return xReturn;
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <xStreamBufferNextMessageLengthBytes>:
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
    configASSERT( pxStreamBuffer );
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xStreamBufferNextMessageLengthBytes+0x28>
    __asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xStreamBufferNextMessageLengthBytes+0x26>
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d022      	beq.n	8002d14 <xStreamBufferNextMessageLengthBytes+0x7a>
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002cce:	69b8      	ldr	r0, [r7, #24]
 8002cd0:	f000 f850 	bl	8002d74 <prvBytesInBuffer>
 8002cd4:	6178      	str	r0, [r7, #20]
        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d90a      	bls.n	8002cf2 <xStreamBufferNextMessageLengthBytes+0x58>
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f107 0108 	add.w	r1, r7, #8
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f000 f944 	bl	8002f74 <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e012      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
            configASSERT( xBytesAvailable == 0 );
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <xStreamBufferNextMessageLengthBytes+0x74>
    __asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	60fb      	str	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xStreamBufferNextMessageLengthBytes+0x72>
            xReturn = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e001      	b.n	8002d18 <xStreamBufferNextMessageLengthBytes+0x7e>
        xReturn = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    return xReturn;
 8002d18:	69fb      	ldr	r3, [r7, #28]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <vStreamBufferSetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,
                                             UBaseType_t uxStreamBufferNumber )
    {
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
        xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	621a      	str	r2, [r3, #32]
    }
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <uxStreamBufferGetStreamBufferNumber>:
    {
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
        return xStreamBuffer->uxStreamBufferNumber;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
    }
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <ucStreamBufferGetStreamBufferType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
    {
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
        return( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7f1b      	ldrb	r3, [r3, #28]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <prvBytesInBuffer>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]
    if( xCount >= pxStreamBuffer->xLength )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d304      	bcc.n	8002da6 <prvBytesInBuffer+0x32>
        xCount -= pxStreamBuffer->xLength;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	60fb      	str	r3, [r7, #12]
    return xCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <prvWriteBytesToBuffer>:
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
    configASSERT( xCount > ( size_t ) 0 );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <prvWriteBytesToBuffer+0x2a>
    __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61bb      	str	r3, [r7, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <prvWriteBytesToBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf28      	it	cs
 8002dec:	4613      	movcs	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d90a      	bls.n	8002e14 <prvWriteBytesToBuffer+0x60>
    __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	617b      	str	r3, [r7, #20]
}
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <prvWriteBytesToBuffer+0x5e>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f018 fba3 	bl	801b56c <memcpy>
    if( xCount > xFirstLength )
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d91c      	bls.n	8002e68 <prvWriteBytesToBuffer+0xb4>
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d90a      	bls.n	8002e52 <prvWriteBytesToBuffer+0x9e>
    __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <prvWriteBytesToBuffer+0x9c>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	18d1      	adds	r1, r2, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	f018 fb82 	bl	801b56c <memcpy>
    xHead += xCount;
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	603b      	str	r3, [r7, #0]
    if( xHead >= pxStreamBuffer->xLength )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d304      	bcc.n	8002e84 <prvWriteBytesToBuffer+0xd0>
        xHead -= pxStreamBuffer->xLength;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	603b      	str	r3, [r7, #0]
    return xHead;
 8002e84:	683b      	ldr	r3, [r7, #0]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <prvReadMessageFromBuffer>:
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
    size_t xNextTail = pxStreamBuffer->xTail;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	7f1b      	ldrb	r3, [r3, #28]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <prvReadMessageFromBuffer+0x48>
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 8002eae:	f107 0110 	add.w	r1, r7, #16
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f85c 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ebc:	61b8      	str	r0, [r7, #24]
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	61fb      	str	r3, [r7, #28]
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	3b04      	subs	r3, #4
 8002ec6:	603b      	str	r3, [r7, #0]
        if( xNextMessageLength > xBufferLengthBytes )
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d904      	bls.n	8002eda <prvReadMessageFromBuffer+0x4c>
            xNextMessageLength = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e001      	b.n	8002eda <prvReadMessageFromBuffer+0x4c>
        xNextMessageLength = xBufferLengthBytes;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf28      	it	cs
 8002ee2:	4613      	movcs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    if( xCount != ( size_t ) 0 )
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <prvReadMessageFromBuffer+0x70>
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f83e 	bl	8002f74 <prvReadBytesFromBuffer>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]
    return xCount;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvWriteMessageToBuffer>:
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
    size_t xNextHead = pxStreamBuffer->xHead;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	7f1b      	ldrb	r3, [r3, #28]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <prvWriteMessageToBuffer+0x3e>
        if( xSpace >= xRequiredSpace )
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d307      	bcc.n	8002f40 <prvWriteMessageToBuffer+0x38>
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 8002f30:	1d39      	adds	r1, r7, #4
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2204      	movs	r2, #4
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff3c 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e008      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
            xDataLengthBytes = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e005      	b.n	8002f52 <prvWriteMessageToBuffer+0x4a>
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	bf28      	it	cs
 8002f4e:	4613      	movcs	r3, r2
 8002f50:	607b      	str	r3, [r7, #4]
    if( xDataLengthBytes != ( size_t ) 0 )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <prvWriteMessageToBuffer+0x62>
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff28 	bl	8002db4 <prvWriteBytesToBuffer>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
    return xDataLengthBytes;
 8002f6a:	687b      	ldr	r3, [r7, #4]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvReadBytesFromBuffer>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
    configASSERT( xCount != ( size_t ) 0 );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <prvReadBytesFromBuffer+0x2a>
    __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61bb      	str	r3, [r7, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <prvReadBytesFromBuffer+0x28>
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf28      	it	cs
 8002fac:	4613      	movcs	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
    configASSERT( xFirstLength <= xCount );
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d90a      	bls.n	8002fce <prvReadBytesFromBuffer+0x5a>
    __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	617b      	str	r3, [r7, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <prvReadBytesFromBuffer+0x58>
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d90a      	bls.n	8002ff2 <prvReadBytesFromBuffer+0x7e>
    __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	613b      	str	r3, [r7, #16]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <prvReadBytesFromBuffer+0x7c>
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	f018 fab4 	bl	801b56c <memcpy>
    if( xCount > xFirstLength )
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	d90a      	bls.n	8003022 <prvReadBytesFromBuffer+0xae>
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	18d0      	adds	r0, r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	461a      	mov	r2, r3
 800301e:	f018 faa5 	bl	801b56c <memcpy>
    xTail += xCount;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	603b      	str	r3, [r7, #0]
    if( xTail >= pxStreamBuffer->xLength )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d304      	bcc.n	800303e <prvReadBytesFromBuffer+0xca>
        xTail -= pxStreamBuffer->xLength;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	603b      	str	r3, [r7, #0]
    return xTail;
 800303e:	683b      	ldr	r3, [r7, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvInitialiseNewStreamBuffer>:
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
            const BaseType_t xWriteValue = 0x55;
 8003056:	2355      	movs	r3, #85	; 0x55
 8003058:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	68b8      	ldr	r0, [r7, #8]
 8003060:	f018 fa92 	bl	801b588 <memset>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4293      	cmp	r3, r2
 800306a:	d00a      	beq.n	8003082 <prvInitialiseNewStreamBuffer+0x3a>
    __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	613b      	str	r3, [r7, #16]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <prvInitialiseNewStreamBuffer+0x38>
    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f018 fa7e 	bl	801b588 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030a4:	771a      	strb	r2, [r3, #28]
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 f9f9 	bl	80074bc <pvPortMalloc>
 80030ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <xTaskCreate+0x44>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030d2:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80030d6:	f004 f9f1 	bl	80074bc <pvPortMalloc>
 80030da:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <xTaskCreate+0x3c>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80030ea:	e005      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f004 fac9 	bl	8007684 <vPortFree>
 80030f2:	e001      	b.n	80030f8 <xTaskCreate+0x48>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <xTaskCreate+0x7e>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	2300      	movs	r3, #0
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f002 ffb5 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003122:	69f8      	ldr	r0, [r7, #28]
 8003124:	f003 f890 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e002      	b.n	8003134 <xTaskCreate+0x84>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003132:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003134:	69bb      	ldr	r3, [r7, #24]
    }
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <xTaskCreateStatic>:
    {
 800313e:	b580      	push	{r7, lr}
 8003140:	b08e      	sub	sp, #56	; 0x38
 8003142:	af04      	add	r7, sp, #16
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
        configASSERT( puxStackBuffer != NULL );
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <xTaskCreateStatic+0x2a>
    __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	623b      	str	r3, [r7, #32]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xTaskCreateStatic+0x46>
    __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	61fb      	str	r3, [r7, #28]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xTaskCreateStatic+0x44>
                volatile size_t xSize = sizeof( StaticTask_t );
 8003184:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8003188:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003190:	d00a      	beq.n	80031a8 <xTaskCreateStatic+0x6a>
    __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61bb      	str	r3, [r7, #24]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskCreateStatic+0x68>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031a8:	693b      	ldr	r3, [r7, #16]
        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01f      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <xTaskCreateStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031ca:	2300      	movs	r3, #0
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f002 ff52 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ea:	f003 f82d 	bl	8006248 <prvAddNewTaskToReadyList>
 80031ee:	e001      	b.n	80031f4 <xTaskCreateStatic+0xb6>
            xReturn = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
        return xReturn;
 80031f4:	697b      	ldr	r3, [r7, #20]
    }
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <xTaskCreateRestricted>:
    {
 80031fe:	b5b0      	push	{r4, r5, r7, lr}
 8003200:	b08a      	sub	sp, #40	; 0x28
 8003202:	af04      	add	r7, sp, #16
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320c:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xTaskCreateRestricted+0x2e>
    __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	60fb      	str	r3, [r7, #12]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xTaskCreateRestricted+0x2c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02c      	beq.n	800328e <xTaskCreateRestricted+0x90>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003234:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8003238:	f004 f940 	bl	80074bc <pvPortMalloc>
 800323c:	6138      	str	r0, [r7, #16]
            if( pxNewTCB != NULL )
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d024      	beq.n	800328e <xTaskCreateRestricted+0x90>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                        pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6859      	ldr	r1, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003262:	461d      	mov	r5, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68dc      	ldr	r4, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions );
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003270:	9203      	str	r2, [sp, #12]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4623      	mov	r3, r4
 800327e:	462a      	mov	r2, r5
 8003280:	f002 ff04 	bl	800608c <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 8003284:	6938      	ldr	r0, [r7, #16]
 8003286:	f002 ffdf 	bl	8006248 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
        return xReturn;
 800328e:	697b      	ldr	r3, [r7, #20]
    }
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <xTaskCreateRestrictedStatic>:
    {
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af04      	add	r7, sp, #16
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a6:	617b      	str	r3, [r7, #20]
        configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCreateRestrictedStatic+0x2e>
    __asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	60fb      	str	r3, [r7, #12]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateRestrictedStatic+0x2c>
        configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xTaskCreateRestrictedStatic+0x4e>
    __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60bb      	str	r3, [r7, #8]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateRestrictedStatic+0x4c>
        if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02d      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d028      	beq.n	800334a <xTaskCreateRestrictedStatic+0xb2>
            pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fe:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
                                  ( uint32_t ) pxTaskDefinition->usStackDepth,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	891b      	ldrh	r3, [r3, #8]
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800331e:	461d      	mov	r5, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68dc      	ldr	r4, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
                                  pxTaskDefinition->xRegions );
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	3218      	adds	r2, #24
            prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4623      	mov	r3, r4
 800333a:	462a      	mov	r2, r5
 800333c:	f002 fea6 	bl	800608c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003340:	6938      	ldr	r0, [r7, #16]
 8003342:	f002 ff81 	bl	8006248 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
        return xReturn;
 800334a:	697b      	ldr	r3, [r7, #20]
    }
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}

08003354 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <vTaskAllocateMPURegions+0x16>
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <vTaskAllocateMPURegions+0x30>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e000      	b.n	800336c <vTaskAllocateMPURegions+0x18>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1d18      	adds	r0, r3, #4
 8003372:	2300      	movs	r3, #0
 8003374:	2200      	movs	r2, #0
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	f003 fe36 	bl	8006fe8 <vPortStoreTaskMPUSettings>
    }
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	24000040 	.word	0x24000040

08003388 <vTaskDelete>:
    {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8003390:	f006 fc9c 	bl	8009ccc <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <vTaskDelete+0x18>
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <vTaskDelete+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e000      	b.n	80033a2 <vTaskDelete+0x1a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3384      	adds	r3, #132	; 0x84
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fb81 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <vTaskDelete+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3398      	adds	r3, #152	; 0x98
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fb77 	bl	8000ab0 <uxListRemove>
            uxTaskNumber++;
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <vTaskDelete+0xd4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <vTaskDelete+0xd4>)
 80033ca:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <vTaskDelete+0xd0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10b      	bne.n	80033ee <vTaskDelete+0x66>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3384      	adds	r3, #132	; 0x84
 80033da:	4619      	mov	r1, r3
 80033dc:	4820      	ldr	r0, [pc, #128]	; (8003460 <vTaskDelete+0xd8>)
 80033de:	f7fd fb43 	bl	8000a68 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <vTaskDelete+0xdc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <vTaskDelete+0xdc>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e006      	b.n	80033fc <vTaskDelete+0x74>
                --uxCurrentNumberOfTasks;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <vTaskDelete+0xe0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <vTaskDelete+0xe0>)
 80033f6:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 80033f8:	f002 fe2c 	bl	8006054 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80033fc:	f006 fc84 	bl	8009d08 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <vTaskDelete+0xd0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	429a      	cmp	r2, r3
 8003408:	d002      	beq.n	8003410 <vTaskDelete+0x88>
            prvDeleteTCB( pxTCB );
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f002 fcde 	bl	8005dcc <prvDeleteTCB>
        if( xSchedulerRunning != pdFALSE )
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <vTaskDelete+0xe4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <vTaskDelete+0xc8>
            if( pxTCB == pxCurrentTCB )
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <vTaskDelete+0xd0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d116      	bne.n	8003450 <vTaskDelete+0xc8>
                configASSERT( uxSchedulerSuspended == 0 );
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <vTaskDelete+0xe8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <vTaskDelete+0xb8>
    __asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60bb      	str	r3, [r7, #8]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vTaskDelete+0xb6>
                portYIELD_WITHIN_API();
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <vTaskDelete+0xec>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
    }
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	24000040 	.word	0x24000040
 800345c:	24000530 	.word	0x24000530
 8003460:	240004e8 	.word	0x240004e8
 8003464:	240004fc 	.word	0x240004fc
 8003468:	24000514 	.word	0x24000514
 800346c:	24000520 	.word	0x24000520
 8003470:	2400053c 	.word	0x2400053c
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vTaskDelay>:
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <vTaskDelay+0x42>
            configASSERT( uxSchedulerSuspended == 0 );
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <vTaskDelay+0x60>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <vTaskDelay+0x30>
    __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60bb      	str	r3, [r7, #8]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80034a8:	f000 fcf2 	bl	8003e90 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f002 fcee 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80034b4:	f000 fcfa 	bl	8003eac <xTaskResumeAll>
 80034b8:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <vTaskDelay+0x58>
            portYIELD_WITHIN_API();
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vTaskDelay+0x64>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
    }
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2400053c 	.word	0x2400053c
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xTaskDelayUntil>:
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( pxPreviousWakeTime );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskDelayUntil+0x2a>
    __asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	617b      	str	r3, [r7, #20]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xTaskDelayUntil+0x46>
    __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <xTaskDelayUntil+0xf0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <xTaskDelayUntil+0x64>
    __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskDelayUntil+0x62>
        vTaskSuspendAll();
 8003544:	f000 fca4 	bl	8003e90 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <xTaskDelayUntil+0xf4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	623b      	str	r3, [r7, #32]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4413      	add	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
            if( xConstTickCount < *pxPreviousWakeTime )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20b      	bcs.n	800357a <xTaskDelayUntil+0x9a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	429a      	cmp	r2, r3
 800356a:	d211      	bcs.n	8003590 <xTaskDelayUntil+0xb0>
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d90d      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e00a      	b.n	8003590 <xTaskDelayUntil+0xb0>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	d303      	bcc.n	800358c <xTaskDelayUntil+0xac>
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d901      	bls.n	8003590 <xTaskDelayUntil+0xb0>
                    xShouldDelay = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
            *pxPreviousWakeTime = xTimeToWake;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <xTaskDelayUntil+0xca>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fc73 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 80035aa:	f000 fc7f 	bl	8003eac <xTaskResumeAll>
 80035ae:	61b8      	str	r0, [r7, #24]
        if( xAlreadyYielded == pdFALSE )
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <xTaskDelayUntil+0xe6>
            portYIELD_WITHIN_API();
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <xTaskDelayUntil+0xf8>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
        return xShouldDelay;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	2400053c 	.word	0x2400053c
 80035d4:	24000518 	.word	0x24000518
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <uxTaskPriorityGet>:
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80035e4:	f006 fb72 	bl	8009ccc <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <uxTaskPriorityGet+0x18>
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <uxTaskPriorityGet+0x34>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e000      	b.n	80035f6 <uxTaskPriorityGet+0x1a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 8003600:	f006 fb82 	bl	8009d08 <vPortExitCritical>
        return uxReturn;
 8003604:	68bb      	ldr	r3, [r7, #8]
    }
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	24000040 	.word	0x24000040

08003614 <uxTaskPriorityGetFromISR>:
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800361c:	f006 fbea 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 8003620:	f3ef 8211 	mrs	r2, BASEPRI
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613a      	str	r2, [r7, #16]
 8003636:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003638:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800363a:	61fb      	str	r3, [r7, #28]
            pxTCB = prvGetTCBFromHandle( xTask );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <uxTaskPriorityGetFromISR+0x34>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <uxTaskPriorityGetFromISR+0x58>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e000      	b.n	800364a <uxTaskPriorityGetFromISR+0x36>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	61bb      	str	r3, [r7, #24]
            uxReturn = pxTCB->uxPriority;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f383 8811 	msr	BASEPRI, r3
}
 800365e:	bf00      	nop
        return uxReturn;
 8003660:	697b      	ldr	r3, [r7, #20]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	24000040 	.word	0x24000040

08003670 <eTaskGetState>:
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB );
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <eTaskGetState+0x28>
    __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60fb      	str	r3, [r7, #12]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <eTaskGetState+0x26>
        if( pxTCB == pxCurrentTCB )
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <eTaskGetState+0xe4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d103      	bne.n	80036aa <eTaskGetState+0x3a>
            eReturn = eRunning;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036a8:	e04e      	b.n	8003748 <eTaskGetState+0xd8>
            taskENTER_CRITICAL();
 80036aa:	f006 fb0f 	bl	8009ccc <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <eTaskGetState+0xe8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <eTaskGetState+0xec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	613b      	str	r3, [r7, #16]
            taskEXIT_CRITICAL();
 80036c2:	f006 fb21 	bl	8009d08 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d003      	beq.n	80036d6 <eTaskGetState+0x66>
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d103      	bne.n	80036de <eTaskGetState+0x6e>
                eReturn = eBlocked;
 80036d6:	2302      	movs	r3, #2
 80036d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036dc:	e034      	b.n	8003748 <eTaskGetState+0xd8>
                else if( pxStateList == &xSuspendedTaskList )
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <eTaskGetState+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d122      	bne.n	800372c <eTaskGetState+0xbc>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <eTaskGetState+0xb4>
                                eReturn = eSuspended;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	e00f      	b.n	800371c <eTaskGetState+0xac>
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4413      	add	r3, r2
 8003702:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d103      	bne.n	8003716 <eTaskGetState+0xa6>
                                        eReturn = eBlocked;
 800370e:	2302      	movs	r3, #2
 8003710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        break;
 8003714:	e018      	b.n	8003748 <eTaskGetState+0xd8>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2b02      	cmp	r3, #2
 8003720:	ddec      	ble.n	80036fc <eTaskGetState+0x8c>
 8003722:	e011      	b.n	8003748 <eTaskGetState+0xd8>
                        eReturn = eBlocked;
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800372a:	e00d      	b.n	8003748 <eTaskGetState+0xd8>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <eTaskGetState+0xf4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d002      	beq.n	800373a <eTaskGetState+0xca>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <eTaskGetState+0xd2>
                    eReturn = eDeleted;
 800373a:	2304      	movs	r3, #4
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003740:	e002      	b.n	8003748 <eTaskGetState+0xd8>
                eReturn = eReady;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return eReturn;
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	24000040 	.word	0x24000040
 8003758:	240004cc 	.word	0x240004cc
 800375c:	240004d0 	.word	0x240004d0
 8003760:	24000500 	.word	0x24000500
 8003764:	240004e8 	.word	0x240004e8

08003768 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <vTaskGetInfo+0x1a>
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <vTaskGetInfo+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e000      	b.n	8003784 <vTaskGetInfo+0x1c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d01b      	beq.n	8003802 <vTaskGetInfo+0x9a>
        {
            if( pxTCB == pxCurrentTCB )
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <vTaskGetInfo+0xd4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <vTaskGetInfo+0x74>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	731a      	strb	r2, [r3, #12]
 80037da:	e019      	b.n	8003810 <vTaskGetInfo+0xa8>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d113      	bne.n	8003810 <vTaskGetInfo+0xa8>
                        {
                            vTaskSuspendAll();
 80037e8:	f000 fb52 	bl	8003e90 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <vTaskGetInfo+0x94>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2202      	movs	r2, #2
 80037fa:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80037fc:	f000 fb56 	bl	8003eac <xTaskResumeAll>
 8003800:	e006      	b.n	8003810 <vTaskGetInfo+0xa8>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff34 	bl	8003670 <eTaskGetState>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <vTaskGetInfo+0xc4>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fbfd 	bl	800601c <prvTaskCheckFreeStackSpace>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 800382a:	e002      	b.n	8003832 <vTaskGetInfo+0xca>
            pxTaskStatus->usStackHighWaterMark = 0;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	841a      	strh	r2, [r3, #32]
    }
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24000040 	.word	0x24000040

08003840 <vTaskPrioritySet>:
    {
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b37      	cmp	r3, #55	; 0x37
 8003852:	d90a      	bls.n	800386a <vTaskPrioritySet+0x2a>
    __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60bb      	str	r3, [r7, #8]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <vTaskPrioritySet+0x28>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b37      	cmp	r3, #55	; 0x37
 800386e:	d901      	bls.n	8003874 <vTaskPrioritySet+0x34>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003870:	2337      	movs	r3, #55	; 0x37
 8003872:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8003874:	f006 fa2a 	bl	8009ccc <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <vTaskPrioritySet+0x44>
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	e000      	b.n	8003886 <vTaskPrioritySet+0x46>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	61bb      	str	r3, [r7, #24]
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800388e:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	f000 809e 	beq.w	80039d6 <vTaskPrioritySet+0x196>
                if( uxNewPriority > uxCurrentBasePriority )
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90e      	bls.n	80038c0 <vTaskPrioritySet+0x80>
                    if( pxTCB != pxCurrentTCB )
 80038a2:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d010      	beq.n	80038ce <vTaskPrioritySet+0x8e>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80038ac:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d309      	bcc.n	80038ce <vTaskPrioritySet+0x8e>
                            xYieldRequired = pdTRUE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e006      	b.n	80038ce <vTaskPrioritySet+0x8e>
                else if( pxTCB == pxCurrentTCB )
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <vTaskPrioritySet+0x1a4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d101      	bne.n	80038ce <vTaskPrioritySet+0x8e>
                    xYieldRequired = pdTRUE;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038d4:	613b      	str	r3, [r7, #16]
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d103      	bne.n	80038ee <vTaskPrioritySet+0xae>
                            pxTCB->uxPriority = uxNewPriority;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                        pxTCB->uxBasePriority = uxNewPriority;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db05      	blt.n	800390c <vTaskPrioritySet+0xcc>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800391e:	4413      	add	r3, r2
 8003920:	4299      	cmp	r1, r3
 8003922:	d14d      	bne.n	80039c0 <vTaskPrioritySet+0x180>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3384      	adds	r3, #132	; 0x84
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f8c1 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d904      	bls.n	8003946 <vTaskPrioritySet+0x106>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <vTaskPrioritySet+0x1ac>)
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800394c:	4926      	ldr	r1, [pc, #152]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	3284      	adds	r2, #132	; 0x84
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 8003994:	441a      	add	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c59      	adds	r1, r3, #1
 80039b2:	480d      	ldr	r0, [pc, #52]	; (80039e8 <vTaskPrioritySet+0x1a8>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4403      	add	r3, r0
 80039be:	6019      	str	r1, [r3, #0]
                if( xYieldRequired != pdFALSE )
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <vTaskPrioritySet+0x196>
                    taskYIELD_IF_USING_PREEMPTION();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <vTaskPrioritySet+0x1b0>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80039d6:	f006 f997 	bl	8009d08 <vPortExitCritical>
    }
 80039da:	bf00      	nop
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	24000040 	.word	0x24000040
 80039e8:	24000044 	.word	0x24000044
 80039ec:	2400051c 	.word	0x2400051c
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskSuspend>:
    {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 80039fc:	f006 f966 	bl	8009ccc <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <vTaskSuspend+0x18>
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <vTaskSuspend+0x1a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	613b      	str	r3, [r7, #16]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3384      	adds	r3, #132	; 0x84
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd f84b 	bl	8000ab0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <vTaskSuspend+0x3a>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3398      	adds	r3, #152	; 0x98
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd f841 	bl	8000ab0 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3384      	adds	r3, #132	; 0x84
 8003a32:	4619      	mov	r1, r3
 8003a34:	482d      	ldr	r0, [pc, #180]	; (8003aec <vTaskSuspend+0xf8>)
 8003a36:	f7fd f817 	bl	8000a68 <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e012      	b.n	8003a66 <vTaskSuspend+0x72>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <vTaskSuspend+0x6c>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	dde9      	ble.n	8003a40 <vTaskSuspend+0x4c>
        taskEXIT_CRITICAL();
 8003a6c:	f006 f94c 	bl	8009d08 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <vTaskSuspend+0x90>
            taskENTER_CRITICAL();
 8003a78:	f006 f928 	bl	8009ccc <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8003a7c:	f002 faea 	bl	8006054 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8003a80:	f006 f942 	bl	8009d08 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d127      	bne.n	8003ade <vTaskSuspend+0xea>
            if( xSchedulerRunning != pdFALSE )
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <vTaskSuspend+0xfc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <vTaskSuspend+0xd2>
                configASSERT( uxSchedulerSuspended == 0 );
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <vTaskSuspend+0x100>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <vTaskSuspend+0xc0>
    __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskSuspend+0xbe>
                portYIELD_WITHIN_API();
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <vTaskSuspend+0x104>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
    }
 8003ac4:	e00b      	b.n	8003ade <vTaskSuspend+0xea>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <vTaskSuspend+0xf8>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <vTaskSuspend+0x108>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <vTaskSuspend+0xe6>
                    pxCurrentTCB = NULL;
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <vTaskSuspend+0xf4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
    }
 8003ad8:	e001      	b.n	8003ade <vTaskSuspend+0xea>
                    vTaskSwitchContext();
 8003ada:	f001 fdad 	bl	8005638 <vTaskSwitchContext>
    }
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24000040 	.word	0x24000040
 8003aec:	24000500 	.word	0x24000500
 8003af0:	24000520 	.word	0x24000520
 8003af4:	2400053c 	.word	0x2400053c
 8003af8:	e000ed04 	.word	0xe000ed04
 8003afc:	24000514 	.word	0x24000514

08003b00 <vTaskResume>:
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
        configASSERT( xTaskToResume );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <vTaskResume+0x28>
    __asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vTaskResume+0x26>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003b28:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <vTaskResume+0x114>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d06b      	beq.n	8003c0a <vTaskResume+0x10a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <vTaskResume+0x10a>
            taskENTER_CRITICAL();
 8003b38:	f006 f8c8 	bl	8009ccc <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f002 f8c3 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05e      	beq.n	8003c06 <vTaskResume+0x106>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3384      	adds	r3, #132	; 0x84
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc ffaf 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <vTaskResume+0x118>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d904      	bls.n	8003b6a <vTaskResume+0x6a>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <vTaskResume+0x118>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b70:	492a      	ldr	r1, [pc, #168]	; (8003c1c <vTaskResume+0x11c>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	3284      	adds	r2, #132	; 0x84
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <vTaskResume+0x11c>)
 8003bb8:	441a      	add	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bc6:	4915      	ldr	r1, [pc, #84]	; (8003c1c <vTaskResume+0x11c>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	4811      	ldr	r0, [pc, #68]	; (8003c1c <vTaskResume+0x11c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4403      	add	r3, r0
 8003be2:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <vTaskResume+0x114>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d307      	bcc.n	8003c06 <vTaskResume+0x106>
                        taskYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <vTaskResume+0x120>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
            taskEXIT_CRITICAL();
 8003c06:	f006 f87f 	bl	8009d08 <vPortExitCritical>
    }
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000040 	.word	0x24000040
 8003c18:	2400051c 	.word	0x2400051c
 8003c1c:	24000044 	.word	0x24000044
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskResumeFromISR>:
    {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	623b      	str	r3, [r7, #32]
        configASSERT( xTaskToResume );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskResumeFromISR+0x2c>
    __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	617b      	str	r3, [r7, #20]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskResumeFromISR+0x2a>
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c50:	f006 f8d0 	bl	8009df4 <vPortValidateInterruptPriority>
    __asm volatile
 8003c54:	f3ef 8211 	mrs	r2, BASEPRI
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	613a      	str	r2, [r7, #16]
 8003c6a:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8003c6c:	693b      	ldr	r3, [r7, #16]
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6e:	61fb      	str	r3, [r7, #28]
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003c70:	6a38      	ldr	r0, [r7, #32]
 8003c72:	f002 f829 	bl	8005cc8 <prvTaskIsTaskSuspended>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d066      	beq.n	8003d4a <xTaskResumeFromISR+0x126>
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <xTaskResumeFromISR+0x13c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d15c      	bne.n	8003d3e <xTaskResumeFromISR+0x11a>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <xTaskResumeFromISR+0x140>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d304      	bcc.n	8003ca0 <xTaskResumeFromISR+0x7c>
                        xYieldRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
                        xYieldPending = pdTRUE;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <xTaskResumeFromISR+0x144>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3384      	adds	r3, #132	; 0x84
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc ff03 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d904      	bls.n	8003cc2 <xTaskResumeFromISR+0x9e>
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <xTaskResumeFromISR+0x148>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	3284      	adds	r2, #132	; 0x84
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d10:	441a      	add	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d1e:	4914      	ldr	r1, [pc, #80]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	4810      	ldr	r0, [pc, #64]	; (8003d70 <xTaskResumeFromISR+0x14c>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	e005      	b.n	8003d4a <xTaskResumeFromISR+0x126>
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	3398      	adds	r3, #152	; 0x98
 8003d42:	4619      	mov	r1, r3
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <xTaskResumeFromISR+0x150>)
 8003d46:	f7fc fe8f 	bl	8000a68 <vListInsertEnd>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f383 8811 	msr	BASEPRI, r3
}
 8003d54:	bf00      	nop
        return xYieldRequired;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2400053c 	.word	0x2400053c
 8003d64:	24000040 	.word	0x24000040
 8003d68:	24000528 	.word	0x24000528
 8003d6c:	2400051c 	.word	0x2400051c
 8003d70:	24000044 	.word	0x24000044
 8003d74:	240004d4 	.word	0x240004d4

08003d78 <vTaskStartScheduler>:
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af04      	add	r7, sp, #16
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d86:	463a      	mov	r2, r7
 8003d88:	1d39      	adds	r1, r7, #4
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 f8ea 	bl	8009f68 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	460a      	mov	r2, r1
 8003da8:	4924      	ldr	r1, [pc, #144]	; (8003e3c <vTaskStartScheduler+0xc4>)
 8003daa:	4825      	ldr	r0, [pc, #148]	; (8003e40 <vTaskStartScheduler+0xc8>)
 8003dac:	f7ff f9c7 	bl	800313e <xTaskCreateStatic>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a24      	ldr	r2, [pc, #144]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db4:	6013      	str	r3, [r2, #0]
            if( xIdleTaskHandle != NULL )
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <vTaskStartScheduler+0xcc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <vTaskStartScheduler+0x4c>
                xReturn = pdPASS;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <vTaskStartScheduler+0x50>
                xReturn = pdFAIL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
            if( xReturn == pdPASS )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <vTaskStartScheduler+0x5c>
                xReturn = xTimerCreateTimerTask();
 8003dce:	f002 fcc7 	bl	8006760 <xTimerCreateTimerTask>
 8003dd2:	6178      	str	r0, [r7, #20]
    if( xReturn == pdPASS )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11b      	bne.n	8003e12 <vTaskStartScheduler+0x9a>
    __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	613b      	str	r3, [r7, #16]
}
 8003dec:	bf00      	nop
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <vTaskStartScheduler+0xd0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	33d4      	adds	r3, #212	; 0xd4
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <vTaskStartScheduler+0xd4>)
 8003df6:	6013      	str	r3, [r2, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <vTaskStartScheduler+0xd8>)
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dfe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <vTaskStartScheduler+0xdc>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <vTaskStartScheduler+0xe0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8003e0c:	f003 f845 	bl	8006e9a <xPortStartScheduler>
 8003e10:	e00e      	b.n	8003e30 <vTaskStartScheduler+0xb8>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e18:	d10a      	bne.n	8003e30 <vTaskStartScheduler+0xb8>
    __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vTaskStartScheduler+0xb6>
    ( void ) uxTopUsedPriority;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <vTaskStartScheduler+0xe4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	240081cc 	.word	0x240081cc
 8003e40:	08005db1 	.word	0x08005db1
 8003e44:	24000538 	.word	0x24000538
 8003e48:	24000040 	.word	0x24000040
 8003e4c:	24008168 	.word	0x24008168
 8003e50:	24000534 	.word	0x24000534
 8003e54:	24000520 	.word	0x24000520
 8003e58:	24000518 	.word	0x24000518
 8003e5c:	24008008 	.word	0x24008008

08003e60 <vTaskEndScheduler>:
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
    __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	607b      	str	r3, [r7, #4]
}
 8003e78:	bf00      	nop
    xSchedulerRunning = pdFALSE;
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <vTaskEndScheduler+0x2c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8003e80:	f003 f896 	bl	8006fb0 <vPortEndScheduler>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	24000520 	.word	0x24000520

08003e90 <vTaskSuspendAll>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <vTaskSuspendAll+0x18>)
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	2400053c 	.word	0x2400053c

08003eac <xTaskResumeAll>:
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    configASSERT( uxSchedulerSuspended );
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xTaskResumeAll+0x2c>
    __asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <xTaskResumeAll+0x2a>
    taskENTER_CRITICAL();
 8003ed8:	f005 fef8 	bl	8009ccc <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee4:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <xTaskResumeAll+0x208>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80da 	bne.w	80040a4 <xTaskResumeAll+0x1f8>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ef0:	4b71      	ldr	r3, [pc, #452]	; (80040b8 <xTaskResumeAll+0x20c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80d5 	beq.w	80040a4 <xTaskResumeAll+0x1f8>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efa:	e0a4      	b.n	8004046 <xTaskResumeAll+0x19a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <xTaskResumeAll+0x210>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	3398      	adds	r3, #152	; 0x98
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <xTaskResumeAll+0x92>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	601a      	str	r2, [r3, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3384      	adds	r3, #132	; 0x84
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <xTaskResumeAll+0xde>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d904      	bls.n	8003fb4 <xTaskResumeAll+0x108>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb0:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <xTaskResumeAll+0x214>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fba:	4942      	ldr	r1, [pc, #264]	; (80040c4 <xTaskResumeAll+0x218>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	3284      	adds	r2, #132	; 0x84
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <xTaskResumeAll+0x218>)
 8004002:	441a      	add	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004010:	492c      	ldr	r1, [pc, #176]	; (80040c4 <xTaskResumeAll+0x218>)
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	4828      	ldr	r0, [pc, #160]	; (80040c4 <xTaskResumeAll+0x218>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <xTaskResumeAll+0x21c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <xTaskResumeAll+0x19a>
                        xYieldPending = pdTRUE;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <xTaskResumeAll+0x220>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <xTaskResumeAll+0x210>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f47f af56 	bne.w	8003efc <xTaskResumeAll+0x50>
                if( pxTCB != NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <xTaskResumeAll+0x1ae>
                    prvResetNextTaskUnblockTime();
 8004056:	f001 fffd 	bl	8006054 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskResumeAll+0x224>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <xTaskResumeAll+0x1dc>
                            if( xTaskIncrementTick() != pdFALSE )
 8004066:	f000 ff25 	bl	8004eb4 <xTaskIncrementTick>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <xTaskResumeAll+0x1ca>
                                xYieldPending = pdTRUE;
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <xTaskResumeAll+0x220>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3b01      	subs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f1      	bne.n	8004066 <xTaskResumeAll+0x1ba>
                        xPendedTicks = 0;
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <xTaskResumeAll+0x224>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <xTaskResumeAll+0x220>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <xTaskResumeAll+0x1f8>
                            xAlreadyYielded = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
                    taskYIELD_IF_USING_PREEMPTION();
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <xTaskResumeAll+0x228>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
 80040a4:	f005 fe30 	bl	8009d08 <vPortExitCritical>
    return xAlreadyYielded;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2400053c 	.word	0x2400053c
 80040b8:	24000514 	.word	0x24000514
 80040bc:	240004d4 	.word	0x240004d4
 80040c0:	2400051c 	.word	0x2400051c
 80040c4:	24000044 	.word	0x24000044
 80040c8:	24000040 	.word	0x24000040
 80040cc:	24000528 	.word	0x24000528
 80040d0:	24000524 	.word	0x24000524
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <xTaskGetTickCount>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <xTaskGetTickCount+0x1c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	607b      	str	r3, [r7, #4]
    return xTicks;
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	24000518 	.word	0x24000518

080040f8 <xTaskGetTickCountFromISR>:
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040fe:	f005 fe79 	bl	8009df4 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <xTaskGetTickCountFromISR+0x20>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	603b      	str	r3, [r7, #0]
    return xReturn;
 800410c:	683b      	ldr	r3, [r7, #0]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000518 	.word	0x24000518

0800411c <uxTaskGetNumberOfTasks>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <uxTaskGetNumberOfTasks+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	24000514 	.word	0x24000514

08004134 <pcTaskGetName>:
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <pcTaskGetName+0x14>
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <pcTaskGetName+0x44>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	e000      	b.n	800414a <pcTaskGetName+0x16>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <pcTaskGetName+0x34>
    __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	33b4      	adds	r3, #180	; 0xb4
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	24000040 	.word	0x24000040

0800417c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <uxTaskGetStackHighWaterMark+0x14>
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <uxTaskGetStackHighWaterMark+0x34>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e000      	b.n	8004192 <uxTaskGetStackHighWaterMark+0x16>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419a:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800419c:	6938      	ldr	r0, [r7, #16]
 800419e:	f001 ff3d 	bl	800601c <prvTaskCheckFreeStackSpace>
 80041a2:	4603      	mov	r3, r0
 80041a4:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	24000040 	.word	0x24000040

080041b4 <uxTaskGetSystemState>:
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	2338      	movs	r3, #56	; 0x38
 80041c6:	613b      	str	r3, [r7, #16]
        vTaskSuspendAll();
 80041c8:	f7ff fe62 	bl	8003e90 <vTaskSuspendAll>
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <uxTaskGetSystemState+0x104>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d368      	bcc.n	80042a8 <uxTaskGetSystemState+0xf4>
                    uxQueue--;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1898      	adds	r0, r3, r2
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <uxTaskGetSystemState+0x108>)
 80041f8:	4413      	add	r3, r2
 80041fa:	2201      	movs	r2, #1
 80041fc:	4619      	mov	r1, r3
 80041fe:	f001 febb 	bl	8005f78 <prvListTasksWithinSingleList>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e2      	bne.n	80041d6 <uxTaskGetSystemState+0x22>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <uxTaskGetSystemState+0x10c>)
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	2202      	movs	r2, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fea6 	bl	8005f78 <prvListTasksWithinSingleList>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <uxTaskGetSystemState+0x110>)
 8004246:	6811      	ldr	r1, [r2, #0]
 8004248:	2202      	movs	r2, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fe94 	bl	8005f78 <prvListTasksWithinSingleList>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	2204      	movs	r2, #4
 800426a:	4917      	ldr	r1, [pc, #92]	; (80042c8 <uxTaskGetSystemState+0x114>)
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fe83 	bl	8005f78 <prvListTasksWithinSingleList>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	2203      	movs	r2, #3
 800428c:	490f      	ldr	r1, [pc, #60]	; (80042cc <uxTaskGetSystemState+0x118>)
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fe72 	bl	8005f78 <prvListTasksWithinSingleList>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
                        if( pulTotalRunTime != NULL )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <uxTaskGetSystemState+0xf4>
                            *pulTotalRunTime = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
        ( void ) xTaskResumeAll();
 80042a8:	f7ff fe00 	bl	8003eac <xTaskResumeAll>
        return uxTask;
 80042ac:	697b      	ldr	r3, [r7, #20]
    }
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	24000514 	.word	0x24000514
 80042bc:	24000044 	.word	0x24000044
 80042c0:	240004cc 	.word	0x240004cc
 80042c4:	240004d0 	.word	0x240004d0
 80042c8:	240004e8 	.word	0x240004e8
 80042cc:	24000500 	.word	0x24000500

080042d0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08e      	sub	sp, #56	; 0x38
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042de:	2301      	movs	r3, #1
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d90a      	bls.n	80042fe <xTaskGenericNotify+0x2e>
    __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	623b      	str	r3, [r7, #32]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTaskGenericNotify+0x4a>
    __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800431e:	f005 fcd5 	bl	8009ccc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d841      	bhi.n	80043e0 <xTaskGenericNotify+0x110>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <xTaskGenericNotify+0x94>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	080043ff 	.word	0x080043ff
 8004368:	08004379 	.word	0x08004379
 800436c:	08004397 	.word	0x08004397
 8004370:	080043b3 	.word	0x080043b3
 8004374:	080043c3 	.word	0x080043c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	334c      	adds	r3, #76	; 0x4c
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	334c      	adds	r3, #76	; 0x4c
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	605a      	str	r2, [r3, #4]
                    break;
 8004394:	e036      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	334c      	adds	r3, #76	; 0x4c
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	334c      	adds	r3, #76	; 0x4c
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	605a      	str	r2, [r3, #4]
                    break;
 80043b0:	e028      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	334c      	adds	r3, #76	; 0x4c
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
                    break;
 80043c0:	e020      	b.n	8004404 <xTaskGenericNotify+0x134>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d007      	beq.n	80043da <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	334c      	adds	r3, #76	; 0x4c
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80043d8:	e014      	b.n	8004404 <xTaskGenericNotify+0x134>
                        xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80043de:	e011      	b.n	8004404 <xTaskGenericNotify+0x134>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80043e0:	4b56      	ldr	r3, [pc, #344]	; (800453c <xTaskGenericNotify+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <xTaskGenericNotify+0x132>
    __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xTaskGenericNotify+0x12c>
                    break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <xTaskGenericNotify+0x134>

                    break;
 8004402:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8090 	bne.w	800452e <xTaskGenericNotify+0x25e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	429a      	cmp	r2, r3
 800443c:	d104      	bne.n	8004448 <xTaskGenericNotify+0x178>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <xTaskGenericNotify+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d904      	bls.n	8004472 <xTaskGenericNotify+0x1a2>
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <xTaskGenericNotify+0x270>)
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004478:	4932      	ldr	r1, [pc, #200]	; (8004544 <xTaskGenericNotify+0x274>)
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	3284      	adds	r2, #132	; 0x84
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <xTaskGenericNotify+0x274>)
 80044c0:	441a      	add	r2, r3
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044ce:	491d      	ldr	r1, [pc, #116]	; (8004544 <xTaskGenericNotify+0x274>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	4819      	ldr	r0, [pc, #100]	; (8004544 <xTaskGenericNotify+0x274>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <xTaskGenericNotify+0x23c>
    __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	617b      	str	r3, [r7, #20]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskGenericNotify+0x23a>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <xTaskGenericNotify+0x278>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451a:	429a      	cmp	r2, r3
 800451c:	d907      	bls.n	800452e <xTaskGenericNotify+0x25e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <xTaskGenericNotify+0x27c>)
 8004520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800452e:	f005 fbeb 	bl	8009d08 <vPortExitCritical>

        return xReturn;
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004534:	4618      	mov	r0, r3
 8004536:	3738      	adds	r7, #56	; 0x38
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24000518 	.word	0x24000518
 8004540:	2400051c 	.word	0x2400051c
 8004544:	24000044 	.word	0x24000044
 8004548:	24000040 	.word	0x24000040
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b092      	sub	sp, #72	; 0x48
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800455e:	2301      	movs	r3, #1
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d90a      	bls.n	800459a <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459a:	f005 fc2b 	bl	8009df4 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile
 80045a2:	f3ef 8211 	mrs	r2, BASEPRI
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	623a      	str	r2, [r7, #32]
 80045b8:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 80045ba:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80045be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80045c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	334c      	adds	r3, #76	; 0x4c
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80045d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80045e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d841      	bhi.n	800467c <xTaskGenericNotifyFromISR+0x12c>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <xTaskGenericNotifyFromISR+0xb0>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	0800469b 	.word	0x0800469b
 8004604:	08004615 	.word	0x08004615
 8004608:	08004633 	.word	0x08004633
 800460c:	0800464f 	.word	0x0800464f
 8004610:	0800465f 	.word	0x0800465f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	334c      	adds	r3, #76	; 0x4c
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	334c      	adds	r3, #76	; 0x4c
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	605a      	str	r2, [r3, #4]
                    break;
 8004630:	e036      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	334c      	adds	r3, #76	; 0x4c
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	334c      	adds	r3, #76	; 0x4c
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	605a      	str	r2, [r3, #4]
                    break;
 800464c:	e028      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
                    break;
 800465c:	e020      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800465e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004662:	2b02      	cmp	r3, #2
 8004664:	d007      	beq.n	8004676 <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	334c      	adds	r3, #76	; 0x4c
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004674:	e014      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                        xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800467a:	e011      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800467c:	4b6b      	ldr	r3, [pc, #428]	; (800482c <xTaskGenericNotifyFromISR+0x2dc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <xTaskGenericNotifyFromISR+0x14e>
    __asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61bb      	str	r3, [r7, #24]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xTaskGenericNotifyFromISR+0x148>
                    break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <xTaskGenericNotifyFromISR+0x150>
                    break;
 800469e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 80b5 	bne.w	8004814 <xTaskGenericNotifyFromISR+0x2c4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <xTaskGenericNotifyFromISR+0x17a>
    __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	617b      	str	r3, [r7, #20]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ca:	4b59      	ldr	r3, [pc, #356]	; (8004830 <xTaskGenericNotifyFromISR+0x2e0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d16f      	bne.n	80047b2 <xTaskGenericNotifyFromISR+0x262>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	429a      	cmp	r2, r3
 8004700:	d104      	bne.n	800470c <xTaskGenericNotifyFromISR+0x1bc>
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d904      	bls.n	8004736 <xTaskGenericNotifyFromISR+0x1e6>
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004732:	4a40      	ldr	r2, [pc, #256]	; (8004834 <xTaskGenericNotifyFromISR+0x2e4>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800473c:	493e      	ldr	r1, [pc, #248]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3304      	adds	r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004766:	3284      	adds	r2, #132	; 0x84
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004776:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004784:	441a      	add	r2, r3
 8004786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004792:	4929      	ldr	r1, [pc, #164]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	4825      	ldr	r0, [pc, #148]	; (8004838 <xTaskGenericNotifyFromISR+0x2e8>)
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	e01e      	b.n	80047f0 <xTaskGenericNotifyFromISR+0x2a0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	3298      	adds	r2, #152	; 0x98
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <xTaskGenericNotifyFromISR+0x2ec>)
 80047ee:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <xTaskGenericNotifyFromISR+0x2f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047fe:	429a      	cmp	r2, r3
 8004800:	d908      	bls.n	8004814 <xTaskGenericNotifyFromISR+0x2c4>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <xTaskGenericNotifyFromISR+0x2be>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <xTaskGenericNotifyFromISR+0x2f4>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f383 8811 	msr	BASEPRI, r3
}
 800481e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8004822:	4618      	mov	r0, r3
 8004824:	3748      	adds	r7, #72	; 0x48
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	24000518 	.word	0x24000518
 8004830:	2400053c 	.word	0x2400053c
 8004834:	2400051c 	.word	0x2400051c
 8004838:	24000044 	.word	0x24000044
 800483c:	240004d4 	.word	0x240004d4
 8004840:	24000040 	.word	0x24000040
 8004844:	24000528 	.word	0x24000528

08004848 <xTaskGenericNotifyWait>:
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d90a      	bls.n	8004872 <xTaskGenericNotifyWait+0x2a>
    __asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskGenericNotifyWait+0x28>
        taskENTER_CRITICAL();
 8004872:	f005 fa2b 	bl	8009ccc <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d025      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	334c      	adds	r3, #76	; 0x4c
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	43db      	mvns	r3, r3
 800489c:	4019      	ands	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	334c      	adds	r3, #76	; 0x4c
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	6059      	str	r1, [r3, #4]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <xTaskGenericNotifyWait+0x8e>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048be:	2101      	movs	r1, #1
 80048c0:	6a38      	ldr	r0, [r7, #32]
 80048c2:	f001 fae5 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <xTaskGenericNotifyWait+0x10c>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 80048d6:	f005 fa17 	bl	8009d08 <vPortExitCritical>
        taskENTER_CRITICAL();
 80048da:	f005 f9f7 	bl	8009ccc <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <xTaskGenericNotifyWait+0xae>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	334c      	adds	r3, #76	; 0x4c
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <xTaskGenericNotifyWait+0xc8>
                xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e010      	b.n	8004932 <xTaskGenericNotifyWait+0xea>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	334c      	adds	r3, #76	; 0x4c
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	43db      	mvns	r3, r3
 8004922:	4019      	ands	r1, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	334c      	adds	r3, #76	; 0x4c
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800492e:	2301      	movs	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <xTaskGenericNotifyWait+0x108>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004942:	f005 f9e1 	bl	8009d08 <vPortExitCritical>
        return xReturn;
 8004946:	697b      	ldr	r3, [r7, #20]
    }
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	24000040 	.word	0x24000040
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b090      	sub	sp, #64	; 0x40
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <vTaskGenericNotifyGiveFromISR+0x28>
    __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d90a      	bls.n	800499c <vTaskGenericNotifyGiveFromISR+0x44>
    __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	623b      	str	r3, [r7, #32]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800499c:	f005 fa2a 	bl	8009df4 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile
 80049a4:	f3ef 8211 	mrs	r2, BASEPRI
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80049bc:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80049de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	334c      	adds	r3, #76	; 0x4c
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	334c      	adds	r3, #76	; 0x4c
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 80b5 	bne.w	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vTaskGenericNotifyGiveFromISR+0xca>
    __asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	617b      	str	r3, [r7, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vTaskGenericNotifyGiveFromISR+0xc8>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a22:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <vTaskGenericNotifyGiveFromISR+0x228>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d16f      	bne.n	8004b0a <vTaskGenericNotifyGiveFromISR+0x1b2>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	3384      	adds	r3, #132	; 0x84
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskGenericNotifyGiveFromISR+0x10c>
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a7c:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d904      	bls.n	8004a8e <vTaskGenericNotifyGiveFromISR+0x136>
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a8a:	4a3e      	ldr	r2, [pc, #248]	; (8004b84 <vTaskGenericNotifyGiveFromISR+0x22c>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a94:	493c      	ldr	r1, [pc, #240]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004abe:	3284      	adds	r2, #132	; 0x84
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004adc:	441a      	add	r2, r3
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004aea:	4927      	ldr	r1, [pc, #156]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	4823      	ldr	r0, [pc, #140]	; (8004b88 <vTaskGenericNotifyGiveFromISR+0x230>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4403      	add	r3, r0
 8004b06:	6019      	str	r1, [r3, #0]
 8004b08:	e01e      	b.n	8004b48 <vTaskGenericNotifyGiveFromISR+0x1f0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b28:	3298      	adds	r2, #152	; 0x98
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <vTaskGenericNotifyGiveFromISR+0x234>)
 8004b46:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <vTaskGenericNotifyGiveFromISR+0x238>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d908      	bls.n	8004b6c <vTaskGenericNotifyGiveFromISR+0x214>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <vTaskGenericNotifyGiveFromISR+0x20e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vTaskGenericNotifyGiveFromISR+0x23c>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f383 8811 	msr	BASEPRI, r3
}
 8004b76:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8004b78:	bf00      	nop
 8004b7a:	3740      	adds	r7, #64	; 0x40
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2400053c 	.word	0x2400053c
 8004b84:	2400051c 	.word	0x2400051c
 8004b88:	24000044 	.word	0x24000044
 8004b8c:	240004d4 	.word	0x240004d4
 8004b90:	24000040 	.word	0x24000040
 8004b94:	24000528 	.word	0x24000528

08004b98 <ulTaskGenericNotifyTake>:
    {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d90a      	bls.n	8004bc0 <ulTaskGenericNotifyTake+0x28>
    __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <ulTaskGenericNotifyTake+0x26>
        taskENTER_CRITICAL();
 8004bc0:	f005 f884 	bl	8009ccc <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	334c      	adds	r3, #76	; 0x4c
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <ulTaskGenericNotifyTake+0x6c>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bec:	2101      	movs	r1, #1
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 f94e 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <ulTaskGenericNotifyTake+0xd8>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8004c04:	f005 f880 	bl	8009d08 <vPortExitCritical>
        taskENTER_CRITICAL();
 8004c08:	f005 f860 	bl	8009ccc <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d014      	beq.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                if( xClearCountOnExit != pdFALSE )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <ulTaskGenericNotifyTake+0xa2>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	334c      	adds	r3, #76	; 0x4c
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	e008      	b.n	8004c4c <ulTaskGenericNotifyTake+0xb4>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	334c      	adds	r3, #76	; 0x4c
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	605a      	str	r2, [r3, #4]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <ulTaskGenericNotifyTake+0xd4>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8004c5c:	f005 f854 	bl	8009d08 <vPortExitCritical>
        return ulReturn;
 8004c60:	697b      	ldr	r3, [r7, #20]
    }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	24000040 	.word	0x24000040
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d90a      	bls.n	8004c9a <xTaskGenericNotifyStateClear+0x26>
    __asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60fb      	str	r3, [r7, #12]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xTaskGenericNotifyStateClear+0x32>
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTaskGenericNotifyStateClear+0x74>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <xTaskGenericNotifyStateClear+0x34>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 8004caa:	f005 f80f 	bl	8009ccc <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d109      	bne.n	8004cd4 <xTaskGenericNotifyStateClear+0x60>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e001      	b.n	8004cd8 <xTaskGenericNotifyStateClear+0x64>
            }
            else
            {
                xReturn = pdFAIL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8004cd8:	f005 f816 	bl	8009d08 <vPortExitCritical>

        return xReturn;
 8004cdc:	697b      	ldr	r3, [r7, #20]
    }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	24000040 	.word	0x24000040

08004cec <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <ulTaskGenericNotifyValueClear+0x18>
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <ulTaskGenericNotifyValueClear+0x5c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e000      	b.n	8004d06 <ulTaskGenericNotifyValueClear+0x1a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	617b      	str	r3, [r7, #20]

        taskENTER_CRITICAL();
 8004d08:	f004 ffe0 	bl	8009ccc <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	334c      	adds	r3, #76	; 0x4c
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	6979      	ldr	r1, [r7, #20]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	334c      	adds	r3, #76	; 0x4c
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	605a      	str	r2, [r3, #4]
        }
        taskEXIT_CRITICAL();
 8004d38:	f004 ffe6 	bl	8009d08 <vPortExitCritical>

        return ulReturn;
 8004d3c:	693b      	ldr	r3, [r7, #16]
    }
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	24000040 	.word	0x24000040

08004d4c <vTaskSetTimeOutState>:
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <vTaskSetTimeOutState+0x24>
    __asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60fb      	str	r3, [r7, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8004d70:	f004 ffac 	bl	8009ccc <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <vTaskSetTimeOutState+0x44>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <vTaskSetTimeOutState+0x48>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8004d84:	f004 ffc0 	bl	8009d08 <vPortExitCritical>
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	2400052c 	.word	0x2400052c
 8004d94:	24000518 	.word	0x24000518

08004d98 <xTaskCheckForTimeOut>:
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTaskCheckForTimeOut+0x26>
    __asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	613b      	str	r3, [r7, #16]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTaskCheckForTimeOut+0x42>
    __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCheckForTimeOut+0x40>
    taskENTER_CRITICAL();
 8004dda:	f004 ff77 	bl	8009ccc <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <xTaskCheckForTimeOut+0xc4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
            if( *pxTicksToWait == portMAX_DELAY )
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d102      	bne.n	8004dfe <xTaskCheckForTimeOut+0x66>
                xReturn = pdFALSE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e026      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <xTaskCheckForTimeOut+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00a      	beq.n	8004e20 <xTaskCheckForTimeOut+0x88>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d305      	bcc.n	8004e20 <xTaskCheckForTimeOut+0x88>
            xReturn = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e015      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20b      	bcs.n	8004e42 <xTaskCheckForTimeOut+0xaa>
            *pxTicksToWait -= xElapsedTime;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 ff30 	bl	8005c9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e004      	b.n	8004e4c <xTaskCheckForTimeOut+0xb4>
            *pxTicksToWait = ( TickType_t ) 0;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
    taskEXIT_CRITICAL();
 8004e4c:	f004 ff5c 	bl	8009d08 <vPortExitCritical>
    return xReturn;
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	24000518 	.word	0x24000518
 8004e60:	2400052c 	.word	0x2400052c

08004e64 <xTaskCatchUpTicks>:
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTaskCatchUpTicks+0x48>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <xTaskCatchUpTicks+0x26>
    __asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xTaskCatchUpTicks+0x24>
    vTaskSuspendAll();
 8004e8a:	f7ff f801 	bl	8003e90 <vTaskSuspendAll>
    xPendedTicks += xTicksToCatchUp;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <xTaskCatchUpTicks+0x4c>)
 8004e98:	6013      	str	r3, [r2, #0]
    xYieldOccurred = xTaskResumeAll();
 8004e9a:	f7ff f807 	bl	8003eac <xTaskResumeAll>
 8004e9e:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400053c 	.word	0x2400053c
 8004eb0:	24000524 	.word	0x24000524

08004eb4 <xTaskIncrementTick>:
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b8c      	ldr	r3, [pc, #560]	; (80050f0 <xTaskIncrementTick+0x23c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8109 	bne.w	80050da <xTaskIncrementTick+0x226>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	623b      	str	r3, [r7, #32]
        xTickCount = xConstTickCount;
 8004ed0:	4a88      	ldr	r2, [pc, #544]	; (80050f4 <xTaskIncrementTick+0x240>)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d120      	bne.n	8004f1e <xTaskIncrementTick+0x6a>
            taskSWITCH_DELAYED_LISTS();
 8004edc:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <xTaskIncrementTick+0x48>
    __asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	607b      	str	r3, [r7, #4]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskIncrementTick+0x46>
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	4b7e      	ldr	r3, [pc, #504]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7c      	ldr	r2, [pc, #496]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	; (80050fc <xTaskIncrementTick+0x248>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <xTaskIncrementTick+0x24c>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	f001 f89b 	bl	8006054 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f1e:	4b79      	ldr	r3, [pc, #484]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f0c0 80c2 	bcc.w	80050ae <xTaskIncrementTick+0x1fa>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <xTaskIncrementTick+0x8a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	4b73      	ldr	r3, [pc, #460]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3a:	601a      	str	r2, [r3, #0]
                    break;
 8004f3c:	e0b7      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b6e      	ldr	r3, [pc, #440]	; (80050f8 <xTaskIncrementTick+0x244>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	617b      	str	r3, [r7, #20]
                    if( xConstTickCount < xItemValue )
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d203      	bcs.n	8004f60 <xTaskIncrementTick+0xac>
                        xNextTaskUnblockTime = xItemValue;
 8004f58:	4a6a      	ldr	r2, [pc, #424]	; (8005104 <xTaskIncrementTick+0x250>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004f5e:	e0a6      	b.n	80050ae <xTaskIncrementTick+0x1fa>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3384      	adds	r3, #132	; 0x84
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <xTaskIncrementTick+0xe6>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	601a      	str	r2, [r3, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <xTaskIncrementTick+0x14e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3398      	adds	r3, #152	; 0x98
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d104      	bne.n	8004ff0 <xTaskIncrementTick+0x13c>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005008:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <xTaskIncrementTick+0x254>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d904      	bls.n	800501a <xTaskIncrementTick+0x166>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005016:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <xTaskIncrementTick+0x254>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005020:	493a      	ldr	r1, [pc, #232]	; (800510c <xTaskIncrementTick+0x258>)
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	3284      	adds	r2, #132	; 0x84
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <xTaskIncrementTick+0x258>)
 8005068:	441a      	add	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005076:	4925      	ldr	r1, [pc, #148]	; (800510c <xTaskIncrementTick+0x258>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	4821      	ldr	r0, [pc, #132]	; (800510c <xTaskIncrementTick+0x258>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <xTaskIncrementTick+0x25c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f4ff af41 	bcc.w	8004f2a <xTaskIncrementTick+0x76>
                                xSwitchRequired = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ac:	e73d      	b.n	8004f2a <xTaskIncrementTick+0x76>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <xTaskIncrementTick+0x25c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80050b6:	4915      	ldr	r1, [pc, #84]	; (800510c <xTaskIncrementTick+0x258>)
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d901      	bls.n	80050cc <xTaskIncrementTick+0x218>
                    xSwitchRequired = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
                if( xYieldPending != pdFALSE )
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xTaskIncrementTick+0x260>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xTaskIncrementTick+0x230>
                    xSwitchRequired = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	e004      	b.n	80050e4 <xTaskIncrementTick+0x230>
        ++xPendedTicks;
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <xTaskIncrementTick+0x264>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <xTaskIncrementTick+0x264>)
 80050e2:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2400053c 	.word	0x2400053c
 80050f4:	24000518 	.word	0x24000518
 80050f8:	240004cc 	.word	0x240004cc
 80050fc:	240004d0 	.word	0x240004d0
 8005100:	2400052c 	.word	0x2400052c
 8005104:	24000534 	.word	0x24000534
 8005108:	2400051c 	.word	0x2400051c
 800510c:	24000044 	.word	0x24000044
 8005110:	24000040 	.word	0x24000040
 8005114:	24000528 	.word	0x24000528
 8005118:	24000524 	.word	0x24000524

0800511c <vTaskPlaceOnEventList>:
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <vTaskPlaceOnEventList+0x26>
    __asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vTaskPlaceOnEventList+0x24>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vTaskPlaceOnEventList+0x44>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3398      	adds	r3, #152	; 0x98
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fc53 	bl	80009f6 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005150:	2101      	movs	r1, #1
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 fe9c 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	24000040 	.word	0x24000040

08005164 <vTaskPlaceOnUnorderedEventList>:
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vTaskPlaceOnUnorderedEventList+0x28>
    __asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	61bb      	str	r3, [r7, #24]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vTaskPlaceOnUnorderedEventList+0x26>
    configASSERT( uxSchedulerSuspended != 0 );
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <vTaskPlaceOnUnorderedEventList+0xac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <vTaskPlaceOnUnorderedEventList+0x46>
    __asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	617b      	str	r3, [r7, #20]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vTaskPlaceOnUnorderedEventList+0x44>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	6892      	ldr	r2, [r2, #8]
 80051d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	3298      	adds	r2, #152	; 0x98
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fe44 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005208:	bf00      	nop
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2400053c 	.word	0x2400053c
 8005214:	24000040 	.word	0x24000040

08005218 <vTaskPlaceOnEventListRestricted>:
    {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	613b      	str	r3, [r7, #16]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <vTaskPlaceOnEventListRestricted+0x26>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	3298      	adds	r2, #152	; 0x98
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]
        if( xWaitIndefinitely != pdFALSE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <vTaskPlaceOnEventListRestricted+0x7c>
            xTicksToWait = portMAX_DELAY;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005292:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	68b8      	ldr	r0, [r7, #8]
 8005298:	f000 fdfa 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
    }
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	24000040 	.word	0x24000040

080052a8 <xTaskRemoveFromEventList>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b08b      	sub	sp, #44	; 0x2c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60fb      	str	r3, [r7, #12]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	3398      	adds	r3, #152	; 0x98
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <xTaskRemoveFromEventList+0x66>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1e5a      	subs	r2, r3, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <xTaskRemoveFromEventList+0x1d0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d16f      	bne.n	8005408 <xTaskRemoveFromEventList+0x160>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	3384      	adds	r3, #132	; 0x84
 8005354:	429a      	cmp	r2, r3
 8005356:	d104      	bne.n	8005362 <xTaskRemoveFromEventList+0xba>
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d904      	bls.n	800538c <xTaskRemoveFromEventList+0xe4>
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005388:	4a3c      	ldr	r2, [pc, #240]	; (800547c <xTaskRemoveFromEventList+0x1d4>)
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005392:	493b      	ldr	r1, [pc, #236]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	3284      	adds	r2, #132	; 0x84
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053da:	441a      	add	r2, r3
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053e8:	4925      	ldr	r1, [pc, #148]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	4821      	ldr	r0, [pc, #132]	; (8005480 <xTaskRemoveFromEventList+0x1d8>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4403      	add	r3, r0
 8005404:	6019      	str	r1, [r3, #0]
 8005406:	e01e      	b.n	8005446 <xTaskRemoveFromEventList+0x19e>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	3298      	adds	r2, #152	; 0x98
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005438:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <xTaskRemoveFromEventList+0x1dc>)
 8005444:	6013      	str	r3, [r2, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <xTaskRemoveFromEventList+0x1e0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005454:	429a      	cmp	r2, r3
 8005456:	d905      	bls.n	8005464 <xTaskRemoveFromEventList+0x1bc>
        xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
        xYieldPending = pdTRUE;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <xTaskRemoveFromEventList+0x1e4>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e001      	b.n	8005468 <xTaskRemoveFromEventList+0x1c0>
        xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
    return xReturn;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800546a:	4618      	mov	r0, r3
 800546c:	372c      	adds	r7, #44	; 0x2c
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2400053c 	.word	0x2400053c
 800547c:	2400051c 	.word	0x2400051c
 8005480:	24000044 	.word	0x24000044
 8005484:	240004d4 	.word	0x240004d4
 8005488:	24000040 	.word	0x24000040
 800548c:	24000528 	.word	0x24000528

08005490 <vTaskRemoveFromUnorderedEventList>:
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <vTaskRemoveFromUnorderedEventList+0x194>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vTaskRemoveFromUnorderedEventList+0x28>
    __asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60fb      	str	r3, [r7, #12]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskRemoveFromUnorderedEventList+0x26>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <vTaskRemoveFromUnorderedEventList+0x54>
    __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d103      	bne.n	8005510 <vTaskRemoveFromUnorderedEventList+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	601a      	str	r2, [r3, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3384      	adds	r3, #132	; 0x84
 800554c:	429a      	cmp	r2, r3
 800554e:	d104      	bne.n	800555a <vTaskRemoveFromUnorderedEventList+0xca>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1e5a      	subs	r2, r3, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005572:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d904      	bls.n	8005584 <vTaskRemoveFromUnorderedEventList+0xf4>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <vTaskRemoveFromUnorderedEventList+0x198>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800558a:	4928      	ldr	r1, [pc, #160]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3304      	adds	r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	3284      	adds	r2, #132	; 0x84
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055d2:	441a      	add	r2, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80055e0:	4912      	ldr	r1, [pc, #72]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	480e      	ldr	r0, [pc, #56]	; (800562c <vTaskRemoveFromUnorderedEventList+0x19c>)
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4403      	add	r3, r0
 80055fc:	6019      	str	r1, [r3, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <vTaskRemoveFromUnorderedEventList+0x1a0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800560c:	429a      	cmp	r2, r3
 800560e:	d902      	bls.n	8005616 <vTaskRemoveFromUnorderedEventList+0x186>
        xYieldPending = pdTRUE;
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <vTaskRemoveFromUnorderedEventList+0x1a4>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2400053c 	.word	0x2400053c
 8005628:	2400051c 	.word	0x2400051c
 800562c:	24000044 	.word	0x24000044
 8005630:	24000040 	.word	0x24000040
 8005634:	24000528 	.word	0x24000528

08005638 <vTaskSwitchContext>:
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <vTaskSwitchContext+0xfc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <vTaskSwitchContext+0x100>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	e06e      	b.n	800572c <vTaskSwitchContext+0xf4>
        xYieldPending = pdFALSE;
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <vTaskSwitchContext+0x100>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <vTaskSwitchContext+0x104>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d111      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3304      	adds	r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d10b      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3308      	adds	r3, #8
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d105      	bne.n	8005692 <vTaskSwitchContext+0x5a>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	330c      	adds	r3, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	429a      	cmp	r2, r3
 8005690:	d008      	beq.n	80056a4 <vTaskSwitchContext+0x6c>
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <vTaskSwitchContext+0x104>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <vTaskSwitchContext+0x104>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	33b4      	adds	r3, #180	; 0xb4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f004 fc59 	bl	8009f56 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <vTaskSwitchContext+0x108>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e010      	b.n	80056ce <vTaskSwitchContext+0x96>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <vTaskSwitchContext+0x90>
    __asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	607b      	str	r3, [r7, #4]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vTaskSwitchContext+0x8e>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	491d      	ldr	r1, [pc, #116]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e4      	beq.n	80056ac <vTaskSwitchContext+0x74>
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <vTaskSwitchContext+0x10c>)
 80056ee:	4413      	add	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3308      	adds	r3, #8
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <vTaskSwitchContext+0xda>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <vTaskSwitchContext+0x104>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <vTaskSwitchContext+0x108>)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <vTaskSwitchContext+0x104>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	33d4      	adds	r3, #212	; 0xd4
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <vTaskSwitchContext+0x110>)
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2400053c 	.word	0x2400053c
 8005738:	24000528 	.word	0x24000528
 800573c:	24000040 	.word	0x24000040
 8005740:	2400051c 	.word	0x2400051c
 8005744:	24000044 	.word	0x24000044
 8005748:	24008168 	.word	0x24008168

0800574c <uxTaskResetEventItemValue>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <uxTaskResetEventItemValue+0x34>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800576c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    return uxReturn;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	24000040 	.word	0x24000040

08005784 <xTaskGetCurrentTaskHandle>:
    {
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	607b      	str	r3, [r7, #4]
        return xReturn;
 8005790:	687b      	ldr	r3, [r7, #4]
    }
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	24000040 	.word	0x24000040

080057a4 <vTaskMissedYield>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <vTaskMissedYield+0x14>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	24000528 	.word	0x24000528

080057bc <xTaskGetSchedulerState>:
    {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
        return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
    }
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	24000520 	.word	0x24000520
 80057f4:	2400053c 	.word	0x2400053c

080057f8 <xTaskPriorityInherit>:
    {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8090 	beq.w	8005930 <xTaskPriorityInherit+0x138>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <xTaskPriorityInherit+0x144>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800581e:	429a      	cmp	r2, r3
 8005820:	d27b      	bcs.n	800591a <xTaskPriorityInherit+0x122>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005828:	2b00      	cmp	r3, #0
 800582a:	db08      	blt.n	800583e <xTaskPriorityInherit+0x46>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582c:	4b43      	ldr	r3, [pc, #268]	; (800593c <xTaskPriorityInherit+0x144>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005854:	4413      	add	r3, r2
 8005856:	4299      	cmp	r1, r3
 8005858:	d155      	bne.n	8005906 <xTaskPriorityInherit+0x10e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3384      	adds	r3, #132	; 0x84
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb f926 	bl	8000ab0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <xTaskPriorityInherit+0x144>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <xTaskPriorityInherit+0x14c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d904      	bls.n	800588a <xTaskPriorityInherit+0x92>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005886:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <xTaskPriorityInherit+0x14c>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005890:	492b      	ldr	r1, [pc, #172]	; (8005940 <xTaskPriorityInherit+0x148>)
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	3284      	adds	r2, #132	; 0x84
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058d8:	441a      	add	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	4812      	ldr	r0, [pc, #72]	; (8005940 <xTaskPriorityInherit+0x148>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4403      	add	r3, r0
 8005902:	6019      	str	r1, [r3, #0]
 8005904:	e006      	b.n	8005914 <xTaskPriorityInherit+0x11c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <xTaskPriorityInherit+0x144>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e00a      	b.n	8005930 <xTaskPriorityInherit+0x138>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <xTaskPriorityInherit+0x144>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005928:	429a      	cmp	r2, r3
 800592a:	d201      	bcs.n	8005930 <xTaskPriorityInherit+0x138>
                    xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
    }
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	24000040 	.word	0x24000040
 8005940:	24000044 	.word	0x24000044
 8005944:	2400051c 	.word	0x2400051c

08005948 <xTaskPriorityDisinherit>:
    {
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8092 	beq.w	8005a84 <xTaskPriorityDisinherit+0x13c>
            configASSERT( pxTCB == pxCurrentTCB );
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <xTaskPriorityDisinherit+0x148>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d00a      	beq.n	8005980 <xTaskPriorityDisinherit+0x38>
    __asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	613b      	str	r3, [r7, #16]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskPriorityDisinherit+0x58>
    __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d062      	beq.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d15d      	bne.n	8005a84 <xTaskPriorityDisinherit+0x13c>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3384      	adds	r3, #132	; 0x84
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fb f86f 	bl	8000ab0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    prvAddTaskToReadyList( pxTCB );
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d904      	bls.n	8005a06 <xTaskPriorityDisinherit+0xbe>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a02:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <xTaskPriorityDisinherit+0x14c>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a0c:	4922      	ldr	r1, [pc, #136]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	3304      	adds	r3, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	3284      	adds	r2, #132	; 0x84
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a54:	441a      	add	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a62:	490d      	ldr	r1, [pc, #52]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	4809      	ldr	r0, [pc, #36]	; (8005a98 <xTaskPriorityDisinherit+0x150>)
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4403      	add	r3, r0
 8005a7e:	6019      	str	r1, [r3, #0]
                    xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
        return xReturn;
 8005a84:	69fb      	ldr	r3, [r7, #28]
    }
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	24000040 	.word	0x24000040
 8005a94:	2400051c 	.word	0x2400051c
 8005a98:	24000044 	.word	0x24000044

08005a9c <vTaskPriorityDisinheritAfterTimeout>:
    {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	623b      	str	r3, [r7, #32]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
        if( pxMutexHolder != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a7 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
            configASSERT( pxTCB->uxMutexesHeld );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <vTaskPriorityDisinheritAfterTimeout+0x38>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d902      	bls.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	e003      	b.n	8005af0 <vTaskPriorityDisinheritAfterTimeout+0x54>
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	f000 8083 	beq.w	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d17c      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                    configASSERT( pxTCB != pxCurrentTCB );
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d10a      	bne.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0x8e>
    __asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <vTaskPriorityDisinheritAfterTimeout+0x8c>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b30:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db05      	blt.n	8005b50 <vTaskPriorityDisinheritAfterTimeout+0xb4>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b62:	4413      	add	r3, r2
 8005b64:	4299      	cmp	r1, r3
 8005b66:	d14d      	bne.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x168>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	3384      	adds	r3, #132	; 0x84
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa ff9f 	bl	8000ab0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b78:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d904      	bls.n	8005b8a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005b90:	491f      	ldr	r1, [pc, #124]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	3284      	adds	r2, #132	; 0x84
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005be6:	490a      	ldr	r1, [pc, #40]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	4806      	ldr	r0, [pc, #24]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4403      	add	r3, r0
 8005c02:	6019      	str	r1, [r3, #0]
    }
 8005c04:	bf00      	nop
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	24000040 	.word	0x24000040
 8005c10:	24000044 	.word	0x24000044
 8005c14:	2400051c 	.word	0x2400051c

08005c18 <uxTaskGetTaskNumber>:
    {
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
        if( xTask != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <uxTaskGetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e001      	b.n	8005c38 <uxTaskGetTaskNumber+0x20>
            uxReturn = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
        return uxReturn;
 8005c38:	68fb      	ldr	r3, [r7, #12]
    }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <vTaskSetTaskNumber>:
    {
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
        if( xTask != NULL )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <vTaskSetTaskNumber+0x1c>
            pxTCB = xTask;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    }
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <pvTaskIncrementMutexHeldCount>:
    {
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <pvTaskIncrementMutexHeldCount+0x1a>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005c82:	3201      	adds	r2, #1
 8005c84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        return pxCurrentTCB;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <pvTaskIncrementMutexHeldCount+0x2a>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
    }
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	24000040 	.word	0x24000040

08005c9c <vTaskInternalSetTimeOutState>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <vTaskInternalSetTimeOutState+0x24>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <vTaskInternalSetTimeOutState+0x28>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	2400052c 	.word	0x2400052c
 8005cc4:	24000518 	.word	0x24000518

08005cc8 <prvTaskIsTaskSuspended>:
    {
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
        configASSERT( xTask );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <prvTaskIsTaskSuspended+0x2a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfa:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <prvTaskIsTaskSuspended+0x60>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <prvTaskIsTaskSuspended+0x64>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d006      	beq.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <prvTaskIsTaskSuspended+0x52>
                    xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
        return xReturn;
 8005d1a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	24000500 	.word	0x24000500
 8005d2c:	240004d4 	.word	0x240004d4

08005d30 <prvInitialiseTaskLists>:
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	e00c      	b.n	8005d56 <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <prvInitialiseTaskLists+0x60>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fe26 	bl	800099c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3301      	adds	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b37      	cmp	r3, #55	; 0x37
 8005d5a:	d9ef      	bls.n	8005d3c <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d5e:	f7fa fe1d 	bl	800099c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005d62:	480d      	ldr	r0, [pc, #52]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d64:	f7fa fe1a 	bl	800099c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x6c>)
 8005d6a:	f7fa fe17 	bl	800099c <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8005d6e:	480c      	ldr	r0, [pc, #48]	; (8005da0 <prvInitialiseTaskLists+0x70>)
 8005d70:	f7fa fe14 	bl	800099c <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <prvInitialiseTaskLists+0x74>)
 8005d76:	f7fa fe11 	bl	800099c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <prvInitialiseTaskLists+0x78>)
 8005d7c:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvInitialiseTaskLists+0x7c>)
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	24000044 	.word	0x24000044
 8005d94:	240004a4 	.word	0x240004a4
 8005d98:	240004b8 	.word	0x240004b8
 8005d9c:	240004d4 	.word	0x240004d4
 8005da0:	240004e8 	.word	0x240004e8
 8005da4:	24000500 	.word	0x24000500
 8005da8:	240004cc 	.word	0x240004cc
 8005dac:	240004d0 	.word	0x240004d0

08005db0 <prvIdleTask>:
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 8005db8:	f000 f83d 	bl	8005e36 <prvCheckTasksWaitingTermination>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <prvIdleTask+0x18>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d9f9      	bls.n	8005db8 <prvIdleTask+0x8>
                    taskYIELD();
 8005dc4:	df01      	svc	1
        prvCheckTasksWaitingTermination();
 8005dc6:	e7f7      	b.n	8005db8 <prvIdleTask+0x8>
 8005dc8:	24000044 	.word	0x24000044

08005dcc <prvDeleteTCB>:
    {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	33d4      	adds	r3, #212	; 0xd4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f015 fd59 	bl	801b890 <_reclaim_reent>
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <prvDeleteTCB+0x30>
                    vPortFreeStack( pxTCB->pxStack );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fc48 	bl	8007684 <vPortFree>
                    vPortFree( pxTCB );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fc45 	bl	8007684 <vPortFree>
    }
 8005dfa:	e018      	b.n	8005e2e <prvDeleteTCB+0x62>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d103      	bne.n	8005e0e <prvDeleteTCB+0x42>
                    vPortFree( pxTCB );
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc3c 	bl	8007684 <vPortFree>
    }
 8005e0c:	e00f      	b.n	8005e2e <prvDeleteTCB+0x62>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d00a      	beq.n	8005e2e <prvDeleteTCB+0x62>
    __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <prvDeleteTCB+0x60>
    }
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvCheckTasksWaitingTermination>:
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e3c:	e019      	b.n	8005e72 <prvCheckTasksWaitingTermination+0x3c>
                taskENTER_CRITICAL();
 8005e3e:	f003 ff45 	bl	8009ccc <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <prvCheckTasksWaitingTermination+0x4e>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3384      	adds	r3, #132	; 0x84
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fe2e 	bl	8000ab0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <prvCheckTasksWaitingTermination+0x52>)
 8005e5c:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e66:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 8005e68:	f003 ff4e 	bl	8009d08 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ffad 	bl	8005dcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <prvCheckTasksWaitingTermination+0x56>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <prvCheckTasksWaitingTermination+0x8>
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	240004e8 	.word	0x240004e8
 8005e88:	24000514 	.word	0x24000514
 8005e8c:	240004fc 	.word	0x240004fc

08005e90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xd0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3384      	adds	r3, #132	; 0x84
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fe02 	bl	8000ab0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb2:	d128      	bne.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d025      	beq.n	8005f06 <prvAddCurrentTaskToDelayedList+0x76>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005ed6:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	3284      	adds	r2, #132	; 0x84
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005f04:	e027      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                if( xTimeToWake < xConstTickCount )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d209      	bcs.n	8005f34 <prvAddCurrentTaskToDelayedList+0xa4>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fa fd62 	bl	80009f6 <vListInsert>
}
 8005f32:	e010      	b.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fa fd58 	bl	80009f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d202      	bcs.n	8005f56 <prvAddCurrentTaskToDelayedList+0xc6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	24000518 	.word	0x24000518
 8005f64:	24000040 	.word	0x24000040
 8005f68:	24000500 	.word	0x24000500
 8005f6c:	240004d0 	.word	0x240004d0
 8005f70:	240004cc 	.word	0x240004cc
 8005f74:	24000534 	.word	0x24000534

08005f78 <prvListTasksWithinSingleList>:
    {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03f      	beq.n	8006012 <prvListTasksWithinSingleList+0x9a>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d104      	bne.n	8005fb6 <prvListTasksWithinSingleList+0x3e>
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	61fb      	str	r3, [r7, #28]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <prvListTasksWithinSingleList+0x6a>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1899      	adds	r1, r3, r2
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7fd fbb2 	bl	8003768 <vTaskGetInfo>
                uxTask++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
            } while( pxNextTCB != pxFirstTCB );
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d1d5      	bne.n	8005fbe <prvListTasksWithinSingleList+0x46>
        return uxTask;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvTaskCheckFreeStackSpace>:
    {
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006028:	e005      	b.n	8006036 <prvTaskCheckFreeStackSpace+0x1a>
            pucStackByte -= portSTACK_GROWTH;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3301      	adds	r3, #1
 800602e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2ba5      	cmp	r3, #165	; 0xa5
 800603c:	d0f5      	beq.n	800602a <prvTaskCheckFreeStackSpace+0xe>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	60fb      	str	r3, [r7, #12]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	b29b      	uxth	r3, r3
    }
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <prvResetNextTaskUnblockTime>:
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	e005      	b.n	8006078 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <prvResetNextTaskUnblockTime+0x30>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <prvResetNextTaskUnblockTime+0x34>)
 8006076:	6013      	str	r3, [r2, #0]
}
 8006078:	bf00      	nop
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	240004cc 	.word	0x240004cc
 8006088:	24000534 	.word	0x24000534

0800608c <prvInitialiseNewTask>:
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2b00      	cmp	r3, #0
 800609e:	da02      	bge.n	80060a6 <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	e001      	b.n	80060aa <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
        uxPriority &= ~portPRIVILEGE_BIT;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	21a5      	movs	r1, #165	; 0xa5
 80060c0:	f015 fa62 	bl	801b588 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80060d0:	440b      	add	r3, r1
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	61fb      	str	r3, [r7, #28]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	61fb      	str	r3, [r7, #28]
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <prvInitialiseNewTask+0x74>
    __asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61bb      	str	r3, [r7, #24]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <prvInitialiseNewTask+0x72>
    if( pcName != NULL )
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01f      	beq.n	8006146 <prvInitialiseNewTask+0xba>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e012      	b.n	8006132 <prvInitialiseNewTask+0xa6>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	4413      	add	r3, r2
 8006112:	7819      	ldrb	r1, [r3, #0]
 8006114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	4413      	add	r3, r2
 800611a:	33b4      	adds	r3, #180	; 0xb4
 800611c:	460a      	mov	r2, r1
 800611e:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <prvInitialiseNewTask+0xae>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d9e9      	bls.n	800610c <prvInitialiseNewTask+0x80>
 8006138:	e000      	b.n	800613c <prvInitialiseNewTask+0xb0>
                break;
 800613a:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	2200      	movs	r2, #0
 8006140:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8006144:	e003      	b.n	800614e <prvInitialiseNewTask+0xc2>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2200      	movs	r2, #0
 800614a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b37      	cmp	r3, #55	; 0x37
 8006152:	d90a      	bls.n	800616a <prvInitialiseNewTask+0xde>
    __asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	617b      	str	r3, [r7, #20]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <prvInitialiseNewTask+0xdc>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b37      	cmp	r3, #55	; 0x37
 800616e:	d901      	bls.n	8006174 <prvInitialiseNewTask+0xe8>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006170:	2337      	movs	r3, #55	; 0x37
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
    pxNewTCB->uxPriority = uxPriority;
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            pxNewTCB->uxBasePriority = uxPriority;
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            pxNewTCB->uxMutexesHeld = 0;
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	3384      	adds	r3, #132	; 0x84
 8006190:	4618      	mov	r0, r3
 8006192:	f7fa fc23 	bl	80009dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	3398      	adds	r3, #152	; 0x98
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fc1e 	bl	80009dc <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ca:	f000 ff0d 	bl	8006fe8 <vPortStoreTaskMPUSettings>
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80061d4:	220c      	movs	r2, #12
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f015 f9d5 	bl	801b588 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061e4:	2203      	movs	r2, #3
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f015 f9cd 	bl	801b588 <memset>
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	33d4      	adds	r3, #212	; 0xd4
 80061f2:	2260      	movs	r2, #96	; 0x60
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f015 f9c6 	bl	801b588 <memset>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	4a0f      	ldr	r2, [pc, #60]	; (800623c <prvInitialiseNewTask+0x1b0>)
 8006200:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	4a0e      	ldr	r2, [pc, #56]	; (8006240 <prvInitialiseNewTask+0x1b4>)
 8006208:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <prvInitialiseNewTask+0x1b8>)
 8006210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	69f8      	ldr	r0, [r7, #28]
 800621c:	f000 fe00 	bl	8006e20 <pxPortInitialiseStack>
 8006220:	4602      	mov	r2, r0
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <prvInitialiseNewTask+0x1a6>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006230:	601a      	str	r2, [r3, #0]
}
 8006232:	bf00      	nop
 8006234:	3728      	adds	r7, #40	; 0x28
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	24008534 	.word	0x24008534
 8006240:	24008554 	.word	0x24008554
 8006244:	24008514 	.word	0x24008514

08006248 <prvAddNewTaskToReadyList>:
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8006250:	f003 fd3c 	bl	8009ccc <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8006254:	4b48      	ldr	r3, [pc, #288]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	4a47      	ldr	r2, [pc, #284]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800625c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8006266:	4a45      	ldr	r2, [pc, #276]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <prvAddNewTaskToReadyList+0x130>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d112      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                prvInitialiseTaskLists();
 8006274:	f7ff fd5c 	bl	8005d30 <prvInitialiseTaskLists>
 8006278:	e00f      	b.n	800629a <prvAddNewTaskToReadyList+0x52>
            if( xSchedulerRunning == pdFALSE )
 800627a:	4b41      	ldr	r3, [pc, #260]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <prvAddNewTaskToReadyList+0x52>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006290:	429a      	cmp	r2, r3
 8006292:	d802      	bhi.n	800629a <prvAddNewTaskToReadyList+0x52>
                    pxCurrentTCB = pxNewTCB;
 8006294:	4a39      	ldr	r2, [pc, #228]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 800629a:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	4a38      	ldr	r2, [pc, #224]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062a4:	4b37      	ldr	r3, [pc, #220]	; (8006384 <prvAddNewTaskToReadyList+0x13c>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        prvAddTaskToReadyList( pxNewTCB );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062b4:	4b34      	ldr	r3, [pc, #208]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d904      	bls.n	80062c6 <prvAddNewTaskToReadyList+0x7e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062c2:	4a31      	ldr	r2, [pc, #196]	; (8006388 <prvAddNewTaskToReadyList+0x140>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062cc:	492f      	ldr	r1, [pc, #188]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3304      	adds	r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	3284      	adds	r2, #132	; 0x84
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006322:	491a      	ldr	r1, [pc, #104]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	4816      	ldr	r0, [pc, #88]	; (800638c <prvAddNewTaskToReadyList+0x144>)
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4403      	add	r3, r0
 800633e:	6019      	str	r1, [r3, #0]
    taskEXIT_CRITICAL();
 8006340:	f003 fce2 	bl	8009d08 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <prvAddNewTaskToReadyList+0x138>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <prvAddNewTaskToReadyList+0x126>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvAddNewTaskToReadyList+0x134>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800635a:	429a      	cmp	r2, r3
 800635c:	d207      	bcs.n	800636e <prvAddNewTaskToReadyList+0x126>
            taskYIELD_IF_USING_PREEMPTION();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <prvAddNewTaskToReadyList+0x148>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	24000514 	.word	0x24000514
 800637c:	24000040 	.word	0x24000040
 8006380:	24000520 	.word	0x24000520
 8006384:	24000530 	.word	0x24000530
 8006388:	2400051c 	.word	0x2400051c
 800638c:	24000044 	.word	0x24000044
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80063a2:	202c      	movs	r0, #44	; 0x2c
 80063a4:	f001 f88a 	bl	80074bc <pvPortMalloc>
 80063a8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fcf2 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80063cc:	697b      	ldr	r3, [r7, #20]
        }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08a      	sub	sp, #40	; 0x28
 80063da:	af02      	add	r7, sp, #8
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticTimer_t equals the size of the real timer
                     * structure. */
                    volatile size_t xSize = sizeof( StaticTimer_t );
 80063e4:	232c      	movs	r3, #44	; 0x2c
 80063e6:	613b      	str	r3, [r7, #16]
                    configASSERT( xSize == sizeof( Timer_t ) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b2c      	cmp	r3, #44	; 0x2c
 80063ec:	d00a      	beq.n	8006404 <xTimerCreateStatic+0x2e>
    __asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTimerCreateStatic+0x2c>
                    ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006404:	693b      	ldr	r3, [r7, #16]
                }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTimerCreateStatic+0x4c>
    __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTimerCreateStatic+0x4a>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fcb4 	bl	8006db0 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006448:	69fb      	ldr	r3, [r7, #28]
        }
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <pvTimerGetTimerID+0x28>
    __asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800647a:	f003 fc27 	bl	8009ccc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006484:	f003 fc40 	bl	8009d08 <vPortExitCritical>

        return pvReturn;
 8006488:	693b      	ldr	r3, [r7, #16]
    }
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <vTimerSetTimerID+0x2a>
    __asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 80064bc:	f003 fc06 	bl	8009ccc <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 80064c6:	f003 fc1f 	bl	8009d08 <vPortExitCritical>
    }
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <xTimerIsTimerActive>:
    {
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xTimerIsTimerActive+0x28>
    __asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTimerIsTimerActive+0x26>
        taskENTER_CRITICAL();
 80064fa:	f003 fbe7 	bl	8009ccc <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTimerIsTimerActive+0x40>
                xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e001      	b.n	8006516 <xTimerIsTimerActive+0x44>
                xReturn = pdTRUE;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 8006516:	f003 fbf7 	bl	8009d08 <vPortExitCritical>
        return xReturn;
 800651a:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTimerGetTimerDaemonTaskHandle>:
    {
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTimerGetTimerDaemonTaskHandle+0x24>
    __asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTimerGetTimerDaemonTaskHandle+0x22>
        return xTimerTaskHandle;
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <xTimerGetTimerDaemonTaskHandle+0x34>)
 800654a:	681b      	ldr	r3, [r3, #0]
    }
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	24000574 	.word	0x24000574

0800655c <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800656a:	f06f 0301 	mvn.w	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xTimerPendFunctionCallFromISR+0x3c>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f107 0114 	add.w	r1, r7, #20
 8006584:	2300      	movs	r3, #0
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	f7fa fe48 	bl	800121c <xQueueGenericSendFromISR>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	24000570 	.word	0x24000570

0800659c <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <xTimerPendFunctionCall+0x2c>
    __asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xTimerPendFunctionCall+0x2a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065cc:	613b      	str	r3, [r7, #16]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	61fb      	str	r3, [r7, #28]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <xTimerPendFunctionCall+0x5c>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f107 0110 	add.w	r1, r7, #16
 80065e2:	2300      	movs	r3, #0
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f7fa fa8d 	bl	8000b04 <xQueueGenericSend>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	24000570 	.word	0x24000570

080065fc <pcTimerGetName>:
    {
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <pcTimerGetName+0x28>
    __asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <pcTimerGetName+0x26>
        return pxTimer->pcTimerName;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
    }
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <vTimerSetReloadMode>:
    {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <vTimerSetReloadMode+0x2a>
    __asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60bb      	str	r3, [r7, #8]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 800665e:	f003 fb35 	bl	8009ccc <vPortEnterCritical>
            if( uxAutoReload != pdFALSE )
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <vTimerSetReloadMode+0x48>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800667a:	e008      	b.n	800668e <vTimerSetReloadMode+0x5a>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006682:	f023 0304 	bic.w	r3, r3, #4
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        taskEXIT_CRITICAL();
 800668e:	f003 fb3b 	bl	8009d08 <vPortExitCritical>
    }
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <uxTimerGetReloadMode>:
    {
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        configASSERT( xTimer );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <uxTimerGetReloadMode+0x28>
    __asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	60fb      	str	r3, [r7, #12]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <uxTimerGetReloadMode+0x26>
        taskENTER_CRITICAL();
 80066c2:	f003 fb03 	bl	8009ccc <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <uxTimerGetReloadMode+0x40>
                uxReturn = ( UBaseType_t ) pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e001      	b.n	80066de <uxTimerGetReloadMode+0x44>
                uxReturn = ( UBaseType_t ) pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
        taskEXIT_CRITICAL();
 80066de:	f003 fb13 	bl	8009d08 <vPortExitCritical>
        return uxReturn;
 80066e2:	697b      	ldr	r3, [r7, #20]
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xTimerGetPeriod>:
    {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTimerGetPeriod+0x28>
    __asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTimerGetPeriod+0x26>
        return pxTimer->xTimerPeriodInTicks;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	699b      	ldr	r3, [r3, #24]
    }
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <xTimerGetExpiryTime>:
    {
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	617b      	str	r3, [r7, #20]
        configASSERT( xTimer );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <xTimerGetExpiryTime+0x28>
    __asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]
        return xReturn;
 8006752:	693b      	ldr	r3, [r7, #16]
    }
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <xTimerCreateTimerTask>:
    {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
        prvCheckForValidListAndQueue();
 800676a:	f000 f8ab 	bl	80068c4 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800676e:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <xTimerCreateTimerTask+0x80>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d021      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800677e:	1d3a      	adds	r2, r7, #4
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	f107 030c 	add.w	r3, r7, #12
 8006788:	4618      	mov	r0, r3
 800678a:	f003 fc07 	bl	8009f9c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <xTimerCreateTimerTask+0x84>)
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	460a      	mov	r2, r1
 80067a0:	4911      	ldr	r1, [pc, #68]	; (80067e8 <xTimerCreateTimerTask+0x88>)
 80067a2:	4812      	ldr	r0, [pc, #72]	; (80067ec <xTimerCreateTimerTask+0x8c>)
 80067a4:	f7fc fccb 	bl	800313e <xTaskCreateStatic>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067ac:	6013      	str	r3, [r2, #0]
                    if( xTimerTaskHandle != NULL )
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTimerCreateTimerTask+0x5a>
                        xReturn = pdPASS;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
        configASSERT( xReturn );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xTimerCreateTimerTask+0x76>
    __asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80067d6:	697b      	ldr	r3, [r7, #20]
    }
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	24000570 	.word	0x24000570
 80067e4:	80000002 	.word	0x80000002
 80067e8:	240081d4 	.word	0x240081d4
 80067ec:	08006945 	.word	0x08006945
 80067f0:	24000574 	.word	0x24000574

080067f4 <xTimerGenericCommand>:
    {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xTimerGenericCommand+0x2e>
    __asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xTimerGenericCommand+0x2c>
        if( xTimerQueue != NULL )
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <xTimerGenericCommand+0x98>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02a      	beq.n	8006880 <xTimerGenericCommand+0x8c>
            xMessage.xMessageID = xCommandID;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	61bb      	str	r3, [r7, #24]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b05      	cmp	r3, #5
 800683a:	dc18      	bgt.n	800686e <xTimerGenericCommand+0x7a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800683c:	f7fe ffbe 	bl	80057bc <xTaskGetSchedulerState>
 8006840:	4603      	mov	r3, r0
 8006842:	2b02      	cmp	r3, #2
 8006844:	d109      	bne.n	800685a <xTimerGenericCommand+0x66>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTimerGenericCommand+0x98>)
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f107 0110 	add.w	r1, r7, #16
 800684e:	2300      	movs	r3, #0
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	f7fa f957 	bl	8000b04 <xQueueGenericSend>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24
 8006858:	e012      	b.n	8006880 <xTimerGenericCommand+0x8c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <xTimerGenericCommand+0x98>)
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f107 0110 	add.w	r1, r7, #16
 8006862:	2300      	movs	r3, #0
 8006864:	2200      	movs	r2, #0
 8006866:	f7fa f94d 	bl	8000b04 <xQueueGenericSend>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24
 800686c:	e008      	b.n	8006880 <xTimerGenericCommand+0x8c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <xTimerGenericCommand+0x98>)
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f107 0110 	add.w	r1, r7, #16
 8006876:	2300      	movs	r3, #0
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	f7fa fccf 	bl	800121c <xQueueGenericSendFromISR>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006882:	4618      	mov	r0, r3
 8006884:	3728      	adds	r7, #40	; 0x28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	24000570 	.word	0x24000570

08006890 <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
        }
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <uxTimerGetTimerNumber>:
        {
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <prvCheckForValidListAndQueue>:
    {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af02      	add	r7, sp, #8
        taskENTER_CRITICAL();
 80068ca:	f003 f9ff 	bl	8009ccc <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d120      	bne.n	8006918 <prvCheckForValidListAndQueue+0x54>
                vListInitialise( &xActiveTimerList1 );
 80068d6:	4814      	ldr	r0, [pc, #80]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068d8:	f7fa f860 	bl	800099c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80068dc:	4813      	ldr	r0, [pc, #76]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068de:	f7fa f85d 	bl	800099c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <prvCheckForValidListAndQueue+0x6c>)
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <prvCheckForValidListAndQueue+0x64>)
 80068e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <prvCheckForValidListAndQueue+0x70>)
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <prvCheckForValidListAndQueue+0x68>)
 80068ec:	601a      	str	r2, [r3, #0]
                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068ee:	2300      	movs	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <prvCheckForValidListAndQueue+0x74>)
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <prvCheckForValidListAndQueue+0x78>)
 80068f6:	2110      	movs	r1, #16
 80068f8:	200a      	movs	r0, #10
 80068fa:	f7fb fa2b 	bl	8001d54 <xQueueGenericCreateStatic>
 80068fe:	4603      	mov	r3, r0
 8006900:	4a08      	ldr	r2, [pc, #32]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006902:	6013      	str	r3, [r2, #0]
                        if( xTimerQueue != NULL )
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <prvCheckForValidListAndQueue+0x54>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <prvCheckForValidListAndQueue+0x60>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	490b      	ldr	r1, [pc, #44]	; (8006940 <prvCheckForValidListAndQueue+0x7c>)
 8006912:	4618      	mov	r0, r3
 8006914:	f7fb f912 	bl	8001b3c <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 8006918:	f003 f9f6 	bl	8009d08 <vPortExitCritical>
    }
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	24000570 	.word	0x24000570
 8006928:	24000540 	.word	0x24000540
 800692c:	24000554 	.word	0x24000554
 8006930:	24000568 	.word	0x24000568
 8006934:	2400056c 	.word	0x2400056c
 8006938:	2400057c 	.word	0x2400057c
 800693c:	240005cc 	.word	0x240005cc
 8006940:	240081dc 	.word	0x240081dc

08006944 <prvTimerTask>:
    {
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800694c:	f107 0308 	add.w	r3, r7, #8
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9bb 	bl	8006ccc <prvGetNextExpireTime>
 8006956:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f9d9 	bl	8006d14 <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 8006962:	f000 f801 	bl	8006968 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006966:	e7f1      	b.n	800694c <prvTimerTask+0x8>

08006968 <prvProcessReceivedCommands>:
    {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800696e:	e0c2      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da18      	bge.n	80069a8 <prvProcessReceivedCommands+0x40>
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	3304      	adds	r3, #4
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( pxCallback );
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <prvProcessReceivedCommands+0x30>
    __asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	61bb      	str	r3, [r7, #24]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <prvProcessReceivedCommands+0x2e>
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	6850      	ldr	r0, [r2, #4]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	6892      	ldr	r2, [r2, #8]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f2c0 80a2 	blt.w	8006af4 <prvProcessReceivedCommands+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	623b      	str	r3, [r7, #32]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <prvProcessReceivedCommands+0x5e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fa f875 	bl	8000ab0 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069c6:	463b      	mov	r3, r7
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f95f 	bl	8006c8c <prvSampleTimeNow>
 80069ce:	61f8      	str	r0, [r7, #28]
                switch( xMessage.xMessageID )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 808e 	bhi.w	8006af6 <prvProcessReceivedCommands+0x18e>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <prvProcessReceivedCommands+0x78>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a81 	.word	0x08006a81
 80069f0:	08006acb 	.word	0x08006acb
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a05 	.word	0x08006a05
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a81 	.word	0x08006a81
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	18d1      	adds	r1, r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	6a38      	ldr	r0, [r7, #32]
 8006a24:	f000 f87a 	bl	8006b1c <prvInsertTimerInActiveList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <prvProcessReceivedCommands+0x18e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <prvProcessReceivedCommands+0xe8>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4413      	add	r3, r2
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f000 f8a9 	bl	8006ba0 <prvReloadTimer>
 8006a4e:	e008      	b.n	8006a62 <prvProcessReceivedCommands+0xfa>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	6a38      	ldr	r0, [r7, #32]
 8006a68:	4798      	blx	r3
                        break;
 8006a6a:	e044      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a7e:	e03a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvProcessReceivedCommands+0x14e>
    __asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	617b      	str	r3, [r7, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvProcessReceivedCommands+0x14c>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6a38      	ldr	r0, [r7, #32]
 8006ac4:	f000 f82a 	bl	8006b1c <prvInsertTimerInActiveList>
                        break;
 8006ac8:	e015      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x178>
                                    vPortFree( pxTimer );
 8006ad8:	6a38      	ldr	r0, [r7, #32]
 8006ada:	f000 fdd3 	bl	8007684 <vPortFree>
 8006ade:	e00a      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006af2:	e000      	b.n	8006af6 <prvProcessReceivedCommands+0x18e>
            }
 8006af4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <prvProcessReceivedCommands+0x1b0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	1d39      	adds	r1, r7, #4
 8006afc:	2200      	movs	r2, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fa fa49 	bl	8000f96 <xQueueReceive>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af32 	bne.w	8006970 <prvProcessReceivedCommands+0x8>
    }
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	24000570 	.word	0x24000570

08006b1c <prvInsertTimerInActiveList>:
    {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d812      	bhi.n	8006b68 <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e01b      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <prvInsertTimerInActiveList+0x7c>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7f9 ff48 	bl	80009f6 <vListInsert>
 8006b66:	e012      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d206      	bcs.n	8006b7e <prvInsertTimerInActiveList+0x62>
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e007      	b.n	8006b8e <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvInsertTimerInActiveList+0x80>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7f9 ff34 	bl	80009f6 <vListInsert>
        return xProcessTimerNow;
 8006b8e:	697b      	ldr	r3, [r7, #20]
    }
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2400056c 	.word	0x2400056c
 8006b9c:	24000568 	.word	0x24000568

08006ba0 <prvReloadTimer>:
    {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bac:	e008      	b.n	8006bc0 <prvReloadTimer+0x20>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	18d1      	adds	r1, r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ffa5 	bl	8006b1c <prvInsertTimerInActiveList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ea      	bne.n	8006bae <prvReloadTimer+0xe>
    }
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <prvProcessExpiredTimer>:
    {
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <prvProcessExpiredTimer+0x5a>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60fb      	str	r3, [r7, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7f9 ff58 	bl	8000ab0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <prvProcessExpiredTimer+0x38>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ffc4 	bl	8006ba0 <prvReloadTimer>
 8006c18:	e008      	b.n	8006c2c <prvProcessExpiredTimer+0x4a>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	4798      	blx	r3
    }
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	24000568 	.word	0x24000568

08006c40 <prvSwitchTimerLists>:
    {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	e009      	b.n	8006c5c <prvSwitchTimerLists+0x1c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	603b      	str	r3, [r7, #0]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006c52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7ff ffc3 	bl	8006be2 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <prvSwitchTimerLists+0x44>)
 8006c72:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006c74:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <prvSwitchTimerLists+0x48>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
    }
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	24000568 	.word	0x24000568
 8006c88:	2400056c 	.word	0x2400056c

08006c8c <prvSampleTimeNow>:
    {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 8006c94:	f7fd fa20 	bl	80040d8 <xTaskGetTickCount>
 8006c98:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d205      	bcs.n	8006cb0 <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 8006ca4:	f7ff ffcc 	bl	8006c40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	24000578 	.word	0x24000578

08006ccc <prvGetNextExpireTime>:
    {
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <prvGetNextExpireTime+0x16>
 8006cde:	2201      	movs	r2, #1
 8006ce0:	e000      	b.n	8006ce4 <prvGetNextExpireTime+0x18>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <prvGetNextExpireTime+0x44>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e001      	b.n	8006d00 <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 8006d00:	68fb      	ldr	r3, [r7, #12]
    }
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	24000568 	.word	0x24000568

08006d14 <prvProcessTimerOrBlockTask>:
    {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8006d1e:	f7fd f8b7 	bl	8003e90 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff ffb0 	bl	8006c8c <prvSampleTimeNow>
 8006d2c:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d130      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x82>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d806      	bhi.n	8006d50 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 8006d42:	f7fd f8b3 	bl	8003eac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff4a 	bl	8006be2 <prvProcessExpiredTimer>
    }
 8006d4e:	e024      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <prvProcessTimerOrBlockTask+0x90>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <prvProcessTimerOrBlockTask+0x50>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <prvProcessTimerOrBlockTask+0x52>
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <prvProcessTimerOrBlockTask+0x94>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	f7fb f84b 	bl	8001e10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006d7a:	f7fd f897 	bl	8003eac <xTaskResumeAll>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <prvProcessTimerOrBlockTask+0x98>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
    }
 8006d94:	e001      	b.n	8006d9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006d96:	f7fd f889 	bl	8003eac <xTaskResumeAll>
    }
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2400056c 	.word	0x2400056c
 8006da8:	24000570 	.word	0x24000570
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <prvInitialiseNewTimer>:
    {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <prvInitialiseNewTimer+0x2a>
    __asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	617b      	str	r3, [r7, #20]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvInitialiseNewTimer+0x28>
        prvCheckForValidListAndQueue();
 8006dda:	f7ff fd73 	bl	80068c4 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7f9 fdee 	bl	80009dc <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <prvInitialiseNewTimer+0x68>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0c:	f043 0304 	orr.w	r3, r3, #4
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <pxPortInitialiseStack>:
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters,
                                     BaseType_t xRunPrivileged )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3b04      	subs	r3, #4
 8006e32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e3a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0201 	bic.w	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = 0;                                                   /* LR */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b14      	subs	r3, #20
 8006e5c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b04      	subs	r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f06f 0202 	mvn.w	r2, #2
 8006e70:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 9; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b24      	subs	r3, #36	; 0x24
 8006e76:	60fb      	str	r3, [r7, #12]

    if( xRunPrivileged == pdTRUE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d103      	bne.n	8006e86 <pxPortInitialiseStack+0x66>
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_PRIVILEGED;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e002      	b.n	8006e8c <pxPortInitialiseStack+0x6c>
    }
    else
    {
        *pxTopOfStack = portINITIAL_CONTROL_IF_UNPRIVILEGED;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2203      	movs	r2, #3
 8006e8a:	601a      	str	r2, [r3, #0]
    }

    return pxTopOfStack;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
    configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <xPortStartScheduler+0xfe>)
 8006ea2:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <xPortStartScheduler+0x102>)
 8006ec6:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec8:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006eca:	2207      	movs	r2, #7
 8006ecc:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ece:	e009      	b.n	8006ee4 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8006ed0:	4b33      	ldr	r3, [pc, #204]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ed8:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d0ef      	beq.n	8006ed0 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1c3 0307 	rsb	r3, r3, #7
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d00a      	beq.n	8006f12 <xPortStartScheduler+0x78>
    __asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f12:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <xPortStartScheduler+0x106>)
 8006f26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	701a      	strb	r2, [r3, #0]
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the same priority as the kernel, and the SVC
     * handler higher priority so it can be used to exit a critical section (where
     * lower priorities are masked). */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <xPortStartScheduler+0x10a>)
 8006f42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f46:	6013      	str	r3, [r2, #0]

    /* Configure the regions in the MPU that are common to all tasks. */
    prvSetupMPU();
 8006f48:	f000 f90c 	bl	8007164 <prvSetupMPU>

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006f4c:	f002 ff0a 	bl	8009d64 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <xPortStartScheduler+0x10e>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006f56:	f002 ff29 	bl	8009dac <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <xPortStartScheduler+0x112>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <xPortStartScheduler+0x112>)
 8006f60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f64:	6013      	str	r3, [r2, #0]

    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f66:	4808      	ldr	r0, [pc, #32]	; (8006f88 <xPortStartScheduler+0xee>)
 8006f68:	6800      	ldr	r0, [r0, #0]
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f380 8808 	msr	MSP, r0
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f380 8814 	msr	CONTROL, r0
 8006f78:	b662      	cpsie	i
 8006f7a:	b661      	cpsie	f
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	df00      	svc	0
 8006f86:	bf00      	nop
 8006f88:	e000ed08 	.word	0xe000ed08
        " nop					\n"
        " .ltorg				\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory" );

    /* Should not get here! */
    return 0;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000e400 	.word	0xe000e400
 8006f9c:	2401001d 	.word	0x2401001d
 8006fa0:	24010020 	.word	0x24010020
 8006fa4:	e000ed20 	.word	0xe000ed20
 8006fa8:	2400800c 	.word	0x2400800c
 8006fac:	e000ef34 	.word	0xe000ef34

08006fb0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <vPortEndScheduler+0x34>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbe:	d00a      	beq.n	8006fd6 <vPortEndScheduler+0x26>
    __asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	607b      	str	r3, [r7, #4]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <vPortEndScheduler+0x24>
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2400800c 	.word	0x2400800c

08006fe8 <vPortStoreTaskMPUSettings>:

void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                const struct xMEMORY_REGION * const xRegions,
                                StackType_t * pxBottomOfStack,
                                uint32_t ulStackDepth )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
    #endif /* if defined( __ARMCC_VERSION ) */

    int32_t lIndex;
    uint32_t ul;

    if( xRegions == NULL )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d137      	bne.n	800706c <vPortStoreTaskMPUSettings+0x84>
    {
        /* No MPU regions are specified so allow access to all RAM. */
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
            ( ( uint32_t ) __SRAM_segment_start__ ) | /* Base address. */
 8006ffc:	4b53      	ldr	r3, [pc, #332]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
            ( portMPU_REGION_VALID ) |
 8006ffe:	f043 0214 	orr.w	r2, r3, #20
        xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
            ( portSTACK_REGION );

        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
            ( portMPU_REGION_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            ( prvGetMPURegionSizeSetting( ( uint32_t ) __SRAM_segment_end__ - ( uint32_t ) __SRAM_segment_start__ ) ) |
 8007006:	4a52      	ldr	r2, [pc, #328]	; (8007150 <vPortStoreTaskMPUSettings+0x168>)
 8007008:	4b50      	ldr	r3, [pc, #320]	; (800714c <vPortStoreTaskMPUSettings+0x164>)
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f92d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007012:	4602      	mov	r2, r0
 8007014:	4b4f      	ldr	r3, [pc, #316]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 8007016:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	6053      	str	r3, [r2, #4]
            ( portMPU_REGION_ENABLE );

        /* Re-instate the privileged only RAM region as xRegion[ 0 ] will have
         * just removed the privileged only parameters. */
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
            ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 800701c:	4b4e      	ldr	r3, [pc, #312]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
            ( portMPU_REGION_VALID ) |
 800701e:	f043 0215 	orr.w	r2, r3, #21
        xMPUSettings->xRegion[ 1 ].ulRegionBaseAddress =
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	609a      	str	r2, [r3, #8]
            ( portSTACK_REGION + 1 );

        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
            ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
            ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
            prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 8007026:	4a4d      	ldr	r2, [pc, #308]	; (800715c <vPortStoreTaskMPUSettings+0x174>)
 8007028:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <vPortStoreTaskMPUSettings+0x170>)
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f91d 	bl	800726c <prvGetMPURegionSizeSetting>
 8007032:	4602      	mov	r2, r0
 8007034:	4b4a      	ldr	r3, [pc, #296]	; (8007160 <vPortStoreTaskMPUSettings+0x178>)
 8007036:	4313      	orrs	r3, r2
        xMPUSettings->xRegion[ 1 ].ulRegionAttribute =
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	60d3      	str	r3, [r2, #12]
            ( portMPU_REGION_ENABLE );

        /* Invalidate all other regions. */
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800703c:	2302      	movs	r3, #2
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e010      	b.n	8007064 <vPortStoreTaskMPUSettings+0x7c>
        {
            xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3304      	adds	r3, #4
 8007046:	f043 0110 	orr.w	r1, r3, #16
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
        for( ul = 2; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b0b      	cmp	r3, #11
 8007068:	d9eb      	bls.n	8007042 <vPortStoreTaskMPUSettings+0x5a>
            }

            lIndex++;
        }
    }
}
 800706a:	e06a      	b.n	8007142 <vPortStoreTaskMPUSettings+0x15a>
        if( ulStackDepth > 0 )
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <vPortStoreTaskMPUSettings+0xa8>
                ( ( uint32_t ) pxBottomOfStack ) |
 8007072:	687b      	ldr	r3, [r7, #4]
                ( portMPU_REGION_VALID ) |
 8007074:	f043 0214 	orr.w	r2, r3, #20
            xMPUSettings->xRegion[ 0 ].ulRegionBaseAddress =
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]
                ( prvGetMPURegionSizeSetting( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) ) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f8f3 	bl	800726c <prvGetMPURegionSizeSetting>
 8007086:	4602      	mov	r2, r0
                ( ( configTEX_S_C_B_SRAM & portMPU_RASR_TEX_S_C_B_MASK ) << portMPU_RASR_TEX_S_C_B_LOCATION ) |
 8007088:	4b32      	ldr	r3, [pc, #200]	; (8007154 <vPortStoreTaskMPUSettings+0x16c>)
 800708a:	4313      	orrs	r3, r2
            xMPUSettings->xRegion[ 0 ].ulRegionAttribute =
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6053      	str	r3, [r2, #4]
        lIndex = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007094:	2301      	movs	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e050      	b.n	800713c <vPortStoreTaskMPUSettings+0x154>
            if( ( xRegions[ lIndex ] ).ulLengthInBytes > 0UL )
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d031      	beq.n	8007114 <vPortStoreTaskMPUSettings+0x12c>
                    ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) |
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
                    ( portSTACK_REGION + ul ); /* Region number. */
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
                    ( portMPU_REGION_VALID ) |
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f043 0110 	orr.w	r1, r3, #16
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress =
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f8bf 	bl	800726c <prvGetMPURegionSizeSetting>
 80070ee:	4601      	mov	r1, r0
                    ( xRegions[ lIndex ].ulParameters ) |
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	689b      	ldr	r3, [r3, #8]
                    ( prvGetMPURegionSizeSetting( xRegions[ lIndex ].ulLengthInBytes ) ) |
 8007102:	430b      	orrs	r3, r1
                    ( xRegions[ lIndex ].ulParameters ) |
 8007104:	f043 0201 	orr.w	r2, r3, #1
                xMPUSettings->xRegion[ ul ].ulRegionAttribute =
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	440b      	add	r3, r1
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	e00d      	b.n	8007130 <vPortStoreTaskMPUSettings+0x148>
                xMPUSettings->xRegion[ ul ].ulRegionBaseAddress = ( portSTACK_REGION + ul ) | portMPU_REGION_VALID;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3304      	adds	r3, #4
 8007118:	f043 0110 	orr.w	r1, r3, #16
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                xMPUSettings->xRegion[ ul ].ulRegionAttribute = 0UL;
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
            lIndex++;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
        for( ul = 1; ul <= portNUM_CONFIGURABLE_REGIONS; ul++ )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3301      	adds	r3, #1
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b0b      	cmp	r3, #11
 8007140:	d9ab      	bls.n	800709a <vPortStoreTaskMPUSettings+0xb2>
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	24000000 	.word	0x24000000
 8007150:	24080000 	.word	0x24080000
 8007154:	03030001 	.word	0x03030001
 8007158:	24000000 	.word	0x24000000
 800715c:	24008000 	.word	0x24008000
 8007160:	01030001 	.word	0x01030001

08007164 <prvSetupMPU>:
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
    configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 800716a:	4b30      	ldr	r3, [pc, #192]	; (800722c <prvSetupMPU+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d00a      	beq.n	800718a <prvSetupMPU+0x26>
    __asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	607b      	str	r3, [r7, #4]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <prvSetupMPU+0x24>
    if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <prvSetupMPU+0xc8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d147      	bne.n	8007224 <prvSetupMPU+0xc0>
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 8007194:	4b26      	ldr	r3, [pc, #152]	; (8007230 <prvSetupMPU+0xcc>)
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 8007198:	f043 0310 	orr.w	r3, r3, #16
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __FLASH_segment_start__ ) | /* Base address. */
 800719c:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 800719e:	4a26      	ldr	r2, [pc, #152]	; (8007238 <prvSetupMPU+0xd4>)
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <prvSetupMPU+0xcc>)
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f861 	bl	800726c <prvGetMPURegionSizeSetting>
 80071aa:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071ac:	4923      	ldr	r1, [pc, #140]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __FLASH_segment_end__ - ( uint32_t ) __FLASH_segment_start__ ) ) |
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <prvSetupMPU+0xdc>)
 80071b0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_ONLY ) |
 80071b2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071b4:	4b23      	ldr	r3, [pc, #140]	; (8007244 <prvSetupMPU+0xe0>)
 80071b6:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071b8:	f043 0311 	orr.w	r3, r3, #17
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_functions_start__ ) | /* Base address. */
 80071bc:	6013      	str	r3, [r2, #0]
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <prvSetupMPU+0xe4>)
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <prvSetupMPU+0xe0>)
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f851 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ca:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071cc:	491b      	ldr	r1, [pc, #108]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_functions_end__ - ( uint32_t ) __privileged_functions_start__ ) ) |
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <prvSetupMPU+0xe8>)
 80071d0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_ONLY ) |
 80071d2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071d4:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <prvSetupMPU+0xec>)
 80071d6:	4a17      	ldr	r2, [pc, #92]	; (8007234 <prvSetupMPU+0xd0>)
                                          ( portMPU_REGION_VALID ) |
 80071d8:	f043 0312 	orr.w	r3, r3, #18
        portMPU_REGION_BASE_ADDRESS_REG = ( ( uint32_t ) __privileged_data_start__ ) | /* Base address. */
 80071dc:	6013      	str	r3, [r2, #0]
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071de:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <prvSetupMPU+0xf0>)
 80071e0:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <prvSetupMPU+0xec>)
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f841 	bl	800726c <prvGetMPURegionSizeSetting>
 80071ea:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071ec:	4913      	ldr	r1, [pc, #76]	; (800723c <prvSetupMPU+0xd8>)
                                       prvGetMPURegionSizeSetting( ( uint32_t ) __privileged_data_end__ - ( uint32_t ) __privileged_data_start__ ) |
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <prvSetupMPU+0xf4>)
 80071f0:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 80071f2:	600b      	str	r3, [r1, #0]
        portMPU_REGION_BASE_ADDRESS_REG = ( portPERIPHERALS_START_ADDRESS ) |
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <prvSetupMPU+0xd0>)
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <prvSetupMPU+0xf8>)
 80071f8:	601a      	str	r2, [r3, #0]
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 80071fa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80071fe:	f000 f835 	bl	800726c <prvGetMPURegionSizeSetting>
 8007202:	4602      	mov	r2, r0
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 8007204:	490d      	ldr	r1, [pc, #52]	; (800723c <prvSetupMPU+0xd8>)
                                       ( prvGetMPURegionSizeSetting( portPERIPHERALS_END_ADDRESS - portPERIPHERALS_START_ADDRESS ) ) |
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <prvSetupMPU+0xfc>)
 8007208:	4313      	orrs	r3, r2
        portMPU_REGION_ATTRIBUTE_REG = ( portMPU_REGION_READ_WRITE | portMPU_REGION_EXECUTE_NEVER ) |
 800720a:	600b      	str	r3, [r1, #0]
        portNVIC_SYS_CTRL_STATE_REG |= portNVIC_MEM_FAULT_ENABLE;
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <prvSetupMPU+0x100>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a14      	ldr	r2, [pc, #80]	; (8007264 <prvSetupMPU+0x100>)
 8007212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007216:	6013      	str	r3, [r2, #0]
        portMPU_CTRL_REG |= ( portMPU_ENABLE | portMPU_BACKGROUND_ENABLE );
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <prvSetupMPU+0x104>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <prvSetupMPU+0x104>)
 800721e:	f043 0305 	orr.w	r3, r3, #5
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed90 	.word	0xe000ed90
 8007230:	08000000 	.word	0x08000000
 8007234:	e000ed9c 	.word	0xe000ed9c
 8007238:	08100000 	.word	0x08100000
 800723c:	e000eda0 	.word	0xe000eda0
 8007240:	06070001 	.word	0x06070001
 8007244:	08000000 	.word	0x08000000
 8007248:	08008000 	.word	0x08008000
 800724c:	05070001 	.word	0x05070001
 8007250:	24000000 	.word	0x24000000
 8007254:	24008000 	.word	0x24008000
 8007258:	01030001 	.word	0x01030001
 800725c:	40000013 	.word	0x40000013
 8007260:	13000001 	.word	0x13000001
 8007264:	e000ed24 	.word	0xe000ed24
 8007268:	e000ed94 	.word	0xe000ed94

0800726c <prvGetMPURegionSizeSetting>:
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    uint32_t ulRegionSize, ulReturnValue = 4;
 8007274:	2304      	movs	r3, #4
 8007276:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 8007278:	2320      	movs	r3, #32
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e009      	b.n	8007292 <prvGetMPURegionSizeSetting+0x26>
        if( ulActualSizeInBytes <= ulRegionSize )
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	429a      	cmp	r2, r3
 8007284:	d909      	bls.n	800729a <prvGetMPURegionSizeSetting+0x2e>
            ulReturnValue++;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3301      	adds	r3, #1
 800728a:	60bb      	str	r3, [r7, #8]
    for( ulRegionSize = 32UL; ulReturnValue < 31UL; ( ulRegionSize <<= 1UL ) )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b1e      	cmp	r3, #30
 8007296:	d9f2      	bls.n	800727e <prvGetMPURegionSizeSetting+0x12>
 8007298:	e000      	b.n	800729c <prvGetMPURegionSizeSetting+0x30>
            break;
 800729a:	bf00      	nop
    return( ulReturnValue << 1UL );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	005b      	lsls	r3, r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <PendSV_Handler>:
    __asm volatile
 80072ac:	f3ef 8009 	mrs	r0, PSP
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	4b26      	ldr	r3, [pc, #152]	; (8007350 <pxCurrentTCBConst>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	f01e 0f10 	tst.w	lr, #16
 80072bc:	bf08      	it	eq
 80072be:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c2:	f3ef 8114 	mrs	r1, CONTROL
 80072c6:	e920 4ff2 	stmdb	r0!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe f9aa 	bl	8005638 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	f101 0104 	add.w	r1, r1, #4
 80072f6:	f3bf 8f5f 	dmb	sy
 80072fa:	4a6d      	ldr	r2, [pc, #436]	; (80074b0 <prvSVCHandler+0x8a>)
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4a6b      	ldr	r2, [pc, #428]	; (80074b4 <prvSVCHandler+0x8e>)
 8007306:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800730e:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007312:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007316:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731a:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 800731e:	4a64      	ldr	r2, [pc, #400]	; (80074b0 <prvSVCHandler+0x8a>)
 8007320:	6813      	ldr	r3, [r2, #0]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	f383 8814 	msr	CONTROL, r3
 8007334:	f01e 0f10 	tst.w	lr, #16
 8007338:	bf08      	it	eq
 800733a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800733e:	f380 8809 	msr	PSP, r0
 8007342:	4770      	bx	lr
 8007344:	f3af 8000 	nop.w
 8007348:	f3af 8000 	nop.w
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	24000040 	.word	0x24000040
}
 8007354:	bf00      	nop

08007356 <SysTick_Handler>:
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
    __asm volatile
 800735c:	f3ef 8211 	mrs	r2, BASEPRI
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60ba      	str	r2, [r7, #8]
 8007372:	607b      	str	r3, [r7, #4]
    return ulOriginalBASEPRI;
 8007374:	68bb      	ldr	r3, [r7, #8]
    ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007376:	60fb      	str	r3, [r7, #12]
        if( xTaskIncrementTick() != pdFALSE )
 8007378:	f7fd fd9c 	bl	8004eb4 <xTaskIncrementTick>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <SysTick_Handler+0x34>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <SysTick_Handler+0x4a>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	603b      	str	r3, [r7, #0]
    __asm volatile
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f383 8811 	msr	BASEPRI, r3
}
 8007394:	bf00      	nop
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <SVC_Handler>:
    __asm volatile
 80073a4:	f01e 0f04 	tst.w	lr, #4
 80073a8:	bf0c      	ite	eq
 80073aa:	f3ef 8008 	mrseq	r0, MSP
 80073ae:	f3ef 8009 	mrsne	r0, PSP
 80073b2:	e038      	b.n	8007426 <prvSVCHandler>
}
 80073b4:	bf00      	nop

080073b6 <prvRestoreContextOfFirstTask>:
    __asm volatile
 80073b6:	4840      	ldr	r0, [pc, #256]	; (80074b8 <prvSVCHandler+0x92>)
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	f380 8808 	msr	MSP, r0
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	f101 0104 	add.w	r1, r1, #4
 80073ca:	f3bf 8f5f 	dmb	sy
 80073ce:	4a38      	ldr	r2, [pc, #224]	; (80074b0 <prvSVCHandler+0x8a>)
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <prvSVCHandler+0x8e>)
 80073da:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073de:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e2:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e6:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ea:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ee:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <prvSVCHandler+0x8a>)
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	e8b0 4ff8 	ldmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	f383 8814 	msr	CONTROL, r3
 8007408:	f380 8809 	msr	PSP, r0
 800740c:	f04f 0000 	mov.w	r0, #0
 8007410:	f380 8811 	msr	BASEPRI, r0
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	f3af 8000 	nop.w
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	24000040 	.word	0x24000040
}
 8007424:	bf00      	nop

08007426 <prvSVCHandler>:
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
    ulPC = pulParam[ portOFFSET_TO_PC ];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b02      	subs	r3, #2
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d018      	beq.n	8007474 <prvSVCHandler+0x4e>
 8007442:	2b02      	cmp	r3, #2
 8007444:	dc25      	bgt.n	8007492 <prvSVCHandler+0x6c>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <prvSVCHandler+0x2a>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d009      	beq.n	8007462 <prvSVCHandler+0x3c>
                    break;
 800744e:	e020      	b.n	8007492 <prvSVCHandler+0x6c>
            portNVIC_SHPR2_REG |= portNVIC_SVC_PRI;
 8007450:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvSVCHandler+0x7a>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <prvSVCHandler+0x7a>)
 8007456:	f043 439e 	orr.w	r3, r3, #1325400064	; 0x4f000000
 800745a:	6013      	str	r3, [r2, #0]
            prvRestoreContextOfFirstTask();
 800745c:	f7ff ffab 	bl	80073b6 <prvRestoreContextOfFirstTask>
            break;
 8007460:	e01a      	b.n	8007498 <prvSVCHandler+0x72>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <prvSVCHandler+0x7e>)
 8007464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007468:	601a      	str	r2, [r3, #0]
            __asm volatile ( "dsb" ::: "memory" );
 800746a:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800746e:	f3bf 8f6f 	isb	sy
            break;
 8007472:	e011      	b.n	8007498 <prvSVCHandler+0x72>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8007474:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <prvSVCHandler+0x82>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4293      	cmp	r3, r2
 800747a:	d30c      	bcc.n	8007496 <prvSVCHandler+0x70>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <prvSVCHandler+0x86>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4293      	cmp	r3, r2
 8007482:	d808      	bhi.n	8007496 <prvSVCHandler+0x70>
                        __asm volatile
 8007484:	f3ef 8114 	mrs	r1, CONTROL
 8007488:	f021 0101 	bic.w	r1, r1, #1
 800748c:	f381 8814 	msr	CONTROL, r1
                    break;
 8007490:	e001      	b.n	8007496 <prvSVCHandler+0x70>
                    break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <prvSVCHandler+0x72>
                    break;
 8007496:	bf00      	nop
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000ed1c 	.word	0xe000ed1c
 80074a4:	e000ed04 	.word	0xe000ed04
 80074a8:	08008000 	.word	0x08008000
 80074ac:	08008e36 	.word	0x08008e36
 80074b0:	e000ed94 	.word	0xe000ed94
 80074b4:	e000ed9c 	.word	0xe000ed9c
 80074b8:	e000ed08 	.word	0xe000ed08

080074bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80074c8:	f7fc fce2 	bl	8003e90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074cc:	4b67      	ldr	r3, [pc, #412]	; (800766c <pvPortMalloc+0x1b0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074d4:	f000 f9b0 	bl	8007838 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074d8:	4b65      	ldr	r3, [pc, #404]	; (8007670 <pvPortMalloc+0x1b4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 80a7 	bne.w	8007634 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02d      	beq.n	8007548 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80074ec:	2208      	movs	r2, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d227      	bcs.n	8007548 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d021      	beq.n	800754e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d214      	bcs.n	8007542 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	3308      	adds	r3, #8
 8007520:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <pvPortMalloc+0x92>
    __asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	617b      	str	r3, [r7, #20]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007546:	e002      	b.n	800754e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e000      	b.n	8007550 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800754e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d06e      	beq.n	8007634 <pvPortMalloc+0x178>
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <pvPortMalloc+0x1b8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d869      	bhi.n	8007634 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007560:	4b45      	ldr	r3, [pc, #276]	; (8007678 <pvPortMalloc+0x1bc>)
 8007562:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007564:	4b44      	ldr	r3, [pc, #272]	; (8007678 <pvPortMalloc+0x1bc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756a:	e004      	b.n	8007576 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <pvPortMalloc+0xcc>
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f1      	bne.n	800756c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007588:	4b38      	ldr	r3, [pc, #224]	; (800766c <pvPortMalloc+0x1b0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758e:	429a      	cmp	r2, r3
 8007590:	d050      	beq.n	8007634 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2208      	movs	r2, #8
 8007598:	4413      	add	r3, r2
 800759a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	2308      	movs	r3, #8
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d91f      	bls.n	80075f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <pvPortMalloc+0x120>
    __asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	613b      	str	r3, [r7, #16]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ee:	69b8      	ldr	r0, [r7, #24]
 80075f0:	f000 f8c8 	bl	8007784 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075f4:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <pvPortMalloc+0x1b8>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <pvPortMalloc+0x1b8>)
 8007600:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <pvPortMalloc+0x1b8>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <pvPortMalloc+0x1c0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d203      	bcs.n	8007616 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <pvPortMalloc+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <pvPortMalloc+0x1c0>)
 8007614:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <pvPortMalloc+0x1b4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	431a      	orrs	r2, r3
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <pvPortMalloc+0x1c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <pvPortMalloc+0x1c4>)
 8007632:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007634:	f7fc fc3a 	bl	8003eac <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800763e:	f002 fc90 	bl	8009f62 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <pvPortMalloc+0x1a6>
    __asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <pvPortMalloc+0x1a4>
    return pvReturn;
 8007662:	69fb      	ldr	r3, [r7, #28]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	24004274 	.word	0x24004274
 8007670:	24004288 	.word	0x24004288
 8007674:	24004278 	.word	0x24004278
 8007678:	2400426c 	.word	0x2400426c
 800767c:	2400427c 	.word	0x2400427c
 8007680:	24004280 	.word	0x24004280

08007684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04d      	beq.n	8007732 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007696:	2308      	movs	r3, #8
 8007698:	425b      	negs	r3, r3
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4b24      	ldr	r3, [pc, #144]	; (800773c <vPortFree+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortFree+0x44>
    __asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <vPortFree+0x62>
    __asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <vPortFree+0xb8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01e      	beq.n	8007732 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11a      	bne.n	8007732 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <vPortFree+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800770c:	f7fc fbc0 	bl	8003e90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <vPortFree+0xbc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4413      	add	r3, r2
 800771a:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortFree+0xbc>)
 800771c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800771e:	6938      	ldr	r0, [r7, #16]
 8007720:	f000 f830 	bl	8007784 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <vPortFree+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a06      	ldr	r2, [pc, #24]	; (8007744 <vPortFree+0xc0>)
 800772c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800772e:	f7fc fbbd 	bl	8003eac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	24004288 	.word	0x24004288
 8007740:	24004278 	.word	0x24004278
 8007744:	24004284 	.word	0x24004284

08007748 <vPortInitialiseBlocks>:
    return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
    /* This just exists to keep the linker quiet. */
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <xPortGetFreeHeapSize>:
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 800775a:	4b03      	ldr	r3, [pc, #12]	; (8007768 <xPortGetFreeHeapSize+0x12>)
 800775c:	681b      	ldr	r3, [r3, #0]
}
 800775e:	4618      	mov	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	24004278 	.word	0x24004278

0800776c <xPortGetMinimumEverFreeHeapSize>:
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	2400427c 	.word	0x2400427c

08007784 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800778c:	4b28      	ldr	r3, [pc, #160]	; (8007830 <prvInsertBlockIntoFreeList+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <prvInsertBlockIntoFreeList+0x14>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d8f7      	bhi.n	8007792 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4413      	add	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d108      	bne.n	80077c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d118      	bne.n	800780c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b15      	ldr	r3, [pc, #84]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d00d      	beq.n	8007802 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e008      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e003      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d002      	beq.n	8007822 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	2400426c 	.word	0x2400426c
 8007834:	24004274 	.word	0x24004274

08007838 <prvHeapInit>:
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800783e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007842:	60bb      	str	r3, [r7, #8]
    uxAddress = ( size_t ) ucHeap;
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <prvHeapInit+0xac>)
 8007846:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3307      	adds	r3, #7
 8007856:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <prvHeapInit+0xac>)
 8007868:	4413      	add	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <prvHeapInit+0xb0>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <prvHeapInit+0xb0>)
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007884:	2208      	movs	r2, #8
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a15      	ldr	r2, [pc, #84]	; (80078ec <prvHeapInit+0xb4>)
 8007898:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <prvHeapInit+0xb4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvHeapInit+0xb4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvHeapInit+0xb4>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <prvHeapInit+0xb8>)
 80078c6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <prvHeapInit+0xbc>)
 80078ce:	6013      	str	r3, [r2, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <prvHeapInit+0xc0>)
 80078d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d6:	601a      	str	r2, [r3, #0]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	2400066c 	.word	0x2400066c
 80078e8:	2400426c 	.word	0x2400426c
 80078ec:	24004274 	.word	0x24004274
 80078f0:	2400427c 	.word	0x2400427c
 80078f4:	24004278 	.word	0x24004278
 80078f8:	24004288 	.word	0x24004288
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <MPU_SytemCall_1>:
}



void MPU_SytemCall_1()
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008006:	f000 ff07 	bl	8008e18 <xPortRaisePrivilege>
 800800a:	6078      	str	r0, [r7, #4]

	SytemCall_1_code();
 800800c:	f00f fb03 	bl	8017616 <SytemCall_1_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fe4d 	bl	8009cb0 <vPortResetPrivilege>

}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <MPU_SytemCall_2>:


void MPU_SytemCall_2()
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008024:	f000 fef8 	bl	8008e18 <xPortRaisePrivilege>
 8008028:	6078      	str	r0, [r7, #4]

	SytemCall_2_code();
 800802a:	f00f fb4b 	bl	80176c4 <SytemCall_2_code>

	vPortResetPrivilege( xRunningPrivileged );
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fe3e 	bl	8009cb0 <vPortResetPrivilege>

}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <MPU_SytemCall_3>:


void MPU_SytemCall_3()
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008042:	f000 fee9 	bl	8008e18 <xPortRaisePrivilege>
 8008046:	6078      	str	r0, [r7, #4]

	SytemCall_3_code();
 8008048:	f001 f8ec 	bl	8009224 <SytemCall_3_code>

	vPortResetPrivilege( xRunningPrivileged );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fe2f 	bl	8009cb0 <vPortResetPrivilege>

}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <MPU_SytemCall_4>:



void MPU_SytemCall_4(void *val)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008062:	f000 fed9 	bl	8008e18 <xPortRaisePrivilege>
 8008066:	60f8      	str	r0, [r7, #12]

	SytemCall_4_code(val);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f8e2 	bl	8009232 <SytemCall_4_code>

	vPortResetPrivilege( xRunningPrivileged );
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fe1e 	bl	8009cb0 <vPortResetPrivilege>

}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <MPU_SytemCall_5>:

void MPU_SytemCall_5(void *val)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]

	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008084:	f000 fec8 	bl	8008e18 <xPortRaisePrivilege>
 8008088:	60f8      	str	r0, [r7, #12]

	SytemCall_5_code(val);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f8db 	bl	8009246 <SytemCall_5_code>

	vPortResetPrivilege( xRunningPrivileged );
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f001 fe0d 	bl	8009cb0 <vPortResetPrivilege>

}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <MPU_xTaskCreate>:
                                const char * const pcName,
                                uint16_t usStackDepth,
                                void * pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * pxCreatedTask ) /* FREERTOS_SYSTEM_CALL */
    {
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080ae:	f000 feb3 	bl	8008e18 <xPortRaisePrivilege>
 80080b2:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7fa fff4 	bl	80030b0 <xTaskCreate>
 80080c8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f001 fdf0 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80080d0:	693b      	ldr	r3, [r7, #16]
    }
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <MPU_xTaskCreateStatic>:
                                        const uint32_t ulStackDepth,
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 80080da:	b580      	push	{r7, lr}
 80080dc:	b08a      	sub	sp, #40	; 0x28
 80080de:	af04      	add	r7, sp, #16
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80080e8:	f000 fe96 	bl	8008e18 <xPortRaisePrivilege>
 80080ec:	6178      	str	r0, [r7, #20]

        xReturn = xTaskCreateStatic( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7fb f81c 	bl	800313e <xTaskCreateStatic>
 8008106:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f001 fdd1 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 800810e:	693b      	ldr	r3, [r7, #16]
    }
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <MPU_vTaskDelete>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )
    void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete ) /* FREERTOS_SYSTEM_CALL */
    {
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008120:	f000 fe7a 	bl	8008e18 <xPortRaisePrivilege>
 8008124:	60f8      	str	r0, [r7, #12]

        vTaskDelete( pxTaskToDelete );
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fb f92e 	bl	8003388 <vTaskDelete>
        vPortResetPrivilege( xRunningPrivileged );
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fdbf 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <MPU_vTaskDelay>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )
    void MPU_vTaskDelay( TickType_t xTicksToDelay ) /* FREERTOS_SYSTEM_CALL */
    {
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008142:	f000 fe69 	bl	8008e18 <xPortRaisePrivilege>
 8008146:	60f8      	str	r0, [r7, #12]

        vTaskDelay( xTicksToDelay );
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fb f995 	bl	8003478 <vTaskDelay>
        vPortResetPrivilege( xRunningPrivileged );
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fdae 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <MPU_xTaskDelayUntil>:
    {
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008166:	f000 fe57 	bl	8008e18 <xPortRaisePrivilege>
 800816a:	60f8      	str	r0, [r7, #12]
        xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fb f9b6 	bl	80034e0 <xTaskDelayUntil>
 8008174:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f001 fd9a 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 800817c:	68bb      	ldr	r3, [r7, #8]
    }
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <MPU_uxTaskPriorityGet>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    UBaseType_t MPU_uxTaskPriorityGet( const TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800818e:	f000 fe43 	bl	8008e18 <xPortRaisePrivilege>
 8008192:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskPriorityGet( pxTask );
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fb fa21 	bl	80035dc <uxTaskPriorityGet>
 800819a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fd87 	bl	8009cb0 <vPortResetPrivilege>
        return uxReturn;
 80081a2:	68bb      	ldr	r3, [r7, #8]
    }
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <MPU_eTaskGetState>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )
    eTaskState MPU_eTaskGetState( TaskHandle_t pxTask ) /* FREERTOS_SYSTEM_CALL */
    {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081b4:	f000 fe30 	bl	8008e18 <xPortRaisePrivilege>
 80081b8:	60f8      	str	r0, [r7, #12]
        eTaskState eReturn;

        eReturn = eTaskGetState( pxTask );
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fb fa58 	bl	8003670 <eTaskGetState>
 80081c0:	4603      	mov	r3, r0
 80081c2:	72fb      	strb	r3, [r7, #11]
        vPortResetPrivilege( xRunningPrivileged );
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f001 fd73 	bl	8009cb0 <vPortResetPrivilege>
        return eReturn;
 80081ca:	7afb      	ldrb	r3, [r7, #11]
    }
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <MPU_vTaskGetInfo>:
#if ( configUSE_TRACE_FACILITY == 1 )
    void MPU_vTaskGetInfo( TaskHandle_t xTask,
                           TaskStatus_t * pxTaskStatus,
                           BaseType_t xGetFreeStackSpace,
                           eTaskState eState ) /* FREERTOS_SYSTEM_CALL */
    {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	70fb      	strb	r3, [r7, #3]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80081e2:	f000 fe19 	bl	8008e18 <xPortRaisePrivilege>
 80081e6:	6178      	str	r0, [r7, #20]

        vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7fb faba 	bl	8003768 <vTaskGetInfo>
        vPortResetPrivilege( xRunningPrivileged );
 80081f4:	6978      	ldr	r0, [r7, #20]
 80081f6:	f001 fd5b 	bl	8009cb0 <vPortResetPrivilege>
    }
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <MPU_vTaskPrioritySet>:
    {
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800820c:	f000 fe04 	bl	8008e18 <xPortRaisePrivilege>
 8008210:	60f8      	str	r0, [r7, #12]
        vTaskPrioritySet( pxTask, uxNewPriority );
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fb fb13 	bl	8003840 <vTaskPrioritySet>
        vPortResetPrivilege( xRunningPrivileged );
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f001 fd48 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <MPU_vTaskSuspend>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend ) /* FREERTOS_SYSTEM_CALL */
    {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008230:	f000 fdf2 	bl	8008e18 <xPortRaisePrivilege>
 8008234:	60f8      	str	r0, [r7, #12]

        vTaskSuspend( pxTaskToSuspend );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fb fbdc 	bl	80039f4 <vTaskSuspend>
        vPortResetPrivilege( xRunningPrivileged );
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 fd37 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <MPU_vTaskResume>:
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
    void MPU_vTaskResume( TaskHandle_t pxTaskToResume ) /* FREERTOS_SYSTEM_CALL */
    {
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008252:	f000 fde1 	bl	8008e18 <xPortRaisePrivilege>
 8008256:	60f8      	str	r0, [r7, #12]

        vTaskResume( pxTaskToResume );
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fb fc51 	bl	8003b00 <vTaskResume>
        vPortResetPrivilege( xRunningPrivileged );
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f001 fd26 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <MPU_vTaskSuspendAll>:
#endif
/*-----------------------------------------------------------*/

void MPU_vTaskSuspendAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008272:	f000 fdd1 	bl	8008e18 <xPortRaisePrivilege>
 8008276:	6078      	str	r0, [r7, #4]

    vTaskSuspendAll();
 8008278:	f7fb fe0a 	bl	8003e90 <vTaskSuspendAll>
    vPortResetPrivilege( xRunningPrivileged );
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fd17 	bl	8009cb0 <vPortResetPrivilege>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <MPU_xTaskResumeAll>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xTaskResumeAll( void ) /* FREERTOS_SYSTEM_CALL */
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008290:	f000 fdc2 	bl	8008e18 <xPortRaisePrivilege>
 8008294:	6078      	str	r0, [r7, #4]

    xReturn = xTaskResumeAll();
 8008296:	f7fb fe09 	bl	8003eac <xTaskResumeAll>
 800829a:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 fd07 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 80082a2:	683b      	ldr	r3, [r7, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <MPU_xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t MPU_xTaskGetTickCount( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
    TickType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082b2:	f000 fdb1 	bl	8008e18 <xPortRaisePrivilege>
 80082b6:	6078      	str	r0, [r7, #4]

    xReturn = xTaskGetTickCount();
 80082b8:	f7fb ff0e 	bl	80040d8 <xTaskGetTickCount>
 80082bc:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fcf6 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 80082c4:	683b      	ldr	r3, [r7, #0]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <MPU_uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t MPU_uxTaskGetNumberOfTasks( void ) /* FREERTOS_SYSTEM_CALL */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
    UBaseType_t uxReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082d4:	f000 fda0 	bl	8008e18 <xPortRaisePrivilege>
 80082d8:	6078      	str	r0, [r7, #4]

    uxReturn = uxTaskGetNumberOfTasks();
 80082da:	f7fb ff1f 	bl	800411c <uxTaskGetNumberOfTasks>
 80082de:	6038      	str	r0, [r7, #0]
    vPortResetPrivilege( xRunningPrivileged );
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fce5 	bl	8009cb0 <vPortResetPrivilege>
    return uxReturn;
 80082e6:	683b      	ldr	r3, [r7, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <MPU_pcTaskGetName>:
/*-----------------------------------------------------------*/

char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery ) /* FREERTOS_SYSTEM_CALL */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
    char * pcReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80082f8:	f000 fd8e 	bl	8008e18 <xPortRaisePrivilege>
 80082fc:	60f8      	str	r0, [r7, #12]

    pcReturn = pcTaskGetName( xTaskToQuery );
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fb ff18 	bl	8004134 <pcTaskGetName>
 8008304:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f001 fcd2 	bl	8009cb0 <vPortResetPrivilege>
    return pcReturn;
 800830c:	68bb      	ldr	r3, [r7, #8]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <MPU_uxTaskGetStackHighWaterMark>:
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
    UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) /* FREERTOS_SYSTEM_CALL */
    {
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800831e:	f000 fd7b 	bl	8008e18 <xPortRaisePrivilege>
 8008322:	60f8      	str	r0, [r7, #12]

        uxReturn = uxTaskGetStackHighWaterMark( xTask );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fb ff29 	bl	800417c <uxTaskGetStackHighWaterMark>
 800832a:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fcbf 	bl	8009cb0 <vPortResetPrivilege>
        return uxReturn;
 8008332:	68bb      	ldr	r3, [r7, #8]
    }
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <MPU_uxTaskGetSystemState>:
    {
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008348:	f000 fd66 	bl	8008e18 <xPortRaisePrivilege>
 800834c:	6178      	str	r0, [r7, #20]
        uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fb ff2e 	bl	80041b4 <uxTaskGetSystemState>
 8008358:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f001 fca8 	bl	8009cb0 <vPortResetPrivilege>
        return uxReturn;
 8008360:	693b      	ldr	r3, [r7, #16]
    }
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <MPU_xTaskGenericNotify>:
    BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                       UBaseType_t uxIndexToNotify,
                                       uint32_t ulValue,
                                       eNotifyAction eAction,
                                       uint32_t * pulPreviousNotificationValue ) /* FREERTOS_SYSTEM_CALL */
    {
 800836a:	b580      	push	{r7, lr}
 800836c:	b088      	sub	sp, #32
 800836e:	af02      	add	r7, sp, #8
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008378:	f000 fd4e 	bl	8008e18 <xPortRaisePrivilege>
 800837c:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7fb ffa0 	bl	80042d0 <xTaskGenericNotify>
 8008390:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008392:	6978      	ldr	r0, [r7, #20]
 8008394:	f001 fc8c 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008398:	693b      	ldr	r3, [r7, #16]
    }
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <MPU_xTaskGenericNotifyWait>:
    BaseType_t MPU_xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                           uint32_t ulBitsToClearOnEntry,
                                           uint32_t ulBitsToClearOnExit,
                                           uint32_t * pulNotificationValue,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083b0:	f000 fd32 	bl	8008e18 <xPortRaisePrivilege>
 80083b4:	6178      	str	r0, [r7, #20]

        xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7fc fa41 	bl	8004848 <xTaskGenericNotifyWait>
 80083c6:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f001 fc71 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80083ce:	693b      	ldr	r3, [r7, #16]
    }
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <MPU_ulTaskGenericNotifyTake>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                          BaseType_t xClearCountOnExit,
                                          TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80083e4:	f000 fd18 	bl	8008e18 <xPortRaisePrivilege>
 80083e8:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fc fbd2 	bl	8004b98 <ulTaskGenericNotifyTake>
 80083f4:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f001 fc5a 	bl	8009cb0 <vPortResetPrivilege>
        return ulReturn;
 80083fc:	693b      	ldr	r3, [r7, #16]
    }
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <MPU_xTaskGenericNotifyStateClear>:
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    BaseType_t MPU_xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                                 UBaseType_t uxIndexToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008410:	f000 fd02 	bl	8008e18 <xPortRaisePrivilege>
 8008414:	60f8      	str	r0, [r7, #12]

        xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fc fc2b 	bl	8004c74 <xTaskGenericNotifyStateClear>
 800841e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f001 fc45 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008426:	68bb      	ldr	r3, [r7, #8]
    }
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <MPU_ulTaskGenericNotifyValueClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
    uint32_t MPU_ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                                UBaseType_t uxIndexToClear,
                                                uint32_t ulBitsToClear ) /* FREERTOS_SYSTEM_CALL */
    {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800843c:	f000 fcec 	bl	8008e18 <xPortRaisePrivilege>
 8008440:	6178      	str	r0, [r7, #20]

        ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fc fc50 	bl	8004cec <ulTaskGenericNotifyValueClear>
 800844c:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f001 fc2e 	bl	8009cb0 <vPortResetPrivilege>
        return ulReturn;
 8008454:	693b      	ldr	r3, [r7, #16]
    }
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <MPU_xTaskGetCurrentTaskHandle>:
    {
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008464:	f000 fcd8 	bl	8008e18 <xPortRaisePrivilege>
 8008468:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetCurrentTaskHandle();
 800846a:	f7fd f98b 	bl	8005784 <xTaskGetCurrentTaskHandle>
 800846e:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fc1d 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008476:	683b      	ldr	r3, [r7, #0]
    }
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <MPU_vTaskSetTimeOutState>:
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008488:	f000 fcc6 	bl	8008e18 <xPortRaisePrivilege>
 800848c:	60f8      	str	r0, [r7, #12]
    vTaskSetTimeOutState( pxTimeOut );
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fc fc5c 	bl	8004d4c <vTaskSetTimeOutState>
    vPortResetPrivilege( xRunningPrivileged );
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fc0b 	bl	8009cb0 <vPortResetPrivilege>
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <MPU_xTaskCheckForTimeOut>:
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084ac:	f000 fcb4 	bl	8008e18 <xPortRaisePrivilege>
 80084b0:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fc fc6f 	bl	8004d98 <xTaskCheckForTimeOut>
 80084ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 fbf7 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 80084c2:	68bb      	ldr	r3, [r7, #8]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <MPU_xTaskGetSchedulerState>:
    {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084d2:	f000 fca1 	bl	8008e18 <xPortRaisePrivilege>
 80084d6:	6078      	str	r0, [r7, #4]
        xReturn = xTaskGetSchedulerState();
 80084d8:	f7fd f970 	bl	80057bc <xTaskGetSchedulerState>
 80084dc:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fbe6 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80084e4:	683b      	ldr	r3, [r7, #0]
    }
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <MPU_xTaskCatchUpTicks>:
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80084f6:	f000 fc8f 	bl	8008e18 <xPortRaisePrivilege>
 80084fa:	60f8      	str	r0, [r7, #12]
    xReturn = xTaskCatchUpTicks( xTicksToCatchUp );
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fc fcb1 	bl	8004e64 <xTaskCatchUpTicks>
 8008502:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 fbd3 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 800850a:	68bb      	ldr	r3, [r7, #8]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <MPU_xQueueGenericSend>:

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue,
                                  const void * const pvItemToQueue,
                                  TickType_t xTicksToWait,
                                  BaseType_t xCopyPosition ) /* FREERTOS_SYSTEM_CALL */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008522:	f000 fc79 	bl	8008e18 <xPortRaisePrivilege>
 8008526:	6178      	str	r0, [r7, #20]

    xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f8 fae8 	bl	8000b04 <xQueueGenericSend>
 8008534:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f001 fbba 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 800853c:	693b      	ldr	r3, [r7, #16]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <MPU_xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueReceive( QueueHandle_t pxQueue,
                              void * const pvBuffer,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008552:	f000 fc61 	bl	8008e18 <xPortRaisePrivilege>
 8008556:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7f8 fd1a 	bl	8000f96 <xQueueReceive>
 8008562:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008564:	6978      	ldr	r0, [r7, #20]
 8008566:	f001 fba3 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 800856a:	693b      	ldr	r3, [r7, #16]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <MPU_xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueuePeek( QueueHandle_t xQueue,
                           void * const pvBuffer,
                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008580:	f000 fc4a 	bl	8008e18 <xPortRaisePrivilege>
 8008584:	6178      	str	r0, [r7, #20]
    BaseType_t xReturn;

    xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7f8 fbb8 	bl	8000d00 <xQueuePeek>
 8008590:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f001 fb8c 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 8008598:	693b      	ldr	r3, [r7, #16]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <MPU_xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xQueueSemaphoreTake( QueueHandle_t xQueue,
                                    TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085ac:	f000 fc34 	bl	8008e18 <xPortRaisePrivilege>
 80085b0:	60f8      	str	r0, [r7, #12]
    BaseType_t xReturn;

    xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 f901 	bl	80017bc <xQueueSemaphoreTake>
 80085ba:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fb77 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 80085c2:	68bb      	ldr	r3, [r7, #8]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <MPU_uxQueueMessagesWaiting>:
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085d4:	f000 fc20 	bl	8008e18 <xPortRaisePrivilege>
 80085d8:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueMessagesWaiting( pxQueue );
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fdba 	bl	8001154 <uxQueueMessagesWaiting>
 80085e0:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fb64 	bl	8009cb0 <vPortResetPrivilege>
    return uxReturn;
 80085e8:	68bb      	ldr	r3, [r7, #8]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <MPU_uxQueueSpacesAvailable>:
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80085fa:	f000 fc0d 	bl	8008e18 <xPortRaisePrivilege>
 80085fe:	60f8      	str	r0, [r7, #12]
    uxReturn = uxQueueSpacesAvailable( xQueue );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7f8 fdc5 	bl	8001190 <uxQueueSpacesAvailable>
 8008606:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fb51 	bl	8009cb0 <vPortResetPrivilege>
    return uxReturn;
 800860e:	68bb      	ldr	r3, [r7, #8]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <MPU_vQueueDelete>:
    }
#endif /* if configQUEUE_REGISTRY_SIZE > 0 */
/*-----------------------------------------------------------*/

void MPU_vQueueDelete( QueueHandle_t xQueue ) /* FREERTOS_SYSTEM_CALL */
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008620:	f000 fbfa 	bl	8008e18 <xPortRaisePrivilege>
 8008624:	60f8      	str	r0, [r7, #12]

    vQueueDelete( xQueue );
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7f8 fdd5 	bl	80011d6 <vQueueDelete>

    vPortResetPrivilege( xRunningPrivileged );
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 fb3f 	bl	8009cb0 <vPortResetPrivilege>
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <MPU_xQueueCreateMutex>:
    {
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	4603      	mov	r3, r0
 8008642:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008644:	f000 fbe8 	bl	8008e18 <xPortRaisePrivilege>
 8008648:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutex( ucQueueType );
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 f822 	bl	8001696 <xQueueCreateMutex>
 8008652:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 fb2b 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 800865a:	68bb      	ldr	r3, [r7, #8]
    }
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <MPU_xQueueCreateMutexStatic>:
    {
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008670:	f000 fbd2 	bl	8008e18 <xPortRaisePrivilege>
 8008674:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateMutexStatic( ucQueueType, pxStaticQueue );
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7f9 f823 	bl	80016c6 <xQueueCreateMutexStatic>
 8008680:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 fb14 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008688:	68bb      	ldr	r3, [r7, #8]
    }
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <MPU_xQueueCreateCountingSemaphore>:
    {
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800869c:	f000 fbbc 	bl	8008e18 <xPortRaisePrivilege>
 80086a0:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueCreateCountingSemaphore( uxCountValue, uxInitialCount );
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f9 f829 	bl	80016fc <xQueueCreateCountingSemaphore>
 80086aa:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 faff 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80086b2:	68bb      	ldr	r3, [r7, #8]
    }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <MPU_xQueueCreateCountingSemaphoreStatic>:
    {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086c8:	f000 fba6 	bl	8008e18 <xPortRaisePrivilege>
 80086cc:	6178      	str	r0, [r7, #20]
        xReturn = xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7f9 f840 	bl	8001758 <xQueueCreateCountingSemaphoreStatic>
 80086d8:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f001 fae8 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80086e0:	693b      	ldr	r3, [r7, #16]
    }
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <MPU_xQueueGetMutexHolder>:
    {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80086f2:	f000 fb91 	bl	8008e18 <xPortRaisePrivilege>
 80086f6:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGetMutexHolder( xSemaphore );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f9 f96b 	bl	80019d4 <xQueueGetMutexHolder>
 80086fe:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fad5 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008706:	68bb      	ldr	r3, [r7, #8]
    }
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <MPU_xQueueTakeMutexRecursive>:
    {
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800871a:	f000 fb7d 	bl	8008e18 <xPortRaisePrivilege>
 800871e:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7f9 f9a0 	bl	8001a68 <xQueueTakeMutexRecursive>
 8008728:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f001 fac0 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008730:	68bb      	ldr	r3, [r7, #8]
    }
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <MPU_xQueueGiveMutexRecursive>:
    {
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008742:	f000 fb69 	bl	8008e18 <xPortRaisePrivilege>
 8008746:	60f8      	str	r0, [r7, #12]
        xReturn = xQueueGiveMutexRecursive( xMutex );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f9 f9c3 	bl	8001ad4 <xQueueGiveMutexRecursive>
 800874e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f001 faad 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 8008756:	68bb      	ldr	r3, [r7, #8]
    }
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <MPU_vQueueAddToRegistry>:
    {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800876a:	f000 fb55 	bl	8008e18 <xPortRaisePrivilege>
 800876e:	60f8      	str	r0, [r7, #12]
        vQueueAddToRegistry( xQueue, pcName );
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 f9e2 	bl	8001b3c <vQueueAddToRegistry>
        vPortResetPrivilege( xRunningPrivileged );
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 fa99 	bl	8009cb0 <vPortResetPrivilege>
    }
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <MPU_vQueueUnregisterQueue>:
    {
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800878e:	f000 fb43 	bl	8008e18 <xPortRaisePrivilege>
 8008792:	60f8      	str	r0, [r7, #12]
        vQueueUnregisterQueue( xQueue );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 fa1f 	bl	8001bd8 <vQueueUnregisterQueue>
        vPortResetPrivilege( xRunningPrivileged );
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 fa88 	bl	8009cb0 <vPortResetPrivilege>
    }
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <MPU_pcQueueGetName>:
    {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087b0:	f000 fb32 	bl	8008e18 <xPortRaisePrivilege>
 80087b4:	60f8      	str	r0, [r7, #12]
        pcReturn = pcQueueGetName( xQueue );
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f9 fa46 	bl	8001c48 <pcQueueGetName>
 80087bc:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f001 fa76 	bl	8009cb0 <vPortResetPrivilege>
        return pcReturn;
 80087c4:	68bb      	ldr	r3, [r7, #8]
    }
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <MPU_xQueueGenericCreate>:
    {
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	4613      	mov	r3, r2
 80087da:	71fb      	strb	r3, [r7, #7]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80087dc:	f000 fb1c 	bl	8008e18 <xPortRaisePrivilege>
 80087e0:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7f9 fa61 	bl	8001cb0 <xQueueGenericCreate>
 80087ee:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f001 fa5d 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 80087f6:	693b      	ldr	r3, [r7, #16]
    }
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <MPU_xQueueGenericCreateStatic>:
    {
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800880e:	f000 fb03 	bl	8008e18 <xPortRaisePrivilege>
 8008812:	6178      	str	r0, [r7, #20]
        xReturn = xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );
 8008814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7f9 fa97 	bl	8001d54 <xQueueGenericCreateStatic>
 8008826:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008828:	6978      	ldr	r0, [r7, #20]
 800882a:	f001 fa41 	bl	8009cb0 <vPortResetPrivilege>
        return xReturn;
 800882e:	693b      	ldr	r3, [r7, #16]
    }
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <MPU_xQueueGenericReset>:
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008842:	f000 fae9 	bl	8008e18 <xPortRaisePrivilege>
 8008846:	60f8      	str	r0, [r7, #12]
    xReturn = xQueueGenericReset( pxQueue, xNewQueue );
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7f9 fb14 	bl	8001e78 <xQueueGenericReset>
 8008850:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 fa2c 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 8008858:	68bb      	ldr	r3, [r7, #8]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <MPU_xTimerCreate>:
    TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction ) /* FREERTOS_SYSTEM_CALL */
    {
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008870:	f000 fad2 	bl	8008e18 <xPortRaisePrivilege>
 8008874:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreate( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fd fd87 	bl	8006394 <xTimerCreate>
 8008886:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f001 fa11 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 800888e:	693b      	ldr	r3, [r7, #16]
    }
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <MPU_xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const UBaseType_t uxAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
        TimerHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088a6:	f000 fab7 	bl	8008e18 <xPortRaisePrivilege>
 80088aa:	6178      	str	r0, [r7, #20]

        xReturn = xTimerCreateStatic( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer );
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7fd fd8b 	bl	80063d6 <xTimerCreateStatic>
 80088c0:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f001 f9f4 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 80088c8:	693b      	ldr	r3, [r7, #16]
    }
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <MPU_pvTimerGetTimerID>:
#endif /* if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void * MPU_pvTimerGetTimerID( const TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
        void * pvReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80088da:	f000 fa9d 	bl	8008e18 <xPortRaisePrivilege>
 80088de:	60f8      	str	r0, [r7, #12]

        pvReturn = pvTimerGetTimerID( xTimer );
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fd fdb6 	bl	8006452 <pvTimerGetTimerID>
 80088e6:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 f9e1 	bl	8009cb0 <vPortResetPrivilege>

        return pvReturn;
 80088ee:	68bb      	ldr	r3, [r7, #8]
    }
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <MPU_vTimerSetTimerID>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    void MPU_vTimerSetTimerID( TimerHandle_t xTimer,
                               void * pvNewID ) /* FREERTOS_SYSTEM_CALL */
    {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008902:	f000 fa89 	bl	8008e18 <xPortRaisePrivilege>
 8008906:	60f8      	str	r0, [r7, #12]

        vTimerSetTimerID( xTimer, pvNewID );
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd fdc1 	bl	8006492 <vTimerSetTimerID>
        vPortResetPrivilege( xRunningPrivileged );
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 f9cd 	bl	8009cb0 <vPortResetPrivilege>
    }
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <MPU_xTimerIsTimerActive>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008926:	f000 fa77 	bl	8008e18 <xPortRaisePrivilege>
 800892a:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerIsTimerActive( xTimer );
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fd fdd0 	bl	80064d2 <xTimerIsTimerActive>
 8008932:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 f9bb 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 800893a:	68bb      	ldr	r3, [r7, #8]
    }
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <MPU_xTimerGetTimerDaemonTaskHandle>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 800894a:	f000 fa65 	bl	8008e18 <xPortRaisePrivilege>
 800894e:	6078      	str	r0, [r7, #4]

        xReturn = xTimerGetTimerDaemonTaskHandle();
 8008950:	f7fd fde8 	bl	8006524 <xTimerGetTimerDaemonTaskHandle>
 8008954:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f9aa 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 800895c:	683b      	ldr	r3, [r7, #0]
    }
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <MPU_xTimerPendFunctionCall>:
#if ( ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )
    BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008974:	f000 fa50 	bl	8008e18 <xPortRaisePrivilege>
 8008978:	6178      	str	r0, [r7, #20]

        xReturn = xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7fd fe0b 	bl	800659c <xTimerPendFunctionCall>
 8008986:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	f001 f991 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 800898e:	693b      	ldr	r3, [r7, #16]
    }
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <MPU_pcTimerGetName>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    const char * MPU_pcTimerGetName( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
        const char * pcReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089a0:	f000 fa3a 	bl	8008e18 <xPortRaisePrivilege>
 80089a4:	60f8      	str	r0, [r7, #12]

        pcReturn = pcTimerGetName( xTimer );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fd fe28 	bl	80065fc <pcTimerGetName>
 80089ac:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f001 f97e 	bl	8009cb0 <vPortResetPrivilege>

        return pcReturn;
 80089b4:	68bb      	ldr	r3, [r7, #8]
    }
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <MPU_vTimerSetReloadMode>:
    {
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089c8:	f000 fa26 	bl	8008e18 <xPortRaisePrivilege>
 80089cc:	60f8      	str	r0, [r7, #12]
        vTimerSetReloadMode( xTimer, uxAutoReload );
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fd fe2f 	bl	8006634 <vTimerSetReloadMode>
        vPortResetPrivilege( xRunningPrivileged );
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 f96a 	bl	8009cb0 <vPortResetPrivilege>
    }
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <MPU_uxTimerGetReloadMode>:
    {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 80089ec:	f000 fa14 	bl	8008e18 <xPortRaisePrivilege>
 80089f0:	60f8      	str	r0, [r7, #12]
        uxReturn = uxTimerGetReloadMode( xTimer );
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fd fe51 	bl	800669a <uxTimerGetReloadMode>
 80089f8:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 f958 	bl	8009cb0 <vPortResetPrivilege>
        return uxReturn;
 8008a00:	68bb      	ldr	r3, [r7, #8]
    }
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <MPU_xTimerGetPeriod>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a12:	f000 fa01 	bl	8008e18 <xPortRaisePrivilege>
 8008a16:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetPeriod( xTimer );
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fd fe67 	bl	80066ec <xTimerGetPeriod>
 8008a1e:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f001 f945 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008a26:	68bb      	ldr	r3, [r7, #8]
    }
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <MPU_xTimerGetExpiryTime>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )
    TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
        TickType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a38:	f000 f9ee 	bl	8008e18 <xPortRaisePrivilege>
 8008a3c:	60f8      	str	r0, [r7, #12]

        xReturn = xTimerGetExpiryTime( xTimer );
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fd fe70 	bl	8006724 <xTimerGetExpiryTime>
 8008a44:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 f932 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
    }
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <MPU_xTimerGenericCommand>:
    BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer,
                                         const BaseType_t xCommandID,
                                         const TickType_t xOptionalValue,
                                         BaseType_t * const pxHigherPriorityTaskWoken,
                                         const TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a64:	f000 f9d8 	bl	8008e18 <xPortRaisePrivilege>
 8008a68:	6178      	str	r0, [r7, #20]

        xReturn = xTimerGenericCommand( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7fd febd 	bl	80067f4 <xTimerGenericCommand>
 8008a7a:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008a7c:	6978      	ldr	r0, [r7, #20]
 8008a7e:	f001 f917 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008a82:	693b      	ldr	r3, [r7, #16]
    }
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <MPU_xEventGroupCreate>:
#endif /* if ( configUSE_TIMERS == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreate( void ) /* FREERTOS_SYSTEM_CALL */
    {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008a92:	f000 f9c1 	bl	8008e18 <xPortRaisePrivilege>
 8008a96:	6078      	str	r0, [r7, #4]

        xReturn = xEventGroupCreate();
 8008a98:	f7f7 fbfe 	bl	8000298 <xEventGroupCreate>
 8008a9c:	6038      	str	r0, [r7, #0]
        vPortResetPrivilege( xRunningPrivileged );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f906 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008aa4:	683b      	ldr	r3, [r7, #0]
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <MPU_xEventGroupCreateStatic>:
#endif /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
        EventGroupHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ab6:	f000 f9af 	bl	8008e18 <xPortRaisePrivilege>
 8008aba:	60f8      	str	r0, [r7, #12]

        xReturn = xEventGroupCreateStatic( pxEventGroupBuffer );
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7f7 fc05 	bl	80002cc <xEventGroupCreateStatic>
 8008ac2:	60b8      	str	r0, [r7, #8]
        vPortResetPrivilege( xRunningPrivileged );
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 f8f3 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008aca:	68bb      	ldr	r3, [r7, #8]
    }
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <MPU_xEventGroupWaitBits>:
EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008ae2:	f000 f999 	bl	8008e18 <xPortRaisePrivilege>
 8008ae6:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7f7 fc21 	bl	800033a <xEventGroupWaitBits>
 8008af8:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008afa:	6978      	ldr	r0, [r7, #20]
 8008afc:	f001 f8d8 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008b00:	693b      	ldr	r3, [r7, #16]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <MPU_xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear ) /* FREERTOS_SYSTEM_CALL */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b14:	f000 f980 	bl	8008e18 <xPortRaisePrivilege>
 8008b18:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f7 fcdb 	bl	80004d8 <xEventGroupClearBits>
 8008b22:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f001 f8c3 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <MPU_xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet ) /* FREERTOS_SYSTEM_CALL */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b3e:	f000 f96b 	bl	8008e18 <xPortRaisePrivilege>
 8008b42:	60f8      	str	r0, [r7, #12]

    xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f7 fd12 	bl	8000570 <xEventGroupSetBits>
 8008b4c:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f8ae 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008b54:	68bb      	ldr	r3, [r7, #8]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <MPU_xEventGroupSync>:

EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	603b      	str	r3, [r7, #0]
    EventBits_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b6c:	f000 f954 	bl	8008e18 <xPortRaisePrivilege>
 8008b70:	6178      	str	r0, [r7, #20]

    xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7f7 fd99 	bl	80006b0 <xEventGroupSync>
 8008b7e:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	f001 f895 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008b86:	693b      	ldr	r3, [r7, #16]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <MPU_vEventGroupDelete>:
/*-----------------------------------------------------------*/

void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup ) /* FREERTOS_SYSTEM_CALL */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008b98:	f000 f93e 	bl	8008e18 <xPortRaisePrivilege>
 8008b9c:	60f8      	str	r0, [r7, #12]

    vEventGroupDelete( xEventGroup );
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7f7 fe58 	bl	8000854 <vEventGroupDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f883 	bl	8009cb0 <vPortResetPrivilege>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <MPU_xStreamBufferSend>:

size_t MPU_xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                              const void * pvTxData,
                              size_t xDataLengthBytes,
                              TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bc0:	f000 f92a 	bl	8008e18 <xPortRaisePrivilege>
 8008bc4:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7f9 fb6f 	bl	80022b0 <xStreamBufferSend>
 8008bd2:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008bd4:	6978      	ldr	r0, [r7, #20]
 8008bd6:	f001 f86b 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008bda:	693b      	ldr	r3, [r7, #16]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <MPU_xStreamBufferReceive>:

size_t MPU_xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                 void * pvRxData,
                                 size_t xBufferLengthBytes,
                                 TickType_t xTicksToWait ) /* FREERTOS_SYSTEM_CALL */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008bf2:	f000 f911 	bl	8008e18 <xPortRaisePrivilege>
 8008bf6:	6178      	str	r0, [r7, #20]

    xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7f9 fc96 	bl	8002530 <xStreamBufferReceive>
 8008c04:	6138      	str	r0, [r7, #16]
    vPortResetPrivilege( xRunningPrivileged );
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f001 f852 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008c0c:	693b      	ldr	r3, [r7, #16]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <MPU_xStreamBufferNextMessageLengthBytes>:
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c1e:	f000 f8fb 	bl	8008e18 <xPortRaisePrivilege>
 8008c22:	60f8      	str	r0, [r7, #12]
    xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7fa f838 	bl	8002c9a <xStreamBufferNextMessageLengthBytes>
 8008c2a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 f83f 	bl	8009cb0 <vPortResetPrivilege>
    return xReturn;
 8008c32:	68bb      	ldr	r3, [r7, #8]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <MPU_vStreamBufferDelete>:
/*-----------------------------------------------------------*/

void MPU_vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c44:	f000 f8e8 	bl	8008e18 <xPortRaisePrivilege>
 8008c48:	60f8      	str	r0, [r7, #12]

    vStreamBufferDelete( xStreamBuffer );
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 fd77 	bl	800273e <vStreamBufferDelete>
    vPortResetPrivilege( xRunningPrivileged );
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 f82d 	bl	8009cb0 <vPortResetPrivilege>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <MPU_xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c66:	f000 f8d7 	bl	8008e18 <xPortRaisePrivilege>
 8008c6a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsFull( xStreamBuffer );
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7f9 fd8d 	bl	800278c <xStreamBufferIsFull>
 8008c72:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f001 f81b 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <MPU_xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008c8c:	f000 f8c4 	bl	8008e18 <xPortRaisePrivilege>
 8008c90:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f9 fdaa 	bl	80027ec <xStreamBufferIsEmpty>
 8008c98:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 f808 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <MPU_xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cb2:	f000 f8b1 	bl	8008e18 <xPortRaisePrivilege>
 8008cb6:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferReset( xStreamBuffer );
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7f9 fdbf 	bl	800283c <xStreamBufferReset>
 8008cbe:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fff5 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <MPU_xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cd8:	f000 f89e 	bl	8008e18 <xPortRaisePrivilege>
 8008cdc:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7f9 fde8 	bl	80028b4 <xStreamBufferSpacesAvailable>
 8008ce4:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 ffe2 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008cec:	68bb      	ldr	r3, [r7, #8]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <MPU_xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t MPU_xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
    size_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008cfe:	f000 f88b 	bl	8008e18 <xPortRaisePrivilege>
 8008d02:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f9 fe10 	bl	800292a <xStreamBufferBytesAvailable>
 8008d0a:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 ffcf 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008d12:	68bb      	ldr	r3, [r7, #8]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <MPU_xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t MPU_xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                             size_t xTriggerLevel ) /* FREERTOS_SYSTEM_CALL */
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d26:	f000 f877 	bl	8008e18 <xPortRaisePrivilege>
 8008d2a:	60f8      	str	r0, [r7, #12]

    xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7f9 fe18 	bl	8002964 <xStreamBufferSetTriggerLevel>
 8008d34:	60b8      	str	r0, [r7, #8]
    vPortResetPrivilege( xRunningPrivileged );
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 ffba 	bl	8009cb0 <vPortResetPrivilege>

    return xReturn;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <MPU_xStreamBufferGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
    StreamBufferHandle_t MPU_xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                         size_t xTriggerLevelBytes,
                                                         BaseType_t xIsMessageBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d52:	f000 f861 	bl	8008e18 <xPortRaisePrivilege>
 8008d56:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer );
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7f9 feb9 	bl	8002ad4 <xStreamBufferGenericCreate>
 8008d62:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f000 ffa3 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008d6a:	693b      	ldr	r3, [r7, #16]
    }
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <MPU_xStreamBufferGenericCreateStatic>:
    StreamBufferHandle_t MPU_xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                                                               size_t xTriggerLevelBytes,
                                                               BaseType_t xIsMessageBuffer,
                                                               uint8_t * const pucStreamBufferStorageArea,
                                                               StaticStreamBuffer_t * const pxStaticStreamBuffer ) /* FREERTOS_SYSTEM_CALL */
    {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
        StreamBufferHandle_t xReturn;
        BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008d82:	f000 f849 	bl	8008e18 <xPortRaisePrivilege>
 8008d86:	6178      	str	r0, [r7, #20]

        xReturn = xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7f9 ff00 	bl	8002b98 <xStreamBufferGenericCreateStatic>
 8008d98:	6138      	str	r0, [r7, #16]
        vPortResetPrivilege( xRunningPrivileged );
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f000 ff88 	bl	8009cb0 <vPortResetPrivilege>

        return xReturn;
 8008da0:	693b      	ldr	r3, [r7, #16]
    }
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <MPU_ASAN_malloc>:
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008db2:	f000 f831 	bl	8008e18 <xPortRaisePrivilege>
 8008db6:	60f8      	str	r0, [r7, #12]
	void *ptr = Allocate(size, 8, FROM_MALLOC, true);
 8008db8:	2301      	movs	r3, #1
 8008dba:	2201      	movs	r2, #1
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fcf8 	bl	80097b4 <Allocate>
 8008dc4:	60b8      	str	r0, [r7, #8]
	vPortResetPrivilege( xRunningPrivileged );
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 ff72 	bl	8009cb0 <vPortResetPrivilege>
	return  (void *	)ptr;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <MPU_ASAN_free>:
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008dde:	f000 f81b 	bl	8008e18 <xPortRaisePrivilege>
 8008de2:	60f8      	str	r0, [r7, #12]
	Deallocate(ptr, 0, 0, FROM_MALLOC);
 8008de4:	2301      	movs	r3, #1
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fef4 	bl	8009bd8 <Deallocate>
	vPortResetPrivilege( xRunningPrivileged );
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 ff5d 	bl	8009cb0 <vPortResetPrivilege>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <MPU_ASAN_flush_alloc>:
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
	BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8008e04:	f000 f808 	bl	8008e18 <xPortRaisePrivilege>
 8008e08:	6078      	str	r0, [r7, #4]
	vPortResetPrivilege( xRunningPrivileged );
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 ff50 	bl	8009cb0 <vPortResetPrivilege>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <xPortRaisePrivilege>:
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    xRunningPrivileged = portIS_PRIVILEGED();
 8008e1e:	f000 ffd7 	bl	8009dd0 <xIsPrivileged>
 8008e22:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <xPortRaisePrivilege+0x14>
        portRAISE_PRIVILEGE();
 8008e2a:	df02      	svc	2
    return xRunningPrivileged;
 8008e2c:	687b      	ldr	r3, [r7, #4]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <__syscalls_flash_end__>:
	...

08008e38 <__do_global_dtors_aux>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4c05      	ldr	r4, [pc, #20]	; (8008e50 <__do_global_dtors_aux+0x18>)
 8008e3c:	7823      	ldrb	r3, [r4, #0]
 8008e3e:	b933      	cbnz	r3, 8008e4e <__do_global_dtors_aux+0x16>
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <__do_global_dtors_aux+0x1c>)
 8008e42:	b113      	cbz	r3, 8008e4a <__do_global_dtors_aux+0x12>
 8008e44:	4804      	ldr	r0, [pc, #16]	; (8008e58 <__do_global_dtors_aux+0x20>)
 8008e46:	f3af 8000 	nop.w
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	7023      	strb	r3, [r4, #0]
 8008e4e:	bd10      	pop	{r4, pc}
 8008e50:	24010000 	.word	0x24010000
 8008e54:	00000000 	.word	0x00000000
 8008e58:	0801c484 	.word	0x0801c484

08008e5c <frame_dummy>:
 8008e5c:	b508      	push	{r3, lr}
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <frame_dummy+0x10>)
 8008e60:	b11b      	cbz	r3, 8008e6a <frame_dummy+0xe>
 8008e62:	4903      	ldr	r1, [pc, #12]	; (8008e70 <frame_dummy+0x14>)
 8008e64:	4803      	ldr	r0, [pc, #12]	; (8008e74 <frame_dummy+0x18>)
 8008e66:	f3af 8000 	nop.w
 8008e6a:	bd08      	pop	{r3, pc}
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	24010004 	.word	0x24010004
 8008e74:	0801c484 	.word	0x0801c484
	...

08008e80 <memchr>:
 8008e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008e84:	2a10      	cmp	r2, #16
 8008e86:	db2b      	blt.n	8008ee0 <memchr+0x60>
 8008e88:	f010 0f07 	tst.w	r0, #7
 8008e8c:	d008      	beq.n	8008ea0 <memchr+0x20>
 8008e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e92:	3a01      	subs	r2, #1
 8008e94:	428b      	cmp	r3, r1
 8008e96:	d02d      	beq.n	8008ef4 <memchr+0x74>
 8008e98:	f010 0f07 	tst.w	r0, #7
 8008e9c:	b342      	cbz	r2, 8008ef0 <memchr+0x70>
 8008e9e:	d1f6      	bne.n	8008e8e <memchr+0xe>
 8008ea0:	b4f0      	push	{r4, r5, r6, r7}
 8008ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008eaa:	f022 0407 	bic.w	r4, r2, #7
 8008eae:	f07f 0700 	mvns.w	r7, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008eb8:	3c08      	subs	r4, #8
 8008eba:	ea85 0501 	eor.w	r5, r5, r1
 8008ebe:	ea86 0601 	eor.w	r6, r6, r1
 8008ec2:	fa85 f547 	uadd8	r5, r5, r7
 8008ec6:	faa3 f587 	sel	r5, r3, r7
 8008eca:	fa86 f647 	uadd8	r6, r6, r7
 8008ece:	faa5 f687 	sel	r6, r5, r7
 8008ed2:	b98e      	cbnz	r6, 8008ef8 <memchr+0x78>
 8008ed4:	d1ee      	bne.n	8008eb4 <memchr+0x34>
 8008ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8008ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008edc:	f002 0207 	and.w	r2, r2, #7
 8008ee0:	b132      	cbz	r2, 8008ef0 <memchr+0x70>
 8008ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	ea83 0301 	eor.w	r3, r3, r1
 8008eec:	b113      	cbz	r3, 8008ef4 <memchr+0x74>
 8008eee:	d1f8      	bne.n	8008ee2 <memchr+0x62>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4770      	bx	lr
 8008ef4:	3801      	subs	r0, #1
 8008ef6:	4770      	bx	lr
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	bf06      	itte	eq
 8008efc:	4635      	moveq	r5, r6
 8008efe:	3803      	subeq	r0, #3
 8008f00:	3807      	subne	r0, #7
 8008f02:	f015 0f01 	tst.w	r5, #1
 8008f06:	d107      	bne.n	8008f18 <memchr+0x98>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008f0e:	bf02      	ittt	eq
 8008f10:	3001      	addeq	r0, #1
 8008f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008f16:	3001      	addeq	r0, #1
 8008f18:	bcf0      	pop	{r4, r5, r6, r7}
 8008f1a:	3801      	subs	r0, #1
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <__aeabi_uldivmod>:
 8008f20:	b953      	cbnz	r3, 8008f38 <__aeabi_uldivmod+0x18>
 8008f22:	b94a      	cbnz	r2, 8008f38 <__aeabi_uldivmod+0x18>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	bf08      	it	eq
 8008f28:	2800      	cmpeq	r0, #0
 8008f2a:	bf1c      	itt	ne
 8008f2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008f30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008f34:	f000 b974 	b.w	8009220 <__aeabi_idiv0>
 8008f38:	f1ad 0c08 	sub.w	ip, sp, #8
 8008f3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008f40:	f000 f806 	bl	8008f50 <__udivmoddi4>
 8008f44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4c:	b004      	add	sp, #16
 8008f4e:	4770      	bx	lr

08008f50 <__udivmoddi4>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	9d08      	ldr	r5, [sp, #32]
 8008f56:	4604      	mov	r4, r0
 8008f58:	468e      	mov	lr, r1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d14d      	bne.n	8008ffa <__udivmoddi4+0xaa>
 8008f5e:	428a      	cmp	r2, r1
 8008f60:	4694      	mov	ip, r2
 8008f62:	d969      	bls.n	8009038 <__udivmoddi4+0xe8>
 8008f64:	fab2 f282 	clz	r2, r2
 8008f68:	b152      	cbz	r2, 8008f80 <__udivmoddi4+0x30>
 8008f6a:	fa01 f302 	lsl.w	r3, r1, r2
 8008f6e:	f1c2 0120 	rsb	r1, r2, #32
 8008f72:	fa20 f101 	lsr.w	r1, r0, r1
 8008f76:	fa0c fc02 	lsl.w	ip, ip, r2
 8008f7a:	ea41 0e03 	orr.w	lr, r1, r3
 8008f7e:	4094      	lsls	r4, r2
 8008f80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008f84:	0c21      	lsrs	r1, r4, #16
 8008f86:	fbbe f6f8 	udiv	r6, lr, r8
 8008f8a:	fa1f f78c 	uxth.w	r7, ip
 8008f8e:	fb08 e316 	mls	r3, r8, r6, lr
 8008f92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008f96:	fb06 f107 	mul.w	r1, r6, r7
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d90a      	bls.n	8008fb4 <__udivmoddi4+0x64>
 8008f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8008fa2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008fa6:	f080 811f 	bcs.w	80091e8 <__udivmoddi4+0x298>
 8008faa:	4299      	cmp	r1, r3
 8008fac:	f240 811c 	bls.w	80091e8 <__udivmoddi4+0x298>
 8008fb0:	3e02      	subs	r6, #2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	1a5b      	subs	r3, r3, r1
 8008fb6:	b2a4      	uxth	r4, r4
 8008fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008fbc:	fb08 3310 	mls	r3, r8, r0, r3
 8008fc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008fc4:	fb00 f707 	mul.w	r7, r0, r7
 8008fc8:	42a7      	cmp	r7, r4
 8008fca:	d90a      	bls.n	8008fe2 <__udivmoddi4+0x92>
 8008fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8008fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fd4:	f080 810a 	bcs.w	80091ec <__udivmoddi4+0x29c>
 8008fd8:	42a7      	cmp	r7, r4
 8008fda:	f240 8107 	bls.w	80091ec <__udivmoddi4+0x29c>
 8008fde:	4464      	add	r4, ip
 8008fe0:	3802      	subs	r0, #2
 8008fe2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008fe6:	1be4      	subs	r4, r4, r7
 8008fe8:	2600      	movs	r6, #0
 8008fea:	b11d      	cbz	r5, 8008ff4 <__udivmoddi4+0xa4>
 8008fec:	40d4      	lsrs	r4, r2
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e9c5 4300 	strd	r4, r3, [r5]
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	428b      	cmp	r3, r1
 8008ffc:	d909      	bls.n	8009012 <__udivmoddi4+0xc2>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	f000 80ef 	beq.w	80091e2 <__udivmoddi4+0x292>
 8009004:	2600      	movs	r6, #0
 8009006:	e9c5 0100 	strd	r0, r1, [r5]
 800900a:	4630      	mov	r0, r6
 800900c:	4631      	mov	r1, r6
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	fab3 f683 	clz	r6, r3
 8009016:	2e00      	cmp	r6, #0
 8009018:	d14a      	bne.n	80090b0 <__udivmoddi4+0x160>
 800901a:	428b      	cmp	r3, r1
 800901c:	d302      	bcc.n	8009024 <__udivmoddi4+0xd4>
 800901e:	4282      	cmp	r2, r0
 8009020:	f200 80f9 	bhi.w	8009216 <__udivmoddi4+0x2c6>
 8009024:	1a84      	subs	r4, r0, r2
 8009026:	eb61 0303 	sbc.w	r3, r1, r3
 800902a:	2001      	movs	r0, #1
 800902c:	469e      	mov	lr, r3
 800902e:	2d00      	cmp	r5, #0
 8009030:	d0e0      	beq.n	8008ff4 <__udivmoddi4+0xa4>
 8009032:	e9c5 4e00 	strd	r4, lr, [r5]
 8009036:	e7dd      	b.n	8008ff4 <__udivmoddi4+0xa4>
 8009038:	b902      	cbnz	r2, 800903c <__udivmoddi4+0xec>
 800903a:	deff      	udf	#255	; 0xff
 800903c:	fab2 f282 	clz	r2, r2
 8009040:	2a00      	cmp	r2, #0
 8009042:	f040 8092 	bne.w	800916a <__udivmoddi4+0x21a>
 8009046:	eba1 010c 	sub.w	r1, r1, ip
 800904a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800904e:	fa1f fe8c 	uxth.w	lr, ip
 8009052:	2601      	movs	r6, #1
 8009054:	0c20      	lsrs	r0, r4, #16
 8009056:	fbb1 f3f7 	udiv	r3, r1, r7
 800905a:	fb07 1113 	mls	r1, r7, r3, r1
 800905e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009062:	fb0e f003 	mul.w	r0, lr, r3
 8009066:	4288      	cmp	r0, r1
 8009068:	d908      	bls.n	800907c <__udivmoddi4+0x12c>
 800906a:	eb1c 0101 	adds.w	r1, ip, r1
 800906e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009072:	d202      	bcs.n	800907a <__udivmoddi4+0x12a>
 8009074:	4288      	cmp	r0, r1
 8009076:	f200 80cb 	bhi.w	8009210 <__udivmoddi4+0x2c0>
 800907a:	4643      	mov	r3, r8
 800907c:	1a09      	subs	r1, r1, r0
 800907e:	b2a4      	uxth	r4, r4
 8009080:	fbb1 f0f7 	udiv	r0, r1, r7
 8009084:	fb07 1110 	mls	r1, r7, r0, r1
 8009088:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800908c:	fb0e fe00 	mul.w	lr, lr, r0
 8009090:	45a6      	cmp	lr, r4
 8009092:	d908      	bls.n	80090a6 <__udivmoddi4+0x156>
 8009094:	eb1c 0404 	adds.w	r4, ip, r4
 8009098:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800909c:	d202      	bcs.n	80090a4 <__udivmoddi4+0x154>
 800909e:	45a6      	cmp	lr, r4
 80090a0:	f200 80bb 	bhi.w	800921a <__udivmoddi4+0x2ca>
 80090a4:	4608      	mov	r0, r1
 80090a6:	eba4 040e 	sub.w	r4, r4, lr
 80090aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80090ae:	e79c      	b.n	8008fea <__udivmoddi4+0x9a>
 80090b0:	f1c6 0720 	rsb	r7, r6, #32
 80090b4:	40b3      	lsls	r3, r6
 80090b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80090ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80090be:	fa20 f407 	lsr.w	r4, r0, r7
 80090c2:	fa01 f306 	lsl.w	r3, r1, r6
 80090c6:	431c      	orrs	r4, r3
 80090c8:	40f9      	lsrs	r1, r7
 80090ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80090ce:	fa00 f306 	lsl.w	r3, r0, r6
 80090d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80090d6:	0c20      	lsrs	r0, r4, #16
 80090d8:	fa1f fe8c 	uxth.w	lr, ip
 80090dc:	fb09 1118 	mls	r1, r9, r8, r1
 80090e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80090e4:	fb08 f00e 	mul.w	r0, r8, lr
 80090e8:	4288      	cmp	r0, r1
 80090ea:	fa02 f206 	lsl.w	r2, r2, r6
 80090ee:	d90b      	bls.n	8009108 <__udivmoddi4+0x1b8>
 80090f0:	eb1c 0101 	adds.w	r1, ip, r1
 80090f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80090f8:	f080 8088 	bcs.w	800920c <__udivmoddi4+0x2bc>
 80090fc:	4288      	cmp	r0, r1
 80090fe:	f240 8085 	bls.w	800920c <__udivmoddi4+0x2bc>
 8009102:	f1a8 0802 	sub.w	r8, r8, #2
 8009106:	4461      	add	r1, ip
 8009108:	1a09      	subs	r1, r1, r0
 800910a:	b2a4      	uxth	r4, r4
 800910c:	fbb1 f0f9 	udiv	r0, r1, r9
 8009110:	fb09 1110 	mls	r1, r9, r0, r1
 8009114:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8009118:	fb00 fe0e 	mul.w	lr, r0, lr
 800911c:	458e      	cmp	lr, r1
 800911e:	d908      	bls.n	8009132 <__udivmoddi4+0x1e2>
 8009120:	eb1c 0101 	adds.w	r1, ip, r1
 8009124:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8009128:	d26c      	bcs.n	8009204 <__udivmoddi4+0x2b4>
 800912a:	458e      	cmp	lr, r1
 800912c:	d96a      	bls.n	8009204 <__udivmoddi4+0x2b4>
 800912e:	3802      	subs	r0, #2
 8009130:	4461      	add	r1, ip
 8009132:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8009136:	fba0 9402 	umull	r9, r4, r0, r2
 800913a:	eba1 010e 	sub.w	r1, r1, lr
 800913e:	42a1      	cmp	r1, r4
 8009140:	46c8      	mov	r8, r9
 8009142:	46a6      	mov	lr, r4
 8009144:	d356      	bcc.n	80091f4 <__udivmoddi4+0x2a4>
 8009146:	d053      	beq.n	80091f0 <__udivmoddi4+0x2a0>
 8009148:	b15d      	cbz	r5, 8009162 <__udivmoddi4+0x212>
 800914a:	ebb3 0208 	subs.w	r2, r3, r8
 800914e:	eb61 010e 	sbc.w	r1, r1, lr
 8009152:	fa01 f707 	lsl.w	r7, r1, r7
 8009156:	fa22 f306 	lsr.w	r3, r2, r6
 800915a:	40f1      	lsrs	r1, r6
 800915c:	431f      	orrs	r7, r3
 800915e:	e9c5 7100 	strd	r7, r1, [r5]
 8009162:	2600      	movs	r6, #0
 8009164:	4631      	mov	r1, r6
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	f1c2 0320 	rsb	r3, r2, #32
 800916e:	40d8      	lsrs	r0, r3
 8009170:	fa0c fc02 	lsl.w	ip, ip, r2
 8009174:	fa21 f303 	lsr.w	r3, r1, r3
 8009178:	4091      	lsls	r1, r2
 800917a:	4301      	orrs	r1, r0
 800917c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009180:	fa1f fe8c 	uxth.w	lr, ip
 8009184:	fbb3 f0f7 	udiv	r0, r3, r7
 8009188:	fb07 3610 	mls	r6, r7, r0, r3
 800918c:	0c0b      	lsrs	r3, r1, #16
 800918e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009192:	fb00 f60e 	mul.w	r6, r0, lr
 8009196:	429e      	cmp	r6, r3
 8009198:	fa04 f402 	lsl.w	r4, r4, r2
 800919c:	d908      	bls.n	80091b0 <__udivmoddi4+0x260>
 800919e:	eb1c 0303 	adds.w	r3, ip, r3
 80091a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80091a6:	d22f      	bcs.n	8009208 <__udivmoddi4+0x2b8>
 80091a8:	429e      	cmp	r6, r3
 80091aa:	d92d      	bls.n	8009208 <__udivmoddi4+0x2b8>
 80091ac:	3802      	subs	r0, #2
 80091ae:	4463      	add	r3, ip
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	b289      	uxth	r1, r1
 80091b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80091b8:	fb07 3316 	mls	r3, r7, r6, r3
 80091bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80091c0:	fb06 f30e 	mul.w	r3, r6, lr
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d908      	bls.n	80091da <__udivmoddi4+0x28a>
 80091c8:	eb1c 0101 	adds.w	r1, ip, r1
 80091cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80091d0:	d216      	bcs.n	8009200 <__udivmoddi4+0x2b0>
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d914      	bls.n	8009200 <__udivmoddi4+0x2b0>
 80091d6:	3e02      	subs	r6, #2
 80091d8:	4461      	add	r1, ip
 80091da:	1ac9      	subs	r1, r1, r3
 80091dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80091e0:	e738      	b.n	8009054 <__udivmoddi4+0x104>
 80091e2:	462e      	mov	r6, r5
 80091e4:	4628      	mov	r0, r5
 80091e6:	e705      	b.n	8008ff4 <__udivmoddi4+0xa4>
 80091e8:	4606      	mov	r6, r0
 80091ea:	e6e3      	b.n	8008fb4 <__udivmoddi4+0x64>
 80091ec:	4618      	mov	r0, r3
 80091ee:	e6f8      	b.n	8008fe2 <__udivmoddi4+0x92>
 80091f0:	454b      	cmp	r3, r9
 80091f2:	d2a9      	bcs.n	8009148 <__udivmoddi4+0x1f8>
 80091f4:	ebb9 0802 	subs.w	r8, r9, r2
 80091f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80091fc:	3801      	subs	r0, #1
 80091fe:	e7a3      	b.n	8009148 <__udivmoddi4+0x1f8>
 8009200:	4646      	mov	r6, r8
 8009202:	e7ea      	b.n	80091da <__udivmoddi4+0x28a>
 8009204:	4620      	mov	r0, r4
 8009206:	e794      	b.n	8009132 <__udivmoddi4+0x1e2>
 8009208:	4640      	mov	r0, r8
 800920a:	e7d1      	b.n	80091b0 <__udivmoddi4+0x260>
 800920c:	46d0      	mov	r8, sl
 800920e:	e77b      	b.n	8009108 <__udivmoddi4+0x1b8>
 8009210:	3b02      	subs	r3, #2
 8009212:	4461      	add	r1, ip
 8009214:	e732      	b.n	800907c <__udivmoddi4+0x12c>
 8009216:	4630      	mov	r0, r6
 8009218:	e709      	b.n	800902e <__udivmoddi4+0xde>
 800921a:	4464      	add	r4, ip
 800921c:	3802      	subs	r0, #2
 800921e:	e742      	b.n	80090a6 <__udivmoddi4+0x156>

08009220 <__aeabi_idiv0>:
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <SytemCall_3_code>:
{

}

__weak  void SytemCall_3_code()
{
 8009224:	b480      	push	{r7}
 8009226:	af00      	add	r7, sp, #0

}
 8009228:	bf00      	nop
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <SytemCall_4_code>:


__weak  void SytemCall_4_code(void *val)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]

}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <SytemCall_5_code>:

__weak  void SytemCall_5_code(void *val)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]

}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <RoundUpTo>:


#if McuASAN_CONFIG_ASAN


static inline uptr RoundUpTo(uptr size, uptr boundary) {
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  return (size + boundary - 1) & ~(boundary - 1);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	4413      	add	r3, r2
 800926a:	1e5a      	subs	r2, r3, #1
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	425b      	negs	r3, r3
 8009270:	4013      	ands	r3, r2
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <RoundDownTo>:


static inline uptr RoundDownTo(uptr x, uptr boundary) {
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  return x & ~(boundary - 1);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	425a      	negs	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4013      	ands	r3, r2
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <IsAligned>:

static inline bool IsAligned(uptr a, uptr alignment) {
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  return (a & (alignment - 1)) == 0;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bf0c      	ite	eq
 80092b2:	2301      	moveq	r3, #1
 80092b4:	2300      	movne	r3, #0
 80092b6:	b2db      	uxtb	r3, r3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <Log2>:

static inline bool IsPowerOfTwo(uptr x) {
  return (x & (x - 1)) == 0;
}

static inline uptr Log2(uptr x) {
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  //CHECK(IsPowerOfTwo(x));
  //return LeastSignificantSetBitIndex(x);
  return (uptr) ffs(x);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f012 f814 	bl	801b2fc <ffs>
 80092d4:	4603      	mov	r3, r0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <__asan_ReportGenericError>:

/* hooks if using -fsanitize=address */
/* -fasan-shadow-offset=number */
/* -fsanitize=kernel-address */
static void __asan_ReportGenericError(void)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	af00      	add	r7, sp, #0
#if 1
  //printf("ASAN generic failure\n");

#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_RW_OVERFLOW);
 80092e2:	2004      	movs	r0, #4
 80092e4:	f000 fcba 	bl	8009c5c <FreeRTOSReportFailure>

#else
  __asm volatile("bkpt #0"); /* stop application */
  for(;;){}
#endif
}
 80092e8:	bf00      	nop
 80092ea:	bd80      	pop	{r7, pc}

080092ec <__asan_report_store1>:

/* below are the required callbacks needed by ASAN */
void __asan_report_store1(void *address)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 80092f4:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 80092f6:	f7ff fff2 	bl	80092de <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 80092fa:	bc0f      	pop	{r0, r1, r2, r3}

}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <__asan_report_store2>:
void __asan_report_store2(void *address)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 800930c:	b40f      	push	{r0, r1, r2, r3}
    __asan_ReportGenericError();
 800930e:	f7ff ffe6 	bl	80092de <__asan_ReportGenericError>
    __asm volatile("pop  {r0-r3}");
 8009312:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <__asan_report_load1>:
	__asm volatile("push {r0-r3}");
	__asan_ReportGenericError();
	__asm volatile("pop  {r0-r3}");
}
void __asan_report_load1(void *address)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
		// when the original code uses registers r0 to r3 as scratchpad.
	    // ASAN callbacks are inserted without taking care of current registers values,
	    // therefore, after returning from the callback the firmware may crash
	    // since the values on r0 and r3 may be different.
	    // Adding push and pop wrappers mitigate this issue saving the scratchpad values
	    __asm volatile("push {r0-r3}");
 8009324:	b40f      	push	{r0, r1, r2, r3}
		__asan_ReportGenericError();
 8009326:	f7ff ffda 	bl	80092de <__asan_ReportGenericError>
		__asm volatile("pop  {r0-r3}");
 800932a:	bc0f      	pop	{r0, r1, r2, r3}
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <__asan_report_load2>:


void __asan_report_load2(void *address) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 800933c:	b40f      	push	{r0, r1, r2, r3}
	__asan_ReportGenericError();
 800933e:	f7ff ffce 	bl	80092de <__asan_ReportGenericError>
	__asm volatile("pop  {r0-r3}");
 8009342:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <__asan_init>:
static void NYI(void) {
  __asm volatile("bkpt #0"); /* stop application */
  for(;;){}
}

void __asan_init(void) {
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0

	   if(!asan_inited)
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <__asan_init+0x30>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f083 0301 	eor.w	r3, r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <__asan_init+0x2c>
	   {
		   __asan_option_detect_stack_use_after_return  = McuASAN_FLAG_DETECT_STACK_USE_AFTER_RETURN;
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <__asan_init+0x34>)
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
		   memset((uint8_t *)( (uint32_t)(McuASAN_CONFIG_APP_MEM_START>>3) + McuASAN_CONFIG_APP_MEM_OFFSET),
 8009364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009368:	2100      	movs	r1, #0
 800936a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800936e:	f012 f90b 	bl	801b588 <memset>
				   0,
				   McuASAN_CONFIG_APP_MEM_SIZE>>3 );
		   asan_inited = true;
 8009372:	4b02      	ldr	r3, [pc, #8]	; (800937c <__asan_init+0x30>)
 8009374:	2201      	movs	r2, #1
 8009376:	701a      	strb	r2, [r3, #0]

	   }

}
 8009378:	bf00      	nop
 800937a:	bd80      	pop	{r7, pc}
 800937c:	2401001c 	.word	0x2401001c
 8009380:	24037400 	.word	0x24037400

08009384 <MEM_TO_SHADOW>:
void __asan_stack_free_4(uptr ptr, uptr size){ NYI();};
void __asan_stack_free_5(uptr ptr, uptr size){ NYI();};



uptr MEM_TO_SHADOW(uptr address) {
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  return   ((((uint32_t)address)>>3 ) + McuASAN_CONFIG_APP_MEM_OFFSET); /* divided by 8: every byte has a shadow bit */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <FastPoisonShadow>:

void FastPoisonShadow(uptr aligned_beg, uptr aligned_size, uint8_t value)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]

  uptr shadow_beg = MEM_TO_SHADOW(aligned_beg);
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff ffe8 	bl	8009384 <MEM_TO_SHADOW>
 80093b4:	6278      	str	r0, [r7, #36]	; 0x24
  uptr shadow_end = MEM_TO_SHADOW(
      aligned_beg + aligned_size - SHADOW_GRANULARITY) + 1;
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4413      	add	r3, r2
  uptr shadow_end = MEM_TO_SHADOW(
 80093bc:	3b08      	subs	r3, #8
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff ffe0 	bl	8009384 <MEM_TO_SHADOW>
 80093c4:	4603      	mov	r3, r0
 80093c6:	3301      	adds	r3, #1
 80093c8:	623b      	str	r3, [r7, #32]

    uptr page_size = 1024; // we don't have paging so lets set to 1024
 80093ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ce:	61fb      	str	r3, [r7, #28]
    uptr page_beg = RoundUpTo(shadow_beg, page_size);
 80093d0:	69f9      	ldr	r1, [r7, #28]
 80093d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093d4:	f7ff ff41 	bl	800925a <RoundUpTo>
 80093d8:	61b8      	str	r0, [r7, #24]
    uptr page_end = RoundDownTo(shadow_end, page_size);
 80093da:	69f9      	ldr	r1, [r7, #28]
 80093dc:	6a38      	ldr	r0, [r7, #32]
 80093de:	f7ff ff4e 	bl	800927e <RoundDownTo>
 80093e2:	6178      	str	r0, [r7, #20]

    if (page_beg >= page_end) {
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d308      	bcc.n	80093fe <FastPoisonShadow+0x5e>
      memset((void *)shadow_beg, value, shadow_end - shadow_beg);
 80093ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ee:	79f9      	ldrb	r1, [r7, #7]
 80093f0:	6a3a      	ldr	r2, [r7, #32]
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	f012 f8c6 	bl	801b588 <memset>
        memset((void *)page_end, value, shadow_end - page_end);
      }
      //ReserveShadowMemoryRange(page_beg, page_end - 1, nullptr);
    }

}
 80093fc:	e017      	b.n	800942e <FastPoisonShadow+0x8e>
      if (page_beg != shadow_beg) {
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d007      	beq.n	8009416 <FastPoisonShadow+0x76>
        memset((void *)shadow_beg, value, page_beg - shadow_beg);
 8009406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009408:	79f9      	ldrb	r1, [r7, #7]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	461a      	mov	r2, r3
 8009412:	f012 f8b9 	bl	801b588 <memset>
      if (page_end != shadow_end) {
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	429a      	cmp	r2, r3
 800941c:	d007      	beq.n	800942e <FastPoisonShadow+0x8e>
        memset((void *)page_end, value, shadow_end - page_end);
 800941e:	6978      	ldr	r0, [r7, #20]
 8009420:	79f9      	ldrb	r1, [r7, #7]
 8009422:	6a3a      	ldr	r2, [r7, #32]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	461a      	mov	r2, r3
 800942a:	f012 f8ad 	bl	801b588 <memset>
}
 800942e:	bf00      	nop
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <FastPoisonShadowPartialRightRedzone>:


void FastPoisonShadowPartialRightRedzone(
    uptr aligned_addr, uptr size, uptr redzone_size, uint8_t value) {
 8009436:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	70fb      	strb	r3, [r7, #3]
  //DCHECK(CanPoisonMemory());
  bool poison_partial = McuASAN_FLAG_POISON_PARTIAL;
 8009446:	2301      	movs	r3, #1
 8009448:	75fb      	strb	r3, [r7, #23]
  uint8_t *shadow = (uint8_t*)MEM_TO_SHADOW(aligned_addr);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff9a 	bl	8009384 <MEM_TO_SHADOW>
 8009450:	4603      	mov	r3, r0
 8009452:	61fb      	str	r3, [r7, #28]
  for (uptr i = 0; i < redzone_size; i += SHADOW_GRANULARITY, shadow++) {
 8009454:	2300      	movs	r3, #0
 8009456:	61bb      	str	r3, [r7, #24]
 8009458:	e02e      	b.n	80094b8 <FastPoisonShadowPartialRightRedzone+0x82>
    if (i + SHADOW_GRANULARITY <= size) {
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2200      	movs	r2, #0
 800945e:	4698      	mov	r8, r3
 8009460:	4691      	mov	r9, r2
 8009462:	f118 0408 	adds.w	r4, r8, #8
 8009466:	f149 0500 	adc.w	r5, r9, #0
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2200      	movs	r2, #0
 800946e:	469a      	mov	sl, r3
 8009470:	4693      	mov	fp, r2
 8009472:	45a2      	cmp	sl, r4
 8009474:	eb7b 0305 	sbcs.w	r3, fp, r5
 8009478:	d303      	bcc.n	8009482 <FastPoisonShadowPartialRightRedzone+0x4c>
      *shadow = 0;  // fully addressable
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2200      	movs	r2, #0
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	e014      	b.n	80094ac <FastPoisonShadowPartialRightRedzone+0x76>
    } else if (i >= size) {
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	d303      	bcc.n	8009492 <FastPoisonShadowPartialRightRedzone+0x5c>
      *shadow = (SHADOW_GRANULARITY == 128) ? 0xff : value;  // unaddressable
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	e00c      	b.n	80094ac <FastPoisonShadowPartialRightRedzone+0x76>
    } else {
      // first size-i bytes are addressable
      *shadow = poison_partial ?(uint8_t)(size - i) : 0;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <FastPoisonShadowPartialRightRedzone+0x70>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	b2da      	uxtb	r2, r3
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	e000      	b.n	80094a8 <FastPoisonShadowPartialRightRedzone+0x72>
 80094a6:	2200      	movs	r2, #0
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	701a      	strb	r2, [r3, #0]
  for (uptr i = 0; i < redzone_size; i += SHADOW_GRANULARITY, shadow++) {
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	3308      	adds	r3, #8
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	3301      	adds	r3, #1
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d3cc      	bcc.n	800945a <FastPoisonShadowPartialRightRedzone+0x24>
    }
  }
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	3720      	adds	r7, #32
 80094c6:	46bd      	mov	sp, r7
 80094c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080094cc <PoisonRedZones>:

void PoisonRedZones(global_t g)
{
 80094cc:	b084      	sub	sp, #16
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	f107 0418 	add.w	r4, r7, #24
 80094d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

uptr aligned_size = RoundUpTo(g.size, SHADOW_GRANULARITY);
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	2108      	movs	r1, #8
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff feba 	bl	800925a <RoundUpTo>
 80094e6:	6078      	str	r0, [r7, #4]


  FastPoisonShadow(g.beg + aligned_size, g.size_with_redzone - aligned_size,
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	18d0      	adds	r0, r2, r3
 80094ee:	6a3a      	ldr	r2, [r7, #32]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	22f9      	movs	r2, #249	; 0xf9
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7ff ff51 	bl	80093a0 <FastPoisonShadow>
                   kAsanGlobalRedzoneMagic);
  if (g.size != aligned_size) {
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d00f      	beq.n	8009526 <PoisonRedZones+0x5a>
    FastPoisonShadowPartialRightRedzone(
        g.beg + RoundDownTo(g.size, SHADOW_GRANULARITY),
 8009506:	69bc      	ldr	r4, [r7, #24]
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	2108      	movs	r1, #8
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff feb6 	bl	800927e <RoundDownTo>
 8009512:	4603      	mov	r3, r0
    FastPoisonShadowPartialRightRedzone(
 8009514:	18e0      	adds	r0, r4, r3
        g.size % SHADOW_GRANULARITY,
 8009516:	69fb      	ldr	r3, [r7, #28]
    FastPoisonShadowPartialRightRedzone(
 8009518:	f003 0107 	and.w	r1, r3, #7
 800951c:	23f9      	movs	r3, #249	; 0xf9
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2208      	movs	r2, #8
 8009522:	f7ff ff88 	bl	8009436 <FastPoisonShadowPartialRightRedzone>
   }

*/


}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr

08009534 <__asan_version_mismatch_check_v8>:

void __asan_version_mismatch_check_v8(void) {  }
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
 8009538:	bf00      	nop
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <__asan_unregister_globals>:

void __asan_unregister_globals(void) {  }
 8009542:	b480      	push	{r7}
 8009544:	af00      	add	r7, sp, #0
 8009546:	bf00      	nop
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <__asan_register_globals>:

void __asan_register_globals( global_t *globals, uptr n)
{
 8009550:	b5b0      	push	{r4, r5, r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af04      	add	r7, sp, #16
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
   int i;
  // global_t *aux;

   for(i=0; i<n ; i++)
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e020      	b.n	80095a2 <__asan_register_globals+0x52>
   {

	   // Check if the global is a valid address in RAM
	   if( (globals[i].beg >= McuASAN_CONFIG_APP_MEM_START) &&
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	015b      	lsls	r3, r3, #5
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	4413      	add	r3, r2
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800956e:	d315      	bcc.n	800959c <__asan_register_globals+0x4c>
		   (globals[i].beg <  (McuASAN_CONFIG_APP_MEM_START + McuASAN_CONFIG_APP_MEM_SIZE ) ))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	015b      	lsls	r3, r3, #5
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	681b      	ldr	r3, [r3, #0]
	   if( (globals[i].beg >= McuASAN_CONFIG_APP_MEM_START) &&
 800957a:	4a0e      	ldr	r2, [pc, #56]	; (80095b4 <__asan_register_globals+0x64>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d80d      	bhi.n	800959c <__asan_register_globals+0x4c>
	   {

		   //aux=&globals[i];
		   PoisonRedZones(globals[i]);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	015b      	lsls	r3, r3, #5
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	18d4      	adds	r4, r2, r3
 8009588:	466d      	mov	r5, sp
 800958a:	f104 0310 	add.w	r3, r4, #16
 800958e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009590:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009594:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009598:	f7ff ff98 	bl	80094cc <PoisonRedZones>
   for(i=0; i<n ; i++)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3301      	adds	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d8da      	bhi.n	8009560 <__asan_register_globals+0x10>
	   }

   }

}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bdb0      	pop	{r4, r5, r7, pc}
 80095b4:	2407ffff 	.word	0x2407ffff

080095b8 <RZSize2Log>:
}




static uint32_t RZSize2Log(uint32_t rz_size) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t res = Log2(rz_size) - 4;
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fe7f 	bl	80092c4 <Log2>
 80095c6:	4603      	mov	r3, r0
 80095c8:	3b04      	subs	r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]
  return res;
 80095cc:	68fb      	ldr	r3, [r7, #12]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <ComputeRZLog>:

uptr ComputeRZLog(uptr user_requested_size) {
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b08a      	sub	sp, #40	; 0x28
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
    uint32_t rz_log =
    user_requested_size <= 64        - 16   ? 0 :
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b30      	cmp	r3, #48	; 0x30
 80095e2:	d924      	bls.n	800962e <ComputeRZLog+0x58>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b60      	cmp	r3, #96	; 0x60
 80095e8:	d91f      	bls.n	800962a <ComputeRZLog+0x54>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80095f0:	d919      	bls.n	8009626 <ComputeRZLog+0x50>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80095f8:	d913      	bls.n	8009622 <ComputeRZLog+0x4c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8009600:	d90d      	bls.n	800961e <ComputeRZLog+0x48>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8009608:	d907      	bls.n	800961a <ComputeRZLog+0x44>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
 8009610:	d801      	bhi.n	8009616 <ComputeRZLog+0x40>
 8009612:	2306      	movs	r3, #6
 8009614:	e00c      	b.n	8009630 <ComputeRZLog+0x5a>
 8009616:	2307      	movs	r3, #7
 8009618:	e00a      	b.n	8009630 <ComputeRZLog+0x5a>
 800961a:	2305      	movs	r3, #5
 800961c:	e008      	b.n	8009630 <ComputeRZLog+0x5a>
 800961e:	2304      	movs	r3, #4
 8009620:	e006      	b.n	8009630 <ComputeRZLog+0x5a>
 8009622:	2303      	movs	r3, #3
 8009624:	e004      	b.n	8009630 <ComputeRZLog+0x5a>
 8009626:	2302      	movs	r3, #2
 8009628:	e002      	b.n	8009630 <ComputeRZLog+0x5a>
 800962a:	2301      	movs	r3, #1
 800962c:	e000      	b.n	8009630 <ComputeRZLog+0x5a>
 800962e:	2300      	movs	r3, #0
    uint32_t rz_log =
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
    user_requested_size <= 512       - 64   ? 2 :
    user_requested_size <= 4096      - 128  ? 3 :
    user_requested_size <= (1 << 14) - 256  ? 4 :
    user_requested_size <= (1 << 15) - 512  ? 5 :
    user_requested_size <= (1 << 16) - 1024 ? 6 : 7;
    uint32_t min_rz =  McuASAN_FLAG_REDZONE;  //atomic_load(&min_redzone, memory_order_acquire);
 8009632:	2310      	movs	r3, #16
 8009634:	623b      	str	r3, [r7, #32]
    uint32_t max_rz =  McuASAN_FLAG_MAX_REDZONE;  //atomic_load(&max_redzone, memory_order_acquire);
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	61fb      	str	r3, [r7, #28]
  return Min(Max(rz_log, RZSize2Log(min_rz)), RZSize2Log(max_rz));
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	61bb      	str	r3, [r7, #24]
 800963e:	6a38      	ldr	r0, [r7, #32]
 8009640:	f7ff ffba 	bl	80095b8 <RZSize2Log>
 8009644:	6178      	str	r0, [r7, #20]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	4293      	cmp	r3, r2
 800964c:	bf38      	it	cc
 800964e:	4613      	movcc	r3, r2
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	69f8      	ldr	r0, [r7, #28]
 8009654:	f7ff ffb0 	bl	80095b8 <RZSize2Log>
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4293      	cmp	r3, r2
 8009660:	bf28      	it	cs
 8009662:	4613      	movcs	r3, r2
}
 8009664:	4618      	mov	r0, r3
 8009666:	3728      	adds	r7, #40	; 0x28
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <PoisonShadow>:





void PoisonShadow(uptr addr, uptr size, uint8_t value) {
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  //CHECK(AddrIsAlignedByGranularity(addr));
  //CHECK(AddrIsInMem(addr));
  //CHECK(AddrIsAlignedByGranularity(addr + size));
  //CHECK(AddrIsInMem(addr + size - SHADOW_GRANULARITY));
  //CHECK(REAL(memset));
   if( (addr>= McuASAN_CONFIG_APP_MEM_START) &&
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009680:	d30a      	bcc.n	8009698 <PoisonShadow+0x2c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <PoisonShadow+0x3c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d806      	bhi.n	8009698 <PoisonShadow+0x2c>
			   (addr <  (McuASAN_CONFIG_APP_MEM_START + McuASAN_CONFIG_APP_MEM_SIZE ) ))
   {
	   FastPoisonShadow(addr, size, value);
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	461a      	mov	r2, r3
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7ff fe85 	bl	80093a0 <FastPoisonShadow>
 8009696:	e003      	b.n	80096a0 <PoisonShadow+0x34>
   }
   else
   {
	   //printf("\n AddressSanitizer failed to poison memory, it is not allocated in RAM");
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_FAIL_POISON);
 8009698:	2007      	movs	r0, #7
 800969a:	f000 fadf 	bl	8009c5c <FreeRTOSReportFailure>
#endif

   }

}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2407ffff 	.word	0x2407ffff

080096ac <ComputeUserRequestedAlignmentLog>:

static uptr ComputeUserRequestedAlignmentLog(uptr user_requested_alignment) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
    if (user_requested_alignment < 8)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	d801      	bhi.n	80096be <ComputeUserRequestedAlignmentLog+0x12>
      return 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	e00b      	b.n	80096d6 <ComputeUserRequestedAlignmentLog+0x2a>
    if (user_requested_alignment > 512)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c4:	d902      	bls.n	80096cc <ComputeUserRequestedAlignmentLog+0x20>
      user_requested_alignment = 512;
 80096c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ca:	607b      	str	r3, [r7, #4]
    return Log2(user_requested_alignment) - 2;
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fdf9 	bl	80092c4 <Log2>
 80096d2:	4603      	mov	r3, r0
 80096d4:	3b02      	subs	r3, #2
  }
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <RZLog2Size>:


static uint32_t RZLog2Size(uint32_t rz_log) {
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  //CHECK_LT(rz_log, 8);
  return 16 << rz_log;
 80096e6:	2210      	movs	r2, #16
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <addAlloc>:
#endif



 static void addAlloc(uint32_t *ptr)
 {
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009704:	4b13      	ldr	r3, [pc, #76]	; (8009754 <addAlloc+0x58>)
 8009706:	60bb      	str	r3, [r7, #8]

	int i=0;
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d019      	beq.n	8009746 <addAlloc+0x4a>
  	{
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8009712:	e015      	b.n	8009740 <addAlloc+0x44>
  	   {
  		    if(pAFLfuzzer->allocs[i]==0)
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800971c:	440b      	add	r3, r1
 800971e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <addAlloc+0x3e>
  		    {
  		    	pAFLfuzzer->allocs[i] = ptr;
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	68f9      	ldr	r1, [r7, #12]
 800972a:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800972e:	440b      	add	r3, r1
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 8009736:	bf00      	nop
  		    }
  		    i++;
  	    }
  	 }
 }
 8009738:	e005      	b.n	8009746 <addAlloc+0x4a>
  		    i++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]
	   while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b09      	cmp	r3, #9
 8009744:	dde6      	ble.n	8009714 <addAlloc+0x18>
 }
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	24020000 	.word	0x24020000

08009758 <delAlloc>:

 static void delAlloc(uint32_t *ptr)
 {
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009760:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <delAlloc+0x58>)
 8009762:	60bb      	str	r3, [r7, #8]
	int i=0;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]
  	if(ptr)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d01a      	beq.n	80097a4 <delAlloc+0x4c>
  	{
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800976e:	e016      	b.n	800979e <delAlloc+0x46>
  	    {
  		    if(pAFLfuzzer->allocs[i]==ptr)
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8009778:	440b      	add	r3, r1
 800977a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d109      	bne.n	8009798 <delAlloc+0x40>
  		    {
  		    	pAFLfuzzer->allocs[i]= NULL;
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	68f9      	ldr	r1, [r7, #12]
 8009788:	f641 230c 	movw	r3, #6668	; 0x1a0c
 800978c:	440b      	add	r3, r1
 800978e:	2100      	movs	r1, #0
 8009790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  			    break;
 8009794:	bf00      	nop
  		    }
  		    i++;
  	    }
  	}
 }
 8009796:	e005      	b.n	80097a4 <delAlloc+0x4c>
  		    i++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
  	    while(i<McuASAN_MAX_NUMBER_ALLOCS)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	dde5      	ble.n	8009770 <delAlloc+0x18>
 }
 80097a4:	bf00      	nop
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	24020000 	.word	0x24020000

080097b4 <Allocate>:
  	}
  }
*/

void *Allocate(uptr size, uptr alignment,
                 AllocType alloc_type, bool can_fill) {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b09c      	sub	sp, #112	; 0x70
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4611      	mov	r1, r2
 80097c0:	461a      	mov	r2, r3
 80097c2:	460b      	mov	r3, r1
 80097c4:	71fb      	strb	r3, [r7, #7]
 80097c6:	4613      	mov	r3, r2
 80097c8:	71bb      	strb	r3, [r7, #6]
        return nullptr;
      ReportRssLimitExceeded(stack);
    }*/

    //CHECK(stack);
    const uptr min_alignment = SHADOW_GRANULARITY;
 80097ca:	2308      	movs	r3, #8
 80097cc:	667b      	str	r3, [r7, #100]	; 0x64

    const uptr user_requested_alignment_log =
        ComputeUserRequestedAlignmentLog(alignment);
 80097ce:	68b8      	ldr	r0, [r7, #8]
 80097d0:	f7ff ff6c 	bl	80096ac <ComputeUserRequestedAlignmentLog>
 80097d4:	6638      	str	r0, [r7, #96]	; 0x60


    if (alignment < min_alignment)
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097da:	429a      	cmp	r2, r3
 80097dc:	d201      	bcs.n	80097e2 <Allocate+0x2e>
      alignment = min_alignment;
 80097de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e0:	60bb      	str	r3, [r7, #8]
    if (size == 0) {
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <Allocate+0x38>
      // some programs/tests depend on this behavior and assume that malloc
      // would not return NULL even for zero-size allocations. Moreover, it
      // looks like operator new should never return NULL, and results of
      // consecutive "new" calls must be different even if the allocated size
      // is zero.
      size = 1;
 80097e8:	2301      	movs	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]
    }
    //CHECK(IsPowerOfTwo(alignment));
    uptr rz_log = ComputeRZLog(size);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff fef2 	bl	80095d6 <ComputeRZLog>
 80097f2:	65f8      	str	r0, [r7, #92]	; 0x5c
    uptr rz_size = RZLog2Size(rz_log);
 80097f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80097f6:	f7ff ff72 	bl	80096de <RZLog2Size>
 80097fa:	65b8      	str	r0, [r7, #88]	; 0x58
    uptr rounded_size = RoundUpTo(Max(size, kChunkHeader2Size), alignment);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009800:	2304      	movs	r3, #4
 8009802:	653b      	str	r3, [r7, #80]	; 0x50
 8009804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009808:	4293      	cmp	r3, r2
 800980a:	bf38      	it	cc
 800980c:	4613      	movcc	r3, r2
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fd22 	bl	800925a <RoundUpTo>
 8009816:	64f8      	str	r0, [r7, #76]	; 0x4c
    uptr needed_size = rounded_size + rz_size;
 8009818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800981a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800981c:	4413      	add	r3, r2
 800981e:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (alignment > min_alignment)
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009824:	429a      	cmp	r2, r3
 8009826:	d903      	bls.n	8009830 <Allocate+0x7c>
      needed_size += alignment;
 8009828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	4413      	add	r3, r2
 800982e:	66fb      	str	r3, [r7, #108]	; 0x6c
    // the primary allocator is only available with Fuchsia and in Adroid 11
    // since we don't have it, we will use standard libc allocator
    bool using_primary_allocator = false;
 8009830:	2300      	movs	r3, #0
 8009832:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    // If we are allocating from the secondary allocator, there will be no
    // automatic right redzone, so add the right redzone manually.

    //if (!PrimaryAllocator::CanAllocate(needed_size, alignment)) {
    needed_size += rz_size; // manually adding the right red zone
 8009836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800983a:	4413      	add	r3, r2
 800983c:	66fb      	str	r3, [r7, #108]	; 0x6c
    // }


    //CHECK(IsAligned(needed_size, min_alignment));

    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 800983e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4293      	cmp	r3, r2
 8009846:	d809      	bhi.n	800985c <Allocate+0xa8>
 8009848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800984c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984e:	4293      	cmp	r3, r2
 8009850:	d804      	bhi.n	800985c <Allocate+0xa8>
        size > max_user_defined_malloc_size) {
 8009852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4293      	cmp	r3, r2
 800985a:	d901      	bls.n	8009860 <Allocate+0xac>
        //printf("AddressSanitizer failed to allocate %d bytes\n", (size_t)size);

        return NULL;
 800985c:	2300      	movs	r3, #0
 800985e:	e0c6      	b.n	80099ee <Allocate+0x23a>
     }

    //AsanThread *t = GetCurrentThread();
    void *allocated;
    allocated = malloc(needed_size);
 8009860:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009862:	f011 fe73 	bl	801b54c <malloc>
 8009866:	4603      	mov	r3, r0
 8009868:	647b      	str	r3, [r7, #68]	; 0x44


    if(!allocated)
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <Allocate+0xc0>
    {
    	//printf("AddressSanitizer malloc run out of memory\n");
        return NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	e0bc      	b.n	80099ee <Allocate+0x23a>
    }

    addAlloc(allocated);
 8009874:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009876:	f7ff ff41 	bl	80096fc <addAlloc>
      // Heap poisoning is enabled, but the allocator provides an unpoisoned
      // chunk. This is possible if CanPoisonMemory() was false for some
      // time, for example, due to flags()->start_disabled.
      // Anyway, poison the block before using it for anything else.
      //uptr allocated_size = allocator.GetActuallyAllocatedSize(allocated);
      uptr allocated_size = needed_size;
 800987a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987c:	643b      	str	r3, [r7, #64]	; 0x40
      PoisonShadow((uptr)allocated, allocated_size, kAsanHeapLeftRedzoneMagic);
 800987e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009880:	22fa      	movs	r2, #250	; 0xfa
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff fef0 	bl	800966c <PoisonShadow>
    //}

    uptr alloc_beg = (uint32_t)(allocated);
 800988c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
    //uptr alloc_end = alloc_beg + needed_size;
    uptr beg_plus_redzone = alloc_beg + rz_size;
 8009890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009894:	4413      	add	r3, r2
 8009896:	63bb      	str	r3, [r7, #56]	; 0x38
    uptr user_beg = beg_plus_redzone;
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	66bb      	str	r3, [r7, #104]	; 0x68

    if (!IsAligned(user_beg, alignment))
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80098a0:	f7ff fcfc 	bl	800929c <IsAligned>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f083 0301 	eor.w	r3, r3, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <Allocate+0x106>
      user_beg = RoundUpTo(user_beg, alignment);
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80098b4:	f7ff fcd1 	bl	800925a <RoundUpTo>
 80098b8:	66b8      	str	r0, [r7, #104]	; 0x68
    //uptr user_end = user_beg + size;
    //CHECK_LE(user_end, alloc_end);

    uptr chunk_beg = user_beg - kChunkHeaderSize;
 80098ba:	2210      	movs	r2, #16
 80098bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	633b      	str	r3, [r7, #48]	; 0x30
    m->alloc_type = alloc_type;
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	b2d9      	uxtb	r1, r3
 80098ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d0:	79d3      	ldrb	r3, [r2, #7]
 80098d2:	f361 0342 	bfi	r3, r1, #1, #2
 80098d6:	71d3      	strb	r3, [r2, #7]
    m->rz_log = rz_log;
 80098d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	b2d9      	uxtb	r1, r3
 80098e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e2:	79d3      	ldrb	r3, [r2, #7]
 80098e4:	f361 03c5 	bfi	r3, r1, #3, #3
 80098e8:	71d3      	strb	r3, [r2, #7]
    uint32_t alloc_tid = 0; // we are not supporting threads
 80098ea:	2300      	movs	r3, #0
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    m->alloc_tid = alloc_tid;
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80098f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f361 231f 	bfi	r3, r1, #8, #24
 80098fc:	6013      	str	r3, [r2, #0]
    //CHECK_EQ(alloc_tid, m->alloc_tid);  // Does alloc_tid fit into the bitfield?
    m->free_tid = kInvalidTid;
 80098fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009902:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009908:	6853      	ldr	r3, [r2, #4]
 800990a:	f361 0317 	bfi	r3, r1, #0, #24
 800990e:	6053      	str	r3, [r2, #4]
    m->from_memalign = user_beg != beg_plus_redzone;
 8009910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	429a      	cmp	r2, r3
 8009916:	bf14      	ite	ne
 8009918:	2301      	movne	r3, #1
 800991a:	2300      	moveq	r3, #0
 800991c:	b2d9      	uxtb	r1, r3
 800991e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009920:	79d3      	ldrb	r3, [r2, #7]
 8009922:	f361 0300 	bfi	r3, r1, #0, #1
 8009926:	71d3      	strb	r3, [r2, #7]
    if (alloc_beg != chunk_beg) {
 8009928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800992a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992c:	429a      	cmp	r2, r3
 800992e:	d007      	beq.n	8009940 <Allocate+0x18c>
      //CHECK_LE(alloc_beg+ 2 * sizeof(uptr), chunk_beg);
      ((uptr *)alloc_beg)[0] = kAllocBegMagic;
 8009930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009932:	4a31      	ldr	r2, [pc, #196]	; (80099f8 <Allocate+0x244>)
 8009934:	601a      	str	r2, [r3, #0]
      ((uptr *)alloc_beg)[1] = chunk_beg;
 8009936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009938:	3304      	adds	r3, #4
 800993a:	461a      	mov	r2, r3
 800993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993e:	6013      	str	r3, [r2, #0]
    }
    if (using_primary_allocator) {
 8009940:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009944:	2b00      	cmp	r3, #0
 8009946:	d008      	beq.n	800995a <Allocate+0x1a6>
      //CHECK(size);
      m->user_requested_size = size;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800994e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009950:	6893      	ldr	r3, [r2, #8]
 8009952:	f361 031c 	bfi	r3, r1, #0, #29
 8009956:	6093      	str	r3, [r2, #8]
 8009958:	e007      	b.n	800996a <Allocate+0x1b6>
    }
    else {

     // we assume the behavior of the secondary allocator will be the same as pthe primary allocator
     //CHECK(!allocator.FromPrimary(allocated));
      m->user_requested_size = size;   // SizeClassMap::kMaxSize;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009962:	6893      	ldr	r3, [r2, #8]
 8009964:	f361 031c 	bfi	r3, r1, #0, #29
 8009968:	6093      	str	r3, [r2, #8]
      //uptr *meta = reinterpret_cast<uptr *>(allocator.GetMetaData(allocated));
      //meta[0] = size;
      //meta[1] = chunk_beg;
    }
    m->user_requested_alignment_log = user_requested_alignment_log;
 800996a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996c:	f003 0307 	and.w	r3, r3, #7
 8009970:	b2d9      	uxtb	r1, r3
 8009972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009974:	7ad3      	ldrb	r3, [r2, #11]
 8009976:	f361 1347 	bfi	r3, r1, #5, #3
 800997a:	72d3      	strb	r3, [r2, #11]

    //m->alloc_context_id = StackDepotPut(*stack);

    uptr size_rounded_down_to_granularity =
        RoundDownTo(size, SHADOW_GRANULARITY);
 800997c:	2108      	movs	r1, #8
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f7ff fc7d 	bl	800927e <RoundDownTo>
 8009984:	62b8      	str	r0, [r7, #40]	; 0x28
    // Unpoison the bulk of the memory region.
    if (size_rounded_down_to_granularity)
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <Allocate+0x1e2>
      PoisonShadow(user_beg, size_rounded_down_to_granularity, 0);
 800998c:	2200      	movs	r2, #0
 800998e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009990:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009992:	f7ff fe6b 	bl	800966c <PoisonShadow>
    // Deal with the end of the region if size is not aligned to granularity.
    if (size != size_rounded_down_to_granularity ) {
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	429a      	cmp	r2, r3
 800999c:	d00e      	beq.n	80099bc <Allocate+0x208>
      uint8_t *shadow =
          (uint8_t *)MEM_TO_SHADOW(user_beg + size_rounded_down_to_granularity);
 800999e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	4413      	add	r3, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fced 	bl	8009384 <MEM_TO_SHADOW>
 80099aa:	4603      	mov	r3, r0
      uint8_t *shadow =
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
      *shadow = McuASAN_FLAG_POISON_PARTIAL ? (size & (SHADOW_GRANULARITY - 1)) : 0;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	701a      	strb	r2, [r3, #0]
    else
      thread_stats.malloced_by_size[SizeClassMap::ClassID(needed_size)]++;

    */

    void *res = (void *)(user_beg);
 80099bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099be:	623b      	str	r3, [r7, #32]
    if (can_fill && McuASAN_FLAG_MAX_MALLOC_FILL_SIZE) {
 80099c0:	79bb      	ldrb	r3, [r7, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00f      	beq.n	80099e6 <Allocate+0x232>
      uptr fill_size = Min(size, McuASAN_FLAG_MAX_MALLOC_FILL_SIZE);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	bf28      	it	cs
 80099d8:	4613      	movcs	r3, r2
 80099da:	617b      	str	r3, [r7, #20]
      memset(res, McuASAN_FLAG_MALLOC_FILL_BYTE, fill_size);
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	21be      	movs	r1, #190	; 0xbe
 80099e0:	6a38      	ldr	r0, [r7, #32]
 80099e2:	f011 fdd1 	bl	801b588 <memset>
    }

    // Must be the last mutation of metadata in this function.
    //atomic_store((uint8_t *)m, CHUNK_ALLOCATED, memory_order_release);
    *(uint8_t *)m = CHUNK_ALLOCATED;
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	2202      	movs	r2, #2
 80099ea:	701a      	strb	r2, [r3, #0]
    //ASAN_MALLOC_HOOK(res, size); //no malloc hooks
    return res;
 80099ec:	6a3b      	ldr	r3, [r7, #32]
  }
 80099ee:	4618      	mov	r0, r3
 80099f0:	3770      	adds	r7, #112	; 0x70
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	cc6e96b9 	.word	0xcc6e96b9

080099fc <ReportDoubleFree>:



void ReportDoubleFree(uptr addr) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	__asm volatile("push {r0-r3}");
 8009a04:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error buffer double free address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_DOUBLE_FREE);
 8009a06:	2001      	movs	r0, #1
 8009a08:	f000 f928 	bl	8009c5c <FreeRTOSReportFailure>
#endif
 __asm volatile("pop  {r0-r3}");
 8009a0c:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <ReportFreeNotMalloced>:

void ReportFreeNotMalloced(uptr addr) {
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]

	__asm volatile("push {r0-r3}");
 8009a1e:	b40f      	push	{r0, r1, r2, r3}
 //printf("Error invalid free  address: %p \n", (uint32_t * )addr);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_INVALID_FREE);
 8009a20:	2003      	movs	r0, #3
 8009a22:	f000 f91b 	bl	8009c5c <FreeRTOSReportFailure>
#endif
	__asm volatile("pop  {r0-r3}");
 8009a26:	bc0f      	pop	{r0, r1, r2, r3}

}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <ReportInvalidFree>:


void ReportInvalidFree(void *ptr, uint8_t chunk_state) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
    if (chunk_state == CHUNK_QUARANTINE)
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d104      	bne.n	8009a4c <ReportInvalidFree+0x1c>
      ReportDoubleFree((uptr)ptr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff ffd9 	bl	80099fc <ReportDoubleFree>
    else
      ReportFreeNotMalloced((uptr)ptr);
  }
 8009a4a:	e003      	b.n	8009a54 <ReportInvalidFree+0x24>
      ReportFreeNotMalloced((uptr)ptr);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff ffe1 	bl	8009a16 <ReportFreeNotMalloced>
  }
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <AtomicallySetQuarantineFlagIfAllocated>:

bool AtomicallySetQuarantineFlagIfAllocated(AsanChunk *m, void *ptr) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
                                      memory_order_acquire)) {
    ReportInvalidFree(ptr, old_chunk_state, stack);
    // It's not safe to push a chunk in quarantine on invalid free.
    return false;
  }*/
  uint8_t *state = (uint8_t *)m;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60fb      	str	r3, [r7, #12]
  if(*state == CHUNK_ALLOCATED)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d104      	bne.n	8009a7c <AtomicallySetQuarantineFlagIfAllocated+0x20>
  {
	  *state = CHUNK_QUARANTINE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2203      	movs	r2, #3
 8009a76:	701a      	strb	r2, [r3, #0]
	  return true;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e006      	b.n	8009a8a <AtomicallySetQuarantineFlagIfAllocated+0x2e>
  }
  else
  {
	  ReportInvalidFree(ptr, *state);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6838      	ldr	r0, [r7, #0]
 8009a84:	f7ff ffd4 	bl	8009a30 <ReportInvalidFree>
	  return false;
 8009a88:	2300      	movs	r3, #0
  }


  //CHECK_EQ(CHUNK_ALLOCATED, old_chunk_state);
  return true;
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <ReportAllocTypeMismatch>:


void ReportAllocTypeMismatch(uptr addr,
                             AllocType alloc_type,
                             AllocType dealloc_type) {
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	70bb      	strb	r3, [r7, #2]
/*
  const char *s[] = {
		  "Malloc",
		  "New",
		  "New BR" };*/
  __asm volatile("push {r0-r3}");
 8009aa2:	b40f      	push	{r0, r1, r2, r3}
  //printf("Error type mismatch alloc:%s, dealloc:%s \n", s[alloc_type], s[dealloc_type]);
#if McuASAN_CONFIG_FreeRTOs
  FreeRTOSReportFailure(EX_ASAN_REALLOC_MISMATCH);
 8009aa4:	2006      	movs	r0, #6
 8009aa6:	f000 f8d9 	bl	8009c5c <FreeRTOSReportFailure>
#endif
  __asm volatile("pop  {r0-r3}");
 8009aaa:	bc0f      	pop	{r0, r1, r2, r3}
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <Beg>:
	__asm volatile("pop  {r0-r3}");

}

uptr Beg(AsanChunk *m)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	return (uptr)(m) + kChunkHeaderSize;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2210      	movs	r2, #16
 8009ac0:	4413      	add	r3, r2
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <AllocBeg>:

uptr AllocBeg(AsanChunk *m)
{
 8009ace:	b590      	push	{r4, r7, lr}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]

	if (m->from_memalign)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	79db      	ldrb	r3, [r3, #7]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d000      	beq.n	8009ae6 <AllocBeg+0x18>
	{
	     //return get_allocator().GetBlockBegin(reinterpret_cast<void *>(this));
		while(1); // this is a special case that we do not support since we do not control the allocator, the code should not reach this point
 8009ae4:	e7fe      	b.n	8009ae4 <AllocBeg+0x16>
				  // unless the allocation of malloc is unnaligned TODO check what happens during testing
	}
	return (Beg(m) - RZLog2Size(m->rz_log));
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ffe4 	bl	8009ab4 <Beg>
 8009aec:	4604      	mov	r4, r0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	79db      	ldrb	r3, [r3, #7]
 8009af2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fdf0 	bl	80096de <RZLog2Size>
 8009afe:	4603      	mov	r3, r0
 8009b00:	1ae3      	subs	r3, r4, r3
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd90      	pop	{r4, r7, pc}

08009b0a <Recycle>:



void Recycle(AsanChunk *m) {
 8009b0a:	b590      	push	{r4, r7, lr}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  //CHECK_EQ(m->chunk_state, CHUNK_QUARANTINE);
  //atomic_store((atomic_uint8_t*)m, CHUNK_AVAILABLE, memory_order_relaxed);

  *(uint8_t*)m = CHUNK_AVAILABLE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]

  //CHECK_NE(m->alloc_tid, kInvalidTid);
  //CHECK_NE(m->free_tid, kInvalidTid);

  PoisonShadow(Beg(m),
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ffcb 	bl	8009ab4 <Beg>
 8009b1e:	4604      	mov	r4, r0
               RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f3c3 031c 	ubfx	r3, r3, #0, #29
  PoisonShadow(Beg(m),
 8009b28:	2108      	movs	r1, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fb95 	bl	800925a <RoundUpTo>
 8009b30:	4601      	mov	r1, r0
 8009b32:	23fa      	movs	r3, #250	; 0xfa
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f7ff fd97 	bl	800966c <PoisonShadow>
               kAsanHeapLeftRedzoneMagic);

  void *p = (void *)(AllocBeg(m));
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ffc5 	bl	8009ace <AllocBeg>
 8009b44:	4603      	mov	r3, r0
 8009b46:	60fb      	str	r3, [r7, #12]

  if (p != m) {
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d004      	beq.n	8009b5a <Recycle+0x50>
    uptr *alloc_magic = (uptr *)(p);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	60bb      	str	r3, [r7, #8]
    //CHECK_EQ(alloc_magic[0], kAllocBegMagic);
    // Clear the magic value, as allocator internals may overwrite the
    // contents of deallocated chunk, confusing GetAsanChunk lookup.
    alloc_magic[0] = 0;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
  // Statistics.
  //AsanStats &thread_stats = GetCurrentThreadStats();
  //thread_stats.real_frees++;
  //thread_stats.really_freed += m->UsedSize();

  delAlloc(p);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff fdfc 	bl	8009758 <delAlloc>
  free(p);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f011 fcfb 	bl	801b55c <free>


}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd90      	pop	{r4, r7, pc}
	...

08009b70 <QuarantineChunk>:



// Expects the chunk to already be marked as quarantined by using
  // AtomicallySetQuarantineFlagIfAllocated.
void QuarantineChunk(AsanChunk *m, void *ptr) {
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
      //  uptr size_to_fill = m->UsedSize() - kChunkHeader2Size;
      //  size_to_fill = Min(size_to_fill, (uptr)fl.max_free_fill_size);
      //  REAL(memset)((void *)scribble_start, fl.free_fill_byte, size_to_fill);
      // }

      uptr size_to_fill = m->user_requested_size;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8009b82:	617b      	str	r3, [r7, #20]
      size_to_fill = Min((size_to_fill), max_free_fill_size);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <QuarantineChunk+0x64>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4293      	cmp	r3, r2
 8009b94:	bf28      	it	cs
 8009b96:	4613      	movcs	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]
      memset(ptr, McuASAN_FLAG_FREE_FILL_BYTE, size_to_fill);
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	2155      	movs	r1, #85	; 0x55
 8009b9e:	6838      	ldr	r0, [r7, #0]
 8009ba0:	f011 fcf2 	bl	801b588 <memset>
    }

    // Poison the region.
    PoisonShadow((uptr)ptr ,
 8009ba4:	683c      	ldr	r4, [r7, #0]
                 RoundUpTo(m->user_requested_size, SHADOW_GRANULARITY),
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f3c3 031c 	ubfx	r3, r3, #0, #29
    PoisonShadow((uptr)ptr ,
 8009bae:	2108      	movs	r1, #8
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fb52 	bl	800925a <RoundUpTo>
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	23fd      	movs	r3, #253	; 0xfd
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f7ff fd54 	bl	800966c <PoisonShadow>
      quarantine.Put(&fallback_quarantine_cache, QuarantineCallback(ac, stack),
                     m, m->UsedSize());
    }
    */

    Recycle(m);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff ffa0 	bl	8009b0a <Recycle>
}
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd90      	pop	{r4, r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	24008004 	.word	0x24008004

08009bd8 <Deallocate>:


void Deallocate(void *ptr, uptr delete_size, uptr delete_alignment, AllocType alloc_type)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	70fb      	strb	r3, [r7, #3]

	uptr p = (uptr)(ptr);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	61fb      	str	r3, [r7, #28]
    if (p == 0) return;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d02c      	beq.n	8009c4a <Deallocate+0x72>

    uptr chunk_beg = p - kChunkHeaderSize;
 8009bf0:	2210      	movs	r2, #16
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	61bb      	str	r3, [r7, #24]
    AsanChunk *m = (AsanChunk *)(chunk_beg);
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	617b      	str	r3, [r7, #20]

    //ASAN_FREE_HOOK(ptr); we do not support hooks

    // Must mark the chunk as quarantined before any changes to its metadata.
    // Do not quarantine given chunk if we failed to set CHUNK_QUARANTINE flag.
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	f7ff ff2c 	bl	8009a5c <AtomicallySetQuarantineFlagIfAllocated>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f083 0301 	eor.w	r3, r3, #1
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d11e      	bne.n	8009c4e <Deallocate+0x76>

    if (m->alloc_type != alloc_type) {
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	79db      	ldrb	r3, [r3, #7]
 8009c14:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d00e      	beq.n	8009c40 <Deallocate+0x68>
      if (alloc_dealloc_mismatch) {
 8009c22:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <Deallocate+0x80>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <Deallocate+0x68>
        ReportAllocTypeMismatch((uptr)ptr, (AllocType)m->alloc_type,
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	79db      	ldrb	r3, [r3, #7]
 8009c30:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	4619      	mov	r1, r3
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7ff ff29 	bl	8009a92 <ReportAllocTypeMismatch>
        ReportNewDeleteTypeMismatch(p, delete_size, delete_alignment);
      }
    }
    */

    QuarantineChunk(m, ptr);
 8009c40:	68f9      	ldr	r1, [r7, #12]
 8009c42:	6978      	ldr	r0, [r7, #20]
 8009c44:	f7ff ff94 	bl	8009b70 <QuarantineChunk>
 8009c48:	e002      	b.n	8009c50 <Deallocate+0x78>
    if (p == 0) return;
 8009c4a:	bf00      	nop
 8009c4c:	e000      	b.n	8009c50 <Deallocate+0x78>
    if (!AtomicallySetQuarantineFlagIfAllocated(m, ptr)) return;
 8009c4e:	bf00      	nop
 }
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	24008000 	.word	0x24008000

08009c5c <FreeRTOSReportFailure>:
}


#endif
static void FreeRTOSReportFailure(type_exception_t  tEX)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]


	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <FreeRTOSReportFailure+0x50>)
 8009c68:	60fb      	str	r3, [r7, #12]


	  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 8009c6a:	f7fe fbf8 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c76:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d114      	bne.n	8009ca8 <FreeRTOSReportFailure+0x4c>
	  {

		  //MPU_ASAN_flush_alloc(); //this must be executed as a system call
		  //xTaskNotifyGiveIndexed(AFLfuzzer.xTaskFuzzer,FAULT_ASAN,eSetValueWithOverwrite);
		  AFLfuzzer.xTypeEx = tEX;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c84:	461a      	mov	r2, r3
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	f882 3874 	strb.w	r3, [r2, #2164]	; 0x874


#if DUALCOREFUZZ == 0

		  xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_ASAN,eSetValueWithOverwrite);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009c92:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8009c96:	2300      	movs	r3, #0
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	2209      	movs	r2, #9
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f7fe fb63 	bl	800836a <MPU_xTaskGenericNotify>
		  taskYIELD();
 8009ca4:	df01      	svc	1
		  while(1);
 8009ca6:	e7fe      	b.n	8009ca6 <FreeRTOSReportFailure+0x4a>
		  // port yield should be called and nothing else should be executed
	  }
	  else
	  {
		  //printf("Fuzzer crashed");
		  for( ; ; )
 8009ca8:	e7fe      	b.n	8009ca8 <FreeRTOSReportFailure+0x4c>
 8009caa:	bf00      	nop
 8009cac:	24020000 	.word	0x24020000

08009cb0 <vPortResetPrivilege>:
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
    if( xRunningPrivileged == pdFALSE )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <vPortResetPrivilege+0x12>
        portRESET_PRIVILEGE();
 8009cbe:	f000 f891 	bl	8009de4 <vResetPrivilege>
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <vPortEnterCritical>:
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009cd2:	f7ff f8a1 	bl	8008e18 <xPortRaisePrivilege>
 8009cd6:	6078      	str	r0, [r7, #4]
    __asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	603b      	str	r3, [r7, #0]
}
 8009cea:	bf00      	nop
    uxCriticalNesting++;
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <vPortEnterCritical+0x38>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	4a04      	ldr	r2, [pc, #16]	; (8009d04 <vPortEnterCritical+0x38>)
 8009cf4:	6013      	str	r3, [r2, #0]
    vPortResetPrivilege( xRunningPrivileged );
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ffda 	bl	8009cb0 <vPortResetPrivilege>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	2400800c 	.word	0x2400800c

08009d08 <vPortExitCritical>:
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
    BaseType_t xRunningPrivileged = xPortRaisePrivilege();
 8009d0e:	f7ff f883 	bl	8008e18 <xPortRaisePrivilege>
 8009d12:	60f8      	str	r0, [r7, #12]
    configASSERT( uxCriticalNesting );
 8009d14:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <vPortExitCritical+0x58>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <vPortExitCritical+0x2a>
    __asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60bb      	str	r3, [r7, #8]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vPortExitCritical+0x28>
    uxCriticalNesting--;
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <vPortExitCritical+0x58>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <vPortExitCritical+0x58>)
 8009d3a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8009d3c:	4b08      	ldr	r3, [pc, #32]	; (8009d60 <vPortExitCritical+0x58>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <vPortExitCritical+0x48>
 8009d44:	2300      	movs	r3, #0
 8009d46:	607b      	str	r3, [r7, #4]
    __asm volatile
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
    vPortResetPrivilege( xRunningPrivileged );
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff ffad 	bl	8009cb0 <vPortResetPrivilege>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	2400800c 	.word	0x2400800c

08009d64 <vPortSetupTimerInterrupt>:
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d68:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <vPortSetupTimerInterrupt+0x34>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d6e:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <vPortSetupTimerInterrupt+0x38>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d74:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <vPortSetupTimerInterrupt+0x3c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <vPortSetupTimerInterrupt+0x40>)
 8009d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7e:	099b      	lsrs	r3, r3, #6
 8009d80:	4a09      	ldr	r2, [pc, #36]	; (8009da8 <vPortSetupTimerInterrupt+0x44>)
 8009d82:	3b01      	subs	r3, #1
 8009d84:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE );
 8009d86:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <vPortSetupTimerInterrupt+0x34>)
 8009d88:	2207      	movs	r2, #7
 8009d8a:	601a      	str	r2, [r3, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	e000e010 	.word	0xe000e010
 8009d9c:	e000e018 	.word	0xe000e018
 8009da0:	24008010 	.word	0x24008010
 8009da4:	10624dd3 	.word	0x10624dd3
 8009da8:	e000e014 	.word	0xe000e014

08009dac <vPortEnableVFP>:
    __asm volatile
 8009dac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009dbc <vPortEnableVFP+0x10>
 8009db0:	6801      	ldr	r1, [r0, #0]
 8009db2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009db6:	6001      	str	r1, [r0, #0]
 8009db8:	4770      	bx	lr
 8009dba:	0000      	.short	0x0000
 8009dbc:	e000ed88 	.word	0xe000ed88
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
	...

08009dd0 <xIsPrivileged>:
    __asm volatile
 8009dd0:	f3ef 8014 	mrs	r0, CONTROL
 8009dd4:	f010 0f01 	tst.w	r0, #1
 8009dd8:	bf14      	ite	ne
 8009dda:	2000      	movne	r0, #0
 8009ddc:	2001      	moveq	r0, #1
 8009dde:	4770      	bx	lr
}
 8009de0:	bf00      	nop
 8009de2:	4618      	mov	r0, r3

08009de4 <vResetPrivilege>:
    __asm volatile
 8009de4:	f3ef 8014 	mrs	r0, CONTROL
 8009de8:	f040 0001 	orr.w	r0, r0, #1
 8009dec:	f380 8814 	msr	CONTROL, r0
 8009df0:	4770      	bx	lr
}
 8009df2:	bf00      	nop

08009df4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009dfa:	f3ef 8305 	mrs	r3, IPSR
 8009dfe:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b0f      	cmp	r3, #15
 8009e04:	d914      	bls.n	8009e30 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e06:	4a17      	ldr	r2, [pc, #92]	; (8009e64 <vPortValidateInterruptPriority+0x70>)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <vPortValidateInterruptPriority+0x74>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	7afa      	ldrb	r2, [r7, #11]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d20a      	bcs.n	8009e30 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	607b      	str	r3, [r7, #4]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredicable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e30:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <vPortValidateInterruptPriority+0x78>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <vPortValidateInterruptPriority+0x7c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d90a      	bls.n	8009e56 <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	603b      	str	r3, [r7, #0]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <vPortValidateInterruptPriority+0x60>
    }
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	e000e3f0 	.word	0xe000e3f0
 8009e68:	2401001d 	.word	0x2401001d
 8009e6c:	e000ed0c 	.word	0xe000ed0c
 8009e70:	24010020 	.word	0x24010020

08009e74 <__sanitizer_cov_trace_pc>:
#include "fuzzing.h"
#include "stdint.h"


void __sanitizer_cov_trace_pc(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0

#if DUALCOREFUZZ
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
#else
	 Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8009e7a:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <__sanitizer_cov_trace_pc+0xd0>)
 8009e7c:	60fb      	str	r3, [r7, #12]
	 //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
	 uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	60bb      	str	r3, [r7, #8]

	register uint32_t R14 asm("r14");

	uint16_t guard;

	guard =  (uint16_t) (R14 & AFL_BITMAP_MASK);
 8009e82:	4673      	mov	r3, lr
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e8a:	80fb      	strh	r3, [r7, #6]

	uint16_t bitmapindex = (uint16_t)( guard^AFLfuzzer.previousGuard);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009e92:	f8b3 2858 	ldrh.w	r2, [r3, #2136]	; 0x858
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	4053      	eors	r3, r2
 8009e9a:	80bb      	strh	r3, [r7, #4]
	bitmapindex &=AFL_BITMAP_MASK;
 8009e9c:	88bb      	ldrh	r3, [r7, #4]
 8009e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ea2:	80bb      	strh	r3, [r7, #4]

	if(!paflbitmap[bitmapindex])
 8009ea4:	88bb      	ldrh	r3, [r7, #4]
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	4413      	add	r3, r2
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d121      	bne.n	8009ef6 <__sanitizer_cov_trace_pc+0x82>
	{
		  AFLfuzzer.indexdif++; // since we need to start the index in 1 the first tuple is empty,
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009eb8:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009ec6:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
		              // we will correct the pointer
		  	  	  	  // when sending the data to the PC
		  paflbitmap[bitmapindex] =  AFLfuzzer.indexdif;
 8009eca:	88bb      	ldrh	r3, [r7, #4]
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8009ed8:	f8b2 2862 	ldrh.w	r2, [r2, #2146]	; 0x862
 8009edc:	801a      	strh	r2, [r3, #0]
		  AFLfuzzer.afldiff[AFLfuzzer.indexdif].index = bitmapindex;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009ee4:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ef0:	88b9      	ldrh	r1, [r7, #4]
 8009ef2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

	 }
	 AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val = (AFLfuzzer.afldiff[paflbitmap[bitmapindex]].val + 1) & 0xff;
 8009ef6:	88bb      	ldrh	r3, [r7, #4]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4413      	add	r3, r2
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	885b      	ldrh	r3, [r3, #2]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	b299      	uxth	r1, r3
 8009f10:	88bb      	ldrh	r3, [r7, #4]
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	4413      	add	r3, r2
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b2ca      	uxtb	r2, r1
 8009f1c:	b291      	uxth	r1, r2
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	460a      	mov	r2, r1
 8009f2a:	805a      	strh	r2, [r3, #2]

	 AFLfuzzer.previousGuard = guard>>1;
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8009f38:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858



}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	24020000 	.word	0x24020000

08009f48 <app_main>:

/* Demo includes. */
#include "mpu_demo.h"

void app_main( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
	/* Start the MPU demo. */
	vStartMPUDemo();
 8009f4c:	f00e fc64 	bl	8018818 <vStartMPUDemo>


	/* Start the scheduler. */
	vTaskStartScheduler();
 8009f50:	f7f9 ff12 	bl	8003d78 <vTaskStartScheduler>

	/* Should not get here. */
	for( ;; );
 8009f54:	e7fe      	b.n	8009f54 <app_main+0xc>

08009f56 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
	/* If configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2 then this
	function will automatically get called if a task overflows its stack. */
	( void ) pxTask;
	( void ) pcTaskName;
	for( ;; );
 8009f60:	e7fe      	b.n	8009f60 <vApplicationStackOverflowHook+0xa>

08009f62 <vApplicationMallocFailedHook>:
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8009f62:	b480      	push	{r7}
 8009f64:	af00      	add	r7, sp, #0
	/* If configUSE_MALLOC_FAILED_HOOK is set to 1 then this function will
	be called automatically if a call to pvPortMalloc() fails.  pvPortMalloc()
	is called automatically when a task, queue or semaphore is created. */
	for( ;; );
 8009f66:	e7fe      	b.n	8009f66 <vApplicationMallocFailedHook+0x4>

08009f68 <vApplicationGetIdleTaskMemory>:

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4a07      	ldr	r2, [pc, #28]	; (8009f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f78:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <vApplicationGetIdleTaskMemory+0x30>)
 8009f7e:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f86:	601a      	str	r2, [r3, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	24010024 	.word	0x24010024
 8009f98:	24010168 	.word	0x24010168

08009f9c <vApplicationGetTimerTaskMemory>:

/* configUSE_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
application must provide an implementation of vApplicationGetTimerTaskMemory()
to provide the memory that is used by the Timer service task. */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009fac:	601a      	str	r2, [r3, #0]

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4a06      	ldr	r2, [pc, #24]	; (8009fcc <vApplicationGetTimerTaskMemory+0x30>)
 8009fb2:	601a      	str	r2, [r3, #0]

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fba:	601a      	str	r2, [r3, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	24011168 	.word	0x24011168
 8009fcc:	240112ac 	.word	0x240112ac

08009fd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009fd4:	f3bf 8f4f 	dsb	sy
}
 8009fd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009fda:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <__NVIC_SystemReset+0x24>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009fe2:	4904      	ldr	r1, [pc, #16]	; (8009ff4 <__NVIC_SystemReset+0x24>)
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <__NVIC_SystemReset+0x28>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fea:	f3bf 8f4f 	dsb	sy
}
 8009fee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <__NVIC_SystemReset+0x20>
 8009ff4:	e000ed00 	.word	0xe000ed00
 8009ff8:	05fa0004 	.word	0x05fa0004

08009ffc <deleteTask>:
extern uint8_t AFLfuzzerRegion[AFLINPUTREGION_SIZE ] __attribute__( ( aligned( AFLINPUTREGION_SIZE ) ) );
#endif


void deleteTask()
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af02      	add	r7, sp, #8

	Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <deleteTask+0x44>)
 800a004:	607b      	str	r3, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	603b      	str	r3, [r7, #0]
    xTaskNotifyFromISR(AFLfuzzer.xTaskFuzzer,FAULT_CRASH,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a010:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a014:	463b      	mov	r3, r7
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	2300      	movs	r3, #0
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	2303      	movs	r3, #3
 800a01e:	2202      	movs	r2, #2
 800a020:	2100      	movs	r1, #0
 800a022:	f7fa fa95 	bl	8004550 <xTaskGenericNotifyFromISR>
	//HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	vTaskDelete(AFLfuzzer.xTaskTarget);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a02c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe f871 	bl	8008118 <MPU_vTaskDelete>

}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	24020000 	.word	0x24020000

0800a044 <vHandleMemoryFault>:


portDONT_DISCARD void vHandleMemoryFault( uint32_t * pulFaultStackAddress )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a04c:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <vHandleMemoryFault+0x48>)
 800a04e:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a050:	f7fe fa05 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a054:	4602      	mov	r2, r0
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a05c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a060:	429a      	cmp	r2, r3
 800a062:	d10f      	bne.n	800a084 <vHandleMemoryFault+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a06e:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a078:	2208      	movs	r2, #8
 800a07a:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a07e:	f7ff ffbd 	bl	8009ffc <deleteTask>
	  }

  }


}
 800a082:	e000      	b.n	800a086 <vHandleMemoryFault+0x42>
	  for( ; ; )
 800a084:	e7fe      	b.n	800a084 <vHandleMemoryFault+0x40>
}
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	24020000 	.word	0x24020000

0800a090 <vNMI_Handler>:



portDONT_DISCARD void vNMI_Handler( uint32_t * pulFaultStackAddress )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a098:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <vNMI_Handler+0x48>)
 800a09a:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a09c:	f7fe f9df 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0a8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d10f      	bne.n	800a0d0 <vNMI_Handler+0x40>
  {
	  //Get the PC where the crash happened
		  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a0ba:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
		  AFLfuzzer.xTypeEx = EX_MPU_VIOLATION;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  deleteTask();
 800a0ca:	f7ff ff97 	bl	8009ffc <deleteTask>
	  }

  }


}
 800a0ce:	e000      	b.n	800a0d2 <vNMI_Handler+0x42>
	  for( ; ; )
 800a0d0:	e7fe      	b.n	800a0d0 <vNMI_Handler+0x40>
}
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	24020000 	.word	0x24020000

0800a0dc <vHardFault_Handler>:


portDONT_DISCARD void vHardFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <vHardFault_Handler+0x2c>)
 800a0e6:	60fb      	str	r3, [r7, #12]

  //this exception is not recoverable
  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a0e8:	f7fe f9b9 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a0f4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d100      	bne.n	800a0fe <vHardFault_Handler+0x22>
  {

 	  //printf("Fuzzer crashed at PC: %x\n", (unsigned int)pulFaultStackAddress[ 6 ]);
	  for( ; ; )
 800a0fc:	e7fe      	b.n	800a0fc <vHardFault_Handler+0x20>
	  }

  }


}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	24020000 	.word	0x24020000

0800a10c <vBusFault_Handler>:


portDONT_DISCARD void vBusFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a114:	4b11      	ldr	r3, [pc, #68]	; (800a15c <vBusFault_Handler+0x50>)
 800a116:	60fb      	str	r3, [r7, #12]



  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a118:	f7fe f9a1 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a11c:	4602      	mov	r2, r0
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a124:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a128:	429a      	cmp	r2, r3
 800a12a:	d10f      	bne.n	800a14c <vBusFault_Handler+0x40>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a136:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  AFLfuzzer.xTypeEx = EX_CORTEX_BUS_FAULT;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a140:	220b      	movs	r2, #11
 800a142:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	  deleteTask();
 800a146:	f7ff ff59 	bl	8009ffc <deleteTask>
	  }

  }


}
 800a14a:	e004      	b.n	800a156 <vBusFault_Handler+0x4a>
		  printf("Fuzzer crash bus fault!\n");
 800a14c:	4804      	ldr	r0, [pc, #16]	; (800a160 <vBusFault_Handler+0x54>)
 800a14e:	f011 fb89 	bl	801b864 <puts>
		  NVIC_SystemReset();
 800a152:	f7ff ff3d 	bl	8009fd0 <__NVIC_SystemReset>
}
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	24020000 	.word	0x24020000
 800a160:	240081e4 	.word	0x240081e4

0800a164 <vUsageFault_Handler>:

portDONT_DISCARD void vUsageFault_Handler( uint32_t * pulFaultStackAddress )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a16c:	4b37      	ldr	r3, [pc, #220]	; (800a24c <vUsageFault_Handler+0xe8>)
 800a16e:	60fb      	str	r3, [r7, #12]


  if(xTaskGetCurrentTaskHandle() == AFLfuzzer.xTaskTarget )
 800a170:	f7fe f975 	bl	800845e <MPU_xTaskGetCurrentTaskHandle>
 800a174:	4602      	mov	r2, r0
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a17c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 800a180:	429a      	cmp	r2, r3
 800a182:	d13f      	bne.n	800a204 <vUsageFault_Handler+0xa0>
  {
	  //Get the PC where the crash happened
	  AFLfuzzer.PCcrash = pulFaultStackAddress[ 6 ] ;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a18e:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
	  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk)
 800a192:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <vUsageFault_Handler+0xec>)
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <vUsageFault_Handler+0x52>
	  {
	      AFLfuzzer.xTypeEx = EX_CORTEX_DIV0;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1a4:	2209      	movs	r2, #9
 800a1a6:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_DIVBYZERO_Msk; //to clean the bit we need to write 1
 800a1aa:	4b29      	ldr	r3, [pc, #164]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	4a28      	ldr	r2, [pc, #160]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1b4:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk)
 800a1b6:	4b26      	ldr	r3, [pc, #152]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00b      	beq.n	800a1da <vUsageFault_Handler+0x76>
	  {
          AFLfuzzer.xTypeEx = EX_CORTEX_UNA_ACCESS;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
          SCB->CFSR |= SCB_CFSR_UNALIGNED_Msk;
 800a1ce:	4b20      	ldr	r3, [pc, #128]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	4a1f      	ldr	r2, [pc, #124]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d8:	6293      	str	r3, [r2, #40]	; 0x28
	  }
	  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk)
 800a1da:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <vUsageFault_Handler+0x9a>
	  {
		  AFLfuzzer.xTypeEx = EX_CORTEX_UNDEF_INST;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a1ec:	220c      	movs	r2, #12
 800a1ee:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
		  SCB->CFSR |= SCB_CFSR_UNDEFINSTR_Msk;
 800a1f2:	4b17      	ldr	r3, [pc, #92]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	4a16      	ldr	r2, [pc, #88]	; (800a250 <vUsageFault_Handler+0xec>)
 800a1f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1fc:	6293      	str	r3, [r2, #40]	; 0x28

	  }
	  deleteTask();
 800a1fe:	f7ff fefd 	bl	8009ffc <deleteTask>
	  }

  }


}
 800a202:	e01f      	b.n	800a244 <vUsageFault_Handler+0xe0>
		  printf("Fuzzer crash usage fault!: ");
 800a204:	4813      	ldr	r0, [pc, #76]	; (800a254 <vUsageFault_Handler+0xf0>)
 800a206:	f011 faa7 	bl	801b758 <iprintf>
		  if(SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) printf("EX_CORTEX_DIV0 \n");
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <vUsageFault_Handler+0xec>)
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <vUsageFault_Handler+0xb8>
 800a216:	4810      	ldr	r0, [pc, #64]	; (800a258 <vUsageFault_Handler+0xf4>)
 800a218:	f011 fb24 	bl	801b864 <puts>
		  if(SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) printf("EX_CORTEX_UNA_ACCESS \n");
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <vUsageFault_Handler+0xec>)
 800a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <vUsageFault_Handler+0xca>
 800a228:	480c      	ldr	r0, [pc, #48]	; (800a25c <vUsageFault_Handler+0xf8>)
 800a22a:	f011 fb1b 	bl	801b864 <puts>
		  if(SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) printf("EX_CORTEX_UNDEF_INST \n");
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <vUsageFault_Handler+0xec>)
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <vUsageFault_Handler+0xdc>
 800a23a:	4809      	ldr	r0, [pc, #36]	; (800a260 <vUsageFault_Handler+0xfc>)
 800a23c:	f011 fb12 	bl	801b864 <puts>
		  NVIC_SystemReset();
 800a240:	f7ff fec6 	bl	8009fd0 <__NVIC_SystemReset>
}
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	24020000 	.word	0x24020000
 800a250:	e000ed00 	.word	0xe000ed00
 800a254:	240081fc 	.word	0x240081fc
 800a258:	24008218 	.word	0x24008218
 800a25c:	24008228 	.word	0x24008228
 800a260:	24008240 	.word	0x24008240

0800a264 <MemManage_Handler>:
void MemManage_Handler( void ) __attribute__ (( naked ));
/*-----------------------------------------------------------*/

void MemManage_Handler( void )
{
	__asm volatile
 800a264:	f01e 0f04 	tst.w	lr, #4
 800a268:	bf0c      	ite	eq
 800a26a:	f3ef 8008 	mrseq	r0, MSP
 800a26e:	f3ef 8009 	mrsne	r0, PSP
 800a272:	f04f 0200 	mov.w	r2, #0
 800a276:	f382 8814 	msr	CONTROL, r2
 800a27a:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a280 <handler_address_const>
 800a27e:	4708      	bx	r1

0800a280 <handler_address_const>:
 800a280:	0800a045 	.word	0x0800a045
		" ldr r1, handler_address_const						\n"
		" bx r1												\n"
		"													\n"
		" handler_address_const: .word vHandleMemoryFault	\n"
	);
}
 800a284:	bf00      	nop

0800a286 <NMI_Handler>:
  */
void NMI_Handler( void ) __attribute__ (( naked ));
void NMI_Handler(void)
{

		__asm volatile
 800a286:	f01e 0f04 	tst.w	lr, #4
 800a28a:	bf0c      	ite	eq
 800a28c:	f3ef 8008 	mrseq	r0, MSP
 800a290:	f3ef 8009 	mrsne	r0, PSP
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	f382 8814 	msr	CONTROL, r2
 800a29c:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2a4 <handler_address_const1+0x2>
 800a2a0:	4708      	bx	r1

0800a2a2 <handler_address_const1>:
 800a2a2:	a091      	.short	0xa091
 800a2a4:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const1: .word vNMI_Handler	\n"
		);

}
 800a2a6:	bf00      	nop

0800a2a8 <HardFault_Handler>:
  */
void HardFault_Handler( void ) __attribute__ (( naked ));
void HardFault_Handler(void)
{

		__asm volatile
 800a2a8:	f01e 0f04 	tst.w	lr, #4
 800a2ac:	bf0c      	ite	eq
 800a2ae:	f3ef 8008 	mrseq	r0, MSP
 800a2b2:	f3ef 8009 	mrsne	r0, PSP
 800a2b6:	f04f 0200 	mov.w	r2, #0
 800a2ba:	f382 8814 	msr	CONTROL, r2
 800a2be:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2c4 <handler_address_const2>
 800a2c2:	4708      	bx	r1

0800a2c4 <handler_address_const2>:
 800a2c4:	0800a0dd 	.word	0x0800a0dd
			" bx r1												\n"
			"													\n"
			" handler_address_const2: .word vHardFault_Handler	\n"
		);

}
 800a2c8:	bf00      	nop

0800a2ca <BusFault_Handler>:
  */
void BusFault_Handler( void ) __attribute__ (( naked ));
void BusFault_Handler(void)
{

		__asm volatile
 800a2ca:	f01e 0f04 	tst.w	lr, #4
 800a2ce:	bf0c      	ite	eq
 800a2d0:	f3ef 8008 	mrseq	r0, MSP
 800a2d4:	f3ef 8009 	mrsne	r0, PSP
 800a2d8:	f04f 0200 	mov.w	r2, #0
 800a2dc:	f382 8814 	msr	CONTROL, r2
 800a2e0:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a2e8 <handler_address_const3+0x2>
 800a2e4:	4708      	bx	r1

0800a2e6 <handler_address_const3>:
 800a2e6:	a10d      	.short	0xa10d
 800a2e8:	0800      	.short	0x0800
			" bx r1												\n"
			"													\n"
			" handler_address_const3: .word vBusFault_Handler	\n"
		);

}
 800a2ea:	bf00      	nop

0800a2ec <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler( void ) __attribute__ (( naked ));
void UsageFault_Handler(void)
{
		__asm volatile
 800a2ec:	f01e 0f04 	tst.w	lr, #4
 800a2f0:	bf0c      	ite	eq
 800a2f2:	f3ef 8008 	mrseq	r0, MSP
 800a2f6:	f3ef 8009 	mrsne	r0, PSP
 800a2fa:	f04f 0200 	mov.w	r2, #0
 800a2fe:	f382 8814 	msr	CONTROL, r2
 800a302:	f8df 1004 	ldr.w	r1, [pc, #4]	; 800a308 <handler_address_const5>
 800a306:	4708      	bx	r1

0800a308 <handler_address_const5>:
 800a308:	0800a165 	.word	0x0800a165
			" bx r1												\n"
			"													\n"
			" handler_address_const5: .word vUsageFault_Handler	\n"
		);

}
 800a30c:	bf00      	nop
	...

0800a310 <checkCRC>:
//extern UART_HandleTypeDef huart3;



bool checkCRC(RingBuffer_t *input)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	uint32_t numberwords;
	uint32_t *crcreceived;

	numberwords = (input->u32available-4)/4;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a31e:	3b04      	subs	r3, #4
 800a320:	089b      	lsrs	r3, r3, #2
 800a322:	617b      	str	r3, [r7, #20]

	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)input->uxBuffer, numberwords );
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4619      	mov	r1, r3
 800a32a:	480c      	ldr	r0, [pc, #48]	; (800a35c <checkCRC+0x4c>)
 800a32c:	f001 fbd6 	bl	800badc <HAL_CRC_Calculate>
 800a330:	6138      	str	r0, [r7, #16]

	uwCRCValue = ~uwCRCValue;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	43db      	mvns	r3, r3
 800a336:	613b      	str	r3, [r7, #16]
	crcreceived = (uint32_t *)(input->uxBuffer);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60fb      	str	r3, [r7, #12]

	if (crcreceived[numberwords] == uwCRCValue)
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4413      	add	r3, r2
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d101      	bne.n	800a350 <checkCRC+0x40>
	{
		return true;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <checkCRC+0x42>
	}
	return false;
 800a350:	2300      	movs	r3, #0

}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	240116ac 	.word	0x240116ac

0800a360 <SendBackFault>:

extern uint8_t  bufferDMA[512];
void SendBackFault(uint32_t faultcode)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

//#if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a368:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <SendBackFault+0xc8>)
 800a36a:	60fb      	str	r3, [r7, #12]
//#endif


	RingClear(&AFLfuzzer.inputAFL);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f9a9 	bl	800a6ca <RingClear>
	AFLfuzzer.inputLength = 0;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a37e:	461a      	mov	r2, r3
 800a380:	2300      	movs	r3, #0
 800a382:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.inputLengthpadded = 0;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a38c:	461a      	mov	r2, r3
 800a38e:	2300      	movs	r3, #0
 800a390:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828


	AFLfuzzer.aflheader[0] = faultcode;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a39a:	461a      	mov	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
	AFLfuzzer.aflheader[1] = 4; // 4 bytes for CRC and no payload
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
	uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f646 0314 	movw	r3, #26644	; 0x6814
 800a3b6:	4413      	add	r3, r2
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	481b      	ldr	r0, [pc, #108]	; (800a42c <SendBackFault+0xcc>)
 800a3be:	f001 fb8d 	bl	800badc <HAL_CRC_Calculate>
 800a3c2:	60b8      	str	r0, [r7, #8]
	AFLfuzzer.aflheader[2] = ~uwCRCValue;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a3ce:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c


	AFLfuzzer.bRXcomplete = false;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	AFLfuzzer.inputLength = 0;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
	AFLfuzzer.previousGuard = 0;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
	AFLfuzzer.faultcom = true;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
	RingZeroes(&AFLfuzzer.inputAFL);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f97b 	bl	800a706 <RingZeroes>

#if USARTHW == 0
    #ifdef STM32H723xx
	    CDC_Transmit_HS((uint8_t *)AFLfuzzer.aflheader, 12);
    #else
        CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 12);
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	f646 0314 	movw	r3, #26644	; 0x6814
 800a416:	4413      	add	r3, r2
 800a418:	210c      	movs	r1, #12
 800a41a:	4618      	mov	r0, r3
 800a41c:	f010 fab8 	bl	801a990 <CDC_Transmit_FS>

#endif



}
 800a420:	bf00      	nop
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	24020000 	.word	0x24020000
 800a42c:	240116ac 	.word	0x240116ac

0800a430 <FuzzingInputHandler>:



void FuzzingInputHandler(uint8_t* Buf, uint32_t *Len)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	; 0x28
 800a434:	af02      	add	r7, sp, #8
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]

	  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 800a43a:	4b7a      	ldr	r3, [pc, #488]	; (800a624 <FuzzingInputHandler+0x1f4>)
 800a43c:	617b      	str	r3, [r7, #20]
	  BaseType_t xHigherPriorityTaskWoken;

	  xHigherPriorityTaskWoken = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	613b      	str	r3, [r7, #16]
	  union ubytes_t auxbytes;
	  uint32_t u32Tocopy;
	  uint8_t error;


	  error = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	76fb      	strb	r3, [r7, #27]

	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a44c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <FuzzingInputHandler+0x32>
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a45a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00f      	beq.n	800a482 <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a468:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
	  if( (AFLfuzzer.inputLength != 0 && AFLfuzzer.inputLengthpadded == 0) ||
 800a46c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a470:	d807      	bhi.n	800a482 <FuzzingInputHandler+0x52>
	   	   AFLfuzzer.inputLength > MAX_BUFFER_INPUT || 	AFLfuzzer.inputLengthpadded> MAX_BUFFER_INPUT )
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a478:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a47c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a480:	d904      	bls.n	800a48c <FuzzingInputHandler+0x5c>
	  {
	    	  //this is a wrong condition that should never happens,
	    	  //however fuzzing is stressing the whole system so we should clean the whole thing here
	    	  SendBackFault(FAULT_INLEGTH);
 800a482:	2007      	movs	r0, #7
 800a484:	f7ff ff6c 	bl	800a360 <SendBackFault>
	    	  error = 1;
 800a488:	2301      	movs	r3, #1
 800a48a:	76fb      	strb	r3, [r7, #27]
	  }

	  if( AFLfuzzer.inputLength == 0 && error == 0 )
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a492:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a496:	2b00      	cmp	r3, #0
 800a498:	d144      	bne.n	800a524 <FuzzingInputHandler+0xf4>
 800a49a:	7efb      	ldrb	r3, [r7, #27]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d141      	bne.n	800a524 <FuzzingInputHandler+0xf4>
	  {
	      auxbytes.vbytes[0]=Buf[0];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	733b      	strb	r3, [r7, #12]
	      auxbytes.vbytes[1]=Buf[1];
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	737b      	strb	r3, [r7, #13]
	      auxbytes.vbytes[2]=Buf[2];
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	789b      	ldrb	r3, [r3, #2]
 800a4b0:	73bb      	strb	r3, [r7, #14]
	      auxbytes.vbytes[3]=Buf[3];
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	78db      	ldrb	r3, [r3, #3]
 800a4b6:	73fb      	strb	r3, [r7, #15]
	      AFLfuzzer.inputLength = auxbytes.vint32;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4c2:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
	      //offset = 4;
	      if(AFLfuzzer.inputLength % 4)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4cc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4d0:	f003 0303 	and.w	r3, r3, #3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00d      	beq.n	800a4f4 <FuzzingInputHandler+0xc4>
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength + 4 - AFLfuzzer.inputLength % 4;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4de:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a4ee:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
 800a4f2:	e009      	b.n	800a508 <FuzzingInputHandler+0xd8>
	      }
	      else
	      {
	      	  AFLfuzzer.inputLengthpadded = AFLfuzzer.inputLength;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a4fa:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a504:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
	      }

	      if((AFLfuzzer.inputLengthpadded + 4 )> MAX_BUFFER_INPUT)
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a50e:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a512:	3304      	adds	r3, #4
 800a514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a518:	d904      	bls.n	800a524 <FuzzingInputHandler+0xf4>
	      {
        	  //u32copied = 0;
        	  SendBackFault(FAULT_INLEGTH);
 800a51a:	2007      	movs	r0, #7
 800a51c:	f7ff ff20 	bl	800a360 <SendBackFault>
        	  error = 1;
 800a520:	2301      	movs	r3, #1
 800a522:	76fb      	strb	r3, [r7, #27]

          }

      }

      if(AFLfuzzer.inputLengthpadded && (error == 0) )
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a52a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d06c      	beq.n	800a60c <FuzzingInputHandler+0x1dc>
 800a532:	7efb      	ldrb	r3, [r7, #27]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d169      	bne.n	800a60c <FuzzingInputHandler+0x1dc>
      {


	    	 u32Tocopy = (AFLfuzzer.inputLengthpadded + 4) - AFLfuzzer.inputAFL.u32available;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a53e:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a548:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	3304      	adds	r3, #4
 800a550:	61fb      	str	r3, [r7, #28]
	    	 if (u32Tocopy > *Len)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d902      	bls.n	800a562 <FuzzingInputHandler+0x132>
	    	 {
	    		 u32Tocopy = *Len;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	61fb      	str	r3, [r7, #28]

	    	 }
	    	 RingCopy(&AFLfuzzer.inputAFL, Buf, u32Tocopy);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a568:	69fa      	ldr	r2, [r7, #28]
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f85d 	bl	800a62c <RingCopy>


	  	     if( (AFLfuzzer.inputLengthpadded + 4) == AFLfuzzer.inputAFL.u32available)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a578:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a584:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a588:	429a      	cmp	r2, r3
 800a58a:	d13f      	bne.n	800a60c <FuzzingInputHandler+0x1dc>
	  	     {

	  	    	if( checkCRC(&AFLfuzzer.inputAFL) )
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff febc 	bl	800a310 <checkCRC>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d02d      	beq.n	800a5fa <FuzzingInputHandler+0x1ca>
	  	    	{

	  	    		AFLfuzzer.inputAFL.u32availablenopad = AFLfuzzer.inputLength;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5a4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800a5ae:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
	  	    		AFLfuzzer.bRXcomplete = 1;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
	  	    		AFLfuzzer.timespan = HAL_GetTick();
 800a5be:	f001 f897 	bl	800b6f0 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5ca:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
	  	    		//if(AFLfuzzer.inputAFL.u32availablenopad ==0)printf("Zero USB \n");
	  	    		AFLfuzzer.faultcom = false;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

	  	    		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a5e0:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	f7f9 ffac 	bl	8004550 <xTaskGenericNotifyFromISR>
 800a5f8:	e008      	b.n	800a60c <FuzzingInputHandler+0x1dc>
	  	    	}
	  	    	else
	  	    	{
	  	    		// wrong CRC
	  	    		//u32copied = 0;
	  	    		AFLfuzzer.faultcom = true;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
	  	    		SendBackFault(FAULT_COMM);
 800a606:	2006      	movs	r0, #6
 800a608:	f7ff feaa 	bl	800a360 <SendBackFault>

	  	     }


      }
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <FuzzingInputHandler+0x1ea>
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <FuzzingInputHandler+0x1f8>)
 800a614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a618:	601a      	str	r2, [r3, #0]

}
 800a61a:	bf00      	nop
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	24020000 	.word	0x24020000
 800a628:	e000ed04 	.word	0xe000ed04

0800a62c <RingCopy>:


/* Ring Buffer functions */

void RingCopy(RingBuffer_t *xRingBuffer, uint8_t* u8Buff, uint32_t len)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
	uint32_t u32Free=0;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]


	u32Free = MAX_BUFFER_INPUT - xRingBuffer->u32end;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a642:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800a646:	617b      	str	r3, [r7, #20]

	if(u32Free > len)
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d91a      	bls.n	800a686 <RingCopy+0x5a>
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, len );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	4618      	mov	r0, r3
 800a660:	f010 ff84 	bl	801b56c <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + len);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	441a      	add	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += len;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	441a      	add	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800a684:	e019      	b.n	800a6ba <RingCopy+0x8e>

	}
	else
	{
		memcpy( &xRingBuffer->uxBuffer[xRingBuffer->u32end], u8Buff, u32Free);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	4413      	add	r3, r2
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	4618      	mov	r0, r3
 800a696:	f010 ff69 	bl	801b56c <memcpy>
		xRingBuffer->u32end = (xRingBuffer->u32end + u32Free);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	441a      	add	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		xRingBuffer->u32available += u32Free;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	}

	xRingBuffer->overflow = false;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810

}
 800a6c2:	bf00      	nop
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <RingClear>:
{
return xRingBuffer->u32available;
}

void RingClear(RingBuffer_t *xRingBuffer)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
xRingBuffer->u32start = 0;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
xRingBuffer->u32end = 0;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
xRingBuffer->u32available = 0;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
xRingBuffer->u32availablenopad = 0;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
xRingBuffer->overflow = false;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <RingZeroes>:


void RingZeroes(RingBuffer_t *xRingBuffer)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
	RingClear(xRingBuffer);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff ffdb 	bl	800a6ca <RingClear>
	{
		xRingBuffer->uxBuffer[i]=0;
	}
*/

}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <__io_putchar>:
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch) {
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 800a726:	1df9      	adds	r1, r7, #7
 800a728:	2301      	movs	r3, #1
 800a72a:	2201      	movs	r2, #1
 800a72c:	4803      	ldr	r0, [pc, #12]	; (800a73c <__io_putchar+0x20>)
 800a72e:	f009 f90d 	bl	801394c <HAL_UART_Transmit>
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	24011804 	.word	0x24011804

0800a740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a744:	4b21      	ldr	r3, [pc, #132]	; (800a7cc <main+0x8c>)
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11b      	bne.n	800a788 <main+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
 800a750:	f3bf 8f4f 	dsb	sy
}
 800a754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a756:	f3bf 8f6f 	isb	sy
}
 800a75a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <main+0x8c>)
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a764:	f3bf 8f4f 	dsb	sy
}
 800a768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a76a:	f3bf 8f6f 	isb	sy
}
 800a76e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a770:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <main+0x8c>)
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	4a15      	ldr	r2, [pc, #84]	; (800a7cc <main+0x8c>)
 800a776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a77c:	f3bf 8f4f 	dsb	sy
}
 800a780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a782:	f3bf 8f6f 	isb	sy
}
 800a786:	e000      	b.n	800a78a <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a788:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a78a:	f000 ff61 	bl	800b650 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a78e:	f000 f81f 	bl	800a7d0 <SystemClock_Config>
  //bRXcomplete = false;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a792:	f000 fa0f 	bl	800abb4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800a796:	f000 f99f 	bl	800aad8 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800a79a:	f000 f8eb 	bl	800a974 <MX_RNG_Init>
  MX_DMA_Init();
 800a79e:	f000 f9e9 	bl	800ab74 <MX_DMA_Init>
  MX_UART4_Init();
 800a7a2:	f000 f8fd 	bl	800a9a0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800a7a6:	f000 f949 	bl	800aa3c <MX_USART2_UART_Init>
  MX_CRC_Init();
 800a7aa:	f000 f8c1 	bl	800a930 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //activateCortexMtraps();

  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 800a7ae:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <main+0x8c>)
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	4a06      	ldr	r2, [pc, #24]	; (800a7cc <main+0x8c>)
 800a7b4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a7b8:	6253      	str	r3, [r2, #36]	; 0x24
 	  | SCB_SHCSR_BUSFAULTENA_Msk
 	  | SCB_SHCSR_MEMFAULTENA_Msk; // enable Usage-/Bus-/MPU Fault

 	  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk ; // enable div by zero trap
 800a7ba:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <main+0x8c>)
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	4a03      	ldr	r2, [pc, #12]	; (800a7cc <main+0x8c>)
 800a7c0:	f043 0310 	orr.w	r3, r3, #16
 800a7c4:	6153      	str	r3, [r2, #20]


  // call RTOS initialization routines
  app_main();
 800a7c6:	f7ff fbbf 	bl	8009f48 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     //uint8_t dat[]="hello!\n";
     while (1)
 800a7ca:	e7fe      	b.n	800a7ca <main+0x8a>
 800a7cc:	e000ed00 	.word	0xe000ed00

0800a7d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b09e      	sub	sp, #120	; 0x78
 800a7d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a7d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7da:	224c      	movs	r2, #76	; 0x4c
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f010 fed2 	bl	801b588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7e4:	f107 030c 	add.w	r3, r7, #12
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f010 fecb 	bl	801b588 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a7f2:	2002      	movs	r0, #2
 800a7f4:	f006 f8b2 	bl	801095c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60bb      	str	r3, [r7, #8]
 800a7fc:	4b49      	ldr	r3, [pc, #292]	; (800a924 <SystemClock_Config+0x154>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a48      	ldr	r2, [pc, #288]	; (800a924 <SystemClock_Config+0x154>)
 800a802:	f023 0301 	bic.w	r3, r3, #1
 800a806:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a808:	4b46      	ldr	r3, [pc, #280]	; (800a924 <SystemClock_Config+0x154>)
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	4b45      	ldr	r3, [pc, #276]	; (800a928 <SystemClock_Config+0x158>)
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	4a44      	ldr	r2, [pc, #272]	; (800a928 <SystemClock_Config+0x158>)
 800a818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a81c:	6193      	str	r3, [r2, #24]
 800a81e:	4b42      	ldr	r3, [pc, #264]	; (800a928 <SystemClock_Config+0x158>)
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a826:	60bb      	str	r3, [r7, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a82a:	bf00      	nop
 800a82c:	4b3e      	ldr	r3, [pc, #248]	; (800a928 <SystemClock_Config+0x158>)
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a838:	d1f8      	bne.n	800a82c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a83a:	4b3c      	ldr	r3, [pc, #240]	; (800a92c <SystemClock_Config+0x15c>)
 800a83c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a840:	4a3a      	ldr	r2, [pc, #232]	; (800a92c <SystemClock_Config+0x15c>)
 800a842:	f043 0302 	orr.w	r3, r3, #2
 800a846:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a84a:	4b38      	ldr	r3, [pc, #224]	; (800a92c <SystemClock_Config+0x15c>)
 800a84c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	607b      	str	r3, [r7, #4]
 800a856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a858:	2300      	movs	r3, #0
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <SystemClock_Config+0x158>)
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	4a31      	ldr	r2, [pc, #196]	; (800a928 <SystemClock_Config+0x158>)
 800a862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a866:	6193      	str	r3, [r2, #24]
 800a868:	4b2f      	ldr	r3, [pc, #188]	; (800a928 <SystemClock_Config+0x158>)
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a870:	603b      	str	r3, [r7, #0]
 800a872:	4b2c      	ldr	r3, [pc, #176]	; (800a924 <SystemClock_Config+0x154>)
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	4a2b      	ldr	r2, [pc, #172]	; (800a924 <SystemClock_Config+0x154>)
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a87e:	4b29      	ldr	r3, [pc, #164]	; (800a924 <SystemClock_Config+0x154>)
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a88a:	bf00      	nop
 800a88c:	4b26      	ldr	r3, [pc, #152]	; (800a928 <SystemClock_Config+0x158>)
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a898:	d1f8      	bne.n	800a88c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a89a:	2321      	movs	r3, #33	; 0x21
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a89e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a8a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800a8b4:	2378      	movs	r3, #120	; 0x78
 800a8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a8d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f006 f88b 	bl	80109f0 <HAL_RCC_OscConfig>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800a8e0:	f000 faa6 	bl	800ae30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a8e4:	233f      	movs	r3, #63	; 0x3f
 800a8e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a8f0:	2308      	movs	r3, #8
 800a8f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a8f8:	2340      	movs	r3, #64	; 0x40
 800a8fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	2104      	movs	r1, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f006 fc9d 	bl	801124c <HAL_RCC_ClockConfig>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <SystemClock_Config+0x14c>
  {
    Error_Handler();
 800a918:	f000 fa8a 	bl	800ae30 <Error_Handler>
  }
}
 800a91c:	bf00      	nop
 800a91e:	3778      	adds	r7, #120	; 0x78
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	58000400 	.word	0x58000400
 800a928:	58024800 	.word	0x58024800
 800a92c:	58024400 	.word	0x58024400

0800a930 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a934:	4b0d      	ldr	r3, [pc, #52]	; (800a96c <MX_CRC_Init+0x3c>)
 800a936:	4a0e      	ldr	r2, [pc, #56]	; (800a970 <MX_CRC_Init+0x40>)
 800a938:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <MX_CRC_Init+0x3c>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <MX_CRC_Init+0x3c>)
 800a942:	2200      	movs	r2, #0
 800a944:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_WORD;
 800a946:	4b09      	ldr	r3, [pc, #36]	; (800a96c <MX_CRC_Init+0x3c>)
 800a948:	2260      	movs	r2, #96	; 0x60
 800a94a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <MX_CRC_Init+0x3c>)
 800a94e:	2280      	movs	r2, #128	; 0x80
 800a950:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <MX_CRC_Init+0x3c>)
 800a954:	2203      	movs	r2, #3
 800a956:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a958:	4804      	ldr	r0, [pc, #16]	; (800a96c <MX_CRC_Init+0x3c>)
 800a95a:	f001 f817 	bl	800b98c <HAL_CRC_Init>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800a964:	f000 fa64 	bl	800ae30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a968:	bf00      	nop
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	240116ac 	.word	0x240116ac
 800a970:	58024c00 	.word	0x58024c00

0800a974 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a978:	4b07      	ldr	r3, [pc, #28]	; (800a998 <MX_RNG_Init+0x24>)
 800a97a:	4a08      	ldr	r2, [pc, #32]	; (800a99c <MX_RNG_Init+0x28>)
 800a97c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <MX_RNG_Init+0x24>)
 800a980:	2200      	movs	r2, #0
 800a982:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a984:	4804      	ldr	r0, [pc, #16]	; (800a998 <MX_RNG_Init+0x24>)
 800a986:	f008 fb97 	bl	80130b8 <HAL_RNG_Init>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a990:	f000 fa4e 	bl	800ae30 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a994:	bf00      	nop
 800a996:	bd80      	pop	{r7, pc}
 800a998:	240116d0 	.word	0x240116d0
 800a99c:	48021800 	.word	0x48021800

0800a9a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a9a4:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9a6:	4a23      	ldr	r2, [pc, #140]	; (800aa34 <MX_UART4_Init+0x94>)
 800a9a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1000000;
 800a9aa:	4b21      	ldr	r3, [pc, #132]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9ac:	4a22      	ldr	r2, [pc, #136]	; (800aa38 <MX_UART4_Init+0x98>)
 800a9ae:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a9b0:	4b1f      	ldr	r3, [pc, #124]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a9bc:	4b1c      	ldr	r3, [pc, #112]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9c8:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9ce:	4b18      	ldr	r3, [pc, #96]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a9da:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a9e0:	4b13      	ldr	r3, [pc, #76]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a9e6:	4812      	ldr	r0, [pc, #72]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9e8:	f008 ff24 	bl	8013834 <HAL_UART_Init>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800a9f2:	f000 fa1d 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	480d      	ldr	r0, [pc, #52]	; (800aa30 <MX_UART4_Init+0x90>)
 800a9fa:	f00a ffbb 	bl	8015974 <HAL_UARTEx_SetTxFifoThreshold>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800aa04:	f000 fa14 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4809      	ldr	r0, [pc, #36]	; (800aa30 <MX_UART4_Init+0x90>)
 800aa0c:	f00a fff0 	bl	80159f0 <HAL_UARTEx_SetRxFifoThreshold>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800aa16:	f000 fa0b 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800aa1a:	4805      	ldr	r0, [pc, #20]	; (800aa30 <MX_UART4_Init+0x90>)
 800aa1c:	f00a ff36 	bl	801588c <HAL_UARTEx_EnableFifoMode>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800aa26:	f000 fa03 	bl	800ae30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800aa2a:	bf00      	nop
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	240116e4 	.word	0x240116e4
 800aa34:	40004c00 	.word	0x40004c00
 800aa38:	000f4240 	.word	0x000f4240

0800aa3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800aa40:	4b22      	ldr	r3, [pc, #136]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa42:	4a23      	ldr	r2, [pc, #140]	; (800aad0 <MX_USART2_UART_Init+0x94>)
 800aa44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa48:	4a22      	ldr	r2, [pc, #136]	; (800aad4 <MX_USART2_UART_Init+0x98>)
 800aa4a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aa4c:	4b1f      	ldr	r3, [pc, #124]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aa52:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aa58:	4b1c      	ldr	r3, [pc, #112]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800aa5e:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa60:	2208      	movs	r2, #8
 800aa62:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa64:	4b19      	ldr	r3, [pc, #100]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa6a:	4b18      	ldr	r3, [pc, #96]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa70:	4b16      	ldr	r3, [pc, #88]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa76:	4b15      	ldr	r3, [pc, #84]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa7c:	4b13      	ldr	r3, [pc, #76]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aa82:	4812      	ldr	r0, [pc, #72]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa84:	f008 fed6 	bl	8013834 <HAL_UART_Init>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800aa8e:	f000 f9cf 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa92:	2100      	movs	r1, #0
 800aa94:	480d      	ldr	r0, [pc, #52]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aa96:	f00a ff6d 	bl	8015974 <HAL_UARTEx_SetTxFifoThreshold>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800aaa0:	f000 f9c6 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4809      	ldr	r0, [pc, #36]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aaa8:	f00a ffa2 	bl	80159f0 <HAL_UARTEx_SetRxFifoThreshold>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800aab2:	f000 f9bd 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800aab6:	4805      	ldr	r0, [pc, #20]	; (800aacc <MX_USART2_UART_Init+0x90>)
 800aab8:	f00a ff23 	bl	8015902 <HAL_UARTEx_DisableFifoMode>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800aac2:	f000 f9b5 	bl	800ae30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800aac6:	bf00      	nop
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	24011774 	.word	0x24011774
 800aad0:	40004400 	.word	0x40004400
 800aad4:	000f4240 	.word	0x000f4240

0800aad8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800aadc:	4b22      	ldr	r3, [pc, #136]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aade:	4a23      	ldr	r2, [pc, #140]	; (800ab6c <MX_USART3_UART_Init+0x94>)
 800aae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 7500000;
 800aae2:	4b21      	ldr	r3, [pc, #132]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aae4:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <MX_USART3_UART_Init+0x98>)
 800aae6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800aae8:	4b1f      	ldr	r3, [pc, #124]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aaee:	4b1e      	ldr	r3, [pc, #120]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aaf4:	4b1c      	ldr	r3, [pc, #112]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aafa:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800aafc:	220c      	movs	r2, #12
 800aafe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab00:	4b19      	ldr	r3, [pc, #100]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab0c:	4b16      	ldr	r3, [pc, #88]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab12:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab18:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ab1e:	4812      	ldr	r0, [pc, #72]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab20:	f008 fe88 	bl	8013834 <HAL_UART_Init>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800ab2a:	f000 f981 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab2e:	2100      	movs	r1, #0
 800ab30:	480d      	ldr	r0, [pc, #52]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab32:	f00a ff1f 	bl	8015974 <HAL_UARTEx_SetTxFifoThreshold>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800ab3c:	f000 f978 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab40:	2100      	movs	r1, #0
 800ab42:	4809      	ldr	r0, [pc, #36]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab44:	f00a ff54 	bl	80159f0 <HAL_UARTEx_SetRxFifoThreshold>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800ab4e:	f000 f96f 	bl	800ae30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800ab52:	4805      	ldr	r0, [pc, #20]	; (800ab68 <MX_USART3_UART_Init+0x90>)
 800ab54:	f00a fed5 	bl	8015902 <HAL_UARTEx_DisableFifoMode>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800ab5e:	f000 f967 	bl	800ae30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ab62:	bf00      	nop
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	24011804 	.word	0x24011804
 800ab6c:	40004800 	.word	0x40004800
 800ab70:	007270e0 	.word	0x007270e0

0800ab74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ab7a:	4b0d      	ldr	r3, [pc, #52]	; (800abb0 <MX_DMA_Init+0x3c>)
 800ab7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ab80:	4a0b      	ldr	r2, [pc, #44]	; (800abb0 <MX_DMA_Init+0x3c>)
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ab8a:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <MX_DMA_Init+0x3c>)
 800ab8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	607b      	str	r3, [r7, #4]
 800ab96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2106      	movs	r1, #6
 800ab9c:	200b      	movs	r0, #11
 800ab9e:	f000 febf 	bl	800b920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800aba2:	200b      	movs	r0, #11
 800aba4:	f000 fed6 	bl	800b954 <HAL_NVIC_EnableIRQ>

}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	58024400 	.word	0x58024400

0800abb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abba:	f107 031c 	add.w	r3, r7, #28
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	605a      	str	r2, [r3, #4]
 800abc4:	609a      	str	r2, [r3, #8]
 800abc6:	60da      	str	r2, [r3, #12]
 800abc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800abca:	4b89      	ldr	r3, [pc, #548]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abd0:	4a87      	ldr	r2, [pc, #540]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abd2:	f043 0304 	orr.w	r3, r3, #4
 800abd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800abda:	4b85      	ldr	r3, [pc, #532]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	61bb      	str	r3, [r7, #24]
 800abe6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800abe8:	4b81      	ldr	r3, [pc, #516]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abee:	4a80      	ldr	r2, [pc, #512]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800abf8:	4b7d      	ldr	r3, [pc, #500]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800abfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	617b      	str	r3, [r7, #20]
 800ac04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac06:	4b7a      	ldr	r3, [pc, #488]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac0c:	4a78      	ldr	r2, [pc, #480]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac0e:	f043 0301 	orr.w	r3, r3, #1
 800ac12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac16:	4b76      	ldr	r3, [pc, #472]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac24:	4b72      	ldr	r3, [pc, #456]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac2a:	4a71      	ldr	r2, [pc, #452]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac34:	4b6e      	ldr	r3, [pc, #440]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac42:	4b6b      	ldr	r3, [pc, #428]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac48:	4a69      	ldr	r2, [pc, #420]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac4a:	f043 0308 	orr.w	r3, r3, #8
 800ac4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac52:	4b67      	ldr	r3, [pc, #412]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac58:	f003 0308 	and.w	r3, r3, #8
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac60:	4b63      	ldr	r3, [pc, #396]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac66:	4a62      	ldr	r2, [pc, #392]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac70:	4b5f      	ldr	r3, [pc, #380]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac7a:	607b      	str	r3, [r7, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ac7e:	4b5c      	ldr	r3, [pc, #368]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac84:	4a5a      	ldr	r2, [pc, #360]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac86:	f043 0310 	orr.w	r3, r3, #16
 800ac8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac8e:	4b58      	ldr	r3, [pc, #352]	; (800adf0 <MX_GPIO_Init+0x23c>)
 800ac90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac94:	f003 0310 	and.w	r3, r3, #16
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f244 0101 	movw	r1, #16385	; 0x4001
 800aca2:	4854      	ldr	r0, [pc, #336]	; (800adf4 <MX_GPIO_Init+0x240>)
 800aca4:	f004 fb6c 	bl	800f380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800acae:	4852      	ldr	r0, [pc, #328]	; (800adf8 <MX_GPIO_Init+0x244>)
 800acb0:	f004 fb66 	bl	800f380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800acb4:	2200      	movs	r2, #0
 800acb6:	2102      	movs	r1, #2
 800acb8:	4850      	ldr	r0, [pc, #320]	; (800adfc <MX_GPIO_Init+0x248>)
 800acba:	f004 fb61 	bl	800f380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800acbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acc4:	2300      	movs	r3, #0
 800acc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc8:	2300      	movs	r3, #0
 800acca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800accc:	f107 031c 	add.w	r3, r7, #28
 800acd0:	4619      	mov	r1, r3
 800acd2:	484b      	ldr	r0, [pc, #300]	; (800ae00 <MX_GPIO_Init+0x24c>)
 800acd4:	f004 f89a 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800acd8:	2332      	movs	r3, #50	; 0x32
 800acda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acdc:	2302      	movs	r3, #2
 800acde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ace4:	2300      	movs	r3, #0
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ace8:	230b      	movs	r3, #11
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acec:	f107 031c 	add.w	r3, r7, #28
 800acf0:	4619      	mov	r1, r3
 800acf2:	4843      	ldr	r0, [pc, #268]	; (800ae00 <MX_GPIO_Init+0x24c>)
 800acf4:	f004 f88a 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800acf8:	2386      	movs	r3, #134	; 0x86
 800acfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acfc:	2302      	movs	r3, #2
 800acfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad00:	2300      	movs	r3, #0
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad04:	2300      	movs	r3, #0
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad08:	230b      	movs	r3, #11
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad0c:	f107 031c 	add.w	r3, r7, #28
 800ad10:	4619      	mov	r1, r3
 800ad12:	483c      	ldr	r0, [pc, #240]	; (800ae04 <MX_GPIO_Init+0x250>)
 800ad14:	f004 f87a 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ad18:	2320      	movs	r3, #32
 800ad1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad24:	f107 031c 	add.w	r3, r7, #28
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4836      	ldr	r0, [pc, #216]	; (800ae04 <MX_GPIO_Init+0x250>)
 800ad2c:	f004 f86e 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800ad30:	f244 0301 	movw	r3, #16385	; 0x4001
 800ad34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad36:	2301      	movs	r3, #1
 800ad38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad42:	f107 031c 	add.w	r3, r7, #28
 800ad46:	4619      	mov	r1, r3
 800ad48:	482a      	ldr	r0, [pc, #168]	; (800adf4 <MX_GPIO_Init+0x240>)
 800ad4a:	f004 f85f 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ad4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad54:	2302      	movs	r3, #2
 800ad56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad60:	230b      	movs	r3, #11
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad64:	f107 031c 	add.w	r3, r7, #28
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4822      	ldr	r0, [pc, #136]	; (800adf4 <MX_GPIO_Init+0x240>)
 800ad6c:	f004 f84e 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800ad70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad76:	2301      	movs	r3, #1
 800ad78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ad82:	f107 031c 	add.w	r3, r7, #28
 800ad86:	4619      	mov	r1, r3
 800ad88:	481b      	ldr	r0, [pc, #108]	; (800adf8 <MX_GPIO_Init+0x244>)
 800ad8a:	f004 f83f 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800ad8e:	2380      	movs	r3, #128	; 0x80
 800ad90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ad92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ad96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800ad9c:	f107 031c 	add.w	r3, r7, #28
 800ada0:	4619      	mov	r1, r3
 800ada2:	4819      	ldr	r0, [pc, #100]	; (800ae08 <MX_GPIO_Init+0x254>)
 800ada4:	f004 f832 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800ada8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800adac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adae:	2302      	movs	r3, #2
 800adb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adb6:	2300      	movs	r3, #0
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adba:	230b      	movs	r3, #11
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800adbe:	f107 031c 	add.w	r3, r7, #28
 800adc2:	4619      	mov	r1, r3
 800adc4:	4810      	ldr	r0, [pc, #64]	; (800ae08 <MX_GPIO_Init+0x254>)
 800adc6:	f004 f821 	bl	800ee0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800adca:	2302      	movs	r3, #2
 800adcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adce:	2301      	movs	r3, #1
 800add0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800add6:	2300      	movs	r3, #0
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800adda:	f107 031c 	add.w	r3, r7, #28
 800adde:	4619      	mov	r1, r3
 800ade0:	4806      	ldr	r0, [pc, #24]	; (800adfc <MX_GPIO_Init+0x248>)
 800ade2:	f004 f813 	bl	800ee0c <HAL_GPIO_Init>

}
 800ade6:	bf00      	nop
 800ade8:	3730      	adds	r7, #48	; 0x30
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	58024400 	.word	0x58024400
 800adf4:	58020400 	.word	0x58020400
 800adf8:	58020c00 	.word	0x58020c00
 800adfc:	58021000 	.word	0x58021000
 800ae00:	58020800 	.word	0x58020800
 800ae04:	58020000 	.word	0x58020000
 800ae08:	58021800 	.word	0x58021800

0800ae0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a04      	ldr	r2, [pc, #16]	; (800ae2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d101      	bne.n	800ae22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ae1e:	f000 fc53 	bl	800b6c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	40014400 	.word	0x40014400

0800ae30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ae34:	b672      	cpsid	i
}
 800ae36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ae38:	e7fe      	b.n	800ae38 <Error_Handler+0x8>
	...

0800ae3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae42:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <HAL_MspInit+0x30>)
 800ae44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae48:	4a08      	ldr	r2, [pc, #32]	; (800ae6c <HAL_MspInit+0x30>)
 800ae4a:	f043 0302 	orr.w	r3, r3, #2
 800ae4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ae52:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <HAL_MspInit+0x30>)
 800ae54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	607b      	str	r3, [r7, #4]
 800ae5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	58024400 	.word	0x58024400

0800ae70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a0b      	ldr	r2, [pc, #44]	; (800aeac <HAL_CRC_MspInit+0x3c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d10e      	bne.n	800aea0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <HAL_CRC_MspInit+0x40>)
 800ae84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae88:	4a09      	ldr	r2, [pc, #36]	; (800aeb0 <HAL_CRC_MspInit+0x40>)
 800ae8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae92:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <HAL_CRC_MspInit+0x40>)
 800ae94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800aea0:	bf00      	nop
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	58024c00 	.word	0x58024c00
 800aeb0:	58024400 	.word	0x58024400

0800aeb4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b0b2      	sub	sp, #200	; 0xc8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aebc:	f107 030c 	add.w	r3, r7, #12
 800aec0:	22bc      	movs	r2, #188	; 0xbc
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f010 fb5f 	bl	801b588 <memset>
  if(hrng->Instance==RNG)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a17      	ldr	r2, [pc, #92]	; (800af2c <HAL_RNG_MspInit+0x78>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d126      	bne.n	800af22 <HAL_RNG_MspInit+0x6e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800aed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aed8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800aeda:	2300      	movs	r3, #0
 800aedc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aee0:	f107 030c 	add.w	r3, r7, #12
 800aee4:	4618      	mov	r0, r3
 800aee6:	f006 fd7f 	bl	80119e8 <HAL_RCCEx_PeriphCLKConfig>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800aef0:	f7ff ff9e 	bl	800ae30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800aef4:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <HAL_RNG_MspInit+0x7c>)
 800aef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aefa:	4a0d      	ldr	r2, [pc, #52]	; (800af30 <HAL_RNG_MspInit+0x7c>)
 800aefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af00:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <HAL_RNG_MspInit+0x7c>)
 800af06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800af0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0e:	60bb      	str	r3, [r7, #8]
 800af10:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800af12:	2200      	movs	r2, #0
 800af14:	2100      	movs	r1, #0
 800af16:	2050      	movs	r0, #80	; 0x50
 800af18:	f000 fd02 	bl	800b920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800af1c:	2050      	movs	r0, #80	; 0x50
 800af1e:	f000 fd19 	bl	800b954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800af22:	bf00      	nop
 800af24:	37c8      	adds	r7, #200	; 0xc8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	48021800 	.word	0x48021800
 800af30:	58024400 	.word	0x58024400

0800af34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b0bc      	sub	sp, #240	; 0xf0
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	605a      	str	r2, [r3, #4]
 800af46:	609a      	str	r2, [r3, #8]
 800af48:	60da      	str	r2, [r3, #12]
 800af4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af4c:	f107 0320 	add.w	r3, r7, #32
 800af50:	22bc      	movs	r2, #188	; 0xbc
 800af52:	2100      	movs	r1, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f010 fb17 	bl	801b588 <memset>
  if(huart->Instance==UART4)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a8b      	ldr	r2, [pc, #556]	; (800b18c <HAL_UART_MspInit+0x258>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d177      	bne.n	800b054 <HAL_UART_MspInit+0x120>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800af64:	2302      	movs	r3, #2
 800af66:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800af68:	2300      	movs	r3, #0
 800af6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af6e:	f107 0320 	add.w	r3, r7, #32
 800af72:	4618      	mov	r0, r3
 800af74:	f006 fd38 	bl	80119e8 <HAL_RCCEx_PeriphCLKConfig>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800af7e:	f7ff ff57 	bl	800ae30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800af82:	4b83      	ldr	r3, [pc, #524]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800af84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af88:	4a81      	ldr	r2, [pc, #516]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800af8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800af92:	4b7f      	ldr	r3, [pc, #508]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800af94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800afa0:	4b7b      	ldr	r3, [pc, #492]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800afa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afa6:	4a7a      	ldr	r2, [pc, #488]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800afa8:	f043 0308 	orr.w	r3, r3, #8
 800afac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afb0:	4b77      	ldr	r3, [pc, #476]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800afb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afb6:	f003 0308 	and.w	r3, r3, #8
 800afba:	61bb      	str	r3, [r7, #24]
 800afbc:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800afbe:	2303      	movs	r3, #3
 800afc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc4:	2302      	movs	r3, #2
 800afc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afd0:	2300      	movs	r3, #0
 800afd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800afd6:	2308      	movs	r3, #8
 800afd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800afdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800afe0:	4619      	mov	r1, r3
 800afe2:	486c      	ldr	r0, [pc, #432]	; (800b194 <HAL_UART_MspInit+0x260>)
 800afe4:	f003 ff12 	bl	800ee0c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800afe8:	4b6b      	ldr	r3, [pc, #428]	; (800b198 <HAL_UART_MspInit+0x264>)
 800afea:	4a6c      	ldr	r2, [pc, #432]	; (800b19c <HAL_UART_MspInit+0x268>)
 800afec:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800afee:	4b6a      	ldr	r3, [pc, #424]	; (800b198 <HAL_UART_MspInit+0x264>)
 800aff0:	223f      	movs	r2, #63	; 0x3f
 800aff2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aff4:	4b68      	ldr	r3, [pc, #416]	; (800b198 <HAL_UART_MspInit+0x264>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800affa:	4b67      	ldr	r3, [pc, #412]	; (800b198 <HAL_UART_MspInit+0x264>)
 800affc:	2200      	movs	r2, #0
 800affe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b000:	4b65      	ldr	r3, [pc, #404]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b006:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b008:	4b63      	ldr	r3, [pc, #396]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b00e:	4b62      	ldr	r3, [pc, #392]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b010:	2200      	movs	r2, #0
 800b012:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800b014:	4b60      	ldr	r3, [pc, #384]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b016:	2200      	movs	r2, #0
 800b018:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b01a:	4b5f      	ldr	r3, [pc, #380]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b020:	4b5d      	ldr	r3, [pc, #372]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b022:	2200      	movs	r2, #0
 800b024:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800b026:	485c      	ldr	r0, [pc, #368]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b028:	f000 fef2 	bl	800be10 <HAL_DMA_Init>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800b032:	f7ff fefd 	bl	800ae30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a57      	ldr	r2, [pc, #348]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b03a:	67da      	str	r2, [r3, #124]	; 0x7c
 800b03c:	4a56      	ldr	r2, [pc, #344]	; (800b198 <HAL_UART_MspInit+0x264>)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 800b042:	2200      	movs	r2, #0
 800b044:	2106      	movs	r1, #6
 800b046:	2034      	movs	r0, #52	; 0x34
 800b048:	f000 fc6a 	bl	800b920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b04c:	2034      	movs	r0, #52	; 0x34
 800b04e:	f000 fc81 	bl	800b954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b052:	e097      	b.n	800b184 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a51      	ldr	r2, [pc, #324]	; (800b1a0 <HAL_UART_MspInit+0x26c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d14a      	bne.n	800b0f4 <HAL_UART_MspInit+0x1c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800b05e:	2302      	movs	r3, #2
 800b060:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b068:	f107 0320 	add.w	r3, r7, #32
 800b06c:	4618      	mov	r0, r3
 800b06e:	f006 fcbb 	bl	80119e8 <HAL_RCCEx_PeriphCLKConfig>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <HAL_UART_MspInit+0x148>
      Error_Handler();
 800b078:	f7ff feda 	bl	800ae30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b07c:	4b44      	ldr	r3, [pc, #272]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b07e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b082:	4a43      	ldr	r2, [pc, #268]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b08c:	4b40      	ldr	r3, [pc, #256]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b08e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b09a:	4b3d      	ldr	r3, [pc, #244]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b09c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0a0:	4a3b      	ldr	r2, [pc, #236]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b0a2:	f043 0308 	orr.w	r3, r3, #8
 800b0a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b0aa:	4b39      	ldr	r3, [pc, #228]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b0ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0b0:	f003 0308 	and.w	r3, r3, #8
 800b0b4:	613b      	str	r3, [r7, #16]
 800b0b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b0b8:	2360      	movs	r3, #96	; 0x60
 800b0ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b0d0:	2307      	movs	r3, #7
 800b0d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800b0da:	4619      	mov	r1, r3
 800b0dc:	482d      	ldr	r0, [pc, #180]	; (800b194 <HAL_UART_MspInit+0x260>)
 800b0de:	f003 fe95 	bl	800ee0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2106      	movs	r1, #6
 800b0e6:	2026      	movs	r0, #38	; 0x26
 800b0e8:	f000 fc1a 	bl	800b920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b0ec:	2026      	movs	r0, #38	; 0x26
 800b0ee:	f000 fc31 	bl	800b954 <HAL_NVIC_EnableIRQ>
}
 800b0f2:	e047      	b.n	800b184 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a2a      	ldr	r2, [pc, #168]	; (800b1a4 <HAL_UART_MspInit+0x270>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d142      	bne.n	800b184 <HAL_UART_MspInit+0x250>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b0fe:	2302      	movs	r3, #2
 800b100:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b102:	2300      	movs	r3, #0
 800b104:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b108:	f107 0320 	add.w	r3, r7, #32
 800b10c:	4618      	mov	r0, r3
 800b10e:	f006 fc6b 	bl	80119e8 <HAL_RCCEx_PeriphCLKConfig>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 800b118:	f7ff fe8a 	bl	800ae30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b11c:	4b1c      	ldr	r3, [pc, #112]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b11e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b122:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b128:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b12c:	4b18      	ldr	r3, [pc, #96]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b12e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b13a:	4b15      	ldr	r3, [pc, #84]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b13c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b140:	4a13      	ldr	r2, [pc, #76]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b142:	f043 0308 	orr.w	r3, r3, #8
 800b146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b14a:	4b11      	ldr	r3, [pc, #68]	; (800b190 <HAL_UART_MspInit+0x25c>)
 800b14c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	60bb      	str	r3, [r7, #8]
 800b156:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800b158:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b15c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b160:	2302      	movs	r3, #2
 800b162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b166:	2300      	movs	r3, #0
 800b168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b16c:	2300      	movs	r3, #0
 800b16e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b172:	2307      	movs	r3, #7
 800b174:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800b17c:	4619      	mov	r1, r3
 800b17e:	4805      	ldr	r0, [pc, #20]	; (800b194 <HAL_UART_MspInit+0x260>)
 800b180:	f003 fe44 	bl	800ee0c <HAL_GPIO_Init>
}
 800b184:	bf00      	nop
 800b186:	37f0      	adds	r7, #240	; 0xf0
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40004c00 	.word	0x40004c00
 800b190:	58024400 	.word	0x58024400
 800b194:	58020c00 	.word	0x58020c00
 800b198:	24011894 	.word	0x24011894
 800b19c:	40020010 	.word	0x40020010
 800b1a0:	40004400 	.word	0x40004400
 800b1a4:	40004800 	.word	0x40004800

0800b1a8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a21      	ldr	r2, [pc, #132]	; (800b23c <HAL_UART_MspDeInit+0x94>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d114      	bne.n	800b1e4 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800b1ba:	4b21      	ldr	r3, [pc, #132]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b1bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1c0:	4a1f      	ldr	r2, [pc, #124]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b1c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b1c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800b1ca:	2103      	movs	r1, #3
 800b1cc:	481d      	ldr	r0, [pc, #116]	; (800b244 <HAL_UART_MspDeInit+0x9c>)
 800b1ce:	f003 ffcd 	bl	800f16c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 f976 	bl	800c4c8 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800b1dc:	2034      	movs	r0, #52	; 0x34
 800b1de:	f000 fbc7 	bl	800b970 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800b1e2:	e026      	b.n	800b232 <HAL_UART_MspDeInit+0x8a>
  else if(huart->Instance==USART2)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a17      	ldr	r2, [pc, #92]	; (800b248 <HAL_UART_MspDeInit+0xa0>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d10f      	bne.n	800b20e <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 800b1ee:	4b14      	ldr	r3, [pc, #80]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b1f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1f4:	4a12      	ldr	r2, [pc, #72]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b1f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b1fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 800b1fe:	2160      	movs	r1, #96	; 0x60
 800b200:	4810      	ldr	r0, [pc, #64]	; (800b244 <HAL_UART_MspDeInit+0x9c>)
 800b202:	f003 ffb3 	bl	800f16c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800b206:	2026      	movs	r0, #38	; 0x26
 800b208:	f000 fbb2 	bl	800b970 <HAL_NVIC_DisableIRQ>
}
 800b20c:	e011      	b.n	800b232 <HAL_UART_MspDeInit+0x8a>
  else if(huart->Instance==USART3)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a0e      	ldr	r2, [pc, #56]	; (800b24c <HAL_UART_MspDeInit+0xa4>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d10c      	bne.n	800b232 <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800b218:	4b09      	ldr	r3, [pc, #36]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b21a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b21e:	4a08      	ldr	r2, [pc, #32]	; (800b240 <HAL_UART_MspDeInit+0x98>)
 800b220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b224:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOD, STLINK_RX_Pin|STLINK_TX_Pin);
 800b228:	f44f 7140 	mov.w	r1, #768	; 0x300
 800b22c:	4805      	ldr	r0, [pc, #20]	; (800b244 <HAL_UART_MspDeInit+0x9c>)
 800b22e:	f003 ff9d 	bl	800f16c <HAL_GPIO_DeInit>
}
 800b232:	bf00      	nop
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	40004c00 	.word	0x40004c00
 800b240:	58024400 	.word	0x58024400
 800b244:	58020c00 	.word	0x58020c00
 800b248:	40004400 	.word	0x40004400
 800b24c:	40004800 	.word	0x40004800

0800b250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b0f      	cmp	r3, #15
 800b25c:	d844      	bhi.n	800b2e8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 800b25e:	2200      	movs	r2, #0
 800b260:	6879      	ldr	r1, [r7, #4]
 800b262:	2075      	movs	r0, #117	; 0x75
 800b264:	f000 fb5c 	bl	800b920 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800b268:	2075      	movs	r0, #117	; 0x75
 800b26a:	f000 fb73 	bl	800b954 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800b26e:	4a24      	ldr	r2, [pc, #144]	; (800b300 <HAL_InitTick+0xb0>)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800b274:	4b23      	ldr	r3, [pc, #140]	; (800b304 <HAL_InitTick+0xb4>)
 800b276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b27a:	4a22      	ldr	r2, [pc, #136]	; (800b304 <HAL_InitTick+0xb4>)
 800b27c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b280:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b284:	4b1f      	ldr	r3, [pc, #124]	; (800b304 <HAL_InitTick+0xb4>)
 800b286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b28e:	60bb      	str	r3, [r7, #8]
 800b290:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b292:	f107 020c 	add.w	r2, r7, #12
 800b296:	f107 0310 	add.w	r3, r7, #16
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f006 fb61 	bl	8011964 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b2a2:	f006 fb49 	bl	8011938 <HAL_RCC_GetPCLK2Freq>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	4a16      	ldr	r2, [pc, #88]	; (800b308 <HAL_InitTick+0xb8>)
 800b2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b4:	0c9b      	lsrs	r3, r3, #18
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800b2ba:	4b14      	ldr	r3, [pc, #80]	; (800b30c <HAL_InitTick+0xbc>)
 800b2bc:	4a14      	ldr	r2, [pc, #80]	; (800b310 <HAL_InitTick+0xc0>)
 800b2be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800b2c0:	4b12      	ldr	r3, [pc, #72]	; (800b30c <HAL_InitTick+0xbc>)
 800b2c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b2c6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800b2c8:	4a10      	ldr	r2, [pc, #64]	; (800b30c <HAL_InitTick+0xbc>)
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800b2ce:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <HAL_InitTick+0xbc>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2d4:	4b0d      	ldr	r3, [pc, #52]	; (800b30c <HAL_InitTick+0xbc>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800b2da:	480c      	ldr	r0, [pc, #48]	; (800b30c <HAL_InitTick+0xbc>)
 800b2dc:	f007 ffd1 	bl	8013282 <HAL_TIM_Base_Init>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d107      	bne.n	800b2f6 <HAL_InitTick+0xa6>
 800b2e6:	e001      	b.n	800b2ec <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e005      	b.n	800b2f8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800b2ec:	4807      	ldr	r0, [pc, #28]	; (800b30c <HAL_InitTick+0xbc>)
 800b2ee:	f008 f829 	bl	8013344 <HAL_TIM_Base_Start_IT>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	e000      	b.n	800b2f8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3738      	adds	r7, #56	; 0x38
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	24008018 	.word	0x24008018
 800b304:	58024400 	.word	0x58024400
 800b308:	431bde83 	.word	0x431bde83
 800b30c:	2401190c 	.word	0x2401190c
 800b310:	40014400 	.word	0x40014400

0800b314 <DebugMon_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b318:	bf00      	nop
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800b328:	4802      	ldr	r0, [pc, #8]	; (800b334 <DMA1_Stream0_IRQHandler+0x10>)
 800b32a:	f002 fa51 	bl	800d7d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	24011894 	.word	0x24011894

0800b338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b33c:	4802      	ldr	r0, [pc, #8]	; (800b348 <USART2_IRQHandler+0x10>)
 800b33e:	f008 fd39 	bl	8013db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b342:	bf00      	nop
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	24011774 	.word	0x24011774

0800b34c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b350:	4802      	ldr	r0, [pc, #8]	; (800b35c <UART4_IRQHandler+0x10>)
 800b352:	f008 fd2f 	bl	8013db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b356:	bf00      	nop
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	240116e4 	.word	0x240116e4

0800b360 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800b364:	4802      	ldr	r0, [pc, #8]	; (800b370 <RNG_IRQHandler+0x10>)
 800b366:	f007 ff09 	bl	801317c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800b36a:	bf00      	nop
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	240116d0 	.word	0x240116d0

0800b374 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b378:	4802      	ldr	r0, [pc, #8]	; (800b384 <OTG_FS_IRQHandler+0x10>)
 800b37a:	f004 f971 	bl	800f660 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b37e:	bf00      	nop
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	240349f8 	.word	0x240349f8

0800b388 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800b38c:	4802      	ldr	r0, [pc, #8]	; (800b398 <TIM16_IRQHandler+0x10>)
 800b38e:	f008 f851 	bl	8013434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800b392:	bf00      	nop
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	2401190c 	.word	0x2401190c

0800b39c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
 800b3ac:	e00a      	b.n	800b3c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b3ae:	f3af 8000 	nop.w
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	60ba      	str	r2, [r7, #8]
 800b3ba:	b2ca      	uxtb	r2, r1
 800b3bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	dbf0      	blt.n	800b3ae <_read+0x12>
	}

return len;
 800b3cc:	687b      	ldr	r3, [r7, #4]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e009      	b.n	800b3fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	60ba      	str	r2, [r7, #8]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff f993 	bl	800a71c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	dbf1      	blt.n	800b3e8 <_write+0x12>
	}
	return len;
 800b404:	687b      	ldr	r3, [r7, #4]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <_close>:

int _close(int file)
{
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
	return -1;
 800b416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b436:	605a      	str	r2, [r3, #4]
	return 0;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <_isatty>:

int _isatty(int file)
{
 800b446:	b480      	push	{r7}
 800b448:	b083      	sub	sp, #12
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
	return 1;
 800b44e:	2301      	movs	r3, #1
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
	return 0;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b480:	4a14      	ldr	r2, [pc, #80]	; (800b4d4 <_sbrk+0x5c>)
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <_sbrk+0x60>)
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b48c:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <_sbrk+0x64>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b494:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <_sbrk+0x64>)
 800b496:	4a12      	ldr	r2, [pc, #72]	; (800b4e0 <_sbrk+0x68>)
 800b498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b49a:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <_sbrk+0x64>)
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d207      	bcs.n	800b4b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b4a8:	f00f ff22 	bl	801b2f0 <__errno>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	220c      	movs	r2, #12
 800b4b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4b6:	e009      	b.n	800b4cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b4b8:	4b08      	ldr	r3, [pc, #32]	; (800b4dc <_sbrk+0x64>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b4be:	4b07      	ldr	r3, [pc, #28]	; (800b4dc <_sbrk+0x64>)
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	4a05      	ldr	r2, [pc, #20]	; (800b4dc <_sbrk+0x64>)
 800b4c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	24080000 	.word	0x24080000
 800b4d8:	00000400 	.word	0x00000400
 800b4dc:	24011958 	.word	0x24011958
 800b4e0:	24036000 	.word	0x24036000

0800b4e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4e8:	4b39      	ldr	r3, [pc, #228]	; (800b5d0 <SystemInit+0xec>)
 800b4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ee:	4a38      	ldr	r2, [pc, #224]	; (800b5d0 <SystemInit+0xec>)
 800b4f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b4f8:	4b36      	ldr	r3, [pc, #216]	; (800b5d4 <SystemInit+0xf0>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	2b06      	cmp	r3, #6
 800b502:	d807      	bhi.n	800b514 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b504:	4b33      	ldr	r3, [pc, #204]	; (800b5d4 <SystemInit+0xf0>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f023 030f 	bic.w	r3, r3, #15
 800b50c:	4a31      	ldr	r2, [pc, #196]	; (800b5d4 <SystemInit+0xf0>)
 800b50e:	f043 0307 	orr.w	r3, r3, #7
 800b512:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b514:	4b30      	ldr	r3, [pc, #192]	; (800b5d8 <SystemInit+0xf4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a2f      	ldr	r2, [pc, #188]	; (800b5d8 <SystemInit+0xf4>)
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b520:	4b2d      	ldr	r3, [pc, #180]	; (800b5d8 <SystemInit+0xf4>)
 800b522:	2200      	movs	r2, #0
 800b524:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b526:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <SystemInit+0xf4>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	492b      	ldr	r1, [pc, #172]	; (800b5d8 <SystemInit+0xf4>)
 800b52c:	4b2b      	ldr	r3, [pc, #172]	; (800b5dc <SystemInit+0xf8>)
 800b52e:	4013      	ands	r3, r2
 800b530:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b532:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <SystemInit+0xf0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0308 	and.w	r3, r3, #8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d007      	beq.n	800b54e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <SystemInit+0xf0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f023 030f 	bic.w	r3, r3, #15
 800b546:	4a23      	ldr	r2, [pc, #140]	; (800b5d4 <SystemInit+0xf0>)
 800b548:	f043 0307 	orr.w	r3, r3, #7
 800b54c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b54e:	4b22      	ldr	r3, [pc, #136]	; (800b5d8 <SystemInit+0xf4>)
 800b550:	2200      	movs	r2, #0
 800b552:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b554:	4b20      	ldr	r3, [pc, #128]	; (800b5d8 <SystemInit+0xf4>)
 800b556:	2200      	movs	r2, #0
 800b558:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b55a:	4b1f      	ldr	r3, [pc, #124]	; (800b5d8 <SystemInit+0xf4>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b560:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <SystemInit+0xf4>)
 800b562:	4a1f      	ldr	r2, [pc, #124]	; (800b5e0 <SystemInit+0xfc>)
 800b564:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b566:	4b1c      	ldr	r3, [pc, #112]	; (800b5d8 <SystemInit+0xf4>)
 800b568:	4a1e      	ldr	r2, [pc, #120]	; (800b5e4 <SystemInit+0x100>)
 800b56a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <SystemInit+0xf4>)
 800b56e:	4a1e      	ldr	r2, [pc, #120]	; (800b5e8 <SystemInit+0x104>)
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b572:	4b19      	ldr	r3, [pc, #100]	; (800b5d8 <SystemInit+0xf4>)
 800b574:	2200      	movs	r2, #0
 800b576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b578:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <SystemInit+0xf4>)
 800b57a:	4a1b      	ldr	r2, [pc, #108]	; (800b5e8 <SystemInit+0x104>)
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b57e:	4b16      	ldr	r3, [pc, #88]	; (800b5d8 <SystemInit+0xf4>)
 800b580:	2200      	movs	r2, #0
 800b582:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b584:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <SystemInit+0xf4>)
 800b586:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <SystemInit+0x104>)
 800b588:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b58a:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <SystemInit+0xf4>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b590:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <SystemInit+0xf4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <SystemInit+0xf4>)
 800b596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b59a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b59c:	4b0e      	ldr	r3, [pc, #56]	; (800b5d8 <SystemInit+0xf4>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b5a2:	4b12      	ldr	r3, [pc, #72]	; (800b5ec <SystemInit+0x108>)
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <SystemInit+0x10c>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ae:	d202      	bcs.n	800b5b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b5b0:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <SystemInit+0x110>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b5b6:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <SystemInit+0x114>)
 800b5b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b5bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b5be:	4b04      	ldr	r3, [pc, #16]	; (800b5d0 <SystemInit+0xec>)
 800b5c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b5c6:	bf00      	nop
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	e000ed00 	.word	0xe000ed00
 800b5d4:	52002000 	.word	0x52002000
 800b5d8:	58024400 	.word	0x58024400
 800b5dc:	eaf6ed7f 	.word	0xeaf6ed7f
 800b5e0:	02020200 	.word	0x02020200
 800b5e4:	01ff0000 	.word	0x01ff0000
 800b5e8:	01010280 	.word	0x01010280
 800b5ec:	5c001000 	.word	0x5c001000
 800b5f0:	ffff0000 	.word	0xffff0000
 800b5f4:	51008108 	.word	0x51008108
 800b5f8:	52004000 	.word	0x52004000

0800b5fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b5fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b600:	f7ff ff70 	bl	800b4e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b604:	480c      	ldr	r0, [pc, #48]	; (800b638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b606:	490d      	ldr	r1, [pc, #52]	; (800b63c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b608:	4a0d      	ldr	r2, [pc, #52]	; (800b640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b60a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b60c:	e002      	b.n	800b614 <LoopCopyDataInit>

0800b60e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b60e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b612:	3304      	adds	r3, #4

0800b614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b618:	d3f9      	bcc.n	800b60e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b61a:	4a0a      	ldr	r2, [pc, #40]	; (800b644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b61c:	4c0a      	ldr	r4, [pc, #40]	; (800b648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b61e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b620:	e001      	b.n	800b626 <LoopFillZerobss>

0800b622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b624:	3204      	adds	r2, #4

0800b626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b628:	d3fb      	bcc.n	800b622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b62a:	f00f ff67 	bl	801b4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b62e:	f7ff f887 	bl	800a740 <main>
  bx  lr
 800b632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b634:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800b638:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b63c:	240085ac 	.word	0x240085ac
  ldr r2, =_sidata
 800b640:	0801c4b4 	.word	0x0801c4b4
  ldr r2, =_sbss
 800b644:	24010000 	.word	0x24010000
  ldr r4, =_ebss
 800b648:	24035134 	.word	0x24035134

0800b64c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b64c:	e7fe      	b.n	800b64c <ADC3_IRQHandler>
	...

0800b650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b656:	2003      	movs	r0, #3
 800b658:	f000 f957 	bl	800b90a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b65c:	f005 ffac 	bl	80115b8 <HAL_RCC_GetSysClockFreq>
 800b660:	4602      	mov	r2, r0
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <HAL_Init+0x68>)
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	0a1b      	lsrs	r3, r3, #8
 800b668:	f003 030f 	and.w	r3, r3, #15
 800b66c:	4913      	ldr	r1, [pc, #76]	; (800b6bc <HAL_Init+0x6c>)
 800b66e:	5ccb      	ldrb	r3, [r1, r3]
 800b670:	f003 031f 	and.w	r3, r3, #31
 800b674:	fa22 f303 	lsr.w	r3, r2, r3
 800b678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <HAL_Init+0x68>)
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	f003 030f 	and.w	r3, r3, #15
 800b682:	4a0e      	ldr	r2, [pc, #56]	; (800b6bc <HAL_Init+0x6c>)
 800b684:	5cd3      	ldrb	r3, [r2, r3]
 800b686:	f003 031f 	and.w	r3, r3, #31
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	fa22 f303 	lsr.w	r3, r2, r3
 800b690:	4a0b      	ldr	r2, [pc, #44]	; (800b6c0 <HAL_Init+0x70>)
 800b692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b694:	4a0b      	ldr	r2, [pc, #44]	; (800b6c4 <HAL_Init+0x74>)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b69a:	200f      	movs	r0, #15
 800b69c:	f7ff fdd8 	bl	800b250 <HAL_InitTick>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e002      	b.n	800b6b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b6aa:	f7ff fbc7 	bl	800ae3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	58024400 	.word	0x58024400
 800b6bc:	240084d4 	.word	0x240084d4
 800b6c0:	24008014 	.word	0x24008014
 800b6c4:	24008010 	.word	0x24008010

0800b6c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <HAL_IncTick+0x20>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <HAL_IncTick+0x24>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	4a04      	ldr	r2, [pc, #16]	; (800b6ec <HAL_IncTick+0x24>)
 800b6da:	6013      	str	r3, [r2, #0]
}
 800b6dc:	bf00      	nop
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	2400801c 	.word	0x2400801c
 800b6ec:	2401195c 	.word	0x2401195c

0800b6f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  return uwTick;
 800b6f4:	4b03      	ldr	r3, [pc, #12]	; (800b704 <HAL_GetTick+0x14>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2401195c 	.word	0x2401195c

0800b708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b710:	f7ff ffee 	bl	800b6f0 <HAL_GetTick>
 800b714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b720:	d005      	beq.n	800b72e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b722:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <HAL_Delay+0x44>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	4413      	add	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b72e:	bf00      	nop
 800b730:	f7ff ffde 	bl	800b6f0 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d8f7      	bhi.n	800b730 <HAL_Delay+0x28>
  {
  }
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	2400801c 	.word	0x2400801c

0800b750 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800b754:	4b03      	ldr	r3, [pc, #12]	; (800b764 <HAL_GetREVID+0x14>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	0c1b      	lsrs	r3, r3, #16
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	5c001000 	.word	0x5c001000

0800b768 <__NVIC_SetPriorityGrouping>:
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b778:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <__NVIC_SetPriorityGrouping+0x40>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b784:	4013      	ands	r3, r2
 800b786:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <__NVIC_SetPriorityGrouping+0x44>)
 800b792:	4313      	orrs	r3, r2
 800b794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b796:	4a04      	ldr	r2, [pc, #16]	; (800b7a8 <__NVIC_SetPriorityGrouping+0x40>)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	60d3      	str	r3, [r2, #12]
}
 800b79c:	bf00      	nop
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	e000ed00 	.word	0xe000ed00
 800b7ac:	05fa0000 	.word	0x05fa0000

0800b7b0 <__NVIC_GetPriorityGrouping>:
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7b4:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <__NVIC_GetPriorityGrouping+0x18>)
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	0a1b      	lsrs	r3, r3, #8
 800b7ba:	f003 0307 	and.w	r3, r3, #7
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <__NVIC_EnableIRQ>:
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b7d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	db0b      	blt.n	800b7f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	f003 021f 	and.w	r2, r3, #31
 800b7e4:	4907      	ldr	r1, [pc, #28]	; (800b804 <__NVIC_EnableIRQ+0x38>)
 800b7e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	2001      	movs	r0, #1
 800b7ee:	fa00 f202 	lsl.w	r2, r0, r2
 800b7f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	e000e100 	.word	0xe000e100

0800b808 <__NVIC_DisableIRQ>:
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b816:	2b00      	cmp	r3, #0
 800b818:	db12      	blt.n	800b840 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	f003 021f 	and.w	r2, r3, #31
 800b820:	490a      	ldr	r1, [pc, #40]	; (800b84c <__NVIC_DisableIRQ+0x44>)
 800b822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b826:	095b      	lsrs	r3, r3, #5
 800b828:	2001      	movs	r0, #1
 800b82a:	fa00 f202 	lsl.w	r2, r0, r2
 800b82e:	3320      	adds	r3, #32
 800b830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b834:	f3bf 8f4f 	dsb	sy
}
 800b838:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b83a:	f3bf 8f6f 	isb	sy
}
 800b83e:	bf00      	nop
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	e000e100 	.word	0xe000e100

0800b850 <__NVIC_SetPriority>:
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b85c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b860:	2b00      	cmp	r3, #0
 800b862:	db0a      	blt.n	800b87a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	490c      	ldr	r1, [pc, #48]	; (800b89c <__NVIC_SetPriority+0x4c>)
 800b86a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b86e:	0112      	lsls	r2, r2, #4
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	440b      	add	r3, r1
 800b874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b878:	e00a      	b.n	800b890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	4908      	ldr	r1, [pc, #32]	; (800b8a0 <__NVIC_SetPriority+0x50>)
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	f003 030f 	and.w	r3, r3, #15
 800b886:	3b04      	subs	r3, #4
 800b888:	0112      	lsls	r2, r2, #4
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	440b      	add	r3, r1
 800b88e:	761a      	strb	r2, [r3, #24]
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	e000e100 	.word	0xe000e100
 800b8a0:	e000ed00 	.word	0xe000ed00

0800b8a4 <NVIC_EncodePriority>:
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	; 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	f1c3 0307 	rsb	r3, r3, #7
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	bf28      	it	cs
 800b8c2:	2304      	movcs	r3, #4
 800b8c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	2b06      	cmp	r3, #6
 800b8cc:	d902      	bls.n	800b8d4 <NVIC_EncodePriority+0x30>
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	3b03      	subs	r3, #3
 800b8d2:	e000      	b.n	800b8d6 <NVIC_EncodePriority+0x32>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e2:	43da      	mvns	r2, r3
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	401a      	ands	r2, r3
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f6:	43d9      	mvns	r1, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8fc:	4313      	orrs	r3, r2
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3724      	adds	r7, #36	; 0x24
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff ff28 	bl	800b768 <__NVIC_SetPriorityGrouping>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b92e:	f7ff ff3f 	bl	800b7b0 <__NVIC_GetPriorityGrouping>
 800b932:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	6978      	ldr	r0, [r7, #20]
 800b93a:	f7ff ffb3 	bl	800b8a4 <NVIC_EncodePriority>
 800b93e:	4602      	mov	r2, r0
 800b940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ff82 	bl	800b850 <__NVIC_SetPriority>
}
 800b94c:	bf00      	nop
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b95e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff ff32 	bl	800b7cc <__NVIC_EnableIRQ>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b97a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff ff42 	bl	800b808 <__NVIC_DisableIRQ>
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e054      	b.n	800ba48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7f5b      	ldrb	r3, [r3, #29]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d105      	bne.n	800b9b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fa5e 	bl	800ae70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	791b      	ldrb	r3, [r3, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10c      	bne.n	800b9dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a22      	ldr	r2, [pc, #136]	; (800ba50 <HAL_CRC_Init+0xc4>)
 800b9c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0218 	bic.w	r2, r2, #24
 800b9d8:	609a      	str	r2, [r3, #8]
 800b9da:	e00c      	b.n	800b9f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6899      	ldr	r1, [r3, #8]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f98c 	bl	800bd04 <HAL_CRCEx_Polynomial_Set>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e028      	b.n	800ba48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	795b      	ldrb	r3, [r3, #5]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d105      	bne.n	800ba0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba06:	611a      	str	r2, [r3, #16]
 800ba08:	e004      	b.n	800ba14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	6912      	ldr	r2, [r2, #16]
 800ba12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	695a      	ldr	r2, [r3, #20]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699a      	ldr	r2, [r3, #24]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	04c11db7 	.word	0x04c11db7

0800ba54 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800ba60:	2300      	movs	r3, #0
 800ba62:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2202      	movs	r2, #2
 800ba68:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d006      	beq.n	800ba80 <HAL_CRC_Accumulate+0x2c>
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d829      	bhi.n	800baca <HAL_CRC_Accumulate+0x76>
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d019      	beq.n	800baae <HAL_CRC_Accumulate+0x5a>
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d01e      	beq.n	800babc <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800ba7e:	e024      	b.n	800baca <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e00a      	b.n	800ba9c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	441a      	add	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d3f0      	bcc.n	800ba86 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	613b      	str	r3, [r7, #16]
      break;
 800baac:	e00e      	b.n	800bacc <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 f85e 	bl	800bb74 <CRC_Handle_8>
 800bab8:	6138      	str	r0, [r7, #16]
      break;
 800baba:	e007      	b.n	800bacc <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	68b9      	ldr	r1, [r7, #8]
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f8e5 	bl	800bc90 <CRC_Handle_16>
 800bac6:	6138      	str	r0, [r7, #16]
      break;
 800bac8:	e000      	b.n	800bacc <HAL_CRC_Accumulate+0x78>
      break;
 800baca:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2201      	movs	r2, #1
 800bad0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bad2:	693b      	ldr	r3, [r7, #16]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2202      	movs	r2, #2
 800baf0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f042 0201 	orr.w	r2, r2, #1
 800bb00:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d006      	beq.n	800bb18 <HAL_CRC_Calculate+0x3c>
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d829      	bhi.n	800bb62 <HAL_CRC_Calculate+0x86>
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d019      	beq.n	800bb46 <HAL_CRC_Calculate+0x6a>
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d01e      	beq.n	800bb54 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800bb16:	e024      	b.n	800bb62 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	e00a      	b.n	800bb34 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	441a      	add	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6812      	ldr	r2, [r2, #0]
 800bb2c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	3301      	adds	r3, #1
 800bb32:	617b      	str	r3, [r7, #20]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d3f0      	bcc.n	800bb1e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	613b      	str	r3, [r7, #16]
      break;
 800bb44:	e00e      	b.n	800bb64 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	68b9      	ldr	r1, [r7, #8]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f000 f812 	bl	800bb74 <CRC_Handle_8>
 800bb50:	6138      	str	r0, [r7, #16]
      break;
 800bb52:	e007      	b.n	800bb64 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 f899 	bl	800bc90 <CRC_Handle_16>
 800bb5e:	6138      	str	r0, [r7, #16]
      break;
 800bb60:	e000      	b.n	800bb64 <HAL_CRC_Calculate+0x88>
      break;
 800bb62:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2201      	movs	r2, #1
 800bb68:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bb6a:	693b      	ldr	r3, [r7, #16]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b089      	sub	sp, #36	; 0x24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bb80:	2300      	movs	r3, #0
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	e023      	b.n	800bbce <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	3301      	adds	r3, #1
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	440b      	add	r3, r1
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bba0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	3302      	adds	r3, #2
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	440b      	add	r3, r1
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bbb0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	3303      	adds	r3, #3
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	440b      	add	r3, r1
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bbc4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bbc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	089b      	lsrs	r3, r3, #2
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d3d6      	bcc.n	800bb86 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d04d      	beq.n	800bc7e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d107      	bne.n	800bbfc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f003 0303 	and.w	r3, r3, #3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d116      	bne.n	800bc34 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	021b      	lsls	r3, r3, #8
 800bc12:	b21a      	sxth	r2, r3
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	3301      	adds	r3, #1
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	440b      	add	r3, r1
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b21b      	sxth	r3, r3
 800bc22:	4313      	orrs	r3, r2
 800bc24:	b21b      	sxth	r3, r3
 800bc26:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	8b7a      	ldrh	r2, [r7, #26]
 800bc32:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d11f      	bne.n	800bc7e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	b21a      	sxth	r2, r3
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	3301      	adds	r3, #1
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	440b      	add	r3, r1
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	b21b      	sxth	r3, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	b21b      	sxth	r3, r3
 800bc5e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	8b7a      	ldrh	r2, [r7, #26]
 800bc6a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	3302      	adds	r3, #2
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	4413      	add	r3, r2
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	6812      	ldr	r2, [r2, #0]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3724      	adds	r7, #36	; 0x24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e013      	b.n	800bcca <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	4413      	add	r3, r2
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	041a      	lsls	r2, r3, #16
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	3302      	adds	r3, #2
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	440b      	add	r3, r1
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	085b      	lsrs	r3, r3, #1
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d3e6      	bcc.n	800bca2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d009      	beq.n	800bcf2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	4413      	add	r3, r2
 800bcec:	881a      	ldrh	r2, [r3, #0]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bd14:	231f      	movs	r3, #31
 800bd16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bd18:	bf00      	nop
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	613a      	str	r2, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d009      	beq.n	800bd38 <HAL_CRCEx_Polynomial_Set+0x34>
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f003 031f 	and.w	r3, r3, #31
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0f0      	beq.n	800bd1a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b18      	cmp	r3, #24
 800bd3c:	d846      	bhi.n	800bdcc <HAL_CRCEx_Polynomial_Set+0xc8>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <HAL_CRCEx_Polynomial_Set+0x40>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bdd3 	.word	0x0800bdd3
 800bd48:	0800bdcd 	.word	0x0800bdcd
 800bd4c:	0800bdcd 	.word	0x0800bdcd
 800bd50:	0800bdcd 	.word	0x0800bdcd
 800bd54:	0800bdcd 	.word	0x0800bdcd
 800bd58:	0800bdcd 	.word	0x0800bdcd
 800bd5c:	0800bdcd 	.word	0x0800bdcd
 800bd60:	0800bdcd 	.word	0x0800bdcd
 800bd64:	0800bdc1 	.word	0x0800bdc1
 800bd68:	0800bdcd 	.word	0x0800bdcd
 800bd6c:	0800bdcd 	.word	0x0800bdcd
 800bd70:	0800bdcd 	.word	0x0800bdcd
 800bd74:	0800bdcd 	.word	0x0800bdcd
 800bd78:	0800bdcd 	.word	0x0800bdcd
 800bd7c:	0800bdcd 	.word	0x0800bdcd
 800bd80:	0800bdcd 	.word	0x0800bdcd
 800bd84:	0800bdb5 	.word	0x0800bdb5
 800bd88:	0800bdcd 	.word	0x0800bdcd
 800bd8c:	0800bdcd 	.word	0x0800bdcd
 800bd90:	0800bdcd 	.word	0x0800bdcd
 800bd94:	0800bdcd 	.word	0x0800bdcd
 800bd98:	0800bdcd 	.word	0x0800bdcd
 800bd9c:	0800bdcd 	.word	0x0800bdcd
 800bda0:	0800bdcd 	.word	0x0800bdcd
 800bda4:	0800bda9 	.word	0x0800bda9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b06      	cmp	r3, #6
 800bdac:	d913      	bls.n	800bdd6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdb2:	e010      	b.n	800bdd6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b07      	cmp	r3, #7
 800bdb8:	d90f      	bls.n	800bdda <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdbe:	e00c      	b.n	800bdda <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	2b0f      	cmp	r3, #15
 800bdc4:	d90b      	bls.n	800bdde <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdca:	e008      	b.n	800bdde <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd0:	e006      	b.n	800bde0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bdd2:	bf00      	nop
 800bdd4:	e004      	b.n	800bde0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bdd6:	bf00      	nop
 800bdd8:	e002      	b.n	800bde0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bdde:	bf00      	nop
  }
  if (status == HAL_OK)
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10d      	bne.n	800be02 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f023 0118 	bic.w	r1, r3, #24
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800be02:	7dfb      	ldrb	r3, [r7, #23]
}
 800be04:	4618      	mov	r0, r3
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800be18:	f7ff fc6a 	bl	800b6f0 <HAL_GetTick>
 800be1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e316      	b.n	800c456 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a66      	ldr	r2, [pc, #408]	; (800bfc8 <HAL_DMA_Init+0x1b8>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d04a      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a65      	ldr	r2, [pc, #404]	; (800bfcc <HAL_DMA_Init+0x1bc>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d045      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a63      	ldr	r2, [pc, #396]	; (800bfd0 <HAL_DMA_Init+0x1c0>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d040      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a62      	ldr	r2, [pc, #392]	; (800bfd4 <HAL_DMA_Init+0x1c4>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d03b      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a60      	ldr	r2, [pc, #384]	; (800bfd8 <HAL_DMA_Init+0x1c8>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d036      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a5f      	ldr	r2, [pc, #380]	; (800bfdc <HAL_DMA_Init+0x1cc>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d031      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a5d      	ldr	r2, [pc, #372]	; (800bfe0 <HAL_DMA_Init+0x1d0>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d02c      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a5c      	ldr	r2, [pc, #368]	; (800bfe4 <HAL_DMA_Init+0x1d4>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d027      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a5a      	ldr	r2, [pc, #360]	; (800bfe8 <HAL_DMA_Init+0x1d8>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d022      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a59      	ldr	r2, [pc, #356]	; (800bfec <HAL_DMA_Init+0x1dc>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d01d      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a57      	ldr	r2, [pc, #348]	; (800bff0 <HAL_DMA_Init+0x1e0>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d018      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a56      	ldr	r2, [pc, #344]	; (800bff4 <HAL_DMA_Init+0x1e4>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d013      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a54      	ldr	r2, [pc, #336]	; (800bff8 <HAL_DMA_Init+0x1e8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d00e      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a53      	ldr	r2, [pc, #332]	; (800bffc <HAL_DMA_Init+0x1ec>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d009      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a51      	ldr	r2, [pc, #324]	; (800c000 <HAL_DMA_Init+0x1f0>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d004      	beq.n	800bec8 <HAL_DMA_Init+0xb8>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a50      	ldr	r2, [pc, #320]	; (800c004 <HAL_DMA_Init+0x1f4>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d101      	bne.n	800becc <HAL_DMA_Init+0xbc>
 800bec8:	2301      	movs	r3, #1
 800beca:	e000      	b.n	800bece <HAL_DMA_Init+0xbe>
 800becc:	2300      	movs	r3, #0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 813b 	beq.w	800c14a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a37      	ldr	r2, [pc, #220]	; (800bfc8 <HAL_DMA_Init+0x1b8>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d04a      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a36      	ldr	r2, [pc, #216]	; (800bfcc <HAL_DMA_Init+0x1bc>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d045      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a34      	ldr	r2, [pc, #208]	; (800bfd0 <HAL_DMA_Init+0x1c0>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d040      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a33      	ldr	r2, [pc, #204]	; (800bfd4 <HAL_DMA_Init+0x1c4>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d03b      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a31      	ldr	r2, [pc, #196]	; (800bfd8 <HAL_DMA_Init+0x1c8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d036      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a30      	ldr	r2, [pc, #192]	; (800bfdc <HAL_DMA_Init+0x1cc>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d031      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a2e      	ldr	r2, [pc, #184]	; (800bfe0 <HAL_DMA_Init+0x1d0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d02c      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a2d      	ldr	r2, [pc, #180]	; (800bfe4 <HAL_DMA_Init+0x1d4>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d027      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a2b      	ldr	r2, [pc, #172]	; (800bfe8 <HAL_DMA_Init+0x1d8>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d022      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a2a      	ldr	r2, [pc, #168]	; (800bfec <HAL_DMA_Init+0x1dc>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d01d      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a28      	ldr	r2, [pc, #160]	; (800bff0 <HAL_DMA_Init+0x1e0>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d018      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a27      	ldr	r2, [pc, #156]	; (800bff4 <HAL_DMA_Init+0x1e4>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d013      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a25      	ldr	r2, [pc, #148]	; (800bff8 <HAL_DMA_Init+0x1e8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d00e      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a24      	ldr	r2, [pc, #144]	; (800bffc <HAL_DMA_Init+0x1ec>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d009      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a22      	ldr	r2, [pc, #136]	; (800c000 <HAL_DMA_Init+0x1f0>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d004      	beq.n	800bf84 <HAL_DMA_Init+0x174>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a21      	ldr	r2, [pc, #132]	; (800c004 <HAL_DMA_Init+0x1f4>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d108      	bne.n	800bf96 <HAL_DMA_Init+0x186>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0201 	bic.w	r2, r2, #1
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	e007      	b.n	800bfa6 <HAL_DMA_Init+0x196>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f022 0201 	bic.w	r2, r2, #1
 800bfa4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bfa6:	e02f      	b.n	800c008 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bfa8:	f7ff fba2 	bl	800b6f0 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d928      	bls.n	800c008 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2203      	movs	r2, #3
 800bfc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e246      	b.n	800c456 <HAL_DMA_Init+0x646>
 800bfc8:	40020010 	.word	0x40020010
 800bfcc:	40020028 	.word	0x40020028
 800bfd0:	40020040 	.word	0x40020040
 800bfd4:	40020058 	.word	0x40020058
 800bfd8:	40020070 	.word	0x40020070
 800bfdc:	40020088 	.word	0x40020088
 800bfe0:	400200a0 	.word	0x400200a0
 800bfe4:	400200b8 	.word	0x400200b8
 800bfe8:	40020410 	.word	0x40020410
 800bfec:	40020428 	.word	0x40020428
 800bff0:	40020440 	.word	0x40020440
 800bff4:	40020458 	.word	0x40020458
 800bff8:	40020470 	.word	0x40020470
 800bffc:	40020488 	.word	0x40020488
 800c000:	400204a0 	.word	0x400204a0
 800c004:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1c8      	bne.n	800bfa8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4b83      	ldr	r3, [pc, #524]	; (800c230 <HAL_DMA_Init+0x420>)
 800c022:	4013      	ands	r3, r2
 800c024:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800c02e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c03a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c046:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	4313      	orrs	r3, r2
 800c052:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	2b04      	cmp	r3, #4
 800c05a:	d107      	bne.n	800c06c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c064:	4313      	orrs	r3, r2
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c06c:	4b71      	ldr	r3, [pc, #452]	; (800c234 <HAL_DMA_Init+0x424>)
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	4b71      	ldr	r3, [pc, #452]	; (800c238 <HAL_DMA_Init+0x428>)
 800c072:	4013      	ands	r3, r2
 800c074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c078:	d328      	bcc.n	800c0cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	2b28      	cmp	r3, #40	; 0x28
 800c080:	d903      	bls.n	800c08a <HAL_DMA_Init+0x27a>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	2b2e      	cmp	r3, #46	; 0x2e
 800c088:	d917      	bls.n	800c0ba <HAL_DMA_Init+0x2aa>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	2b3e      	cmp	r3, #62	; 0x3e
 800c090:	d903      	bls.n	800c09a <HAL_DMA_Init+0x28a>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	2b42      	cmp	r3, #66	; 0x42
 800c098:	d90f      	bls.n	800c0ba <HAL_DMA_Init+0x2aa>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	2b46      	cmp	r3, #70	; 0x46
 800c0a0:	d903      	bls.n	800c0aa <HAL_DMA_Init+0x29a>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	2b48      	cmp	r3, #72	; 0x48
 800c0a8:	d907      	bls.n	800c0ba <HAL_DMA_Init+0x2aa>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	2b4e      	cmp	r3, #78	; 0x4e
 800c0b0:	d905      	bls.n	800c0be <HAL_DMA_Init+0x2ae>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	2b52      	cmp	r3, #82	; 0x52
 800c0b8:	d801      	bhi.n	800c0be <HAL_DMA_Init+0x2ae>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e000      	b.n	800c0c0 <HAL_DMA_Init+0x2b0>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	695b      	ldr	r3, [r3, #20]
 800c0da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	f023 0307 	bic.w	r3, r3, #7
 800c0e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	d117      	bne.n	800c126 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00e      	beq.n	800c126 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f002 fcf5 	bl	800eaf8 <DMA_CheckFifoParam>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d008      	beq.n	800c126 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2240      	movs	r2, #64	; 0x40
 800c118:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e197      	b.n	800c456 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f002 fc30 	bl	800e994 <DMA_CalcBaseAndBitshift>
 800c134:	4603      	mov	r3, r0
 800c136:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c13c:	f003 031f 	and.w	r3, r3, #31
 800c140:	223f      	movs	r2, #63	; 0x3f
 800c142:	409a      	lsls	r2, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	e0cd      	b.n	800c2e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a3b      	ldr	r2, [pc, #236]	; (800c23c <HAL_DMA_Init+0x42c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d022      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a39      	ldr	r2, [pc, #228]	; (800c240 <HAL_DMA_Init+0x430>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01d      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a38      	ldr	r2, [pc, #224]	; (800c244 <HAL_DMA_Init+0x434>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d018      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a36      	ldr	r2, [pc, #216]	; (800c248 <HAL_DMA_Init+0x438>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d013      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a35      	ldr	r2, [pc, #212]	; (800c24c <HAL_DMA_Init+0x43c>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d00e      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a33      	ldr	r2, [pc, #204]	; (800c250 <HAL_DMA_Init+0x440>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d009      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a32      	ldr	r2, [pc, #200]	; (800c254 <HAL_DMA_Init+0x444>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d004      	beq.n	800c19a <HAL_DMA_Init+0x38a>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a30      	ldr	r2, [pc, #192]	; (800c258 <HAL_DMA_Init+0x448>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d101      	bne.n	800c19e <HAL_DMA_Init+0x38e>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <HAL_DMA_Init+0x390>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 8097 	beq.w	800c2d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a24      	ldr	r2, [pc, #144]	; (800c23c <HAL_DMA_Init+0x42c>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d021      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a22      	ldr	r2, [pc, #136]	; (800c240 <HAL_DMA_Init+0x430>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d01c      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a21      	ldr	r2, [pc, #132]	; (800c244 <HAL_DMA_Init+0x434>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d017      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a1f      	ldr	r2, [pc, #124]	; (800c248 <HAL_DMA_Init+0x438>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d012      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a1e      	ldr	r2, [pc, #120]	; (800c24c <HAL_DMA_Init+0x43c>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d00d      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a1c      	ldr	r2, [pc, #112]	; (800c250 <HAL_DMA_Init+0x440>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d008      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a1b      	ldr	r2, [pc, #108]	; (800c254 <HAL_DMA_Init+0x444>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d003      	beq.n	800c1f4 <HAL_DMA_Init+0x3e4>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a19      	ldr	r2, [pc, #100]	; (800c258 <HAL_DMA_Init+0x448>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	4b12      	ldr	r3, [pc, #72]	; (800c25c <HAL_DMA_Init+0x44c>)
 800c212:	4013      	ands	r3, r2
 800c214:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b40      	cmp	r3, #64	; 0x40
 800c21c:	d020      	beq.n	800c260 <HAL_DMA_Init+0x450>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d102      	bne.n	800c22c <HAL_DMA_Init+0x41c>
 800c226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c22a:	e01a      	b.n	800c262 <HAL_DMA_Init+0x452>
 800c22c:	2300      	movs	r3, #0
 800c22e:	e018      	b.n	800c262 <HAL_DMA_Init+0x452>
 800c230:	fe10803f 	.word	0xfe10803f
 800c234:	5c001000 	.word	0x5c001000
 800c238:	ffff0000 	.word	0xffff0000
 800c23c:	58025408 	.word	0x58025408
 800c240:	5802541c 	.word	0x5802541c
 800c244:	58025430 	.word	0x58025430
 800c248:	58025444 	.word	0x58025444
 800c24c:	58025458 	.word	0x58025458
 800c250:	5802546c 	.word	0x5802546c
 800c254:	58025480 	.word	0x58025480
 800c258:	58025494 	.word	0x58025494
 800c25c:	fffe000f 	.word	0xfffe000f
 800c260:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	68d2      	ldr	r2, [r2, #12]
 800c266:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c268:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c280:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c288:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c290:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4313      	orrs	r3, r2
 800c296:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	4b6e      	ldr	r3, [pc, #440]	; (800c460 <HAL_DMA_Init+0x650>)
 800c2a8:	4413      	add	r3, r2
 800c2aa:	4a6e      	ldr	r2, [pc, #440]	; (800c464 <HAL_DMA_Init+0x654>)
 800c2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b0:	091b      	lsrs	r3, r3, #4
 800c2b2:	009a      	lsls	r2, r3, #2
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f002 fb6b 	bl	800e994 <DMA_CalcBaseAndBitshift>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2c6:	f003 031f 	and.w	r3, r3, #31
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	409a      	lsls	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	e008      	b.n	800c2e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2240      	movs	r2, #64	; 0x40
 800c2d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2203      	movs	r2, #3
 800c2de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e0b7      	b.n	800c456 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a5f      	ldr	r2, [pc, #380]	; (800c468 <HAL_DMA_Init+0x658>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d072      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a5d      	ldr	r2, [pc, #372]	; (800c46c <HAL_DMA_Init+0x65c>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d06d      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a5c      	ldr	r2, [pc, #368]	; (800c470 <HAL_DMA_Init+0x660>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d068      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a5a      	ldr	r2, [pc, #360]	; (800c474 <HAL_DMA_Init+0x664>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d063      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a59      	ldr	r2, [pc, #356]	; (800c478 <HAL_DMA_Init+0x668>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d05e      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a57      	ldr	r2, [pc, #348]	; (800c47c <HAL_DMA_Init+0x66c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d059      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a56      	ldr	r2, [pc, #344]	; (800c480 <HAL_DMA_Init+0x670>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d054      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a54      	ldr	r2, [pc, #336]	; (800c484 <HAL_DMA_Init+0x674>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d04f      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a53      	ldr	r2, [pc, #332]	; (800c488 <HAL_DMA_Init+0x678>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d04a      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a51      	ldr	r2, [pc, #324]	; (800c48c <HAL_DMA_Init+0x67c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d045      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a50      	ldr	r2, [pc, #320]	; (800c490 <HAL_DMA_Init+0x680>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d040      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a4e      	ldr	r2, [pc, #312]	; (800c494 <HAL_DMA_Init+0x684>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d03b      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a4d      	ldr	r2, [pc, #308]	; (800c498 <HAL_DMA_Init+0x688>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d036      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a4b      	ldr	r2, [pc, #300]	; (800c49c <HAL_DMA_Init+0x68c>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d031      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a4a      	ldr	r2, [pc, #296]	; (800c4a0 <HAL_DMA_Init+0x690>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d02c      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a48      	ldr	r2, [pc, #288]	; (800c4a4 <HAL_DMA_Init+0x694>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d027      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a47      	ldr	r2, [pc, #284]	; (800c4a8 <HAL_DMA_Init+0x698>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d022      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a45      	ldr	r2, [pc, #276]	; (800c4ac <HAL_DMA_Init+0x69c>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d01d      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a44      	ldr	r2, [pc, #272]	; (800c4b0 <HAL_DMA_Init+0x6a0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d018      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a42      	ldr	r2, [pc, #264]	; (800c4b4 <HAL_DMA_Init+0x6a4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a41      	ldr	r2, [pc, #260]	; (800c4b8 <HAL_DMA_Init+0x6a8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a3f      	ldr	r2, [pc, #252]	; (800c4bc <HAL_DMA_Init+0x6ac>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d009      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a3e      	ldr	r2, [pc, #248]	; (800c4c0 <HAL_DMA_Init+0x6b0>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d004      	beq.n	800c3d6 <HAL_DMA_Init+0x5c6>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a3c      	ldr	r2, [pc, #240]	; (800c4c4 <HAL_DMA_Init+0x6b4>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d101      	bne.n	800c3da <HAL_DMA_Init+0x5ca>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_DMA_Init+0x5cc>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d032      	beq.n	800c446 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f002 fc05 	bl	800ebf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	2b80      	cmp	r3, #128	; 0x80
 800c3ec:	d102      	bne.n	800c3f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3fc:	b2d2      	uxtb	r2, r2
 800c3fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c408:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d010      	beq.n	800c434 <HAL_DMA_Init+0x624>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	2b08      	cmp	r3, #8
 800c418:	d80c      	bhi.n	800c434 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f002 fc82 	bl	800ed24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	2200      	movs	r2, #0
 800c426:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c430:	605a      	str	r2, [r3, #4]
 800c432:	e008      	b.n	800c446 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3718      	adds	r7, #24
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	a7fdabf8 	.word	0xa7fdabf8
 800c464:	cccccccd 	.word	0xcccccccd
 800c468:	40020010 	.word	0x40020010
 800c46c:	40020028 	.word	0x40020028
 800c470:	40020040 	.word	0x40020040
 800c474:	40020058 	.word	0x40020058
 800c478:	40020070 	.word	0x40020070
 800c47c:	40020088 	.word	0x40020088
 800c480:	400200a0 	.word	0x400200a0
 800c484:	400200b8 	.word	0x400200b8
 800c488:	40020410 	.word	0x40020410
 800c48c:	40020428 	.word	0x40020428
 800c490:	40020440 	.word	0x40020440
 800c494:	40020458 	.word	0x40020458
 800c498:	40020470 	.word	0x40020470
 800c49c:	40020488 	.word	0x40020488
 800c4a0:	400204a0 	.word	0x400204a0
 800c4a4:	400204b8 	.word	0x400204b8
 800c4a8:	58025408 	.word	0x58025408
 800c4ac:	5802541c 	.word	0x5802541c
 800c4b0:	58025430 	.word	0x58025430
 800c4b4:	58025444 	.word	0x58025444
 800c4b8:	58025458 	.word	0x58025458
 800c4bc:	5802546c 	.word	0x5802546c
 800c4c0:	58025480 	.word	0x58025480
 800c4c4:	58025494 	.word	0x58025494

0800c4c8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e1a8      	b.n	800c82c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a82      	ldr	r2, [pc, #520]	; (800c6e8 <HAL_DMA_DeInit+0x220>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d04a      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a80      	ldr	r2, [pc, #512]	; (800c6ec <HAL_DMA_DeInit+0x224>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d045      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a7f      	ldr	r2, [pc, #508]	; (800c6f0 <HAL_DMA_DeInit+0x228>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d040      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a7d      	ldr	r2, [pc, #500]	; (800c6f4 <HAL_DMA_DeInit+0x22c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d03b      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a7c      	ldr	r2, [pc, #496]	; (800c6f8 <HAL_DMA_DeInit+0x230>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d036      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a7a      	ldr	r2, [pc, #488]	; (800c6fc <HAL_DMA_DeInit+0x234>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d031      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a79      	ldr	r2, [pc, #484]	; (800c700 <HAL_DMA_DeInit+0x238>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d02c      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a77      	ldr	r2, [pc, #476]	; (800c704 <HAL_DMA_DeInit+0x23c>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d027      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a76      	ldr	r2, [pc, #472]	; (800c708 <HAL_DMA_DeInit+0x240>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d022      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a74      	ldr	r2, [pc, #464]	; (800c70c <HAL_DMA_DeInit+0x244>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d01d      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a73      	ldr	r2, [pc, #460]	; (800c710 <HAL_DMA_DeInit+0x248>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d018      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a71      	ldr	r2, [pc, #452]	; (800c714 <HAL_DMA_DeInit+0x24c>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a70      	ldr	r2, [pc, #448]	; (800c718 <HAL_DMA_DeInit+0x250>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00e      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a6e      	ldr	r2, [pc, #440]	; (800c71c <HAL_DMA_DeInit+0x254>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d009      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a6d      	ldr	r2, [pc, #436]	; (800c720 <HAL_DMA_DeInit+0x258>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d004      	beq.n	800c57a <HAL_DMA_DeInit+0xb2>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a6b      	ldr	r2, [pc, #428]	; (800c724 <HAL_DMA_DeInit+0x25c>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d108      	bne.n	800c58c <HAL_DMA_DeInit+0xc4>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f022 0201 	bic.w	r2, r2, #1
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	e007      	b.n	800c59c <HAL_DMA_DeInit+0xd4>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0201 	bic.w	r2, r2, #1
 800c59a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a51      	ldr	r2, [pc, #324]	; (800c6e8 <HAL_DMA_DeInit+0x220>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d04a      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a50      	ldr	r2, [pc, #320]	; (800c6ec <HAL_DMA_DeInit+0x224>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d045      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a4e      	ldr	r2, [pc, #312]	; (800c6f0 <HAL_DMA_DeInit+0x228>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d040      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a4d      	ldr	r2, [pc, #308]	; (800c6f4 <HAL_DMA_DeInit+0x22c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d03b      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a4b      	ldr	r2, [pc, #300]	; (800c6f8 <HAL_DMA_DeInit+0x230>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d036      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a4a      	ldr	r2, [pc, #296]	; (800c6fc <HAL_DMA_DeInit+0x234>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d031      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a48      	ldr	r2, [pc, #288]	; (800c700 <HAL_DMA_DeInit+0x238>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d02c      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a47      	ldr	r2, [pc, #284]	; (800c704 <HAL_DMA_DeInit+0x23c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d027      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a45      	ldr	r2, [pc, #276]	; (800c708 <HAL_DMA_DeInit+0x240>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d022      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a44      	ldr	r2, [pc, #272]	; (800c70c <HAL_DMA_DeInit+0x244>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d01d      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a42      	ldr	r2, [pc, #264]	; (800c710 <HAL_DMA_DeInit+0x248>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d018      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a41      	ldr	r2, [pc, #260]	; (800c714 <HAL_DMA_DeInit+0x24c>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d013      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a3f      	ldr	r2, [pc, #252]	; (800c718 <HAL_DMA_DeInit+0x250>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d00e      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a3e      	ldr	r2, [pc, #248]	; (800c71c <HAL_DMA_DeInit+0x254>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d009      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a3c      	ldr	r2, [pc, #240]	; (800c720 <HAL_DMA_DeInit+0x258>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d004      	beq.n	800c63c <HAL_DMA_DeInit+0x174>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a3b      	ldr	r2, [pc, #236]	; (800c724 <HAL_DMA_DeInit+0x25c>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d101      	bne.n	800c640 <HAL_DMA_DeInit+0x178>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e000      	b.n	800c642 <HAL_DMA_DeInit+0x17a>
 800c640:	2300      	movs	r3, #0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d025      	beq.n	800c692 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2200      	movs	r2, #0
 800c654:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2200      	movs	r2, #0
 800c664:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2221      	movs	r2, #33	; 0x21
 800c674:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f002 f98c 	bl	800e994 <DMA_CalcBaseAndBitshift>
 800c67c:	4603      	mov	r3, r0
 800c67e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c684:	f003 031f 	and.w	r3, r3, #31
 800c688:	223f      	movs	r2, #63	; 0x3f
 800c68a:	409a      	lsls	r2, r3
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	609a      	str	r2, [r3, #8]
 800c690:	e081      	b.n	800c796 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a24      	ldr	r2, [pc, #144]	; (800c728 <HAL_DMA_DeInit+0x260>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d022      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a22      	ldr	r2, [pc, #136]	; (800c72c <HAL_DMA_DeInit+0x264>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d01d      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a21      	ldr	r2, [pc, #132]	; (800c730 <HAL_DMA_DeInit+0x268>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d018      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a1f      	ldr	r2, [pc, #124]	; (800c734 <HAL_DMA_DeInit+0x26c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d013      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a1e      	ldr	r2, [pc, #120]	; (800c738 <HAL_DMA_DeInit+0x270>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d00e      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1c      	ldr	r2, [pc, #112]	; (800c73c <HAL_DMA_DeInit+0x274>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d009      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a1b      	ldr	r2, [pc, #108]	; (800c740 <HAL_DMA_DeInit+0x278>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d004      	beq.n	800c6e2 <HAL_DMA_DeInit+0x21a>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a19      	ldr	r2, [pc, #100]	; (800c744 <HAL_DMA_DeInit+0x27c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d132      	bne.n	800c748 <HAL_DMA_DeInit+0x280>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e031      	b.n	800c74a <HAL_DMA_DeInit+0x282>
 800c6e6:	bf00      	nop
 800c6e8:	40020010 	.word	0x40020010
 800c6ec:	40020028 	.word	0x40020028
 800c6f0:	40020040 	.word	0x40020040
 800c6f4:	40020058 	.word	0x40020058
 800c6f8:	40020070 	.word	0x40020070
 800c6fc:	40020088 	.word	0x40020088
 800c700:	400200a0 	.word	0x400200a0
 800c704:	400200b8 	.word	0x400200b8
 800c708:	40020410 	.word	0x40020410
 800c70c:	40020428 	.word	0x40020428
 800c710:	40020440 	.word	0x40020440
 800c714:	40020458 	.word	0x40020458
 800c718:	40020470 	.word	0x40020470
 800c71c:	40020488 	.word	0x40020488
 800c720:	400204a0 	.word	0x400204a0
 800c724:	400204b8 	.word	0x400204b8
 800c728:	58025408 	.word	0x58025408
 800c72c:	5802541c 	.word	0x5802541c
 800c730:	58025430 	.word	0x58025430
 800c734:	58025444 	.word	0x58025444
 800c738:	58025458 	.word	0x58025458
 800c73c:	5802546c 	.word	0x5802546c
 800c740:	58025480 	.word	0x58025480
 800c744:	58025494 	.word	0x58025494
 800c748:	2300      	movs	r3, #0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d021      	beq.n	800c792 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2200      	movs	r2, #0
 800c764:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2200      	movs	r2, #0
 800c76c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2200      	movs	r2, #0
 800c774:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f002 f90c 	bl	800e994 <DMA_CalcBaseAndBitshift>
 800c77c:	4603      	mov	r3, r0
 800c77e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c784:	f003 031f 	and.w	r3, r3, #31
 800c788:	2201      	movs	r2, #1
 800c78a:	409a      	lsls	r2, r3
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	605a      	str	r2, [r3, #4]
 800c790:	e001      	b.n	800c796 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e04a      	b.n	800c82c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f002 fa2a 	bl	800ebf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d008      	beq.n	800c7b6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c7b4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00f      	beq.n	800c7de <HAL_DMA_DeInit+0x316>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	2b08      	cmp	r3, #8
 800c7c4:	d80b      	bhi.n	800c7de <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f002 faac 	bl	800ed24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c7dc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e226      	b.n	800cc9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c856:	2b01      	cmp	r3, #1
 800c858:	d101      	bne.n	800c85e <HAL_DMA_Start_IT+0x2a>
 800c85a:	2302      	movs	r3, #2
 800c85c:	e21f      	b.n	800cc9e <HAL_DMA_Start_IT+0x46a>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b01      	cmp	r3, #1
 800c870:	f040 820a 	bne.w	800cc88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2202      	movs	r2, #2
 800c878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a68      	ldr	r2, [pc, #416]	; (800ca28 <HAL_DMA_Start_IT+0x1f4>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d04a      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a66      	ldr	r2, [pc, #408]	; (800ca2c <HAL_DMA_Start_IT+0x1f8>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d045      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a65      	ldr	r2, [pc, #404]	; (800ca30 <HAL_DMA_Start_IT+0x1fc>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d040      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a63      	ldr	r2, [pc, #396]	; (800ca34 <HAL_DMA_Start_IT+0x200>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d03b      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a62      	ldr	r2, [pc, #392]	; (800ca38 <HAL_DMA_Start_IT+0x204>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d036      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a60      	ldr	r2, [pc, #384]	; (800ca3c <HAL_DMA_Start_IT+0x208>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d031      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a5f      	ldr	r2, [pc, #380]	; (800ca40 <HAL_DMA_Start_IT+0x20c>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d02c      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a5d      	ldr	r2, [pc, #372]	; (800ca44 <HAL_DMA_Start_IT+0x210>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d027      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a5c      	ldr	r2, [pc, #368]	; (800ca48 <HAL_DMA_Start_IT+0x214>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d022      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a5a      	ldr	r2, [pc, #360]	; (800ca4c <HAL_DMA_Start_IT+0x218>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d01d      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a59      	ldr	r2, [pc, #356]	; (800ca50 <HAL_DMA_Start_IT+0x21c>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d018      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a57      	ldr	r2, [pc, #348]	; (800ca54 <HAL_DMA_Start_IT+0x220>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d013      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a56      	ldr	r2, [pc, #344]	; (800ca58 <HAL_DMA_Start_IT+0x224>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d00e      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a54      	ldr	r2, [pc, #336]	; (800ca5c <HAL_DMA_Start_IT+0x228>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d009      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a53      	ldr	r2, [pc, #332]	; (800ca60 <HAL_DMA_Start_IT+0x22c>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d004      	beq.n	800c922 <HAL_DMA_Start_IT+0xee>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a51      	ldr	r2, [pc, #324]	; (800ca64 <HAL_DMA_Start_IT+0x230>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d108      	bne.n	800c934 <HAL_DMA_Start_IT+0x100>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 0201 	bic.w	r2, r2, #1
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	e007      	b.n	800c944 <HAL_DMA_Start_IT+0x110>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 0201 	bic.w	r2, r2, #1
 800c942:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f001 fe76 	bl	800e63c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a34      	ldr	r2, [pc, #208]	; (800ca28 <HAL_DMA_Start_IT+0x1f4>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d04a      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a33      	ldr	r2, [pc, #204]	; (800ca2c <HAL_DMA_Start_IT+0x1f8>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d045      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a31      	ldr	r2, [pc, #196]	; (800ca30 <HAL_DMA_Start_IT+0x1fc>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d040      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a30      	ldr	r2, [pc, #192]	; (800ca34 <HAL_DMA_Start_IT+0x200>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d03b      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a2e      	ldr	r2, [pc, #184]	; (800ca38 <HAL_DMA_Start_IT+0x204>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d036      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a2d      	ldr	r2, [pc, #180]	; (800ca3c <HAL_DMA_Start_IT+0x208>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d031      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a2b      	ldr	r2, [pc, #172]	; (800ca40 <HAL_DMA_Start_IT+0x20c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d02c      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a2a      	ldr	r2, [pc, #168]	; (800ca44 <HAL_DMA_Start_IT+0x210>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d027      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a28      	ldr	r2, [pc, #160]	; (800ca48 <HAL_DMA_Start_IT+0x214>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d022      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a27      	ldr	r2, [pc, #156]	; (800ca4c <HAL_DMA_Start_IT+0x218>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d01d      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a25      	ldr	r2, [pc, #148]	; (800ca50 <HAL_DMA_Start_IT+0x21c>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d018      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a24      	ldr	r2, [pc, #144]	; (800ca54 <HAL_DMA_Start_IT+0x220>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d013      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a22      	ldr	r2, [pc, #136]	; (800ca58 <HAL_DMA_Start_IT+0x224>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00e      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a21      	ldr	r2, [pc, #132]	; (800ca5c <HAL_DMA_Start_IT+0x228>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d009      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a1f      	ldr	r2, [pc, #124]	; (800ca60 <HAL_DMA_Start_IT+0x22c>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d004      	beq.n	800c9f0 <HAL_DMA_Start_IT+0x1bc>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <HAL_DMA_Start_IT+0x230>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d101      	bne.n	800c9f4 <HAL_DMA_Start_IT+0x1c0>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <HAL_DMA_Start_IT+0x1c2>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d036      	beq.n	800ca68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f023 021e 	bic.w	r2, r3, #30
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f042 0216 	orr.w	r2, r2, #22
 800ca0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d03e      	beq.n	800ca94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f042 0208 	orr.w	r2, r2, #8
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	e035      	b.n	800ca94 <HAL_DMA_Start_IT+0x260>
 800ca28:	40020010 	.word	0x40020010
 800ca2c:	40020028 	.word	0x40020028
 800ca30:	40020040 	.word	0x40020040
 800ca34:	40020058 	.word	0x40020058
 800ca38:	40020070 	.word	0x40020070
 800ca3c:	40020088 	.word	0x40020088
 800ca40:	400200a0 	.word	0x400200a0
 800ca44:	400200b8 	.word	0x400200b8
 800ca48:	40020410 	.word	0x40020410
 800ca4c:	40020428 	.word	0x40020428
 800ca50:	40020440 	.word	0x40020440
 800ca54:	40020458 	.word	0x40020458
 800ca58:	40020470 	.word	0x40020470
 800ca5c:	40020488 	.word	0x40020488
 800ca60:	400204a0 	.word	0x400204a0
 800ca64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f023 020e 	bic.w	r2, r3, #14
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f042 020a 	orr.w	r2, r2, #10
 800ca7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d007      	beq.n	800ca94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0204 	orr.w	r2, r2, #4
 800ca92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a83      	ldr	r2, [pc, #524]	; (800cca8 <HAL_DMA_Start_IT+0x474>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d072      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a82      	ldr	r2, [pc, #520]	; (800ccac <HAL_DMA_Start_IT+0x478>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d06d      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a80      	ldr	r2, [pc, #512]	; (800ccb0 <HAL_DMA_Start_IT+0x47c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d068      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a7f      	ldr	r2, [pc, #508]	; (800ccb4 <HAL_DMA_Start_IT+0x480>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d063      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a7d      	ldr	r2, [pc, #500]	; (800ccb8 <HAL_DMA_Start_IT+0x484>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d05e      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a7c      	ldr	r2, [pc, #496]	; (800ccbc <HAL_DMA_Start_IT+0x488>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d059      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a7a      	ldr	r2, [pc, #488]	; (800ccc0 <HAL_DMA_Start_IT+0x48c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d054      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a79      	ldr	r2, [pc, #484]	; (800ccc4 <HAL_DMA_Start_IT+0x490>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d04f      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a77      	ldr	r2, [pc, #476]	; (800ccc8 <HAL_DMA_Start_IT+0x494>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d04a      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a76      	ldr	r2, [pc, #472]	; (800cccc <HAL_DMA_Start_IT+0x498>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d045      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a74      	ldr	r2, [pc, #464]	; (800ccd0 <HAL_DMA_Start_IT+0x49c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d040      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a73      	ldr	r2, [pc, #460]	; (800ccd4 <HAL_DMA_Start_IT+0x4a0>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d03b      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a71      	ldr	r2, [pc, #452]	; (800ccd8 <HAL_DMA_Start_IT+0x4a4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d036      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a70      	ldr	r2, [pc, #448]	; (800ccdc <HAL_DMA_Start_IT+0x4a8>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d031      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a6e      	ldr	r2, [pc, #440]	; (800cce0 <HAL_DMA_Start_IT+0x4ac>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d02c      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a6d      	ldr	r2, [pc, #436]	; (800cce4 <HAL_DMA_Start_IT+0x4b0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d027      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a6b      	ldr	r2, [pc, #428]	; (800cce8 <HAL_DMA_Start_IT+0x4b4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d022      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a6a      	ldr	r2, [pc, #424]	; (800ccec <HAL_DMA_Start_IT+0x4b8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d01d      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a68      	ldr	r2, [pc, #416]	; (800ccf0 <HAL_DMA_Start_IT+0x4bc>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d018      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a67      	ldr	r2, [pc, #412]	; (800ccf4 <HAL_DMA_Start_IT+0x4c0>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d013      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a65      	ldr	r2, [pc, #404]	; (800ccf8 <HAL_DMA_Start_IT+0x4c4>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d00e      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a64      	ldr	r2, [pc, #400]	; (800ccfc <HAL_DMA_Start_IT+0x4c8>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d009      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a62      	ldr	r2, [pc, #392]	; (800cd00 <HAL_DMA_Start_IT+0x4cc>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d004      	beq.n	800cb84 <HAL_DMA_Start_IT+0x350>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a61      	ldr	r2, [pc, #388]	; (800cd04 <HAL_DMA_Start_IT+0x4d0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d101      	bne.n	800cb88 <HAL_DMA_Start_IT+0x354>
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <HAL_DMA_Start_IT+0x356>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d01a      	beq.n	800cbc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbaa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a37      	ldr	r2, [pc, #220]	; (800cca8 <HAL_DMA_Start_IT+0x474>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d04a      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a36      	ldr	r2, [pc, #216]	; (800ccac <HAL_DMA_Start_IT+0x478>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d045      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a34      	ldr	r2, [pc, #208]	; (800ccb0 <HAL_DMA_Start_IT+0x47c>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d040      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a33      	ldr	r2, [pc, #204]	; (800ccb4 <HAL_DMA_Start_IT+0x480>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d03b      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a31      	ldr	r2, [pc, #196]	; (800ccb8 <HAL_DMA_Start_IT+0x484>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d036      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a30      	ldr	r2, [pc, #192]	; (800ccbc <HAL_DMA_Start_IT+0x488>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d031      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a2e      	ldr	r2, [pc, #184]	; (800ccc0 <HAL_DMA_Start_IT+0x48c>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d02c      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a2d      	ldr	r2, [pc, #180]	; (800ccc4 <HAL_DMA_Start_IT+0x490>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d027      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a2b      	ldr	r2, [pc, #172]	; (800ccc8 <HAL_DMA_Start_IT+0x494>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d022      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <HAL_DMA_Start_IT+0x498>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d01d      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a28      	ldr	r2, [pc, #160]	; (800ccd0 <HAL_DMA_Start_IT+0x49c>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d018      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a27      	ldr	r2, [pc, #156]	; (800ccd4 <HAL_DMA_Start_IT+0x4a0>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d013      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a25      	ldr	r2, [pc, #148]	; (800ccd8 <HAL_DMA_Start_IT+0x4a4>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00e      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a24      	ldr	r2, [pc, #144]	; (800ccdc <HAL_DMA_Start_IT+0x4a8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d009      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a22      	ldr	r2, [pc, #136]	; (800cce0 <HAL_DMA_Start_IT+0x4ac>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d004      	beq.n	800cc64 <HAL_DMA_Start_IT+0x430>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a21      	ldr	r2, [pc, #132]	; (800cce4 <HAL_DMA_Start_IT+0x4b0>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d108      	bne.n	800cc76 <HAL_DMA_Start_IT+0x442>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f042 0201 	orr.w	r2, r2, #1
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	e012      	b.n	800cc9c <HAL_DMA_Start_IT+0x468>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f042 0201 	orr.w	r2, r2, #1
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	e009      	b.n	800cc9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	40020010 	.word	0x40020010
 800ccac:	40020028 	.word	0x40020028
 800ccb0:	40020040 	.word	0x40020040
 800ccb4:	40020058 	.word	0x40020058
 800ccb8:	40020070 	.word	0x40020070
 800ccbc:	40020088 	.word	0x40020088
 800ccc0:	400200a0 	.word	0x400200a0
 800ccc4:	400200b8 	.word	0x400200b8
 800ccc8:	40020410 	.word	0x40020410
 800cccc:	40020428 	.word	0x40020428
 800ccd0:	40020440 	.word	0x40020440
 800ccd4:	40020458 	.word	0x40020458
 800ccd8:	40020470 	.word	0x40020470
 800ccdc:	40020488 	.word	0x40020488
 800cce0:	400204a0 	.word	0x400204a0
 800cce4:	400204b8 	.word	0x400204b8
 800cce8:	58025408 	.word	0x58025408
 800ccec:	5802541c 	.word	0x5802541c
 800ccf0:	58025430 	.word	0x58025430
 800ccf4:	58025444 	.word	0x58025444
 800ccf8:	58025458 	.word	0x58025458
 800ccfc:	5802546c 	.word	0x5802546c
 800cd00:	58025480 	.word	0x58025480
 800cd04:	58025494 	.word	0x58025494

0800cd08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800cd10:	f7fe fcee 	bl	800b6f0 <HAL_GetTick>
 800cd14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e2dc      	b.n	800d2da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d008      	beq.n	800cd3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2280      	movs	r2, #128	; 0x80
 800cd30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e2cd      	b.n	800d2da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a76      	ldr	r2, [pc, #472]	; (800cf1c <HAL_DMA_Abort+0x214>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d04a      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a74      	ldr	r2, [pc, #464]	; (800cf20 <HAL_DMA_Abort+0x218>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d045      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a73      	ldr	r2, [pc, #460]	; (800cf24 <HAL_DMA_Abort+0x21c>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d040      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a71      	ldr	r2, [pc, #452]	; (800cf28 <HAL_DMA_Abort+0x220>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d03b      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a70      	ldr	r2, [pc, #448]	; (800cf2c <HAL_DMA_Abort+0x224>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d036      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a6e      	ldr	r2, [pc, #440]	; (800cf30 <HAL_DMA_Abort+0x228>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d031      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a6d      	ldr	r2, [pc, #436]	; (800cf34 <HAL_DMA_Abort+0x22c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d02c      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a6b      	ldr	r2, [pc, #428]	; (800cf38 <HAL_DMA_Abort+0x230>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d027      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a6a      	ldr	r2, [pc, #424]	; (800cf3c <HAL_DMA_Abort+0x234>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d022      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a68      	ldr	r2, [pc, #416]	; (800cf40 <HAL_DMA_Abort+0x238>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d01d      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a67      	ldr	r2, [pc, #412]	; (800cf44 <HAL_DMA_Abort+0x23c>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d018      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a65      	ldr	r2, [pc, #404]	; (800cf48 <HAL_DMA_Abort+0x240>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d013      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a64      	ldr	r2, [pc, #400]	; (800cf4c <HAL_DMA_Abort+0x244>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d00e      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a62      	ldr	r2, [pc, #392]	; (800cf50 <HAL_DMA_Abort+0x248>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d009      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a61      	ldr	r2, [pc, #388]	; (800cf54 <HAL_DMA_Abort+0x24c>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d004      	beq.n	800cdde <HAL_DMA_Abort+0xd6>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a5f      	ldr	r2, [pc, #380]	; (800cf58 <HAL_DMA_Abort+0x250>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d101      	bne.n	800cde2 <HAL_DMA_Abort+0xda>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e000      	b.n	800cde4 <HAL_DMA_Abort+0xdc>
 800cde2:	2300      	movs	r3, #0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d013      	beq.n	800ce10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f022 021e 	bic.w	r2, r2, #30
 800cdf6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	695a      	ldr	r2, [r3, #20]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	617b      	str	r3, [r7, #20]
 800ce0e:	e00a      	b.n	800ce26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 020e 	bic.w	r2, r2, #14
 800ce1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a3c      	ldr	r2, [pc, #240]	; (800cf1c <HAL_DMA_Abort+0x214>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d072      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a3a      	ldr	r2, [pc, #232]	; (800cf20 <HAL_DMA_Abort+0x218>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d06d      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a39      	ldr	r2, [pc, #228]	; (800cf24 <HAL_DMA_Abort+0x21c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d068      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a37      	ldr	r2, [pc, #220]	; (800cf28 <HAL_DMA_Abort+0x220>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d063      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a36      	ldr	r2, [pc, #216]	; (800cf2c <HAL_DMA_Abort+0x224>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d05e      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a34      	ldr	r2, [pc, #208]	; (800cf30 <HAL_DMA_Abort+0x228>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d059      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a33      	ldr	r2, [pc, #204]	; (800cf34 <HAL_DMA_Abort+0x22c>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d054      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a31      	ldr	r2, [pc, #196]	; (800cf38 <HAL_DMA_Abort+0x230>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d04f      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a30      	ldr	r2, [pc, #192]	; (800cf3c <HAL_DMA_Abort+0x234>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d04a      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a2e      	ldr	r2, [pc, #184]	; (800cf40 <HAL_DMA_Abort+0x238>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d045      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a2d      	ldr	r2, [pc, #180]	; (800cf44 <HAL_DMA_Abort+0x23c>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d040      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a2b      	ldr	r2, [pc, #172]	; (800cf48 <HAL_DMA_Abort+0x240>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d03b      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a2a      	ldr	r2, [pc, #168]	; (800cf4c <HAL_DMA_Abort+0x244>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d036      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a28      	ldr	r2, [pc, #160]	; (800cf50 <HAL_DMA_Abort+0x248>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d031      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a27      	ldr	r2, [pc, #156]	; (800cf54 <HAL_DMA_Abort+0x24c>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d02c      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a25      	ldr	r2, [pc, #148]	; (800cf58 <HAL_DMA_Abort+0x250>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d027      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a24      	ldr	r2, [pc, #144]	; (800cf5c <HAL_DMA_Abort+0x254>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d022      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a22      	ldr	r2, [pc, #136]	; (800cf60 <HAL_DMA_Abort+0x258>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d01d      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a21      	ldr	r2, [pc, #132]	; (800cf64 <HAL_DMA_Abort+0x25c>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d018      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a1f      	ldr	r2, [pc, #124]	; (800cf68 <HAL_DMA_Abort+0x260>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d013      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a1e      	ldr	r2, [pc, #120]	; (800cf6c <HAL_DMA_Abort+0x264>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d00e      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a1c      	ldr	r2, [pc, #112]	; (800cf70 <HAL_DMA_Abort+0x268>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d009      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a1b      	ldr	r2, [pc, #108]	; (800cf74 <HAL_DMA_Abort+0x26c>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d004      	beq.n	800cf16 <HAL_DMA_Abort+0x20e>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a19      	ldr	r2, [pc, #100]	; (800cf78 <HAL_DMA_Abort+0x270>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d132      	bne.n	800cf7c <HAL_DMA_Abort+0x274>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e031      	b.n	800cf7e <HAL_DMA_Abort+0x276>
 800cf1a:	bf00      	nop
 800cf1c:	40020010 	.word	0x40020010
 800cf20:	40020028 	.word	0x40020028
 800cf24:	40020040 	.word	0x40020040
 800cf28:	40020058 	.word	0x40020058
 800cf2c:	40020070 	.word	0x40020070
 800cf30:	40020088 	.word	0x40020088
 800cf34:	400200a0 	.word	0x400200a0
 800cf38:	400200b8 	.word	0x400200b8
 800cf3c:	40020410 	.word	0x40020410
 800cf40:	40020428 	.word	0x40020428
 800cf44:	40020440 	.word	0x40020440
 800cf48:	40020458 	.word	0x40020458
 800cf4c:	40020470 	.word	0x40020470
 800cf50:	40020488 	.word	0x40020488
 800cf54:	400204a0 	.word	0x400204a0
 800cf58:	400204b8 	.word	0x400204b8
 800cf5c:	58025408 	.word	0x58025408
 800cf60:	5802541c 	.word	0x5802541c
 800cf64:	58025430 	.word	0x58025430
 800cf68:	58025444 	.word	0x58025444
 800cf6c:	58025458 	.word	0x58025458
 800cf70:	5802546c 	.word	0x5802546c
 800cf74:	58025480 	.word	0x58025480
 800cf78:	58025494 	.word	0x58025494
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d007      	beq.n	800cf92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a6d      	ldr	r2, [pc, #436]	; (800d14c <HAL_DMA_Abort+0x444>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d04a      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a6b      	ldr	r2, [pc, #428]	; (800d150 <HAL_DMA_Abort+0x448>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d045      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a6a      	ldr	r2, [pc, #424]	; (800d154 <HAL_DMA_Abort+0x44c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d040      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a68      	ldr	r2, [pc, #416]	; (800d158 <HAL_DMA_Abort+0x450>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d03b      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a67      	ldr	r2, [pc, #412]	; (800d15c <HAL_DMA_Abort+0x454>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d036      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a65      	ldr	r2, [pc, #404]	; (800d160 <HAL_DMA_Abort+0x458>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d031      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a64      	ldr	r2, [pc, #400]	; (800d164 <HAL_DMA_Abort+0x45c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d02c      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a62      	ldr	r2, [pc, #392]	; (800d168 <HAL_DMA_Abort+0x460>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d027      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a61      	ldr	r2, [pc, #388]	; (800d16c <HAL_DMA_Abort+0x464>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d022      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a5f      	ldr	r2, [pc, #380]	; (800d170 <HAL_DMA_Abort+0x468>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d01d      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a5e      	ldr	r2, [pc, #376]	; (800d174 <HAL_DMA_Abort+0x46c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d018      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a5c      	ldr	r2, [pc, #368]	; (800d178 <HAL_DMA_Abort+0x470>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d013      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a5b      	ldr	r2, [pc, #364]	; (800d17c <HAL_DMA_Abort+0x474>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d00e      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a59      	ldr	r2, [pc, #356]	; (800d180 <HAL_DMA_Abort+0x478>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d009      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a58      	ldr	r2, [pc, #352]	; (800d184 <HAL_DMA_Abort+0x47c>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d004      	beq.n	800d032 <HAL_DMA_Abort+0x32a>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a56      	ldr	r2, [pc, #344]	; (800d188 <HAL_DMA_Abort+0x480>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d108      	bne.n	800d044 <HAL_DMA_Abort+0x33c>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f022 0201 	bic.w	r2, r2, #1
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	e007      	b.n	800d054 <HAL_DMA_Abort+0x34c>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0201 	bic.w	r2, r2, #1
 800d052:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d054:	e013      	b.n	800d07e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d056:	f7fe fb4b 	bl	800b6f0 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b05      	cmp	r3, #5
 800d062:	d90c      	bls.n	800d07e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2203      	movs	r2, #3
 800d06e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e12d      	b.n	800d2da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e5      	bne.n	800d056 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a2f      	ldr	r2, [pc, #188]	; (800d14c <HAL_DMA_Abort+0x444>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d04a      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a2d      	ldr	r2, [pc, #180]	; (800d150 <HAL_DMA_Abort+0x448>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d045      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a2c      	ldr	r2, [pc, #176]	; (800d154 <HAL_DMA_Abort+0x44c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d040      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a2a      	ldr	r2, [pc, #168]	; (800d158 <HAL_DMA_Abort+0x450>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d03b      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a29      	ldr	r2, [pc, #164]	; (800d15c <HAL_DMA_Abort+0x454>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d036      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a27      	ldr	r2, [pc, #156]	; (800d160 <HAL_DMA_Abort+0x458>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d031      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a26      	ldr	r2, [pc, #152]	; (800d164 <HAL_DMA_Abort+0x45c>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d02c      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a24      	ldr	r2, [pc, #144]	; (800d168 <HAL_DMA_Abort+0x460>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d027      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a23      	ldr	r2, [pc, #140]	; (800d16c <HAL_DMA_Abort+0x464>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d022      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a21      	ldr	r2, [pc, #132]	; (800d170 <HAL_DMA_Abort+0x468>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d01d      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a20      	ldr	r2, [pc, #128]	; (800d174 <HAL_DMA_Abort+0x46c>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d018      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a1e      	ldr	r2, [pc, #120]	; (800d178 <HAL_DMA_Abort+0x470>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d013      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a1d      	ldr	r2, [pc, #116]	; (800d17c <HAL_DMA_Abort+0x474>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d00e      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a1b      	ldr	r2, [pc, #108]	; (800d180 <HAL_DMA_Abort+0x478>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d009      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a1a      	ldr	r2, [pc, #104]	; (800d184 <HAL_DMA_Abort+0x47c>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d004      	beq.n	800d12a <HAL_DMA_Abort+0x422>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a18      	ldr	r2, [pc, #96]	; (800d188 <HAL_DMA_Abort+0x480>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d101      	bne.n	800d12e <HAL_DMA_Abort+0x426>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <HAL_DMA_Abort+0x428>
 800d12e:	2300      	movs	r3, #0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d02b      	beq.n	800d18c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d138:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d13e:	f003 031f 	and.w	r3, r3, #31
 800d142:	223f      	movs	r2, #63	; 0x3f
 800d144:	409a      	lsls	r2, r3
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	609a      	str	r2, [r3, #8]
 800d14a:	e02a      	b.n	800d1a2 <HAL_DMA_Abort+0x49a>
 800d14c:	40020010 	.word	0x40020010
 800d150:	40020028 	.word	0x40020028
 800d154:	40020040 	.word	0x40020040
 800d158:	40020058 	.word	0x40020058
 800d15c:	40020070 	.word	0x40020070
 800d160:	40020088 	.word	0x40020088
 800d164:	400200a0 	.word	0x400200a0
 800d168:	400200b8 	.word	0x400200b8
 800d16c:	40020410 	.word	0x40020410
 800d170:	40020428 	.word	0x40020428
 800d174:	40020440 	.word	0x40020440
 800d178:	40020458 	.word	0x40020458
 800d17c:	40020470 	.word	0x40020470
 800d180:	40020488 	.word	0x40020488
 800d184:	400204a0 	.word	0x400204a0
 800d188:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d190:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d196:	f003 031f 	and.w	r3, r3, #31
 800d19a:	2201      	movs	r2, #1
 800d19c:	409a      	lsls	r2, r3
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a4f      	ldr	r2, [pc, #316]	; (800d2e4 <HAL_DMA_Abort+0x5dc>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d072      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a4d      	ldr	r2, [pc, #308]	; (800d2e8 <HAL_DMA_Abort+0x5e0>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d06d      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a4c      	ldr	r2, [pc, #304]	; (800d2ec <HAL_DMA_Abort+0x5e4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d068      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a4a      	ldr	r2, [pc, #296]	; (800d2f0 <HAL_DMA_Abort+0x5e8>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d063      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a49      	ldr	r2, [pc, #292]	; (800d2f4 <HAL_DMA_Abort+0x5ec>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d05e      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a47      	ldr	r2, [pc, #284]	; (800d2f8 <HAL_DMA_Abort+0x5f0>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d059      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a46      	ldr	r2, [pc, #280]	; (800d2fc <HAL_DMA_Abort+0x5f4>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d054      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a44      	ldr	r2, [pc, #272]	; (800d300 <HAL_DMA_Abort+0x5f8>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d04f      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a43      	ldr	r2, [pc, #268]	; (800d304 <HAL_DMA_Abort+0x5fc>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d04a      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a41      	ldr	r2, [pc, #260]	; (800d308 <HAL_DMA_Abort+0x600>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d045      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a40      	ldr	r2, [pc, #256]	; (800d30c <HAL_DMA_Abort+0x604>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d040      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a3e      	ldr	r2, [pc, #248]	; (800d310 <HAL_DMA_Abort+0x608>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d03b      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a3d      	ldr	r2, [pc, #244]	; (800d314 <HAL_DMA_Abort+0x60c>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d036      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a3b      	ldr	r2, [pc, #236]	; (800d318 <HAL_DMA_Abort+0x610>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d031      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a3a      	ldr	r2, [pc, #232]	; (800d31c <HAL_DMA_Abort+0x614>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d02c      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a38      	ldr	r2, [pc, #224]	; (800d320 <HAL_DMA_Abort+0x618>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d027      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a37      	ldr	r2, [pc, #220]	; (800d324 <HAL_DMA_Abort+0x61c>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d022      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a35      	ldr	r2, [pc, #212]	; (800d328 <HAL_DMA_Abort+0x620>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d01d      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a34      	ldr	r2, [pc, #208]	; (800d32c <HAL_DMA_Abort+0x624>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d018      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a32      	ldr	r2, [pc, #200]	; (800d330 <HAL_DMA_Abort+0x628>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d013      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a31      	ldr	r2, [pc, #196]	; (800d334 <HAL_DMA_Abort+0x62c>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d00e      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a2f      	ldr	r2, [pc, #188]	; (800d338 <HAL_DMA_Abort+0x630>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d009      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a2e      	ldr	r2, [pc, #184]	; (800d33c <HAL_DMA_Abort+0x634>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d004      	beq.n	800d292 <HAL_DMA_Abort+0x58a>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a2c      	ldr	r2, [pc, #176]	; (800d340 <HAL_DMA_Abort+0x638>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d101      	bne.n	800d296 <HAL_DMA_Abort+0x58e>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <HAL_DMA_Abort+0x590>
 800d296:	2300      	movs	r3, #0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d015      	beq.n	800d2c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d2a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00c      	beq.n	800d2c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d2c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	40020010 	.word	0x40020010
 800d2e8:	40020028 	.word	0x40020028
 800d2ec:	40020040 	.word	0x40020040
 800d2f0:	40020058 	.word	0x40020058
 800d2f4:	40020070 	.word	0x40020070
 800d2f8:	40020088 	.word	0x40020088
 800d2fc:	400200a0 	.word	0x400200a0
 800d300:	400200b8 	.word	0x400200b8
 800d304:	40020410 	.word	0x40020410
 800d308:	40020428 	.word	0x40020428
 800d30c:	40020440 	.word	0x40020440
 800d310:	40020458 	.word	0x40020458
 800d314:	40020470 	.word	0x40020470
 800d318:	40020488 	.word	0x40020488
 800d31c:	400204a0 	.word	0x400204a0
 800d320:	400204b8 	.word	0x400204b8
 800d324:	58025408 	.word	0x58025408
 800d328:	5802541c 	.word	0x5802541c
 800d32c:	58025430 	.word	0x58025430
 800d330:	58025444 	.word	0x58025444
 800d334:	58025458 	.word	0x58025458
 800d338:	5802546c 	.word	0x5802546c
 800d33c:	58025480 	.word	0x58025480
 800d340:	58025494 	.word	0x58025494

0800d344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e237      	b.n	800d7c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d004      	beq.n	800d36c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2280      	movs	r2, #128	; 0x80
 800d366:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e22c      	b.n	800d7c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a5c      	ldr	r2, [pc, #368]	; (800d4e4 <HAL_DMA_Abort_IT+0x1a0>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d04a      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a5b      	ldr	r2, [pc, #364]	; (800d4e8 <HAL_DMA_Abort_IT+0x1a4>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d045      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a59      	ldr	r2, [pc, #356]	; (800d4ec <HAL_DMA_Abort_IT+0x1a8>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d040      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a58      	ldr	r2, [pc, #352]	; (800d4f0 <HAL_DMA_Abort_IT+0x1ac>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d03b      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a56      	ldr	r2, [pc, #344]	; (800d4f4 <HAL_DMA_Abort_IT+0x1b0>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d036      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a55      	ldr	r2, [pc, #340]	; (800d4f8 <HAL_DMA_Abort_IT+0x1b4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d031      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a53      	ldr	r2, [pc, #332]	; (800d4fc <HAL_DMA_Abort_IT+0x1b8>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d02c      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a52      	ldr	r2, [pc, #328]	; (800d500 <HAL_DMA_Abort_IT+0x1bc>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d027      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a50      	ldr	r2, [pc, #320]	; (800d504 <HAL_DMA_Abort_IT+0x1c0>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d022      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a4f      	ldr	r2, [pc, #316]	; (800d508 <HAL_DMA_Abort_IT+0x1c4>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d01d      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a4d      	ldr	r2, [pc, #308]	; (800d50c <HAL_DMA_Abort_IT+0x1c8>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d018      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a4c      	ldr	r2, [pc, #304]	; (800d510 <HAL_DMA_Abort_IT+0x1cc>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d013      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a4a      	ldr	r2, [pc, #296]	; (800d514 <HAL_DMA_Abort_IT+0x1d0>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d00e      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a49      	ldr	r2, [pc, #292]	; (800d518 <HAL_DMA_Abort_IT+0x1d4>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d009      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a47      	ldr	r2, [pc, #284]	; (800d51c <HAL_DMA_Abort_IT+0x1d8>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d004      	beq.n	800d40c <HAL_DMA_Abort_IT+0xc8>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a46      	ldr	r2, [pc, #280]	; (800d520 <HAL_DMA_Abort_IT+0x1dc>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d101      	bne.n	800d410 <HAL_DMA_Abort_IT+0xcc>
 800d40c:	2301      	movs	r3, #1
 800d40e:	e000      	b.n	800d412 <HAL_DMA_Abort_IT+0xce>
 800d410:	2300      	movs	r3, #0
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 8086 	beq.w	800d524 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2204      	movs	r2, #4
 800d41c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a2f      	ldr	r2, [pc, #188]	; (800d4e4 <HAL_DMA_Abort_IT+0x1a0>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d04a      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a2e      	ldr	r2, [pc, #184]	; (800d4e8 <HAL_DMA_Abort_IT+0x1a4>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d045      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a2c      	ldr	r2, [pc, #176]	; (800d4ec <HAL_DMA_Abort_IT+0x1a8>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d040      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a2b      	ldr	r2, [pc, #172]	; (800d4f0 <HAL_DMA_Abort_IT+0x1ac>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d03b      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a29      	ldr	r2, [pc, #164]	; (800d4f4 <HAL_DMA_Abort_IT+0x1b0>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d036      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a28      	ldr	r2, [pc, #160]	; (800d4f8 <HAL_DMA_Abort_IT+0x1b4>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d031      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a26      	ldr	r2, [pc, #152]	; (800d4fc <HAL_DMA_Abort_IT+0x1b8>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d02c      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a25      	ldr	r2, [pc, #148]	; (800d500 <HAL_DMA_Abort_IT+0x1bc>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d027      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a23      	ldr	r2, [pc, #140]	; (800d504 <HAL_DMA_Abort_IT+0x1c0>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d022      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a22      	ldr	r2, [pc, #136]	; (800d508 <HAL_DMA_Abort_IT+0x1c4>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d01d      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a20      	ldr	r2, [pc, #128]	; (800d50c <HAL_DMA_Abort_IT+0x1c8>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d018      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a1f      	ldr	r2, [pc, #124]	; (800d510 <HAL_DMA_Abort_IT+0x1cc>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d013      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a1d      	ldr	r2, [pc, #116]	; (800d514 <HAL_DMA_Abort_IT+0x1d0>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d00e      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a1c      	ldr	r2, [pc, #112]	; (800d518 <HAL_DMA_Abort_IT+0x1d4>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d009      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a1a      	ldr	r2, [pc, #104]	; (800d51c <HAL_DMA_Abort_IT+0x1d8>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d004      	beq.n	800d4c0 <HAL_DMA_Abort_IT+0x17c>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a19      	ldr	r2, [pc, #100]	; (800d520 <HAL_DMA_Abort_IT+0x1dc>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d108      	bne.n	800d4d2 <HAL_DMA_Abort_IT+0x18e>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f022 0201 	bic.w	r2, r2, #1
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	e178      	b.n	800d7c4 <HAL_DMA_Abort_IT+0x480>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f022 0201 	bic.w	r2, r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e16f      	b.n	800d7c4 <HAL_DMA_Abort_IT+0x480>
 800d4e4:	40020010 	.word	0x40020010
 800d4e8:	40020028 	.word	0x40020028
 800d4ec:	40020040 	.word	0x40020040
 800d4f0:	40020058 	.word	0x40020058
 800d4f4:	40020070 	.word	0x40020070
 800d4f8:	40020088 	.word	0x40020088
 800d4fc:	400200a0 	.word	0x400200a0
 800d500:	400200b8 	.word	0x400200b8
 800d504:	40020410 	.word	0x40020410
 800d508:	40020428 	.word	0x40020428
 800d50c:	40020440 	.word	0x40020440
 800d510:	40020458 	.word	0x40020458
 800d514:	40020470 	.word	0x40020470
 800d518:	40020488 	.word	0x40020488
 800d51c:	400204a0 	.word	0x400204a0
 800d520:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 020e 	bic.w	r2, r2, #14
 800d532:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a6c      	ldr	r2, [pc, #432]	; (800d6ec <HAL_DMA_Abort_IT+0x3a8>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d04a      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a6b      	ldr	r2, [pc, #428]	; (800d6f0 <HAL_DMA_Abort_IT+0x3ac>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d045      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a69      	ldr	r2, [pc, #420]	; (800d6f4 <HAL_DMA_Abort_IT+0x3b0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d040      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a68      	ldr	r2, [pc, #416]	; (800d6f8 <HAL_DMA_Abort_IT+0x3b4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d03b      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a66      	ldr	r2, [pc, #408]	; (800d6fc <HAL_DMA_Abort_IT+0x3b8>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d036      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a65      	ldr	r2, [pc, #404]	; (800d700 <HAL_DMA_Abort_IT+0x3bc>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d031      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a63      	ldr	r2, [pc, #396]	; (800d704 <HAL_DMA_Abort_IT+0x3c0>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d02c      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a62      	ldr	r2, [pc, #392]	; (800d708 <HAL_DMA_Abort_IT+0x3c4>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d027      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a60      	ldr	r2, [pc, #384]	; (800d70c <HAL_DMA_Abort_IT+0x3c8>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d022      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a5f      	ldr	r2, [pc, #380]	; (800d710 <HAL_DMA_Abort_IT+0x3cc>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d01d      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a5d      	ldr	r2, [pc, #372]	; (800d714 <HAL_DMA_Abort_IT+0x3d0>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d018      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a5c      	ldr	r2, [pc, #368]	; (800d718 <HAL_DMA_Abort_IT+0x3d4>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d013      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a5a      	ldr	r2, [pc, #360]	; (800d71c <HAL_DMA_Abort_IT+0x3d8>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d00e      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a59      	ldr	r2, [pc, #356]	; (800d720 <HAL_DMA_Abort_IT+0x3dc>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d009      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a57      	ldr	r2, [pc, #348]	; (800d724 <HAL_DMA_Abort_IT+0x3e0>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d004      	beq.n	800d5d4 <HAL_DMA_Abort_IT+0x290>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a56      	ldr	r2, [pc, #344]	; (800d728 <HAL_DMA_Abort_IT+0x3e4>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d108      	bne.n	800d5e6 <HAL_DMA_Abort_IT+0x2a2>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f022 0201 	bic.w	r2, r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	e007      	b.n	800d5f6 <HAL_DMA_Abort_IT+0x2b2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f022 0201 	bic.w	r2, r2, #1
 800d5f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a3c      	ldr	r2, [pc, #240]	; (800d6ec <HAL_DMA_Abort_IT+0x3a8>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d072      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a3a      	ldr	r2, [pc, #232]	; (800d6f0 <HAL_DMA_Abort_IT+0x3ac>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d06d      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a39      	ldr	r2, [pc, #228]	; (800d6f4 <HAL_DMA_Abort_IT+0x3b0>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d068      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a37      	ldr	r2, [pc, #220]	; (800d6f8 <HAL_DMA_Abort_IT+0x3b4>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d063      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a36      	ldr	r2, [pc, #216]	; (800d6fc <HAL_DMA_Abort_IT+0x3b8>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d05e      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a34      	ldr	r2, [pc, #208]	; (800d700 <HAL_DMA_Abort_IT+0x3bc>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d059      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a33      	ldr	r2, [pc, #204]	; (800d704 <HAL_DMA_Abort_IT+0x3c0>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d054      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a31      	ldr	r2, [pc, #196]	; (800d708 <HAL_DMA_Abort_IT+0x3c4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d04f      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a30      	ldr	r2, [pc, #192]	; (800d70c <HAL_DMA_Abort_IT+0x3c8>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d04a      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a2e      	ldr	r2, [pc, #184]	; (800d710 <HAL_DMA_Abort_IT+0x3cc>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d045      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a2d      	ldr	r2, [pc, #180]	; (800d714 <HAL_DMA_Abort_IT+0x3d0>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d040      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a2b      	ldr	r2, [pc, #172]	; (800d718 <HAL_DMA_Abort_IT+0x3d4>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d03b      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a2a      	ldr	r2, [pc, #168]	; (800d71c <HAL_DMA_Abort_IT+0x3d8>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d036      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a28      	ldr	r2, [pc, #160]	; (800d720 <HAL_DMA_Abort_IT+0x3dc>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d031      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a27      	ldr	r2, [pc, #156]	; (800d724 <HAL_DMA_Abort_IT+0x3e0>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d02c      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a25      	ldr	r2, [pc, #148]	; (800d728 <HAL_DMA_Abort_IT+0x3e4>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d027      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a24      	ldr	r2, [pc, #144]	; (800d72c <HAL_DMA_Abort_IT+0x3e8>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d022      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a22      	ldr	r2, [pc, #136]	; (800d730 <HAL_DMA_Abort_IT+0x3ec>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d01d      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a21      	ldr	r2, [pc, #132]	; (800d734 <HAL_DMA_Abort_IT+0x3f0>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d018      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a1f      	ldr	r2, [pc, #124]	; (800d738 <HAL_DMA_Abort_IT+0x3f4>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d013      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a1e      	ldr	r2, [pc, #120]	; (800d73c <HAL_DMA_Abort_IT+0x3f8>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d00e      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a1c      	ldr	r2, [pc, #112]	; (800d740 <HAL_DMA_Abort_IT+0x3fc>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d009      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a1b      	ldr	r2, [pc, #108]	; (800d744 <HAL_DMA_Abort_IT+0x400>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d004      	beq.n	800d6e6 <HAL_DMA_Abort_IT+0x3a2>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a19      	ldr	r2, [pc, #100]	; (800d748 <HAL_DMA_Abort_IT+0x404>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d132      	bne.n	800d74c <HAL_DMA_Abort_IT+0x408>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e031      	b.n	800d74e <HAL_DMA_Abort_IT+0x40a>
 800d6ea:	bf00      	nop
 800d6ec:	40020010 	.word	0x40020010
 800d6f0:	40020028 	.word	0x40020028
 800d6f4:	40020040 	.word	0x40020040
 800d6f8:	40020058 	.word	0x40020058
 800d6fc:	40020070 	.word	0x40020070
 800d700:	40020088 	.word	0x40020088
 800d704:	400200a0 	.word	0x400200a0
 800d708:	400200b8 	.word	0x400200b8
 800d70c:	40020410 	.word	0x40020410
 800d710:	40020428 	.word	0x40020428
 800d714:	40020440 	.word	0x40020440
 800d718:	40020458 	.word	0x40020458
 800d71c:	40020470 	.word	0x40020470
 800d720:	40020488 	.word	0x40020488
 800d724:	400204a0 	.word	0x400204a0
 800d728:	400204b8 	.word	0x400204b8
 800d72c:	58025408 	.word	0x58025408
 800d730:	5802541c 	.word	0x5802541c
 800d734:	58025430 	.word	0x58025430
 800d738:	58025444 	.word	0x58025444
 800d73c:	58025458 	.word	0x58025458
 800d740:	5802546c 	.word	0x5802546c
 800d744:	58025480 	.word	0x58025480
 800d748:	58025494 	.word	0x58025494
 800d74c:	2300      	movs	r3, #0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d028      	beq.n	800d7a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d75c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d760:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d766:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d76c:	f003 031f 	and.w	r3, r3, #31
 800d770:	2201      	movs	r2, #1
 800d772:	409a      	lsls	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d780:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00c      	beq.n	800d7a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d798:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d7a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d003      	beq.n	800d7c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop

0800d7d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08a      	sub	sp, #40	; 0x28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d7dc:	4b67      	ldr	r3, [pc, #412]	; (800d97c <HAL_DMA_IRQHandler+0x1ac>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a67      	ldr	r2, [pc, #412]	; (800d980 <HAL_DMA_IRQHandler+0x1b0>)
 800d7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e6:	0a9b      	lsrs	r3, r3, #10
 800d7e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a5f      	ldr	r2, [pc, #380]	; (800d984 <HAL_DMA_IRQHandler+0x1b4>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d04a      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a5d      	ldr	r2, [pc, #372]	; (800d988 <HAL_DMA_IRQHandler+0x1b8>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d045      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a5c      	ldr	r2, [pc, #368]	; (800d98c <HAL_DMA_IRQHandler+0x1bc>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d040      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a5a      	ldr	r2, [pc, #360]	; (800d990 <HAL_DMA_IRQHandler+0x1c0>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d03b      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a59      	ldr	r2, [pc, #356]	; (800d994 <HAL_DMA_IRQHandler+0x1c4>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d036      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a57      	ldr	r2, [pc, #348]	; (800d998 <HAL_DMA_IRQHandler+0x1c8>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d031      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a56      	ldr	r2, [pc, #344]	; (800d99c <HAL_DMA_IRQHandler+0x1cc>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d02c      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a54      	ldr	r2, [pc, #336]	; (800d9a0 <HAL_DMA_IRQHandler+0x1d0>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d027      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a53      	ldr	r2, [pc, #332]	; (800d9a4 <HAL_DMA_IRQHandler+0x1d4>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d022      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a51      	ldr	r2, [pc, #324]	; (800d9a8 <HAL_DMA_IRQHandler+0x1d8>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d01d      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a50      	ldr	r2, [pc, #320]	; (800d9ac <HAL_DMA_IRQHandler+0x1dc>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d018      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a4e      	ldr	r2, [pc, #312]	; (800d9b0 <HAL_DMA_IRQHandler+0x1e0>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d013      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a4d      	ldr	r2, [pc, #308]	; (800d9b4 <HAL_DMA_IRQHandler+0x1e4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d00e      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a4b      	ldr	r2, [pc, #300]	; (800d9b8 <HAL_DMA_IRQHandler+0x1e8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d009      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a4a      	ldr	r2, [pc, #296]	; (800d9bc <HAL_DMA_IRQHandler+0x1ec>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d004      	beq.n	800d8a2 <HAL_DMA_IRQHandler+0xd2>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a48      	ldr	r2, [pc, #288]	; (800d9c0 <HAL_DMA_IRQHandler+0x1f0>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d101      	bne.n	800d8a6 <HAL_DMA_IRQHandler+0xd6>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <HAL_DMA_IRQHandler+0xd8>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 842b 	beq.w	800e104 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8b2:	f003 031f 	and.w	r3, r3, #31
 800d8b6:	2208      	movs	r2, #8
 800d8b8:	409a      	lsls	r2, r3
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	4013      	ands	r3, r2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f000 80a2 	beq.w	800da08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a2e      	ldr	r2, [pc, #184]	; (800d984 <HAL_DMA_IRQHandler+0x1b4>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d04a      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a2d      	ldr	r2, [pc, #180]	; (800d988 <HAL_DMA_IRQHandler+0x1b8>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d045      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a2b      	ldr	r2, [pc, #172]	; (800d98c <HAL_DMA_IRQHandler+0x1bc>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d040      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a2a      	ldr	r2, [pc, #168]	; (800d990 <HAL_DMA_IRQHandler+0x1c0>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d03b      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a28      	ldr	r2, [pc, #160]	; (800d994 <HAL_DMA_IRQHandler+0x1c4>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d036      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a27      	ldr	r2, [pc, #156]	; (800d998 <HAL_DMA_IRQHandler+0x1c8>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d031      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a25      	ldr	r2, [pc, #148]	; (800d99c <HAL_DMA_IRQHandler+0x1cc>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d02c      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a24      	ldr	r2, [pc, #144]	; (800d9a0 <HAL_DMA_IRQHandler+0x1d0>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d027      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a22      	ldr	r2, [pc, #136]	; (800d9a4 <HAL_DMA_IRQHandler+0x1d4>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d022      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a21      	ldr	r2, [pc, #132]	; (800d9a8 <HAL_DMA_IRQHandler+0x1d8>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d01d      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a1f      	ldr	r2, [pc, #124]	; (800d9ac <HAL_DMA_IRQHandler+0x1dc>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d018      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a1e      	ldr	r2, [pc, #120]	; (800d9b0 <HAL_DMA_IRQHandler+0x1e0>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d013      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a1c      	ldr	r2, [pc, #112]	; (800d9b4 <HAL_DMA_IRQHandler+0x1e4>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d00e      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a1b      	ldr	r2, [pc, #108]	; (800d9b8 <HAL_DMA_IRQHandler+0x1e8>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d009      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a19      	ldr	r2, [pc, #100]	; (800d9bc <HAL_DMA_IRQHandler+0x1ec>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d004      	beq.n	800d964 <HAL_DMA_IRQHandler+0x194>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a18      	ldr	r2, [pc, #96]	; (800d9c0 <HAL_DMA_IRQHandler+0x1f0>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d12f      	bne.n	800d9c4 <HAL_DMA_IRQHandler+0x1f4>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	2b00      	cmp	r3, #0
 800d970:	bf14      	ite	ne
 800d972:	2301      	movne	r3, #1
 800d974:	2300      	moveq	r3, #0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	e02e      	b.n	800d9d8 <HAL_DMA_IRQHandler+0x208>
 800d97a:	bf00      	nop
 800d97c:	24008010 	.word	0x24008010
 800d980:	1b4e81b5 	.word	0x1b4e81b5
 800d984:	40020010 	.word	0x40020010
 800d988:	40020028 	.word	0x40020028
 800d98c:	40020040 	.word	0x40020040
 800d990:	40020058 	.word	0x40020058
 800d994:	40020070 	.word	0x40020070
 800d998:	40020088 	.word	0x40020088
 800d99c:	400200a0 	.word	0x400200a0
 800d9a0:	400200b8 	.word	0x400200b8
 800d9a4:	40020410 	.word	0x40020410
 800d9a8:	40020428 	.word	0x40020428
 800d9ac:	40020440 	.word	0x40020440
 800d9b0:	40020458 	.word	0x40020458
 800d9b4:	40020470 	.word	0x40020470
 800d9b8:	40020488 	.word	0x40020488
 800d9bc:	400204a0 	.word	0x400204a0
 800d9c0:	400204b8 	.word	0x400204b8
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f003 0308 	and.w	r3, r3, #8
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bf14      	ite	ne
 800d9d2:	2301      	movne	r3, #1
 800d9d4:	2300      	moveq	r3, #0
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d015      	beq.n	800da08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0204 	bic.w	r2, r2, #4
 800d9ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9f0:	f003 031f 	and.w	r3, r3, #31
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	409a      	lsls	r2, r3
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da00:	f043 0201 	orr.w	r2, r3, #1
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da0c:	f003 031f 	and.w	r3, r3, #31
 800da10:	69ba      	ldr	r2, [r7, #24]
 800da12:	fa22 f303 	lsr.w	r3, r2, r3
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d06e      	beq.n	800dafc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a69      	ldr	r2, [pc, #420]	; (800dbc8 <HAL_DMA_IRQHandler+0x3f8>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d04a      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a67      	ldr	r2, [pc, #412]	; (800dbcc <HAL_DMA_IRQHandler+0x3fc>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d045      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a66      	ldr	r2, [pc, #408]	; (800dbd0 <HAL_DMA_IRQHandler+0x400>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d040      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a64      	ldr	r2, [pc, #400]	; (800dbd4 <HAL_DMA_IRQHandler+0x404>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d03b      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a63      	ldr	r2, [pc, #396]	; (800dbd8 <HAL_DMA_IRQHandler+0x408>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d036      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a61      	ldr	r2, [pc, #388]	; (800dbdc <HAL_DMA_IRQHandler+0x40c>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d031      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a60      	ldr	r2, [pc, #384]	; (800dbe0 <HAL_DMA_IRQHandler+0x410>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d02c      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a5e      	ldr	r2, [pc, #376]	; (800dbe4 <HAL_DMA_IRQHandler+0x414>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d027      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a5d      	ldr	r2, [pc, #372]	; (800dbe8 <HAL_DMA_IRQHandler+0x418>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d022      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a5b      	ldr	r2, [pc, #364]	; (800dbec <HAL_DMA_IRQHandler+0x41c>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d01d      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a5a      	ldr	r2, [pc, #360]	; (800dbf0 <HAL_DMA_IRQHandler+0x420>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d018      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a58      	ldr	r2, [pc, #352]	; (800dbf4 <HAL_DMA_IRQHandler+0x424>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d013      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a57      	ldr	r2, [pc, #348]	; (800dbf8 <HAL_DMA_IRQHandler+0x428>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d00e      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a55      	ldr	r2, [pc, #340]	; (800dbfc <HAL_DMA_IRQHandler+0x42c>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d009      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a54      	ldr	r2, [pc, #336]	; (800dc00 <HAL_DMA_IRQHandler+0x430>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d004      	beq.n	800dabe <HAL_DMA_IRQHandler+0x2ee>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a52      	ldr	r2, [pc, #328]	; (800dc04 <HAL_DMA_IRQHandler+0x434>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d10a      	bne.n	800dad4 <HAL_DMA_IRQHandler+0x304>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bf14      	ite	ne
 800dacc:	2301      	movne	r3, #1
 800dace:	2300      	moveq	r3, #0
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	e003      	b.n	800dadc <HAL_DMA_IRQHandler+0x30c>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2300      	movs	r3, #0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00d      	beq.n	800dafc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dae4:	f003 031f 	and.w	r3, r3, #31
 800dae8:	2201      	movs	r2, #1
 800daea:	409a      	lsls	r2, r3
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf4:	f043 0202 	orr.w	r2, r3, #2
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	2204      	movs	r2, #4
 800db06:	409a      	lsls	r2, r3
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	4013      	ands	r3, r2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 808f 	beq.w	800dc30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a2c      	ldr	r2, [pc, #176]	; (800dbc8 <HAL_DMA_IRQHandler+0x3f8>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d04a      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a2a      	ldr	r2, [pc, #168]	; (800dbcc <HAL_DMA_IRQHandler+0x3fc>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d045      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a29      	ldr	r2, [pc, #164]	; (800dbd0 <HAL_DMA_IRQHandler+0x400>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d040      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a27      	ldr	r2, [pc, #156]	; (800dbd4 <HAL_DMA_IRQHandler+0x404>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d03b      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a26      	ldr	r2, [pc, #152]	; (800dbd8 <HAL_DMA_IRQHandler+0x408>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d036      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a24      	ldr	r2, [pc, #144]	; (800dbdc <HAL_DMA_IRQHandler+0x40c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d031      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a23      	ldr	r2, [pc, #140]	; (800dbe0 <HAL_DMA_IRQHandler+0x410>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d02c      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a21      	ldr	r2, [pc, #132]	; (800dbe4 <HAL_DMA_IRQHandler+0x414>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d027      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a20      	ldr	r2, [pc, #128]	; (800dbe8 <HAL_DMA_IRQHandler+0x418>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d022      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a1e      	ldr	r2, [pc, #120]	; (800dbec <HAL_DMA_IRQHandler+0x41c>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d01d      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a1d      	ldr	r2, [pc, #116]	; (800dbf0 <HAL_DMA_IRQHandler+0x420>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d018      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a1b      	ldr	r2, [pc, #108]	; (800dbf4 <HAL_DMA_IRQHandler+0x424>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d013      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a1a      	ldr	r2, [pc, #104]	; (800dbf8 <HAL_DMA_IRQHandler+0x428>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d00e      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <HAL_DMA_IRQHandler+0x42c>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d009      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a17      	ldr	r2, [pc, #92]	; (800dc00 <HAL_DMA_IRQHandler+0x430>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d004      	beq.n	800dbb2 <HAL_DMA_IRQHandler+0x3e2>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a15      	ldr	r2, [pc, #84]	; (800dc04 <HAL_DMA_IRQHandler+0x434>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d12a      	bne.n	800dc08 <HAL_DMA_IRQHandler+0x438>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 0302 	and.w	r3, r3, #2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bf14      	ite	ne
 800dbc0:	2301      	movne	r3, #1
 800dbc2:	2300      	moveq	r3, #0
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	e023      	b.n	800dc10 <HAL_DMA_IRQHandler+0x440>
 800dbc8:	40020010 	.word	0x40020010
 800dbcc:	40020028 	.word	0x40020028
 800dbd0:	40020040 	.word	0x40020040
 800dbd4:	40020058 	.word	0x40020058
 800dbd8:	40020070 	.word	0x40020070
 800dbdc:	40020088 	.word	0x40020088
 800dbe0:	400200a0 	.word	0x400200a0
 800dbe4:	400200b8 	.word	0x400200b8
 800dbe8:	40020410 	.word	0x40020410
 800dbec:	40020428 	.word	0x40020428
 800dbf0:	40020440 	.word	0x40020440
 800dbf4:	40020458 	.word	0x40020458
 800dbf8:	40020470 	.word	0x40020470
 800dbfc:	40020488 	.word	0x40020488
 800dc00:	400204a0 	.word	0x400204a0
 800dc04:	400204b8 	.word	0x400204b8
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00d      	beq.n	800dc30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc18:	f003 031f 	and.w	r3, r3, #31
 800dc1c:	2204      	movs	r2, #4
 800dc1e:	409a      	lsls	r2, r3
 800dc20:	6a3b      	ldr	r3, [r7, #32]
 800dc22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc28:	f043 0204 	orr.w	r2, r3, #4
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc34:	f003 031f 	and.w	r3, r3, #31
 800dc38:	2210      	movs	r2, #16
 800dc3a:	409a      	lsls	r2, r3
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	4013      	ands	r3, r2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f000 80a6 	beq.w	800dd92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a85      	ldr	r2, [pc, #532]	; (800de60 <HAL_DMA_IRQHandler+0x690>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d04a      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a83      	ldr	r2, [pc, #524]	; (800de64 <HAL_DMA_IRQHandler+0x694>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d045      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a82      	ldr	r2, [pc, #520]	; (800de68 <HAL_DMA_IRQHandler+0x698>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d040      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a80      	ldr	r2, [pc, #512]	; (800de6c <HAL_DMA_IRQHandler+0x69c>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d03b      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a7f      	ldr	r2, [pc, #508]	; (800de70 <HAL_DMA_IRQHandler+0x6a0>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d036      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a7d      	ldr	r2, [pc, #500]	; (800de74 <HAL_DMA_IRQHandler+0x6a4>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d031      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a7c      	ldr	r2, [pc, #496]	; (800de78 <HAL_DMA_IRQHandler+0x6a8>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d02c      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a7a      	ldr	r2, [pc, #488]	; (800de7c <HAL_DMA_IRQHandler+0x6ac>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d027      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a79      	ldr	r2, [pc, #484]	; (800de80 <HAL_DMA_IRQHandler+0x6b0>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d022      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a77      	ldr	r2, [pc, #476]	; (800de84 <HAL_DMA_IRQHandler+0x6b4>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d01d      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a76      	ldr	r2, [pc, #472]	; (800de88 <HAL_DMA_IRQHandler+0x6b8>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d018      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a74      	ldr	r2, [pc, #464]	; (800de8c <HAL_DMA_IRQHandler+0x6bc>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d013      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a73      	ldr	r2, [pc, #460]	; (800de90 <HAL_DMA_IRQHandler+0x6c0>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d00e      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a71      	ldr	r2, [pc, #452]	; (800de94 <HAL_DMA_IRQHandler+0x6c4>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d009      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a70      	ldr	r2, [pc, #448]	; (800de98 <HAL_DMA_IRQHandler+0x6c8>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d004      	beq.n	800dce6 <HAL_DMA_IRQHandler+0x516>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a6e      	ldr	r2, [pc, #440]	; (800de9c <HAL_DMA_IRQHandler+0x6cc>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d10a      	bne.n	800dcfc <HAL_DMA_IRQHandler+0x52c>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0308 	and.w	r3, r3, #8
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bf14      	ite	ne
 800dcf4:	2301      	movne	r3, #1
 800dcf6:	2300      	moveq	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	e009      	b.n	800dd10 <HAL_DMA_IRQHandler+0x540>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bf14      	ite	ne
 800dd0a:	2301      	movne	r3, #1
 800dd0c:	2300      	moveq	r3, #0
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d03e      	beq.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd18:	f003 031f 	and.w	r3, r3, #31
 800dd1c:	2210      	movs	r2, #16
 800dd1e:	409a      	lsls	r2, r3
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d018      	beq.n	800dd64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d108      	bne.n	800dd52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d024      	beq.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
 800dd50:	e01f      	b.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d01b      	beq.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	4798      	blx	r3
 800dd62:	e016      	b.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d107      	bne.n	800dd82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 0208 	bic.w	r2, r2, #8
 800dd80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd96:	f003 031f 	and.w	r3, r3, #31
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	409a      	lsls	r2, r3
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	4013      	ands	r3, r2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f000 8110 	beq.w	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a2c      	ldr	r2, [pc, #176]	; (800de60 <HAL_DMA_IRQHandler+0x690>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d04a      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a2b      	ldr	r2, [pc, #172]	; (800de64 <HAL_DMA_IRQHandler+0x694>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d045      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a29      	ldr	r2, [pc, #164]	; (800de68 <HAL_DMA_IRQHandler+0x698>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d040      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a28      	ldr	r2, [pc, #160]	; (800de6c <HAL_DMA_IRQHandler+0x69c>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d03b      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a26      	ldr	r2, [pc, #152]	; (800de70 <HAL_DMA_IRQHandler+0x6a0>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d036      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a25      	ldr	r2, [pc, #148]	; (800de74 <HAL_DMA_IRQHandler+0x6a4>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d031      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a23      	ldr	r2, [pc, #140]	; (800de78 <HAL_DMA_IRQHandler+0x6a8>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d02c      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a22      	ldr	r2, [pc, #136]	; (800de7c <HAL_DMA_IRQHandler+0x6ac>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d027      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a20      	ldr	r2, [pc, #128]	; (800de80 <HAL_DMA_IRQHandler+0x6b0>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d022      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a1f      	ldr	r2, [pc, #124]	; (800de84 <HAL_DMA_IRQHandler+0x6b4>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d01d      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a1d      	ldr	r2, [pc, #116]	; (800de88 <HAL_DMA_IRQHandler+0x6b8>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d018      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a1c      	ldr	r2, [pc, #112]	; (800de8c <HAL_DMA_IRQHandler+0x6bc>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d013      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a1a      	ldr	r2, [pc, #104]	; (800de90 <HAL_DMA_IRQHandler+0x6c0>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d00e      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a19      	ldr	r2, [pc, #100]	; (800de94 <HAL_DMA_IRQHandler+0x6c4>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d009      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a17      	ldr	r2, [pc, #92]	; (800de98 <HAL_DMA_IRQHandler+0x6c8>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d004      	beq.n	800de48 <HAL_DMA_IRQHandler+0x678>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a16      	ldr	r2, [pc, #88]	; (800de9c <HAL_DMA_IRQHandler+0x6cc>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d12b      	bne.n	800dea0 <HAL_DMA_IRQHandler+0x6d0>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 0310 	and.w	r3, r3, #16
 800de52:	2b00      	cmp	r3, #0
 800de54:	bf14      	ite	ne
 800de56:	2301      	movne	r3, #1
 800de58:	2300      	moveq	r3, #0
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	e02a      	b.n	800deb4 <HAL_DMA_IRQHandler+0x6e4>
 800de5e:	bf00      	nop
 800de60:	40020010 	.word	0x40020010
 800de64:	40020028 	.word	0x40020028
 800de68:	40020040 	.word	0x40020040
 800de6c:	40020058 	.word	0x40020058
 800de70:	40020070 	.word	0x40020070
 800de74:	40020088 	.word	0x40020088
 800de78:	400200a0 	.word	0x400200a0
 800de7c:	400200b8 	.word	0x400200b8
 800de80:	40020410 	.word	0x40020410
 800de84:	40020428 	.word	0x40020428
 800de88:	40020440 	.word	0x40020440
 800de8c:	40020458 	.word	0x40020458
 800de90:	40020470 	.word	0x40020470
 800de94:	40020488 	.word	0x40020488
 800de98:	400204a0 	.word	0x400204a0
 800de9c:	400204b8 	.word	0x400204b8
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 0302 	and.w	r3, r3, #2
 800deaa:	2b00      	cmp	r3, #0
 800deac:	bf14      	ite	ne
 800deae:	2301      	movne	r3, #1
 800deb0:	2300      	moveq	r3, #0
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 8087 	beq.w	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800debe:	f003 031f 	and.w	r3, r3, #31
 800dec2:	2220      	movs	r2, #32
 800dec4:	409a      	lsls	r2, r3
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d139      	bne.n	800df4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f022 0216 	bic.w	r2, r2, #22
 800dee4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	695a      	ldr	r2, [r3, #20]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800def4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	2b00      	cmp	r3, #0
 800defc:	d103      	bne.n	800df06 <HAL_DMA_IRQHandler+0x736>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df02:	2b00      	cmp	r3, #0
 800df04:	d007      	beq.n	800df16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f022 0208 	bic.w	r2, r2, #8
 800df14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df1a:	f003 031f 	and.w	r3, r3, #31
 800df1e:	223f      	movs	r2, #63	; 0x3f
 800df20:	409a      	lsls	r2, r3
 800df22:	6a3b      	ldr	r3, [r7, #32]
 800df24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 834a 	beq.w	800e5d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	4798      	blx	r3
          }
          return;
 800df48:	e344      	b.n	800e5d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d018      	beq.n	800df8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df62:	2b00      	cmp	r3, #0
 800df64:	d108      	bne.n	800df78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d02c      	beq.n	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	4798      	blx	r3
 800df76:	e027      	b.n	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d023      	beq.n	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	4798      	blx	r3
 800df88:	e01e      	b.n	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df94:	2b00      	cmp	r3, #0
 800df96:	d10f      	bne.n	800dfb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f022 0210 	bic.w	r2, r2, #16
 800dfa6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d003      	beq.n	800dfc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 8306 	beq.w	800e5de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8088 	beq.w	800e0f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2204      	movs	r2, #4
 800dfe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a7a      	ldr	r2, [pc, #488]	; (800e1d8 <HAL_DMA_IRQHandler+0xa08>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d04a      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a79      	ldr	r2, [pc, #484]	; (800e1dc <HAL_DMA_IRQHandler+0xa0c>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d045      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a77      	ldr	r2, [pc, #476]	; (800e1e0 <HAL_DMA_IRQHandler+0xa10>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d040      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a76      	ldr	r2, [pc, #472]	; (800e1e4 <HAL_DMA_IRQHandler+0xa14>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d03b      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a74      	ldr	r2, [pc, #464]	; (800e1e8 <HAL_DMA_IRQHandler+0xa18>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d036      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a73      	ldr	r2, [pc, #460]	; (800e1ec <HAL_DMA_IRQHandler+0xa1c>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d031      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a71      	ldr	r2, [pc, #452]	; (800e1f0 <HAL_DMA_IRQHandler+0xa20>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d02c      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a70      	ldr	r2, [pc, #448]	; (800e1f4 <HAL_DMA_IRQHandler+0xa24>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d027      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a6e      	ldr	r2, [pc, #440]	; (800e1f8 <HAL_DMA_IRQHandler+0xa28>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d022      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a6d      	ldr	r2, [pc, #436]	; (800e1fc <HAL_DMA_IRQHandler+0xa2c>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d01d      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a6b      	ldr	r2, [pc, #428]	; (800e200 <HAL_DMA_IRQHandler+0xa30>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d018      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a6a      	ldr	r2, [pc, #424]	; (800e204 <HAL_DMA_IRQHandler+0xa34>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d013      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a68      	ldr	r2, [pc, #416]	; (800e208 <HAL_DMA_IRQHandler+0xa38>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d00e      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a67      	ldr	r2, [pc, #412]	; (800e20c <HAL_DMA_IRQHandler+0xa3c>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d009      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a65      	ldr	r2, [pc, #404]	; (800e210 <HAL_DMA_IRQHandler+0xa40>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d004      	beq.n	800e088 <HAL_DMA_IRQHandler+0x8b8>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a64      	ldr	r2, [pc, #400]	; (800e214 <HAL_DMA_IRQHandler+0xa44>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d108      	bne.n	800e09a <HAL_DMA_IRQHandler+0x8ca>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f022 0201 	bic.w	r2, r2, #1
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	e007      	b.n	800e0aa <HAL_DMA_IRQHandler+0x8da>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f022 0201 	bic.w	r2, r2, #1
 800e0a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d307      	bcc.n	800e0c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1f2      	bne.n	800e0aa <HAL_DMA_IRQHandler+0x8da>
 800e0c4:	e000      	b.n	800e0c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e0c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d004      	beq.n	800e0e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2203      	movs	r2, #3
 800e0da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e0de:	e003      	b.n	800e0e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 8272 	beq.w	800e5de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	4798      	blx	r3
 800e102:	e26c      	b.n	800e5de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a43      	ldr	r2, [pc, #268]	; (800e218 <HAL_DMA_IRQHandler+0xa48>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d022      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a42      	ldr	r2, [pc, #264]	; (800e21c <HAL_DMA_IRQHandler+0xa4c>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d01d      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a40      	ldr	r2, [pc, #256]	; (800e220 <HAL_DMA_IRQHandler+0xa50>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d018      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a3f      	ldr	r2, [pc, #252]	; (800e224 <HAL_DMA_IRQHandler+0xa54>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d013      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a3d      	ldr	r2, [pc, #244]	; (800e228 <HAL_DMA_IRQHandler+0xa58>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00e      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a3c      	ldr	r2, [pc, #240]	; (800e22c <HAL_DMA_IRQHandler+0xa5c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d009      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a3a      	ldr	r2, [pc, #232]	; (800e230 <HAL_DMA_IRQHandler+0xa60>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d004      	beq.n	800e154 <HAL_DMA_IRQHandler+0x984>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a39      	ldr	r2, [pc, #228]	; (800e234 <HAL_DMA_IRQHandler+0xa64>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d101      	bne.n	800e158 <HAL_DMA_IRQHandler+0x988>
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <HAL_DMA_IRQHandler+0x98a>
 800e158:	2300      	movs	r3, #0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 823f 	beq.w	800e5de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e16c:	f003 031f 	and.w	r3, r3, #31
 800e170:	2204      	movs	r2, #4
 800e172:	409a      	lsls	r2, r3
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	4013      	ands	r3, r2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 80cd 	beq.w	800e318 <HAL_DMA_IRQHandler+0xb48>
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 80c7 	beq.w	800e318 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e18e:	f003 031f 	and.w	r3, r3, #31
 800e192:	2204      	movs	r2, #4
 800e194:	409a      	lsls	r2, r3
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d049      	beq.n	800e238 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d109      	bne.n	800e1c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 8210 	beq.w	800e5d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e1c0:	e20a      	b.n	800e5d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f000 8206 	beq.w	800e5d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e1d4:	e200      	b.n	800e5d8 <HAL_DMA_IRQHandler+0xe08>
 800e1d6:	bf00      	nop
 800e1d8:	40020010 	.word	0x40020010
 800e1dc:	40020028 	.word	0x40020028
 800e1e0:	40020040 	.word	0x40020040
 800e1e4:	40020058 	.word	0x40020058
 800e1e8:	40020070 	.word	0x40020070
 800e1ec:	40020088 	.word	0x40020088
 800e1f0:	400200a0 	.word	0x400200a0
 800e1f4:	400200b8 	.word	0x400200b8
 800e1f8:	40020410 	.word	0x40020410
 800e1fc:	40020428 	.word	0x40020428
 800e200:	40020440 	.word	0x40020440
 800e204:	40020458 	.word	0x40020458
 800e208:	40020470 	.word	0x40020470
 800e20c:	40020488 	.word	0x40020488
 800e210:	400204a0 	.word	0x400204a0
 800e214:	400204b8 	.word	0x400204b8
 800e218:	58025408 	.word	0x58025408
 800e21c:	5802541c 	.word	0x5802541c
 800e220:	58025430 	.word	0x58025430
 800e224:	58025444 	.word	0x58025444
 800e228:	58025458 	.word	0x58025458
 800e22c:	5802546c 	.word	0x5802546c
 800e230:	58025480 	.word	0x58025480
 800e234:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f003 0320 	and.w	r3, r3, #32
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d160      	bne.n	800e304 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a7f      	ldr	r2, [pc, #508]	; (800e444 <HAL_DMA_IRQHandler+0xc74>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d04a      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a7d      	ldr	r2, [pc, #500]	; (800e448 <HAL_DMA_IRQHandler+0xc78>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d045      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a7c      	ldr	r2, [pc, #496]	; (800e44c <HAL_DMA_IRQHandler+0xc7c>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d040      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a7a      	ldr	r2, [pc, #488]	; (800e450 <HAL_DMA_IRQHandler+0xc80>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d03b      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a79      	ldr	r2, [pc, #484]	; (800e454 <HAL_DMA_IRQHandler+0xc84>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d036      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a77      	ldr	r2, [pc, #476]	; (800e458 <HAL_DMA_IRQHandler+0xc88>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d031      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a76      	ldr	r2, [pc, #472]	; (800e45c <HAL_DMA_IRQHandler+0xc8c>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d02c      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a74      	ldr	r2, [pc, #464]	; (800e460 <HAL_DMA_IRQHandler+0xc90>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d027      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a73      	ldr	r2, [pc, #460]	; (800e464 <HAL_DMA_IRQHandler+0xc94>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d022      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a71      	ldr	r2, [pc, #452]	; (800e468 <HAL_DMA_IRQHandler+0xc98>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d01d      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a70      	ldr	r2, [pc, #448]	; (800e46c <HAL_DMA_IRQHandler+0xc9c>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d018      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a6e      	ldr	r2, [pc, #440]	; (800e470 <HAL_DMA_IRQHandler+0xca0>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d013      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a6d      	ldr	r2, [pc, #436]	; (800e474 <HAL_DMA_IRQHandler+0xca4>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d00e      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a6b      	ldr	r2, [pc, #428]	; (800e478 <HAL_DMA_IRQHandler+0xca8>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d009      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a6a      	ldr	r2, [pc, #424]	; (800e47c <HAL_DMA_IRQHandler+0xcac>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d004      	beq.n	800e2e2 <HAL_DMA_IRQHandler+0xb12>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a68      	ldr	r2, [pc, #416]	; (800e480 <HAL_DMA_IRQHandler+0xcb0>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d108      	bne.n	800e2f4 <HAL_DMA_IRQHandler+0xb24>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f022 0208 	bic.w	r2, r2, #8
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	e007      	b.n	800e304 <HAL_DMA_IRQHandler+0xb34>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f022 0204 	bic.w	r2, r2, #4
 800e302:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 8165 	beq.w	800e5d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e316:	e15f      	b.n	800e5d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e31c:	f003 031f 	and.w	r3, r3, #31
 800e320:	2202      	movs	r2, #2
 800e322:	409a      	lsls	r2, r3
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	4013      	ands	r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 80c5 	beq.w	800e4b8 <HAL_DMA_IRQHandler+0xce8>
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	f003 0302 	and.w	r3, r3, #2
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80bf 	beq.w	800e4b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e33e:	f003 031f 	and.w	r3, r3, #31
 800e342:	2202      	movs	r2, #2
 800e344:	409a      	lsls	r2, r3
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e350:	2b00      	cmp	r3, #0
 800e352:	d018      	beq.n	800e386 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d109      	bne.n	800e372 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 813a 	beq.w	800e5dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e370:	e134      	b.n	800e5dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 8130 	beq.w	800e5dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e384:	e12a      	b.n	800e5dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f003 0320 	and.w	r3, r3, #32
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f040 8089 	bne.w	800e4a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a2b      	ldr	r2, [pc, #172]	; (800e444 <HAL_DMA_IRQHandler+0xc74>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d04a      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a29      	ldr	r2, [pc, #164]	; (800e448 <HAL_DMA_IRQHandler+0xc78>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d045      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a28      	ldr	r2, [pc, #160]	; (800e44c <HAL_DMA_IRQHandler+0xc7c>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d040      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a26      	ldr	r2, [pc, #152]	; (800e450 <HAL_DMA_IRQHandler+0xc80>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d03b      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a25      	ldr	r2, [pc, #148]	; (800e454 <HAL_DMA_IRQHandler+0xc84>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d036      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a23      	ldr	r2, [pc, #140]	; (800e458 <HAL_DMA_IRQHandler+0xc88>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d031      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a22      	ldr	r2, [pc, #136]	; (800e45c <HAL_DMA_IRQHandler+0xc8c>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d02c      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a20      	ldr	r2, [pc, #128]	; (800e460 <HAL_DMA_IRQHandler+0xc90>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d027      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a1f      	ldr	r2, [pc, #124]	; (800e464 <HAL_DMA_IRQHandler+0xc94>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d022      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a1d      	ldr	r2, [pc, #116]	; (800e468 <HAL_DMA_IRQHandler+0xc98>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d01d      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a1c      	ldr	r2, [pc, #112]	; (800e46c <HAL_DMA_IRQHandler+0xc9c>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d018      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a1a      	ldr	r2, [pc, #104]	; (800e470 <HAL_DMA_IRQHandler+0xca0>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d013      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a19      	ldr	r2, [pc, #100]	; (800e474 <HAL_DMA_IRQHandler+0xca4>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d00e      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a17      	ldr	r2, [pc, #92]	; (800e478 <HAL_DMA_IRQHandler+0xca8>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d009      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a16      	ldr	r2, [pc, #88]	; (800e47c <HAL_DMA_IRQHandler+0xcac>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d004      	beq.n	800e432 <HAL_DMA_IRQHandler+0xc62>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a14      	ldr	r2, [pc, #80]	; (800e480 <HAL_DMA_IRQHandler+0xcb0>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d128      	bne.n	800e484 <HAL_DMA_IRQHandler+0xcb4>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f022 0214 	bic.w	r2, r2, #20
 800e440:	601a      	str	r2, [r3, #0]
 800e442:	e027      	b.n	800e494 <HAL_DMA_IRQHandler+0xcc4>
 800e444:	40020010 	.word	0x40020010
 800e448:	40020028 	.word	0x40020028
 800e44c:	40020040 	.word	0x40020040
 800e450:	40020058 	.word	0x40020058
 800e454:	40020070 	.word	0x40020070
 800e458:	40020088 	.word	0x40020088
 800e45c:	400200a0 	.word	0x400200a0
 800e460:	400200b8 	.word	0x400200b8
 800e464:	40020410 	.word	0x40020410
 800e468:	40020428 	.word	0x40020428
 800e46c:	40020440 	.word	0x40020440
 800e470:	40020458 	.word	0x40020458
 800e474:	40020470 	.word	0x40020470
 800e478:	40020488 	.word	0x40020488
 800e47c:	400204a0 	.word	0x400204a0
 800e480:	400204b8 	.word	0x400204b8
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f022 020a 	bic.w	r2, r2, #10
 800e492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 8097 	beq.w	800e5dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e4b6:	e091      	b.n	800e5dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4bc:	f003 031f 	and.w	r3, r3, #31
 800e4c0:	2208      	movs	r2, #8
 800e4c2:	409a      	lsls	r2, r3
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 8088 	beq.w	800e5de <HAL_DMA_IRQHandler+0xe0e>
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	f003 0308 	and.w	r3, r3, #8
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8082 	beq.w	800e5de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a41      	ldr	r2, [pc, #260]	; (800e5e4 <HAL_DMA_IRQHandler+0xe14>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d04a      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a3f      	ldr	r2, [pc, #252]	; (800e5e8 <HAL_DMA_IRQHandler+0xe18>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d045      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a3e      	ldr	r2, [pc, #248]	; (800e5ec <HAL_DMA_IRQHandler+0xe1c>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d040      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a3c      	ldr	r2, [pc, #240]	; (800e5f0 <HAL_DMA_IRQHandler+0xe20>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d03b      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a3b      	ldr	r2, [pc, #236]	; (800e5f4 <HAL_DMA_IRQHandler+0xe24>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d036      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a39      	ldr	r2, [pc, #228]	; (800e5f8 <HAL_DMA_IRQHandler+0xe28>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d031      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a38      	ldr	r2, [pc, #224]	; (800e5fc <HAL_DMA_IRQHandler+0xe2c>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d02c      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a36      	ldr	r2, [pc, #216]	; (800e600 <HAL_DMA_IRQHandler+0xe30>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d027      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a35      	ldr	r2, [pc, #212]	; (800e604 <HAL_DMA_IRQHandler+0xe34>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d022      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a33      	ldr	r2, [pc, #204]	; (800e608 <HAL_DMA_IRQHandler+0xe38>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d01d      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a32      	ldr	r2, [pc, #200]	; (800e60c <HAL_DMA_IRQHandler+0xe3c>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d018      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a30      	ldr	r2, [pc, #192]	; (800e610 <HAL_DMA_IRQHandler+0xe40>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d013      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a2f      	ldr	r2, [pc, #188]	; (800e614 <HAL_DMA_IRQHandler+0xe44>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d00e      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a2d      	ldr	r2, [pc, #180]	; (800e618 <HAL_DMA_IRQHandler+0xe48>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d009      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a2c      	ldr	r2, [pc, #176]	; (800e61c <HAL_DMA_IRQHandler+0xe4c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d004      	beq.n	800e57a <HAL_DMA_IRQHandler+0xdaa>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a2a      	ldr	r2, [pc, #168]	; (800e620 <HAL_DMA_IRQHandler+0xe50>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d108      	bne.n	800e58c <HAL_DMA_IRQHandler+0xdbc>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f022 021c 	bic.w	r2, r2, #28
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	e007      	b.n	800e59c <HAL_DMA_IRQHandler+0xdcc>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 020e 	bic.w	r2, r2, #14
 800e59a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5a0:	f003 031f 	and.w	r3, r3, #31
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	409a      	lsls	r2, r3
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d009      	beq.n	800e5de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	4798      	blx	r3
 800e5d2:	e004      	b.n	800e5de <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e5d4:	bf00      	nop
 800e5d6:	e002      	b.n	800e5de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e5d8:	bf00      	nop
 800e5da:	e000      	b.n	800e5de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e5dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e5de:	3728      	adds	r7, #40	; 0x28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	40020010 	.word	0x40020010
 800e5e8:	40020028 	.word	0x40020028
 800e5ec:	40020040 	.word	0x40020040
 800e5f0:	40020058 	.word	0x40020058
 800e5f4:	40020070 	.word	0x40020070
 800e5f8:	40020088 	.word	0x40020088
 800e5fc:	400200a0 	.word	0x400200a0
 800e600:	400200b8 	.word	0x400200b8
 800e604:	40020410 	.word	0x40020410
 800e608:	40020428 	.word	0x40020428
 800e60c:	40020440 	.word	0x40020440
 800e610:	40020458 	.word	0x40020458
 800e614:	40020470 	.word	0x40020470
 800e618:	40020488 	.word	0x40020488
 800e61c:	400204a0 	.word	0x400204a0
 800e620:	400204b8 	.word	0x400204b8

0800e624 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e630:	4618      	mov	r0, r3
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e64e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e654:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a7f      	ldr	r2, [pc, #508]	; (800e858 <DMA_SetConfig+0x21c>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d072      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a7d      	ldr	r2, [pc, #500]	; (800e85c <DMA_SetConfig+0x220>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d06d      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a7c      	ldr	r2, [pc, #496]	; (800e860 <DMA_SetConfig+0x224>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d068      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a7a      	ldr	r2, [pc, #488]	; (800e864 <DMA_SetConfig+0x228>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d063      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a79      	ldr	r2, [pc, #484]	; (800e868 <DMA_SetConfig+0x22c>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d05e      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a77      	ldr	r2, [pc, #476]	; (800e86c <DMA_SetConfig+0x230>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d059      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a76      	ldr	r2, [pc, #472]	; (800e870 <DMA_SetConfig+0x234>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d054      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a74      	ldr	r2, [pc, #464]	; (800e874 <DMA_SetConfig+0x238>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d04f      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a73      	ldr	r2, [pc, #460]	; (800e878 <DMA_SetConfig+0x23c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d04a      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a71      	ldr	r2, [pc, #452]	; (800e87c <DMA_SetConfig+0x240>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d045      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4a70      	ldr	r2, [pc, #448]	; (800e880 <DMA_SetConfig+0x244>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d040      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a6e      	ldr	r2, [pc, #440]	; (800e884 <DMA_SetConfig+0x248>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d03b      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a6d      	ldr	r2, [pc, #436]	; (800e888 <DMA_SetConfig+0x24c>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d036      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a6b      	ldr	r2, [pc, #428]	; (800e88c <DMA_SetConfig+0x250>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d031      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a6a      	ldr	r2, [pc, #424]	; (800e890 <DMA_SetConfig+0x254>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d02c      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a68      	ldr	r2, [pc, #416]	; (800e894 <DMA_SetConfig+0x258>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d027      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a67      	ldr	r2, [pc, #412]	; (800e898 <DMA_SetConfig+0x25c>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d022      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a65      	ldr	r2, [pc, #404]	; (800e89c <DMA_SetConfig+0x260>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d01d      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a64      	ldr	r2, [pc, #400]	; (800e8a0 <DMA_SetConfig+0x264>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d018      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a62      	ldr	r2, [pc, #392]	; (800e8a4 <DMA_SetConfig+0x268>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d013      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a61      	ldr	r2, [pc, #388]	; (800e8a8 <DMA_SetConfig+0x26c>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d00e      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a5f      	ldr	r2, [pc, #380]	; (800e8ac <DMA_SetConfig+0x270>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d009      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a5e      	ldr	r2, [pc, #376]	; (800e8b0 <DMA_SetConfig+0x274>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d004      	beq.n	800e746 <DMA_SetConfig+0x10a>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a5c      	ldr	r2, [pc, #368]	; (800e8b4 <DMA_SetConfig+0x278>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d101      	bne.n	800e74a <DMA_SetConfig+0x10e>
 800e746:	2301      	movs	r3, #1
 800e748:	e000      	b.n	800e74c <DMA_SetConfig+0x110>
 800e74a:	2300      	movs	r3, #0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00d      	beq.n	800e76c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d004      	beq.n	800e76c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e76a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a39      	ldr	r2, [pc, #228]	; (800e858 <DMA_SetConfig+0x21c>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d04a      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a38      	ldr	r2, [pc, #224]	; (800e85c <DMA_SetConfig+0x220>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d045      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a36      	ldr	r2, [pc, #216]	; (800e860 <DMA_SetConfig+0x224>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d040      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a35      	ldr	r2, [pc, #212]	; (800e864 <DMA_SetConfig+0x228>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d03b      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a33      	ldr	r2, [pc, #204]	; (800e868 <DMA_SetConfig+0x22c>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d036      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4a32      	ldr	r2, [pc, #200]	; (800e86c <DMA_SetConfig+0x230>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d031      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a30      	ldr	r2, [pc, #192]	; (800e870 <DMA_SetConfig+0x234>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d02c      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a2f      	ldr	r2, [pc, #188]	; (800e874 <DMA_SetConfig+0x238>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d027      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a2d      	ldr	r2, [pc, #180]	; (800e878 <DMA_SetConfig+0x23c>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d022      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a2c      	ldr	r2, [pc, #176]	; (800e87c <DMA_SetConfig+0x240>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d01d      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a2a      	ldr	r2, [pc, #168]	; (800e880 <DMA_SetConfig+0x244>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d018      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a29      	ldr	r2, [pc, #164]	; (800e884 <DMA_SetConfig+0x248>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d013      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a27      	ldr	r2, [pc, #156]	; (800e888 <DMA_SetConfig+0x24c>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d00e      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a26      	ldr	r2, [pc, #152]	; (800e88c <DMA_SetConfig+0x250>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d009      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a24      	ldr	r2, [pc, #144]	; (800e890 <DMA_SetConfig+0x254>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d004      	beq.n	800e80c <DMA_SetConfig+0x1d0>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a23      	ldr	r2, [pc, #140]	; (800e894 <DMA_SetConfig+0x258>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d101      	bne.n	800e810 <DMA_SetConfig+0x1d4>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e000      	b.n	800e812 <DMA_SetConfig+0x1d6>
 800e810:	2300      	movs	r3, #0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d059      	beq.n	800e8ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e81a:	f003 031f 	and.w	r3, r3, #31
 800e81e:	223f      	movs	r2, #63	; 0x3f
 800e820:	409a      	lsls	r2, r3
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e834:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	2b40      	cmp	r3, #64	; 0x40
 800e844:	d138      	bne.n	800e8b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e856:	e086      	b.n	800e966 <DMA_SetConfig+0x32a>
 800e858:	40020010 	.word	0x40020010
 800e85c:	40020028 	.word	0x40020028
 800e860:	40020040 	.word	0x40020040
 800e864:	40020058 	.word	0x40020058
 800e868:	40020070 	.word	0x40020070
 800e86c:	40020088 	.word	0x40020088
 800e870:	400200a0 	.word	0x400200a0
 800e874:	400200b8 	.word	0x400200b8
 800e878:	40020410 	.word	0x40020410
 800e87c:	40020428 	.word	0x40020428
 800e880:	40020440 	.word	0x40020440
 800e884:	40020458 	.word	0x40020458
 800e888:	40020470 	.word	0x40020470
 800e88c:	40020488 	.word	0x40020488
 800e890:	400204a0 	.word	0x400204a0
 800e894:	400204b8 	.word	0x400204b8
 800e898:	58025408 	.word	0x58025408
 800e89c:	5802541c 	.word	0x5802541c
 800e8a0:	58025430 	.word	0x58025430
 800e8a4:	58025444 	.word	0x58025444
 800e8a8:	58025458 	.word	0x58025458
 800e8ac:	5802546c 	.word	0x5802546c
 800e8b0:	58025480 	.word	0x58025480
 800e8b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	60da      	str	r2, [r3, #12]
}
 800e8c8:	e04d      	b.n	800e966 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a29      	ldr	r2, [pc, #164]	; (800e974 <DMA_SetConfig+0x338>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d022      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a27      	ldr	r2, [pc, #156]	; (800e978 <DMA_SetConfig+0x33c>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d01d      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a26      	ldr	r2, [pc, #152]	; (800e97c <DMA_SetConfig+0x340>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d018      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a24      	ldr	r2, [pc, #144]	; (800e980 <DMA_SetConfig+0x344>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d013      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4a23      	ldr	r2, [pc, #140]	; (800e984 <DMA_SetConfig+0x348>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d00e      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a21      	ldr	r2, [pc, #132]	; (800e988 <DMA_SetConfig+0x34c>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d009      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a20      	ldr	r2, [pc, #128]	; (800e98c <DMA_SetConfig+0x350>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d004      	beq.n	800e91a <DMA_SetConfig+0x2de>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a1e      	ldr	r2, [pc, #120]	; (800e990 <DMA_SetConfig+0x354>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d101      	bne.n	800e91e <DMA_SetConfig+0x2e2>
 800e91a:	2301      	movs	r3, #1
 800e91c:	e000      	b.n	800e920 <DMA_SetConfig+0x2e4>
 800e91e:	2300      	movs	r3, #0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d020      	beq.n	800e966 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e928:	f003 031f 	and.w	r3, r3, #31
 800e92c:	2201      	movs	r2, #1
 800e92e:	409a      	lsls	r2, r3
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	2b40      	cmp	r3, #64	; 0x40
 800e942:	d108      	bne.n	800e956 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	60da      	str	r2, [r3, #12]
}
 800e954:	e007      	b.n	800e966 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	60da      	str	r2, [r3, #12]
}
 800e966:	bf00      	nop
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	58025408 	.word	0x58025408
 800e978:	5802541c 	.word	0x5802541c
 800e97c:	58025430 	.word	0x58025430
 800e980:	58025444 	.word	0x58025444
 800e984:	58025458 	.word	0x58025458
 800e988:	5802546c 	.word	0x5802546c
 800e98c:	58025480 	.word	0x58025480
 800e990:	58025494 	.word	0x58025494

0800e994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e994:	b480      	push	{r7}
 800e996:	b085      	sub	sp, #20
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a42      	ldr	r2, [pc, #264]	; (800eaac <DMA_CalcBaseAndBitshift+0x118>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d04a      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a41      	ldr	r2, [pc, #260]	; (800eab0 <DMA_CalcBaseAndBitshift+0x11c>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d045      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a3f      	ldr	r2, [pc, #252]	; (800eab4 <DMA_CalcBaseAndBitshift+0x120>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d040      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a3e      	ldr	r2, [pc, #248]	; (800eab8 <DMA_CalcBaseAndBitshift+0x124>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d03b      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a3c      	ldr	r2, [pc, #240]	; (800eabc <DMA_CalcBaseAndBitshift+0x128>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d036      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a3b      	ldr	r2, [pc, #236]	; (800eac0 <DMA_CalcBaseAndBitshift+0x12c>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d031      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a39      	ldr	r2, [pc, #228]	; (800eac4 <DMA_CalcBaseAndBitshift+0x130>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d02c      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a38      	ldr	r2, [pc, #224]	; (800eac8 <DMA_CalcBaseAndBitshift+0x134>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d027      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a36      	ldr	r2, [pc, #216]	; (800eacc <DMA_CalcBaseAndBitshift+0x138>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d022      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a35      	ldr	r2, [pc, #212]	; (800ead0 <DMA_CalcBaseAndBitshift+0x13c>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d01d      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a33      	ldr	r2, [pc, #204]	; (800ead4 <DMA_CalcBaseAndBitshift+0x140>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d018      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a32      	ldr	r2, [pc, #200]	; (800ead8 <DMA_CalcBaseAndBitshift+0x144>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d013      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a30      	ldr	r2, [pc, #192]	; (800eadc <DMA_CalcBaseAndBitshift+0x148>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d00e      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a2f      	ldr	r2, [pc, #188]	; (800eae0 <DMA_CalcBaseAndBitshift+0x14c>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d009      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a2d      	ldr	r2, [pc, #180]	; (800eae4 <DMA_CalcBaseAndBitshift+0x150>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d004      	beq.n	800ea3c <DMA_CalcBaseAndBitshift+0xa8>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a2c      	ldr	r2, [pc, #176]	; (800eae8 <DMA_CalcBaseAndBitshift+0x154>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d101      	bne.n	800ea40 <DMA_CalcBaseAndBitshift+0xac>
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e000      	b.n	800ea42 <DMA_CalcBaseAndBitshift+0xae>
 800ea40:	2300      	movs	r3, #0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d024      	beq.n	800ea90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	3b10      	subs	r3, #16
 800ea4e:	4a27      	ldr	r2, [pc, #156]	; (800eaec <DMA_CalcBaseAndBitshift+0x158>)
 800ea50:	fba2 2303 	umull	r2, r3, r2, r3
 800ea54:	091b      	lsrs	r3, r3, #4
 800ea56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f003 0307 	and.w	r3, r3, #7
 800ea5e:	4a24      	ldr	r2, [pc, #144]	; (800eaf0 <DMA_CalcBaseAndBitshift+0x15c>)
 800ea60:	5cd3      	ldrb	r3, [r2, r3]
 800ea62:	461a      	mov	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	d908      	bls.n	800ea80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	4b1f      	ldr	r3, [pc, #124]	; (800eaf4 <DMA_CalcBaseAndBitshift+0x160>)
 800ea76:	4013      	ands	r3, r2
 800ea78:	1d1a      	adds	r2, r3, #4
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	659a      	str	r2, [r3, #88]	; 0x58
 800ea7e:	e00d      	b.n	800ea9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	461a      	mov	r2, r3
 800ea86:	4b1b      	ldr	r3, [pc, #108]	; (800eaf4 <DMA_CalcBaseAndBitshift+0x160>)
 800ea88:	4013      	ands	r3, r2
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	6593      	str	r3, [r2, #88]	; 0x58
 800ea8e:	e005      	b.n	800ea9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	40020010 	.word	0x40020010
 800eab0:	40020028 	.word	0x40020028
 800eab4:	40020040 	.word	0x40020040
 800eab8:	40020058 	.word	0x40020058
 800eabc:	40020070 	.word	0x40020070
 800eac0:	40020088 	.word	0x40020088
 800eac4:	400200a0 	.word	0x400200a0
 800eac8:	400200b8 	.word	0x400200b8
 800eacc:	40020410 	.word	0x40020410
 800ead0:	40020428 	.word	0x40020428
 800ead4:	40020440 	.word	0x40020440
 800ead8:	40020458 	.word	0x40020458
 800eadc:	40020470 	.word	0x40020470
 800eae0:	40020488 	.word	0x40020488
 800eae4:	400204a0 	.word	0x400204a0
 800eae8:	400204b8 	.word	0x400204b8
 800eaec:	aaaaaaab 	.word	0xaaaaaaab
 800eaf0:	240084e4 	.word	0x240084e4
 800eaf4:	fffffc00 	.word	0xfffffc00

0800eaf8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	699b      	ldr	r3, [r3, #24]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d120      	bne.n	800eb4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d858      	bhi.n	800ebc6 <DMA_CheckFifoParam+0xce>
 800eb14:	a201      	add	r2, pc, #4	; (adr r2, 800eb1c <DMA_CheckFifoParam+0x24>)
 800eb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb1a:	bf00      	nop
 800eb1c:	0800eb2d 	.word	0x0800eb2d
 800eb20:	0800eb3f 	.word	0x0800eb3f
 800eb24:	0800eb2d 	.word	0x0800eb2d
 800eb28:	0800ebc7 	.word	0x0800ebc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d048      	beq.n	800ebca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800eb3c:	e045      	b.n	800ebca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800eb46:	d142      	bne.n	800ebce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800eb4c:	e03f      	b.n	800ebce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb56:	d123      	bne.n	800eba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d838      	bhi.n	800ebd2 <DMA_CheckFifoParam+0xda>
 800eb60:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <DMA_CheckFifoParam+0x70>)
 800eb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb66:	bf00      	nop
 800eb68:	0800eb79 	.word	0x0800eb79
 800eb6c:	0800eb7f 	.word	0x0800eb7f
 800eb70:	0800eb79 	.word	0x0800eb79
 800eb74:	0800eb91 	.word	0x0800eb91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	73fb      	strb	r3, [r7, #15]
        break;
 800eb7c:	e030      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d025      	beq.n	800ebd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800eb8e:	e022      	b.n	800ebd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800eb98:	d11f      	bne.n	800ebda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800eb9e:	e01c      	b.n	800ebda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d902      	bls.n	800ebae <DMA_CheckFifoParam+0xb6>
 800eba8:	2b03      	cmp	r3, #3
 800ebaa:	d003      	beq.n	800ebb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ebac:	e018      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	73fb      	strb	r3, [r7, #15]
        break;
 800ebb2:	e015      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00e      	beq.n	800ebde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc4:	e00b      	b.n	800ebde <DMA_CheckFifoParam+0xe6>
        break;
 800ebc6:	bf00      	nop
 800ebc8:	e00a      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        break;
 800ebca:	bf00      	nop
 800ebcc:	e008      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        break;
 800ebce:	bf00      	nop
 800ebd0:	e006      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        break;
 800ebd2:	bf00      	nop
 800ebd4:	e004      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        break;
 800ebd6:	bf00      	nop
 800ebd8:	e002      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
        break;
 800ebda:	bf00      	nop
 800ebdc:	e000      	b.n	800ebe0 <DMA_CheckFifoParam+0xe8>
    break;
 800ebde:	bf00      	nop
    }
  }

  return status;
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop

0800ebf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a38      	ldr	r2, [pc, #224]	; (800ece4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d022      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a36      	ldr	r2, [pc, #216]	; (800ece8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d01d      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a35      	ldr	r2, [pc, #212]	; (800ecec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d018      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a33      	ldr	r2, [pc, #204]	; (800ecf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d013      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a32      	ldr	r2, [pc, #200]	; (800ecf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d00e      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a30      	ldr	r2, [pc, #192]	; (800ecf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d009      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a2f      	ldr	r2, [pc, #188]	; (800ecfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d004      	beq.n	800ec4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a2d      	ldr	r2, [pc, #180]	; (800ed00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d101      	bne.n	800ec52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e000      	b.n	800ec54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ec52:	2300      	movs	r3, #0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d01a      	beq.n	800ec8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	3b08      	subs	r3, #8
 800ec60:	4a28      	ldr	r2, [pc, #160]	; (800ed04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ec62:	fba2 2303 	umull	r2, r3, r2, r3
 800ec66:	091b      	lsrs	r3, r3, #4
 800ec68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	4b26      	ldr	r3, [pc, #152]	; (800ed08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ec6e:	4413      	add	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	461a      	mov	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a24      	ldr	r2, [pc, #144]	; (800ed0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ec7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f003 031f 	and.w	r3, r3, #31
 800ec84:	2201      	movs	r2, #1
 800ec86:	409a      	lsls	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ec8c:	e024      	b.n	800ecd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	3b10      	subs	r3, #16
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ec98:	fba2 2303 	umull	r2, r3, r2, r3
 800ec9c:	091b      	lsrs	r3, r3, #4
 800ec9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	4a1c      	ldr	r2, [pc, #112]	; (800ed14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d806      	bhi.n	800ecb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	4a1b      	ldr	r2, [pc, #108]	; (800ed18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d902      	bls.n	800ecb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3308      	adds	r3, #8
 800ecb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	4b18      	ldr	r3, [pc, #96]	; (800ed1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ecba:	4413      	add	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a16      	ldr	r2, [pc, #88]	; (800ed20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ecc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f003 031f 	and.w	r3, r3, #31
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	409a      	lsls	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ecd8:	bf00      	nop
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	58025408 	.word	0x58025408
 800ece8:	5802541c 	.word	0x5802541c
 800ecec:	58025430 	.word	0x58025430
 800ecf0:	58025444 	.word	0x58025444
 800ecf4:	58025458 	.word	0x58025458
 800ecf8:	5802546c 	.word	0x5802546c
 800ecfc:	58025480 	.word	0x58025480
 800ed00:	58025494 	.word	0x58025494
 800ed04:	cccccccd 	.word	0xcccccccd
 800ed08:	16009600 	.word	0x16009600
 800ed0c:	58025880 	.word	0x58025880
 800ed10:	aaaaaaab 	.word	0xaaaaaaab
 800ed14:	400204b8 	.word	0x400204b8
 800ed18:	4002040f 	.word	0x4002040f
 800ed1c:	10008200 	.word	0x10008200
 800ed20:	40020880 	.word	0x40020880

0800ed24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d04a      	beq.n	800edd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	d847      	bhi.n	800edd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a25      	ldr	r2, [pc, #148]	; (800eddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d022      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a24      	ldr	r2, [pc, #144]	; (800ede0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d01d      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a22      	ldr	r2, [pc, #136]	; (800ede4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d018      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4a21      	ldr	r2, [pc, #132]	; (800ede8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d013      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a1f      	ldr	r2, [pc, #124]	; (800edec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d00e      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a1e      	ldr	r2, [pc, #120]	; (800edf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d009      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a1c      	ldr	r2, [pc, #112]	; (800edf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d004      	beq.n	800ed90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a1b      	ldr	r2, [pc, #108]	; (800edf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d101      	bne.n	800ed94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ed90:	2301      	movs	r3, #1
 800ed92:	e000      	b.n	800ed96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ed94:	2300      	movs	r3, #0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	4b17      	ldr	r3, [pc, #92]	; (800edfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ed9e:	4413      	add	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	461a      	mov	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a15      	ldr	r2, [pc, #84]	; (800ee00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800edac:	671a      	str	r2, [r3, #112]	; 0x70
 800edae:	e009      	b.n	800edc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	4b14      	ldr	r3, [pc, #80]	; (800ee04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800edb4:	4413      	add	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	461a      	mov	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a11      	ldr	r2, [pc, #68]	; (800ee08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800edc2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	2201      	movs	r2, #1
 800edca:	409a      	lsls	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800edd0:	bf00      	nop
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	58025408 	.word	0x58025408
 800ede0:	5802541c 	.word	0x5802541c
 800ede4:	58025430 	.word	0x58025430
 800ede8:	58025444 	.word	0x58025444
 800edec:	58025458 	.word	0x58025458
 800edf0:	5802546c 	.word	0x5802546c
 800edf4:	58025480 	.word	0x58025480
 800edf8:	58025494 	.word	0x58025494
 800edfc:	1600963f 	.word	0x1600963f
 800ee00:	58025940 	.word	0x58025940
 800ee04:	1000823f 	.word	0x1000823f
 800ee08:	40020940 	.word	0x40020940

0800ee0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b089      	sub	sp, #36	; 0x24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ee16:	2300      	movs	r3, #0
 800ee18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ee1a:	4b89      	ldr	r3, [pc, #548]	; (800f040 <HAL_GPIO_Init+0x234>)
 800ee1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ee1e:	e194      	b.n	800f14a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	2101      	movs	r1, #1
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	fa01 f303 	lsl.w	r3, r1, r3
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f000 8186 	beq.w	800f144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f003 0303 	and.w	r3, r3, #3
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d005      	beq.n	800ee50 <HAL_GPIO_Init+0x44>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	f003 0303 	and.w	r3, r3, #3
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d130      	bne.n	800eeb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	2203      	movs	r2, #3
 800ee5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee60:	43db      	mvns	r3, r3
 800ee62:	69ba      	ldr	r2, [r7, #24]
 800ee64:	4013      	ands	r3, r2
 800ee66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	68da      	ldr	r2, [r3, #12]
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	fa02 f303 	lsl.w	r3, r2, r3
 800ee74:	69ba      	ldr	r2, [r7, #24]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	69ba      	ldr	r2, [r7, #24]
 800ee7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ee86:	2201      	movs	r2, #1
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8e:	43db      	mvns	r3, r3
 800ee90:	69ba      	ldr	r2, [r7, #24]
 800ee92:	4013      	ands	r3, r2
 800ee94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	091b      	lsrs	r3, r3, #4
 800ee9c:	f003 0201 	and.w	r2, r3, #1
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	fa02 f303 	lsl.w	r3, r2, r3
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f003 0303 	and.w	r3, r3, #3
 800eeba:	2b03      	cmp	r3, #3
 800eebc:	d017      	beq.n	800eeee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	005b      	lsls	r3, r3, #1
 800eec8:	2203      	movs	r2, #3
 800eeca:	fa02 f303 	lsl.w	r3, r2, r3
 800eece:	43db      	mvns	r3, r3
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	4013      	ands	r3, r2
 800eed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	689a      	ldr	r2, [r3, #8]
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	fa02 f303 	lsl.w	r3, r2, r3
 800eee2:	69ba      	ldr	r2, [r7, #24]
 800eee4:	4313      	orrs	r3, r2
 800eee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	69ba      	ldr	r2, [r7, #24]
 800eeec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d123      	bne.n	800ef42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	08da      	lsrs	r2, r3, #3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3208      	adds	r2, #8
 800ef02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	f003 0307 	and.w	r3, r3, #7
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	220f      	movs	r2, #15
 800ef12:	fa02 f303 	lsl.w	r3, r2, r3
 800ef16:	43db      	mvns	r3, r3
 800ef18:	69ba      	ldr	r2, [r7, #24]
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	691a      	ldr	r2, [r3, #16]
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	f003 0307 	and.w	r3, r3, #7
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	08da      	lsrs	r2, r3, #3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3208      	adds	r2, #8
 800ef3c:	69b9      	ldr	r1, [r7, #24]
 800ef3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	2203      	movs	r2, #3
 800ef4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef52:	43db      	mvns	r3, r3
 800ef54:	69ba      	ldr	r2, [r7, #24]
 800ef56:	4013      	ands	r3, r2
 800ef58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	f003 0203 	and.w	r2, r3, #3
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	005b      	lsls	r3, r3, #1
 800ef66:	fa02 f303 	lsl.w	r3, r2, r3
 800ef6a:	69ba      	ldr	r2, [r7, #24]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	69ba      	ldr	r2, [r7, #24]
 800ef74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f000 80e0 	beq.w	800f144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef84:	4b2f      	ldr	r3, [pc, #188]	; (800f044 <HAL_GPIO_Init+0x238>)
 800ef86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef8a:	4a2e      	ldr	r2, [pc, #184]	; (800f044 <HAL_GPIO_Init+0x238>)
 800ef8c:	f043 0302 	orr.w	r3, r3, #2
 800ef90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ef94:	4b2b      	ldr	r3, [pc, #172]	; (800f044 <HAL_GPIO_Init+0x238>)
 800ef96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	60fb      	str	r3, [r7, #12]
 800efa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800efa2:	4a29      	ldr	r2, [pc, #164]	; (800f048 <HAL_GPIO_Init+0x23c>)
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	089b      	lsrs	r3, r3, #2
 800efa8:	3302      	adds	r3, #2
 800efaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	f003 0303 	and.w	r3, r3, #3
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	220f      	movs	r2, #15
 800efba:	fa02 f303 	lsl.w	r3, r2, r3
 800efbe:	43db      	mvns	r3, r3
 800efc0:	69ba      	ldr	r2, [r7, #24]
 800efc2:	4013      	ands	r3, r2
 800efc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a20      	ldr	r2, [pc, #128]	; (800f04c <HAL_GPIO_Init+0x240>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d052      	beq.n	800f074 <HAL_GPIO_Init+0x268>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a1f      	ldr	r2, [pc, #124]	; (800f050 <HAL_GPIO_Init+0x244>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d031      	beq.n	800f03a <HAL_GPIO_Init+0x22e>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a1e      	ldr	r2, [pc, #120]	; (800f054 <HAL_GPIO_Init+0x248>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d02b      	beq.n	800f036 <HAL_GPIO_Init+0x22a>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <HAL_GPIO_Init+0x24c>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d025      	beq.n	800f032 <HAL_GPIO_Init+0x226>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a1c      	ldr	r2, [pc, #112]	; (800f05c <HAL_GPIO_Init+0x250>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d01f      	beq.n	800f02e <HAL_GPIO_Init+0x222>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a1b      	ldr	r2, [pc, #108]	; (800f060 <HAL_GPIO_Init+0x254>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d019      	beq.n	800f02a <HAL_GPIO_Init+0x21e>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4a1a      	ldr	r2, [pc, #104]	; (800f064 <HAL_GPIO_Init+0x258>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d013      	beq.n	800f026 <HAL_GPIO_Init+0x21a>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a19      	ldr	r2, [pc, #100]	; (800f068 <HAL_GPIO_Init+0x25c>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d00d      	beq.n	800f022 <HAL_GPIO_Init+0x216>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a18      	ldr	r2, [pc, #96]	; (800f06c <HAL_GPIO_Init+0x260>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d007      	beq.n	800f01e <HAL_GPIO_Init+0x212>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4a17      	ldr	r2, [pc, #92]	; (800f070 <HAL_GPIO_Init+0x264>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d101      	bne.n	800f01a <HAL_GPIO_Init+0x20e>
 800f016:	2309      	movs	r3, #9
 800f018:	e02d      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f01a:	230a      	movs	r3, #10
 800f01c:	e02b      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f01e:	2308      	movs	r3, #8
 800f020:	e029      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f022:	2307      	movs	r3, #7
 800f024:	e027      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f026:	2306      	movs	r3, #6
 800f028:	e025      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f02a:	2305      	movs	r3, #5
 800f02c:	e023      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f02e:	2304      	movs	r3, #4
 800f030:	e021      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f032:	2303      	movs	r3, #3
 800f034:	e01f      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f036:	2302      	movs	r3, #2
 800f038:	e01d      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f03a:	2301      	movs	r3, #1
 800f03c:	e01b      	b.n	800f076 <HAL_GPIO_Init+0x26a>
 800f03e:	bf00      	nop
 800f040:	58000080 	.word	0x58000080
 800f044:	58024400 	.word	0x58024400
 800f048:	58000400 	.word	0x58000400
 800f04c:	58020000 	.word	0x58020000
 800f050:	58020400 	.word	0x58020400
 800f054:	58020800 	.word	0x58020800
 800f058:	58020c00 	.word	0x58020c00
 800f05c:	58021000 	.word	0x58021000
 800f060:	58021400 	.word	0x58021400
 800f064:	58021800 	.word	0x58021800
 800f068:	58021c00 	.word	0x58021c00
 800f06c:	58022000 	.word	0x58022000
 800f070:	58022400 	.word	0x58022400
 800f074:	2300      	movs	r3, #0
 800f076:	69fa      	ldr	r2, [r7, #28]
 800f078:	f002 0203 	and.w	r2, r2, #3
 800f07c:	0092      	lsls	r2, r2, #2
 800f07e:	4093      	lsls	r3, r2
 800f080:	69ba      	ldr	r2, [r7, #24]
 800f082:	4313      	orrs	r3, r2
 800f084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f086:	4938      	ldr	r1, [pc, #224]	; (800f168 <HAL_GPIO_Init+0x35c>)
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	089b      	lsrs	r3, r3, #2
 800f08c:	3302      	adds	r3, #2
 800f08e:	69ba      	ldr	r2, [r7, #24]
 800f090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	43db      	mvns	r3, r3
 800f0a0:	69ba      	ldr	r2, [r7, #24]
 800f0a2:	4013      	ands	r3, r2
 800f0a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d003      	beq.n	800f0ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f0ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f0c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	43db      	mvns	r3, r3
 800f0ce:	69ba      	ldr	r2, [r7, #24]
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d003      	beq.n	800f0e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f0e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	43db      	mvns	r3, r3
 800f0fa:	69ba      	ldr	r2, [r7, #24]
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	4313      	orrs	r3, r2
 800f112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	69ba      	ldr	r2, [r7, #24]
 800f118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	43db      	mvns	r3, r3
 800f124:	69ba      	ldr	r2, [r7, #24]
 800f126:	4013      	ands	r3, r2
 800f128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d003      	beq.n	800f13e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f136:	69ba      	ldr	r2, [r7, #24]
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	69ba      	ldr	r2, [r7, #24]
 800f142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	3301      	adds	r3, #1
 800f148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	fa22 f303 	lsr.w	r3, r2, r3
 800f154:	2b00      	cmp	r3, #0
 800f156:	f47f ae63 	bne.w	800ee20 <HAL_GPIO_Init+0x14>
  }
}
 800f15a:	bf00      	nop
 800f15c:	bf00      	nop
 800f15e:	3724      	adds	r7, #36	; 0x24
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	58000400 	.word	0x58000400

0800f16c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f176:	2300      	movs	r3, #0
 800f178:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f17a:	4b75      	ldr	r3, [pc, #468]	; (800f350 <HAL_GPIO_DeInit+0x1e4>)
 800f17c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800f17e:	e0d9      	b.n	800f334 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800f180:	2201      	movs	r2, #1
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	fa02 f303 	lsl.w	r3, r2, r3
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	4013      	ands	r3, r2
 800f18c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	f000 80cc 	beq.w	800f32e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800f196:	4a6f      	ldr	r2, [pc, #444]	; (800f354 <HAL_GPIO_DeInit+0x1e8>)
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	089b      	lsrs	r3, r3, #2
 800f19c:	3302      	adds	r3, #2
 800f19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	f003 0303 	and.w	r3, r3, #3
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	220f      	movs	r2, #15
 800f1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	4013      	ands	r3, r2
 800f1b6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a67      	ldr	r2, [pc, #412]	; (800f358 <HAL_GPIO_DeInit+0x1ec>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d037      	beq.n	800f230 <HAL_GPIO_DeInit+0xc4>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a66      	ldr	r2, [pc, #408]	; (800f35c <HAL_GPIO_DeInit+0x1f0>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d031      	beq.n	800f22c <HAL_GPIO_DeInit+0xc0>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a65      	ldr	r2, [pc, #404]	; (800f360 <HAL_GPIO_DeInit+0x1f4>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d02b      	beq.n	800f228 <HAL_GPIO_DeInit+0xbc>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a64      	ldr	r2, [pc, #400]	; (800f364 <HAL_GPIO_DeInit+0x1f8>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d025      	beq.n	800f224 <HAL_GPIO_DeInit+0xb8>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a63      	ldr	r2, [pc, #396]	; (800f368 <HAL_GPIO_DeInit+0x1fc>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d01f      	beq.n	800f220 <HAL_GPIO_DeInit+0xb4>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a62      	ldr	r2, [pc, #392]	; (800f36c <HAL_GPIO_DeInit+0x200>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d019      	beq.n	800f21c <HAL_GPIO_DeInit+0xb0>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a61      	ldr	r2, [pc, #388]	; (800f370 <HAL_GPIO_DeInit+0x204>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d013      	beq.n	800f218 <HAL_GPIO_DeInit+0xac>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a60      	ldr	r2, [pc, #384]	; (800f374 <HAL_GPIO_DeInit+0x208>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d00d      	beq.n	800f214 <HAL_GPIO_DeInit+0xa8>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a5f      	ldr	r2, [pc, #380]	; (800f378 <HAL_GPIO_DeInit+0x20c>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d007      	beq.n	800f210 <HAL_GPIO_DeInit+0xa4>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a5e      	ldr	r2, [pc, #376]	; (800f37c <HAL_GPIO_DeInit+0x210>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d101      	bne.n	800f20c <HAL_GPIO_DeInit+0xa0>
 800f208:	2309      	movs	r3, #9
 800f20a:	e012      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f20c:	230a      	movs	r3, #10
 800f20e:	e010      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f210:	2308      	movs	r3, #8
 800f212:	e00e      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f214:	2307      	movs	r3, #7
 800f216:	e00c      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f218:	2306      	movs	r3, #6
 800f21a:	e00a      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f21c:	2305      	movs	r3, #5
 800f21e:	e008      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f220:	2304      	movs	r3, #4
 800f222:	e006      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f224:	2303      	movs	r3, #3
 800f226:	e004      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f228:	2302      	movs	r3, #2
 800f22a:	e002      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f22c:	2301      	movs	r3, #1
 800f22e:	e000      	b.n	800f232 <HAL_GPIO_DeInit+0xc6>
 800f230:	2300      	movs	r3, #0
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	f002 0203 	and.w	r2, r2, #3
 800f238:	0092      	lsls	r2, r2, #2
 800f23a:	4093      	lsls	r3, r2
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d136      	bne.n	800f2b0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	43db      	mvns	r3, r3
 800f24a:	401a      	ands	r2, r3
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	43db      	mvns	r3, r3
 800f258:	401a      	ands	r2, r3
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800f25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f262:	685a      	ldr	r2, [r3, #4]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	43db      	mvns	r3, r3
 800f268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f26c:	4013      	ands	r3, r2
 800f26e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800f270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	43db      	mvns	r3, r3
 800f27a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f27e:	4013      	ands	r3, r2
 800f280:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f003 0303 	and.w	r3, r3, #3
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	220f      	movs	r2, #15
 800f28c:	fa02 f303 	lsl.w	r3, r2, r3
 800f290:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800f292:	4a30      	ldr	r2, [pc, #192]	; (800f354 <HAL_GPIO_DeInit+0x1e8>)
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	089b      	lsrs	r3, r3, #2
 800f298:	3302      	adds	r3, #2
 800f29a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	43da      	mvns	r2, r3
 800f2a2:	482c      	ldr	r0, [pc, #176]	; (800f354 <HAL_GPIO_DeInit+0x1e8>)
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	089b      	lsrs	r3, r3, #2
 800f2a8:	400a      	ands	r2, r1
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	2103      	movs	r1, #3
 800f2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f2be:	431a      	orrs	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	08da      	lsrs	r2, r3, #3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3208      	adds	r2, #8
 800f2cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f003 0307 	and.w	r3, r3, #7
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	220f      	movs	r2, #15
 800f2da:	fa02 f303 	lsl.w	r3, r2, r3
 800f2de:	43db      	mvns	r3, r3
 800f2e0:	697a      	ldr	r2, [r7, #20]
 800f2e2:	08d2      	lsrs	r2, r2, #3
 800f2e4:	4019      	ands	r1, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	3208      	adds	r2, #8
 800f2ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	68da      	ldr	r2, [r3, #12]
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	2103      	movs	r1, #3
 800f2f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2fc:	43db      	mvns	r3, r3
 800f2fe:	401a      	ands	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685a      	ldr	r2, [r3, #4]
 800f308:	2101      	movs	r1, #1
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	fa01 f303 	lsl.w	r3, r1, r3
 800f310:	43db      	mvns	r3, r3
 800f312:	401a      	ands	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689a      	ldr	r2, [r3, #8]
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	005b      	lsls	r3, r3, #1
 800f320:	2103      	movs	r1, #3
 800f322:	fa01 f303 	lsl.w	r3, r1, r3
 800f326:	43db      	mvns	r3, r3
 800f328:	401a      	ands	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	3301      	adds	r3, #1
 800f332:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	fa22 f303 	lsr.w	r3, r2, r3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f47f af1f 	bne.w	800f180 <HAL_GPIO_DeInit+0x14>
  }
}
 800f342:	bf00      	nop
 800f344:	bf00      	nop
 800f346:	371c      	adds	r7, #28
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	58000080 	.word	0x58000080
 800f354:	58000400 	.word	0x58000400
 800f358:	58020000 	.word	0x58020000
 800f35c:	58020400 	.word	0x58020400
 800f360:	58020800 	.word	0x58020800
 800f364:	58020c00 	.word	0x58020c00
 800f368:	58021000 	.word	0x58021000
 800f36c:	58021400 	.word	0x58021400
 800f370:	58021800 	.word	0x58021800
 800f374:	58021c00 	.word	0x58021c00
 800f378:	58022000 	.word	0x58022000
 800f37c:	58022400 	.word	0x58022400

0800f380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	460b      	mov	r3, r1
 800f38a:	807b      	strh	r3, [r7, #2]
 800f38c:	4613      	mov	r3, r2
 800f38e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f390:	787b      	ldrb	r3, [r7, #1]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d003      	beq.n	800f39e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f396:	887a      	ldrh	r2, [r7, #2]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f39c:	e003      	b.n	800f3a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f39e:	887b      	ldrh	r3, [r7, #2]
 800f3a0:	041a      	lsls	r2, r3, #16
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	619a      	str	r2, [r3, #24]
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f3b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b4:	b08f      	sub	sp, #60	; 0x3c
 800f3b6:	af0a      	add	r7, sp, #40	; 0x28
 800f3b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e116      	b.n	800f5f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d106      	bne.n	800f3e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f00b fc40 	bl	801ac64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2203      	movs	r2, #3
 800f3e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d102      	bne.n	800f3fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f006 fcfd 	bl	8015e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	603b      	str	r3, [r7, #0]
 800f40e:	687e      	ldr	r6, [r7, #4]
 800f410:	466d      	mov	r5, sp
 800f412:	f106 0410 	add.w	r4, r6, #16
 800f416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f41a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f41c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f41e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f422:	e885 0003 	stmia.w	r5, {r0, r1}
 800f426:	1d33      	adds	r3, r6, #4
 800f428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f42a:	6838      	ldr	r0, [r7, #0]
 800f42c:	f006 fbc8 	bl	8015bc0 <USB_CoreInit>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2202      	movs	r2, #2
 800f43a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e0d7      	b.n	800f5f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2100      	movs	r1, #0
 800f448:	4618      	mov	r0, r3
 800f44a:	f006 fceb 	bl	8015e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f44e:	2300      	movs	r3, #0
 800f450:	73fb      	strb	r3, [r7, #15]
 800f452:	e04a      	b.n	800f4ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f454:	7bfa      	ldrb	r2, [r7, #15]
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	4613      	mov	r3, r2
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	440b      	add	r3, r1
 800f462:	333d      	adds	r3, #61	; 0x3d
 800f464:	2201      	movs	r2, #1
 800f466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f468:	7bfa      	ldrb	r2, [r7, #15]
 800f46a:	6879      	ldr	r1, [r7, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	00db      	lsls	r3, r3, #3
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	440b      	add	r3, r1
 800f476:	333c      	adds	r3, #60	; 0x3c
 800f478:	7bfa      	ldrb	r2, [r7, #15]
 800f47a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f47c:	7bfa      	ldrb	r2, [r7, #15]
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
 800f480:	b298      	uxth	r0, r3
 800f482:	6879      	ldr	r1, [r7, #4]
 800f484:	4613      	mov	r3, r2
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	4413      	add	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	440b      	add	r3, r1
 800f48e:	3344      	adds	r3, #68	; 0x44
 800f490:	4602      	mov	r2, r0
 800f492:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f494:	7bfa      	ldrb	r2, [r7, #15]
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	4613      	mov	r3, r2
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	4413      	add	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	440b      	add	r3, r1
 800f4a2:	3340      	adds	r3, #64	; 0x40
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f4a8:	7bfa      	ldrb	r2, [r7, #15]
 800f4aa:	6879      	ldr	r1, [r7, #4]
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	00db      	lsls	r3, r3, #3
 800f4b0:	4413      	add	r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	440b      	add	r3, r1
 800f4b6:	3348      	adds	r3, #72	; 0x48
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f4bc:	7bfa      	ldrb	r2, [r7, #15]
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	4413      	add	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	334c      	adds	r3, #76	; 0x4c
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f4d0:	7bfa      	ldrb	r2, [r7, #15]
 800f4d2:	6879      	ldr	r1, [r7, #4]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	00db      	lsls	r3, r3, #3
 800f4d8:	4413      	add	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	440b      	add	r3, r1
 800f4de:	3354      	adds	r3, #84	; 0x54
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	73fb      	strb	r3, [r7, #15]
 800f4ea:	7bfa      	ldrb	r2, [r7, #15]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d3af      	bcc.n	800f454 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	73fb      	strb	r3, [r7, #15]
 800f4f8:	e044      	b.n	800f584 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f4fa:	7bfa      	ldrb	r2, [r7, #15]
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	4613      	mov	r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	4413      	add	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	440b      	add	r3, r1
 800f508:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f50c:	2200      	movs	r2, #0
 800f50e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f510:	7bfa      	ldrb	r2, [r7, #15]
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	4613      	mov	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	440b      	add	r3, r1
 800f51e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f522:	7bfa      	ldrb	r2, [r7, #15]
 800f524:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f526:	7bfa      	ldrb	r2, [r7, #15]
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	4613      	mov	r3, r2
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	440b      	add	r3, r1
 800f534:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f538:	2200      	movs	r2, #0
 800f53a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f53c:	7bfa      	ldrb	r2, [r7, #15]
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	4613      	mov	r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	4413      	add	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	440b      	add	r3, r1
 800f54a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f54e:	2200      	movs	r2, #0
 800f550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f552:	7bfa      	ldrb	r2, [r7, #15]
 800f554:	6879      	ldr	r1, [r7, #4]
 800f556:	4613      	mov	r3, r2
 800f558:	00db      	lsls	r3, r3, #3
 800f55a:	4413      	add	r3, r2
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	440b      	add	r3, r1
 800f560:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f564:	2200      	movs	r2, #0
 800f566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f568:	7bfa      	ldrb	r2, [r7, #15]
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	4613      	mov	r3, r2
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	4413      	add	r3, r2
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	440b      	add	r3, r1
 800f576:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f57a:	2200      	movs	r2, #0
 800f57c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f57e:	7bfb      	ldrb	r3, [r7, #15]
 800f580:	3301      	adds	r3, #1
 800f582:	73fb      	strb	r3, [r7, #15]
 800f584:	7bfa      	ldrb	r2, [r7, #15]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d3b5      	bcc.n	800f4fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	603b      	str	r3, [r7, #0]
 800f594:	687e      	ldr	r6, [r7, #4]
 800f596:	466d      	mov	r5, sp
 800f598:	f106 0410 	add.w	r4, r6, #16
 800f59c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f59e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f5a8:	e885 0003 	stmia.w	r5, {r0, r1}
 800f5ac:	1d33      	adds	r3, r6, #4
 800f5ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f5b0:	6838      	ldr	r0, [r7, #0]
 800f5b2:	f006 fc83 	bl	8015ebc <USB_DevInit>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d005      	beq.n	800f5c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2202      	movs	r2, #2
 800f5c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e014      	b.n	800f5f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d102      	bne.n	800f5e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f001 f98b 	bl	80108fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f007 fdd1 	bl	8017192 <USB_DevDisconnect>

  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f5fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b084      	sub	sp, #16
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d101      	bne.n	800f616 <HAL_PCD_Start+0x1c>
 800f612:	2302      	movs	r3, #2
 800f614:	e020      	b.n	800f658 <HAL_PCD_Start+0x5e>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f622:	2b01      	cmp	r3, #1
 800f624:	d109      	bne.n	800f63a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d005      	beq.n	800f63a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4618      	mov	r0, r3
 800f640:	f006 fbce 	bl	8015de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4618      	mov	r0, r3
 800f64a:	f007 fd81 	bl	8017150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f660:	b590      	push	{r4, r7, lr}
 800f662:	b08d      	sub	sp, #52	; 0x34
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4618      	mov	r0, r3
 800f678:	f007 fe3f 	bl	80172fa <USB_GetMode>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f040 84b7 	bne.w	800fff2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4618      	mov	r0, r3
 800f68a:	f007 fda3 	bl	80171d4 <USB_ReadInterrupts>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 84ad 	beq.w	800fff0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	0a1b      	lsrs	r3, r3, #8
 800f6a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f007 fd90 	bl	80171d4 <USB_ReadInterrupts>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f003 0302 	and.w	r3, r3, #2
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d107      	bne.n	800f6ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	695a      	ldr	r2, [r3, #20]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f002 0202 	and.w	r2, r2, #2
 800f6cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f007 fd7e 	bl	80171d4 <USB_ReadInterrupts>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	f003 0310 	and.w	r3, r3, #16
 800f6de:	2b10      	cmp	r3, #16
 800f6e0:	d161      	bne.n	800f7a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	699a      	ldr	r2, [r3, #24]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f022 0210 	bic.w	r2, r2, #16
 800f6f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f6f2:	6a3b      	ldr	r3, [r7, #32]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	f003 020f 	and.w	r2, r3, #15
 800f6fe:	4613      	mov	r3, r2
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4413      	add	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	4413      	add	r3, r2
 800f70e:	3304      	adds	r3, #4
 800f710:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	0c5b      	lsrs	r3, r3, #17
 800f716:	f003 030f 	and.w	r3, r3, #15
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d124      	bne.n	800f768 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f71e:	69ba      	ldr	r2, [r7, #24]
 800f720:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f724:	4013      	ands	r3, r2
 800f726:	2b00      	cmp	r3, #0
 800f728:	d035      	beq.n	800f796 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	091b      	lsrs	r3, r3, #4
 800f732:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f738:	b29b      	uxth	r3, r3
 800f73a:	461a      	mov	r2, r3
 800f73c:	6a38      	ldr	r0, [r7, #32]
 800f73e:	f007 fbb5 	bl	8016eac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	691a      	ldr	r2, [r3, #16]
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	091b      	lsrs	r3, r3, #4
 800f74a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f74e:	441a      	add	r2, r3
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	6a1a      	ldr	r2, [r3, #32]
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	091b      	lsrs	r3, r3, #4
 800f75c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f760:	441a      	add	r2, r3
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	621a      	str	r2, [r3, #32]
 800f766:	e016      	b.n	800f796 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	0c5b      	lsrs	r3, r3, #17
 800f76c:	f003 030f 	and.w	r3, r3, #15
 800f770:	2b06      	cmp	r3, #6
 800f772:	d110      	bne.n	800f796 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f77a:	2208      	movs	r2, #8
 800f77c:	4619      	mov	r1, r3
 800f77e:	6a38      	ldr	r0, [r7, #32]
 800f780:	f007 fb94 	bl	8016eac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	6a1a      	ldr	r2, [r3, #32]
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	091b      	lsrs	r3, r3, #4
 800f78c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f790:	441a      	add	r2, r3
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	699a      	ldr	r2, [r3, #24]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f042 0210 	orr.w	r2, r2, #16
 800f7a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f007 fd12 	bl	80171d4 <USB_ReadInterrupts>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f7b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f7ba:	f040 80a7 	bne.w	800f90c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f007 fd17 	bl	80171fa <USB_ReadDevAllOutEpInterrupt>
 800f7cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f7ce:	e099      	b.n	800f904 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f003 0301 	and.w	r3, r3, #1
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f000 808e 	beq.w	800f8f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7e2:	b2d2      	uxtb	r2, r2
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f007 fd3b 	bl	8017262 <USB_ReadDevOutEPInterrupt>
 800f7ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00c      	beq.n	800f812 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fa:	015a      	lsls	r2, r3, #5
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	4413      	add	r3, r2
 800f800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f804:	461a      	mov	r2, r3
 800f806:	2301      	movs	r3, #1
 800f808:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f80a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 feef 	bl	80105f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	f003 0308 	and.w	r3, r3, #8
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00c      	beq.n	800f836 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	461a      	mov	r2, r3
 800f82a:	2308      	movs	r3, #8
 800f82c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f82e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 ffc5 	bl	80107c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f003 0310 	and.w	r3, r3, #16
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d008      	beq.n	800f852 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84c:	461a      	mov	r2, r3
 800f84e:	2310      	movs	r3, #16
 800f850:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	f003 0302 	and.w	r3, r3, #2
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d030      	beq.n	800f8be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	695b      	ldr	r3, [r3, #20]
 800f860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f864:	2b80      	cmp	r3, #128	; 0x80
 800f866:	d109      	bne.n	800f87c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	69fa      	ldr	r2, [r7, #28]
 800f872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f87a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87e:	4613      	mov	r3, r2
 800f880:	00db      	lsls	r3, r3, #3
 800f882:	4413      	add	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	4413      	add	r3, r2
 800f88e:	3304      	adds	r3, #4
 800f890:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	78db      	ldrb	r3, [r3, #3]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d108      	bne.n	800f8ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2200      	movs	r2, #0
 800f89e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f00b fb10 	bl	801aecc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	015a      	lsls	r2, r3, #5
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	f003 0320 	and.w	r3, r3, #32
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d008      	beq.n	800f8da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	2320      	movs	r3, #32
 800f8d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d009      	beq.n	800f8f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	085b      	lsrs	r3, r3, #1
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	2b00      	cmp	r3, #0
 800f908:	f47f af62 	bne.w	800f7d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4618      	mov	r0, r3
 800f912:	f007 fc5f 	bl	80171d4 <USB_ReadInterrupts>
 800f916:	4603      	mov	r3, r0
 800f918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f91c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f920:	f040 80db 	bne.w	800fada <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4618      	mov	r0, r3
 800f92a:	f007 fc80 	bl	801722e <USB_ReadDevAllInEpInterrupt>
 800f92e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f930:	2300      	movs	r3, #0
 800f932:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f934:	e0cd      	b.n	800fad2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f938:	f003 0301 	and.w	r3, r3, #1
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80c2 	beq.w	800fac6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f948:	b2d2      	uxtb	r2, r2
 800f94a:	4611      	mov	r1, r2
 800f94c:	4618      	mov	r0, r3
 800f94e:	f007 fca6 	bl	801729e <USB_ReadDevInEPInterrupt>
 800f952:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	f003 0301 	and.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d057      	beq.n	800fa0e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	f003 030f 	and.w	r3, r3, #15
 800f964:	2201      	movs	r2, #1
 800f966:	fa02 f303 	lsl.w	r3, r2, r3
 800f96a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	43db      	mvns	r3, r3
 800f978:	69f9      	ldr	r1, [r7, #28]
 800f97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f97e:	4013      	ands	r3, r2
 800f980:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	015a      	lsls	r2, r3, #5
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	4413      	add	r3, r2
 800f98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f98e:	461a      	mov	r2, r3
 800f990:	2301      	movs	r3, #1
 800f992:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	691b      	ldr	r3, [r3, #16]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d132      	bne.n	800fa02 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f99c:	6879      	ldr	r1, [r7, #4]
 800f99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	440b      	add	r3, r1
 800f9aa:	334c      	adds	r3, #76	; 0x4c
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	00db      	lsls	r3, r3, #3
 800f9b6:	4413      	add	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4403      	add	r3, r0
 800f9bc:	3348      	adds	r3, #72	; 0x48
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4419      	add	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	00db      	lsls	r3, r3, #3
 800f9ca:	4413      	add	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4403      	add	r3, r0
 800f9d0:	334c      	adds	r3, #76	; 0x4c
 800f9d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d113      	bne.n	800fa02 <HAL_PCD_IRQHandler+0x3a2>
 800f9da:	6879      	ldr	r1, [r7, #4]
 800f9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9de:	4613      	mov	r3, r2
 800f9e0:	00db      	lsls	r3, r3, #3
 800f9e2:	4413      	add	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	440b      	add	r3, r1
 800f9e8:	3354      	adds	r3, #84	; 0x54
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d108      	bne.n	800fa02 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	2101      	movs	r1, #1
 800f9fe:	f007 fcaf 	bl	8017360 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	4619      	mov	r1, r3
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f00b f9da 	bl	801adc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	f003 0308 	and.w	r3, r3, #8
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d008      	beq.n	800fa2a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	015a      	lsls	r2, r3, #5
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	4413      	add	r3, r2
 800fa20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa24:	461a      	mov	r2, r3
 800fa26:	2308      	movs	r3, #8
 800fa28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f003 0310 	and.w	r3, r3, #16
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d008      	beq.n	800fa46 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	461a      	mov	r2, r3
 800fa42:	2310      	movs	r3, #16
 800fa44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d008      	beq.n	800fa62 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	015a      	lsls	r2, r3, #5
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	4413      	add	r3, r2
 800fa58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	2340      	movs	r3, #64	; 0x40
 800fa60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	f003 0302 	and.w	r3, r3, #2
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d023      	beq.n	800fab4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800fa6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa6e:	6a38      	ldr	r0, [r7, #32]
 800fa70:	f006 fb82 	bl	8016178 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800fa74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa76:	4613      	mov	r3, r2
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	4413      	add	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	3338      	adds	r3, #56	; 0x38
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	4413      	add	r3, r2
 800fa84:	3304      	adds	r3, #4
 800fa86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	78db      	ldrb	r3, [r3, #3]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d108      	bne.n	800faa2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2200      	movs	r2, #0
 800fa94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f00b fa27 	bl	801aef0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	015a      	lsls	r2, r3, #5
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	4413      	add	r3, r2
 800faaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faae:	461a      	mov	r2, r3
 800fab0:	2302      	movs	r3, #2
 800fab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d003      	beq.n	800fac6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800fabe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 fd08 	bl	80104d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	3301      	adds	r3, #1
 800faca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800facc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800face:	085b      	lsrs	r3, r3, #1
 800fad0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800fad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f47f af2e 	bne.w	800f936 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4618      	mov	r0, r3
 800fae0:	f007 fb78 	bl	80171d4 <USB_ReadInterrupts>
 800fae4:	4603      	mov	r3, r0
 800fae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800faea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faee:	d122      	bne.n	800fb36 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	69fa      	ldr	r2, [r7, #28]
 800fafa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fafe:	f023 0301 	bic.w	r3, r3, #1
 800fb02:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d108      	bne.n	800fb20 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fb16:	2100      	movs	r1, #0
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 ff13 	bl	8010944 <HAL_PCDEx_LPM_Callback>
 800fb1e:	e002      	b.n	800fb26 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f00b f9c5 	bl	801aeb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	695a      	ldr	r2, [r3, #20]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fb34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f007 fb4a 	bl	80171d4 <USB_ReadInterrupts>
 800fb40:	4603      	mov	r3, r0
 800fb42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb4a:	d112      	bne.n	800fb72 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d102      	bne.n	800fb62 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f00b f981 	bl	801ae64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	695a      	ldr	r2, [r3, #20]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fb70:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f007 fb2c 	bl	80171d4 <USB_ReadInterrupts>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb86:	d121      	bne.n	800fbcc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	695a      	ldr	r2, [r3, #20]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800fb96:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d111      	bne.n	800fbc6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbb0:	089b      	lsrs	r3, r3, #2
 800fbb2:	f003 020f 	and.w	r2, r3, #15
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fbbc:	2101      	movs	r1, #1
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fec0 	bl	8010944 <HAL_PCDEx_LPM_Callback>
 800fbc4:	e002      	b.n	800fbcc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f00b f94c 	bl	801ae64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f007 faff 	bl	80171d4 <USB_ReadInterrupts>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fbdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbe0:	f040 80b7 	bne.w	800fd52 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	69fa      	ldr	r2, [r7, #28]
 800fbee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbf2:	f023 0301 	bic.w	r3, r3, #1
 800fbf6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2110      	movs	r1, #16
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f006 faba 	bl	8016178 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc04:	2300      	movs	r3, #0
 800fc06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc08:	e046      	b.n	800fc98 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	015a      	lsls	r2, r3, #5
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	4413      	add	r3, r2
 800fc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc16:	461a      	mov	r2, r3
 800fc18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	015a      	lsls	r2, r3, #5
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	4413      	add	r3, r2
 800fc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc2e:	0151      	lsls	r1, r2, #5
 800fc30:	69fa      	ldr	r2, [r7, #28]
 800fc32:	440a      	add	r2, r1
 800fc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	015a      	lsls	r2, r3, #5
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	4413      	add	r3, r2
 800fc46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	015a      	lsls	r2, r3, #5
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	4413      	add	r3, r2
 800fc5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc62:	0151      	lsls	r1, r2, #5
 800fc64:	69fa      	ldr	r2, [r7, #28]
 800fc66:	440a      	add	r2, r1
 800fc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	015a      	lsls	r2, r3, #5
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	4413      	add	r3, r2
 800fc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc82:	0151      	lsls	r1, r2, #5
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	440a      	add	r2, r1
 800fc88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc94:	3301      	adds	r3, #1
 800fc96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d3b3      	bcc.n	800fc0a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca8:	69db      	ldr	r3, [r3, #28]
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800fcb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d016      	beq.n	800fcec <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcc8:	69fa      	ldr	r2, [r7, #28]
 800fcca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcce:	f043 030b 	orr.w	r3, r3, #11
 800fcd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fce4:	f043 030b 	orr.w	r3, r3, #11
 800fce8:	6453      	str	r3, [r2, #68]	; 0x44
 800fcea:	e015      	b.n	800fd18 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf2:	695a      	ldr	r2, [r3, #20]
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f242 032b 	movw	r3, #8235	; 0x202b
 800fd00:	4313      	orrs	r3, r2
 800fd02:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd12:	f043 030b 	orr.w	r3, r3, #11
 800fd16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	69fa      	ldr	r2, [r7, #28]
 800fd22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fd2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	f007 fb0f 	bl	8017360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	695a      	ldr	r2, [r3, #20]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fd50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f007 fa3c 	bl	80171d4 <USB_ReadInterrupts>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd66:	d124      	bne.n	800fdb2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f007 fad3 	bl	8017318 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f006 fa7b 	bl	8016272 <USB_GetDevSpeed>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	461a      	mov	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681c      	ldr	r4, [r3, #0]
 800fd88:	f001 fd90 	bl	80118ac <HAL_RCC_GetHCLKFreq>
 800fd8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	461a      	mov	r2, r3
 800fd96:	4620      	mov	r0, r4
 800fd98:	f005 ff80 	bl	8015c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f00b f838 	bl	801ae12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	695a      	ldr	r2, [r3, #20]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fdb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f007 fa0c 	bl	80171d4 <USB_ReadInterrupts>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	f003 0308 	and.w	r3, r3, #8
 800fdc2:	2b08      	cmp	r3, #8
 800fdc4:	d10a      	bne.n	800fddc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f00b f815 	bl	801adf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	695a      	ldr	r2, [r3, #20]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f002 0208 	and.w	r2, r2, #8
 800fdda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f007 f9f7 	bl	80171d4 <USB_ReadInterrupts>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdec:	2b80      	cmp	r3, #128	; 0x80
 800fdee:	d122      	bne.n	800fe36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800fdf0:	6a3b      	ldr	r3, [r7, #32]
 800fdf2:	699b      	ldr	r3, [r3, #24]
 800fdf4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
 800fe00:	e014      	b.n	800fe2c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800fe02:	6879      	ldr	r1, [r7, #4]
 800fe04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe06:	4613      	mov	r3, r2
 800fe08:	00db      	lsls	r3, r3, #3
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	440b      	add	r3, r1
 800fe10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d105      	bne.n	800fe26 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fb27 	bl	8010474 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	3301      	adds	r3, #1
 800fe2a:	627b      	str	r3, [r7, #36]	; 0x24
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d3e5      	bcc.n	800fe02 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f007 f9ca 	bl	80171d4 <USB_ReadInterrupts>
 800fe40:	4603      	mov	r3, r0
 800fe42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe4a:	d13b      	bne.n	800fec4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe50:	e02b      	b.n	800feaa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe54:	015a      	lsls	r2, r3, #5
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	4413      	add	r3, r2
 800fe5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe66:	4613      	mov	r3, r2
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	440b      	add	r3, r1
 800fe70:	3340      	adds	r3, #64	; 0x40
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d115      	bne.n	800fea4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800fe78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	da12      	bge.n	800fea4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800fe7e:	6879      	ldr	r1, [r7, #4]
 800fe80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe82:	4613      	mov	r3, r2
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	4413      	add	r3, r2
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	440b      	add	r3, r1
 800fe8c:	333f      	adds	r3, #63	; 0x3f
 800fe8e:	2201      	movs	r2, #1
 800fe90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 fae8 	bl	8010474 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	3301      	adds	r3, #1
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d3ce      	bcc.n	800fe52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	695a      	ldr	r2, [r3, #20]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4618      	mov	r0, r3
 800feca:	f007 f983 	bl	80171d4 <USB_ReadInterrupts>
 800fece:	4603      	mov	r3, r0
 800fed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fed8:	d155      	bne.n	800ff86 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800feda:	2301      	movs	r3, #1
 800fedc:	627b      	str	r3, [r7, #36]	; 0x24
 800fede:	e045      	b.n	800ff6c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	015a      	lsls	r2, r3, #5
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	4413      	add	r3, r2
 800fee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fef0:	6879      	ldr	r1, [r7, #4]
 800fef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef4:	4613      	mov	r3, r2
 800fef6:	00db      	lsls	r3, r3, #3
 800fef8:	4413      	add	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	440b      	add	r3, r1
 800fefe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d12e      	bne.n	800ff66 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	da2b      	bge.n	800ff66 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ff1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d121      	bne.n	800ff66 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff26:	4613      	mov	r3, r2
 800ff28:	00db      	lsls	r3, r3, #3
 800ff2a:	4413      	add	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	440b      	add	r3, r1
 800ff30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ff34:	2201      	movs	r2, #1
 800ff36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ff38:	6a3b      	ldr	r3, [r7, #32]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff40:	6a3b      	ldr	r3, [r7, #32]
 800ff42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ff44:	6a3b      	ldr	r3, [r7, #32]
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d10a      	bne.n	800ff66 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	69fa      	ldr	r2, [r7, #28]
 800ff5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff62:	6053      	str	r3, [r2, #4]
            break;
 800ff64:	e007      	b.n	800ff76 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ff66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff68:	3301      	adds	r3, #1
 800ff6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d3b4      	bcc.n	800fee0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	695a      	ldr	r2, [r3, #20]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ff84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f007 f922 	bl	80171d4 <USB_ReadInterrupts>
 800ff90:	4603      	mov	r3, r0
 800ff92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff9a:	d10a      	bne.n	800ffb2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f00a ffb9 	bl	801af14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	695a      	ldr	r2, [r3, #20]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ffb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f007 f90c 	bl	80171d4 <USB_ReadInterrupts>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	f003 0304 	and.w	r3, r3, #4
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	d115      	bne.n	800fff2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	f003 0304 	and.w	r3, r3, #4
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f00a ffa9 	bl	801af30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6859      	ldr	r1, [r3, #4]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	69ba      	ldr	r2, [r7, #24]
 800ffea:	430a      	orrs	r2, r1
 800ffec:	605a      	str	r2, [r3, #4]
 800ffee:	e000      	b.n	800fff2 <HAL_PCD_IRQHandler+0x992>
      return;
 800fff0:	bf00      	nop
    }
  }
}
 800fff2:	3734      	adds	r7, #52	; 0x34
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd90      	pop	{r4, r7, pc}

0800fff8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801000a:	2b01      	cmp	r3, #1
 801000c:	d101      	bne.n	8010012 <HAL_PCD_SetAddress+0x1a>
 801000e:	2302      	movs	r3, #2
 8010010:	e013      	b.n	801003a <HAL_PCD_SetAddress+0x42>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	78fa      	ldrb	r2, [r7, #3]
 801001e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	78fa      	ldrb	r2, [r7, #3]
 8010028:	4611      	mov	r1, r2
 801002a:	4618      	mov	r0, r3
 801002c:	f007 f86a 	bl	8017104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b084      	sub	sp, #16
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	4608      	mov	r0, r1
 801004c:	4611      	mov	r1, r2
 801004e:	461a      	mov	r2, r3
 8010050:	4603      	mov	r3, r0
 8010052:	70fb      	strb	r3, [r7, #3]
 8010054:	460b      	mov	r3, r1
 8010056:	803b      	strh	r3, [r7, #0]
 8010058:	4613      	mov	r3, r2
 801005a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801005c:	2300      	movs	r3, #0
 801005e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010064:	2b00      	cmp	r3, #0
 8010066:	da0f      	bge.n	8010088 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010068:	78fb      	ldrb	r3, [r7, #3]
 801006a:	f003 020f 	and.w	r2, r3, #15
 801006e:	4613      	mov	r3, r2
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	4413      	add	r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	3338      	adds	r3, #56	; 0x38
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	4413      	add	r3, r2
 801007c:	3304      	adds	r3, #4
 801007e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2201      	movs	r2, #1
 8010084:	705a      	strb	r2, [r3, #1]
 8010086:	e00f      	b.n	80100a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010088:	78fb      	ldrb	r3, [r7, #3]
 801008a:	f003 020f 	and.w	r2, r3, #15
 801008e:	4613      	mov	r3, r2
 8010090:	00db      	lsls	r3, r3, #3
 8010092:	4413      	add	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	4413      	add	r3, r2
 801009e:	3304      	adds	r3, #4
 80100a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80100a8:	78fb      	ldrb	r3, [r7, #3]
 80100aa:	f003 030f 	and.w	r3, r3, #15
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80100b4:	883a      	ldrh	r2, [r7, #0]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	78ba      	ldrb	r2, [r7, #2]
 80100be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	785b      	ldrb	r3, [r3, #1]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d004      	beq.n	80100d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80100d2:	78bb      	ldrb	r3, [r7, #2]
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d102      	bne.n	80100de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d101      	bne.n	80100ec <HAL_PCD_EP_Open+0xaa>
 80100e8:	2302      	movs	r3, #2
 80100ea:	e00e      	b.n	801010a <HAL_PCD_EP_Open+0xc8>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68f9      	ldr	r1, [r7, #12]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f006 f8de 	bl	80162bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8010108:	7afb      	ldrb	r3, [r7, #11]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
 801011a:	460b      	mov	r3, r1
 801011c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801011e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010122:	2b00      	cmp	r3, #0
 8010124:	da0f      	bge.n	8010146 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010126:	78fb      	ldrb	r3, [r7, #3]
 8010128:	f003 020f 	and.w	r2, r3, #15
 801012c:	4613      	mov	r3, r2
 801012e:	00db      	lsls	r3, r3, #3
 8010130:	4413      	add	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	3338      	adds	r3, #56	; 0x38
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	4413      	add	r3, r2
 801013a:	3304      	adds	r3, #4
 801013c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2201      	movs	r2, #1
 8010142:	705a      	strb	r2, [r3, #1]
 8010144:	e00f      	b.n	8010166 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010146:	78fb      	ldrb	r3, [r7, #3]
 8010148:	f003 020f 	and.w	r2, r3, #15
 801014c:	4613      	mov	r3, r2
 801014e:	00db      	lsls	r3, r3, #3
 8010150:	4413      	add	r3, r2
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	4413      	add	r3, r2
 801015c:	3304      	adds	r3, #4
 801015e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2200      	movs	r2, #0
 8010164:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8010166:	78fb      	ldrb	r3, [r7, #3]
 8010168:	f003 030f 	and.w	r3, r3, #15
 801016c:	b2da      	uxtb	r2, r3
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010178:	2b01      	cmp	r3, #1
 801017a:	d101      	bne.n	8010180 <HAL_PCD_EP_Close+0x6e>
 801017c:	2302      	movs	r3, #2
 801017e:	e00e      	b.n	801019e <HAL_PCD_EP_Close+0x8c>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2201      	movs	r2, #1
 8010184:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68f9      	ldr	r1, [r7, #12]
 801018e:	4618      	mov	r0, r3
 8010190:	f006 f91c 	bl	80163cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801019c:	2300      	movs	r3, #0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b086      	sub	sp, #24
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	603b      	str	r3, [r7, #0]
 80101b2:	460b      	mov	r3, r1
 80101b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80101b6:	7afb      	ldrb	r3, [r7, #11]
 80101b8:	f003 020f 	and.w	r2, r3, #15
 80101bc:	4613      	mov	r3, r2
 80101be:	00db      	lsls	r3, r3, #3
 80101c0:	4413      	add	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80101c8:	68fa      	ldr	r2, [r7, #12]
 80101ca:	4413      	add	r3, r2
 80101cc:	3304      	adds	r3, #4
 80101ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	2200      	movs	r2, #0
 80101e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	2200      	movs	r2, #0
 80101e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80101e8:	7afb      	ldrb	r3, [r7, #11]
 80101ea:	f003 030f 	and.w	r3, r3, #15
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d102      	bne.n	8010202 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010202:	7afb      	ldrb	r3, [r7, #11]
 8010204:	f003 030f 	and.w	r3, r3, #15
 8010208:	2b00      	cmp	r3, #0
 801020a:	d109      	bne.n	8010220 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6818      	ldr	r0, [r3, #0]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	691b      	ldr	r3, [r3, #16]
 8010214:	b2db      	uxtb	r3, r3
 8010216:	461a      	mov	r2, r3
 8010218:	6979      	ldr	r1, [r7, #20]
 801021a:	f006 fc03 	bl	8016a24 <USB_EP0StartXfer>
 801021e:	e008      	b.n	8010232 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6818      	ldr	r0, [r3, #0]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	b2db      	uxtb	r3, r3
 801022a:	461a      	mov	r2, r3
 801022c:	6979      	ldr	r1, [r7, #20]
 801022e:	f006 f9a9 	bl	8016584 <USB_EPStartXfer>
  }

  return HAL_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3718      	adds	r7, #24
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8010248:	78fb      	ldrb	r3, [r7, #3]
 801024a:	f003 020f 	and.w	r2, r3, #15
 801024e:	6879      	ldr	r1, [r7, #4]
 8010250:	4613      	mov	r3, r2
 8010252:	00db      	lsls	r3, r3, #3
 8010254:	4413      	add	r3, r2
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	440b      	add	r3, r1
 801025a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801025e:	681b      	ldr	r3, [r3, #0]
}
 8010260:	4618      	mov	r0, r3
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	607a      	str	r2, [r7, #4]
 8010276:	603b      	str	r3, [r7, #0]
 8010278:	460b      	mov	r3, r1
 801027a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	f003 020f 	and.w	r2, r3, #15
 8010282:	4613      	mov	r3, r2
 8010284:	00db      	lsls	r3, r3, #3
 8010286:	4413      	add	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	3338      	adds	r3, #56	; 0x38
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	3304      	adds	r3, #4
 8010292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	683a      	ldr	r2, [r7, #0]
 801029e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2200      	movs	r2, #0
 80102a4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2201      	movs	r2, #1
 80102aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80102ac:	7afb      	ldrb	r3, [r7, #11]
 80102ae:	f003 030f 	and.w	r3, r3, #15
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	691b      	ldr	r3, [r3, #16]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d102      	bne.n	80102c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80102c6:	7afb      	ldrb	r3, [r7, #11]
 80102c8:	f003 030f 	and.w	r3, r3, #15
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d109      	bne.n	80102e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6818      	ldr	r0, [r3, #0]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	461a      	mov	r2, r3
 80102dc:	6979      	ldr	r1, [r7, #20]
 80102de:	f006 fba1 	bl	8016a24 <USB_EP0StartXfer>
 80102e2:	e008      	b.n	80102f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	461a      	mov	r2, r3
 80102f0:	6979      	ldr	r1, [r7, #20]
 80102f2:	f006 f947 	bl	8016584 <USB_EPStartXfer>
  }

  return HAL_OK;
 80102f6:	2300      	movs	r3, #0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801030c:	78fb      	ldrb	r3, [r7, #3]
 801030e:	f003 020f 	and.w	r2, r3, #15
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	429a      	cmp	r2, r3
 8010318:	d901      	bls.n	801031e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801031a:	2301      	movs	r3, #1
 801031c:	e050      	b.n	80103c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801031e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010322:	2b00      	cmp	r3, #0
 8010324:	da0f      	bge.n	8010346 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010326:	78fb      	ldrb	r3, [r7, #3]
 8010328:	f003 020f 	and.w	r2, r3, #15
 801032c:	4613      	mov	r3, r2
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	4413      	add	r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	3338      	adds	r3, #56	; 0x38
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	4413      	add	r3, r2
 801033a:	3304      	adds	r3, #4
 801033c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2201      	movs	r2, #1
 8010342:	705a      	strb	r2, [r3, #1]
 8010344:	e00d      	b.n	8010362 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010346:	78fa      	ldrb	r2, [r7, #3]
 8010348:	4613      	mov	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	4413      	add	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	4413      	add	r3, r2
 8010358:	3304      	adds	r3, #4
 801035a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2201      	movs	r2, #1
 8010366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	f003 030f 	and.w	r3, r3, #15
 801036e:	b2da      	uxtb	r2, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801037a:	2b01      	cmp	r3, #1
 801037c:	d101      	bne.n	8010382 <HAL_PCD_EP_SetStall+0x82>
 801037e:	2302      	movs	r3, #2
 8010380:	e01e      	b.n	80103c0 <HAL_PCD_EP_SetStall+0xc0>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	68f9      	ldr	r1, [r7, #12]
 8010390:	4618      	mov	r0, r3
 8010392:	f006 fde3 	bl	8016f5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010396:	78fb      	ldrb	r3, [r7, #3]
 8010398:	f003 030f 	and.w	r3, r3, #15
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10a      	bne.n	80103b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6818      	ldr	r0, [r3, #0]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	b2d9      	uxtb	r1, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103b0:	461a      	mov	r2, r3
 80103b2:	f006 ffd5 	bl	8017360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80103be:	2300      	movs	r3, #0
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80103d4:	78fb      	ldrb	r3, [r7, #3]
 80103d6:	f003 020f 	and.w	r2, r3, #15
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d901      	bls.n	80103e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80103e2:	2301      	movs	r3, #1
 80103e4:	e042      	b.n	801046c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80103e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	da0f      	bge.n	801040e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80103ee:	78fb      	ldrb	r3, [r7, #3]
 80103f0:	f003 020f 	and.w	r2, r3, #15
 80103f4:	4613      	mov	r3, r2
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	4413      	add	r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	3338      	adds	r3, #56	; 0x38
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	3304      	adds	r3, #4
 8010404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2201      	movs	r2, #1
 801040a:	705a      	strb	r2, [r3, #1]
 801040c:	e00f      	b.n	801042e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801040e:	78fb      	ldrb	r3, [r7, #3]
 8010410:	f003 020f 	and.w	r2, r3, #15
 8010414:	4613      	mov	r3, r2
 8010416:	00db      	lsls	r3, r3, #3
 8010418:	4413      	add	r3, r2
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	4413      	add	r3, r2
 8010424:	3304      	adds	r3, #4
 8010426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2200      	movs	r2, #0
 8010432:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	f003 030f 	and.w	r3, r3, #15
 801043a:	b2da      	uxtb	r2, r3
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010446:	2b01      	cmp	r3, #1
 8010448:	d101      	bne.n	801044e <HAL_PCD_EP_ClrStall+0x86>
 801044a:	2302      	movs	r3, #2
 801044c:	e00e      	b.n	801046c <HAL_PCD_EP_ClrStall+0xa4>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68f9      	ldr	r1, [r7, #12]
 801045c:	4618      	mov	r0, r3
 801045e:	f006 fdeb 	bl	8017038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	460b      	mov	r3, r1
 801047e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8010480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010484:	2b00      	cmp	r3, #0
 8010486:	da0c      	bge.n	80104a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010488:	78fb      	ldrb	r3, [r7, #3]
 801048a:	f003 020f 	and.w	r2, r3, #15
 801048e:	4613      	mov	r3, r2
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	4413      	add	r3, r2
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	3338      	adds	r3, #56	; 0x38
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	4413      	add	r3, r2
 801049c:	3304      	adds	r3, #4
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	e00c      	b.n	80104bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80104a2:	78fb      	ldrb	r3, [r7, #3]
 80104a4:	f003 020f 	and.w	r2, r3, #15
 80104a8:	4613      	mov	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	4413      	add	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	4413      	add	r3, r2
 80104b8:	3304      	adds	r3, #4
 80104ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	68f9      	ldr	r1, [r7, #12]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f006 fc0a 	bl	8016cdc <USB_EPStopXfer>
 80104c8:	4603      	mov	r3, r0
 80104ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80104cc:	7afb      	ldrb	r3, [r7, #11]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b08a      	sub	sp, #40	; 0x28
 80104da:	af02      	add	r7, sp, #8
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	4613      	mov	r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	4413      	add	r3, r2
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	3338      	adds	r3, #56	; 0x38
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	4413      	add	r3, r2
 80104fa:	3304      	adds	r3, #4
 80104fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6a1a      	ldr	r2, [r3, #32]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	429a      	cmp	r2, r3
 8010508:	d901      	bls.n	801050e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	e06c      	b.n	80105e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	699a      	ldr	r2, [r3, #24]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	429a      	cmp	r2, r3
 8010522:	d902      	bls.n	801052a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	3303      	adds	r3, #3
 801052e:	089b      	lsrs	r3, r3, #2
 8010530:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010532:	e02b      	b.n	801058c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	699a      	ldr	r2, [r3, #24]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6a1b      	ldr	r3, [r3, #32]
 801053c:	1ad3      	subs	r3, r2, r3
 801053e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	69fa      	ldr	r2, [r7, #28]
 8010546:	429a      	cmp	r2, r3
 8010548:	d902      	bls.n	8010550 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	3303      	adds	r3, #3
 8010554:	089b      	lsrs	r3, r3, #2
 8010556:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6919      	ldr	r1, [r3, #16]
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	b2da      	uxtb	r2, r3
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010568:	b2db      	uxtb	r3, r3
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	4603      	mov	r3, r0
 801056e:	6978      	ldr	r0, [r7, #20]
 8010570:	f006 fc5e 	bl	8016e30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	691a      	ldr	r2, [r3, #16]
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	441a      	add	r2, r3
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a1a      	ldr	r2, [r3, #32]
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	441a      	add	r2, r3
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010598:	699b      	ldr	r3, [r3, #24]
 801059a:	b29b      	uxth	r3, r3
 801059c:	69ba      	ldr	r2, [r7, #24]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d809      	bhi.n	80105b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6a1a      	ldr	r2, [r3, #32]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d203      	bcs.n	80105b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1be      	bne.n	8010534 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	699a      	ldr	r2, [r3, #24]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	6a1b      	ldr	r3, [r3, #32]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d811      	bhi.n	80105e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	f003 030f 	and.w	r3, r3, #15
 80105c8:	2201      	movs	r2, #1
 80105ca:	fa02 f303 	lsl.w	r3, r2, r3
 80105ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	43db      	mvns	r3, r3
 80105dc:	6939      	ldr	r1, [r7, #16]
 80105de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105e2:	4013      	ands	r3, r2
 80105e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80105e6:	2300      	movs	r3, #0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3720      	adds	r7, #32
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b088      	sub	sp, #32
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	333c      	adds	r3, #60	; 0x3c
 8010608:	3304      	adds	r3, #4
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	015a      	lsls	r2, r3, #5
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	4413      	add	r3, r2
 8010616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	2b01      	cmp	r3, #1
 8010624:	d17b      	bne.n	801071e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	f003 0308 	and.w	r3, r3, #8
 801062c:	2b00      	cmp	r3, #0
 801062e:	d015      	beq.n	801065c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	4a61      	ldr	r2, [pc, #388]	; (80107b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8010634:	4293      	cmp	r3, r2
 8010636:	f240 80b9 	bls.w	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 80b3 	beq.w	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	015a      	lsls	r2, r3, #5
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	4413      	add	r3, r2
 801064e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010652:	461a      	mov	r2, r3
 8010654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010658:	6093      	str	r3, [r2, #8]
 801065a:	e0a7      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	f003 0320 	and.w	r3, r3, #32
 8010662:	2b00      	cmp	r3, #0
 8010664:	d009      	beq.n	801067a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	015a      	lsls	r2, r3, #5
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	4413      	add	r3, r2
 801066e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010672:	461a      	mov	r2, r3
 8010674:	2320      	movs	r3, #32
 8010676:	6093      	str	r3, [r2, #8]
 8010678:	e098      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010680:	2b00      	cmp	r3, #0
 8010682:	f040 8093 	bne.w	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	4a4b      	ldr	r2, [pc, #300]	; (80107b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d90f      	bls.n	80106ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00a      	beq.n	80106ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	015a      	lsls	r2, r3, #5
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	4413      	add	r3, r2
 80106a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a4:	461a      	mov	r2, r3
 80106a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106aa:	6093      	str	r3, [r2, #8]
 80106ac:	e07e      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	4613      	mov	r3, r2
 80106b2:	00db      	lsls	r3, r3, #3
 80106b4:	4413      	add	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	4413      	add	r3, r2
 80106c0:	3304      	adds	r3, #4
 80106c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	69da      	ldr	r2, [r3, #28]
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	0159      	lsls	r1, r3, #5
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	440b      	add	r3, r1
 80106d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106da:	1ad2      	subs	r2, r2, r3
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d114      	bne.n	8010710 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	699b      	ldr	r3, [r3, #24]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d109      	bne.n	8010702 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80106f8:	461a      	mov	r2, r3
 80106fa:	2101      	movs	r1, #1
 80106fc:	f006 fe30 	bl	8017360 <USB_EP0_OutStart>
 8010700:	e006      	b.n	8010710 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	691a      	ldr	r2, [r3, #16]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	441a      	add	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	b2db      	uxtb	r3, r3
 8010714:	4619      	mov	r1, r3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f00a fb38 	bl	801ad8c <HAL_PCD_DataOutStageCallback>
 801071c:	e046      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	4a26      	ldr	r2, [pc, #152]	; (80107bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d124      	bne.n	8010770 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00a      	beq.n	8010746 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	015a      	lsls	r2, r3, #5
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	4413      	add	r3, r2
 8010738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801073c:	461a      	mov	r2, r3
 801073e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010742:	6093      	str	r3, [r2, #8]
 8010744:	e032      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	f003 0320 	and.w	r3, r3, #32
 801074c:	2b00      	cmp	r3, #0
 801074e:	d008      	beq.n	8010762 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	4413      	add	r3, r2
 8010758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801075c:	461a      	mov	r2, r3
 801075e:	2320      	movs	r3, #32
 8010760:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	b2db      	uxtb	r3, r3
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f00a fb0f 	bl	801ad8c <HAL_PCD_DataOutStageCallback>
 801076e:	e01d      	b.n	80107ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d114      	bne.n	80107a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8010776:	6879      	ldr	r1, [r7, #4]
 8010778:	683a      	ldr	r2, [r7, #0]
 801077a:	4613      	mov	r3, r2
 801077c:	00db      	lsls	r3, r3, #3
 801077e:	4413      	add	r3, r2
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	440b      	add	r3, r1
 8010784:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d108      	bne.n	80107a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6818      	ldr	r0, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010798:	461a      	mov	r2, r3
 801079a:	2100      	movs	r1, #0
 801079c:	f006 fde0 	bl	8017360 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f00a faf0 	bl	801ad8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3720      	adds	r7, #32
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	4f54300a 	.word	0x4f54300a
 80107bc:	4f54310a 	.word	0x4f54310a

080107c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b086      	sub	sp, #24
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	333c      	adds	r3, #60	; 0x3c
 80107d8:	3304      	adds	r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	015a      	lsls	r2, r3, #5
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	4413      	add	r3, r2
 80107e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	4a15      	ldr	r2, [pc, #84]	; (8010848 <PCD_EP_OutSetupPacket_int+0x88>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d90e      	bls.n	8010814 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d009      	beq.n	8010814 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	461a      	mov	r2, r3
 801080e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010812:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f00a faa7 	bl	801ad68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	4a0a      	ldr	r2, [pc, #40]	; (8010848 <PCD_EP_OutSetupPacket_int+0x88>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d90c      	bls.n	801083c <PCD_EP_OutSetupPacket_int+0x7c>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	691b      	ldr	r3, [r3, #16]
 8010826:	2b01      	cmp	r3, #1
 8010828:	d108      	bne.n	801083c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6818      	ldr	r0, [r3, #0]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010834:	461a      	mov	r2, r3
 8010836:	2101      	movs	r1, #1
 8010838:	f006 fd92 	bl	8017360 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801083c:	2300      	movs	r3, #0
}
 801083e:	4618      	mov	r0, r3
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	4f54300a 	.word	0x4f54300a

0801084c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	460b      	mov	r3, r1
 8010856:	70fb      	strb	r3, [r7, #3]
 8010858:	4613      	mov	r3, r2
 801085a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010862:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010864:	78fb      	ldrb	r3, [r7, #3]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d107      	bne.n	801087a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801086a:	883b      	ldrh	r3, [r7, #0]
 801086c:	0419      	lsls	r1, r3, #16
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	430a      	orrs	r2, r1
 8010876:	629a      	str	r2, [r3, #40]	; 0x28
 8010878:	e028      	b.n	80108cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010880:	0c1b      	lsrs	r3, r3, #16
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	4413      	add	r3, r2
 8010886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010888:	2300      	movs	r3, #0
 801088a:	73fb      	strb	r3, [r7, #15]
 801088c:	e00d      	b.n	80108aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	7bfb      	ldrb	r3, [r7, #15]
 8010894:	3340      	adds	r3, #64	; 0x40
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4413      	add	r3, r2
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	0c1b      	lsrs	r3, r3, #16
 801089e:	68ba      	ldr	r2, [r7, #8]
 80108a0:	4413      	add	r3, r2
 80108a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
 80108a6:	3301      	adds	r3, #1
 80108a8:	73fb      	strb	r3, [r7, #15]
 80108aa:	7bfa      	ldrb	r2, [r7, #15]
 80108ac:	78fb      	ldrb	r3, [r7, #3]
 80108ae:	3b01      	subs	r3, #1
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d3ec      	bcc.n	801088e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80108b4:	883b      	ldrh	r3, [r7, #0]
 80108b6:	0418      	lsls	r0, r3, #16
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6819      	ldr	r1, [r3, #0]
 80108bc:	78fb      	ldrb	r3, [r7, #3]
 80108be:	3b01      	subs	r3, #1
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	4302      	orrs	r2, r0
 80108c4:	3340      	adds	r3, #64	; 0x40
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	440b      	add	r3, r1
 80108ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80108da:	b480      	push	{r7}
 80108dc:	b083      	sub	sp, #12
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	887a      	ldrh	r2, [r7, #2]
 80108ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2201      	movs	r2, #1
 801090e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <HAL_PCDEx_ActivateLPM+0x44>)
 801092c:	4313      	orrs	r3, r2
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8010932:	2300      	movs	r3, #0
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	10000003 	.word	0x10000003

08010944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	460b      	mov	r3, r1
 801094e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010964:	4b19      	ldr	r3, [pc, #100]	; (80109cc <HAL_PWREx_ConfigSupply+0x70>)
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	f003 0304 	and.w	r3, r3, #4
 801096c:	2b04      	cmp	r3, #4
 801096e:	d00a      	beq.n	8010986 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010970:	4b16      	ldr	r3, [pc, #88]	; (80109cc <HAL_PWREx_ConfigSupply+0x70>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	f003 0307 	and.w	r3, r3, #7
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	429a      	cmp	r2, r3
 801097c:	d001      	beq.n	8010982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801097e:	2301      	movs	r3, #1
 8010980:	e01f      	b.n	80109c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	e01d      	b.n	80109c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010986:	4b11      	ldr	r3, [pc, #68]	; (80109cc <HAL_PWREx_ConfigSupply+0x70>)
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	f023 0207 	bic.w	r2, r3, #7
 801098e:	490f      	ldr	r1, [pc, #60]	; (80109cc <HAL_PWREx_ConfigSupply+0x70>)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4313      	orrs	r3, r2
 8010994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010996:	f7fa feab 	bl	800b6f0 <HAL_GetTick>
 801099a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801099c:	e009      	b.n	80109b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801099e:	f7fa fea7 	bl	800b6f0 <HAL_GetTick>
 80109a2:	4602      	mov	r2, r0
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80109ac:	d901      	bls.n	80109b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80109ae:	2301      	movs	r3, #1
 80109b0:	e007      	b.n	80109c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80109b2:	4b06      	ldr	r3, [pc, #24]	; (80109cc <HAL_PWREx_ConfigSupply+0x70>)
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109be:	d1ee      	bne.n	801099e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	58024800 	.word	0x58024800

080109d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80109d0:	b480      	push	{r7}
 80109d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80109d4:	4b05      	ldr	r3, [pc, #20]	; (80109ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	4a04      	ldr	r2, [pc, #16]	; (80109ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80109da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80109de:	60d3      	str	r3, [r2, #12]
}
 80109e0:	bf00      	nop
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	58024800 	.word	0x58024800

080109f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08c      	sub	sp, #48	; 0x30
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d102      	bne.n	8010a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	f000 bc1d 	b.w	801123e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f003 0301 	and.w	r3, r3, #1
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f000 8087 	beq.w	8010b20 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010a12:	4b99      	ldr	r3, [pc, #612]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010a1c:	4b96      	ldr	r3, [pc, #600]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a24:	2b10      	cmp	r3, #16
 8010a26:	d007      	beq.n	8010a38 <HAL_RCC_OscConfig+0x48>
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	2b18      	cmp	r3, #24
 8010a2c:	d110      	bne.n	8010a50 <HAL_RCC_OscConfig+0x60>
 8010a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a30:	f003 0303 	and.w	r3, r3, #3
 8010a34:	2b02      	cmp	r3, #2
 8010a36:	d10b      	bne.n	8010a50 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010a38:	4b8f      	ldr	r3, [pc, #572]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d06c      	beq.n	8010b1e <HAL_RCC_OscConfig+0x12e>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d168      	bne.n	8010b1e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e3f6      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a58:	d106      	bne.n	8010a68 <HAL_RCC_OscConfig+0x78>
 8010a5a:	4b87      	ldr	r3, [pc, #540]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a86      	ldr	r2, [pc, #536]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	e02e      	b.n	8010ac6 <HAL_RCC_OscConfig+0xd6>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10c      	bne.n	8010a8a <HAL_RCC_OscConfig+0x9a>
 8010a70:	4b81      	ldr	r3, [pc, #516]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a80      	ldr	r2, [pc, #512]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	4b7e      	ldr	r3, [pc, #504]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a7d      	ldr	r2, [pc, #500]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	e01d      	b.n	8010ac6 <HAL_RCC_OscConfig+0xd6>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010a92:	d10c      	bne.n	8010aae <HAL_RCC_OscConfig+0xbe>
 8010a94:	4b78      	ldr	r3, [pc, #480]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a77      	ldr	r2, [pc, #476]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010a9e:	6013      	str	r3, [r2, #0]
 8010aa0:	4b75      	ldr	r3, [pc, #468]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a74      	ldr	r2, [pc, #464]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010aaa:	6013      	str	r3, [r2, #0]
 8010aac:	e00b      	b.n	8010ac6 <HAL_RCC_OscConfig+0xd6>
 8010aae:	4b72      	ldr	r3, [pc, #456]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a71      	ldr	r2, [pc, #452]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ab8:	6013      	str	r3, [r2, #0]
 8010aba:	4b6f      	ldr	r3, [pc, #444]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a6e      	ldr	r2, [pc, #440]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ac4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d013      	beq.n	8010af6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ace:	f7fa fe0f 	bl	800b6f0 <HAL_GetTick>
 8010ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010ad4:	e008      	b.n	8010ae8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010ad6:	f7fa fe0b 	bl	800b6f0 <HAL_GetTick>
 8010ada:	4602      	mov	r2, r0
 8010adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	2b64      	cmp	r3, #100	; 0x64
 8010ae2:	d901      	bls.n	8010ae8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e3aa      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010ae8:	4b63      	ldr	r3, [pc, #396]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d0f0      	beq.n	8010ad6 <HAL_RCC_OscConfig+0xe6>
 8010af4:	e014      	b.n	8010b20 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010af6:	f7fa fdfb 	bl	800b6f0 <HAL_GetTick>
 8010afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010afc:	e008      	b.n	8010b10 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010afe:	f7fa fdf7 	bl	800b6f0 <HAL_GetTick>
 8010b02:	4602      	mov	r2, r0
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	2b64      	cmp	r3, #100	; 0x64
 8010b0a:	d901      	bls.n	8010b10 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	e396      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010b10:	4b59      	ldr	r3, [pc, #356]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1f0      	bne.n	8010afe <HAL_RCC_OscConfig+0x10e>
 8010b1c:	e000      	b.n	8010b20 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010b1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f003 0302 	and.w	r3, r3, #2
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f000 80cb 	beq.w	8010cc4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010b2e:	4b52      	ldr	r3, [pc, #328]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b36:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010b38:	4b4f      	ldr	r3, [pc, #316]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b3c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d007      	beq.n	8010b54 <HAL_RCC_OscConfig+0x164>
 8010b44:	6a3b      	ldr	r3, [r7, #32]
 8010b46:	2b18      	cmp	r3, #24
 8010b48:	d156      	bne.n	8010bf8 <HAL_RCC_OscConfig+0x208>
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	f003 0303 	and.w	r3, r3, #3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d151      	bne.n	8010bf8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010b54:	4b48      	ldr	r3, [pc, #288]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 0304 	and.w	r3, r3, #4
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d005      	beq.n	8010b6c <HAL_RCC_OscConfig+0x17c>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d101      	bne.n	8010b6c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e368      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010b6c:	4b42      	ldr	r3, [pc, #264]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f023 0219 	bic.w	r2, r3, #25
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	493f      	ldr	r1, [pc, #252]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010b7e:	f7fa fdb7 	bl	800b6f0 <HAL_GetTick>
 8010b82:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b84:	e008      	b.n	8010b98 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010b86:	f7fa fdb3 	bl	800b6f0 <HAL_GetTick>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	d901      	bls.n	8010b98 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8010b94:	2303      	movs	r3, #3
 8010b96:	e352      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b98:	4b37      	ldr	r3, [pc, #220]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f003 0304 	and.w	r3, r3, #4
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d0f0      	beq.n	8010b86 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ba4:	f7fa fdd4 	bl	800b750 <HAL_GetREVID>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d817      	bhi.n	8010be2 <HAL_RCC_OscConfig+0x1f2>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	691b      	ldr	r3, [r3, #16]
 8010bb6:	2b40      	cmp	r3, #64	; 0x40
 8010bb8:	d108      	bne.n	8010bcc <HAL_RCC_OscConfig+0x1dc>
 8010bba:	4b2f      	ldr	r3, [pc, #188]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010bc2:	4a2d      	ldr	r2, [pc, #180]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010bca:	e07b      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010bcc:	4b2a      	ldr	r3, [pc, #168]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	031b      	lsls	r3, r3, #12
 8010bda:	4927      	ldr	r1, [pc, #156]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010be0:	e070      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010be2:	4b25      	ldr	r3, [pc, #148]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	061b      	lsls	r3, r3, #24
 8010bf0:	4921      	ldr	r1, [pc, #132]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010bf6:	e065      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d048      	beq.n	8010c92 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010c00:	4b1d      	ldr	r3, [pc, #116]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f023 0219 	bic.w	r2, r3, #25
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	491a      	ldr	r1, [pc, #104]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c12:	f7fa fd6d 	bl	800b6f0 <HAL_GetTick>
 8010c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010c18:	e008      	b.n	8010c2c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010c1a:	f7fa fd69 	bl	800b6f0 <HAL_GetTick>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	2b02      	cmp	r3, #2
 8010c26:	d901      	bls.n	8010c2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	e308      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010c2c:	4b12      	ldr	r3, [pc, #72]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f003 0304 	and.w	r3, r3, #4
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d0f0      	beq.n	8010c1a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010c38:	f7fa fd8a 	bl	800b750 <HAL_GetREVID>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d81a      	bhi.n	8010c7c <HAL_RCC_OscConfig+0x28c>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	2b40      	cmp	r3, #64	; 0x40
 8010c4c:	d108      	bne.n	8010c60 <HAL_RCC_OscConfig+0x270>
 8010c4e:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010c56:	4a08      	ldr	r2, [pc, #32]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c5c:	6053      	str	r3, [r2, #4]
 8010c5e:	e031      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
 8010c60:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	691b      	ldr	r3, [r3, #16]
 8010c6c:	031b      	lsls	r3, r3, #12
 8010c6e:	4902      	ldr	r1, [pc, #8]	; (8010c78 <HAL_RCC_OscConfig+0x288>)
 8010c70:	4313      	orrs	r3, r2
 8010c72:	604b      	str	r3, [r1, #4]
 8010c74:	e026      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
 8010c76:	bf00      	nop
 8010c78:	58024400 	.word	0x58024400
 8010c7c:	4b9a      	ldr	r3, [pc, #616]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	691b      	ldr	r3, [r3, #16]
 8010c88:	061b      	lsls	r3, r3, #24
 8010c8a:	4997      	ldr	r1, [pc, #604]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	604b      	str	r3, [r1, #4]
 8010c90:	e018      	b.n	8010cc4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010c92:	4b95      	ldr	r3, [pc, #596]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a94      	ldr	r2, [pc, #592]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010c98:	f023 0301 	bic.w	r3, r3, #1
 8010c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c9e:	f7fa fd27 	bl	800b6f0 <HAL_GetTick>
 8010ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010ca4:	e008      	b.n	8010cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010ca6:	f7fa fd23 	bl	800b6f0 <HAL_GetTick>
 8010caa:	4602      	mov	r2, r0
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	2b02      	cmp	r3, #2
 8010cb2:	d901      	bls.n	8010cb8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	e2c2      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010cb8:	4b8b      	ldr	r3, [pc, #556]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1f0      	bne.n	8010ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f003 0310 	and.w	r3, r3, #16
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f000 80a9 	beq.w	8010e24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010cd2:	4b85      	ldr	r3, [pc, #532]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010cdc:	4b82      	ldr	r3, [pc, #520]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	2b08      	cmp	r3, #8
 8010ce6:	d007      	beq.n	8010cf8 <HAL_RCC_OscConfig+0x308>
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	2b18      	cmp	r3, #24
 8010cec:	d13a      	bne.n	8010d64 <HAL_RCC_OscConfig+0x374>
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f003 0303 	and.w	r3, r3, #3
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d135      	bne.n	8010d64 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010cf8:	4b7b      	ldr	r3, [pc, #492]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d005      	beq.n	8010d10 <HAL_RCC_OscConfig+0x320>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	69db      	ldr	r3, [r3, #28]
 8010d08:	2b80      	cmp	r3, #128	; 0x80
 8010d0a:	d001      	beq.n	8010d10 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e296      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010d10:	f7fa fd1e 	bl	800b750 <HAL_GetREVID>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f241 0203 	movw	r2, #4099	; 0x1003
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d817      	bhi.n	8010d4e <HAL_RCC_OscConfig+0x35e>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	2b20      	cmp	r3, #32
 8010d24:	d108      	bne.n	8010d38 <HAL_RCC_OscConfig+0x348>
 8010d26:	4b70      	ldr	r3, [pc, #448]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010d2e:	4a6e      	ldr	r2, [pc, #440]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010d36:	e075      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010d38:	4b6b      	ldr	r3, [pc, #428]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	069b      	lsls	r3, r3, #26
 8010d46:	4968      	ldr	r1, [pc, #416]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010d4c:	e06a      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010d4e:	4b66      	ldr	r3, [pc, #408]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	061b      	lsls	r3, r3, #24
 8010d5c:	4962      	ldr	r1, [pc, #392]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010d62:	e05f      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	69db      	ldr	r3, [r3, #28]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d042      	beq.n	8010df2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010d6c:	4b5e      	ldr	r3, [pc, #376]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a5d      	ldr	r2, [pc, #372]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d78:	f7fa fcba 	bl	800b6f0 <HAL_GetTick>
 8010d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010d7e:	e008      	b.n	8010d92 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010d80:	f7fa fcb6 	bl	800b6f0 <HAL_GetTick>
 8010d84:	4602      	mov	r2, r0
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d901      	bls.n	8010d92 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8010d8e:	2303      	movs	r3, #3
 8010d90:	e255      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010d92:	4b55      	ldr	r3, [pc, #340]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d0f0      	beq.n	8010d80 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010d9e:	f7fa fcd7 	bl	800b750 <HAL_GetREVID>
 8010da2:	4603      	mov	r3, r0
 8010da4:	f241 0203 	movw	r2, #4099	; 0x1003
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d817      	bhi.n	8010ddc <HAL_RCC_OscConfig+0x3ec>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a1b      	ldr	r3, [r3, #32]
 8010db0:	2b20      	cmp	r3, #32
 8010db2:	d108      	bne.n	8010dc6 <HAL_RCC_OscConfig+0x3d6>
 8010db4:	4b4c      	ldr	r3, [pc, #304]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010dbc:	4a4a      	ldr	r2, [pc, #296]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010dc2:	6053      	str	r3, [r2, #4]
 8010dc4:	e02e      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
 8010dc6:	4b48      	ldr	r3, [pc, #288]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6a1b      	ldr	r3, [r3, #32]
 8010dd2:	069b      	lsls	r3, r3, #26
 8010dd4:	4944      	ldr	r1, [pc, #272]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	604b      	str	r3, [r1, #4]
 8010dda:	e023      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
 8010ddc:	4b42      	ldr	r3, [pc, #264]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6a1b      	ldr	r3, [r3, #32]
 8010de8:	061b      	lsls	r3, r3, #24
 8010dea:	493f      	ldr	r1, [pc, #252]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010dec:	4313      	orrs	r3, r2
 8010dee:	60cb      	str	r3, [r1, #12]
 8010df0:	e018      	b.n	8010e24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010df2:	4b3d      	ldr	r3, [pc, #244]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a3c      	ldr	r2, [pc, #240]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dfe:	f7fa fc77 	bl	800b6f0 <HAL_GetTick>
 8010e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010e04:	e008      	b.n	8010e18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010e06:	f7fa fc73 	bl	800b6f0 <HAL_GetTick>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d901      	bls.n	8010e18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010e14:	2303      	movs	r3, #3
 8010e16:	e212      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010e18:	4b33      	ldr	r3, [pc, #204]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1f0      	bne.n	8010e06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f003 0308 	and.w	r3, r3, #8
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d036      	beq.n	8010e9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	695b      	ldr	r3, [r3, #20]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d019      	beq.n	8010e6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010e38:	4b2b      	ldr	r3, [pc, #172]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e3c:	4a2a      	ldr	r2, [pc, #168]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e3e:	f043 0301 	orr.w	r3, r3, #1
 8010e42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e44:	f7fa fc54 	bl	800b6f0 <HAL_GetTick>
 8010e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010e4a:	e008      	b.n	8010e5e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010e4c:	f7fa fc50 	bl	800b6f0 <HAL_GetTick>
 8010e50:	4602      	mov	r2, r0
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	d901      	bls.n	8010e5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e1ef      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010e5e:	4b22      	ldr	r3, [pc, #136]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e62:	f003 0302 	and.w	r3, r3, #2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d0f0      	beq.n	8010e4c <HAL_RCC_OscConfig+0x45c>
 8010e6a:	e018      	b.n	8010e9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010e6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e70:	4a1d      	ldr	r2, [pc, #116]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e72:	f023 0301 	bic.w	r3, r3, #1
 8010e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e78:	f7fa fc3a 	bl	800b6f0 <HAL_GetTick>
 8010e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010e7e:	e008      	b.n	8010e92 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010e80:	f7fa fc36 	bl	800b6f0 <HAL_GetTick>
 8010e84:	4602      	mov	r2, r0
 8010e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d901      	bls.n	8010e92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8010e8e:	2303      	movs	r3, #3
 8010e90:	e1d5      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010e92:	4b15      	ldr	r3, [pc, #84]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e96:	f003 0302 	and.w	r3, r3, #2
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1f0      	bne.n	8010e80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f003 0320 	and.w	r3, r3, #32
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d039      	beq.n	8010f1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d01c      	beq.n	8010eec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010eb2:	4b0d      	ldr	r3, [pc, #52]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4a0c      	ldr	r2, [pc, #48]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010ebc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010ebe:	f7fa fc17 	bl	800b6f0 <HAL_GetTick>
 8010ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010ec4:	e008      	b.n	8010ed8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010ec6:	f7fa fc13 	bl	800b6f0 <HAL_GetTick>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d901      	bls.n	8010ed8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e1b2      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010ed8:	4b03      	ldr	r3, [pc, #12]	; (8010ee8 <HAL_RCC_OscConfig+0x4f8>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d0f0      	beq.n	8010ec6 <HAL_RCC_OscConfig+0x4d6>
 8010ee4:	e01b      	b.n	8010f1e <HAL_RCC_OscConfig+0x52e>
 8010ee6:	bf00      	nop
 8010ee8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010eec:	4b9b      	ldr	r3, [pc, #620]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a9a      	ldr	r2, [pc, #616]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ef6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010ef8:	f7fa fbfa 	bl	800b6f0 <HAL_GetTick>
 8010efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010efe:	e008      	b.n	8010f12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010f00:	f7fa fbf6 	bl	800b6f0 <HAL_GetTick>
 8010f04:	4602      	mov	r2, r0
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d901      	bls.n	8010f12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8010f0e:	2303      	movs	r3, #3
 8010f10:	e195      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010f12:	4b92      	ldr	r3, [pc, #584]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1f0      	bne.n	8010f00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 0304 	and.w	r3, r3, #4
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f000 8081 	beq.w	801102e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010f2c:	4b8c      	ldr	r3, [pc, #560]	; (8011160 <HAL_RCC_OscConfig+0x770>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a8b      	ldr	r2, [pc, #556]	; (8011160 <HAL_RCC_OscConfig+0x770>)
 8010f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010f38:	f7fa fbda 	bl	800b6f0 <HAL_GetTick>
 8010f3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010f3e:	e008      	b.n	8010f52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010f40:	f7fa fbd6 	bl	800b6f0 <HAL_GetTick>
 8010f44:	4602      	mov	r2, r0
 8010f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	2b64      	cmp	r3, #100	; 0x64
 8010f4c:	d901      	bls.n	8010f52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8010f4e:	2303      	movs	r3, #3
 8010f50:	e175      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010f52:	4b83      	ldr	r3, [pc, #524]	; (8011160 <HAL_RCC_OscConfig+0x770>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0f0      	beq.n	8010f40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d106      	bne.n	8010f74 <HAL_RCC_OscConfig+0x584>
 8010f66:	4b7d      	ldr	r3, [pc, #500]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f6a:	4a7c      	ldr	r2, [pc, #496]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f6c:	f043 0301 	orr.w	r3, r3, #1
 8010f70:	6713      	str	r3, [r2, #112]	; 0x70
 8010f72:	e02d      	b.n	8010fd0 <HAL_RCC_OscConfig+0x5e0>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10c      	bne.n	8010f96 <HAL_RCC_OscConfig+0x5a6>
 8010f7c:	4b77      	ldr	r3, [pc, #476]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f80:	4a76      	ldr	r2, [pc, #472]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f82:	f023 0301 	bic.w	r3, r3, #1
 8010f86:	6713      	str	r3, [r2, #112]	; 0x70
 8010f88:	4b74      	ldr	r3, [pc, #464]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8c:	4a73      	ldr	r2, [pc, #460]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010f8e:	f023 0304 	bic.w	r3, r3, #4
 8010f92:	6713      	str	r3, [r2, #112]	; 0x70
 8010f94:	e01c      	b.n	8010fd0 <HAL_RCC_OscConfig+0x5e0>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	2b05      	cmp	r3, #5
 8010f9c:	d10c      	bne.n	8010fb8 <HAL_RCC_OscConfig+0x5c8>
 8010f9e:	4b6f      	ldr	r3, [pc, #444]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fa2:	4a6e      	ldr	r2, [pc, #440]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fa4:	f043 0304 	orr.w	r3, r3, #4
 8010fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8010faa:	4b6c      	ldr	r3, [pc, #432]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fae:	4a6b      	ldr	r2, [pc, #428]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fb0:	f043 0301 	orr.w	r3, r3, #1
 8010fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8010fb6:	e00b      	b.n	8010fd0 <HAL_RCC_OscConfig+0x5e0>
 8010fb8:	4b68      	ldr	r3, [pc, #416]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fbc:	4a67      	ldr	r2, [pc, #412]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fbe:	f023 0301 	bic.w	r3, r3, #1
 8010fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8010fc4:	4b65      	ldr	r3, [pc, #404]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc8:	4a64      	ldr	r2, [pc, #400]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010fca:	f023 0304 	bic.w	r3, r3, #4
 8010fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d015      	beq.n	8011004 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fd8:	f7fa fb8a 	bl	800b6f0 <HAL_GetTick>
 8010fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010fde:	e00a      	b.n	8010ff6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010fe0:	f7fa fb86 	bl	800b6f0 <HAL_GetTick>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe8:	1ad3      	subs	r3, r2, r3
 8010fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d901      	bls.n	8010ff6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e123      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ff6:	4b59      	ldr	r3, [pc, #356]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8010ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ffa:	f003 0302 	and.w	r3, r3, #2
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0ee      	beq.n	8010fe0 <HAL_RCC_OscConfig+0x5f0>
 8011002:	e014      	b.n	801102e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011004:	f7fa fb74 	bl	800b6f0 <HAL_GetTick>
 8011008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801100a:	e00a      	b.n	8011022 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801100c:	f7fa fb70 	bl	800b6f0 <HAL_GetTick>
 8011010:	4602      	mov	r2, r0
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	f241 3288 	movw	r2, #5000	; 0x1388
 801101a:	4293      	cmp	r3, r2
 801101c:	d901      	bls.n	8011022 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801101e:	2303      	movs	r3, #3
 8011020:	e10d      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011022:	4b4e      	ldr	r3, [pc, #312]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011026:	f003 0302 	and.w	r3, r3, #2
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1ee      	bne.n	801100c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 8102 	beq.w	801123c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011038:	4b48      	ldr	r3, [pc, #288]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 801103a:	691b      	ldr	r3, [r3, #16]
 801103c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011040:	2b18      	cmp	r3, #24
 8011042:	f000 80bd 	beq.w	80111c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104a:	2b02      	cmp	r3, #2
 801104c:	f040 809e 	bne.w	801118c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011050:	4b42      	ldr	r3, [pc, #264]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a41      	ldr	r2, [pc, #260]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801105a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801105c:	f7fa fb48 	bl	800b6f0 <HAL_GetTick>
 8011060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011062:	e008      	b.n	8011076 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011064:	f7fa fb44 	bl	800b6f0 <HAL_GetTick>
 8011068:	4602      	mov	r2, r0
 801106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106c:	1ad3      	subs	r3, r2, r3
 801106e:	2b02      	cmp	r3, #2
 8011070:	d901      	bls.n	8011076 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8011072:	2303      	movs	r3, #3
 8011074:	e0e3      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011076:	4b39      	ldr	r3, [pc, #228]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1f0      	bne.n	8011064 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011082:	4b36      	ldr	r3, [pc, #216]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011086:	4b37      	ldr	r3, [pc, #220]	; (8011164 <HAL_RCC_OscConfig+0x774>)
 8011088:	4013      	ands	r3, r2
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011092:	0112      	lsls	r2, r2, #4
 8011094:	430a      	orrs	r2, r1
 8011096:	4931      	ldr	r1, [pc, #196]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011098:	4313      	orrs	r3, r2
 801109a:	628b      	str	r3, [r1, #40]	; 0x28
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110a0:	3b01      	subs	r3, #1
 80110a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110aa:	3b01      	subs	r3, #1
 80110ac:	025b      	lsls	r3, r3, #9
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	431a      	orrs	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b6:	3b01      	subs	r3, #1
 80110b8:	041b      	lsls	r3, r3, #16
 80110ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80110be:	431a      	orrs	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110c4:	3b01      	subs	r3, #1
 80110c6:	061b      	lsls	r3, r3, #24
 80110c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80110cc:	4923      	ldr	r1, [pc, #140]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110ce:	4313      	orrs	r3, r2
 80110d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80110d2:	4b22      	ldr	r3, [pc, #136]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d6:	4a21      	ldr	r2, [pc, #132]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110d8:	f023 0301 	bic.w	r3, r3, #1
 80110dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80110de:	4b1f      	ldr	r3, [pc, #124]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110e2:	4b21      	ldr	r3, [pc, #132]	; (8011168 <HAL_RCC_OscConfig+0x778>)
 80110e4:	4013      	ands	r3, r2
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80110ea:	00d2      	lsls	r2, r2, #3
 80110ec:	491b      	ldr	r1, [pc, #108]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110ee:	4313      	orrs	r3, r2
 80110f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80110f2:	4b1a      	ldr	r3, [pc, #104]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 80110f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f6:	f023 020c 	bic.w	r2, r3, #12
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110fe:	4917      	ldr	r1, [pc, #92]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011100:	4313      	orrs	r3, r2
 8011102:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011104:	4b15      	ldr	r3, [pc, #84]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011108:	f023 0202 	bic.w	r2, r3, #2
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011110:	4912      	ldr	r1, [pc, #72]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011112:	4313      	orrs	r3, r2
 8011114:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011116:	4b11      	ldr	r3, [pc, #68]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111a:	4a10      	ldr	r2, [pc, #64]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 801111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011122:	4b0e      	ldr	r3, [pc, #56]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011126:	4a0d      	ldr	r2, [pc, #52]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801112c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801112e:	4b0b      	ldr	r3, [pc, #44]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011132:	4a0a      	ldr	r2, [pc, #40]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801113a:	4b08      	ldr	r3, [pc, #32]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 801113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801113e:	4a07      	ldr	r2, [pc, #28]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011140:	f043 0301 	orr.w	r3, r3, #1
 8011144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011146:	4b05      	ldr	r3, [pc, #20]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a04      	ldr	r2, [pc, #16]	; (801115c <HAL_RCC_OscConfig+0x76c>)
 801114c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011152:	f7fa facd 	bl	800b6f0 <HAL_GetTick>
 8011156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011158:	e011      	b.n	801117e <HAL_RCC_OscConfig+0x78e>
 801115a:	bf00      	nop
 801115c:	58024400 	.word	0x58024400
 8011160:	58024800 	.word	0x58024800
 8011164:	fffffc0c 	.word	0xfffffc0c
 8011168:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801116c:	f7fa fac0 	bl	800b6f0 <HAL_GetTick>
 8011170:	4602      	mov	r2, r0
 8011172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	2b02      	cmp	r3, #2
 8011178:	d901      	bls.n	801117e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801117a:	2303      	movs	r3, #3
 801117c:	e05f      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801117e:	4b32      	ldr	r3, [pc, #200]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0f0      	beq.n	801116c <HAL_RCC_OscConfig+0x77c>
 801118a:	e057      	b.n	801123c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801118c:	4b2e      	ldr	r3, [pc, #184]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a2d      	ldr	r2, [pc, #180]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 8011192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011198:	f7fa faaa 	bl	800b6f0 <HAL_GetTick>
 801119c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801119e:	e008      	b.n	80111b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111a0:	f7fa faa6 	bl	800b6f0 <HAL_GetTick>
 80111a4:	4602      	mov	r2, r0
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d901      	bls.n	80111b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80111ae:	2303      	movs	r3, #3
 80111b0:	e045      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80111b2:	4b25      	ldr	r3, [pc, #148]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1f0      	bne.n	80111a0 <HAL_RCC_OscConfig+0x7b0>
 80111be:	e03d      	b.n	801123c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80111c0:	4b21      	ldr	r3, [pc, #132]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 80111c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80111c6:	4b20      	ldr	r3, [pc, #128]	; (8011248 <HAL_RCC_OscConfig+0x858>)
 80111c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d031      	beq.n	8011238 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	f003 0203 	and.w	r2, r3, #3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80111de:	429a      	cmp	r2, r3
 80111e0:	d12a      	bne.n	8011238 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	091b      	lsrs	r3, r3, #4
 80111e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d122      	bne.n	8011238 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80111fe:	429a      	cmp	r2, r3
 8011200:	d11a      	bne.n	8011238 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	0a5b      	lsrs	r3, r3, #9
 8011206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011210:	429a      	cmp	r2, r3
 8011212:	d111      	bne.n	8011238 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	0c1b      	lsrs	r3, r3, #16
 8011218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011220:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011222:	429a      	cmp	r2, r3
 8011224:	d108      	bne.n	8011238 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	0e1b      	lsrs	r3, r3, #24
 801122a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011232:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011234:	429a      	cmp	r2, r3
 8011236:	d001      	beq.n	801123c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8011238:	2301      	movs	r3, #1
 801123a:	e000      	b.n	801123e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3730      	adds	r7, #48	; 0x30
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	58024400 	.word	0x58024400

0801124c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d101      	bne.n	8011260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	e19c      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011260:	4b8a      	ldr	r3, [pc, #552]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f003 030f 	and.w	r3, r3, #15
 8011268:	683a      	ldr	r2, [r7, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d910      	bls.n	8011290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801126e:	4b87      	ldr	r3, [pc, #540]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f023 020f 	bic.w	r2, r3, #15
 8011276:	4985      	ldr	r1, [pc, #532]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	4313      	orrs	r3, r2
 801127c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801127e:	4b83      	ldr	r3, [pc, #524]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f003 030f 	and.w	r3, r3, #15
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	429a      	cmp	r2, r3
 801128a:	d001      	beq.n	8011290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801128c:	2301      	movs	r3, #1
 801128e:	e184      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f003 0304 	and.w	r3, r3, #4
 8011298:	2b00      	cmp	r3, #0
 801129a:	d010      	beq.n	80112be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	691a      	ldr	r2, [r3, #16]
 80112a0:	4b7b      	ldr	r3, [pc, #492]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d908      	bls.n	80112be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80112ac:	4b78      	ldr	r3, [pc, #480]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112ae:	699b      	ldr	r3, [r3, #24]
 80112b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	4975      	ldr	r1, [pc, #468]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112ba:	4313      	orrs	r3, r2
 80112bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f003 0308 	and.w	r3, r3, #8
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d010      	beq.n	80112ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	695a      	ldr	r2, [r3, #20]
 80112ce:	4b70      	ldr	r3, [pc, #448]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112d0:	69db      	ldr	r3, [r3, #28]
 80112d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d908      	bls.n	80112ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80112da:	4b6d      	ldr	r3, [pc, #436]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112dc:	69db      	ldr	r3, [r3, #28]
 80112de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	496a      	ldr	r1, [pc, #424]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112e8:	4313      	orrs	r3, r2
 80112ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f003 0310 	and.w	r3, r3, #16
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d010      	beq.n	801131a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	699a      	ldr	r2, [r3, #24]
 80112fc:	4b64      	ldr	r3, [pc, #400]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80112fe:	69db      	ldr	r3, [r3, #28]
 8011300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011304:	429a      	cmp	r2, r3
 8011306:	d908      	bls.n	801131a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011308:	4b61      	ldr	r3, [pc, #388]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801130a:	69db      	ldr	r3, [r3, #28]
 801130c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	495e      	ldr	r1, [pc, #376]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011316:	4313      	orrs	r3, r2
 8011318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f003 0320 	and.w	r3, r3, #32
 8011322:	2b00      	cmp	r3, #0
 8011324:	d010      	beq.n	8011348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	69da      	ldr	r2, [r3, #28]
 801132a:	4b59      	ldr	r3, [pc, #356]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011332:	429a      	cmp	r2, r3
 8011334:	d908      	bls.n	8011348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8011336:	4b56      	ldr	r3, [pc, #344]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011338:	6a1b      	ldr	r3, [r3, #32]
 801133a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	69db      	ldr	r3, [r3, #28]
 8011342:	4953      	ldr	r1, [pc, #332]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011344:	4313      	orrs	r3, r2
 8011346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f003 0302 	and.w	r3, r3, #2
 8011350:	2b00      	cmp	r3, #0
 8011352:	d010      	beq.n	8011376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	68da      	ldr	r2, [r3, #12]
 8011358:	4b4d      	ldr	r3, [pc, #308]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801135a:	699b      	ldr	r3, [r3, #24]
 801135c:	f003 030f 	and.w	r3, r3, #15
 8011360:	429a      	cmp	r2, r3
 8011362:	d908      	bls.n	8011376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011364:	4b4a      	ldr	r3, [pc, #296]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011366:	699b      	ldr	r3, [r3, #24]
 8011368:	f023 020f 	bic.w	r2, r3, #15
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	4947      	ldr	r1, [pc, #284]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011372:	4313      	orrs	r3, r2
 8011374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f003 0301 	and.w	r3, r3, #1
 801137e:	2b00      	cmp	r3, #0
 8011380:	d055      	beq.n	801142e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011382:	4b43      	ldr	r3, [pc, #268]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011384:	699b      	ldr	r3, [r3, #24]
 8011386:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	4940      	ldr	r1, [pc, #256]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011390:	4313      	orrs	r3, r2
 8011392:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	2b02      	cmp	r3, #2
 801139a:	d107      	bne.n	80113ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801139c:	4b3c      	ldr	r3, [pc, #240]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d121      	bne.n	80113ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e0f6      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	2b03      	cmp	r3, #3
 80113b2:	d107      	bne.n	80113c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80113b4:	4b36      	ldr	r3, [pc, #216]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d115      	bne.n	80113ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e0ea      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d107      	bne.n	80113dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80113cc:	4b30      	ldr	r3, [pc, #192]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d109      	bne.n	80113ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	e0de      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113dc:	4b2c      	ldr	r3, [pc, #176]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f003 0304 	and.w	r3, r3, #4
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d101      	bne.n	80113ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80113e8:	2301      	movs	r3, #1
 80113ea:	e0d6      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80113ec:	4b28      	ldr	r3, [pc, #160]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	f023 0207 	bic.w	r2, r3, #7
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	4925      	ldr	r1, [pc, #148]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 80113fa:	4313      	orrs	r3, r2
 80113fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113fe:	f7fa f977 	bl	800b6f0 <HAL_GetTick>
 8011402:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011404:	e00a      	b.n	801141c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011406:	f7fa f973 	bl	800b6f0 <HAL_GetTick>
 801140a:	4602      	mov	r2, r0
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	f241 3288 	movw	r2, #5000	; 0x1388
 8011414:	4293      	cmp	r3, r2
 8011416:	d901      	bls.n	801141c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8011418:	2303      	movs	r3, #3
 801141a:	e0be      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801141c:	4b1c      	ldr	r3, [pc, #112]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801141e:	691b      	ldr	r3, [r3, #16]
 8011420:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	00db      	lsls	r3, r3, #3
 801142a:	429a      	cmp	r2, r3
 801142c:	d1eb      	bne.n	8011406 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f003 0302 	and.w	r3, r3, #2
 8011436:	2b00      	cmp	r3, #0
 8011438:	d010      	beq.n	801145c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	68da      	ldr	r2, [r3, #12]
 801143e:	4b14      	ldr	r3, [pc, #80]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011440:	699b      	ldr	r3, [r3, #24]
 8011442:	f003 030f 	and.w	r3, r3, #15
 8011446:	429a      	cmp	r2, r3
 8011448:	d208      	bcs.n	801145c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801144a:	4b11      	ldr	r3, [pc, #68]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 801144c:	699b      	ldr	r3, [r3, #24]
 801144e:	f023 020f 	bic.w	r2, r3, #15
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	490e      	ldr	r1, [pc, #56]	; (8011490 <HAL_RCC_ClockConfig+0x244>)
 8011458:	4313      	orrs	r3, r2
 801145a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801145c:	4b0b      	ldr	r3, [pc, #44]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f003 030f 	and.w	r3, r3, #15
 8011464:	683a      	ldr	r2, [r7, #0]
 8011466:	429a      	cmp	r2, r3
 8011468:	d214      	bcs.n	8011494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801146a:	4b08      	ldr	r3, [pc, #32]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f023 020f 	bic.w	r2, r3, #15
 8011472:	4906      	ldr	r1, [pc, #24]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	4313      	orrs	r3, r2
 8011478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801147a:	4b04      	ldr	r3, [pc, #16]	; (801148c <HAL_RCC_ClockConfig+0x240>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 030f 	and.w	r3, r3, #15
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d005      	beq.n	8011494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011488:	2301      	movs	r3, #1
 801148a:	e086      	b.n	801159a <HAL_RCC_ClockConfig+0x34e>
 801148c:	52002000 	.word	0x52002000
 8011490:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f003 0304 	and.w	r3, r3, #4
 801149c:	2b00      	cmp	r3, #0
 801149e:	d010      	beq.n	80114c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	691a      	ldr	r2, [r3, #16]
 80114a4:	4b3f      	ldr	r3, [pc, #252]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114a6:	699b      	ldr	r3, [r3, #24]
 80114a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d208      	bcs.n	80114c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80114b0:	4b3c      	ldr	r3, [pc, #240]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114b2:	699b      	ldr	r3, [r3, #24]
 80114b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	691b      	ldr	r3, [r3, #16]
 80114bc:	4939      	ldr	r1, [pc, #228]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114be:	4313      	orrs	r3, r2
 80114c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f003 0308 	and.w	r3, r3, #8
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d010      	beq.n	80114f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	695a      	ldr	r2, [r3, #20]
 80114d2:	4b34      	ldr	r3, [pc, #208]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114d4:	69db      	ldr	r3, [r3, #28]
 80114d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80114da:	429a      	cmp	r2, r3
 80114dc:	d208      	bcs.n	80114f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80114de:	4b31      	ldr	r3, [pc, #196]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114e0:	69db      	ldr	r3, [r3, #28]
 80114e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	492e      	ldr	r1, [pc, #184]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 80114ec:	4313      	orrs	r3, r2
 80114ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f003 0310 	and.w	r3, r3, #16
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d010      	beq.n	801151e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	699a      	ldr	r2, [r3, #24]
 8011500:	4b28      	ldr	r3, [pc, #160]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 8011502:	69db      	ldr	r3, [r3, #28]
 8011504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011508:	429a      	cmp	r2, r3
 801150a:	d208      	bcs.n	801151e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801150c:	4b25      	ldr	r3, [pc, #148]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	699b      	ldr	r3, [r3, #24]
 8011518:	4922      	ldr	r1, [pc, #136]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 801151a:	4313      	orrs	r3, r2
 801151c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f003 0320 	and.w	r3, r3, #32
 8011526:	2b00      	cmp	r3, #0
 8011528:	d010      	beq.n	801154c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	69da      	ldr	r2, [r3, #28]
 801152e:	4b1d      	ldr	r3, [pc, #116]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 8011530:	6a1b      	ldr	r3, [r3, #32]
 8011532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011536:	429a      	cmp	r2, r3
 8011538:	d208      	bcs.n	801154c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801153a:	4b1a      	ldr	r3, [pc, #104]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 801153c:	6a1b      	ldr	r3, [r3, #32]
 801153e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	69db      	ldr	r3, [r3, #28]
 8011546:	4917      	ldr	r1, [pc, #92]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 8011548:	4313      	orrs	r3, r2
 801154a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801154c:	f000 f834 	bl	80115b8 <HAL_RCC_GetSysClockFreq>
 8011550:	4602      	mov	r2, r0
 8011552:	4b14      	ldr	r3, [pc, #80]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 8011554:	699b      	ldr	r3, [r3, #24]
 8011556:	0a1b      	lsrs	r3, r3, #8
 8011558:	f003 030f 	and.w	r3, r3, #15
 801155c:	4912      	ldr	r1, [pc, #72]	; (80115a8 <HAL_RCC_ClockConfig+0x35c>)
 801155e:	5ccb      	ldrb	r3, [r1, r3]
 8011560:	f003 031f 	and.w	r3, r3, #31
 8011564:	fa22 f303 	lsr.w	r3, r2, r3
 8011568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801156a:	4b0e      	ldr	r3, [pc, #56]	; (80115a4 <HAL_RCC_ClockConfig+0x358>)
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	f003 030f 	and.w	r3, r3, #15
 8011572:	4a0d      	ldr	r2, [pc, #52]	; (80115a8 <HAL_RCC_ClockConfig+0x35c>)
 8011574:	5cd3      	ldrb	r3, [r2, r3]
 8011576:	f003 031f 	and.w	r3, r3, #31
 801157a:	693a      	ldr	r2, [r7, #16]
 801157c:	fa22 f303 	lsr.w	r3, r2, r3
 8011580:	4a0a      	ldr	r2, [pc, #40]	; (80115ac <HAL_RCC_ClockConfig+0x360>)
 8011582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011584:	4a0a      	ldr	r2, [pc, #40]	; (80115b0 <HAL_RCC_ClockConfig+0x364>)
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801158a:	4b0a      	ldr	r3, [pc, #40]	; (80115b4 <HAL_RCC_ClockConfig+0x368>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4618      	mov	r0, r3
 8011590:	f7f9 fe5e 	bl	800b250 <HAL_InitTick>
 8011594:	4603      	mov	r3, r0
 8011596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011598:	7bfb      	ldrb	r3, [r7, #15]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	58024400 	.word	0x58024400
 80115a8:	240084d4 	.word	0x240084d4
 80115ac:	24008014 	.word	0x24008014
 80115b0:	24008010 	.word	0x24008010
 80115b4:	24008018 	.word	0x24008018

080115b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b089      	sub	sp, #36	; 0x24
 80115bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80115be:	4bb3      	ldr	r3, [pc, #716]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115c6:	2b18      	cmp	r3, #24
 80115c8:	f200 8155 	bhi.w	8011876 <HAL_RCC_GetSysClockFreq+0x2be>
 80115cc:	a201      	add	r2, pc, #4	; (adr r2, 80115d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80115ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d2:	bf00      	nop
 80115d4:	08011639 	.word	0x08011639
 80115d8:	08011877 	.word	0x08011877
 80115dc:	08011877 	.word	0x08011877
 80115e0:	08011877 	.word	0x08011877
 80115e4:	08011877 	.word	0x08011877
 80115e8:	08011877 	.word	0x08011877
 80115ec:	08011877 	.word	0x08011877
 80115f0:	08011877 	.word	0x08011877
 80115f4:	0801165f 	.word	0x0801165f
 80115f8:	08011877 	.word	0x08011877
 80115fc:	08011877 	.word	0x08011877
 8011600:	08011877 	.word	0x08011877
 8011604:	08011877 	.word	0x08011877
 8011608:	08011877 	.word	0x08011877
 801160c:	08011877 	.word	0x08011877
 8011610:	08011877 	.word	0x08011877
 8011614:	08011665 	.word	0x08011665
 8011618:	08011877 	.word	0x08011877
 801161c:	08011877 	.word	0x08011877
 8011620:	08011877 	.word	0x08011877
 8011624:	08011877 	.word	0x08011877
 8011628:	08011877 	.word	0x08011877
 801162c:	08011877 	.word	0x08011877
 8011630:	08011877 	.word	0x08011877
 8011634:	0801166b 	.word	0x0801166b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011638:	4b94      	ldr	r3, [pc, #592]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f003 0320 	and.w	r3, r3, #32
 8011640:	2b00      	cmp	r3, #0
 8011642:	d009      	beq.n	8011658 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011644:	4b91      	ldr	r3, [pc, #580]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	08db      	lsrs	r3, r3, #3
 801164a:	f003 0303 	and.w	r3, r3, #3
 801164e:	4a90      	ldr	r2, [pc, #576]	; (8011890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011650:	fa22 f303 	lsr.w	r3, r2, r3
 8011654:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011656:	e111      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011658:	4b8d      	ldr	r3, [pc, #564]	; (8011890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801165a:	61bb      	str	r3, [r7, #24]
    break;
 801165c:	e10e      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801165e:	4b8d      	ldr	r3, [pc, #564]	; (8011894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011660:	61bb      	str	r3, [r7, #24]
    break;
 8011662:	e10b      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011664:	4b8c      	ldr	r3, [pc, #560]	; (8011898 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011666:	61bb      	str	r3, [r7, #24]
    break;
 8011668:	e108      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801166a:	4b88      	ldr	r3, [pc, #544]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801166e:	f003 0303 	and.w	r3, r3, #3
 8011672:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011674:	4b85      	ldr	r3, [pc, #532]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011678:	091b      	lsrs	r3, r3, #4
 801167a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801167e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011680:	4b82      	ldr	r3, [pc, #520]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011684:	f003 0301 	and.w	r3, r3, #1
 8011688:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801168a:	4b80      	ldr	r3, [pc, #512]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801168e:	08db      	lsrs	r3, r3, #3
 8011690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	fb02 f303 	mul.w	r3, r2, r3
 801169a:	ee07 3a90 	vmov	s15, r3
 801169e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f000 80e1 	beq.w	8011870 <HAL_RCC_GetSysClockFreq+0x2b8>
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	2b02      	cmp	r3, #2
 80116b2:	f000 8083 	beq.w	80117bc <HAL_RCC_GetSysClockFreq+0x204>
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	f200 80a1 	bhi.w	8011800 <HAL_RCC_GetSysClockFreq+0x248>
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d003      	beq.n	80116cc <HAL_RCC_GetSysClockFreq+0x114>
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d056      	beq.n	8011778 <HAL_RCC_GetSysClockFreq+0x1c0>
 80116ca:	e099      	b.n	8011800 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116cc:	4b6f      	ldr	r3, [pc, #444]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f003 0320 	and.w	r3, r3, #32
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d02d      	beq.n	8011734 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80116d8:	4b6c      	ldr	r3, [pc, #432]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	08db      	lsrs	r3, r3, #3
 80116de:	f003 0303 	and.w	r3, r3, #3
 80116e2:	4a6b      	ldr	r2, [pc, #428]	; (8011890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80116e4:	fa22 f303 	lsr.w	r3, r2, r3
 80116e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	ee07 3a90 	vmov	s15, r3
 80116f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	ee07 3a90 	vmov	s15, r3
 80116fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011702:	4b62      	ldr	r3, [pc, #392]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801170a:	ee07 3a90 	vmov	s15, r3
 801170e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011712:	ed97 6a02 	vldr	s12, [r7, #8]
 8011716:	eddf 5a61 	vldr	s11, [pc, #388]	; 801189c <HAL_RCC_GetSysClockFreq+0x2e4>
 801171a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801171e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801172e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8011732:	e087      	b.n	8011844 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	ee07 3a90 	vmov	s15, r3
 801173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801173e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80118a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011746:	4b51      	ldr	r3, [pc, #324]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801174a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801174e:	ee07 3a90 	vmov	s15, r3
 8011752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011756:	ed97 6a02 	vldr	s12, [r7, #8]
 801175a:	eddf 5a50 	vldr	s11, [pc, #320]	; 801189c <HAL_RCC_GetSysClockFreq+0x2e4>
 801175e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801176a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011776:	e065      	b.n	8011844 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	ee07 3a90 	vmov	s15, r3
 801177e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011782:	eddf 6a48 	vldr	s13, [pc, #288]	; 80118a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801178a:	4b40      	ldr	r3, [pc, #256]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011792:	ee07 3a90 	vmov	s15, r3
 8011796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801179a:	ed97 6a02 	vldr	s12, [r7, #8]
 801179e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801189c <HAL_RCC_GetSysClockFreq+0x2e4>
 80117a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117ba:	e043      	b.n	8011844 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	ee07 3a90 	vmov	s15, r3
 80117c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80118a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80117ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117ce:	4b2f      	ldr	r3, [pc, #188]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80117d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117d6:	ee07 3a90 	vmov	s15, r3
 80117da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117de:	ed97 6a02 	vldr	s12, [r7, #8]
 80117e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801189c <HAL_RCC_GetSysClockFreq+0x2e4>
 80117e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117fe:	e021      	b.n	8011844 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	ee07 3a90 	vmov	s15, r3
 8011806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801180a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80118a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801180e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011812:	4b1e      	ldr	r3, [pc, #120]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801181a:	ee07 3a90 	vmov	s15, r3
 801181e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011822:	ed97 6a02 	vldr	s12, [r7, #8]
 8011826:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801189c <HAL_RCC_GetSysClockFreq+0x2e4>
 801182a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801182e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801183e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011842:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011844:	4b11      	ldr	r3, [pc, #68]	; (801188c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011848:	0a5b      	lsrs	r3, r3, #9
 801184a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801184e:	3301      	adds	r3, #1
 8011850:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	ee07 3a90 	vmov	s15, r3
 8011858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801185c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011868:	ee17 3a90 	vmov	r3, s15
 801186c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801186e:	e005      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8011870:	2300      	movs	r3, #0
 8011872:	61bb      	str	r3, [r7, #24]
    break;
 8011874:	e002      	b.n	801187c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011876:	4b07      	ldr	r3, [pc, #28]	; (8011894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011878:	61bb      	str	r3, [r7, #24]
    break;
 801187a:	bf00      	nop
  }

  return sysclockfreq;
 801187c:	69bb      	ldr	r3, [r7, #24]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3724      	adds	r7, #36	; 0x24
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	58024400 	.word	0x58024400
 8011890:	03d09000 	.word	0x03d09000
 8011894:	003d0900 	.word	0x003d0900
 8011898:	007a1200 	.word	0x007a1200
 801189c:	46000000 	.word	0x46000000
 80118a0:	4c742400 	.word	0x4c742400
 80118a4:	4a742400 	.word	0x4a742400
 80118a8:	4af42400 	.word	0x4af42400

080118ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80118b2:	f7ff fe81 	bl	80115b8 <HAL_RCC_GetSysClockFreq>
 80118b6:	4602      	mov	r2, r0
 80118b8:	4b10      	ldr	r3, [pc, #64]	; (80118fc <HAL_RCC_GetHCLKFreq+0x50>)
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	0a1b      	lsrs	r3, r3, #8
 80118be:	f003 030f 	and.w	r3, r3, #15
 80118c2:	490f      	ldr	r1, [pc, #60]	; (8011900 <HAL_RCC_GetHCLKFreq+0x54>)
 80118c4:	5ccb      	ldrb	r3, [r1, r3]
 80118c6:	f003 031f 	and.w	r3, r3, #31
 80118ca:	fa22 f303 	lsr.w	r3, r2, r3
 80118ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80118d0:	4b0a      	ldr	r3, [pc, #40]	; (80118fc <HAL_RCC_GetHCLKFreq+0x50>)
 80118d2:	699b      	ldr	r3, [r3, #24]
 80118d4:	f003 030f 	and.w	r3, r3, #15
 80118d8:	4a09      	ldr	r2, [pc, #36]	; (8011900 <HAL_RCC_GetHCLKFreq+0x54>)
 80118da:	5cd3      	ldrb	r3, [r2, r3]
 80118dc:	f003 031f 	and.w	r3, r3, #31
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	fa22 f303 	lsr.w	r3, r2, r3
 80118e6:	4a07      	ldr	r2, [pc, #28]	; (8011904 <HAL_RCC_GetHCLKFreq+0x58>)
 80118e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80118ea:	4a07      	ldr	r2, [pc, #28]	; (8011908 <HAL_RCC_GetHCLKFreq+0x5c>)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80118f0:	4b04      	ldr	r3, [pc, #16]	; (8011904 <HAL_RCC_GetHCLKFreq+0x58>)
 80118f2:	681b      	ldr	r3, [r3, #0]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	58024400 	.word	0x58024400
 8011900:	240084d4 	.word	0x240084d4
 8011904:	24008014 	.word	0x24008014
 8011908:	24008010 	.word	0x24008010

0801190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011910:	f7ff ffcc 	bl	80118ac <HAL_RCC_GetHCLKFreq>
 8011914:	4602      	mov	r2, r0
 8011916:	4b06      	ldr	r3, [pc, #24]	; (8011930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011918:	69db      	ldr	r3, [r3, #28]
 801191a:	091b      	lsrs	r3, r3, #4
 801191c:	f003 0307 	and.w	r3, r3, #7
 8011920:	4904      	ldr	r1, [pc, #16]	; (8011934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011922:	5ccb      	ldrb	r3, [r1, r3]
 8011924:	f003 031f 	and.w	r3, r3, #31
 8011928:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801192c:	4618      	mov	r0, r3
 801192e:	bd80      	pop	{r7, pc}
 8011930:	58024400 	.word	0x58024400
 8011934:	240084d4 	.word	0x240084d4

08011938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801193c:	f7ff ffb6 	bl	80118ac <HAL_RCC_GetHCLKFreq>
 8011940:	4602      	mov	r2, r0
 8011942:	4b06      	ldr	r3, [pc, #24]	; (801195c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	0a1b      	lsrs	r3, r3, #8
 8011948:	f003 0307 	and.w	r3, r3, #7
 801194c:	4904      	ldr	r1, [pc, #16]	; (8011960 <HAL_RCC_GetPCLK2Freq+0x28>)
 801194e:	5ccb      	ldrb	r3, [r1, r3]
 8011950:	f003 031f 	and.w	r3, r3, #31
 8011954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011958:	4618      	mov	r0, r3
 801195a:	bd80      	pop	{r7, pc}
 801195c:	58024400 	.word	0x58024400
 8011960:	240084d4 	.word	0x240084d4

08011964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	223f      	movs	r2, #63	; 0x3f
 8011972:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011974:	4b1a      	ldr	r3, [pc, #104]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	f003 0207 	and.w	r2, r3, #7
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8011980:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 8011982:	699b      	ldr	r3, [r3, #24]
 8011984:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801198c:	4b14      	ldr	r3, [pc, #80]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 801198e:	699b      	ldr	r3, [r3, #24]
 8011990:	f003 020f 	and.w	r2, r3, #15
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8011998:	4b11      	ldr	r3, [pc, #68]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 801199a:	699b      	ldr	r3, [r3, #24]
 801199c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80119a4:	4b0e      	ldr	r3, [pc, #56]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 80119a6:	69db      	ldr	r3, [r3, #28]
 80119a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80119b0:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80119bc:	4b08      	ldr	r3, [pc, #32]	; (80119e0 <HAL_RCC_GetClockConfig+0x7c>)
 80119be:	6a1b      	ldr	r3, [r3, #32]
 80119c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80119c8:	4b06      	ldr	r3, [pc, #24]	; (80119e4 <HAL_RCC_GetClockConfig+0x80>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f003 020f 	and.w	r2, r3, #15
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	601a      	str	r2, [r3, #0]
}
 80119d4:	bf00      	nop
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	58024400 	.word	0x58024400
 80119e4:	52002000 	.word	0x52002000

080119e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80119f0:	2300      	movs	r3, #0
 80119f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80119f4:	2300      	movs	r3, #0
 80119f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d03f      	beq.n	8011a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a0c:	d02a      	beq.n	8011a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011a0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a12:	d824      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a18:	d018      	beq.n	8011a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a1e:	d81e      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d003      	beq.n	8011a2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a28:	d007      	beq.n	8011a3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011a2a:	e018      	b.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a2c:	4ba3      	ldr	r3, [pc, #652]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a30:	4aa2      	ldr	r2, [pc, #648]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011a38:	e015      	b.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	2102      	movs	r1, #2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f001 f9d5 	bl	8012df0 <RCCEx_PLL2_Config>
 8011a46:	4603      	mov	r3, r0
 8011a48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011a4a:	e00c      	b.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	3324      	adds	r3, #36	; 0x24
 8011a50:	2102      	movs	r1, #2
 8011a52:	4618      	mov	r0, r3
 8011a54:	f001 fa7e 	bl	8012f54 <RCCEx_PLL3_Config>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011a5c:	e003      	b.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	75fb      	strb	r3, [r7, #23]
      break;
 8011a62:	e000      	b.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a66:	7dfb      	ldrb	r3, [r7, #23]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d109      	bne.n	8011a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011a6c:	4b93      	ldr	r3, [pc, #588]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a78:	4990      	ldr	r1, [pc, #576]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8011a7e:	e001      	b.n	8011a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
 8011a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d03d      	beq.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a94:	2b04      	cmp	r3, #4
 8011a96:	d826      	bhi.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8011a98:	a201      	add	r2, pc, #4	; (adr r2, 8011aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8011a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9e:	bf00      	nop
 8011aa0:	08011ab5 	.word	0x08011ab5
 8011aa4:	08011ac3 	.word	0x08011ac3
 8011aa8:	08011ad5 	.word	0x08011ad5
 8011aac:	08011aed 	.word	0x08011aed
 8011ab0:	08011aed 	.word	0x08011aed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ab4:	4b81      	ldr	r3, [pc, #516]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab8:	4a80      	ldr	r2, [pc, #512]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011ac0:	e015      	b.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f001 f991 	bl	8012df0 <RCCEx_PLL2_Config>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011ad2:	e00c      	b.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3324      	adds	r3, #36	; 0x24
 8011ad8:	2100      	movs	r1, #0
 8011ada:	4618      	mov	r0, r3
 8011adc:	f001 fa3a 	bl	8012f54 <RCCEx_PLL3_Config>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011ae4:	e003      	b.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8011aea:	e000      	b.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8011aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d109      	bne.n	8011b08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011af4:	4b71      	ldr	r3, [pc, #452]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011af8:	f023 0207 	bic.w	r2, r3, #7
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b00:	496e      	ldr	r1, [pc, #440]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011b02:	4313      	orrs	r3, r2
 8011b04:	650b      	str	r3, [r1, #80]	; 0x50
 8011b06:	e001      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b08:	7dfb      	ldrb	r3, [r7, #23]
 8011b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d042      	beq.n	8011b9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b20:	d02b      	beq.n	8011b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8011b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b26:	d825      	bhi.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011b28:	2bc0      	cmp	r3, #192	; 0xc0
 8011b2a:	d028      	beq.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011b2c:	2bc0      	cmp	r3, #192	; 0xc0
 8011b2e:	d821      	bhi.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011b30:	2b80      	cmp	r3, #128	; 0x80
 8011b32:	d016      	beq.n	8011b62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011b34:	2b80      	cmp	r3, #128	; 0x80
 8011b36:	d81d      	bhi.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8011b3c:	2b40      	cmp	r3, #64	; 0x40
 8011b3e:	d007      	beq.n	8011b50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011b40:	e018      	b.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b42:	4b5e      	ldr	r3, [pc, #376]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	4a5d      	ldr	r2, [pc, #372]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011b4e:	e017      	b.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3304      	adds	r3, #4
 8011b54:	2100      	movs	r1, #0
 8011b56:	4618      	mov	r0, r3
 8011b58:	f001 f94a 	bl	8012df0 <RCCEx_PLL2_Config>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011b60:	e00e      	b.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	3324      	adds	r3, #36	; 0x24
 8011b66:	2100      	movs	r1, #0
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 f9f3 	bl	8012f54 <RCCEx_PLL3_Config>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011b72:	e005      	b.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011b74:	2301      	movs	r3, #1
 8011b76:	75fb      	strb	r3, [r7, #23]
      break;
 8011b78:	e002      	b.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011b7a:	bf00      	nop
 8011b7c:	e000      	b.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8011b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b80:	7dfb      	ldrb	r3, [r7, #23]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d109      	bne.n	8011b9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011b86:	4b4d      	ldr	r3, [pc, #308]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b92:	494a      	ldr	r1, [pc, #296]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011b94:	4313      	orrs	r3, r2
 8011b96:	650b      	str	r3, [r1, #80]	; 0x50
 8011b98:	e001      	b.n	8011b9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b9a:	7dfb      	ldrb	r3, [r7, #23]
 8011b9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d049      	beq.n	8011c3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011bb4:	d030      	beq.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8011bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011bba:	d82a      	bhi.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011bbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011bc0:	d02c      	beq.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011bc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011bc6:	d824      	bhi.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011bcc:	d018      	beq.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8011bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011bd2:	d81e      	bhi.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d003      	beq.n	8011be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8011bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011bdc:	d007      	beq.n	8011bee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011bde:	e018      	b.n	8011c12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011be0:	4b36      	ldr	r3, [pc, #216]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be4:	4a35      	ldr	r2, [pc, #212]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011bec:	e017      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f001 f8fb 	bl	8012df0 <RCCEx_PLL2_Config>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011bfe:	e00e      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	3324      	adds	r3, #36	; 0x24
 8011c04:	2100      	movs	r1, #0
 8011c06:	4618      	mov	r0, r3
 8011c08:	f001 f9a4 	bl	8012f54 <RCCEx_PLL3_Config>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011c10:	e005      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011c12:	2301      	movs	r3, #1
 8011c14:	75fb      	strb	r3, [r7, #23]
      break;
 8011c16:	e002      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011c18:	bf00      	nop
 8011c1a:	e000      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d10a      	bne.n	8011c3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011c24:	4b25      	ldr	r3, [pc, #148]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011c32:	4922      	ldr	r1, [pc, #136]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011c34:	4313      	orrs	r3, r2
 8011c36:	658b      	str	r3, [r1, #88]	; 0x58
 8011c38:	e001      	b.n	8011c3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d04b      	beq.n	8011ce2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c54:	d030      	beq.n	8011cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011c56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c5a:	d82a      	bhi.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011c5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011c60:	d02e      	beq.n	8011cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8011c62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011c66:	d824      	bhi.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011c6c:	d018      	beq.n	8011ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8011c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011c72:	d81e      	bhi.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d003      	beq.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c7c:	d007      	beq.n	8011c8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011c7e:	e018      	b.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c80:	4b0e      	ldr	r3, [pc, #56]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c84:	4a0d      	ldr	r2, [pc, #52]	; (8011cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011c8c:	e019      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	3304      	adds	r3, #4
 8011c92:	2100      	movs	r1, #0
 8011c94:	4618      	mov	r0, r3
 8011c96:	f001 f8ab 	bl	8012df0 <RCCEx_PLL2_Config>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011c9e:	e010      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3324      	adds	r3, #36	; 0x24
 8011ca4:	2100      	movs	r1, #0
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f001 f954 	bl	8012f54 <RCCEx_PLL3_Config>
 8011cac:	4603      	mov	r3, r0
 8011cae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011cb0:	e007      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8011cb6:	e004      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8011cb8:	bf00      	nop
 8011cba:	e002      	b.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011cbc:	58024400 	.word	0x58024400
      break;
 8011cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011cc2:	7dfb      	ldrb	r3, [r7, #23]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d10a      	bne.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011cc8:	4b99      	ldr	r3, [pc, #612]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ccc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011cd6:	4996      	ldr	r1, [pc, #600]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	658b      	str	r3, [r1, #88]	; 0x58
 8011cdc:	e001      	b.n	8011ce2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cde:	7dfb      	ldrb	r3, [r7, #23]
 8011ce0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d032      	beq.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf2:	2b30      	cmp	r3, #48	; 0x30
 8011cf4:	d01c      	beq.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8011cf6:	2b30      	cmp	r3, #48	; 0x30
 8011cf8:	d817      	bhi.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011cfa:	2b20      	cmp	r3, #32
 8011cfc:	d00c      	beq.n	8011d18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8011cfe:	2b20      	cmp	r3, #32
 8011d00:	d813      	bhi.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d016      	beq.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8011d06:	2b10      	cmp	r3, #16
 8011d08:	d10f      	bne.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d0a:	4b89      	ldr	r3, [pc, #548]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d0e:	4a88      	ldr	r2, [pc, #544]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011d16:	e00e      	b.n	8011d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	3304      	adds	r3, #4
 8011d1c:	2102      	movs	r1, #2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f001 f866 	bl	8012df0 <RCCEx_PLL2_Config>
 8011d24:	4603      	mov	r3, r0
 8011d26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011d28:	e005      	b.n	8011d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8011d2e:	e002      	b.n	8011d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011d30:	bf00      	nop
 8011d32:	e000      	b.n	8011d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d109      	bne.n	8011d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011d3c:	4b7c      	ldr	r3, [pc, #496]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d48:	4979      	ldr	r1, [pc, #484]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011d4e:	e001      	b.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d50:	7dfb      	ldrb	r3, [r7, #23]
 8011d52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d047      	beq.n	8011df0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d68:	d030      	beq.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8011d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d6e:	d82a      	bhi.n	8011dc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011d74:	d02c      	beq.n	8011dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8011d76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011d7a:	d824      	bhi.n	8011dc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d80:	d018      	beq.n	8011db4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8011d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d86:	d81e      	bhi.n	8011dc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d003      	beq.n	8011d94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8011d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d90:	d007      	beq.n	8011da2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8011d92:	e018      	b.n	8011dc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d94:	4b66      	ldr	r3, [pc, #408]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d98:	4a65      	ldr	r2, [pc, #404]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011da0:	e017      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	3304      	adds	r3, #4
 8011da6:	2100      	movs	r1, #0
 8011da8:	4618      	mov	r0, r3
 8011daa:	f001 f821 	bl	8012df0 <RCCEx_PLL2_Config>
 8011dae:	4603      	mov	r3, r0
 8011db0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011db2:	e00e      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	3324      	adds	r3, #36	; 0x24
 8011db8:	2100      	movs	r1, #0
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f001 f8ca 	bl	8012f54 <RCCEx_PLL3_Config>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011dc4:	e005      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8011dca:	e002      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011dcc:	bf00      	nop
 8011dce:	e000      	b.n	8011dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d109      	bne.n	8011dec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011dd8:	4b55      	ldr	r3, [pc, #340]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ddc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011de4:	4952      	ldr	r1, [pc, #328]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011de6:	4313      	orrs	r3, r2
 8011de8:	650b      	str	r3, [r1, #80]	; 0x50
 8011dea:	e001      	b.n	8011df0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dec:	7dfb      	ldrb	r3, [r7, #23]
 8011dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d049      	beq.n	8011e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011e04:	d02e      	beq.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011e0a:	d828      	bhi.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011e10:	d02a      	beq.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8011e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011e16:	d822      	bhi.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011e1c:	d026      	beq.n	8011e6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8011e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011e22:	d81c      	bhi.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e28:	d010      	beq.n	8011e4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8011e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e2e:	d816      	bhi.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d01d      	beq.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8011e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e38:	d111      	bne.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	2101      	movs	r1, #1
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 ffd5 	bl	8012df0 <RCCEx_PLL2_Config>
 8011e46:	4603      	mov	r3, r0
 8011e48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011e4a:	e012      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3324      	adds	r3, #36	; 0x24
 8011e50:	2101      	movs	r1, #1
 8011e52:	4618      	mov	r0, r3
 8011e54:	f001 f87e 	bl	8012f54 <RCCEx_PLL3_Config>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011e5c:	e009      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	75fb      	strb	r3, [r7, #23]
      break;
 8011e62:	e006      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011e64:	bf00      	nop
 8011e66:	e004      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011e68:	bf00      	nop
 8011e6a:	e002      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011e6c:	bf00      	nop
 8011e6e:	e000      	b.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e72:	7dfb      	ldrb	r3, [r7, #23]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d109      	bne.n	8011e8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011e78:	4b2d      	ldr	r3, [pc, #180]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e84:	492a      	ldr	r1, [pc, #168]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011e86:	4313      	orrs	r3, r2
 8011e88:	650b      	str	r3, [r1, #80]	; 0x50
 8011e8a:	e001      	b.n	8011e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e8c:	7dfb      	ldrb	r3, [r7, #23]
 8011e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d04d      	beq.n	8011f38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ea6:	d02e      	beq.n	8011f06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8011ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011eac:	d828      	bhi.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eb2:	d02a      	beq.n	8011f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8011eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eb8:	d822      	bhi.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011ebe:	d026      	beq.n	8011f0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8011ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011ec4:	d81c      	bhi.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011eca:	d010      	beq.n	8011eee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ed0:	d816      	bhi.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d01d      	beq.n	8011f12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8011ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011eda:	d111      	bne.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f000 ff84 	bl	8012df0 <RCCEx_PLL2_Config>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011eec:	e012      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	3324      	adds	r3, #36	; 0x24
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f001 f82d 	bl	8012f54 <RCCEx_PLL3_Config>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011efe:	e009      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011f00:	2301      	movs	r3, #1
 8011f02:	75fb      	strb	r3, [r7, #23]
      break;
 8011f04:	e006      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011f06:	bf00      	nop
 8011f08:	e004      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011f0a:	bf00      	nop
 8011f0c:	e002      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011f0e:	bf00      	nop
 8011f10:	e000      	b.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f14:	7dfb      	ldrb	r3, [r7, #23]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10c      	bne.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011f1a:	4b05      	ldr	r3, [pc, #20]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011f28:	4901      	ldr	r1, [pc, #4]	; (8011f30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8011f2e:	e003      	b.n	8011f38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011f30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f34:	7dfb      	ldrb	r3, [r7, #23]
 8011f36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d02f      	beq.n	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f4c:	d00e      	beq.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8011f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f52:	d814      	bhi.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d015      	beq.n	8011f84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8011f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f5c:	d10f      	bne.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f5e:	4baf      	ldr	r3, [pc, #700]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f62:	4aae      	ldr	r2, [pc, #696]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011f6a:	e00c      	b.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	3304      	adds	r3, #4
 8011f70:	2101      	movs	r1, #1
 8011f72:	4618      	mov	r0, r3
 8011f74:	f000 ff3c 	bl	8012df0 <RCCEx_PLL2_Config>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011f7c:	e003      	b.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	75fb      	strb	r3, [r7, #23]
      break;
 8011f82:	e000      	b.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8011f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011f86:	7dfb      	ldrb	r3, [r7, #23]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d109      	bne.n	8011fa0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011f8c:	4ba3      	ldr	r3, [pc, #652]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f98:	49a0      	ldr	r1, [pc, #640]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f9a:	4313      	orrs	r3, r2
 8011f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8011f9e:	e001      	b.n	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d032      	beq.n	8012016 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d81b      	bhi.n	8011ff0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8011fb8:	a201      	add	r2, pc, #4	; (adr r2, 8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8011fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbe:	bf00      	nop
 8011fc0:	08011ff7 	.word	0x08011ff7
 8011fc4:	08011fd1 	.word	0x08011fd1
 8011fc8:	08011fdf 	.word	0x08011fdf
 8011fcc:	08011ff7 	.word	0x08011ff7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011fd0:	4b92      	ldr	r3, [pc, #584]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd4:	4a91      	ldr	r2, [pc, #580]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011fdc:	e00c      	b.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3304      	adds	r3, #4
 8011fe2:	2102      	movs	r1, #2
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 ff03 	bl	8012df0 <RCCEx_PLL2_Config>
 8011fea:	4603      	mov	r3, r0
 8011fec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011fee:	e003      	b.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ff4:	e000      	b.n	8011ff8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8011ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ff8:	7dfb      	ldrb	r3, [r7, #23]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d109      	bne.n	8012012 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011ffe:	4b87      	ldr	r3, [pc, #540]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012002:	f023 0203 	bic.w	r2, r3, #3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801200a:	4984      	ldr	r1, [pc, #528]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801200c:	4313      	orrs	r3, r2
 801200e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012010:	e001      	b.n	8012016 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801201e:	2b00      	cmp	r3, #0
 8012020:	f000 8086 	beq.w	8012130 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012024:	4b7e      	ldr	r3, [pc, #504]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4a7d      	ldr	r2, [pc, #500]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801202e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012030:	f7f9 fb5e 	bl	800b6f0 <HAL_GetTick>
 8012034:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012036:	e009      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012038:	f7f9 fb5a 	bl	800b6f0 <HAL_GetTick>
 801203c:	4602      	mov	r2, r0
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	2b64      	cmp	r3, #100	; 0x64
 8012044:	d902      	bls.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8012046:	2303      	movs	r3, #3
 8012048:	75fb      	strb	r3, [r7, #23]
        break;
 801204a:	e005      	b.n	8012058 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801204c:	4b74      	ldr	r3, [pc, #464]	; (8012220 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012054:	2b00      	cmp	r3, #0
 8012056:	d0ef      	beq.n	8012038 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8012058:	7dfb      	ldrb	r3, [r7, #23]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d166      	bne.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801205e:	4b6f      	ldr	r3, [pc, #444]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012068:	4053      	eors	r3, r2
 801206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801206e:	2b00      	cmp	r3, #0
 8012070:	d013      	beq.n	801209a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012072:	4b6a      	ldr	r3, [pc, #424]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801207a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801207c:	4b67      	ldr	r3, [pc, #412]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012080:	4a66      	ldr	r2, [pc, #408]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012086:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012088:	4b64      	ldr	r3, [pc, #400]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801208c:	4a63      	ldr	r2, [pc, #396]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012092:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012094:	4a61      	ldr	r2, [pc, #388]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80120a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120a4:	d115      	bne.n	80120d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80120a6:	f7f9 fb23 	bl	800b6f0 <HAL_GetTick>
 80120aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80120ac:	e00b      	b.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80120ae:	f7f9 fb1f 	bl	800b6f0 <HAL_GetTick>
 80120b2:	4602      	mov	r2, r0
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80120bc:	4293      	cmp	r3, r2
 80120be:	d902      	bls.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80120c0:	2303      	movs	r3, #3
 80120c2:	75fb      	strb	r3, [r7, #23]
            break;
 80120c4:	e005      	b.n	80120d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80120c6:	4b55      	ldr	r3, [pc, #340]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80120c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ca:	f003 0302 	and.w	r3, r3, #2
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d0ed      	beq.n	80120ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80120d2:	7dfb      	ldrb	r3, [r7, #23]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d126      	bne.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80120de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80120e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80120e6:	d10d      	bne.n	8012104 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80120e8:	4b4c      	ldr	r3, [pc, #304]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80120ea:	691b      	ldr	r3, [r3, #16]
 80120ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80120f6:	0919      	lsrs	r1, r3, #4
 80120f8:	4b4a      	ldr	r3, [pc, #296]	; (8012224 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80120fa:	400b      	ands	r3, r1
 80120fc:	4947      	ldr	r1, [pc, #284]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80120fe:	4313      	orrs	r3, r2
 8012100:	610b      	str	r3, [r1, #16]
 8012102:	e005      	b.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8012104:	4b45      	ldr	r3, [pc, #276]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	4a44      	ldr	r2, [pc, #272]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801210a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801210e:	6113      	str	r3, [r2, #16]
 8012110:	4b42      	ldr	r3, [pc, #264]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801211e:	493f      	ldr	r1, [pc, #252]	; (801221c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012120:	4313      	orrs	r3, r2
 8012122:	670b      	str	r3, [r1, #112]	; 0x70
 8012124:	e004      	b.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	75bb      	strb	r3, [r7, #22]
 801212a:	e001      	b.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801212c:	7dfb      	ldrb	r3, [r7, #23]
 801212e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f003 0301 	and.w	r3, r3, #1
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 8085 	beq.w	8012248 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012142:	2b28      	cmp	r3, #40	; 0x28
 8012144:	d866      	bhi.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8012146:	a201      	add	r2, pc, #4	; (adr r2, 801214c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	08012229 	.word	0x08012229
 8012150:	08012215 	.word	0x08012215
 8012154:	08012215 	.word	0x08012215
 8012158:	08012215 	.word	0x08012215
 801215c:	08012215 	.word	0x08012215
 8012160:	08012215 	.word	0x08012215
 8012164:	08012215 	.word	0x08012215
 8012168:	08012215 	.word	0x08012215
 801216c:	080121f1 	.word	0x080121f1
 8012170:	08012215 	.word	0x08012215
 8012174:	08012215 	.word	0x08012215
 8012178:	08012215 	.word	0x08012215
 801217c:	08012215 	.word	0x08012215
 8012180:	08012215 	.word	0x08012215
 8012184:	08012215 	.word	0x08012215
 8012188:	08012215 	.word	0x08012215
 801218c:	08012203 	.word	0x08012203
 8012190:	08012215 	.word	0x08012215
 8012194:	08012215 	.word	0x08012215
 8012198:	08012215 	.word	0x08012215
 801219c:	08012215 	.word	0x08012215
 80121a0:	08012215 	.word	0x08012215
 80121a4:	08012215 	.word	0x08012215
 80121a8:	08012215 	.word	0x08012215
 80121ac:	08012229 	.word	0x08012229
 80121b0:	08012215 	.word	0x08012215
 80121b4:	08012215 	.word	0x08012215
 80121b8:	08012215 	.word	0x08012215
 80121bc:	08012215 	.word	0x08012215
 80121c0:	08012215 	.word	0x08012215
 80121c4:	08012215 	.word	0x08012215
 80121c8:	08012215 	.word	0x08012215
 80121cc:	08012229 	.word	0x08012229
 80121d0:	08012215 	.word	0x08012215
 80121d4:	08012215 	.word	0x08012215
 80121d8:	08012215 	.word	0x08012215
 80121dc:	08012215 	.word	0x08012215
 80121e0:	08012215 	.word	0x08012215
 80121e4:	08012215 	.word	0x08012215
 80121e8:	08012215 	.word	0x08012215
 80121ec:	08012229 	.word	0x08012229
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	3304      	adds	r3, #4
 80121f4:	2101      	movs	r1, #1
 80121f6:	4618      	mov	r0, r3
 80121f8:	f000 fdfa 	bl	8012df0 <RCCEx_PLL2_Config>
 80121fc:	4603      	mov	r3, r0
 80121fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012200:	e013      	b.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	3324      	adds	r3, #36	; 0x24
 8012206:	2101      	movs	r1, #1
 8012208:	4618      	mov	r0, r3
 801220a:	f000 fea3 	bl	8012f54 <RCCEx_PLL3_Config>
 801220e:	4603      	mov	r3, r0
 8012210:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012212:	e00a      	b.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	75fb      	strb	r3, [r7, #23]
      break;
 8012218:	e007      	b.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801221a:	bf00      	nop
 801221c:	58024400 	.word	0x58024400
 8012220:	58024800 	.word	0x58024800
 8012224:	00ffffcf 	.word	0x00ffffcf
      break;
 8012228:	bf00      	nop
    }

    if(ret == HAL_OK)
 801222a:	7dfb      	ldrb	r3, [r7, #23]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d109      	bne.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012230:	4b96      	ldr	r3, [pc, #600]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012234:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801223c:	4993      	ldr	r1, [pc, #588]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801223e:	4313      	orrs	r3, r2
 8012240:	654b      	str	r3, [r1, #84]	; 0x54
 8012242:	e001      	b.n	8012248 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 0302 	and.w	r3, r3, #2
 8012250:	2b00      	cmp	r3, #0
 8012252:	d038      	beq.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012258:	2b05      	cmp	r3, #5
 801225a:	d821      	bhi.n	80122a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801225c:	a201      	add	r2, pc, #4	; (adr r2, 8012264 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012262:	bf00      	nop
 8012264:	080122a7 	.word	0x080122a7
 8012268:	0801227d 	.word	0x0801227d
 801226c:	0801228f 	.word	0x0801228f
 8012270:	080122a7 	.word	0x080122a7
 8012274:	080122a7 	.word	0x080122a7
 8012278:	080122a7 	.word	0x080122a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	3304      	adds	r3, #4
 8012280:	2101      	movs	r1, #1
 8012282:	4618      	mov	r0, r3
 8012284:	f000 fdb4 	bl	8012df0 <RCCEx_PLL2_Config>
 8012288:	4603      	mov	r3, r0
 801228a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801228c:	e00c      	b.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	3324      	adds	r3, #36	; 0x24
 8012292:	2101      	movs	r1, #1
 8012294:	4618      	mov	r0, r3
 8012296:	f000 fe5d 	bl	8012f54 <RCCEx_PLL3_Config>
 801229a:	4603      	mov	r3, r0
 801229c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801229e:	e003      	b.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80122a0:	2301      	movs	r3, #1
 80122a2:	75fb      	strb	r3, [r7, #23]
      break;
 80122a4:	e000      	b.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80122a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d109      	bne.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80122ae:	4b77      	ldr	r3, [pc, #476]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80122b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122b2:	f023 0207 	bic.w	r2, r3, #7
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122ba:	4974      	ldr	r1, [pc, #464]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80122bc:	4313      	orrs	r3, r2
 80122be:	654b      	str	r3, [r1, #84]	; 0x54
 80122c0:	e001      	b.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122c2:	7dfb      	ldrb	r3, [r7, #23]
 80122c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f003 0304 	and.w	r3, r3, #4
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d03a      	beq.n	8012348 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122d8:	2b05      	cmp	r3, #5
 80122da:	d821      	bhi.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80122dc:	a201      	add	r2, pc, #4	; (adr r2, 80122e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80122de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e2:	bf00      	nop
 80122e4:	08012327 	.word	0x08012327
 80122e8:	080122fd 	.word	0x080122fd
 80122ec:	0801230f 	.word	0x0801230f
 80122f0:	08012327 	.word	0x08012327
 80122f4:	08012327 	.word	0x08012327
 80122f8:	08012327 	.word	0x08012327
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3304      	adds	r3, #4
 8012300:	2101      	movs	r1, #1
 8012302:	4618      	mov	r0, r3
 8012304:	f000 fd74 	bl	8012df0 <RCCEx_PLL2_Config>
 8012308:	4603      	mov	r3, r0
 801230a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801230c:	e00c      	b.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	3324      	adds	r3, #36	; 0x24
 8012312:	2101      	movs	r1, #1
 8012314:	4618      	mov	r0, r3
 8012316:	f000 fe1d 	bl	8012f54 <RCCEx_PLL3_Config>
 801231a:	4603      	mov	r3, r0
 801231c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801231e:	e003      	b.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012320:	2301      	movs	r3, #1
 8012322:	75fb      	strb	r3, [r7, #23]
      break;
 8012324:	e000      	b.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8012326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012328:	7dfb      	ldrb	r3, [r7, #23]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d10a      	bne.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801232e:	4b57      	ldr	r3, [pc, #348]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012332:	f023 0207 	bic.w	r2, r3, #7
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801233c:	4953      	ldr	r1, [pc, #332]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801233e:	4313      	orrs	r3, r2
 8012340:	658b      	str	r3, [r1, #88]	; 0x58
 8012342:	e001      	b.n	8012348 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012344:	7dfb      	ldrb	r3, [r7, #23]
 8012346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f003 0320 	and.w	r3, r3, #32
 8012350:	2b00      	cmp	r3, #0
 8012352:	d04b      	beq.n	80123ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801235e:	d02e      	beq.n	80123be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8012360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012364:	d828      	bhi.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801236a:	d02a      	beq.n	80123c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012370:	d822      	bhi.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012376:	d026      	beq.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8012378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801237c:	d81c      	bhi.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012382:	d010      	beq.n	80123a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8012384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012388:	d816      	bhi.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801238a:	2b00      	cmp	r3, #0
 801238c:	d01d      	beq.n	80123ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801238e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012392:	d111      	bne.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	3304      	adds	r3, #4
 8012398:	2100      	movs	r1, #0
 801239a:	4618      	mov	r0, r3
 801239c:	f000 fd28 	bl	8012df0 <RCCEx_PLL2_Config>
 80123a0:	4603      	mov	r3, r0
 80123a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80123a4:	e012      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	3324      	adds	r3, #36	; 0x24
 80123aa:	2102      	movs	r1, #2
 80123ac:	4618      	mov	r0, r3
 80123ae:	f000 fdd1 	bl	8012f54 <RCCEx_PLL3_Config>
 80123b2:	4603      	mov	r3, r0
 80123b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80123b6:	e009      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80123b8:	2301      	movs	r3, #1
 80123ba:	75fb      	strb	r3, [r7, #23]
      break;
 80123bc:	e006      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80123be:	bf00      	nop
 80123c0:	e004      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80123c2:	bf00      	nop
 80123c4:	e002      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80123c6:	bf00      	nop
 80123c8:	e000      	b.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80123ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10a      	bne.n	80123e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80123d2:	4b2e      	ldr	r3, [pc, #184]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80123d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123e0:	492a      	ldr	r1, [pc, #168]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80123e2:	4313      	orrs	r3, r2
 80123e4:	654b      	str	r3, [r1, #84]	; 0x54
 80123e6:	e001      	b.n	80123ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d04d      	beq.n	8012494 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80123fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012402:	d02e      	beq.n	8012462 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8012404:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012408:	d828      	bhi.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801240e:	d02a      	beq.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8012410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012414:	d822      	bhi.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801241a:	d026      	beq.n	801246a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801241c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012420:	d81c      	bhi.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012426:	d010      	beq.n	801244a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8012428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801242c:	d816      	bhi.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801242e:	2b00      	cmp	r3, #0
 8012430:	d01d      	beq.n	801246e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8012432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012436:	d111      	bne.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3304      	adds	r3, #4
 801243c:	2100      	movs	r1, #0
 801243e:	4618      	mov	r0, r3
 8012440:	f000 fcd6 	bl	8012df0 <RCCEx_PLL2_Config>
 8012444:	4603      	mov	r3, r0
 8012446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8012448:	e012      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3324      	adds	r3, #36	; 0x24
 801244e:	2102      	movs	r1, #2
 8012450:	4618      	mov	r0, r3
 8012452:	f000 fd7f 	bl	8012f54 <RCCEx_PLL3_Config>
 8012456:	4603      	mov	r3, r0
 8012458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801245a:	e009      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801245c:	2301      	movs	r3, #1
 801245e:	75fb      	strb	r3, [r7, #23]
      break;
 8012460:	e006      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012462:	bf00      	nop
 8012464:	e004      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012466:	bf00      	nop
 8012468:	e002      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801246a:	bf00      	nop
 801246c:	e000      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801246e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012470:	7dfb      	ldrb	r3, [r7, #23]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d10c      	bne.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012476:	4b05      	ldr	r3, [pc, #20]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801247a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012484:	4901      	ldr	r1, [pc, #4]	; (801248c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012486:	4313      	orrs	r3, r2
 8012488:	658b      	str	r3, [r1, #88]	; 0x58
 801248a:	e003      	b.n	8012494 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801248c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012490:	7dfb      	ldrb	r3, [r7, #23]
 8012492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801249c:	2b00      	cmp	r3, #0
 801249e:	d04b      	beq.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80124a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80124aa:	d02e      	beq.n	801250a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80124ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80124b0:	d828      	bhi.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80124b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124b6:	d02a      	beq.n	801250e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80124b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124bc:	d822      	bhi.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80124be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80124c2:	d026      	beq.n	8012512 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80124c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80124c8:	d81c      	bhi.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80124ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124ce:	d010      	beq.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80124d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124d4:	d816      	bhi.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d01d      	beq.n	8012516 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80124da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80124de:	d111      	bne.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3304      	adds	r3, #4
 80124e4:	2100      	movs	r1, #0
 80124e6:	4618      	mov	r0, r3
 80124e8:	f000 fc82 	bl	8012df0 <RCCEx_PLL2_Config>
 80124ec:	4603      	mov	r3, r0
 80124ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80124f0:	e012      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3324      	adds	r3, #36	; 0x24
 80124f6:	2102      	movs	r1, #2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 fd2b 	bl	8012f54 <RCCEx_PLL3_Config>
 80124fe:	4603      	mov	r3, r0
 8012500:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012502:	e009      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012504:	2301      	movs	r3, #1
 8012506:	75fb      	strb	r3, [r7, #23]
      break;
 8012508:	e006      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801250a:	bf00      	nop
 801250c:	e004      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801250e:	bf00      	nop
 8012510:	e002      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012512:	bf00      	nop
 8012514:	e000      	b.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012518:	7dfb      	ldrb	r3, [r7, #23]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10a      	bne.n	8012534 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801251e:	4b9d      	ldr	r3, [pc, #628]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801252c:	4999      	ldr	r1, [pc, #612]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801252e:	4313      	orrs	r3, r2
 8012530:	658b      	str	r3, [r1, #88]	; 0x58
 8012532:	e001      	b.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f003 0308 	and.w	r3, r3, #8
 8012540:	2b00      	cmp	r3, #0
 8012542:	d01a      	beq.n	801257a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801254e:	d10a      	bne.n	8012566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	3324      	adds	r3, #36	; 0x24
 8012554:	2102      	movs	r1, #2
 8012556:	4618      	mov	r0, r3
 8012558:	f000 fcfc 	bl	8012f54 <RCCEx_PLL3_Config>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d001      	beq.n	8012566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8012566:	4b8b      	ldr	r3, [pc, #556]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801256a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012574:	4987      	ldr	r1, [pc, #540]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012576:	4313      	orrs	r3, r2
 8012578:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f003 0310 	and.w	r3, r3, #16
 8012582:	2b00      	cmp	r3, #0
 8012584:	d01a      	beq.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801258c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012590:	d10a      	bne.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	3324      	adds	r3, #36	; 0x24
 8012596:	2102      	movs	r1, #2
 8012598:	4618      	mov	r0, r3
 801259a:	f000 fcdb 	bl	8012f54 <RCCEx_PLL3_Config>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d001      	beq.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80125a4:	2301      	movs	r3, #1
 80125a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80125a8:	4b7a      	ldr	r3, [pc, #488]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80125aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80125b6:	4977      	ldr	r1, [pc, #476]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80125b8:	4313      	orrs	r3, r2
 80125ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d034      	beq.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80125ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80125d2:	d01d      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80125d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80125d8:	d817      	bhi.n	801260a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d003      	beq.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80125de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125e2:	d009      	beq.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80125e4:	e011      	b.n	801260a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3304      	adds	r3, #4
 80125ea:	2100      	movs	r1, #0
 80125ec:	4618      	mov	r0, r3
 80125ee:	f000 fbff 	bl	8012df0 <RCCEx_PLL2_Config>
 80125f2:	4603      	mov	r3, r0
 80125f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80125f6:	e00c      	b.n	8012612 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	3324      	adds	r3, #36	; 0x24
 80125fc:	2102      	movs	r1, #2
 80125fe:	4618      	mov	r0, r3
 8012600:	f000 fca8 	bl	8012f54 <RCCEx_PLL3_Config>
 8012604:	4603      	mov	r3, r0
 8012606:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012608:	e003      	b.n	8012612 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801260a:	2301      	movs	r3, #1
 801260c:	75fb      	strb	r3, [r7, #23]
      break;
 801260e:	e000      	b.n	8012612 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8012610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012612:	7dfb      	ldrb	r3, [r7, #23]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10a      	bne.n	801262e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012618:	4b5e      	ldr	r3, [pc, #376]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801261c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012626:	495b      	ldr	r1, [pc, #364]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012628:	4313      	orrs	r3, r2
 801262a:	658b      	str	r3, [r1, #88]	; 0x58
 801262c:	e001      	b.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801263a:	2b00      	cmp	r3, #0
 801263c:	d033      	beq.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012648:	d01c      	beq.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 801264a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801264e:	d816      	bhi.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8012650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012654:	d003      	beq.n	801265e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8012656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801265a:	d007      	beq.n	801266c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 801265c:	e00f      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801265e:	4b4d      	ldr	r3, [pc, #308]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012662:	4a4c      	ldr	r2, [pc, #304]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801266a:	e00c      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	3324      	adds	r3, #36	; 0x24
 8012670:	2101      	movs	r1, #1
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fc6e 	bl	8012f54 <RCCEx_PLL3_Config>
 8012678:	4603      	mov	r3, r0
 801267a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801267c:	e003      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801267e:	2301      	movs	r3, #1
 8012680:	75fb      	strb	r3, [r7, #23]
      break;
 8012682:	e000      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8012684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012686:	7dfb      	ldrb	r3, [r7, #23]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10a      	bne.n	80126a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801268c:	4b41      	ldr	r3, [pc, #260]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801269a:	493e      	ldr	r1, [pc, #248]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801269c:	4313      	orrs	r3, r2
 801269e:	654b      	str	r3, [r1, #84]	; 0x54
 80126a0:	e001      	b.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
 80126a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d029      	beq.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d003      	beq.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80126ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126be:	d007      	beq.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80126c0:	e00f      	b.n	80126e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126c2:	4b34      	ldr	r3, [pc, #208]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80126c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c6:	4a33      	ldr	r2, [pc, #204]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80126c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80126ce:	e00b      	b.n	80126e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	2102      	movs	r1, #2
 80126d6:	4618      	mov	r0, r3
 80126d8:	f000 fb8a 	bl	8012df0 <RCCEx_PLL2_Config>
 80126dc:	4603      	mov	r3, r0
 80126de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80126e0:	e002      	b.n	80126e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80126e2:	2301      	movs	r3, #1
 80126e4:	75fb      	strb	r3, [r7, #23]
      break;
 80126e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80126e8:	7dfb      	ldrb	r3, [r7, #23]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d109      	bne.n	8012702 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80126ee:	4b29      	ldr	r3, [pc, #164]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80126f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126fa:	4926      	ldr	r1, [pc, #152]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80126fc:	4313      	orrs	r3, r2
 80126fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012700:	e001      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012702:	7dfb      	ldrb	r3, [r7, #23]
 8012704:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00a      	beq.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	3324      	adds	r3, #36	; 0x24
 8012716:	2102      	movs	r1, #2
 8012718:	4618      	mov	r0, r3
 801271a:	f000 fc1b 	bl	8012f54 <RCCEx_PLL3_Config>
 801271e:	4603      	mov	r3, r0
 8012720:	2b00      	cmp	r3, #0
 8012722:	d001      	beq.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8012724:	2301      	movs	r3, #1
 8012726:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012730:	2b00      	cmp	r3, #0
 8012732:	d033      	beq.n	801279c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801273c:	d017      	beq.n	801276e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 801273e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012742:	d811      	bhi.n	8012768 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012748:	d013      	beq.n	8012772 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 801274a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801274e:	d80b      	bhi.n	8012768 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012750:	2b00      	cmp	r3, #0
 8012752:	d010      	beq.n	8012776 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8012754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012758:	d106      	bne.n	8012768 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801275a:	4b0e      	ldr	r3, [pc, #56]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275e:	4a0d      	ldr	r2, [pc, #52]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8012766:	e007      	b.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012768:	2301      	movs	r3, #1
 801276a:	75fb      	strb	r3, [r7, #23]
      break;
 801276c:	e004      	b.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801276e:	bf00      	nop
 8012770:	e002      	b.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012772:	bf00      	nop
 8012774:	e000      	b.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012778:	7dfb      	ldrb	r3, [r7, #23]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d10c      	bne.n	8012798 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801277e:	4b05      	ldr	r3, [pc, #20]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801278a:	4902      	ldr	r1, [pc, #8]	; (8012794 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801278c:	4313      	orrs	r3, r2
 801278e:	654b      	str	r3, [r1, #84]	; 0x54
 8012790:	e004      	b.n	801279c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8012792:	bf00      	nop
 8012794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012798:	7dfb      	ldrb	r3, [r7, #23]
 801279a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d008      	beq.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80127a8:	4b31      	ldr	r3, [pc, #196]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b4:	492e      	ldr	r1, [pc, #184]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127b6:	4313      	orrs	r3, r2
 80127b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d009      	beq.n	80127da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80127c6:	4b2a      	ldr	r3, [pc, #168]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80127d4:	4926      	ldr	r1, [pc, #152]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127d6:	4313      	orrs	r3, r2
 80127d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d008      	beq.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80127e6:	4b22      	ldr	r3, [pc, #136]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127f2:	491f      	ldr	r1, [pc, #124]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80127f4:	4313      	orrs	r3, r2
 80127f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00d      	beq.n	8012820 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012804:	4b1a      	ldr	r3, [pc, #104]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012806:	691b      	ldr	r3, [r3, #16]
 8012808:	4a19      	ldr	r2, [pc, #100]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801280a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801280e:	6113      	str	r3, [r2, #16]
 8012810:	4b17      	ldr	r3, [pc, #92]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012812:	691a      	ldr	r2, [r3, #16]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801281a:	4915      	ldr	r1, [pc, #84]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801281c:	4313      	orrs	r3, r2
 801281e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	da08      	bge.n	801283a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012828:	4b11      	ldr	r3, [pc, #68]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801282c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012834:	490e      	ldr	r1, [pc, #56]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012836:	4313      	orrs	r3, r2
 8012838:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012842:	2b00      	cmp	r3, #0
 8012844:	d009      	beq.n	801285a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012846:	4b0a      	ldr	r3, [pc, #40]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801284a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012854:	4906      	ldr	r1, [pc, #24]	; (8012870 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012856:	4313      	orrs	r3, r2
 8012858:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 801285a:	7dbb      	ldrb	r3, [r7, #22]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8012860:	2300      	movs	r3, #0
 8012862:	e000      	b.n	8012866 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8012864:	2301      	movs	r3, #1
}
 8012866:	4618      	mov	r0, r3
 8012868:	3718      	adds	r7, #24
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	58024400 	.word	0x58024400

08012874 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012878:	f7ff f818 	bl	80118ac <HAL_RCC_GetHCLKFreq>
 801287c:	4602      	mov	r2, r0
 801287e:	4b06      	ldr	r3, [pc, #24]	; (8012898 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012880:	6a1b      	ldr	r3, [r3, #32]
 8012882:	091b      	lsrs	r3, r3, #4
 8012884:	f003 0307 	and.w	r3, r3, #7
 8012888:	4904      	ldr	r1, [pc, #16]	; (801289c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801288a:	5ccb      	ldrb	r3, [r1, r3]
 801288c:	f003 031f 	and.w	r3, r3, #31
 8012890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012894:	4618      	mov	r0, r3
 8012896:	bd80      	pop	{r7, pc}
 8012898:	58024400 	.word	0x58024400
 801289c:	240084d4 	.word	0x240084d4

080128a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b089      	sub	sp, #36	; 0x24
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80128a8:	4ba1      	ldr	r3, [pc, #644]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ac:	f003 0303 	and.w	r3, r3, #3
 80128b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80128b2:	4b9f      	ldr	r3, [pc, #636]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b6:	0b1b      	lsrs	r3, r3, #12
 80128b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80128be:	4b9c      	ldr	r3, [pc, #624]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c2:	091b      	lsrs	r3, r3, #4
 80128c4:	f003 0301 	and.w	r3, r3, #1
 80128c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80128ca:	4b99      	ldr	r3, [pc, #612]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128ce:	08db      	lsrs	r3, r3, #3
 80128d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128d4:	693a      	ldr	r2, [r7, #16]
 80128d6:	fb02 f303 	mul.w	r3, r2, r3
 80128da:	ee07 3a90 	vmov	s15, r3
 80128de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 8111 	beq.w	8012b10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	2b02      	cmp	r3, #2
 80128f2:	f000 8083 	beq.w	80129fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	2b02      	cmp	r3, #2
 80128fa:	f200 80a1 	bhi.w	8012a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d003      	beq.n	801290c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d056      	beq.n	80129b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801290a:	e099      	b.n	8012a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801290c:	4b88      	ldr	r3, [pc, #544]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f003 0320 	and.w	r3, r3, #32
 8012914:	2b00      	cmp	r3, #0
 8012916:	d02d      	beq.n	8012974 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012918:	4b85      	ldr	r3, [pc, #532]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	08db      	lsrs	r3, r3, #3
 801291e:	f003 0303 	and.w	r3, r3, #3
 8012922:	4a84      	ldr	r2, [pc, #528]	; (8012b34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012924:	fa22 f303 	lsr.w	r3, r2, r3
 8012928:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	ee07 3a90 	vmov	s15, r3
 8012930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	ee07 3a90 	vmov	s15, r3
 801293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801293e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012942:	4b7b      	ldr	r3, [pc, #492]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801294a:	ee07 3a90 	vmov	s15, r3
 801294e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012952:	ed97 6a03 	vldr	s12, [r7, #12]
 8012956:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801295a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801295e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801296e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012972:	e087      	b.n	8012a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	ee07 3a90 	vmov	s15, r3
 801297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801297e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012b3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012986:	4b6a      	ldr	r3, [pc, #424]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801298e:	ee07 3a90 	vmov	s15, r3
 8012992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012996:	ed97 6a03 	vldr	s12, [r7, #12]
 801299a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801299e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129b6:	e065      	b.n	8012a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	ee07 3a90 	vmov	s15, r3
 80129be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80129c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129ca:	4b59      	ldr	r3, [pc, #356]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80129cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129d2:	ee07 3a90 	vmov	s15, r3
 80129d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129da:	ed97 6a03 	vldr	s12, [r7, #12]
 80129de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80129e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129fa:	e043      	b.n	8012a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	ee07 3a90 	vmov	s15, r3
 8012a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a0e:	4b48      	ldr	r3, [pc, #288]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a16:	ee07 3a90 	vmov	s15, r3
 8012a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012a3e:	e021      	b.n	8012a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	ee07 3a90 	vmov	s15, r3
 8012a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a52:	4b37      	ldr	r3, [pc, #220]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a5a:	ee07 3a90 	vmov	s15, r3
 8012a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012a82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8012a84:	4b2a      	ldr	r3, [pc, #168]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a88:	0a5b      	lsrs	r3, r3, #9
 8012a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a8e:	ee07 3a90 	vmov	s15, r3
 8012a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012aaa:	ee17 2a90 	vmov	r2, s15
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8012ab2:	4b1f      	ldr	r3, [pc, #124]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ab6:	0c1b      	lsrs	r3, r3, #16
 8012ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012abc:	ee07 3a90 	vmov	s15, r3
 8012ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8012ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ad8:	ee17 2a90 	vmov	r2, s15
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8012ae0:	4b13      	ldr	r3, [pc, #76]	; (8012b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae4:	0e1b      	lsrs	r3, r3, #24
 8012ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012aea:	ee07 3a90 	vmov	s15, r3
 8012aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8012afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b06:	ee17 2a90 	vmov	r2, s15
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8012b0e:	e008      	b.n	8012b22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2200      	movs	r2, #0
 8012b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	609a      	str	r2, [r3, #8]
}
 8012b22:	bf00      	nop
 8012b24:	3724      	adds	r7, #36	; 0x24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	58024400 	.word	0x58024400
 8012b34:	03d09000 	.word	0x03d09000
 8012b38:	46000000 	.word	0x46000000
 8012b3c:	4c742400 	.word	0x4c742400
 8012b40:	4a742400 	.word	0x4a742400
 8012b44:	4af42400 	.word	0x4af42400

08012b48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b089      	sub	sp, #36	; 0x24
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012b50:	4ba1      	ldr	r3, [pc, #644]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b54:	f003 0303 	and.w	r3, r3, #3
 8012b58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8012b5a:	4b9f      	ldr	r3, [pc, #636]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b5e:	0d1b      	lsrs	r3, r3, #20
 8012b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012b66:	4b9c      	ldr	r3, [pc, #624]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b6a:	0a1b      	lsrs	r3, r3, #8
 8012b6c:	f003 0301 	and.w	r3, r3, #1
 8012b70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8012b72:	4b99      	ldr	r3, [pc, #612]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b76:	08db      	lsrs	r3, r3, #3
 8012b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b7c:	693a      	ldr	r2, [r7, #16]
 8012b7e:	fb02 f303 	mul.w	r3, r2, r3
 8012b82:	ee07 3a90 	vmov	s15, r3
 8012b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f000 8111 	beq.w	8012db8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	f000 8083 	beq.w	8012ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	f200 80a1 	bhi.w	8012ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d003      	beq.n	8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	2b01      	cmp	r3, #1
 8012bb0:	d056      	beq.n	8012c60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012bb2:	e099      	b.n	8012ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012bb4:	4b88      	ldr	r3, [pc, #544]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f003 0320 	and.w	r3, r3, #32
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d02d      	beq.n	8012c1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012bc0:	4b85      	ldr	r3, [pc, #532]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	08db      	lsrs	r3, r3, #3
 8012bc6:	f003 0303 	and.w	r3, r3, #3
 8012bca:	4a84      	ldr	r2, [pc, #528]	; (8012ddc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8012bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8012bd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	ee07 3a90 	vmov	s15, r3
 8012bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	ee07 3a90 	vmov	s15, r3
 8012be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bea:	4b7b      	ldr	r3, [pc, #492]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bf2:	ee07 3a90 	vmov	s15, r3
 8012bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8012bfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012c1a:	e087      	b.n	8012d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	ee07 3a90 	vmov	s15, r3
 8012c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012de4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c2e:	4b6a      	ldr	r3, [pc, #424]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c36:	ee07 3a90 	vmov	s15, r3
 8012c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c5e:	e065      	b.n	8012d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	ee07 3a90 	vmov	s15, r3
 8012c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c72:	4b59      	ldr	r3, [pc, #356]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c7a:	ee07 3a90 	vmov	s15, r3
 8012c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012ca2:	e043      	b.n	8012d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	ee07 3a90 	vmov	s15, r3
 8012caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cb6:	4b48      	ldr	r3, [pc, #288]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cbe:	ee07 3a90 	vmov	s15, r3
 8012cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8012cca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012ce6:	e021      	b.n	8012d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	ee07 3a90 	vmov	s15, r3
 8012cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cfa:	4b37      	ldr	r3, [pc, #220]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d02:	ee07 3a90 	vmov	s15, r3
 8012d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012d2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012d2c:	4b2a      	ldr	r3, [pc, #168]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d30:	0a5b      	lsrs	r3, r3, #9
 8012d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d36:	ee07 3a90 	vmov	s15, r3
 8012d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d52:	ee17 2a90 	vmov	r2, s15
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012d5a:	4b1f      	ldr	r3, [pc, #124]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d5e:	0c1b      	lsrs	r3, r3, #16
 8012d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d64:	ee07 3a90 	vmov	s15, r3
 8012d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d80:	ee17 2a90 	vmov	r2, s15
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8012d88:	4b13      	ldr	r3, [pc, #76]	; (8012dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d8c:	0e1b      	lsrs	r3, r3, #24
 8012d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d92:	ee07 3a90 	vmov	s15, r3
 8012d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8012da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dae:	ee17 2a90 	vmov	r2, s15
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012db6:	e008      	b.n	8012dca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	609a      	str	r2, [r3, #8]
}
 8012dca:	bf00      	nop
 8012dcc:	3724      	adds	r7, #36	; 0x24
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop
 8012dd8:	58024400 	.word	0x58024400
 8012ddc:	03d09000 	.word	0x03d09000
 8012de0:	46000000 	.word	0x46000000
 8012de4:	4c742400 	.word	0x4c742400
 8012de8:	4a742400 	.word	0x4a742400
 8012dec:	4af42400 	.word	0x4af42400

08012df0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012dfe:	4b53      	ldr	r3, [pc, #332]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e02:	f003 0303 	and.w	r3, r3, #3
 8012e06:	2b03      	cmp	r3, #3
 8012e08:	d101      	bne.n	8012e0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	e099      	b.n	8012f42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012e0e:	4b4f      	ldr	r3, [pc, #316]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4a4e      	ldr	r2, [pc, #312]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012e1a:	f7f8 fc69 	bl	800b6f0 <HAL_GetTick>
 8012e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012e20:	e008      	b.n	8012e34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012e22:	f7f8 fc65 	bl	800b6f0 <HAL_GetTick>
 8012e26:	4602      	mov	r2, r0
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d901      	bls.n	8012e34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012e30:	2303      	movs	r3, #3
 8012e32:	e086      	b.n	8012f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012e34:	4b45      	ldr	r3, [pc, #276]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d1f0      	bne.n	8012e22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012e40:	4b42      	ldr	r3, [pc, #264]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	031b      	lsls	r3, r3, #12
 8012e4e:	493f      	ldr	r1, [pc, #252]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e50:	4313      	orrs	r3, r2
 8012e52:	628b      	str	r3, [r1, #40]	; 0x28
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	3b01      	subs	r3, #1
 8012e64:	025b      	lsls	r3, r3, #9
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	431a      	orrs	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	3b01      	subs	r3, #1
 8012e70:	041b      	lsls	r3, r3, #16
 8012e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012e76:	431a      	orrs	r2, r3
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	3b01      	subs	r3, #1
 8012e7e:	061b      	lsls	r3, r3, #24
 8012e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012e84:	4931      	ldr	r1, [pc, #196]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e86:	4313      	orrs	r3, r2
 8012e88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012e8a:	4b30      	ldr	r3, [pc, #192]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	695b      	ldr	r3, [r3, #20]
 8012e96:	492d      	ldr	r1, [pc, #180]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e98:	4313      	orrs	r3, r2
 8012e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012e9c:	4b2b      	ldr	r3, [pc, #172]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea0:	f023 0220 	bic.w	r2, r3, #32
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	4928      	ldr	r1, [pc, #160]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012eae:	4b27      	ldr	r3, [pc, #156]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb2:	4a26      	ldr	r2, [pc, #152]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012eb4:	f023 0310 	bic.w	r3, r3, #16
 8012eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012eba:	4b24      	ldr	r3, [pc, #144]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012ebe:	4b24      	ldr	r3, [pc, #144]	; (8012f50 <RCCEx_PLL2_Config+0x160>)
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	69d2      	ldr	r2, [r2, #28]
 8012ec6:	00d2      	lsls	r2, r2, #3
 8012ec8:	4920      	ldr	r1, [pc, #128]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012ece:	4b1f      	ldr	r3, [pc, #124]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed2:	4a1e      	ldr	r2, [pc, #120]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ed4:	f043 0310 	orr.w	r3, r3, #16
 8012ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d106      	bne.n	8012eee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012ee0:	4b1a      	ldr	r3, [pc, #104]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee4:	4a19      	ldr	r2, [pc, #100]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012eec:	e00f      	b.n	8012f0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d106      	bne.n	8012f02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012ef4:	4b15      	ldr	r3, [pc, #84]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef8:	4a14      	ldr	r2, [pc, #80]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012efe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012f00:	e005      	b.n	8012f0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012f02:	4b12      	ldr	r3, [pc, #72]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f06:	4a11      	ldr	r2, [pc, #68]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012f0e:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a0e      	ldr	r2, [pc, #56]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f1a:	f7f8 fbe9 	bl	800b6f0 <HAL_GetTick>
 8012f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012f20:	e008      	b.n	8012f34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012f22:	f7f8 fbe5 	bl	800b6f0 <HAL_GetTick>
 8012f26:	4602      	mov	r2, r0
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d901      	bls.n	8012f34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012f30:	2303      	movs	r3, #3
 8012f32:	e006      	b.n	8012f42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012f34:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <RCCEx_PLL2_Config+0x15c>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d0f0      	beq.n	8012f22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	58024400 	.word	0x58024400
 8012f50:	ffff0007 	.word	0xffff0007

08012f54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012f62:	4b53      	ldr	r3, [pc, #332]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f66:	f003 0303 	and.w	r3, r3, #3
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d101      	bne.n	8012f72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e099      	b.n	80130a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012f72:	4b4f      	ldr	r3, [pc, #316]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4a4e      	ldr	r2, [pc, #312]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f7e:	f7f8 fbb7 	bl	800b6f0 <HAL_GetTick>
 8012f82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012f84:	e008      	b.n	8012f98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012f86:	f7f8 fbb3 	bl	800b6f0 <HAL_GetTick>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d901      	bls.n	8012f98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012f94:	2303      	movs	r3, #3
 8012f96:	e086      	b.n	80130a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012f98:	4b45      	ldr	r3, [pc, #276]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1f0      	bne.n	8012f86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012fa4:	4b42      	ldr	r3, [pc, #264]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fa8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	051b      	lsls	r3, r3, #20
 8012fb2:	493f      	ldr	r1, [pc, #252]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	628b      	str	r3, [r1, #40]	; 0x28
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	3b01      	subs	r3, #1
 8012fc8:	025b      	lsls	r3, r3, #9
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	431a      	orrs	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	3b01      	subs	r3, #1
 8012fd4:	041b      	lsls	r3, r3, #16
 8012fd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012fda:	431a      	orrs	r2, r3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	691b      	ldr	r3, [r3, #16]
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	061b      	lsls	r3, r3, #24
 8012fe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012fe8:	4931      	ldr	r1, [pc, #196]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012fea:	4313      	orrs	r3, r2
 8012fec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012fee:	4b30      	ldr	r3, [pc, #192]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	695b      	ldr	r3, [r3, #20]
 8012ffa:	492d      	ldr	r1, [pc, #180]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8012ffc:	4313      	orrs	r3, r2
 8012ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013000:	4b2b      	ldr	r3, [pc, #172]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013004:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	4928      	ldr	r1, [pc, #160]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801300e:	4313      	orrs	r3, r2
 8013010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013012:	4b27      	ldr	r3, [pc, #156]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013016:	4a26      	ldr	r2, [pc, #152]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801301c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801301e:	4b24      	ldr	r3, [pc, #144]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013022:	4b24      	ldr	r3, [pc, #144]	; (80130b4 <RCCEx_PLL3_Config+0x160>)
 8013024:	4013      	ands	r3, r2
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	69d2      	ldr	r2, [r2, #28]
 801302a:	00d2      	lsls	r2, r2, #3
 801302c:	4920      	ldr	r1, [pc, #128]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801302e:	4313      	orrs	r3, r2
 8013030:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013032:	4b1f      	ldr	r3, [pc, #124]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013036:	4a1e      	ldr	r2, [pc, #120]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801303c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013044:	4b1a      	ldr	r3, [pc, #104]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013048:	4a19      	ldr	r2, [pc, #100]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801304a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801304e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013050:	e00f      	b.n	8013072 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	2b01      	cmp	r3, #1
 8013056:	d106      	bne.n	8013066 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013058:	4b15      	ldr	r3, [pc, #84]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305c:	4a14      	ldr	r2, [pc, #80]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801305e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013064:	e005      	b.n	8013072 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013066:	4b12      	ldr	r3, [pc, #72]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	4a11      	ldr	r2, [pc, #68]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801306c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013072:	4b0f      	ldr	r3, [pc, #60]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a0e      	ldr	r2, [pc, #56]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 8013078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801307c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801307e:	f7f8 fb37 	bl	800b6f0 <HAL_GetTick>
 8013082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013084:	e008      	b.n	8013098 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8013086:	f7f8 fb33 	bl	800b6f0 <HAL_GetTick>
 801308a:	4602      	mov	r2, r0
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	1ad3      	subs	r3, r2, r3
 8013090:	2b02      	cmp	r3, #2
 8013092:	d901      	bls.n	8013098 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013094:	2303      	movs	r3, #3
 8013096:	e006      	b.n	80130a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013098:	4b05      	ldr	r3, [pc, #20]	; (80130b0 <RCCEx_PLL3_Config+0x15c>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d0f0      	beq.n	8013086 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80130a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	58024400 	.word	0x58024400
 80130b4:	ffff0007 	.word	0xffff0007

080130b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d101      	bne.n	80130ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80130c6:	2301      	movs	r3, #1
 80130c8:	e054      	b.n	8013174 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	7a5b      	ldrb	r3, [r3, #9]
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d105      	bne.n	80130e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f7f7 feea 	bl	800aeb4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2202      	movs	r2, #2
 80130e4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f023 0120 	bic.w	r1, r3, #32
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	685a      	ldr	r2, [r3, #4]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	430a      	orrs	r2, r1
 80130fa:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f042 0204 	orr.w	r2, r2, #4
 801310a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013116:	2b40      	cmp	r3, #64	; 0x40
 8013118:	d104      	bne.n	8013124 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2204      	movs	r2, #4
 801311e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8013120:	2301      	movs	r3, #1
 8013122:	e027      	b.n	8013174 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8013124:	f7f8 fae4 	bl	800b6f0 <HAL_GetTick>
 8013128:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801312a:	e015      	b.n	8013158 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801312c:	f7f8 fae0 	bl	800b6f0 <HAL_GetTick>
 8013130:	4602      	mov	r2, r0
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	1ad3      	subs	r3, r2, r3
 8013136:	2b02      	cmp	r3, #2
 8013138:	d90e      	bls.n	8013158 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	f003 0304 	and.w	r3, r3, #4
 8013144:	2b04      	cmp	r3, #4
 8013146:	d107      	bne.n	8013158 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2204      	movs	r2, #4
 801314c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2202      	movs	r2, #2
 8013152:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8013154:	2301      	movs	r3, #1
 8013156:	e00d      	b.n	8013174 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	f003 0304 	and.w	r3, r3, #4
 8013162:	2b04      	cmp	r3, #4
 8013164:	d0e2      	beq.n	801312c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2201      	movs	r2, #1
 801316a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2200      	movs	r2, #0
 8013170:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3710      	adds	r7, #16
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8013184:	2300      	movs	r3, #0
 8013186:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	f003 0320 	and.w	r3, r3, #32
 8013192:	2b20      	cmp	r3, #32
 8013194:	d105      	bne.n	80131a2 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2210      	movs	r2, #16
 801319a:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 801319c:	2301      	movs	r3, #1
 801319e:	60fb      	str	r3, [r7, #12]
 80131a0:	e023      	b.n	80131ea <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	685b      	ldr	r3, [r3, #4]
 80131a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131ac:	2b40      	cmp	r3, #64	; 0x40
 80131ae:	d11c      	bne.n	80131ea <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	f003 0304 	and.w	r3, r3, #4
 80131ba:	2b04      	cmp	r3, #4
 80131bc:	d008      	beq.n	80131d0 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	685a      	ldr	r2, [r3, #4]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131cc:	605a      	str	r2, [r3, #4]
 80131ce:	e00c      	b.n	80131ea <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2208      	movs	r2, #8
 80131d4:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 80131d6:	2301      	movs	r3, #1
 80131d8:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f022 0208 	bic.w	r2, r2, #8
 80131e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d10b      	bne.n	8013208 <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2204      	movs	r2, #4
 80131f4:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f000 f839 	bl	801326e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8013204:	605a      	str	r2, [r3, #4]

    return;
 8013206:	e024      	b.n	8013252 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	2b01      	cmp	r3, #1
 8013214:	d11d      	bne.n	8013252 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f022 0208 	bic.w	r2, r2, #8
 8013224:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	689a      	ldr	r2, [r3, #8]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	7a5b      	ldrb	r3, [r3, #9]
 8013234:	b2db      	uxtb	r3, r3
 8013236:	2b04      	cmp	r3, #4
 8013238:	d00b      	beq.n	8013252 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2201      	movs	r2, #1
 801323e:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2200      	movs	r2, #0
 8013244:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	691b      	ldr	r3, [r3, #16]
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 f803 	bl	8013258 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8013252:	3710      	adds	r7, #16
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8013262:	bf00      	nop
 8013264:	370c      	adds	r7, #12
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr

0801326e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 801326e:	b480      	push	{r7}
 8013270:	b083      	sub	sp, #12
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8013276:	bf00      	nop
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013282:	b580      	push	{r7, lr}
 8013284:	b082      	sub	sp, #8
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013290:	2301      	movs	r3, #1
 8013292:	e049      	b.n	8013328 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801329a:	b2db      	uxtb	r3, r3
 801329c:	2b00      	cmp	r3, #0
 801329e:	d106      	bne.n	80132ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f000 f841 	bl	8013330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2202      	movs	r2, #2
 80132b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3304      	adds	r3, #4
 80132be:	4619      	mov	r1, r3
 80132c0:	4610      	mov	r0, r2
 80132c2:	f000 f9ff 	bl	80136c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2201      	movs	r2, #1
 80132ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2201      	movs	r2, #1
 80132d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2201      	movs	r2, #1
 80132da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2201      	movs	r2, #1
 80132e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2201      	movs	r2, #1
 80132ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2201      	movs	r2, #1
 80132f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2201      	movs	r2, #1
 80132fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2201      	movs	r2, #1
 8013302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2201      	movs	r2, #1
 801330a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2201      	movs	r2, #1
 8013312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2201      	movs	r2, #1
 801331a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2201      	movs	r2, #1
 8013322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013326:	2300      	movs	r3, #0
}
 8013328:	4618      	mov	r0, r3
 801332a:	3708      	adds	r7, #8
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013330:	b480      	push	{r7}
 8013332:	b083      	sub	sp, #12
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013338:	bf00      	nop
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013352:	b2db      	uxtb	r3, r3
 8013354:	2b01      	cmp	r3, #1
 8013356:	d001      	beq.n	801335c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013358:	2301      	movs	r3, #1
 801335a:	e054      	b.n	8013406 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2202      	movs	r2, #2
 8013360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	68da      	ldr	r2, [r3, #12]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f042 0201 	orr.w	r2, r2, #1
 8013372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	4a26      	ldr	r2, [pc, #152]	; (8013414 <HAL_TIM_Base_Start_IT+0xd0>)
 801337a:	4293      	cmp	r3, r2
 801337c:	d022      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013386:	d01d      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a22      	ldr	r2, [pc, #136]	; (8013418 <HAL_TIM_Base_Start_IT+0xd4>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d018      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	4a21      	ldr	r2, [pc, #132]	; (801341c <HAL_TIM_Base_Start_IT+0xd8>)
 8013398:	4293      	cmp	r3, r2
 801339a:	d013      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	4a1f      	ldr	r2, [pc, #124]	; (8013420 <HAL_TIM_Base_Start_IT+0xdc>)
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d00e      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	4a1e      	ldr	r2, [pc, #120]	; (8013424 <HAL_TIM_Base_Start_IT+0xe0>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d009      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4a1c      	ldr	r2, [pc, #112]	; (8013428 <HAL_TIM_Base_Start_IT+0xe4>)
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d004      	beq.n	80133c4 <HAL_TIM_Base_Start_IT+0x80>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	4a1b      	ldr	r2, [pc, #108]	; (801342c <HAL_TIM_Base_Start_IT+0xe8>)
 80133c0:	4293      	cmp	r3, r2
 80133c2:	d115      	bne.n	80133f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	689a      	ldr	r2, [r3, #8]
 80133ca:	4b19      	ldr	r3, [pc, #100]	; (8013430 <HAL_TIM_Base_Start_IT+0xec>)
 80133cc:	4013      	ands	r3, r2
 80133ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2b06      	cmp	r3, #6
 80133d4:	d015      	beq.n	8013402 <HAL_TIM_Base_Start_IT+0xbe>
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133dc:	d011      	beq.n	8013402 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f042 0201 	orr.w	r2, r2, #1
 80133ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133ee:	e008      	b.n	8013402 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f042 0201 	orr.w	r2, r2, #1
 80133fe:	601a      	str	r2, [r3, #0]
 8013400:	e000      	b.n	8013404 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013404:	2300      	movs	r3, #0
}
 8013406:	4618      	mov	r0, r3
 8013408:	3714      	adds	r7, #20
 801340a:	46bd      	mov	sp, r7
 801340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013410:	4770      	bx	lr
 8013412:	bf00      	nop
 8013414:	40010000 	.word	0x40010000
 8013418:	40000400 	.word	0x40000400
 801341c:	40000800 	.word	0x40000800
 8013420:	40000c00 	.word	0x40000c00
 8013424:	40010400 	.word	0x40010400
 8013428:	40001800 	.word	0x40001800
 801342c:	40014000 	.word	0x40014000
 8013430:	00010007 	.word	0x00010007

08013434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	f003 0302 	and.w	r3, r3, #2
 8013446:	2b02      	cmp	r3, #2
 8013448:	d122      	bne.n	8013490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	f003 0302 	and.w	r3, r3, #2
 8013454:	2b02      	cmp	r3, #2
 8013456:	d11b      	bne.n	8013490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f06f 0202 	mvn.w	r2, #2
 8013460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2201      	movs	r2, #1
 8013466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	f003 0303 	and.w	r3, r3, #3
 8013472:	2b00      	cmp	r3, #0
 8013474:	d003      	beq.n	801347e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 f905 	bl	8013686 <HAL_TIM_IC_CaptureCallback>
 801347c:	e005      	b.n	801348a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f8f7 	bl	8013672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 f908 	bl	801369a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2200      	movs	r2, #0
 801348e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	f003 0304 	and.w	r3, r3, #4
 801349a:	2b04      	cmp	r3, #4
 801349c:	d122      	bne.n	80134e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	f003 0304 	and.w	r3, r3, #4
 80134a8:	2b04      	cmp	r3, #4
 80134aa:	d11b      	bne.n	80134e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f06f 0204 	mvn.w	r2, #4
 80134b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2202      	movs	r2, #2
 80134ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 f8db 	bl	8013686 <HAL_TIM_IC_CaptureCallback>
 80134d0:	e005      	b.n	80134de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f000 f8cd 	bl	8013672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 f8de 	bl	801369a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2200      	movs	r2, #0
 80134e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	691b      	ldr	r3, [r3, #16]
 80134ea:	f003 0308 	and.w	r3, r3, #8
 80134ee:	2b08      	cmp	r3, #8
 80134f0:	d122      	bne.n	8013538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	f003 0308 	and.w	r3, r3, #8
 80134fc:	2b08      	cmp	r3, #8
 80134fe:	d11b      	bne.n	8013538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f06f 0208 	mvn.w	r2, #8
 8013508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2204      	movs	r2, #4
 801350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	69db      	ldr	r3, [r3, #28]
 8013516:	f003 0303 	and.w	r3, r3, #3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d003      	beq.n	8013526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f000 f8b1 	bl	8013686 <HAL_TIM_IC_CaptureCallback>
 8013524:	e005      	b.n	8013532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f000 f8a3 	bl	8013672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 f8b4 	bl	801369a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2200      	movs	r2, #0
 8013536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	691b      	ldr	r3, [r3, #16]
 801353e:	f003 0310 	and.w	r3, r3, #16
 8013542:	2b10      	cmp	r3, #16
 8013544:	d122      	bne.n	801358c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	f003 0310 	and.w	r3, r3, #16
 8013550:	2b10      	cmp	r3, #16
 8013552:	d11b      	bne.n	801358c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f06f 0210 	mvn.w	r2, #16
 801355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2208      	movs	r2, #8
 8013562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	69db      	ldr	r3, [r3, #28]
 801356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801356e:	2b00      	cmp	r3, #0
 8013570:	d003      	beq.n	801357a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f000 f887 	bl	8013686 <HAL_TIM_IC_CaptureCallback>
 8013578:	e005      	b.n	8013586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f000 f879 	bl	8013672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 f88a 	bl	801369a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2200      	movs	r2, #0
 801358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	691b      	ldr	r3, [r3, #16]
 8013592:	f003 0301 	and.w	r3, r3, #1
 8013596:	2b01      	cmp	r3, #1
 8013598:	d10e      	bne.n	80135b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d107      	bne.n	80135b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	f06f 0201 	mvn.w	r2, #1
 80135b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f7f7 fc2a 	bl	800ae0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	691b      	ldr	r3, [r3, #16]
 80135be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135c2:	2b80      	cmp	r3, #128	; 0x80
 80135c4:	d10e      	bne.n	80135e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	68db      	ldr	r3, [r3, #12]
 80135cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135d0:	2b80      	cmp	r3, #128	; 0x80
 80135d2:	d107      	bne.n	80135e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80135dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 f914 	bl	801380c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135f2:	d10e      	bne.n	8013612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	68db      	ldr	r3, [r3, #12]
 80135fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135fe:	2b80      	cmp	r3, #128	; 0x80
 8013600:	d107      	bne.n	8013612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f000 f907 	bl	8013820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	691b      	ldr	r3, [r3, #16]
 8013618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801361c:	2b40      	cmp	r3, #64	; 0x40
 801361e:	d10e      	bne.n	801363e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	68db      	ldr	r3, [r3, #12]
 8013626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801362a:	2b40      	cmp	r3, #64	; 0x40
 801362c:	d107      	bne.n	801363e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f000 f838 	bl	80136ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	691b      	ldr	r3, [r3, #16]
 8013644:	f003 0320 	and.w	r3, r3, #32
 8013648:	2b20      	cmp	r3, #32
 801364a:	d10e      	bne.n	801366a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	f003 0320 	and.w	r3, r3, #32
 8013656:	2b20      	cmp	r3, #32
 8013658:	d107      	bne.n	801366a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f06f 0220 	mvn.w	r2, #32
 8013662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f8c7 	bl	80137f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801366a:	bf00      	nop
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}

08013672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013672:	b480      	push	{r7}
 8013674:	b083      	sub	sp, #12
 8013676:	af00      	add	r7, sp, #0
 8013678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801367a:	bf00      	nop
 801367c:	370c      	adds	r7, #12
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr

08013686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013686:	b480      	push	{r7}
 8013688:	b083      	sub	sp, #12
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801368e:	bf00      	nop
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801369a:	b480      	push	{r7}
 801369c:	b083      	sub	sp, #12
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80136a2:	bf00      	nop
 80136a4:	370c      	adds	r7, #12
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr

080136ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80136ae:	b480      	push	{r7}
 80136b0:	b083      	sub	sp, #12
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80136b6:	bf00      	nop
 80136b8:	370c      	adds	r7, #12
 80136ba:	46bd      	mov	sp, r7
 80136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c0:	4770      	bx	lr
	...

080136c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80136c4:	b480      	push	{r7}
 80136c6:	b085      	sub	sp, #20
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4a40      	ldr	r2, [pc, #256]	; (80137d8 <TIM_Base_SetConfig+0x114>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d013      	beq.n	8013704 <TIM_Base_SetConfig+0x40>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136e2:	d00f      	beq.n	8013704 <TIM_Base_SetConfig+0x40>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	4a3d      	ldr	r2, [pc, #244]	; (80137dc <TIM_Base_SetConfig+0x118>)
 80136e8:	4293      	cmp	r3, r2
 80136ea:	d00b      	beq.n	8013704 <TIM_Base_SetConfig+0x40>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4a3c      	ldr	r2, [pc, #240]	; (80137e0 <TIM_Base_SetConfig+0x11c>)
 80136f0:	4293      	cmp	r3, r2
 80136f2:	d007      	beq.n	8013704 <TIM_Base_SetConfig+0x40>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4a3b      	ldr	r2, [pc, #236]	; (80137e4 <TIM_Base_SetConfig+0x120>)
 80136f8:	4293      	cmp	r3, r2
 80136fa:	d003      	beq.n	8013704 <TIM_Base_SetConfig+0x40>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	4a3a      	ldr	r2, [pc, #232]	; (80137e8 <TIM_Base_SetConfig+0x124>)
 8013700:	4293      	cmp	r3, r2
 8013702:	d108      	bne.n	8013716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	4313      	orrs	r3, r2
 8013714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4a2f      	ldr	r2, [pc, #188]	; (80137d8 <TIM_Base_SetConfig+0x114>)
 801371a:	4293      	cmp	r3, r2
 801371c:	d01f      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013724:	d01b      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	4a2c      	ldr	r2, [pc, #176]	; (80137dc <TIM_Base_SetConfig+0x118>)
 801372a:	4293      	cmp	r3, r2
 801372c:	d017      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	4a2b      	ldr	r2, [pc, #172]	; (80137e0 <TIM_Base_SetConfig+0x11c>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d013      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4a2a      	ldr	r2, [pc, #168]	; (80137e4 <TIM_Base_SetConfig+0x120>)
 801373a:	4293      	cmp	r3, r2
 801373c:	d00f      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4a29      	ldr	r2, [pc, #164]	; (80137e8 <TIM_Base_SetConfig+0x124>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d00b      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	4a28      	ldr	r2, [pc, #160]	; (80137ec <TIM_Base_SetConfig+0x128>)
 801374a:	4293      	cmp	r3, r2
 801374c:	d007      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4a27      	ldr	r2, [pc, #156]	; (80137f0 <TIM_Base_SetConfig+0x12c>)
 8013752:	4293      	cmp	r3, r2
 8013754:	d003      	beq.n	801375e <TIM_Base_SetConfig+0x9a>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4a26      	ldr	r2, [pc, #152]	; (80137f4 <TIM_Base_SetConfig+0x130>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d108      	bne.n	8013770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	4313      	orrs	r3, r2
 801376e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	4313      	orrs	r3, r2
 801377c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	689a      	ldr	r2, [r3, #8]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a10      	ldr	r2, [pc, #64]	; (80137d8 <TIM_Base_SetConfig+0x114>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d00f      	beq.n	80137bc <TIM_Base_SetConfig+0xf8>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4a12      	ldr	r2, [pc, #72]	; (80137e8 <TIM_Base_SetConfig+0x124>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d00b      	beq.n	80137bc <TIM_Base_SetConfig+0xf8>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4a11      	ldr	r2, [pc, #68]	; (80137ec <TIM_Base_SetConfig+0x128>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d007      	beq.n	80137bc <TIM_Base_SetConfig+0xf8>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a10      	ldr	r2, [pc, #64]	; (80137f0 <TIM_Base_SetConfig+0x12c>)
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d003      	beq.n	80137bc <TIM_Base_SetConfig+0xf8>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4a0f      	ldr	r2, [pc, #60]	; (80137f4 <TIM_Base_SetConfig+0x130>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d103      	bne.n	80137c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	691a      	ldr	r2, [r3, #16]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2201      	movs	r2, #1
 80137c8:	615a      	str	r2, [r3, #20]
}
 80137ca:	bf00      	nop
 80137cc:	3714      	adds	r7, #20
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	40010000 	.word	0x40010000
 80137dc:	40000400 	.word	0x40000400
 80137e0:	40000800 	.word	0x40000800
 80137e4:	40000c00 	.word	0x40000c00
 80137e8:	40010400 	.word	0x40010400
 80137ec:	40014000 	.word	0x40014000
 80137f0:	40014400 	.word	0x40014400
 80137f4:	40014800 	.word	0x40014800

080137f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013800:	bf00      	nop
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013814:	bf00      	nop
 8013816:	370c      	adds	r7, #12
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013820:	b480      	push	{r7}
 8013822:	b083      	sub	sp, #12
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013828:	bf00      	nop
 801382a:	370c      	adds	r7, #12
 801382c:	46bd      	mov	sp, r7
 801382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013832:	4770      	bx	lr

08013834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013842:	2301      	movs	r3, #1
 8013844:	e042      	b.n	80138cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801384c:	2b00      	cmp	r3, #0
 801384e:	d106      	bne.n	801385e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7f7 fb6b 	bl	800af34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2224      	movs	r2, #36	; 0x24
 8013862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f022 0201 	bic.w	r2, r2, #1
 8013874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 fe4e 	bl	8014518 <UART_SetConfig>
 801387c:	4603      	mov	r3, r0
 801387e:	2b01      	cmp	r3, #1
 8013880:	d101      	bne.n	8013886 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013882:	2301      	movs	r3, #1
 8013884:	e022      	b.n	80138cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801388a:	2b00      	cmp	r3, #0
 801388c:	d002      	beq.n	8013894 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f001 fbaa 	bl	8014fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	685a      	ldr	r2, [r3, #4]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80138a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	689a      	ldr	r2, [r3, #8]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80138b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f042 0201 	orr.w	r2, r2, #1
 80138c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f001 fc31 	bl	801512c <UART_CheckIdleState>
 80138ca:	4603      	mov	r3, r0
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d101      	bne.n	80138e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80138e2:	2301      	movs	r3, #1
 80138e4:	e02e      	b.n	8013944 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2224      	movs	r2, #36	; 0x24
 80138ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f022 0201 	bic.w	r2, r2, #1
 80138fc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	2200      	movs	r2, #0
 8013904:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2200      	movs	r2, #0
 801390c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2200      	movs	r2, #0
 8013914:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7f7 fc46 	bl	800b1a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2200      	movs	r2, #0
 8013930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2200      	movs	r2, #0
 801393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08a      	sub	sp, #40	; 0x28
 8013950:	af02      	add	r7, sp, #8
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	603b      	str	r3, [r7, #0]
 8013958:	4613      	mov	r3, r2
 801395a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013962:	2b20      	cmp	r3, #32
 8013964:	f040 8083 	bne.w	8013a6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d002      	beq.n	8013974 <HAL_UART_Transmit+0x28>
 801396e:	88fb      	ldrh	r3, [r7, #6]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013974:	2301      	movs	r3, #1
 8013976:	e07b      	b.n	8013a70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801397e:	2b01      	cmp	r3, #1
 8013980:	d101      	bne.n	8013986 <HAL_UART_Transmit+0x3a>
 8013982:	2302      	movs	r3, #2
 8013984:	e074      	b.n	8013a70 <HAL_UART_Transmit+0x124>
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2201      	movs	r2, #1
 801398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2200      	movs	r2, #0
 8013992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2221      	movs	r2, #33	; 0x21
 801399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801399e:	f7f7 fea7 	bl	800b6f0 <HAL_GetTick>
 80139a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	88fa      	ldrh	r2, [r7, #6]
 80139a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	88fa      	ldrh	r2, [r7, #6]
 80139b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80139bc:	d108      	bne.n	80139d0 <HAL_UART_Transmit+0x84>
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	691b      	ldr	r3, [r3, #16]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d104      	bne.n	80139d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80139c6:	2300      	movs	r3, #0
 80139c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	61bb      	str	r3, [r7, #24]
 80139ce:	e003      	b.n	80139d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80139d4:	2300      	movs	r3, #0
 80139d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2200      	movs	r2, #0
 80139dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80139e0:	e02c      	b.n	8013a3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	2200      	movs	r2, #0
 80139ea:	2180      	movs	r1, #128	; 0x80
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f001 fbe8 	bl	80151c2 <UART_WaitOnFlagUntilTimeout>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80139f8:	2303      	movs	r3, #3
 80139fa:	e039      	b.n	8013a70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d10b      	bne.n	8013a1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	3302      	adds	r3, #2
 8013a16:	61bb      	str	r3, [r7, #24]
 8013a18:	e007      	b.n	8013a2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	781a      	ldrb	r2, [r3, #0]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	3301      	adds	r3, #1
 8013a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	3b01      	subs	r3, #1
 8013a34:	b29a      	uxth	r2, r3
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d1cc      	bne.n	80139e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	2140      	movs	r1, #64	; 0x40
 8013a52:	68f8      	ldr	r0, [r7, #12]
 8013a54:	f001 fbb5 	bl	80151c2 <UART_WaitOnFlagUntilTimeout>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	e006      	b.n	8013a70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2220      	movs	r2, #32
 8013a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	e000      	b.n	8013a70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8013a6e:	2302      	movs	r3, #2
  }
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3720      	adds	r7, #32
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b090      	sub	sp, #64	; 0x40
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a9a:	2b80      	cmp	r3, #128	; 0x80
 8013a9c:	d139      	bne.n	8013b12 <HAL_UART_DMAStop+0x9a>
 8013a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa0:	2b21      	cmp	r3, #33	; 0x21
 8013aa2:	d136      	bne.n	8013b12 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aac:	6a3b      	ldr	r3, [r7, #32]
 8013aae:	e853 3f00 	ldrex	r3, [r3]
 8013ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013aba:	637b      	str	r3, [r7, #52]	; 0x34
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	3308      	adds	r3, #8
 8013ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013acc:	e841 2300 	strex	r3, r2, [r1]
 8013ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1e5      	bne.n	8013aa4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d015      	beq.n	8013b0c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7f9 f90f 	bl	800cd08 <HAL_DMA_Abort>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00d      	beq.n	8013b0c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fa fd95 	bl	800e624 <HAL_DMA_GetError>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b20      	cmp	r3, #32
 8013afe:	d105      	bne.n	8013b0c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2210      	movs	r2, #16
 8013b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8013b08:	2303      	movs	r3, #3
 8013b0a:	e044      	b.n	8013b96 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f001 fcc9 	bl	80154a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	689b      	ldr	r3, [r3, #8]
 8013b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b1c:	2b40      	cmp	r3, #64	; 0x40
 8013b1e:	d139      	bne.n	8013b94 <HAL_UART_DMAStop+0x11c>
 8013b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b22:	2b22      	cmp	r3, #34	; 0x22
 8013b24:	d136      	bne.n	8013b94 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	3308      	adds	r3, #8
 8013b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	e853 3f00 	ldrex	r3, [r3]
 8013b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	3308      	adds	r3, #8
 8013b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b46:	61ba      	str	r2, [r7, #24]
 8013b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b4a:	6979      	ldr	r1, [r7, #20]
 8013b4c:	69ba      	ldr	r2, [r7, #24]
 8013b4e:	e841 2300 	strex	r3, r2, [r1]
 8013b52:	613b      	str	r3, [r7, #16]
   return(result);
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d1e5      	bne.n	8013b26 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d015      	beq.n	8013b8e <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7f9 f8ce 	bl	800cd08 <HAL_DMA_Abort>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00d      	beq.n	8013b8e <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fa fd54 	bl	800e624 <HAL_DMA_GetError>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b20      	cmp	r3, #32
 8013b80:	d105      	bne.n	8013b8e <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2210      	movs	r2, #16
 8013b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8013b8a:	2303      	movs	r3, #3
 8013b8c:	e003      	b.n	8013b96 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f001 fcca 	bl	8015528 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8013b94:	2300      	movs	r3, #0
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3740      	adds	r7, #64	; 0x40
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
	...

08013ba0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b0a0      	sub	sp, #128	; 0x80
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bb0:	e853 3f00 	ldrex	r3, [r3]
 8013bb4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bb8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8013bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8013bc8:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013bcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bce:	e841 2300 	strex	r3, r2, [r1]
 8013bd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1e6      	bne.n	8013ba8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	3308      	adds	r3, #8
 8013be0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013be4:	e853 3f00 	ldrex	r3, [r3]
 8013be8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bec:	4b70      	ldr	r3, [pc, #448]	; (8013db0 <HAL_UART_Abort+0x210>)
 8013bee:	4013      	ands	r3, r2
 8013bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3308      	adds	r3, #8
 8013bf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013bfa:	657a      	str	r2, [r7, #84]	; 0x54
 8013bfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c02:	e841 2300 	strex	r3, r2, [r1]
 8013c06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1e5      	bne.n	8013bda <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c12:	2b01      	cmp	r3, #1
 8013c14:	d118      	bne.n	8013c48 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1e:	e853 3f00 	ldrex	r3, [r3]
 8013c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c26:	f023 0310 	bic.w	r3, r3, #16
 8013c2a:	677b      	str	r3, [r7, #116]	; 0x74
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	461a      	mov	r2, r3
 8013c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c34:	643b      	str	r3, [r7, #64]	; 0x40
 8013c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c3c:	e841 2300 	strex	r3, r2, [r1]
 8013c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1e6      	bne.n	8013c16 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c52:	2b80      	cmp	r3, #128	; 0x80
 8013c54:	d137      	bne.n	8013cc6 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	3308      	adds	r3, #8
 8013c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5e:	6a3b      	ldr	r3, [r7, #32]
 8013c60:	e853 3f00 	ldrex	r3, [r3]
 8013c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c6c:	673b      	str	r3, [r7, #112]	; 0x70
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	3308      	adds	r3, #8
 8013c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c7e:	e841 2300 	strex	r3, r2, [r1]
 8013c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1e5      	bne.n	8013c56 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d019      	beq.n	8013cc6 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c96:	2200      	movs	r2, #0
 8013c98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f9 f832 	bl	800cd08 <HAL_DMA_Abort>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d00d      	beq.n	8013cc6 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fa fcb8 	bl	800e624 <HAL_DMA_GetError>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b20      	cmp	r3, #32
 8013cb8:	d105      	bne.n	8013cc6 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2210      	movs	r2, #16
 8013cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8013cc2:	2303      	movs	r3, #3
 8013cc4:	e06f      	b.n	8013da6 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cd0:	2b40      	cmp	r3, #64	; 0x40
 8013cd2:	d137      	bne.n	8013d44 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3308      	adds	r3, #8
 8013cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	e853 3f00 	ldrex	r3, [r3]
 8013ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	3308      	adds	r3, #8
 8013cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013cf4:	61ba      	str	r2, [r7, #24]
 8013cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cf8:	6979      	ldr	r1, [r7, #20]
 8013cfa:	69ba      	ldr	r2, [r7, #24]
 8013cfc:	e841 2300 	strex	r3, r2, [r1]
 8013d00:	613b      	str	r3, [r7, #16]
   return(result);
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d1e5      	bne.n	8013cd4 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d019      	beq.n	8013d44 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d14:	2200      	movs	r2, #0
 8013d16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f8 fff3 	bl	800cd08 <HAL_DMA_Abort>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00d      	beq.n	8013d44 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7fa fc79 	bl	800e624 <HAL_DMA_GetError>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b20      	cmp	r3, #32
 8013d36:	d105      	bne.n	8013d44 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2210      	movs	r2, #16
 8013d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8013d40:	2303      	movs	r3, #3
 8013d42:	e030      	b.n	8013da6 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2200      	movs	r2, #0
 8013d48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	220f      	movs	r2, #15
 8013d5a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013d64:	d107      	bne.n	8013d76 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	699a      	ldr	r2, [r3, #24]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	f042 0210 	orr.w	r2, r2, #16
 8013d74:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	699a      	ldr	r2, [r3, #24]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f042 0208 	orr.w	r2, r2, #8
 8013d84:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2220      	movs	r2, #32
 8013d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2220      	movs	r2, #32
 8013d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3780      	adds	r7, #128	; 0x80
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	ef7ffffe 	.word	0xef7ffffe

08013db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b0ba      	sub	sp, #232	; 0xe8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	69db      	ldr	r3, [r3, #28]
 8013dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	689b      	ldr	r3, [r3, #8]
 8013dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013dde:	f640 030f 	movw	r3, #2063	; 0x80f
 8013de2:	4013      	ands	r3, r2
 8013de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d11b      	bne.n	8013e28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013df4:	f003 0320 	and.w	r3, r3, #32
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d015      	beq.n	8013e28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e00:	f003 0320 	and.w	r3, r3, #32
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d105      	bne.n	8013e14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d009      	beq.n	8013e28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f000 835a 	beq.w	80144d2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	4798      	blx	r3
      }
      return;
 8013e26:	e354      	b.n	80144d2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f000 811f 	beq.w	8014070 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013e32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013e36:	4b8b      	ldr	r3, [pc, #556]	; (8014064 <HAL_UART_IRQHandler+0x2b0>)
 8013e38:	4013      	ands	r3, r2
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d106      	bne.n	8013e4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013e3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013e42:	4b89      	ldr	r3, [pc, #548]	; (8014068 <HAL_UART_IRQHandler+0x2b4>)
 8013e44:	4013      	ands	r3, r2
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f000 8112 	beq.w	8014070 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e50:	f003 0301 	and.w	r3, r3, #1
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d011      	beq.n	8013e7c <HAL_UART_IRQHandler+0xc8>
 8013e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00b      	beq.n	8013e7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e72:	f043 0201 	orr.w	r2, r3, #1
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e80:	f003 0302 	and.w	r3, r3, #2
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d011      	beq.n	8013eac <HAL_UART_IRQHandler+0xf8>
 8013e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013e8c:	f003 0301 	and.w	r3, r3, #1
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d00b      	beq.n	8013eac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	2202      	movs	r2, #2
 8013e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ea2:	f043 0204 	orr.w	r2, r3, #4
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013eb0:	f003 0304 	and.w	r3, r3, #4
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d011      	beq.n	8013edc <HAL_UART_IRQHandler+0x128>
 8013eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00b      	beq.n	8013edc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2204      	movs	r2, #4
 8013eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ed2:	f043 0202 	orr.w	r2, r3, #2
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ee0:	f003 0308 	and.w	r3, r3, #8
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d017      	beq.n	8013f18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013eec:	f003 0320 	and.w	r3, r3, #32
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d105      	bne.n	8013f00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013ef4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013ef8:	4b5a      	ldr	r3, [pc, #360]	; (8014064 <HAL_UART_IRQHandler+0x2b0>)
 8013efa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d00b      	beq.n	8013f18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2208      	movs	r2, #8
 8013f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f0e:	f043 0208 	orr.w	r2, r3, #8
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d012      	beq.n	8013f4a <HAL_UART_IRQHandler+0x196>
 8013f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d00c      	beq.n	8013f4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f40:	f043 0220 	orr.w	r2, r3, #32
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f000 82c0 	beq.w	80144d6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f5a:	f003 0320 	and.w	r3, r3, #32
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d013      	beq.n	8013f8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f66:	f003 0320 	and.w	r3, r3, #32
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d105      	bne.n	8013f7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d007      	beq.n	8013f8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	689b      	ldr	r3, [r3, #8]
 8013f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f9e:	2b40      	cmp	r3, #64	; 0x40
 8013fa0:	d005      	beq.n	8013fae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d04f      	beq.n	801404e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f001 faba 	bl	8015528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	689b      	ldr	r3, [r3, #8]
 8013fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fbe:	2b40      	cmp	r3, #64	; 0x40
 8013fc0:	d141      	bne.n	8014046 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	3308      	adds	r3, #8
 8013fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013fd0:	e853 3f00 	ldrex	r3, [r3]
 8013fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	3308      	adds	r3, #8
 8013fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013ffe:	e841 2300 	strex	r3, r2, [r1]
 8014002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d1d9      	bne.n	8013fc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014012:	2b00      	cmp	r3, #0
 8014014:	d013      	beq.n	801403e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801401a:	4a14      	ldr	r2, [pc, #80]	; (801406c <HAL_UART_IRQHandler+0x2b8>)
 801401c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014022:	4618      	mov	r0, r3
 8014024:	f7f9 f98e 	bl	800d344 <HAL_DMA_Abort_IT>
 8014028:	4603      	mov	r3, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d017      	beq.n	801405e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8014038:	4610      	mov	r0, r2
 801403a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801403c:	e00f      	b.n	801405e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f003 fa94 	bl	801756c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014044:	e00b      	b.n	801405e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f003 fa90 	bl	801756c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801404c:	e007      	b.n	801405e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f003 fa8c 	bl	801756c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 801405c:	e23b      	b.n	80144d6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801405e:	bf00      	nop
    return;
 8014060:	e239      	b.n	80144d6 <HAL_UART_IRQHandler+0x722>
 8014062:	bf00      	nop
 8014064:	10000001 	.word	0x10000001
 8014068:	04000120 	.word	0x04000120
 801406c:	080157cf 	.word	0x080157cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014074:	2b01      	cmp	r3, #1
 8014076:	f040 81ce 	bne.w	8014416 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801407e:	f003 0310 	and.w	r3, r3, #16
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 81c7 	beq.w	8014416 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801408c:	f003 0310 	and.w	r3, r3, #16
 8014090:	2b00      	cmp	r3, #0
 8014092:	f000 81c0 	beq.w	8014416 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	2210      	movs	r2, #16
 801409c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	689b      	ldr	r3, [r3, #8]
 80140a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140a8:	2b40      	cmp	r3, #64	; 0x40
 80140aa:	f040 813b 	bne.w	8014324 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4a8b      	ldr	r2, [pc, #556]	; (80142e4 <HAL_UART_IRQHandler+0x530>)
 80140b6:	4293      	cmp	r3, r2
 80140b8:	d059      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	4a89      	ldr	r2, [pc, #548]	; (80142e8 <HAL_UART_IRQHandler+0x534>)
 80140c2:	4293      	cmp	r3, r2
 80140c4:	d053      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a87      	ldr	r2, [pc, #540]	; (80142ec <HAL_UART_IRQHandler+0x538>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d04d      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	4a85      	ldr	r2, [pc, #532]	; (80142f0 <HAL_UART_IRQHandler+0x53c>)
 80140da:	4293      	cmp	r3, r2
 80140dc:	d047      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4a83      	ldr	r2, [pc, #524]	; (80142f4 <HAL_UART_IRQHandler+0x540>)
 80140e6:	4293      	cmp	r3, r2
 80140e8:	d041      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	4a81      	ldr	r2, [pc, #516]	; (80142f8 <HAL_UART_IRQHandler+0x544>)
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d03b      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4a7f      	ldr	r2, [pc, #508]	; (80142fc <HAL_UART_IRQHandler+0x548>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d035      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4a7d      	ldr	r2, [pc, #500]	; (8014300 <HAL_UART_IRQHandler+0x54c>)
 801410a:	4293      	cmp	r3, r2
 801410c:	d02f      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4a7b      	ldr	r2, [pc, #492]	; (8014304 <HAL_UART_IRQHandler+0x550>)
 8014116:	4293      	cmp	r3, r2
 8014118:	d029      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4a79      	ldr	r2, [pc, #484]	; (8014308 <HAL_UART_IRQHandler+0x554>)
 8014122:	4293      	cmp	r3, r2
 8014124:	d023      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4a77      	ldr	r2, [pc, #476]	; (801430c <HAL_UART_IRQHandler+0x558>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d01d      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a75      	ldr	r2, [pc, #468]	; (8014310 <HAL_UART_IRQHandler+0x55c>)
 801413a:	4293      	cmp	r3, r2
 801413c:	d017      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4a73      	ldr	r2, [pc, #460]	; (8014314 <HAL_UART_IRQHandler+0x560>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d011      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	4a71      	ldr	r2, [pc, #452]	; (8014318 <HAL_UART_IRQHandler+0x564>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d00b      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4a6f      	ldr	r2, [pc, #444]	; (801431c <HAL_UART_IRQHandler+0x568>)
 801415e:	4293      	cmp	r3, r2
 8014160:	d005      	beq.n	801416e <HAL_UART_IRQHandler+0x3ba>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4a6d      	ldr	r2, [pc, #436]	; (8014320 <HAL_UART_IRQHandler+0x56c>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d105      	bne.n	801417a <HAL_UART_IRQHandler+0x3c6>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	b29b      	uxth	r3, r3
 8014178:	e004      	b.n	8014184 <HAL_UART_IRQHandler+0x3d0>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	b29b      	uxth	r3, r3
 8014184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801418c:	2b00      	cmp	r3, #0
 801418e:	f000 81a4 	beq.w	80144da <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801419c:	429a      	cmp	r2, r3
 801419e:	f080 819c 	bcs.w	80144da <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80141a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141b0:	69db      	ldr	r3, [r3, #28]
 80141b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80141b6:	f000 8086 	beq.w	80142c6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80141c6:	e853 3f00 	ldrex	r3, [r3]
 80141ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80141ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80141d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	461a      	mov	r2, r3
 80141e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80141e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80141e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80141f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80141f4:	e841 2300 	strex	r3, r2, [r1]
 80141f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80141fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014200:	2b00      	cmp	r3, #0
 8014202:	d1da      	bne.n	80141ba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	3308      	adds	r3, #8
 801420a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801420e:	e853 3f00 	ldrex	r3, [r3]
 8014212:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014216:	f023 0301 	bic.w	r3, r3, #1
 801421a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	3308      	adds	r3, #8
 8014224:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014228:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801422c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801422e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014230:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014234:	e841 2300 	strex	r3, r2, [r1]
 8014238:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801423a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1e1      	bne.n	8014204 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	3308      	adds	r3, #8
 8014246:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801424a:	e853 3f00 	ldrex	r3, [r3]
 801424e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	3308      	adds	r3, #8
 8014260:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014264:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014266:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014268:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801426a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801426c:	e841 2300 	strex	r3, r2, [r1]
 8014270:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014274:	2b00      	cmp	r3, #0
 8014276:	d1e3      	bne.n	8014240 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2220      	movs	r2, #32
 801427c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2200      	movs	r2, #0
 8014284:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801428e:	e853 3f00 	ldrex	r3, [r3]
 8014292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014296:	f023 0310 	bic.w	r3, r3, #16
 801429a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	461a      	mov	r2, r3
 80142a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80142aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80142ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80142b0:	e841 2300 	strex	r3, r2, [r1]
 80142b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80142b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1e4      	bne.n	8014286 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f8 fd21 	bl	800cd08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	1ad3      	subs	r3, r2, r3
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4619      	mov	r1, r3
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f003 f8d2 	bl	8017484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80142e0:	e0fb      	b.n	80144da <HAL_UART_IRQHandler+0x726>
 80142e2:	bf00      	nop
 80142e4:	40020010 	.word	0x40020010
 80142e8:	40020028 	.word	0x40020028
 80142ec:	40020040 	.word	0x40020040
 80142f0:	40020058 	.word	0x40020058
 80142f4:	40020070 	.word	0x40020070
 80142f8:	40020088 	.word	0x40020088
 80142fc:	400200a0 	.word	0x400200a0
 8014300:	400200b8 	.word	0x400200b8
 8014304:	40020410 	.word	0x40020410
 8014308:	40020428 	.word	0x40020428
 801430c:	40020440 	.word	0x40020440
 8014310:	40020458 	.word	0x40020458
 8014314:	40020470 	.word	0x40020470
 8014318:	40020488 	.word	0x40020488
 801431c:	400204a0 	.word	0x400204a0
 8014320:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014330:	b29b      	uxth	r3, r3
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801433e:	b29b      	uxth	r3, r3
 8014340:	2b00      	cmp	r3, #0
 8014342:	f000 80cc 	beq.w	80144de <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8014346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801434a:	2b00      	cmp	r3, #0
 801434c:	f000 80c7 	beq.w	80144de <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014358:	e853 3f00 	ldrex	r3, [r3]
 801435c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	461a      	mov	r2, r3
 801436e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014372:	647b      	str	r3, [r7, #68]	; 0x44
 8014374:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801437a:	e841 2300 	strex	r3, r2, [r1]
 801437e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1e4      	bne.n	8014350 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	3308      	adds	r3, #8
 801438c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	e853 3f00 	ldrex	r3, [r3]
 8014394:	623b      	str	r3, [r7, #32]
   return(result);
 8014396:	6a3a      	ldr	r2, [r7, #32]
 8014398:	4b54      	ldr	r3, [pc, #336]	; (80144ec <HAL_UART_IRQHandler+0x738>)
 801439a:	4013      	ands	r3, r2
 801439c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	3308      	adds	r3, #8
 80143a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80143aa:	633a      	str	r2, [r7, #48]	; 0x30
 80143ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143b2:	e841 2300 	strex	r3, r2, [r1]
 80143b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80143b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1e3      	bne.n	8014386 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2220      	movs	r2, #32
 80143c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2200      	movs	r2, #0
 80143d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	e853 3f00 	ldrex	r3, [r3]
 80143de:	60fb      	str	r3, [r7, #12]
   return(result);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f023 0310 	bic.w	r3, r3, #16
 80143e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	461a      	mov	r2, r3
 80143f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80143f4:	61fb      	str	r3, [r7, #28]
 80143f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143f8:	69b9      	ldr	r1, [r7, #24]
 80143fa:	69fa      	ldr	r2, [r7, #28]
 80143fc:	e841 2300 	strex	r3, r2, [r1]
 8014400:	617b      	str	r3, [r7, #20]
   return(result);
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d1e4      	bne.n	80143d2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801440c:	4619      	mov	r1, r3
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f003 f838 	bl	8017484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014414:	e063      	b.n	80144de <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00e      	beq.n	8014440 <HAL_UART_IRQHandler+0x68c>
 8014422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801442a:	2b00      	cmp	r3, #0
 801442c:	d008      	beq.n	8014440 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f001 fa09 	bl	8015850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801443e:	e051      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014448:	2b00      	cmp	r3, #0
 801444a:	d014      	beq.n	8014476 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014454:	2b00      	cmp	r3, #0
 8014456:	d105      	bne.n	8014464 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801445c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014460:	2b00      	cmp	r3, #0
 8014462:	d008      	beq.n	8014476 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014468:	2b00      	cmp	r3, #0
 801446a:	d03a      	beq.n	80144e2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	4798      	blx	r3
    }
    return;
 8014474:	e035      	b.n	80144e2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801447e:	2b00      	cmp	r3, #0
 8014480:	d009      	beq.n	8014496 <HAL_UART_IRQHandler+0x6e2>
 8014482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801448a:	2b00      	cmp	r3, #0
 801448c:	d003      	beq.n	8014496 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f001 f9b3 	bl	80157fa <UART_EndTransmit_IT>
    return;
 8014494:	e026      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801449a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d009      	beq.n	80144b6 <HAL_UART_IRQHandler+0x702>
 80144a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d003      	beq.n	80144b6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f001 f9e2 	bl	8015878 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80144b4:	e016      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80144b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d010      	beq.n	80144e4 <HAL_UART_IRQHandler+0x730>
 80144c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	da0c      	bge.n	80144e4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f001 f9ca 	bl	8015864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80144d0:	e008      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
      return;
 80144d2:	bf00      	nop
 80144d4:	e006      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
    return;
 80144d6:	bf00      	nop
 80144d8:	e004      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
      return;
 80144da:	bf00      	nop
 80144dc:	e002      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
      return;
 80144de:	bf00      	nop
 80144e0:	e000      	b.n	80144e4 <HAL_UART_IRQHandler+0x730>
    return;
 80144e2:	bf00      	nop
  }
}
 80144e4:	37e8      	adds	r7, #232	; 0xe8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop
 80144ec:	effffffe 	.word	0xeffffffe

080144f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80144f8:	bf00      	nop
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801450c:	bf00      	nop
 801450e:	370c      	adds	r7, #12
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801451c:	b092      	sub	sp, #72	; 0x48
 801451e:	af00      	add	r7, sp, #0
 8014520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014522:	2300      	movs	r3, #0
 8014524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	689a      	ldr	r2, [r3, #8]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	691b      	ldr	r3, [r3, #16]
 8014530:	431a      	orrs	r2, r3
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	695b      	ldr	r3, [r3, #20]
 8014536:	431a      	orrs	r2, r3
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	69db      	ldr	r3, [r3, #28]
 801453c:	4313      	orrs	r3, r2
 801453e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	4bbe      	ldr	r3, [pc, #760]	; (8014840 <UART_SetConfig+0x328>)
 8014548:	4013      	ands	r3, r2
 801454a:	697a      	ldr	r2, [r7, #20]
 801454c:	6812      	ldr	r2, [r2, #0]
 801454e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014550:	430b      	orrs	r3, r1
 8014552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	68da      	ldr	r2, [r3, #12]
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	430a      	orrs	r2, r1
 8014568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	699b      	ldr	r3, [r3, #24]
 801456e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4ab3      	ldr	r2, [pc, #716]	; (8014844 <UART_SetConfig+0x32c>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d004      	beq.n	8014584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	6a1b      	ldr	r3, [r3, #32]
 801457e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014580:	4313      	orrs	r3, r2
 8014582:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	689a      	ldr	r2, [r3, #8]
 801458a:	4baf      	ldr	r3, [pc, #700]	; (8014848 <UART_SetConfig+0x330>)
 801458c:	4013      	ands	r3, r2
 801458e:	697a      	ldr	r2, [r7, #20]
 8014590:	6812      	ldr	r2, [r2, #0]
 8014592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014594:	430b      	orrs	r3, r1
 8014596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459e:	f023 010f 	bic.w	r1, r3, #15
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	430a      	orrs	r2, r1
 80145ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	4aa6      	ldr	r2, [pc, #664]	; (801484c <UART_SetConfig+0x334>)
 80145b4:	4293      	cmp	r3, r2
 80145b6:	d177      	bne.n	80146a8 <UART_SetConfig+0x190>
 80145b8:	4ba5      	ldr	r3, [pc, #660]	; (8014850 <UART_SetConfig+0x338>)
 80145ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80145c0:	2b28      	cmp	r3, #40	; 0x28
 80145c2:	d86d      	bhi.n	80146a0 <UART_SetConfig+0x188>
 80145c4:	a201      	add	r2, pc, #4	; (adr r2, 80145cc <UART_SetConfig+0xb4>)
 80145c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145ca:	bf00      	nop
 80145cc:	08014671 	.word	0x08014671
 80145d0:	080146a1 	.word	0x080146a1
 80145d4:	080146a1 	.word	0x080146a1
 80145d8:	080146a1 	.word	0x080146a1
 80145dc:	080146a1 	.word	0x080146a1
 80145e0:	080146a1 	.word	0x080146a1
 80145e4:	080146a1 	.word	0x080146a1
 80145e8:	080146a1 	.word	0x080146a1
 80145ec:	08014679 	.word	0x08014679
 80145f0:	080146a1 	.word	0x080146a1
 80145f4:	080146a1 	.word	0x080146a1
 80145f8:	080146a1 	.word	0x080146a1
 80145fc:	080146a1 	.word	0x080146a1
 8014600:	080146a1 	.word	0x080146a1
 8014604:	080146a1 	.word	0x080146a1
 8014608:	080146a1 	.word	0x080146a1
 801460c:	08014681 	.word	0x08014681
 8014610:	080146a1 	.word	0x080146a1
 8014614:	080146a1 	.word	0x080146a1
 8014618:	080146a1 	.word	0x080146a1
 801461c:	080146a1 	.word	0x080146a1
 8014620:	080146a1 	.word	0x080146a1
 8014624:	080146a1 	.word	0x080146a1
 8014628:	080146a1 	.word	0x080146a1
 801462c:	08014689 	.word	0x08014689
 8014630:	080146a1 	.word	0x080146a1
 8014634:	080146a1 	.word	0x080146a1
 8014638:	080146a1 	.word	0x080146a1
 801463c:	080146a1 	.word	0x080146a1
 8014640:	080146a1 	.word	0x080146a1
 8014644:	080146a1 	.word	0x080146a1
 8014648:	080146a1 	.word	0x080146a1
 801464c:	08014691 	.word	0x08014691
 8014650:	080146a1 	.word	0x080146a1
 8014654:	080146a1 	.word	0x080146a1
 8014658:	080146a1 	.word	0x080146a1
 801465c:	080146a1 	.word	0x080146a1
 8014660:	080146a1 	.word	0x080146a1
 8014664:	080146a1 	.word	0x080146a1
 8014668:	080146a1 	.word	0x080146a1
 801466c:	08014699 	.word	0x08014699
 8014670:	2301      	movs	r3, #1
 8014672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014676:	e222      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014678:	2304      	movs	r3, #4
 801467a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801467e:	e21e      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014680:	2308      	movs	r3, #8
 8014682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014686:	e21a      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014688:	2310      	movs	r3, #16
 801468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801468e:	e216      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014690:	2320      	movs	r3, #32
 8014692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014696:	e212      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014698:	2340      	movs	r3, #64	; 0x40
 801469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801469e:	e20e      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146a0:	2380      	movs	r3, #128	; 0x80
 80146a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146a6:	e20a      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4a69      	ldr	r2, [pc, #420]	; (8014854 <UART_SetConfig+0x33c>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d130      	bne.n	8014714 <UART_SetConfig+0x1fc>
 80146b2:	4b67      	ldr	r3, [pc, #412]	; (8014850 <UART_SetConfig+0x338>)
 80146b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146b6:	f003 0307 	and.w	r3, r3, #7
 80146ba:	2b05      	cmp	r3, #5
 80146bc:	d826      	bhi.n	801470c <UART_SetConfig+0x1f4>
 80146be:	a201      	add	r2, pc, #4	; (adr r2, 80146c4 <UART_SetConfig+0x1ac>)
 80146c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146c4:	080146dd 	.word	0x080146dd
 80146c8:	080146e5 	.word	0x080146e5
 80146cc:	080146ed 	.word	0x080146ed
 80146d0:	080146f5 	.word	0x080146f5
 80146d4:	080146fd 	.word	0x080146fd
 80146d8:	08014705 	.word	0x08014705
 80146dc:	2300      	movs	r3, #0
 80146de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146e2:	e1ec      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146e4:	2304      	movs	r3, #4
 80146e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ea:	e1e8      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146ec:	2308      	movs	r3, #8
 80146ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146f2:	e1e4      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146f4:	2310      	movs	r3, #16
 80146f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146fa:	e1e0      	b.n	8014abe <UART_SetConfig+0x5a6>
 80146fc:	2320      	movs	r3, #32
 80146fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014702:	e1dc      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014704:	2340      	movs	r3, #64	; 0x40
 8014706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801470a:	e1d8      	b.n	8014abe <UART_SetConfig+0x5a6>
 801470c:	2380      	movs	r3, #128	; 0x80
 801470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014712:	e1d4      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	4a4f      	ldr	r2, [pc, #316]	; (8014858 <UART_SetConfig+0x340>)
 801471a:	4293      	cmp	r3, r2
 801471c:	d130      	bne.n	8014780 <UART_SetConfig+0x268>
 801471e:	4b4c      	ldr	r3, [pc, #304]	; (8014850 <UART_SetConfig+0x338>)
 8014720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014722:	f003 0307 	and.w	r3, r3, #7
 8014726:	2b05      	cmp	r3, #5
 8014728:	d826      	bhi.n	8014778 <UART_SetConfig+0x260>
 801472a:	a201      	add	r2, pc, #4	; (adr r2, 8014730 <UART_SetConfig+0x218>)
 801472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014730:	08014749 	.word	0x08014749
 8014734:	08014751 	.word	0x08014751
 8014738:	08014759 	.word	0x08014759
 801473c:	08014761 	.word	0x08014761
 8014740:	08014769 	.word	0x08014769
 8014744:	08014771 	.word	0x08014771
 8014748:	2300      	movs	r3, #0
 801474a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801474e:	e1b6      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014750:	2304      	movs	r3, #4
 8014752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014756:	e1b2      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014758:	2308      	movs	r3, #8
 801475a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801475e:	e1ae      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014760:	2310      	movs	r3, #16
 8014762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014766:	e1aa      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014768:	2320      	movs	r3, #32
 801476a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801476e:	e1a6      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014770:	2340      	movs	r3, #64	; 0x40
 8014772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014776:	e1a2      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014778:	2380      	movs	r3, #128	; 0x80
 801477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801477e:	e19e      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4a35      	ldr	r2, [pc, #212]	; (801485c <UART_SetConfig+0x344>)
 8014786:	4293      	cmp	r3, r2
 8014788:	d130      	bne.n	80147ec <UART_SetConfig+0x2d4>
 801478a:	4b31      	ldr	r3, [pc, #196]	; (8014850 <UART_SetConfig+0x338>)
 801478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801478e:	f003 0307 	and.w	r3, r3, #7
 8014792:	2b05      	cmp	r3, #5
 8014794:	d826      	bhi.n	80147e4 <UART_SetConfig+0x2cc>
 8014796:	a201      	add	r2, pc, #4	; (adr r2, 801479c <UART_SetConfig+0x284>)
 8014798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801479c:	080147b5 	.word	0x080147b5
 80147a0:	080147bd 	.word	0x080147bd
 80147a4:	080147c5 	.word	0x080147c5
 80147a8:	080147cd 	.word	0x080147cd
 80147ac:	080147d5 	.word	0x080147d5
 80147b0:	080147dd 	.word	0x080147dd
 80147b4:	2300      	movs	r3, #0
 80147b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ba:	e180      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147bc:	2304      	movs	r3, #4
 80147be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147c2:	e17c      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147c4:	2308      	movs	r3, #8
 80147c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ca:	e178      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147cc:	2310      	movs	r3, #16
 80147ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147d2:	e174      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147d4:	2320      	movs	r3, #32
 80147d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147da:	e170      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147dc:	2340      	movs	r3, #64	; 0x40
 80147de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147e2:	e16c      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147e4:	2380      	movs	r3, #128	; 0x80
 80147e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ea:	e168      	b.n	8014abe <UART_SetConfig+0x5a6>
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4a1b      	ldr	r2, [pc, #108]	; (8014860 <UART_SetConfig+0x348>)
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d142      	bne.n	801487c <UART_SetConfig+0x364>
 80147f6:	4b16      	ldr	r3, [pc, #88]	; (8014850 <UART_SetConfig+0x338>)
 80147f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147fa:	f003 0307 	and.w	r3, r3, #7
 80147fe:	2b05      	cmp	r3, #5
 8014800:	d838      	bhi.n	8014874 <UART_SetConfig+0x35c>
 8014802:	a201      	add	r2, pc, #4	; (adr r2, 8014808 <UART_SetConfig+0x2f0>)
 8014804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014808:	08014821 	.word	0x08014821
 801480c:	08014829 	.word	0x08014829
 8014810:	08014831 	.word	0x08014831
 8014814:	08014839 	.word	0x08014839
 8014818:	08014865 	.word	0x08014865
 801481c:	0801486d 	.word	0x0801486d
 8014820:	2300      	movs	r3, #0
 8014822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014826:	e14a      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014828:	2304      	movs	r3, #4
 801482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801482e:	e146      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014830:	2308      	movs	r3, #8
 8014832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014836:	e142      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014838:	2310      	movs	r3, #16
 801483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801483e:	e13e      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014840:	cfff69f3 	.word	0xcfff69f3
 8014844:	58000c00 	.word	0x58000c00
 8014848:	11fff4ff 	.word	0x11fff4ff
 801484c:	40011000 	.word	0x40011000
 8014850:	58024400 	.word	0x58024400
 8014854:	40004400 	.word	0x40004400
 8014858:	40004800 	.word	0x40004800
 801485c:	40004c00 	.word	0x40004c00
 8014860:	40005000 	.word	0x40005000
 8014864:	2320      	movs	r3, #32
 8014866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801486a:	e128      	b.n	8014abe <UART_SetConfig+0x5a6>
 801486c:	2340      	movs	r3, #64	; 0x40
 801486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014872:	e124      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014874:	2380      	movs	r3, #128	; 0x80
 8014876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801487a:	e120      	b.n	8014abe <UART_SetConfig+0x5a6>
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	4acb      	ldr	r2, [pc, #812]	; (8014bb0 <UART_SetConfig+0x698>)
 8014882:	4293      	cmp	r3, r2
 8014884:	d176      	bne.n	8014974 <UART_SetConfig+0x45c>
 8014886:	4bcb      	ldr	r3, [pc, #812]	; (8014bb4 <UART_SetConfig+0x69c>)
 8014888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801488a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801488e:	2b28      	cmp	r3, #40	; 0x28
 8014890:	d86c      	bhi.n	801496c <UART_SetConfig+0x454>
 8014892:	a201      	add	r2, pc, #4	; (adr r2, 8014898 <UART_SetConfig+0x380>)
 8014894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014898:	0801493d 	.word	0x0801493d
 801489c:	0801496d 	.word	0x0801496d
 80148a0:	0801496d 	.word	0x0801496d
 80148a4:	0801496d 	.word	0x0801496d
 80148a8:	0801496d 	.word	0x0801496d
 80148ac:	0801496d 	.word	0x0801496d
 80148b0:	0801496d 	.word	0x0801496d
 80148b4:	0801496d 	.word	0x0801496d
 80148b8:	08014945 	.word	0x08014945
 80148bc:	0801496d 	.word	0x0801496d
 80148c0:	0801496d 	.word	0x0801496d
 80148c4:	0801496d 	.word	0x0801496d
 80148c8:	0801496d 	.word	0x0801496d
 80148cc:	0801496d 	.word	0x0801496d
 80148d0:	0801496d 	.word	0x0801496d
 80148d4:	0801496d 	.word	0x0801496d
 80148d8:	0801494d 	.word	0x0801494d
 80148dc:	0801496d 	.word	0x0801496d
 80148e0:	0801496d 	.word	0x0801496d
 80148e4:	0801496d 	.word	0x0801496d
 80148e8:	0801496d 	.word	0x0801496d
 80148ec:	0801496d 	.word	0x0801496d
 80148f0:	0801496d 	.word	0x0801496d
 80148f4:	0801496d 	.word	0x0801496d
 80148f8:	08014955 	.word	0x08014955
 80148fc:	0801496d 	.word	0x0801496d
 8014900:	0801496d 	.word	0x0801496d
 8014904:	0801496d 	.word	0x0801496d
 8014908:	0801496d 	.word	0x0801496d
 801490c:	0801496d 	.word	0x0801496d
 8014910:	0801496d 	.word	0x0801496d
 8014914:	0801496d 	.word	0x0801496d
 8014918:	0801495d 	.word	0x0801495d
 801491c:	0801496d 	.word	0x0801496d
 8014920:	0801496d 	.word	0x0801496d
 8014924:	0801496d 	.word	0x0801496d
 8014928:	0801496d 	.word	0x0801496d
 801492c:	0801496d 	.word	0x0801496d
 8014930:	0801496d 	.word	0x0801496d
 8014934:	0801496d 	.word	0x0801496d
 8014938:	08014965 	.word	0x08014965
 801493c:	2301      	movs	r3, #1
 801493e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014942:	e0bc      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014944:	2304      	movs	r3, #4
 8014946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801494a:	e0b8      	b.n	8014abe <UART_SetConfig+0x5a6>
 801494c:	2308      	movs	r3, #8
 801494e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014952:	e0b4      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014954:	2310      	movs	r3, #16
 8014956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801495a:	e0b0      	b.n	8014abe <UART_SetConfig+0x5a6>
 801495c:	2320      	movs	r3, #32
 801495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014962:	e0ac      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014964:	2340      	movs	r3, #64	; 0x40
 8014966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801496a:	e0a8      	b.n	8014abe <UART_SetConfig+0x5a6>
 801496c:	2380      	movs	r3, #128	; 0x80
 801496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014972:	e0a4      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4a8f      	ldr	r2, [pc, #572]	; (8014bb8 <UART_SetConfig+0x6a0>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d130      	bne.n	80149e0 <UART_SetConfig+0x4c8>
 801497e:	4b8d      	ldr	r3, [pc, #564]	; (8014bb4 <UART_SetConfig+0x69c>)
 8014980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014982:	f003 0307 	and.w	r3, r3, #7
 8014986:	2b05      	cmp	r3, #5
 8014988:	d826      	bhi.n	80149d8 <UART_SetConfig+0x4c0>
 801498a:	a201      	add	r2, pc, #4	; (adr r2, 8014990 <UART_SetConfig+0x478>)
 801498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014990:	080149a9 	.word	0x080149a9
 8014994:	080149b1 	.word	0x080149b1
 8014998:	080149b9 	.word	0x080149b9
 801499c:	080149c1 	.word	0x080149c1
 80149a0:	080149c9 	.word	0x080149c9
 80149a4:	080149d1 	.word	0x080149d1
 80149a8:	2300      	movs	r3, #0
 80149aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149ae:	e086      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149b0:	2304      	movs	r3, #4
 80149b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149b6:	e082      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149b8:	2308      	movs	r3, #8
 80149ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149be:	e07e      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149c0:	2310      	movs	r3, #16
 80149c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149c6:	e07a      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149c8:	2320      	movs	r3, #32
 80149ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149ce:	e076      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149d0:	2340      	movs	r3, #64	; 0x40
 80149d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149d6:	e072      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149d8:	2380      	movs	r3, #128	; 0x80
 80149da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149de:	e06e      	b.n	8014abe <UART_SetConfig+0x5a6>
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	4a75      	ldr	r2, [pc, #468]	; (8014bbc <UART_SetConfig+0x6a4>)
 80149e6:	4293      	cmp	r3, r2
 80149e8:	d130      	bne.n	8014a4c <UART_SetConfig+0x534>
 80149ea:	4b72      	ldr	r3, [pc, #456]	; (8014bb4 <UART_SetConfig+0x69c>)
 80149ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149ee:	f003 0307 	and.w	r3, r3, #7
 80149f2:	2b05      	cmp	r3, #5
 80149f4:	d826      	bhi.n	8014a44 <UART_SetConfig+0x52c>
 80149f6:	a201      	add	r2, pc, #4	; (adr r2, 80149fc <UART_SetConfig+0x4e4>)
 80149f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149fc:	08014a15 	.word	0x08014a15
 8014a00:	08014a1d 	.word	0x08014a1d
 8014a04:	08014a25 	.word	0x08014a25
 8014a08:	08014a2d 	.word	0x08014a2d
 8014a0c:	08014a35 	.word	0x08014a35
 8014a10:	08014a3d 	.word	0x08014a3d
 8014a14:	2300      	movs	r3, #0
 8014a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a1a:	e050      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a1c:	2304      	movs	r3, #4
 8014a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a22:	e04c      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a24:	2308      	movs	r3, #8
 8014a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a2a:	e048      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a2c:	2310      	movs	r3, #16
 8014a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a32:	e044      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a34:	2320      	movs	r3, #32
 8014a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a3a:	e040      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a3c:	2340      	movs	r3, #64	; 0x40
 8014a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a42:	e03c      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a44:	2380      	movs	r3, #128	; 0x80
 8014a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a4a:	e038      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a5b      	ldr	r2, [pc, #364]	; (8014bc0 <UART_SetConfig+0x6a8>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d130      	bne.n	8014ab8 <UART_SetConfig+0x5a0>
 8014a56:	4b57      	ldr	r3, [pc, #348]	; (8014bb4 <UART_SetConfig+0x69c>)
 8014a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a5a:	f003 0307 	and.w	r3, r3, #7
 8014a5e:	2b05      	cmp	r3, #5
 8014a60:	d826      	bhi.n	8014ab0 <UART_SetConfig+0x598>
 8014a62:	a201      	add	r2, pc, #4	; (adr r2, 8014a68 <UART_SetConfig+0x550>)
 8014a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a68:	08014a81 	.word	0x08014a81
 8014a6c:	08014a89 	.word	0x08014a89
 8014a70:	08014a91 	.word	0x08014a91
 8014a74:	08014a99 	.word	0x08014a99
 8014a78:	08014aa1 	.word	0x08014aa1
 8014a7c:	08014aa9 	.word	0x08014aa9
 8014a80:	2302      	movs	r3, #2
 8014a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a86:	e01a      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a88:	2304      	movs	r3, #4
 8014a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a8e:	e016      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a90:	2308      	movs	r3, #8
 8014a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a96:	e012      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014a98:	2310      	movs	r3, #16
 8014a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a9e:	e00e      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014aa0:	2320      	movs	r3, #32
 8014aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aa6:	e00a      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014aa8:	2340      	movs	r3, #64	; 0x40
 8014aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014aae:	e006      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014ab0:	2380      	movs	r3, #128	; 0x80
 8014ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ab6:	e002      	b.n	8014abe <UART_SetConfig+0x5a6>
 8014ab8:	2380      	movs	r3, #128	; 0x80
 8014aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a3f      	ldr	r2, [pc, #252]	; (8014bc0 <UART_SetConfig+0x6a8>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	f040 80f8 	bne.w	8014cba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014aca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014ace:	2b20      	cmp	r3, #32
 8014ad0:	dc46      	bgt.n	8014b60 <UART_SetConfig+0x648>
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	f2c0 8082 	blt.w	8014bdc <UART_SetConfig+0x6c4>
 8014ad8:	3b02      	subs	r3, #2
 8014ada:	2b1e      	cmp	r3, #30
 8014adc:	d87e      	bhi.n	8014bdc <UART_SetConfig+0x6c4>
 8014ade:	a201      	add	r2, pc, #4	; (adr r2, 8014ae4 <UART_SetConfig+0x5cc>)
 8014ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ae4:	08014b67 	.word	0x08014b67
 8014ae8:	08014bdd 	.word	0x08014bdd
 8014aec:	08014b6f 	.word	0x08014b6f
 8014af0:	08014bdd 	.word	0x08014bdd
 8014af4:	08014bdd 	.word	0x08014bdd
 8014af8:	08014bdd 	.word	0x08014bdd
 8014afc:	08014b7f 	.word	0x08014b7f
 8014b00:	08014bdd 	.word	0x08014bdd
 8014b04:	08014bdd 	.word	0x08014bdd
 8014b08:	08014bdd 	.word	0x08014bdd
 8014b0c:	08014bdd 	.word	0x08014bdd
 8014b10:	08014bdd 	.word	0x08014bdd
 8014b14:	08014bdd 	.word	0x08014bdd
 8014b18:	08014bdd 	.word	0x08014bdd
 8014b1c:	08014b8f 	.word	0x08014b8f
 8014b20:	08014bdd 	.word	0x08014bdd
 8014b24:	08014bdd 	.word	0x08014bdd
 8014b28:	08014bdd 	.word	0x08014bdd
 8014b2c:	08014bdd 	.word	0x08014bdd
 8014b30:	08014bdd 	.word	0x08014bdd
 8014b34:	08014bdd 	.word	0x08014bdd
 8014b38:	08014bdd 	.word	0x08014bdd
 8014b3c:	08014bdd 	.word	0x08014bdd
 8014b40:	08014bdd 	.word	0x08014bdd
 8014b44:	08014bdd 	.word	0x08014bdd
 8014b48:	08014bdd 	.word	0x08014bdd
 8014b4c:	08014bdd 	.word	0x08014bdd
 8014b50:	08014bdd 	.word	0x08014bdd
 8014b54:	08014bdd 	.word	0x08014bdd
 8014b58:	08014bdd 	.word	0x08014bdd
 8014b5c:	08014bcf 	.word	0x08014bcf
 8014b60:	2b40      	cmp	r3, #64	; 0x40
 8014b62:	d037      	beq.n	8014bd4 <UART_SetConfig+0x6bc>
 8014b64:	e03a      	b.n	8014bdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014b66:	f7fd fe85 	bl	8012874 <HAL_RCCEx_GetD3PCLK1Freq>
 8014b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014b6c:	e03c      	b.n	8014be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fd fe94 	bl	80128a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b7c:	e034      	b.n	8014be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014b7e:	f107 0318 	add.w	r3, r7, #24
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fd ffe0 	bl	8012b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b8c:	e02c      	b.n	8014be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014b8e:	4b09      	ldr	r3, [pc, #36]	; (8014bb4 <UART_SetConfig+0x69c>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f003 0320 	and.w	r3, r3, #32
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d016      	beq.n	8014bc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014b9a:	4b06      	ldr	r3, [pc, #24]	; (8014bb4 <UART_SetConfig+0x69c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	08db      	lsrs	r3, r3, #3
 8014ba0:	f003 0303 	and.w	r3, r3, #3
 8014ba4:	4a07      	ldr	r2, [pc, #28]	; (8014bc4 <UART_SetConfig+0x6ac>)
 8014ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8014baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014bac:	e01c      	b.n	8014be8 <UART_SetConfig+0x6d0>
 8014bae:	bf00      	nop
 8014bb0:	40011400 	.word	0x40011400
 8014bb4:	58024400 	.word	0x58024400
 8014bb8:	40007800 	.word	0x40007800
 8014bbc:	40007c00 	.word	0x40007c00
 8014bc0:	58000c00 	.word	0x58000c00
 8014bc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014bc8:	4b9d      	ldr	r3, [pc, #628]	; (8014e40 <UART_SetConfig+0x928>)
 8014bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014bcc:	e00c      	b.n	8014be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014bce:	4b9d      	ldr	r3, [pc, #628]	; (8014e44 <UART_SetConfig+0x92c>)
 8014bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014bd2:	e009      	b.n	8014be8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014bda:	e005      	b.n	8014be8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014be0:	2301      	movs	r3, #1
 8014be2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014be6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f000 81de 	beq.w	8014fac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bf4:	4a94      	ldr	r2, [pc, #592]	; (8014e48 <UART_SetConfig+0x930>)
 8014bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	685a      	ldr	r2, [r3, #4]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d305      	bcc.n	8014c20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d903      	bls.n	8014c28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014c20:	2301      	movs	r3, #1
 8014c22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014c26:	e1c1      	b.n	8014fac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	60bb      	str	r3, [r7, #8]
 8014c2e:	60fa      	str	r2, [r7, #12]
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c34:	4a84      	ldr	r2, [pc, #528]	; (8014e48 <UART_SetConfig+0x930>)
 8014c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	603b      	str	r3, [r7, #0]
 8014c40:	607a      	str	r2, [r7, #4]
 8014c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014c4a:	f7f4 f969 	bl	8008f20 <__aeabi_uldivmod>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	460b      	mov	r3, r1
 8014c52:	4610      	mov	r0, r2
 8014c54:	4619      	mov	r1, r3
 8014c56:	f04f 0200 	mov.w	r2, #0
 8014c5a:	f04f 0300 	mov.w	r3, #0
 8014c5e:	020b      	lsls	r3, r1, #8
 8014c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014c64:	0202      	lsls	r2, r0, #8
 8014c66:	6979      	ldr	r1, [r7, #20]
 8014c68:	6849      	ldr	r1, [r1, #4]
 8014c6a:	0849      	lsrs	r1, r1, #1
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	4605      	mov	r5, r0
 8014c72:	eb12 0804 	adds.w	r8, r2, r4
 8014c76:	eb43 0905 	adc.w	r9, r3, r5
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	469a      	mov	sl, r3
 8014c82:	4693      	mov	fp, r2
 8014c84:	4652      	mov	r2, sl
 8014c86:	465b      	mov	r3, fp
 8014c88:	4640      	mov	r0, r8
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	f7f4 f948 	bl	8008f20 <__aeabi_uldivmod>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4613      	mov	r3, r2
 8014c96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014c9e:	d308      	bcc.n	8014cb2 <UART_SetConfig+0x79a>
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ca6:	d204      	bcs.n	8014cb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cae:	60da      	str	r2, [r3, #12]
 8014cb0:	e17c      	b.n	8014fac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014cb8:	e178      	b.n	8014fac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	69db      	ldr	r3, [r3, #28]
 8014cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cc2:	f040 80c5 	bne.w	8014e50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014cca:	2b20      	cmp	r3, #32
 8014ccc:	dc48      	bgt.n	8014d60 <UART_SetConfig+0x848>
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	db7b      	blt.n	8014dca <UART_SetConfig+0x8b2>
 8014cd2:	2b20      	cmp	r3, #32
 8014cd4:	d879      	bhi.n	8014dca <UART_SetConfig+0x8b2>
 8014cd6:	a201      	add	r2, pc, #4	; (adr r2, 8014cdc <UART_SetConfig+0x7c4>)
 8014cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cdc:	08014d67 	.word	0x08014d67
 8014ce0:	08014d6f 	.word	0x08014d6f
 8014ce4:	08014dcb 	.word	0x08014dcb
 8014ce8:	08014dcb 	.word	0x08014dcb
 8014cec:	08014d77 	.word	0x08014d77
 8014cf0:	08014dcb 	.word	0x08014dcb
 8014cf4:	08014dcb 	.word	0x08014dcb
 8014cf8:	08014dcb 	.word	0x08014dcb
 8014cfc:	08014d87 	.word	0x08014d87
 8014d00:	08014dcb 	.word	0x08014dcb
 8014d04:	08014dcb 	.word	0x08014dcb
 8014d08:	08014dcb 	.word	0x08014dcb
 8014d0c:	08014dcb 	.word	0x08014dcb
 8014d10:	08014dcb 	.word	0x08014dcb
 8014d14:	08014dcb 	.word	0x08014dcb
 8014d18:	08014dcb 	.word	0x08014dcb
 8014d1c:	08014d97 	.word	0x08014d97
 8014d20:	08014dcb 	.word	0x08014dcb
 8014d24:	08014dcb 	.word	0x08014dcb
 8014d28:	08014dcb 	.word	0x08014dcb
 8014d2c:	08014dcb 	.word	0x08014dcb
 8014d30:	08014dcb 	.word	0x08014dcb
 8014d34:	08014dcb 	.word	0x08014dcb
 8014d38:	08014dcb 	.word	0x08014dcb
 8014d3c:	08014dcb 	.word	0x08014dcb
 8014d40:	08014dcb 	.word	0x08014dcb
 8014d44:	08014dcb 	.word	0x08014dcb
 8014d48:	08014dcb 	.word	0x08014dcb
 8014d4c:	08014dcb 	.word	0x08014dcb
 8014d50:	08014dcb 	.word	0x08014dcb
 8014d54:	08014dcb 	.word	0x08014dcb
 8014d58:	08014dcb 	.word	0x08014dcb
 8014d5c:	08014dbd 	.word	0x08014dbd
 8014d60:	2b40      	cmp	r3, #64	; 0x40
 8014d62:	d02e      	beq.n	8014dc2 <UART_SetConfig+0x8aa>
 8014d64:	e031      	b.n	8014dca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d66:	f7fc fdd1 	bl	801190c <HAL_RCC_GetPCLK1Freq>
 8014d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d6c:	e033      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d6e:	f7fc fde3 	bl	8011938 <HAL_RCC_GetPCLK2Freq>
 8014d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d74:	e02f      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7fd fd90 	bl	80128a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d84:	e027      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d86:	f107 0318 	add.w	r3, r7, #24
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fd fedc 	bl	8012b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d94:	e01f      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014d96:	4b2d      	ldr	r3, [pc, #180]	; (8014e4c <UART_SetConfig+0x934>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f003 0320 	and.w	r3, r3, #32
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d009      	beq.n	8014db6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014da2:	4b2a      	ldr	r3, [pc, #168]	; (8014e4c <UART_SetConfig+0x934>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	08db      	lsrs	r3, r3, #3
 8014da8:	f003 0303 	and.w	r3, r3, #3
 8014dac:	4a24      	ldr	r2, [pc, #144]	; (8014e40 <UART_SetConfig+0x928>)
 8014dae:	fa22 f303 	lsr.w	r3, r2, r3
 8014db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014db4:	e00f      	b.n	8014dd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014db6:	4b22      	ldr	r3, [pc, #136]	; (8014e40 <UART_SetConfig+0x928>)
 8014db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dba:	e00c      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014dbc:	4b21      	ldr	r3, [pc, #132]	; (8014e44 <UART_SetConfig+0x92c>)
 8014dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dc0:	e009      	b.n	8014dd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dc8:	e005      	b.n	8014dd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014dce:	2301      	movs	r3, #1
 8014dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 80e7 	beq.w	8014fac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014de2:	4a19      	ldr	r2, [pc, #100]	; (8014e48 <UART_SetConfig+0x930>)
 8014de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014de8:	461a      	mov	r2, r3
 8014dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8014df0:	005a      	lsls	r2, r3, #1
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	085b      	lsrs	r3, r3, #1
 8014df8:	441a      	add	r2, r3
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e06:	2b0f      	cmp	r3, #15
 8014e08:	d916      	bls.n	8014e38 <UART_SetConfig+0x920>
 8014e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e10:	d212      	bcs.n	8014e38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	f023 030f 	bic.w	r3, r3, #15
 8014e1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1e:	085b      	lsrs	r3, r3, #1
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	f003 0307 	and.w	r3, r3, #7
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014e34:	60da      	str	r2, [r3, #12]
 8014e36:	e0b9      	b.n	8014fac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014e38:	2301      	movs	r3, #1
 8014e3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014e3e:	e0b5      	b.n	8014fac <UART_SetConfig+0xa94>
 8014e40:	03d09000 	.word	0x03d09000
 8014e44:	003d0900 	.word	0x003d0900
 8014e48:	240084ec 	.word	0x240084ec
 8014e4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014e50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014e54:	2b20      	cmp	r3, #32
 8014e56:	dc49      	bgt.n	8014eec <UART_SetConfig+0x9d4>
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	db7c      	blt.n	8014f56 <UART_SetConfig+0xa3e>
 8014e5c:	2b20      	cmp	r3, #32
 8014e5e:	d87a      	bhi.n	8014f56 <UART_SetConfig+0xa3e>
 8014e60:	a201      	add	r2, pc, #4	; (adr r2, 8014e68 <UART_SetConfig+0x950>)
 8014e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e66:	bf00      	nop
 8014e68:	08014ef3 	.word	0x08014ef3
 8014e6c:	08014efb 	.word	0x08014efb
 8014e70:	08014f57 	.word	0x08014f57
 8014e74:	08014f57 	.word	0x08014f57
 8014e78:	08014f03 	.word	0x08014f03
 8014e7c:	08014f57 	.word	0x08014f57
 8014e80:	08014f57 	.word	0x08014f57
 8014e84:	08014f57 	.word	0x08014f57
 8014e88:	08014f13 	.word	0x08014f13
 8014e8c:	08014f57 	.word	0x08014f57
 8014e90:	08014f57 	.word	0x08014f57
 8014e94:	08014f57 	.word	0x08014f57
 8014e98:	08014f57 	.word	0x08014f57
 8014e9c:	08014f57 	.word	0x08014f57
 8014ea0:	08014f57 	.word	0x08014f57
 8014ea4:	08014f57 	.word	0x08014f57
 8014ea8:	08014f23 	.word	0x08014f23
 8014eac:	08014f57 	.word	0x08014f57
 8014eb0:	08014f57 	.word	0x08014f57
 8014eb4:	08014f57 	.word	0x08014f57
 8014eb8:	08014f57 	.word	0x08014f57
 8014ebc:	08014f57 	.word	0x08014f57
 8014ec0:	08014f57 	.word	0x08014f57
 8014ec4:	08014f57 	.word	0x08014f57
 8014ec8:	08014f57 	.word	0x08014f57
 8014ecc:	08014f57 	.word	0x08014f57
 8014ed0:	08014f57 	.word	0x08014f57
 8014ed4:	08014f57 	.word	0x08014f57
 8014ed8:	08014f57 	.word	0x08014f57
 8014edc:	08014f57 	.word	0x08014f57
 8014ee0:	08014f57 	.word	0x08014f57
 8014ee4:	08014f57 	.word	0x08014f57
 8014ee8:	08014f49 	.word	0x08014f49
 8014eec:	2b40      	cmp	r3, #64	; 0x40
 8014eee:	d02e      	beq.n	8014f4e <UART_SetConfig+0xa36>
 8014ef0:	e031      	b.n	8014f56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014ef2:	f7fc fd0b 	bl	801190c <HAL_RCC_GetPCLK1Freq>
 8014ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014ef8:	e033      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014efa:	f7fc fd1d 	bl	8011938 <HAL_RCC_GetPCLK2Freq>
 8014efe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014f00:	e02f      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014f06:	4618      	mov	r0, r3
 8014f08:	f7fd fcca 	bl	80128a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f10:	e027      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014f12:	f107 0318 	add.w	r3, r7, #24
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fd fe16 	bl	8012b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f20:	e01f      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f22:	4b2d      	ldr	r3, [pc, #180]	; (8014fd8 <UART_SetConfig+0xac0>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f003 0320 	and.w	r3, r3, #32
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d009      	beq.n	8014f42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014f2e:	4b2a      	ldr	r3, [pc, #168]	; (8014fd8 <UART_SetConfig+0xac0>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	08db      	lsrs	r3, r3, #3
 8014f34:	f003 0303 	and.w	r3, r3, #3
 8014f38:	4a28      	ldr	r2, [pc, #160]	; (8014fdc <UART_SetConfig+0xac4>)
 8014f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8014f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014f40:	e00f      	b.n	8014f62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014f42:	4b26      	ldr	r3, [pc, #152]	; (8014fdc <UART_SetConfig+0xac4>)
 8014f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f46:	e00c      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014f48:	4b25      	ldr	r3, [pc, #148]	; (8014fe0 <UART_SetConfig+0xac8>)
 8014f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f4c:	e009      	b.n	8014f62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014f54:	e005      	b.n	8014f62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014f56:	2300      	movs	r3, #0
 8014f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014f60:	bf00      	nop
    }

    if (pclk != 0U)
 8014f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d021      	beq.n	8014fac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f6c:	4a1d      	ldr	r2, [pc, #116]	; (8014fe4 <UART_SetConfig+0xacc>)
 8014f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f72:	461a      	mov	r2, r3
 8014f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	085b      	lsrs	r3, r3, #1
 8014f80:	441a      	add	r2, r3
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8e:	2b0f      	cmp	r3, #15
 8014f90:	d909      	bls.n	8014fa6 <UART_SetConfig+0xa8e>
 8014f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f98:	d205      	bcs.n	8014fa6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9c:	b29a      	uxth	r2, r3
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	60da      	str	r2, [r3, #12]
 8014fa4:	e002      	b.n	8014fac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	2201      	movs	r2, #1
 8014fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014fc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3748      	adds	r7, #72	; 0x48
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014fd6:	bf00      	nop
 8014fd8:	58024400 	.word	0x58024400
 8014fdc:	03d09000 	.word	0x03d09000
 8014fe0:	003d0900 	.word	0x003d0900
 8014fe4:	240084ec 	.word	0x240084ec

08014fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ff4:	f003 0301 	and.w	r3, r3, #1
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00a      	beq.n	8015012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	430a      	orrs	r2, r1
 8015010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015016:	f003 0302 	and.w	r3, r3, #2
 801501a:	2b00      	cmp	r3, #0
 801501c:	d00a      	beq.n	8015034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	430a      	orrs	r2, r1
 8015032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015038:	f003 0304 	and.w	r3, r3, #4
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00a      	beq.n	8015056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	430a      	orrs	r2, r1
 8015054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801505a:	f003 0308 	and.w	r3, r3, #8
 801505e:	2b00      	cmp	r3, #0
 8015060:	d00a      	beq.n	8015078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	430a      	orrs	r2, r1
 8015076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801507c:	f003 0310 	and.w	r3, r3, #16
 8015080:	2b00      	cmp	r3, #0
 8015082:	d00a      	beq.n	801509a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	689b      	ldr	r3, [r3, #8]
 801508a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	430a      	orrs	r2, r1
 8015098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801509e:	f003 0320 	and.w	r3, r3, #32
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d00a      	beq.n	80150bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	430a      	orrs	r2, r1
 80150ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d01a      	beq.n	80150fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	430a      	orrs	r2, r1
 80150dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80150e6:	d10a      	bne.n	80150fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	430a      	orrs	r2, r1
 80150fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015106:	2b00      	cmp	r3, #0
 8015108:	d00a      	beq.n	8015120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	430a      	orrs	r2, r1
 801511e:	605a      	str	r2, [r3, #4]
  }
}
 8015120:	bf00      	nop
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr

0801512c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b086      	sub	sp, #24
 8015130:	af02      	add	r7, sp, #8
 8015132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801513c:	f7f6 fad8 	bl	800b6f0 <HAL_GetTick>
 8015140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	f003 0308 	and.w	r3, r3, #8
 801514c:	2b08      	cmp	r3, #8
 801514e:	d10e      	bne.n	801516e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015154:	9300      	str	r3, [sp, #0]
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2200      	movs	r2, #0
 801515a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 f82f 	bl	80151c2 <UART_WaitOnFlagUntilTimeout>
 8015164:	4603      	mov	r3, r0
 8015166:	2b00      	cmp	r3, #0
 8015168:	d001      	beq.n	801516e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801516a:	2303      	movs	r3, #3
 801516c:	e025      	b.n	80151ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f003 0304 	and.w	r3, r3, #4
 8015178:	2b04      	cmp	r3, #4
 801517a:	d10e      	bne.n	801519a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801517c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2200      	movs	r2, #0
 8015186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f000 f819 	bl	80151c2 <UART_WaitOnFlagUntilTimeout>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d001      	beq.n	801519a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015196:	2303      	movs	r3, #3
 8015198:	e00f      	b.n	80151ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2220      	movs	r2, #32
 801519e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2220      	movs	r2, #32
 80151a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80151b8:	2300      	movs	r3, #0
}
 80151ba:	4618      	mov	r0, r3
 80151bc:	3710      	adds	r7, #16
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b09c      	sub	sp, #112	; 0x70
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	60f8      	str	r0, [r7, #12]
 80151ca:	60b9      	str	r1, [r7, #8]
 80151cc:	603b      	str	r3, [r7, #0]
 80151ce:	4613      	mov	r3, r2
 80151d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80151d2:	e0a9      	b.n	8015328 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80151d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151da:	f000 80a5 	beq.w	8015328 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80151de:	f7f6 fa87 	bl	800b6f0 <HAL_GetTick>
 80151e2:	4602      	mov	r2, r0
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d302      	bcc.n	80151f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80151ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d140      	bne.n	8015276 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151fc:	e853 3f00 	ldrex	r3, [r3]
 8015200:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015208:	667b      	str	r3, [r7, #100]	; 0x64
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	461a      	mov	r2, r3
 8015210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015214:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015218:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801521a:	e841 2300 	strex	r3, r2, [r1]
 801521e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015222:	2b00      	cmp	r3, #0
 8015224:	d1e6      	bne.n	80151f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	3308      	adds	r3, #8
 801522c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801522e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015230:	e853 3f00 	ldrex	r3, [r3]
 8015234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015238:	f023 0301 	bic.w	r3, r3, #1
 801523c:	663b      	str	r3, [r7, #96]	; 0x60
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	3308      	adds	r3, #8
 8015244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015246:	64ba      	str	r2, [r7, #72]	; 0x48
 8015248:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801524a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801524c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801524e:	e841 2300 	strex	r3, r2, [r1]
 8015252:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015256:	2b00      	cmp	r3, #0
 8015258:	d1e5      	bne.n	8015226 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	2220      	movs	r2, #32
 801525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2220      	movs	r2, #32
 8015266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2200      	movs	r2, #0
 801526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8015272:	2303      	movs	r3, #3
 8015274:	e069      	b.n	801534a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f003 0304 	and.w	r3, r3, #4
 8015280:	2b00      	cmp	r3, #0
 8015282:	d051      	beq.n	8015328 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	69db      	ldr	r3, [r3, #28]
 801528a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801528e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015292:	d149      	bne.n	8015328 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801529c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a6:	e853 3f00 	ldrex	r3, [r3]
 80152aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80152ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80152b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	461a      	mov	r2, r3
 80152ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152bc:	637b      	str	r3, [r7, #52]	; 0x34
 80152be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80152c4:	e841 2300 	strex	r3, r2, [r1]
 80152c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80152ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d1e6      	bne.n	801529e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	3308      	adds	r3, #8
 80152d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	e853 3f00 	ldrex	r3, [r3]
 80152de:	613b      	str	r3, [r7, #16]
   return(result);
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	f023 0301 	bic.w	r3, r3, #1
 80152e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	3308      	adds	r3, #8
 80152ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80152f0:	623a      	str	r2, [r7, #32]
 80152f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152f4:	69f9      	ldr	r1, [r7, #28]
 80152f6:	6a3a      	ldr	r2, [r7, #32]
 80152f8:	e841 2300 	strex	r3, r2, [r1]
 80152fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d1e5      	bne.n	80152d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2220      	movs	r2, #32
 8015308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2220      	movs	r2, #32
 8015310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2220      	movs	r2, #32
 8015318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2200      	movs	r2, #0
 8015320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8015324:	2303      	movs	r3, #3
 8015326:	e010      	b.n	801534a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	69da      	ldr	r2, [r3, #28]
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	4013      	ands	r3, r2
 8015332:	68ba      	ldr	r2, [r7, #8]
 8015334:	429a      	cmp	r2, r3
 8015336:	bf0c      	ite	eq
 8015338:	2301      	moveq	r3, #1
 801533a:	2300      	movne	r3, #0
 801533c:	b2db      	uxtb	r3, r3
 801533e:	461a      	mov	r2, r3
 8015340:	79fb      	ldrb	r3, [r7, #7]
 8015342:	429a      	cmp	r2, r3
 8015344:	f43f af46 	beq.w	80151d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015348:	2300      	movs	r3, #0
}
 801534a:	4618      	mov	r0, r3
 801534c:	3770      	adds	r7, #112	; 0x70
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
	...

08015354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b096      	sub	sp, #88	; 0x58
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	4613      	mov	r3, r2
 8015360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	88fa      	ldrh	r2, [r7, #6]
 801536c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2200      	movs	r2, #0
 8015374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	2222      	movs	r2, #34	; 0x22
 801537c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015384:	2b00      	cmp	r3, #0
 8015386:	d02c      	beq.n	80153e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801538c:	4a42      	ldr	r2, [pc, #264]	; (8015498 <UART_Start_Receive_DMA+0x144>)
 801538e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015394:	4a41      	ldr	r2, [pc, #260]	; (801549c <UART_Start_Receive_DMA+0x148>)
 8015396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801539c:	4a40      	ldr	r2, [pc, #256]	; (80154a0 <UART_Start_Receive_DMA+0x14c>)
 801539e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80153a4:	2200      	movs	r2, #0
 80153a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	3324      	adds	r3, #36	; 0x24
 80153b2:	4619      	mov	r1, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153b8:	461a      	mov	r2, r3
 80153ba:	88fb      	ldrh	r3, [r7, #6]
 80153bc:	f7f7 fa3a 	bl	800c834 <HAL_DMA_Start_IT>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00d      	beq.n	80153e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	2210      	movs	r2, #16
 80153ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2200      	movs	r2, #0
 80153d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2220      	movs	r2, #32
 80153da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80153de:	2301      	movs	r3, #1
 80153e0:	e055      	b.n	801548e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2200      	movs	r2, #0
 80153e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	691b      	ldr	r3, [r3, #16]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d018      	beq.n	8015424 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153fa:	e853 3f00 	ldrex	r3, [r3]
 80153fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015406:	657b      	str	r3, [r7, #84]	; 0x54
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	461a      	mov	r2, r3
 801540e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015410:	64bb      	str	r3, [r7, #72]	; 0x48
 8015412:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015414:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015418:	e841 2300 	strex	r3, r2, [r1]
 801541c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801541e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1e6      	bne.n	80153f2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	3308      	adds	r3, #8
 801542a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801542e:	e853 3f00 	ldrex	r3, [r3]
 8015432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015436:	f043 0301 	orr.w	r3, r3, #1
 801543a:	653b      	str	r3, [r7, #80]	; 0x50
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	3308      	adds	r3, #8
 8015442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015444:	637a      	str	r2, [r7, #52]	; 0x34
 8015446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801544a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801544c:	e841 2300 	strex	r3, r2, [r1]
 8015450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015454:	2b00      	cmp	r3, #0
 8015456:	d1e5      	bne.n	8015424 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	3308      	adds	r3, #8
 801545e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	e853 3f00 	ldrex	r3, [r3]
 8015466:	613b      	str	r3, [r7, #16]
   return(result);
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	3308      	adds	r3, #8
 8015476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015478:	623a      	str	r2, [r7, #32]
 801547a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801547c:	69f9      	ldr	r1, [r7, #28]
 801547e:	6a3a      	ldr	r2, [r7, #32]
 8015480:	e841 2300 	strex	r3, r2, [r1]
 8015484:	61bb      	str	r3, [r7, #24]
   return(result);
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1e5      	bne.n	8015458 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 801548c:	2300      	movs	r3, #0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3758      	adds	r7, #88	; 0x58
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	080155f5 	.word	0x080155f5
 801549c:	08015717 	.word	0x08015717
 80154a0:	0801574f 	.word	0x0801574f

080154a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80154a4:	b480      	push	{r7}
 80154a6:	b08f      	sub	sp, #60	; 0x3c
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154b2:	6a3b      	ldr	r3, [r7, #32]
 80154b4:	e853 3f00 	ldrex	r3, [r3]
 80154b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80154c0:	637b      	str	r3, [r7, #52]	; 0x34
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	461a      	mov	r2, r3
 80154c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80154d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154d2:	e841 2300 	strex	r3, r2, [r1]
 80154d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80154d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d1e6      	bne.n	80154ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	3308      	adds	r3, #8
 80154e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	e853 3f00 	ldrex	r3, [r3]
 80154ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80154f4:	633b      	str	r3, [r7, #48]	; 0x30
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	3308      	adds	r3, #8
 80154fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154fe:	61ba      	str	r2, [r7, #24]
 8015500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015502:	6979      	ldr	r1, [r7, #20]
 8015504:	69ba      	ldr	r2, [r7, #24]
 8015506:	e841 2300 	strex	r3, r2, [r1]
 801550a:	613b      	str	r3, [r7, #16]
   return(result);
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1e5      	bne.n	80154de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2220      	movs	r2, #32
 8015516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801551a:	bf00      	nop
 801551c:	373c      	adds	r7, #60	; 0x3c
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr
	...

08015528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015528:	b480      	push	{r7}
 801552a:	b095      	sub	sp, #84	; 0x54
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015538:	e853 3f00 	ldrex	r3, [r3]
 801553c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	461a      	mov	r2, r3
 801554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801554e:	643b      	str	r3, [r7, #64]	; 0x40
 8015550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015556:	e841 2300 	strex	r3, r2, [r1]
 801555a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801555e:	2b00      	cmp	r3, #0
 8015560:	d1e6      	bne.n	8015530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	3308      	adds	r3, #8
 8015568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801556a:	6a3b      	ldr	r3, [r7, #32]
 801556c:	e853 3f00 	ldrex	r3, [r3]
 8015570:	61fb      	str	r3, [r7, #28]
   return(result);
 8015572:	69fa      	ldr	r2, [r7, #28]
 8015574:	4b1e      	ldr	r3, [pc, #120]	; (80155f0 <UART_EndRxTransfer+0xc8>)
 8015576:	4013      	ands	r3, r2
 8015578:	64bb      	str	r3, [r7, #72]	; 0x48
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	3308      	adds	r3, #8
 8015580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801558a:	e841 2300 	strex	r3, r2, [r1]
 801558e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015592:	2b00      	cmp	r3, #0
 8015594:	d1e5      	bne.n	8015562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801559a:	2b01      	cmp	r3, #1
 801559c:	d118      	bne.n	80155d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	e853 3f00 	ldrex	r3, [r3]
 80155aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	f023 0310 	bic.w	r3, r3, #16
 80155b2:	647b      	str	r3, [r7, #68]	; 0x44
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	461a      	mov	r2, r3
 80155ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155bc:	61bb      	str	r3, [r7, #24]
 80155be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155c0:	6979      	ldr	r1, [r7, #20]
 80155c2:	69ba      	ldr	r2, [r7, #24]
 80155c4:	e841 2300 	strex	r3, r2, [r1]
 80155c8:	613b      	str	r3, [r7, #16]
   return(result);
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1e6      	bne.n	801559e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2220      	movs	r2, #32
 80155d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2200      	movs	r2, #0
 80155dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2200      	movs	r2, #0
 80155e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80155e4:	bf00      	nop
 80155e6:	3754      	adds	r7, #84	; 0x54
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr
 80155f0:	effffffe 	.word	0xeffffffe

080155f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b09c      	sub	sp, #112	; 0x70
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015600:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	69db      	ldr	r3, [r3, #28]
 8015606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801560a:	d071      	beq.n	80156f0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801560e:	2200      	movs	r2, #0
 8015610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801561c:	e853 3f00 	ldrex	r3, [r3]
 8015620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015628:	66bb      	str	r3, [r7, #104]	; 0x68
 801562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	461a      	mov	r2, r3
 8015630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015632:	65bb      	str	r3, [r7, #88]	; 0x58
 8015634:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801563a:	e841 2300 	strex	r3, r2, [r1]
 801563e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1e6      	bne.n	8015614 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3308      	adds	r3, #8
 801564c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015650:	e853 3f00 	ldrex	r3, [r3]
 8015654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015658:	f023 0301 	bic.w	r3, r3, #1
 801565c:	667b      	str	r3, [r7, #100]	; 0x64
 801565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3308      	adds	r3, #8
 8015664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015666:	647a      	str	r2, [r7, #68]	; 0x44
 8015668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801566a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801566c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801566e:	e841 2300 	strex	r3, r2, [r1]
 8015672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1e5      	bne.n	8015646 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	3308      	adds	r3, #8
 8015680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015684:	e853 3f00 	ldrex	r3, [r3]
 8015688:	623b      	str	r3, [r7, #32]
   return(result);
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015690:	663b      	str	r3, [r7, #96]	; 0x60
 8015692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	3308      	adds	r3, #8
 8015698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801569a:	633a      	str	r2, [r7, #48]	; 0x30
 801569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156a2:	e841 2300 	strex	r3, r2, [r1]
 80156a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80156a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d1e5      	bne.n	801567a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80156ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156b0:	2220      	movs	r2, #32
 80156b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d118      	bne.n	80156f0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80156be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	e853 3f00 	ldrex	r3, [r3]
 80156ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	f023 0310 	bic.w	r3, r3, #16
 80156d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80156d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	461a      	mov	r2, r3
 80156da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156dc:	61fb      	str	r3, [r7, #28]
 80156de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156e0:	69b9      	ldr	r1, [r7, #24]
 80156e2:	69fa      	ldr	r2, [r7, #28]
 80156e4:	e841 2300 	strex	r3, r2, [r1]
 80156e8:	617b      	str	r3, [r7, #20]
   return(result);
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d1e6      	bne.n	80156be <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d107      	bne.n	8015708 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80156f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80156fe:	4619      	mov	r1, r3
 8015700:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8015702:	f001 febf 	bl	8017484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015706:	e002      	b.n	801570e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8015708:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801570a:	f7fe fef1 	bl	80144f0 <HAL_UART_RxCpltCallback>
}
 801570e:	bf00      	nop
 8015710:	3770      	adds	r7, #112	; 0x70
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b084      	sub	sp, #16
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015722:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015728:	2b01      	cmp	r3, #1
 801572a:	d109      	bne.n	8015740 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015732:	085b      	lsrs	r3, r3, #1
 8015734:	b29b      	uxth	r3, r3
 8015736:	4619      	mov	r1, r3
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f001 fea3 	bl	8017484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801573e:	e002      	b.n	8015746 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f7fe fedf 	bl	8014504 <HAL_UART_RxHalfCpltCallback>
}
 8015746:	bf00      	nop
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b086      	sub	sp, #24
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801575a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015762:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801576a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	689b      	ldr	r3, [r3, #8]
 8015772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015776:	2b80      	cmp	r3, #128	; 0x80
 8015778:	d109      	bne.n	801578e <UART_DMAError+0x40>
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	2b21      	cmp	r3, #33	; 0x21
 801577e:	d106      	bne.n	801578e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	2200      	movs	r2, #0
 8015784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8015788:	6978      	ldr	r0, [r7, #20]
 801578a:	f7ff fe8b 	bl	80154a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015798:	2b40      	cmp	r3, #64	; 0x40
 801579a:	d109      	bne.n	80157b0 <UART_DMAError+0x62>
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2b22      	cmp	r3, #34	; 0x22
 80157a0:	d106      	bne.n	80157b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2200      	movs	r2, #0
 80157a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80157aa:	6978      	ldr	r0, [r7, #20]
 80157ac:	f7ff febc 	bl	8015528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b6:	f043 0210 	orr.w	r2, r3, #16
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80157c0:	6978      	ldr	r0, [r7, #20]
 80157c2:	f001 fed3 	bl	801756c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80157c6:	bf00      	nop
 80157c8:	3718      	adds	r7, #24
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}

080157ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80157ce:	b580      	push	{r7, lr}
 80157d0:	b084      	sub	sp, #16
 80157d2:	af00      	add	r7, sp, #0
 80157d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	2200      	movs	r2, #0
 80157e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2200      	movs	r2, #0
 80157e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80157ec:	68f8      	ldr	r0, [r7, #12]
 80157ee:	f001 febd 	bl	801756c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80157f2:	bf00      	nop
 80157f4:	3710      	adds	r7, #16
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}

080157fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80157fa:	b580      	push	{r7, lr}
 80157fc:	b088      	sub	sp, #32
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	e853 3f00 	ldrex	r3, [r3]
 801580e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015816:	61fb      	str	r3, [r7, #28]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	461a      	mov	r2, r3
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	61bb      	str	r3, [r7, #24]
 8015822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015824:	6979      	ldr	r1, [r7, #20]
 8015826:	69ba      	ldr	r2, [r7, #24]
 8015828:	e841 2300 	strex	r3, r2, [r1]
 801582c:	613b      	str	r3, [r7, #16]
   return(result);
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1e6      	bne.n	8015802 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2220      	movs	r2, #32
 8015838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2200      	movs	r2, #0
 8015840:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f001 fe52 	bl	80174ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015848:	bf00      	nop
 801584a:	3720      	adds	r7, #32
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}

08015850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015850:	b480      	push	{r7}
 8015852:	b083      	sub	sp, #12
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015858:	bf00      	nop
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801586c:	bf00      	nop
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588a:	4770      	bx	lr

0801588c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801589a:	2b01      	cmp	r3, #1
 801589c:	d101      	bne.n	80158a2 <HAL_UARTEx_EnableFifoMode+0x16>
 801589e:	2302      	movs	r3, #2
 80158a0:	e02b      	b.n	80158fa <HAL_UARTEx_EnableFifoMode+0x6e>
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	2201      	movs	r2, #1
 80158a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2224      	movs	r2, #36	; 0x24
 80158ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	f022 0201 	bic.w	r2, r2, #1
 80158c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80158d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80158d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68fa      	ldr	r2, [r7, #12]
 80158e0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 f91e 	bl	8015b24 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2220      	movs	r2, #32
 80158ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2200      	movs	r2, #0
 80158f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80158f8:	2300      	movs	r3, #0
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015902:	b480      	push	{r7}
 8015904:	b085      	sub	sp, #20
 8015906:	af00      	add	r7, sp, #0
 8015908:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015910:	2b01      	cmp	r3, #1
 8015912:	d101      	bne.n	8015918 <HAL_UARTEx_DisableFifoMode+0x16>
 8015914:	2302      	movs	r3, #2
 8015916:	e027      	b.n	8015968 <HAL_UARTEx_DisableFifoMode+0x66>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2201      	movs	r2, #1
 801591c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2224      	movs	r2, #36	; 0x24
 8015924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f022 0201 	bic.w	r2, r2, #1
 801593e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015946:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	68fa      	ldr	r2, [r7, #12]
 8015954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2220      	movs	r2, #32
 801595a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2200      	movs	r2, #0
 8015962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015966:	2300      	movs	r3, #0
}
 8015968:	4618      	mov	r0, r3
 801596a:	3714      	adds	r7, #20
 801596c:	46bd      	mov	sp, r7
 801596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015972:	4770      	bx	lr

08015974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015984:	2b01      	cmp	r3, #1
 8015986:	d101      	bne.n	801598c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015988:	2302      	movs	r3, #2
 801598a:	e02d      	b.n	80159e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2201      	movs	r2, #1
 8015990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2224      	movs	r2, #36	; 0x24
 8015998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	f022 0201 	bic.w	r2, r2, #1
 80159b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	683a      	ldr	r2, [r7, #0]
 80159c4:	430a      	orrs	r2, r1
 80159c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 f8ab 	bl	8015b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2220      	movs	r2, #32
 80159da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2200      	movs	r2, #0
 80159e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80159e6:	2300      	movs	r3, #0
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3710      	adds	r7, #16
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d101      	bne.n	8015a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015a04:	2302      	movs	r3, #2
 8015a06:	e02d      	b.n	8015a64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2224      	movs	r2, #36	; 0x24
 8015a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	681a      	ldr	r2, [r3, #0]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f022 0201 	bic.w	r2, r2, #1
 8015a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	689b      	ldr	r3, [r3, #8]
 8015a36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	683a      	ldr	r2, [r7, #0]
 8015a40:	430a      	orrs	r2, r1
 8015a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f000 f86d 	bl	8015b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	68fa      	ldr	r2, [r7, #12]
 8015a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2220      	movs	r2, #32
 8015a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015a62:	2300      	movs	r3, #0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3710      	adds	r7, #16
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b08c      	sub	sp, #48	; 0x30
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	4613      	mov	r3, r2
 8015a78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a80:	2b20      	cmp	r3, #32
 8015a82:	d14a      	bne.n	8015b1a <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d002      	beq.n	8015a90 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015a8a:	88fb      	ldrh	r3, [r7, #6]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d101      	bne.n	8015a94 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015a90:	2301      	movs	r3, #1
 8015a92:	e043      	b.n	8015b1c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	d101      	bne.n	8015aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8015a9e:	2302      	movs	r3, #2
 8015aa0:	e03c      	b.n	8015b1c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	2201      	movs	r2, #1
 8015aae:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015ab0:	88fb      	ldrh	r3, [r7, #6]
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	68b9      	ldr	r1, [r7, #8]
 8015ab6:	68f8      	ldr	r0, [r7, #12]
 8015ab8:	f7ff fc4c 	bl	8015354 <UART_Start_Receive_DMA>
 8015abc:	4603      	mov	r3, r0
 8015abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d124      	bne.n	8015b14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ace:	2b01      	cmp	r3, #1
 8015ad0:	d11d      	bne.n	8015b0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	e853 3f00 	ldrex	r3, [r3]
 8015ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	f043 0310 	orr.w	r3, r3, #16
 8015aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	461a      	mov	r2, r3
 8015af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af8:	627b      	str	r3, [r7, #36]	; 0x24
 8015afa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015afc:	6a39      	ldr	r1, [r7, #32]
 8015afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b00:	e841 2300 	strex	r3, r2, [r1]
 8015b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d1e6      	bne.n	8015ada <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8015b0c:	e002      	b.n	8015b14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b18:	e000      	b.n	8015b1c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015b1a:	2302      	movs	r3, #2
  }
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3730      	adds	r7, #48	; 0x30
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b085      	sub	sp, #20
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d108      	bne.n	8015b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2201      	movs	r2, #1
 8015b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015b44:	e031      	b.n	8015baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015b46:	2310      	movs	r3, #16
 8015b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015b4a:	2310      	movs	r3, #16
 8015b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	689b      	ldr	r3, [r3, #8]
 8015b54:	0e5b      	lsrs	r3, r3, #25
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	f003 0307 	and.w	r3, r3, #7
 8015b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	0f5b      	lsrs	r3, r3, #29
 8015b66:	b2db      	uxtb	r3, r3
 8015b68:	f003 0307 	and.w	r3, r3, #7
 8015b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015b6e:	7bbb      	ldrb	r3, [r7, #14]
 8015b70:	7b3a      	ldrb	r2, [r7, #12]
 8015b72:	4911      	ldr	r1, [pc, #68]	; (8015bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8015b74:	5c8a      	ldrb	r2, [r1, r2]
 8015b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015b7a:	7b3a      	ldrb	r2, [r7, #12]
 8015b7c:	490f      	ldr	r1, [pc, #60]	; (8015bbc <UARTEx_SetNbDataToProcess+0x98>)
 8015b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b84:	b29a      	uxth	r2, r3
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015b8c:	7bfb      	ldrb	r3, [r7, #15]
 8015b8e:	7b7a      	ldrb	r2, [r7, #13]
 8015b90:	4909      	ldr	r1, [pc, #36]	; (8015bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8015b92:	5c8a      	ldrb	r2, [r1, r2]
 8015b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015b98:	7b7a      	ldrb	r2, [r7, #13]
 8015b9a:	4908      	ldr	r1, [pc, #32]	; (8015bbc <UARTEx_SetNbDataToProcess+0x98>)
 8015b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ba2:	b29a      	uxth	r2, r3
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015baa:	bf00      	nop
 8015bac:	3714      	adds	r7, #20
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb4:	4770      	bx	lr
 8015bb6:	bf00      	nop
 8015bb8:	24008504 	.word	0x24008504
 8015bbc:	2400850c 	.word	0x2400850c

08015bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015bc0:	b084      	sub	sp, #16
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b084      	sub	sp, #16
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	6078      	str	r0, [r7, #4]
 8015bca:	f107 001c 	add.w	r0, r7, #28
 8015bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d120      	bne.n	8015c1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	68da      	ldr	r2, [r3, #12]
 8015be8:	4b2a      	ldr	r3, [pc, #168]	; (8015c94 <USB_CoreInit+0xd4>)
 8015bea:	4013      	ands	r3, r2
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	68db      	ldr	r3, [r3, #12]
 8015bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8015bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d105      	bne.n	8015c0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f001 fc04 	bl	801741c <USB_CoreReset>
 8015c14:	4603      	mov	r3, r0
 8015c16:	73fb      	strb	r3, [r7, #15]
 8015c18:	e01a      	b.n	8015c50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f001 fbf8 	bl	801741c <USB_CoreReset>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d106      	bne.n	8015c44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	639a      	str	r2, [r3, #56]	; 0x38
 8015c42:	e005      	b.n	8015c50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d116      	bne.n	8015c84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015c64:	4b0c      	ldr	r3, [pc, #48]	; (8015c98 <USB_CoreInit+0xd8>)
 8015c66:	4313      	orrs	r3, r2
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	689b      	ldr	r3, [r3, #8]
 8015c70:	f043 0206 	orr.w	r2, r3, #6
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	f043 0220 	orr.w	r2, r3, #32
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c90:	b004      	add	sp, #16
 8015c92:	4770      	bx	lr
 8015c94:	ffbdffbf 	.word	0xffbdffbf
 8015c98:	03ee0000 	.word	0x03ee0000

08015c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b087      	sub	sp, #28
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	60b9      	str	r1, [r7, #8]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015caa:	79fb      	ldrb	r3, [r7, #7]
 8015cac:	2b02      	cmp	r3, #2
 8015cae:	d165      	bne.n	8015d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	4a41      	ldr	r2, [pc, #260]	; (8015db8 <USB_SetTurnaroundTime+0x11c>)
 8015cb4:	4293      	cmp	r3, r2
 8015cb6:	d906      	bls.n	8015cc6 <USB_SetTurnaroundTime+0x2a>
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	4a40      	ldr	r2, [pc, #256]	; (8015dbc <USB_SetTurnaroundTime+0x120>)
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	d202      	bcs.n	8015cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015cc0:	230f      	movs	r3, #15
 8015cc2:	617b      	str	r3, [r7, #20]
 8015cc4:	e062      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	4a3c      	ldr	r2, [pc, #240]	; (8015dbc <USB_SetTurnaroundTime+0x120>)
 8015cca:	4293      	cmp	r3, r2
 8015ccc:	d306      	bcc.n	8015cdc <USB_SetTurnaroundTime+0x40>
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	4a3b      	ldr	r2, [pc, #236]	; (8015dc0 <USB_SetTurnaroundTime+0x124>)
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	d202      	bcs.n	8015cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015cd6:	230e      	movs	r3, #14
 8015cd8:	617b      	str	r3, [r7, #20]
 8015cda:	e057      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	4a38      	ldr	r2, [pc, #224]	; (8015dc0 <USB_SetTurnaroundTime+0x124>)
 8015ce0:	4293      	cmp	r3, r2
 8015ce2:	d306      	bcc.n	8015cf2 <USB_SetTurnaroundTime+0x56>
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	4a37      	ldr	r2, [pc, #220]	; (8015dc4 <USB_SetTurnaroundTime+0x128>)
 8015ce8:	4293      	cmp	r3, r2
 8015cea:	d202      	bcs.n	8015cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015cec:	230d      	movs	r3, #13
 8015cee:	617b      	str	r3, [r7, #20]
 8015cf0:	e04c      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	4a33      	ldr	r2, [pc, #204]	; (8015dc4 <USB_SetTurnaroundTime+0x128>)
 8015cf6:	4293      	cmp	r3, r2
 8015cf8:	d306      	bcc.n	8015d08 <USB_SetTurnaroundTime+0x6c>
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	4a32      	ldr	r2, [pc, #200]	; (8015dc8 <USB_SetTurnaroundTime+0x12c>)
 8015cfe:	4293      	cmp	r3, r2
 8015d00:	d802      	bhi.n	8015d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015d02:	230c      	movs	r3, #12
 8015d04:	617b      	str	r3, [r7, #20]
 8015d06:	e041      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	4a2f      	ldr	r2, [pc, #188]	; (8015dc8 <USB_SetTurnaroundTime+0x12c>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d906      	bls.n	8015d1e <USB_SetTurnaroundTime+0x82>
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	4a2e      	ldr	r2, [pc, #184]	; (8015dcc <USB_SetTurnaroundTime+0x130>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d802      	bhi.n	8015d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015d18:	230b      	movs	r3, #11
 8015d1a:	617b      	str	r3, [r7, #20]
 8015d1c:	e036      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	4a2a      	ldr	r2, [pc, #168]	; (8015dcc <USB_SetTurnaroundTime+0x130>)
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d906      	bls.n	8015d34 <USB_SetTurnaroundTime+0x98>
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	4a29      	ldr	r2, [pc, #164]	; (8015dd0 <USB_SetTurnaroundTime+0x134>)
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	d802      	bhi.n	8015d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8015d2e:	230a      	movs	r3, #10
 8015d30:	617b      	str	r3, [r7, #20]
 8015d32:	e02b      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	4a26      	ldr	r2, [pc, #152]	; (8015dd0 <USB_SetTurnaroundTime+0x134>)
 8015d38:	4293      	cmp	r3, r2
 8015d3a:	d906      	bls.n	8015d4a <USB_SetTurnaroundTime+0xae>
 8015d3c:	68bb      	ldr	r3, [r7, #8]
 8015d3e:	4a25      	ldr	r2, [pc, #148]	; (8015dd4 <USB_SetTurnaroundTime+0x138>)
 8015d40:	4293      	cmp	r3, r2
 8015d42:	d202      	bcs.n	8015d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015d44:	2309      	movs	r3, #9
 8015d46:	617b      	str	r3, [r7, #20]
 8015d48:	e020      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	4a21      	ldr	r2, [pc, #132]	; (8015dd4 <USB_SetTurnaroundTime+0x138>)
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d306      	bcc.n	8015d60 <USB_SetTurnaroundTime+0xc4>
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	4a20      	ldr	r2, [pc, #128]	; (8015dd8 <USB_SetTurnaroundTime+0x13c>)
 8015d56:	4293      	cmp	r3, r2
 8015d58:	d802      	bhi.n	8015d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015d5a:	2308      	movs	r3, #8
 8015d5c:	617b      	str	r3, [r7, #20]
 8015d5e:	e015      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	4a1d      	ldr	r2, [pc, #116]	; (8015dd8 <USB_SetTurnaroundTime+0x13c>)
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d906      	bls.n	8015d76 <USB_SetTurnaroundTime+0xda>
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	4a1c      	ldr	r2, [pc, #112]	; (8015ddc <USB_SetTurnaroundTime+0x140>)
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	d202      	bcs.n	8015d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015d70:	2307      	movs	r3, #7
 8015d72:	617b      	str	r3, [r7, #20]
 8015d74:	e00a      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015d76:	2306      	movs	r3, #6
 8015d78:	617b      	str	r3, [r7, #20]
 8015d7a:	e007      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015d7c:	79fb      	ldrb	r3, [r7, #7]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d102      	bne.n	8015d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015d82:	2309      	movs	r3, #9
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	e001      	b.n	8015d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015d88:	2309      	movs	r3, #9
 8015d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	68db      	ldr	r3, [r3, #12]
 8015d90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	68da      	ldr	r2, [r3, #12]
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	029b      	lsls	r3, r3, #10
 8015da0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8015da4:	431a      	orrs	r2, r3
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	371c      	adds	r7, #28
 8015db0:	46bd      	mov	sp, r7
 8015db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db6:	4770      	bx	lr
 8015db8:	00d8acbf 	.word	0x00d8acbf
 8015dbc:	00e4e1c0 	.word	0x00e4e1c0
 8015dc0:	00f42400 	.word	0x00f42400
 8015dc4:	01067380 	.word	0x01067380
 8015dc8:	011a499f 	.word	0x011a499f
 8015dcc:	01312cff 	.word	0x01312cff
 8015dd0:	014ca43f 	.word	0x014ca43f
 8015dd4:	016e3600 	.word	0x016e3600
 8015dd8:	01a6ab1f 	.word	0x01a6ab1f
 8015ddc:	01e84800 	.word	0x01e84800

08015de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015de0:	b480      	push	{r7}
 8015de2:	b083      	sub	sp, #12
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	689b      	ldr	r3, [r3, #8]
 8015dec:	f043 0201 	orr.w	r2, r3, #1
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	370c      	adds	r7, #12
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e00:	4770      	bx	lr

08015e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015e02:	b480      	push	{r7}
 8015e04:	b083      	sub	sp, #12
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	689b      	ldr	r3, [r3, #8]
 8015e0e:	f023 0201 	bic.w	r2, r3, #1
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015e16:	2300      	movs	r3, #0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	370c      	adds	r7, #12
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e22:	4770      	bx	lr

08015e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b084      	sub	sp, #16
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015e30:	2300      	movs	r3, #0
 8015e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015e40:	78fb      	ldrb	r3, [r7, #3]
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d115      	bne.n	8015e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	68db      	ldr	r3, [r3, #12]
 8015e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015e52:	2001      	movs	r0, #1
 8015e54:	f7f5 fc58 	bl	800b708 <HAL_Delay>
      ms++;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f001 fa4b 	bl	80172fa <USB_GetMode>
 8015e64:	4603      	mov	r3, r0
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	d01e      	beq.n	8015ea8 <USB_SetCurrentMode+0x84>
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	2b31      	cmp	r3, #49	; 0x31
 8015e6e:	d9f0      	bls.n	8015e52 <USB_SetCurrentMode+0x2e>
 8015e70:	e01a      	b.n	8015ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015e72:	78fb      	ldrb	r3, [r7, #3]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d115      	bne.n	8015ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	68db      	ldr	r3, [r3, #12]
 8015e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015e84:	2001      	movs	r0, #1
 8015e86:	f7f5 fc3f 	bl	800b708 <HAL_Delay>
      ms++;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f001 fa32 	bl	80172fa <USB_GetMode>
 8015e96:	4603      	mov	r3, r0
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d005      	beq.n	8015ea8 <USB_SetCurrentMode+0x84>
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	2b31      	cmp	r3, #49	; 0x31
 8015ea0:	d9f0      	bls.n	8015e84 <USB_SetCurrentMode+0x60>
 8015ea2:	e001      	b.n	8015ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	e005      	b.n	8015eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	2b32      	cmp	r3, #50	; 0x32
 8015eac:	d101      	bne.n	8015eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e000      	b.n	8015eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015eb2:	2300      	movs	r3, #0
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3710      	adds	r7, #16
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015ebc:	b084      	sub	sp, #16
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b086      	sub	sp, #24
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
 8015ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	613b      	str	r3, [r7, #16]
 8015eda:	e009      	b.n	8015ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	3340      	adds	r3, #64	; 0x40
 8015ee2:	009b      	lsls	r3, r3, #2
 8015ee4:	4413      	add	r3, r2
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	3301      	adds	r3, #1
 8015eee:	613b      	str	r3, [r7, #16]
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	2b0e      	cmp	r3, #14
 8015ef4:	d9f2      	bls.n	8015edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d11c      	bne.n	8015f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	68fa      	ldr	r2, [r7, #12]
 8015f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015f0a:	f043 0302 	orr.w	r3, r3, #2
 8015f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	601a      	str	r2, [r3, #0]
 8015f34:	e005      	b.n	8015f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015f48:	461a      	mov	r2, r3
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f54:	4619      	mov	r1, r3
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	680b      	ldr	r3, [r1, #0]
 8015f60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d10c      	bne.n	8015f82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d104      	bne.n	8015f78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015f6e:	2100      	movs	r1, #0
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 f965 	bl	8016240 <USB_SetDevSpeed>
 8015f76:	e008      	b.n	8015f8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015f78:	2101      	movs	r1, #1
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 f960 	bl	8016240 <USB_SetDevSpeed>
 8015f80:	e003      	b.n	8015f8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015f82:	2103      	movs	r1, #3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 f95b 	bl	8016240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015f8a:	2110      	movs	r1, #16
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 f8f3 	bl	8016178 <USB_FlushTxFifo>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d001      	beq.n	8015f9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8015f98:	2301      	movs	r3, #1
 8015f9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f000 f91f 	bl	80161e0 <USB_FlushRxFifo>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fca:	461a      	mov	r2, r3
 8015fcc:	2300      	movs	r3, #0
 8015fce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	613b      	str	r3, [r7, #16]
 8015fd4:	e043      	b.n	801605e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	015a      	lsls	r2, r3, #5
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	4413      	add	r3, r2
 8015fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015fec:	d118      	bne.n	8016020 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10a      	bne.n	801600a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	015a      	lsls	r2, r3, #5
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	4413      	add	r3, r2
 8015ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016000:	461a      	mov	r2, r3
 8016002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016006:	6013      	str	r3, [r2, #0]
 8016008:	e013      	b.n	8016032 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	015a      	lsls	r2, r3, #5
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	4413      	add	r3, r2
 8016012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016016:	461a      	mov	r2, r3
 8016018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801601c:	6013      	str	r3, [r2, #0]
 801601e:	e008      	b.n	8016032 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	015a      	lsls	r2, r3, #5
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	4413      	add	r3, r2
 8016028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801602c:	461a      	mov	r2, r3
 801602e:	2300      	movs	r3, #0
 8016030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	015a      	lsls	r2, r3, #5
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	4413      	add	r3, r2
 801603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801603e:	461a      	mov	r2, r3
 8016040:	2300      	movs	r3, #0
 8016042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	015a      	lsls	r2, r3, #5
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	4413      	add	r3, r2
 801604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016050:	461a      	mov	r2, r3
 8016052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	3301      	adds	r3, #1
 801605c:	613b      	str	r3, [r7, #16]
 801605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016060:	693a      	ldr	r2, [r7, #16]
 8016062:	429a      	cmp	r2, r3
 8016064:	d3b7      	bcc.n	8015fd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016066:	2300      	movs	r3, #0
 8016068:	613b      	str	r3, [r7, #16]
 801606a:	e043      	b.n	80160f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	015a      	lsls	r2, r3, #5
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	4413      	add	r3, r2
 8016074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801607e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016082:	d118      	bne.n	80160b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d10a      	bne.n	80160a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	015a      	lsls	r2, r3, #5
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	4413      	add	r3, r2
 8016092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016096:	461a      	mov	r2, r3
 8016098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801609c:	6013      	str	r3, [r2, #0]
 801609e:	e013      	b.n	80160c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	015a      	lsls	r2, r3, #5
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	4413      	add	r3, r2
 80160a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160ac:	461a      	mov	r2, r3
 80160ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80160b2:	6013      	str	r3, [r2, #0]
 80160b4:	e008      	b.n	80160c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	015a      	lsls	r2, r3, #5
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	4413      	add	r3, r2
 80160be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160c2:	461a      	mov	r2, r3
 80160c4:	2300      	movs	r3, #0
 80160c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	015a      	lsls	r2, r3, #5
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	4413      	add	r3, r2
 80160d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160d4:	461a      	mov	r2, r3
 80160d6:	2300      	movs	r3, #0
 80160d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	015a      	lsls	r2, r3, #5
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	4413      	add	r3, r2
 80160e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160e6:	461a      	mov	r2, r3
 80160e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80160ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	3301      	adds	r3, #1
 80160f2:	613b      	str	r3, [r7, #16]
 80160f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f6:	693a      	ldr	r2, [r7, #16]
 80160f8:	429a      	cmp	r2, r3
 80160fa:	d3b7      	bcc.n	801606c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016102:	691b      	ldr	r3, [r3, #16]
 8016104:	68fa      	ldr	r2, [r7, #12]
 8016106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801610a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801610e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801611c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016120:	2b00      	cmp	r3, #0
 8016122:	d105      	bne.n	8016130 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	699b      	ldr	r3, [r3, #24]
 8016128:	f043 0210 	orr.w	r2, r3, #16
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	699a      	ldr	r2, [r3, #24]
 8016134:	4b0e      	ldr	r3, [pc, #56]	; (8016170 <USB_DevInit+0x2b4>)
 8016136:	4313      	orrs	r3, r2
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801613c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801613e:	2b00      	cmp	r3, #0
 8016140:	d005      	beq.n	801614e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	699b      	ldr	r3, [r3, #24]
 8016146:	f043 0208 	orr.w	r2, r3, #8
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016150:	2b01      	cmp	r3, #1
 8016152:	d105      	bne.n	8016160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	699a      	ldr	r2, [r3, #24]
 8016158:	4b06      	ldr	r3, [pc, #24]	; (8016174 <USB_DevInit+0x2b8>)
 801615a:	4313      	orrs	r3, r2
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8016160:	7dfb      	ldrb	r3, [r7, #23]
}
 8016162:	4618      	mov	r0, r3
 8016164:	3718      	adds	r7, #24
 8016166:	46bd      	mov	sp, r7
 8016168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801616c:	b004      	add	sp, #16
 801616e:	4770      	bx	lr
 8016170:	803c3800 	.word	0x803c3800
 8016174:	40000004 	.word	0x40000004

08016178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016178:	b480      	push	{r7}
 801617a:	b085      	sub	sp, #20
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016182:	2300      	movs	r3, #0
 8016184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	3301      	adds	r3, #1
 801618a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	4a13      	ldr	r2, [pc, #76]	; (80161dc <USB_FlushTxFifo+0x64>)
 8016190:	4293      	cmp	r3, r2
 8016192:	d901      	bls.n	8016198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8016194:	2303      	movs	r3, #3
 8016196:	e01b      	b.n	80161d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	691b      	ldr	r3, [r3, #16]
 801619c:	2b00      	cmp	r3, #0
 801619e:	daf2      	bge.n	8016186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80161a0:	2300      	movs	r3, #0
 80161a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	019b      	lsls	r3, r3, #6
 80161a8:	f043 0220 	orr.w	r2, r3, #32
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	3301      	adds	r3, #1
 80161b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	4a08      	ldr	r2, [pc, #32]	; (80161dc <USB_FlushTxFifo+0x64>)
 80161ba:	4293      	cmp	r3, r2
 80161bc:	d901      	bls.n	80161c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80161be:	2303      	movs	r3, #3
 80161c0:	e006      	b.n	80161d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	691b      	ldr	r3, [r3, #16]
 80161c6:	f003 0320 	and.w	r3, r3, #32
 80161ca:	2b20      	cmp	r3, #32
 80161cc:	d0f0      	beq.n	80161b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80161ce:	2300      	movs	r3, #0
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3714      	adds	r7, #20
 80161d4:	46bd      	mov	sp, r7
 80161d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161da:	4770      	bx	lr
 80161dc:	00030d40 	.word	0x00030d40

080161e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b085      	sub	sp, #20
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80161e8:	2300      	movs	r3, #0
 80161ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	3301      	adds	r3, #1
 80161f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	4a11      	ldr	r2, [pc, #68]	; (801623c <USB_FlushRxFifo+0x5c>)
 80161f6:	4293      	cmp	r3, r2
 80161f8:	d901      	bls.n	80161fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80161fa:	2303      	movs	r3, #3
 80161fc:	e018      	b.n	8016230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	691b      	ldr	r3, [r3, #16]
 8016202:	2b00      	cmp	r3, #0
 8016204:	daf2      	bge.n	80161ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016206:	2300      	movs	r3, #0
 8016208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2210      	movs	r2, #16
 801620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	3301      	adds	r3, #1
 8016214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	4a08      	ldr	r2, [pc, #32]	; (801623c <USB_FlushRxFifo+0x5c>)
 801621a:	4293      	cmp	r3, r2
 801621c:	d901      	bls.n	8016222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801621e:	2303      	movs	r3, #3
 8016220:	e006      	b.n	8016230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	691b      	ldr	r3, [r3, #16]
 8016226:	f003 0310 	and.w	r3, r3, #16
 801622a:	2b10      	cmp	r3, #16
 801622c:	d0f0      	beq.n	8016210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801622e:	2300      	movs	r3, #0
}
 8016230:	4618      	mov	r0, r3
 8016232:	3714      	adds	r7, #20
 8016234:	46bd      	mov	sp, r7
 8016236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623a:	4770      	bx	lr
 801623c:	00030d40 	.word	0x00030d40

08016240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016240:	b480      	push	{r7}
 8016242:	b085      	sub	sp, #20
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	460b      	mov	r3, r1
 801624a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	78fb      	ldrb	r3, [r7, #3]
 801625a:	68f9      	ldr	r1, [r7, #12]
 801625c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016260:	4313      	orrs	r3, r2
 8016262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016264:	2300      	movs	r3, #0
}
 8016266:	4618      	mov	r0, r3
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr

08016272 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016272:	b480      	push	{r7}
 8016274:	b087      	sub	sp, #28
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016284:	689b      	ldr	r3, [r3, #8]
 8016286:	f003 0306 	and.w	r3, r3, #6
 801628a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d102      	bne.n	8016298 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8016292:	2300      	movs	r3, #0
 8016294:	75fb      	strb	r3, [r7, #23]
 8016296:	e00a      	b.n	80162ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2b02      	cmp	r3, #2
 801629c:	d002      	beq.n	80162a4 <USB_GetDevSpeed+0x32>
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2b06      	cmp	r3, #6
 80162a2:	d102      	bne.n	80162aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80162a4:	2302      	movs	r3, #2
 80162a6:	75fb      	strb	r3, [r7, #23]
 80162a8:	e001      	b.n	80162ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80162aa:	230f      	movs	r3, #15
 80162ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80162ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	371c      	adds	r7, #28
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	785b      	ldrb	r3, [r3, #1]
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	d139      	bne.n	801634c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162de:	69da      	ldr	r2, [r3, #28]
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	f003 030f 	and.w	r3, r3, #15
 80162e8:	2101      	movs	r1, #1
 80162ea:	fa01 f303 	lsl.w	r3, r1, r3
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	68f9      	ldr	r1, [r7, #12]
 80162f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80162f6:	4313      	orrs	r3, r2
 80162f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	015a      	lsls	r2, r3, #5
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	4413      	add	r3, r2
 8016302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801630c:	2b00      	cmp	r3, #0
 801630e:	d153      	bne.n	80163b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	015a      	lsls	r2, r3, #5
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	4413      	add	r3, r2
 8016318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	791b      	ldrb	r3, [r3, #4]
 801632a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801632c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	059b      	lsls	r3, r3, #22
 8016332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016334:	431a      	orrs	r2, r3
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	0159      	lsls	r1, r3, #5
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	440b      	add	r3, r1
 801633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016342:	4619      	mov	r1, r3
 8016344:	4b20      	ldr	r3, [pc, #128]	; (80163c8 <USB_ActivateEndpoint+0x10c>)
 8016346:	4313      	orrs	r3, r2
 8016348:	600b      	str	r3, [r1, #0]
 801634a:	e035      	b.n	80163b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016352:	69da      	ldr	r2, [r3, #28]
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	f003 030f 	and.w	r3, r3, #15
 801635c:	2101      	movs	r1, #1
 801635e:	fa01 f303 	lsl.w	r3, r1, r3
 8016362:	041b      	lsls	r3, r3, #16
 8016364:	68f9      	ldr	r1, [r7, #12]
 8016366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801636a:	4313      	orrs	r3, r2
 801636c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	015a      	lsls	r2, r3, #5
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	4413      	add	r3, r2
 8016376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016380:	2b00      	cmp	r3, #0
 8016382:	d119      	bne.n	80163b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	015a      	lsls	r2, r3, #5
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	4413      	add	r3, r2
 801638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016390:	681a      	ldr	r2, [r3, #0]
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	791b      	ldrb	r3, [r3, #4]
 801639e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80163a0:	430b      	orrs	r3, r1
 80163a2:	431a      	orrs	r2, r3
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	0159      	lsls	r1, r3, #5
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	440b      	add	r3, r1
 80163ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163b0:	4619      	mov	r1, r3
 80163b2:	4b05      	ldr	r3, [pc, #20]	; (80163c8 <USB_ActivateEndpoint+0x10c>)
 80163b4:	4313      	orrs	r3, r2
 80163b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3714      	adds	r7, #20
 80163be:	46bd      	mov	sp, r7
 80163c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c4:	4770      	bx	lr
 80163c6:	bf00      	nop
 80163c8:	10008000 	.word	0x10008000

080163cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80163cc:	b480      	push	{r7}
 80163ce:	b085      	sub	sp, #20
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	785b      	ldrb	r3, [r3, #1]
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d161      	bne.n	80164ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	015a      	lsls	r2, r3, #5
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	4413      	add	r3, r2
 80163f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80163fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80163fe:	d11f      	bne.n	8016440 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	015a      	lsls	r2, r3, #5
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	4413      	add	r3, r2
 8016408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	0151      	lsls	r1, r2, #5
 8016412:	68fa      	ldr	r2, [r7, #12]
 8016414:	440a      	add	r2, r1
 8016416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801641a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801641e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	015a      	lsls	r2, r3, #5
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	4413      	add	r3, r2
 8016428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	68ba      	ldr	r2, [r7, #8]
 8016430:	0151      	lsls	r1, r2, #5
 8016432:	68fa      	ldr	r2, [r7, #12]
 8016434:	440a      	add	r2, r1
 8016436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801643a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801643e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	f003 030f 	and.w	r3, r3, #15
 8016450:	2101      	movs	r1, #1
 8016452:	fa01 f303 	lsl.w	r3, r1, r3
 8016456:	b29b      	uxth	r3, r3
 8016458:	43db      	mvns	r3, r3
 801645a:	68f9      	ldr	r1, [r7, #12]
 801645c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016460:	4013      	ands	r3, r2
 8016462:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801646a:	69da      	ldr	r2, [r3, #28]
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	f003 030f 	and.w	r3, r3, #15
 8016474:	2101      	movs	r1, #1
 8016476:	fa01 f303 	lsl.w	r3, r1, r3
 801647a:	b29b      	uxth	r3, r3
 801647c:	43db      	mvns	r3, r3
 801647e:	68f9      	ldr	r1, [r7, #12]
 8016480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016484:	4013      	ands	r3, r2
 8016486:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	015a      	lsls	r2, r3, #5
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	4413      	add	r3, r2
 8016490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	0159      	lsls	r1, r3, #5
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	440b      	add	r3, r1
 801649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164a2:	4619      	mov	r1, r3
 80164a4:	4b35      	ldr	r3, [pc, #212]	; (801657c <USB_DeactivateEndpoint+0x1b0>)
 80164a6:	4013      	ands	r3, r2
 80164a8:	600b      	str	r3, [r1, #0]
 80164aa:	e060      	b.n	801656e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	015a      	lsls	r2, r3, #5
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	4413      	add	r3, r2
 80164b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80164be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80164c2:	d11f      	bne.n	8016504 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	015a      	lsls	r2, r3, #5
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	4413      	add	r3, r2
 80164cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	68ba      	ldr	r2, [r7, #8]
 80164d4:	0151      	lsls	r1, r2, #5
 80164d6:	68fa      	ldr	r2, [r7, #12]
 80164d8:	440a      	add	r2, r1
 80164da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80164e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	015a      	lsls	r2, r3, #5
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	4413      	add	r3, r2
 80164ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	68ba      	ldr	r2, [r7, #8]
 80164f4:	0151      	lsls	r1, r2, #5
 80164f6:	68fa      	ldr	r2, [r7, #12]
 80164f8:	440a      	add	r2, r1
 80164fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801650a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	f003 030f 	and.w	r3, r3, #15
 8016514:	2101      	movs	r1, #1
 8016516:	fa01 f303 	lsl.w	r3, r1, r3
 801651a:	041b      	lsls	r3, r3, #16
 801651c:	43db      	mvns	r3, r3
 801651e:	68f9      	ldr	r1, [r7, #12]
 8016520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016524:	4013      	ands	r3, r2
 8016526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801652e:	69da      	ldr	r2, [r3, #28]
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	f003 030f 	and.w	r3, r3, #15
 8016538:	2101      	movs	r1, #1
 801653a:	fa01 f303 	lsl.w	r3, r1, r3
 801653e:	041b      	lsls	r3, r3, #16
 8016540:	43db      	mvns	r3, r3
 8016542:	68f9      	ldr	r1, [r7, #12]
 8016544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016548:	4013      	ands	r3, r2
 801654a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	015a      	lsls	r2, r3, #5
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	4413      	add	r3, r2
 8016554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	0159      	lsls	r1, r3, #5
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	440b      	add	r3, r1
 8016562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016566:	4619      	mov	r1, r3
 8016568:	4b05      	ldr	r3, [pc, #20]	; (8016580 <USB_DeactivateEndpoint+0x1b4>)
 801656a:	4013      	ands	r3, r2
 801656c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801656e:	2300      	movs	r3, #0
}
 8016570:	4618      	mov	r0, r3
 8016572:	3714      	adds	r7, #20
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr
 801657c:	ec337800 	.word	0xec337800
 8016580:	eff37800 	.word	0xeff37800

08016584 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b08a      	sub	sp, #40	; 0x28
 8016588:	af02      	add	r7, sp, #8
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	4613      	mov	r3, r2
 8016590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	785b      	ldrb	r3, [r3, #1]
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	f040 8163 	bne.w	801686c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	699b      	ldr	r3, [r3, #24]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d132      	bne.n	8016614 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	015a      	lsls	r2, r3, #5
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	4413      	add	r3, r2
 80165b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165ba:	691a      	ldr	r2, [r3, #16]
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	0159      	lsls	r1, r3, #5
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	440b      	add	r3, r1
 80165c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165c8:	4619      	mov	r1, r3
 80165ca:	4ba5      	ldr	r3, [pc, #660]	; (8016860 <USB_EPStartXfer+0x2dc>)
 80165cc:	4013      	ands	r3, r2
 80165ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80165d0:	69bb      	ldr	r3, [r7, #24]
 80165d2:	015a      	lsls	r2, r3, #5
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	4413      	add	r3, r2
 80165d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165dc:	691b      	ldr	r3, [r3, #16]
 80165de:	69ba      	ldr	r2, [r7, #24]
 80165e0:	0151      	lsls	r1, r2, #5
 80165e2:	69fa      	ldr	r2, [r7, #28]
 80165e4:	440a      	add	r2, r1
 80165e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80165ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80165ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	015a      	lsls	r2, r3, #5
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	4413      	add	r3, r2
 80165f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165fc:	691a      	ldr	r2, [r3, #16]
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	0159      	lsls	r1, r3, #5
 8016602:	69fb      	ldr	r3, [r7, #28]
 8016604:	440b      	add	r3, r1
 8016606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801660a:	4619      	mov	r1, r3
 801660c:	4b95      	ldr	r3, [pc, #596]	; (8016864 <USB_EPStartXfer+0x2e0>)
 801660e:	4013      	ands	r3, r2
 8016610:	610b      	str	r3, [r1, #16]
 8016612:	e074      	b.n	80166fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016614:	69bb      	ldr	r3, [r7, #24]
 8016616:	015a      	lsls	r2, r3, #5
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	4413      	add	r3, r2
 801661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016620:	691a      	ldr	r2, [r3, #16]
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	0159      	lsls	r1, r3, #5
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	440b      	add	r3, r1
 801662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801662e:	4619      	mov	r1, r3
 8016630:	4b8c      	ldr	r3, [pc, #560]	; (8016864 <USB_EPStartXfer+0x2e0>)
 8016632:	4013      	ands	r3, r2
 8016634:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	015a      	lsls	r2, r3, #5
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	4413      	add	r3, r2
 801663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016642:	691a      	ldr	r2, [r3, #16]
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	0159      	lsls	r1, r3, #5
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	440b      	add	r3, r1
 801664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016650:	4619      	mov	r1, r3
 8016652:	4b83      	ldr	r3, [pc, #524]	; (8016860 <USB_EPStartXfer+0x2dc>)
 8016654:	4013      	ands	r3, r2
 8016656:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016658:	69bb      	ldr	r3, [r7, #24]
 801665a:	015a      	lsls	r2, r3, #5
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	4413      	add	r3, r2
 8016660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016664:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	6999      	ldr	r1, [r3, #24]
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	68db      	ldr	r3, [r3, #12]
 801666e:	440b      	add	r3, r1
 8016670:	1e59      	subs	r1, r3, #1
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	68db      	ldr	r3, [r3, #12]
 8016676:	fbb1 f3f3 	udiv	r3, r1, r3
 801667a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801667c:	4b7a      	ldr	r3, [pc, #488]	; (8016868 <USB_EPStartXfer+0x2e4>)
 801667e:	400b      	ands	r3, r1
 8016680:	69b9      	ldr	r1, [r7, #24]
 8016682:	0148      	lsls	r0, r1, #5
 8016684:	69f9      	ldr	r1, [r7, #28]
 8016686:	4401      	add	r1, r0
 8016688:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801668c:	4313      	orrs	r3, r2
 801668e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016690:	69bb      	ldr	r3, [r7, #24]
 8016692:	015a      	lsls	r2, r3, #5
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	4413      	add	r3, r2
 8016698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801669c:	691a      	ldr	r2, [r3, #16]
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	699b      	ldr	r3, [r3, #24]
 80166a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80166a6:	69b9      	ldr	r1, [r7, #24]
 80166a8:	0148      	lsls	r0, r1, #5
 80166aa:	69f9      	ldr	r1, [r7, #28]
 80166ac:	4401      	add	r1, r0
 80166ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80166b2:	4313      	orrs	r3, r2
 80166b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	791b      	ldrb	r3, [r3, #4]
 80166ba:	2b01      	cmp	r3, #1
 80166bc:	d11f      	bne.n	80166fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	015a      	lsls	r2, r3, #5
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	4413      	add	r3, r2
 80166c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166ca:	691b      	ldr	r3, [r3, #16]
 80166cc:	69ba      	ldr	r2, [r7, #24]
 80166ce:	0151      	lsls	r1, r2, #5
 80166d0:	69fa      	ldr	r2, [r7, #28]
 80166d2:	440a      	add	r2, r1
 80166d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80166d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80166dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	015a      	lsls	r2, r3, #5
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	4413      	add	r3, r2
 80166e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166ea:	691b      	ldr	r3, [r3, #16]
 80166ec:	69ba      	ldr	r2, [r7, #24]
 80166ee:	0151      	lsls	r1, r2, #5
 80166f0:	69fa      	ldr	r2, [r7, #28]
 80166f2:	440a      	add	r2, r1
 80166f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80166f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80166fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80166fe:	79fb      	ldrb	r3, [r7, #7]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d14b      	bne.n	801679c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d009      	beq.n	8016720 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	015a      	lsls	r2, r3, #5
 8016710:	69fb      	ldr	r3, [r7, #28]
 8016712:	4413      	add	r3, r2
 8016714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016718:	461a      	mov	r2, r3
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	695b      	ldr	r3, [r3, #20]
 801671e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	791b      	ldrb	r3, [r3, #4]
 8016724:	2b01      	cmp	r3, #1
 8016726:	d128      	bne.n	801677a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801672e:	689b      	ldr	r3, [r3, #8]
 8016730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016734:	2b00      	cmp	r3, #0
 8016736:	d110      	bne.n	801675a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	015a      	lsls	r2, r3, #5
 801673c:	69fb      	ldr	r3, [r7, #28]
 801673e:	4413      	add	r3, r2
 8016740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	69ba      	ldr	r2, [r7, #24]
 8016748:	0151      	lsls	r1, r2, #5
 801674a:	69fa      	ldr	r2, [r7, #28]
 801674c:	440a      	add	r2, r1
 801674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016756:	6013      	str	r3, [r2, #0]
 8016758:	e00f      	b.n	801677a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801675a:	69bb      	ldr	r3, [r7, #24]
 801675c:	015a      	lsls	r2, r3, #5
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	4413      	add	r3, r2
 8016762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	69ba      	ldr	r2, [r7, #24]
 801676a:	0151      	lsls	r1, r2, #5
 801676c:	69fa      	ldr	r2, [r7, #28]
 801676e:	440a      	add	r2, r1
 8016770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016778:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	015a      	lsls	r2, r3, #5
 801677e:	69fb      	ldr	r3, [r7, #28]
 8016780:	4413      	add	r3, r2
 8016782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	69ba      	ldr	r2, [r7, #24]
 801678a:	0151      	lsls	r1, r2, #5
 801678c:	69fa      	ldr	r2, [r7, #28]
 801678e:	440a      	add	r2, r1
 8016790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016794:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016798:	6013      	str	r3, [r2, #0]
 801679a:	e137      	b.n	8016a0c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801679c:	69bb      	ldr	r3, [r7, #24]
 801679e:	015a      	lsls	r2, r3, #5
 80167a0:	69fb      	ldr	r3, [r7, #28]
 80167a2:	4413      	add	r3, r2
 80167a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	69ba      	ldr	r2, [r7, #24]
 80167ac:	0151      	lsls	r1, r2, #5
 80167ae:	69fa      	ldr	r2, [r7, #28]
 80167b0:	440a      	add	r2, r1
 80167b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80167b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80167ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	791b      	ldrb	r3, [r3, #4]
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d015      	beq.n	80167f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	699b      	ldr	r3, [r3, #24]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	f000 811f 	beq.w	8016a0c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	f003 030f 	and.w	r3, r3, #15
 80167de:	2101      	movs	r1, #1
 80167e0:	fa01 f303 	lsl.w	r3, r1, r3
 80167e4:	69f9      	ldr	r1, [r7, #28]
 80167e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80167ea:	4313      	orrs	r3, r2
 80167ec:	634b      	str	r3, [r1, #52]	; 0x34
 80167ee:	e10d      	b.n	8016a0c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80167f0:	69fb      	ldr	r3, [r7, #28]
 80167f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167f6:	689b      	ldr	r3, [r3, #8]
 80167f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d110      	bne.n	8016822 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016800:	69bb      	ldr	r3, [r7, #24]
 8016802:	015a      	lsls	r2, r3, #5
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	4413      	add	r3, r2
 8016808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	69ba      	ldr	r2, [r7, #24]
 8016810:	0151      	lsls	r1, r2, #5
 8016812:	69fa      	ldr	r2, [r7, #28]
 8016814:	440a      	add	r2, r1
 8016816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801681a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801681e:	6013      	str	r3, [r2, #0]
 8016820:	e00f      	b.n	8016842 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016822:	69bb      	ldr	r3, [r7, #24]
 8016824:	015a      	lsls	r2, r3, #5
 8016826:	69fb      	ldr	r3, [r7, #28]
 8016828:	4413      	add	r3, r2
 801682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	69ba      	ldr	r2, [r7, #24]
 8016832:	0151      	lsls	r1, r2, #5
 8016834:	69fa      	ldr	r2, [r7, #28]
 8016836:	440a      	add	r2, r1
 8016838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016840:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	6919      	ldr	r1, [r3, #16]
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	781a      	ldrb	r2, [r3, #0]
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	699b      	ldr	r3, [r3, #24]
 801684e:	b298      	uxth	r0, r3
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	9300      	str	r3, [sp, #0]
 8016854:	4603      	mov	r3, r0
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f000 faea 	bl	8016e30 <USB_WritePacket>
 801685c:	e0d6      	b.n	8016a0c <USB_EPStartXfer+0x488>
 801685e:	bf00      	nop
 8016860:	e007ffff 	.word	0xe007ffff
 8016864:	fff80000 	.word	0xfff80000
 8016868:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801686c:	69bb      	ldr	r3, [r7, #24]
 801686e:	015a      	lsls	r2, r3, #5
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	4413      	add	r3, r2
 8016874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016878:	691a      	ldr	r2, [r3, #16]
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	0159      	lsls	r1, r3, #5
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	440b      	add	r3, r1
 8016882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016886:	4619      	mov	r1, r3
 8016888:	4b63      	ldr	r3, [pc, #396]	; (8016a18 <USB_EPStartXfer+0x494>)
 801688a:	4013      	ands	r3, r2
 801688c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801688e:	69bb      	ldr	r3, [r7, #24]
 8016890:	015a      	lsls	r2, r3, #5
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	4413      	add	r3, r2
 8016896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801689a:	691a      	ldr	r2, [r3, #16]
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	0159      	lsls	r1, r3, #5
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	440b      	add	r3, r1
 80168a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168a8:	4619      	mov	r1, r3
 80168aa:	4b5c      	ldr	r3, [pc, #368]	; (8016a1c <USB_EPStartXfer+0x498>)
 80168ac:	4013      	ands	r3, r2
 80168ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	699b      	ldr	r3, [r3, #24]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d123      	bne.n	8016900 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80168b8:	69bb      	ldr	r3, [r7, #24]
 80168ba:	015a      	lsls	r2, r3, #5
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	4413      	add	r3, r2
 80168c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168c4:	691a      	ldr	r2, [r3, #16]
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	68db      	ldr	r3, [r3, #12]
 80168ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80168ce:	69b9      	ldr	r1, [r7, #24]
 80168d0:	0148      	lsls	r0, r1, #5
 80168d2:	69f9      	ldr	r1, [r7, #28]
 80168d4:	4401      	add	r1, r0
 80168d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80168da:	4313      	orrs	r3, r2
 80168dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80168de:	69bb      	ldr	r3, [r7, #24]
 80168e0:	015a      	lsls	r2, r3, #5
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	4413      	add	r3, r2
 80168e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168ea:	691b      	ldr	r3, [r3, #16]
 80168ec:	69ba      	ldr	r2, [r7, #24]
 80168ee:	0151      	lsls	r1, r2, #5
 80168f0:	69fa      	ldr	r2, [r7, #28]
 80168f2:	440a      	add	r2, r1
 80168f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80168fc:	6113      	str	r3, [r2, #16]
 80168fe:	e037      	b.n	8016970 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	699a      	ldr	r2, [r3, #24]
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	4413      	add	r3, r2
 801690a:	1e5a      	subs	r2, r3, #1
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	fbb2 f3f3 	udiv	r3, r2, r3
 8016914:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	8afa      	ldrh	r2, [r7, #22]
 801691c:	fb03 f202 	mul.w	r2, r3, r2
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	015a      	lsls	r2, r3, #5
 8016928:	69fb      	ldr	r3, [r7, #28]
 801692a:	4413      	add	r3, r2
 801692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016930:	691a      	ldr	r2, [r3, #16]
 8016932:	8afb      	ldrh	r3, [r7, #22]
 8016934:	04d9      	lsls	r1, r3, #19
 8016936:	4b3a      	ldr	r3, [pc, #232]	; (8016a20 <USB_EPStartXfer+0x49c>)
 8016938:	400b      	ands	r3, r1
 801693a:	69b9      	ldr	r1, [r7, #24]
 801693c:	0148      	lsls	r0, r1, #5
 801693e:	69f9      	ldr	r1, [r7, #28]
 8016940:	4401      	add	r1, r0
 8016942:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016946:	4313      	orrs	r3, r2
 8016948:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801694a:	69bb      	ldr	r3, [r7, #24]
 801694c:	015a      	lsls	r2, r3, #5
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	4413      	add	r3, r2
 8016952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016956:	691a      	ldr	r2, [r3, #16]
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	69db      	ldr	r3, [r3, #28]
 801695c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016960:	69b9      	ldr	r1, [r7, #24]
 8016962:	0148      	lsls	r0, r1, #5
 8016964:	69f9      	ldr	r1, [r7, #28]
 8016966:	4401      	add	r1, r0
 8016968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801696c:	4313      	orrs	r3, r2
 801696e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016970:	79fb      	ldrb	r3, [r7, #7]
 8016972:	2b01      	cmp	r3, #1
 8016974:	d10d      	bne.n	8016992 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	691b      	ldr	r3, [r3, #16]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d009      	beq.n	8016992 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	6919      	ldr	r1, [r3, #16]
 8016982:	69bb      	ldr	r3, [r7, #24]
 8016984:	015a      	lsls	r2, r3, #5
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	4413      	add	r3, r2
 801698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801698e:	460a      	mov	r2, r1
 8016990:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	791b      	ldrb	r3, [r3, #4]
 8016996:	2b01      	cmp	r3, #1
 8016998:	d128      	bne.n	80169ec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80169a0:	689b      	ldr	r3, [r3, #8]
 80169a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d110      	bne.n	80169cc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	015a      	lsls	r2, r3, #5
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	4413      	add	r3, r2
 80169b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	69ba      	ldr	r2, [r7, #24]
 80169ba:	0151      	lsls	r1, r2, #5
 80169bc:	69fa      	ldr	r2, [r7, #28]
 80169be:	440a      	add	r2, r1
 80169c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80169c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80169c8:	6013      	str	r3, [r2, #0]
 80169ca:	e00f      	b.n	80169ec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80169cc:	69bb      	ldr	r3, [r7, #24]
 80169ce:	015a      	lsls	r2, r3, #5
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	4413      	add	r3, r2
 80169d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	69ba      	ldr	r2, [r7, #24]
 80169dc:	0151      	lsls	r1, r2, #5
 80169de:	69fa      	ldr	r2, [r7, #28]
 80169e0:	440a      	add	r2, r1
 80169e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80169e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80169ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80169ec:	69bb      	ldr	r3, [r7, #24]
 80169ee:	015a      	lsls	r2, r3, #5
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	4413      	add	r3, r2
 80169f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	69ba      	ldr	r2, [r7, #24]
 80169fc:	0151      	lsls	r1, r2, #5
 80169fe:	69fa      	ldr	r2, [r7, #28]
 8016a00:	440a      	add	r2, r1
 8016a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016a0c:	2300      	movs	r3, #0
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	3720      	adds	r7, #32
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	fff80000 	.word	0xfff80000
 8016a1c:	e007ffff 	.word	0xe007ffff
 8016a20:	1ff80000 	.word	0x1ff80000

08016a24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016a24:	b480      	push	{r7}
 8016a26:	b087      	sub	sp, #28
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	4613      	mov	r3, r2
 8016a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	785b      	ldrb	r3, [r3, #1]
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	f040 80ce 	bne.w	8016be2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	699b      	ldr	r3, [r3, #24]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d132      	bne.n	8016ab4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	015a      	lsls	r2, r3, #5
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	4413      	add	r3, r2
 8016a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a5a:	691a      	ldr	r2, [r3, #16]
 8016a5c:	693b      	ldr	r3, [r7, #16]
 8016a5e:	0159      	lsls	r1, r3, #5
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	440b      	add	r3, r1
 8016a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a68:	4619      	mov	r1, r3
 8016a6a:	4b9a      	ldr	r3, [pc, #616]	; (8016cd4 <USB_EP0StartXfer+0x2b0>)
 8016a6c:	4013      	ands	r3, r2
 8016a6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	015a      	lsls	r2, r3, #5
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	4413      	add	r3, r2
 8016a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a7c:	691b      	ldr	r3, [r3, #16]
 8016a7e:	693a      	ldr	r2, [r7, #16]
 8016a80:	0151      	lsls	r1, r2, #5
 8016a82:	697a      	ldr	r2, [r7, #20]
 8016a84:	440a      	add	r2, r1
 8016a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	015a      	lsls	r2, r3, #5
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	4413      	add	r3, r2
 8016a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a9c:	691a      	ldr	r2, [r3, #16]
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	0159      	lsls	r1, r3, #5
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	440b      	add	r3, r1
 8016aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016aaa:	4619      	mov	r1, r3
 8016aac:	4b8a      	ldr	r3, [pc, #552]	; (8016cd8 <USB_EP0StartXfer+0x2b4>)
 8016aae:	4013      	ands	r3, r2
 8016ab0:	610b      	str	r3, [r1, #16]
 8016ab2:	e04e      	b.n	8016b52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	015a      	lsls	r2, r3, #5
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	4413      	add	r3, r2
 8016abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ac0:	691a      	ldr	r2, [r3, #16]
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	0159      	lsls	r1, r3, #5
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	440b      	add	r3, r1
 8016aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ace:	4619      	mov	r1, r3
 8016ad0:	4b81      	ldr	r3, [pc, #516]	; (8016cd8 <USB_EP0StartXfer+0x2b4>)
 8016ad2:	4013      	ands	r3, r2
 8016ad4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	015a      	lsls	r2, r3, #5
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	4413      	add	r3, r2
 8016ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ae2:	691a      	ldr	r2, [r3, #16]
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	0159      	lsls	r1, r3, #5
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	440b      	add	r3, r1
 8016aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016af0:	4619      	mov	r1, r3
 8016af2:	4b78      	ldr	r3, [pc, #480]	; (8016cd4 <USB_EP0StartXfer+0x2b0>)
 8016af4:	4013      	ands	r3, r2
 8016af6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8016af8:	68bb      	ldr	r3, [r7, #8]
 8016afa:	699a      	ldr	r2, [r3, #24]
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	68db      	ldr	r3, [r3, #12]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d903      	bls.n	8016b0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	68da      	ldr	r2, [r3, #12]
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	015a      	lsls	r2, r3, #5
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	4413      	add	r3, r2
 8016b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b18:	691b      	ldr	r3, [r3, #16]
 8016b1a:	693a      	ldr	r2, [r7, #16]
 8016b1c:	0151      	lsls	r1, r2, #5
 8016b1e:	697a      	ldr	r2, [r7, #20]
 8016b20:	440a      	add	r2, r1
 8016b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	015a      	lsls	r2, r3, #5
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	4413      	add	r3, r2
 8016b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b38:	691a      	ldr	r2, [r3, #16]
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	699b      	ldr	r3, [r3, #24]
 8016b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016b42:	6939      	ldr	r1, [r7, #16]
 8016b44:	0148      	lsls	r0, r1, #5
 8016b46:	6979      	ldr	r1, [r7, #20]
 8016b48:	4401      	add	r1, r0
 8016b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016b4e:	4313      	orrs	r3, r2
 8016b50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016b52:	79fb      	ldrb	r3, [r7, #7]
 8016b54:	2b01      	cmp	r3, #1
 8016b56:	d11e      	bne.n	8016b96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	695b      	ldr	r3, [r3, #20]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d009      	beq.n	8016b74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	015a      	lsls	r2, r3, #5
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	4413      	add	r3, r2
 8016b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	695b      	ldr	r3, [r3, #20]
 8016b72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	015a      	lsls	r2, r3, #5
 8016b78:	697b      	ldr	r3, [r7, #20]
 8016b7a:	4413      	add	r3, r2
 8016b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	693a      	ldr	r2, [r7, #16]
 8016b84:	0151      	lsls	r1, r2, #5
 8016b86:	697a      	ldr	r2, [r7, #20]
 8016b88:	440a      	add	r2, r1
 8016b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016b92:	6013      	str	r3, [r2, #0]
 8016b94:	e097      	b.n	8016cc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	015a      	lsls	r2, r3, #5
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	693a      	ldr	r2, [r7, #16]
 8016ba6:	0151      	lsls	r1, r2, #5
 8016ba8:	697a      	ldr	r2, [r7, #20]
 8016baa:	440a      	add	r2, r1
 8016bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016bb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	699b      	ldr	r3, [r3, #24]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f000 8083 	beq.w	8016cc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	f003 030f 	and.w	r3, r3, #15
 8016bd0:	2101      	movs	r1, #1
 8016bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8016bd6:	6979      	ldr	r1, [r7, #20]
 8016bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016bdc:	4313      	orrs	r3, r2
 8016bde:	634b      	str	r3, [r1, #52]	; 0x34
 8016be0:	e071      	b.n	8016cc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	015a      	lsls	r2, r3, #5
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	4413      	add	r3, r2
 8016bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016bee:	691a      	ldr	r2, [r3, #16]
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	0159      	lsls	r1, r3, #5
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	440b      	add	r3, r1
 8016bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016bfc:	4619      	mov	r1, r3
 8016bfe:	4b36      	ldr	r3, [pc, #216]	; (8016cd8 <USB_EP0StartXfer+0x2b4>)
 8016c00:	4013      	ands	r3, r2
 8016c02:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	015a      	lsls	r2, r3, #5
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	4413      	add	r3, r2
 8016c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c10:	691a      	ldr	r2, [r3, #16]
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	0159      	lsls	r1, r3, #5
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	440b      	add	r3, r1
 8016c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c1e:	4619      	mov	r1, r3
 8016c20:	4b2c      	ldr	r3, [pc, #176]	; (8016cd4 <USB_EP0StartXfer+0x2b0>)
 8016c22:	4013      	ands	r3, r2
 8016c24:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	699b      	ldr	r3, [r3, #24]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d003      	beq.n	8016c36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	68da      	ldr	r2, [r3, #12]
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	68da      	ldr	r2, [r3, #12]
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	015a      	lsls	r2, r3, #5
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	4413      	add	r3, r2
 8016c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c4a:	691b      	ldr	r3, [r3, #16]
 8016c4c:	693a      	ldr	r2, [r7, #16]
 8016c4e:	0151      	lsls	r1, r2, #5
 8016c50:	697a      	ldr	r2, [r7, #20]
 8016c52:	440a      	add	r2, r1
 8016c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	015a      	lsls	r2, r3, #5
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	4413      	add	r3, r2
 8016c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c6a:	691a      	ldr	r2, [r3, #16]
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	69db      	ldr	r3, [r3, #28]
 8016c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016c74:	6939      	ldr	r1, [r7, #16]
 8016c76:	0148      	lsls	r0, r1, #5
 8016c78:	6979      	ldr	r1, [r7, #20]
 8016c7a:	4401      	add	r1, r0
 8016c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016c80:	4313      	orrs	r3, r2
 8016c82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8016c84:	79fb      	ldrb	r3, [r7, #7]
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d10d      	bne.n	8016ca6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	691b      	ldr	r3, [r3, #16]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d009      	beq.n	8016ca6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	6919      	ldr	r1, [r3, #16]
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	015a      	lsls	r2, r3, #5
 8016c9a:	697b      	ldr	r3, [r7, #20]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ca2:	460a      	mov	r2, r1
 8016ca4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	015a      	lsls	r2, r3, #5
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	4413      	add	r3, r2
 8016cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	693a      	ldr	r2, [r7, #16]
 8016cb6:	0151      	lsls	r1, r2, #5
 8016cb8:	697a      	ldr	r2, [r7, #20]
 8016cba:	440a      	add	r2, r1
 8016cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016cc6:	2300      	movs	r3, #0
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	371c      	adds	r7, #28
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr
 8016cd4:	e007ffff 	.word	0xe007ffff
 8016cd8:	fff80000 	.word	0xfff80000

08016cdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016cdc:	b480      	push	{r7}
 8016cde:	b087      	sub	sp, #28
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016cea:	2300      	movs	r3, #0
 8016cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	785b      	ldrb	r3, [r3, #1]
 8016cf6:	2b01      	cmp	r3, #1
 8016cf8:	d14a      	bne.n	8016d90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016cfa:	683b      	ldr	r3, [r7, #0]
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	015a      	lsls	r2, r3, #5
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	4413      	add	r3, r2
 8016d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d12:	f040 8086 	bne.w	8016e22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	015a      	lsls	r2, r3, #5
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	4413      	add	r3, r2
 8016d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	683a      	ldr	r2, [r7, #0]
 8016d28:	7812      	ldrb	r2, [r2, #0]
 8016d2a:	0151      	lsls	r1, r2, #5
 8016d2c:	693a      	ldr	r2, [r7, #16]
 8016d2e:	440a      	add	r2, r1
 8016d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016d38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	015a      	lsls	r2, r3, #5
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	4413      	add	r3, r2
 8016d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	683a      	ldr	r2, [r7, #0]
 8016d4c:	7812      	ldrb	r2, [r2, #0]
 8016d4e:	0151      	lsls	r1, r2, #5
 8016d50:	693a      	ldr	r2, [r7, #16]
 8016d52:	440a      	add	r2, r1
 8016d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	3301      	adds	r3, #1
 8016d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8016d6a:	4293      	cmp	r3, r2
 8016d6c:	d902      	bls.n	8016d74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8016d6e:	2301      	movs	r3, #1
 8016d70:	75fb      	strb	r3, [r7, #23]
          break;
 8016d72:	e056      	b.n	8016e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	015a      	lsls	r2, r3, #5
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d8c:	d0e7      	beq.n	8016d5e <USB_EPStopXfer+0x82>
 8016d8e:	e048      	b.n	8016e22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	781b      	ldrb	r3, [r3, #0]
 8016d94:	015a      	lsls	r2, r3, #5
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	4413      	add	r3, r2
 8016d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016da8:	d13b      	bne.n	8016e22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	015a      	lsls	r2, r3, #5
 8016db0:	693b      	ldr	r3, [r7, #16]
 8016db2:	4413      	add	r3, r2
 8016db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	683a      	ldr	r2, [r7, #0]
 8016dbc:	7812      	ldrb	r2, [r2, #0]
 8016dbe:	0151      	lsls	r1, r2, #5
 8016dc0:	693a      	ldr	r2, [r7, #16]
 8016dc2:	440a      	add	r2, r1
 8016dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016dcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	015a      	lsls	r2, r3, #5
 8016dd4:	693b      	ldr	r3, [r7, #16]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	683a      	ldr	r2, [r7, #0]
 8016de0:	7812      	ldrb	r2, [r2, #0]
 8016de2:	0151      	lsls	r1, r2, #5
 8016de4:	693a      	ldr	r2, [r7, #16]
 8016de6:	440a      	add	r2, r1
 8016de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	3301      	adds	r3, #1
 8016df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d902      	bls.n	8016e08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8016e02:	2301      	movs	r3, #1
 8016e04:	75fb      	strb	r3, [r7, #23]
          break;
 8016e06:	e00c      	b.n	8016e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	015a      	lsls	r2, r3, #5
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	4413      	add	r3, r2
 8016e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016e20:	d0e7      	beq.n	8016df2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8016e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	371c      	adds	r7, #28
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2e:	4770      	bx	lr

08016e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8016e30:	b480      	push	{r7}
 8016e32:	b089      	sub	sp, #36	; 0x24
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	4611      	mov	r1, r2
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	460b      	mov	r3, r1
 8016e40:	71fb      	strb	r3, [r7, #7]
 8016e42:	4613      	mov	r3, r2
 8016e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8016e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d123      	bne.n	8016e9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016e56:	88bb      	ldrh	r3, [r7, #4]
 8016e58:	3303      	adds	r3, #3
 8016e5a:	089b      	lsrs	r3, r3, #2
 8016e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8016e5e:	2300      	movs	r3, #0
 8016e60:	61bb      	str	r3, [r7, #24]
 8016e62:	e018      	b.n	8016e96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016e64:	79fb      	ldrb	r3, [r7, #7]
 8016e66:	031a      	lsls	r2, r3, #12
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e70:	461a      	mov	r2, r3
 8016e72:	69fb      	ldr	r3, [r7, #28]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8016e78:	69fb      	ldr	r3, [r7, #28]
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016e7e:	69fb      	ldr	r3, [r7, #28]
 8016e80:	3301      	adds	r3, #1
 8016e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016e84:	69fb      	ldr	r3, [r7, #28]
 8016e86:	3301      	adds	r3, #1
 8016e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	3301      	adds	r3, #1
 8016e94:	61bb      	str	r3, [r7, #24]
 8016e96:	69ba      	ldr	r2, [r7, #24]
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d3e2      	bcc.n	8016e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8016e9e:	2300      	movs	r3, #0
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3724      	adds	r7, #36	; 0x24
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr

08016eac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b08b      	sub	sp, #44	; 0x2c
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016ec2:	88fb      	ldrh	r3, [r7, #6]
 8016ec4:	089b      	lsrs	r3, r3, #2
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016eca:	88fb      	ldrh	r3, [r7, #6]
 8016ecc:	f003 0303 	and.w	r3, r3, #3
 8016ed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	623b      	str	r3, [r7, #32]
 8016ed6:	e014      	b.n	8016f02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee2:	601a      	str	r2, [r3, #0]
    pDest++;
 8016ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eec:	3301      	adds	r3, #1
 8016eee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef8:	3301      	adds	r3, #1
 8016efa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8016efc:	6a3b      	ldr	r3, [r7, #32]
 8016efe:	3301      	adds	r3, #1
 8016f00:	623b      	str	r3, [r7, #32]
 8016f02:	6a3a      	ldr	r2, [r7, #32]
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d3e6      	bcc.n	8016ed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016f0a:	8bfb      	ldrh	r3, [r7, #30]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d01e      	beq.n	8016f4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016f10:	2300      	movs	r3, #0
 8016f12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	f107 0310 	add.w	r3, r7, #16
 8016f20:	6812      	ldr	r2, [r2, #0]
 8016f22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016f24:	693a      	ldr	r2, [r7, #16]
 8016f26:	6a3b      	ldr	r3, [r7, #32]
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	00db      	lsls	r3, r3, #3
 8016f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8016f30:	b2da      	uxtb	r2, r3
 8016f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f34:	701a      	strb	r2, [r3, #0]
      i++;
 8016f36:	6a3b      	ldr	r3, [r7, #32]
 8016f38:	3301      	adds	r3, #1
 8016f3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8016f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3e:	3301      	adds	r3, #1
 8016f40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8016f42:	8bfb      	ldrh	r3, [r7, #30]
 8016f44:	3b01      	subs	r3, #1
 8016f46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016f48:	8bfb      	ldrh	r3, [r7, #30]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d1ea      	bne.n	8016f24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	372c      	adds	r7, #44	; 0x2c
 8016f54:	46bd      	mov	sp, r7
 8016f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5a:	4770      	bx	lr

08016f5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b085      	sub	sp, #20
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	785b      	ldrb	r3, [r3, #1]
 8016f74:	2b01      	cmp	r3, #1
 8016f76:	d12c      	bne.n	8016fd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	015a      	lsls	r2, r3, #5
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	4413      	add	r3, r2
 8016f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	db12      	blt.n	8016fb0 <USB_EPSetStall+0x54>
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d00f      	beq.n	8016fb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	015a      	lsls	r2, r3, #5
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	4413      	add	r3, r2
 8016f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	68ba      	ldr	r2, [r7, #8]
 8016fa0:	0151      	lsls	r1, r2, #5
 8016fa2:	68fa      	ldr	r2, [r7, #12]
 8016fa4:	440a      	add	r2, r1
 8016fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016fae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	015a      	lsls	r2, r3, #5
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	4413      	add	r3, r2
 8016fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	68ba      	ldr	r2, [r7, #8]
 8016fc0:	0151      	lsls	r1, r2, #5
 8016fc2:	68fa      	ldr	r2, [r7, #12]
 8016fc4:	440a      	add	r2, r1
 8016fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016fce:	6013      	str	r3, [r2, #0]
 8016fd0:	e02b      	b.n	801702a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	015a      	lsls	r2, r3, #5
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	4413      	add	r3, r2
 8016fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	db12      	blt.n	801700a <USB_EPSetStall+0xae>
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d00f      	beq.n	801700a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	015a      	lsls	r2, r3, #5
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	4413      	add	r3, r2
 8016ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	68ba      	ldr	r2, [r7, #8]
 8016ffa:	0151      	lsls	r1, r2, #5
 8016ffc:	68fa      	ldr	r2, [r7, #12]
 8016ffe:	440a      	add	r2, r1
 8017000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	015a      	lsls	r2, r3, #5
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	4413      	add	r3, r2
 8017012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	68ba      	ldr	r2, [r7, #8]
 801701a:	0151      	lsls	r1, r2, #5
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	440a      	add	r2, r1
 8017020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801702a:	2300      	movs	r3, #0
}
 801702c:	4618      	mov	r0, r3
 801702e:	3714      	adds	r7, #20
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr

08017038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017038:	b480      	push	{r7}
 801703a:	b085      	sub	sp, #20
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	785b      	ldrb	r3, [r3, #1]
 8017050:	2b01      	cmp	r3, #1
 8017052:	d128      	bne.n	80170a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	015a      	lsls	r2, r3, #5
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	4413      	add	r3, r2
 801705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	68ba      	ldr	r2, [r7, #8]
 8017064:	0151      	lsls	r1, r2, #5
 8017066:	68fa      	ldr	r2, [r7, #12]
 8017068:	440a      	add	r2, r1
 801706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801706e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	791b      	ldrb	r3, [r3, #4]
 8017078:	2b03      	cmp	r3, #3
 801707a:	d003      	beq.n	8017084 <USB_EPClearStall+0x4c>
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	791b      	ldrb	r3, [r3, #4]
 8017080:	2b02      	cmp	r3, #2
 8017082:	d138      	bne.n	80170f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	015a      	lsls	r2, r3, #5
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	4413      	add	r3, r2
 801708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	68ba      	ldr	r2, [r7, #8]
 8017094:	0151      	lsls	r1, r2, #5
 8017096:	68fa      	ldr	r2, [r7, #12]
 8017098:	440a      	add	r2, r1
 801709a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801709e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170a2:	6013      	str	r3, [r2, #0]
 80170a4:	e027      	b.n	80170f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	015a      	lsls	r2, r3, #5
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	4413      	add	r3, r2
 80170ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	68ba      	ldr	r2, [r7, #8]
 80170b6:	0151      	lsls	r1, r2, #5
 80170b8:	68fa      	ldr	r2, [r7, #12]
 80170ba:	440a      	add	r2, r1
 80170bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80170c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80170c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	791b      	ldrb	r3, [r3, #4]
 80170ca:	2b03      	cmp	r3, #3
 80170cc:	d003      	beq.n	80170d6 <USB_EPClearStall+0x9e>
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	791b      	ldrb	r3, [r3, #4]
 80170d2:	2b02      	cmp	r3, #2
 80170d4:	d10f      	bne.n	80170f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	015a      	lsls	r2, r3, #5
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	4413      	add	r3, r2
 80170de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	68ba      	ldr	r2, [r7, #8]
 80170e6:	0151      	lsls	r1, r2, #5
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	440a      	add	r2, r1
 80170ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80170f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80170f6:	2300      	movs	r3, #0
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	3714      	adds	r7, #20
 80170fc:	46bd      	mov	sp, r7
 80170fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017102:	4770      	bx	lr

08017104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017104:	b480      	push	{r7}
 8017106:	b085      	sub	sp, #20
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	460b      	mov	r3, r1
 801710e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	68fa      	ldr	r2, [r7, #12]
 801711e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017122:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801712e:	681a      	ldr	r2, [r3, #0]
 8017130:	78fb      	ldrb	r3, [r7, #3]
 8017132:	011b      	lsls	r3, r3, #4
 8017134:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8017138:	68f9      	ldr	r1, [r7, #12]
 801713a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801713e:	4313      	orrs	r3, r2
 8017140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3714      	adds	r7, #20
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	68fa      	ldr	r2, [r7, #12]
 8017166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801716a:	f023 0303 	bic.w	r3, r3, #3
 801716e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801717e:	f023 0302 	bic.w	r3, r3, #2
 8017182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017184:	2300      	movs	r3, #0
}
 8017186:	4618      	mov	r0, r3
 8017188:	3714      	adds	r7, #20
 801718a:	46bd      	mov	sp, r7
 801718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017190:	4770      	bx	lr

08017192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017192:	b480      	push	{r7}
 8017194:	b085      	sub	sp, #20
 8017196:	af00      	add	r7, sp, #0
 8017198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	68fa      	ldr	r2, [r7, #12]
 80171a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80171ac:	f023 0303 	bic.w	r3, r3, #3
 80171b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	68fa      	ldr	r2, [r7, #12]
 80171bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80171c0:	f043 0302 	orr.w	r3, r3, #2
 80171c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80171c6:	2300      	movs	r3, #0
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3714      	adds	r7, #20
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80171d4:	b480      	push	{r7}
 80171d6:	b085      	sub	sp, #20
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	695b      	ldr	r3, [r3, #20]
 80171e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	699b      	ldr	r3, [r3, #24]
 80171e6:	68fa      	ldr	r2, [r7, #12]
 80171e8:	4013      	ands	r3, r2
 80171ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80171ec:	68fb      	ldr	r3, [r7, #12]
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	3714      	adds	r7, #20
 80171f2:	46bd      	mov	sp, r7
 80171f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f8:	4770      	bx	lr

080171fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80171fa:	b480      	push	{r7}
 80171fc:	b085      	sub	sp, #20
 80171fe:	af00      	add	r7, sp, #0
 8017200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801720c:	699b      	ldr	r3, [r3, #24]
 801720e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017216:	69db      	ldr	r3, [r3, #28]
 8017218:	68ba      	ldr	r2, [r7, #8]
 801721a:	4013      	ands	r3, r2
 801721c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	0c1b      	lsrs	r3, r3, #16
}
 8017222:	4618      	mov	r0, r3
 8017224:	3714      	adds	r7, #20
 8017226:	46bd      	mov	sp, r7
 8017228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722c:	4770      	bx	lr

0801722e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801722e:	b480      	push	{r7}
 8017230:	b085      	sub	sp, #20
 8017232:	af00      	add	r7, sp, #0
 8017234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017240:	699b      	ldr	r3, [r3, #24]
 8017242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801724a:	69db      	ldr	r3, [r3, #28]
 801724c:	68ba      	ldr	r2, [r7, #8]
 801724e:	4013      	ands	r3, r2
 8017250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	b29b      	uxth	r3, r3
}
 8017256:	4618      	mov	r0, r3
 8017258:	3714      	adds	r7, #20
 801725a:	46bd      	mov	sp, r7
 801725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017260:	4770      	bx	lr

08017262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017262:	b480      	push	{r7}
 8017264:	b085      	sub	sp, #20
 8017266:	af00      	add	r7, sp, #0
 8017268:	6078      	str	r0, [r7, #4]
 801726a:	460b      	mov	r3, r1
 801726c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017272:	78fb      	ldrb	r3, [r7, #3]
 8017274:	015a      	lsls	r2, r3, #5
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	4413      	add	r3, r2
 801727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801727e:	689b      	ldr	r3, [r3, #8]
 8017280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017288:	695b      	ldr	r3, [r3, #20]
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	4013      	ands	r3, r2
 801728e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017290:	68bb      	ldr	r3, [r7, #8]
}
 8017292:	4618      	mov	r0, r3
 8017294:	3714      	adds	r7, #20
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr

0801729e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801729e:	b480      	push	{r7}
 80172a0:	b087      	sub	sp, #28
 80172a2:	af00      	add	r7, sp, #0
 80172a4:	6078      	str	r0, [r7, #4]
 80172a6:	460b      	mov	r3, r1
 80172a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80172b4:	691b      	ldr	r3, [r3, #16]
 80172b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80172b8:	697b      	ldr	r3, [r7, #20]
 80172ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80172be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80172c2:	78fb      	ldrb	r3, [r7, #3]
 80172c4:	f003 030f 	and.w	r3, r3, #15
 80172c8:	68fa      	ldr	r2, [r7, #12]
 80172ca:	fa22 f303 	lsr.w	r3, r2, r3
 80172ce:	01db      	lsls	r3, r3, #7
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	693a      	ldr	r2, [r7, #16]
 80172d4:	4313      	orrs	r3, r2
 80172d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80172d8:	78fb      	ldrb	r3, [r7, #3]
 80172da:	015a      	lsls	r2, r3, #5
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	4413      	add	r3, r2
 80172e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172e4:	689b      	ldr	r3, [r3, #8]
 80172e6:	693a      	ldr	r2, [r7, #16]
 80172e8:	4013      	ands	r3, r2
 80172ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80172ec:	68bb      	ldr	r3, [r7, #8]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	371c      	adds	r7, #28
 80172f2:	46bd      	mov	sp, r7
 80172f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f8:	4770      	bx	lr

080172fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80172fa:	b480      	push	{r7}
 80172fc:	b083      	sub	sp, #12
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	695b      	ldr	r3, [r3, #20]
 8017306:	f003 0301 	and.w	r3, r3, #1
}
 801730a:	4618      	mov	r0, r3
 801730c:	370c      	adds	r7, #12
 801730e:	46bd      	mov	sp, r7
 8017310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017314:	4770      	bx	lr
	...

08017318 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8017318:	b480      	push	{r7}
 801731a:	b085      	sub	sp, #20
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017332:	4619      	mov	r1, r3
 8017334:	4b09      	ldr	r3, [pc, #36]	; (801735c <USB_ActivateSetup+0x44>)
 8017336:	4013      	ands	r3, r2
 8017338:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	68fa      	ldr	r2, [r7, #12]
 8017344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801734c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3714      	adds	r7, #20
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr
 801735c:	fffff800 	.word	0xfffff800

08017360 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8017360:	b480      	push	{r7}
 8017362:	b087      	sub	sp, #28
 8017364:	af00      	add	r7, sp, #0
 8017366:	60f8      	str	r0, [r7, #12]
 8017368:	460b      	mov	r3, r1
 801736a:	607a      	str	r2, [r7, #4]
 801736c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	333c      	adds	r3, #60	; 0x3c
 8017376:	3304      	adds	r3, #4
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	4a26      	ldr	r2, [pc, #152]	; (8017418 <USB_EP0_OutStart+0xb8>)
 8017380:	4293      	cmp	r3, r2
 8017382:	d90a      	bls.n	801739a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017394:	d101      	bne.n	801739a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8017396:	2300      	movs	r3, #0
 8017398:	e037      	b.n	801740a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173a0:	461a      	mov	r2, r3
 80173a2:	2300      	movs	r3, #0
 80173a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173ac:	691b      	ldr	r3, [r3, #16]
 80173ae:	697a      	ldr	r2, [r7, #20]
 80173b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80173b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80173b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80173ba:	697b      	ldr	r3, [r7, #20]
 80173bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173c0:	691b      	ldr	r3, [r3, #16]
 80173c2:	697a      	ldr	r2, [r7, #20]
 80173c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80173c8:	f043 0318 	orr.w	r3, r3, #24
 80173cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173d4:	691b      	ldr	r3, [r3, #16]
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80173dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80173e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80173e2:	7afb      	ldrb	r3, [r7, #11]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d10f      	bne.n	8017408 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80173e8:	697b      	ldr	r3, [r7, #20]
 80173ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173ee:	461a      	mov	r2, r3
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	697a      	ldr	r2, [r7, #20]
 80173fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017402:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8017406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017408:	2300      	movs	r3, #0
}
 801740a:	4618      	mov	r0, r3
 801740c:	371c      	adds	r7, #28
 801740e:	46bd      	mov	sp, r7
 8017410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop
 8017418:	4f54300a 	.word	0x4f54300a

0801741c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801741c:	b480      	push	{r7}
 801741e:	b085      	sub	sp, #20
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017424:	2300      	movs	r3, #0
 8017426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	3301      	adds	r3, #1
 801742c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	4a13      	ldr	r2, [pc, #76]	; (8017480 <USB_CoreReset+0x64>)
 8017432:	4293      	cmp	r3, r2
 8017434:	d901      	bls.n	801743a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8017436:	2303      	movs	r3, #3
 8017438:	e01b      	b.n	8017472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	691b      	ldr	r3, [r3, #16]
 801743e:	2b00      	cmp	r3, #0
 8017440:	daf2      	bge.n	8017428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017442:	2300      	movs	r3, #0
 8017444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	691b      	ldr	r3, [r3, #16]
 801744a:	f043 0201 	orr.w	r2, r3, #1
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	3301      	adds	r3, #1
 8017456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	4a09      	ldr	r2, [pc, #36]	; (8017480 <USB_CoreReset+0x64>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d901      	bls.n	8017464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017460:	2303      	movs	r3, #3
 8017462:	e006      	b.n	8017472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	691b      	ldr	r3, [r3, #16]
 8017468:	f003 0301 	and.w	r3, r3, #1
 801746c:	2b01      	cmp	r3, #1
 801746e:	d0f0      	beq.n	8017452 <USB_CoreReset+0x36>

  return HAL_OK;
 8017470:	2300      	movs	r3, #0
}
 8017472:	4618      	mov	r0, r3
 8017474:	3714      	adds	r7, #20
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr
 801747e:	bf00      	nop
 8017480:	00030d40 	.word	0x00030d40

08017484 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b086      	sub	sp, #24
 8017488:	af02      	add	r7, sp, #8
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	460b      	mov	r3, r1
 801748e:	807b      	strh	r3, [r7, #2]
#if DUALCOREFUZZ == 0

  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8017490:	4b12      	ldr	r3, [pc, #72]	; (80174dc <HAL_UARTEx_RxEventCallback+0x58>)
 8017492:	60fb      	str	r3, [r7, #12]
#endif

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017494:	2300      	movs	r3, #0
 8017496:	60bb      	str	r3, [r7, #8]

	if(huart==&huart4)
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	4a11      	ldr	r2, [pc, #68]	; (80174e0 <HAL_UARTEx_RxEventCallback+0x5c>)
 801749c:	4293      	cmp	r3, r2
 801749e:	d111      	bne.n	80174c4 <HAL_UARTEx_RxEventCallback+0x40>
	{
		modbusRxCount = Size;  //MODBUS_MAX_FRAME_SIZE - DMA1_Channel5->CNDTR;
 80174a0:	4a10      	ldr	r2, [pc, #64]	; (80174e4 <HAL_UARTEx_RxEventCallback+0x60>)
 80174a2:	887b      	ldrh	r3, [r7, #2]
 80174a4:	8013      	strh	r3, [r2, #0]
		//xSemaphoreGiveFromISR(xFrameReadySemaphore, NULL);
		//notify the fuzzer that data has arrived to through USART
		xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80174ac:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 80174b0:	f107 0308 	add.w	r3, r7, #8
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	2300      	movs	r3, #0
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	2303      	movs	r3, #3
 80174bc:	2201      	movs	r2, #1
 80174be:	2102      	movs	r1, #2
 80174c0:	f7ed f846 	bl	8004550 <xTaskGenericNotifyFromISR>
		//portYIELD_FROM_ISR( xHigherPriorityTaskWoken );

		//xTaskNotifyFromISR(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite, &xHigherPriorityTaskWoken); //notify that data arrived
	}

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d003      	beq.n	80174d2 <HAL_UARTEx_RxEventCallback+0x4e>
 80174ca:	4b07      	ldr	r3, [pc, #28]	; (80174e8 <HAL_UARTEx_RxEventCallback+0x64>)
 80174cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174d0:	601a      	str	r2, [r3, #0]

}
 80174d2:	bf00      	nop
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	24020000 	.word	0x24020000
 80174e0:	240116e4 	.word	0x240116e4
 80174e4:	24033500 	.word	0x24033500
 80174e8:	e000ed04 	.word	0xe000ed04

080174ec <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b086      	sub	sp, #24
 80174f0:	af02      	add	r7, sp, #8
 80174f2:	6078      	str	r0, [r7, #4]
#if DUALCOREFUZZ == 0

  Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 80174f4:	4b18      	ldr	r3, [pc, #96]	; (8017558 <HAL_UART_TxCpltCallback+0x6c>)
 80174f6:	60fb      	str	r3, [r7, #12]
#endif

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80174f8:	2300      	movs	r3, #0
 80174fa:	60bb      	str	r3, [r7, #8]


  if(huart==&huart4)
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	4a17      	ldr	r2, [pc, #92]	; (801755c <HAL_UART_TxCpltCallback+0x70>)
 8017500:	4293      	cmp	r3, r2
 8017502:	d11e      	bne.n	8017542 <HAL_UART_TxCpltCallback+0x56>
  {

	  while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 8017504:	e002      	b.n	801750c <HAL_UART_TxCpltCallback+0x20>
	 	   {
	 	  					HAL_UART_DMAStop(&huart4);
 8017506:	4815      	ldr	r0, [pc, #84]	; (801755c <HAL_UART_TxCpltCallback+0x70>)
 8017508:	f7fc fab6 	bl	8013a78 <HAL_UART_DMAStop>
	  while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 801750c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017510:	4913      	ldr	r1, [pc, #76]	; (8017560 <HAL_UART_TxCpltCallback+0x74>)
 8017512:	4812      	ldr	r0, [pc, #72]	; (801755c <HAL_UART_TxCpltCallback+0x70>)
 8017514:	f7fe faaa 	bl	8015a6c <HAL_UARTEx_ReceiveToIdle_DMA>
 8017518:	4603      	mov	r3, r0
 801751a:	2b00      	cmp	r3, #0
 801751c:	d1f3      	bne.n	8017506 <HAL_UART_TxCpltCallback+0x1a>
	 	    }
	    modbusRxCount = 0;
 801751e:	4b11      	ldr	r3, [pc, #68]	; (8017564 <HAL_UART_TxCpltCallback+0x78>)
 8017520:	2200      	movs	r2, #0
 8017522:	801a      	strh	r2, [r3, #0]
	    xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801752a:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 801752e:	f107 0308 	add.w	r3, r7, #8
 8017532:	9301      	str	r3, [sp, #4]
 8017534:	2300      	movs	r3, #0
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	2303      	movs	r3, #3
 801753a:	2208      	movs	r2, #8
 801753c:	2100      	movs	r1, #0
 801753e:	f7ed f807 	bl	8004550 <xTaskGenericNotifyFromISR>
	    //notify that the test finished

  }

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d003      	beq.n	8017550 <HAL_UART_TxCpltCallback+0x64>
 8017548:	4b07      	ldr	r3, [pc, #28]	; (8017568 <HAL_UART_TxCpltCallback+0x7c>)
 801754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801754e:	601a      	str	r2, [r3, #0]

}
 8017550:	bf00      	nop
 8017552:	3710      	adds	r7, #16
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	24020000 	.word	0x24020000
 801755c:	240116e4 	.word	0x240116e4
 8017560:	24033300 	.word	0x24033300
 8017564:	24033500 	.word	0x24033500
 8017568:	e000ed04 	.word	0xe000ed04

0801756c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]

	 if(huart==&huart4)
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	4a0e      	ldr	r2, [pc, #56]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 8017578:	4293      	cmp	r3, r2
 801757a:	d115      	bne.n	80175a8 <HAL_UART_ErrorCallback+0x3c>
	 {
	   HAL_UART_DMAStop(&huart4);
 801757c:	480c      	ldr	r0, [pc, #48]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 801757e:	f7fc fa7b 	bl	8013a78 <HAL_UART_DMAStop>
	   while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 8017582:	e008      	b.n	8017596 <HAL_UART_ErrorCallback+0x2a>
	   {
	  	   HAL_UART_Abort(&huart4);
 8017584:	480a      	ldr	r0, [pc, #40]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 8017586:	f7fc fb0b 	bl	8013ba0 <HAL_UART_Abort>
	  	   HAL_UART_DeInit(&huart4);
 801758a:	4809      	ldr	r0, [pc, #36]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 801758c:	f7fc f9a2 	bl	80138d4 <HAL_UART_DeInit>
	  	   HAL_UART_Init(&huart4);
 8017590:	4807      	ldr	r0, [pc, #28]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 8017592:	f7fc f94f 	bl	8013834 <HAL_UART_Init>
	   while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 8017596:	f44f 7280 	mov.w	r2, #256	; 0x100
 801759a:	4906      	ldr	r1, [pc, #24]	; (80175b4 <HAL_UART_ErrorCallback+0x48>)
 801759c:	4804      	ldr	r0, [pc, #16]	; (80175b0 <HAL_UART_ErrorCallback+0x44>)
 801759e:	f7fe fa65 	bl	8015a6c <HAL_UARTEx_ReceiveToIdle_DMA>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1ed      	bne.n	8017584 <HAL_UART_ErrorCallback+0x18>

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );

*/

}
 80175a8:	bf00      	nop
 80175aa:	3708      	adds	r7, #8
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}
 80175b0:	240116e4 	.word	0x240116e4
 80175b4:	24033300 	.word	0x24033300

080175b8 <modbusSlaveHandler>:
    memcpy(&modbusMemory[address], value, len);
}


void modbusSlaveHandler()
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	af00      	add	r7, sp, #0


       //ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait for data coming from USART


       if(!modbusSlaveCheckFrameSize())
 80175bc:	f7f2 fc5a 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175c0:	f000 f8c0 	bl	8017744 <modbusSlaveCheckFrameSize>
 80175c4:	4603      	mov	r3, r0
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d104      	bne.n	80175d4 <modbusSlaveHandler+0x1c>
       {
           modbusSlaveStartReceiving();
 80175ca:	f7f2 fc53 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175ce:	f000 f893 	bl	80176f8 <modbusSlaveStartReceiving>
           //continue;
           return;
 80175d2:	e01d      	b.n	8017610 <modbusSlaveHandler+0x58>
       }
       if(!modbusSlaveCheckID())
 80175d4:	f7f2 fc4e 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175d8:	f000 f8e2 	bl	80177a0 <modbusSlaveCheckID>
 80175dc:	4603      	mov	r3, r0
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d104      	bne.n	80175ec <modbusSlaveHandler+0x34>
       {
           modbusSlaveStartReceiving();
 80175e2:	f7f2 fc47 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175e6:	f000 f887 	bl	80176f8 <modbusSlaveStartReceiving>
           //continue;
           return;
 80175ea:	e011      	b.n	8017610 <modbusSlaveHandler+0x58>
       }
       if(!modbusSlaveCheckCRC())
 80175ec:	f7f2 fc42 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175f0:	f000 f906 	bl	8017800 <modbusSlaveCheckCRC>
 80175f4:	4603      	mov	r3, r0
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d104      	bne.n	8017604 <modbusSlaveHandler+0x4c>
       {
           modbusSlaveStartReceiving();
 80175fa:	f7f2 fc3b 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80175fe:	f000 f87b 	bl	80176f8 <modbusSlaveStartReceiving>
           //continue;
           return;
 8017602:	e005      	b.n	8017610 <modbusSlaveHandler+0x58>
       }
       //uint16_t answerLen =
       modbusSlaveParseFrame();
 8017604:	f7f2 fc36 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017608:	f000 f9e6 	bl	80179d8 <modbusSlaveParseFrame>
       modbusSlaveStartReceiving();
 801760c:	f000 f874 	bl	80176f8 <modbusSlaveStartReceiving>
 8017610:	f7f2 fc30 	bl	8009e74 <__sanitizer_cov_trace_pc>

       //modbusSlaveStartTransmitting(answerLen);
    //}
}
 8017614:	bd80      	pop	{r7, pc}

08017616 <SytemCall_1_code>:




void SytemCall_1_code()
{
 8017616:	b580      	push	{r7, lr}
 8017618:	af00      	add	r7, sp, #0
	modbusSlaveHardwareInit();
 801761a:	f7f2 fc2b 	bl	8009e74 <__sanitizer_cov_trace_pc>
 801761e:	f000 f803 	bl	8017628 <modbusSlaveHardwareInit>
}
 8017622:	bf00      	nop
 8017624:	bd80      	pop	{r7, pc}
	...

08017628 <modbusSlaveHardwareInit>:

uint8_t modbusSlaveHardwareInit(void)
{
 8017628:	b590      	push	{r4, r7, lr}
 801762a:	b083      	sub	sp, #12
 801762c:	af00      	add	r7, sp, #0

	uint8_t status = 0;
 801762e:	f7f2 fc21 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017632:	2300      	movs	r3, #0
 8017634:	71fb      	strb	r3, [r7, #7]
	modbusRxCount = 0;
 8017636:	4b20      	ldr	r3, [pc, #128]	; (80176b8 <modbusSlaveHardwareInit+0x90>)
 8017638:	4619      	mov	r1, r3
 801763a:	08cb      	lsrs	r3, r1, #3
 801763c:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017640:	f993 3000 	ldrsb.w	r3, [r3]
 8017644:	2b00      	cmp	r3, #0
 8017646:	bf14      	ite	ne
 8017648:	2201      	movne	r2, #1
 801764a:	2200      	moveq	r2, #0
 801764c:	b2d2      	uxtb	r2, r2
 801764e:	2b01      	cmp	r3, #1
 8017650:	bfd4      	ite	le
 8017652:	2301      	movle	r3, #1
 8017654:	2300      	movgt	r3, #0
 8017656:	b2db      	uxtb	r3, r3
 8017658:	4013      	ands	r3, r2
 801765a:	b2db      	uxtb	r3, r3
 801765c:	2b00      	cmp	r3, #0
 801765e:	d002      	beq.n	8017666 <modbusSlaveHardwareInit+0x3e>
 8017660:	4608      	mov	r0, r1
 8017662:	f7f1 fe4f 	bl	8009304 <__asan_report_store2>
 8017666:	4b14      	ldr	r3, [pc, #80]	; (80176b8 <modbusSlaveHardwareInit+0x90>)
 8017668:	2200      	movs	r2, #0
 801766a:	801a      	strh	r2, [r3, #0]

	HAL_UART_Abort(&huart4);
 801766c:	4813      	ldr	r0, [pc, #76]	; (80176bc <modbusSlaveHardwareInit+0x94>)
 801766e:	f7fc fa97 	bl	8013ba0 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart4);
 8017672:	4812      	ldr	r0, [pc, #72]	; (80176bc <modbusSlaveHardwareInit+0x94>)
 8017674:	f7fc f92e 	bl	80138d4 <HAL_UART_DeInit>
	HAL_UART_Init(&huart4);
 8017678:	4810      	ldr	r0, [pc, #64]	; (80176bc <modbusSlaveHardwareInit+0x94>)
 801767a:	f7fc f8db 	bl	8013834 <HAL_UART_Init>


	while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 801767e:	e004      	b.n	801768a <modbusSlaveHardwareInit+0x62>
	{
		  HAL_UART_DMAStop(&huart4);
 8017680:	f7f2 fbf8 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017684:	480d      	ldr	r0, [pc, #52]	; (80176bc <modbusSlaveHardwareInit+0x94>)
 8017686:	f7fc f9f7 	bl	8013a78 <HAL_UART_DMAStop>
	while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 801768a:	f7f2 fbf3 	bl	8009e74 <__sanitizer_cov_trace_pc>
 801768e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017692:	490b      	ldr	r1, [pc, #44]	; (80176c0 <modbusSlaveHardwareInit+0x98>)
 8017694:	4809      	ldr	r0, [pc, #36]	; (80176bc <modbusSlaveHardwareInit+0x94>)
 8017696:	f7fe f9e9 	bl	8015a6c <HAL_UARTEx_ReceiveToIdle_DMA>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d1ef      	bne.n	8017680 <modbusSlaveHardwareInit+0x58>
	}

    status = 1;
 80176a0:	f7f2 fbe8 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80176a4:	2301      	movs	r3, #1
 80176a6:	71fb      	strb	r3, [r7, #7]
    return status;
 80176a8:	79fc      	ldrb	r4, [r7, #7]
 80176aa:	f7f2 fbe3 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80176ae:	4623      	mov	r3, r4
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	370c      	adds	r7, #12
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bd90      	pop	{r4, r7, pc}
 80176b8:	24033500 	.word	0x24033500
 80176bc:	240116e4 	.word	0x240116e4
 80176c0:	24033300 	.word	0x24033300

080176c4 <SytemCall_2_code>:


void SytemCall_2_code()
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	af00      	add	r7, sp, #0
	while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 80176c8:	e004      	b.n	80176d4 <SytemCall_2_code+0x10>
	{
	 					HAL_UART_DMAStop(&huart4);
 80176ca:	f7f2 fbd3 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80176ce:	4808      	ldr	r0, [pc, #32]	; (80176f0 <SytemCall_2_code+0x2c>)
 80176d0:	f7fc f9d2 	bl	8013a78 <HAL_UART_DMAStop>
	while(HAL_UARTEx_ReceiveToIdle_DMA(&huart4, modbusRxTxBuffer, MODBUS_MAX_FRAME_SIZE) != HAL_OK)
 80176d4:	f7f2 fbce 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80176d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80176dc:	4905      	ldr	r1, [pc, #20]	; (80176f4 <SytemCall_2_code+0x30>)
 80176de:	4804      	ldr	r0, [pc, #16]	; (80176f0 <SytemCall_2_code+0x2c>)
 80176e0:	f7fe f9c4 	bl	8015a6c <HAL_UARTEx_ReceiveToIdle_DMA>
 80176e4:	4603      	mov	r3, r0
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d1ef      	bne.n	80176ca <SytemCall_2_code+0x6>
	}
}
 80176ea:	f7f2 fbc3 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	240116e4 	.word	0x240116e4
 80176f4:	24033300 	.word	0x24033300

080176f8 <modbusSlaveStartReceiving>:




void modbusSlaveStartReceiving(void)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	af00      	add	r7, sp, #0
     DMA1_Channel5->CCR |= DMA_CCR_EN;
     MODBUS_SLAVE_USART->CR1 |= USART_CR1_RTOIE;
     */


     SytemCall_2(); // configures serial por to recive data
 80176fc:	f7f2 fbba 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017700:	f7f0 fc8d 	bl	800801e <MPU_SytemCall_2>

     modbusRxCount = 0;
 8017704:	4b0e      	ldr	r3, [pc, #56]	; (8017740 <modbusSlaveStartReceiving+0x48>)
 8017706:	4619      	mov	r1, r3
 8017708:	08cb      	lsrs	r3, r1, #3
 801770a:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801770e:	f993 3000 	ldrsb.w	r3, [r3]
 8017712:	2b00      	cmp	r3, #0
 8017714:	bf14      	ite	ne
 8017716:	2201      	movne	r2, #1
 8017718:	2200      	moveq	r2, #0
 801771a:	b2d2      	uxtb	r2, r2
 801771c:	2b01      	cmp	r3, #1
 801771e:	bfd4      	ite	le
 8017720:	2301      	movle	r3, #1
 8017722:	2300      	movgt	r3, #0
 8017724:	b2db      	uxtb	r3, r3
 8017726:	4013      	ands	r3, r2
 8017728:	b2db      	uxtb	r3, r3
 801772a:	2b00      	cmp	r3, #0
 801772c:	d002      	beq.n	8017734 <modbusSlaveStartReceiving+0x3c>
 801772e:	4608      	mov	r0, r1
 8017730:	f7f1 fde8 	bl	8009304 <__asan_report_store2>
 8017734:	4b02      	ldr	r3, [pc, #8]	; (8017740 <modbusSlaveStartReceiving+0x48>)
 8017736:	2200      	movs	r2, #0
 8017738:	801a      	strh	r2, [r3, #0]


}
 801773a:	bf00      	nop
 801773c:	bd80      	pop	{r7, pc}
 801773e:	bf00      	nop
 8017740:	24033500 	.word	0x24033500

08017744 <modbusSlaveCheckFrameSize>:
    */
	HAL_UART_Transmit_DMA(&huart4, modbusRxTxBuffer, bytesNum);
}

uint8_t modbusSlaveCheckFrameSize(void)
{
 8017744:	b598      	push	{r3, r4, r7, lr}
 8017746:	af00      	add	r7, sp, #0
    if(modbusRxCount > MODBUS_MIN_FRAME_SIZE)
 8017748:	f7f2 fb94 	bl	8009e74 <__sanitizer_cov_trace_pc>
 801774c:	4b13      	ldr	r3, [pc, #76]	; (801779c <modbusSlaveCheckFrameSize+0x58>)
 801774e:	4619      	mov	r1, r3
 8017750:	08cb      	lsrs	r3, r1, #3
 8017752:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017756:	f993 3000 	ldrsb.w	r3, [r3]
 801775a:	2b00      	cmp	r3, #0
 801775c:	bf14      	ite	ne
 801775e:	2201      	movne	r2, #1
 8017760:	2200      	moveq	r2, #0
 8017762:	b2d2      	uxtb	r2, r2
 8017764:	2b01      	cmp	r3, #1
 8017766:	bfd4      	ite	le
 8017768:	2301      	movle	r3, #1
 801776a:	2300      	movgt	r3, #0
 801776c:	b2db      	uxtb	r3, r3
 801776e:	4013      	ands	r3, r2
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d002      	beq.n	801777c <modbusSlaveCheckFrameSize+0x38>
 8017776:	4608      	mov	r0, r1
 8017778:	f7f1 fddc 	bl	8009334 <__asan_report_load2>
 801777c:	4b07      	ldr	r3, [pc, #28]	; (801779c <modbusSlaveCheckFrameSize+0x58>)
 801777e:	881b      	ldrh	r3, [r3, #0]
 8017780:	2b05      	cmp	r3, #5
 8017782:	d903      	bls.n	801778c <modbusSlaveCheckFrameSize+0x48>
        return 1;
 8017784:	f7f2 fb76 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017788:	2401      	movs	r4, #1
 801778a:	e002      	b.n	8017792 <modbusSlaveCheckFrameSize+0x4e>
    return 0;
 801778c:	f7f2 fb72 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017790:	2400      	movs	r4, #0
 8017792:	f7f2 fb6f 	bl	8009e74 <__sanitizer_cov_trace_pc>
}
 8017796:	4623      	mov	r3, r4
 8017798:	4618      	mov	r0, r3
 801779a:	bd98      	pop	{r3, r4, r7, pc}
 801779c:	24033500 	.word	0x24033500

080177a0 <modbusSlaveCheckID>:

uint8_t modbusSlaveCheckID(void)
{
 80177a0:	b598      	push	{r3, r4, r7, lr}
 80177a2:	af00      	add	r7, sp, #0
    if(modbusRxTxBuffer[0] == MODBUS_SLAVE_ADDRESS)
 80177a4:	f7f2 fb66 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80177a8:	4b14      	ldr	r3, [pc, #80]	; (80177fc <modbusSlaveCheckID+0x5c>)
 80177aa:	08da      	lsrs	r2, r3, #3
 80177ac:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80177b0:	f992 2000 	ldrsb.w	r2, [r2]
 80177b4:	2a00      	cmp	r2, #0
 80177b6:	bf14      	ite	ne
 80177b8:	2101      	movne	r1, #1
 80177ba:	2100      	moveq	r1, #0
 80177bc:	b2c9      	uxtb	r1, r1
 80177be:	f003 0007 	and.w	r0, r3, #7
 80177c2:	b240      	sxtb	r0, r0
 80177c4:	4290      	cmp	r0, r2
 80177c6:	bfac      	ite	ge
 80177c8:	2201      	movge	r2, #1
 80177ca:	2200      	movlt	r2, #0
 80177cc:	b2d2      	uxtb	r2, r2
 80177ce:	400a      	ands	r2, r1
 80177d0:	b2d2      	uxtb	r2, r2
 80177d2:	2a00      	cmp	r2, #0
 80177d4:	d002      	beq.n	80177dc <modbusSlaveCheckID+0x3c>
 80177d6:	4618      	mov	r0, r3
 80177d8:	f7f1 fda0 	bl	800931c <__asan_report_load1>
 80177dc:	4b07      	ldr	r3, [pc, #28]	; (80177fc <modbusSlaveCheckID+0x5c>)
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d103      	bne.n	80177ec <modbusSlaveCheckID+0x4c>
        return 1;
 80177e4:	f7f2 fb46 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80177e8:	2401      	movs	r4, #1
 80177ea:	e002      	b.n	80177f2 <modbusSlaveCheckID+0x52>
    return 0;
 80177ec:	f7f2 fb42 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80177f0:	2400      	movs	r4, #0
 80177f2:	f7f2 fb3f 	bl	8009e74 <__sanitizer_cov_trace_pc>
}
 80177f6:	4623      	mov	r3, r4
 80177f8:	4618      	mov	r0, r3
 80177fa:	bd98      	pop	{r3, r4, r7, pc}
 80177fc:	24033300 	.word	0x24033300

08017800 <modbusSlaveCheckCRC>:

uint8_t modbusSlaveCheckCRC(void)
{
 8017800:	b5b0      	push	{r4, r5, r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
    uint16_t recievedCRC = modbusRxTxBuffer[modbusRxCount - 1] << 8 | modbusRxTxBuffer[modbusRxCount - 2];
 8017806:	f7f2 fb35 	bl	8009e74 <__sanitizer_cov_trace_pc>
 801780a:	4b3d      	ldr	r3, [pc, #244]	; (8017900 <modbusSlaveCheckCRC+0x100>)
 801780c:	4619      	mov	r1, r3
 801780e:	08cb      	lsrs	r3, r1, #3
 8017810:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017814:	f993 3000 	ldrsb.w	r3, [r3]
 8017818:	2b00      	cmp	r3, #0
 801781a:	bf14      	ite	ne
 801781c:	2201      	movne	r2, #1
 801781e:	2200      	moveq	r2, #0
 8017820:	b2d2      	uxtb	r2, r2
 8017822:	2b01      	cmp	r3, #1
 8017824:	bfd4      	ite	le
 8017826:	2301      	movle	r3, #1
 8017828:	2300      	movgt	r3, #0
 801782a:	b2db      	uxtb	r3, r3
 801782c:	4013      	ands	r3, r2
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b00      	cmp	r3, #0
 8017832:	d002      	beq.n	801783a <modbusSlaveCheckCRC+0x3a>
 8017834:	4608      	mov	r0, r1
 8017836:	f7f1 fd7d 	bl	8009334 <__asan_report_load2>
 801783a:	4b31      	ldr	r3, [pc, #196]	; (8017900 <modbusSlaveCheckCRC+0x100>)
 801783c:	881b      	ldrh	r3, [r3, #0]
 801783e:	1e5a      	subs	r2, r3, #1
 8017840:	4b30      	ldr	r3, [pc, #192]	; (8017904 <modbusSlaveCheckCRC+0x104>)
 8017842:	4413      	add	r3, r2
 8017844:	08d9      	lsrs	r1, r3, #3
 8017846:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801784a:	f991 1000 	ldrsb.w	r1, [r1]
 801784e:	2900      	cmp	r1, #0
 8017850:	bf14      	ite	ne
 8017852:	2001      	movne	r0, #1
 8017854:	2000      	moveq	r0, #0
 8017856:	b2c0      	uxtb	r0, r0
 8017858:	f003 0407 	and.w	r4, r3, #7
 801785c:	b264      	sxtb	r4, r4
 801785e:	428c      	cmp	r4, r1
 8017860:	bfac      	ite	ge
 8017862:	2101      	movge	r1, #1
 8017864:	2100      	movlt	r1, #0
 8017866:	b2c9      	uxtb	r1, r1
 8017868:	4001      	ands	r1, r0
 801786a:	b2c9      	uxtb	r1, r1
 801786c:	2900      	cmp	r1, #0
 801786e:	d002      	beq.n	8017876 <modbusSlaveCheckCRC+0x76>
 8017870:	4618      	mov	r0, r3
 8017872:	f7f1 fd53 	bl	800931c <__asan_report_load1>
 8017876:	4b23      	ldr	r3, [pc, #140]	; (8017904 <modbusSlaveCheckCRC+0x104>)
 8017878:	5c9b      	ldrb	r3, [r3, r2]
 801787a:	021b      	lsls	r3, r3, #8
 801787c:	b218      	sxth	r0, r3
 801787e:	4b20      	ldr	r3, [pc, #128]	; (8017900 <modbusSlaveCheckCRC+0x100>)
 8017880:	881b      	ldrh	r3, [r3, #0]
 8017882:	1e9a      	subs	r2, r3, #2
 8017884:	4b1f      	ldr	r3, [pc, #124]	; (8017904 <modbusSlaveCheckCRC+0x104>)
 8017886:	4413      	add	r3, r2
 8017888:	08d9      	lsrs	r1, r3, #3
 801788a:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801788e:	f991 1000 	ldrsb.w	r1, [r1]
 8017892:	2900      	cmp	r1, #0
 8017894:	bf14      	ite	ne
 8017896:	2401      	movne	r4, #1
 8017898:	2400      	moveq	r4, #0
 801789a:	b2e4      	uxtb	r4, r4
 801789c:	f003 0507 	and.w	r5, r3, #7
 80178a0:	b26d      	sxtb	r5, r5
 80178a2:	428d      	cmp	r5, r1
 80178a4:	bfac      	ite	ge
 80178a6:	2101      	movge	r1, #1
 80178a8:	2100      	movlt	r1, #0
 80178aa:	b2c9      	uxtb	r1, r1
 80178ac:	4021      	ands	r1, r4
 80178ae:	b2c9      	uxtb	r1, r1
 80178b0:	2900      	cmp	r1, #0
 80178b2:	d002      	beq.n	80178ba <modbusSlaveCheckCRC+0xba>
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7f1 fd31 	bl	800931c <__asan_report_load1>
 80178ba:	4b12      	ldr	r3, [pc, #72]	; (8017904 <modbusSlaveCheckCRC+0x104>)
 80178bc:	5c9b      	ldrb	r3, [r3, r2]
 80178be:	b21b      	sxth	r3, r3
 80178c0:	4303      	orrs	r3, r0
 80178c2:	b21b      	sxth	r3, r3
 80178c4:	80bb      	strh	r3, [r7, #4]
    uint16_t calculatedCRC = modbusSlaveGetCRC(modbusRxTxBuffer, modbusRxCount - 2);
 80178c6:	4b0e      	ldr	r3, [pc, #56]	; (8017900 <modbusSlaveCheckCRC+0x100>)
 80178c8:	881b      	ldrh	r3, [r3, #0]
 80178ca:	3b02      	subs	r3, #2
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	4619      	mov	r1, r3
 80178d0:	480c      	ldr	r0, [pc, #48]	; (8017904 <modbusSlaveCheckCRC+0x104>)
 80178d2:	f000 f819 	bl	8017908 <modbusSlaveGetCRC>
 80178d6:	4603      	mov	r3, r0
 80178d8:	80fb      	strh	r3, [r7, #6]
    if(recievedCRC == calculatedCRC)
 80178da:	88ba      	ldrh	r2, [r7, #4]
 80178dc:	88fb      	ldrh	r3, [r7, #6]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d103      	bne.n	80178ea <modbusSlaveCheckCRC+0xea>
        return 1;
 80178e2:	f7f2 fac7 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80178e6:	2401      	movs	r4, #1
 80178e8:	e002      	b.n	80178f0 <modbusSlaveCheckCRC+0xf0>
    return 1;
 80178ea:	f7f2 fac3 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80178ee:	2401      	movs	r4, #1
 80178f0:	f7f2 fac0 	bl	8009e74 <__sanitizer_cov_trace_pc>
}
 80178f4:	4623      	mov	r3, r4
 80178f6:	4618      	mov	r0, r3
 80178f8:	3708      	adds	r7, #8
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bdb0      	pop	{r4, r5, r7, pc}
 80178fe:	bf00      	nop
 8017900:	24033500 	.word	0x24033500
 8017904:	24033300 	.word	0x24033300

08017908 <modbusSlaveGetCRC>:

uint16_t modbusSlaveGetCRC(uint8_t * buffer, uint16_t len)
{
 8017908:	b590      	push	{r4, r7, lr}
 801790a:	b085      	sub	sp, #20
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	460b      	mov	r3, r1
 8017912:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8017914:	f7f2 faae 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801791c:	81fb      	strh	r3, [r7, #14]
			}
			else
				crc >>= 1;
		}
	}*/
	return crc;
 801791e:	89fc      	ldrh	r4, [r7, #14]
 8017920:	f7f2 faa8 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017924:	4623      	mov	r3, r4
}
 8017926:	4618      	mov	r0, r3
 8017928:	3714      	adds	r7, #20
 801792a:	46bd      	mov	sp, r7
 801792c:	bd90      	pop	{r4, r7, pc}
	...

08017930 <modbusSlaveErrorSet>:

uint16_t modbusSlaveErrorSet(uint8_t error)
{
 8017930:	b590      	push	{r4, r7, lr}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	4603      	mov	r3, r0
 8017938:	71fb      	strb	r3, [r7, #7]
    modbusRxTxBuffer[1] |= 0x80;
 801793a:	f7f2 fa9b 	bl	8009e74 <__sanitizer_cov_trace_pc>
 801793e:	4b23      	ldr	r3, [pc, #140]	; (80179cc <modbusSlaveErrorSet+0x9c>)
 8017940:	08da      	lsrs	r2, r3, #3
 8017942:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017946:	f992 2000 	ldrsb.w	r2, [r2]
 801794a:	2a00      	cmp	r2, #0
 801794c:	bf14      	ite	ne
 801794e:	2101      	movne	r1, #1
 8017950:	2100      	moveq	r1, #0
 8017952:	b2c9      	uxtb	r1, r1
 8017954:	f003 0007 	and.w	r0, r3, #7
 8017958:	b240      	sxtb	r0, r0
 801795a:	4290      	cmp	r0, r2
 801795c:	bfac      	ite	ge
 801795e:	2201      	movge	r2, #1
 8017960:	2200      	movlt	r2, #0
 8017962:	b2d2      	uxtb	r2, r2
 8017964:	400a      	ands	r2, r1
 8017966:	b2d2      	uxtb	r2, r2
 8017968:	2a00      	cmp	r2, #0
 801796a:	d002      	beq.n	8017972 <modbusSlaveErrorSet+0x42>
 801796c:	4618      	mov	r0, r3
 801796e:	f7f1 fcd5 	bl	800931c <__asan_report_load1>
 8017972:	4b17      	ldr	r3, [pc, #92]	; (80179d0 <modbusSlaveErrorSet+0xa0>)
 8017974:	785b      	ldrb	r3, [r3, #1]
 8017976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801797a:	b2da      	uxtb	r2, r3
 801797c:	4b14      	ldr	r3, [pc, #80]	; (80179d0 <modbusSlaveErrorSet+0xa0>)
 801797e:	705a      	strb	r2, [r3, #1]
    modbusRxTxBuffer[2] = error;
 8017980:	4b14      	ldr	r3, [pc, #80]	; (80179d4 <modbusSlaveErrorSet+0xa4>)
 8017982:	08da      	lsrs	r2, r3, #3
 8017984:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017988:	f992 2000 	ldrsb.w	r2, [r2]
 801798c:	2a00      	cmp	r2, #0
 801798e:	bf14      	ite	ne
 8017990:	2101      	movne	r1, #1
 8017992:	2100      	moveq	r1, #0
 8017994:	b2c9      	uxtb	r1, r1
 8017996:	f003 0007 	and.w	r0, r3, #7
 801799a:	b240      	sxtb	r0, r0
 801799c:	4290      	cmp	r0, r2
 801799e:	bfac      	ite	ge
 80179a0:	2201      	movge	r2, #1
 80179a2:	2200      	movlt	r2, #0
 80179a4:	b2d2      	uxtb	r2, r2
 80179a6:	400a      	ands	r2, r1
 80179a8:	b2d2      	uxtb	r2, r2
 80179aa:	2a00      	cmp	r2, #0
 80179ac:	d002      	beq.n	80179b4 <modbusSlaveErrorSet+0x84>
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7f1 fc9c 	bl	80092ec <__asan_report_store1>
 80179b4:	4a06      	ldr	r2, [pc, #24]	; (80179d0 <modbusSlaveErrorSet+0xa0>)
 80179b6:	79fb      	ldrb	r3, [r7, #7]
 80179b8:	7093      	strb	r3, [r2, #2]
    return MODBUS_MIN_FRAME_SIZE;
 80179ba:	2405      	movs	r4, #5
 80179bc:	f7f2 fa5a 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80179c0:	4623      	mov	r3, r4
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	370c      	adds	r7, #12
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd90      	pop	{r4, r7, pc}
 80179ca:	bf00      	nop
 80179cc:	24033301 	.word	0x24033301
 80179d0:	24033300 	.word	0x24033300
 80179d4:	24033302 	.word	0x24033302

080179d8 <modbusSlaveParseFrame>:

uint16_t modbusSlaveParseFrame(void)
{
 80179d8:	b5b0      	push	{r4, r5, r7, lr}
 80179da:	b086      	sub	sp, #24
 80179dc:	af00      	add	r7, sp, #0
    uint8_t command = modbusRxTxBuffer[1];
 80179de:	f7f2 fa49 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80179e2:	4ba2      	ldr	r3, [pc, #648]	; (8017c6c <modbusSlaveParseFrame+0x294>)
 80179e4:	08da      	lsrs	r2, r3, #3
 80179e6:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 80179ea:	f992 2000 	ldrsb.w	r2, [r2]
 80179ee:	2a00      	cmp	r2, #0
 80179f0:	bf14      	ite	ne
 80179f2:	2101      	movne	r1, #1
 80179f4:	2100      	moveq	r1, #0
 80179f6:	b2c9      	uxtb	r1, r1
 80179f8:	f003 0007 	and.w	r0, r3, #7
 80179fc:	b240      	sxtb	r0, r0
 80179fe:	4290      	cmp	r0, r2
 8017a00:	bfac      	ite	ge
 8017a02:	2201      	movge	r2, #1
 8017a04:	2200      	movlt	r2, #0
 8017a06:	b2d2      	uxtb	r2, r2
 8017a08:	400a      	ands	r2, r1
 8017a0a:	b2d2      	uxtb	r2, r2
 8017a0c:	2a00      	cmp	r2, #0
 8017a0e:	d002      	beq.n	8017a16 <modbusSlaveParseFrame+0x3e>
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7f1 fc83 	bl	800931c <__asan_report_load1>
 8017a16:	4b96      	ldr	r3, [pc, #600]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017a18:	785b      	ldrb	r3, [r3, #1]
 8017a1a:	717b      	strb	r3, [r7, #5]
    uint16_t answerLen = 0;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	80fb      	strh	r3, [r7, #6]
    if(command == 0x03)
 8017a20:	797b      	ldrb	r3, [r7, #5]
 8017a22:	2b03      	cmp	r3, #3
 8017a24:	f040 8166 	bne.w	8017cf4 <modbusSlaveParseFrame+0x31c>
    {
        uint16_t startAddr = modbusRxTxBuffer[2] << 8 | modbusRxTxBuffer[3];
 8017a28:	f7f2 fa24 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017a2c:	4b91      	ldr	r3, [pc, #580]	; (8017c74 <modbusSlaveParseFrame+0x29c>)
 8017a2e:	08da      	lsrs	r2, r3, #3
 8017a30:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017a34:	f992 2000 	ldrsb.w	r2, [r2]
 8017a38:	2a00      	cmp	r2, #0
 8017a3a:	bf14      	ite	ne
 8017a3c:	2101      	movne	r1, #1
 8017a3e:	2100      	moveq	r1, #0
 8017a40:	b2c9      	uxtb	r1, r1
 8017a42:	f003 0007 	and.w	r0, r3, #7
 8017a46:	b240      	sxtb	r0, r0
 8017a48:	4290      	cmp	r0, r2
 8017a4a:	bfac      	ite	ge
 8017a4c:	2201      	movge	r2, #1
 8017a4e:	2200      	movlt	r2, #0
 8017a50:	b2d2      	uxtb	r2, r2
 8017a52:	400a      	ands	r2, r1
 8017a54:	b2d2      	uxtb	r2, r2
 8017a56:	2a00      	cmp	r2, #0
 8017a58:	d002      	beq.n	8017a60 <modbusSlaveParseFrame+0x88>
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7f1 fc5e 	bl	800931c <__asan_report_load1>
 8017a60:	4b83      	ldr	r3, [pc, #524]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017a62:	789b      	ldrb	r3, [r3, #2]
 8017a64:	021b      	lsls	r3, r3, #8
 8017a66:	b219      	sxth	r1, r3
 8017a68:	4b83      	ldr	r3, [pc, #524]	; (8017c78 <modbusSlaveParseFrame+0x2a0>)
 8017a6a:	08da      	lsrs	r2, r3, #3
 8017a6c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017a70:	f992 2000 	ldrsb.w	r2, [r2]
 8017a74:	2a00      	cmp	r2, #0
 8017a76:	bf14      	ite	ne
 8017a78:	2001      	movne	r0, #1
 8017a7a:	2000      	moveq	r0, #0
 8017a7c:	b2c0      	uxtb	r0, r0
 8017a7e:	f003 0407 	and.w	r4, r3, #7
 8017a82:	b264      	sxtb	r4, r4
 8017a84:	4294      	cmp	r4, r2
 8017a86:	bfac      	ite	ge
 8017a88:	2201      	movge	r2, #1
 8017a8a:	2200      	movlt	r2, #0
 8017a8c:	b2d2      	uxtb	r2, r2
 8017a8e:	4002      	ands	r2, r0
 8017a90:	b2d2      	uxtb	r2, r2
 8017a92:	2a00      	cmp	r2, #0
 8017a94:	d002      	beq.n	8017a9c <modbusSlaveParseFrame+0xc4>
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f1 fc40 	bl	800931c <__asan_report_load1>
 8017a9c:	4b74      	ldr	r3, [pc, #464]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017a9e:	78db      	ldrb	r3, [r3, #3]
 8017aa0:	b21b      	sxth	r3, r3
 8017aa2:	430b      	orrs	r3, r1
 8017aa4:	b21b      	sxth	r3, r3
 8017aa6:	827b      	strh	r3, [r7, #18]
        uint16_t regNum = modbusRxTxBuffer[4] << 8 | modbusRxTxBuffer[5];
 8017aa8:	4b74      	ldr	r3, [pc, #464]	; (8017c7c <modbusSlaveParseFrame+0x2a4>)
 8017aaa:	08da      	lsrs	r2, r3, #3
 8017aac:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017ab0:	f992 2000 	ldrsb.w	r2, [r2]
 8017ab4:	2a00      	cmp	r2, #0
 8017ab6:	bf14      	ite	ne
 8017ab8:	2101      	movne	r1, #1
 8017aba:	2100      	moveq	r1, #0
 8017abc:	b2c9      	uxtb	r1, r1
 8017abe:	f003 0007 	and.w	r0, r3, #7
 8017ac2:	b240      	sxtb	r0, r0
 8017ac4:	4290      	cmp	r0, r2
 8017ac6:	bfac      	ite	ge
 8017ac8:	2201      	movge	r2, #1
 8017aca:	2200      	movlt	r2, #0
 8017acc:	b2d2      	uxtb	r2, r2
 8017ace:	400a      	ands	r2, r1
 8017ad0:	b2d2      	uxtb	r2, r2
 8017ad2:	2a00      	cmp	r2, #0
 8017ad4:	d002      	beq.n	8017adc <modbusSlaveParseFrame+0x104>
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f1 fc20 	bl	800931c <__asan_report_load1>
 8017adc:	4b64      	ldr	r3, [pc, #400]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017ade:	791b      	ldrb	r3, [r3, #4]
 8017ae0:	021b      	lsls	r3, r3, #8
 8017ae2:	b219      	sxth	r1, r3
 8017ae4:	4b66      	ldr	r3, [pc, #408]	; (8017c80 <modbusSlaveParseFrame+0x2a8>)
 8017ae6:	08da      	lsrs	r2, r3, #3
 8017ae8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017aec:	f992 2000 	ldrsb.w	r2, [r2]
 8017af0:	2a00      	cmp	r2, #0
 8017af2:	bf14      	ite	ne
 8017af4:	2001      	movne	r0, #1
 8017af6:	2000      	moveq	r0, #0
 8017af8:	b2c0      	uxtb	r0, r0
 8017afa:	f003 0407 	and.w	r4, r3, #7
 8017afe:	b264      	sxtb	r4, r4
 8017b00:	4294      	cmp	r4, r2
 8017b02:	bfac      	ite	ge
 8017b04:	2201      	movge	r2, #1
 8017b06:	2200      	movlt	r2, #0
 8017b08:	b2d2      	uxtb	r2, r2
 8017b0a:	4002      	ands	r2, r0
 8017b0c:	b2d2      	uxtb	r2, r2
 8017b0e:	2a00      	cmp	r2, #0
 8017b10:	d002      	beq.n	8017b18 <modbusSlaveParseFrame+0x140>
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7f1 fc02 	bl	800931c <__asan_report_load1>
 8017b18:	4b55      	ldr	r3, [pc, #340]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017b1a:	795b      	ldrb	r3, [r3, #5]
 8017b1c:	b21b      	sxth	r3, r3
 8017b1e:	430b      	orrs	r3, r1
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	82bb      	strh	r3, [r7, #20]
        if(((startAddr + regNum) > MODBUS_SLAVE_REGISTERS_NUM) || (regNum > 126))
 8017b24:	8a7a      	ldrh	r2, [r7, #18]
 8017b26:	8abb      	ldrh	r3, [r7, #20]
 8017b28:	4413      	add	r3, r2
 8017b2a:	2b80      	cmp	r3, #128	; 0x80
 8017b2c:	dc04      	bgt.n	8017b38 <modbusSlaveParseFrame+0x160>
 8017b2e:	f7f2 f9a1 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017b32:	8abb      	ldrh	r3, [r7, #20]
 8017b34:	2b7e      	cmp	r3, #126	; 0x7e
 8017b36:	d907      	bls.n	8017b48 <modbusSlaveParseFrame+0x170>
            answerLen = modbusSlaveErrorSet(0x02);
 8017b38:	f7f2 f99c 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017b3c:	2002      	movs	r0, #2
 8017b3e:	f7ff fef7 	bl	8017930 <modbusSlaveErrorSet>
 8017b42:	4603      	mov	r3, r0
 8017b44:	80fb      	strh	r3, [r7, #6]
 8017b46:	e2d1      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        else
        {
            for(uint16_t reg = 0; reg < regNum; reg++)
 8017b48:	f7f2 f994 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	813b      	strh	r3, [r7, #8]
 8017b50:	e0a0      	b.n	8017c94 <modbusSlaveParseFrame+0x2bc>
            {
                modbusRxTxBuffer[3 + (reg << 1)] = (uint8_t)(modbusMemory[startAddr + reg] >> 8);
 8017b52:	f7f2 f98f 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017b56:	8a7a      	ldrh	r2, [r7, #18]
 8017b58:	893b      	ldrh	r3, [r7, #8]
 8017b5a:	441a      	add	r2, r3
 8017b5c:	0053      	lsls	r3, r2, #1
 8017b5e:	4949      	ldr	r1, [pc, #292]	; (8017c84 <modbusSlaveParseFrame+0x2ac>)
 8017b60:	440b      	add	r3, r1
 8017b62:	08d9      	lsrs	r1, r3, #3
 8017b64:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017b68:	f991 1000 	ldrsb.w	r1, [r1]
 8017b6c:	2900      	cmp	r1, #0
 8017b6e:	bf14      	ite	ne
 8017b70:	2001      	movne	r0, #1
 8017b72:	2000      	moveq	r0, #0
 8017b74:	b2c0      	uxtb	r0, r0
 8017b76:	f003 0407 	and.w	r4, r3, #7
 8017b7a:	b264      	sxtb	r4, r4
 8017b7c:	3401      	adds	r4, #1
 8017b7e:	b264      	sxtb	r4, r4
 8017b80:	428c      	cmp	r4, r1
 8017b82:	bfac      	ite	ge
 8017b84:	2101      	movge	r1, #1
 8017b86:	2100      	movlt	r1, #0
 8017b88:	b2c9      	uxtb	r1, r1
 8017b8a:	4001      	ands	r1, r0
 8017b8c:	b2c9      	uxtb	r1, r1
 8017b8e:	2900      	cmp	r1, #0
 8017b90:	d002      	beq.n	8017b98 <modbusSlaveParseFrame+0x1c0>
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7f1 fbce 	bl	8009334 <__asan_report_load2>
 8017b98:	4b3a      	ldr	r3, [pc, #232]	; (8017c84 <modbusSlaveParseFrame+0x2ac>)
 8017b9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017b9e:	0a1b      	lsrs	r3, r3, #8
 8017ba0:	b299      	uxth	r1, r3
 8017ba2:	893b      	ldrh	r3, [r7, #8]
 8017ba4:	005b      	lsls	r3, r3, #1
 8017ba6:	1cda      	adds	r2, r3, #3
 8017ba8:	b2cd      	uxtb	r5, r1
 8017baa:	4b31      	ldr	r3, [pc, #196]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017bac:	4413      	add	r3, r2
 8017bae:	08d9      	lsrs	r1, r3, #3
 8017bb0:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017bb4:	f991 1000 	ldrsb.w	r1, [r1]
 8017bb8:	2900      	cmp	r1, #0
 8017bba:	bf14      	ite	ne
 8017bbc:	2001      	movne	r0, #1
 8017bbe:	2000      	moveq	r0, #0
 8017bc0:	b2c0      	uxtb	r0, r0
 8017bc2:	f003 0407 	and.w	r4, r3, #7
 8017bc6:	b264      	sxtb	r4, r4
 8017bc8:	428c      	cmp	r4, r1
 8017bca:	bfac      	ite	ge
 8017bcc:	2101      	movge	r1, #1
 8017bce:	2100      	movlt	r1, #0
 8017bd0:	b2c9      	uxtb	r1, r1
 8017bd2:	4001      	ands	r1, r0
 8017bd4:	b2c9      	uxtb	r1, r1
 8017bd6:	2900      	cmp	r1, #0
 8017bd8:	d002      	beq.n	8017be0 <modbusSlaveParseFrame+0x208>
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7f1 fb86 	bl	80092ec <__asan_report_store1>
 8017be0:	4b23      	ldr	r3, [pc, #140]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017be2:	4629      	mov	r1, r5
 8017be4:	5499      	strb	r1, [r3, r2]
                modbusRxTxBuffer[4 + (reg << 1)] = (uint8_t)(modbusMemory[startAddr + reg]);
 8017be6:	8a7a      	ldrh	r2, [r7, #18]
 8017be8:	893b      	ldrh	r3, [r7, #8]
 8017bea:	441a      	add	r2, r3
 8017bec:	0053      	lsls	r3, r2, #1
 8017bee:	4925      	ldr	r1, [pc, #148]	; (8017c84 <modbusSlaveParseFrame+0x2ac>)
 8017bf0:	440b      	add	r3, r1
 8017bf2:	08d9      	lsrs	r1, r3, #3
 8017bf4:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017bf8:	f991 1000 	ldrsb.w	r1, [r1]
 8017bfc:	2900      	cmp	r1, #0
 8017bfe:	bf14      	ite	ne
 8017c00:	2001      	movne	r0, #1
 8017c02:	2000      	moveq	r0, #0
 8017c04:	b2c0      	uxtb	r0, r0
 8017c06:	f003 0407 	and.w	r4, r3, #7
 8017c0a:	b264      	sxtb	r4, r4
 8017c0c:	3401      	adds	r4, #1
 8017c0e:	b264      	sxtb	r4, r4
 8017c10:	428c      	cmp	r4, r1
 8017c12:	bfac      	ite	ge
 8017c14:	2101      	movge	r1, #1
 8017c16:	2100      	movlt	r1, #0
 8017c18:	b2c9      	uxtb	r1, r1
 8017c1a:	4001      	ands	r1, r0
 8017c1c:	b2c9      	uxtb	r1, r1
 8017c1e:	2900      	cmp	r1, #0
 8017c20:	d002      	beq.n	8017c28 <modbusSlaveParseFrame+0x250>
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7f1 fb86 	bl	8009334 <__asan_report_load2>
 8017c28:	4b16      	ldr	r3, [pc, #88]	; (8017c84 <modbusSlaveParseFrame+0x2ac>)
 8017c2a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017c2e:	893b      	ldrh	r3, [r7, #8]
 8017c30:	005b      	lsls	r3, r3, #1
 8017c32:	1d1a      	adds	r2, r3, #4
 8017c34:	b2cd      	uxtb	r5, r1
 8017c36:	4b0e      	ldr	r3, [pc, #56]	; (8017c70 <modbusSlaveParseFrame+0x298>)
 8017c38:	4413      	add	r3, r2
 8017c3a:	08d9      	lsrs	r1, r3, #3
 8017c3c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017c40:	f991 1000 	ldrsb.w	r1, [r1]
 8017c44:	2900      	cmp	r1, #0
 8017c46:	bf14      	ite	ne
 8017c48:	2001      	movne	r0, #1
 8017c4a:	2000      	moveq	r0, #0
 8017c4c:	b2c0      	uxtb	r0, r0
 8017c4e:	f003 0407 	and.w	r4, r3, #7
 8017c52:	b264      	sxtb	r4, r4
 8017c54:	428c      	cmp	r4, r1
 8017c56:	bfac      	ite	ge
 8017c58:	2101      	movge	r1, #1
 8017c5a:	2100      	movlt	r1, #0
 8017c5c:	b2c9      	uxtb	r1, r1
 8017c5e:	4001      	ands	r1, r0
 8017c60:	b2c9      	uxtb	r1, r1
 8017c62:	2900      	cmp	r1, #0
 8017c64:	d010      	beq.n	8017c88 <modbusSlaveParseFrame+0x2b0>
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7f1 fb40 	bl	80092ec <__asan_report_store1>
 8017c6c:	24033301 	.word	0x24033301
 8017c70:	24033300 	.word	0x24033300
 8017c74:	24033302 	.word	0x24033302
 8017c78:	24033303 	.word	0x24033303
 8017c7c:	24033304 	.word	0x24033304
 8017c80:	24033305 	.word	0x24033305
 8017c84:	24033100 	.word	0x24033100
 8017c88:	4ba2      	ldr	r3, [pc, #648]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017c8a:	4629      	mov	r1, r5
 8017c8c:	5499      	strb	r1, [r3, r2]
            for(uint16_t reg = 0; reg < regNum; reg++)
 8017c8e:	893b      	ldrh	r3, [r7, #8]
 8017c90:	3301      	adds	r3, #1
 8017c92:	813b      	strh	r3, [r7, #8]
 8017c94:	f7f2 f8ee 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017c98:	893a      	ldrh	r2, [r7, #8]
 8017c9a:	8abb      	ldrh	r3, [r7, #20]
 8017c9c:	429a      	cmp	r2, r3
 8017c9e:	f4ff af58 	bcc.w	8017b52 <modbusSlaveParseFrame+0x17a>
            }
            modbusRxTxBuffer[2] = regNum << 1;
 8017ca2:	f7f2 f8e7 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017ca6:	8abb      	ldrh	r3, [r7, #20]
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	005b      	lsls	r3, r3, #1
 8017cac:	b2dc      	uxtb	r4, r3
 8017cae:	4b9a      	ldr	r3, [pc, #616]	; (8017f18 <modbusSlaveParseFrame+0x540>)
 8017cb0:	08da      	lsrs	r2, r3, #3
 8017cb2:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017cb6:	f992 2000 	ldrsb.w	r2, [r2]
 8017cba:	2a00      	cmp	r2, #0
 8017cbc:	bf14      	ite	ne
 8017cbe:	2101      	movne	r1, #1
 8017cc0:	2100      	moveq	r1, #0
 8017cc2:	b2c9      	uxtb	r1, r1
 8017cc4:	f003 0007 	and.w	r0, r3, #7
 8017cc8:	b240      	sxtb	r0, r0
 8017cca:	4290      	cmp	r0, r2
 8017ccc:	bfac      	ite	ge
 8017cce:	2201      	movge	r2, #1
 8017cd0:	2200      	movlt	r2, #0
 8017cd2:	b2d2      	uxtb	r2, r2
 8017cd4:	400a      	ands	r2, r1
 8017cd6:	b2d2      	uxtb	r2, r2
 8017cd8:	2a00      	cmp	r2, #0
 8017cda:	d002      	beq.n	8017ce2 <modbusSlaveParseFrame+0x30a>
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7f1 fb05 	bl	80092ec <__asan_report_store1>
 8017ce2:	4b8c      	ldr	r3, [pc, #560]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017ce4:	4622      	mov	r2, r4
 8017ce6:	709a      	strb	r2, [r3, #2]
            answerLen =  MODBUS_MIN_FRAME_SIZE + modbusRxTxBuffer[2];
 8017ce8:	4b8a      	ldr	r3, [pc, #552]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017cea:	789b      	ldrb	r3, [r3, #2]
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	3305      	adds	r3, #5
 8017cf0:	80fb      	strh	r3, [r7, #6]
 8017cf2:	e1fb      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        }
    }
    else if (command == 0x06)
 8017cf4:	f7f2 f8be 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017cf8:	797b      	ldrb	r3, [r7, #5]
 8017cfa:	2b06      	cmp	r3, #6
 8017cfc:	f040 80ca 	bne.w	8017e94 <modbusSlaveParseFrame+0x4bc>
    {
        uint16_t startAddr = modbusRxTxBuffer[2] << 8 | modbusRxTxBuffer[3];
 8017d00:	f7f2 f8b8 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017d04:	4b84      	ldr	r3, [pc, #528]	; (8017f18 <modbusSlaveParseFrame+0x540>)
 8017d06:	08da      	lsrs	r2, r3, #3
 8017d08:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017d0c:	f992 2000 	ldrsb.w	r2, [r2]
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	bf14      	ite	ne
 8017d14:	2101      	movne	r1, #1
 8017d16:	2100      	moveq	r1, #0
 8017d18:	b2c9      	uxtb	r1, r1
 8017d1a:	f003 0007 	and.w	r0, r3, #7
 8017d1e:	b240      	sxtb	r0, r0
 8017d20:	4290      	cmp	r0, r2
 8017d22:	bfac      	ite	ge
 8017d24:	2201      	movge	r2, #1
 8017d26:	2200      	movlt	r2, #0
 8017d28:	b2d2      	uxtb	r2, r2
 8017d2a:	400a      	ands	r2, r1
 8017d2c:	b2d2      	uxtb	r2, r2
 8017d2e:	2a00      	cmp	r2, #0
 8017d30:	d002      	beq.n	8017d38 <modbusSlaveParseFrame+0x360>
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7f1 faf2 	bl	800931c <__asan_report_load1>
 8017d38:	4b76      	ldr	r3, [pc, #472]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017d3a:	789b      	ldrb	r3, [r3, #2]
 8017d3c:	021b      	lsls	r3, r3, #8
 8017d3e:	b219      	sxth	r1, r3
 8017d40:	4b76      	ldr	r3, [pc, #472]	; (8017f1c <modbusSlaveParseFrame+0x544>)
 8017d42:	08da      	lsrs	r2, r3, #3
 8017d44:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017d48:	f992 2000 	ldrsb.w	r2, [r2]
 8017d4c:	2a00      	cmp	r2, #0
 8017d4e:	bf14      	ite	ne
 8017d50:	2001      	movne	r0, #1
 8017d52:	2000      	moveq	r0, #0
 8017d54:	b2c0      	uxtb	r0, r0
 8017d56:	f003 0407 	and.w	r4, r3, #7
 8017d5a:	b264      	sxtb	r4, r4
 8017d5c:	4294      	cmp	r4, r2
 8017d5e:	bfac      	ite	ge
 8017d60:	2201      	movge	r2, #1
 8017d62:	2200      	movlt	r2, #0
 8017d64:	b2d2      	uxtb	r2, r2
 8017d66:	4002      	ands	r2, r0
 8017d68:	b2d2      	uxtb	r2, r2
 8017d6a:	2a00      	cmp	r2, #0
 8017d6c:	d002      	beq.n	8017d74 <modbusSlaveParseFrame+0x39c>
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7f1 fad4 	bl	800931c <__asan_report_load1>
 8017d74:	4b67      	ldr	r3, [pc, #412]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017d76:	78db      	ldrb	r3, [r3, #3]
 8017d78:	b21b      	sxth	r3, r3
 8017d7a:	430b      	orrs	r3, r1
 8017d7c:	b21b      	sxth	r3, r3
 8017d7e:	823b      	strh	r3, [r7, #16]
        if(startAddr > MODBUS_SLAVE_REGISTERS_NUM)
 8017d80:	8a3b      	ldrh	r3, [r7, #16]
 8017d82:	2b80      	cmp	r3, #128	; 0x80
 8017d84:	d907      	bls.n	8017d96 <modbusSlaveParseFrame+0x3be>
            answerLen = modbusSlaveErrorSet(0x02);
 8017d86:	f7f2 f875 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017d8a:	2002      	movs	r0, #2
 8017d8c:	f7ff fdd0 	bl	8017930 <modbusSlaveErrorSet>
 8017d90:	4603      	mov	r3, r0
 8017d92:	80fb      	strh	r3, [r7, #6]
 8017d94:	e1aa      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        else
        {
            modbusMemory[startAddr] = modbusRxTxBuffer[4] << 8 | modbusRxTxBuffer[5];
 8017d96:	f7f2 f86d 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017d9a:	4b61      	ldr	r3, [pc, #388]	; (8017f20 <modbusSlaveParseFrame+0x548>)
 8017d9c:	08da      	lsrs	r2, r3, #3
 8017d9e:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017da2:	f992 2000 	ldrsb.w	r2, [r2]
 8017da6:	2a00      	cmp	r2, #0
 8017da8:	bf14      	ite	ne
 8017daa:	2101      	movne	r1, #1
 8017dac:	2100      	moveq	r1, #0
 8017dae:	b2c9      	uxtb	r1, r1
 8017db0:	f003 0007 	and.w	r0, r3, #7
 8017db4:	b240      	sxtb	r0, r0
 8017db6:	4290      	cmp	r0, r2
 8017db8:	bfac      	ite	ge
 8017dba:	2201      	movge	r2, #1
 8017dbc:	2200      	movlt	r2, #0
 8017dbe:	b2d2      	uxtb	r2, r2
 8017dc0:	400a      	ands	r2, r1
 8017dc2:	b2d2      	uxtb	r2, r2
 8017dc4:	2a00      	cmp	r2, #0
 8017dc6:	d002      	beq.n	8017dce <modbusSlaveParseFrame+0x3f6>
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7f1 faa7 	bl	800931c <__asan_report_load1>
 8017dce:	4b51      	ldr	r3, [pc, #324]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017dd0:	791b      	ldrb	r3, [r3, #4]
 8017dd2:	021b      	lsls	r3, r3, #8
 8017dd4:	b219      	sxth	r1, r3
 8017dd6:	4b53      	ldr	r3, [pc, #332]	; (8017f24 <modbusSlaveParseFrame+0x54c>)
 8017dd8:	08da      	lsrs	r2, r3, #3
 8017dda:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017dde:	f992 2000 	ldrsb.w	r2, [r2]
 8017de2:	2a00      	cmp	r2, #0
 8017de4:	bf14      	ite	ne
 8017de6:	2001      	movne	r0, #1
 8017de8:	2000      	moveq	r0, #0
 8017dea:	b2c0      	uxtb	r0, r0
 8017dec:	f003 0407 	and.w	r4, r3, #7
 8017df0:	b264      	sxtb	r4, r4
 8017df2:	4294      	cmp	r4, r2
 8017df4:	bfac      	ite	ge
 8017df6:	2201      	movge	r2, #1
 8017df8:	2200      	movlt	r2, #0
 8017dfa:	b2d2      	uxtb	r2, r2
 8017dfc:	4002      	ands	r2, r0
 8017dfe:	b2d2      	uxtb	r2, r2
 8017e00:	2a00      	cmp	r2, #0
 8017e02:	d002      	beq.n	8017e0a <modbusSlaveParseFrame+0x432>
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7f1 fa89 	bl	800931c <__asan_report_load1>
 8017e0a:	4b42      	ldr	r3, [pc, #264]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017e0c:	795b      	ldrb	r3, [r3, #5]
 8017e0e:	b21b      	sxth	r3, r3
 8017e10:	430b      	orrs	r3, r1
 8017e12:	b21b      	sxth	r3, r3
 8017e14:	8a3a      	ldrh	r2, [r7, #16]
 8017e16:	b29d      	uxth	r5, r3
 8017e18:	0053      	lsls	r3, r2, #1
 8017e1a:	4943      	ldr	r1, [pc, #268]	; (8017f28 <modbusSlaveParseFrame+0x550>)
 8017e1c:	440b      	add	r3, r1
 8017e1e:	08d9      	lsrs	r1, r3, #3
 8017e20:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017e24:	f991 1000 	ldrsb.w	r1, [r1]
 8017e28:	2900      	cmp	r1, #0
 8017e2a:	bf14      	ite	ne
 8017e2c:	2001      	movne	r0, #1
 8017e2e:	2000      	moveq	r0, #0
 8017e30:	b2c0      	uxtb	r0, r0
 8017e32:	f003 0407 	and.w	r4, r3, #7
 8017e36:	b264      	sxtb	r4, r4
 8017e38:	3401      	adds	r4, #1
 8017e3a:	b264      	sxtb	r4, r4
 8017e3c:	428c      	cmp	r4, r1
 8017e3e:	bfac      	ite	ge
 8017e40:	2101      	movge	r1, #1
 8017e42:	2100      	movlt	r1, #0
 8017e44:	b2c9      	uxtb	r1, r1
 8017e46:	4001      	ands	r1, r0
 8017e48:	b2c9      	uxtb	r1, r1
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	d002      	beq.n	8017e54 <modbusSlaveParseFrame+0x47c>
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7f1 fa58 	bl	8009304 <__asan_report_store2>
 8017e54:	4b34      	ldr	r3, [pc, #208]	; (8017f28 <modbusSlaveParseFrame+0x550>)
 8017e56:	4629      	mov	r1, r5
 8017e58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            answerLen = modbusRxCount;
 8017e5c:	4b33      	ldr	r3, [pc, #204]	; (8017f2c <modbusSlaveParseFrame+0x554>)
 8017e5e:	4619      	mov	r1, r3
 8017e60:	08cb      	lsrs	r3, r1, #3
 8017e62:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8017e66:	f993 3000 	ldrsb.w	r3, [r3]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	bf14      	ite	ne
 8017e6e:	2201      	movne	r2, #1
 8017e70:	2200      	moveq	r2, #0
 8017e72:	b2d2      	uxtb	r2, r2
 8017e74:	2b01      	cmp	r3, #1
 8017e76:	bfd4      	ite	le
 8017e78:	2301      	movle	r3, #1
 8017e7a:	2300      	movgt	r3, #0
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	4013      	ands	r3, r2
 8017e80:	b2db      	uxtb	r3, r3
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d002      	beq.n	8017e8c <modbusSlaveParseFrame+0x4b4>
 8017e86:	4608      	mov	r0, r1
 8017e88:	f7f1 fa54 	bl	8009334 <__asan_report_load2>
 8017e8c:	4b27      	ldr	r3, [pc, #156]	; (8017f2c <modbusSlaveParseFrame+0x554>)
 8017e8e:	881b      	ldrh	r3, [r3, #0]
 8017e90:	80fb      	strh	r3, [r7, #6]
 8017e92:	e12b      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        }
    }
    else if(command == 0x10)
 8017e94:	f7f1 ffee 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017e98:	797b      	ldrb	r3, [r7, #5]
 8017e9a:	2b10      	cmp	r3, #16
 8017e9c:	f040 811f 	bne.w	80180de <modbusSlaveParseFrame+0x706>
    {
        uint16_t startAddr = modbusRxTxBuffer[2] << 8 | modbusRxTxBuffer[3];
 8017ea0:	f7f1 ffe8 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017ea4:	4b1c      	ldr	r3, [pc, #112]	; (8017f18 <modbusSlaveParseFrame+0x540>)
 8017ea6:	08da      	lsrs	r2, r3, #3
 8017ea8:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017eac:	f992 2000 	ldrsb.w	r2, [r2]
 8017eb0:	2a00      	cmp	r2, #0
 8017eb2:	bf14      	ite	ne
 8017eb4:	2101      	movne	r1, #1
 8017eb6:	2100      	moveq	r1, #0
 8017eb8:	b2c9      	uxtb	r1, r1
 8017eba:	f003 0007 	and.w	r0, r3, #7
 8017ebe:	b240      	sxtb	r0, r0
 8017ec0:	4290      	cmp	r0, r2
 8017ec2:	bfac      	ite	ge
 8017ec4:	2201      	movge	r2, #1
 8017ec6:	2200      	movlt	r2, #0
 8017ec8:	b2d2      	uxtb	r2, r2
 8017eca:	400a      	ands	r2, r1
 8017ecc:	b2d2      	uxtb	r2, r2
 8017ece:	2a00      	cmp	r2, #0
 8017ed0:	d002      	beq.n	8017ed8 <modbusSlaveParseFrame+0x500>
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f1 fa22 	bl	800931c <__asan_report_load1>
 8017ed8:	4b0e      	ldr	r3, [pc, #56]	; (8017f14 <modbusSlaveParseFrame+0x53c>)
 8017eda:	789b      	ldrb	r3, [r3, #2]
 8017edc:	021b      	lsls	r3, r3, #8
 8017ede:	b219      	sxth	r1, r3
 8017ee0:	4b0e      	ldr	r3, [pc, #56]	; (8017f1c <modbusSlaveParseFrame+0x544>)
 8017ee2:	08da      	lsrs	r2, r3, #3
 8017ee4:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017ee8:	f992 2000 	ldrsb.w	r2, [r2]
 8017eec:	2a00      	cmp	r2, #0
 8017eee:	bf14      	ite	ne
 8017ef0:	2001      	movne	r0, #1
 8017ef2:	2000      	moveq	r0, #0
 8017ef4:	b2c0      	uxtb	r0, r0
 8017ef6:	f003 0407 	and.w	r4, r3, #7
 8017efa:	b264      	sxtb	r4, r4
 8017efc:	4294      	cmp	r4, r2
 8017efe:	bfac      	ite	ge
 8017f00:	2201      	movge	r2, #1
 8017f02:	2200      	movlt	r2, #0
 8017f04:	b2d2      	uxtb	r2, r2
 8017f06:	4002      	ands	r2, r0
 8017f08:	b2d2      	uxtb	r2, r2
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	d010      	beq.n	8017f30 <modbusSlaveParseFrame+0x558>
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7f1 fa04 	bl	800931c <__asan_report_load1>
 8017f14:	24033300 	.word	0x24033300
 8017f18:	24033302 	.word	0x24033302
 8017f1c:	24033303 	.word	0x24033303
 8017f20:	24033304 	.word	0x24033304
 8017f24:	24033305 	.word	0x24033305
 8017f28:	24033100 	.word	0x24033100
 8017f2c:	24033500 	.word	0x24033500
 8017f30:	4b9b      	ldr	r3, [pc, #620]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8017f32:	78db      	ldrb	r3, [r3, #3]
 8017f34:	b21b      	sxth	r3, r3
 8017f36:	430b      	orrs	r3, r1
 8017f38:	b21b      	sxth	r3, r3
 8017f3a:	81bb      	strh	r3, [r7, #12]
        uint16_t regNum = modbusRxTxBuffer[4] << 8 | modbusRxTxBuffer[5];
 8017f3c:	4b99      	ldr	r3, [pc, #612]	; (80181a4 <modbusSlaveParseFrame+0x7cc>)
 8017f3e:	08da      	lsrs	r2, r3, #3
 8017f40:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017f44:	f992 2000 	ldrsb.w	r2, [r2]
 8017f48:	2a00      	cmp	r2, #0
 8017f4a:	bf14      	ite	ne
 8017f4c:	2101      	movne	r1, #1
 8017f4e:	2100      	moveq	r1, #0
 8017f50:	b2c9      	uxtb	r1, r1
 8017f52:	f003 0007 	and.w	r0, r3, #7
 8017f56:	b240      	sxtb	r0, r0
 8017f58:	4290      	cmp	r0, r2
 8017f5a:	bfac      	ite	ge
 8017f5c:	2201      	movge	r2, #1
 8017f5e:	2200      	movlt	r2, #0
 8017f60:	b2d2      	uxtb	r2, r2
 8017f62:	400a      	ands	r2, r1
 8017f64:	b2d2      	uxtb	r2, r2
 8017f66:	2a00      	cmp	r2, #0
 8017f68:	d002      	beq.n	8017f70 <modbusSlaveParseFrame+0x598>
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7f1 f9d6 	bl	800931c <__asan_report_load1>
 8017f70:	4b8b      	ldr	r3, [pc, #556]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8017f72:	791b      	ldrb	r3, [r3, #4]
 8017f74:	021b      	lsls	r3, r3, #8
 8017f76:	b219      	sxth	r1, r3
 8017f78:	4b8b      	ldr	r3, [pc, #556]	; (80181a8 <modbusSlaveParseFrame+0x7d0>)
 8017f7a:	08da      	lsrs	r2, r3, #3
 8017f7c:	f102 52dc 	add.w	r2, r2, #461373440	; 0x1b800000
 8017f80:	f992 2000 	ldrsb.w	r2, [r2]
 8017f84:	2a00      	cmp	r2, #0
 8017f86:	bf14      	ite	ne
 8017f88:	2001      	movne	r0, #1
 8017f8a:	2000      	moveq	r0, #0
 8017f8c:	b2c0      	uxtb	r0, r0
 8017f8e:	f003 0407 	and.w	r4, r3, #7
 8017f92:	b264      	sxtb	r4, r4
 8017f94:	4294      	cmp	r4, r2
 8017f96:	bfac      	ite	ge
 8017f98:	2201      	movge	r2, #1
 8017f9a:	2200      	movlt	r2, #0
 8017f9c:	b2d2      	uxtb	r2, r2
 8017f9e:	4002      	ands	r2, r0
 8017fa0:	b2d2      	uxtb	r2, r2
 8017fa2:	2a00      	cmp	r2, #0
 8017fa4:	d002      	beq.n	8017fac <modbusSlaveParseFrame+0x5d4>
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7f1 f9b8 	bl	800931c <__asan_report_load1>
 8017fac:	4b7c      	ldr	r3, [pc, #496]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8017fae:	795b      	ldrb	r3, [r3, #5]
 8017fb0:	b21b      	sxth	r3, r3
 8017fb2:	430b      	orrs	r3, r1
 8017fb4:	b21b      	sxth	r3, r3
 8017fb6:	81fb      	strh	r3, [r7, #14]
        if(((startAddr + regNum) > MODBUS_SLAVE_REGISTERS_NUM) || (regNum > 126))
 8017fb8:	89ba      	ldrh	r2, [r7, #12]
 8017fba:	89fb      	ldrh	r3, [r7, #14]
 8017fbc:	4413      	add	r3, r2
 8017fbe:	2b80      	cmp	r3, #128	; 0x80
 8017fc0:	dc04      	bgt.n	8017fcc <modbusSlaveParseFrame+0x5f4>
 8017fc2:	f7f1 ff57 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017fc6:	89fb      	ldrh	r3, [r7, #14]
 8017fc8:	2b7e      	cmp	r3, #126	; 0x7e
 8017fca:	d907      	bls.n	8017fdc <modbusSlaveParseFrame+0x604>
            answerLen = modbusSlaveErrorSet(0x02);
 8017fcc:	f7f1 ff52 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017fd0:	2002      	movs	r0, #2
 8017fd2:	f7ff fcad 	bl	8017930 <modbusSlaveErrorSet>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	80fb      	strh	r3, [r7, #6]
 8017fda:	e087      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        else
        {
            for(uint16_t reg = 0; reg < regNum; reg++)
 8017fdc:	f7f1 ff4a 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	817b      	strh	r3, [r7, #10]
 8017fe4:	e070      	b.n	80180c8 <modbusSlaveParseFrame+0x6f0>
            {
                modbusMemory[startAddr + reg] = modbusRxTxBuffer[7 + (reg << 1)] << 8 | modbusRxTxBuffer[8 + (reg << 1)];
 8017fe6:	f7f1 ff45 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8017fea:	897b      	ldrh	r3, [r7, #10]
 8017fec:	005b      	lsls	r3, r3, #1
 8017fee:	1dda      	adds	r2, r3, #7
 8017ff0:	4b6b      	ldr	r3, [pc, #428]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8017ff2:	4413      	add	r3, r2
 8017ff4:	08d9      	lsrs	r1, r3, #3
 8017ff6:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8017ffa:	f991 1000 	ldrsb.w	r1, [r1]
 8017ffe:	2900      	cmp	r1, #0
 8018000:	bf14      	ite	ne
 8018002:	2001      	movne	r0, #1
 8018004:	2000      	moveq	r0, #0
 8018006:	b2c0      	uxtb	r0, r0
 8018008:	f003 0407 	and.w	r4, r3, #7
 801800c:	b264      	sxtb	r4, r4
 801800e:	428c      	cmp	r4, r1
 8018010:	bfac      	ite	ge
 8018012:	2101      	movge	r1, #1
 8018014:	2100      	movlt	r1, #0
 8018016:	b2c9      	uxtb	r1, r1
 8018018:	4001      	ands	r1, r0
 801801a:	b2c9      	uxtb	r1, r1
 801801c:	2900      	cmp	r1, #0
 801801e:	d002      	beq.n	8018026 <modbusSlaveParseFrame+0x64e>
 8018020:	4618      	mov	r0, r3
 8018022:	f7f1 f97b 	bl	800931c <__asan_report_load1>
 8018026:	4b5e      	ldr	r3, [pc, #376]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8018028:	5c9b      	ldrb	r3, [r3, r2]
 801802a:	021b      	lsls	r3, r3, #8
 801802c:	b218      	sxth	r0, r3
 801802e:	897b      	ldrh	r3, [r7, #10]
 8018030:	005b      	lsls	r3, r3, #1
 8018032:	f103 0208 	add.w	r2, r3, #8
 8018036:	4b5a      	ldr	r3, [pc, #360]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8018038:	4413      	add	r3, r2
 801803a:	08d9      	lsrs	r1, r3, #3
 801803c:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8018040:	f991 1000 	ldrsb.w	r1, [r1]
 8018044:	2900      	cmp	r1, #0
 8018046:	bf14      	ite	ne
 8018048:	2401      	movne	r4, #1
 801804a:	2400      	moveq	r4, #0
 801804c:	b2e4      	uxtb	r4, r4
 801804e:	f003 0507 	and.w	r5, r3, #7
 8018052:	b26d      	sxtb	r5, r5
 8018054:	428d      	cmp	r5, r1
 8018056:	bfac      	ite	ge
 8018058:	2101      	movge	r1, #1
 801805a:	2100      	movlt	r1, #0
 801805c:	b2c9      	uxtb	r1, r1
 801805e:	4021      	ands	r1, r4
 8018060:	b2c9      	uxtb	r1, r1
 8018062:	2900      	cmp	r1, #0
 8018064:	d002      	beq.n	801806c <modbusSlaveParseFrame+0x694>
 8018066:	4618      	mov	r0, r3
 8018068:	f7f1 f958 	bl	800931c <__asan_report_load1>
 801806c:	4b4c      	ldr	r3, [pc, #304]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 801806e:	5c9b      	ldrb	r3, [r3, r2]
 8018070:	b21b      	sxth	r3, r3
 8018072:	4303      	orrs	r3, r0
 8018074:	b219      	sxth	r1, r3
 8018076:	89ba      	ldrh	r2, [r7, #12]
 8018078:	897b      	ldrh	r3, [r7, #10]
 801807a:	441a      	add	r2, r3
 801807c:	b28d      	uxth	r5, r1
 801807e:	0053      	lsls	r3, r2, #1
 8018080:	494a      	ldr	r1, [pc, #296]	; (80181ac <modbusSlaveParseFrame+0x7d4>)
 8018082:	440b      	add	r3, r1
 8018084:	08d9      	lsrs	r1, r3, #3
 8018086:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801808a:	f991 1000 	ldrsb.w	r1, [r1]
 801808e:	2900      	cmp	r1, #0
 8018090:	bf14      	ite	ne
 8018092:	2001      	movne	r0, #1
 8018094:	2000      	moveq	r0, #0
 8018096:	b2c0      	uxtb	r0, r0
 8018098:	f003 0407 	and.w	r4, r3, #7
 801809c:	b264      	sxtb	r4, r4
 801809e:	3401      	adds	r4, #1
 80180a0:	b264      	sxtb	r4, r4
 80180a2:	428c      	cmp	r4, r1
 80180a4:	bfac      	ite	ge
 80180a6:	2101      	movge	r1, #1
 80180a8:	2100      	movlt	r1, #0
 80180aa:	b2c9      	uxtb	r1, r1
 80180ac:	4001      	ands	r1, r0
 80180ae:	b2c9      	uxtb	r1, r1
 80180b0:	2900      	cmp	r1, #0
 80180b2:	d002      	beq.n	80180ba <modbusSlaveParseFrame+0x6e2>
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7f1 f925 	bl	8009304 <__asan_report_store2>
 80180ba:	4b3c      	ldr	r3, [pc, #240]	; (80181ac <modbusSlaveParseFrame+0x7d4>)
 80180bc:	4629      	mov	r1, r5
 80180be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for(uint16_t reg = 0; reg < regNum; reg++)
 80180c2:	897b      	ldrh	r3, [r7, #10]
 80180c4:	3301      	adds	r3, #1
 80180c6:	817b      	strh	r3, [r7, #10]
 80180c8:	f7f1 fed4 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80180cc:	897a      	ldrh	r2, [r7, #10]
 80180ce:	89fb      	ldrh	r3, [r7, #14]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d388      	bcc.n	8017fe6 <modbusSlaveParseFrame+0x60e>
            }
            answerLen = 8;
 80180d4:	f7f1 fece 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80180d8:	2308      	movs	r3, #8
 80180da:	80fb      	strh	r3, [r7, #6]
 80180dc:	e006      	b.n	80180ec <modbusSlaveParseFrame+0x714>
        }
    }
    else
    {
        answerLen = modbusSlaveErrorSet(0x01);
 80180de:	f7f1 fec9 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80180e2:	2001      	movs	r0, #1
 80180e4:	f7ff fc24 	bl	8017930 <modbusSlaveErrorSet>
 80180e8:	4603      	mov	r3, r0
 80180ea:	80fb      	strh	r3, [r7, #6]
    }
    uint16_t crc = modbusSlaveGetCRC(modbusRxTxBuffer, answerLen - 2);
 80180ec:	f7f1 fec2 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80180f0:	88fb      	ldrh	r3, [r7, #6]
 80180f2:	3b02      	subs	r3, #2
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	4619      	mov	r1, r3
 80180f8:	4829      	ldr	r0, [pc, #164]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 80180fa:	f7ff fc05 	bl	8017908 <modbusSlaveGetCRC>
 80180fe:	4603      	mov	r3, r0
 8018100:	82fb      	strh	r3, [r7, #22]
    modbusRxTxBuffer[answerLen - 2] = crc;
 8018102:	88fb      	ldrh	r3, [r7, #6]
 8018104:	1e9a      	subs	r2, r3, #2
 8018106:	8afb      	ldrh	r3, [r7, #22]
 8018108:	b2dd      	uxtb	r5, r3
 801810a:	4b25      	ldr	r3, [pc, #148]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 801810c:	4413      	add	r3, r2
 801810e:	08d9      	lsrs	r1, r3, #3
 8018110:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 8018114:	f991 1000 	ldrsb.w	r1, [r1]
 8018118:	2900      	cmp	r1, #0
 801811a:	bf14      	ite	ne
 801811c:	2001      	movne	r0, #1
 801811e:	2000      	moveq	r0, #0
 8018120:	b2c0      	uxtb	r0, r0
 8018122:	f003 0407 	and.w	r4, r3, #7
 8018126:	b264      	sxtb	r4, r4
 8018128:	428c      	cmp	r4, r1
 801812a:	bfac      	ite	ge
 801812c:	2101      	movge	r1, #1
 801812e:	2100      	movlt	r1, #0
 8018130:	b2c9      	uxtb	r1, r1
 8018132:	4001      	ands	r1, r0
 8018134:	b2c9      	uxtb	r1, r1
 8018136:	2900      	cmp	r1, #0
 8018138:	d002      	beq.n	8018140 <modbusSlaveParseFrame+0x768>
 801813a:	4618      	mov	r0, r3
 801813c:	f7f1 f8d6 	bl	80092ec <__asan_report_store1>
 8018140:	4b17      	ldr	r3, [pc, #92]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8018142:	4629      	mov	r1, r5
 8018144:	5499      	strb	r1, [r3, r2]
    modbusRxTxBuffer[answerLen - 1] = crc >> 8;
 8018146:	8afb      	ldrh	r3, [r7, #22]
 8018148:	0a1b      	lsrs	r3, r3, #8
 801814a:	b299      	uxth	r1, r3
 801814c:	88fb      	ldrh	r3, [r7, #6]
 801814e:	1e5a      	subs	r2, r3, #1
 8018150:	b2cd      	uxtb	r5, r1
 8018152:	4b13      	ldr	r3, [pc, #76]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 8018154:	4413      	add	r3, r2
 8018156:	08d9      	lsrs	r1, r3, #3
 8018158:	f101 51dc 	add.w	r1, r1, #461373440	; 0x1b800000
 801815c:	f991 1000 	ldrsb.w	r1, [r1]
 8018160:	2900      	cmp	r1, #0
 8018162:	bf14      	ite	ne
 8018164:	2001      	movne	r0, #1
 8018166:	2000      	moveq	r0, #0
 8018168:	b2c0      	uxtb	r0, r0
 801816a:	f003 0407 	and.w	r4, r3, #7
 801816e:	b264      	sxtb	r4, r4
 8018170:	428c      	cmp	r4, r1
 8018172:	bfac      	ite	ge
 8018174:	2101      	movge	r1, #1
 8018176:	2100      	movlt	r1, #0
 8018178:	b2c9      	uxtb	r1, r1
 801817a:	4001      	ands	r1, r0
 801817c:	b2c9      	uxtb	r1, r1
 801817e:	2900      	cmp	r1, #0
 8018180:	d002      	beq.n	8018188 <modbusSlaveParseFrame+0x7b0>
 8018182:	4618      	mov	r0, r3
 8018184:	f7f1 f8b2 	bl	80092ec <__asan_report_store1>
 8018188:	4b05      	ldr	r3, [pc, #20]	; (80181a0 <modbusSlaveParseFrame+0x7c8>)
 801818a:	4629      	mov	r1, r5
 801818c:	5499      	strb	r1, [r3, r2]
    return answerLen;
 801818e:	88fc      	ldrh	r4, [r7, #6]
 8018190:	f7f1 fe70 	bl	8009e74 <__sanitizer_cov_trace_pc>
 8018194:	4623      	mov	r3, r4
}
 8018196:	4618      	mov	r0, r3
 8018198:	3718      	adds	r7, #24
 801819a:	46bd      	mov	sp, r7
 801819c:	bdb0      	pop	{r4, r5, r7, pc}
 801819e:	bf00      	nop
 80181a0:	24033300 	.word	0x24033300
 80181a4:	24033304 	.word	0x24033304
 80181a8:	24033305 	.word	0x24033305
 80181ac:	24033100 	.word	0x24033100

080181b0 <_sub_D_00099_0>:
 80181b0:	b580      	push	{r7, lr}
 80181b2:	af00      	add	r7, sp, #0
 80181b4:	f7f1 fe5e 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80181b8:	2101      	movs	r1, #1
 80181ba:	4802      	ldr	r0, [pc, #8]	; (80181c4 <_sub_D_00099_0+0x14>)
 80181bc:	f7f1 f9c1 	bl	8009542 <__asan_unregister_globals>
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	24008020 	.word	0x24008020

080181c8 <_sub_I_00099_1>:
 80181c8:	b580      	push	{r7, lr}
 80181ca:	af00      	add	r7, sp, #0
 80181cc:	f7f1 fe52 	bl	8009e74 <__sanitizer_cov_trace_pc>
 80181d0:	f7f1 f8bc 	bl	800934c <__asan_init>
 80181d4:	f7f1 f9ae 	bl	8009534 <__asan_version_mismatch_check_v8>
 80181d8:	2101      	movs	r1, #1
 80181da:	4802      	ldr	r0, [pc, #8]	; (80181e4 <_sub_I_00099_1+0x1c>)
 80181dc:	f7f1 f9b8 	bl	8009550 <__asan_register_globals>
 80181e0:	bd80      	pop	{r7, pc}
 80181e2:	bf00      	nop
 80181e4:	24008020 	.word	0x24008020

080181e8 <targetTask>:
}
#endif

//this is the Modbus task
static void targetTask( void * pvParameters )
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b086      	sub	sp, #24
 80181ec:	af02      	add	r7, sp, #8
 80181ee:	6078      	str	r0, [r7, #4]
	/* Unused parameters. */
	//( void ) pvParameters;

   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 80181f0:	4b15      	ldr	r3, [pc, #84]	; (8018248 <targetTask+0x60>)
 80181f2:	60fb      	str	r3, [r7, #12]
   #endif


    AFLfuzzer.xTypeEx = EX_NO_EX;
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80181fa:	2200      	movs	r2, #0
 80181fc:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
     * you need a physical connection between UART2 TX (PD5) -> UART4 RX (PD0)
     * reference to physical connectors of Nucleo-H743 https://os.mbed.com/platforms/ST-Nucleo-H743ZI/
     * ****/


    SytemCall_1(); //modbusSlaveHardwareInit();  // this only starts receiving data, the HW is initialized in
 8018200:	f7ef fefe 	bl	8008000 <MPU_SytemCall_1>

    xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,2,1,eSetValueWithOverwrite); //notify the fuzzer task the target is ready
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801820a:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 801820e:	2300      	movs	r3, #0
 8018210:	9300      	str	r3, [sp, #0]
 8018212:	2303      	movs	r3, #3
 8018214:	2201      	movs	r2, #1
 8018216:	2102      	movs	r1, #2
 8018218:	f7f0 f8a7 	bl	800836a <MPU_xTaskGenericNotify>

    while(1)
    {


    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait for data coming from USART
 801821c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018220:	2101      	movs	r1, #1
 8018222:	2000      	movs	r0, #0
 8018224:	f7f0 f8d8 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
        modbusSlaveHandler(); //entry point of DMA Modbus library
 8018228:	f7ff f9c6 	bl	80175b8 <modbusSlaveHandler>
        xTaskNotifyIndexed(AFLfuzzer.xTaskFuzzer,0,FAULT_NONE_RTOS,eSetValueWithOverwrite);//notify that the test finished
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018232:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 8018236:	2300      	movs	r3, #0
 8018238:	9300      	str	r3, [sp, #0]
 801823a:	2303      	movs	r3, #3
 801823c:	2208      	movs	r2, #8
 801823e:	2100      	movs	r1, #0
 8018240:	f7f0 f893 	bl	800836a <MPU_xTaskGenericNotify>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait for data coming from USART
 8018244:	e7ea      	b.n	801821c <targetTask+0x34>
 8018246:	bf00      	nop
 8018248:	24020000 	.word	0x24020000

0801824c <spawnNewTarget>:
}



static void spawnNewTarget()
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b0aa      	sub	sp, #168	; 0xa8
 8018250:	af00      	add	r7, sp, #0
   #if DUALCOREFUZZ == 0
   //uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
   Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8018252:	4b29      	ldr	r3, [pc, #164]	; (80182f8 <spawnNewTarget+0xac>)
 8018254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   #endif

   TaskParameters_t targetTaskParameters =
 8018258:	1d3b      	adds	r3, r7, #4
 801825a:	22a0      	movs	r2, #160	; 0xa0
 801825c:	2100      	movs	r1, #0
 801825e:	4618      	mov	r0, r3
 8018260:	f003 f992 	bl	801b588 <memset>
 8018264:	4b25      	ldr	r3, [pc, #148]	; (80182fc <spawnNewTarget+0xb0>)
 8018266:	607b      	str	r3, [r7, #4]
 8018268:	4b25      	ldr	r3, [pc, #148]	; (8018300 <spawnNewTarget+0xb4>)
 801826a:	60bb      	str	r3, [r7, #8]
 801826c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018270:	81bb      	strh	r3, [r7, #12]
 8018272:	2314      	movs	r3, #20
 8018274:	617b      	str	r3, [r7, #20]
 8018276:	4b23      	ldr	r3, [pc, #140]	; (8018304 <spawnNewTarget+0xb8>)
 8018278:	61bb      	str	r3, [r7, #24]
 801827a:	4b1f      	ldr	r3, [pc, #124]	; (80182f8 <spawnNewTarget+0xac>)
 801827c:	61fb      	str	r3, [r7, #28]
 801827e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8018282:	623b      	str	r3, [r7, #32]
 8018284:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8018288:	627b      	str	r3, [r7, #36]	; 0x24
 801828a:	4b1f      	ldr	r3, [pc, #124]	; (8018308 <spawnNewTarget+0xbc>)
 801828c:	62bb      	str	r3, [r7, #40]	; 0x28
 801828e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018294:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8018298:	633b      	str	r3, [r7, #48]	; 0x30
 801829a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801829e:	637b      	str	r3, [r7, #52]	; 0x34
 80182a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80182a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80182a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80182aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80182ac:	4b17      	ldr	r3, [pc, #92]	; (801830c <spawnNewTarget+0xc0>)
 80182ae:	643b      	str	r3, [r7, #64]	; 0x40
 80182b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80182b4:	647b      	str	r3, [r7, #68]	; 0x44
 80182b6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80182ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80182bc:	4b14      	ldr	r3, [pc, #80]	; (8018310 <spawnNewTarget+0xc4>)
 80182be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80182c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80182c4:	653b      	str	r3, [r7, #80]	; 0x50
 80182c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80182ca:	657b      	str	r3, [r7, #84]	; 0x54
 80182cc:	4b11      	ldr	r3, [pc, #68]	; (8018314 <spawnNewTarget+0xc8>)
 80182ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80182d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80182d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80182d6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80182da:	663b      	str	r3, [r7, #96]	; 0x60

   };


   //create a new task
   xTaskCreateRestricted( &( targetTaskParameters ), &AFLfuzzer.xTaskTarget );
 80182dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80182e0:	f646 0370 	movw	r3, #26736	; 0x6870
 80182e4:	4413      	add	r3, r2
 80182e6:	1d3a      	adds	r2, r7, #4
 80182e8:	4619      	mov	r1, r3
 80182ea:	4610      	mov	r0, r2
 80182ec:	f7ea ff87 	bl	80031fe <xTaskCreateRestricted>

}
 80182f0:	bf00      	nop
 80182f2:	37a8      	adds	r7, #168	; 0xa8
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	24020000 	.word	0x24020000
 80182fc:	080181e9 	.word	0x080181e9
 8018300:	2400841c 	.word	0x2400841c
 8018304:	24031000 	.word	0x24031000
 8018308:	24036000 	.word	0x24036000
 801830c:	24033100 	.word	0x24033100
 8018310:	24033300 	.word	0x24033300
 8018314:	24033500 	.word	0x24033500

08018318 <fuzzerTask>:

uint16_t *indexdifP;
uint8_t  bufferDMA[550];
static void fuzzerTask( void * pvParameters )
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b090      	sub	sp, #64	; 0x40
 801831c:	af02      	add	r7, sp, #8
 801831e:	6078      	str	r0, [r7, #4]
	/* Unused parameters. */
	( void ) pvParameters;
	uint32_t notificationvalue;
	uint32_t numberofcycles;
	int i;
	int refreshtarget = 0;
 8018320:	2300      	movs	r3, #0
 8018322:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if DUALCOREFUZZ == 0
	//uint16_t *paflbitmap =  (uint16_t *)DTCMRAMORIGIN;
    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 8018324:	4bb5      	ldr	r3, [pc, #724]	; (80185fc <fuzzerTask+0x2e4>)
 8018326:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *paflbitmap =  pAFLfuzzer->aflbmp;
 8018328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801832a:	627b      	str	r3, [r7, #36]	; 0x24
    #endif

    indexdifP = &AFLfuzzer.indexdif;
 801832c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801832e:	f646 0362 	movw	r3, #26722	; 0x6862
 8018332:	4413      	add	r3, r2
 8018334:	4ab2      	ldr	r2, [pc, #712]	; (8018600 <fuzzerTask+0x2e8>)
 8018336:	6013      	str	r3, [r2, #0]

    		   AFLfuzzer.receiving = false;
	           HAL_UART_Receive_IT(&huart3, AFLfuzzer.inputAFL.uxBuffer, 4);
	           //HAL_UARTEx_ReceiveToIdle_DMA(&huart3, bufferDMA, MAX_BUFFER_INPUT);
    #endif
	MX_USB_DEVICE_Init();
 8018338:	f002 fa66 	bl	801a808 <MX_USB_DEVICE_Init>
	error_cnt = 0;
 801833c:	4bb1      	ldr	r3, [pc, #708]	; (8018604 <fuzzerTask+0x2ec>)
 801833e:	2200      	movs	r2, #0
 8018340:	601a      	str	r2, [r3, #0]
	 * 1: Notification from USB USART driver to the fuzzer task when data has arrived
	 * 2: Notification from target to fuzzer to signal readiness to execute the test
	 * ********/

	/**Lets poison the AFLfuzzer structure**/
	uint32_t *HelperShadow =  (uint32_t *)( ((uint32_t)pAFLfuzzer>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 8018342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018344:	08db      	lsrs	r3, r3, #3
 8018346:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 801834a:	623b      	str	r3, [r7, #32]
	uint32_t HelperShadowSize = AFLINPUTREGION_SIZE>>3;
 801834c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018350:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0xff,HelperShadowSize);
 8018352:	69fa      	ldr	r2, [r7, #28]
 8018354:	21ff      	movs	r1, #255	; 0xff
 8018356:	6a38      	ldr	r0, [r7, #32]
 8018358:	f003 f916 	bl	801b588 <memset>
	// the only section that should be accessible by the target is the input buffer, so lets un-poison it
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.inputAFL.uxBuffer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 801835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018362:	08db      	lsrs	r3, r3, #3
 8018364:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018368:	623b      	str	r3, [r7, #32]
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
 801836a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801836e:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0x00,HelperShadowSize);
 8018370:	69fa      	ldr	r2, [r7, #28]
 8018372:	2100      	movs	r1, #0
 8018374:	6a38      	ldr	r0, [r7, #32]
 8018376:	f003 f907 	bl	801b588 <memset>

	//the address of the fuzzer  needs access as well
	HelperShadow =  (uint32_t *)( ((uint32_t)(&AFLfuzzer.xTaskFuzzer)>>3) + McuASAN_CONFIG_APP_MEM_OFFSET);
 801837a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801837c:	f646 036c 	movw	r3, #26732	; 0x686c
 8018380:	4413      	add	r3, r2
 8018382:	08db      	lsrs	r3, r3, #3
 8018384:	f103 53dc 	add.w	r3, r3, #461373440	; 0x1b800000
 8018388:	623b      	str	r3, [r7, #32]
	HelperShadowSize = MAX_BUFFER_INPUT>>3;
 801838a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801838e:	61fb      	str	r3, [r7, #28]
	memset((void *)HelperShadow, 0x00,4);
 8018390:	2204      	movs	r2, #4
 8018392:	2100      	movs	r1, #0
 8018394:	6a38      	ldr	r0, [r7, #32]
 8018396:	f003 f8f7 	bl	801b588 <memset>

	//these redzones are MPU protected
	memset(redzone1,0xaa,sizeof(redzone1));
 801839a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801839e:	21aa      	movs	r1, #170	; 0xaa
 80183a0:	4899      	ldr	r0, [pc, #612]	; (8018608 <fuzzerTask+0x2f0>)
 80183a2:	f003 f8f1 	bl	801b588 <memset>
	memset(redzone2,0xbb,sizeof(redzone2));
 80183a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80183aa:	21bb      	movs	r1, #187	; 0xbb
 80183ac:	4897      	ldr	r0, [pc, #604]	; (801860c <fuzzerTask+0x2f4>)
 80183ae:	f003 f8eb 	bl	801b588 <memset>
	memset(redzone3,0xbb,sizeof(redzone3));
 80183b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80183b6:	21bb      	movs	r1, #187	; 0xbb
 80183b8:	4895      	ldr	r0, [pc, #596]	; (8018610 <fuzzerTask+0x2f8>)
 80183ba:	f003 f8e5 	bl	801b588 <memset>

	numberofcycles = 0;
 80183be:	2300      	movs	r3, #0
 80183c0:	637b      	str	r3, [r7, #52]	; 0x34
	spawnNewTarget(); // we pass 0 since we don't need to delete the semaphore the first time
 80183c2:	f7ff ff43 	bl	801824c <spawnNewTarget>
	// wait for the target task notification when ready
	ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80183c6:	220a      	movs	r2, #10
 80183c8:	2101      	movs	r1, #1
 80183ca:	2002      	movs	r0, #2
 80183cc:	f7f0 f804 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>

	for( ; ; )
	{

		// we will wait for a notification on index 1 when fuzzing data has arrived through USB-CDC
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 80183d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183d4:	2101      	movs	r1, #1
 80183d6:	2001      	movs	r0, #1
 80183d8:	f7ef fffe 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
		{

			//send the payload through USART2 TX  pin PD5
			HAL_UART_Transmit(&huart2,&AFLfuzzer.inputAFL.uxBuffer[4] , AFLfuzzer.inputAFL.u32availablenopad-4, 100);
 80183dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183de:	f246 0104 	movw	r1, #24580	; 0x6004
 80183e2:	4419      	add	r1, r3
 80183e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80183ea:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80183ee:	b29b      	uxth	r3, r3
 80183f0:	3b04      	subs	r3, #4
 80183f2:	b29a      	uxth	r2, r3
 80183f4:	2364      	movs	r3, #100	; 0x64
 80183f6:	4887      	ldr	r0, [pc, #540]	; (8018614 <fuzzerTask+0x2fc>)
 80183f8:	f7fb faa8 	bl	801394c <HAL_UART_Transmit>
			while(ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT) != 1) //check if data was received by the target through USART on index 2
 80183fc:	e023      	b.n	8018446 <fuzzerTask+0x12e>
			{
				//if we do not receive  a confirmation we delete and recreate the target
				// the target will reconfigure USART4 in RX DMA mode
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 80183fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018400:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018404:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018408:	4618      	mov	r0, r3
 801840a:	f7ef fe85 	bl	8008118 <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 801840e:	df01      	svc	1
				 numberofcycles = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 8018414:	f7ff ff1a 	bl	801824c <spawnNewTarget>
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 8018418:	220a      	movs	r2, #10
 801841a:	2101      	movs	r1, #1
 801841c:	2002      	movs	r0, #2
 801841e:	f7ef ffdb 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
				 //send the payload through USART TX  pin PD5
				 HAL_UART_Transmit(&huart2,&AFLfuzzer.inputAFL.uxBuffer[4] , AFLfuzzer.inputAFL.u32availablenopad-4, 100);
 8018422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018424:	f246 0104 	movw	r1, #24580	; 0x6004
 8018428:	4419      	add	r1, r3
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801842c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018430:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8018434:	b29b      	uxth	r3, r3
 8018436:	3b04      	subs	r3, #4
 8018438:	b29a      	uxth	r2, r3
 801843a:	2364      	movs	r3, #100	; 0x64
 801843c:	4875      	ldr	r0, [pc, #468]	; (8018614 <fuzzerTask+0x2fc>)
 801843e:	f7fb fa85 	bl	801394c <HAL_UART_Transmit>

				 refreshtarget = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT) != 1) //check if data was received by the target through USART on index 2
 8018446:	2214      	movs	r2, #20
 8018448:	2101      	movs	r1, #1
 801844a:	2002      	movs	r0, #2
 801844c:	f7ef ffc4 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 8018450:	4603      	mov	r3, r0
 8018452:	2b01      	cmp	r3, #1
 8018454:	d1d3      	bne.n	80183fe <fuzzerTask+0xe6>

			}


			AFLfuzzer.previousGuard = 0;
 8018456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018458:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801845c:	2200      	movs	r2, #0
 801845e:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
			memset(paflbitmap, 0, AFL_BITMAP_SIZE_BYTES);
 8018462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8018466:	2100      	movs	r1, #0
 8018468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801846a:	f003 f88d 	bl	801b588 <memset>
			memset(AFLfuzzer.afldiff,0,AFL_BITMAP_SIZE_BYTES/4);
 801846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8018474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018478:	2100      	movs	r1, #0
 801847a:	4618      	mov	r0, r3
 801847c:	f003 f884 	bl	801b588 <memset>
			AFLfuzzer.indexdif = 0;
 8018480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018482:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018486:	2200      	movs	r2, #0
 8018488:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862


			// notify the MODBUS task (target) that data has arrived through USART
			// we need this synchronization back and forward for robustness when working with real peripherals
			// and channels that can trigger hardware errors and hang during fuzzing
			 xTaskNotify(AFLfuzzer.xTaskTarget,0,eSetValueWithOverwrite);
 801848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018492:	f8d3 0870 	ldr.w	r0, [r3, #2160]	; 0x870
 8018496:	2300      	movs	r3, #0
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	2303      	movs	r3, #3
 801849c:	2200      	movs	r2, #0
 801849e:	2100      	movs	r1, #0
 80184a0:	f7ef ff63 	bl	800836a <MPU_xTaskGenericNotify>

			 //we will wait on Index 0 for notification from target task when testing finished
			 notificationvalue = ulTaskNotifyTakeIndexed(0,pdTRUE, TARGET_TIMEOUT);
 80184a4:	2214      	movs	r2, #20
 80184a6:	2101      	movs	r1, #1
 80184a8:	2000      	movs	r0, #0
 80184aa:	f7ef ff95 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 80184ae:	61b8      	str	r0, [r7, #24]

			 if (notificationvalue == 0) // TIMEOUT
 80184b0:	69bb      	ldr	r3, [r7, #24]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d11c      	bne.n	80184f0 <fuzzerTask+0x1d8>
			 {
				 AFLfuzzer.aflheader[0] = FAULT_TMOUT;
 80184b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80184bc:	461a      	mov	r2, r3
 80184be:	2301      	movs	r3, #1
 80184c0:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("Target timeout, starting a new target process...\n");
 80184c4:	4854      	ldr	r0, [pc, #336]	; (8018618 <fuzzerTask+0x300>)
 80184c6:	f003 f9cd 	bl	801b864 <puts>
			     //We need to kill the target task and spawn a new target
				 vTaskDelete(AFLfuzzer.xTaskTarget);
 80184ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184cc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80184d0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7ef fe1f 	bl	8008118 <MPU_vTaskDelete>
				 taskYIELD(); //lets the kernel clean the TCB
 80184da:	df01      	svc	1
				 numberofcycles = 0;
 80184dc:	2300      	movs	r3, #0
 80184de:	637b      	str	r3, [r7, #52]	; 0x34
				 spawnNewTarget();
 80184e0:	f7ff feb4 	bl	801824c <spawnNewTarget>
				 // wait for the target task notification when ready
				 ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80184e4:	220a      	movs	r2, #10
 80184e6:	2101      	movs	r1, #1
 80184e8:	2002      	movs	r0, #2
 80184ea:	f7ef ff75 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
 80184ee:	e0c7      	b.n	8018680 <fuzzerTask+0x368>


			 }
			 else if(notificationvalue == FAULT_ASAN)
 80184f0:	69bb      	ldr	r3, [r7, #24]
 80184f2:	2b09      	cmp	r3, #9
 80184f4:	d145      	bne.n	8018582 <fuzzerTask+0x26a>
			 {

				 i= 0;
 80184f6:	2300      	movs	r3, #0
 80184f8:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 80184fa:	e01d      	b.n	8018538 <fuzzerTask+0x220>
				 {
					 if(AFLfuzzer.allocs[i])
 80184fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018500:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018504:	440b      	add	r3, r1
 8018506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d011      	beq.n	8018532 <fuzzerTask+0x21a>
				     {
						 free(AFLfuzzer.allocs[i]);
 801850e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018512:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018516:	440b      	add	r3, r1
 8018518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801851c:	4618      	mov	r0, r3
 801851e:	f003 f81d 	bl	801b55c <free>
						 AFLfuzzer.allocs[i] = NULL;
 8018522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018526:	f641 230c 	movw	r3, #6668	; 0x1a0c
 801852a:	440b      	add	r3, r1
 801852c:	2100      	movs	r1, #0
 801852e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					 }
					 i++;
 8018532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018534:	3301      	adds	r3, #1
 8018536:	633b      	str	r3, [r7, #48]	; 0x30
				 while(i<McuASAN_MAX_NUMBER_ALLOCS) //clean malloc allocations if any
 8018538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853a:	2b09      	cmp	r3, #9
 801853c:	ddde      	ble.n	80184fc <fuzzerTask+0x1e4>
				  }
				  notificationvalue = FAULT_CRASH;
 801853e:	2302      	movs	r3, #2
 8018540:	61bb      	str	r3, [r7, #24]
				  AFLfuzzer.aflheader[0] = notificationvalue;
 8018542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018544:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018548:	461a      	mov	r2, r3
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				  printf("ASAN violation %s \n", (char *)EX_str[AFLfuzzer.xTypeEx]);
 8018550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018552:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018556:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 801855a:	461a      	mov	r2, r3
 801855c:	4b2f      	ldr	r3, [pc, #188]	; (801861c <fuzzerTask+0x304>)
 801855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018562:	4619      	mov	r1, r3
 8018564:	482e      	ldr	r0, [pc, #184]	; (8018620 <fuzzerTask+0x308>)
 8018566:	f003 f8f7 	bl	801b758 <iprintf>
				  vTaskDelete(AFLfuzzer.xTaskTarget);
 801856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801856c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018570:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018574:	4618      	mov	r0, r3
 8018576:	f7ef fdcf 	bl	8008118 <MPU_vTaskDelete>
				  taskYIELD();
 801857a:	df01      	svc	1
				  refreshtarget = 1;
 801857c:	2301      	movs	r3, #1
 801857e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018580:	e07e      	b.n	8018680 <fuzzerTask+0x368>
			 }
			 else if(notificationvalue == FAULT_CRASH)
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	2b02      	cmp	r3, #2
 8018586:	d11d      	bne.n	80185c4 <fuzzerTask+0x2ac>
			 {
				 AFLfuzzer.aflheader[0] = notificationvalue;
 8018588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801858a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801858e:	461a      	mov	r2, r3
 8018590:	69bb      	ldr	r3, [r7, #24]
 8018592:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
				 printf("T. crash at: 0x%x, %s \n", (unsigned int)AFLfuzzer.PCcrash, (char *)EX_str[AFLfuzzer.xTypeEx]);
 8018596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018598:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801859c:	f8d3 1868 	ldr.w	r1, [r3, #2152]	; 0x868
 80185a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80185a6:	f893 3874 	ldrb.w	r3, [r3, #2164]	; 0x874
 80185aa:	461a      	mov	r2, r3
 80185ac:	4b1b      	ldr	r3, [pc, #108]	; (801861c <fuzzerTask+0x304>)
 80185ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185b2:	461a      	mov	r2, r3
 80185b4:	481b      	ldr	r0, [pc, #108]	; (8018624 <fuzzerTask+0x30c>)
 80185b6:	f003 f8cf 	bl	801b758 <iprintf>
				 //The target process was already killed in the Fault Handler ISR,
				 //We need to spawn a new target task
				 numberofcycles = 0;
 80185ba:	2300      	movs	r3, #0
 80185bc:	637b      	str	r3, [r7, #52]	; 0x34
				 refreshtarget = 1;
 80185be:	2301      	movs	r3, #1
 80185c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80185c2:	e05d      	b.n	8018680 <fuzzerTask+0x368>


			 }
			 else if (notificationvalue == FAULT_NONE_RTOS)
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	2b08      	cmp	r3, #8
 80185c8:	d15a      	bne.n	8018680 <fuzzerTask+0x368>
			 {
				 // we need this because 0 means timeout for the RTOS notification system
				notificationvalue = FAULT_NONE;
 80185ca:	2300      	movs	r3, #0
 80185cc:	61bb      	str	r3, [r7, #24]
				AFLfuzzer.aflheader[0] = notificationvalue;
 80185ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80185d4:	461a      	mov	r2, r3
 80185d6:	69bb      	ldr	r3, [r7, #24]
 80185d8:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814

#if PERSISTENT_MODE
				numberofcycles++;
 80185dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185de:	3301      	adds	r3, #1
 80185e0:	637b      	str	r3, [r7, #52]	; 0x34
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS && refreshtarget==0)
 80185e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80185e8:	d34a      	bcc.n	8018680 <fuzzerTask+0x368>
 80185ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d147      	bne.n	8018680 <fuzzerTask+0x368>
				{
					numberofcycles=0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
					i = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	633b      	str	r3, [r7, #48]	; 0x30

					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 80185f8:	e034      	b.n	8018664 <fuzzerTask+0x34c>
 80185fa:	bf00      	nop
 80185fc:	24020000 	.word	0x24020000
 8018600:	24033514 	.word	0x24033514
 8018604:	24030000 	.word	0x24030000
 8018608:	24033000 	.word	0x24033000
 801860c:	24033200 	.word	0x24033200
 8018610:	24033400 	.word	0x24033400
 8018614:	24011774 	.word	0x24011774
 8018618:	24008424 	.word	0x24008424
 801861c:	24008040 	.word	0x24008040
 8018620:	24008458 	.word	0x24008458
 8018624:	2400846c 	.word	0x2400846c
					{
						 if(AFLfuzzer.allocs[i])
 8018628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801862a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801862c:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018630:	440b      	add	r3, r1
 8018632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d011      	beq.n	801865e <fuzzerTask+0x346>
						 {
							 free(AFLfuzzer.allocs[i]);
 801863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801863c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801863e:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018642:	440b      	add	r3, r1
 8018644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018648:	4618      	mov	r0, r3
 801864a:	f002 ff87 	bl	801b55c <free>
							 AFLfuzzer.allocs[i] = NULL;
 801864e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018652:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018656:	440b      	add	r3, r1
 8018658:	2100      	movs	r1, #0
 801865a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						 }
							 i++;
 801865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018660:	3301      	adds	r3, #1
 8018662:	633b      	str	r3, [r7, #48]	; 0x30
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8018664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018666:	2b09      	cmp	r3, #9
 8018668:	ddde      	ble.n	8018628 <fuzzerTask+0x310>
					}
					vTaskDelete(AFLfuzzer.xTaskTarget);
 801866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801866c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018670:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018674:	4618      	mov	r0, r3
 8018676:	f7ef fd4f 	bl	8008118 <MPU_vTaskDelete>
				    taskYIELD();
 801867a:	df01      	svc	1
				    refreshtarget = 1;
 801867c:	2301      	movs	r3, #1
 801867e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
#endif

			 }

			 AFLfuzzer.aflheader[1] = (AFLfuzzer.indexdif * sizeof(tuple_t)  + 4 );
 8018680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018682:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018686:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 801868a:	3301      	adds	r3, #1
 801868c:	009b      	lsls	r3, r3, #2
 801868e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018690:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8018694:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818

			 tuple_t *auxdiff = AFLfuzzer.afldiff + 1; // the first tuple is empty so we can skip it
 8018698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801869e:	3304      	adds	r3, #4
 80186a0:	617b      	str	r3, [r7, #20]
			 union ubytes_t *crcbytes;
			 crcbytes = (union ubytes_t *)(auxdiff + AFLfuzzer.indexdif); //set CRC bytes * at the end of the tuple array
 80186a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80186a8:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	697a      	ldr	r2, [r7, #20]
 80186b0:	4413      	add	r3, r2
 80186b2:	613b      	str	r3, [r7, #16]

			 //calculate the CRC of the return value and payload size
			 uint32_t uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)AFLfuzzer.aflheader, 2);
 80186b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186b6:	f646 0314 	movw	r3, #26644	; 0x6814
 80186ba:	4413      	add	r3, r2
 80186bc:	2202      	movs	r2, #2
 80186be:	4619      	mov	r1, r3
 80186c0:	4854      	ldr	r0, [pc, #336]	; (8018814 <fuzzerTask+0x4fc>)
 80186c2:	f7f3 fa0b 	bl	800badc <HAL_CRC_Calculate>
 80186c6:	60f8      	str	r0, [r7, #12]
			 //calculate the CRC of the tuples (payload)
			 uwCRCValue = HAL_CRC_Accumulate(&hcrc, (uint32_t *)auxdiff, AFLfuzzer.indexdif);
 80186c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80186ce:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
 80186d2:	461a      	mov	r2, r3
 80186d4:	6979      	ldr	r1, [r7, #20]
 80186d6:	484f      	ldr	r0, [pc, #316]	; (8018814 <fuzzerTask+0x4fc>)
 80186d8:	f7f3 f9bc 	bl	800ba54 <HAL_CRC_Accumulate>
 80186dc:	60f8      	str	r0, [r7, #12]

			 // invert the CRC to match the zlib method
			 crcbytes->vuint32 = ~uwCRCValue; //write the CRC at the end of the buffer
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	43da      	mvns	r2, r3
 80186e2:	693b      	ldr	r3, [r7, #16]
 80186e4:	601a      	str	r2, [r3, #0]
			 AFLfuzzer.bTXcomplete = false;
 80186e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80186ec:	2200      	movs	r2, #0
 80186ee:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)AFLfuzzer.aflheader, 8);
 80186f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186f4:	f646 0314 	movw	r3, #26644	; 0x6814
 80186f8:	4413      	add	r3, r2
 80186fa:	2108      	movs	r1, #8
 80186fc:	4618      	mov	r0, r3
 80186fe:	f002 f947 	bl	801a990 <CDC_Transmit_FS>
			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 8018702:	220a      	movs	r2, #10
 8018704:	2101      	movs	r1, #1
 8018706:	2001      	movs	r0, #1
 8018708:	f7ef fe66 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
			 AFLfuzzer.bTXcomplete = false;
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018712:	2200      	movs	r2, #0
 8018714:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
			 CDC_Transmit_FS((uint8_t *)auxdiff, AFLfuzzer.aflheader[1]);
 8018718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801871e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8018722:	b29b      	uxth	r3, r3
 8018724:	4619      	mov	r1, r3
 8018726:	6978      	ldr	r0, [r7, #20]
 8018728:	f002 f932 	bl	801a990 <CDC_Transmit_FS>

			 //while(AFLfuzzer.bTXcomplete ==false); //wait for end of transmission
			 ulTaskNotifyTakeIndexed(1,pdTRUE, 10);
 801872c:	220a      	movs	r2, #10
 801872e:	2101      	movs	r1, #1
 8018730:	2001      	movs	r0, #1
 8018732:	f7ef fe51 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>


#if PERSISTENT_MODE
				numberofcycles++;
 8018736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018738:	3301      	adds	r3, #1
 801873a:	637b      	str	r3, [r7, #52]	; 0x34
				if(numberofcycles>=FUZZING_CYCLES_IN_PROCESS && refreshtarget==0)
 801873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801873e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018742:	d333      	bcc.n	80187ac <fuzzerTask+0x494>
 8018744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018746:	2b00      	cmp	r3, #0
 8018748:	d130      	bne.n	80187ac <fuzzerTask+0x494>
				{
					numberofcycles=0;
 801874a:	2300      	movs	r3, #0
 801874c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
					i = 0;
 801874e:	2300      	movs	r3, #0
 8018750:	633b      	str	r3, [r7, #48]	; 0x30

					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8018752:	e01d      	b.n	8018790 <fuzzerTask+0x478>
					{
						 if(AFLfuzzer.allocs[i])
 8018754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018758:	f641 230c 	movw	r3, #6668	; 0x1a0c
 801875c:	440b      	add	r3, r1
 801875e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d011      	beq.n	801878a <fuzzerTask+0x472>
						 {
							 free(AFLfuzzer.allocs[i]);
 8018766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801876a:	f641 230c 	movw	r3, #6668	; 0x1a0c
 801876e:	440b      	add	r3, r1
 8018770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018774:	4618      	mov	r0, r3
 8018776:	f002 fef1 	bl	801b55c <free>
							 AFLfuzzer.allocs[i] = NULL;
 801877a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801877c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801877e:	f641 230c 	movw	r3, #6668	; 0x1a0c
 8018782:	440b      	add	r3, r1
 8018784:	2100      	movs	r1, #0
 8018786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						 }
							 i++;
 801878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878c:	3301      	adds	r3, #1
 801878e:	633b      	str	r3, [r7, #48]	; 0x30
					while(i<McuASAN_MAX_NUMBER_ALLOCS)
 8018790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018792:	2b09      	cmp	r3, #9
 8018794:	ddde      	ble.n	8018754 <fuzzerTask+0x43c>
					}
					vTaskDelete(AFLfuzzer.xTaskTarget);
 8018796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018798:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801879c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7ef fcb9 	bl	8008118 <MPU_vTaskDelete>
				    taskYIELD();
 80187a6:	df01      	svc	1
				    refreshtarget =1;
 80187a8:	2301      	movs	r3, #1
 80187aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if PERSISTENT_MODE
				}
#endif


			 if(refreshtarget)
 80187ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d008      	beq.n	80187c4 <fuzzerTask+0x4ac>
			 {

				refreshtarget= 0;
 80187b2:	2300      	movs	r3, #0
 80187b4:	62fb      	str	r3, [r7, #44]	; 0x2c
				spawnNewTarget();
 80187b6:	f7ff fd49 	bl	801824c <spawnNewTarget>
				ulTaskNotifyTakeIndexed(2,pdTRUE, TARGET_TIMEOUT/2);
 80187ba:	220a      	movs	r2, #10
 80187bc:	2101      	movs	r1, #1
 80187be:	2002      	movs	r0, #2
 80187c0:	f7ef fe0a 	bl	80083d8 <MPU_ulTaskGenericNotifyTake>
			 }


			 AFLfuzzer.bRXcomplete = false;
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80187ca:	2200      	movs	r2, #0
 80187cc:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
			 AFLfuzzer.inputLength = 0;
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80187d6:	461a      	mov	r2, r3
 80187d8:	2300      	movs	r3, #0
 80187da:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
			 AFLfuzzer.previousGuard = 0;
 80187de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80187e4:	2200      	movs	r2, #0
 80187e6:	f8a3 2858 	strh.w	r2, [r3, #2136]	; 0x858
			 RingZeroes(&AFLfuzzer.inputAFL);
 80187ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7f1 ff88 	bl	800a706 <RingZeroes>
		     AFLfuzzer.timespan = HAL_GetTick() - AFLfuzzer.timespan;
 80187f6:	f7f2 ff7b 	bl	800b6f0 <HAL_GetTick>
 80187fa:	4602      	mov	r2, r0
 80187fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8018802:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
 8018806:	1ad3      	subs	r3, r2, r3
 8018808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801880a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 801880e:	f8c2 382c 	str.w	r3, [r2, #2092]	; 0x82c
		ulTaskNotifyTakeIndexed(1,pdTRUE, portMAX_DELAY);
 8018812:	e5dd      	b.n	80183d0 <fuzzerTask+0xb8>
 8018814:	240116ac 	.word	0x240116ac

08018818 <vStartMPUDemo>:
}

#endif

void vStartMPUDemo( void )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b0aa      	sub	sp, #168	; 0xa8
 801881c:	af00      	add	r7, sp, #0

Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 801881e:	4b11      	ldr	r3, [pc, #68]	; (8018864 <vStartMPUDemo+0x4c>)
 8018820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

TaskParameters_t fuzzerTaskParameters =
 8018824:	1d3b      	adds	r3, r7, #4
 8018826:	22a0      	movs	r2, #160	; 0xa0
 8018828:	2100      	movs	r1, #0
 801882a:	4618      	mov	r0, r3
 801882c:	f002 feac 	bl	801b588 <memset>
 8018830:	4b0d      	ldr	r3, [pc, #52]	; (8018868 <vStartMPUDemo+0x50>)
 8018832:	607b      	str	r3, [r7, #4]
 8018834:	4b0d      	ldr	r3, [pc, #52]	; (801886c <vStartMPUDemo+0x54>)
 8018836:	60bb      	str	r3, [r7, #8]
 8018838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801883c:	81bb      	strh	r3, [r7, #12]
 801883e:	4b0c      	ldr	r3, [pc, #48]	; (8018870 <vStartMPUDemo+0x58>)
 8018840:	617b      	str	r3, [r7, #20]
 8018842:	4b0c      	ldr	r3, [pc, #48]	; (8018874 <vStartMPUDemo+0x5c>)
 8018844:	61bb      	str	r3, [r7, #24]
							{ 0, 0, 0 },
					}
};

	/* Create the fuzzer task */
	xTaskCreateRestricted( &( fuzzerTaskParameters ), &AFLfuzzer.xTaskFuzzer );
 8018846:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801884a:	f646 036c 	movw	r3, #26732	; 0x686c
 801884e:	4413      	add	r3, r2
 8018850:	1d3a      	adds	r2, r7, #4
 8018852:	4619      	mov	r1, r3
 8018854:	4610      	mov	r0, r2
 8018856:	f7ea fcd2 	bl	80031fe <xTaskCreateRestricted>
	//spawnNewTarget();

}
 801885a:	bf00      	nop
 801885c:	37a8      	adds	r7, #168	; 0xa8
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	24020000 	.word	0x24020000
 8018868:	08018319 	.word	0x08018319
 801886c:	24008484 	.word	0x24008484
 8018870:	80000014 	.word	0x80000014
 8018874:	24032000 	.word	0x24032000

08018878 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	460b      	mov	r3, r1
 8018882:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018884:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8018888:	f002 fcee 	bl	801b268 <USBD_static_malloc>
 801888c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d109      	bne.n	80188a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	32b0      	adds	r2, #176	; 0xb0
 801889e:	2100      	movs	r1, #0
 80188a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80188a4:	2302      	movs	r3, #2
 80188a6:	e0d4      	b.n	8018a52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80188a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80188ac:	2100      	movs	r1, #0
 80188ae:	68f8      	ldr	r0, [r7, #12]
 80188b0:	f002 fe6a 	bl	801b588 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	32b0      	adds	r2, #176	; 0xb0
 80188be:	68f9      	ldr	r1, [r7, #12]
 80188c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	32b0      	adds	r2, #176	; 0xb0
 80188ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	7c1b      	ldrb	r3, [r3, #16]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d138      	bne.n	8018952 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80188e0:	4b5e      	ldr	r3, [pc, #376]	; (8018a5c <USBD_CDC_Init+0x1e4>)
 80188e2:	7819      	ldrb	r1, [r3, #0]
 80188e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80188e8:	2202      	movs	r2, #2
 80188ea:	6878      	ldr	r0, [r7, #4]
 80188ec:	f002 fb99 	bl	801b022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80188f0:	4b5a      	ldr	r3, [pc, #360]	; (8018a5c <USBD_CDC_Init+0x1e4>)
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	f003 020f 	and.w	r2, r3, #15
 80188f8:	6879      	ldr	r1, [r7, #4]
 80188fa:	4613      	mov	r3, r2
 80188fc:	009b      	lsls	r3, r3, #2
 80188fe:	4413      	add	r3, r2
 8018900:	009b      	lsls	r3, r3, #2
 8018902:	440b      	add	r3, r1
 8018904:	3324      	adds	r3, #36	; 0x24
 8018906:	2201      	movs	r2, #1
 8018908:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801890a:	4b55      	ldr	r3, [pc, #340]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 801890c:	7819      	ldrb	r1, [r3, #0]
 801890e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018912:	2202      	movs	r2, #2
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f002 fb84 	bl	801b022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801891a:	4b51      	ldr	r3, [pc, #324]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	f003 020f 	and.w	r2, r3, #15
 8018922:	6879      	ldr	r1, [r7, #4]
 8018924:	4613      	mov	r3, r2
 8018926:	009b      	lsls	r3, r3, #2
 8018928:	4413      	add	r3, r2
 801892a:	009b      	lsls	r3, r3, #2
 801892c:	440b      	add	r3, r1
 801892e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018932:	2201      	movs	r2, #1
 8018934:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018936:	4b4b      	ldr	r3, [pc, #300]	; (8018a64 <USBD_CDC_Init+0x1ec>)
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	f003 020f 	and.w	r2, r3, #15
 801893e:	6879      	ldr	r1, [r7, #4]
 8018940:	4613      	mov	r3, r2
 8018942:	009b      	lsls	r3, r3, #2
 8018944:	4413      	add	r3, r2
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	440b      	add	r3, r1
 801894a:	3326      	adds	r3, #38	; 0x26
 801894c:	2210      	movs	r2, #16
 801894e:	801a      	strh	r2, [r3, #0]
 8018950:	e035      	b.n	80189be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018952:	4b42      	ldr	r3, [pc, #264]	; (8018a5c <USBD_CDC_Init+0x1e4>)
 8018954:	7819      	ldrb	r1, [r3, #0]
 8018956:	2340      	movs	r3, #64	; 0x40
 8018958:	2202      	movs	r2, #2
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f002 fb61 	bl	801b022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018960:	4b3e      	ldr	r3, [pc, #248]	; (8018a5c <USBD_CDC_Init+0x1e4>)
 8018962:	781b      	ldrb	r3, [r3, #0]
 8018964:	f003 020f 	and.w	r2, r3, #15
 8018968:	6879      	ldr	r1, [r7, #4]
 801896a:	4613      	mov	r3, r2
 801896c:	009b      	lsls	r3, r3, #2
 801896e:	4413      	add	r3, r2
 8018970:	009b      	lsls	r3, r3, #2
 8018972:	440b      	add	r3, r1
 8018974:	3324      	adds	r3, #36	; 0x24
 8018976:	2201      	movs	r2, #1
 8018978:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801897a:	4b39      	ldr	r3, [pc, #228]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 801897c:	7819      	ldrb	r1, [r3, #0]
 801897e:	2340      	movs	r3, #64	; 0x40
 8018980:	2202      	movs	r2, #2
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f002 fb4d 	bl	801b022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018988:	4b35      	ldr	r3, [pc, #212]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 801898a:	781b      	ldrb	r3, [r3, #0]
 801898c:	f003 020f 	and.w	r2, r3, #15
 8018990:	6879      	ldr	r1, [r7, #4]
 8018992:	4613      	mov	r3, r2
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	4413      	add	r3, r2
 8018998:	009b      	lsls	r3, r3, #2
 801899a:	440b      	add	r3, r1
 801899c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80189a0:	2201      	movs	r2, #1
 80189a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80189a4:	4b2f      	ldr	r3, [pc, #188]	; (8018a64 <USBD_CDC_Init+0x1ec>)
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	f003 020f 	and.w	r2, r3, #15
 80189ac:	6879      	ldr	r1, [r7, #4]
 80189ae:	4613      	mov	r3, r2
 80189b0:	009b      	lsls	r3, r3, #2
 80189b2:	4413      	add	r3, r2
 80189b4:	009b      	lsls	r3, r3, #2
 80189b6:	440b      	add	r3, r1
 80189b8:	3326      	adds	r3, #38	; 0x26
 80189ba:	2210      	movs	r2, #16
 80189bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80189be:	4b29      	ldr	r3, [pc, #164]	; (8018a64 <USBD_CDC_Init+0x1ec>)
 80189c0:	7819      	ldrb	r1, [r3, #0]
 80189c2:	2308      	movs	r3, #8
 80189c4:	2203      	movs	r2, #3
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f002 fb2b 	bl	801b022 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80189cc:	4b25      	ldr	r3, [pc, #148]	; (8018a64 <USBD_CDC_Init+0x1ec>)
 80189ce:	781b      	ldrb	r3, [r3, #0]
 80189d0:	f003 020f 	and.w	r2, r3, #15
 80189d4:	6879      	ldr	r1, [r7, #4]
 80189d6:	4613      	mov	r3, r2
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	4413      	add	r3, r2
 80189dc:	009b      	lsls	r3, r3, #2
 80189de:	440b      	add	r3, r1
 80189e0:	3324      	adds	r3, #36	; 0x24
 80189e2:	2201      	movs	r2, #1
 80189e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2200      	movs	r2, #0
 80189ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80189f4:	687a      	ldr	r2, [r7, #4]
 80189f6:	33b0      	adds	r3, #176	; 0xb0
 80189f8:	009b      	lsls	r3, r3, #2
 80189fa:	4413      	add	r3, r2
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	2200      	movs	r2, #0
 8018a06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d101      	bne.n	8018a20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8018a1c:	2302      	movs	r3, #2
 8018a1e:	e018      	b.n	8018a52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	7c1b      	ldrb	r3, [r3, #16]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d10a      	bne.n	8018a3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018a28:	4b0d      	ldr	r3, [pc, #52]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 8018a2a:	7819      	ldrb	r1, [r3, #0]
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f002 fbe2 	bl	801b200 <USBD_LL_PrepareReceive>
 8018a3c:	e008      	b.n	8018a50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018a3e:	4b08      	ldr	r3, [pc, #32]	; (8018a60 <USBD_CDC_Init+0x1e8>)
 8018a40:	7819      	ldrb	r1, [r3, #0]
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018a48:	2340      	movs	r3, #64	; 0x40
 8018a4a:	6878      	ldr	r0, [r7, #4]
 8018a4c:	f002 fbd8 	bl	801b200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018a50:	2300      	movs	r3, #0
}
 8018a52:	4618      	mov	r0, r3
 8018a54:	3710      	adds	r7, #16
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	240080ff 	.word	0x240080ff
 8018a60:	24008100 	.word	0x24008100
 8018a64:	24008101 	.word	0x24008101

08018a68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
 8018a70:	460b      	mov	r3, r1
 8018a72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8018a74:	4b3a      	ldr	r3, [pc, #232]	; (8018b60 <USBD_CDC_DeInit+0xf8>)
 8018a76:	781b      	ldrb	r3, [r3, #0]
 8018a78:	4619      	mov	r1, r3
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f002 faf7 	bl	801b06e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8018a80:	4b37      	ldr	r3, [pc, #220]	; (8018b60 <USBD_CDC_DeInit+0xf8>)
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	f003 020f 	and.w	r2, r3, #15
 8018a88:	6879      	ldr	r1, [r7, #4]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	009b      	lsls	r3, r3, #2
 8018a8e:	4413      	add	r3, r2
 8018a90:	009b      	lsls	r3, r3, #2
 8018a92:	440b      	add	r3, r1
 8018a94:	3324      	adds	r3, #36	; 0x24
 8018a96:	2200      	movs	r2, #0
 8018a98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8018a9a:	4b32      	ldr	r3, [pc, #200]	; (8018b64 <USBD_CDC_DeInit+0xfc>)
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	4619      	mov	r1, r3
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f002 fae4 	bl	801b06e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8018aa6:	4b2f      	ldr	r3, [pc, #188]	; (8018b64 <USBD_CDC_DeInit+0xfc>)
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	f003 020f 	and.w	r2, r3, #15
 8018aae:	6879      	ldr	r1, [r7, #4]
 8018ab0:	4613      	mov	r3, r2
 8018ab2:	009b      	lsls	r3, r3, #2
 8018ab4:	4413      	add	r3, r2
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	440b      	add	r3, r1
 8018aba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018abe:	2200      	movs	r2, #0
 8018ac0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8018ac2:	4b29      	ldr	r3, [pc, #164]	; (8018b68 <USBD_CDC_DeInit+0x100>)
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	4619      	mov	r1, r3
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f002 fad0 	bl	801b06e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8018ace:	4b26      	ldr	r3, [pc, #152]	; (8018b68 <USBD_CDC_DeInit+0x100>)
 8018ad0:	781b      	ldrb	r3, [r3, #0]
 8018ad2:	f003 020f 	and.w	r2, r3, #15
 8018ad6:	6879      	ldr	r1, [r7, #4]
 8018ad8:	4613      	mov	r3, r2
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	4413      	add	r3, r2
 8018ade:	009b      	lsls	r3, r3, #2
 8018ae0:	440b      	add	r3, r1
 8018ae2:	3324      	adds	r3, #36	; 0x24
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8018ae8:	4b1f      	ldr	r3, [pc, #124]	; (8018b68 <USBD_CDC_DeInit+0x100>)
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	f003 020f 	and.w	r2, r3, #15
 8018af0:	6879      	ldr	r1, [r7, #4]
 8018af2:	4613      	mov	r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	4413      	add	r3, r2
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	440b      	add	r3, r1
 8018afc:	3326      	adds	r3, #38	; 0x26
 8018afe:	2200      	movs	r2, #0
 8018b00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	32b0      	adds	r2, #176	; 0xb0
 8018b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d01f      	beq.n	8018b54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018b1a:	687a      	ldr	r2, [r7, #4]
 8018b1c:	33b0      	adds	r3, #176	; 0xb0
 8018b1e:	009b      	lsls	r3, r3, #2
 8018b20:	4413      	add	r3, r2
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	32b0      	adds	r2, #176	; 0xb0
 8018b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b36:	4618      	mov	r0, r3
 8018b38:	f002 fba4 	bl	801b284 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	32b0      	adds	r2, #176	; 0xb0
 8018b46:	2100      	movs	r1, #0
 8018b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	2200      	movs	r2, #0
 8018b50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8018b54:	2300      	movs	r3, #0
}
 8018b56:	4618      	mov	r0, r3
 8018b58:	3708      	adds	r7, #8
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	240080ff 	.word	0x240080ff
 8018b64:	24008100 	.word	0x24008100
 8018b68:	24008101 	.word	0x24008101

08018b6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b086      	sub	sp, #24
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	32b0      	adds	r2, #176	; 0xb0
 8018b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018b86:	2300      	movs	r3, #0
 8018b88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d101      	bne.n	8018b9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8018b98:	2303      	movs	r3, #3
 8018b9a:	e0bf      	b.n	8018d1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	781b      	ldrb	r3, [r3, #0]
 8018ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d050      	beq.n	8018c4a <USBD_CDC_Setup+0xde>
 8018ba8:	2b20      	cmp	r3, #32
 8018baa:	f040 80af 	bne.w	8018d0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018bae:	683b      	ldr	r3, [r7, #0]
 8018bb0:	88db      	ldrh	r3, [r3, #6]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d03a      	beq.n	8018c2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	b25b      	sxtb	r3, r3
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	da1b      	bge.n	8018bf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	33b0      	adds	r3, #176	; 0xb0
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	4413      	add	r3, r2
 8018bce:	685b      	ldr	r3, [r3, #4]
 8018bd0:	689b      	ldr	r3, [r3, #8]
 8018bd2:	683a      	ldr	r2, [r7, #0]
 8018bd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8018bd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018bd8:	683a      	ldr	r2, [r7, #0]
 8018bda:	88d2      	ldrh	r2, [r2, #6]
 8018bdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	88db      	ldrh	r3, [r3, #6]
 8018be2:	2b07      	cmp	r3, #7
 8018be4:	bf28      	it	cs
 8018be6:	2307      	movcs	r3, #7
 8018be8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	89fa      	ldrh	r2, [r7, #14]
 8018bee:	4619      	mov	r1, r3
 8018bf0:	6878      	ldr	r0, [r7, #4]
 8018bf2:	f001 fd89 	bl	801a708 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8018bf6:	e090      	b.n	8018d1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	785a      	ldrb	r2, [r3, #1]
 8018bfc:	693b      	ldr	r3, [r7, #16]
 8018bfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	88db      	ldrh	r3, [r3, #6]
 8018c06:	2b3f      	cmp	r3, #63	; 0x3f
 8018c08:	d803      	bhi.n	8018c12 <USBD_CDC_Setup+0xa6>
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	88db      	ldrh	r3, [r3, #6]
 8018c0e:	b2da      	uxtb	r2, r3
 8018c10:	e000      	b.n	8018c14 <USBD_CDC_Setup+0xa8>
 8018c12:	2240      	movs	r2, #64	; 0x40
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8018c1a:	6939      	ldr	r1, [r7, #16]
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8018c22:	461a      	mov	r2, r3
 8018c24:	6878      	ldr	r0, [r7, #4]
 8018c26:	f001 fd9b 	bl	801a760 <USBD_CtlPrepareRx>
      break;
 8018c2a:	e076      	b.n	8018d1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018c32:	687a      	ldr	r2, [r7, #4]
 8018c34:	33b0      	adds	r3, #176	; 0xb0
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	4413      	add	r3, r2
 8018c3a:	685b      	ldr	r3, [r3, #4]
 8018c3c:	689b      	ldr	r3, [r3, #8]
 8018c3e:	683a      	ldr	r2, [r7, #0]
 8018c40:	7850      	ldrb	r0, [r2, #1]
 8018c42:	2200      	movs	r2, #0
 8018c44:	6839      	ldr	r1, [r7, #0]
 8018c46:	4798      	blx	r3
      break;
 8018c48:	e067      	b.n	8018d1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	785b      	ldrb	r3, [r3, #1]
 8018c4e:	2b0b      	cmp	r3, #11
 8018c50:	d851      	bhi.n	8018cf6 <USBD_CDC_Setup+0x18a>
 8018c52:	a201      	add	r2, pc, #4	; (adr r2, 8018c58 <USBD_CDC_Setup+0xec>)
 8018c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c58:	08018c89 	.word	0x08018c89
 8018c5c:	08018d05 	.word	0x08018d05
 8018c60:	08018cf7 	.word	0x08018cf7
 8018c64:	08018cf7 	.word	0x08018cf7
 8018c68:	08018cf7 	.word	0x08018cf7
 8018c6c:	08018cf7 	.word	0x08018cf7
 8018c70:	08018cf7 	.word	0x08018cf7
 8018c74:	08018cf7 	.word	0x08018cf7
 8018c78:	08018cf7 	.word	0x08018cf7
 8018c7c:	08018cf7 	.word	0x08018cf7
 8018c80:	08018cb3 	.word	0x08018cb3
 8018c84:	08018cdd 	.word	0x08018cdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c8e:	b2db      	uxtb	r3, r3
 8018c90:	2b03      	cmp	r3, #3
 8018c92:	d107      	bne.n	8018ca4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018c94:	f107 030a 	add.w	r3, r7, #10
 8018c98:	2202      	movs	r2, #2
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f001 fd33 	bl	801a708 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018ca2:	e032      	b.n	8018d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018ca4:	6839      	ldr	r1, [r7, #0]
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f001 fcbd 	bl	801a626 <USBD_CtlError>
            ret = USBD_FAIL;
 8018cac:	2303      	movs	r3, #3
 8018cae:	75fb      	strb	r3, [r7, #23]
          break;
 8018cb0:	e02b      	b.n	8018d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	2b03      	cmp	r3, #3
 8018cbc:	d107      	bne.n	8018cce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8018cbe:	f107 030d 	add.w	r3, r7, #13
 8018cc2:	2201      	movs	r2, #1
 8018cc4:	4619      	mov	r1, r3
 8018cc6:	6878      	ldr	r0, [r7, #4]
 8018cc8:	f001 fd1e 	bl	801a708 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018ccc:	e01d      	b.n	8018d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018cce:	6839      	ldr	r1, [r7, #0]
 8018cd0:	6878      	ldr	r0, [r7, #4]
 8018cd2:	f001 fca8 	bl	801a626 <USBD_CtlError>
            ret = USBD_FAIL;
 8018cd6:	2303      	movs	r3, #3
 8018cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8018cda:	e016      	b.n	8018d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ce2:	b2db      	uxtb	r3, r3
 8018ce4:	2b03      	cmp	r3, #3
 8018ce6:	d00f      	beq.n	8018d08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8018ce8:	6839      	ldr	r1, [r7, #0]
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f001 fc9b 	bl	801a626 <USBD_CtlError>
            ret = USBD_FAIL;
 8018cf0:	2303      	movs	r3, #3
 8018cf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018cf4:	e008      	b.n	8018d08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018cf6:	6839      	ldr	r1, [r7, #0]
 8018cf8:	6878      	ldr	r0, [r7, #4]
 8018cfa:	f001 fc94 	bl	801a626 <USBD_CtlError>
          ret = USBD_FAIL;
 8018cfe:	2303      	movs	r3, #3
 8018d00:	75fb      	strb	r3, [r7, #23]
          break;
 8018d02:	e002      	b.n	8018d0a <USBD_CDC_Setup+0x19e>
          break;
 8018d04:	bf00      	nop
 8018d06:	e008      	b.n	8018d1a <USBD_CDC_Setup+0x1ae>
          break;
 8018d08:	bf00      	nop
      }
      break;
 8018d0a:	e006      	b.n	8018d1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8018d0c:	6839      	ldr	r1, [r7, #0]
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	f001 fc89 	bl	801a626 <USBD_CtlError>
      ret = USBD_FAIL;
 8018d14:	2303      	movs	r3, #3
 8018d16:	75fb      	strb	r3, [r7, #23]
      break;
 8018d18:	bf00      	nop
  }

  return (uint8_t)ret;
 8018d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3718      	adds	r7, #24
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b084      	sub	sp, #16
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
 8018d2c:	460b      	mov	r3, r1
 8018d2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018d36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	32b0      	adds	r2, #176	; 0xb0
 8018d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d101      	bne.n	8018d4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8018d4a:	2303      	movs	r3, #3
 8018d4c:	e065      	b.n	8018e1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	32b0      	adds	r2, #176	; 0xb0
 8018d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018d5e:	78fb      	ldrb	r3, [r7, #3]
 8018d60:	f003 020f 	and.w	r2, r3, #15
 8018d64:	6879      	ldr	r1, [r7, #4]
 8018d66:	4613      	mov	r3, r2
 8018d68:	009b      	lsls	r3, r3, #2
 8018d6a:	4413      	add	r3, r2
 8018d6c:	009b      	lsls	r3, r3, #2
 8018d6e:	440b      	add	r3, r1
 8018d70:	3318      	adds	r3, #24
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d02f      	beq.n	8018dd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8018d78:	78fb      	ldrb	r3, [r7, #3]
 8018d7a:	f003 020f 	and.w	r2, r3, #15
 8018d7e:	6879      	ldr	r1, [r7, #4]
 8018d80:	4613      	mov	r3, r2
 8018d82:	009b      	lsls	r3, r3, #2
 8018d84:	4413      	add	r3, r2
 8018d86:	009b      	lsls	r3, r3, #2
 8018d88:	440b      	add	r3, r1
 8018d8a:	3318      	adds	r3, #24
 8018d8c:	681a      	ldr	r2, [r3, #0]
 8018d8e:	78fb      	ldrb	r3, [r7, #3]
 8018d90:	f003 010f 	and.w	r1, r3, #15
 8018d94:	68f8      	ldr	r0, [r7, #12]
 8018d96:	460b      	mov	r3, r1
 8018d98:	00db      	lsls	r3, r3, #3
 8018d9a:	440b      	add	r3, r1
 8018d9c:	009b      	lsls	r3, r3, #2
 8018d9e:	4403      	add	r3, r0
 8018da0:	3348      	adds	r3, #72	; 0x48
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8018da8:	fb01 f303 	mul.w	r3, r1, r3
 8018dac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d112      	bne.n	8018dd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8018db2:	78fb      	ldrb	r3, [r7, #3]
 8018db4:	f003 020f 	and.w	r2, r3, #15
 8018db8:	6879      	ldr	r1, [r7, #4]
 8018dba:	4613      	mov	r3, r2
 8018dbc:	009b      	lsls	r3, r3, #2
 8018dbe:	4413      	add	r3, r2
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	440b      	add	r3, r1
 8018dc4:	3318      	adds	r3, #24
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8018dca:	78f9      	ldrb	r1, [r7, #3]
 8018dcc:	2300      	movs	r3, #0
 8018dce:	2200      	movs	r2, #0
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f002 f9f4 	bl	801b1be <USBD_LL_Transmit>
 8018dd6:	e01f      	b.n	8018e18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	33b0      	adds	r3, #176	; 0xb0
 8018dea:	009b      	lsls	r3, r3, #2
 8018dec:	4413      	add	r3, r2
 8018dee:	685b      	ldr	r3, [r3, #4]
 8018df0:	691b      	ldr	r3, [r3, #16]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d010      	beq.n	8018e18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018dfc:	687a      	ldr	r2, [r7, #4]
 8018dfe:	33b0      	adds	r3, #176	; 0xb0
 8018e00:	009b      	lsls	r3, r3, #2
 8018e02:	4413      	add	r3, r2
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	691b      	ldr	r3, [r3, #16]
 8018e08:	68ba      	ldr	r2, [r7, #8]
 8018e0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8018e0e:	68ba      	ldr	r2, [r7, #8]
 8018e10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8018e14:	78fa      	ldrb	r2, [r7, #3]
 8018e16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018e18:	2300      	movs	r3, #0
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018e22:	b580      	push	{r7, lr}
 8018e24:	b084      	sub	sp, #16
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
 8018e2a:	460b      	mov	r3, r1
 8018e2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	32b0      	adds	r2, #176	; 0xb0
 8018e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	32b0      	adds	r2, #176	; 0xb0
 8018e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d101      	bne.n	8018e54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e01a      	b.n	8018e8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018e54:	78fb      	ldrb	r3, [r7, #3]
 8018e56:	4619      	mov	r1, r3
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f002 f9f2 	bl	801b242 <USBD_LL_GetRxDataSize>
 8018e5e:	4602      	mov	r2, r0
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018e6c:	687a      	ldr	r2, [r7, #4]
 8018e6e:	33b0      	adds	r3, #176	; 0xb0
 8018e70:	009b      	lsls	r3, r3, #2
 8018e72:	4413      	add	r3, r2
 8018e74:	685b      	ldr	r3, [r3, #4]
 8018e76:	68db      	ldr	r3, [r3, #12]
 8018e78:	68fa      	ldr	r2, [r7, #12]
 8018e7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8018e7e:	68fa      	ldr	r2, [r7, #12]
 8018e80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8018e84:	4611      	mov	r1, r2
 8018e86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018e88:	2300      	movs	r3, #0
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3710      	adds	r7, #16
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}

08018e92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8018e92:	b580      	push	{r7, lr}
 8018e94:	b084      	sub	sp, #16
 8018e96:	af00      	add	r7, sp, #0
 8018e98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	32b0      	adds	r2, #176	; 0xb0
 8018ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d101      	bne.n	8018eb4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018eb0:	2303      	movs	r3, #3
 8018eb2:	e025      	b.n	8018f00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018eba:	687a      	ldr	r2, [r7, #4]
 8018ebc:	33b0      	adds	r3, #176	; 0xb0
 8018ebe:	009b      	lsls	r3, r3, #2
 8018ec0:	4413      	add	r3, r2
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d01a      	beq.n	8018efe <USBD_CDC_EP0_RxReady+0x6c>
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8018ece:	2bff      	cmp	r3, #255	; 0xff
 8018ed0:	d015      	beq.n	8018efe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018ed8:	687a      	ldr	r2, [r7, #4]
 8018eda:	33b0      	adds	r3, #176	; 0xb0
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	4413      	add	r3, r2
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	689b      	ldr	r3, [r3, #8]
 8018ee4:	68fa      	ldr	r2, [r7, #12]
 8018ee6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8018eea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8018eec:	68fa      	ldr	r2, [r7, #12]
 8018eee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018ef2:	b292      	uxth	r2, r2
 8018ef4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	22ff      	movs	r2, #255	; 0xff
 8018efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8018efe:	2300      	movs	r3, #0
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3710      	adds	r7, #16
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b086      	sub	sp, #24
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018f10:	2182      	movs	r1, #130	; 0x82
 8018f12:	4818      	ldr	r0, [pc, #96]	; (8018f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018f14:	f000 fd4f 	bl	80199b6 <USBD_GetEpDesc>
 8018f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018f1a:	2101      	movs	r1, #1
 8018f1c:	4815      	ldr	r0, [pc, #84]	; (8018f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018f1e:	f000 fd4a 	bl	80199b6 <USBD_GetEpDesc>
 8018f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018f24:	2181      	movs	r1, #129	; 0x81
 8018f26:	4813      	ldr	r0, [pc, #76]	; (8018f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018f28:	f000 fd45 	bl	80199b6 <USBD_GetEpDesc>
 8018f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018f2e:	697b      	ldr	r3, [r7, #20]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d002      	beq.n	8018f3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	2210      	movs	r2, #16
 8018f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018f3a:	693b      	ldr	r3, [r7, #16]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d006      	beq.n	8018f4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	2200      	movs	r2, #0
 8018f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018f48:	711a      	strb	r2, [r3, #4]
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d006      	beq.n	8018f62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	2200      	movs	r2, #0
 8018f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018f5c:	711a      	strb	r2, [r3, #4]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2243      	movs	r2, #67	; 0x43
 8018f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018f68:	4b02      	ldr	r3, [pc, #8]	; (8018f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3718      	adds	r7, #24
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}
 8018f72:	bf00      	nop
 8018f74:	240080bc 	.word	0x240080bc

08018f78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b086      	sub	sp, #24
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018f80:	2182      	movs	r1, #130	; 0x82
 8018f82:	4818      	ldr	r0, [pc, #96]	; (8018fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018f84:	f000 fd17 	bl	80199b6 <USBD_GetEpDesc>
 8018f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018f8a:	2101      	movs	r1, #1
 8018f8c:	4815      	ldr	r0, [pc, #84]	; (8018fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018f8e:	f000 fd12 	bl	80199b6 <USBD_GetEpDesc>
 8018f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018f94:	2181      	movs	r1, #129	; 0x81
 8018f96:	4813      	ldr	r0, [pc, #76]	; (8018fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018f98:	f000 fd0d 	bl	80199b6 <USBD_GetEpDesc>
 8018f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d002      	beq.n	8018faa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	2210      	movs	r2, #16
 8018fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d006      	beq.n	8018fbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	711a      	strb	r2, [r3, #4]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	f042 0202 	orr.w	r2, r2, #2
 8018fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d006      	beq.n	8018fd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	711a      	strb	r2, [r3, #4]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f042 0202 	orr.w	r2, r2, #2
 8018fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2243      	movs	r2, #67	; 0x43
 8018fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018fd8:	4b02      	ldr	r3, [pc, #8]	; (8018fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8018fda:	4618      	mov	r0, r3
 8018fdc:	3718      	adds	r7, #24
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	bf00      	nop
 8018fe4:	240080bc 	.word	0x240080bc

08018fe8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b086      	sub	sp, #24
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018ff0:	2182      	movs	r1, #130	; 0x82
 8018ff2:	4818      	ldr	r0, [pc, #96]	; (8019054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018ff4:	f000 fcdf 	bl	80199b6 <USBD_GetEpDesc>
 8018ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	4815      	ldr	r0, [pc, #84]	; (8019054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018ffe:	f000 fcda 	bl	80199b6 <USBD_GetEpDesc>
 8019002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019004:	2181      	movs	r1, #129	; 0x81
 8019006:	4813      	ldr	r0, [pc, #76]	; (8019054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8019008:	f000 fcd5 	bl	80199b6 <USBD_GetEpDesc>
 801900c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d002      	beq.n	801901a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8019014:	697b      	ldr	r3, [r7, #20]
 8019016:	2210      	movs	r2, #16
 8019018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801901a:	693b      	ldr	r3, [r7, #16]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d006      	beq.n	801902e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	2200      	movs	r2, #0
 8019024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019028:	711a      	strb	r2, [r3, #4]
 801902a:	2200      	movs	r2, #0
 801902c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d006      	beq.n	8019042 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	2200      	movs	r2, #0
 8019038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801903c:	711a      	strb	r2, [r3, #4]
 801903e:	2200      	movs	r2, #0
 8019040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2243      	movs	r2, #67	; 0x43
 8019046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8019048:	4b02      	ldr	r3, [pc, #8]	; (8019054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801904a:	4618      	mov	r0, r3
 801904c:	3718      	adds	r7, #24
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	240080bc 	.word	0x240080bc

08019058 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8019058:	b480      	push	{r7}
 801905a:	b083      	sub	sp, #12
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	220a      	movs	r2, #10
 8019064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8019066:	4b03      	ldr	r3, [pc, #12]	; (8019074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8019068:	4618      	mov	r0, r3
 801906a:	370c      	adds	r7, #12
 801906c:	46bd      	mov	sp, r7
 801906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019072:	4770      	bx	lr
 8019074:	24008078 	.word	0x24008078

08019078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8019078:	b480      	push	{r7}
 801907a:	b083      	sub	sp, #12
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d101      	bne.n	801908c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8019088:	2303      	movs	r3, #3
 801908a:	e009      	b.n	80190a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8019092:	687a      	ldr	r2, [r7, #4]
 8019094:	33b0      	adds	r3, #176	; 0xb0
 8019096:	009b      	lsls	r3, r3, #2
 8019098:	4413      	add	r3, r2
 801909a:	683a      	ldr	r2, [r7, #0]
 801909c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801909e:	2300      	movs	r3, #0
}
 80190a0:	4618      	mov	r0, r3
 80190a2:	370c      	adds	r7, #12
 80190a4:	46bd      	mov	sp, r7
 80190a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190aa:	4770      	bx	lr

080190ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80190ac:	b480      	push	{r7}
 80190ae:	b087      	sub	sp, #28
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	60f8      	str	r0, [r7, #12]
 80190b4:	60b9      	str	r1, [r7, #8]
 80190b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	32b0      	adds	r2, #176	; 0xb0
 80190c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d101      	bne.n	80190d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80190ce:	2303      	movs	r3, #3
 80190d0:	e008      	b.n	80190e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	68ba      	ldr	r2, [r7, #8]
 80190d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80190e2:	2300      	movs	r3, #0
}
 80190e4:	4618      	mov	r0, r3
 80190e6:	371c      	adds	r7, #28
 80190e8:	46bd      	mov	sp, r7
 80190ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ee:	4770      	bx	lr

080190f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80190f0:	b480      	push	{r7}
 80190f2:	b085      	sub	sp, #20
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
 80190f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	32b0      	adds	r2, #176	; 0xb0
 8019104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d101      	bne.n	8019114 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8019110:	2303      	movs	r3, #3
 8019112:	e004      	b.n	801911e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	683a      	ldr	r2, [r7, #0]
 8019118:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801911c:	2300      	movs	r3, #0
}
 801911e:	4618      	mov	r0, r3
 8019120:	3714      	adds	r7, #20
 8019122:	46bd      	mov	sp, r7
 8019124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019128:	4770      	bx	lr
	...

0801912c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	32b0      	adds	r2, #176	; 0xb0
 801913e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019142:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8019144:	2301      	movs	r3, #1
 8019146:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	32b0      	adds	r2, #176	; 0xb0
 8019152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d101      	bne.n	801915e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801915a:	2303      	movs	r3, #3
 801915c:	e025      	b.n	80191aa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8019164:	2b00      	cmp	r3, #0
 8019166:	d11f      	bne.n	80191a8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8019168:	68bb      	ldr	r3, [r7, #8]
 801916a:	2201      	movs	r2, #1
 801916c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8019170:	4b10      	ldr	r3, [pc, #64]	; (80191b4 <USBD_CDC_TransmitPacket+0x88>)
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	f003 020f 	and.w	r2, r3, #15
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801917e:	6878      	ldr	r0, [r7, #4]
 8019180:	4613      	mov	r3, r2
 8019182:	009b      	lsls	r3, r3, #2
 8019184:	4413      	add	r3, r2
 8019186:	009b      	lsls	r3, r3, #2
 8019188:	4403      	add	r3, r0
 801918a:	3318      	adds	r3, #24
 801918c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801918e:	4b09      	ldr	r3, [pc, #36]	; (80191b4 <USBD_CDC_TransmitPacket+0x88>)
 8019190:	7819      	ldrb	r1, [r3, #0]
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8019198:	68bb      	ldr	r3, [r7, #8]
 801919a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f002 f80d 	bl	801b1be <USBD_LL_Transmit>

    ret = USBD_OK;
 80191a4:	2300      	movs	r3, #0
 80191a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80191a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80191aa:	4618      	mov	r0, r3
 80191ac:	3710      	adds	r7, #16
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}
 80191b2:	bf00      	nop
 80191b4:	240080ff 	.word	0x240080ff

080191b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b084      	sub	sp, #16
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	32b0      	adds	r2, #176	; 0xb0
 80191ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	32b0      	adds	r2, #176	; 0xb0
 80191da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d101      	bne.n	80191e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80191e2:	2303      	movs	r3, #3
 80191e4:	e018      	b.n	8019218 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	7c1b      	ldrb	r3, [r3, #16]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d10a      	bne.n	8019204 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80191ee:	4b0c      	ldr	r3, [pc, #48]	; (8019220 <USBD_CDC_ReceivePacket+0x68>)
 80191f0:	7819      	ldrb	r1, [r3, #0]
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80191f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f001 ffff 	bl	801b200 <USBD_LL_PrepareReceive>
 8019202:	e008      	b.n	8019216 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8019204:	4b06      	ldr	r3, [pc, #24]	; (8019220 <USBD_CDC_ReceivePacket+0x68>)
 8019206:	7819      	ldrb	r1, [r3, #0]
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801920e:	2340      	movs	r3, #64	; 0x40
 8019210:	6878      	ldr	r0, [r7, #4]
 8019212:	f001 fff5 	bl	801b200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8019216:	2300      	movs	r3, #0
}
 8019218:	4618      	mov	r0, r3
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	24008100 	.word	0x24008100

08019224 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b086      	sub	sp, #24
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	4613      	mov	r3, r2
 8019230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d101      	bne.n	801923c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8019238:	2303      	movs	r3, #3
 801923a:	e01f      	b.n	801927c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	2200      	movs	r2, #0
 8019240:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	2200      	movs	r2, #0
 8019248:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	2200      	movs	r2, #0
 8019250:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d003      	beq.n	8019262 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	68ba      	ldr	r2, [r7, #8]
 801925e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	2201      	movs	r2, #1
 8019266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	79fa      	ldrb	r2, [r7, #7]
 801926e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019270:	68f8      	ldr	r0, [r7, #12]
 8019272:	f001 fe6b 	bl	801af4c <USBD_LL_Init>
 8019276:	4603      	mov	r3, r0
 8019278:	75fb      	strb	r3, [r7, #23]

  return ret;
 801927a:	7dfb      	ldrb	r3, [r7, #23]
}
 801927c:	4618      	mov	r0, r3
 801927e:	3718      	adds	r7, #24
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}

08019284 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b084      	sub	sp, #16
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801928e:	2300      	movs	r3, #0
 8019290:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d101      	bne.n	801929c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8019298:	2303      	movs	r3, #3
 801929a:	e025      	b.n	80192e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	683a      	ldr	r2, [r7, #0]
 80192a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	32ae      	adds	r2, #174	; 0xae
 80192ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d00f      	beq.n	80192d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	32ae      	adds	r2, #174	; 0xae
 80192c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192c8:	f107 020e 	add.w	r2, r7, #14
 80192cc:	4610      	mov	r0, r2
 80192ce:	4798      	blx	r3
 80192d0:	4602      	mov	r2, r0
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80192de:	1c5a      	adds	r2, r3, #1
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80192e6:	2300      	movs	r3, #0
}
 80192e8:	4618      	mov	r0, r3
 80192ea:	3710      	adds	r7, #16
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}

080192f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b082      	sub	sp, #8
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80192f8:	6878      	ldr	r0, [r7, #4]
 80192fa:	f001 fe77 	bl	801afec <USBD_LL_Start>
 80192fe:	4603      	mov	r3, r0
}
 8019300:	4618      	mov	r0, r3
 8019302:	3708      	adds	r7, #8
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}

08019308 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8019308:	b480      	push	{r7}
 801930a:	b083      	sub	sp, #12
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019310:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8019312:	4618      	mov	r0, r3
 8019314:	370c      	adds	r7, #12
 8019316:	46bd      	mov	sp, r7
 8019318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931c:	4770      	bx	lr

0801931e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801931e:	b580      	push	{r7, lr}
 8019320:	b084      	sub	sp, #16
 8019322:	af00      	add	r7, sp, #0
 8019324:	6078      	str	r0, [r7, #4]
 8019326:	460b      	mov	r3, r1
 8019328:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801932a:	2300      	movs	r3, #0
 801932c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019334:	2b00      	cmp	r3, #0
 8019336:	d009      	beq.n	801934c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	78fa      	ldrb	r2, [r7, #3]
 8019342:	4611      	mov	r1, r2
 8019344:	6878      	ldr	r0, [r7, #4]
 8019346:	4798      	blx	r3
 8019348:	4603      	mov	r3, r0
 801934a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801934c:	7bfb      	ldrb	r3, [r7, #15]
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
 801935e:	460b      	mov	r3, r1
 8019360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8019362:	2300      	movs	r3, #0
 8019364:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	78fa      	ldrb	r2, [r7, #3]
 8019370:	4611      	mov	r1, r2
 8019372:	6878      	ldr	r0, [r7, #4]
 8019374:	4798      	blx	r3
 8019376:	4603      	mov	r3, r0
 8019378:	2b00      	cmp	r3, #0
 801937a:	d001      	beq.n	8019380 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801937c:	2303      	movs	r3, #3
 801937e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8019380:	7bfb      	ldrb	r3, [r7, #15]
}
 8019382:	4618      	mov	r0, r3
 8019384:	3710      	adds	r7, #16
 8019386:	46bd      	mov	sp, r7
 8019388:	bd80      	pop	{r7, pc}

0801938a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801938a:	b580      	push	{r7, lr}
 801938c:	b084      	sub	sp, #16
 801938e:	af00      	add	r7, sp, #0
 8019390:	6078      	str	r0, [r7, #4]
 8019392:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801939a:	6839      	ldr	r1, [r7, #0]
 801939c:	4618      	mov	r0, r3
 801939e:	f001 f908 	bl	801a5b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2201      	movs	r2, #1
 80193a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80193b0:	461a      	mov	r2, r3
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80193be:	f003 031f 	and.w	r3, r3, #31
 80193c2:	2b02      	cmp	r3, #2
 80193c4:	d01a      	beq.n	80193fc <USBD_LL_SetupStage+0x72>
 80193c6:	2b02      	cmp	r3, #2
 80193c8:	d822      	bhi.n	8019410 <USBD_LL_SetupStage+0x86>
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d002      	beq.n	80193d4 <USBD_LL_SetupStage+0x4a>
 80193ce:	2b01      	cmp	r3, #1
 80193d0:	d00a      	beq.n	80193e8 <USBD_LL_SetupStage+0x5e>
 80193d2:	e01d      	b.n	8019410 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80193da:	4619      	mov	r1, r3
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f000 fb5f 	bl	8019aa0 <USBD_StdDevReq>
 80193e2:	4603      	mov	r3, r0
 80193e4:	73fb      	strb	r3, [r7, #15]
      break;
 80193e6:	e020      	b.n	801942a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80193ee:	4619      	mov	r1, r3
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f000 fbc7 	bl	8019b84 <USBD_StdItfReq>
 80193f6:	4603      	mov	r3, r0
 80193f8:	73fb      	strb	r3, [r7, #15]
      break;
 80193fa:	e016      	b.n	801942a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019402:	4619      	mov	r1, r3
 8019404:	6878      	ldr	r0, [r7, #4]
 8019406:	f000 fc29 	bl	8019c5c <USBD_StdEPReq>
 801940a:	4603      	mov	r3, r0
 801940c:	73fb      	strb	r3, [r7, #15]
      break;
 801940e:	e00c      	b.n	801942a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801941a:	b2db      	uxtb	r3, r3
 801941c:	4619      	mov	r1, r3
 801941e:	6878      	ldr	r0, [r7, #4]
 8019420:	f001 fe44 	bl	801b0ac <USBD_LL_StallEP>
 8019424:	4603      	mov	r3, r0
 8019426:	73fb      	strb	r3, [r7, #15]
      break;
 8019428:	bf00      	nop
  }

  return ret;
 801942a:	7bfb      	ldrb	r3, [r7, #15]
}
 801942c:	4618      	mov	r0, r3
 801942e:	3710      	adds	r7, #16
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	460b      	mov	r3, r1
 801943e:	607a      	str	r2, [r7, #4]
 8019440:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8019442:	2300      	movs	r3, #0
 8019444:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8019446:	7afb      	ldrb	r3, [r7, #11]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d16e      	bne.n	801952a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8019452:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801945a:	2b03      	cmp	r3, #3
 801945c:	f040 8098 	bne.w	8019590 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8019460:	693b      	ldr	r3, [r7, #16]
 8019462:	689a      	ldr	r2, [r3, #8]
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	68db      	ldr	r3, [r3, #12]
 8019468:	429a      	cmp	r2, r3
 801946a:	d913      	bls.n	8019494 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	689a      	ldr	r2, [r3, #8]
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	68db      	ldr	r3, [r3, #12]
 8019474:	1ad2      	subs	r2, r2, r3
 8019476:	693b      	ldr	r3, [r7, #16]
 8019478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801947a:	693b      	ldr	r3, [r7, #16]
 801947c:	68da      	ldr	r2, [r3, #12]
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	689b      	ldr	r3, [r3, #8]
 8019482:	4293      	cmp	r3, r2
 8019484:	bf28      	it	cs
 8019486:	4613      	movcs	r3, r2
 8019488:	461a      	mov	r2, r3
 801948a:	6879      	ldr	r1, [r7, #4]
 801948c:	68f8      	ldr	r0, [r7, #12]
 801948e:	f001 f984 	bl	801a79a <USBD_CtlContinueRx>
 8019492:	e07d      	b.n	8019590 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801949a:	f003 031f 	and.w	r3, r3, #31
 801949e:	2b02      	cmp	r3, #2
 80194a0:	d014      	beq.n	80194cc <USBD_LL_DataOutStage+0x98>
 80194a2:	2b02      	cmp	r3, #2
 80194a4:	d81d      	bhi.n	80194e2 <USBD_LL_DataOutStage+0xae>
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d002      	beq.n	80194b0 <USBD_LL_DataOutStage+0x7c>
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	d003      	beq.n	80194b6 <USBD_LL_DataOutStage+0x82>
 80194ae:	e018      	b.n	80194e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80194b0:	2300      	movs	r3, #0
 80194b2:	75bb      	strb	r3, [r7, #22]
            break;
 80194b4:	e018      	b.n	80194e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	4619      	mov	r1, r3
 80194c0:	68f8      	ldr	r0, [r7, #12]
 80194c2:	f000 fa5e 	bl	8019982 <USBD_CoreFindIF>
 80194c6:	4603      	mov	r3, r0
 80194c8:	75bb      	strb	r3, [r7, #22]
            break;
 80194ca:	e00d      	b.n	80194e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	4619      	mov	r1, r3
 80194d6:	68f8      	ldr	r0, [r7, #12]
 80194d8:	f000 fa60 	bl	801999c <USBD_CoreFindEP>
 80194dc:	4603      	mov	r3, r0
 80194de:	75bb      	strb	r3, [r7, #22]
            break;
 80194e0:	e002      	b.n	80194e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80194e2:	2300      	movs	r3, #0
 80194e4:	75bb      	strb	r3, [r7, #22]
            break;
 80194e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80194e8:	7dbb      	ldrb	r3, [r7, #22]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d119      	bne.n	8019522 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80194f4:	b2db      	uxtb	r3, r3
 80194f6:	2b03      	cmp	r3, #3
 80194f8:	d113      	bne.n	8019522 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80194fa:	7dba      	ldrb	r2, [r7, #22]
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	32ae      	adds	r2, #174	; 0xae
 8019500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019504:	691b      	ldr	r3, [r3, #16]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d00b      	beq.n	8019522 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801950a:	7dba      	ldrb	r2, [r7, #22]
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8019512:	7dba      	ldrb	r2, [r7, #22]
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	32ae      	adds	r2, #174	; 0xae
 8019518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801951c:	691b      	ldr	r3, [r3, #16]
 801951e:	68f8      	ldr	r0, [r7, #12]
 8019520:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8019522:	68f8      	ldr	r0, [r7, #12]
 8019524:	f001 f94a 	bl	801a7bc <USBD_CtlSendStatus>
 8019528:	e032      	b.n	8019590 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801952a:	7afb      	ldrb	r3, [r7, #11]
 801952c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019530:	b2db      	uxtb	r3, r3
 8019532:	4619      	mov	r1, r3
 8019534:	68f8      	ldr	r0, [r7, #12]
 8019536:	f000 fa31 	bl	801999c <USBD_CoreFindEP>
 801953a:	4603      	mov	r3, r0
 801953c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801953e:	7dbb      	ldrb	r3, [r7, #22]
 8019540:	2bff      	cmp	r3, #255	; 0xff
 8019542:	d025      	beq.n	8019590 <USBD_LL_DataOutStage+0x15c>
 8019544:	7dbb      	ldrb	r3, [r7, #22]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d122      	bne.n	8019590 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019550:	b2db      	uxtb	r3, r3
 8019552:	2b03      	cmp	r3, #3
 8019554:	d117      	bne.n	8019586 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8019556:	7dba      	ldrb	r2, [r7, #22]
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	32ae      	adds	r2, #174	; 0xae
 801955c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019560:	699b      	ldr	r3, [r3, #24]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d00f      	beq.n	8019586 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8019566:	7dba      	ldrb	r2, [r7, #22]
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801956e:	7dba      	ldrb	r2, [r7, #22]
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	32ae      	adds	r2, #174	; 0xae
 8019574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019578:	699b      	ldr	r3, [r3, #24]
 801957a:	7afa      	ldrb	r2, [r7, #11]
 801957c:	4611      	mov	r1, r2
 801957e:	68f8      	ldr	r0, [r7, #12]
 8019580:	4798      	blx	r3
 8019582:	4603      	mov	r3, r0
 8019584:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8019586:	7dfb      	ldrb	r3, [r7, #23]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d001      	beq.n	8019590 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801958c:	7dfb      	ldrb	r3, [r7, #23]
 801958e:	e000      	b.n	8019592 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8019590:	2300      	movs	r3, #0
}
 8019592:	4618      	mov	r0, r3
 8019594:	3718      	adds	r7, #24
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}

0801959a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801959a:	b580      	push	{r7, lr}
 801959c:	b086      	sub	sp, #24
 801959e:	af00      	add	r7, sp, #0
 80195a0:	60f8      	str	r0, [r7, #12]
 80195a2:	460b      	mov	r3, r1
 80195a4:	607a      	str	r2, [r7, #4]
 80195a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80195a8:	7afb      	ldrb	r3, [r7, #11]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d16f      	bne.n	801968e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	3314      	adds	r3, #20
 80195b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80195ba:	2b02      	cmp	r3, #2
 80195bc:	d15a      	bne.n	8019674 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80195be:	693b      	ldr	r3, [r7, #16]
 80195c0:	689a      	ldr	r2, [r3, #8]
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	68db      	ldr	r3, [r3, #12]
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d914      	bls.n	80195f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	689a      	ldr	r2, [r3, #8]
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	1ad2      	subs	r2, r2, r3
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	689b      	ldr	r3, [r3, #8]
 80195dc:	461a      	mov	r2, r3
 80195de:	6879      	ldr	r1, [r7, #4]
 80195e0:	68f8      	ldr	r0, [r7, #12]
 80195e2:	f001 f8ac 	bl	801a73e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80195e6:	2300      	movs	r3, #0
 80195e8:	2200      	movs	r2, #0
 80195ea:	2100      	movs	r1, #0
 80195ec:	68f8      	ldr	r0, [r7, #12]
 80195ee:	f001 fe07 	bl	801b200 <USBD_LL_PrepareReceive>
 80195f2:	e03f      	b.n	8019674 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	68da      	ldr	r2, [r3, #12]
 80195f8:	693b      	ldr	r3, [r7, #16]
 80195fa:	689b      	ldr	r3, [r3, #8]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d11c      	bne.n	801963a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	685a      	ldr	r2, [r3, #4]
 8019604:	693b      	ldr	r3, [r7, #16]
 8019606:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8019608:	429a      	cmp	r2, r3
 801960a:	d316      	bcc.n	801963a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801960c:	693b      	ldr	r3, [r7, #16]
 801960e:	685a      	ldr	r2, [r3, #4]
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8019616:	429a      	cmp	r2, r3
 8019618:	d20f      	bcs.n	801963a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801961a:	2200      	movs	r2, #0
 801961c:	2100      	movs	r1, #0
 801961e:	68f8      	ldr	r0, [r7, #12]
 8019620:	f001 f88d 	bl	801a73e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2200      	movs	r2, #0
 8019628:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801962c:	2300      	movs	r3, #0
 801962e:	2200      	movs	r2, #0
 8019630:	2100      	movs	r1, #0
 8019632:	68f8      	ldr	r0, [r7, #12]
 8019634:	f001 fde4 	bl	801b200 <USBD_LL_PrepareReceive>
 8019638:	e01c      	b.n	8019674 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019640:	b2db      	uxtb	r3, r3
 8019642:	2b03      	cmp	r3, #3
 8019644:	d10f      	bne.n	8019666 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801964c:	68db      	ldr	r3, [r3, #12]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d009      	beq.n	8019666 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	2200      	movs	r2, #0
 8019656:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	68f8      	ldr	r0, [r7, #12]
 8019664:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8019666:	2180      	movs	r1, #128	; 0x80
 8019668:	68f8      	ldr	r0, [r7, #12]
 801966a:	f001 fd1f 	bl	801b0ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801966e:	68f8      	ldr	r0, [r7, #12]
 8019670:	f001 f8b7 	bl	801a7e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d03a      	beq.n	80196f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801967e:	68f8      	ldr	r0, [r7, #12]
 8019680:	f7ff fe42 	bl	8019308 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2200      	movs	r2, #0
 8019688:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801968c:	e032      	b.n	80196f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801968e:	7afb      	ldrb	r3, [r7, #11]
 8019690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019694:	b2db      	uxtb	r3, r3
 8019696:	4619      	mov	r1, r3
 8019698:	68f8      	ldr	r0, [r7, #12]
 801969a:	f000 f97f 	bl	801999c <USBD_CoreFindEP>
 801969e:	4603      	mov	r3, r0
 80196a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80196a2:	7dfb      	ldrb	r3, [r7, #23]
 80196a4:	2bff      	cmp	r3, #255	; 0xff
 80196a6:	d025      	beq.n	80196f4 <USBD_LL_DataInStage+0x15a>
 80196a8:	7dfb      	ldrb	r3, [r7, #23]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d122      	bne.n	80196f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80196b4:	b2db      	uxtb	r3, r3
 80196b6:	2b03      	cmp	r3, #3
 80196b8:	d11c      	bne.n	80196f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80196ba:	7dfa      	ldrb	r2, [r7, #23]
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	32ae      	adds	r2, #174	; 0xae
 80196c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196c4:	695b      	ldr	r3, [r3, #20]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d014      	beq.n	80196f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80196ca:	7dfa      	ldrb	r2, [r7, #23]
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80196d2:	7dfa      	ldrb	r2, [r7, #23]
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	32ae      	adds	r2, #174	; 0xae
 80196d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196dc:	695b      	ldr	r3, [r3, #20]
 80196de:	7afa      	ldrb	r2, [r7, #11]
 80196e0:	4611      	mov	r1, r2
 80196e2:	68f8      	ldr	r0, [r7, #12]
 80196e4:	4798      	blx	r3
 80196e6:	4603      	mov	r3, r0
 80196e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80196ea:	7dbb      	ldrb	r3, [r7, #22]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d001      	beq.n	80196f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80196f0:	7dbb      	ldrb	r3, [r7, #22]
 80196f2:	e000      	b.n	80196f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80196f4:	2300      	movs	r3, #0
}
 80196f6:	4618      	mov	r0, r3
 80196f8:	3718      	adds	r7, #24
 80196fa:	46bd      	mov	sp, r7
 80196fc:	bd80      	pop	{r7, pc}

080196fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80196fe:	b580      	push	{r7, lr}
 8019700:	b084      	sub	sp, #16
 8019702:	af00      	add	r7, sp, #0
 8019704:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8019706:	2300      	movs	r3, #0
 8019708:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	2201      	movs	r2, #1
 801970e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2200      	movs	r2, #0
 8019716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	2200      	movs	r2, #0
 801971e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2200      	movs	r2, #0
 8019724:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2200      	movs	r2, #0
 801972c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019736:	2b00      	cmp	r3, #0
 8019738:	d014      	beq.n	8019764 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019740:	685b      	ldr	r3, [r3, #4]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d00e      	beq.n	8019764 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	687a      	ldr	r2, [r7, #4]
 8019750:	6852      	ldr	r2, [r2, #4]
 8019752:	b2d2      	uxtb	r2, r2
 8019754:	4611      	mov	r1, r2
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	4798      	blx	r3
 801975a:	4603      	mov	r3, r0
 801975c:	2b00      	cmp	r3, #0
 801975e:	d001      	beq.n	8019764 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8019760:	2303      	movs	r3, #3
 8019762:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019764:	2340      	movs	r3, #64	; 0x40
 8019766:	2200      	movs	r2, #0
 8019768:	2100      	movs	r1, #0
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f001 fc59 	bl	801b022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	2201      	movs	r2, #1
 8019774:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2240      	movs	r2, #64	; 0x40
 801977c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019780:	2340      	movs	r3, #64	; 0x40
 8019782:	2200      	movs	r2, #0
 8019784:	2180      	movs	r1, #128	; 0x80
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f001 fc4b 	bl	801b022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2201      	movs	r2, #1
 8019790:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	2240      	movs	r2, #64	; 0x40
 8019796:	621a      	str	r2, [r3, #32]

  return ret;
 8019798:	7bfb      	ldrb	r3, [r7, #15]
}
 801979a:	4618      	mov	r0, r3
 801979c:	3710      	adds	r7, #16
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}

080197a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80197a2:	b480      	push	{r7}
 80197a4:	b083      	sub	sp, #12
 80197a6:	af00      	add	r7, sp, #0
 80197a8:	6078      	str	r0, [r7, #4]
 80197aa:	460b      	mov	r3, r1
 80197ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	78fa      	ldrb	r2, [r7, #3]
 80197b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80197b4:	2300      	movs	r3, #0
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	370c      	adds	r7, #12
 80197ba:	46bd      	mov	sp, r7
 80197bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c0:	4770      	bx	lr

080197c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80197c2:	b480      	push	{r7}
 80197c4:	b083      	sub	sp, #12
 80197c6:	af00      	add	r7, sp, #0
 80197c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80197d0:	b2da      	uxtb	r2, r3
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	2204      	movs	r2, #4
 80197dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80197e0:	2300      	movs	r3, #0
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	370c      	adds	r7, #12
 80197e6:	46bd      	mov	sp, r7
 80197e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ec:	4770      	bx	lr

080197ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80197ee:	b480      	push	{r7}
 80197f0:	b083      	sub	sp, #12
 80197f2:	af00      	add	r7, sp, #0
 80197f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	2b04      	cmp	r3, #4
 8019800:	d106      	bne.n	8019810 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8019808:	b2da      	uxtb	r2, r3
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8019810:	2300      	movs	r3, #0
}
 8019812:	4618      	mov	r0, r3
 8019814:	370c      	adds	r7, #12
 8019816:	46bd      	mov	sp, r7
 8019818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981c:	4770      	bx	lr

0801981e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801981e:	b580      	push	{r7, lr}
 8019820:	b082      	sub	sp, #8
 8019822:	af00      	add	r7, sp, #0
 8019824:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801982c:	b2db      	uxtb	r3, r3
 801982e:	2b03      	cmp	r3, #3
 8019830:	d110      	bne.n	8019854 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019838:	2b00      	cmp	r3, #0
 801983a:	d00b      	beq.n	8019854 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019842:	69db      	ldr	r3, [r3, #28]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d005      	beq.n	8019854 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801984e:	69db      	ldr	r3, [r3, #28]
 8019850:	6878      	ldr	r0, [r7, #4]
 8019852:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8019854:	2300      	movs	r3, #0
}
 8019856:	4618      	mov	r0, r3
 8019858:	3708      	adds	r7, #8
 801985a:	46bd      	mov	sp, r7
 801985c:	bd80      	pop	{r7, pc}

0801985e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801985e:	b580      	push	{r7, lr}
 8019860:	b082      	sub	sp, #8
 8019862:	af00      	add	r7, sp, #0
 8019864:	6078      	str	r0, [r7, #4]
 8019866:	460b      	mov	r3, r1
 8019868:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	32ae      	adds	r2, #174	; 0xae
 8019874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d101      	bne.n	8019880 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801987c:	2303      	movs	r3, #3
 801987e:	e01c      	b.n	80198ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019886:	b2db      	uxtb	r3, r3
 8019888:	2b03      	cmp	r3, #3
 801988a:	d115      	bne.n	80198b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	32ae      	adds	r2, #174	; 0xae
 8019896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801989a:	6a1b      	ldr	r3, [r3, #32]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d00b      	beq.n	80198b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	32ae      	adds	r2, #174	; 0xae
 80198aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198ae:	6a1b      	ldr	r3, [r3, #32]
 80198b0:	78fa      	ldrb	r2, [r7, #3]
 80198b2:	4611      	mov	r1, r2
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80198b8:	2300      	movs	r3, #0
}
 80198ba:	4618      	mov	r0, r3
 80198bc:	3708      	adds	r7, #8
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd80      	pop	{r7, pc}

080198c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80198c2:	b580      	push	{r7, lr}
 80198c4:	b082      	sub	sp, #8
 80198c6:	af00      	add	r7, sp, #0
 80198c8:	6078      	str	r0, [r7, #4]
 80198ca:	460b      	mov	r3, r1
 80198cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	32ae      	adds	r2, #174	; 0xae
 80198d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d101      	bne.n	80198e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80198e0:	2303      	movs	r3, #3
 80198e2:	e01c      	b.n	801991e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	2b03      	cmp	r3, #3
 80198ee:	d115      	bne.n	801991c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	32ae      	adds	r2, #174	; 0xae
 80198fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019900:	2b00      	cmp	r3, #0
 8019902:	d00b      	beq.n	801991c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	32ae      	adds	r2, #174	; 0xae
 801990e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019914:	78fa      	ldrb	r2, [r7, #3]
 8019916:	4611      	mov	r1, r2
 8019918:	6878      	ldr	r0, [r7, #4]
 801991a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801991c:	2300      	movs	r3, #0
}
 801991e:	4618      	mov	r0, r3
 8019920:	3708      	adds	r7, #8
 8019922:	46bd      	mov	sp, r7
 8019924:	bd80      	pop	{r7, pc}

08019926 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8019926:	b480      	push	{r7}
 8019928:	b083      	sub	sp, #12
 801992a:	af00      	add	r7, sp, #0
 801992c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801992e:	2300      	movs	r3, #0
}
 8019930:	4618      	mov	r0, r3
 8019932:	370c      	adds	r7, #12
 8019934:	46bd      	mov	sp, r7
 8019936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993a:	4770      	bx	lr

0801993c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8019944:	2300      	movs	r3, #0
 8019946:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2201      	movs	r2, #1
 801994c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019956:	2b00      	cmp	r3, #0
 8019958:	d00e      	beq.n	8019978 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019960:	685b      	ldr	r3, [r3, #4]
 8019962:	687a      	ldr	r2, [r7, #4]
 8019964:	6852      	ldr	r2, [r2, #4]
 8019966:	b2d2      	uxtb	r2, r2
 8019968:	4611      	mov	r1, r2
 801996a:	6878      	ldr	r0, [r7, #4]
 801996c:	4798      	blx	r3
 801996e:	4603      	mov	r3, r0
 8019970:	2b00      	cmp	r3, #0
 8019972:	d001      	beq.n	8019978 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8019974:	2303      	movs	r3, #3
 8019976:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8019978:	7bfb      	ldrb	r3, [r7, #15]
}
 801997a:	4618      	mov	r0, r3
 801997c:	3710      	adds	r7, #16
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}

08019982 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019982:	b480      	push	{r7}
 8019984:	b083      	sub	sp, #12
 8019986:	af00      	add	r7, sp, #0
 8019988:	6078      	str	r0, [r7, #4]
 801998a:	460b      	mov	r3, r1
 801998c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801998e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019990:	4618      	mov	r0, r3
 8019992:	370c      	adds	r7, #12
 8019994:	46bd      	mov	sp, r7
 8019996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999a:	4770      	bx	lr

0801999c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801999c:	b480      	push	{r7}
 801999e:	b083      	sub	sp, #12
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
 80199a4:	460b      	mov	r3, r1
 80199a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80199a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80199aa:	4618      	mov	r0, r3
 80199ac:	370c      	adds	r7, #12
 80199ae:	46bd      	mov	sp, r7
 80199b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b4:	4770      	bx	lr

080199b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80199b6:	b580      	push	{r7, lr}
 80199b8:	b086      	sub	sp, #24
 80199ba:	af00      	add	r7, sp, #0
 80199bc:	6078      	str	r0, [r7, #4]
 80199be:	460b      	mov	r3, r1
 80199c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80199ca:	2300      	movs	r3, #0
 80199cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	885b      	ldrh	r3, [r3, #2]
 80199d2:	b29a      	uxth	r2, r3
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	b29b      	uxth	r3, r3
 80199da:	429a      	cmp	r2, r3
 80199dc:	d920      	bls.n	8019a20 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80199e6:	e013      	b.n	8019a10 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80199e8:	f107 030a 	add.w	r3, r7, #10
 80199ec:	4619      	mov	r1, r3
 80199ee:	6978      	ldr	r0, [r7, #20]
 80199f0:	f000 f81b 	bl	8019a2a <USBD_GetNextDesc>
 80199f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80199f6:	697b      	ldr	r3, [r7, #20]
 80199f8:	785b      	ldrb	r3, [r3, #1]
 80199fa:	2b05      	cmp	r3, #5
 80199fc:	d108      	bne.n	8019a10 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	789b      	ldrb	r3, [r3, #2]
 8019a06:	78fa      	ldrb	r2, [r7, #3]
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	d008      	beq.n	8019a1e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	885b      	ldrh	r3, [r3, #2]
 8019a14:	b29a      	uxth	r2, r3
 8019a16:	897b      	ldrh	r3, [r7, #10]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d8e5      	bhi.n	80199e8 <USBD_GetEpDesc+0x32>
 8019a1c:	e000      	b.n	8019a20 <USBD_GetEpDesc+0x6a>
          break;
 8019a1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8019a20:	693b      	ldr	r3, [r7, #16]
}
 8019a22:	4618      	mov	r0, r3
 8019a24:	3718      	adds	r7, #24
 8019a26:	46bd      	mov	sp, r7
 8019a28:	bd80      	pop	{r7, pc}

08019a2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8019a2a:	b480      	push	{r7}
 8019a2c:	b085      	sub	sp, #20
 8019a2e:	af00      	add	r7, sp, #0
 8019a30:	6078      	str	r0, [r7, #4]
 8019a32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	881a      	ldrh	r2, [r3, #0]
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	781b      	ldrb	r3, [r3, #0]
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	4413      	add	r3, r2
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	781b      	ldrb	r3, [r3, #0]
 8019a4e:	461a      	mov	r2, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	4413      	add	r3, r2
 8019a54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8019a56:	68fb      	ldr	r3, [r7, #12]
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3714      	adds	r7, #20
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr

08019a64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8019a64:	b480      	push	{r7}
 8019a66:	b087      	sub	sp, #28
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8019a76:	697b      	ldr	r3, [r7, #20]
 8019a78:	3301      	adds	r3, #1
 8019a7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	781b      	ldrb	r3, [r3, #0]
 8019a80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8019a82:	8a3b      	ldrh	r3, [r7, #16]
 8019a84:	021b      	lsls	r3, r3, #8
 8019a86:	b21a      	sxth	r2, r3
 8019a88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019a8c:	4313      	orrs	r3, r2
 8019a8e:	b21b      	sxth	r3, r3
 8019a90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8019a92:	89fb      	ldrh	r3, [r7, #14]
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	371c      	adds	r7, #28
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr

08019aa0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b084      	sub	sp, #16
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	781b      	ldrb	r3, [r3, #0]
 8019ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019ab6:	2b40      	cmp	r3, #64	; 0x40
 8019ab8:	d005      	beq.n	8019ac6 <USBD_StdDevReq+0x26>
 8019aba:	2b40      	cmp	r3, #64	; 0x40
 8019abc:	d857      	bhi.n	8019b6e <USBD_StdDevReq+0xce>
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d00f      	beq.n	8019ae2 <USBD_StdDevReq+0x42>
 8019ac2:	2b20      	cmp	r3, #32
 8019ac4:	d153      	bne.n	8019b6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	32ae      	adds	r2, #174	; 0xae
 8019ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019ad4:	689b      	ldr	r3, [r3, #8]
 8019ad6:	6839      	ldr	r1, [r7, #0]
 8019ad8:	6878      	ldr	r0, [r7, #4]
 8019ada:	4798      	blx	r3
 8019adc:	4603      	mov	r3, r0
 8019ade:	73fb      	strb	r3, [r7, #15]
      break;
 8019ae0:	e04a      	b.n	8019b78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	785b      	ldrb	r3, [r3, #1]
 8019ae6:	2b09      	cmp	r3, #9
 8019ae8:	d83b      	bhi.n	8019b62 <USBD_StdDevReq+0xc2>
 8019aea:	a201      	add	r2, pc, #4	; (adr r2, 8019af0 <USBD_StdDevReq+0x50>)
 8019aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019af0:	08019b45 	.word	0x08019b45
 8019af4:	08019b59 	.word	0x08019b59
 8019af8:	08019b63 	.word	0x08019b63
 8019afc:	08019b4f 	.word	0x08019b4f
 8019b00:	08019b63 	.word	0x08019b63
 8019b04:	08019b23 	.word	0x08019b23
 8019b08:	08019b19 	.word	0x08019b19
 8019b0c:	08019b63 	.word	0x08019b63
 8019b10:	08019b3b 	.word	0x08019b3b
 8019b14:	08019b2d 	.word	0x08019b2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8019b18:	6839      	ldr	r1, [r7, #0]
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f000 fa3c 	bl	8019f98 <USBD_GetDescriptor>
          break;
 8019b20:	e024      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019b22:	6839      	ldr	r1, [r7, #0]
 8019b24:	6878      	ldr	r0, [r7, #4]
 8019b26:	f000 fba1 	bl	801a26c <USBD_SetAddress>
          break;
 8019b2a:	e01f      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8019b2c:	6839      	ldr	r1, [r7, #0]
 8019b2e:	6878      	ldr	r0, [r7, #4]
 8019b30:	f000 fbe0 	bl	801a2f4 <USBD_SetConfig>
 8019b34:	4603      	mov	r3, r0
 8019b36:	73fb      	strb	r3, [r7, #15]
          break;
 8019b38:	e018      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8019b3a:	6839      	ldr	r1, [r7, #0]
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f000 fc83 	bl	801a448 <USBD_GetConfig>
          break;
 8019b42:	e013      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8019b44:	6839      	ldr	r1, [r7, #0]
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f000 fcb4 	bl	801a4b4 <USBD_GetStatus>
          break;
 8019b4c:	e00e      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8019b4e:	6839      	ldr	r1, [r7, #0]
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f000 fce3 	bl	801a51c <USBD_SetFeature>
          break;
 8019b56:	e009      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8019b58:	6839      	ldr	r1, [r7, #0]
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	f000 fd07 	bl	801a56e <USBD_ClrFeature>
          break;
 8019b60:	e004      	b.n	8019b6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8019b62:	6839      	ldr	r1, [r7, #0]
 8019b64:	6878      	ldr	r0, [r7, #4]
 8019b66:	f000 fd5e 	bl	801a626 <USBD_CtlError>
          break;
 8019b6a:	bf00      	nop
      }
      break;
 8019b6c:	e004      	b.n	8019b78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8019b6e:	6839      	ldr	r1, [r7, #0]
 8019b70:	6878      	ldr	r0, [r7, #4]
 8019b72:	f000 fd58 	bl	801a626 <USBD_CtlError>
      break;
 8019b76:	bf00      	nop
  }

  return ret;
 8019b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3710      	adds	r7, #16
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop

08019b84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	781b      	ldrb	r3, [r3, #0]
 8019b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019b9a:	2b40      	cmp	r3, #64	; 0x40
 8019b9c:	d005      	beq.n	8019baa <USBD_StdItfReq+0x26>
 8019b9e:	2b40      	cmp	r3, #64	; 0x40
 8019ba0:	d852      	bhi.n	8019c48 <USBD_StdItfReq+0xc4>
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d001      	beq.n	8019baa <USBD_StdItfReq+0x26>
 8019ba6:	2b20      	cmp	r3, #32
 8019ba8:	d14e      	bne.n	8019c48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	3b01      	subs	r3, #1
 8019bb4:	2b02      	cmp	r3, #2
 8019bb6:	d840      	bhi.n	8019c3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8019bb8:	683b      	ldr	r3, [r7, #0]
 8019bba:	889b      	ldrh	r3, [r3, #4]
 8019bbc:	b2db      	uxtb	r3, r3
 8019bbe:	2b01      	cmp	r3, #1
 8019bc0:	d836      	bhi.n	8019c30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	889b      	ldrh	r3, [r3, #4]
 8019bc6:	b2db      	uxtb	r3, r3
 8019bc8:	4619      	mov	r1, r3
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f7ff fed9 	bl	8019982 <USBD_CoreFindIF>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019bd4:	7bbb      	ldrb	r3, [r7, #14]
 8019bd6:	2bff      	cmp	r3, #255	; 0xff
 8019bd8:	d01d      	beq.n	8019c16 <USBD_StdItfReq+0x92>
 8019bda:	7bbb      	ldrb	r3, [r7, #14]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d11a      	bne.n	8019c16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8019be0:	7bba      	ldrb	r2, [r7, #14]
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	32ae      	adds	r2, #174	; 0xae
 8019be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019bea:	689b      	ldr	r3, [r3, #8]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d00f      	beq.n	8019c10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8019bf0:	7bba      	ldrb	r2, [r7, #14]
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019bf8:	7bba      	ldrb	r2, [r7, #14]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	32ae      	adds	r2, #174	; 0xae
 8019bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c02:	689b      	ldr	r3, [r3, #8]
 8019c04:	6839      	ldr	r1, [r7, #0]
 8019c06:	6878      	ldr	r0, [r7, #4]
 8019c08:	4798      	blx	r3
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019c0e:	e004      	b.n	8019c1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8019c10:	2303      	movs	r3, #3
 8019c12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019c14:	e001      	b.n	8019c1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8019c16:	2303      	movs	r3, #3
 8019c18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	88db      	ldrh	r3, [r3, #6]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d110      	bne.n	8019c44 <USBD_StdItfReq+0xc0>
 8019c22:	7bfb      	ldrb	r3, [r7, #15]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d10d      	bne.n	8019c44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8019c28:	6878      	ldr	r0, [r7, #4]
 8019c2a:	f000 fdc7 	bl	801a7bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8019c2e:	e009      	b.n	8019c44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8019c30:	6839      	ldr	r1, [r7, #0]
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f000 fcf7 	bl	801a626 <USBD_CtlError>
          break;
 8019c38:	e004      	b.n	8019c44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8019c3a:	6839      	ldr	r1, [r7, #0]
 8019c3c:	6878      	ldr	r0, [r7, #4]
 8019c3e:	f000 fcf2 	bl	801a626 <USBD_CtlError>
          break;
 8019c42:	e000      	b.n	8019c46 <USBD_StdItfReq+0xc2>
          break;
 8019c44:	bf00      	nop
      }
      break;
 8019c46:	e004      	b.n	8019c52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8019c48:	6839      	ldr	r1, [r7, #0]
 8019c4a:	6878      	ldr	r0, [r7, #4]
 8019c4c:	f000 fceb 	bl	801a626 <USBD_CtlError>
      break;
 8019c50:	bf00      	nop
  }

  return ret;
 8019c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b084      	sub	sp, #16
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
 8019c64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8019c66:	2300      	movs	r3, #0
 8019c68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	889b      	ldrh	r3, [r3, #4]
 8019c6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019c78:	2b40      	cmp	r3, #64	; 0x40
 8019c7a:	d007      	beq.n	8019c8c <USBD_StdEPReq+0x30>
 8019c7c:	2b40      	cmp	r3, #64	; 0x40
 8019c7e:	f200 817f 	bhi.w	8019f80 <USBD_StdEPReq+0x324>
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d02a      	beq.n	8019cdc <USBD_StdEPReq+0x80>
 8019c86:	2b20      	cmp	r3, #32
 8019c88:	f040 817a 	bne.w	8019f80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8019c8c:	7bbb      	ldrb	r3, [r7, #14]
 8019c8e:	4619      	mov	r1, r3
 8019c90:	6878      	ldr	r0, [r7, #4]
 8019c92:	f7ff fe83 	bl	801999c <USBD_CoreFindEP>
 8019c96:	4603      	mov	r3, r0
 8019c98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019c9a:	7b7b      	ldrb	r3, [r7, #13]
 8019c9c:	2bff      	cmp	r3, #255	; 0xff
 8019c9e:	f000 8174 	beq.w	8019f8a <USBD_StdEPReq+0x32e>
 8019ca2:	7b7b      	ldrb	r3, [r7, #13]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	f040 8170 	bne.w	8019f8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8019caa:	7b7a      	ldrb	r2, [r7, #13]
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8019cb2:	7b7a      	ldrb	r2, [r7, #13]
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	32ae      	adds	r2, #174	; 0xae
 8019cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cbc:	689b      	ldr	r3, [r3, #8]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	f000 8163 	beq.w	8019f8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8019cc4:	7b7a      	ldrb	r2, [r7, #13]
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	32ae      	adds	r2, #174	; 0xae
 8019cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cce:	689b      	ldr	r3, [r3, #8]
 8019cd0:	6839      	ldr	r1, [r7, #0]
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	4798      	blx	r3
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8019cda:	e156      	b.n	8019f8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	785b      	ldrb	r3, [r3, #1]
 8019ce0:	2b03      	cmp	r3, #3
 8019ce2:	d008      	beq.n	8019cf6 <USBD_StdEPReq+0x9a>
 8019ce4:	2b03      	cmp	r3, #3
 8019ce6:	f300 8145 	bgt.w	8019f74 <USBD_StdEPReq+0x318>
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	f000 809b 	beq.w	8019e26 <USBD_StdEPReq+0x1ca>
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	d03c      	beq.n	8019d6e <USBD_StdEPReq+0x112>
 8019cf4:	e13e      	b.n	8019f74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	2b02      	cmp	r3, #2
 8019d00:	d002      	beq.n	8019d08 <USBD_StdEPReq+0xac>
 8019d02:	2b03      	cmp	r3, #3
 8019d04:	d016      	beq.n	8019d34 <USBD_StdEPReq+0xd8>
 8019d06:	e02c      	b.n	8019d62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019d08:	7bbb      	ldrb	r3, [r7, #14]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d00d      	beq.n	8019d2a <USBD_StdEPReq+0xce>
 8019d0e:	7bbb      	ldrb	r3, [r7, #14]
 8019d10:	2b80      	cmp	r3, #128	; 0x80
 8019d12:	d00a      	beq.n	8019d2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019d14:	7bbb      	ldrb	r3, [r7, #14]
 8019d16:	4619      	mov	r1, r3
 8019d18:	6878      	ldr	r0, [r7, #4]
 8019d1a:	f001 f9c7 	bl	801b0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019d1e:	2180      	movs	r1, #128	; 0x80
 8019d20:	6878      	ldr	r0, [r7, #4]
 8019d22:	f001 f9c3 	bl	801b0ac <USBD_LL_StallEP>
 8019d26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019d28:	e020      	b.n	8019d6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8019d2a:	6839      	ldr	r1, [r7, #0]
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f000 fc7a 	bl	801a626 <USBD_CtlError>
              break;
 8019d32:	e01b      	b.n	8019d6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	885b      	ldrh	r3, [r3, #2]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d10e      	bne.n	8019d5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8019d3c:	7bbb      	ldrb	r3, [r7, #14]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d00b      	beq.n	8019d5a <USBD_StdEPReq+0xfe>
 8019d42:	7bbb      	ldrb	r3, [r7, #14]
 8019d44:	2b80      	cmp	r3, #128	; 0x80
 8019d46:	d008      	beq.n	8019d5a <USBD_StdEPReq+0xfe>
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	88db      	ldrh	r3, [r3, #6]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d104      	bne.n	8019d5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019d50:	7bbb      	ldrb	r3, [r7, #14]
 8019d52:	4619      	mov	r1, r3
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f001 f9a9 	bl	801b0ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8019d5a:	6878      	ldr	r0, [r7, #4]
 8019d5c:	f000 fd2e 	bl	801a7bc <USBD_CtlSendStatus>

              break;
 8019d60:	e004      	b.n	8019d6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8019d62:	6839      	ldr	r1, [r7, #0]
 8019d64:	6878      	ldr	r0, [r7, #4]
 8019d66:	f000 fc5e 	bl	801a626 <USBD_CtlError>
              break;
 8019d6a:	bf00      	nop
          }
          break;
 8019d6c:	e107      	b.n	8019f7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	2b02      	cmp	r3, #2
 8019d78:	d002      	beq.n	8019d80 <USBD_StdEPReq+0x124>
 8019d7a:	2b03      	cmp	r3, #3
 8019d7c:	d016      	beq.n	8019dac <USBD_StdEPReq+0x150>
 8019d7e:	e04b      	b.n	8019e18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019d80:	7bbb      	ldrb	r3, [r7, #14]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d00d      	beq.n	8019da2 <USBD_StdEPReq+0x146>
 8019d86:	7bbb      	ldrb	r3, [r7, #14]
 8019d88:	2b80      	cmp	r3, #128	; 0x80
 8019d8a:	d00a      	beq.n	8019da2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019d8c:	7bbb      	ldrb	r3, [r7, #14]
 8019d8e:	4619      	mov	r1, r3
 8019d90:	6878      	ldr	r0, [r7, #4]
 8019d92:	f001 f98b 	bl	801b0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019d96:	2180      	movs	r1, #128	; 0x80
 8019d98:	6878      	ldr	r0, [r7, #4]
 8019d9a:	f001 f987 	bl	801b0ac <USBD_LL_StallEP>
 8019d9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019da0:	e040      	b.n	8019e24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019da2:	6839      	ldr	r1, [r7, #0]
 8019da4:	6878      	ldr	r0, [r7, #4]
 8019da6:	f000 fc3e 	bl	801a626 <USBD_CtlError>
              break;
 8019daa:	e03b      	b.n	8019e24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019dac:	683b      	ldr	r3, [r7, #0]
 8019dae:	885b      	ldrh	r3, [r3, #2]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d136      	bne.n	8019e22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8019db4:	7bbb      	ldrb	r3, [r7, #14]
 8019db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d004      	beq.n	8019dc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8019dbe:	7bbb      	ldrb	r3, [r7, #14]
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	6878      	ldr	r0, [r7, #4]
 8019dc4:	f001 f991 	bl	801b0ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f000 fcf7 	bl	801a7bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8019dce:	7bbb      	ldrb	r3, [r7, #14]
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	6878      	ldr	r0, [r7, #4]
 8019dd4:	f7ff fde2 	bl	801999c <USBD_CoreFindEP>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019ddc:	7b7b      	ldrb	r3, [r7, #13]
 8019dde:	2bff      	cmp	r3, #255	; 0xff
 8019de0:	d01f      	beq.n	8019e22 <USBD_StdEPReq+0x1c6>
 8019de2:	7b7b      	ldrb	r3, [r7, #13]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d11c      	bne.n	8019e22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8019de8:	7b7a      	ldrb	r2, [r7, #13]
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8019df0:	7b7a      	ldrb	r2, [r7, #13]
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	32ae      	adds	r2, #174	; 0xae
 8019df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019dfa:	689b      	ldr	r3, [r3, #8]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d010      	beq.n	8019e22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019e00:	7b7a      	ldrb	r2, [r7, #13]
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	32ae      	adds	r2, #174	; 0xae
 8019e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019e0a:	689b      	ldr	r3, [r3, #8]
 8019e0c:	6839      	ldr	r1, [r7, #0]
 8019e0e:	6878      	ldr	r0, [r7, #4]
 8019e10:	4798      	blx	r3
 8019e12:	4603      	mov	r3, r0
 8019e14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8019e16:	e004      	b.n	8019e22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8019e18:	6839      	ldr	r1, [r7, #0]
 8019e1a:	6878      	ldr	r0, [r7, #4]
 8019e1c:	f000 fc03 	bl	801a626 <USBD_CtlError>
              break;
 8019e20:	e000      	b.n	8019e24 <USBD_StdEPReq+0x1c8>
              break;
 8019e22:	bf00      	nop
          }
          break;
 8019e24:	e0ab      	b.n	8019f7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019e2c:	b2db      	uxtb	r3, r3
 8019e2e:	2b02      	cmp	r3, #2
 8019e30:	d002      	beq.n	8019e38 <USBD_StdEPReq+0x1dc>
 8019e32:	2b03      	cmp	r3, #3
 8019e34:	d032      	beq.n	8019e9c <USBD_StdEPReq+0x240>
 8019e36:	e097      	b.n	8019f68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019e38:	7bbb      	ldrb	r3, [r7, #14]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d007      	beq.n	8019e4e <USBD_StdEPReq+0x1f2>
 8019e3e:	7bbb      	ldrb	r3, [r7, #14]
 8019e40:	2b80      	cmp	r3, #128	; 0x80
 8019e42:	d004      	beq.n	8019e4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8019e44:	6839      	ldr	r1, [r7, #0]
 8019e46:	6878      	ldr	r0, [r7, #4]
 8019e48:	f000 fbed 	bl	801a626 <USBD_CtlError>
                break;
 8019e4c:	e091      	b.n	8019f72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	da0b      	bge.n	8019e6e <USBD_StdEPReq+0x212>
 8019e56:	7bbb      	ldrb	r3, [r7, #14]
 8019e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019e5c:	4613      	mov	r3, r2
 8019e5e:	009b      	lsls	r3, r3, #2
 8019e60:	4413      	add	r3, r2
 8019e62:	009b      	lsls	r3, r3, #2
 8019e64:	3310      	adds	r3, #16
 8019e66:	687a      	ldr	r2, [r7, #4]
 8019e68:	4413      	add	r3, r2
 8019e6a:	3304      	adds	r3, #4
 8019e6c:	e00b      	b.n	8019e86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019e6e:	7bbb      	ldrb	r3, [r7, #14]
 8019e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019e74:	4613      	mov	r3, r2
 8019e76:	009b      	lsls	r3, r3, #2
 8019e78:	4413      	add	r3, r2
 8019e7a:	009b      	lsls	r3, r3, #2
 8019e7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8019e80:	687a      	ldr	r2, [r7, #4]
 8019e82:	4413      	add	r3, r2
 8019e84:	3304      	adds	r3, #4
 8019e86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	2202      	movs	r2, #2
 8019e92:	4619      	mov	r1, r3
 8019e94:	6878      	ldr	r0, [r7, #4]
 8019e96:	f000 fc37 	bl	801a708 <USBD_CtlSendData>
              break;
 8019e9a:	e06a      	b.n	8019f72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8019e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	da11      	bge.n	8019ec8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019ea4:	7bbb      	ldrb	r3, [r7, #14]
 8019ea6:	f003 020f 	and.w	r2, r3, #15
 8019eaa:	6879      	ldr	r1, [r7, #4]
 8019eac:	4613      	mov	r3, r2
 8019eae:	009b      	lsls	r3, r3, #2
 8019eb0:	4413      	add	r3, r2
 8019eb2:	009b      	lsls	r3, r3, #2
 8019eb4:	440b      	add	r3, r1
 8019eb6:	3324      	adds	r3, #36	; 0x24
 8019eb8:	881b      	ldrh	r3, [r3, #0]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d117      	bne.n	8019eee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019ebe:	6839      	ldr	r1, [r7, #0]
 8019ec0:	6878      	ldr	r0, [r7, #4]
 8019ec2:	f000 fbb0 	bl	801a626 <USBD_CtlError>
                  break;
 8019ec6:	e054      	b.n	8019f72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8019ec8:	7bbb      	ldrb	r3, [r7, #14]
 8019eca:	f003 020f 	and.w	r2, r3, #15
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	4613      	mov	r3, r2
 8019ed2:	009b      	lsls	r3, r3, #2
 8019ed4:	4413      	add	r3, r2
 8019ed6:	009b      	lsls	r3, r3, #2
 8019ed8:	440b      	add	r3, r1
 8019eda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8019ede:	881b      	ldrh	r3, [r3, #0]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d104      	bne.n	8019eee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019ee4:	6839      	ldr	r1, [r7, #0]
 8019ee6:	6878      	ldr	r0, [r7, #4]
 8019ee8:	f000 fb9d 	bl	801a626 <USBD_CtlError>
                  break;
 8019eec:	e041      	b.n	8019f72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	da0b      	bge.n	8019f0e <USBD_StdEPReq+0x2b2>
 8019ef6:	7bbb      	ldrb	r3, [r7, #14]
 8019ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019efc:	4613      	mov	r3, r2
 8019efe:	009b      	lsls	r3, r3, #2
 8019f00:	4413      	add	r3, r2
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	3310      	adds	r3, #16
 8019f06:	687a      	ldr	r2, [r7, #4]
 8019f08:	4413      	add	r3, r2
 8019f0a:	3304      	adds	r3, #4
 8019f0c:	e00b      	b.n	8019f26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019f0e:	7bbb      	ldrb	r3, [r7, #14]
 8019f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019f14:	4613      	mov	r3, r2
 8019f16:	009b      	lsls	r3, r3, #2
 8019f18:	4413      	add	r3, r2
 8019f1a:	009b      	lsls	r3, r3, #2
 8019f1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	4413      	add	r3, r2
 8019f24:	3304      	adds	r3, #4
 8019f26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019f28:	7bbb      	ldrb	r3, [r7, #14]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d002      	beq.n	8019f34 <USBD_StdEPReq+0x2d8>
 8019f2e:	7bbb      	ldrb	r3, [r7, #14]
 8019f30:	2b80      	cmp	r3, #128	; 0x80
 8019f32:	d103      	bne.n	8019f3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	2200      	movs	r2, #0
 8019f38:	601a      	str	r2, [r3, #0]
 8019f3a:	e00e      	b.n	8019f5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8019f3c:	7bbb      	ldrb	r3, [r7, #14]
 8019f3e:	4619      	mov	r1, r3
 8019f40:	6878      	ldr	r0, [r7, #4]
 8019f42:	f001 f8f1 	bl	801b128 <USBD_LL_IsStallEP>
 8019f46:	4603      	mov	r3, r0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d003      	beq.n	8019f54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	2201      	movs	r2, #1
 8019f50:	601a      	str	r2, [r3, #0]
 8019f52:	e002      	b.n	8019f5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	2200      	movs	r2, #0
 8019f58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	2202      	movs	r2, #2
 8019f5e:	4619      	mov	r1, r3
 8019f60:	6878      	ldr	r0, [r7, #4]
 8019f62:	f000 fbd1 	bl	801a708 <USBD_CtlSendData>
              break;
 8019f66:	e004      	b.n	8019f72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8019f68:	6839      	ldr	r1, [r7, #0]
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f000 fb5b 	bl	801a626 <USBD_CtlError>
              break;
 8019f70:	bf00      	nop
          }
          break;
 8019f72:	e004      	b.n	8019f7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8019f74:	6839      	ldr	r1, [r7, #0]
 8019f76:	6878      	ldr	r0, [r7, #4]
 8019f78:	f000 fb55 	bl	801a626 <USBD_CtlError>
          break;
 8019f7c:	bf00      	nop
      }
      break;
 8019f7e:	e005      	b.n	8019f8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019f80:	6839      	ldr	r1, [r7, #0]
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f000 fb4f 	bl	801a626 <USBD_CtlError>
      break;
 8019f88:	e000      	b.n	8019f8c <USBD_StdEPReq+0x330>
      break;
 8019f8a:	bf00      	nop
  }

  return ret;
 8019f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f8e:	4618      	mov	r0, r3
 8019f90:	3710      	adds	r7, #16
 8019f92:	46bd      	mov	sp, r7
 8019f94:	bd80      	pop	{r7, pc}
	...

08019f98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
 8019fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8019faa:	2300      	movs	r3, #0
 8019fac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	885b      	ldrh	r3, [r3, #2]
 8019fb2:	0a1b      	lsrs	r3, r3, #8
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	3b01      	subs	r3, #1
 8019fb8:	2b06      	cmp	r3, #6
 8019fba:	f200 8128 	bhi.w	801a20e <USBD_GetDescriptor+0x276>
 8019fbe:	a201      	add	r2, pc, #4	; (adr r2, 8019fc4 <USBD_GetDescriptor+0x2c>)
 8019fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fc4:	08019fe1 	.word	0x08019fe1
 8019fc8:	08019ff9 	.word	0x08019ff9
 8019fcc:	0801a039 	.word	0x0801a039
 8019fd0:	0801a20f 	.word	0x0801a20f
 8019fd4:	0801a20f 	.word	0x0801a20f
 8019fd8:	0801a1af 	.word	0x0801a1af
 8019fdc:	0801a1db 	.word	0x0801a1db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	7c12      	ldrb	r2, [r2, #16]
 8019fec:	f107 0108 	add.w	r1, r7, #8
 8019ff0:	4610      	mov	r0, r2
 8019ff2:	4798      	blx	r3
 8019ff4:	60f8      	str	r0, [r7, #12]
      break;
 8019ff6:	e112      	b.n	801a21e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	7c1b      	ldrb	r3, [r3, #16]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d10d      	bne.n	801a01c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a008:	f107 0208 	add.w	r2, r7, #8
 801a00c:	4610      	mov	r0, r2
 801a00e:	4798      	blx	r3
 801a010:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	3301      	adds	r3, #1
 801a016:	2202      	movs	r2, #2
 801a018:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a01a:	e100      	b.n	801a21e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a024:	f107 0208 	add.w	r2, r7, #8
 801a028:	4610      	mov	r0, r2
 801a02a:	4798      	blx	r3
 801a02c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	3301      	adds	r3, #1
 801a032:	2202      	movs	r2, #2
 801a034:	701a      	strb	r2, [r3, #0]
      break;
 801a036:	e0f2      	b.n	801a21e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	885b      	ldrh	r3, [r3, #2]
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	2b05      	cmp	r3, #5
 801a040:	f200 80ac 	bhi.w	801a19c <USBD_GetDescriptor+0x204>
 801a044:	a201      	add	r2, pc, #4	; (adr r2, 801a04c <USBD_GetDescriptor+0xb4>)
 801a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a04a:	bf00      	nop
 801a04c:	0801a065 	.word	0x0801a065
 801a050:	0801a099 	.word	0x0801a099
 801a054:	0801a0cd 	.word	0x0801a0cd
 801a058:	0801a101 	.word	0x0801a101
 801a05c:	0801a135 	.word	0x0801a135
 801a060:	0801a169 	.word	0x0801a169
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a06a:	685b      	ldr	r3, [r3, #4]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d00b      	beq.n	801a088 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a076:	685b      	ldr	r3, [r3, #4]
 801a078:	687a      	ldr	r2, [r7, #4]
 801a07a:	7c12      	ldrb	r2, [r2, #16]
 801a07c:	f107 0108 	add.w	r1, r7, #8
 801a080:	4610      	mov	r0, r2
 801a082:	4798      	blx	r3
 801a084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a086:	e091      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a088:	6839      	ldr	r1, [r7, #0]
 801a08a:	6878      	ldr	r0, [r7, #4]
 801a08c:	f000 facb 	bl	801a626 <USBD_CtlError>
            err++;
 801a090:	7afb      	ldrb	r3, [r7, #11]
 801a092:	3301      	adds	r3, #1
 801a094:	72fb      	strb	r3, [r7, #11]
          break;
 801a096:	e089      	b.n	801a1ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a09e:	689b      	ldr	r3, [r3, #8]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d00b      	beq.n	801a0bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a0aa:	689b      	ldr	r3, [r3, #8]
 801a0ac:	687a      	ldr	r2, [r7, #4]
 801a0ae:	7c12      	ldrb	r2, [r2, #16]
 801a0b0:	f107 0108 	add.w	r1, r7, #8
 801a0b4:	4610      	mov	r0, r2
 801a0b6:	4798      	blx	r3
 801a0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a0ba:	e077      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a0bc:	6839      	ldr	r1, [r7, #0]
 801a0be:	6878      	ldr	r0, [r7, #4]
 801a0c0:	f000 fab1 	bl	801a626 <USBD_CtlError>
            err++;
 801a0c4:	7afb      	ldrb	r3, [r7, #11]
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	72fb      	strb	r3, [r7, #11]
          break;
 801a0ca:	e06f      	b.n	801a1ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d00b      	beq.n	801a0f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	687a      	ldr	r2, [r7, #4]
 801a0e2:	7c12      	ldrb	r2, [r2, #16]
 801a0e4:	f107 0108 	add.w	r1, r7, #8
 801a0e8:	4610      	mov	r0, r2
 801a0ea:	4798      	blx	r3
 801a0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a0ee:	e05d      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a0f0:	6839      	ldr	r1, [r7, #0]
 801a0f2:	6878      	ldr	r0, [r7, #4]
 801a0f4:	f000 fa97 	bl	801a626 <USBD_CtlError>
            err++;
 801a0f8:	7afb      	ldrb	r3, [r7, #11]
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	72fb      	strb	r3, [r7, #11]
          break;
 801a0fe:	e055      	b.n	801a1ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a106:	691b      	ldr	r3, [r3, #16]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d00b      	beq.n	801a124 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a112:	691b      	ldr	r3, [r3, #16]
 801a114:	687a      	ldr	r2, [r7, #4]
 801a116:	7c12      	ldrb	r2, [r2, #16]
 801a118:	f107 0108 	add.w	r1, r7, #8
 801a11c:	4610      	mov	r0, r2
 801a11e:	4798      	blx	r3
 801a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a122:	e043      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a124:	6839      	ldr	r1, [r7, #0]
 801a126:	6878      	ldr	r0, [r7, #4]
 801a128:	f000 fa7d 	bl	801a626 <USBD_CtlError>
            err++;
 801a12c:	7afb      	ldrb	r3, [r7, #11]
 801a12e:	3301      	adds	r3, #1
 801a130:	72fb      	strb	r3, [r7, #11]
          break;
 801a132:	e03b      	b.n	801a1ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a13a:	695b      	ldr	r3, [r3, #20]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d00b      	beq.n	801a158 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a146:	695b      	ldr	r3, [r3, #20]
 801a148:	687a      	ldr	r2, [r7, #4]
 801a14a:	7c12      	ldrb	r2, [r2, #16]
 801a14c:	f107 0108 	add.w	r1, r7, #8
 801a150:	4610      	mov	r0, r2
 801a152:	4798      	blx	r3
 801a154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a156:	e029      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a158:	6839      	ldr	r1, [r7, #0]
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f000 fa63 	bl	801a626 <USBD_CtlError>
            err++;
 801a160:	7afb      	ldrb	r3, [r7, #11]
 801a162:	3301      	adds	r3, #1
 801a164:	72fb      	strb	r3, [r7, #11]
          break;
 801a166:	e021      	b.n	801a1ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a16e:	699b      	ldr	r3, [r3, #24]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d00b      	beq.n	801a18c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a17a:	699b      	ldr	r3, [r3, #24]
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	7c12      	ldrb	r2, [r2, #16]
 801a180:	f107 0108 	add.w	r1, r7, #8
 801a184:	4610      	mov	r0, r2
 801a186:	4798      	blx	r3
 801a188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a18a:	e00f      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a18c:	6839      	ldr	r1, [r7, #0]
 801a18e:	6878      	ldr	r0, [r7, #4]
 801a190:	f000 fa49 	bl	801a626 <USBD_CtlError>
            err++;
 801a194:	7afb      	ldrb	r3, [r7, #11]
 801a196:	3301      	adds	r3, #1
 801a198:	72fb      	strb	r3, [r7, #11]
          break;
 801a19a:	e007      	b.n	801a1ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801a19c:	6839      	ldr	r1, [r7, #0]
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	f000 fa41 	bl	801a626 <USBD_CtlError>
          err++;
 801a1a4:	7afb      	ldrb	r3, [r7, #11]
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801a1aa:	bf00      	nop
      }
      break;
 801a1ac:	e037      	b.n	801a21e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	7c1b      	ldrb	r3, [r3, #16]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d109      	bne.n	801a1ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1be:	f107 0208 	add.w	r2, r7, #8
 801a1c2:	4610      	mov	r0, r2
 801a1c4:	4798      	blx	r3
 801a1c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a1c8:	e029      	b.n	801a21e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801a1ca:	6839      	ldr	r1, [r7, #0]
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	f000 fa2a 	bl	801a626 <USBD_CtlError>
        err++;
 801a1d2:	7afb      	ldrb	r3, [r7, #11]
 801a1d4:	3301      	adds	r3, #1
 801a1d6:	72fb      	strb	r3, [r7, #11]
      break;
 801a1d8:	e021      	b.n	801a21e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	7c1b      	ldrb	r3, [r3, #16]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d10d      	bne.n	801a1fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1ea:	f107 0208 	add.w	r2, r7, #8
 801a1ee:	4610      	mov	r0, r2
 801a1f0:	4798      	blx	r3
 801a1f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	3301      	adds	r3, #1
 801a1f8:	2207      	movs	r2, #7
 801a1fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a1fc:	e00f      	b.n	801a21e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801a1fe:	6839      	ldr	r1, [r7, #0]
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	f000 fa10 	bl	801a626 <USBD_CtlError>
        err++;
 801a206:	7afb      	ldrb	r3, [r7, #11]
 801a208:	3301      	adds	r3, #1
 801a20a:	72fb      	strb	r3, [r7, #11]
      break;
 801a20c:	e007      	b.n	801a21e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801a20e:	6839      	ldr	r1, [r7, #0]
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f000 fa08 	bl	801a626 <USBD_CtlError>
      err++;
 801a216:	7afb      	ldrb	r3, [r7, #11]
 801a218:	3301      	adds	r3, #1
 801a21a:	72fb      	strb	r3, [r7, #11]
      break;
 801a21c:	bf00      	nop
  }

  if (err != 0U)
 801a21e:	7afb      	ldrb	r3, [r7, #11]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d11e      	bne.n	801a262 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	88db      	ldrh	r3, [r3, #6]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d016      	beq.n	801a25a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801a22c:	893b      	ldrh	r3, [r7, #8]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d00e      	beq.n	801a250 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	88da      	ldrh	r2, [r3, #6]
 801a236:	893b      	ldrh	r3, [r7, #8]
 801a238:	4293      	cmp	r3, r2
 801a23a:	bf28      	it	cs
 801a23c:	4613      	movcs	r3, r2
 801a23e:	b29b      	uxth	r3, r3
 801a240:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801a242:	893b      	ldrh	r3, [r7, #8]
 801a244:	461a      	mov	r2, r3
 801a246:	68f9      	ldr	r1, [r7, #12]
 801a248:	6878      	ldr	r0, [r7, #4]
 801a24a:	f000 fa5d 	bl	801a708 <USBD_CtlSendData>
 801a24e:	e009      	b.n	801a264 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801a250:	6839      	ldr	r1, [r7, #0]
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f000 f9e7 	bl	801a626 <USBD_CtlError>
 801a258:	e004      	b.n	801a264 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801a25a:	6878      	ldr	r0, [r7, #4]
 801a25c:	f000 faae 	bl	801a7bc <USBD_CtlSendStatus>
 801a260:	e000      	b.n	801a264 <USBD_GetDescriptor+0x2cc>
    return;
 801a262:	bf00      	nop
  }
}
 801a264:	3710      	adds	r7, #16
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}
 801a26a:	bf00      	nop

0801a26c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b084      	sub	sp, #16
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
 801a274:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	889b      	ldrh	r3, [r3, #4]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d131      	bne.n	801a2e2 <USBD_SetAddress+0x76>
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	88db      	ldrh	r3, [r3, #6]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d12d      	bne.n	801a2e2 <USBD_SetAddress+0x76>
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	885b      	ldrh	r3, [r3, #2]
 801a28a:	2b7f      	cmp	r3, #127	; 0x7f
 801a28c:	d829      	bhi.n	801a2e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	885b      	ldrh	r3, [r3, #2]
 801a292:	b2db      	uxtb	r3, r3
 801a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a298:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	2b03      	cmp	r3, #3
 801a2a4:	d104      	bne.n	801a2b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801a2a6:	6839      	ldr	r1, [r7, #0]
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f000 f9bc 	bl	801a626 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2ae:	e01d      	b.n	801a2ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	7bfa      	ldrb	r2, [r7, #15]
 801a2b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801a2b8:	7bfb      	ldrb	r3, [r7, #15]
 801a2ba:	4619      	mov	r1, r3
 801a2bc:	6878      	ldr	r0, [r7, #4]
 801a2be:	f000 ff5f 	bl	801b180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f000 fa7a 	bl	801a7bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801a2c8:	7bfb      	ldrb	r3, [r7, #15]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d004      	beq.n	801a2d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2202      	movs	r2, #2
 801a2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2d6:	e009      	b.n	801a2ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	2201      	movs	r2, #1
 801a2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2e0:	e004      	b.n	801a2ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801a2e2:	6839      	ldr	r1, [r7, #0]
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f000 f99e 	bl	801a626 <USBD_CtlError>
  }
}
 801a2ea:	bf00      	nop
 801a2ec:	bf00      	nop
 801a2ee:	3710      	adds	r7, #16
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}

0801a2f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b084      	sub	sp, #16
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a2fe:	2300      	movs	r3, #0
 801a300:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	885b      	ldrh	r3, [r3, #2]
 801a306:	b2da      	uxtb	r2, r3
 801a308:	4b4e      	ldr	r3, [pc, #312]	; (801a444 <USBD_SetConfig+0x150>)
 801a30a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801a30c:	4b4d      	ldr	r3, [pc, #308]	; (801a444 <USBD_SetConfig+0x150>)
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	2b01      	cmp	r3, #1
 801a312:	d905      	bls.n	801a320 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801a314:	6839      	ldr	r1, [r7, #0]
 801a316:	6878      	ldr	r0, [r7, #4]
 801a318:	f000 f985 	bl	801a626 <USBD_CtlError>
    return USBD_FAIL;
 801a31c:	2303      	movs	r3, #3
 801a31e:	e08c      	b.n	801a43a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a326:	b2db      	uxtb	r3, r3
 801a328:	2b02      	cmp	r3, #2
 801a32a:	d002      	beq.n	801a332 <USBD_SetConfig+0x3e>
 801a32c:	2b03      	cmp	r3, #3
 801a32e:	d029      	beq.n	801a384 <USBD_SetConfig+0x90>
 801a330:	e075      	b.n	801a41e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801a332:	4b44      	ldr	r3, [pc, #272]	; (801a444 <USBD_SetConfig+0x150>)
 801a334:	781b      	ldrb	r3, [r3, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d020      	beq.n	801a37c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801a33a:	4b42      	ldr	r3, [pc, #264]	; (801a444 <USBD_SetConfig+0x150>)
 801a33c:	781b      	ldrb	r3, [r3, #0]
 801a33e:	461a      	mov	r2, r3
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801a344:	4b3f      	ldr	r3, [pc, #252]	; (801a444 <USBD_SetConfig+0x150>)
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	4619      	mov	r1, r3
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f7fe ffe7 	bl	801931e <USBD_SetClassConfig>
 801a350:	4603      	mov	r3, r0
 801a352:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801a354:	7bfb      	ldrb	r3, [r7, #15]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d008      	beq.n	801a36c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801a35a:	6839      	ldr	r1, [r7, #0]
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f000 f962 	bl	801a626 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	2202      	movs	r2, #2
 801a366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801a36a:	e065      	b.n	801a438 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801a36c:	6878      	ldr	r0, [r7, #4]
 801a36e:	f000 fa25 	bl	801a7bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2203      	movs	r2, #3
 801a376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801a37a:	e05d      	b.n	801a438 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801a37c:	6878      	ldr	r0, [r7, #4]
 801a37e:	f000 fa1d 	bl	801a7bc <USBD_CtlSendStatus>
      break;
 801a382:	e059      	b.n	801a438 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801a384:	4b2f      	ldr	r3, [pc, #188]	; (801a444 <USBD_SetConfig+0x150>)
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d112      	bne.n	801a3b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2202      	movs	r2, #2
 801a390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801a394:	4b2b      	ldr	r3, [pc, #172]	; (801a444 <USBD_SetConfig+0x150>)
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	461a      	mov	r2, r3
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a39e:	4b29      	ldr	r3, [pc, #164]	; (801a444 <USBD_SetConfig+0x150>)
 801a3a0:	781b      	ldrb	r3, [r3, #0]
 801a3a2:	4619      	mov	r1, r3
 801a3a4:	6878      	ldr	r0, [r7, #4]
 801a3a6:	f7fe ffd6 	bl	8019356 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801a3aa:	6878      	ldr	r0, [r7, #4]
 801a3ac:	f000 fa06 	bl	801a7bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801a3b0:	e042      	b.n	801a438 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801a3b2:	4b24      	ldr	r3, [pc, #144]	; (801a444 <USBD_SetConfig+0x150>)
 801a3b4:	781b      	ldrb	r3, [r3, #0]
 801a3b6:	461a      	mov	r2, r3
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d02a      	beq.n	801a416 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	685b      	ldr	r3, [r3, #4]
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	4619      	mov	r1, r3
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f7fe ffc4 	bl	8019356 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801a3ce:	4b1d      	ldr	r3, [pc, #116]	; (801a444 <USBD_SetConfig+0x150>)
 801a3d0:	781b      	ldrb	r3, [r3, #0]
 801a3d2:	461a      	mov	r2, r3
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801a3d8:	4b1a      	ldr	r3, [pc, #104]	; (801a444 <USBD_SetConfig+0x150>)
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	4619      	mov	r1, r3
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f7fe ff9d 	bl	801931e <USBD_SetClassConfig>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801a3e8:	7bfb      	ldrb	r3, [r7, #15]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d00f      	beq.n	801a40e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801a3ee:	6839      	ldr	r1, [r7, #0]
 801a3f0:	6878      	ldr	r0, [r7, #4]
 801a3f2:	f000 f918 	bl	801a626 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	b2db      	uxtb	r3, r3
 801a3fc:	4619      	mov	r1, r3
 801a3fe:	6878      	ldr	r0, [r7, #4]
 801a400:	f7fe ffa9 	bl	8019356 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	2202      	movs	r2, #2
 801a408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801a40c:	e014      	b.n	801a438 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801a40e:	6878      	ldr	r0, [r7, #4]
 801a410:	f000 f9d4 	bl	801a7bc <USBD_CtlSendStatus>
      break;
 801a414:	e010      	b.n	801a438 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f000 f9d0 	bl	801a7bc <USBD_CtlSendStatus>
      break;
 801a41c:	e00c      	b.n	801a438 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801a41e:	6839      	ldr	r1, [r7, #0]
 801a420:	6878      	ldr	r0, [r7, #4]
 801a422:	f000 f900 	bl	801a626 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a426:	4b07      	ldr	r3, [pc, #28]	; (801a444 <USBD_SetConfig+0x150>)
 801a428:	781b      	ldrb	r3, [r3, #0]
 801a42a:	4619      	mov	r1, r3
 801a42c:	6878      	ldr	r0, [r7, #4]
 801a42e:	f7fe ff92 	bl	8019356 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801a432:	2303      	movs	r3, #3
 801a434:	73fb      	strb	r3, [r7, #15]
      break;
 801a436:	bf00      	nop
  }

  return ret;
 801a438:	7bfb      	ldrb	r3, [r7, #15]
}
 801a43a:	4618      	mov	r0, r3
 801a43c:	3710      	adds	r7, #16
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd80      	pop	{r7, pc}
 801a442:	bf00      	nop
 801a444:	24033518 	.word	0x24033518

0801a448 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801a452:	683b      	ldr	r3, [r7, #0]
 801a454:	88db      	ldrh	r3, [r3, #6]
 801a456:	2b01      	cmp	r3, #1
 801a458:	d004      	beq.n	801a464 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801a45a:	6839      	ldr	r1, [r7, #0]
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f000 f8e2 	bl	801a626 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801a462:	e023      	b.n	801a4ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a46a:	b2db      	uxtb	r3, r3
 801a46c:	2b02      	cmp	r3, #2
 801a46e:	dc02      	bgt.n	801a476 <USBD_GetConfig+0x2e>
 801a470:	2b00      	cmp	r3, #0
 801a472:	dc03      	bgt.n	801a47c <USBD_GetConfig+0x34>
 801a474:	e015      	b.n	801a4a2 <USBD_GetConfig+0x5a>
 801a476:	2b03      	cmp	r3, #3
 801a478:	d00b      	beq.n	801a492 <USBD_GetConfig+0x4a>
 801a47a:	e012      	b.n	801a4a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2200      	movs	r2, #0
 801a480:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	3308      	adds	r3, #8
 801a486:	2201      	movs	r2, #1
 801a488:	4619      	mov	r1, r3
 801a48a:	6878      	ldr	r0, [r7, #4]
 801a48c:	f000 f93c 	bl	801a708 <USBD_CtlSendData>
        break;
 801a490:	e00c      	b.n	801a4ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	3304      	adds	r3, #4
 801a496:	2201      	movs	r2, #1
 801a498:	4619      	mov	r1, r3
 801a49a:	6878      	ldr	r0, [r7, #4]
 801a49c:	f000 f934 	bl	801a708 <USBD_CtlSendData>
        break;
 801a4a0:	e004      	b.n	801a4ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801a4a2:	6839      	ldr	r1, [r7, #0]
 801a4a4:	6878      	ldr	r0, [r7, #4]
 801a4a6:	f000 f8be 	bl	801a626 <USBD_CtlError>
        break;
 801a4aa:	bf00      	nop
}
 801a4ac:	bf00      	nop
 801a4ae:	3708      	adds	r7, #8
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}

0801a4b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b082      	sub	sp, #8
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
 801a4bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4c4:	b2db      	uxtb	r3, r3
 801a4c6:	3b01      	subs	r3, #1
 801a4c8:	2b02      	cmp	r3, #2
 801a4ca:	d81e      	bhi.n	801a50a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801a4cc:	683b      	ldr	r3, [r7, #0]
 801a4ce:	88db      	ldrh	r3, [r3, #6]
 801a4d0:	2b02      	cmp	r3, #2
 801a4d2:	d004      	beq.n	801a4de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801a4d4:	6839      	ldr	r1, [r7, #0]
 801a4d6:	6878      	ldr	r0, [r7, #4]
 801a4d8:	f000 f8a5 	bl	801a626 <USBD_CtlError>
        break;
 801a4dc:	e01a      	b.n	801a514 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	2201      	movs	r2, #1
 801a4e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d005      	beq.n	801a4fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	f043 0202 	orr.w	r2, r3, #2
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	330c      	adds	r3, #12
 801a4fe:	2202      	movs	r2, #2
 801a500:	4619      	mov	r1, r3
 801a502:	6878      	ldr	r0, [r7, #4]
 801a504:	f000 f900 	bl	801a708 <USBD_CtlSendData>
      break;
 801a508:	e004      	b.n	801a514 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801a50a:	6839      	ldr	r1, [r7, #0]
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	f000 f88a 	bl	801a626 <USBD_CtlError>
      break;
 801a512:	bf00      	nop
  }
}
 801a514:	bf00      	nop
 801a516:	3708      	adds	r7, #8
 801a518:	46bd      	mov	sp, r7
 801a51a:	bd80      	pop	{r7, pc}

0801a51c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b082      	sub	sp, #8
 801a520:	af00      	add	r7, sp, #0
 801a522:	6078      	str	r0, [r7, #4]
 801a524:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	885b      	ldrh	r3, [r3, #2]
 801a52a:	2b01      	cmp	r3, #1
 801a52c:	d107      	bne.n	801a53e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2201      	movs	r2, #1
 801a532:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801a536:	6878      	ldr	r0, [r7, #4]
 801a538:	f000 f940 	bl	801a7bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801a53c:	e013      	b.n	801a566 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	885b      	ldrh	r3, [r3, #2]
 801a542:	2b02      	cmp	r3, #2
 801a544:	d10b      	bne.n	801a55e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	889b      	ldrh	r3, [r3, #4]
 801a54a:	0a1b      	lsrs	r3, r3, #8
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	b2da      	uxtb	r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	f000 f930 	bl	801a7bc <USBD_CtlSendStatus>
}
 801a55c:	e003      	b.n	801a566 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801a55e:	6839      	ldr	r1, [r7, #0]
 801a560:	6878      	ldr	r0, [r7, #4]
 801a562:	f000 f860 	bl	801a626 <USBD_CtlError>
}
 801a566:	bf00      	nop
 801a568:	3708      	adds	r7, #8
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}

0801a56e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a56e:	b580      	push	{r7, lr}
 801a570:	b082      	sub	sp, #8
 801a572:	af00      	add	r7, sp, #0
 801a574:	6078      	str	r0, [r7, #4]
 801a576:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a57e:	b2db      	uxtb	r3, r3
 801a580:	3b01      	subs	r3, #1
 801a582:	2b02      	cmp	r3, #2
 801a584:	d80b      	bhi.n	801a59e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a586:	683b      	ldr	r3, [r7, #0]
 801a588:	885b      	ldrh	r3, [r3, #2]
 801a58a:	2b01      	cmp	r3, #1
 801a58c:	d10c      	bne.n	801a5a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	2200      	movs	r2, #0
 801a592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801a596:	6878      	ldr	r0, [r7, #4]
 801a598:	f000 f910 	bl	801a7bc <USBD_CtlSendStatus>
      }
      break;
 801a59c:	e004      	b.n	801a5a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801a59e:	6839      	ldr	r1, [r7, #0]
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f000 f840 	bl	801a626 <USBD_CtlError>
      break;
 801a5a6:	e000      	b.n	801a5aa <USBD_ClrFeature+0x3c>
      break;
 801a5a8:	bf00      	nop
  }
}
 801a5aa:	bf00      	nop
 801a5ac:	3708      	adds	r7, #8
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bd80      	pop	{r7, pc}

0801a5b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801a5b2:	b580      	push	{r7, lr}
 801a5b4:	b084      	sub	sp, #16
 801a5b6:	af00      	add	r7, sp, #0
 801a5b8:	6078      	str	r0, [r7, #4]
 801a5ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	781a      	ldrb	r2, [r3, #0]
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	3301      	adds	r3, #1
 801a5cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	781a      	ldrb	r2, [r3, #0]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	3301      	adds	r3, #1
 801a5da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801a5dc:	68f8      	ldr	r0, [r7, #12]
 801a5de:	f7ff fa41 	bl	8019a64 <SWAPBYTE>
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	3301      	adds	r3, #1
 801a5ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	3301      	adds	r3, #1
 801a5f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801a5f6:	68f8      	ldr	r0, [r7, #12]
 801a5f8:	f7ff fa34 	bl	8019a64 <SWAPBYTE>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	461a      	mov	r2, r3
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	3301      	adds	r3, #1
 801a608:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	3301      	adds	r3, #1
 801a60e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801a610:	68f8      	ldr	r0, [r7, #12]
 801a612:	f7ff fa27 	bl	8019a64 <SWAPBYTE>
 801a616:	4603      	mov	r3, r0
 801a618:	461a      	mov	r2, r3
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	80da      	strh	r2, [r3, #6]
}
 801a61e:	bf00      	nop
 801a620:	3710      	adds	r7, #16
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}

0801a626 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a626:	b580      	push	{r7, lr}
 801a628:	b082      	sub	sp, #8
 801a62a:	af00      	add	r7, sp, #0
 801a62c:	6078      	str	r0, [r7, #4]
 801a62e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801a630:	2180      	movs	r1, #128	; 0x80
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	f000 fd3a 	bl	801b0ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801a638:	2100      	movs	r1, #0
 801a63a:	6878      	ldr	r0, [r7, #4]
 801a63c:	f000 fd36 	bl	801b0ac <USBD_LL_StallEP>
}
 801a640:	bf00      	nop
 801a642:	3708      	adds	r7, #8
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}

0801a648 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b086      	sub	sp, #24
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801a654:	2300      	movs	r3, #0
 801a656:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d036      	beq.n	801a6cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801a662:	6938      	ldr	r0, [r7, #16]
 801a664:	f000 f836 	bl	801a6d4 <USBD_GetLen>
 801a668:	4603      	mov	r3, r0
 801a66a:	3301      	adds	r3, #1
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	005b      	lsls	r3, r3, #1
 801a670:	b29a      	uxth	r2, r3
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801a676:	7dfb      	ldrb	r3, [r7, #23]
 801a678:	68ba      	ldr	r2, [r7, #8]
 801a67a:	4413      	add	r3, r2
 801a67c:	687a      	ldr	r2, [r7, #4]
 801a67e:	7812      	ldrb	r2, [r2, #0]
 801a680:	701a      	strb	r2, [r3, #0]
  idx++;
 801a682:	7dfb      	ldrb	r3, [r7, #23]
 801a684:	3301      	adds	r3, #1
 801a686:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801a688:	7dfb      	ldrb	r3, [r7, #23]
 801a68a:	68ba      	ldr	r2, [r7, #8]
 801a68c:	4413      	add	r3, r2
 801a68e:	2203      	movs	r2, #3
 801a690:	701a      	strb	r2, [r3, #0]
  idx++;
 801a692:	7dfb      	ldrb	r3, [r7, #23]
 801a694:	3301      	adds	r3, #1
 801a696:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801a698:	e013      	b.n	801a6c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801a69a:	7dfb      	ldrb	r3, [r7, #23]
 801a69c:	68ba      	ldr	r2, [r7, #8]
 801a69e:	4413      	add	r3, r2
 801a6a0:	693a      	ldr	r2, [r7, #16]
 801a6a2:	7812      	ldrb	r2, [r2, #0]
 801a6a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801a6a6:	693b      	ldr	r3, [r7, #16]
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	613b      	str	r3, [r7, #16]
    idx++;
 801a6ac:	7dfb      	ldrb	r3, [r7, #23]
 801a6ae:	3301      	adds	r3, #1
 801a6b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801a6b2:	7dfb      	ldrb	r3, [r7, #23]
 801a6b4:	68ba      	ldr	r2, [r7, #8]
 801a6b6:	4413      	add	r3, r2
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	701a      	strb	r2, [r3, #0]
    idx++;
 801a6bc:	7dfb      	ldrb	r3, [r7, #23]
 801a6be:	3301      	adds	r3, #1
 801a6c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d1e7      	bne.n	801a69a <USBD_GetString+0x52>
 801a6ca:	e000      	b.n	801a6ce <USBD_GetString+0x86>
    return;
 801a6cc:	bf00      	nop
  }
}
 801a6ce:	3718      	adds	r7, #24
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}

0801a6d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801a6d4:	b480      	push	{r7}
 801a6d6:	b085      	sub	sp, #20
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801a6e4:	e005      	b.n	801a6f2 <USBD_GetLen+0x1e>
  {
    len++;
 801a6e6:	7bfb      	ldrb	r3, [r7, #15]
 801a6e8:	3301      	adds	r3, #1
 801a6ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	3301      	adds	r3, #1
 801a6f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801a6f2:	68bb      	ldr	r3, [r7, #8]
 801a6f4:	781b      	ldrb	r3, [r3, #0]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d1f5      	bne.n	801a6e6 <USBD_GetLen+0x12>
  }

  return len;
 801a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	3714      	adds	r7, #20
 801a700:	46bd      	mov	sp, r7
 801a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a706:	4770      	bx	lr

0801a708 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b084      	sub	sp, #16
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	60f8      	str	r0, [r7, #12]
 801a710:	60b9      	str	r1, [r7, #8]
 801a712:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	2202      	movs	r2, #2
 801a718:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	687a      	ldr	r2, [r7, #4]
 801a720:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	68ba      	ldr	r2, [r7, #8]
 801a72c:	2100      	movs	r1, #0
 801a72e:	68f8      	ldr	r0, [r7, #12]
 801a730:	f000 fd45 	bl	801b1be <USBD_LL_Transmit>

  return USBD_OK;
 801a734:	2300      	movs	r3, #0
}
 801a736:	4618      	mov	r0, r3
 801a738:	3710      	adds	r7, #16
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}

0801a73e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801a73e:	b580      	push	{r7, lr}
 801a740:	b084      	sub	sp, #16
 801a742:	af00      	add	r7, sp, #0
 801a744:	60f8      	str	r0, [r7, #12]
 801a746:	60b9      	str	r1, [r7, #8]
 801a748:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	68ba      	ldr	r2, [r7, #8]
 801a74e:	2100      	movs	r1, #0
 801a750:	68f8      	ldr	r0, [r7, #12]
 801a752:	f000 fd34 	bl	801b1be <USBD_LL_Transmit>

  return USBD_OK;
 801a756:	2300      	movs	r3, #0
}
 801a758:	4618      	mov	r0, r3
 801a75a:	3710      	adds	r7, #16
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}

0801a760 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b084      	sub	sp, #16
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	60b9      	str	r1, [r7, #8]
 801a76a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	2203      	movs	r2, #3
 801a770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	687a      	ldr	r2, [r7, #4]
 801a778:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	68ba      	ldr	r2, [r7, #8]
 801a788:	2100      	movs	r1, #0
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	f000 fd38 	bl	801b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a790:	2300      	movs	r3, #0
}
 801a792:	4618      	mov	r0, r3
 801a794:	3710      	adds	r7, #16
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}

0801a79a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801a79a:	b580      	push	{r7, lr}
 801a79c:	b084      	sub	sp, #16
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	60f8      	str	r0, [r7, #12]
 801a7a2:	60b9      	str	r1, [r7, #8]
 801a7a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	68ba      	ldr	r2, [r7, #8]
 801a7aa:	2100      	movs	r1, #0
 801a7ac:	68f8      	ldr	r0, [r7, #12]
 801a7ae:	f000 fd27 	bl	801b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a7b2:	2300      	movs	r3, #0
}
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	3710      	adds	r7, #16
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}

0801a7bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b082      	sub	sp, #8
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2204      	movs	r2, #4
 801a7c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	6878      	ldr	r0, [r7, #4]
 801a7d4:	f000 fcf3 	bl	801b1be <USBD_LL_Transmit>

  return USBD_OK;
 801a7d8:	2300      	movs	r3, #0
}
 801a7da:	4618      	mov	r0, r3
 801a7dc:	3708      	adds	r7, #8
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd80      	pop	{r7, pc}

0801a7e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801a7e2:	b580      	push	{r7, lr}
 801a7e4:	b082      	sub	sp, #8
 801a7e6:	af00      	add	r7, sp, #0
 801a7e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	2205      	movs	r2, #5
 801a7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	2100      	movs	r1, #0
 801a7f8:	6878      	ldr	r0, [r7, #4]
 801a7fa:	f000 fd01 	bl	801b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a7fe:	2300      	movs	r3, #0
}
 801a800:	4618      	mov	r0, r3
 801a802:	3708      	adds	r7, #8
 801a804:	46bd      	mov	sp, r7
 801a806:	bd80      	pop	{r7, pc}

0801a808 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a80c:	2200      	movs	r2, #0
 801a80e:	4913      	ldr	r1, [pc, #76]	; (801a85c <MX_USB_DEVICE_Init+0x54>)
 801a810:	4813      	ldr	r0, [pc, #76]	; (801a860 <MX_USB_DEVICE_Init+0x58>)
 801a812:	f7fe fd07 	bl	8019224 <USBD_Init>
 801a816:	4603      	mov	r3, r0
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d001      	beq.n	801a820 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a81c:	f7f0 fb08 	bl	800ae30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a820:	4910      	ldr	r1, [pc, #64]	; (801a864 <MX_USB_DEVICE_Init+0x5c>)
 801a822:	480f      	ldr	r0, [pc, #60]	; (801a860 <MX_USB_DEVICE_Init+0x58>)
 801a824:	f7fe fd2e 	bl	8019284 <USBD_RegisterClass>
 801a828:	4603      	mov	r3, r0
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d001      	beq.n	801a832 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a82e:	f7f0 faff 	bl	800ae30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a832:	490d      	ldr	r1, [pc, #52]	; (801a868 <MX_USB_DEVICE_Init+0x60>)
 801a834:	480a      	ldr	r0, [pc, #40]	; (801a860 <MX_USB_DEVICE_Init+0x58>)
 801a836:	f7fe fc1f 	bl	8019078 <USBD_CDC_RegisterInterface>
 801a83a:	4603      	mov	r3, r0
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d001      	beq.n	801a844 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a840:	f7f0 faf6 	bl	800ae30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a844:	4806      	ldr	r0, [pc, #24]	; (801a860 <MX_USB_DEVICE_Init+0x58>)
 801a846:	f7fe fd53 	bl	80192f0 <USBD_Start>
 801a84a:	4603      	mov	r3, r0
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d001      	beq.n	801a854 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a850:	f7f0 faee 	bl	800ae30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a854:	f7f6 f8bc 	bl	80109d0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a858:	bf00      	nop
 801a85a:	bd80      	pop	{r7, pc}
 801a85c:	24008118 	.word	0x24008118
 801a860:	2403351c 	.word	0x2403351c
 801a864:	24008084 	.word	0x24008084
 801a868:	24008104 	.word	0x24008104

0801a86c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a870:	2200      	movs	r2, #0
 801a872:	4905      	ldr	r1, [pc, #20]	; (801a888 <CDC_Init_FS+0x1c>)
 801a874:	4805      	ldr	r0, [pc, #20]	; (801a88c <CDC_Init_FS+0x20>)
 801a876:	f7fe fc19 	bl	80190ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a87a:	4905      	ldr	r1, [pc, #20]	; (801a890 <CDC_Init_FS+0x24>)
 801a87c:	4803      	ldr	r0, [pc, #12]	; (801a88c <CDC_Init_FS+0x20>)
 801a87e:	f7fe fc37 	bl	80190f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a884:	4618      	mov	r0, r3
 801a886:	bd80      	pop	{r7, pc}
 801a888:	24033ff8 	.word	0x24033ff8
 801a88c:	2403351c 	.word	0x2403351c
 801a890:	240337f8 	.word	0x240337f8

0801a894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a894:	b480      	push	{r7}
 801a896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a89a:	4618      	mov	r0, r3
 801a89c:	46bd      	mov	sp, r7
 801a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a2:	4770      	bx	lr

0801a8a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a8a4:	b480      	push	{r7}
 801a8a6:	b083      	sub	sp, #12
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	6039      	str	r1, [r7, #0]
 801a8ae:	71fb      	strb	r3, [r7, #7]
 801a8b0:	4613      	mov	r3, r2
 801a8b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a8b4:	79fb      	ldrb	r3, [r7, #7]
 801a8b6:	2b23      	cmp	r3, #35	; 0x23
 801a8b8:	d84a      	bhi.n	801a950 <CDC_Control_FS+0xac>
 801a8ba:	a201      	add	r2, pc, #4	; (adr r2, 801a8c0 <CDC_Control_FS+0x1c>)
 801a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8c0:	0801a951 	.word	0x0801a951
 801a8c4:	0801a951 	.word	0x0801a951
 801a8c8:	0801a951 	.word	0x0801a951
 801a8cc:	0801a951 	.word	0x0801a951
 801a8d0:	0801a951 	.word	0x0801a951
 801a8d4:	0801a951 	.word	0x0801a951
 801a8d8:	0801a951 	.word	0x0801a951
 801a8dc:	0801a951 	.word	0x0801a951
 801a8e0:	0801a951 	.word	0x0801a951
 801a8e4:	0801a951 	.word	0x0801a951
 801a8e8:	0801a951 	.word	0x0801a951
 801a8ec:	0801a951 	.word	0x0801a951
 801a8f0:	0801a951 	.word	0x0801a951
 801a8f4:	0801a951 	.word	0x0801a951
 801a8f8:	0801a951 	.word	0x0801a951
 801a8fc:	0801a951 	.word	0x0801a951
 801a900:	0801a951 	.word	0x0801a951
 801a904:	0801a951 	.word	0x0801a951
 801a908:	0801a951 	.word	0x0801a951
 801a90c:	0801a951 	.word	0x0801a951
 801a910:	0801a951 	.word	0x0801a951
 801a914:	0801a951 	.word	0x0801a951
 801a918:	0801a951 	.word	0x0801a951
 801a91c:	0801a951 	.word	0x0801a951
 801a920:	0801a951 	.word	0x0801a951
 801a924:	0801a951 	.word	0x0801a951
 801a928:	0801a951 	.word	0x0801a951
 801a92c:	0801a951 	.word	0x0801a951
 801a930:	0801a951 	.word	0x0801a951
 801a934:	0801a951 	.word	0x0801a951
 801a938:	0801a951 	.word	0x0801a951
 801a93c:	0801a951 	.word	0x0801a951
 801a940:	0801a951 	.word	0x0801a951
 801a944:	0801a951 	.word	0x0801a951
 801a948:	0801a951 	.word	0x0801a951
 801a94c:	0801a951 	.word	0x0801a951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a950:	bf00      	nop
  }

  return (USBD_OK);
 801a952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a954:	4618      	mov	r0, r3
 801a956:	370c      	adds	r7, #12
 801a958:	46bd      	mov	sp, r7
 801a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95e:	4770      	bx	lr

0801a960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b082      	sub	sp, #8
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
 801a968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	  FuzzingInputHandler(Buf, Len);
 801a96a:	6839      	ldr	r1, [r7, #0]
 801a96c:	6878      	ldr	r0, [r7, #4]
 801a96e:	f7ef fd5f 	bl	800a430 <FuzzingInputHandler>


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a972:	6879      	ldr	r1, [r7, #4]
 801a974:	4805      	ldr	r0, [pc, #20]	; (801a98c <CDC_Receive_FS+0x2c>)
 801a976:	f7fe fbbb 	bl	80190f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a97a:	4804      	ldr	r0, [pc, #16]	; (801a98c <CDC_Receive_FS+0x2c>)
 801a97c:	f7fe fc1c 	bl	80191b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a980:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a982:	4618      	mov	r0, r3
 801a984:	3708      	adds	r7, #8
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}
 801a98a:	bf00      	nop
 801a98c:	2403351c 	.word	0x2403351c

0801a990 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b084      	sub	sp, #16
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	460b      	mov	r3, r1
 801a99a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a99c:	2300      	movs	r3, #0
 801a99e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801a9a0:	4b0d      	ldr	r3, [pc, #52]	; (801a9d8 <CDC_Transmit_FS+0x48>)
 801a9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a9a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d001      	beq.n	801a9b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	e00b      	b.n	801a9ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801a9b6:	887b      	ldrh	r3, [r7, #2]
 801a9b8:	461a      	mov	r2, r3
 801a9ba:	6879      	ldr	r1, [r7, #4]
 801a9bc:	4806      	ldr	r0, [pc, #24]	; (801a9d8 <CDC_Transmit_FS+0x48>)
 801a9be:	f7fe fb75 	bl	80190ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801a9c2:	4805      	ldr	r0, [pc, #20]	; (801a9d8 <CDC_Transmit_FS+0x48>)
 801a9c4:	f7fe fbb2 	bl	801912c <USBD_CDC_TransmitPacket>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	3710      	adds	r7, #16
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
 801a9d6:	bf00      	nop
 801a9d8:	2403351c 	.word	0x2403351c

0801a9dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b08a      	sub	sp, #40	; 0x28
 801a9e0:	af02      	add	r7, sp, #8
 801a9e2:	60f8      	str	r0, [r7, #12]
 801a9e4:	60b9      	str	r1, [r7, #8]
 801a9e6:	4613      	mov	r3, r2
 801a9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	77fb      	strb	r3, [r7, #31]
  UNUSED(Len);
  UNUSED(epnum);


  BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	617b      	str	r3, [r7, #20]

    Fuzzer_t *pAFLfuzzer = (Fuzzer_t *)AFLfuzzerRegion;
 801a9f2:	4b12      	ldr	r3, [pc, #72]	; (801aa3c <CDC_TransmitCplt_FS+0x60>)
 801a9f4:	61bb      	str	r3, [r7, #24]

    AFLfuzzer.bTXcomplete = true;
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801a9fc:	2201      	movs	r2, #1
 801a9fe:	f883 2865 	strb.w	r2, [r3, #2149]	; 0x865
    xTaskNotifyIndexedFromISR(AFLfuzzer.xTaskFuzzer,
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801aa08:	f8d3 086c 	ldr.w	r0, [r3, #2156]	; 0x86c
 801aa0c:	f107 0314 	add.w	r3, r7, #20
 801aa10:	9301      	str	r3, [sp, #4]
 801aa12:	2300      	movs	r3, #0
 801aa14:	9300      	str	r3, [sp, #0]
 801aa16:	2301      	movs	r3, #1
 801aa18:	2202      	movs	r2, #2
 801aa1a:	2101      	movs	r1, #1
 801aa1c:	f7e9 fd98 	bl	8004550 <xTaskGenericNotifyFromISR>
  	  	    				1, //index
  							2, //value = 2 data TX complete
  							eSetBits,
  							&xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d003      	beq.n	801aa2e <CDC_TransmitCplt_FS+0x52>
 801aa26:	4b06      	ldr	r3, [pc, #24]	; (801aa40 <CDC_TransmitCplt_FS+0x64>)
 801aa28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa2c:	601a      	str	r2, [r3, #0]


  /* USER CODE END 13 */
  return result;
 801aa2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aa32:	4618      	mov	r0, r3
 801aa34:	3720      	adds	r7, #32
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	24020000 	.word	0x24020000
 801aa40:	e000ed04 	.word	0xe000ed04

0801aa44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa44:	b480      	push	{r7}
 801aa46:	b083      	sub	sp, #12
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	6039      	str	r1, [r7, #0]
 801aa4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	2212      	movs	r2, #18
 801aa54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801aa56:	4b03      	ldr	r3, [pc, #12]	; (801aa64 <USBD_FS_DeviceDescriptor+0x20>)
}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	370c      	adds	r7, #12
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa62:	4770      	bx	lr
 801aa64:	24008134 	.word	0x24008134

0801aa68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa68:	b480      	push	{r7}
 801aa6a:	b083      	sub	sp, #12
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	4603      	mov	r3, r0
 801aa70:	6039      	str	r1, [r7, #0]
 801aa72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801aa74:	683b      	ldr	r3, [r7, #0]
 801aa76:	2204      	movs	r2, #4
 801aa78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801aa7a:	4b03      	ldr	r3, [pc, #12]	; (801aa88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	370c      	adds	r7, #12
 801aa80:	46bd      	mov	sp, r7
 801aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa86:	4770      	bx	lr
 801aa88:	24008148 	.word	0x24008148

0801aa8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b082      	sub	sp, #8
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	4603      	mov	r3, r0
 801aa94:	6039      	str	r1, [r7, #0]
 801aa96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aa98:	79fb      	ldrb	r3, [r7, #7]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d105      	bne.n	801aaaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aa9e:	683a      	ldr	r2, [r7, #0]
 801aaa0:	4907      	ldr	r1, [pc, #28]	; (801aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 801aaa2:	4808      	ldr	r0, [pc, #32]	; (801aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 801aaa4:	f7ff fdd0 	bl	801a648 <USBD_GetString>
 801aaa8:	e004      	b.n	801aab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aaaa:	683a      	ldr	r2, [r7, #0]
 801aaac:	4904      	ldr	r1, [pc, #16]	; (801aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 801aaae:	4805      	ldr	r0, [pc, #20]	; (801aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 801aab0:	f7ff fdca 	bl	801a648 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aab4:	4b02      	ldr	r3, [pc, #8]	; (801aac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3708      	adds	r7, #8
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
 801aabe:	bf00      	nop
 801aac0:	240347f8 	.word	0x240347f8
 801aac4:	2400848c 	.word	0x2400848c

0801aac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b082      	sub	sp, #8
 801aacc:	af00      	add	r7, sp, #0
 801aace:	4603      	mov	r3, r0
 801aad0:	6039      	str	r1, [r7, #0]
 801aad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801aad4:	683a      	ldr	r2, [r7, #0]
 801aad6:	4904      	ldr	r1, [pc, #16]	; (801aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801aad8:	4804      	ldr	r0, [pc, #16]	; (801aaec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801aada:	f7ff fdb5 	bl	801a648 <USBD_GetString>
  return USBD_StrDesc;
 801aade:	4b02      	ldr	r3, [pc, #8]	; (801aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3708      	adds	r7, #8
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	240347f8 	.word	0x240347f8
 801aaec:	240084a4 	.word	0x240084a4

0801aaf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	6039      	str	r1, [r7, #0]
 801aafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	221a      	movs	r2, #26
 801ab00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ab02:	f000 f843 	bl	801ab8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ab06:	4b02      	ldr	r3, [pc, #8]	; (801ab10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3708      	adds	r7, #8
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	2400814c 	.word	0x2400814c

0801ab14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b082      	sub	sp, #8
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	6039      	str	r1, [r7, #0]
 801ab1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ab20:	79fb      	ldrb	r3, [r7, #7]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d105      	bne.n	801ab32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ab26:	683a      	ldr	r2, [r7, #0]
 801ab28:	4907      	ldr	r1, [pc, #28]	; (801ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ab2a:	4808      	ldr	r0, [pc, #32]	; (801ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ab2c:	f7ff fd8c 	bl	801a648 <USBD_GetString>
 801ab30:	e004      	b.n	801ab3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ab32:	683a      	ldr	r2, [r7, #0]
 801ab34:	4904      	ldr	r1, [pc, #16]	; (801ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ab36:	4805      	ldr	r0, [pc, #20]	; (801ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ab38:	f7ff fd86 	bl	801a648 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab3c:	4b02      	ldr	r3, [pc, #8]	; (801ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ab3e:	4618      	mov	r0, r3
 801ab40:	3708      	adds	r7, #8
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	240347f8 	.word	0x240347f8
 801ab4c:	240084b8 	.word	0x240084b8

0801ab50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b082      	sub	sp, #8
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	4603      	mov	r3, r0
 801ab58:	6039      	str	r1, [r7, #0]
 801ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ab5c:	79fb      	ldrb	r3, [r7, #7]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d105      	bne.n	801ab6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ab62:	683a      	ldr	r2, [r7, #0]
 801ab64:	4907      	ldr	r1, [pc, #28]	; (801ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ab66:	4808      	ldr	r0, [pc, #32]	; (801ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ab68:	f7ff fd6e 	bl	801a648 <USBD_GetString>
 801ab6c:	e004      	b.n	801ab78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ab6e:	683a      	ldr	r2, [r7, #0]
 801ab70:	4904      	ldr	r1, [pc, #16]	; (801ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ab72:	4805      	ldr	r0, [pc, #20]	; (801ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ab74:	f7ff fd68 	bl	801a648 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab78:	4b02      	ldr	r3, [pc, #8]	; (801ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	3708      	adds	r7, #8
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}
 801ab82:	bf00      	nop
 801ab84:	240347f8 	.word	0x240347f8
 801ab88:	240084c4 	.word	0x240084c4

0801ab8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b084      	sub	sp, #16
 801ab90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ab92:	4b0f      	ldr	r3, [pc, #60]	; (801abd0 <Get_SerialNum+0x44>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ab98:	4b0e      	ldr	r3, [pc, #56]	; (801abd4 <Get_SerialNum+0x48>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ab9e:	4b0e      	ldr	r3, [pc, #56]	; (801abd8 <Get_SerialNum+0x4c>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801aba4:	68fa      	ldr	r2, [r7, #12]
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	4413      	add	r3, r2
 801abaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d009      	beq.n	801abc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801abb2:	2208      	movs	r2, #8
 801abb4:	4909      	ldr	r1, [pc, #36]	; (801abdc <Get_SerialNum+0x50>)
 801abb6:	68f8      	ldr	r0, [r7, #12]
 801abb8:	f000 f814 	bl	801abe4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801abbc:	2204      	movs	r2, #4
 801abbe:	4908      	ldr	r1, [pc, #32]	; (801abe0 <Get_SerialNum+0x54>)
 801abc0:	68b8      	ldr	r0, [r7, #8]
 801abc2:	f000 f80f 	bl	801abe4 <IntToUnicode>
  }
}
 801abc6:	bf00      	nop
 801abc8:	3710      	adds	r7, #16
 801abca:	46bd      	mov	sp, r7
 801abcc:	bd80      	pop	{r7, pc}
 801abce:	bf00      	nop
 801abd0:	1ff1e800 	.word	0x1ff1e800
 801abd4:	1ff1e804 	.word	0x1ff1e804
 801abd8:	1ff1e808 	.word	0x1ff1e808
 801abdc:	2400814e 	.word	0x2400814e
 801abe0:	2400815e 	.word	0x2400815e

0801abe4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801abe4:	b480      	push	{r7}
 801abe6:	b087      	sub	sp, #28
 801abe8:	af00      	add	r7, sp, #0
 801abea:	60f8      	str	r0, [r7, #12]
 801abec:	60b9      	str	r1, [r7, #8]
 801abee:	4613      	mov	r3, r2
 801abf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801abf2:	2300      	movs	r3, #0
 801abf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801abf6:	2300      	movs	r3, #0
 801abf8:	75fb      	strb	r3, [r7, #23]
 801abfa:	e027      	b.n	801ac4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	0f1b      	lsrs	r3, r3, #28
 801ac00:	2b09      	cmp	r3, #9
 801ac02:	d80b      	bhi.n	801ac1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	0f1b      	lsrs	r3, r3, #28
 801ac08:	b2da      	uxtb	r2, r3
 801ac0a:	7dfb      	ldrb	r3, [r7, #23]
 801ac0c:	005b      	lsls	r3, r3, #1
 801ac0e:	4619      	mov	r1, r3
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	440b      	add	r3, r1
 801ac14:	3230      	adds	r2, #48	; 0x30
 801ac16:	b2d2      	uxtb	r2, r2
 801ac18:	701a      	strb	r2, [r3, #0]
 801ac1a:	e00a      	b.n	801ac32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	0f1b      	lsrs	r3, r3, #28
 801ac20:	b2da      	uxtb	r2, r3
 801ac22:	7dfb      	ldrb	r3, [r7, #23]
 801ac24:	005b      	lsls	r3, r3, #1
 801ac26:	4619      	mov	r1, r3
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	440b      	add	r3, r1
 801ac2c:	3237      	adds	r2, #55	; 0x37
 801ac2e:	b2d2      	uxtb	r2, r2
 801ac30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	011b      	lsls	r3, r3, #4
 801ac36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ac38:	7dfb      	ldrb	r3, [r7, #23]
 801ac3a:	005b      	lsls	r3, r3, #1
 801ac3c:	3301      	adds	r3, #1
 801ac3e:	68ba      	ldr	r2, [r7, #8]
 801ac40:	4413      	add	r3, r2
 801ac42:	2200      	movs	r2, #0
 801ac44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ac46:	7dfb      	ldrb	r3, [r7, #23]
 801ac48:	3301      	adds	r3, #1
 801ac4a:	75fb      	strb	r3, [r7, #23]
 801ac4c:	7dfa      	ldrb	r2, [r7, #23]
 801ac4e:	79fb      	ldrb	r3, [r7, #7]
 801ac50:	429a      	cmp	r2, r3
 801ac52:	d3d3      	bcc.n	801abfc <IntToUnicode+0x18>
  }
}
 801ac54:	bf00      	nop
 801ac56:	bf00      	nop
 801ac58:	371c      	adds	r7, #28
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac60:	4770      	bx	lr
	...

0801ac64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b0b8      	sub	sp, #224	; 0xe0
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ac6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ac70:	2200      	movs	r2, #0
 801ac72:	601a      	str	r2, [r3, #0]
 801ac74:	605a      	str	r2, [r3, #4]
 801ac76:	609a      	str	r2, [r3, #8]
 801ac78:	60da      	str	r2, [r3, #12]
 801ac7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ac7c:	f107 0310 	add.w	r3, r7, #16
 801ac80:	22bc      	movs	r2, #188	; 0xbc
 801ac82:	2100      	movs	r1, #0
 801ac84:	4618      	mov	r0, r3
 801ac86:	f000 fc7f 	bl	801b588 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	4a33      	ldr	r2, [pc, #204]	; (801ad5c <HAL_PCD_MspInit+0xf8>)
 801ac90:	4293      	cmp	r3, r2
 801ac92:	d15e      	bne.n	801ad52 <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801ac94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ac98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801ac9a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801ac9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801aca2:	f107 0310 	add.w	r3, r7, #16
 801aca6:	4618      	mov	r0, r3
 801aca8:	f7f6 fe9e 	bl	80119e8 <HAL_RCCEx_PeriphCLKConfig>
 801acac:	4603      	mov	r3, r0
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d001      	beq.n	801acb6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801acb2:	f7f0 f8bd 	bl	800ae30 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801acb6:	f7f5 fe8b 	bl	80109d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801acba:	4b29      	ldr	r3, [pc, #164]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801acbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801acc0:	4a27      	ldr	r2, [pc, #156]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801acc2:	f043 0301 	orr.w	r3, r3, #1
 801acc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801acca:	4b25      	ldr	r3, [pc, #148]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801accc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801acd0:	f003 0301 	and.w	r3, r3, #1
 801acd4:	60fb      	str	r3, [r7, #12]
 801acd6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801acd8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801acdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ace0:	2302      	movs	r3, #2
 801ace2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ace6:	2300      	movs	r3, #0
 801ace8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801acec:	2300      	movs	r3, #0
 801acee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801acf2:	230a      	movs	r3, #10
 801acf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801acf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801acfc:	4619      	mov	r1, r3
 801acfe:	4819      	ldr	r0, [pc, #100]	; (801ad64 <HAL_PCD_MspInit+0x100>)
 801ad00:	f7f4 f884 	bl	800ee0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801ad04:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ad08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ad12:	2300      	movs	r3, #0
 801ad14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ad18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ad1c:	4619      	mov	r1, r3
 801ad1e:	4811      	ldr	r0, [pc, #68]	; (801ad64 <HAL_PCD_MspInit+0x100>)
 801ad20:	f7f4 f874 	bl	800ee0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ad24:	4b0e      	ldr	r3, [pc, #56]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801ad26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ad2a:	4a0d      	ldr	r2, [pc, #52]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801ad2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ad30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801ad34:	4b0a      	ldr	r3, [pc, #40]	; (801ad60 <HAL_PCD_MspInit+0xfc>)
 801ad36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ad3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ad3e:	60bb      	str	r3, [r7, #8]
 801ad40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801ad42:	2200      	movs	r2, #0
 801ad44:	2105      	movs	r1, #5
 801ad46:	2065      	movs	r0, #101	; 0x65
 801ad48:	f7f0 fdea 	bl	800b920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ad4c:	2065      	movs	r0, #101	; 0x65
 801ad4e:	f7f0 fe01 	bl	800b954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ad52:	bf00      	nop
 801ad54:	37e0      	adds	r7, #224	; 0xe0
 801ad56:	46bd      	mov	sp, r7
 801ad58:	bd80      	pop	{r7, pc}
 801ad5a:	bf00      	nop
 801ad5c:	40080000 	.word	0x40080000
 801ad60:	58024400 	.word	0x58024400
 801ad64:	58020000 	.word	0x58020000

0801ad68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b082      	sub	sp, #8
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	4610      	mov	r0, r2
 801ad80:	f7fe fb03 	bl	801938a <USBD_LL_SetupStage>
}
 801ad84:	bf00      	nop
 801ad86:	3708      	adds	r7, #8
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	bd80      	pop	{r7, pc}

0801ad8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b082      	sub	sp, #8
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	460b      	mov	r3, r1
 801ad96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ad9e:	78fa      	ldrb	r2, [r7, #3]
 801ada0:	6879      	ldr	r1, [r7, #4]
 801ada2:	4613      	mov	r3, r2
 801ada4:	00db      	lsls	r3, r3, #3
 801ada6:	4413      	add	r3, r2
 801ada8:	009b      	lsls	r3, r3, #2
 801adaa:	440b      	add	r3, r1
 801adac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801adb0:	681a      	ldr	r2, [r3, #0]
 801adb2:	78fb      	ldrb	r3, [r7, #3]
 801adb4:	4619      	mov	r1, r3
 801adb6:	f7fe fb3d 	bl	8019434 <USBD_LL_DataOutStage>
}
 801adba:	bf00      	nop
 801adbc:	3708      	adds	r7, #8
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}

0801adc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adc2:	b580      	push	{r7, lr}
 801adc4:	b082      	sub	sp, #8
 801adc6:	af00      	add	r7, sp, #0
 801adc8:	6078      	str	r0, [r7, #4]
 801adca:	460b      	mov	r3, r1
 801adcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801add4:	78fa      	ldrb	r2, [r7, #3]
 801add6:	6879      	ldr	r1, [r7, #4]
 801add8:	4613      	mov	r3, r2
 801adda:	00db      	lsls	r3, r3, #3
 801addc:	4413      	add	r3, r2
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	440b      	add	r3, r1
 801ade2:	334c      	adds	r3, #76	; 0x4c
 801ade4:	681a      	ldr	r2, [r3, #0]
 801ade6:	78fb      	ldrb	r3, [r7, #3]
 801ade8:	4619      	mov	r1, r3
 801adea:	f7fe fbd6 	bl	801959a <USBD_LL_DataInStage>
}
 801adee:	bf00      	nop
 801adf0:	3708      	adds	r7, #8
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}

0801adf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adf6:	b580      	push	{r7, lr}
 801adf8:	b082      	sub	sp, #8
 801adfa:	af00      	add	r7, sp, #0
 801adfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7fe fd0a 	bl	801981e <USBD_LL_SOF>
}
 801ae0a:	bf00      	nop
 801ae0c:	3708      	adds	r7, #8
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}

0801ae12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae12:	b580      	push	{r7, lr}
 801ae14:	b084      	sub	sp, #16
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ae1a:	2301      	movs	r3, #1
 801ae1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	68db      	ldr	r3, [r3, #12]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d102      	bne.n	801ae2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ae26:	2300      	movs	r3, #0
 801ae28:	73fb      	strb	r3, [r7, #15]
 801ae2a:	e008      	b.n	801ae3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	68db      	ldr	r3, [r3, #12]
 801ae30:	2b02      	cmp	r3, #2
 801ae32:	d102      	bne.n	801ae3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ae34:	2301      	movs	r3, #1
 801ae36:	73fb      	strb	r3, [r7, #15]
 801ae38:	e001      	b.n	801ae3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801ae3a:	f7ef fff9 	bl	800ae30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae44:	7bfa      	ldrb	r2, [r7, #15]
 801ae46:	4611      	mov	r1, r2
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7fe fcaa 	bl	80197a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae54:	4618      	mov	r0, r3
 801ae56:	f7fe fc52 	bl	80196fe <USBD_LL_Reset>
}
 801ae5a:	bf00      	nop
 801ae5c:	3710      	adds	r7, #16
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
	...

0801ae64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7fe fca5 	bl	80197c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	6812      	ldr	r2, [r2, #0]
 801ae86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ae8a:	f043 0301 	orr.w	r3, r3, #1
 801ae8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	6a1b      	ldr	r3, [r3, #32]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d005      	beq.n	801aea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ae98:	4b04      	ldr	r3, [pc, #16]	; (801aeac <HAL_PCD_SuspendCallback+0x48>)
 801ae9a:	691b      	ldr	r3, [r3, #16]
 801ae9c:	4a03      	ldr	r2, [pc, #12]	; (801aeac <HAL_PCD_SuspendCallback+0x48>)
 801ae9e:	f043 0306 	orr.w	r3, r3, #6
 801aea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aea4:	bf00      	nop
 801aea6:	3708      	adds	r7, #8
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}
 801aeac:	e000ed00 	.word	0xe000ed00

0801aeb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b082      	sub	sp, #8
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aebe:	4618      	mov	r0, r3
 801aec0:	f7fe fc95 	bl	80197ee <USBD_LL_Resume>
}
 801aec4:	bf00      	nop
 801aec6:	3708      	adds	r7, #8
 801aec8:	46bd      	mov	sp, r7
 801aeca:	bd80      	pop	{r7, pc}

0801aecc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b082      	sub	sp, #8
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
 801aed4:	460b      	mov	r3, r1
 801aed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aede:	78fa      	ldrb	r2, [r7, #3]
 801aee0:	4611      	mov	r1, r2
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7fe fced 	bl	80198c2 <USBD_LL_IsoOUTIncomplete>
}
 801aee8:	bf00      	nop
 801aeea:	3708      	adds	r7, #8
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	460b      	mov	r3, r1
 801aefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af02:	78fa      	ldrb	r2, [r7, #3]
 801af04:	4611      	mov	r1, r2
 801af06:	4618      	mov	r0, r3
 801af08:	f7fe fca9 	bl	801985e <USBD_LL_IsoINIncomplete>
}
 801af0c:	bf00      	nop
 801af0e:	3708      	adds	r7, #8
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}

0801af14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af22:	4618      	mov	r0, r3
 801af24:	f7fe fcff 	bl	8019926 <USBD_LL_DevConnected>
}
 801af28:	bf00      	nop
 801af2a:	3708      	adds	r7, #8
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b082      	sub	sp, #8
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af3e:	4618      	mov	r0, r3
 801af40:	f7fe fcfc 	bl	801993c <USBD_LL_DevDisconnected>
}
 801af44:	bf00      	nop
 801af46:	3708      	adds	r7, #8
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}

0801af4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b082      	sub	sp, #8
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	781b      	ldrb	r3, [r3, #0]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d13e      	bne.n	801afda <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801af5c:	4a21      	ldr	r2, [pc, #132]	; (801afe4 <USBD_LL_Init+0x98>)
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	4a1f      	ldr	r2, [pc, #124]	; (801afe4 <USBD_LL_Init+0x98>)
 801af68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801af6c:	4b1d      	ldr	r3, [pc, #116]	; (801afe4 <USBD_LL_Init+0x98>)
 801af6e:	4a1e      	ldr	r2, [pc, #120]	; (801afe8 <USBD_LL_Init+0x9c>)
 801af70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801af72:	4b1c      	ldr	r3, [pc, #112]	; (801afe4 <USBD_LL_Init+0x98>)
 801af74:	2209      	movs	r2, #9
 801af76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801af78:	4b1a      	ldr	r3, [pc, #104]	; (801afe4 <USBD_LL_Init+0x98>)
 801af7a:	2202      	movs	r2, #2
 801af7c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801af7e:	4b19      	ldr	r3, [pc, #100]	; (801afe4 <USBD_LL_Init+0x98>)
 801af80:	2200      	movs	r2, #0
 801af82:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801af84:	4b17      	ldr	r3, [pc, #92]	; (801afe4 <USBD_LL_Init+0x98>)
 801af86:	2202      	movs	r2, #2
 801af88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801af8a:	4b16      	ldr	r3, [pc, #88]	; (801afe4 <USBD_LL_Init+0x98>)
 801af8c:	2201      	movs	r2, #1
 801af8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801af90:	4b14      	ldr	r3, [pc, #80]	; (801afe4 <USBD_LL_Init+0x98>)
 801af92:	2200      	movs	r2, #0
 801af94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801af96:	4b13      	ldr	r3, [pc, #76]	; (801afe4 <USBD_LL_Init+0x98>)
 801af98:	2200      	movs	r2, #0
 801af9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801af9c:	4b11      	ldr	r3, [pc, #68]	; (801afe4 <USBD_LL_Init+0x98>)
 801af9e:	2201      	movs	r2, #1
 801afa0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801afa2:	4b10      	ldr	r3, [pc, #64]	; (801afe4 <USBD_LL_Init+0x98>)
 801afa4:	2201      	movs	r2, #1
 801afa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801afa8:	4b0e      	ldr	r3, [pc, #56]	; (801afe4 <USBD_LL_Init+0x98>)
 801afaa:	2200      	movs	r2, #0
 801afac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801afae:	480d      	ldr	r0, [pc, #52]	; (801afe4 <USBD_LL_Init+0x98>)
 801afb0:	f7f4 f9ff 	bl	800f3b2 <HAL_PCD_Init>
 801afb4:	4603      	mov	r3, r0
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d001      	beq.n	801afbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801afba:	f7ef ff39 	bl	800ae30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801afbe:	2180      	movs	r1, #128	; 0x80
 801afc0:	4808      	ldr	r0, [pc, #32]	; (801afe4 <USBD_LL_Init+0x98>)
 801afc2:	f7f5 fc8a 	bl	80108da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801afc6:	2240      	movs	r2, #64	; 0x40
 801afc8:	2100      	movs	r1, #0
 801afca:	4806      	ldr	r0, [pc, #24]	; (801afe4 <USBD_LL_Init+0x98>)
 801afcc:	f7f5 fc3e 	bl	801084c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801afd0:	2280      	movs	r2, #128	; 0x80
 801afd2:	2101      	movs	r1, #1
 801afd4:	4803      	ldr	r0, [pc, #12]	; (801afe4 <USBD_LL_Init+0x98>)
 801afd6:	f7f5 fc39 	bl	801084c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801afda:	2300      	movs	r3, #0
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3708      	adds	r7, #8
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	240349f8 	.word	0x240349f8
 801afe8:	40080000 	.word	0x40080000

0801afec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b084      	sub	sp, #16
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aff4:	2300      	movs	r3, #0
 801aff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aff8:	2300      	movs	r3, #0
 801affa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b002:	4618      	mov	r0, r3
 801b004:	f7f4 faf9 	bl	800f5fa <HAL_PCD_Start>
 801b008:	4603      	mov	r3, r0
 801b00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b00c:	7bfb      	ldrb	r3, [r7, #15]
 801b00e:	4618      	mov	r0, r3
 801b010:	f000 f942 	bl	801b298 <USBD_Get_USB_Status>
 801b014:	4603      	mov	r3, r0
 801b016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b018:	7bbb      	ldrb	r3, [r7, #14]
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}

0801b022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b022:	b580      	push	{r7, lr}
 801b024:	b084      	sub	sp, #16
 801b026:	af00      	add	r7, sp, #0
 801b028:	6078      	str	r0, [r7, #4]
 801b02a:	4608      	mov	r0, r1
 801b02c:	4611      	mov	r1, r2
 801b02e:	461a      	mov	r2, r3
 801b030:	4603      	mov	r3, r0
 801b032:	70fb      	strb	r3, [r7, #3]
 801b034:	460b      	mov	r3, r1
 801b036:	70bb      	strb	r3, [r7, #2]
 801b038:	4613      	mov	r3, r2
 801b03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b03c:	2300      	movs	r3, #0
 801b03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b040:	2300      	movs	r3, #0
 801b042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b04a:	78bb      	ldrb	r3, [r7, #2]
 801b04c:	883a      	ldrh	r2, [r7, #0]
 801b04e:	78f9      	ldrb	r1, [r7, #3]
 801b050:	f7f4 fff7 	bl	8010042 <HAL_PCD_EP_Open>
 801b054:	4603      	mov	r3, r0
 801b056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b058:	7bfb      	ldrb	r3, [r7, #15]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f000 f91c 	bl	801b298 <USBD_Get_USB_Status>
 801b060:	4603      	mov	r3, r0
 801b062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b064:	7bbb      	ldrb	r3, [r7, #14]
}
 801b066:	4618      	mov	r0, r3
 801b068:	3710      	adds	r7, #16
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b084      	sub	sp, #16
 801b072:	af00      	add	r7, sp, #0
 801b074:	6078      	str	r0, [r7, #4]
 801b076:	460b      	mov	r3, r1
 801b078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b07a:	2300      	movs	r3, #0
 801b07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b07e:	2300      	movs	r3, #0
 801b080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b088:	78fa      	ldrb	r2, [r7, #3]
 801b08a:	4611      	mov	r1, r2
 801b08c:	4618      	mov	r0, r3
 801b08e:	f7f5 f840 	bl	8010112 <HAL_PCD_EP_Close>
 801b092:	4603      	mov	r3, r0
 801b094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b096:	7bfb      	ldrb	r3, [r7, #15]
 801b098:	4618      	mov	r0, r3
 801b09a:	f000 f8fd 	bl	801b298 <USBD_Get_USB_Status>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	3710      	adds	r7, #16
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	bd80      	pop	{r7, pc}

0801b0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	460b      	mov	r3, r1
 801b0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0c6:	78fa      	ldrb	r2, [r7, #3]
 801b0c8:	4611      	mov	r1, r2
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f7f5 f918 	bl	8010300 <HAL_PCD_EP_SetStall>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0d4:	7bfb      	ldrb	r3, [r7, #15]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f000 f8de 	bl	801b298 <USBD_Get_USB_Status>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	3710      	adds	r7, #16
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}

0801b0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0ea:	b580      	push	{r7, lr}
 801b0ec:	b084      	sub	sp, #16
 801b0ee:	af00      	add	r7, sp, #0
 801b0f0:	6078      	str	r0, [r7, #4]
 801b0f2:	460b      	mov	r3, r1
 801b0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b104:	78fa      	ldrb	r2, [r7, #3]
 801b106:	4611      	mov	r1, r2
 801b108:	4618      	mov	r0, r3
 801b10a:	f7f5 f95d 	bl	80103c8 <HAL_PCD_EP_ClrStall>
 801b10e:	4603      	mov	r3, r0
 801b110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b112:	7bfb      	ldrb	r3, [r7, #15]
 801b114:	4618      	mov	r0, r3
 801b116:	f000 f8bf 	bl	801b298 <USBD_Get_USB_Status>
 801b11a:	4603      	mov	r3, r0
 801b11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b11e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b120:	4618      	mov	r0, r3
 801b122:	3710      	adds	r7, #16
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}

0801b128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b128:	b480      	push	{r7}
 801b12a:	b085      	sub	sp, #20
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
 801b130:	460b      	mov	r3, r1
 801b132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b13a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b140:	2b00      	cmp	r3, #0
 801b142:	da0b      	bge.n	801b15c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b144:	78fb      	ldrb	r3, [r7, #3]
 801b146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b14a:	68f9      	ldr	r1, [r7, #12]
 801b14c:	4613      	mov	r3, r2
 801b14e:	00db      	lsls	r3, r3, #3
 801b150:	4413      	add	r3, r2
 801b152:	009b      	lsls	r3, r3, #2
 801b154:	440b      	add	r3, r1
 801b156:	333e      	adds	r3, #62	; 0x3e
 801b158:	781b      	ldrb	r3, [r3, #0]
 801b15a:	e00b      	b.n	801b174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b15c:	78fb      	ldrb	r3, [r7, #3]
 801b15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b162:	68f9      	ldr	r1, [r7, #12]
 801b164:	4613      	mov	r3, r2
 801b166:	00db      	lsls	r3, r3, #3
 801b168:	4413      	add	r3, r2
 801b16a:	009b      	lsls	r3, r3, #2
 801b16c:	440b      	add	r3, r1
 801b16e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b172:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b174:	4618      	mov	r0, r3
 801b176:	3714      	adds	r7, #20
 801b178:	46bd      	mov	sp, r7
 801b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b17e:	4770      	bx	lr

0801b180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b084      	sub	sp, #16
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
 801b188:	460b      	mov	r3, r1
 801b18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b18c:	2300      	movs	r3, #0
 801b18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b190:	2300      	movs	r3, #0
 801b192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b19a:	78fa      	ldrb	r2, [r7, #3]
 801b19c:	4611      	mov	r1, r2
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7f4 ff2a 	bl	800fff8 <HAL_PCD_SetAddress>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1a8:	7bfb      	ldrb	r3, [r7, #15]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f000 f874 	bl	801b298 <USBD_Get_USB_Status>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3710      	adds	r7, #16
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}

0801b1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b1be:	b580      	push	{r7, lr}
 801b1c0:	b086      	sub	sp, #24
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	60f8      	str	r0, [r7, #12]
 801b1c6:	607a      	str	r2, [r7, #4]
 801b1c8:	603b      	str	r3, [r7, #0]
 801b1ca:	460b      	mov	r3, r1
 801b1cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b1dc:	7af9      	ldrb	r1, [r7, #11]
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	687a      	ldr	r2, [r7, #4]
 801b1e2:	f7f5 f843 	bl	801026c <HAL_PCD_EP_Transmit>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1ea:	7dfb      	ldrb	r3, [r7, #23]
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f000 f853 	bl	801b298 <USBD_Get_USB_Status>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	3718      	adds	r7, #24
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	bd80      	pop	{r7, pc}

0801b200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b086      	sub	sp, #24
 801b204:	af00      	add	r7, sp, #0
 801b206:	60f8      	str	r0, [r7, #12]
 801b208:	607a      	str	r2, [r7, #4]
 801b20a:	603b      	str	r3, [r7, #0]
 801b20c:	460b      	mov	r3, r1
 801b20e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b210:	2300      	movs	r3, #0
 801b212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b214:	2300      	movs	r3, #0
 801b216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b21e:	7af9      	ldrb	r1, [r7, #11]
 801b220:	683b      	ldr	r3, [r7, #0]
 801b222:	687a      	ldr	r2, [r7, #4]
 801b224:	f7f4 ffbf 	bl	80101a6 <HAL_PCD_EP_Receive>
 801b228:	4603      	mov	r3, r0
 801b22a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b22c:	7dfb      	ldrb	r3, [r7, #23]
 801b22e:	4618      	mov	r0, r3
 801b230:	f000 f832 	bl	801b298 <USBD_Get_USB_Status>
 801b234:	4603      	mov	r3, r0
 801b236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b238:	7dbb      	ldrb	r3, [r7, #22]
}
 801b23a:	4618      	mov	r0, r3
 801b23c:	3718      	adds	r7, #24
 801b23e:	46bd      	mov	sp, r7
 801b240:	bd80      	pop	{r7, pc}

0801b242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b242:	b580      	push	{r7, lr}
 801b244:	b082      	sub	sp, #8
 801b246:	af00      	add	r7, sp, #0
 801b248:	6078      	str	r0, [r7, #4]
 801b24a:	460b      	mov	r3, r1
 801b24c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b254:	78fa      	ldrb	r2, [r7, #3]
 801b256:	4611      	mov	r1, r2
 801b258:	4618      	mov	r0, r3
 801b25a:	f7f4 ffef 	bl	801023c <HAL_PCD_EP_GetRxCount>
 801b25e:	4603      	mov	r3, r0
}
 801b260:	4618      	mov	r0, r3
 801b262:	3708      	adds	r7, #8
 801b264:	46bd      	mov	sp, r7
 801b266:	bd80      	pop	{r7, pc}

0801b268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b268:	b480      	push	{r7}
 801b26a:	b083      	sub	sp, #12
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b270:	4b03      	ldr	r3, [pc, #12]	; (801b280 <USBD_static_malloc+0x18>)
}
 801b272:	4618      	mov	r0, r3
 801b274:	370c      	adds	r7, #12
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop
 801b280:	24034f04 	.word	0x24034f04

0801b284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]

}
 801b28c:	bf00      	nop
 801b28e:	370c      	adds	r7, #12
 801b290:	46bd      	mov	sp, r7
 801b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b296:	4770      	bx	lr

0801b298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b298:	b480      	push	{r7}
 801b29a:	b085      	sub	sp, #20
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	4603      	mov	r3, r0
 801b2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b2a6:	79fb      	ldrb	r3, [r7, #7]
 801b2a8:	2b03      	cmp	r3, #3
 801b2aa:	d817      	bhi.n	801b2dc <USBD_Get_USB_Status+0x44>
 801b2ac:	a201      	add	r2, pc, #4	; (adr r2, 801b2b4 <USBD_Get_USB_Status+0x1c>)
 801b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2b2:	bf00      	nop
 801b2b4:	0801b2c5 	.word	0x0801b2c5
 801b2b8:	0801b2cb 	.word	0x0801b2cb
 801b2bc:	0801b2d1 	.word	0x0801b2d1
 801b2c0:	0801b2d7 	.word	0x0801b2d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	73fb      	strb	r3, [r7, #15]
    break;
 801b2c8:	e00b      	b.n	801b2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b2ca:	2303      	movs	r3, #3
 801b2cc:	73fb      	strb	r3, [r7, #15]
    break;
 801b2ce:	e008      	b.n	801b2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	73fb      	strb	r3, [r7, #15]
    break;
 801b2d4:	e005      	b.n	801b2e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b2d6:	2303      	movs	r3, #3
 801b2d8:	73fb      	strb	r3, [r7, #15]
    break;
 801b2da:	e002      	b.n	801b2e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b2dc:	2303      	movs	r3, #3
 801b2de:	73fb      	strb	r3, [r7, #15]
    break;
 801b2e0:	bf00      	nop
  }
  return usb_status;
 801b2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	3714      	adds	r7, #20
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ee:	4770      	bx	lr

0801b2f0 <__errno>:
 801b2f0:	4b01      	ldr	r3, [pc, #4]	; (801b2f8 <__errno+0x8>)
 801b2f2:	6818      	ldr	r0, [r3, #0]
 801b2f4:	4770      	bx	lr
 801b2f6:	bf00      	nop
 801b2f8:	24008168 	.word	0x24008168

0801b2fc <ffs>:
 801b2fc:	2800      	cmp	r0, #0
 801b2fe:	fa90 f3a0 	rbit	r3, r0
 801b302:	fab3 f383 	clz	r3, r3
 801b306:	bf08      	it	eq
 801b308:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 801b30c:	1c58      	adds	r0, r3, #1
 801b30e:	4770      	bx	lr

0801b310 <std>:
 801b310:	2300      	movs	r3, #0
 801b312:	b510      	push	{r4, lr}
 801b314:	4604      	mov	r4, r0
 801b316:	e9c0 3300 	strd	r3, r3, [r0]
 801b31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b31e:	6083      	str	r3, [r0, #8]
 801b320:	8181      	strh	r1, [r0, #12]
 801b322:	6643      	str	r3, [r0, #100]	; 0x64
 801b324:	81c2      	strh	r2, [r0, #14]
 801b326:	6183      	str	r3, [r0, #24]
 801b328:	4619      	mov	r1, r3
 801b32a:	2208      	movs	r2, #8
 801b32c:	305c      	adds	r0, #92	; 0x5c
 801b32e:	f000 f92b 	bl	801b588 <memset>
 801b332:	4b05      	ldr	r3, [pc, #20]	; (801b348 <std+0x38>)
 801b334:	6263      	str	r3, [r4, #36]	; 0x24
 801b336:	4b05      	ldr	r3, [pc, #20]	; (801b34c <std+0x3c>)
 801b338:	62a3      	str	r3, [r4, #40]	; 0x28
 801b33a:	4b05      	ldr	r3, [pc, #20]	; (801b350 <std+0x40>)
 801b33c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b33e:	4b05      	ldr	r3, [pc, #20]	; (801b354 <std+0x44>)
 801b340:	6224      	str	r4, [r4, #32]
 801b342:	6323      	str	r3, [r4, #48]	; 0x30
 801b344:	bd10      	pop	{r4, pc}
 801b346:	bf00      	nop
 801b348:	0801b969 	.word	0x0801b969
 801b34c:	0801b98b 	.word	0x0801b98b
 801b350:	0801b9c3 	.word	0x0801b9c3
 801b354:	0801b9e7 	.word	0x0801b9e7

0801b358 <_cleanup_r>:
 801b358:	4901      	ldr	r1, [pc, #4]	; (801b360 <_cleanup_r+0x8>)
 801b35a:	f000 b8af 	b.w	801b4bc <_fwalk_reent>
 801b35e:	bf00      	nop
 801b360:	0801bcc1 	.word	0x0801bcc1

0801b364 <__sfmoreglue>:
 801b364:	b570      	push	{r4, r5, r6, lr}
 801b366:	2268      	movs	r2, #104	; 0x68
 801b368:	1e4d      	subs	r5, r1, #1
 801b36a:	4355      	muls	r5, r2
 801b36c:	460e      	mov	r6, r1
 801b36e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b372:	f000 f97d 	bl	801b670 <_malloc_r>
 801b376:	4604      	mov	r4, r0
 801b378:	b140      	cbz	r0, 801b38c <__sfmoreglue+0x28>
 801b37a:	2100      	movs	r1, #0
 801b37c:	e9c0 1600 	strd	r1, r6, [r0]
 801b380:	300c      	adds	r0, #12
 801b382:	60a0      	str	r0, [r4, #8]
 801b384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b388:	f000 f8fe 	bl	801b588 <memset>
 801b38c:	4620      	mov	r0, r4
 801b38e:	bd70      	pop	{r4, r5, r6, pc}

0801b390 <__sfp_lock_acquire>:
 801b390:	4801      	ldr	r0, [pc, #4]	; (801b398 <__sfp_lock_acquire+0x8>)
 801b392:	f000 b8d8 	b.w	801b546 <__retarget_lock_acquire_recursive>
 801b396:	bf00      	nop
 801b398:	24035125 	.word	0x24035125

0801b39c <__sfp_lock_release>:
 801b39c:	4801      	ldr	r0, [pc, #4]	; (801b3a4 <__sfp_lock_release+0x8>)
 801b39e:	f000 b8d3 	b.w	801b548 <__retarget_lock_release_recursive>
 801b3a2:	bf00      	nop
 801b3a4:	24035125 	.word	0x24035125

0801b3a8 <__sinit_lock_acquire>:
 801b3a8:	4801      	ldr	r0, [pc, #4]	; (801b3b0 <__sinit_lock_acquire+0x8>)
 801b3aa:	f000 b8cc 	b.w	801b546 <__retarget_lock_acquire_recursive>
 801b3ae:	bf00      	nop
 801b3b0:	24035126 	.word	0x24035126

0801b3b4 <__sinit_lock_release>:
 801b3b4:	4801      	ldr	r0, [pc, #4]	; (801b3bc <__sinit_lock_release+0x8>)
 801b3b6:	f000 b8c7 	b.w	801b548 <__retarget_lock_release_recursive>
 801b3ba:	bf00      	nop
 801b3bc:	24035126 	.word	0x24035126

0801b3c0 <__sinit>:
 801b3c0:	b510      	push	{r4, lr}
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	f7ff fff0 	bl	801b3a8 <__sinit_lock_acquire>
 801b3c8:	69a3      	ldr	r3, [r4, #24]
 801b3ca:	b11b      	cbz	r3, 801b3d4 <__sinit+0x14>
 801b3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3d0:	f7ff bff0 	b.w	801b3b4 <__sinit_lock_release>
 801b3d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b3d8:	6523      	str	r3, [r4, #80]	; 0x50
 801b3da:	4b13      	ldr	r3, [pc, #76]	; (801b428 <__sinit+0x68>)
 801b3dc:	4a13      	ldr	r2, [pc, #76]	; (801b42c <__sinit+0x6c>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801b3e2:	42a3      	cmp	r3, r4
 801b3e4:	bf04      	itt	eq
 801b3e6:	2301      	moveq	r3, #1
 801b3e8:	61a3      	streq	r3, [r4, #24]
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	f000 f820 	bl	801b430 <__sfp>
 801b3f0:	6060      	str	r0, [r4, #4]
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	f000 f81c 	bl	801b430 <__sfp>
 801b3f8:	60a0      	str	r0, [r4, #8]
 801b3fa:	4620      	mov	r0, r4
 801b3fc:	f000 f818 	bl	801b430 <__sfp>
 801b400:	2200      	movs	r2, #0
 801b402:	60e0      	str	r0, [r4, #12]
 801b404:	2104      	movs	r1, #4
 801b406:	6860      	ldr	r0, [r4, #4]
 801b408:	f7ff ff82 	bl	801b310 <std>
 801b40c:	68a0      	ldr	r0, [r4, #8]
 801b40e:	2201      	movs	r2, #1
 801b410:	2109      	movs	r1, #9
 801b412:	f7ff ff7d 	bl	801b310 <std>
 801b416:	68e0      	ldr	r0, [r4, #12]
 801b418:	2202      	movs	r2, #2
 801b41a:	2112      	movs	r1, #18
 801b41c:	f7ff ff78 	bl	801b310 <std>
 801b420:	2301      	movs	r3, #1
 801b422:	61a3      	str	r3, [r4, #24]
 801b424:	e7d2      	b.n	801b3cc <__sinit+0xc>
 801b426:	bf00      	nop
 801b428:	24008574 	.word	0x24008574
 801b42c:	0801b359 	.word	0x0801b359

0801b430 <__sfp>:
 801b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b432:	4607      	mov	r7, r0
 801b434:	f7ff ffac 	bl	801b390 <__sfp_lock_acquire>
 801b438:	4b1e      	ldr	r3, [pc, #120]	; (801b4b4 <__sfp+0x84>)
 801b43a:	681e      	ldr	r6, [r3, #0]
 801b43c:	69b3      	ldr	r3, [r6, #24]
 801b43e:	b913      	cbnz	r3, 801b446 <__sfp+0x16>
 801b440:	4630      	mov	r0, r6
 801b442:	f7ff ffbd 	bl	801b3c0 <__sinit>
 801b446:	3648      	adds	r6, #72	; 0x48
 801b448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b44c:	3b01      	subs	r3, #1
 801b44e:	d503      	bpl.n	801b458 <__sfp+0x28>
 801b450:	6833      	ldr	r3, [r6, #0]
 801b452:	b30b      	cbz	r3, 801b498 <__sfp+0x68>
 801b454:	6836      	ldr	r6, [r6, #0]
 801b456:	e7f7      	b.n	801b448 <__sfp+0x18>
 801b458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b45c:	b9d5      	cbnz	r5, 801b494 <__sfp+0x64>
 801b45e:	4b16      	ldr	r3, [pc, #88]	; (801b4b8 <__sfp+0x88>)
 801b460:	60e3      	str	r3, [r4, #12]
 801b462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b466:	6665      	str	r5, [r4, #100]	; 0x64
 801b468:	f000 f86c 	bl	801b544 <__retarget_lock_init_recursive>
 801b46c:	f7ff ff96 	bl	801b39c <__sfp_lock_release>
 801b470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b478:	6025      	str	r5, [r4, #0]
 801b47a:	61a5      	str	r5, [r4, #24]
 801b47c:	2208      	movs	r2, #8
 801b47e:	4629      	mov	r1, r5
 801b480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b484:	f000 f880 	bl	801b588 <memset>
 801b488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b48c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b490:	4620      	mov	r0, r4
 801b492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b494:	3468      	adds	r4, #104	; 0x68
 801b496:	e7d9      	b.n	801b44c <__sfp+0x1c>
 801b498:	2104      	movs	r1, #4
 801b49a:	4638      	mov	r0, r7
 801b49c:	f7ff ff62 	bl	801b364 <__sfmoreglue>
 801b4a0:	4604      	mov	r4, r0
 801b4a2:	6030      	str	r0, [r6, #0]
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	d1d5      	bne.n	801b454 <__sfp+0x24>
 801b4a8:	f7ff ff78 	bl	801b39c <__sfp_lock_release>
 801b4ac:	230c      	movs	r3, #12
 801b4ae:	603b      	str	r3, [r7, #0]
 801b4b0:	e7ee      	b.n	801b490 <__sfp+0x60>
 801b4b2:	bf00      	nop
 801b4b4:	24008574 	.word	0x24008574
 801b4b8:	ffff0001 	.word	0xffff0001

0801b4bc <_fwalk_reent>:
 801b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4c0:	4606      	mov	r6, r0
 801b4c2:	4688      	mov	r8, r1
 801b4c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b4c8:	2700      	movs	r7, #0
 801b4ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b4ce:	f1b9 0901 	subs.w	r9, r9, #1
 801b4d2:	d505      	bpl.n	801b4e0 <_fwalk_reent+0x24>
 801b4d4:	6824      	ldr	r4, [r4, #0]
 801b4d6:	2c00      	cmp	r4, #0
 801b4d8:	d1f7      	bne.n	801b4ca <_fwalk_reent+0xe>
 801b4da:	4638      	mov	r0, r7
 801b4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4e0:	89ab      	ldrh	r3, [r5, #12]
 801b4e2:	2b01      	cmp	r3, #1
 801b4e4:	d907      	bls.n	801b4f6 <_fwalk_reent+0x3a>
 801b4e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b4ea:	3301      	adds	r3, #1
 801b4ec:	d003      	beq.n	801b4f6 <_fwalk_reent+0x3a>
 801b4ee:	4629      	mov	r1, r5
 801b4f0:	4630      	mov	r0, r6
 801b4f2:	47c0      	blx	r8
 801b4f4:	4307      	orrs	r7, r0
 801b4f6:	3568      	adds	r5, #104	; 0x68
 801b4f8:	e7e9      	b.n	801b4ce <_fwalk_reent+0x12>
	...

0801b4fc <__libc_init_array>:
 801b4fc:	b570      	push	{r4, r5, r6, lr}
 801b4fe:	4d0d      	ldr	r5, [pc, #52]	; (801b534 <__libc_init_array+0x38>)
 801b500:	4c0d      	ldr	r4, [pc, #52]	; (801b538 <__libc_init_array+0x3c>)
 801b502:	1b64      	subs	r4, r4, r5
 801b504:	10a4      	asrs	r4, r4, #2
 801b506:	2600      	movs	r6, #0
 801b508:	42a6      	cmp	r6, r4
 801b50a:	d109      	bne.n	801b520 <__libc_init_array+0x24>
 801b50c:	4d0b      	ldr	r5, [pc, #44]	; (801b53c <__libc_init_array+0x40>)
 801b50e:	4c0c      	ldr	r4, [pc, #48]	; (801b540 <__libc_init_array+0x44>)
 801b510:	f000 ffb8 	bl	801c484 <_init>
 801b514:	1b64      	subs	r4, r4, r5
 801b516:	10a4      	asrs	r4, r4, #2
 801b518:	2600      	movs	r6, #0
 801b51a:	42a6      	cmp	r6, r4
 801b51c:	d105      	bne.n	801b52a <__libc_init_array+0x2e>
 801b51e:	bd70      	pop	{r4, r5, r6, pc}
 801b520:	f855 3b04 	ldr.w	r3, [r5], #4
 801b524:	4798      	blx	r3
 801b526:	3601      	adds	r6, #1
 801b528:	e7ee      	b.n	801b508 <__libc_init_array+0xc>
 801b52a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b52e:	4798      	blx	r3
 801b530:	3601      	adds	r6, #1
 801b532:	e7f2      	b.n	801b51a <__libc_init_array+0x1e>
 801b534:	0801c4a4 	.word	0x0801c4a4
 801b538:	0801c4a4 	.word	0x0801c4a4
 801b53c:	0801c4a4 	.word	0x0801c4a4
 801b540:	0801c4ac 	.word	0x0801c4ac

0801b544 <__retarget_lock_init_recursive>:
 801b544:	4770      	bx	lr

0801b546 <__retarget_lock_acquire_recursive>:
 801b546:	4770      	bx	lr

0801b548 <__retarget_lock_release_recursive>:
 801b548:	4770      	bx	lr
	...

0801b54c <malloc>:
 801b54c:	4b02      	ldr	r3, [pc, #8]	; (801b558 <malloc+0xc>)
 801b54e:	4601      	mov	r1, r0
 801b550:	6818      	ldr	r0, [r3, #0]
 801b552:	f000 b88d 	b.w	801b670 <_malloc_r>
 801b556:	bf00      	nop
 801b558:	24008168 	.word	0x24008168

0801b55c <free>:
 801b55c:	4b02      	ldr	r3, [pc, #8]	; (801b568 <free+0xc>)
 801b55e:	4601      	mov	r1, r0
 801b560:	6818      	ldr	r0, [r3, #0]
 801b562:	f000 b819 	b.w	801b598 <_free_r>
 801b566:	bf00      	nop
 801b568:	24008168 	.word	0x24008168

0801b56c <memcpy>:
 801b56c:	440a      	add	r2, r1
 801b56e:	4291      	cmp	r1, r2
 801b570:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b574:	d100      	bne.n	801b578 <memcpy+0xc>
 801b576:	4770      	bx	lr
 801b578:	b510      	push	{r4, lr}
 801b57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b582:	4291      	cmp	r1, r2
 801b584:	d1f9      	bne.n	801b57a <memcpy+0xe>
 801b586:	bd10      	pop	{r4, pc}

0801b588 <memset>:
 801b588:	4402      	add	r2, r0
 801b58a:	4603      	mov	r3, r0
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d100      	bne.n	801b592 <memset+0xa>
 801b590:	4770      	bx	lr
 801b592:	f803 1b01 	strb.w	r1, [r3], #1
 801b596:	e7f9      	b.n	801b58c <memset+0x4>

0801b598 <_free_r>:
 801b598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b59a:	2900      	cmp	r1, #0
 801b59c:	d044      	beq.n	801b628 <_free_r+0x90>
 801b59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5a2:	9001      	str	r0, [sp, #4]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	f1a1 0404 	sub.w	r4, r1, #4
 801b5aa:	bfb8      	it	lt
 801b5ac:	18e4      	addlt	r4, r4, r3
 801b5ae:	f000 fc3b 	bl	801be28 <__malloc_lock>
 801b5b2:	4a1e      	ldr	r2, [pc, #120]	; (801b62c <_free_r+0x94>)
 801b5b4:	9801      	ldr	r0, [sp, #4]
 801b5b6:	6813      	ldr	r3, [r2, #0]
 801b5b8:	b933      	cbnz	r3, 801b5c8 <_free_r+0x30>
 801b5ba:	6063      	str	r3, [r4, #4]
 801b5bc:	6014      	str	r4, [r2, #0]
 801b5be:	b003      	add	sp, #12
 801b5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5c4:	f000 bc36 	b.w	801be34 <__malloc_unlock>
 801b5c8:	42a3      	cmp	r3, r4
 801b5ca:	d908      	bls.n	801b5de <_free_r+0x46>
 801b5cc:	6825      	ldr	r5, [r4, #0]
 801b5ce:	1961      	adds	r1, r4, r5
 801b5d0:	428b      	cmp	r3, r1
 801b5d2:	bf01      	itttt	eq
 801b5d4:	6819      	ldreq	r1, [r3, #0]
 801b5d6:	685b      	ldreq	r3, [r3, #4]
 801b5d8:	1949      	addeq	r1, r1, r5
 801b5da:	6021      	streq	r1, [r4, #0]
 801b5dc:	e7ed      	b.n	801b5ba <_free_r+0x22>
 801b5de:	461a      	mov	r2, r3
 801b5e0:	685b      	ldr	r3, [r3, #4]
 801b5e2:	b10b      	cbz	r3, 801b5e8 <_free_r+0x50>
 801b5e4:	42a3      	cmp	r3, r4
 801b5e6:	d9fa      	bls.n	801b5de <_free_r+0x46>
 801b5e8:	6811      	ldr	r1, [r2, #0]
 801b5ea:	1855      	adds	r5, r2, r1
 801b5ec:	42a5      	cmp	r5, r4
 801b5ee:	d10b      	bne.n	801b608 <_free_r+0x70>
 801b5f0:	6824      	ldr	r4, [r4, #0]
 801b5f2:	4421      	add	r1, r4
 801b5f4:	1854      	adds	r4, r2, r1
 801b5f6:	42a3      	cmp	r3, r4
 801b5f8:	6011      	str	r1, [r2, #0]
 801b5fa:	d1e0      	bne.n	801b5be <_free_r+0x26>
 801b5fc:	681c      	ldr	r4, [r3, #0]
 801b5fe:	685b      	ldr	r3, [r3, #4]
 801b600:	6053      	str	r3, [r2, #4]
 801b602:	4421      	add	r1, r4
 801b604:	6011      	str	r1, [r2, #0]
 801b606:	e7da      	b.n	801b5be <_free_r+0x26>
 801b608:	d902      	bls.n	801b610 <_free_r+0x78>
 801b60a:	230c      	movs	r3, #12
 801b60c:	6003      	str	r3, [r0, #0]
 801b60e:	e7d6      	b.n	801b5be <_free_r+0x26>
 801b610:	6825      	ldr	r5, [r4, #0]
 801b612:	1961      	adds	r1, r4, r5
 801b614:	428b      	cmp	r3, r1
 801b616:	bf04      	itt	eq
 801b618:	6819      	ldreq	r1, [r3, #0]
 801b61a:	685b      	ldreq	r3, [r3, #4]
 801b61c:	6063      	str	r3, [r4, #4]
 801b61e:	bf04      	itt	eq
 801b620:	1949      	addeq	r1, r1, r5
 801b622:	6021      	streq	r1, [r4, #0]
 801b624:	6054      	str	r4, [r2, #4]
 801b626:	e7ca      	b.n	801b5be <_free_r+0x26>
 801b628:	b003      	add	sp, #12
 801b62a:	bd30      	pop	{r4, r5, pc}
 801b62c:	24035128 	.word	0x24035128

0801b630 <sbrk_aligned>:
 801b630:	b570      	push	{r4, r5, r6, lr}
 801b632:	4e0e      	ldr	r6, [pc, #56]	; (801b66c <sbrk_aligned+0x3c>)
 801b634:	460c      	mov	r4, r1
 801b636:	6831      	ldr	r1, [r6, #0]
 801b638:	4605      	mov	r5, r0
 801b63a:	b911      	cbnz	r1, 801b642 <sbrk_aligned+0x12>
 801b63c:	f000 f984 	bl	801b948 <_sbrk_r>
 801b640:	6030      	str	r0, [r6, #0]
 801b642:	4621      	mov	r1, r4
 801b644:	4628      	mov	r0, r5
 801b646:	f000 f97f 	bl	801b948 <_sbrk_r>
 801b64a:	1c43      	adds	r3, r0, #1
 801b64c:	d00a      	beq.n	801b664 <sbrk_aligned+0x34>
 801b64e:	1cc4      	adds	r4, r0, #3
 801b650:	f024 0403 	bic.w	r4, r4, #3
 801b654:	42a0      	cmp	r0, r4
 801b656:	d007      	beq.n	801b668 <sbrk_aligned+0x38>
 801b658:	1a21      	subs	r1, r4, r0
 801b65a:	4628      	mov	r0, r5
 801b65c:	f000 f974 	bl	801b948 <_sbrk_r>
 801b660:	3001      	adds	r0, #1
 801b662:	d101      	bne.n	801b668 <sbrk_aligned+0x38>
 801b664:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b668:	4620      	mov	r0, r4
 801b66a:	bd70      	pop	{r4, r5, r6, pc}
 801b66c:	2403512c 	.word	0x2403512c

0801b670 <_malloc_r>:
 801b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b674:	1ccd      	adds	r5, r1, #3
 801b676:	f025 0503 	bic.w	r5, r5, #3
 801b67a:	3508      	adds	r5, #8
 801b67c:	2d0c      	cmp	r5, #12
 801b67e:	bf38      	it	cc
 801b680:	250c      	movcc	r5, #12
 801b682:	2d00      	cmp	r5, #0
 801b684:	4607      	mov	r7, r0
 801b686:	db01      	blt.n	801b68c <_malloc_r+0x1c>
 801b688:	42a9      	cmp	r1, r5
 801b68a:	d905      	bls.n	801b698 <_malloc_r+0x28>
 801b68c:	230c      	movs	r3, #12
 801b68e:	603b      	str	r3, [r7, #0]
 801b690:	2600      	movs	r6, #0
 801b692:	4630      	mov	r0, r6
 801b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b698:	4e2e      	ldr	r6, [pc, #184]	; (801b754 <_malloc_r+0xe4>)
 801b69a:	f000 fbc5 	bl	801be28 <__malloc_lock>
 801b69e:	6833      	ldr	r3, [r6, #0]
 801b6a0:	461c      	mov	r4, r3
 801b6a2:	bb34      	cbnz	r4, 801b6f2 <_malloc_r+0x82>
 801b6a4:	4629      	mov	r1, r5
 801b6a6:	4638      	mov	r0, r7
 801b6a8:	f7ff ffc2 	bl	801b630 <sbrk_aligned>
 801b6ac:	1c43      	adds	r3, r0, #1
 801b6ae:	4604      	mov	r4, r0
 801b6b0:	d14d      	bne.n	801b74e <_malloc_r+0xde>
 801b6b2:	6834      	ldr	r4, [r6, #0]
 801b6b4:	4626      	mov	r6, r4
 801b6b6:	2e00      	cmp	r6, #0
 801b6b8:	d140      	bne.n	801b73c <_malloc_r+0xcc>
 801b6ba:	6823      	ldr	r3, [r4, #0]
 801b6bc:	4631      	mov	r1, r6
 801b6be:	4638      	mov	r0, r7
 801b6c0:	eb04 0803 	add.w	r8, r4, r3
 801b6c4:	f000 f940 	bl	801b948 <_sbrk_r>
 801b6c8:	4580      	cmp	r8, r0
 801b6ca:	d13a      	bne.n	801b742 <_malloc_r+0xd2>
 801b6cc:	6821      	ldr	r1, [r4, #0]
 801b6ce:	3503      	adds	r5, #3
 801b6d0:	1a6d      	subs	r5, r5, r1
 801b6d2:	f025 0503 	bic.w	r5, r5, #3
 801b6d6:	3508      	adds	r5, #8
 801b6d8:	2d0c      	cmp	r5, #12
 801b6da:	bf38      	it	cc
 801b6dc:	250c      	movcc	r5, #12
 801b6de:	4629      	mov	r1, r5
 801b6e0:	4638      	mov	r0, r7
 801b6e2:	f7ff ffa5 	bl	801b630 <sbrk_aligned>
 801b6e6:	3001      	adds	r0, #1
 801b6e8:	d02b      	beq.n	801b742 <_malloc_r+0xd2>
 801b6ea:	6823      	ldr	r3, [r4, #0]
 801b6ec:	442b      	add	r3, r5
 801b6ee:	6023      	str	r3, [r4, #0]
 801b6f0:	e00e      	b.n	801b710 <_malloc_r+0xa0>
 801b6f2:	6822      	ldr	r2, [r4, #0]
 801b6f4:	1b52      	subs	r2, r2, r5
 801b6f6:	d41e      	bmi.n	801b736 <_malloc_r+0xc6>
 801b6f8:	2a0b      	cmp	r2, #11
 801b6fa:	d916      	bls.n	801b72a <_malloc_r+0xba>
 801b6fc:	1961      	adds	r1, r4, r5
 801b6fe:	42a3      	cmp	r3, r4
 801b700:	6025      	str	r5, [r4, #0]
 801b702:	bf18      	it	ne
 801b704:	6059      	strne	r1, [r3, #4]
 801b706:	6863      	ldr	r3, [r4, #4]
 801b708:	bf08      	it	eq
 801b70a:	6031      	streq	r1, [r6, #0]
 801b70c:	5162      	str	r2, [r4, r5]
 801b70e:	604b      	str	r3, [r1, #4]
 801b710:	4638      	mov	r0, r7
 801b712:	f104 060b 	add.w	r6, r4, #11
 801b716:	f000 fb8d 	bl	801be34 <__malloc_unlock>
 801b71a:	f026 0607 	bic.w	r6, r6, #7
 801b71e:	1d23      	adds	r3, r4, #4
 801b720:	1af2      	subs	r2, r6, r3
 801b722:	d0b6      	beq.n	801b692 <_malloc_r+0x22>
 801b724:	1b9b      	subs	r3, r3, r6
 801b726:	50a3      	str	r3, [r4, r2]
 801b728:	e7b3      	b.n	801b692 <_malloc_r+0x22>
 801b72a:	6862      	ldr	r2, [r4, #4]
 801b72c:	42a3      	cmp	r3, r4
 801b72e:	bf0c      	ite	eq
 801b730:	6032      	streq	r2, [r6, #0]
 801b732:	605a      	strne	r2, [r3, #4]
 801b734:	e7ec      	b.n	801b710 <_malloc_r+0xa0>
 801b736:	4623      	mov	r3, r4
 801b738:	6864      	ldr	r4, [r4, #4]
 801b73a:	e7b2      	b.n	801b6a2 <_malloc_r+0x32>
 801b73c:	4634      	mov	r4, r6
 801b73e:	6876      	ldr	r6, [r6, #4]
 801b740:	e7b9      	b.n	801b6b6 <_malloc_r+0x46>
 801b742:	230c      	movs	r3, #12
 801b744:	603b      	str	r3, [r7, #0]
 801b746:	4638      	mov	r0, r7
 801b748:	f000 fb74 	bl	801be34 <__malloc_unlock>
 801b74c:	e7a1      	b.n	801b692 <_malloc_r+0x22>
 801b74e:	6025      	str	r5, [r4, #0]
 801b750:	e7de      	b.n	801b710 <_malloc_r+0xa0>
 801b752:	bf00      	nop
 801b754:	24035128 	.word	0x24035128

0801b758 <iprintf>:
 801b758:	b40f      	push	{r0, r1, r2, r3}
 801b75a:	4b0a      	ldr	r3, [pc, #40]	; (801b784 <iprintf+0x2c>)
 801b75c:	b513      	push	{r0, r1, r4, lr}
 801b75e:	681c      	ldr	r4, [r3, #0]
 801b760:	b124      	cbz	r4, 801b76c <iprintf+0x14>
 801b762:	69a3      	ldr	r3, [r4, #24]
 801b764:	b913      	cbnz	r3, 801b76c <iprintf+0x14>
 801b766:	4620      	mov	r0, r4
 801b768:	f7ff fe2a 	bl	801b3c0 <__sinit>
 801b76c:	ab05      	add	r3, sp, #20
 801b76e:	9a04      	ldr	r2, [sp, #16]
 801b770:	68a1      	ldr	r1, [r4, #8]
 801b772:	9301      	str	r3, [sp, #4]
 801b774:	4620      	mov	r0, r4
 801b776:	f000 fb8d 	bl	801be94 <_vfiprintf_r>
 801b77a:	b002      	add	sp, #8
 801b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b780:	b004      	add	sp, #16
 801b782:	4770      	bx	lr
 801b784:	24008168 	.word	0x24008168

0801b788 <_puts_r>:
 801b788:	b570      	push	{r4, r5, r6, lr}
 801b78a:	460e      	mov	r6, r1
 801b78c:	4605      	mov	r5, r0
 801b78e:	b118      	cbz	r0, 801b798 <_puts_r+0x10>
 801b790:	6983      	ldr	r3, [r0, #24]
 801b792:	b90b      	cbnz	r3, 801b798 <_puts_r+0x10>
 801b794:	f7ff fe14 	bl	801b3c0 <__sinit>
 801b798:	69ab      	ldr	r3, [r5, #24]
 801b79a:	68ac      	ldr	r4, [r5, #8]
 801b79c:	b913      	cbnz	r3, 801b7a4 <_puts_r+0x1c>
 801b79e:	4628      	mov	r0, r5
 801b7a0:	f7ff fe0e 	bl	801b3c0 <__sinit>
 801b7a4:	4b2c      	ldr	r3, [pc, #176]	; (801b858 <_puts_r+0xd0>)
 801b7a6:	429c      	cmp	r4, r3
 801b7a8:	d120      	bne.n	801b7ec <_puts_r+0x64>
 801b7aa:	686c      	ldr	r4, [r5, #4]
 801b7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b7ae:	07db      	lsls	r3, r3, #31
 801b7b0:	d405      	bmi.n	801b7be <_puts_r+0x36>
 801b7b2:	89a3      	ldrh	r3, [r4, #12]
 801b7b4:	0598      	lsls	r0, r3, #22
 801b7b6:	d402      	bmi.n	801b7be <_puts_r+0x36>
 801b7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7ba:	f7ff fec4 	bl	801b546 <__retarget_lock_acquire_recursive>
 801b7be:	89a3      	ldrh	r3, [r4, #12]
 801b7c0:	0719      	lsls	r1, r3, #28
 801b7c2:	d51d      	bpl.n	801b800 <_puts_r+0x78>
 801b7c4:	6923      	ldr	r3, [r4, #16]
 801b7c6:	b1db      	cbz	r3, 801b800 <_puts_r+0x78>
 801b7c8:	3e01      	subs	r6, #1
 801b7ca:	68a3      	ldr	r3, [r4, #8]
 801b7cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b7d0:	3b01      	subs	r3, #1
 801b7d2:	60a3      	str	r3, [r4, #8]
 801b7d4:	bb39      	cbnz	r1, 801b826 <_puts_r+0x9e>
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	da38      	bge.n	801b84c <_puts_r+0xc4>
 801b7da:	4622      	mov	r2, r4
 801b7dc:	210a      	movs	r1, #10
 801b7de:	4628      	mov	r0, r5
 801b7e0:	f000 f906 	bl	801b9f0 <__swbuf_r>
 801b7e4:	3001      	adds	r0, #1
 801b7e6:	d011      	beq.n	801b80c <_puts_r+0x84>
 801b7e8:	250a      	movs	r5, #10
 801b7ea:	e011      	b.n	801b810 <_puts_r+0x88>
 801b7ec:	4b1b      	ldr	r3, [pc, #108]	; (801b85c <_puts_r+0xd4>)
 801b7ee:	429c      	cmp	r4, r3
 801b7f0:	d101      	bne.n	801b7f6 <_puts_r+0x6e>
 801b7f2:	68ac      	ldr	r4, [r5, #8]
 801b7f4:	e7da      	b.n	801b7ac <_puts_r+0x24>
 801b7f6:	4b1a      	ldr	r3, [pc, #104]	; (801b860 <_puts_r+0xd8>)
 801b7f8:	429c      	cmp	r4, r3
 801b7fa:	bf08      	it	eq
 801b7fc:	68ec      	ldreq	r4, [r5, #12]
 801b7fe:	e7d5      	b.n	801b7ac <_puts_r+0x24>
 801b800:	4621      	mov	r1, r4
 801b802:	4628      	mov	r0, r5
 801b804:	f000 f958 	bl	801bab8 <__swsetup_r>
 801b808:	2800      	cmp	r0, #0
 801b80a:	d0dd      	beq.n	801b7c8 <_puts_r+0x40>
 801b80c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b812:	07da      	lsls	r2, r3, #31
 801b814:	d405      	bmi.n	801b822 <_puts_r+0x9a>
 801b816:	89a3      	ldrh	r3, [r4, #12]
 801b818:	059b      	lsls	r3, r3, #22
 801b81a:	d402      	bmi.n	801b822 <_puts_r+0x9a>
 801b81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b81e:	f7ff fe93 	bl	801b548 <__retarget_lock_release_recursive>
 801b822:	4628      	mov	r0, r5
 801b824:	bd70      	pop	{r4, r5, r6, pc}
 801b826:	2b00      	cmp	r3, #0
 801b828:	da04      	bge.n	801b834 <_puts_r+0xac>
 801b82a:	69a2      	ldr	r2, [r4, #24]
 801b82c:	429a      	cmp	r2, r3
 801b82e:	dc06      	bgt.n	801b83e <_puts_r+0xb6>
 801b830:	290a      	cmp	r1, #10
 801b832:	d004      	beq.n	801b83e <_puts_r+0xb6>
 801b834:	6823      	ldr	r3, [r4, #0]
 801b836:	1c5a      	adds	r2, r3, #1
 801b838:	6022      	str	r2, [r4, #0]
 801b83a:	7019      	strb	r1, [r3, #0]
 801b83c:	e7c5      	b.n	801b7ca <_puts_r+0x42>
 801b83e:	4622      	mov	r2, r4
 801b840:	4628      	mov	r0, r5
 801b842:	f000 f8d5 	bl	801b9f0 <__swbuf_r>
 801b846:	3001      	adds	r0, #1
 801b848:	d1bf      	bne.n	801b7ca <_puts_r+0x42>
 801b84a:	e7df      	b.n	801b80c <_puts_r+0x84>
 801b84c:	6823      	ldr	r3, [r4, #0]
 801b84e:	250a      	movs	r5, #10
 801b850:	1c5a      	adds	r2, r3, #1
 801b852:	6022      	str	r2, [r4, #0]
 801b854:	701d      	strb	r5, [r3, #0]
 801b856:	e7db      	b.n	801b810 <_puts_r+0x88>
 801b858:	24008534 	.word	0x24008534
 801b85c:	24008554 	.word	0x24008554
 801b860:	24008514 	.word	0x24008514

0801b864 <puts>:
 801b864:	4b02      	ldr	r3, [pc, #8]	; (801b870 <puts+0xc>)
 801b866:	4601      	mov	r1, r0
 801b868:	6818      	ldr	r0, [r3, #0]
 801b86a:	f7ff bf8d 	b.w	801b788 <_puts_r>
 801b86e:	bf00      	nop
 801b870:	24008168 	.word	0x24008168

0801b874 <cleanup_glue>:
 801b874:	b538      	push	{r3, r4, r5, lr}
 801b876:	460c      	mov	r4, r1
 801b878:	6809      	ldr	r1, [r1, #0]
 801b87a:	4605      	mov	r5, r0
 801b87c:	b109      	cbz	r1, 801b882 <cleanup_glue+0xe>
 801b87e:	f7ff fff9 	bl	801b874 <cleanup_glue>
 801b882:	4621      	mov	r1, r4
 801b884:	4628      	mov	r0, r5
 801b886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b88a:	f7ff be85 	b.w	801b598 <_free_r>
	...

0801b890 <_reclaim_reent>:
 801b890:	4b2c      	ldr	r3, [pc, #176]	; (801b944 <_reclaim_reent+0xb4>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	4283      	cmp	r3, r0
 801b896:	b570      	push	{r4, r5, r6, lr}
 801b898:	4604      	mov	r4, r0
 801b89a:	d051      	beq.n	801b940 <_reclaim_reent+0xb0>
 801b89c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b89e:	b143      	cbz	r3, 801b8b2 <_reclaim_reent+0x22>
 801b8a0:	68db      	ldr	r3, [r3, #12]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d14a      	bne.n	801b93c <_reclaim_reent+0xac>
 801b8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8a8:	6819      	ldr	r1, [r3, #0]
 801b8aa:	b111      	cbz	r1, 801b8b2 <_reclaim_reent+0x22>
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	f7ff fe73 	bl	801b598 <_free_r>
 801b8b2:	6961      	ldr	r1, [r4, #20]
 801b8b4:	b111      	cbz	r1, 801b8bc <_reclaim_reent+0x2c>
 801b8b6:	4620      	mov	r0, r4
 801b8b8:	f7ff fe6e 	bl	801b598 <_free_r>
 801b8bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b8be:	b111      	cbz	r1, 801b8c6 <_reclaim_reent+0x36>
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	f7ff fe69 	bl	801b598 <_free_r>
 801b8c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b8c8:	b111      	cbz	r1, 801b8d0 <_reclaim_reent+0x40>
 801b8ca:	4620      	mov	r0, r4
 801b8cc:	f7ff fe64 	bl	801b598 <_free_r>
 801b8d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b8d2:	b111      	cbz	r1, 801b8da <_reclaim_reent+0x4a>
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	f7ff fe5f 	bl	801b598 <_free_r>
 801b8da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b8dc:	b111      	cbz	r1, 801b8e4 <_reclaim_reent+0x54>
 801b8de:	4620      	mov	r0, r4
 801b8e0:	f7ff fe5a 	bl	801b598 <_free_r>
 801b8e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b8e6:	b111      	cbz	r1, 801b8ee <_reclaim_reent+0x5e>
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	f7ff fe55 	bl	801b598 <_free_r>
 801b8ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b8f0:	b111      	cbz	r1, 801b8f8 <_reclaim_reent+0x68>
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	f7ff fe50 	bl	801b598 <_free_r>
 801b8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b8fa:	b111      	cbz	r1, 801b902 <_reclaim_reent+0x72>
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	f7ff fe4b 	bl	801b598 <_free_r>
 801b902:	69a3      	ldr	r3, [r4, #24]
 801b904:	b1e3      	cbz	r3, 801b940 <_reclaim_reent+0xb0>
 801b906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b908:	4620      	mov	r0, r4
 801b90a:	4798      	blx	r3
 801b90c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b90e:	b1b9      	cbz	r1, 801b940 <_reclaim_reent+0xb0>
 801b910:	4620      	mov	r0, r4
 801b912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b916:	f7ff bfad 	b.w	801b874 <cleanup_glue>
 801b91a:	5949      	ldr	r1, [r1, r5]
 801b91c:	b941      	cbnz	r1, 801b930 <_reclaim_reent+0xa0>
 801b91e:	3504      	adds	r5, #4
 801b920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b922:	2d80      	cmp	r5, #128	; 0x80
 801b924:	68d9      	ldr	r1, [r3, #12]
 801b926:	d1f8      	bne.n	801b91a <_reclaim_reent+0x8a>
 801b928:	4620      	mov	r0, r4
 801b92a:	f7ff fe35 	bl	801b598 <_free_r>
 801b92e:	e7ba      	b.n	801b8a6 <_reclaim_reent+0x16>
 801b930:	680e      	ldr	r6, [r1, #0]
 801b932:	4620      	mov	r0, r4
 801b934:	f7ff fe30 	bl	801b598 <_free_r>
 801b938:	4631      	mov	r1, r6
 801b93a:	e7ef      	b.n	801b91c <_reclaim_reent+0x8c>
 801b93c:	2500      	movs	r5, #0
 801b93e:	e7ef      	b.n	801b920 <_reclaim_reent+0x90>
 801b940:	bd70      	pop	{r4, r5, r6, pc}
 801b942:	bf00      	nop
 801b944:	24008168 	.word	0x24008168

0801b948 <_sbrk_r>:
 801b948:	b538      	push	{r3, r4, r5, lr}
 801b94a:	4d06      	ldr	r5, [pc, #24]	; (801b964 <_sbrk_r+0x1c>)
 801b94c:	2300      	movs	r3, #0
 801b94e:	4604      	mov	r4, r0
 801b950:	4608      	mov	r0, r1
 801b952:	602b      	str	r3, [r5, #0]
 801b954:	f7ef fd90 	bl	800b478 <_sbrk>
 801b958:	1c43      	adds	r3, r0, #1
 801b95a:	d102      	bne.n	801b962 <_sbrk_r+0x1a>
 801b95c:	682b      	ldr	r3, [r5, #0]
 801b95e:	b103      	cbz	r3, 801b962 <_sbrk_r+0x1a>
 801b960:	6023      	str	r3, [r4, #0]
 801b962:	bd38      	pop	{r3, r4, r5, pc}
 801b964:	24035130 	.word	0x24035130

0801b968 <__sread>:
 801b968:	b510      	push	{r4, lr}
 801b96a:	460c      	mov	r4, r1
 801b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b970:	f000 fd54 	bl	801c41c <_read_r>
 801b974:	2800      	cmp	r0, #0
 801b976:	bfab      	itete	ge
 801b978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b97a:	89a3      	ldrhlt	r3, [r4, #12]
 801b97c:	181b      	addge	r3, r3, r0
 801b97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b982:	bfac      	ite	ge
 801b984:	6563      	strge	r3, [r4, #84]	; 0x54
 801b986:	81a3      	strhlt	r3, [r4, #12]
 801b988:	bd10      	pop	{r4, pc}

0801b98a <__swrite>:
 801b98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b98e:	461f      	mov	r7, r3
 801b990:	898b      	ldrh	r3, [r1, #12]
 801b992:	05db      	lsls	r3, r3, #23
 801b994:	4605      	mov	r5, r0
 801b996:	460c      	mov	r4, r1
 801b998:	4616      	mov	r6, r2
 801b99a:	d505      	bpl.n	801b9a8 <__swrite+0x1e>
 801b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9a0:	2302      	movs	r3, #2
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	f000 f9c8 	bl	801bd38 <_lseek_r>
 801b9a8:	89a3      	ldrh	r3, [r4, #12]
 801b9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b9b2:	81a3      	strh	r3, [r4, #12]
 801b9b4:	4632      	mov	r2, r6
 801b9b6:	463b      	mov	r3, r7
 801b9b8:	4628      	mov	r0, r5
 801b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9be:	f000 b869 	b.w	801ba94 <_write_r>

0801b9c2 <__sseek>:
 801b9c2:	b510      	push	{r4, lr}
 801b9c4:	460c      	mov	r4, r1
 801b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ca:	f000 f9b5 	bl	801bd38 <_lseek_r>
 801b9ce:	1c43      	adds	r3, r0, #1
 801b9d0:	89a3      	ldrh	r3, [r4, #12]
 801b9d2:	bf15      	itete	ne
 801b9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b9de:	81a3      	strheq	r3, [r4, #12]
 801b9e0:	bf18      	it	ne
 801b9e2:	81a3      	strhne	r3, [r4, #12]
 801b9e4:	bd10      	pop	{r4, pc}

0801b9e6 <__sclose>:
 801b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ea:	f000 b8d3 	b.w	801bb94 <_close_r>
	...

0801b9f0 <__swbuf_r>:
 801b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9f2:	460e      	mov	r6, r1
 801b9f4:	4614      	mov	r4, r2
 801b9f6:	4605      	mov	r5, r0
 801b9f8:	b118      	cbz	r0, 801ba02 <__swbuf_r+0x12>
 801b9fa:	6983      	ldr	r3, [r0, #24]
 801b9fc:	b90b      	cbnz	r3, 801ba02 <__swbuf_r+0x12>
 801b9fe:	f7ff fcdf 	bl	801b3c0 <__sinit>
 801ba02:	4b21      	ldr	r3, [pc, #132]	; (801ba88 <__swbuf_r+0x98>)
 801ba04:	429c      	cmp	r4, r3
 801ba06:	d12b      	bne.n	801ba60 <__swbuf_r+0x70>
 801ba08:	686c      	ldr	r4, [r5, #4]
 801ba0a:	69a3      	ldr	r3, [r4, #24]
 801ba0c:	60a3      	str	r3, [r4, #8]
 801ba0e:	89a3      	ldrh	r3, [r4, #12]
 801ba10:	071a      	lsls	r2, r3, #28
 801ba12:	d52f      	bpl.n	801ba74 <__swbuf_r+0x84>
 801ba14:	6923      	ldr	r3, [r4, #16]
 801ba16:	b36b      	cbz	r3, 801ba74 <__swbuf_r+0x84>
 801ba18:	6923      	ldr	r3, [r4, #16]
 801ba1a:	6820      	ldr	r0, [r4, #0]
 801ba1c:	1ac0      	subs	r0, r0, r3
 801ba1e:	6963      	ldr	r3, [r4, #20]
 801ba20:	b2f6      	uxtb	r6, r6
 801ba22:	4283      	cmp	r3, r0
 801ba24:	4637      	mov	r7, r6
 801ba26:	dc04      	bgt.n	801ba32 <__swbuf_r+0x42>
 801ba28:	4621      	mov	r1, r4
 801ba2a:	4628      	mov	r0, r5
 801ba2c:	f000 f948 	bl	801bcc0 <_fflush_r>
 801ba30:	bb30      	cbnz	r0, 801ba80 <__swbuf_r+0x90>
 801ba32:	68a3      	ldr	r3, [r4, #8]
 801ba34:	3b01      	subs	r3, #1
 801ba36:	60a3      	str	r3, [r4, #8]
 801ba38:	6823      	ldr	r3, [r4, #0]
 801ba3a:	1c5a      	adds	r2, r3, #1
 801ba3c:	6022      	str	r2, [r4, #0]
 801ba3e:	701e      	strb	r6, [r3, #0]
 801ba40:	6963      	ldr	r3, [r4, #20]
 801ba42:	3001      	adds	r0, #1
 801ba44:	4283      	cmp	r3, r0
 801ba46:	d004      	beq.n	801ba52 <__swbuf_r+0x62>
 801ba48:	89a3      	ldrh	r3, [r4, #12]
 801ba4a:	07db      	lsls	r3, r3, #31
 801ba4c:	d506      	bpl.n	801ba5c <__swbuf_r+0x6c>
 801ba4e:	2e0a      	cmp	r6, #10
 801ba50:	d104      	bne.n	801ba5c <__swbuf_r+0x6c>
 801ba52:	4621      	mov	r1, r4
 801ba54:	4628      	mov	r0, r5
 801ba56:	f000 f933 	bl	801bcc0 <_fflush_r>
 801ba5a:	b988      	cbnz	r0, 801ba80 <__swbuf_r+0x90>
 801ba5c:	4638      	mov	r0, r7
 801ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba60:	4b0a      	ldr	r3, [pc, #40]	; (801ba8c <__swbuf_r+0x9c>)
 801ba62:	429c      	cmp	r4, r3
 801ba64:	d101      	bne.n	801ba6a <__swbuf_r+0x7a>
 801ba66:	68ac      	ldr	r4, [r5, #8]
 801ba68:	e7cf      	b.n	801ba0a <__swbuf_r+0x1a>
 801ba6a:	4b09      	ldr	r3, [pc, #36]	; (801ba90 <__swbuf_r+0xa0>)
 801ba6c:	429c      	cmp	r4, r3
 801ba6e:	bf08      	it	eq
 801ba70:	68ec      	ldreq	r4, [r5, #12]
 801ba72:	e7ca      	b.n	801ba0a <__swbuf_r+0x1a>
 801ba74:	4621      	mov	r1, r4
 801ba76:	4628      	mov	r0, r5
 801ba78:	f000 f81e 	bl	801bab8 <__swsetup_r>
 801ba7c:	2800      	cmp	r0, #0
 801ba7e:	d0cb      	beq.n	801ba18 <__swbuf_r+0x28>
 801ba80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ba84:	e7ea      	b.n	801ba5c <__swbuf_r+0x6c>
 801ba86:	bf00      	nop
 801ba88:	24008534 	.word	0x24008534
 801ba8c:	24008554 	.word	0x24008554
 801ba90:	24008514 	.word	0x24008514

0801ba94 <_write_r>:
 801ba94:	b538      	push	{r3, r4, r5, lr}
 801ba96:	4d07      	ldr	r5, [pc, #28]	; (801bab4 <_write_r+0x20>)
 801ba98:	4604      	mov	r4, r0
 801ba9a:	4608      	mov	r0, r1
 801ba9c:	4611      	mov	r1, r2
 801ba9e:	2200      	movs	r2, #0
 801baa0:	602a      	str	r2, [r5, #0]
 801baa2:	461a      	mov	r2, r3
 801baa4:	f7ef fc97 	bl	800b3d6 <_write>
 801baa8:	1c43      	adds	r3, r0, #1
 801baaa:	d102      	bne.n	801bab2 <_write_r+0x1e>
 801baac:	682b      	ldr	r3, [r5, #0]
 801baae:	b103      	cbz	r3, 801bab2 <_write_r+0x1e>
 801bab0:	6023      	str	r3, [r4, #0]
 801bab2:	bd38      	pop	{r3, r4, r5, pc}
 801bab4:	24035130 	.word	0x24035130

0801bab8 <__swsetup_r>:
 801bab8:	4b32      	ldr	r3, [pc, #200]	; (801bb84 <__swsetup_r+0xcc>)
 801baba:	b570      	push	{r4, r5, r6, lr}
 801babc:	681d      	ldr	r5, [r3, #0]
 801babe:	4606      	mov	r6, r0
 801bac0:	460c      	mov	r4, r1
 801bac2:	b125      	cbz	r5, 801bace <__swsetup_r+0x16>
 801bac4:	69ab      	ldr	r3, [r5, #24]
 801bac6:	b913      	cbnz	r3, 801bace <__swsetup_r+0x16>
 801bac8:	4628      	mov	r0, r5
 801baca:	f7ff fc79 	bl	801b3c0 <__sinit>
 801bace:	4b2e      	ldr	r3, [pc, #184]	; (801bb88 <__swsetup_r+0xd0>)
 801bad0:	429c      	cmp	r4, r3
 801bad2:	d10f      	bne.n	801baf4 <__swsetup_r+0x3c>
 801bad4:	686c      	ldr	r4, [r5, #4]
 801bad6:	89a3      	ldrh	r3, [r4, #12]
 801bad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801badc:	0719      	lsls	r1, r3, #28
 801bade:	d42c      	bmi.n	801bb3a <__swsetup_r+0x82>
 801bae0:	06dd      	lsls	r5, r3, #27
 801bae2:	d411      	bmi.n	801bb08 <__swsetup_r+0x50>
 801bae4:	2309      	movs	r3, #9
 801bae6:	6033      	str	r3, [r6, #0]
 801bae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801baec:	81a3      	strh	r3, [r4, #12]
 801baee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801baf2:	e03e      	b.n	801bb72 <__swsetup_r+0xba>
 801baf4:	4b25      	ldr	r3, [pc, #148]	; (801bb8c <__swsetup_r+0xd4>)
 801baf6:	429c      	cmp	r4, r3
 801baf8:	d101      	bne.n	801bafe <__swsetup_r+0x46>
 801bafa:	68ac      	ldr	r4, [r5, #8]
 801bafc:	e7eb      	b.n	801bad6 <__swsetup_r+0x1e>
 801bafe:	4b24      	ldr	r3, [pc, #144]	; (801bb90 <__swsetup_r+0xd8>)
 801bb00:	429c      	cmp	r4, r3
 801bb02:	bf08      	it	eq
 801bb04:	68ec      	ldreq	r4, [r5, #12]
 801bb06:	e7e6      	b.n	801bad6 <__swsetup_r+0x1e>
 801bb08:	0758      	lsls	r0, r3, #29
 801bb0a:	d512      	bpl.n	801bb32 <__swsetup_r+0x7a>
 801bb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb0e:	b141      	cbz	r1, 801bb22 <__swsetup_r+0x6a>
 801bb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb14:	4299      	cmp	r1, r3
 801bb16:	d002      	beq.n	801bb1e <__swsetup_r+0x66>
 801bb18:	4630      	mov	r0, r6
 801bb1a:	f7ff fd3d 	bl	801b598 <_free_r>
 801bb1e:	2300      	movs	r3, #0
 801bb20:	6363      	str	r3, [r4, #52]	; 0x34
 801bb22:	89a3      	ldrh	r3, [r4, #12]
 801bb24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb28:	81a3      	strh	r3, [r4, #12]
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	6063      	str	r3, [r4, #4]
 801bb2e:	6923      	ldr	r3, [r4, #16]
 801bb30:	6023      	str	r3, [r4, #0]
 801bb32:	89a3      	ldrh	r3, [r4, #12]
 801bb34:	f043 0308 	orr.w	r3, r3, #8
 801bb38:	81a3      	strh	r3, [r4, #12]
 801bb3a:	6923      	ldr	r3, [r4, #16]
 801bb3c:	b94b      	cbnz	r3, 801bb52 <__swsetup_r+0x9a>
 801bb3e:	89a3      	ldrh	r3, [r4, #12]
 801bb40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb48:	d003      	beq.n	801bb52 <__swsetup_r+0x9a>
 801bb4a:	4621      	mov	r1, r4
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	f000 f92b 	bl	801bda8 <__smakebuf_r>
 801bb52:	89a0      	ldrh	r0, [r4, #12]
 801bb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb58:	f010 0301 	ands.w	r3, r0, #1
 801bb5c:	d00a      	beq.n	801bb74 <__swsetup_r+0xbc>
 801bb5e:	2300      	movs	r3, #0
 801bb60:	60a3      	str	r3, [r4, #8]
 801bb62:	6963      	ldr	r3, [r4, #20]
 801bb64:	425b      	negs	r3, r3
 801bb66:	61a3      	str	r3, [r4, #24]
 801bb68:	6923      	ldr	r3, [r4, #16]
 801bb6a:	b943      	cbnz	r3, 801bb7e <__swsetup_r+0xc6>
 801bb6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bb70:	d1ba      	bne.n	801bae8 <__swsetup_r+0x30>
 801bb72:	bd70      	pop	{r4, r5, r6, pc}
 801bb74:	0781      	lsls	r1, r0, #30
 801bb76:	bf58      	it	pl
 801bb78:	6963      	ldrpl	r3, [r4, #20]
 801bb7a:	60a3      	str	r3, [r4, #8]
 801bb7c:	e7f4      	b.n	801bb68 <__swsetup_r+0xb0>
 801bb7e:	2000      	movs	r0, #0
 801bb80:	e7f7      	b.n	801bb72 <__swsetup_r+0xba>
 801bb82:	bf00      	nop
 801bb84:	24008168 	.word	0x24008168
 801bb88:	24008534 	.word	0x24008534
 801bb8c:	24008554 	.word	0x24008554
 801bb90:	24008514 	.word	0x24008514

0801bb94 <_close_r>:
 801bb94:	b538      	push	{r3, r4, r5, lr}
 801bb96:	4d06      	ldr	r5, [pc, #24]	; (801bbb0 <_close_r+0x1c>)
 801bb98:	2300      	movs	r3, #0
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	4608      	mov	r0, r1
 801bb9e:	602b      	str	r3, [r5, #0]
 801bba0:	f7ef fc35 	bl	800b40e <_close>
 801bba4:	1c43      	adds	r3, r0, #1
 801bba6:	d102      	bne.n	801bbae <_close_r+0x1a>
 801bba8:	682b      	ldr	r3, [r5, #0]
 801bbaa:	b103      	cbz	r3, 801bbae <_close_r+0x1a>
 801bbac:	6023      	str	r3, [r4, #0]
 801bbae:	bd38      	pop	{r3, r4, r5, pc}
 801bbb0:	24035130 	.word	0x24035130

0801bbb4 <__sflush_r>:
 801bbb4:	898a      	ldrh	r2, [r1, #12]
 801bbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbba:	4605      	mov	r5, r0
 801bbbc:	0710      	lsls	r0, r2, #28
 801bbbe:	460c      	mov	r4, r1
 801bbc0:	d458      	bmi.n	801bc74 <__sflush_r+0xc0>
 801bbc2:	684b      	ldr	r3, [r1, #4]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	dc05      	bgt.n	801bbd4 <__sflush_r+0x20>
 801bbc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	dc02      	bgt.n	801bbd4 <__sflush_r+0x20>
 801bbce:	2000      	movs	r0, #0
 801bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbd6:	2e00      	cmp	r6, #0
 801bbd8:	d0f9      	beq.n	801bbce <__sflush_r+0x1a>
 801bbda:	2300      	movs	r3, #0
 801bbdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bbe0:	682f      	ldr	r7, [r5, #0]
 801bbe2:	602b      	str	r3, [r5, #0]
 801bbe4:	d032      	beq.n	801bc4c <__sflush_r+0x98>
 801bbe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bbe8:	89a3      	ldrh	r3, [r4, #12]
 801bbea:	075a      	lsls	r2, r3, #29
 801bbec:	d505      	bpl.n	801bbfa <__sflush_r+0x46>
 801bbee:	6863      	ldr	r3, [r4, #4]
 801bbf0:	1ac0      	subs	r0, r0, r3
 801bbf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bbf4:	b10b      	cbz	r3, 801bbfa <__sflush_r+0x46>
 801bbf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bbf8:	1ac0      	subs	r0, r0, r3
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc00:	6a21      	ldr	r1, [r4, #32]
 801bc02:	4628      	mov	r0, r5
 801bc04:	47b0      	blx	r6
 801bc06:	1c43      	adds	r3, r0, #1
 801bc08:	89a3      	ldrh	r3, [r4, #12]
 801bc0a:	d106      	bne.n	801bc1a <__sflush_r+0x66>
 801bc0c:	6829      	ldr	r1, [r5, #0]
 801bc0e:	291d      	cmp	r1, #29
 801bc10:	d82c      	bhi.n	801bc6c <__sflush_r+0xb8>
 801bc12:	4a2a      	ldr	r2, [pc, #168]	; (801bcbc <__sflush_r+0x108>)
 801bc14:	40ca      	lsrs	r2, r1
 801bc16:	07d6      	lsls	r6, r2, #31
 801bc18:	d528      	bpl.n	801bc6c <__sflush_r+0xb8>
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	6062      	str	r2, [r4, #4]
 801bc1e:	04d9      	lsls	r1, r3, #19
 801bc20:	6922      	ldr	r2, [r4, #16]
 801bc22:	6022      	str	r2, [r4, #0]
 801bc24:	d504      	bpl.n	801bc30 <__sflush_r+0x7c>
 801bc26:	1c42      	adds	r2, r0, #1
 801bc28:	d101      	bne.n	801bc2e <__sflush_r+0x7a>
 801bc2a:	682b      	ldr	r3, [r5, #0]
 801bc2c:	b903      	cbnz	r3, 801bc30 <__sflush_r+0x7c>
 801bc2e:	6560      	str	r0, [r4, #84]	; 0x54
 801bc30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc32:	602f      	str	r7, [r5, #0]
 801bc34:	2900      	cmp	r1, #0
 801bc36:	d0ca      	beq.n	801bbce <__sflush_r+0x1a>
 801bc38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc3c:	4299      	cmp	r1, r3
 801bc3e:	d002      	beq.n	801bc46 <__sflush_r+0x92>
 801bc40:	4628      	mov	r0, r5
 801bc42:	f7ff fca9 	bl	801b598 <_free_r>
 801bc46:	2000      	movs	r0, #0
 801bc48:	6360      	str	r0, [r4, #52]	; 0x34
 801bc4a:	e7c1      	b.n	801bbd0 <__sflush_r+0x1c>
 801bc4c:	6a21      	ldr	r1, [r4, #32]
 801bc4e:	2301      	movs	r3, #1
 801bc50:	4628      	mov	r0, r5
 801bc52:	47b0      	blx	r6
 801bc54:	1c41      	adds	r1, r0, #1
 801bc56:	d1c7      	bne.n	801bbe8 <__sflush_r+0x34>
 801bc58:	682b      	ldr	r3, [r5, #0]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d0c4      	beq.n	801bbe8 <__sflush_r+0x34>
 801bc5e:	2b1d      	cmp	r3, #29
 801bc60:	d001      	beq.n	801bc66 <__sflush_r+0xb2>
 801bc62:	2b16      	cmp	r3, #22
 801bc64:	d101      	bne.n	801bc6a <__sflush_r+0xb6>
 801bc66:	602f      	str	r7, [r5, #0]
 801bc68:	e7b1      	b.n	801bbce <__sflush_r+0x1a>
 801bc6a:	89a3      	ldrh	r3, [r4, #12]
 801bc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc70:	81a3      	strh	r3, [r4, #12]
 801bc72:	e7ad      	b.n	801bbd0 <__sflush_r+0x1c>
 801bc74:	690f      	ldr	r7, [r1, #16]
 801bc76:	2f00      	cmp	r7, #0
 801bc78:	d0a9      	beq.n	801bbce <__sflush_r+0x1a>
 801bc7a:	0793      	lsls	r3, r2, #30
 801bc7c:	680e      	ldr	r6, [r1, #0]
 801bc7e:	bf08      	it	eq
 801bc80:	694b      	ldreq	r3, [r1, #20]
 801bc82:	600f      	str	r7, [r1, #0]
 801bc84:	bf18      	it	ne
 801bc86:	2300      	movne	r3, #0
 801bc88:	eba6 0807 	sub.w	r8, r6, r7
 801bc8c:	608b      	str	r3, [r1, #8]
 801bc8e:	f1b8 0f00 	cmp.w	r8, #0
 801bc92:	dd9c      	ble.n	801bbce <__sflush_r+0x1a>
 801bc94:	6a21      	ldr	r1, [r4, #32]
 801bc96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc98:	4643      	mov	r3, r8
 801bc9a:	463a      	mov	r2, r7
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	47b0      	blx	r6
 801bca0:	2800      	cmp	r0, #0
 801bca2:	dc06      	bgt.n	801bcb2 <__sflush_r+0xfe>
 801bca4:	89a3      	ldrh	r3, [r4, #12]
 801bca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcaa:	81a3      	strh	r3, [r4, #12]
 801bcac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcb0:	e78e      	b.n	801bbd0 <__sflush_r+0x1c>
 801bcb2:	4407      	add	r7, r0
 801bcb4:	eba8 0800 	sub.w	r8, r8, r0
 801bcb8:	e7e9      	b.n	801bc8e <__sflush_r+0xda>
 801bcba:	bf00      	nop
 801bcbc:	20400001 	.word	0x20400001

0801bcc0 <_fflush_r>:
 801bcc0:	b538      	push	{r3, r4, r5, lr}
 801bcc2:	690b      	ldr	r3, [r1, #16]
 801bcc4:	4605      	mov	r5, r0
 801bcc6:	460c      	mov	r4, r1
 801bcc8:	b913      	cbnz	r3, 801bcd0 <_fflush_r+0x10>
 801bcca:	2500      	movs	r5, #0
 801bccc:	4628      	mov	r0, r5
 801bcce:	bd38      	pop	{r3, r4, r5, pc}
 801bcd0:	b118      	cbz	r0, 801bcda <_fflush_r+0x1a>
 801bcd2:	6983      	ldr	r3, [r0, #24]
 801bcd4:	b90b      	cbnz	r3, 801bcda <_fflush_r+0x1a>
 801bcd6:	f7ff fb73 	bl	801b3c0 <__sinit>
 801bcda:	4b14      	ldr	r3, [pc, #80]	; (801bd2c <_fflush_r+0x6c>)
 801bcdc:	429c      	cmp	r4, r3
 801bcde:	d11b      	bne.n	801bd18 <_fflush_r+0x58>
 801bce0:	686c      	ldr	r4, [r5, #4]
 801bce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d0ef      	beq.n	801bcca <_fflush_r+0xa>
 801bcea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bcec:	07d0      	lsls	r0, r2, #31
 801bcee:	d404      	bmi.n	801bcfa <_fflush_r+0x3a>
 801bcf0:	0599      	lsls	r1, r3, #22
 801bcf2:	d402      	bmi.n	801bcfa <_fflush_r+0x3a>
 801bcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcf6:	f7ff fc26 	bl	801b546 <__retarget_lock_acquire_recursive>
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	4621      	mov	r1, r4
 801bcfe:	f7ff ff59 	bl	801bbb4 <__sflush_r>
 801bd02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd04:	07da      	lsls	r2, r3, #31
 801bd06:	4605      	mov	r5, r0
 801bd08:	d4e0      	bmi.n	801bccc <_fflush_r+0xc>
 801bd0a:	89a3      	ldrh	r3, [r4, #12]
 801bd0c:	059b      	lsls	r3, r3, #22
 801bd0e:	d4dd      	bmi.n	801bccc <_fflush_r+0xc>
 801bd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd12:	f7ff fc19 	bl	801b548 <__retarget_lock_release_recursive>
 801bd16:	e7d9      	b.n	801bccc <_fflush_r+0xc>
 801bd18:	4b05      	ldr	r3, [pc, #20]	; (801bd30 <_fflush_r+0x70>)
 801bd1a:	429c      	cmp	r4, r3
 801bd1c:	d101      	bne.n	801bd22 <_fflush_r+0x62>
 801bd1e:	68ac      	ldr	r4, [r5, #8]
 801bd20:	e7df      	b.n	801bce2 <_fflush_r+0x22>
 801bd22:	4b04      	ldr	r3, [pc, #16]	; (801bd34 <_fflush_r+0x74>)
 801bd24:	429c      	cmp	r4, r3
 801bd26:	bf08      	it	eq
 801bd28:	68ec      	ldreq	r4, [r5, #12]
 801bd2a:	e7da      	b.n	801bce2 <_fflush_r+0x22>
 801bd2c:	24008534 	.word	0x24008534
 801bd30:	24008554 	.word	0x24008554
 801bd34:	24008514 	.word	0x24008514

0801bd38 <_lseek_r>:
 801bd38:	b538      	push	{r3, r4, r5, lr}
 801bd3a:	4d07      	ldr	r5, [pc, #28]	; (801bd58 <_lseek_r+0x20>)
 801bd3c:	4604      	mov	r4, r0
 801bd3e:	4608      	mov	r0, r1
 801bd40:	4611      	mov	r1, r2
 801bd42:	2200      	movs	r2, #0
 801bd44:	602a      	str	r2, [r5, #0]
 801bd46:	461a      	mov	r2, r3
 801bd48:	f7ef fb88 	bl	800b45c <_lseek>
 801bd4c:	1c43      	adds	r3, r0, #1
 801bd4e:	d102      	bne.n	801bd56 <_lseek_r+0x1e>
 801bd50:	682b      	ldr	r3, [r5, #0]
 801bd52:	b103      	cbz	r3, 801bd56 <_lseek_r+0x1e>
 801bd54:	6023      	str	r3, [r4, #0]
 801bd56:	bd38      	pop	{r3, r4, r5, pc}
 801bd58:	24035130 	.word	0x24035130

0801bd5c <__swhatbuf_r>:
 801bd5c:	b570      	push	{r4, r5, r6, lr}
 801bd5e:	460e      	mov	r6, r1
 801bd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd64:	2900      	cmp	r1, #0
 801bd66:	b096      	sub	sp, #88	; 0x58
 801bd68:	4614      	mov	r4, r2
 801bd6a:	461d      	mov	r5, r3
 801bd6c:	da08      	bge.n	801bd80 <__swhatbuf_r+0x24>
 801bd6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bd72:	2200      	movs	r2, #0
 801bd74:	602a      	str	r2, [r5, #0]
 801bd76:	061a      	lsls	r2, r3, #24
 801bd78:	d410      	bmi.n	801bd9c <__swhatbuf_r+0x40>
 801bd7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd7e:	e00e      	b.n	801bd9e <__swhatbuf_r+0x42>
 801bd80:	466a      	mov	r2, sp
 801bd82:	f000 fb5d 	bl	801c440 <_fstat_r>
 801bd86:	2800      	cmp	r0, #0
 801bd88:	dbf1      	blt.n	801bd6e <__swhatbuf_r+0x12>
 801bd8a:	9a01      	ldr	r2, [sp, #4]
 801bd8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bd90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bd94:	425a      	negs	r2, r3
 801bd96:	415a      	adcs	r2, r3
 801bd98:	602a      	str	r2, [r5, #0]
 801bd9a:	e7ee      	b.n	801bd7a <__swhatbuf_r+0x1e>
 801bd9c:	2340      	movs	r3, #64	; 0x40
 801bd9e:	2000      	movs	r0, #0
 801bda0:	6023      	str	r3, [r4, #0]
 801bda2:	b016      	add	sp, #88	; 0x58
 801bda4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bda8 <__smakebuf_r>:
 801bda8:	898b      	ldrh	r3, [r1, #12]
 801bdaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdac:	079d      	lsls	r5, r3, #30
 801bdae:	4606      	mov	r6, r0
 801bdb0:	460c      	mov	r4, r1
 801bdb2:	d507      	bpl.n	801bdc4 <__smakebuf_r+0x1c>
 801bdb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bdb8:	6023      	str	r3, [r4, #0]
 801bdba:	6123      	str	r3, [r4, #16]
 801bdbc:	2301      	movs	r3, #1
 801bdbe:	6163      	str	r3, [r4, #20]
 801bdc0:	b002      	add	sp, #8
 801bdc2:	bd70      	pop	{r4, r5, r6, pc}
 801bdc4:	ab01      	add	r3, sp, #4
 801bdc6:	466a      	mov	r2, sp
 801bdc8:	f7ff ffc8 	bl	801bd5c <__swhatbuf_r>
 801bdcc:	9900      	ldr	r1, [sp, #0]
 801bdce:	4605      	mov	r5, r0
 801bdd0:	4630      	mov	r0, r6
 801bdd2:	f7ff fc4d 	bl	801b670 <_malloc_r>
 801bdd6:	b948      	cbnz	r0, 801bdec <__smakebuf_r+0x44>
 801bdd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bddc:	059a      	lsls	r2, r3, #22
 801bdde:	d4ef      	bmi.n	801bdc0 <__smakebuf_r+0x18>
 801bde0:	f023 0303 	bic.w	r3, r3, #3
 801bde4:	f043 0302 	orr.w	r3, r3, #2
 801bde8:	81a3      	strh	r3, [r4, #12]
 801bdea:	e7e3      	b.n	801bdb4 <__smakebuf_r+0xc>
 801bdec:	4b0d      	ldr	r3, [pc, #52]	; (801be24 <__smakebuf_r+0x7c>)
 801bdee:	62b3      	str	r3, [r6, #40]	; 0x28
 801bdf0:	89a3      	ldrh	r3, [r4, #12]
 801bdf2:	6020      	str	r0, [r4, #0]
 801bdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdf8:	81a3      	strh	r3, [r4, #12]
 801bdfa:	9b00      	ldr	r3, [sp, #0]
 801bdfc:	6163      	str	r3, [r4, #20]
 801bdfe:	9b01      	ldr	r3, [sp, #4]
 801be00:	6120      	str	r0, [r4, #16]
 801be02:	b15b      	cbz	r3, 801be1c <__smakebuf_r+0x74>
 801be04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be08:	4630      	mov	r0, r6
 801be0a:	f000 fb2b 	bl	801c464 <_isatty_r>
 801be0e:	b128      	cbz	r0, 801be1c <__smakebuf_r+0x74>
 801be10:	89a3      	ldrh	r3, [r4, #12]
 801be12:	f023 0303 	bic.w	r3, r3, #3
 801be16:	f043 0301 	orr.w	r3, r3, #1
 801be1a:	81a3      	strh	r3, [r4, #12]
 801be1c:	89a0      	ldrh	r0, [r4, #12]
 801be1e:	4305      	orrs	r5, r0
 801be20:	81a5      	strh	r5, [r4, #12]
 801be22:	e7cd      	b.n	801bdc0 <__smakebuf_r+0x18>
 801be24:	0801b359 	.word	0x0801b359

0801be28 <__malloc_lock>:
 801be28:	4801      	ldr	r0, [pc, #4]	; (801be30 <__malloc_lock+0x8>)
 801be2a:	f7ff bb8c 	b.w	801b546 <__retarget_lock_acquire_recursive>
 801be2e:	bf00      	nop
 801be30:	24035124 	.word	0x24035124

0801be34 <__malloc_unlock>:
 801be34:	4801      	ldr	r0, [pc, #4]	; (801be3c <__malloc_unlock+0x8>)
 801be36:	f7ff bb87 	b.w	801b548 <__retarget_lock_release_recursive>
 801be3a:	bf00      	nop
 801be3c:	24035124 	.word	0x24035124

0801be40 <__sfputc_r>:
 801be40:	6893      	ldr	r3, [r2, #8]
 801be42:	3b01      	subs	r3, #1
 801be44:	2b00      	cmp	r3, #0
 801be46:	b410      	push	{r4}
 801be48:	6093      	str	r3, [r2, #8]
 801be4a:	da08      	bge.n	801be5e <__sfputc_r+0x1e>
 801be4c:	6994      	ldr	r4, [r2, #24]
 801be4e:	42a3      	cmp	r3, r4
 801be50:	db01      	blt.n	801be56 <__sfputc_r+0x16>
 801be52:	290a      	cmp	r1, #10
 801be54:	d103      	bne.n	801be5e <__sfputc_r+0x1e>
 801be56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be5a:	f7ff bdc9 	b.w	801b9f0 <__swbuf_r>
 801be5e:	6813      	ldr	r3, [r2, #0]
 801be60:	1c58      	adds	r0, r3, #1
 801be62:	6010      	str	r0, [r2, #0]
 801be64:	7019      	strb	r1, [r3, #0]
 801be66:	4608      	mov	r0, r1
 801be68:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be6c:	4770      	bx	lr

0801be6e <__sfputs_r>:
 801be6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be70:	4606      	mov	r6, r0
 801be72:	460f      	mov	r7, r1
 801be74:	4614      	mov	r4, r2
 801be76:	18d5      	adds	r5, r2, r3
 801be78:	42ac      	cmp	r4, r5
 801be7a:	d101      	bne.n	801be80 <__sfputs_r+0x12>
 801be7c:	2000      	movs	r0, #0
 801be7e:	e007      	b.n	801be90 <__sfputs_r+0x22>
 801be80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be84:	463a      	mov	r2, r7
 801be86:	4630      	mov	r0, r6
 801be88:	f7ff ffda 	bl	801be40 <__sfputc_r>
 801be8c:	1c43      	adds	r3, r0, #1
 801be8e:	d1f3      	bne.n	801be78 <__sfputs_r+0xa>
 801be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801be94 <_vfiprintf_r>:
 801be94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be98:	460d      	mov	r5, r1
 801be9a:	b09d      	sub	sp, #116	; 0x74
 801be9c:	4614      	mov	r4, r2
 801be9e:	4698      	mov	r8, r3
 801bea0:	4606      	mov	r6, r0
 801bea2:	b118      	cbz	r0, 801beac <_vfiprintf_r+0x18>
 801bea4:	6983      	ldr	r3, [r0, #24]
 801bea6:	b90b      	cbnz	r3, 801beac <_vfiprintf_r+0x18>
 801bea8:	f7ff fa8a 	bl	801b3c0 <__sinit>
 801beac:	4b89      	ldr	r3, [pc, #548]	; (801c0d4 <_vfiprintf_r+0x240>)
 801beae:	429d      	cmp	r5, r3
 801beb0:	d11b      	bne.n	801beea <_vfiprintf_r+0x56>
 801beb2:	6875      	ldr	r5, [r6, #4]
 801beb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801beb6:	07d9      	lsls	r1, r3, #31
 801beb8:	d405      	bmi.n	801bec6 <_vfiprintf_r+0x32>
 801beba:	89ab      	ldrh	r3, [r5, #12]
 801bebc:	059a      	lsls	r2, r3, #22
 801bebe:	d402      	bmi.n	801bec6 <_vfiprintf_r+0x32>
 801bec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bec2:	f7ff fb40 	bl	801b546 <__retarget_lock_acquire_recursive>
 801bec6:	89ab      	ldrh	r3, [r5, #12]
 801bec8:	071b      	lsls	r3, r3, #28
 801beca:	d501      	bpl.n	801bed0 <_vfiprintf_r+0x3c>
 801becc:	692b      	ldr	r3, [r5, #16]
 801bece:	b9eb      	cbnz	r3, 801bf0c <_vfiprintf_r+0x78>
 801bed0:	4629      	mov	r1, r5
 801bed2:	4630      	mov	r0, r6
 801bed4:	f7ff fdf0 	bl	801bab8 <__swsetup_r>
 801bed8:	b1c0      	cbz	r0, 801bf0c <_vfiprintf_r+0x78>
 801beda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bedc:	07dc      	lsls	r4, r3, #31
 801bede:	d50e      	bpl.n	801befe <_vfiprintf_r+0x6a>
 801bee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bee4:	b01d      	add	sp, #116	; 0x74
 801bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beea:	4b7b      	ldr	r3, [pc, #492]	; (801c0d8 <_vfiprintf_r+0x244>)
 801beec:	429d      	cmp	r5, r3
 801beee:	d101      	bne.n	801bef4 <_vfiprintf_r+0x60>
 801bef0:	68b5      	ldr	r5, [r6, #8]
 801bef2:	e7df      	b.n	801beb4 <_vfiprintf_r+0x20>
 801bef4:	4b79      	ldr	r3, [pc, #484]	; (801c0dc <_vfiprintf_r+0x248>)
 801bef6:	429d      	cmp	r5, r3
 801bef8:	bf08      	it	eq
 801befa:	68f5      	ldreq	r5, [r6, #12]
 801befc:	e7da      	b.n	801beb4 <_vfiprintf_r+0x20>
 801befe:	89ab      	ldrh	r3, [r5, #12]
 801bf00:	0598      	lsls	r0, r3, #22
 801bf02:	d4ed      	bmi.n	801bee0 <_vfiprintf_r+0x4c>
 801bf04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf06:	f7ff fb1f 	bl	801b548 <__retarget_lock_release_recursive>
 801bf0a:	e7e9      	b.n	801bee0 <_vfiprintf_r+0x4c>
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	9309      	str	r3, [sp, #36]	; 0x24
 801bf10:	2320      	movs	r3, #32
 801bf12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bf16:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf1a:	2330      	movs	r3, #48	; 0x30
 801bf1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c0e0 <_vfiprintf_r+0x24c>
 801bf20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bf24:	f04f 0901 	mov.w	r9, #1
 801bf28:	4623      	mov	r3, r4
 801bf2a:	469a      	mov	sl, r3
 801bf2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf30:	b10a      	cbz	r2, 801bf36 <_vfiprintf_r+0xa2>
 801bf32:	2a25      	cmp	r2, #37	; 0x25
 801bf34:	d1f9      	bne.n	801bf2a <_vfiprintf_r+0x96>
 801bf36:	ebba 0b04 	subs.w	fp, sl, r4
 801bf3a:	d00b      	beq.n	801bf54 <_vfiprintf_r+0xc0>
 801bf3c:	465b      	mov	r3, fp
 801bf3e:	4622      	mov	r2, r4
 801bf40:	4629      	mov	r1, r5
 801bf42:	4630      	mov	r0, r6
 801bf44:	f7ff ff93 	bl	801be6e <__sfputs_r>
 801bf48:	3001      	adds	r0, #1
 801bf4a:	f000 80aa 	beq.w	801c0a2 <_vfiprintf_r+0x20e>
 801bf4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf50:	445a      	add	r2, fp
 801bf52:	9209      	str	r2, [sp, #36]	; 0x24
 801bf54:	f89a 3000 	ldrb.w	r3, [sl]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	f000 80a2 	beq.w	801c0a2 <_vfiprintf_r+0x20e>
 801bf5e:	2300      	movs	r3, #0
 801bf60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bf64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf68:	f10a 0a01 	add.w	sl, sl, #1
 801bf6c:	9304      	str	r3, [sp, #16]
 801bf6e:	9307      	str	r3, [sp, #28]
 801bf70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bf74:	931a      	str	r3, [sp, #104]	; 0x68
 801bf76:	4654      	mov	r4, sl
 801bf78:	2205      	movs	r2, #5
 801bf7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf7e:	4858      	ldr	r0, [pc, #352]	; (801c0e0 <_vfiprintf_r+0x24c>)
 801bf80:	f7ec ff7e 	bl	8008e80 <memchr>
 801bf84:	9a04      	ldr	r2, [sp, #16]
 801bf86:	b9d8      	cbnz	r0, 801bfc0 <_vfiprintf_r+0x12c>
 801bf88:	06d1      	lsls	r1, r2, #27
 801bf8a:	bf44      	itt	mi
 801bf8c:	2320      	movmi	r3, #32
 801bf8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf92:	0713      	lsls	r3, r2, #28
 801bf94:	bf44      	itt	mi
 801bf96:	232b      	movmi	r3, #43	; 0x2b
 801bf98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf9c:	f89a 3000 	ldrb.w	r3, [sl]
 801bfa0:	2b2a      	cmp	r3, #42	; 0x2a
 801bfa2:	d015      	beq.n	801bfd0 <_vfiprintf_r+0x13c>
 801bfa4:	9a07      	ldr	r2, [sp, #28]
 801bfa6:	4654      	mov	r4, sl
 801bfa8:	2000      	movs	r0, #0
 801bfaa:	f04f 0c0a 	mov.w	ip, #10
 801bfae:	4621      	mov	r1, r4
 801bfb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bfb4:	3b30      	subs	r3, #48	; 0x30
 801bfb6:	2b09      	cmp	r3, #9
 801bfb8:	d94e      	bls.n	801c058 <_vfiprintf_r+0x1c4>
 801bfba:	b1b0      	cbz	r0, 801bfea <_vfiprintf_r+0x156>
 801bfbc:	9207      	str	r2, [sp, #28]
 801bfbe:	e014      	b.n	801bfea <_vfiprintf_r+0x156>
 801bfc0:	eba0 0308 	sub.w	r3, r0, r8
 801bfc4:	fa09 f303 	lsl.w	r3, r9, r3
 801bfc8:	4313      	orrs	r3, r2
 801bfca:	9304      	str	r3, [sp, #16]
 801bfcc:	46a2      	mov	sl, r4
 801bfce:	e7d2      	b.n	801bf76 <_vfiprintf_r+0xe2>
 801bfd0:	9b03      	ldr	r3, [sp, #12]
 801bfd2:	1d19      	adds	r1, r3, #4
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	9103      	str	r1, [sp, #12]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	bfbb      	ittet	lt
 801bfdc:	425b      	neglt	r3, r3
 801bfde:	f042 0202 	orrlt.w	r2, r2, #2
 801bfe2:	9307      	strge	r3, [sp, #28]
 801bfe4:	9307      	strlt	r3, [sp, #28]
 801bfe6:	bfb8      	it	lt
 801bfe8:	9204      	strlt	r2, [sp, #16]
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	2b2e      	cmp	r3, #46	; 0x2e
 801bfee:	d10c      	bne.n	801c00a <_vfiprintf_r+0x176>
 801bff0:	7863      	ldrb	r3, [r4, #1]
 801bff2:	2b2a      	cmp	r3, #42	; 0x2a
 801bff4:	d135      	bne.n	801c062 <_vfiprintf_r+0x1ce>
 801bff6:	9b03      	ldr	r3, [sp, #12]
 801bff8:	1d1a      	adds	r2, r3, #4
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	9203      	str	r2, [sp, #12]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	bfb8      	it	lt
 801c002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c006:	3402      	adds	r4, #2
 801c008:	9305      	str	r3, [sp, #20]
 801c00a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c0f0 <_vfiprintf_r+0x25c>
 801c00e:	7821      	ldrb	r1, [r4, #0]
 801c010:	2203      	movs	r2, #3
 801c012:	4650      	mov	r0, sl
 801c014:	f7ec ff34 	bl	8008e80 <memchr>
 801c018:	b140      	cbz	r0, 801c02c <_vfiprintf_r+0x198>
 801c01a:	2340      	movs	r3, #64	; 0x40
 801c01c:	eba0 000a 	sub.w	r0, r0, sl
 801c020:	fa03 f000 	lsl.w	r0, r3, r0
 801c024:	9b04      	ldr	r3, [sp, #16]
 801c026:	4303      	orrs	r3, r0
 801c028:	3401      	adds	r4, #1
 801c02a:	9304      	str	r3, [sp, #16]
 801c02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c030:	482c      	ldr	r0, [pc, #176]	; (801c0e4 <_vfiprintf_r+0x250>)
 801c032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c036:	2206      	movs	r2, #6
 801c038:	f7ec ff22 	bl	8008e80 <memchr>
 801c03c:	2800      	cmp	r0, #0
 801c03e:	d03f      	beq.n	801c0c0 <_vfiprintf_r+0x22c>
 801c040:	4b29      	ldr	r3, [pc, #164]	; (801c0e8 <_vfiprintf_r+0x254>)
 801c042:	bb1b      	cbnz	r3, 801c08c <_vfiprintf_r+0x1f8>
 801c044:	9b03      	ldr	r3, [sp, #12]
 801c046:	3307      	adds	r3, #7
 801c048:	f023 0307 	bic.w	r3, r3, #7
 801c04c:	3308      	adds	r3, #8
 801c04e:	9303      	str	r3, [sp, #12]
 801c050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c052:	443b      	add	r3, r7
 801c054:	9309      	str	r3, [sp, #36]	; 0x24
 801c056:	e767      	b.n	801bf28 <_vfiprintf_r+0x94>
 801c058:	fb0c 3202 	mla	r2, ip, r2, r3
 801c05c:	460c      	mov	r4, r1
 801c05e:	2001      	movs	r0, #1
 801c060:	e7a5      	b.n	801bfae <_vfiprintf_r+0x11a>
 801c062:	2300      	movs	r3, #0
 801c064:	3401      	adds	r4, #1
 801c066:	9305      	str	r3, [sp, #20]
 801c068:	4619      	mov	r1, r3
 801c06a:	f04f 0c0a 	mov.w	ip, #10
 801c06e:	4620      	mov	r0, r4
 801c070:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c074:	3a30      	subs	r2, #48	; 0x30
 801c076:	2a09      	cmp	r2, #9
 801c078:	d903      	bls.n	801c082 <_vfiprintf_r+0x1ee>
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d0c5      	beq.n	801c00a <_vfiprintf_r+0x176>
 801c07e:	9105      	str	r1, [sp, #20]
 801c080:	e7c3      	b.n	801c00a <_vfiprintf_r+0x176>
 801c082:	fb0c 2101 	mla	r1, ip, r1, r2
 801c086:	4604      	mov	r4, r0
 801c088:	2301      	movs	r3, #1
 801c08a:	e7f0      	b.n	801c06e <_vfiprintf_r+0x1da>
 801c08c:	ab03      	add	r3, sp, #12
 801c08e:	9300      	str	r3, [sp, #0]
 801c090:	462a      	mov	r2, r5
 801c092:	4b16      	ldr	r3, [pc, #88]	; (801c0ec <_vfiprintf_r+0x258>)
 801c094:	a904      	add	r1, sp, #16
 801c096:	4630      	mov	r0, r6
 801c098:	f3af 8000 	nop.w
 801c09c:	4607      	mov	r7, r0
 801c09e:	1c78      	adds	r0, r7, #1
 801c0a0:	d1d6      	bne.n	801c050 <_vfiprintf_r+0x1bc>
 801c0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c0a4:	07d9      	lsls	r1, r3, #31
 801c0a6:	d405      	bmi.n	801c0b4 <_vfiprintf_r+0x220>
 801c0a8:	89ab      	ldrh	r3, [r5, #12]
 801c0aa:	059a      	lsls	r2, r3, #22
 801c0ac:	d402      	bmi.n	801c0b4 <_vfiprintf_r+0x220>
 801c0ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c0b0:	f7ff fa4a 	bl	801b548 <__retarget_lock_release_recursive>
 801c0b4:	89ab      	ldrh	r3, [r5, #12]
 801c0b6:	065b      	lsls	r3, r3, #25
 801c0b8:	f53f af12 	bmi.w	801bee0 <_vfiprintf_r+0x4c>
 801c0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c0be:	e711      	b.n	801bee4 <_vfiprintf_r+0x50>
 801c0c0:	ab03      	add	r3, sp, #12
 801c0c2:	9300      	str	r3, [sp, #0]
 801c0c4:	462a      	mov	r2, r5
 801c0c6:	4b09      	ldr	r3, [pc, #36]	; (801c0ec <_vfiprintf_r+0x258>)
 801c0c8:	a904      	add	r1, sp, #16
 801c0ca:	4630      	mov	r0, r6
 801c0cc:	f000 f880 	bl	801c1d0 <_printf_i>
 801c0d0:	e7e4      	b.n	801c09c <_vfiprintf_r+0x208>
 801c0d2:	bf00      	nop
 801c0d4:	24008534 	.word	0x24008534
 801c0d8:	24008554 	.word	0x24008554
 801c0dc:	24008514 	.word	0x24008514
 801c0e0:	24008578 	.word	0x24008578
 801c0e4:	24008582 	.word	0x24008582
 801c0e8:	00000000 	.word	0x00000000
 801c0ec:	0801be6f 	.word	0x0801be6f
 801c0f0:	2400857e 	.word	0x2400857e

0801c0f4 <_printf_common>:
 801c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0f8:	4616      	mov	r6, r2
 801c0fa:	4699      	mov	r9, r3
 801c0fc:	688a      	ldr	r2, [r1, #8]
 801c0fe:	690b      	ldr	r3, [r1, #16]
 801c100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c104:	4293      	cmp	r3, r2
 801c106:	bfb8      	it	lt
 801c108:	4613      	movlt	r3, r2
 801c10a:	6033      	str	r3, [r6, #0]
 801c10c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c110:	4607      	mov	r7, r0
 801c112:	460c      	mov	r4, r1
 801c114:	b10a      	cbz	r2, 801c11a <_printf_common+0x26>
 801c116:	3301      	adds	r3, #1
 801c118:	6033      	str	r3, [r6, #0]
 801c11a:	6823      	ldr	r3, [r4, #0]
 801c11c:	0699      	lsls	r1, r3, #26
 801c11e:	bf42      	ittt	mi
 801c120:	6833      	ldrmi	r3, [r6, #0]
 801c122:	3302      	addmi	r3, #2
 801c124:	6033      	strmi	r3, [r6, #0]
 801c126:	6825      	ldr	r5, [r4, #0]
 801c128:	f015 0506 	ands.w	r5, r5, #6
 801c12c:	d106      	bne.n	801c13c <_printf_common+0x48>
 801c12e:	f104 0a19 	add.w	sl, r4, #25
 801c132:	68e3      	ldr	r3, [r4, #12]
 801c134:	6832      	ldr	r2, [r6, #0]
 801c136:	1a9b      	subs	r3, r3, r2
 801c138:	42ab      	cmp	r3, r5
 801c13a:	dc26      	bgt.n	801c18a <_printf_common+0x96>
 801c13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c140:	1e13      	subs	r3, r2, #0
 801c142:	6822      	ldr	r2, [r4, #0]
 801c144:	bf18      	it	ne
 801c146:	2301      	movne	r3, #1
 801c148:	0692      	lsls	r2, r2, #26
 801c14a:	d42b      	bmi.n	801c1a4 <_printf_common+0xb0>
 801c14c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c150:	4649      	mov	r1, r9
 801c152:	4638      	mov	r0, r7
 801c154:	47c0      	blx	r8
 801c156:	3001      	adds	r0, #1
 801c158:	d01e      	beq.n	801c198 <_printf_common+0xa4>
 801c15a:	6823      	ldr	r3, [r4, #0]
 801c15c:	68e5      	ldr	r5, [r4, #12]
 801c15e:	6832      	ldr	r2, [r6, #0]
 801c160:	f003 0306 	and.w	r3, r3, #6
 801c164:	2b04      	cmp	r3, #4
 801c166:	bf08      	it	eq
 801c168:	1aad      	subeq	r5, r5, r2
 801c16a:	68a3      	ldr	r3, [r4, #8]
 801c16c:	6922      	ldr	r2, [r4, #16]
 801c16e:	bf0c      	ite	eq
 801c170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c174:	2500      	movne	r5, #0
 801c176:	4293      	cmp	r3, r2
 801c178:	bfc4      	itt	gt
 801c17a:	1a9b      	subgt	r3, r3, r2
 801c17c:	18ed      	addgt	r5, r5, r3
 801c17e:	2600      	movs	r6, #0
 801c180:	341a      	adds	r4, #26
 801c182:	42b5      	cmp	r5, r6
 801c184:	d11a      	bne.n	801c1bc <_printf_common+0xc8>
 801c186:	2000      	movs	r0, #0
 801c188:	e008      	b.n	801c19c <_printf_common+0xa8>
 801c18a:	2301      	movs	r3, #1
 801c18c:	4652      	mov	r2, sl
 801c18e:	4649      	mov	r1, r9
 801c190:	4638      	mov	r0, r7
 801c192:	47c0      	blx	r8
 801c194:	3001      	adds	r0, #1
 801c196:	d103      	bne.n	801c1a0 <_printf_common+0xac>
 801c198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1a0:	3501      	adds	r5, #1
 801c1a2:	e7c6      	b.n	801c132 <_printf_common+0x3e>
 801c1a4:	18e1      	adds	r1, r4, r3
 801c1a6:	1c5a      	adds	r2, r3, #1
 801c1a8:	2030      	movs	r0, #48	; 0x30
 801c1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c1ae:	4422      	add	r2, r4
 801c1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c1b8:	3302      	adds	r3, #2
 801c1ba:	e7c7      	b.n	801c14c <_printf_common+0x58>
 801c1bc:	2301      	movs	r3, #1
 801c1be:	4622      	mov	r2, r4
 801c1c0:	4649      	mov	r1, r9
 801c1c2:	4638      	mov	r0, r7
 801c1c4:	47c0      	blx	r8
 801c1c6:	3001      	adds	r0, #1
 801c1c8:	d0e6      	beq.n	801c198 <_printf_common+0xa4>
 801c1ca:	3601      	adds	r6, #1
 801c1cc:	e7d9      	b.n	801c182 <_printf_common+0x8e>
	...

0801c1d0 <_printf_i>:
 801c1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1d4:	7e0f      	ldrb	r7, [r1, #24]
 801c1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c1d8:	2f78      	cmp	r7, #120	; 0x78
 801c1da:	4691      	mov	r9, r2
 801c1dc:	4680      	mov	r8, r0
 801c1de:	460c      	mov	r4, r1
 801c1e0:	469a      	mov	sl, r3
 801c1e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c1e6:	d807      	bhi.n	801c1f8 <_printf_i+0x28>
 801c1e8:	2f62      	cmp	r7, #98	; 0x62
 801c1ea:	d80a      	bhi.n	801c202 <_printf_i+0x32>
 801c1ec:	2f00      	cmp	r7, #0
 801c1ee:	f000 80d8 	beq.w	801c3a2 <_printf_i+0x1d2>
 801c1f2:	2f58      	cmp	r7, #88	; 0x58
 801c1f4:	f000 80a3 	beq.w	801c33e <_printf_i+0x16e>
 801c1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c1fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c200:	e03a      	b.n	801c278 <_printf_i+0xa8>
 801c202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c206:	2b15      	cmp	r3, #21
 801c208:	d8f6      	bhi.n	801c1f8 <_printf_i+0x28>
 801c20a:	a101      	add	r1, pc, #4	; (adr r1, 801c210 <_printf_i+0x40>)
 801c20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c210:	0801c269 	.word	0x0801c269
 801c214:	0801c27d 	.word	0x0801c27d
 801c218:	0801c1f9 	.word	0x0801c1f9
 801c21c:	0801c1f9 	.word	0x0801c1f9
 801c220:	0801c1f9 	.word	0x0801c1f9
 801c224:	0801c1f9 	.word	0x0801c1f9
 801c228:	0801c27d 	.word	0x0801c27d
 801c22c:	0801c1f9 	.word	0x0801c1f9
 801c230:	0801c1f9 	.word	0x0801c1f9
 801c234:	0801c1f9 	.word	0x0801c1f9
 801c238:	0801c1f9 	.word	0x0801c1f9
 801c23c:	0801c389 	.word	0x0801c389
 801c240:	0801c2ad 	.word	0x0801c2ad
 801c244:	0801c36b 	.word	0x0801c36b
 801c248:	0801c1f9 	.word	0x0801c1f9
 801c24c:	0801c1f9 	.word	0x0801c1f9
 801c250:	0801c3ab 	.word	0x0801c3ab
 801c254:	0801c1f9 	.word	0x0801c1f9
 801c258:	0801c2ad 	.word	0x0801c2ad
 801c25c:	0801c1f9 	.word	0x0801c1f9
 801c260:	0801c1f9 	.word	0x0801c1f9
 801c264:	0801c373 	.word	0x0801c373
 801c268:	682b      	ldr	r3, [r5, #0]
 801c26a:	1d1a      	adds	r2, r3, #4
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	602a      	str	r2, [r5, #0]
 801c270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c278:	2301      	movs	r3, #1
 801c27a:	e0a3      	b.n	801c3c4 <_printf_i+0x1f4>
 801c27c:	6820      	ldr	r0, [r4, #0]
 801c27e:	6829      	ldr	r1, [r5, #0]
 801c280:	0606      	lsls	r6, r0, #24
 801c282:	f101 0304 	add.w	r3, r1, #4
 801c286:	d50a      	bpl.n	801c29e <_printf_i+0xce>
 801c288:	680e      	ldr	r6, [r1, #0]
 801c28a:	602b      	str	r3, [r5, #0]
 801c28c:	2e00      	cmp	r6, #0
 801c28e:	da03      	bge.n	801c298 <_printf_i+0xc8>
 801c290:	232d      	movs	r3, #45	; 0x2d
 801c292:	4276      	negs	r6, r6
 801c294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c298:	485e      	ldr	r0, [pc, #376]	; (801c414 <_printf_i+0x244>)
 801c29a:	230a      	movs	r3, #10
 801c29c:	e019      	b.n	801c2d2 <_printf_i+0x102>
 801c29e:	680e      	ldr	r6, [r1, #0]
 801c2a0:	602b      	str	r3, [r5, #0]
 801c2a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c2a6:	bf18      	it	ne
 801c2a8:	b236      	sxthne	r6, r6
 801c2aa:	e7ef      	b.n	801c28c <_printf_i+0xbc>
 801c2ac:	682b      	ldr	r3, [r5, #0]
 801c2ae:	6820      	ldr	r0, [r4, #0]
 801c2b0:	1d19      	adds	r1, r3, #4
 801c2b2:	6029      	str	r1, [r5, #0]
 801c2b4:	0601      	lsls	r1, r0, #24
 801c2b6:	d501      	bpl.n	801c2bc <_printf_i+0xec>
 801c2b8:	681e      	ldr	r6, [r3, #0]
 801c2ba:	e002      	b.n	801c2c2 <_printf_i+0xf2>
 801c2bc:	0646      	lsls	r6, r0, #25
 801c2be:	d5fb      	bpl.n	801c2b8 <_printf_i+0xe8>
 801c2c0:	881e      	ldrh	r6, [r3, #0]
 801c2c2:	4854      	ldr	r0, [pc, #336]	; (801c414 <_printf_i+0x244>)
 801c2c4:	2f6f      	cmp	r7, #111	; 0x6f
 801c2c6:	bf0c      	ite	eq
 801c2c8:	2308      	moveq	r3, #8
 801c2ca:	230a      	movne	r3, #10
 801c2cc:	2100      	movs	r1, #0
 801c2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c2d2:	6865      	ldr	r5, [r4, #4]
 801c2d4:	60a5      	str	r5, [r4, #8]
 801c2d6:	2d00      	cmp	r5, #0
 801c2d8:	bfa2      	ittt	ge
 801c2da:	6821      	ldrge	r1, [r4, #0]
 801c2dc:	f021 0104 	bicge.w	r1, r1, #4
 801c2e0:	6021      	strge	r1, [r4, #0]
 801c2e2:	b90e      	cbnz	r6, 801c2e8 <_printf_i+0x118>
 801c2e4:	2d00      	cmp	r5, #0
 801c2e6:	d04d      	beq.n	801c384 <_printf_i+0x1b4>
 801c2e8:	4615      	mov	r5, r2
 801c2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 801c2ee:	fb03 6711 	mls	r7, r3, r1, r6
 801c2f2:	5dc7      	ldrb	r7, [r0, r7]
 801c2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c2f8:	4637      	mov	r7, r6
 801c2fa:	42bb      	cmp	r3, r7
 801c2fc:	460e      	mov	r6, r1
 801c2fe:	d9f4      	bls.n	801c2ea <_printf_i+0x11a>
 801c300:	2b08      	cmp	r3, #8
 801c302:	d10b      	bne.n	801c31c <_printf_i+0x14c>
 801c304:	6823      	ldr	r3, [r4, #0]
 801c306:	07de      	lsls	r6, r3, #31
 801c308:	d508      	bpl.n	801c31c <_printf_i+0x14c>
 801c30a:	6923      	ldr	r3, [r4, #16]
 801c30c:	6861      	ldr	r1, [r4, #4]
 801c30e:	4299      	cmp	r1, r3
 801c310:	bfde      	ittt	le
 801c312:	2330      	movle	r3, #48	; 0x30
 801c314:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c318:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c31c:	1b52      	subs	r2, r2, r5
 801c31e:	6122      	str	r2, [r4, #16]
 801c320:	f8cd a000 	str.w	sl, [sp]
 801c324:	464b      	mov	r3, r9
 801c326:	aa03      	add	r2, sp, #12
 801c328:	4621      	mov	r1, r4
 801c32a:	4640      	mov	r0, r8
 801c32c:	f7ff fee2 	bl	801c0f4 <_printf_common>
 801c330:	3001      	adds	r0, #1
 801c332:	d14c      	bne.n	801c3ce <_printf_i+0x1fe>
 801c334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c338:	b004      	add	sp, #16
 801c33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c33e:	4835      	ldr	r0, [pc, #212]	; (801c414 <_printf_i+0x244>)
 801c340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c344:	6829      	ldr	r1, [r5, #0]
 801c346:	6823      	ldr	r3, [r4, #0]
 801c348:	f851 6b04 	ldr.w	r6, [r1], #4
 801c34c:	6029      	str	r1, [r5, #0]
 801c34e:	061d      	lsls	r5, r3, #24
 801c350:	d514      	bpl.n	801c37c <_printf_i+0x1ac>
 801c352:	07df      	lsls	r7, r3, #31
 801c354:	bf44      	itt	mi
 801c356:	f043 0320 	orrmi.w	r3, r3, #32
 801c35a:	6023      	strmi	r3, [r4, #0]
 801c35c:	b91e      	cbnz	r6, 801c366 <_printf_i+0x196>
 801c35e:	6823      	ldr	r3, [r4, #0]
 801c360:	f023 0320 	bic.w	r3, r3, #32
 801c364:	6023      	str	r3, [r4, #0]
 801c366:	2310      	movs	r3, #16
 801c368:	e7b0      	b.n	801c2cc <_printf_i+0xfc>
 801c36a:	6823      	ldr	r3, [r4, #0]
 801c36c:	f043 0320 	orr.w	r3, r3, #32
 801c370:	6023      	str	r3, [r4, #0]
 801c372:	2378      	movs	r3, #120	; 0x78
 801c374:	4828      	ldr	r0, [pc, #160]	; (801c418 <_printf_i+0x248>)
 801c376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c37a:	e7e3      	b.n	801c344 <_printf_i+0x174>
 801c37c:	0659      	lsls	r1, r3, #25
 801c37e:	bf48      	it	mi
 801c380:	b2b6      	uxthmi	r6, r6
 801c382:	e7e6      	b.n	801c352 <_printf_i+0x182>
 801c384:	4615      	mov	r5, r2
 801c386:	e7bb      	b.n	801c300 <_printf_i+0x130>
 801c388:	682b      	ldr	r3, [r5, #0]
 801c38a:	6826      	ldr	r6, [r4, #0]
 801c38c:	6961      	ldr	r1, [r4, #20]
 801c38e:	1d18      	adds	r0, r3, #4
 801c390:	6028      	str	r0, [r5, #0]
 801c392:	0635      	lsls	r5, r6, #24
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	d501      	bpl.n	801c39c <_printf_i+0x1cc>
 801c398:	6019      	str	r1, [r3, #0]
 801c39a:	e002      	b.n	801c3a2 <_printf_i+0x1d2>
 801c39c:	0670      	lsls	r0, r6, #25
 801c39e:	d5fb      	bpl.n	801c398 <_printf_i+0x1c8>
 801c3a0:	8019      	strh	r1, [r3, #0]
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	6123      	str	r3, [r4, #16]
 801c3a6:	4615      	mov	r5, r2
 801c3a8:	e7ba      	b.n	801c320 <_printf_i+0x150>
 801c3aa:	682b      	ldr	r3, [r5, #0]
 801c3ac:	1d1a      	adds	r2, r3, #4
 801c3ae:	602a      	str	r2, [r5, #0]
 801c3b0:	681d      	ldr	r5, [r3, #0]
 801c3b2:	6862      	ldr	r2, [r4, #4]
 801c3b4:	2100      	movs	r1, #0
 801c3b6:	4628      	mov	r0, r5
 801c3b8:	f7ec fd62 	bl	8008e80 <memchr>
 801c3bc:	b108      	cbz	r0, 801c3c2 <_printf_i+0x1f2>
 801c3be:	1b40      	subs	r0, r0, r5
 801c3c0:	6060      	str	r0, [r4, #4]
 801c3c2:	6863      	ldr	r3, [r4, #4]
 801c3c4:	6123      	str	r3, [r4, #16]
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3cc:	e7a8      	b.n	801c320 <_printf_i+0x150>
 801c3ce:	6923      	ldr	r3, [r4, #16]
 801c3d0:	462a      	mov	r2, r5
 801c3d2:	4649      	mov	r1, r9
 801c3d4:	4640      	mov	r0, r8
 801c3d6:	47d0      	blx	sl
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d0ab      	beq.n	801c334 <_printf_i+0x164>
 801c3dc:	6823      	ldr	r3, [r4, #0]
 801c3de:	079b      	lsls	r3, r3, #30
 801c3e0:	d413      	bmi.n	801c40a <_printf_i+0x23a>
 801c3e2:	68e0      	ldr	r0, [r4, #12]
 801c3e4:	9b03      	ldr	r3, [sp, #12]
 801c3e6:	4298      	cmp	r0, r3
 801c3e8:	bfb8      	it	lt
 801c3ea:	4618      	movlt	r0, r3
 801c3ec:	e7a4      	b.n	801c338 <_printf_i+0x168>
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	4632      	mov	r2, r6
 801c3f2:	4649      	mov	r1, r9
 801c3f4:	4640      	mov	r0, r8
 801c3f6:	47d0      	blx	sl
 801c3f8:	3001      	adds	r0, #1
 801c3fa:	d09b      	beq.n	801c334 <_printf_i+0x164>
 801c3fc:	3501      	adds	r5, #1
 801c3fe:	68e3      	ldr	r3, [r4, #12]
 801c400:	9903      	ldr	r1, [sp, #12]
 801c402:	1a5b      	subs	r3, r3, r1
 801c404:	42ab      	cmp	r3, r5
 801c406:	dcf2      	bgt.n	801c3ee <_printf_i+0x21e>
 801c408:	e7eb      	b.n	801c3e2 <_printf_i+0x212>
 801c40a:	2500      	movs	r5, #0
 801c40c:	f104 0619 	add.w	r6, r4, #25
 801c410:	e7f5      	b.n	801c3fe <_printf_i+0x22e>
 801c412:	bf00      	nop
 801c414:	24008589 	.word	0x24008589
 801c418:	2400859a 	.word	0x2400859a

0801c41c <_read_r>:
 801c41c:	b538      	push	{r3, r4, r5, lr}
 801c41e:	4d07      	ldr	r5, [pc, #28]	; (801c43c <_read_r+0x20>)
 801c420:	4604      	mov	r4, r0
 801c422:	4608      	mov	r0, r1
 801c424:	4611      	mov	r1, r2
 801c426:	2200      	movs	r2, #0
 801c428:	602a      	str	r2, [r5, #0]
 801c42a:	461a      	mov	r2, r3
 801c42c:	f7ee ffb6 	bl	800b39c <_read>
 801c430:	1c43      	adds	r3, r0, #1
 801c432:	d102      	bne.n	801c43a <_read_r+0x1e>
 801c434:	682b      	ldr	r3, [r5, #0]
 801c436:	b103      	cbz	r3, 801c43a <_read_r+0x1e>
 801c438:	6023      	str	r3, [r4, #0]
 801c43a:	bd38      	pop	{r3, r4, r5, pc}
 801c43c:	24035130 	.word	0x24035130

0801c440 <_fstat_r>:
 801c440:	b538      	push	{r3, r4, r5, lr}
 801c442:	4d07      	ldr	r5, [pc, #28]	; (801c460 <_fstat_r+0x20>)
 801c444:	2300      	movs	r3, #0
 801c446:	4604      	mov	r4, r0
 801c448:	4608      	mov	r0, r1
 801c44a:	4611      	mov	r1, r2
 801c44c:	602b      	str	r3, [r5, #0]
 801c44e:	f7ee ffea 	bl	800b426 <_fstat>
 801c452:	1c43      	adds	r3, r0, #1
 801c454:	d102      	bne.n	801c45c <_fstat_r+0x1c>
 801c456:	682b      	ldr	r3, [r5, #0]
 801c458:	b103      	cbz	r3, 801c45c <_fstat_r+0x1c>
 801c45a:	6023      	str	r3, [r4, #0]
 801c45c:	bd38      	pop	{r3, r4, r5, pc}
 801c45e:	bf00      	nop
 801c460:	24035130 	.word	0x24035130

0801c464 <_isatty_r>:
 801c464:	b538      	push	{r3, r4, r5, lr}
 801c466:	4d06      	ldr	r5, [pc, #24]	; (801c480 <_isatty_r+0x1c>)
 801c468:	2300      	movs	r3, #0
 801c46a:	4604      	mov	r4, r0
 801c46c:	4608      	mov	r0, r1
 801c46e:	602b      	str	r3, [r5, #0]
 801c470:	f7ee ffe9 	bl	800b446 <_isatty>
 801c474:	1c43      	adds	r3, r0, #1
 801c476:	d102      	bne.n	801c47e <_isatty_r+0x1a>
 801c478:	682b      	ldr	r3, [r5, #0]
 801c47a:	b103      	cbz	r3, 801c47e <_isatty_r+0x1a>
 801c47c:	6023      	str	r3, [r4, #0]
 801c47e:	bd38      	pop	{r3, r4, r5, pc}
 801c480:	24035130 	.word	0x24035130

0801c484 <_init>:
 801c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c486:	bf00      	nop
 801c488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c48a:	bc08      	pop	{r3}
 801c48c:	469e      	mov	lr, r3
 801c48e:	4770      	bx	lr

0801c490 <_fini>:
 801c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c492:	bf00      	nop
 801c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c496:	bc08      	pop	{r3}
 801c498:	469e      	mov	lr, r3
 801c49a:	4770      	bx	lr
